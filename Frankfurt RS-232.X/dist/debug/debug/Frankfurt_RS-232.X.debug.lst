

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Oct 06 22:18:10 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   107                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   108                           	psect	pa_nodes,global,class=CODE,delta=1
   109  0000                     tblptru	equ	0xFF8
   110                           tblptrh	equ	0xFF7
   111                           tblptrl	equ	0xFF6
   112                           tablat	equ	0xFF5
   113                           prodh	equ	0xFF4
   114                           prodl	equ	0xFF3
   115                           intcon	equ	0xFF2
   116                           indf0	equ	0xFEF
   117                           fsr0h	equ	0xFEA
   118                           fsr0l	equ	0xFE9
   119                           wreg	equ	0xFE8
   120                           indf1	equ	0xFE7
   121                           postinc1	equ	0xFE6
   122                           postdec1	equ	0xFE5
   123                           fsr1h	equ	0xFE2
   124                           fsr1l	equ	0xFE1
   125                           indf2	equ	0xFDF
   126                           postinc2	equ	0xFDE
   127                           postdec2	equ	0xFDD
   128                           plusw2	equ	0xFDB
   129                           fsr2h	equ	0xFDA
   130                           fsr2l	equ	0xFD9
   131                           status	equ	0xFD8
   132                           
   133                           	psect	mediumconst
   134  006BC2                     __pmediumconst:
   135                           	opt stack 0
   136  006BC2                     _octpowers:
   137                           	opt stack 0
   138  006BC2  0001               	dw	1
   139  006BC4  0000               	dw	0
   140  006BC6  0008               	dw	8
   141  006BC8  0000               	dw	0
   142  006BCA  0040               	dw	64
   143  006BCC  0000               	dw	0
   144  006BCE  0200               	dw	512
   145  006BD0  0000               	dw	0
   146  006BD2  1000               	dw	4096
   147  006BD4  0000               	dw	0
   148  006BD6  8000               	dw	32768
   149  006BD8  0000               	dw	0
   150  006BDA  0000               	dw	0
   151  006BDC  0004               	dw	4
   152  006BDE  0000               	dw	0
   153  006BE0  0020               	dw	32
   154  006BE2  0000               	dw	0
   155  006BE4  0100               	dw	256
   156  006BE6  0000               	dw	0
   157  006BE8  0800               	dw	2048
   158  006BEA  0000               	dw	0
   159  006BEC  4000               	dw	16384
   160  006BEE  0000               	dw	0
   161  006BF0  0000               	dw	0
   162  006BF2                     __end_of_octpowers:
   163                           	opt stack 0
   164  006BF2                     _dpowers:
   165                           	opt stack 0
   166  006BF2  0001               	dw	1
   167  006BF4  0000               	dw	0
   168  006BF6  000A               	dw	10
   169  006BF8  0000               	dw	0
   170  006BFA  0064               	dw	100
   171  006BFC  0000               	dw	0
   172  006BFE  03E8               	dw	1000
   173  006C00  0000               	dw	0
   174  006C02  2710               	dw	10000
   175  006C04  0000               	dw	0
   176  006C06  86A0               	dw	34464
   177  006C08  0001               	dw	1
   178  006C0A  4240               	dw	16960
   179  006C0C  000F               	dw	15
   180  006C0E  9680               	dw	38528
   181  006C10  0098               	dw	152
   182  006C12  E100               	dw	57600
   183  006C14  05F5               	dw	1525
   184  006C16  CA00               	dw	51712
   185  006C18  3B9A               	dw	15258
   186  006C1A                     __end_of_dpowers:
   187                           	opt stack 0
   188  006C1A                     _hexpowers:
   189                           	opt stack 0
   190  006C1A  0001               	dw	1
   191  006C1C  0000               	dw	0
   192  006C1E  0010               	dw	16
   193  006C20  0000               	dw	0
   194  006C22  0100               	dw	256
   195  006C24  0000               	dw	0
   196  006C26  1000               	dw	4096
   197  006C28  0000               	dw	0
   198  006C2A  0000               	dw	0
   199  006C2C  0001               	dw	1
   200  006C2E  0000               	dw	0
   201  006C30  0010               	dw	16
   202  006C32  0000               	dw	0
   203  006C34  0100               	dw	256
   204  006C36  0000               	dw	0
   205  006C38  1000               	dw	4096
   206  006C3A                     __end_of_hexpowers:
   207                           	opt stack 0
   208  0000                     _BRGCON1	set	3952
   209  0000                     _BRGCON2	set	3953
   210  0000                     _BRGCON3	set	3954
   211  0000                     _BSEL0	set	3576
   212  0000                     _CANCON	set	3951
   213  0000                     _CIOCON	set	3955
   214  0000                     _COMSTATbits	set	3956
   215  0000                     _ECANCON	set	3959
   216  0000                     _EEADR	set	4009
   217  0000                     _EECON1bits	set	4006
   218  0000                     _EECON2	set	4007
   219  0000                     _EEDATA	set	4008
   220  0000                     _INTCONbits	set	4082
   221  0000                     _MSEL0	set	3568
   222  0000                     _MSEL1	set	3569
   223  0000                     _MSEL2	set	3570
   224  0000                     _OSCCONbits	set	4051
   225  0000                     _OSCTUNEbits	set	3995
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _RCREG	set	4014
   229  0000                     _RCSTA	set	4011
   230  0000                     _RCSTAbits	set	4011
   231  0000                     _RXB1CONbits	set	3920
   232  0000                     _RXERRCNT	set	3957
   233  0000                     _RXF0EIDH	set	3842
   234  0000                     _RXF0EIDL	set	3843
   235  0000                     _RXF0SIDH	set	3840
   236  0000                     _RXF0SIDL	set	3841
   237  0000                     _RXF10EIDH	set	3446
   238  0000                     _RXF10EIDL	set	3447
   239  0000                     _RXF10SIDH	set	3444
   240  0000                     _RXF10SIDL	set	3445
   241  0000                     _RXF11EIDH	set	3450
   242  0000                     _RXF11EIDL	set	3451
   243  0000                     _RXF11SIDH	set	3448
   244  0000                     _RXF11SIDL	set	3449
   245  0000                     _RXF12EIDH	set	3458
   246  0000                     _RXF12EIDL	set	3459
   247  0000                     _RXF12SIDH	set	3456
   248  0000                     _RXF12SIDL	set	3457
   249  0000                     _RXF13EIDH	set	3462
   250  0000                     _RXF13EIDL	set	3463
   251  0000                     _RXF13SIDH	set	3460
   252  0000                     _RXF13SIDL	set	3461
   253  0000                     _RXF14EIDH	set	3466
   254  0000                     _RXF14EIDL	set	3467
   255  0000                     _RXF14SIDH	set	3464
   256  0000                     _RXF14SIDL	set	3465
   257  0000                     _RXF15EIDH	set	3474
   258  0000                     _RXF15EIDL	set	3475
   259  0000                     _RXF15SIDH	set	3472
   260  0000                     _RXF15SIDL	set	3473
   261  0000                     _RXF1EIDH	set	3846
   262  0000                     _RXF1EIDL	set	3847
   263  0000                     _RXF1SIDH	set	3844
   264  0000                     _RXF1SIDL	set	3845
   265  0000                     _RXF2EIDH	set	3850
   266  0000                     _RXF2EIDL	set	3851
   267  0000                     _RXF2SIDH	set	3848
   268  0000                     _RXF2SIDL	set	3849
   269  0000                     _RXF3EIDH	set	3854
   270  0000                     _RXF3EIDL	set	3855
   271  0000                     _RXF3SIDH	set	3852
   272  0000                     _RXF3SIDL	set	3853
   273  0000                     _RXF4EIDH	set	3858
   274  0000                     _RXF4EIDL	set	3859
   275  0000                     _RXF4SIDH	set	3856
   276  0000                     _RXF4SIDL	set	3857
   277  0000                     _RXF5EIDH	set	3862
   278  0000                     _RXF5EIDL	set	3863
   279  0000                     _RXF5SIDH	set	3860
   280  0000                     _RXF5SIDL	set	3861
   281  0000                     _RXF6EIDH	set	3426
   282  0000                     _RXF6EIDL	set	3427
   283  0000                     _RXF6SIDH	set	3424
   284  0000                     _RXF6SIDL	set	3425
   285  0000                     _RXF7EIDH	set	3430
   286  0000                     _RXF7EIDL	set	3431
   287  0000                     _RXF7SIDH	set	3428
   288  0000                     _RXF7SIDL	set	3429
   289  0000                     _RXF8EIDH	set	3434
   290  0000                     _RXF8EIDL	set	3435
   291  0000                     _RXF8SIDH	set	3432
   292  0000                     _RXF8SIDL	set	3433
   293  0000                     _RXF9EIDH	set	3442
   294  0000                     _RXF9EIDL	set	3443
   295  0000                     _RXF9SIDH	set	3440
   296  0000                     _RXF9SIDL	set	3441
   297  0000                     _RXFBCON0	set	3552
   298  0000                     _RXFBCON1	set	3553
   299  0000                     _RXFBCON2	set	3554
   300  0000                     _RXFBCON3	set	3555
   301  0000                     _RXFBCON4	set	3556
   302  0000                     _RXFBCON5	set	3557
   303  0000                     _RXFBCON6	set	3558
   304  0000                     _RXFBCON7	set	3559
   305  0000                     _RXFCON0	set	3540
   306  0000                     _RXFCON1	set	3541
   307  0000                     _RXM0EIDH	set	3866
   308  0000                     _RXM0EIDL	set	3867
   309  0000                     _RXM0SIDL	set	3865
   310  0000                     _RXM1EIDH	set	3870
   311  0000                     _RXM1EIDL	set	3871
   312  0000                     _RXM1SIDL	set	3869
   313  0000                     _SPBRG	set	4015
   314  0000                     _SPBRGH	set	4016
   315  0000                     _T0CON	set	4053
   316  0000                     _T0CONbits	set	4053
   317  0000                     _TMR0H	set	4055
   318  0000                     _TMR0L	set	4054
   319  0000                     _TRISBbits	set	3987
   320  0000                     _TRISCbits	set	3988
   321  0000                     _TXERRCNT	set	3958
   322  0000                     _TXREG	set	4013
   323  0000                     _TXSTA	set	4012
   324  0000                     _TXSTAbits	set	4012
   325  0000                     _B0RXFUL	set	28935
   326  0000                     _B0TXEN	set	28610
   327  0000                     _B1RXFUL	set	29063
   328  0000                     _B1TXEN	set	28611
   329  0000                     _B2RXFUL	set	29191
   330  0000                     _B2TXEN	set	28612
   331  0000                     _B3RXFUL	set	29319
   332  0000                     _B3TXEN	set	28613
   333  0000                     _B4RXFUL	set	29447
   334  0000                     _B4TXEN	set	28614
   335  0000                     _B5RXFUL	set	29575
   336  0000                     _B5TXEN	set	28615
   337  0000                     _ERRIE	set	32029
   338  0000                     _FIFOEMPTY	set	31655
   339  0000                     _IRXIF	set	32039
   340  0000                     _LATC1	set	31833
   341  0000                     _MDSEL0	set	31678
   342  0000                     _MDSEL1	set	31679
   343  0000                     _PEIE	set	32662
   344  0000                     _RCIE	set	31981
   345  0000                     _RCIF	set	31989
   346  0000                     _RCIP	set	31997
   347  0000                     _RXB0FILHIT0	set	31488
   348  0000                     _RXB0FUL	set	31495
   349  0000                     _RXB0IF	set	32032
   350  0000                     _RXB0OVFL	set	31655
   351  0000                     _RXB1IF	set	32033
   352  0000                     _RXB1OVFL	set	31654
   353  0000                     _RXBnIE	set	32025
   354  0000                     _RXBnIF	set	32033
   355  0000                     _RXM0EXIDM	set	30923
   356  0000                     _RXM1EXIDEN	set	30955
   357  0000                     _B0CON	set	3616
   358  0000                     _B1CON	set	3632
   359  0000                     _B2CON	set	3648
   360  0000                     _B3CON	set	3664
   361  0000                     _B4CON	set	3680
   362  0000                     _B5CON	set	3696
   363  0000                     _RXB0CON	set	3936
   364  0000                     _RXB1CON	set	3920
   365  0000                     _RXM0SIDH	set	3864
   366  0000                     _RXM1SIDH	set	3868
   367  0000                     _TXB0CON	set	3904
   368  0000                     _TXB1CON	set	3888
   369  0000                     _TXB2CON	set	3872
   370  006C3A                     __stringdata:
   371                           	opt stack 0
   372  006C3A                     STR_257:
   373  006C3A  20                 	db	32
   374  006C3B  20                 	db	32
   375  006C3C  20                 	db	32
   376  006C3D  20                 	db	32
   377  006C3E  20                 	db	32
   378  006C3F  20                 	db	32
   379  006C40  20                 	db	32
   380  006C41  20                 	db	32
   381  006C42  20                 	db	32
   382  006C43  46                 	db	70	;'F'
   383  006C44  6F                 	db	111	;'o'
   384  006C45  72                 	db	114	;'r'
   385  006C46  6D                 	db	109	;'m'
   386  006C47  61                 	db	97	;'a'
   387  006C48  74                 	db	116	;'t'
   388  006C49  3A                 	db	58	;':'
   389  006C4A  20                 	db	32
   390  006C4B  66                 	db	102	;'f'
   391  006C4C  69                 	db	105	;'i'
   392  006C4D  6C                 	db	108	;'l'
   393  006C4E  74                 	db	116	;'t'
   394  006C4F  65                 	db	101	;'e'
   395  006C50  72                 	db	114	;'r'
   396  006C51  20                 	db	32
   397  006C52  66                 	db	102	;'f'
   398  006C53  69                 	db	105	;'i'
   399  006C54  6C                 	db	108	;'l'
   400  006C55  74                 	db	116	;'t'
   401  006C56  65                 	db	101	;'e'
   402  006C57  72                 	db	114	;'r'
   403  006C58  6E                 	db	110	;'n'
   404  006C59  6F                 	db	111	;'o'
   405  006C5A  2C                 	db	44
   406  006C5B  70                 	db	112	;'p'
   407  006C5C  72                 	db	114	;'r'
   408  006C5D  69                 	db	105	;'i'
   409  006C5E  6F                 	db	111	;'o'
   410  006C5F  2C                 	db	44
   411  006C60  63                 	db	99	;'c'
   412  006C61  6C                 	db	108	;'l'
   413  006C62  61                 	db	97	;'a'
   414  006C63  73                 	db	115	;'s'
   415  006C64  73                 	db	115	;'s'
   416  006C65  2C                 	db	44
   417  006C66  74                 	db	116	;'t'
   418  006C67  79                 	db	121	;'y'
   419  006C68  70                 	db	112	;'p'
   420  006C69  65                 	db	101	;'e'
   421  006C6A  2C                 	db	44
   422  006C6B  6E                 	db	110	;'n'
   423  006C6C  6F                 	db	111	;'o'
   424  006C6D  64                 	db	100	;'d'
   425  006C6E  65                 	db	101	;'e'
   426  006C6F  69                 	db	105	;'i'
   427  006C70  64                 	db	100	;'d'
   428  006C71  20                 	db	32
   429  006C72  20                 	db	32
   430  006C73  28                 	db	40
   431  006C74  66                 	db	102	;'f'
   432  006C75  69                 	db	105	;'i'
   433  006C76  6C                 	db	108	;'l'
   434  006C77  74                 	db	116	;'t'
   435  006C78  65                 	db	101	;'e'
   436  006C79  72                 	db	114	;'r'
   437  006C7A  6E                 	db	110	;'n'
   438  006C7B  6F                 	db	111	;'o'
   439  006C7C  20                 	db	32
   440  006C7D  3D                 	db	61	;'='
   441  006C7E  20                 	db	32
   442  006C7F  30                 	db	48	;'0'
   443  006C80  2D                 	db	45
   444  006C81  31                 	db	49	;'1'
   445  006C82  35                 	db	53	;'5'
   446  006C83  29                 	db	41
   447  006C84  2E                 	db	46
   448  006C85  0D                 	db	13
   449  006C86  0A                 	db	10
   450  006C87  00                 	db	0
   451  006C88                     STR_255:
   452  006C88  49                 	db	73	;'I'
   453  006C89  4E                 	db	78	;'N'
   454  006C8A  46                 	db	70	;'F'
   455  006C8B  4F                 	db	79	;'O'
   456  006C8C  20                 	db	32
   457  006C8D  2D                 	db	45
   458  006C8E  20                 	db	32
   459  006C8F  47                 	db	71	;'G'
   460  006C90  65                 	db	101	;'e'
   461  006C91  74                 	db	116	;'t'
   462  006C92  20                 	db	32
   463  006C93  69                 	db	105	;'i'
   464  006C94  6E                 	db	110	;'n'
   465  006C95  66                 	db	102	;'f'
   466  006C96  6F                 	db	111	;'o'
   467  006C97  20                 	db	32
   468  006C98  61                 	db	97	;'a'
   469  006C99  62                 	db	98	;'b'
   470  006C9A  6F                 	db	111	;'o'
   471  006C9B  75                 	db	117	;'u'
   472  006C9C  74                 	db	116	;'t'
   473  006C9D  20                 	db	32
   474  006C9E  61                 	db	97	;'a'
   475  006C9F  6E                 	db	110	;'n'
   476  006CA0  20                 	db	32
   477  006CA1  65                 	db	101	;'e'
   478  006CA2  78                 	db	120	;'x'
   479  006CA3  69                 	db	105	;'i'
   480  006CA4  73                 	db	115	;'s'
   481  006CA5  74                 	db	116	;'t'
   482  006CA6  65                 	db	101	;'e'
   483  006CA7  6E                 	db	110	;'n'
   484  006CA8  74                 	db	116	;'t'
   485  006CA9  20                 	db	32
   486  006CAA  6E                 	db	110	;'n'
   487  006CAB  6F                 	db	111	;'o'
   488  006CAC  64                 	db	100	;'d'
   489  006CAD  65                 	db	101	;'e'
   490  006CAE  20                 	db	32
   491  006CAF  6F                 	db	111	;'o'
   492  006CB0  6E                 	db	110	;'n'
   493  006CB1  20                 	db	32
   494  006CB2  74                 	db	116	;'t'
   495  006CB3  68                 	db	104	;'h'
   496  006CB4  65                 	db	101	;'e'
   497  006CB5  20                 	db	32
   498  006CB6  62                 	db	98	;'b'
   499  006CB7  75                 	db	117	;'u'
   500  006CB8  73                 	db	115	;'s'
   501  006CB9  20                 	db	32
   502  006CBA  28                 	db	40
   503  006CBB  46                 	db	70	;'F'
   504  006CBC  6F                 	db	111	;'o'
   505  006CBD  72                 	db	114	;'r'
   506  006CBE  6D                 	db	109	;'m'
   507  006CBF  61                 	db	97	;'a'
   508  006CC0  74                 	db	116	;'t'
   509  006CC1  3A                 	db	58	;':'
   510  006CC2  20                 	db	32
   511  006CC3  69                 	db	105	;'i'
   512  006CC4  6E                 	db	110	;'n'
   513  006CC5  66                 	db	102	;'f'
   514  006CC6  6F                 	db	111	;'o'
   515  006CC7  20                 	db	32
   516  006CC8  6E                 	db	110	;'n'
   517  006CC9  69                 	db	105	;'i'
   518  006CCA  63                 	db	99	;'c'
   519  006CCB  6B                 	db	107	;'k'
   520  006CCC  6E                 	db	110	;'n'
   521  006CCD  61                 	db	97	;'a'
   522  006CCE  6D                 	db	109	;'m'
   523  006CCF  65                 	db	101	;'e'
   524  006CD0  29                 	db	41
   525  006CD1  2E                 	db	46
   526  006CD2  0D                 	db	13
   527  006CD3  0A                 	db	10
   528  006CD4  00                 	db	0
   529  006CD5                     STR_253:
   530  006CD5  52                 	db	82	;'R'
   531  006CD6  52                 	db	82	;'R'
   532  006CD7  45                 	db	69	;'E'
   533  006CD8  47                 	db	71	;'G'
   534  006CD9  20                 	db	32
   535  006CDA  2D                 	db	45
   536  006CDB  20                 	db	32
   537  006CDC  52                 	db	82	;'R'
   538  006CDD  65                 	db	101	;'e'
   539  006CDE  61                 	db	97	;'a'
   540  006CDF  64                 	db	100	;'d'
   541  006CE0  20                 	db	32
   542  006CE1  72                 	db	114	;'r'
   543  006CE2  65                 	db	101	;'e'
   544  006CE3  67                 	db	103	;'g'
   545  006CE4  69                 	db	105	;'i'
   546  006CE5  73                 	db	115	;'s'
   547  006CE6  74                 	db	116	;'t'
   548  006CE7  65                 	db	101	;'e'
   549  006CE8  72                 	db	114	;'r'
   550  006CE9  28                 	db	40
   551  006CEA  73                 	db	115	;'s'
   552  006CEB  29                 	db	41
   553  006CEC  20                 	db	32
   554  006CED  6F                 	db	111	;'o'
   555  006CEE  66                 	db	102	;'f'
   556  006CEF  20                 	db	32
   557  006CF0  6E                 	db	110	;'n'
   558  006CF1  6F                 	db	111	;'o'
   559  006CF2  64                 	db	100	;'d'
   560  006CF3  65                 	db	101	;'e'
   561  006CF4  20                 	db	32
   562  006CF5  28                 	db	40
   563  006CF6  46                 	db	70	;'F'
   564  006CF7  6F                 	db	111	;'o'
   565  006CF8  72                 	db	114	;'r'
   566  006CF9  6D                 	db	109	;'m'
   567  006CFA  61                 	db	97	;'a'
   568  006CFB  74                 	db	116	;'t'
   569  006CFC  3A                 	db	58	;':'
   570  006CFD  20                 	db	32
   571  006CFE  72                 	db	114	;'r'
   572  006CFF  72                 	db	114	;'r'
   573  006D00  65                 	db	101	;'e'
   574  006D01  67                 	db	103	;'g'
   575  006D02  20                 	db	32
   576  006D03  6E                 	db	110	;'n'
   577  006D04  6F                 	db	111	;'o'
   578  006D05  64                 	db	100	;'d'
   579  006D06  65                 	db	101	;'e'
   580  006D07  69                 	db	105	;'i'
   581  006D08  64                 	db	100	;'d'
   582  006D09  20                 	db	32
   583  006D0A  5B                 	db	91	;'['
   584  006D0B  70                 	db	112	;'p'
   585  006D0C  61                 	db	97	;'a'
   586  006D0D  67                 	db	103	;'g'
   587  006D0E  65                 	db	101	;'e'
   588  006D0F  3A                 	db	58	;':'
   589  006D10  5D                 	db	93	;']'
   590  006D11  72                 	db	114	;'r'
   591  006D12  65                 	db	101	;'e'
   592  006D13  67                 	db	103	;'g'
   593  006D14  20                 	db	32
   594  006D15  5B                 	db	91	;'['
   595  006D16  63                 	db	99	;'c'
   596  006D17  6F                 	db	111	;'o'
   597  006D18  75                 	db	117	;'u'
   598  006D19  6E                 	db	110	;'n'
   599  006D1A  74                 	db	116	;'t'
   600  006D1B  5D                 	db	93	;']'
   601  006D1C  29                 	db	41
   602  006D1D  2E                 	db	46
   603  006D1E  0D                 	db	13
   604  006D1F  0A                 	db	10
   605  006D20  00                 	db	0
   606  006D21                     STR_254:
   607  006D21  57                 	db	87	;'W'
   608  006D22  52                 	db	82	;'R'
   609  006D23  45                 	db	69	;'E'
   610  006D24  47                 	db	71	;'G'
   611  006D25  20                 	db	32
   612  006D26  2D                 	db	45
   613  006D27  20                 	db	32
   614  006D28  57                 	db	87	;'W'
   615  006D29  72                 	db	114	;'r'
   616  006D2A  69                 	db	105	;'i'
   617  006D2B  74                 	db	116	;'t'
   618  006D2C  65                 	db	101	;'e'
   619  006D2D  20                 	db	32
   620  006D2E  72                 	db	114	;'r'
   621  006D2F  65                 	db	101	;'e'
   622  006D30  67                 	db	103	;'g'
   623  006D31  69                 	db	105	;'i'
   624  006D32  73                 	db	115	;'s'
   625  006D33  74                 	db	116	;'t'
   626  006D34  65                 	db	101	;'e'
   627  006D35  72                 	db	114	;'r'
   628  006D36  20                 	db	32
   629  006D37  6F                 	db	111	;'o'
   630  006D38  66                 	db	102	;'f'
   631  006D39  20                 	db	32
   632  006D3A  6E                 	db	110	;'n'
   633  006D3B  6F                 	db	111	;'o'
   634  006D3C  64                 	db	100	;'d'
   635  006D3D  65                 	db	101	;'e'
   636  006D3E  20                 	db	32
   637  006D3F  28                 	db	40
   638  006D40  46                 	db	70	;'F'
   639  006D41  6F                 	db	111	;'o'
   640  006D42  72                 	db	114	;'r'
   641  006D43  6D                 	db	109	;'m'
   642  006D44  61                 	db	97	;'a'
   643  006D45  74                 	db	116	;'t'
   644  006D46  3A                 	db	58	;':'
   645  006D47  20                 	db	32
   646  006D48  77                 	db	119	;'w'
   647  006D49  72                 	db	114	;'r'
   648  006D4A  65                 	db	101	;'e'
   649  006D4B  67                 	db	103	;'g'
   650  006D4C  20                 	db	32
   651  006D4D  6E                 	db	110	;'n'
   652  006D4E  6F                 	db	111	;'o'
   653  006D4F  64                 	db	100	;'d'
   654  006D50  65                 	db	101	;'e'
   655  006D51  69                 	db	105	;'i'
   656  006D52  64                 	db	100	;'d'
   657  006D53  20                 	db	32
   658  006D54  5B                 	db	91	;'['
   659  006D55  70                 	db	112	;'p'
   660  006D56  61                 	db	97	;'a'
   661  006D57  67                 	db	103	;'g'
   662  006D58  65                 	db	101	;'e'
   663  006D59  3A                 	db	58	;':'
   664  006D5A  5D                 	db	93	;']'
   665  006D5B  72                 	db	114	;'r'
   666  006D5C  65                 	db	101	;'e'
   667  006D5D  67                 	db	103	;'g'
   668  006D5E  20                 	db	32
   669  006D5F  63                 	db	99	;'c'
   670  006D60  6F                 	db	111	;'o'
   671  006D61  6E                 	db	110	;'n'
   672  006D62  74                 	db	116	;'t'
   673  006D63  65                 	db	101	;'e'
   674  006D64  6E                 	db	110	;'n'
   675  006D65  74                 	db	116	;'t'
   676  006D66  29                 	db	41
   677  006D67  2E                 	db	46
   678  006D68  0D                 	db	13
   679  006D69  0A                 	db	10
   680  006D6A  00                 	db	0
   681  006D6B                     STR_259:
   682  006D6B  20                 	db	32
   683  006D6C  20                 	db	32
   684  006D6D  20                 	db	32
   685  006D6E  20                 	db	32
   686  006D6F  20                 	db	32
   687  006D70  20                 	db	32
   688  006D71  20                 	db	32
   689  006D72  46                 	db	70	;'F'
   690  006D73  6F                 	db	111	;'o'
   691  006D74  72                 	db	114	;'r'
   692  006D75  6D                 	db	109	;'m'
   693  006D76  61                 	db	97	;'a'
   694  006D77  74                 	db	116	;'t'
   695  006D78  3A                 	db	58	;':'
   696  006D79  20                 	db	32
   697  006D7A  6D                 	db	109	;'m'
   698  006D7B  61                 	db	97	;'a'
   699  006D7C  73                 	db	115	;'s'
   700  006D7D  6B                 	db	107	;'k'
   701  006D7E  20                 	db	32
   702  006D7F  6D                 	db	109	;'m'
   703  006D80  61                 	db	97	;'a'
   704  006D81  73                 	db	115	;'s'
   705  006D82  6B                 	db	107	;'k'
   706  006D83  6E                 	db	110	;'n'
   707  006D84  6F                 	db	111	;'o'
   708  006D85  2C                 	db	44
   709  006D86  70                 	db	112	;'p'
   710  006D87  72                 	db	114	;'r'
   711  006D88  69                 	db	105	;'i'
   712  006D89  6F                 	db	111	;'o'
   713  006D8A  2C                 	db	44
   714  006D8B  63                 	db	99	;'c'
   715  006D8C  6C                 	db	108	;'l'
   716  006D8D  61                 	db	97	;'a'
   717  006D8E  73                 	db	115	;'s'
   718  006D8F  73                 	db	115	;'s'
   719  006D90  2C                 	db	44
   720  006D91  74                 	db	116	;'t'
   721  006D92  79                 	db	121	;'y'
   722  006D93  70                 	db	112	;'p'
   723  006D94  65                 	db	101	;'e'
   724  006D95  2C                 	db	44
   725  006D96  6E                 	db	110	;'n'
   726  006D97  6F                 	db	111	;'o'
   727  006D98  64                 	db	100	;'d'
   728  006D99  65                 	db	101	;'e'
   729  006D9A  69                 	db	105	;'i'
   730  006D9B  64                 	db	100	;'d'
   731  006D9C  20                 	db	32
   732  006D9D  28                 	db	40
   733  006D9E  6D                 	db	109	;'m'
   734  006D9F  61                 	db	97	;'a'
   735  006DA0  73                 	db	115	;'s'
   736  006DA1  6B                 	db	107	;'k'
   737  006DA2  6E                 	db	110	;'n'
   738  006DA3  6F                 	db	111	;'o'
   739  006DA4  20                 	db	32
   740  006DA5  3D                 	db	61	;'='
   741  006DA6  20                 	db	32
   742  006DA7  30                 	db	48	;'0'
   743  006DA8  20                 	db	32
   744  006DA9  6F                 	db	111	;'o'
   745  006DAA  72                 	db	114	;'r'
   746  006DAB  20                 	db	32
   747  006DAC  31                 	db	49	;'1'
   748  006DAD  29                 	db	41
   749  006DAE  2E                 	db	46
   750  006DAF  0D                 	db	13
   751  006DB0  0A                 	db	10
   752  006DB1  00                 	db	0
   753  006DB2                     STR_269:
   754  006DB2  2D                 	db	45
   755  006DB3  2D                 	db	45
   756  006DB4  2D                 	db	45
   757  006DB5  2D                 	db	45
   758  006DB6  2D                 	db	45
   759  006DB7  2D                 	db	45
   760  006DB8  2D                 	db	45
   761  006DB9  2D                 	db	45
   762  006DBA  2D                 	db	45
   763  006DBB  2D                 	db	45
   764  006DBC  2D                 	db	45
   765  006DBD  2D                 	db	45
   766  006DBE  2D                 	db	45
   767  006DBF  2D                 	db	45
   768  006DC0  2D                 	db	45
   769  006DC1  2D                 	db	45
   770  006DC2  2D                 	db	45
   771  006DC3  2D                 	db	45
   772  006DC4  2D                 	db	45
   773  006DC5  2D                 	db	45
   774  006DC6  2D                 	db	45
   775  006DC7  2D                 	db	45
   776  006DC8  2D                 	db	45
   777  006DC9  2D                 	db	45
   778  006DCA  2D                 	db	45
   779  006DCB  2D                 	db	45
   780  006DCC  2D                 	db	45
   781  006DCD  2D                 	db	45
   782  006DCE  2D                 	db	45
   783  006DCF  2D                 	db	45
   784  006DD0  2D                 	db	45
   785  006DD1  2D                 	db	45
   786  006DD2  2D                 	db	45
   787  006DD3  2D                 	db	45
   788  006DD4  2D                 	db	45
   789  006DD5  2D                 	db	45
   790  006DD6  2D                 	db	45
   791  006DD7  2D                 	db	45
   792  006DD8  2D                 	db	45
   793  006DD9  2D                 	db	45
   794  006DDA  2D                 	db	45
   795  006DDB  2D                 	db	45
   796  006DDC  2D                 	db	45
   797  006DDD  2D                 	db	45
   798  006DDE  2D                 	db	45
   799  006DDF  2D                 	db	45
   800  006DE0  2D                 	db	45
   801  006DE1  2D                 	db	45
   802  006DE2  2D                 	db	45
   803  006DE3  2D                 	db	45
   804  006DE4  2D                 	db	45
   805  006DE5  2D                 	db	45
   806  006DE6  2D                 	db	45
   807  006DE7  2D                 	db	45
   808  006DE8  2D                 	db	45
   809  006DE9  2D                 	db	45
   810  006DEA  2D                 	db	45
   811  006DEB  2D                 	db	45
   812  006DEC  2D                 	db	45
   813  006DED  2D                 	db	45
   814  006DEE  2D                 	db	45
   815  006DEF  2D                 	db	45
   816  006DF0  2D                 	db	45
   817  006DF1  2D                 	db	45
   818  006DF2  0D                 	db	13
   819  006DF3  0A                 	db	10
   820  006DF4  00                 	db	0
   821  006DF5                     STR_263:
   822  006DF5  20                 	db	32
   823  006DF6  20                 	db	32
   824  006DF7  20                 	db	32
   825  006DF8  20                 	db	32
   826  006DF9  52                 	db	82	;'R'
   827  006DFA  57                 	db	87	;'W'
   828  006DFB  54                 	db	84	;'T'
   829  006DFC  49                 	db	73	;'I'
   830  006DFD  4D                 	db	77	;'M'
   831  006DFE  45                 	db	69	;'E'
   832  006DFF  4F                 	db	79	;'O'
   833  006E00  55                 	db	85	;'U'
   834  006E01  54                 	db	84	;'T'
   835  006E02  20                 	db	32
   836  006E03  2D                 	db	45
   837  006E04  20                 	db	32
   838  006E05  53                 	db	83	;'S'
   839  006E06  65                 	db	101	;'e'
   840  006E07  74                 	db	116	;'t'
   841  006E08  20                 	db	32
   842  006E09  72                 	db	114	;'r'
   843  006E0A  65                 	db	101	;'e'
   844  006E0B  67                 	db	103	;'g'
   845  006E0C  69                 	db	105	;'i'
   846  006E0D  73                 	db	115	;'s'
   847  006E0E  74                 	db	116	;'t'
   848  006E0F  65                 	db	101	;'e'
   849  006E10  72                 	db	114	;'r'
   850  006E11  20                 	db	32
   851  006E12  72                 	db	114	;'r'
   852  006E13  65                 	db	101	;'e'
   853  006E14  61                 	db	97	;'a'
   854  006E15  64                 	db	100	;'d'
   855  006E16  2F                 	db	47
   856  006E17  77                 	db	119	;'w'
   857  006E18  72                 	db	114	;'r'
   858  006E19  69                 	db	105	;'i'
   859  006E1A  74                 	db	116	;'t'
   860  006E1B  65                 	db	101	;'e'
   861  006E1C  20                 	db	32
   862  006E1D  74                 	db	116	;'t'
   863  006E1E  69                 	db	105	;'i'
   864  006E1F  6D                 	db	109	;'m'
   865  006E20  65                 	db	101	;'e'
   866  006E21  6F                 	db	111	;'o'
   867  006E22  75                 	db	117	;'u'
   868  006E23  74                 	db	116	;'t'
   869  006E24  2E                 	db	46
   870  006E25  20                 	db	32
   871  006E26  44                 	db	68	;'D'
   872  006E27  65                 	db	101	;'e'
   873  006E28  66                 	db	102	;'f'
   874  006E29  61                 	db	97	;'a'
   875  006E2A  75                 	db	117	;'u'
   876  006E2B  6C                 	db	108	;'l'
   877  006E2C  74                 	db	116	;'t'
   878  006E2D  3D                 	db	61	;'='
   879  006E2E  32                 	db	50	;'2'
   880  006E2F  30                 	db	48	;'0'
   881  006E30  20                 	db	32
   882  006E31  6D                 	db	109	;'m'
   883  006E32  73                 	db	115	;'s'
   884  006E33  20                 	db	32
   885  006E34  2E                 	db	46
   886  006E35  0D                 	db	13
   887  006E36  0A                 	db	10
   888  006E37  00                 	db	0
   889  006E38                     STR_106:
   890  006E38  2D                 	db	45
   891  006E39  45                 	db	69	;'E'
   892  006E3A  52                 	db	82	;'R'
   893  006E3B  52                 	db	82	;'R'
   894  006E3C  4F                 	db	79	;'O'
   895  006E3D  52                 	db	82	;'R'
   896  006E3E  20                 	db	32
   897  006E3F  2D                 	db	45
   898  006E40  20                 	db	32
   899  006E41  46                 	db	70	;'F'
   900  006E42  69                 	db	105	;'i'
   901  006E43  6C                 	db	108	;'l'
   902  006E44  74                 	db	116	;'t'
   903  006E45  65                 	db	101	;'e'
   904  006E46  72                 	db	114	;'r'
   905  006E47  20                 	db	32
   906  006E48  6E                 	db	110	;'n'
   907  006E49  75                 	db	117	;'u'
   908  006E4A  6D                 	db	109	;'m'
   909  006E4B  62                 	db	98	;'b'
   910  006E4C  65                 	db	101	;'e'
   911  006E4D  72                 	db	114	;'r'
   912  006E4E  20                 	db	32
   913  006E4F  63                 	db	99	;'c'
   914  006E50  61                 	db	97	;'a'
   915  006E51  6E                 	db	110	;'n'
   916  006E52  20                 	db	32
   917  006E53  6F                 	db	111	;'o'
   918  006E54  6E                 	db	110	;'n'
   919  006E55  6C                 	db	108	;'l'
   920  006E56  79                 	db	121	;'y'
   921  006E57  20                 	db	32
   922  006E58  62                 	db	98	;'b'
   923  006E59  65                 	db	101	;'e'
   924  006E5A  20                 	db	32
   925  006E5B  73                 	db	115	;'s'
   926  006E5C  65                 	db	101	;'e'
   927  006E5D  74                 	db	116	;'t'
   928  006E5E  20                 	db	32
   929  006E5F  74                 	db	116	;'t'
   930  006E60  6F                 	db	111	;'o'
   931  006E61  20                 	db	32
   932  006E62  61                 	db	97	;'a'
   933  006E63  20                 	db	32
   934  006E64  76                 	db	118	;'v'
   935  006E65  61                 	db	97	;'a'
   936  006E66  6C                 	db	108	;'l'
   937  006E67  75                 	db	117	;'u'
   938  006E68  65                 	db	101	;'e'
   939  006E69  20                 	db	32
   940  006E6A  62                 	db	98	;'b'
   941  006E6B  65                 	db	101	;'e'
   942  006E6C  74                 	db	116	;'t'
   943  006E6D  77                 	db	119	;'w'
   944  006E6E  65                 	db	101	;'e'
   945  006E6F  65                 	db	101	;'e'
   946  006E70  6E                 	db	110	;'n'
   947  006E71  20                 	db	32
   948  006E72  30                 	db	48	;'0'
   949  006E73  2D                 	db	45
   950  006E74  31                 	db	49	;'1'
   951  006E75  35                 	db	53	;'5'
   952  006E76  2E                 	db	46
   953  006E77  0D                 	db	13
   954  006E78  0A                 	db	10
   955  006E79  00                 	db	0
   956  006E7A                     STR_266:
   957  006E7A  20                 	db	32
   958  006E7B  20                 	db	32
   959  006E7C  20                 	db	32
   960  006E7D  20                 	db	32
   961  006E7E  4D                 	db	77	;'M'
   962  006E7F  4F                 	db	79	;'O'
   963  006E80  44                 	db	68	;'D'
   964  006E81  45                 	db	69	;'E'
   965  006E82  20                 	db	32
   966  006E83  2D                 	db	45
   967  006E84  20                 	db	32
   968  006E85  53                 	db	83	;'S'
   969  006E86  65                 	db	101	;'e'
   970  006E87  74                 	db	116	;'t'
   971  006E88  20                 	db	32
   972  006E89  61                 	db	97	;'a'
   973  006E8A  64                 	db	100	;'d'
   974  006E8B  61                 	db	97	;'a'
   975  006E8C  70                 	db	112	;'p'
   976  006E8D  74                 	db	116	;'t'
   977  006E8E  65                 	db	101	;'e'
   978  006E8F  72                 	db	114	;'r'
   979  006E90  20                 	db	32
   980  006E91  6D                 	db	109	;'m'
   981  006E92  6F                 	db	111	;'o'
   982  006E93  64                 	db	100	;'d'
   983  006E94  65                 	db	101	;'e'
   984  006E95  20                 	db	32
   985  006E96  74                 	db	116	;'t'
   986  006E97  68                 	db	104	;'h'
   987  006E98  61                 	db	97	;'a'
   988  006E99  74                 	db	116	;'t'
   989  006E9A  20                 	db	32
   990  006E9B  73                 	db	115	;'s'
   991  006E9C  68                 	db	104	;'h'
   992  006E9D  6F                 	db	111	;'o'
   993  006E9E  75                 	db	117	;'u'
   994  006E9F  6C                 	db	108	;'l'
   995  006EA0  64                 	db	100	;'d'
   996  006EA1  20                 	db	32
   997  006EA2  62                 	db	98	;'b'
   998  006EA3  65                 	db	101	;'e'
   999  006EA4  20                 	db	32
  1000  006EA5  75                 	db	117	;'u'
  1001  006EA6  73                 	db	115	;'s'
  1002  006EA7  65                 	db	101	;'e'
  1003  006EA8  64                 	db	100	;'d'
  1004  006EA9  20                 	db	32
  1005  006EAA  6F                 	db	111	;'o'
  1006  006EAB  6E                 	db	110	;'n'
  1007  006EAC  20                 	db	32
  1008  006EAD  73                 	db	115	;'s'
  1009  006EAE  74                 	db	116	;'t'
  1010  006EAF  61                 	db	97	;'a'
  1011  006EB0  72                 	db	114	;'r'
  1012  006EB1  74                 	db	116	;'t'
  1013  006EB2  75                 	db	117	;'u'
  1014  006EB3  70                 	db	112	;'p'
  1015  006EB4  2E                 	db	46
  1016  006EB5  0D                 	db	13
  1017  006EB6  0A                 	db	10
  1018  006EB7  00                 	db	0
  1019  006EB8                     STR_226:
  1020  006EB8  54                 	db	84	;'T'
  1021  006EB9  72                 	db	114	;'r'
  1022  006EBA  61                 	db	97	;'a'
  1023  006EBB  6E                 	db	110	;'n'
  1024  006EBC  73                 	db	115	;'s'
  1025  006EBD  6D                 	db	109	;'m'
  1026  006EBE  69                 	db	105	;'i'
  1027  006EBF  74                 	db	116	;'t'
  1028  006EC0  74                 	db	116	;'t'
  1029  006EC1  65                 	db	101	;'e'
  1030  006EC2  72                 	db	114	;'r'
  1031  006EC3  20                 	db	32
  1032  006EC4  69                 	db	105	;'i'
  1033  006EC5  6E                 	db	110	;'n'
  1034  006EC6  20                 	db	32
  1035  006EC7  45                 	db	69	;'E'
  1036  006EC8  72                 	db	114	;'r'
  1037  006EC9  72                 	db	114	;'r'
  1038  006ECA  6F                 	db	111	;'o'
  1039  006ECB  72                 	db	114	;'r'
  1040  006ECC  20                 	db	32
  1041  006ECD  53                 	db	83	;'S'
  1042  006ECE  74                 	db	116	;'t'
  1043  006ECF  61                 	db	97	;'a'
  1044  006ED0  74                 	db	116	;'t'
  1045  006ED1  65                 	db	101	;'e'
  1046  006ED2  20                 	db	32
  1047  006ED3  57                 	db	87	;'W'
  1048  006ED4  61                 	db	97	;'a'
  1049  006ED5  72                 	db	114	;'r'
  1050  006ED6  6E                 	db	110	;'n'
  1051  006ED7  69                 	db	105	;'i'
  1052  006ED8  6E                 	db	110	;'n'
  1053  006ED9  67                 	db	103	;'g'
  1054  006EDA  20                 	db	32
  1055  006EDB  28                 	db	40
  1056  006EDC  31                 	db	49	;'1'
  1057  006EDD  32                 	db	50	;'2'
  1058  006EDE  38                 	db	56	;'8'
  1059  006EDF  20                 	db	32
  1060  006EE0  3E                 	db	62	;'>'
  1061  006EE1  20                 	db	32
  1062  006EE2  54                 	db	84	;'T'
  1063  006EE3  45                 	db	69	;'E'
  1064  006EE4  52                 	db	82	;'R'
  1065  006EE5  52                 	db	82	;'R'
  1066  006EE6  43                 	db	67	;'C'
  1067  006EE7  4E                 	db	78	;'N'
  1068  006EE8  54                 	db	84	;'T'
  1069  006EE9  20                 	db	32
  1070  006EEA  3F                 	db	63	;'?'
  1071  006EEB  20                 	db	32
  1072  006EEC  39                 	db	57	;'9'
  1073  006EED  36                 	db	54	;'6'
  1074  006EEE  29                 	db	41
  1075  006EEF  0D                 	db	13
  1076  006EF0  0A                 	db	10
  1077  006EF1  00                 	db	0
  1078  006EF2                     STR_2:
  1079  006EF2  43                 	db	67	;'C'
  1080  006EF3  6F                 	db	111	;'o'
  1081  006EF4  70                 	db	112	;'p'
  1082  006EF5  79                 	db	121	;'y'
  1083  006EF6  72                 	db	114	;'r'
  1084  006EF7  69                 	db	105	;'i'
  1085  006EF8  67                 	db	103	;'g'
  1086  006EF9  68                 	db	104	;'h'
  1087  006EFA  74                 	db	116	;'t'
  1088  006EFB  20                 	db	32
  1089  006EFC  28                 	db	40
  1090  006EFD  43                 	db	67	;'C'
  1091  006EFE  29                 	db	41
  1092  006EFF  20                 	db	32
  1093  006F00  32                 	db	50	;'2'
  1094  006F01  30                 	db	48	;'0'
  1095  006F02  31                 	db	49	;'1'
  1096  006F03  34                 	db	52	;'4'
  1097  006F04  2D                 	db	45
  1098  006F05  32                 	db	50	;'2'
  1099  006F06  30                 	db	48	;'0'
  1100  006F07  31                 	db	49	;'1'
  1101  006F08  35                 	db	53	;'5'
  1102  006F09  20                 	db	32
  1103  006F0A  50                 	db	80	;'P'
  1104  006F0B  61                 	db	97	;'a'
  1105  006F0C  72                 	db	114	;'r'
  1106  006F0D  61                 	db	97	;'a'
  1107  006F0E  64                 	db	100	;'d'
  1108  006F0F  69                 	db	105	;'i'
  1109  006F10  73                 	db	115	;'s'
  1110  006F11  65                 	db	101	;'e'
  1111  006F12  20                 	db	32
  1112  006F13  6F                 	db	111	;'o'
  1113  006F14  66                 	db	102	;'f'
  1114  006F15  20                 	db	32
  1115  006F16  74                 	db	116	;'t'
  1116  006F17  68                 	db	104	;'h'
  1117  006F18  65                 	db	101	;'e'
  1118  006F19  20                 	db	32
  1119  006F1A  46                 	db	70	;'F'
  1120  006F1B  72                 	db	114	;'r'
  1121  006F1C  6F                 	db	111	;'o'
  1122  006F1D  67                 	db	103	;'g'
  1123  006F1E  20                 	db	32
  1124  006F1F  41                 	db	65	;'A'
  1125  006F20  42                 	db	66	;'B'
  1126  006F21  2C                 	db	44
  1127  006F22  20                 	db	32
  1128  006F23  53                 	db	83	;'S'
  1129  006F24  77                 	db	119	;'w'
  1130  006F25  65                 	db	101	;'e'
  1131  006F26  64                 	db	100	;'d'
  1132  006F27  65                 	db	101	;'e'
  1133  006F28  6E                 	db	110	;'n'
  1134  006F29  0D                 	db	13
  1135  006F2A  0A                 	db	10
  1136  006F2B  00                 	db	0
  1137  006F2C                     STR_228:
  1138  006F2C  54                 	db	84	;'T'
  1139  006F2D  72                 	db	114	;'r'
  1140  006F2E  61                 	db	97	;'a'
  1141  006F2F  6E                 	db	110	;'n'
  1142  006F30  73                 	db	115	;'s'
  1143  006F31  6D                 	db	109	;'m'
  1144  006F32  69                 	db	105	;'i'
  1145  006F33  74                 	db	116	;'t'
  1146  006F34  74                 	db	116	;'t'
  1147  006F35  65                 	db	101	;'e'
  1148  006F36  72                 	db	114	;'r'
  1149  006F37  20                 	db	32
  1150  006F38  69                 	db	105	;'i'
  1151  006F39  6E                 	db	110	;'n'
  1152  006F3A  20                 	db	32
  1153  006F3B  45                 	db	69	;'E'
  1154  006F3C  72                 	db	114	;'r'
  1155  006F3D  72                 	db	114	;'r'
  1156  006F3E  6F                 	db	111	;'o'
  1157  006F3F  72                 	db	114	;'r'
  1158  006F40  20                 	db	32
  1159  006F41  53                 	db	83	;'S'
  1160  006F42  74                 	db	116	;'t'
  1161  006F43  61                 	db	97	;'a'
  1162  006F44  74                 	db	116	;'t'
  1163  006F45  65                 	db	101	;'e'
  1164  006F46  20                 	db	32
  1165  006F47  42                 	db	66	;'B'
  1166  006F48  75                 	db	117	;'u'
  1167  006F49  73                 	db	115	;'s'
  1168  006F4A  20                 	db	32
  1169  006F4B  50                 	db	80	;'P'
  1170  006F4C  61                 	db	97	;'a'
  1171  006F4D  73                 	db	115	;'s'
  1172  006F4E  73                 	db	115	;'s'
  1173  006F4F  69                 	db	105	;'i'
  1174  006F50  76                 	db	118	;'v'
  1175  006F51  65                 	db	101	;'e'
  1176  006F52  20                 	db	32
  1177  006F53  28                 	db	40
  1178  006F54  54                 	db	84	;'T'
  1179  006F55  45                 	db	69	;'E'
  1180  006F56  52                 	db	82	;'R'
  1181  006F57  52                 	db	82	;'R'
  1182  006F58  43                 	db	67	;'C'
  1183  006F59  4E                 	db	78	;'N'
  1184  006F5A  54                 	db	84	;'T'
  1185  006F5B  20                 	db	32
  1186  006F5C  3F                 	db	63	;'?'
  1187  006F5D  20                 	db	32
  1188  006F5E  31                 	db	49	;'1'
  1189  006F5F  32                 	db	50	;'2'
  1190  006F60  38                 	db	56	;'8'
  1191  006F61  29                 	db	41
  1192  006F62  0D                 	db	13
  1193  006F63  0A                 	db	10
  1194  006F64  00                 	db	0
  1195  006F65                     STR_247:
  1196  006F65  20                 	db	32
  1197  006F66  20                 	db	32
  1198  006F67  20                 	db	32
  1199  006F68  20                 	db	32
  1200  006F69  20                 	db	32
  1201  006F6A  46                 	db	70	;'F'
  1202  006F6B  6F                 	db	111	;'o'
  1203  006F6C  72                 	db	114	;'r'
  1204  006F6D  6D                 	db	109	;'m'
  1205  006F6E  61                 	db	97	;'a'
  1206  006F6F  74                 	db	116	;'t'
  1207  006F70  3A                 	db	58	;':'
  1208  006F71  20                 	db	32
  1209  006F72  70                 	db	112	;'p'
  1210  006F73  72                 	db	114	;'r'
  1211  006F74  69                 	db	105	;'i'
  1212  006F75  6F                 	db	111	;'o'
  1213  006F76  72                 	db	114	;'r'
  1214  006F77  69                 	db	105	;'i'
  1215  006F78  74                 	db	116	;'t'
  1216  006F79  79                 	db	121	;'y'
  1217  006F7A  2C                 	db	44
  1218  006F7B  63                 	db	99	;'c'
  1219  006F7C  6C                 	db	108	;'l'
  1220  006F7D  61                 	db	97	;'a'
  1221  006F7E  73                 	db	115	;'s'
  1222  006F7F  73                 	db	115	;'s'
  1223  006F80  2C                 	db	44
  1224  006F81  74                 	db	116	;'t'
  1225  006F82  79                 	db	121	;'y'
  1226  006F83  70                 	db	112	;'p'
  1227  006F84  65                 	db	101	;'e'
  1228  006F85  2C                 	db	44
  1229  006F86  6E                 	db	110	;'n'
  1230  006F87  6F                 	db	111	;'o'
  1231  006F88  64                 	db	100	;'d'
  1232  006F89  65                 	db	101	;'e'
  1233  006F8A  69                 	db	105	;'i'
  1234  006F8B  64                 	db	100	;'d'
  1235  006F8C  2C                 	db	44
  1236  006F8D  63                 	db	99	;'c'
  1237  006F8E  6F                 	db	111	;'o'
  1238  006F8F  75                 	db	117	;'u'
  1239  006F90  6E                 	db	110	;'n'
  1240  006F91  74                 	db	116	;'t'
  1241  006F92  2C                 	db	44
  1242  006F93  64                 	db	100	;'d'
  1243  006F94  61                 	db	97	;'a'
  1244  006F95  74                 	db	116	;'t'
  1245  006F96  61                 	db	97	;'a'
  1246  006F97  2C                 	db	44
  1247  006F98  2C                 	db	44
  1248  006F99  2C                 	db	44
  1249  006F9A  0D                 	db	13
  1250  006F9B  0A                 	db	10
  1251  006F9C  00                 	db	0
  1252  006F9D                     STR_233:
  1253  006F9D  52                 	db	82	;'R'
  1254  006F9E  65                 	db	101	;'e'
  1255  006F9F  63                 	db	99	;'c'
  1256  006FA0  65                 	db	101	;'e'
  1257  006FA1  69                 	db	105	;'i'
  1258  006FA2  76                 	db	118	;'v'
  1259  006FA3  65                 	db	101	;'e'
  1260  006FA4  72                 	db	114	;'r'
  1261  006FA5  20                 	db	32
  1262  006FA6  69                 	db	105	;'i'
  1263  006FA7  6E                 	db	110	;'n'
  1264  006FA8  20                 	db	32
  1265  006FA9  45                 	db	69	;'E'
  1266  006FAA  72                 	db	114	;'r'
  1267  006FAB  72                 	db	114	;'r'
  1268  006FAC  6F                 	db	111	;'o'
  1269  006FAD  72                 	db	114	;'r'
  1270  006FAE  20                 	db	32
  1271  006FAF  53                 	db	83	;'S'
  1272  006FB0  74                 	db	116	;'t'
  1273  006FB1  61                 	db	97	;'a'
  1274  006FB2  74                 	db	116	;'t'
  1275  006FB3  65                 	db	101	;'e'
  1276  006FB4  20                 	db	32
  1277  006FB5  57                 	db	87	;'W'
  1278  006FB6  61                 	db	97	;'a'
  1279  006FB7  72                 	db	114	;'r'
  1280  006FB8  6E                 	db	110	;'n'
  1281  006FB9  69                 	db	105	;'i'
  1282  006FBA  6E                 	db	110	;'n'
  1283  006FBB  67                 	db	103	;'g'
  1284  006FBC  20                 	db	32
  1285  006FBD  28                 	db	40
  1286  006FBE  31                 	db	49	;'1'
  1287  006FBF  32                 	db	50	;'2'
  1288  006FC0  38                 	db	56	;'8'
  1289  006FC1  20                 	db	32
  1290  006FC2  3E                 	db	62	;'>'
  1291  006FC3  20                 	db	32
  1292  006FC4  52                 	db	82	;'R'
  1293  006FC5  45                 	db	69	;'E'
  1294  006FC6  52                 	db	82	;'R'
  1295  006FC7  52                 	db	82	;'R'
  1296  006FC8  43                 	db	67	;'C'
  1297  006FC9  4E                 	db	78	;'N'
  1298  006FCA  54                 	db	84	;'T'
  1299  006FCB  20                 	db	32
  1300  006FCC  3F                 	db	63	;'?'
  1301  006FCD  20                 	db	32
  1302  006FCE  39                 	db	57	;'9'
  1303  006FCF  36                 	db	54	;'6'
  1304  006FD0  29                 	db	41
  1305  006FD1  0D                 	db	13
  1306  006FD2  0A                 	db	10
  1307  006FD3  00                 	db	0
  1308  006FD4                     STR_265:
  1309  006FD4  20                 	db	32
  1310  006FD5  20                 	db	32
  1311  006FD6  20                 	db	32
  1312  006FD7  20                 	db	32
  1313  006FD8  53                 	db	83	;'S'
  1314  006FD9  54                 	db	84	;'T'
  1315  006FDA  41                 	db	65	;'A'
  1316  006FDB  52                 	db	82	;'R'
  1317  006FDC  54                 	db	84	;'T'
  1318  006FDD  49                 	db	73	;'I'
  1319  006FDE  46                 	db	70	;'F'
  1320  006FDF  20                 	db	32
  1321  006FE0  2D                 	db	45
  1322  006FE1  20                 	db	32
  1323  006FE2  53                 	db	83	;'S'
  1324  006FE3  65                 	db	101	;'e'
  1325  006FE4  74                 	db	116	;'t'
  1326  006FE5  20                 	db	32
  1327  006FE6  69                 	db	105	;'i'
  1328  006FE7  6E                 	db	110	;'n'
  1329  006FE8  74                 	db	116	;'t'
  1330  006FE9  65                 	db	101	;'e'
  1331  006FEA  72                 	db	114	;'r'
  1332  006FEB  66                 	db	102	;'f'
  1333  006FEC  61                 	db	97	;'a'
  1334  006FED  63                 	db	99	;'c'
  1335  006FEE  65                 	db	101	;'e'
  1336  006FEF  20                 	db	32
  1337  006FF0  73                 	db	115	;'s'
  1338  006FF1  74                 	db	116	;'t'
  1339  006FF2  61                 	db	97	;'a'
  1340  006FF3  74                 	db	116	;'t'
  1341  006FF4  65                 	db	101	;'e'
  1342  006FF5  20                 	db	32
  1343  006FF6  74                 	db	116	;'t'
  1344  006FF7  6F                 	db	111	;'o'
  1345  006FF8  20                 	db	32
  1346  006FF9  75                 	db	117	;'u'
  1347  006FFA  73                 	db	115	;'s'
  1348  006FFB  65                 	db	101	;'e'
  1349  006FFC  20                 	db	32
  1350  006FFD  6F                 	db	111	;'o'
  1351  006FFE  6E                 	db	110	;'n'
  1352  006FFF  20                 	db	32
  1353  007000  73                 	db	115	;'s'
  1354  007001  74                 	db	116	;'t'
  1355  007002  61                 	db	97	;'a'
  1356  007003  72                 	db	114	;'r'
  1357  007004  74                 	db	116	;'t'
  1358  007005  75                 	db	117	;'u'
  1359  007006  70                 	db	112	;'p'
  1360  007007  2E                 	db	46
  1361  007008  0D                 	db	13
  1362  007009  0A                 	db	10
  1363  00700A  00                 	db	0
  1364  00700B                     STR_4:
  1365  00700B  50                 	db	80	;'P'
  1366  00700C  72                 	db	114	;'r'
  1367  00700D  65                 	db	101	;'e'
  1368  00700E  73                 	db	115	;'s'
  1369  00700F  73                 	db	115	;'s'
  1370  007010  20                 	db	32
  1371  007011  27                 	db	39
  1372  007012  76                 	db	118	;'v'
  1373  007013  27                 	db	39
  1374  007014  20                 	db	32
  1375  007015  77                 	db	119	;'w'
  1376  007016  69                 	db	105	;'i'
  1377  007017  74                 	db	116	;'t'
  1378  007018  68                 	db	104	;'h'
  1379  007019  69                 	db	105	;'i'
  1380  00701A  6E                 	db	110	;'n'
  1381  00701B  20                 	db	32
  1382  00701C  74                 	db	116	;'t'
  1383  00701D  68                 	db	104	;'h'
  1384  00701E  72                 	db	114	;'r'
  1385  00701F  65                 	db	101	;'e'
  1386  007020  65                 	db	101	;'e'
  1387  007021  20                 	db	32
  1388  007022  73                 	db	115	;'s'
  1389  007023  65                 	db	101	;'e'
  1390  007024  63                 	db	99	;'c'
  1391  007025  6F                 	db	111	;'o'
  1392  007026  6E                 	db	110	;'n'
  1393  007027  64                 	db	100	;'d'
  1394  007028  73                 	db	115	;'s'
  1395  007029  20                 	db	32
  1396  00702A  74                 	db	116	;'t'
  1397  00702B  6F                 	db	111	;'o'
  1398  00702C  20                 	db	32
  1399  00702D  65                 	db	101	;'e'
  1400  00702E  6E                 	db	110	;'n'
  1401  00702F  74                 	db	116	;'t'
  1402  007030  65                 	db	101	;'e'
  1403  007031  72                 	db	114	;'r'
  1404  007032  20                 	db	32
  1405  007033  76                 	db	118	;'v'
  1406  007034  65                 	db	101	;'e'
  1407  007035  72                 	db	114	;'r'
  1408  007036  62                 	db	98	;'b'
  1409  007037  6F                 	db	111	;'o'
  1410  007038  73                 	db	115	;'s'
  1411  007039  65                 	db	101	;'e'
  1412  00703A  20                 	db	32
  1413  00703B  6D                 	db	109	;'m'
  1414  00703C  6F                 	db	111	;'o'
  1415  00703D  64                 	db	100	;'d'
  1416  00703E  65                 	db	101	;'e'
  1417  00703F  0D                 	db	13
  1418  007040  0A                 	db	10
  1419  007041  00                 	db	0
  1420  007042                     STR_234:
  1421  007042  52                 	db	82	;'R'
  1422  007043  65                 	db	101	;'e'
  1423  007044  63                 	db	99	;'c'
  1424  007045  65                 	db	101	;'e'
  1425  007046  69                 	db	105	;'i'
  1426  007047  76                 	db	118	;'v'
  1427  007048  65                 	db	101	;'e'
  1428  007049  72                 	db	114	;'r'
  1429  00704A  20                 	db	32
  1430  00704B  69                 	db	105	;'i'
  1431  00704C  6E                 	db	110	;'n'
  1432  00704D  20                 	db	32
  1433  00704E  45                 	db	69	;'E'
  1434  00704F  72                 	db	114	;'r'
  1435  007050  72                 	db	114	;'r'
  1436  007051  6F                 	db	111	;'o'
  1437  007052  72                 	db	114	;'r'
  1438  007053  20                 	db	32
  1439  007054  53                 	db	83	;'S'
  1440  007055  74                 	db	116	;'t'
  1441  007056  61                 	db	97	;'a'
  1442  007057  74                 	db	116	;'t'
  1443  007058  65                 	db	101	;'e'
  1444  007059  20                 	db	32
  1445  00705A  42                 	db	66	;'B'
  1446  00705B  75                 	db	117	;'u'
  1447  00705C  73                 	db	115	;'s'
  1448  00705D  20                 	db	32
  1449  00705E  50                 	db	80	;'P'
  1450  00705F  61                 	db	97	;'a'
  1451  007060  73                 	db	115	;'s'
  1452  007061  73                 	db	115	;'s'
  1453  007062  69                 	db	105	;'i'
  1454  007063  76                 	db	118	;'v'
  1455  007064  65                 	db	101	;'e'
  1456  007065  20                 	db	32
  1457  007066  28                 	db	40
  1458  007067  52                 	db	82	;'R'
  1459  007068  45                 	db	69	;'E'
  1460  007069  52                 	db	82	;'R'
  1461  00706A  52                 	db	82	;'R'
  1462  00706B  43                 	db	67	;'C'
  1463  00706C  4E                 	db	78	;'N'
  1464  00706D  54                 	db	84	;'T'
  1465  00706E  20                 	db	32
  1466  00706F  3F                 	db	63	;'?'
  1467  007070  20                 	db	32
  1468  007071  31                 	db	49	;'1'
  1469  007072  32                 	db	50	;'2'
  1470  007073  38                 	db	56	;'8'
  1471  007074  29                 	db	41
  1472  007075  0D                 	db	13
  1473  007076  0A                 	db	10
  1474  007077  00                 	db	0
  1475  007078                     STR_80:
  1476  007078  2D                 	db	45
  1477  007079  45                 	db	69	;'E'
  1478  00707A  52                 	db	82	;'R'
  1479  00707B  52                 	db	82	;'R'
  1480  00707C  4F                 	db	79	;'O'
  1481  00707D  52                 	db	82	;'R'
  1482  00707E  20                 	db	32
  1483  00707F  2D                 	db	45
  1484  007080  20                 	db	32
  1485  007081  4F                 	db	79	;'O'
  1486  007082  6E                 	db	110	;'n'
  1487  007083  65                 	db	101	;'e'
  1488  007084  20                 	db	32
  1489  007085  6F                 	db	111	;'o'
  1490  007086  72                 	db	114	;'r'
  1491  007087  20                 	db	32
  1492  007088  6D                 	db	109	;'m'
  1493  007089  6F                 	db	111	;'o'
  1494  00708A  72                 	db	114	;'r'
  1495  00708B  65                 	db	101	;'e'
  1496  00708C  20                 	db	32
  1497  00708D  72                 	db	114	;'r'
  1498  00708E  65                 	db	101	;'e'
  1499  00708F  67                 	db	103	;'g'
  1500  007090  69                 	db	105	;'i'
  1501  007091  73                 	db	115	;'s'
  1502  007092  74                 	db	116	;'t'
  1503  007093  65                 	db	101	;'e'
  1504  007094  72                 	db	114	;'r'
  1505  007095  28                 	db	40
  1506  007096  73                 	db	115	;'s'
  1507  007097  29                 	db	41
  1508  007098  20                 	db	32
  1509  007099  63                 	db	99	;'c'
  1510  00709A  6F                 	db	111	;'o'
  1511  00709B  75                 	db	117	;'u'
  1512  00709C  6C                 	db	108	;'l'
  1513  00709D  64                 	db	100	;'d'
  1514  00709E  20                 	db	32
  1515  00709F  6E                 	db	110	;'n'
  1516  0070A0  6F                 	db	111	;'o'
  1517  0070A1  74                 	db	116	;'t'
  1518  0070A2  20                 	db	32
  1519  0070A3  62                 	db	98	;'b'
  1520  0070A4  65                 	db	101	;'e'
  1521  0070A5  20                 	db	32
  1522  0070A6  72                 	db	114	;'r'
  1523  0070A7  65                 	db	101	;'e'
  1524  0070A8  61                 	db	97	;'a'
  1525  0070A9  64                 	db	100	;'d'
  1526  0070AA  2E                 	db	46
  1527  0070AB  0D                 	db	13
  1528  0070AC  0A                 	db	10
  1529  0070AD  00                 	db	0
  1530  0070AE                     STR_227:
  1531  0070AE  54                 	db	84	;'T'
  1532  0070AF  72                 	db	114	;'r'
  1533  0070B0  61                 	db	97	;'a'
  1534  0070B1  6E                 	db	110	;'n'
  1535  0070B2  73                 	db	115	;'s'
  1536  0070B3  6D                 	db	109	;'m'
  1537  0070B4  69                 	db	105	;'i'
  1538  0070B5  74                 	db	116	;'t'
  1539  0070B6  74                 	db	116	;'t'
  1540  0070B7  65                 	db	101	;'e'
  1541  0070B8  72                 	db	114	;'r'
  1542  0070B9  20                 	db	32
  1543  0070BA  69                 	db	105	;'i'
  1544  0070BB  6E                 	db	110	;'n'
  1545  0070BC  20                 	db	32
  1546  0070BD  45                 	db	69	;'E'
  1547  0070BE  72                 	db	114	;'r'
  1548  0070BF  72                 	db	114	;'r'
  1549  0070C0  6F                 	db	111	;'o'
  1550  0070C1  72                 	db	114	;'r'
  1551  0070C2  20                 	db	32
  1552  0070C3  53                 	db	83	;'S'
  1553  0070C4  74                 	db	116	;'t'
  1554  0070C5  61                 	db	97	;'a'
  1555  0070C6  74                 	db	116	;'t'
  1556  0070C7  65                 	db	101	;'e'
  1557  0070C8  20                 	db	32
  1558  0070C9  42                 	db	66	;'B'
  1559  0070CA  75                 	db	117	;'u'
  1560  0070CB  73                 	db	115	;'s'
  1561  0070CC  20                 	db	32
  1562  0070CD  4F                 	db	79	;'O'
  1563  0070CE  46                 	db	70	;'F'
  1564  0070CF  46                 	db	70	;'F'
  1565  0070D0  20                 	db	32
  1566  0070D1  28                 	db	40
  1567  0070D2  54                 	db	84	;'T'
  1568  0070D3  45                 	db	69	;'E'
  1569  0070D4  52                 	db	82	;'R'
  1570  0070D5  52                 	db	82	;'R'
  1571  0070D6  43                 	db	67	;'C'
  1572  0070D7  4E                 	db	78	;'N'
  1573  0070D8  54                 	db	84	;'T'
  1574  0070D9  20                 	db	32
  1575  0070DA  3F                 	db	63	;'?'
  1576  0070DB  20                 	db	32
  1577  0070DC  32                 	db	50	;'2'
  1578  0070DD  35                 	db	53	;'5'
  1579  0070DE  36                 	db	54	;'6'
  1580  0070DF  29                 	db	41
  1581  0070E0  0D                 	db	13
  1582  0070E1  0A                 	db	10
  1583  0070E2  00                 	db	0
  1584  0070E3                     STR_50:
  1585  0070E3  2D                 	db	45
  1586  0070E4  45                 	db	69	;'E'
  1587  0070E5  52                 	db	82	;'R'
  1588  0070E6  52                 	db	82	;'R'
  1589  0070E7  4F                 	db	79	;'O'
  1590  0070E8  52                 	db	82	;'R'
  1591  0070E9  20                 	db	32
  1592  0070EA  2D                 	db	45
  1593  0070EB  20                 	db	32
  1594  0070EC  43                 	db	67	;'C'
  1595  0070ED  6F                 	db	111	;'o'
  1596  0070EE  6D                 	db	109	;'m'
  1597  0070EF  6D                 	db	109	;'m'
  1598  0070F0  61                 	db	97	;'a'
  1599  0070F1  6E                 	db	110	;'n'
  1600  0070F2  64                 	db	100	;'d'
  1601  0070F3  20                 	db	32
  1602  0070F4  6F                 	db	111	;'o'
  1603  0070F5  6E                 	db	110	;'n'
  1604  0070F6  6C                 	db	108	;'l'
  1605  0070F7  79                 	db	121	;'y'
  1606  0070F8  20                 	db	32
  1607  0070F9  77                 	db	119	;'w'
  1608  0070FA  6F                 	db	111	;'o'
  1609  0070FB  72                 	db	114	;'r'
  1610  0070FC  6B                 	db	107	;'k'
  1611  0070FD  73                 	db	115	;'s'
  1612  0070FE  20                 	db	32
  1613  0070FF  69                 	db	105	;'i'
  1614  007100  66                 	db	102	;'f'
  1615  007101  20                 	db	32
  1616  007102  69                 	db	105	;'i'
  1617  007103  6E                 	db	110	;'n'
  1618  007104  74                 	db	116	;'t'
  1619  007105  65                 	db	101	;'e'
  1620  007106  72                 	db	114	;'r'
  1621  007107  66                 	db	102	;'f'
  1622  007108  61                 	db	97	;'a'
  1623  007109  63                 	db	99	;'c'
  1624  00710A  65                 	db	101	;'e'
  1625  00710B  20                 	db	32
  1626  00710C  69                 	db	105	;'i'
  1627  00710D  73                 	db	115	;'s'
  1628  00710E  20                 	db	32
  1629  00710F  6F                 	db	111	;'o'
  1630  007110  70                 	db	112	;'p'
  1631  007111  65                 	db	101	;'e'
  1632  007112  6E                 	db	110	;'n'
  1633  007113  2E                 	db	46
  1634  007114  0D                 	db	13
  1635  007115  0A                 	db	10
  1636  007116  00                 	db	0
  1637  007117                     STR_235:
  1638  007117  54                 	db	84	;'T'
  1639  007118  72                 	db	114	;'r'
  1640  007119  61                 	db	97	;'a'
  1641  00711A  6E                 	db	110	;'n'
  1642  00711B  73                 	db	115	;'s'
  1643  00711C  6D                 	db	109	;'m'
  1644  00711D  69                 	db	105	;'i'
  1645  00711E  74                 	db	116	;'t'
  1646  00711F  74                 	db	116	;'t'
  1647  007120  65                 	db	101	;'e'
  1648  007121  72                 	db	114	;'r'
  1649  007122  20                 	db	32
  1650  007123  6F                 	db	111	;'o'
  1651  007124  72                 	db	114	;'r'
  1652  007125  20                 	db	32
  1653  007126  52                 	db	82	;'R'
  1654  007127  65                 	db	101	;'e'
  1655  007128  63                 	db	99	;'c'
  1656  007129  65                 	db	101	;'e'
  1657  00712A  69                 	db	105	;'i'
  1658  00712B  76                 	db	118	;'v'
  1659  00712C  65                 	db	101	;'e'
  1660  00712D  72                 	db	114	;'r'
  1661  00712E  20                 	db	32
  1662  00712F  69                 	db	105	;'i'
  1663  007130  73                 	db	115	;'s'
  1664  007131  20                 	db	32
  1665  007132  69                 	db	105	;'i'
  1666  007133  6E                 	db	110	;'n'
  1667  007134  20                 	db	32
  1668  007135  45                 	db	69	;'E'
  1669  007136  72                 	db	114	;'r'
  1670  007137  72                 	db	114	;'r'
  1671  007138  6F                 	db	111	;'o'
  1672  007139  72                 	db	114	;'r'
  1673  00713A  20                 	db	32
  1674  00713B  53                 	db	83	;'S'
  1675  00713C  74                 	db	116	;'t'
  1676  00713D  61                 	db	97	;'a'
  1677  00713E  74                 	db	116	;'t'
  1678  00713F  65                 	db	101	;'e'
  1679  007140  20                 	db	32
  1680  007141  57                 	db	87	;'W'
  1681  007142  61                 	db	97	;'a'
  1682  007143  72                 	db	114	;'r'
  1683  007144  6E                 	db	110	;'n'
  1684  007145  69                 	db	105	;'i'
  1685  007146  6E                 	db	110	;'n'
  1686  007147  67                 	db	103	;'g'
  1687  007148  0D                 	db	13
  1688  007149  0A                 	db	10
  1689  00714A  00                 	db	0
  1690  00714B                     STR_241:
  1691  00714B  4C                 	db	76	;'L'
  1692  00714C  49                 	db	73	;'I'
  1693  00714D  53                 	db	83	;'S'
  1694  00714E  54                 	db	84	;'T'
  1695  00714F  45                 	db	69	;'E'
  1696  007150  4E                 	db	78	;'N'
  1697  007151  20                 	db	32
  1698  007152  2D                 	db	45
  1699  007153  20                 	db	32
  1700  007154  4F                 	db	79	;'O'
  1701  007155  70                 	db	112	;'p'
  1702  007156  65                 	db	101	;'e'
  1703  007157  6E                 	db	110	;'n'
  1704  007158  20                 	db	32
  1705  007159  43                 	db	67	;'C'
  1706  00715A  41                 	db	65	;'A'
  1707  00715B  4E                 	db	78	;'N'
  1708  00715C  20                 	db	32
  1709  00715D  69                 	db	105	;'i'
  1710  00715E  6E                 	db	110	;'n'
  1711  00715F  74                 	db	116	;'t'
  1712  007160  65                 	db	101	;'e'
  1713  007161  72                 	db	114	;'r'
  1714  007162  66                 	db	102	;'f'
  1715  007163  61                 	db	97	;'a'
  1716  007164  63                 	db	99	;'c'
  1717  007165  65                 	db	101	;'e'
  1718  007166  20                 	db	32
  1719  007167  69                 	db	105	;'i'
  1720  007168  6E                 	db	110	;'n'
  1721  007169  20                 	db	32
  1722  00716A  6C                 	db	108	;'l'
  1723  00716B  69                 	db	105	;'i'
  1724  00716C  73                 	db	115	;'s'
  1725  00716D  74                 	db	116	;'t'
  1726  00716E  65                 	db	101	;'e'
  1727  00716F  6E                 	db	110	;'n'
  1728  007170  20                 	db	32
  1729  007171  6F                 	db	111	;'o'
  1730  007172  6E                 	db	110	;'n'
  1731  007173  6C                 	db	108	;'l'
  1732  007174  79                 	db	121	;'y'
  1733  007175  20                 	db	32
  1734  007176  6D                 	db	109	;'m'
  1735  007177  6F                 	db	111	;'o'
  1736  007178  64                 	db	100	;'d'
  1737  007179  65                 	db	101	;'e'
  1738  00717A  2E                 	db	46
  1739  00717B  0D                 	db	13
  1740  00717C  0A                 	db	10
  1741  00717D  00                 	db	0
  1742  00717E                     STR_119:
  1743  00717E  2D                 	db	45
  1744  00717F  45                 	db	69	;'E'
  1745  007180  52                 	db	82	;'R'
  1746  007181  52                 	db	82	;'R'
  1747  007182  4F                 	db	79	;'O'
  1748  007183  52                 	db	82	;'R'
  1749  007184  20                 	db	32
  1750  007185  2D                 	db	45
  1751  007186  20                 	db	32
  1752  007187  4D                 	db	77	;'M'
  1753  007188  61                 	db	97	;'a'
  1754  007189  73                 	db	115	;'s'
  1755  00718A  6B                 	db	107	;'k'
  1756  00718B  20                 	db	32
  1757  00718C  6E                 	db	110	;'n'
  1758  00718D  75                 	db	117	;'u'
  1759  00718E  6D                 	db	109	;'m'
  1760  00718F  62                 	db	98	;'b'
  1761  007190  65                 	db	101	;'e'
  1762  007191  72                 	db	114	;'r'
  1763  007192  20                 	db	32
  1764  007193  63                 	db	99	;'c'
  1765  007194  61                 	db	97	;'a'
  1766  007195  6E                 	db	110	;'n'
  1767  007196  20                 	db	32
  1768  007197  6F                 	db	111	;'o'
  1769  007198  6E                 	db	110	;'n'
  1770  007199  6C                 	db	108	;'l'
  1771  00719A  79                 	db	121	;'y'
  1772  00719B  20                 	db	32
  1773  00719C  62                 	db	98	;'b'
  1774  00719D  65                 	db	101	;'e'
  1775  00719E  20                 	db	32
  1776  00719F  73                 	db	115	;'s'
  1777  0071A0  65                 	db	101	;'e'
  1778  0071A1  74                 	db	116	;'t'
  1779  0071A2  20                 	db	32
  1780  0071A3  61                 	db	97	;'a'
  1781  0071A4  73                 	db	115	;'s'
  1782  0071A5  20                 	db	32
  1783  0071A6  30                 	db	48	;'0'
  1784  0071A7  20                 	db	32
  1785  0071A8  6F                 	db	111	;'o'
  1786  0071A9  72                 	db	114	;'r'
  1787  0071AA  20                 	db	32
  1788  0071AB  31                 	db	49	;'1'
  1789  0071AC  2E                 	db	46
  1790  0071AD  0D                 	db	13
  1791  0071AE  0A                 	db	10
  1792  0071AF  00                 	db	0
  1793  0071B0                     STR_242:
  1794  0071B0  4C                 	db	76	;'L'
  1795  0071B1  4F                 	db	79	;'O'
  1796  0071B2  4F                 	db	79	;'O'
  1797  0071B3  50                 	db	80	;'P'
  1798  0071B4  42                 	db	66	;'B'
  1799  0071B5  41                 	db	65	;'A'
  1800  0071B6  43                 	db	67	;'C'
  1801  0071B7  4B                 	db	75	;'K'
  1802  0071B8  20                 	db	32
  1803  0071B9  2D                 	db	45
  1804  0071BA  20                 	db	32
  1805  0071BB  4F                 	db	79	;'O'
  1806  0071BC  70                 	db	112	;'p'
  1807  0071BD  65                 	db	101	;'e'
  1808  0071BE  6E                 	db	110	;'n'
  1809  0071BF  20                 	db	32
  1810  0071C0  43                 	db	67	;'C'
  1811  0071C1  41                 	db	65	;'A'
  1812  0071C2  4E                 	db	78	;'N'
  1813  0071C3  20                 	db	32
  1814  0071C4  69                 	db	105	;'i'
  1815  0071C5  6E                 	db	110	;'n'
  1816  0071C6  74                 	db	116	;'t'
  1817  0071C7  65                 	db	101	;'e'
  1818  0071C8  72                 	db	114	;'r'
  1819  0071C9  66                 	db	102	;'f'
  1820  0071CA  61                 	db	97	;'a'
  1821  0071CB  63                 	db	99	;'c'
  1822  0071CC  65                 	db	101	;'e'
  1823  0071CD  20                 	db	32
  1824  0071CE  69                 	db	105	;'i'
  1825  0071CF  6E                 	db	110	;'n'
  1826  0071D0  20                 	db	32
  1827  0071D1  6C                 	db	108	;'l'
  1828  0071D2  6F                 	db	111	;'o'
  1829  0071D3  6F                 	db	111	;'o'
  1830  0071D4  70                 	db	112	;'p'
  1831  0071D5  62                 	db	98	;'b'
  1832  0071D6  61                 	db	97	;'a'
  1833  0071D7  63                 	db	99	;'c'
  1834  0071D8  6B                 	db	107	;'k'
  1835  0071D9  20                 	db	32
  1836  0071DA  6D                 	db	109	;'m'
  1837  0071DB  6F                 	db	111	;'o'
  1838  0071DC  64                 	db	100	;'d'
  1839  0071DD  65                 	db	101	;'e'
  1840  0071DE  2E                 	db	46
  1841  0071DF  0D                 	db	13
  1842  0071E0  0A                 	db	10
  1843  0071E1  00                 	db	0
  1844  0071E2                     STR_244:
  1845  0071E2  56                 	db	86	;'V'
  1846  0071E3  45                 	db	69	;'E'
  1847  0071E4  52                 	db	82	;'R'
  1848  0071E5  53                 	db	83	;'S'
  1849  0071E6  49                 	db	73	;'I'
  1850  0071E7  4F                 	db	79	;'O'
  1851  0071E8  4E                 	db	78	;'N'
  1852  0071E9  20                 	db	32
  1853  0071EA  2D                 	db	45
  1854  0071EB  20                 	db	32
  1855  0071EC  44                 	db	68	;'D'
  1856  0071ED  69                 	db	105	;'i'
  1857  0071EE  73                 	db	115	;'s'
  1858  0071EF  70                 	db	112	;'p'
  1859  0071F0  6C                 	db	108	;'l'
  1860  0071F1  61                 	db	97	;'a'
  1861  0071F2  79                 	db	121	;'y'
  1862  0071F3  20                 	db	32
  1863  0071F4  66                 	db	102	;'f'
  1864  0071F5  69                 	db	105	;'i'
  1865  0071F6  72                 	db	114	;'r'
  1866  0071F7  6D                 	db	109	;'m'
  1867  0071F8  77                 	db	119	;'w'
  1868  0071F9  61                 	db	97	;'a'
  1869  0071FA  72                 	db	114	;'r'
  1870  0071FB  65                 	db	101	;'e'
  1871  0071FC  20                 	db	32
  1872  0071FD  76                 	db	118	;'v'
  1873  0071FE  65                 	db	101	;'e'
  1874  0071FF  72                 	db	114	;'r'
  1875  007200  73                 	db	115	;'s'
  1876  007201  69                 	db	105	;'i'
  1877  007202  6F                 	db	111	;'o'
  1878  007203  6E                 	db	110	;'n'
  1879  007204  20                 	db	32
  1880  007205  69                 	db	105	;'i'
  1881  007206  6E                 	db	110	;'n'
  1882  007207  66                 	db	102	;'f'
  1883  007208  6F                 	db	111	;'o'
  1884  007209  72                 	db	114	;'r'
  1885  00720A  6D                 	db	109	;'m'
  1886  00720B  61                 	db	97	;'a'
  1887  00720C  74                 	db	116	;'t'
  1888  00720D  69                 	db	105	;'i'
  1889  00720E  6F                 	db	111	;'o'
  1890  00720F  6E                 	db	110	;'n'
  1891  007210  2E                 	db	46
  1892  007211  0D                 	db	13
  1893  007212  0A                 	db	10
  1894  007213  00                 	db	0
  1895  007214                     STR_264:
  1896  007214  20                 	db	32
  1897  007215  20                 	db	32
  1898  007216  20                 	db	32
  1899  007217  20                 	db	32
  1900  007218  20                 	db	32
  1901  007219  20                 	db	32
  1902  00721A  20                 	db	32
  1903  00721B  20                 	db	32
  1904  00721C  20                 	db	32
  1905  00721D  20                 	db	32
  1906  00721E  20                 	db	32
  1907  00721F  20                 	db	32
  1908  007220  20                 	db	32
  1909  007221  20                 	db	32
  1910  007222  20                 	db	32
  1911  007223  20                 	db	32
  1912  007224  46                 	db	70	;'F'
  1913  007225  6F                 	db	111	;'o'
  1914  007226  72                 	db	114	;'r'
  1915  007227  6D                 	db	109	;'m'
  1916  007228  61                 	db	97	;'a'
  1917  007229  74                 	db	116	;'t'
  1918  00722A  3A                 	db	58	;':'
  1919  00722B  20                 	db	32
  1920  00722C  73                 	db	115	;'s'
  1921  00722D  65                 	db	101	;'e'
  1922  00722E  74                 	db	116	;'t'
  1923  00722F  20                 	db	32
  1924  007230  72                 	db	114	;'r'
  1925  007231  77                 	db	119	;'w'
  1926  007232  74                 	db	116	;'t'
  1927  007233  69                 	db	105	;'i'
  1928  007234  6D                 	db	109	;'m'
  1929  007235  65                 	db	101	;'e'
  1930  007236  6F                 	db	111	;'o'
  1931  007237  75                 	db	117	;'u'
  1932  007238  74                 	db	116	;'t'
  1933  007239  20                 	db	32
  1934  00723A  74                 	db	116	;'t'
  1935  00723B  69                 	db	105	;'i'
  1936  00723C  6D                 	db	109	;'m'
  1937  00723D  65                 	db	101	;'e'
  1938  00723E  6F                 	db	111	;'o'
  1939  00723F  75                 	db	117	;'u'
  1940  007240  74                 	db	116	;'t'
  1941  007241  2E                 	db	46
  1942  007242  0D                 	db	13
  1943  007243  0A                 	db	10
  1944  007244  00                 	db	0
  1945  007245                     STR_262:
  1946  007245  20                 	db	32
  1947  007246  20                 	db	32
  1948  007247  20                 	db	32
  1949  007248  20                 	db	32
  1950  007249  44                 	db	68	;'D'
  1951  00724A  45                 	db	69	;'E'
  1952  00724B  43                 	db	67	;'C'
  1953  00724C  49                 	db	73	;'I'
  1954  00724D  4D                 	db	77	;'M'
  1955  00724E  41                 	db	65	;'A'
  1956  00724F  4C                 	db	76	;'L'
  1957  007250  20                 	db	32
  1958  007251  2D                 	db	45
  1959  007252  20                 	db	32
  1960  007253  44                 	db	68	;'D'
  1961  007254  69                 	db	105	;'i'
  1962  007255  73                 	db	115	;'s'
  1963  007256  70                 	db	112	;'p'
  1964  007257  6C                 	db	108	;'l'
  1965  007258  61                 	db	97	;'a'
  1966  007259  79                 	db	121	;'y'
  1967  00725A  20                 	db	32
  1968  00725B  6E                 	db	110	;'n'
  1969  00725C  75                 	db	117	;'u'
  1970  00725D  6D                 	db	109	;'m'
  1971  00725E  65                 	db	101	;'e'
  1972  00725F  72                 	db	114	;'r'
  1973  007260  69                 	db	105	;'i'
  1974  007261  63                 	db	99	;'c'
  1975  007262  61                 	db	97	;'a'
  1976  007263  6C                 	db	108	;'l'
  1977  007264  73                 	db	115	;'s'
  1978  007265  20                 	db	32
  1979  007266  69                 	db	105	;'i'
  1980  007267  6E                 	db	110	;'n'
  1981  007268  20                 	db	32
  1982  007269  64                 	db	100	;'d'
  1983  00726A  65                 	db	101	;'e'
  1984  00726B  63                 	db	99	;'c'
  1985  00726C  69                 	db	105	;'i'
  1986  00726D  6D                 	db	109	;'m'
  1987  00726E  61                 	db	97	;'a'
  1988  00726F  6C                 	db	108	;'l'
  1989  007270  2E                 	db	46
  1990  007271  0D                 	db	13
  1991  007272  0A                 	db	10
  1992  007273  00                 	db	0
  1993  007274                     STR_261:
  1994  007274  20                 	db	32
  1995  007275  20                 	db	32
  1996  007276  20                 	db	32
  1997  007277  20                 	db	32
  1998  007278  48                 	db	72	;'H'
  1999  007279  45                 	db	69	;'E'
  2000  00727A  58                 	db	88	;'X'
  2001  00727B  20                 	db	32
  2002  00727C  2D                 	db	45
  2003  00727D  20                 	db	32
  2004  00727E  44                 	db	68	;'D'
  2005  00727F  69                 	db	105	;'i'
  2006  007280  73                 	db	115	;'s'
  2007  007281  70                 	db	112	;'p'
  2008  007282  6C                 	db	108	;'l'
  2009  007283  61                 	db	97	;'a'
  2010  007284  79                 	db	121	;'y'
  2011  007285  20                 	db	32
  2012  007286  6E                 	db	110	;'n'
  2013  007287  75                 	db	117	;'u'
  2014  007288  6D                 	db	109	;'m'
  2015  007289  65                 	db	101	;'e'
  2016  00728A  72                 	db	114	;'r'
  2017  00728B  69                 	db	105	;'i'
  2018  00728C  63                 	db	99	;'c'
  2019  00728D  61                 	db	97	;'a'
  2020  00728E  6C                 	db	108	;'l'
  2021  00728F  73                 	db	115	;'s'
  2022  007290  20                 	db	32
  2023  007291  69                 	db	105	;'i'
  2024  007292  6E                 	db	110	;'n'
  2025  007293  20                 	db	32
  2026  007294  68                 	db	104	;'h'
  2027  007295  65                 	db	101	;'e'
  2028  007296  78                 	db	120	;'x'
  2029  007297  61                 	db	97	;'a'
  2030  007298  64                 	db	100	;'d'
  2031  007299  65                 	db	101	;'e'
  2032  00729A  63                 	db	99	;'c'
  2033  00729B  69                 	db	105	;'i'
  2034  00729C  6D                 	db	109	;'m'
  2035  00729D  61                 	db	97	;'a'
  2036  00729E  6C                 	db	108	;'l'
  2037  00729F  2E                 	db	46
  2038  0072A0  0D                 	db	13
  2039  0072A1  0A                 	db	10
  2040  0072A2  00                 	db	0
  2041  0072A3                     STR_252:
  2042  0072A3  46                 	db	70	;'F'
  2043  0072A4  49                 	db	73	;'I'
  2044  0072A5  4E                 	db	78	;'N'
  2045  0072A6  44                 	db	68	;'D'
  2046  0072A7  20                 	db	32
  2047  0072A8  2D                 	db	45
  2048  0072A9  20                 	db	32
  2049  0072AA  46                 	db	70	;'F'
  2050  0072AB  69                 	db	105	;'i'
  2051  0072AC  6E                 	db	110	;'n'
  2052  0072AD  64                 	db	100	;'d'
  2053  0072AE  20                 	db	32
  2054  0072AF  61                 	db	97	;'a'
  2055  0072B0  76                 	db	118	;'v'
  2056  0072B1  61                 	db	97	;'a'
  2057  0072B2  69                 	db	105	;'i'
  2058  0072B3  6C                 	db	108	;'l'
  2059  0072B4  61                 	db	97	;'a'
  2060  0072B5  62                 	db	98	;'b'
  2061  0072B6  6C                 	db	108	;'l'
  2062  0072B7  65                 	db	101	;'e'
  2063  0072B8  20                 	db	32
  2064  0072B9  43                 	db	67	;'C'
  2065  0072BA  41                 	db	65	;'A'
  2066  0072BB  4E                 	db	78	;'N'
  2067  0072BC  34                 	db	52	;'4'
  2068  0072BD  56                 	db	86	;'V'
  2069  0072BE  53                 	db	83	;'S'
  2070  0072BF  43                 	db	67	;'C'
  2071  0072C0  50                 	db	80	;'P'
  2072  0072C1  20                 	db	32
  2073  0072C2  6E                 	db	110	;'n'
  2074  0072C3  6F                 	db	111	;'o'
  2075  0072C4  64                 	db	100	;'d'
  2076  0072C5  65                 	db	101	;'e'
  2077  0072C6  73                 	db	115	;'s'
  2078  0072C7  20                 	db	32
  2079  0072C8  6F                 	db	111	;'o'
  2080  0072C9  6E                 	db	110	;'n'
  2081  0072CA  20                 	db	32
  2082  0072CB  62                 	db	98	;'b'
  2083  0072CC  75                 	db	117	;'u'
  2084  0072CD  73                 	db	115	;'s'
  2085  0072CE  2E                 	db	46
  2086  0072CF  0D                 	db	13
  2087  0072D0  0A                 	db	10
  2088  0072D1  00                 	db	0
  2089  0072D2                     STR_240:
  2090  0072D2  53                 	db	83	;'S'
  2091  0072D3  49                 	db	73	;'I'
  2092  0072D4  4C                 	db	76	;'L'
  2093  0072D5  45                 	db	69	;'E'
  2094  0072D6  4E                 	db	78	;'N'
  2095  0072D7  54                 	db	84	;'T'
  2096  0072D8  20                 	db	32
  2097  0072D9  2D                 	db	45
  2098  0072DA  20                 	db	32
  2099  0072DB  4F                 	db	79	;'O'
  2100  0072DC  70                 	db	112	;'p'
  2101  0072DD  65                 	db	101	;'e'
  2102  0072DE  6E                 	db	110	;'n'
  2103  0072DF  20                 	db	32
  2104  0072E0  43                 	db	67	;'C'
  2105  0072E1  41                 	db	65	;'A'
  2106  0072E2  4E                 	db	78	;'N'
  2107  0072E3  20                 	db	32
  2108  0072E4  69                 	db	105	;'i'
  2109  0072E5  6E                 	db	110	;'n'
  2110  0072E6  74                 	db	116	;'t'
  2111  0072E7  65                 	db	101	;'e'
  2112  0072E8  72                 	db	114	;'r'
  2113  0072E9  66                 	db	102	;'f'
  2114  0072EA  61                 	db	97	;'a'
  2115  0072EB  63                 	db	99	;'c'
  2116  0072EC  65                 	db	101	;'e'
  2117  0072ED  20                 	db	32
  2118  0072EE  69                 	db	105	;'i'
  2119  0072EF  6E                 	db	110	;'n'
  2120  0072F0  20                 	db	32
  2121  0072F1  73                 	db	115	;'s'
  2122  0072F2  69                 	db	105	;'i'
  2123  0072F3  6C                 	db	108	;'l'
  2124  0072F4  65                 	db	101	;'e'
  2125  0072F5  6E                 	db	110	;'n'
  2126  0072F6  74                 	db	116	;'t'
  2127  0072F7  20                 	db	32
  2128  0072F8  6D                 	db	109	;'m'
  2129  0072F9  6F                 	db	111	;'o'
  2130  0072FA  64                 	db	100	;'d'
  2131  0072FB  65                 	db	101	;'e'
  2132  0072FC  2E                 	db	46
  2133  0072FD  0D                 	db	13
  2134  0072FE  0A                 	db	10
  2135  0072FF  00                 	db	0
  2136  007300                     STR_245:
  2137  007300  49                 	db	73	;'I'
  2138  007301  46                 	db	70	;'F'
  2139  007302  4D                 	db	77	;'M'
  2140  007303  4F                 	db	79	;'O'
  2141  007304  44                 	db	68	;'D'
  2142  007305  45                 	db	69	;'E'
  2143  007306  20                 	db	32
  2144  007307  2D                 	db	45
  2145  007308  20                 	db	32
  2146  007309  44                 	db	68	;'D'
  2147  00730A  69                 	db	105	;'i'
  2148  00730B  73                 	db	115	;'s'
  2149  00730C  70                 	db	112	;'p'
  2150  00730D  6C                 	db	108	;'l'
  2151  00730E  61                 	db	97	;'a'
  2152  00730F  79                 	db	121	;'y'
  2153  007310  20                 	db	32
  2154  007311  73                 	db	115	;'s'
  2155  007312  65                 	db	101	;'e'
  2156  007313  6C                 	db	108	;'l'
  2157  007314  65                 	db	101	;'e'
  2158  007315  63                 	db	99	;'c'
  2159  007316  74                 	db	116	;'t'
  2160  007317  65                 	db	101	;'e'
  2161  007318  64                 	db	100	;'d'
  2162  007319  20                 	db	32
  2163  00731A  69                 	db	105	;'i'
  2164  00731B  6E                 	db	110	;'n'
  2165  00731C  74                 	db	116	;'t'
  2166  00731D  65                 	db	101	;'e'
  2167  00731E  72                 	db	114	;'r'
  2168  00731F  66                 	db	102	;'f'
  2169  007320  61                 	db	97	;'a'
  2170  007321  63                 	db	99	;'c'
  2171  007322  65                 	db	101	;'e'
  2172  007323  20                 	db	32
  2173  007324  6D                 	db	109	;'m'
  2174  007325  6F                 	db	111	;'o'
  2175  007326  64                 	db	100	;'d'
  2176  007327  65                 	db	101	;'e'
  2177  007328  2E                 	db	46
  2178  007329  0D                 	db	13
  2179  00732A  0A                 	db	10
  2180  00732B  00                 	db	0
  2181  00732C                     STR_239:
  2182  00732C  4F                 	db	79	;'O'
  2183  00732D  50                 	db	80	;'P'
  2184  00732E  45                 	db	69	;'E'
  2185  00732F  4E                 	db	78	;'N'
  2186  007330  20                 	db	32
  2187  007331  2D                 	db	45
  2188  007332  20                 	db	32
  2189  007333  4F                 	db	79	;'O'
  2190  007334  70                 	db	112	;'p'
  2191  007335  65                 	db	101	;'e'
  2192  007336  6E                 	db	110	;'n'
  2193  007337  20                 	db	32
  2194  007338  43                 	db	67	;'C'
  2195  007339  41                 	db	65	;'A'
  2196  00733A  4E                 	db	78	;'N'
  2197  00733B  20                 	db	32
  2198  00733C  69                 	db	105	;'i'
  2199  00733D  6E                 	db	110	;'n'
  2200  00733E  74                 	db	116	;'t'
  2201  00733F  65                 	db	101	;'e'
  2202  007340  72                 	db	114	;'r'
  2203  007341  66                 	db	102	;'f'
  2204  007342  61                 	db	97	;'a'
  2205  007343  63                 	db	99	;'c'
  2206  007344  65                 	db	101	;'e'
  2207  007345  20                 	db	32
  2208  007346  69                 	db	105	;'i'
  2209  007347  6E                 	db	110	;'n'
  2210  007348  20                 	db	32
  2211  007349  6E                 	db	110	;'n'
  2212  00734A  6F                 	db	111	;'o'
  2213  00734B  72                 	db	114	;'r'
  2214  00734C  6D                 	db	109	;'m'
  2215  00734D  61                 	db	97	;'a'
  2216  00734E  6C                 	db	108	;'l'
  2217  00734F  20                 	db	32
  2218  007350  6D                 	db	109	;'m'
  2219  007351  6F                 	db	111	;'o'
  2220  007352  64                 	db	100	;'d'
  2221  007353  65                 	db	101	;'e'
  2222  007354  2E                 	db	46
  2223  007355  0D                 	db	13
  2224  007356  0A                 	db	10
  2225  007357  00                 	db	0
  2226  007358                     STR_132:
  2227  007358  2B                 	db	43
  2228  007359  4F                 	db	79	;'O'
  2229  00735A  4B                 	db	75	;'K'
  2230  00735B  20                 	db	32
  2231  00735C  2D                 	db	45
  2232  00735D  20                 	db	32
  2233  00735E  4E                 	db	78	;'N'
  2234  00735F  75                 	db	117	;'u'
  2235  007360  6D                 	db	109	;'m'
  2236  007361  65                 	db	101	;'e'
  2237  007362  72                 	db	114	;'r'
  2238  007363  69                 	db	105	;'i'
  2239  007364  63                 	db	99	;'c'
  2240  007365  61                 	db	97	;'a'
  2241  007366  6C                 	db	108	;'l'
  2242  007367  20                 	db	32
  2243  007368  6F                 	db	111	;'o'
  2244  007369  75                 	db	117	;'u'
  2245  00736A  74                 	db	116	;'t'
  2246  00736B  70                 	db	112	;'p'
  2247  00736C  75                 	db	117	;'u'
  2248  00736D  74                 	db	116	;'t'
  2249  00736E  20                 	db	32
  2250  00736F  6E                 	db	110	;'n'
  2251  007370  6F                 	db	111	;'o'
  2252  007371  77                 	db	119	;'w'
  2253  007372  20                 	db	32
  2254  007373  69                 	db	105	;'i'
  2255  007374  6E                 	db	110	;'n'
  2256  007375  20                 	db	32
  2257  007376  68                 	db	104	;'h'
  2258  007377  65                 	db	101	;'e'
  2259  007378  78                 	db	120	;'x'
  2260  007379  61                 	db	97	;'a'
  2261  00737A  64                 	db	100	;'d'
  2262  00737B  65                 	db	101	;'e'
  2263  00737C  63                 	db	99	;'c'
  2264  00737D  69                 	db	105	;'i'
  2265  00737E  6D                 	db	109	;'m'
  2266  00737F  61                 	db	97	;'a'
  2267  007380  6C                 	db	108	;'l'
  2268  007381  0D                 	db	13
  2269  007382  0A                 	db	10
  2270  007383  00                 	db	0
  2271  007384                     STR_109:
  2272  007384  2D                 	db	45
  2273  007385  45                 	db	69	;'E'
  2274  007386  52                 	db	82	;'R'
  2275  007387  52                 	db	82	;'R'
  2276  007388  4F                 	db	79	;'O'
  2277  007389  52                 	db	82	;'R'
  2278  00738A  20                 	db	32
  2279  00738B  2D                 	db	45
  2280  00738C  20                 	db	32
  2281  00738D  66                 	db	102	;'f'
  2282  00738E  69                 	db	105	;'i'
  2283  00738F  6C                 	db	108	;'l'
  2284  007390  74                 	db	116	;'t'
  2285  007391  65                 	db	101	;'e'
  2286  007392  72                 	db	114	;'r'
  2287  007393  20                 	db	32
  2288  007394  66                 	db	102	;'f'
  2289  007395  6F                 	db	111	;'o'
  2290  007396  72                 	db	114	;'r'
  2291  007397  20                 	db	32
  2292  007398  70                 	db	112	;'p'
  2293  007399  72                 	db	114	;'r'
  2294  00739A  69                 	db	105	;'i'
  2295  00739B  6F                 	db	111	;'o'
  2296  00739C  72                 	db	114	;'r'
  2297  00739D  69                 	db	105	;'i'
  2298  00739E  74                 	db	116	;'t'
  2299  00739F  79                 	db	121	;'y'
  2300  0073A0  20                 	db	32
  2301  0073A1  69                 	db	105	;'i'
  2302  0073A2  73                 	db	115	;'s'
  2303  0073A3  20                 	db	32
  2304  0073A4  6D                 	db	109	;'m'
  2305  0073A5  69                 	db	105	;'i'
  2306  0073A6  73                 	db	115	;'s'
  2307  0073A7  73                 	db	115	;'s'
  2308  0073A8  69                 	db	105	;'i'
  2309  0073A9  6E                 	db	110	;'n'
  2310  0073AA  67                 	db	103	;'g'
  2311  0073AB  0D                 	db	13
  2312  0073AC  0A                 	db	10
  2313  0073AD  00                 	db	0
  2314  0073AE                     STR_157:
  2315  0073AE  2B                 	db	43
  2316  0073AF  45                 	db	69	;'E'
  2317  0073B0  52                 	db	82	;'R'
  2318  0073B1  52                 	db	82	;'R'
  2319  0073B2  4F                 	db	79	;'O'
  2320  0073B3  52                 	db	82	;'R'
  2321  0073B4  20                 	db	32
  2322  0073B5  2D                 	db	45
  2323  0073B6  20                 	db	32
  2324  0073B7  57                 	db	87	;'W'
  2325  0073B8  72                 	db	114	;'r'
  2326  0073B9  6F                 	db	111	;'o'
  2327  0073BA  6E                 	db	110	;'n'
  2328  0073BB  67                 	db	103	;'g'
  2329  0073BC  20                 	db	32
  2330  0073BD  61                 	db	97	;'a'
  2331  0073BE  72                 	db	114	;'r'
  2332  0073BF  67                 	db	103	;'g'
  2333  0073C0  75                 	db	117	;'u'
  2334  0073C1  6D                 	db	109	;'m'
  2335  0073C2  65                 	db	101	;'e'
  2336  0073C3  6E                 	db	110	;'n'
  2337  0073C4  74                 	db	116	;'t'
  2338  0073C5  20                 	db	32
  2339  0073C6  74                 	db	116	;'t'
  2340  0073C7  6F                 	db	111	;'o'
  2341  0073C8  20                 	db	32
  2342  0073C9  27                 	db	39
  2343  0073CA  73                 	db	115	;'s'
  2344  0073CB  65                 	db	101	;'e'
  2345  0073CC  74                 	db	116	;'t'
  2346  0073CD  20                 	db	32
  2347  0073CE  65                 	db	101	;'e'
  2348  0073CF  63                 	db	99	;'c'
  2349  0073D0  68                 	db	104	;'h'
  2350  0073D1  6F                 	db	111	;'o'
  2351  0073D2  27                 	db	39
  2352  0073D3  2E                 	db	46
  2353  0073D4  0D                 	db	13
  2354  0073D5  0A                 	db	10
  2355  0073D6  00                 	db	0
  2356  0073D7                     STR_115:
  2357  0073D7  2D                 	db	45
  2358  0073D8  45                 	db	69	;'E'
  2359  0073D9  52                 	db	82	;'R'
  2360  0073DA  52                 	db	82	;'R'
  2361  0073DB  4F                 	db	79	;'O'
  2362  0073DC  52                 	db	82	;'R'
  2363  0073DD  20                 	db	32
  2364  0073DE  2D                 	db	45
  2365  0073DF  20                 	db	32
  2366  0073E0  66                 	db	102	;'f'
  2367  0073E1  69                 	db	105	;'i'
  2368  0073E2  6C                 	db	108	;'l'
  2369  0073E3  74                 	db	116	;'t'
  2370  0073E4  65                 	db	101	;'e'
  2371  0073E5  72                 	db	114	;'r'
  2372  0073E6  20                 	db	32
  2373  0073E7  66                 	db	102	;'f'
  2374  0073E8  6F                 	db	111	;'o'
  2375  0073E9  72                 	db	114	;'r'
  2376  0073EA  20                 	db	32
  2377  0073EB  6E                 	db	110	;'n'
  2378  0073EC  69                 	db	105	;'i'
  2379  0073ED  64                 	db	100	;'d'
  2380  0073EE  65                 	db	101	;'e'
  2381  0073EF  20                 	db	32
  2382  0073F0  69                 	db	105	;'i'
  2383  0073F1  64                 	db	100	;'d'
  2384  0073F2  20                 	db	32
  2385  0073F3  69                 	db	105	;'i'
  2386  0073F4  73                 	db	115	;'s'
  2387  0073F5  20                 	db	32
  2388  0073F6  6D                 	db	109	;'m'
  2389  0073F7  69                 	db	105	;'i'
  2390  0073F8  73                 	db	115	;'s'
  2391  0073F9  73                 	db	115	;'s'
  2392  0073FA  69                 	db	105	;'i'
  2393  0073FB  6E                 	db	110	;'n'
  2394  0073FC  67                 	db	103	;'g'
  2395  0073FD  0D                 	db	13
  2396  0073FE  0A                 	db	10
  2397  0073FF  00                 	db	0
  2398  007400                     STR_251:
  2399  007400  48                 	db	72	;'H'
  2400  007401  45                 	db	69	;'E'
  2401  007402  4C                 	db	76	;'L'
  2402  007403  50                 	db	80	;'P'
  2403  007404  20                 	db	32
  2404  007405  2D                 	db	45
  2405  007406  20                 	db	32
  2406  007407  44                 	db	68	;'D'
  2407  007408  69                 	db	105	;'i'
  2408  007409  73                 	db	115	;'s'
  2409  00740A  70                 	db	112	;'p'
  2410  00740B  6C                 	db	108	;'l'
  2411  00740C  61                 	db	97	;'a'
  2412  00740D  79                 	db	121	;'y'
  2413  00740E  20                 	db	32
  2414  00740F  74                 	db	116	;'t'
  2415  007410  68                 	db	104	;'h'
  2416  007411  69                 	db	105	;'i'
  2417  007412  73                 	db	115	;'s'
  2418  007413  20                 	db	32
  2419  007414  68                 	db	104	;'h'
  2420  007415  65                 	db	101	;'e'
  2421  007416  6C                 	db	108	;'l'
  2422  007417  70                 	db	112	;'p'
  2423  007418  20                 	db	32
  2424  007419  69                 	db	105	;'i'
  2425  00741A  6E                 	db	110	;'n'
  2426  00741B  66                 	db	102	;'f'
  2427  00741C  6F                 	db	111	;'o'
  2428  00741D  72                 	db	114	;'r'
  2429  00741E  6D                 	db	109	;'m'
  2430  00741F  61                 	db	97	;'a'
  2431  007420  74                 	db	116	;'t'
  2432  007421  69                 	db	105	;'i'
  2433  007422  6F                 	db	111	;'o'
  2434  007423  6E                 	db	110	;'n'
  2435  007424  2E                 	db	46
  2436  007425  0D                 	db	13
  2437  007426  0A                 	db	10
  2438  007427  00                 	db	0
  2439  007428                     STR_122:
  2440  007428  2D                 	db	45
  2441  007429  45                 	db	69	;'E'
  2442  00742A  52                 	db	82	;'R'
  2443  00742B  52                 	db	82	;'R'
  2444  00742C  4F                 	db	79	;'O'
  2445  00742D  52                 	db	82	;'R'
  2446  00742E  20                 	db	32
  2447  00742F  2D                 	db	45
  2448  007430  20                 	db	32
  2449  007431  6D                 	db	109	;'m'
  2450  007432  61                 	db	97	;'a'
  2451  007433  73                 	db	115	;'s'
  2452  007434  6B                 	db	107	;'k'
  2453  007435  20                 	db	32
  2454  007436  66                 	db	102	;'f'
  2455  007437  6F                 	db	111	;'o'
  2456  007438  72                 	db	114	;'r'
  2457  007439  20                 	db	32
  2458  00743A  70                 	db	112	;'p'
  2459  00743B  72                 	db	114	;'r'
  2460  00743C  69                 	db	105	;'i'
  2461  00743D  6F                 	db	111	;'o'
  2462  00743E  72                 	db	114	;'r'
  2463  00743F  69                 	db	105	;'i'
  2464  007440  74                 	db	116	;'t'
  2465  007441  79                 	db	121	;'y'
  2466  007442  20                 	db	32
  2467  007443  69                 	db	105	;'i'
  2468  007444  73                 	db	115	;'s'
  2469  007445  20                 	db	32
  2470  007446  6D                 	db	109	;'m'
  2471  007447  69                 	db	105	;'i'
  2472  007448  73                 	db	115	;'s'
  2473  007449  73                 	db	115	;'s'
  2474  00744A  69                 	db	105	;'i'
  2475  00744B  6E                 	db	110	;'n'
  2476  00744C  67                 	db	103	;'g'
  2477  00744D  0D                 	db	13
  2478  00744E  0A                 	db	10
  2479  00744F  00                 	db	0
  2480  007450                     STR_134:
  2481  007450  2B                 	db	43
  2482  007451  4F                 	db	79	;'O'
  2483  007452  4B                 	db	75	;'K'
  2484  007453  20                 	db	32
  2485  007454  2D                 	db	45
  2486  007455  20                 	db	32
  2487  007456  4E                 	db	78	;'N'
  2488  007457  75                 	db	117	;'u'
  2489  007458  6D                 	db	109	;'m'
  2490  007459  65                 	db	101	;'e'
  2491  00745A  72                 	db	114	;'r'
  2492  00745B  69                 	db	105	;'i'
  2493  00745C  63                 	db	99	;'c'
  2494  00745D  61                 	db	97	;'a'
  2495  00745E  6C                 	db	108	;'l'
  2496  00745F  20                 	db	32
  2497  007460  6F                 	db	111	;'o'
  2498  007461  75                 	db	117	;'u'
  2499  007462  74                 	db	116	;'t'
  2500  007463  70                 	db	112	;'p'
  2501  007464  75                 	db	117	;'u'
  2502  007465  74                 	db	116	;'t'
  2503  007466  20                 	db	32
  2504  007467  6E                 	db	110	;'n'
  2505  007468  6F                 	db	111	;'o'
  2506  007469  77                 	db	119	;'w'
  2507  00746A  20                 	db	32
  2508  00746B  69                 	db	105	;'i'
  2509  00746C  6E                 	db	110	;'n'
  2510  00746D  20                 	db	32
  2511  00746E  64                 	db	100	;'d'
  2512  00746F  65                 	db	101	;'e'
  2513  007470  63                 	db	99	;'c'
  2514  007471  69                 	db	105	;'i'
  2515  007472  6D                 	db	109	;'m'
  2516  007473  61                 	db	97	;'a'
  2517  007474  6C                 	db	108	;'l'
  2518  007475  0D                 	db	13
  2519  007476  0A                 	db	10
  2520  007477  00                 	db	0
  2521  007478                     STR_107:
  2522  007478  2D                 	db	45
  2523  007479  45                 	db	69	;'E'
  2524  00747A  52                 	db	82	;'R'
  2525  00747B  52                 	db	82	;'R'
  2526  00747C  4F                 	db	79	;'O'
  2527  00747D  52                 	db	82	;'R'
  2528  00747E  20                 	db	32
  2529  00747F  2D                 	db	45
  2530  007480  20                 	db	32
  2531  007481  4E                 	db	78	;'N'
  2532  007482  6F                 	db	111	;'o'
  2533  007483  20                 	db	32
  2534  007484  66                 	db	102	;'f'
  2535  007485  69                 	db	105	;'i'
  2536  007486  6C                 	db	108	;'l'
  2537  007487  74                 	db	116	;'t'
  2538  007488  65                 	db	101	;'e'
  2539  007489  72                 	db	114	;'r'
  2540  00748A  20                 	db	32
  2541  00748B  6E                 	db	110	;'n'
  2542  00748C  75                 	db	117	;'u'
  2543  00748D  6D                 	db	109	;'m'
  2544  00748E  62                 	db	98	;'b'
  2545  00748F  65                 	db	101	;'e'
  2546  007490  72                 	db	114	;'r'
  2547  007491  20                 	db	32
  2548  007492  73                 	db	115	;'s'
  2549  007493  70                 	db	112	;'p'
  2550  007494  65                 	db	101	;'e'
  2551  007495  63                 	db	99	;'c'
  2552  007496  69                 	db	105	;'i'
  2553  007497  66                 	db	102	;'f'
  2554  007498  69                 	db	105	;'i'
  2555  007499  65                 	db	101	;'e'
  2556  00749A  64                 	db	100	;'d'
  2557  00749B  2E                 	db	46
  2558  00749C  0D                 	db	13
  2559  00749D  0A                 	db	10
  2560  00749E  00                 	db	0
  2561  00749F                     STR_250:
  2562  00749F  45                 	db	69	;'E'
  2563  0074A0  52                 	db	82	;'R'
  2564  0074A1  52                 	db	82	;'R'
  2565  0074A2  20                 	db	32
  2566  0074A3  2D                 	db	45
  2567  0074A4  20                 	db	32
  2568  0074A5  44                 	db	68	;'D'
  2569  0074A6  69                 	db	105	;'i'
  2570  0074A7  73                 	db	115	;'s'
  2571  0074A8  70                 	db	112	;'p'
  2572  0074A9  6C                 	db	108	;'l'
  2573  0074AA  61                 	db	97	;'a'
  2574  0074AB  79                 	db	121	;'y'
  2575  0074AC  20                 	db	32
  2576  0074AD  43                 	db	67	;'C'
  2577  0074AE  41                 	db	65	;'A'
  2578  0074AF  4E                 	db	78	;'N'
  2579  0074B0  20                 	db	32
  2580  0074B1  65                 	db	101	;'e'
  2581  0074B2  72                 	db	114	;'r'
  2582  0074B3  72                 	db	114	;'r'
  2583  0074B4  6F                 	db	111	;'o'
  2584  0074B5  72                 	db	114	;'r'
  2585  0074B6  20                 	db	32
  2586  0074B7  69                 	db	105	;'i'
  2587  0074B8  6E                 	db	110	;'n'
  2588  0074B9  66                 	db	102	;'f'
  2589  0074BA  6F                 	db	111	;'o'
  2590  0074BB  72                 	db	114	;'r'
  2591  0074BC  6D                 	db	109	;'m'
  2592  0074BD  61                 	db	97	;'a'
  2593  0074BE  74                 	db	116	;'t'
  2594  0074BF  69                 	db	105	;'i'
  2595  0074C0  6F                 	db	111	;'o'
  2596  0074C1  6E                 	db	110	;'n'
  2597  0074C2  2E                 	db	46
  2598  0074C3  0D                 	db	13
  2599  0074C4  0A                 	db	10
  2600  0074C5  00                 	db	0
  2601  0074C6                     STR_236:
  2602  0074C6  48                 	db	72	;'H'
  2603  0074C7  65                 	db	101	;'e'
  2604  0074C8  6C                 	db	108	;'l'
  2605  0074C9  70                 	db	112	;'p'
  2606  0074CA  20                 	db	32
  2607  0074CB  66                 	db	102	;'f'
  2608  0074CC  6F                 	db	111	;'o'
  2609  0074CD  72                 	db	114	;'r'
  2610  0074CE  20                 	db	32
  2611  0074CF  74                 	db	116	;'t'
  2612  0074D0  68                 	db	104	;'h'
  2613  0074D1  65                 	db	101	;'e'
  2614  0074D2  20                 	db	32
  2615  0074D3  46                 	db	70	;'F'
  2616  0074D4  72                 	db	114	;'r'
  2617  0074D5  61                 	db	97	;'a'
  2618  0074D6  6E                 	db	110	;'n'
  2619  0074D7  6B                 	db	107	;'k'
  2620  0074D8  66                 	db	102	;'f'
  2621  0074D9  75                 	db	117	;'u'
  2622  0074DA  72                 	db	114	;'r'
  2623  0074DB  74                 	db	116	;'t'
  2624  0074DC  20                 	db	32
  2625  0074DD  52                 	db	82	;'R'
  2626  0074DE  53                 	db	83	;'S'
  2627  0074DF  2D                 	db	45
  2628  0074E0  32                 	db	50	;'2'
  2629  0074E1  33                 	db	51	;'3'
  2630  0074E2  32                 	db	50	;'2'
  2631  0074E3  20                 	db	32
  2632  0074E4  6D                 	db	109	;'m'
  2633  0074E5  6F                 	db	111	;'o'
  2634  0074E6  64                 	db	100	;'d'
  2635  0074E7  75                 	db	117	;'u'
  2636  0074E8  6C                 	db	108	;'l'
  2637  0074E9  65                 	db	101	;'e'
  2638  0074EA  0D                 	db	13
  2639  0074EB  0A                 	db	10
  2640  0074EC  00                 	db	0
  2641  0074ED                     STR_128:
  2642  0074ED  2D                 	db	45
  2643  0074EE  45                 	db	69	;'E'
  2644  0074EF  52                 	db	82	;'R'
  2645  0074F0  52                 	db	82	;'R'
  2646  0074F1  4F                 	db	79	;'O'
  2647  0074F2  52                 	db	82	;'R'
  2648  0074F3  20                 	db	32
  2649  0074F4  2D                 	db	45
  2650  0074F5  20                 	db	32
  2651  0074F6  6D                 	db	109	;'m'
  2652  0074F7  61                 	db	97	;'a'
  2653  0074F8  73                 	db	115	;'s'
  2654  0074F9  6B                 	db	107	;'k'
  2655  0074FA  20                 	db	32
  2656  0074FB  66                 	db	102	;'f'
  2657  0074FC  6F                 	db	111	;'o'
  2658  0074FD  72                 	db	114	;'r'
  2659  0074FE  20                 	db	32
  2660  0074FF  6E                 	db	110	;'n'
  2661  007500  69                 	db	105	;'i'
  2662  007501  64                 	db	100	;'d'
  2663  007502  65                 	db	101	;'e'
  2664  007503  20                 	db	32
  2665  007504  69                 	db	105	;'i'
  2666  007505  64                 	db	100	;'d'
  2667  007506  20                 	db	32
  2668  007507  69                 	db	105	;'i'
  2669  007508  73                 	db	115	;'s'
  2670  007509  20                 	db	32
  2671  00750A  6D                 	db	109	;'m'
  2672  00750B  69                 	db	105	;'i'
  2673  00750C  73                 	db	115	;'s'
  2674  00750D  73                 	db	115	;'s'
  2675  00750E  69                 	db	105	;'i'
  2676  00750F  6E                 	db	110	;'n'
  2677  007510  67                 	db	103	;'g'
  2678  007511  0D                 	db	13
  2679  007512  0A                 	db	10
  2680  007513  00                 	db	0
  2681  007514                     STR_111:
  2682  007514  2D                 	db	45
  2683  007515  45                 	db	69	;'E'
  2684  007516  52                 	db	82	;'R'
  2685  007517  52                 	db	82	;'R'
  2686  007518  4F                 	db	79	;'O'
  2687  007519  52                 	db	82	;'R'
  2688  00751A  20                 	db	32
  2689  00751B  2D                 	db	45
  2690  00751C  20                 	db	32
  2691  00751D  66                 	db	102	;'f'
  2692  00751E  69                 	db	105	;'i'
  2693  00751F  6C                 	db	108	;'l'
  2694  007520  74                 	db	116	;'t'
  2695  007521  65                 	db	101	;'e'
  2696  007522  72                 	db	114	;'r'
  2697  007523  20                 	db	32
  2698  007524  66                 	db	102	;'f'
  2699  007525  6F                 	db	111	;'o'
  2700  007526  72                 	db	114	;'r'
  2701  007527  20                 	db	32
  2702  007528  63                 	db	99	;'c'
  2703  007529  6C                 	db	108	;'l'
  2704  00752A  61                 	db	97	;'a'
  2705  00752B  73                 	db	115	;'s'
  2706  00752C  73                 	db	115	;'s'
  2707  00752D  20                 	db	32
  2708  00752E  69                 	db	105	;'i'
  2709  00752F  73                 	db	115	;'s'
  2710  007530  20                 	db	32
  2711  007531  6D                 	db	109	;'m'
  2712  007532  69                 	db	105	;'i'
  2713  007533  73                 	db	115	;'s'
  2714  007534  73                 	db	115	;'s'
  2715  007535  69                 	db	105	;'i'
  2716  007536  6E                 	db	110	;'n'
  2717  007537  67                 	db	103	;'g'
  2718  007538  0D                 	db	13
  2719  007539  0A                 	db	10
  2720  00753A  00                 	db	0
  2721  00753B                     STR_267:
  2722  00753B  20                 	db	32
  2723  00753C  20                 	db	32
  2724  00753D  20                 	db	32
  2725  00753E  20                 	db	32
  2726  00753F  20                 	db	32
  2727  007540  20                 	db	32
  2728  007541  20                 	db	32
  2729  007542  20                 	db	32
  2730  007543  20                 	db	32
  2731  007544  20                 	db	32
  2732  007545  20                 	db	32
  2733  007546  4D                 	db	77	;'M'
  2734  007547  6F                 	db	111	;'o'
  2735  007548  64                 	db	100	;'d'
  2736  007549  65                 	db	101	;'e'
  2737  00754A  73                 	db	115	;'s'
  2738  00754B  3A                 	db	58	;':'
  2739  00754C  20                 	db	32
  2740  00754D  76                 	db	118	;'v'
  2741  00754E  65                 	db	101	;'e'
  2742  00754F  72                 	db	114	;'r'
  2743  007550  62                 	db	98	;'b'
  2744  007551  6F                 	db	111	;'o'
  2745  007552  73                 	db	115	;'s'
  2746  007553  65                 	db	101	;'e'
  2747  007554  7C                 	db	124
  2748  007555  76                 	db	118	;'v'
  2749  007556  73                 	db	115	;'s'
  2750  007557  63                 	db	99	;'c'
  2751  007558  70                 	db	112	;'p'
  2752  007559  7C                 	db	124
  2753  00755A  73                 	db	115	;'s'
  2754  00755B  6C                 	db	108	;'l'
  2755  00755C  63                 	db	99	;'c'
  2756  00755D  61                 	db	97	;'a'
  2757  00755E  6E                 	db	110	;'n'
  2758  00755F  0D                 	db	13
  2759  007560  0A                 	db	10
  2760  007561  00                 	db	0
  2761  007562                     STR_113:
  2762  007562  2D                 	db	45
  2763  007563  45                 	db	69	;'E'
  2764  007564  52                 	db	82	;'R'
  2765  007565  52                 	db	82	;'R'
  2766  007566  4F                 	db	79	;'O'
  2767  007567  52                 	db	82	;'R'
  2768  007568  20                 	db	32
  2769  007569  2D                 	db	45
  2770  00756A  20                 	db	32
  2771  00756B  66                 	db	102	;'f'
  2772  00756C  69                 	db	105	;'i'
  2773  00756D  6C                 	db	108	;'l'
  2774  00756E  74                 	db	116	;'t'
  2775  00756F  65                 	db	101	;'e'
  2776  007570  72                 	db	114	;'r'
  2777  007571  20                 	db	32
  2778  007572  66                 	db	102	;'f'
  2779  007573  6F                 	db	111	;'o'
  2780  007574  72                 	db	114	;'r'
  2781  007575  20                 	db	32
  2782  007576  74                 	db	116	;'t'
  2783  007577  79                 	db	121	;'y'
  2784  007578  70                 	db	112	;'p'
  2785  007579  65                 	db	101	;'e'
  2786  00757A  20                 	db	32
  2787  00757B  69                 	db	105	;'i'
  2788  00757C  73                 	db	115	;'s'
  2789  00757D  20                 	db	32
  2790  00757E  6D                 	db	109	;'m'
  2791  00757F  69                 	db	105	;'i'
  2792  007580  73                 	db	115	;'s'
  2793  007581  73                 	db	115	;'s'
  2794  007582  69                 	db	105	;'i'
  2795  007583  6E                 	db	110	;'n'
  2796  007584  67                 	db	103	;'g'
  2797  007585  0D                 	db	13
  2798  007586  0A                 	db	10
  2799  007587  00                 	db	0
  2800  007588                     STR_89:
  2801  007588  2B                 	db	43
  2802  007589  4F                 	db	79	;'O'
  2803  00758A  4B                 	db	75	;'K'
  2804  00758B  20                 	db	32
  2805  00758C  2D                 	db	45
  2806  00758D  20                 	db	32
  2807  00758E  56                 	db	86	;'V'
  2808  00758F  61                 	db	97	;'a'
  2809  007590  6C                 	db	108	;'l'
  2810  007591  75                 	db	117	;'u'
  2811  007592  65                 	db	101	;'e'
  2812  007593  20                 	db	32
  2813  007594  77                 	db	119	;'w'
  2814  007595  72                 	db	114	;'r'
  2815  007596  69                 	db	105	;'i'
  2816  007597  74                 	db	116	;'t'
  2817  007598  74                 	db	116	;'t'
  2818  007599  65                 	db	101	;'e'
  2819  00759A  6E                 	db	110	;'n'
  2820  00759B  20                 	db	32
  2821  00759C  73                 	db	115	;'s'
  2822  00759D  75                 	db	117	;'u'
  2823  00759E  63                 	db	99	;'c'
  2824  00759F  63                 	db	99	;'c'
  2825  0075A0  65                 	db	101	;'e'
  2826  0075A1  73                 	db	115	;'s'
  2827  0075A2  73                 	db	115	;'s'
  2828  0075A3  66                 	db	102	;'f'
  2829  0075A4  75                 	db	117	;'u'
  2830  0075A5  6C                 	db	108	;'l'
  2831  0075A6  6C                 	db	108	;'l'
  2832  0075A7  79                 	db	121	;'y'
  2833  0075A8  20                 	db	32
  2834  0075A9  66                 	db	102	;'f'
  2835  0075AA  6F                 	db	111	;'o'
  2836  0075AB  72                 	db	114	;'r'
  2837  0075AC  20                 	db	32
  2838  0075AD  00                 	db	0
  2839  0075AE                     STR_120:
  2840  0075AE  2D                 	db	45
  2841  0075AF  45                 	db	69	;'E'
  2842  0075B0  52                 	db	82	;'R'
  2843  0075B1  52                 	db	82	;'R'
  2844  0075B2  4F                 	db	79	;'O'
  2845  0075B3  52                 	db	82	;'R'
  2846  0075B4  20                 	db	32
  2847  0075B5  2D                 	db	45
  2848  0075B6  20                 	db	32
  2849  0075B7  4E                 	db	78	;'N'
  2850  0075B8  6F                 	db	111	;'o'
  2851  0075B9  20                 	db	32
  2852  0075BA  6D                 	db	109	;'m'
  2853  0075BB  61                 	db	97	;'a'
  2854  0075BC  73                 	db	115	;'s'
  2855  0075BD  6B                 	db	107	;'k'
  2856  0075BE  20                 	db	32
  2857  0075BF  6E                 	db	110	;'n'
  2858  0075C0  75                 	db	117	;'u'
  2859  0075C1  6D                 	db	109	;'m'
  2860  0075C2  62                 	db	98	;'b'
  2861  0075C3  65                 	db	101	;'e'
  2862  0075C4  72                 	db	114	;'r'
  2863  0075C5  20                 	db	32
  2864  0075C6  73                 	db	115	;'s'
  2865  0075C7  70                 	db	112	;'p'
  2866  0075C8  65                 	db	101	;'e'
  2867  0075C9  63                 	db	99	;'c'
  2868  0075CA  69                 	db	105	;'i'
  2869  0075CB  66                 	db	102	;'f'
  2870  0075CC  69                 	db	105	;'i'
  2871  0075CD  65                 	db	101	;'e'
  2872  0075CE  64                 	db	100	;'d'
  2873  0075CF  2E                 	db	46
  2874  0075D0  0D                 	db	13
  2875  0075D1  0A                 	db	10
  2876  0075D2  00                 	db	0
  2877  0075D3                     STR_1:
  2878  0075D3  0D                 	db	13
  2879  0075D4  0A                 	db	10
  2880  0075D5  46                 	db	70	;'F'
  2881  0075D6  72                 	db	114	;'r'
  2882  0075D7  61                 	db	97	;'a'
  2883  0075D8  6E                 	db	110	;'n'
  2884  0075D9  6B                 	db	107	;'k'
  2885  0075DA  66                 	db	102	;'f'
  2886  0075DB  75                 	db	117	;'u'
  2887  0075DC  72                 	db	114	;'r'
  2888  0075DD  74                 	db	116	;'t'
  2889  0075DE  20                 	db	32
  2890  0075DF  52                 	db	82	;'R'
  2891  0075E0  53                 	db	83	;'S'
  2892  0075E1  2D                 	db	45
  2893  0075E2  32                 	db	50	;'2'
  2894  0075E3  33                 	db	51	;'3'
  2895  0075E4  32                 	db	50	;'2'
  2896  0075E5  20                 	db	32
  2897  0075E6  43                 	db	67	;'C'
  2898  0075E7  41                 	db	65	;'A'
  2899  0075E8  4E                 	db	78	;'N'
  2900  0075E9  34                 	db	52	;'4'
  2901  0075EA  56                 	db	86	;'V'
  2902  0075EB  53                 	db	83	;'S'
  2903  0075EC  43                 	db	67	;'C'
  2904  0075ED  50                 	db	80	;'P'
  2905  0075EE  20                 	db	32
  2906  0075EF  6D                 	db	109	;'m'
  2907  0075F0  6F                 	db	111	;'o'
  2908  0075F1  64                 	db	100	;'d'
  2909  0075F2  75                 	db	117	;'u'
  2910  0075F3  6C                 	db	108	;'l'
  2911  0075F4  65                 	db	101	;'e'
  2912  0075F5  0D                 	db	13
  2913  0075F6  0A                 	db	10
  2914  0075F7  00                 	db	0
  2915  0075F8                     STR_124:
  2916  0075F8  2D                 	db	45
  2917  0075F9  45                 	db	69	;'E'
  2918  0075FA  52                 	db	82	;'R'
  2919  0075FB  52                 	db	82	;'R'
  2920  0075FC  4F                 	db	79	;'O'
  2921  0075FD  52                 	db	82	;'R'
  2922  0075FE  20                 	db	32
  2923  0075FF  2D                 	db	45
  2924  007600  20                 	db	32
  2925  007601  6D                 	db	109	;'m'
  2926  007602  61                 	db	97	;'a'
  2927  007603  73                 	db	115	;'s'
  2928  007604  6B                 	db	107	;'k'
  2929  007605  20                 	db	32
  2930  007606  66                 	db	102	;'f'
  2931  007607  6F                 	db	111	;'o'
  2932  007608  72                 	db	114	;'r'
  2933  007609  20                 	db	32
  2934  00760A  63                 	db	99	;'c'
  2935  00760B  6C                 	db	108	;'l'
  2936  00760C  61                 	db	97	;'a'
  2937  00760D  73                 	db	115	;'s'
  2938  00760E  73                 	db	115	;'s'
  2939  00760F  20                 	db	32
  2940  007610  69                 	db	105	;'i'
  2941  007611  73                 	db	115	;'s'
  2942  007612  20                 	db	32
  2943  007613  6D                 	db	109	;'m'
  2944  007614  69                 	db	105	;'i'
  2945  007615  73                 	db	115	;'s'
  2946  007616  73                 	db	115	;'s'
  2947  007617  69                 	db	105	;'i'
  2948  007618  6E                 	db	110	;'n'
  2949  007619  67                 	db	103	;'g'
  2950  00761A  0D                 	db	13
  2951  00761B  0A                 	db	10
  2952  00761C  00                 	db	0
  2953  00761D                     STR_126:
  2954  00761D  2D                 	db	45
  2955  00761E  45                 	db	69	;'E'
  2956  00761F  52                 	db	82	;'R'
  2957  007620  52                 	db	82	;'R'
  2958  007621  4F                 	db	79	;'O'
  2959  007622  52                 	db	82	;'R'
  2960  007623  20                 	db	32
  2961  007624  2D                 	db	45
  2962  007625  20                 	db	32
  2963  007626  6D                 	db	109	;'m'
  2964  007627  61                 	db	97	;'a'
  2965  007628  73                 	db	115	;'s'
  2966  007629  6B                 	db	107	;'k'
  2967  00762A  20                 	db	32
  2968  00762B  66                 	db	102	;'f'
  2969  00762C  6F                 	db	111	;'o'
  2970  00762D  72                 	db	114	;'r'
  2971  00762E  20                 	db	32
  2972  00762F  74                 	db	116	;'t'
  2973  007630  79                 	db	121	;'y'
  2974  007631  70                 	db	112	;'p'
  2975  007632  65                 	db	101	;'e'
  2976  007633  20                 	db	32
  2977  007634  69                 	db	105	;'i'
  2978  007635  73                 	db	115	;'s'
  2979  007636  20                 	db	32
  2980  007637  6D                 	db	109	;'m'
  2981  007638  69                 	db	105	;'i'
  2982  007639  73                 	db	115	;'s'
  2983  00763A  73                 	db	115	;'s'
  2984  00763B  69                 	db	105	;'i'
  2985  00763C  6E                 	db	110	;'n'
  2986  00763D  67                 	db	103	;'g'
  2987  00763E  0D                 	db	13
  2988  00763F  0A                 	db	10
  2989  007640  00                 	db	0
  2990  007641                     STR_93:
  2991  007641  2D                 	db	45
  2992  007642  45                 	db	69	;'E'
  2993  007643  52                 	db	82	;'R'
  2994  007644  52                 	db	82	;'R'
  2995  007645  4F                 	db	79	;'O'
  2996  007646  52                 	db	82	;'R'
  2997  007647  20                 	db	32
  2998  007648  2D                 	db	45
  2999  007649  20                 	db	32
  3000  00764A  46                 	db	70	;'F'
  3001  00764B  61                 	db	97	;'a'
  3002  00764C  69                 	db	105	;'i'
  3003  00764D  6C                 	db	108	;'l'
  3004  00764E  65                 	db	101	;'e'
  3005  00764F  64                 	db	100	;'d'
  3006  007650  20                 	db	32
  3007  007651  74                 	db	116	;'t'
  3008  007652  6F                 	db	111	;'o'
  3009  007653  20                 	db	32
  3010  007654  77                 	db	119	;'w'
  3011  007655  72                 	db	114	;'r'
  3012  007656  69                 	db	105	;'i'
  3013  007657  74                 	db	116	;'t'
  3014  007658  65                 	db	101	;'e'
  3015  007659  20                 	db	32
  3016  00765A  76                 	db	118	;'v'
  3017  00765B  61                 	db	97	;'a'
  3018  00765C  6C                 	db	108	;'l'
  3019  00765D  75                 	db	117	;'u'
  3020  00765E  65                 	db	101	;'e'
  3021  00765F  20                 	db	32
  3022  007660  66                 	db	102	;'f'
  3023  007661  6F                 	db	111	;'o'
  3024  007662  72                 	db	114	;'r'
  3025  007663  20                 	db	32
  3026  007664  00                 	db	0
  3027  007665                     STR_3:
  3028  007665  68                 	db	104	;'h'
  3029  007666  74                 	db	116	;'t'
  3030  007667  74                 	db	116	;'t'
  3031  007668  70                 	db	112	;'p'
  3032  007669  3A                 	db	58	;':'
  3033  00766A  2F                 	db	47
  3034  00766B  2F                 	db	47
  3035  00766C  77                 	db	119	;'w'
  3036  00766D  77                 	db	119	;'w'
  3037  00766E  77                 	db	119	;'w'
  3038  00766F  2E                 	db	46
  3039  007670  70                 	db	112	;'p'
  3040  007671  61                 	db	97	;'a'
  3041  007672  72                 	db	114	;'r'
  3042  007673  61                 	db	97	;'a'
  3043  007674  64                 	db	100	;'d'
  3044  007675  69                 	db	105	;'i'
  3045  007676  73                 	db	115	;'s'
  3046  007677  65                 	db	101	;'e'
  3047  007678  6F                 	db	111	;'o'
  3048  007679  66                 	db	102	;'f'
  3049  00767A  74                 	db	116	;'t'
  3050  00767B  68                 	db	104	;'h'
  3051  00767C  65                 	db	101	;'e'
  3052  00767D  66                 	db	102	;'f'
  3053  00767E  72                 	db	114	;'r'
  3054  00767F  6F                 	db	111	;'o'
  3055  007680  67                 	db	103	;'g'
  3056  007681  2E                 	db	46
  3057  007682  63                 	db	99	;'c'
  3058  007683  6F                 	db	111	;'o'
  3059  007684  6D                 	db	109	;'m'
  3060  007685  0D                 	db	13
  3061  007686  0A                 	db	10
  3062  007687  00                 	db	0
  3063  007688                     STR_260:
  3064  007688  53                 	db	83	;'S'
  3065  007689  45                 	db	69	;'E'
  3066  00768A  54                 	db	84	;'T'
  3067  00768B  20                 	db	32
  3068  00768C  2D                 	db	45
  3069  00768D  20                 	db	32
  3070  00768E  50                 	db	80	;'P'
  3071  00768F  65                 	db	101	;'e'
  3072  007690  72                 	db	114	;'r'
  3073  007691  73                 	db	115	;'s'
  3074  007692  69                 	db	105	;'i'
  3075  007693  73                 	db	115	;'s'
  3076  007694  74                 	db	116	;'t'
  3077  007695  65                 	db	101	;'e'
  3078  007696  6E                 	db	110	;'n'
  3079  007697  74                 	db	116	;'t'
  3080  007698  20                 	db	32
  3081  007699  66                 	db	102	;'f'
  3082  00769A  75                 	db	117	;'u'
  3083  00769B  6E                 	db	110	;'n'
  3084  00769C  63                 	db	99	;'c'
  3085  00769D  74                 	db	116	;'t'
  3086  00769E  69                 	db	105	;'i'
  3087  00769F  6F                 	db	111	;'o'
  3088  0076A0  6E                 	db	110	;'n'
  3089  0076A1  61                 	db	97	;'a'
  3090  0076A2  6C                 	db	108	;'l'
  3091  0076A3  69                 	db	105	;'i'
  3092  0076A4  74                 	db	116	;'t'
  3093  0076A5  79                 	db	121	;'y'
  3094  0076A6  2E                 	db	46
  3095  0076A7  0D                 	db	13
  3096  0076A8  0A                 	db	10
  3097  0076A9  00                 	db	0
  3098  0076AA                     STR_249:
  3099  0076AA  53                 	db	83	;'S'
  3100  0076AB  54                 	db	84	;'T'
  3101  0076AC  41                 	db	65	;'A'
  3102  0076AD  54                 	db	84	;'T'
  3103  0076AE  20                 	db	32
  3104  0076AF  2D                 	db	45
  3105  0076B0  20                 	db	32
  3106  0076B1  44                 	db	68	;'D'
  3107  0076B2  69                 	db	105	;'i'
  3108  0076B3  73                 	db	115	;'s'
  3109  0076B4  70                 	db	112	;'p'
  3110  0076B5  6C                 	db	108	;'l'
  3111  0076B6  61                 	db	97	;'a'
  3112  0076B7  79                 	db	121	;'y'
  3113  0076B8  20                 	db	32
  3114  0076B9  43                 	db	67	;'C'
  3115  0076BA  41                 	db	65	;'A'
  3116  0076BB  4E                 	db	78	;'N'
  3117  0076BC  20                 	db	32
  3118  0076BD  73                 	db	115	;'s'
  3119  0076BE  74                 	db	116	;'t'
  3120  0076BF  61                 	db	97	;'a'
  3121  0076C0  74                 	db	116	;'t'
  3122  0076C1  69                 	db	105	;'i'
  3123  0076C2  73                 	db	115	;'s'
  3124  0076C3  74                 	db	116	;'t'
  3125  0076C4  69                 	db	105	;'i'
  3126  0076C5  63                 	db	99	;'c'
  3127  0076C6  73                 	db	115	;'s'
  3128  0076C7  2E                 	db	46
  3129  0076C8  0D                 	db	13
  3130  0076C9  0A                 	db	10
  3131  0076CA  00                 	db	0
  3132  0076CB                     STR_37:
  3133  0076CB  2D                 	db	45
  3134  0076CC  45                 	db	69	;'E'
  3135  0076CD  52                 	db	82	;'R'
  3136  0076CE  52                 	db	82	;'R'
  3137  0076CF  4F                 	db	79	;'O'
  3138  0076D0  52                 	db	82	;'R'
  3139  0076D1  20                 	db	32
  3140  0076D2  2D                 	db	45
  3141  0076D3  20                 	db	32
  3142  0076D4  46                 	db	70	;'F'
  3143  0076D5  61                 	db	97	;'a'
  3144  0076D6  69                 	db	105	;'i'
  3145  0076D7  6C                 	db	108	;'l'
  3146  0076D8  65                 	db	101	;'e'
  3147  0076D9  64                 	db	100	;'d'
  3148  0076DA  20                 	db	32
  3149  0076DB  74                 	db	116	;'t'
  3150  0076DC  6F                 	db	111	;'o'
  3151  0076DD  20                 	db	32
  3152  0076DE  73                 	db	115	;'s'
  3153  0076DF  65                 	db	101	;'e'
  3154  0076E0  6E                 	db	110	;'n'
  3155  0076E1  64                 	db	100	;'d'
  3156  0076E2  20                 	db	32
  3157  0076E3  65                 	db	101	;'e'
  3158  0076E4  76                 	db	118	;'v'
  3159  0076E5  65                 	db	101	;'e'
  3160  0076E6  6E                 	db	110	;'n'
  3161  0076E7  74                 	db	116	;'t'
  3162  0076E8  2E                 	db	46
  3163  0076E9  0D                 	db	13
  3164  0076EA  0A                 	db	10
  3165  0076EB  00                 	db	0
  3166  0076EC                     STR_160:
  3167  0076EC  2D                 	db	45
  3168  0076ED  45                 	db	69	;'E'
  3169  0076EE  52                 	db	82	;'R'
  3170  0076EF  52                 	db	82	;'R'
  3171  0076F0  4F                 	db	79	;'O'
  3172  0076F1  52                 	db	82	;'R'
  3173  0076F2  20                 	db	32
  3174  0076F3  2D                 	db	45
  3175  0076F4  20                 	db	32
  3176  0076F5  55                 	db	85	;'U'
  3177  0076F6  6E                 	db	110	;'n'
  3178  0076F7  6B                 	db	107	;'k'
  3179  0076F8  6E                 	db	110	;'n'
  3180  0076F9  6F                 	db	111	;'o'
  3181  0076FA  77                 	db	119	;'w'
  3182  0076FB  6E                 	db	110	;'n'
  3183  0076FC  20                 	db	32
  3184  0076FD  27                 	db	39
  3185  0076FE  53                 	db	83	;'S'
  3186  0076FF  45                 	db	69	;'E'
  3187  007700  54                 	db	84	;'T'
  3188  007701  27                 	db	39
  3189  007702  20                 	db	32
  3190  007703  63                 	db	99	;'c'
  3191  007704  6F                 	db	111	;'o'
  3192  007705  6D                 	db	109	;'m'
  3193  007706  6D                 	db	109	;'m'
  3194  007707  61                 	db	97	;'a'
  3195  007708  6E                 	db	110	;'n'
  3196  007709  64                 	db	100	;'d'
  3197  00770A  0D                 	db	13
  3198  00770B  0A                 	db	10
  3199  00770C  00                 	db	0
  3200  00770D                     STR_54:
  3201  00770D  2D                 	db	45
  3202  00770E  45                 	db	69	;'E'
  3203  00770F  52                 	db	82	;'R'
  3204  007710  52                 	db	82	;'R'
  3205  007711  4F                 	db	79	;'O'
  3206  007712  52                 	db	82	;'R'
  3207  007713  20                 	db	32
  3208  007714  2D                 	db	45
  3209  007715  20                 	db	32
  3210  007716  4E                 	db	78	;'N'
  3211  007717  65                 	db	101	;'e'
  3212  007718  65                 	db	101	;'e'
  3213  007719  64                 	db	100	;'d'
  3214  00771A  73                 	db	115	;'s'
  3215  00771B  20                 	db	32
  3216  00771C  5B                 	db	91	;'['
  3217  00771D  70                 	db	112	;'p'
  3218  00771E  61                 	db	97	;'a'
  3219  00771F  67                 	db	103	;'g'
  3220  007720  65                 	db	101	;'e'
  3221  007721  3A                 	db	58	;':'
  3222  007722  5D                 	db	93	;']'
  3223  007723  72                 	db	114	;'r'
  3224  007724  65                 	db	101	;'e'
  3225  007725  67                 	db	103	;'g'
  3226  007726  69                 	db	105	;'i'
  3227  007727  73                 	db	115	;'s'
  3228  007728  74                 	db	116	;'t'
  3229  007729  65                 	db	101	;'e'
  3230  00772A  72                 	db	114	;'r'
  3231  00772B  0D                 	db	13
  3232  00772C  0A                 	db	10
  3233  00772D  00                 	db	0
  3234  00772E                     STR_147:
  3235  00772E  2B                 	db	43
  3236  00772F  4F                 	db	79	;'O'
  3237  007730  4B                 	db	75	;'K'
  3238  007731  20                 	db	32
  3239  007732  2D                 	db	45
  3240  007733  20                 	db	32
  3241  007734  4D                 	db	77	;'M'
  3242  007735  6F                 	db	111	;'o'
  3243  007736  64                 	db	100	;'d'
  3244  007737  65                 	db	101	;'e'
  3245  007738  20                 	db	32
  3246  007739  69                 	db	105	;'i'
  3247  00773A  73                 	db	115	;'s'
  3248  00773B  20                 	db	32
  3249  00773C  6E                 	db	110	;'n'
  3250  00773D  6F                 	db	111	;'o'
  3251  00773E  77                 	db	119	;'w'
  3252  00773F  20                 	db	32
  3253  007740  56                 	db	86	;'V'
  3254  007741  53                 	db	83	;'S'
  3255  007742  43                 	db	67	;'C'
  3256  007743  50                 	db	80	;'P'
  3257  007744  20                 	db	32
  3258  007745  44                 	db	68	;'D'
  3259  007746  72                 	db	114	;'r'
  3260  007747  69                 	db	105	;'i'
  3261  007748  76                 	db	118	;'v'
  3262  007749  65                 	db	101	;'e'
  3263  00774A  72                 	db	114	;'r'
  3264  00774B  0D                 	db	13
  3265  00774C  0A                 	db	10
  3266  00774D  00                 	db	0
  3267  00774E                     STR_7:
  3268  00774E  57                 	db	87	;'W'
  3269  00774F  69                 	db	105	;'i'
  3270  007750  6C                 	db	108	;'l'
  3271  007751  6C                 	db	108	;'l'
  3272  007752  20                 	db	32
  3273  007753  65                 	db	101	;'e'
  3274  007754  6E                 	db	110	;'n'
  3275  007755  74                 	db	116	;'t'
  3276  007756  65                 	db	101	;'e'
  3277  007757  72                 	db	114	;'r'
  3278  007758  20                 	db	32
  3279  007759  62                 	db	98	;'b'
  3280  00775A  6F                 	db	111	;'o'
  3281  00775B  6F                 	db	111	;'o'
  3282  00775C  74                 	db	116	;'t'
  3283  00775D  6C                 	db	108	;'l'
  3284  00775E  6F                 	db	111	;'o'
  3285  00775F  61                 	db	97	;'a'
  3286  007760  64                 	db	100	;'d'
  3287  007761  65                 	db	101	;'e'
  3288  007762  72                 	db	114	;'r'
  3289  007763  20                 	db	32
  3290  007764  6E                 	db	110	;'n'
  3291  007765  6F                 	db	111	;'o'
  3292  007766  77                 	db	119	;'w'
  3293  007767  2E                 	db	46
  3294  007768  2E                 	db	46
  3295  007769  2E                 	db	46
  3296  00776A  0D                 	db	13
  3297  00776B  0A                 	db	10
  3298  00776C  00                 	db	0
  3299  00776D                     STR_243:
  3300  00776D  43                 	db	67	;'C'
  3301  00776E  4C                 	db	76	;'L'
  3302  00776F  4F                 	db	79	;'O'
  3303  007770  53                 	db	83	;'S'
  3304  007771  45                 	db	69	;'E'
  3305  007772  20                 	db	32
  3306  007773  2D                 	db	45
  3307  007774  20                 	db	32
  3308  007775  43                 	db	67	;'C'
  3309  007776  6C                 	db	108	;'l'
  3310  007777  6F                 	db	111	;'o'
  3311  007778  73                 	db	115	;'s'
  3312  007779  65                 	db	101	;'e'
  3313  00777A  20                 	db	32
  3314  00777B  43                 	db	67	;'C'
  3315  00777C  41                 	db	65	;'A'
  3316  00777D  4E                 	db	78	;'N'
  3317  00777E  20                 	db	32
  3318  00777F  69                 	db	105	;'i'
  3319  007780  6E                 	db	110	;'n'
  3320  007781  74                 	db	116	;'t'
  3321  007782  65                 	db	101	;'e'
  3322  007783  72                 	db	114	;'r'
  3323  007784  66                 	db	102	;'f'
  3324  007785  61                 	db	97	;'a'
  3325  007786  63                 	db	99	;'c'
  3326  007787  65                 	db	101	;'e'
  3327  007788  2E                 	db	46
  3328  007789  0D                 	db	13
  3329  00778A  0A                 	db	10
  3330  00778B  00                 	db	0
  3331  00778C                     STR_5:
  3332  00778C  54                 	db	84	;'T'
  3333  00778D  65                 	db	101	;'e'
  3334  00778E  6D                 	db	109	;'m'
  3335  00778F  70                 	db	112	;'p'
  3336  007790  6F                 	db	111	;'o'
  3337  007791  72                 	db	114	;'r'
  3338  007792  61                 	db	97	;'a'
  3339  007793  72                 	db	114	;'r'
  3340  007794  79                 	db	121	;'y'
  3341  007795  20                 	db	32
  3342  007796  76                 	db	118	;'v'
  3343  007797  65                 	db	101	;'e'
  3344  007798  72                 	db	114	;'r'
  3345  007799  62                 	db	98	;'b'
  3346  00779A  6F                 	db	111	;'o'
  3347  00779B  73                 	db	115	;'s'
  3348  00779C  65                 	db	101	;'e'
  3349  00779D  20                 	db	32
  3350  00779E  6D                 	db	109	;'m'
  3351  00779F  6F                 	db	111	;'o'
  3352  0077A0  64                 	db	100	;'d'
  3353  0077A1  65                 	db	101	;'e'
  3354  0077A2  20                 	db	32
  3355  0077A3  73                 	db	115	;'s'
  3356  0077A4  65                 	db	101	;'e'
  3357  0077A5  74                 	db	116	;'t'
  3358  0077A6  0D                 	db	13
  3359  0077A7  0A                 	db	10
  3360  0077A8  00                 	db	0
  3361  0077A9                     STR_270:
  3362  0077A9  0D                 	db	13
  3363  0077AA  0A                 	db	10
  3364  0077AB  4E                 	db	78	;'N'
  3365  0077AC  6F                 	db	111	;'o'
  3366  0077AD  64                 	db	100	;'d'
  3367  0077AE  65                 	db	101	;'e'
  3368  0077AF  20                 	db	32
  3369  0077B0  66                 	db	102	;'f'
  3370  0077B1  6F                 	db	111	;'o'
  3371  0077B2  75                 	db	117	;'u'
  3372  0077B3  6E                 	db	110	;'n'
  3373  0077B4  64                 	db	100	;'d'
  3374  0077B5  20                 	db	32
  3375  0077B6  77                 	db	119	;'w'
  3376  0077B7  69                 	db	105	;'i'
  3377  0077B8  74                 	db	116	;'t'
  3378  0077B9  68                 	db	104	;'h'
  3379  0077BA  20                 	db	32
  3380  0077BB  6E                 	db	110	;'n'
  3381  0077BC  6F                 	db	111	;'o'
  3382  0077BD  64                 	db	100	;'d'
  3383  0077BE  65                 	db	101	;'e'
  3384  0077BF  20                 	db	32
  3385  0077C0  69                 	db	105	;'i'
  3386  0077C1  64                 	db	100	;'d'
  3387  0077C2  20                 	db	32
  3388  0077C3  3D                 	db	61	;'='
  3389  0077C4  20                 	db	32
  3390  0077C5  00                 	db	0
  3391  0077C6                     STR_145:
  3392  0077C6  2B                 	db	43
  3393  0077C7  4F                 	db	79	;'O'
  3394  0077C8  4B                 	db	75	;'K'
  3395  0077C9  20                 	db	32
  3396  0077CA  2D                 	db	45
  3397  0077CB  20                 	db	32
  3398  0077CC  4D                 	db	77	;'M'
  3399  0077CD  6F                 	db	111	;'o'
  3400  0077CE  64                 	db	100	;'d'
  3401  0077CF  65                 	db	101	;'e'
  3402  0077D0  20                 	db	32
  3403  0077D1  69                 	db	105	;'i'
  3404  0077D2  73                 	db	115	;'s'
  3405  0077D3  20                 	db	32
  3406  0077D4  6E                 	db	110	;'n'
  3407  0077D5  6F                 	db	111	;'o'
  3408  0077D6  77                 	db	119	;'w'
  3409  0077D7  20                 	db	32
  3410  0077D8  76                 	db	118	;'v'
  3411  0077D9  65                 	db	101	;'e'
  3412  0077DA  72                 	db	114	;'r'
  3413  0077DB  62                 	db	98	;'b'
  3414  0077DC  6F                 	db	111	;'o'
  3415  0077DD  73                 	db	115	;'s'
  3416  0077DE  65                 	db	101	;'e'
  3417  0077DF  0D                 	db	13
  3418  0077E0  0A                 	db	10
  3419  0077E1  00                 	db	0
  3420  0077E2                     STR_238:
  3421  0077E2  42                 	db	66	;'B'
  3422  0077E3  4F                 	db	79	;'O'
  3423  0077E4  4F                 	db	79	;'O'
  3424  0077E5  54                 	db	84	;'T'
  3425  0077E6  20                 	db	32
  3426  0077E7  2D                 	db	45
  3427  0077E8  20                 	db	32
  3428  0077E9  45                 	db	69	;'E'
  3429  0077EA  6E                 	db	110	;'n'
  3430  0077EB  74                 	db	116	;'t'
  3431  0077EC  65                 	db	101	;'e'
  3432  0077ED  72                 	db	114	;'r'
  3433  0077EE  20                 	db	32
  3434  0077EF  62                 	db	98	;'b'
  3435  0077F0  6F                 	db	111	;'o'
  3436  0077F1  6F                 	db	111	;'o'
  3437  0077F2  74                 	db	116	;'t'
  3438  0077F3  6C                 	db	108	;'l'
  3439  0077F4  6F                 	db	111	;'o'
  3440  0077F5  61                 	db	97	;'a'
  3441  0077F6  64                 	db	100	;'d'
  3442  0077F7  65                 	db	101	;'e'
  3443  0077F8  72                 	db	114	;'r'
  3444  0077F9  2E                 	db	46
  3445  0077FA  0D                 	db	13
  3446  0077FB  0A                 	db	10
  3447  0077FC  00                 	db	0
  3448  0077FD                     STR_162:
  3449  0077FD  2D                 	db	45
  3450  0077FE  45                 	db	69	;'E'
  3451  0077FF  52                 	db	82	;'R'
  3452  007800  52                 	db	82	;'R'
  3453  007801  4F                 	db	79	;'O'
  3454  007802  52                 	db	82	;'R'
  3455  007803  20                 	db	32
  3456  007804  2D                 	db	45
  3457  007805  20                 	db	32
  3458  007806  55                 	db	85	;'U'
  3459  007807  6E                 	db	110	;'n'
  3460  007808  6B                 	db	107	;'k'
  3461  007809  6E                 	db	110	;'n'
  3462  00780A  6F                 	db	111	;'o'
  3463  00780B  77                 	db	119	;'w'
  3464  00780C  6E                 	db	110	;'n'
  3465  00780D  20                 	db	32
  3466  00780E  63                 	db	99	;'c'
  3467  00780F  6F                 	db	111	;'o'
  3468  007810  6D                 	db	109	;'m'
  3469  007811  6D                 	db	109	;'m'
  3470  007812  61                 	db	97	;'a'
  3471  007813  6E                 	db	110	;'n'
  3472  007814  64                 	db	100	;'d'
  3473  007815  0D                 	db	13
  3474  007816  0A                 	db	10
  3475  007817  00                 	db	0
  3476  007818                     STR_149:
  3477  007818  2B                 	db	43
  3478  007819  4F                 	db	79	;'O'
  3479  00781A  4B                 	db	75	;'K'
  3480  00781B  20                 	db	32
  3481  00781C  2D                 	db	45
  3482  00781D  20                 	db	32
  3483  00781E  4D                 	db	77	;'M'
  3484  00781F  6F                 	db	111	;'o'
  3485  007820  64                 	db	100	;'d'
  3486  007821  65                 	db	101	;'e'
  3487  007822  20                 	db	32
  3488  007823  69                 	db	105	;'i'
  3489  007824  73                 	db	115	;'s'
  3490  007825  20                 	db	32
  3491  007826  6E                 	db	110	;'n'
  3492  007827  6F                 	db	111	;'o'
  3493  007828  77                 	db	119	;'w'
  3494  007829  20                 	db	32
  3495  00782A  53                 	db	83	;'S'
  3496  00782B  4C                 	db	76	;'L'
  3497  00782C  43                 	db	67	;'C'
  3498  00782D  41                 	db	65	;'A'
  3499  00782E  4E                 	db	78	;'N'
  3500  00782F  0D                 	db	13
  3501  007830  0A                 	db	10
  3502  007831  00                 	db	0
  3503  007832                     STR_25:
  3504  007832  2B                 	db	43
  3505  007833  4F                 	db	79	;'O'
  3506  007834  4B                 	db	75	;'K'
  3507  007835  20                 	db	32
  3508  007836  2D                 	db	45
  3509  007837  20                 	db	32
  3510  007838  4C                 	db	76	;'L'
  3511  007839  69                 	db	105	;'i'
  3512  00783A  73                 	db	115	;'s'
  3513  00783B  74                 	db	116	;'t'
  3514  00783C  65                 	db	101	;'e'
  3515  00783D  6E                 	db	110	;'n'
  3516  00783E  20                 	db	32
  3517  00783F  6F                 	db	111	;'o'
  3518  007840  6E                 	db	110	;'n'
  3519  007841  6C                 	db	108	;'l'
  3520  007842  79                 	db	121	;'y'
  3521  007843  20                 	db	32
  3522  007844  6D                 	db	109	;'m'
  3523  007845  6F                 	db	111	;'o'
  3524  007846  64                 	db	100	;'d'
  3525  007847  65                 	db	101	;'e'
  3526  007848  0D                 	db	13
  3527  007849  0A                 	db	10
  3528  00784A  00                 	db	0
  3529  00784B                     STR_222:
  3530  00784B  54                 	db	84	;'T'
  3531  00784C  72                 	db	114	;'r'
  3532  00784D  61                 	db	97	;'a'
  3533  00784E  6E                 	db	110	;'n'
  3534  00784F  73                 	db	115	;'s'
  3535  007850  6D                 	db	109	;'m'
  3536  007851  69                 	db	105	;'i'
  3537  007852  74                 	db	116	;'t'
  3538  007853  20                 	db	32
  3539  007854  45                 	db	69	;'E'
  3540  007855  72                 	db	114	;'r'
  3541  007856  72                 	db	114	;'r'
  3542  007857  6F                 	db	111	;'o'
  3543  007858  72                 	db	114	;'r'
  3544  007859  20                 	db	32
  3545  00785A  43                 	db	67	;'C'
  3546  00785B  6F                 	db	111	;'o'
  3547  00785C  75                 	db	117	;'u'
  3548  00785D  6E                 	db	110	;'n'
  3549  00785E  74                 	db	116	;'t'
  3550  00785F  65                 	db	101	;'e'
  3551  007860  72                 	db	114	;'r'
  3552  007861  3A                 	db	58	;':'
  3553  007862  20                 	db	32
  3554  007863  00                 	db	0
  3555  007864                     STR_73:
  3556  007864  55                 	db	85	;'U'
  3557  007865  6E                 	db	110	;'n'
  3558  007866  61                 	db	97	;'a'
  3559  007867  62                 	db	98	;'b'
  3560  007868  6C                 	db	108	;'l'
  3561  007869  65                 	db	101	;'e'
  3562  00786A  20                 	db	32
  3563  00786B  74                 	db	116	;'t'
  3564  00786C  6F                 	db	111	;'o'
  3565  00786D  20                 	db	32
  3566  00786E  72                 	db	114	;'r'
  3567  00786F  65                 	db	101	;'e'
  3568  007870  61                 	db	97	;'a'
  3569  007871  64                 	db	100	;'d'
  3570  007872  20                 	db	32
  3571  007873  72                 	db	114	;'r'
  3572  007874  65                 	db	101	;'e'
  3573  007875  67                 	db	103	;'g'
  3574  007876  69                 	db	105	;'i'
  3575  007877  73                 	db	115	;'s'
  3576  007878  74                 	db	116	;'t'
  3577  007879  65                 	db	101	;'e'
  3578  00787A  72                 	db	114	;'r'
  3579  00787B  20                 	db	32
  3580  00787C  00                 	db	0
  3581  00787D                     STR_246:
  3582  00787D  54                 	db	84	;'T'
  3583  00787E  58                 	db	88	;'X'
  3584  00787F  20                 	db	32
  3585  007880  2D                 	db	45
  3586  007881  20                 	db	32
  3587  007882  53                 	db	83	;'S'
  3588  007883  65                 	db	101	;'e'
  3589  007884  6E                 	db	110	;'n'
  3590  007885  64                 	db	100	;'d'
  3591  007886  20                 	db	32
  3592  007887  43                 	db	67	;'C'
  3593  007888  41                 	db	65	;'A'
  3594  007889  4E                 	db	78	;'N'
  3595  00788A  20                 	db	32
  3596  00788B  66                 	db	102	;'f'
  3597  00788C  72                 	db	114	;'r'
  3598  00788D  61                 	db	97	;'a'
  3599  00788E  6D                 	db	109	;'m'
  3600  00788F  65                 	db	101	;'e'
  3601  007890  20                 	db	32
  3602  007891  2E                 	db	46
  3603  007892  0D                 	db	13
  3604  007893  0A                 	db	10
  3605  007894  00                 	db	0
  3606  007895                     STR_256:
  3607  007895  46                 	db	70	;'F'
  3608  007896  49                 	db	73	;'I'
  3609  007897  4C                 	db	76	;'L'
  3610  007898  54                 	db	84	;'T'
  3611  007899  45                 	db	69	;'E'
  3612  00789A  52                 	db	82	;'R'
  3613  00789B  20                 	db	32
  3614  00789C  2D                 	db	45
  3615  00789D  20                 	db	32
  3616  00789E  53                 	db	83	;'S'
  3617  00789F  65                 	db	101	;'e'
  3618  0078A0  74                 	db	116	;'t'
  3619  0078A1  20                 	db	32
  3620  0078A2  66                 	db	102	;'f'
  3621  0078A3  69                 	db	105	;'i'
  3622  0078A4  6C                 	db	108	;'l'
  3623  0078A5  74                 	db	116	;'t'
  3624  0078A6  65                 	db	101	;'e'
  3625  0078A7  72                 	db	114	;'r'
  3626  0078A8  20                 	db	32
  3627  0078A9  2E                 	db	46
  3628  0078AA  0D                 	db	13
  3629  0078AB  0A                 	db	10
  3630  0078AC  00                 	db	0
  3631  0078AD                     STR_52:
  3632  0078AD  2D                 	db	45
  3633  0078AE  45                 	db	69	;'E'
  3634  0078AF  52                 	db	82	;'R'
  3635  0078B0  52                 	db	82	;'R'
  3636  0078B1  4F                 	db	79	;'O'
  3637  0078B2  52                 	db	82	;'R'
  3638  0078B3  20                 	db	32
  3639  0078B4  2D                 	db	45
  3640  0078B5  20                 	db	32
  3641  0078B6  4E                 	db	78	;'N'
  3642  0078B7  65                 	db	101	;'e'
  3643  0078B8  65                 	db	101	;'e'
  3644  0078B9  64                 	db	100	;'d'
  3645  0078BA  73                 	db	115	;'s'
  3646  0078BB  20                 	db	32
  3647  0078BC  6E                 	db	110	;'n'
  3648  0078BD  6F                 	db	111	;'o'
  3649  0078BE  64                 	db	100	;'d'
  3650  0078BF  65                 	db	101	;'e'
  3651  0078C0  69                 	db	105	;'i'
  3652  0078C1  64                 	db	100	;'d'
  3653  0078C2  0D                 	db	13
  3654  0078C3  0A                 	db	10
  3655  0078C4  00                 	db	0
  3656  0078C5                     STR_28:
  3657  0078C5  2D                 	db	45
  3658  0078C6  45                 	db	69	;'E'
  3659  0078C7  52                 	db	82	;'R'
  3660  0078C8  52                 	db	82	;'R'
  3661  0078C9  4F                 	db	79	;'O'
  3662  0078CA  52                 	db	82	;'R'
  3663  0078CB  20                 	db	32
  3664  0078CC  2D                 	db	45
  3665  0078CD  20                 	db	32
  3666  0078CE  55                 	db	85	;'U'
  3667  0078CF  6E                 	db	110	;'n'
  3668  0078D0  6B                 	db	107	;'k'
  3669  0078D1  6E                 	db	110	;'n'
  3670  0078D2  6F                 	db	111	;'o'
  3671  0078D3  77                 	db	119	;'w'
  3672  0078D4  6E                 	db	110	;'n'
  3673  0078D5  20                 	db	32
  3674  0078D6  6D                 	db	109	;'m'
  3675  0078D7  6F                 	db	111	;'o'
  3676  0078D8  64                 	db	100	;'d'
  3677  0078D9  65                 	db	101	;'e'
  3678  0078DA  0D                 	db	13
  3679  0078DB  0A                 	db	10
  3680  0078DC  00                 	db	0
  3681  0078DD                     STR_88:
  3682  0078DD  2D                 	db	45
  3683  0078DE  45                 	db	69	;'E'
  3684  0078DF  52                 	db	82	;'R'
  3685  0078E0  52                 	db	82	;'R'
  3686  0078E1  4F                 	db	79	;'O'
  3687  0078E2  52                 	db	82	;'R'
  3688  0078E3  20                 	db	32
  3689  0078E4  2D                 	db	45
  3690  0078E5  20                 	db	32
  3691  0078E6  4E                 	db	78	;'N'
  3692  0078E7  65                 	db	101	;'e'
  3693  0078E8  65                 	db	101	;'e'
  3694  0078E9  64                 	db	100	;'d'
  3695  0078EA  20                 	db	32
  3696  0078EB  61                 	db	97	;'a'
  3697  0078EC  20                 	db	32
  3698  0078ED  76                 	db	118	;'v'
  3699  0078EE  61                 	db	97	;'a'
  3700  0078EF  6C                 	db	108	;'l'
  3701  0078F0  75                 	db	117	;'u'
  3702  0078F1  65                 	db	101	;'e'
  3703  0078F2  0D                 	db	13
  3704  0078F3  0A                 	db	10
  3705  0078F4  00                 	db	0
  3706  0078F5                     STR_229:
  3707  0078F5  52                 	db	82	;'R'
  3708  0078F6  65                 	db	101	;'e'
  3709  0078F7  63                 	db	99	;'c'
  3710  0078F8  65                 	db	101	;'e'
  3711  0078F9  69                 	db	105	;'i'
  3712  0078FA  76                 	db	118	;'v'
  3713  0078FB  65                 	db	101	;'e'
  3714  0078FC  20                 	db	32
  3715  0078FD  45                 	db	69	;'E'
  3716  0078FE  72                 	db	114	;'r'
  3717  0078FF  72                 	db	114	;'r'
  3718  007900  6F                 	db	111	;'o'
  3719  007901  72                 	db	114	;'r'
  3720  007902  20                 	db	32
  3721  007903  43                 	db	67	;'C'
  3722  007904  6F                 	db	111	;'o'
  3723  007905  75                 	db	117	;'u'
  3724  007906  6E                 	db	110	;'n'
  3725  007907  74                 	db	116	;'t'
  3726  007908  65                 	db	101	;'e'
  3727  007909  72                 	db	114	;'r'
  3728  00790A  3A                 	db	58	;':'
  3729  00790B  20                 	db	32
  3730  00790C  00                 	db	0
  3731  00790D                     STR_214:
  3732  00790D  55                 	db	85	;'U'
  3733  00790E  41                 	db	65	;'A'
  3734  00790F  52                 	db	82	;'R'
  3735  007910  54                 	db	84	;'T'
  3736  007911  20                 	db	32
  3737  007912  52                 	db	82	;'R'
  3738  007913  65                 	db	101	;'e'
  3739  007914  63                 	db	99	;'c'
  3740  007915  65                 	db	101	;'e'
  3741  007916  69                 	db	105	;'i'
  3742  007917  76                 	db	118	;'v'
  3743  007918  65                 	db	101	;'e'
  3744  007919  20                 	db	32
  3745  00791A  6F                 	db	111	;'o'
  3746  00791B  76                 	db	118	;'v'
  3747  00791C  65                 	db	101	;'e'
  3748  00791D  72                 	db	114	;'r'
  3749  00791E  72                 	db	114	;'r'
  3750  00791F  75                 	db	117	;'u'
  3751  007920  6E                 	db	110	;'n'
  3752  007921  73                 	db	115	;'s'
  3753  007922  3A                 	db	58	;':'
  3754  007923  20                 	db	32
  3755  007924  00                 	db	0
  3756  007925                     STR_210:
  3757  007925  43                 	db	67	;'C'
  3758  007926  41                 	db	65	;'A'
  3759  007927  4E                 	db	78	;'N'
  3760  007928  20                 	db	32
  3761  007929  54                 	db	84	;'T'
  3762  00792A  72                 	db	114	;'r'
  3763  00792B  61                 	db	97	;'a'
  3764  00792C  6E                 	db	110	;'n'
  3765  00792D  73                 	db	115	;'s'
  3766  00792E  6D                 	db	109	;'m'
  3767  00792F  69                 	db	105	;'i'
  3768  007930  74                 	db	116	;'t'
  3769  007931  20                 	db	32
  3770  007932  6F                 	db	111	;'o'
  3771  007933  76                 	db	118	;'v'
  3772  007934  65                 	db	101	;'e'
  3773  007935  72                 	db	114	;'r'
  3774  007936  72                 	db	114	;'r'
  3775  007937  75                 	db	117	;'u'
  3776  007938  6E                 	db	110	;'n'
  3777  007939  73                 	db	115	;'s'
  3778  00793A  3A                 	db	58	;':'
  3779  00793B  20                 	db	32
  3780  00793C  00                 	db	0
  3781  00793D                     STR_248:
  3782  00793D  52                 	db	82	;'R'
  3783  00793E  58                 	db	88	;'X'
  3784  00793F  20                 	db	32
  3785  007940  2D                 	db	45
  3786  007941  20                 	db	32
  3787  007942  52                 	db	82	;'R'
  3788  007943  65                 	db	101	;'e'
  3789  007944  61                 	db	97	;'a'
  3790  007945  64                 	db	100	;'d'
  3791  007946  20                 	db	32
  3792  007947  43                 	db	67	;'C'
  3793  007948  41                 	db	65	;'A'
  3794  007949  4E                 	db	78	;'N'
  3795  00794A  20                 	db	32
  3796  00794B  66                 	db	102	;'f'
  3797  00794C  72                 	db	114	;'r'
  3798  00794D  61                 	db	97	;'a'
  3799  00794E  6D                 	db	109	;'m'
  3800  00794F  65                 	db	101	;'e'
  3801  007950  2E                 	db	46
  3802  007951  0D                 	db	13
  3803  007952  0A                 	db	10
  3804  007953  00                 	db	0
  3805  007954                     STR_156:
  3806  007954  2B                 	db	43
  3807  007955  4F                 	db	79	;'O'
  3808  007956  4B                 	db	75	;'K'
  3809  007957  20                 	db	32
  3810  007958  2D                 	db	45
  3811  007959  20                 	db	32
  3812  00795A  4C                 	db	76	;'L'
  3813  00795B  6F                 	db	111	;'o'
  3814  00795C  63                 	db	99	;'c'
  3815  00795D  61                 	db	97	;'a'
  3816  00795E  6C                 	db	108	;'l'
  3817  00795F  20                 	db	32
  3818  007960  65                 	db	101	;'e'
  3819  007961  63                 	db	99	;'c'
  3820  007962  68                 	db	104	;'h'
  3821  007963  6F                 	db	111	;'o'
  3822  007964  20                 	db	32
  3823  007965  6F                 	db	111	;'o'
  3824  007966  66                 	db	102	;'f'
  3825  007967  66                 	db	102	;'f'
  3826  007968  0D                 	db	13
  3827  007969  0A                 	db	10
  3828  00796A  00                 	db	0
  3829  00796B                     STR_206:
  3830  00796B  43                 	db	67	;'C'
  3831  00796C  41                 	db	65	;'A'
  3832  00796D  4E                 	db	78	;'N'
  3833  00796E  20                 	db	32
  3834  00796F  52                 	db	82	;'R'
  3835  007970  65                 	db	101	;'e'
  3836  007971  63                 	db	99	;'c'
  3837  007972  65                 	db	101	;'e'
  3838  007973  69                 	db	105	;'i'
  3839  007974  76                 	db	118	;'v'
  3840  007975  65                 	db	101	;'e'
  3841  007976  20                 	db	32
  3842  007977  6F                 	db	111	;'o'
  3843  007978  76                 	db	118	;'v'
  3844  007979  65                 	db	101	;'e'
  3845  00797A  72                 	db	114	;'r'
  3846  00797B  72                 	db	114	;'r'
  3847  00797C  75                 	db	117	;'u'
  3848  00797D  6E                 	db	110	;'n'
  3849  00797E  73                 	db	115	;'s'
  3850  00797F  3A                 	db	58	;':'
  3851  007980  20                 	db	32
  3852  007981  00                 	db	0
  3853  007982                     STR_293:
  3854  007982  55                 	db	85	;'U'
  3855  007983  6E                 	db	110	;'n'
  3856  007984  6B                 	db	107	;'k'
  3857  007985  6E                 	db	110	;'n'
  3858  007986  6F                 	db	111	;'o'
  3859  007987  77                 	db	119	;'w'
  3860  007988  6E                 	db	110	;'n'
  3861  007989  20                 	db	32
  3862  00798A  28                 	db	40
  3863  00798B  56                 	db	86	;'V'
  3864  00798C  65                 	db	101	;'e'
  3865  00798D  72                 	db	114	;'r'
  3866  00798E  62                 	db	98	;'b'
  3867  00798F  6F                 	db	111	;'o'
  3868  007990  73                 	db	115	;'s'
  3869  007991  65                 	db	101	;'e'
  3870  007992  20                 	db	32
  3871  007993  75                 	db	117	;'u'
  3872  007994  73                 	db	115	;'s'
  3873  007995  65                 	db	101	;'e'
  3874  007996  64                 	db	100	;'d'
  3875  007997  29                 	db	41
  3876  007998  00                 	db	0
  3877  007999                     STR_24:
  3878  007999  2B                 	db	43
  3879  00799A  4F                 	db	79	;'O'
  3880  00799B  4B                 	db	75	;'K'
  3881  00799C  20                 	db	32
  3882  00799D  2D                 	db	45
  3883  00799E  20                 	db	32
  3884  00799F  4C                 	db	76	;'L'
  3885  0079A0  6F                 	db	111	;'o'
  3886  0079A1  6F                 	db	111	;'o'
  3887  0079A2  70                 	db	112	;'p'
  3888  0079A3  62                 	db	98	;'b'
  3889  0079A4  61                 	db	97	;'a'
  3890  0079A5  63                 	db	99	;'c'
  3891  0079A6  6B                 	db	107	;'k'
  3892  0079A7  20                 	db	32
  3893  0079A8  6D                 	db	109	;'m'
  3894  0079A9  6F                 	db	111	;'o'
  3895  0079AA  64                 	db	100	;'d'
  3896  0079AB  65                 	db	101	;'e'
  3897  0079AC  0D                 	db	13
  3898  0079AD  0A                 	db	10
  3899  0079AE  00                 	db	0
  3900  0079AF                     STR_154:
  3901  0079AF  2B                 	db	43
  3902  0079B0  4F                 	db	79	;'O'
  3903  0079B1  4B                 	db	75	;'K'
  3904  0079B2  20                 	db	32
  3905  0079B3  2D                 	db	45
  3906  0079B4  20                 	db	32
  3907  0079B5  4C                 	db	76	;'L'
  3908  0079B6  6F                 	db	111	;'o'
  3909  0079B7  63                 	db	99	;'c'
  3910  0079B8  61                 	db	97	;'a'
  3911  0079B9  6C                 	db	108	;'l'
  3912  0079BA  20                 	db	32
  3913  0079BB  65                 	db	101	;'e'
  3914  0079BC  63                 	db	99	;'c'
  3915  0079BD  68                 	db	104	;'h'
  3916  0079BE  6F                 	db	111	;'o'
  3917  0079BF  20                 	db	32
  3918  0079C0  6F                 	db	111	;'o'
  3919  0079C1  6E                 	db	110	;'n'
  3920  0079C2  0D                 	db	13
  3921  0079C3  0A                 	db	10
  3922  0079C4  00                 	db	0
  3923  0079C5                     STR_198:
  3924  0079C5  52                 	db	82	;'R'
  3925  0079C6  65                 	db	101	;'e'
  3926  0079C7  63                 	db	99	;'c'
  3927  0079C8  65                 	db	101	;'e'
  3928  0079C9  69                 	db	105	;'i'
  3929  0079CA  76                 	db	118	;'v'
  3930  0079CB  65                 	db	101	;'e'
  3931  0079CC  64                 	db	100	;'d'
  3932  0079CD  20                 	db	32
  3933  0079CE  43                 	db	67	;'C'
  3934  0079CF  41                 	db	65	;'A'
  3935  0079D0  4E                 	db	78	;'N'
  3936  0079D1  20                 	db	32
  3937  0079D2  66                 	db	102	;'f'
  3938  0079D3  72                 	db	114	;'r'
  3939  0079D4  61                 	db	97	;'a'
  3940  0079D5  6D                 	db	109	;'m'
  3941  0079D6  65                 	db	101	;'e'
  3942  0079D7  73                 	db	115	;'s'
  3943  0079D8  3A                 	db	58	;':'
  3944  0079D9  20                 	db	32
  3945  0079DA  00                 	db	0
  3946  0079DB                     STR_202:
  3947  0079DB  52                 	db	82	;'R'
  3948  0079DC  65                 	db	101	;'e'
  3949  0079DD  63                 	db	99	;'c'
  3950  0079DE  65                 	db	101	;'e'
  3951  0079DF  69                 	db	105	;'i'
  3952  0079E0  76                 	db	118	;'v'
  3953  0079E1  65                 	db	101	;'e'
  3954  0079E2  64                 	db	100	;'d'
  3955  0079E3  20                 	db	32
  3956  0079E4  43                 	db	67	;'C'
  3957  0079E5  41                 	db	65	;'A'
  3958  0079E6  4E                 	db	78	;'N'
  3959  0079E7  20                 	db	32
  3960  0079E8  62                 	db	98	;'b'
  3961  0079E9  79                 	db	121	;'y'
  3962  0079EA  74                 	db	116	;'t'
  3963  0079EB  65                 	db	101	;'e'
  3964  0079EC  73                 	db	115	;'s'
  3965  0079ED  3A                 	db	58	;':'
  3966  0079EE  20                 	db	32
  3967  0079EF  00                 	db	0
  3968  0079F0                     STR_258:
  3969  0079F0  4D                 	db	77	;'M'
  3970  0079F1  41                 	db	65	;'A'
  3971  0079F2  53                 	db	83	;'S'
  3972  0079F3  4B                 	db	75	;'K'
  3973  0079F4  20                 	db	32
  3974  0079F5  2D                 	db	45
  3975  0079F6  20                 	db	32
  3976  0079F7  53                 	db	83	;'S'
  3977  0079F8  65                 	db	101	;'e'
  3978  0079F9  74                 	db	116	;'t'
  3979  0079FA  20                 	db	32
  3980  0079FB  6D                 	db	109	;'m'
  3981  0079FC  61                 	db	97	;'a'
  3982  0079FD  73                 	db	115	;'s'
  3983  0079FE  6B                 	db	107	;'k'
  3984  0079FF  20                 	db	32
  3985  007A00  2E                 	db	46
  3986  007A01  0D                 	db	13
  3987  007A02  0A                 	db	10
  3988  007A03  00                 	db	0
  3989  007A04                     STR_163:
  3990  007A04  4A                 	db	74	;'J'
  3991  007A05  46                 	db	70	;'F'
  3992  007A06  72                 	db	114	;'r'
  3993  007A07  61                 	db	97	;'a'
  3994  007A08  6E                 	db	110	;'n'
  3995  007A09  6B                 	db	107	;'k'
  3996  007A0A  66                 	db	102	;'f'
  3997  007A0B  75                 	db	117	;'u'
  3998  007A0C  72                 	db	114	;'r'
  3999  007A0D  74                 	db	116	;'t'
  4000  007A0E  20                 	db	32
  4001  007A0F  52                 	db	82	;'R'
  4002  007A10  53                 	db	83	;'S'
  4003  007A11  2D                 	db	45
  4004  007A12  32                 	db	50	;'2'
  4005  007A13  33                 	db	51	;'3'
  4006  007A14  32                 	db	50	;'2'
  4007  007A15  0D                 	db	13
  4008  007A16  0A                 	db	10
  4009  007A17  00                 	db	0
  4010  007A18                     STR_26:
  4011  007A18  2B                 	db	43
  4012  007A19  4F                 	db	79	;'O'
  4013  007A1A  4B                 	db	75	;'K'
  4014  007A1B  20                 	db	32
  4015  007A1C  2D                 	db	45
  4016  007A1D  20                 	db	32
  4017  007A1E  43                 	db	67	;'C'
  4018  007A1F  6C                 	db	108	;'l'
  4019  007A20  6F                 	db	111	;'o'
  4020  007A21  73                 	db	115	;'s'
  4021  007A22  65                 	db	101	;'e'
  4022  007A23  64                 	db	100	;'d'
  4023  007A24  20                 	db	32
  4024  007A25  6D                 	db	109	;'m'
  4025  007A26  6F                 	db	111	;'o'
  4026  007A27  64                 	db	100	;'d'
  4027  007A28  65                 	db	101	;'e'
  4028  007A29  0D                 	db	13
  4029  007A2A  0A                 	db	10
  4030  007A2B  00                 	db	0
  4031  007A2C                     STR_21:
  4032  007A2C  2B                 	db	43
  4033  007A2D  4F                 	db	79	;'O'
  4034  007A2E  4B                 	db	75	;'K'
  4035  007A2F  20                 	db	32
  4036  007A30  2D                 	db	45
  4037  007A31  20                 	db	32
  4038  007A32  4E                 	db	78	;'N'
  4039  007A33  6F                 	db	111	;'o'
  4040  007A34  72                 	db	114	;'r'
  4041  007A35  6D                 	db	109	;'m'
  4042  007A36  61                 	db	97	;'a'
  4043  007A37  6C                 	db	108	;'l'
  4044  007A38  20                 	db	32
  4045  007A39  6D                 	db	109	;'m'
  4046  007A3A  6F                 	db	111	;'o'
  4047  007A3B  64                 	db	100	;'d'
  4048  007A3C  65                 	db	101	;'e'
  4049  007A3D  0D                 	db	13
  4050  007A3E  0A                 	db	10
  4051  007A3F  00                 	db	0
  4052  007A40                     STR_22:
  4053  007A40  2B                 	db	43
  4054  007A41  4F                 	db	79	;'O'
  4055  007A42  4B                 	db	75	;'K'
  4056  007A43  20                 	db	32
  4057  007A44  2D                 	db	45
  4058  007A45  20                 	db	32
  4059  007A46  53                 	db	83	;'S'
  4060  007A47  69                 	db	105	;'i'
  4061  007A48  6C                 	db	108	;'l'
  4062  007A49  65                 	db	101	;'e'
  4063  007A4A  6E                 	db	110	;'n'
  4064  007A4B  74                 	db	116	;'t'
  4065  007A4C  20                 	db	32
  4066  007A4D  6D                 	db	109	;'m'
  4067  007A4E  6F                 	db	111	;'o'
  4068  007A4F  64                 	db	100	;'d'
  4069  007A50  65                 	db	101	;'e'
  4070  007A51  0D                 	db	13
  4071  007A52  0A                 	db	10
  4072  007A53  00                 	db	0
  4073  007A54                     STR_99:
  4074  007A54  49                 	db	73	;'I'
  4075  007A55  6E                 	db	110	;'n'
  4076  007A56  66                 	db	102	;'f'
  4077  007A57  6F                 	db	111	;'o'
  4078  007A58  20                 	db	32
  4079  007A59  66                 	db	102	;'f'
  4080  007A5A  6F                 	db	111	;'o'
  4081  007A5B  72                 	db	114	;'r'
  4082  007A5C  20                 	db	32
  4083  007A5D  6E                 	db	110	;'n'
  4084  007A5E  6F                 	db	111	;'o'
  4085  007A5F  64                 	db	100	;'d'
  4086  007A60  65                 	db	101	;'e'
  4087  007A61  20                 	db	32
  4088  007A62  69                 	db	105	;'i'
  4089  007A63  64                 	db	100	;'d'
  4090  007A64  20                 	db	32
  4091  007A65  3D                 	db	61	;'='
  4092  007A66  20                 	db	32
  4093  007A67  00                 	db	0
  4094  007A68                     STR_282:
  4095  007A68  46                 	db	70	;'F'
  4096  007A69  69                 	db	105	;'i'
  4097  007A6A  72                 	db	114	;'r'
  4098  007A6B  6D                 	db	109	;'m'
  4099  007A6C  77                 	db	119	;'w'
  4100  007A6D  61                 	db	97	;'a'
  4101  007A6E  72                 	db	114	;'r'
  4102  007A6F  65                 	db	101	;'e'
  4103  007A70  20                 	db	32
  4104  007A71  76                 	db	118	;'v'
  4105  007A72  65                 	db	101	;'e'
  4106  007A73  72                 	db	114	;'r'
  4107  007A74  73                 	db	115	;'s'
  4108  007A75  69                 	db	105	;'i'
  4109  007A76  6F                 	db	111	;'o'
  4110  007A77  6E                 	db	110	;'n'
  4111  007A78  20                 	db	32
  4112  007A79  3D                 	db	61	;'='
  4113  007A7A  20                 	db	32
  4114  007A7B  00                 	db	0
  4115  007A7C                     STR_23:
  4116  007A7C  2B                 	db	43
  4117  007A7D  4F                 	db	79	;'O'
  4118  007A7E  4B                 	db	75	;'K'
  4119  007A7F  20                 	db	32
  4120  007A80  2D                 	db	45
  4121  007A81  20                 	db	32
  4122  007A82  53                 	db	83	;'S'
  4123  007A83  6C                 	db	108	;'l'
  4124  007A84  65                 	db	101	;'e'
  4125  007A85  65                 	db	101	;'e'
  4126  007A86  70                 	db	112	;'p'
  4127  007A87  20                 	db	32
  4128  007A88  6D                 	db	109	;'m'
  4129  007A89  6F                 	db	111	;'o'
  4130  007A8A  64                 	db	100	;'d'
  4131  007A8B  65                 	db	101	;'e'
  4132  007A8C  0D                 	db	13
  4133  007A8D  0A                 	db	10
  4134  007A8E  00                 	db	0
  4135  007A8F                     STR_27:
  4136  007A8F  2B                 	db	43
  4137  007A90  4F                 	db	79	;'O'
  4138  007A91  4B                 	db	75	;'K'
  4139  007A92  20                 	db	32
  4140  007A93  2D                 	db	45
  4141  007A94  20                 	db	32
  4142  007A95  42                 	db	66	;'B'
  4143  007A96  69                 	db	105	;'i'
  4144  007A97  74                 	db	116	;'t'
  4145  007A98  73                 	db	115	;'s'
  4146  007A99  20                 	db	32
  4147  007A9A  6D                 	db	109	;'m'
  4148  007A9B  6F                 	db	111	;'o'
  4149  007A9C  64                 	db	100	;'d'
  4150  007A9D  65                 	db	101	;'e'
  4151  007A9E  0D                 	db	13
  4152  007A9F  0A                 	db	10
  4153  007AA0  00                 	db	0
  4154  007AA1                     STR_40:
  4155  007AA1  2B                 	db	43
  4156  007AA2  4F                 	db	79	;'O'
  4157  007AA3  4B                 	db	75	;'K'
  4158  007AA4  20                 	db	32
  4159  007AA5  2D                 	db	45
  4160  007AA6  20                 	db	32
  4161  007AA7  6E                 	db	110	;'n'
  4162  007AA8  6F                 	db	111	;'o'
  4163  007AA9  20                 	db	32
  4164  007AAA  65                 	db	101	;'e'
  4165  007AAB  76                 	db	118	;'v'
  4166  007AAC  65                 	db	101	;'e'
  4167  007AAD  6E                 	db	110	;'n'
  4168  007AAE  74                 	db	116	;'t'
  4169  007AAF  73                 	db	115	;'s'
  4170  007AB0  0D                 	db	13
  4171  007AB1  0A                 	db	10
  4172  007AB2  00                 	db	0
  4173  007AB3                     STR_190:
  4174  007AB3  53                 	db	83	;'S'
  4175  007AB4  65                 	db	101	;'e'
  4176  007AB5  6E                 	db	110	;'n'
  4177  007AB6  74                 	db	116	;'t'
  4178  007AB7  20                 	db	32
  4179  007AB8  43                 	db	67	;'C'
  4180  007AB9  41                 	db	65	;'A'
  4181  007ABA  4E                 	db	78	;'N'
  4182  007ABB  20                 	db	32
  4183  007ABC  66                 	db	102	;'f'
  4184  007ABD  72                 	db	114	;'r'
  4185  007ABE  61                 	db	97	;'a'
  4186  007ABF  6D                 	db	109	;'m'
  4187  007AC0  65                 	db	101	;'e'
  4188  007AC1  73                 	db	115	;'s'
  4189  007AC2  3A                 	db	58	;':'
  4190  007AC3  20                 	db	32
  4191  007AC4  00                 	db	0
  4192  007AC5                     STR_295:
  4193  007AC5  30                 	db	48	;'0'
  4194  007AC6  31                 	db	49	;'1'
  4195  007AC7  32                 	db	50	;'2'
  4196  007AC8  33                 	db	51	;'3'
  4197  007AC9  34                 	db	52	;'4'
  4198  007ACA  35                 	db	53	;'5'
  4199  007ACB  36                 	db	54	;'6'
  4200  007ACC  37                 	db	55	;'7'
  4201  007ACD  38                 	db	56	;'8'
  4202  007ACE  39                 	db	57	;'9'
  4203  007ACF  41                 	db	65	;'A'
  4204  007AD0  42                 	db	66	;'B'
  4205  007AD1  43                 	db	67	;'C'
  4206  007AD2  44                 	db	68	;'D'
  4207  007AD3  45                 	db	69	;'E'
  4208  007AD4  46                 	db	70	;'F'
  4209  007AD5  00                 	db	0
  4210  007AD6                     STR_296:
  4211  007AD6  30                 	db	48	;'0'
  4212  007AD7  31                 	db	49	;'1'
  4213  007AD8  32                 	db	50	;'2'
  4214  007AD9  33                 	db	51	;'3'
  4215  007ADA  34                 	db	52	;'4'
  4216  007ADB  35                 	db	53	;'5'
  4217  007ADC  36                 	db	54	;'6'
  4218  007ADD  37                 	db	55	;'7'
  4219  007ADE  38                 	db	56	;'8'
  4220  007ADF  39                 	db	57	;'9'
  4221  007AE0  61                 	db	97	;'a'
  4222  007AE1  62                 	db	98	;'b'
  4223  007AE2  63                 	db	99	;'c'
  4224  007AE3  64                 	db	100	;'d'
  4225  007AE4  65                 	db	101	;'e'
  4226  007AE5  66                 	db	102	;'f'
  4227  007AE6  00                 	db	0
  4228  007AE7                     STR_274:
  4229  007AE7  20                 	db	32
  4230  007AE8  6E                 	db	110	;'n'
  4231  007AE9  6F                 	db	111	;'o'
  4232  007AEA  64                 	db	100	;'d'
  4233  007AEB  65                 	db	101	;'e'
  4234  007AEC  28                 	db	40
  4235  007AED  73                 	db	115	;'s'
  4236  007AEE  29                 	db	41
  4237  007AEF  20                 	db	32
  4238  007AF0  66                 	db	102	;'f'
  4239  007AF1  6F                 	db	111	;'o'
  4240  007AF2  75                 	db	117	;'u'
  4241  007AF3  6E                 	db	110	;'n'
  4242  007AF4  64                 	db	100	;'d'
  4243  007AF5  0D                 	db	13
  4244  007AF6  0A                 	db	10
  4245  007AF7  00                 	db	0
  4246  007AF8                     STR_194:
  4247  007AF8  53                 	db	83	;'S'
  4248  007AF9  65                 	db	101	;'e'
  4249  007AFA  6E                 	db	110	;'n'
  4250  007AFB  74                 	db	116	;'t'
  4251  007AFC  20                 	db	32
  4252  007AFD  43                 	db	67	;'C'
  4253  007AFE  41                 	db	65	;'A'
  4254  007AFF  4E                 	db	78	;'N'
  4255  007B00  20                 	db	32
  4256  007B01  62                 	db	98	;'b'
  4257  007B02  79                 	db	121	;'y'
  4258  007B03  74                 	db	116	;'t'
  4259  007B04  65                 	db	101	;'e'
  4260  007B05  73                 	db	115	;'s'
  4261  007B06  3A                 	db	58	;':'
  4262  007B07  20                 	db	32
  4263  007B08  00                 	db	0
  4264  007B09                     STR_70:
  4265  007B09  2D                 	db	45
  4266  007B0A  45                 	db	69	;'E'
  4267  007B0B  52                 	db	82	;'R'
  4268  007B0C  52                 	db	82	;'R'
  4269  007B0D  4F                 	db	79	;'O'
  4270  007B0E  52                 	db	82	;'R'
  4271  007B0F  20                 	db	32
  4272  007B10  2D                 	db	45
  4273  007B11  20                 	db	32
  4274  007B12  6E                 	db	110	;'n'
  4275  007B13  6F                 	db	111	;'o'
  4276  007B14  64                 	db	100	;'d'
  4277  007B15  65                 	db	101	;'e'
  4278  007B16  69                 	db	105	;'i'
  4279  007B17  64                 	db	100	;'d'
  4280  007B18  3D                 	db	61	;'='
  4281  007B19  00                 	db	0
  4282  007B1A                     STR_59:
  4283  007B1A  56                 	db	86	;'V'
  4284  007B1B  61                 	db	97	;'a'
  4285  007B1C  6C                 	db	108	;'l'
  4286  007B1D  75                 	db	117	;'u'
  4287  007B1E  65                 	db	101	;'e'
  4288  007B1F  20                 	db	32
  4289  007B20  66                 	db	102	;'f'
  4290  007B21  6F                 	db	111	;'o'
  4291  007B22  72                 	db	114	;'r'
  4292  007B23  20                 	db	32
  4293  007B24  72                 	db	114	;'r'
  4294  007B25  65                 	db	101	;'e'
  4295  007B26  67                 	db	103	;'g'
  4296  007B27  20                 	db	32
  4297  007B28  00                 	db	0
  4298  007B29                     STR_280:
  4299  007B29  4D                 	db	77	;'M'
  4300  007B2A  44                 	db	68	;'D'
  4301  007B2B  46                 	db	70	;'F'
  4302  007B2C  20                 	db	32
  4303  007B2D  3D                 	db	61	;'='
  4304  007B2E  20                 	db	32
  4305  007B2F  68                 	db	104	;'h'
  4306  007B30  74                 	db	116	;'t'
  4307  007B31  74                 	db	116	;'t'
  4308  007B32  70                 	db	112	;'p'
  4309  007B33  3A                 	db	58	;':'
  4310  007B34  2F                 	db	47
  4311  007B35  2F                 	db	47
  4312  007B36  00                 	db	0
  4313  007B37                     STR_56:
  4314  007B37  2B                 	db	43
  4315  007B38  4F                 	db	79	;'O'
  4316  007B39  4B                 	db	75	;'K'
  4317  007B3A  20                 	db	32
  4318  007B3B  2D                 	db	45
  4319  007B3C  20                 	db	32
  4320  007B3D  6E                 	db	110	;'n'
  4321  007B3E  6F                 	db	111	;'o'
  4322  007B3F  64                 	db	100	;'d'
  4323  007B40  65                 	db	101	;'e'
  4324  007B41  69                 	db	105	;'i'
  4325  007B42  64                 	db	100	;'d'
  4326  007B43  3D                 	db	61	;'='
  4327  007B44  00                 	db	0
  4328  007B45                     STR_290:
  4329  007B45  56                 	db	86	;'V'
  4330  007B46  53                 	db	83	;'S'
  4331  007B47  43                 	db	67	;'C'
  4332  007B48  50                 	db	80	;'P'
  4333  007B49  20                 	db	32
  4334  007B4A  44                 	db	68	;'D'
  4335  007B4B  72                 	db	114	;'r'
  4336  007B4C  69                 	db	105	;'i'
  4337  007B4D  76                 	db	118	;'v'
  4338  007B4E  65                 	db	101	;'e'
  4339  007B4F  72                 	db	114	;'r'
  4340  007B50  00                 	db	0
  4341  007B51                     STR_135:
  4342  007B51  52                 	db	82	;'R'
  4343  007B52  57                 	db	87	;'W'
  4344  007B53  54                 	db	84	;'T'
  4345  007B54  49                 	db	73	;'I'
  4346  007B55  4D                 	db	77	;'M'
  4347  007B56  45                 	db	69	;'E'
  4348  007B57  4F                 	db	79	;'O'
  4349  007B58  55                 	db	85	;'U'
  4350  007B59  54                 	db	84	;'T'
  4351  007B5A  20                 	db	32
  4352  007B5B  00                 	db	0
  4353  007B5C                     STR_188:
  4354  007B5C  2C                 	db	44
  4355  007B5D  44                 	db	68	;'D'
  4356  007B5E  61                 	db	97	;'a'
  4357  007B5F  74                 	db	116	;'t'
  4358  007B60  61                 	db	97	;'a'
  4359  007B61  3D                 	db	61	;'='
  4360  007B62  6E                 	db	110	;'n'
  4361  007B63  6F                 	db	111	;'o'
  4362  007B64  6E                 	db	110	;'n'
  4363  007B65  65                 	db	101	;'e'
  4364  007B66  00                 	db	0
  4365  007B67                     STR_57:
  4366  007B67  30                 	db	48	;'0'
  4367  007B68  78                 	db	120	;'x'
  4368  007B69  25                 	db	37
  4369  007B6A  30                 	db	48	;'0'
  4370  007B6B  32                 	db	50	;'2'
  4371  007B6C  58                 	db	88	;'X'
  4372  007B6D  20                 	db	32
  4373  007B6E  2D                 	db	45
  4374  007B6F  20                 	db	32
  4375  007B70  00                 	db	0
  4376  007B71                     STR_286:
  4377  007B71  56                 	db	86	;'V'
  4378  007B72  65                 	db	101	;'e'
  4379  007B73  72                 	db	114	;'r'
  4380  007B74  73                 	db	115	;'s'
  4381  007B75  69                 	db	105	;'i'
  4382  007B76  6F                 	db	111	;'o'
  4383  007B77  6E                 	db	110	;'n'
  4384  007B78  3A                 	db	58	;':'
  4385  007B79  20                 	db	32
  4386  007B7A  00                 	db	0
  4387  007B7B                     STR_292:
  4388  007B7B  56                 	db	86	;'V'
  4389  007B7C  53                 	db	83	;'S'
  4390  007B7D  43                 	db	67	;'C'
  4391  007B7E  50                 	db	80	;'P'
  4392  007B7F  20                 	db	32
  4393  007B80  4E                 	db	78	;'N'
  4394  007B81  6F                 	db	111	;'o'
  4395  007B82  64                 	db	100	;'d'
  4396  007B83  65                 	db	101	;'e'
  4397  007B84  00                 	db	0
  4398  007B85                     STR_291:
  4399  007B85  53                 	db	83	;'S'
  4400  007B86  4C                 	db	76	;'L'
  4401  007B87  20                 	db	32
  4402  007B88  44                 	db	68	;'D'
  4403  007B89  72                 	db	114	;'r'
  4404  007B8A  69                 	db	105	;'i'
  4405  007B8B  76                 	db	118	;'v'
  4406  007B8C  65                 	db	101	;'e'
  4407  007B8D  72                 	db	114	;'r'
  4408  007B8E  00                 	db	0
  4409  007B8F                     STR_137:
  4410  007B8F  53                 	db	83	;'S'
  4411  007B90  54                 	db	84	;'T'
  4412  007B91  41                 	db	65	;'A'
  4413  007B92  52                 	db	82	;'R'
  4414  007B93  54                 	db	84	;'T'
  4415  007B94  49                 	db	73	;'I'
  4416  007B95  46                 	db	70	;'F'
  4417  007B96  20                 	db	32
  4418  007B97  00                 	db	0
  4419  007B98                     STR_178:
  4420  007B98  2C                 	db	44
  4421  007B99  6E                 	db	110	;'n'
  4422  007B9A  6F                 	db	111	;'o'
  4423  007B9B  64                 	db	100	;'d'
  4424  007B9C  65                 	db	101	;'e'
  4425  007B9D  69                 	db	105	;'i'
  4426  007B9E  64                 	db	100	;'d'
  4427  007B9F  3D                 	db	61	;'='
  4428  007BA0  00                 	db	0
  4429  007BA1                     STR_14:
  4430  007BA1  4C                 	db	76	;'L'
  4431  007BA2  4F                 	db	79	;'O'
  4432  007BA3  4F                 	db	79	;'O'
  4433  007BA4  50                 	db	80	;'P'
  4434  007BA5  42                 	db	66	;'B'
  4435  007BA6  41                 	db	65	;'A'
  4436  007BA7  43                 	db	67	;'C'
  4437  007BA8  4B                 	db	75	;'K'
  4438  007BA9  00                 	db	0
  4439  007BAA                     STR_158:
  4440  007BAA  44                 	db	68	;'D'
  4441  007BAB  45                 	db	69	;'E'
  4442  007BAC  46                 	db	70	;'F'
  4443  007BAD  41                 	db	65	;'A'
  4444  007BAE  55                 	db	85	;'U'
  4445  007BAF  4C                 	db	76	;'L'
  4446  007BB0  54                 	db	84	;'T'
  4447  007BB1  53                 	db	83	;'S'
  4448  007BB2  00                 	db	0
  4449  007BB3                     STR_164:
  4450  007BB3  56                 	db	86	;'V'
  4451  007BB4  31                 	db	49	;'1'
  4452  007BB5  30                 	db	48	;'0'
  4453  007BB6  31                 	db	49	;'1'
  4454  007BB7  31                 	db	49	;'1'
  4455  007BB8  0D                 	db	13
  4456  007BB9  0A                 	db	10
  4457  007BBA  00                 	db	0
  4458  007BBB                     STR_165:
  4459  007BBB  4E                 	db	78	;'N'
  4460  007BBC  31                 	db	49	;'1'
  4461  007BBD  39                 	db	57	;'9'
  4462  007BBE  37                 	db	55	;'7'
  4463  007BBF  37                 	db	55	;'7'
  4464  007BC0  0D                 	db	13
  4465  007BC1  0A                 	db	10
  4466  007BC2  00                 	db	0
  4467  007BC3                     STR_91:
  4468  007BC3  30                 	db	48	;'0'
  4469  007BC4  78                 	db	120	;'x'
  4470  007BC5  25                 	db	37
  4471  007BC6  30                 	db	48	;'0'
  4472  007BC7  32                 	db	50	;'2'
  4473  007BC8  58                 	db	88	;'X'
  4474  007BC9  0A                 	db	10
  4475  007BCA  00                 	db	0
  4476  007BCB                     STR_275:
  4477  007BCB  47                 	db	71	;'G'
  4478  007BCC  55                 	db	85	;'U'
  4479  007BCD  49                 	db	73	;'I'
  4480  007BCE  44                 	db	68	;'D'
  4481  007BCF  20                 	db	32
  4482  007BD0  3D                 	db	61	;'='
  4483  007BD1  20                 	db	32
  4484  007BD2  00                 	db	0
  4485  007BD3                     STR_150:
  4486  007BD3  46                 	db	70	;'F'
  4487  007BD4  49                 	db	73	;'I'
  4488  007BD5  4C                 	db	76	;'L'
  4489  007BD6  54                 	db	84	;'T'
  4490  007BD7  45                 	db	69	;'E'
  4491  007BD8  52                 	db	82	;'R'
  4492  007BD9  20                 	db	32
  4493  007BDA  00                 	db	0
  4494  007BDB                     STR_172:
  4495  007BDB  2C                 	db	44
  4496  007BDC  63                 	db	99	;'c'
  4497  007BDD  6C                 	db	108	;'l'
  4498  007BDE  61                 	db	97	;'a'
  4499  007BDF  73                 	db	115	;'s'
  4500  007BE0  73                 	db	115	;'s'
  4501  007BE1  3D                 	db	61	;'='
  4502  007BE2  00                 	db	0
  4503  007BE3                     STR_144:
  4504  007BE3  56                 	db	86	;'V'
  4505  007BE4  45                 	db	69	;'E'
  4506  007BE5  52                 	db	82	;'R'
  4507  007BE6  42                 	db	66	;'B'
  4508  007BE7  4F                 	db	79	;'O'
  4509  007BE8  53                 	db	83	;'S'
  4510  007BE9  45                 	db	69	;'E'
  4511  007BEA  00                 	db	0
  4512  007BEB                     STR_133:
  4513  007BEB  44                 	db	68	;'D'
  4514  007BEC  45                 	db	69	;'E'
  4515  007BED  43                 	db	67	;'C'
  4516  007BEE  49                 	db	73	;'I'
  4517  007BEF  4D                 	db	77	;'M'
  4518  007BF0  41                 	db	65	;'A'
  4519  007BF1  4C                 	db	76	;'L'
  4520  007BF2  00                 	db	0
  4521  007BF3                     STR_18:
  4522  007BF3  56                 	db	86	;'V'
  4523  007BF4  45                 	db	69	;'E'
  4524  007BF5  52                 	db	82	;'R'
  4525  007BF6  53                 	db	83	;'S'
  4526  007BF7  49                 	db	73	;'I'
  4527  007BF8  4F                 	db	79	;'O'
  4528  007BF9  4E                 	db	78	;'N'
  4529  007BFA  00                 	db	0
  4530  007BFB                     STR_207:
  4531  007BFB  30                 	db	48	;'0'
  4532  007BFC  78                 	db	120	;'x'
  4533  007BFD  25                 	db	37
  4534  007BFE  30                 	db	48	;'0'
  4535  007BFF  38                 	db	56	;'8'
  4536  007C00  6C                 	db	108	;'l'
  4537  007C01  58                 	db	88	;'X'
  4538  007C02  00                 	db	0
  4539  007C03                     STR_289:
  4540  007C03  56                 	db	86	;'V'
  4541  007C04  65                 	db	101	;'e'
  4542  007C05  72                 	db	114	;'r'
  4543  007C06  62                 	db	98	;'b'
  4544  007C07  6F                 	db	111	;'o'
  4545  007C08  73                 	db	115	;'s'
  4546  007C09  65                 	db	101	;'e'
  4547  007C0A  00                 	db	0
  4548  007C0B                     STR_288:
  4549  007C0B  4D                 	db	77	;'M'
  4550  007C0C  6F                 	db	111	;'o'
  4551  007C0D  64                 	db	100	;'d'
  4552  007C0E  65                 	db	101	;'e'
  4553  007C0F  3A                 	db	58	;':'
  4554  007C10  20                 	db	32
  4555  007C11  00                 	db	0
  4556  007C12                     STR_184:
  4557  007C12  2C                 	db	44
  4558  007C13  44                 	db	68	;'D'
  4559  007C14  61                 	db	97	;'a'
  4560  007C15  74                 	db	116	;'t'
  4561  007C16  61                 	db	97	;'a'
  4562  007C17  3D                 	db	61	;'='
  4563  007C18  00                 	db	0
  4564  007C19                     STR_175:
  4565  007C19  2C                 	db	44
  4566  007C1A  74                 	db	116	;'t'
  4567  007C1B  79                 	db	121	;'y'
  4568  007C1C  70                 	db	112	;'p'
  4569  007C1D  65                 	db	101	;'e'
  4570  007C1E  3D                 	db	61	;'='
  4571  007C1F  00                 	db	0
  4572  007C20                     STR_181:
  4573  007C20  2C                 	db	44
  4574  007C21  73                 	db	115	;'s'
  4575  007C22  69                 	db	105	;'i'
  4576  007C23  7A                 	db	122	;'z'
  4577  007C24  65                 	db	101	;'e'
  4578  007C25  3D                 	db	61	;'='
  4579  007C26  00                 	db	0
  4580  007C27                     STR_169:
  4581  007C27  3C                 	db	60	;'<'
  4582  007C28  50                 	db	80	;'P'
  4583  007C29  72                 	db	114	;'r'
  4584  007C2A  69                 	db	105	;'i'
  4585  007C2B  6F                 	db	111	;'o'
  4586  007C2C  3D                 	db	61	;'='
  4587  007C2D  00                 	db	0
  4588  007C2E                     STR_20:
  4589  007C2E  49                 	db	73	;'I'
  4590  007C2F  46                 	db	70	;'F'
  4591  007C30  4D                 	db	77	;'M'
  4592  007C31  4F                 	db	79	;'O'
  4593  007C32  44                 	db	68	;'D'
  4594  007C33  45                 	db	69	;'E'
  4595  007C34  00                 	db	0
  4596  007C35                     STR_16:
  4597  007C35  4C                 	db	76	;'L'
  4598  007C36  49                 	db	73	;'I'
  4599  007C37  53                 	db	83	;'S'
  4600  007C38  54                 	db	84	;'T'
  4601  007C39  45                 	db	69	;'E'
  4602  007C3A  4E                 	db	78	;'N'
  4603  007C3B  00                 	db	0
  4604  007C3C                     STR_104:
  4605  007C3C  46                 	db	70	;'F'
  4606  007C3D  49                 	db	73	;'I'
  4607  007C3E  4C                 	db	76	;'L'
  4608  007C3F  54                 	db	84	;'T'
  4609  007C40  45                 	db	69	;'E'
  4610  007C41  52                 	db	82	;'R'
  4611  007C42  00                 	db	0
  4612  007C43                     STR_10:
  4613  007C43  53                 	db	83	;'S'
  4614  007C44  49                 	db	73	;'I'
  4615  007C45  4C                 	db	76	;'L'
  4616  007C46  45                 	db	69	;'E'
  4617  007C47  4E                 	db	78	;'N'
  4618  007C48  54                 	db	84	;'T'
  4619  007C49  00                 	db	0
  4620  007C4A                     STR_60:
  4621  007C4A  30                 	db	48	;'0'
  4622  007C4B  78                 	db	120	;'x'
  4623  007C4C  25                 	db	37
  4624  007C4D  30                 	db	48	;'0'
  4625  007C4E  32                 	db	50	;'2'
  4626  007C4F  58                 	db	88	;'X'
  4627  007C50  00                 	db	0
  4628  007C51                     STR_173:
  4629  007C51  30                 	db	48	;'0'
  4630  007C52  78                 	db	120	;'x'
  4631  007C53  25                 	db	37
  4632  007C54  30                 	db	48	;'0'
  4633  007C55  34                 	db	52	;'4'
  4634  007C56  58                 	db	88	;'X'
  4635  007C57  00                 	db	0
  4636  007C58                     STR_191:
  4637  007C58  30                 	db	48	;'0'
  4638  007C59  78                 	db	120	;'x'
  4639  007C5A  25                 	db	37
  4640  007C5B  30                 	db	48	;'0'
  4641  007C5C  38                 	db	56	;'8'
  4642  007C5D  58                 	db	88	;'X'
  4643  007C5E  00                 	db	0
  4644  007C5F                     STR_166:
  4645  007C5F  46                 	db	70	;'F'
  4646  007C60  30                 	db	48	;'0'
  4647  007C61  30                 	db	48	;'0'
  4648  007C62  0D                 	db	13
  4649  007C63  0A                 	db	10
  4650  007C64  00                 	db	0
  4651  007C65                     STR_9:
  4652  007C65  2B                 	db	43
  4653  007C66  4F                 	db	79	;'O'
  4654  007C67  4B                 	db	75	;'K'
  4655  007C68  0D                 	db	13
  4656  007C69  0A                 	db	10
  4657  007C6A  00                 	db	0
  4658  007C6B                     STR_58:
  4659  007C6B  25                 	db	37
  4660  007C6C  64                 	db	100	;'d'
  4661  007C6D  20                 	db	32
  4662  007C6E  2D                 	db	45
  4663  007C6F  20                 	db	32
  4664  007C70  00                 	db	0
  4665  007C71                     STR_143:
  4666  007C71  4D                 	db	77	;'M'
  4667  007C72  4F                 	db	79	;'O'
  4668  007C73  44                 	db	68	;'D'
  4669  007C74  45                 	db	69	;'E'
  4670  007C75  20                 	db	32
  4671  007C76  00                 	db	0
  4672  007C77                     STR_151:
  4673  007C77  4D                 	db	77	;'M'
  4674  007C78  41                 	db	65	;'A'
  4675  007C79  53                 	db	83	;'S'
  4676  007C7A  4B                 	db	75	;'K'
  4677  007C7B  20                 	db	32
  4678  007C7C  00                 	db	0
  4679  007C7D                     STR_152:
  4680  007C7D  45                 	db	69	;'E'
  4681  007C7E  43                 	db	67	;'C'
  4682  007C7F  48                 	db	72	;'H'
  4683  007C80  4F                 	db	79	;'O'
  4684  007C81  20                 	db	32
  4685  007C82  00                 	db	0
  4686  007C83                     STR_12:
  4687  007C83  43                 	db	67	;'C'
  4688  007C84  4C                 	db	76	;'L'
  4689  007C85  4F                 	db	79	;'O'
  4690  007C86  53                 	db	83	;'S'
  4691  007C87  45                 	db	69	;'E'
  4692  007C88  00                 	db	0
  4693  007C89                     STR_148:
  4694  007C89  53                 	db	83	;'S'
  4695  007C8A  4C                 	db	76	;'L'
  4696  007C8B  43                 	db	67	;'C'
  4697  007C8C  41                 	db	65	;'A'
  4698  007C8D  4E                 	db	78	;'N'
  4699  007C8E  00                 	db	0
  4700  007C8F                     STR_130:
  4701  007C8F  53                 	db	83	;'S'
  4702  007C90  45                 	db	69	;'E'
  4703  007C91  54                 	db	84	;'T'
  4704  007C92  20                 	db	32
  4705  007C93  00                 	db	0
  4706  007C94                     STR_47:
  4707  007C94  46                 	db	70	;'F'
  4708  007C95  49                 	db	73	;'I'
  4709  007C96  4E                 	db	78	;'N'
  4710  007C97  44                 	db	68	;'D'
  4711  007C98  00                 	db	0
  4712  007C99                     STR_49:
  4713  007C99  52                 	db	82	;'R'
  4714  007C9A  52                 	db	82	;'R'
  4715  007C9B  45                 	db	69	;'E'
  4716  007C9C  47                 	db	71	;'G'
  4717  007C9D  00                 	db	0
  4718  007C9E                     STR_81:
  4719  007C9E  57                 	db	87	;'W'
  4720  007C9F  52                 	db	82	;'R'
  4721  007CA0  45                 	db	69	;'E'
  4722  007CA1  47                 	db	71	;'G'
  4723  007CA2  00                 	db	0
  4724  007CA3                     STR_117:
  4725  007CA3  4D                 	db	77	;'M'
  4726  007CA4  41                 	db	65	;'A'
  4727  007CA5  53                 	db	83	;'S'
  4728  007CA6  4B                 	db	75	;'K'
  4729  007CA7  00                 	db	0
  4730  007CA8                     STR_8:
  4731  007CA8  4F                 	db	79	;'O'
  4732  007CA9  50                 	db	80	;'P'
  4733  007CAA  45                 	db	69	;'E'
  4734  007CAB  4E                 	db	78	;'N'
  4735  007CAC  00                 	db	0
  4736  007CAD                     STR_97:
  4737  007CAD  49                 	db	73	;'I'
  4738  007CAE  4E                 	db	78	;'N'
  4739  007CAF  46                 	db	70	;'F'
  4740  007CB0  4F                 	db	79	;'O'
  4741  007CB1  00                 	db	0
  4742  007CB2                     STR_146:
  4743  007CB2  56                 	db	86	;'V'
  4744  007CB3  53                 	db	83	;'S'
  4745  007CB4  43                 	db	67	;'C'
  4746  007CB5  50                 	db	80	;'P'
  4747  007CB6  00                 	db	0
  4748  007CB7                     STR_45:
  4749  007CB7  48                 	db	72	;'H'
  4750  007CB8  45                 	db	69	;'E'
  4751  007CB9  4C                 	db	76	;'L'
  4752  007CBA  50                 	db	80	;'P'
  4753  007CBB  00                 	db	0
  4754  007CBC                     STR_41:
  4755  007CBC  53                 	db	83	;'S'
  4756  007CBD  54                 	db	84	;'T'
  4757  007CBE  41                 	db	65	;'A'
  4758  007CBF  54                 	db	84	;'T'
  4759  007CC0  00                 	db	0
  4760  007CC1                     STR_6:
  4761  007CC1  42                 	db	66	;'B'
  4762  007CC2  4F                 	db	79	;'O'
  4763  007CC3  4F                 	db	79	;'O'
  4764  007CC4  54                 	db	84	;'T'
  4765  007CC5  00                 	db	0
  4766  007CC6                     STR_68:
  4767  007CC6  27                 	db	39
  4768  007CC7  20                 	db	32
  4769  007CC8  09                 	db	9
  4770  007CC9  00                 	db	0
  4771  007CCA                     STR_189:
  4772  007CCA  3E                 	db	62	;'>'
  4773  007CCB  0D                 	db	13
  4774  007CCC  0A                 	db	10
  4775  007CCD  00                 	db	0
  4776  007CCE                     STR_92:
  4777  007CCE  25                 	db	37
  4778  007CCF  64                 	db	100	;'d'
  4779  007CD0  0A                 	db	10
  4780  007CD1  00                 	db	0
  4781  007CD2                     STR_155:
  4782  007CD2  4F                 	db	79	;'O'
  4783  007CD3  46                 	db	70	;'F'
  4784  007CD4  46                 	db	70	;'F'
  4785  007CD5  00                 	db	0
  4786  007CD6                     STR_43:
  4787  007CD6  45                 	db	69	;'E'
  4788  007CD7  52                 	db	82	;'R'
  4789  007CD8  52                 	db	82	;'R'
  4790  007CD9  00                 	db	0
  4791  007CDA                     STR_131:
  4792  007CDA  48                 	db	72	;'H'
  4793  007CDB  45                 	db	69	;'E'
  4794  007CDC  58                 	db	88	;'X'
  4795  007CDD  00                 	db	0
  4796  007CDE                     STR_192:
  4797  007CDE  25                 	db	37
  4798  007CDF  6C                 	db	108	;'l'
  4799  007CE0  75                 	db	117	;'u'
  4800  007CE1  00                 	db	0
  4801  007CE2                     STR_67:
  4802  007CE2  09                 	db	9
  4803  007CE3  27                 	db	39
  4804  007CE4  00                 	db	0
  4805  007CE5                     STR_277:
  4806  007CE5  2D                 	db	45
  4807  007CE6  2D                 	db	45
  4808  007CE7  00                 	db	0
  4809  007CE8                     STR_38:
  4810  007CE8  52                 	db	82	;'R'
  4811  007CE9  58                 	db	88	;'X'
  4812  007CEA  00                 	db	0
  4813  007CEB                     STR_29:
  4814  007CEB  54                 	db	84	;'T'
  4815  007CEC  58                 	db	88	;'X'
  4816  007CED  00                 	db	0
  4817  007CEE                     STR_61:
  4818  007CEE  25                 	db	37
  4819  007CEF  64                 	db	100	;'d'
  4820  007CF0  00                 	db	0
  4821  007CF1                     STR_168:
  4822  007CF1  07                 	db	7
  4823  007CF2  00                 	db	0
  4824  007CF3                     STR_167:
  4825  007CF3  0D                 	db	13
  4826  007CF4  00                 	db	0
  4827  007CF5                     STR_30:
  4828  007CF5  2C                 	db	44
  4829  007CF6  00                 	db	0
  4830  007CF7                     STR_284:
  4831  007CF7  2E                 	db	46
  4832  007CF8  00                 	db	0
  4833  007CF9                     STR_276:
  4834  007CF9  30                 	db	48	;'0'
  4835  007CFA  00                 	db	0
  4836  007CFB                     STR_278:
  4837  007CFB  3A                 	db	58	;':'
  4838  007CFC  00                 	db	0
  4839  007CFD                     STR_159:
  4840  007CFD  3F                 	db	63	;'?'
  4841  007CFE  00                 	db	0
  4842  007CFF                     __end_of__stringdata:
  4843                           	opt stack 0
  4844                           
  4845                           ; #config settings
  4846  007CFF  00                 	db	0	; dummy byte at the end
  4847  0000                     tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           indf0	equ	0xFEF
  4855                           fsr0h	equ	0xFEA
  4856                           fsr0l	equ	0xFE9
  4857                           wreg	equ	0xFE8
  4858                           indf1	equ	0xFE7
  4859                           postinc1	equ	0xFE6
  4860                           postdec1	equ	0xFE5
  4861                           fsr1h	equ	0xFE2
  4862                           fsr1l	equ	0xFE1
  4863                           indf2	equ	0xFDF
  4864                           postinc2	equ	0xFDE
  4865                           postdec2	equ	0xFDD
  4866                           plusw2	equ	0xFDB
  4867                           fsr2h	equ	0xFDA
  4868                           fsr2l	equ	0xFD9
  4869                           status	equ	0xFD8
  4870                           
  4871                           	psect	nvBANK1
  4872  0001F1                     __pnvBANK1:
  4873                           	opt stack 0
  4874  0001F1                     _caps:
  4875                           	opt stack 0
  4876  0001F1                     	ds	2
  4877  0001F3                     ___DCDelay:
  4878                           	opt stack 0
  4879  0001F3                     	ds	1
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           intcon	equ	0xFF2
  4887                           indf0	equ	0xFEF
  4888                           fsr0h	equ	0xFEA
  4889                           fsr0l	equ	0xFE9
  4890                           wreg	equ	0xFE8
  4891                           indf1	equ	0xFE7
  4892                           postinc1	equ	0xFE6
  4893                           postdec1	equ	0xFE5
  4894                           fsr1h	equ	0xFE2
  4895                           fsr1l	equ	0xFE1
  4896                           indf2	equ	0xFDF
  4897                           postinc2	equ	0xFDE
  4898                           postdec2	equ	0xFDD
  4899                           plusw2	equ	0xFDB
  4900                           fsr2h	equ	0xFDA
  4901                           fsr2l	equ	0xFD9
  4902                           status	equ	0xFD8
  4903                           
  4904                           	psect	cinit
  4905  0014C4                     __pcinit:
  4906                           	opt stack 0
  4907  0014C4                     start_initialization:
  4908                           	opt stack 0
  4909  0014C4                     __initialization:
  4910                           	opt stack 0
  4911                           
  4912                           ; Clear objects allocated to BIGRAM (494 bytes)
  4913  0014C4  EE04  F000         	lfsr	0,__pbssBIGRAM
  4914  0014C8  EE11 F0EE          	lfsr	1,494
  4915  0014CC                     clear_0:
  4916  0014CC  6AEE               	clrf	postinc0,c
  4917  0014CE  50E5               	movf	postdec1,w,c
  4918  0014D0  50E1               	movf	fsr1l,w,c
  4919  0014D2  E1FC               	bnz	clear_0
  4920  0014D4  50E2               	movf	fsr1h,w,c
  4921  0014D6  E1FA               	bnz	clear_0
  4922                           
  4923                           ; Clear objects allocated to BANK3 (256 bytes)
  4924  0014D8  EE03  F000         	lfsr	0,__pbssBANK3
  4925  0014DC  EE11 F000          	lfsr	1,256
  4926  0014E0                     clear_1:
  4927  0014E0  6AEE               	clrf	postinc0,c
  4928  0014E2  50E5               	movf	postdec1,w,c
  4929  0014E4  50E1               	movf	fsr1l,w,c
  4930  0014E6  E1FC               	bnz	clear_1
  4931  0014E8  50E2               	movf	fsr1h,w,c
  4932  0014EA  E1FA               	bnz	clear_1
  4933                           
  4934                           ; Clear objects allocated to BANK2 (128 bytes)
  4935  0014EC  EE02  F000         	lfsr	0,__pbssBANK2
  4936  0014F0  0E80               	movlw	128
  4937  0014F2                     clear_2:
  4938  0014F2  6AEE               	clrf	postinc0,c
  4939  0014F4  06E8               	decf	wreg,f,c
  4940  0014F6  E1FD               	bnz	clear_2
  4941                           
  4942                           ; Clear objects allocated to BANK1 (241 bytes)
  4943  0014F8  EE01  F000         	lfsr	0,__pbssBANK1
  4944  0014FC  0EF1               	movlw	241
  4945  0014FE                     clear_3:
  4946  0014FE  6AEE               	clrf	postinc0,c
  4947  001500  06E8               	decf	wreg,f,c
  4948  001502  E1FD               	bnz	clear_3
  4949                           
  4950                           ; Clear objects allocated to COMRAM (30 bytes)
  4951  001504  EE00  F022         	lfsr	0,__pbssCOMRAM
  4952  001508  0E1E               	movlw	30
  4953  00150A                     clear_4:
  4954  00150A  6AEE               	clrf	postinc0,c
  4955  00150C  06E8               	decf	wreg,f,c
  4956  00150E  E1FD               	bnz	clear_4
  4957  001510                     end_of_initialization:
  4958                           	opt stack 0
  4959  001510                     __end_of__initialization:
  4960                           	opt stack 0
  4961  001510  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4962  001512  6EF8               	movwf	tblptru,c
  4963  001514  0100               	movlb	0
  4964  001516  EFD8  F01F         	goto	_main	;jump to C main() function
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           prodh	equ	0xFF4
  4970                           prodl	equ	0xFF3
  4971                           intcon	equ	0xFF2
  4972                           indf0	equ	0xFEF
  4973                           postinc0	equ	0xFEE
  4974                           fsr0h	equ	0xFEA
  4975                           fsr0l	equ	0xFE9
  4976                           wreg	equ	0xFE8
  4977                           indf1	equ	0xFE7
  4978                           postinc1	equ	0xFE6
  4979                           postdec1	equ	0xFE5
  4980                           fsr1h	equ	0xFE2
  4981                           fsr1l	equ	0xFE1
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           plusw2	equ	0xFDB
  4986                           fsr2h	equ	0xFDA
  4987                           fsr2l	equ	0xFD9
  4988                           status	equ	0xFD8
  4989                           
  4990                           	psect	bssCOMRAM
  4991  000022                     __pbssCOMRAM:
  4992                           	opt stack 0
  4993  000022                     _status_led_cnt:
  4994                           	opt stack 0
  4995  000022                     	ds	2
  4996  000024                     strtok@sp:
  4997                           	opt stack 0
  4998  000024                     	ds	2
  4999  000026                     _USART_Status:
  5000                           	opt stack 0
  5001  000026                     	ds	1
  5002  000027                     __ECANRxFilterHitInfo:
  5003                           	opt stack 0
  5004  000027                     	ds	1
  5005  000028                     __IT_INT_MASK:
  5006                           	opt stack 0
  5007  000028                     	ds	1
  5008  000029                     __IT_SAVE_BSR:
  5009                           	opt stack 0
  5010  000029                     	ds	1
  5011  00002A                     ___DCByte:
  5012                           	opt stack 0
  5013  00002A                     	ds	1
  5014  00002B                     _bDLE:
  5015                           	opt stack 0
  5016  00002B                     	ds	1
  5017  00002C                     _bHex:
  5018                           	opt stack 0
  5019  00002C                     	ds	1
  5020  00002D                     _bInitiated:
  5021                           	opt stack 0
  5022  00002D                     	ds	1
  5023  00002E                     _bLocalEcho:
  5024                           	opt stack 0
  5025  00002E                     	ds	1
  5026  00002F                     _bOpen:
  5027                           	opt stack 0
  5028  00002F                     	ds	1
  5029  000030                     _bSilent:
  5030                           	opt stack 0
  5031  000030                     	ds	1
  5032  000031                     _fifo_canrxcount:
  5033                           	opt stack 0
  5034  000031                     	ds	1
  5035  000032                     _ledFunctionality:
  5036                           	opt stack 0
  5037  000032                     	ds	1
  5038  000033                     _nTimeStamp:
  5039                           	opt stack 0
  5040  000033                     	ds	1
  5041  000034                     _pos:
  5042                           	opt stack 0
  5043  000034                     	ds	1
  5044  000035                     _rwtimeout:
  5045                           	opt stack 0
  5046  000035                     	ds	1
  5047  000036                     _sequencyno:
  5048                           	opt stack 0
  5049  000036                     	ds	1
  5050  000037                     _stateVscpDriver:
  5051                           	opt stack 0
  5052  000037                     	ds	1
  5053  000038                     _vscpClass:
  5054                           	opt stack 0
  5055  000038                     	ds	2
  5056  00003A                     _dlc:
  5057                           	opt stack 0
  5058  00003A                     	ds	1
  5059  00003B                     _flags:
  5060                           	opt stack 0
  5061  00003B                     	ds	1
  5062  00003C                     _vscpNodeId:
  5063                           	opt stack 0
  5064  00003C                     	ds	1
  5065  00003D                     _vscpPriority:
  5066                           	opt stack 0
  5067  00003D                     	ds	1
  5068  00003E                     _vscpSize:
  5069                           	opt stack 0
  5070  00003E                     	ds	1
  5071  00003F                     _vscpType:
  5072                           	opt stack 0
  5073  00003F                     	ds	1
  5074                           tblptru	equ	0xFF8
  5075                           tblptrh	equ	0xFF7
  5076                           tblptrl	equ	0xFF6
  5077                           tablat	equ	0xFF5
  5078                           prodh	equ	0xFF4
  5079                           prodl	equ	0xFF3
  5080                           intcon	equ	0xFF2
  5081                           indf0	equ	0xFEF
  5082                           postinc0	equ	0xFEE
  5083                           fsr0h	equ	0xFEA
  5084                           fsr0l	equ	0xFE9
  5085                           wreg	equ	0xFE8
  5086                           indf1	equ	0xFE7
  5087                           postinc1	equ	0xFE6
  5088                           postdec1	equ	0xFE5
  5089                           fsr1h	equ	0xFE2
  5090                           fsr1l	equ	0xFE1
  5091                           indf2	equ	0xFDF
  5092                           postinc2	equ	0xFDE
  5093                           postdec2	equ	0xFDD
  5094                           plusw2	equ	0xFDB
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099                           	psect	bssBANK1
  5100  000100                     __pbssBANK1:
  5101                           	opt stack 0
  5102  000100                     _can_receiveOverruns:
  5103                           	opt stack 0
  5104  000100                     	ds	4
  5105  000104                     _can_transmitOverruns:
  5106                           	opt stack 0
  5107  000104                     	ds	4
  5108  000108                     _cntRxBytes:
  5109                           	opt stack 0
  5110  000108                     	ds	4
  5111  00010C                     _cntRxFrames:
  5112                           	opt stack 0
  5113  00010C                     	ds	4
  5114  000110                     _cntTxBytes:
  5115                           	opt stack 0
  5116  000110                     	ds	4
  5117  000114                     _cntTxFrames:
  5118                           	opt stack 0
  5119  000114                     	ds	4
  5120  000118                     _timekeeper:
  5121                           	opt stack 0
  5122  000118                     	ds	4
  5123  00011C                     _timer:
  5124                           	opt stack 0
  5125  00011C                     	ds	4
  5126  000120                     _uart_receiveOverruns:
  5127                           	opt stack 0
  5128  000120                     	ds	4
  5129  000124                     _uart_transmitOverruns:
  5130                           	opt stack 0
  5131  000124                     	ds	4
  5132  000128                     _made_table:
  5133                           	opt stack 0
  5134  000128                     	ds	2
  5135  00012A                     __IT_SAVE_STATUS:
  5136                           	opt stack 0
  5137  00012A                     	ds	1
  5138  00012B                     __IT_SAVE_WREG:
  5139                           	opt stack 0
  5140  00012B                     	ds	1
  5141  00012C                     _mode:
  5142                           	opt stack 0
  5143  00012C                     	ds	1
  5144  00012D                     _cmdbuf:
  5145                           	opt stack 0
  5146  00012D                     	ds	80
  5147  00017D                     _wrkbuf:
  5148                           	opt stack 0
  5149  00017D                     	ds	80
  5150  0001CD                     _canInputFifo:
  5151                           	opt stack 0
  5152  0001CD                     	ds	8
  5153  0001D5                     _data:
  5154                           	opt stack 0
  5155  0001D5                     	ds	8
  5156  0001DD                     _serialInputFifo:
  5157                           	opt stack 0
  5158  0001DD                     	ds	8
  5159  0001E5                     _vscpData:
  5160                           	opt stack 0
  5161  0001E5                     	ds	8
  5162  0001ED                     _id:
  5163                           	opt stack 0
  5164  0001ED                     	ds	4
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           intcon	equ	0xFF2
  5172                           indf0	equ	0xFEF
  5173                           postinc0	equ	0xFEE
  5174                           fsr0h	equ	0xFEA
  5175                           fsr0l	equ	0xFE9
  5176                           wreg	equ	0xFE8
  5177                           indf1	equ	0xFE7
  5178                           postinc1	equ	0xFE6
  5179                           postdec1	equ	0xFE5
  5180                           fsr1h	equ	0xFE2
  5181                           fsr1l	equ	0xFE1
  5182                           indf2	equ	0xFDF
  5183                           postinc2	equ	0xFDE
  5184                           postdec2	equ	0xFDD
  5185                           plusw2	equ	0xFDB
  5186                           fsr2h	equ	0xFDA
  5187                           fsr2l	equ	0xFD9
  5188                           status	equ	0xFD8
  5189                           
  5190                           	psect	bssBANK2
  5191  000200                     __pbssBANK2:
  5192                           	opt stack 0
  5193  000200                     _serial_inputBuffer:
  5194                           	opt stack 0
  5195  000200                     	ds	128
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           indf0	equ	0xFEF
  5204                           postinc0	equ	0xFEE
  5205                           fsr0h	equ	0xFEA
  5206                           fsr0l	equ	0xFE9
  5207                           wreg	equ	0xFE8
  5208                           indf1	equ	0xFE7
  5209                           postinc1	equ	0xFE6
  5210                           postdec1	equ	0xFE5
  5211                           fsr1h	equ	0xFE2
  5212                           fsr1l	equ	0xFE1
  5213                           indf2	equ	0xFDF
  5214                           postinc2	equ	0xFDE
  5215                           postdec2	equ	0xFDD
  5216                           plusw2	equ	0xFDB
  5217                           fsr2h	equ	0xFDA
  5218                           fsr2l	equ	0xFD9
  5219                           status	equ	0xFD8
  5220                           
  5221                           	psect	bssBANK3
  5222  000300                     __pbssBANK3:
  5223                           	opt stack 0
  5224  000300                     _crc8_table:
  5225                           	opt stack 0
  5226  000300                     	ds	256
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           prodh	equ	0xFF4
  5232                           prodl	equ	0xFF3
  5233                           intcon	equ	0xFF2
  5234                           indf0	equ	0xFEF
  5235                           postinc0	equ	0xFEE
  5236                           fsr0h	equ	0xFEA
  5237                           fsr0l	equ	0xFE9
  5238                           wreg	equ	0xFE8
  5239                           indf1	equ	0xFE7
  5240                           postinc1	equ	0xFE6
  5241                           postdec1	equ	0xFE5
  5242                           fsr1h	equ	0xFE2
  5243                           fsr1l	equ	0xFE1
  5244                           indf2	equ	0xFDF
  5245                           postinc2	equ	0xFDE
  5246                           postdec2	equ	0xFDD
  5247                           plusw2	equ	0xFDB
  5248                           fsr2h	equ	0xFDA
  5249                           fsr2l	equ	0xFD9
  5250                           status	equ	0xFD8
  5251                           
  5252                           	psect	bssBIGRAM
  5253  000400                     __pbssBIGRAM:
  5254                           	opt stack 0
  5255  000400                     _can_inputBuffer:
  5256                           	opt stack 0
  5257  000400                     	ds	494
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           intcon	equ	0xFF2
  5265                           indf0	equ	0xFEF
  5266                           postinc0	equ	0xFEE
  5267                           fsr0h	equ	0xFEA
  5268                           fsr0l	equ	0xFE9
  5269                           wreg	equ	0xFE8
  5270                           indf1	equ	0xFE7
  5271                           postinc1	equ	0xFE6
  5272                           postdec1	equ	0xFE5
  5273                           fsr1h	equ	0xFE2
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           postinc2	equ	0xFDE
  5277                           postdec2	equ	0xFDD
  5278                           plusw2	equ	0xFDB
  5279                           fsr2h	equ	0xFDA
  5280                           fsr2l	equ	0xFD9
  5281                           status	equ	0xFD8
  5282                           
  5283                           	psect	cstackBANK2
  5284  000280                     __pcstackBANK2:
  5285                           	opt stack 0
  5286  000280                     doModeVerbose@id:
  5287                           	opt stack 0
  5288                           
  5289                           ; 4 bytes @ 0x0
  5290  000280                     	ds	4
  5291  000284                     doModeVerbose@preg:
  5292                           	opt stack 0
  5293                           
  5294                           ; 2 bytes @ 0x4
  5295  000284                     	ds	2
  5296  000286                     doModeVerbose@preg_1247:
  5297                           	opt stack 0
  5298                           
  5299                           ; 2 bytes @ 0x6
  5300  000286                     	ds	2
  5301  000288                     doModeVerbose@filter_class:
  5302                           	opt stack 0
  5303                           
  5304                           ; 2 bytes @ 0x8
  5305  000288                     	ds	2
  5306  00028A                     doModeVerbose@mask_class:
  5307                           	opt stack 0
  5308                           
  5309                           ; 2 bytes @ 0xA
  5310  00028A                     	ds	2
  5311  00028C                     doModeVerbose@filter_priority:
  5312                           	opt stack 0
  5313                           
  5314                           ; 1 bytes @ 0xC
  5315  00028C                     	ds	1
  5316  00028D                     doModeVerbose@filter_type:
  5317                           	opt stack 0
  5318                           
  5319                           ; 1 bytes @ 0xD
  5320  00028D                     	ds	1
  5321  00028E                     doModeVerbose@filter_nodeid:
  5322                           	opt stack 0
  5323                           
  5324                           ; 1 bytes @ 0xE
  5325  00028E                     	ds	1
  5326  00028F                     doModeVerbose@mask_priority:
  5327                           	opt stack 0
  5328                           
  5329                           ; 1 bytes @ 0xF
  5330  00028F                     	ds	1
  5331  000290                     doModeVerbose@mask_type:
  5332                           	opt stack 0
  5333                           
  5334                           ; 1 bytes @ 0x10
  5335  000290                     	ds	1
  5336  000291                     doModeVerbose@mask_nodeid:
  5337                           	opt stack 0
  5338                           
  5339                           ; 1 bytes @ 0x11
  5340  000291                     	ds	1
  5341  000292                     _doModeVerbose$1202:
  5342                           	opt stack 0
  5343                           
  5344                           ; 2 bytes @ 0x12
  5345  000292                     	ds	2
  5346  000294                     _doModeVerbose$1207:
  5347                           	opt stack 0
  5348                           
  5349                           ; 2 bytes @ 0x14
  5350  000294                     	ds	2
  5351  000296                     _doModeVerbose$1211:
  5352                           	opt stack 0
  5353                           
  5354                           ; 2 bytes @ 0x16
  5355  000296                     	ds	2
  5356  000298                     _doModeVerbose$1216:
  5357                           	opt stack 0
  5358                           
  5359                           ; 2 bytes @ 0x18
  5360  000298                     	ds	2
  5361  00029A                     _doModeVerbose$1224:
  5362                           	opt stack 0
  5363                           
  5364                           ; 2 bytes @ 0x1A
  5365  00029A                     	ds	2
  5366  00029C                     _doModeVerbose$1229:
  5367                           	opt stack 0
  5368                           
  5369                           ; 2 bytes @ 0x1C
  5370  00029C                     	ds	2
  5371  00029E                     _doModeVerbose$1233:
  5372                           	opt stack 0
  5373                           
  5374                           ; 2 bytes @ 0x1E
  5375  00029E                     	ds	2
  5376  0002A0                     _doModeVerbose$1256:
  5377                           	opt stack 0
  5378                           
  5379                           ; 2 bytes @ 0x20
  5380  0002A0                     	ds	2
  5381  0002A2                     _doModeVerbose$1262:
  5382                           	opt stack 0
  5383                           
  5384                           ; 2 bytes @ 0x22
  5385  0002A2                     	ds	2
  5386  0002A4                     _doModeVerbose$1270:
  5387                           	opt stack 0
  5388                           
  5389                           ; 2 bytes @ 0x24
  5390  0002A4                     	ds	2
  5391  0002A6                     doModeVerbose@rv:
  5392                           	opt stack 0
  5393                           
  5394                           ; 1 bytes @ 0x26
  5395  0002A6                     	ds	1
  5396  0002A7                     doModeVerbose@page_1239:
  5397                           	opt stack 0
  5398                           
  5399                           ; 1 bytes @ 0x27
  5400  0002A7                     	ds	1
  5401  0002A8                     doModeVerbose@reg_1240:
  5402                           	opt stack 0
  5403                           
  5404                           ; 1 bytes @ 0x28
  5405  0002A8                     	ds	1
  5406  0002A9                     doModeVerbose@id_1311:
  5407                           	opt stack 0
  5408                           
  5409                           ; 4 bytes @ 0x29
  5410  0002A9                     	ds	4
  5411  0002AD                     doModeVerbose@filterno:
  5412                           	opt stack 0
  5413                           
  5414                           ; 1 bytes @ 0x2D
  5415  0002AD                     	ds	1
  5416  0002AE                     doModeVerbose@maskno:
  5417                           	opt stack 0
  5418                           
  5419                           ; 1 bytes @ 0x2E
  5420  0002AE                     	ds	1
  5421  0002AF                     doModeVerbose@i:
  5422                           	opt stack 0
  5423                           
  5424                           ; 1 bytes @ 0x2F
  5425  0002AF                     	ds	1
  5426  0002B0                     doModeVerbose@value_1241:
  5427                           	opt stack 0
  5428                           
  5429                           ; 1 bytes @ 0x30
  5430  0002B0                     	ds	1
  5431  0002B1                     doModeVerbose@count:
  5432                           	opt stack 0
  5433                           
  5434                           ; 1 bytes @ 0x31
  5435  0002B1                     	ds	1
  5436  0002B2                     doModeVerbose@nodeid:
  5437                           	opt stack 0
  5438                           
  5439                           ; 1 bytes @ 0x32
  5440  0002B2                     	ds	1
  5441  0002B3                     doModeVerbose@nodeid_1238:
  5442                           	opt stack 0
  5443                           
  5444                           ; 1 bytes @ 0x33
  5445  0002B3                     	ds	1
  5446  0002B4                     doModeVerbose@page:
  5447                           	opt stack 0
  5448                           
  5449                           ; 1 bytes @ 0x34
  5450  0002B4                     	ds	1
  5451  0002B5                     doModeVerbose@reg:
  5452                           	opt stack 0
  5453                           
  5454                           ; 1 bytes @ 0x35
  5455  0002B5                     	ds	1
  5456  0002B6                     doModeVerbose@nodeid_1264:
  5457                           	opt stack 0
  5458                           
  5459                           ; 1 bytes @ 0x36
  5460  0002B6                     	ds	1
  5461  0002B7                     doModeVerbose@i_1183:
  5462                           	opt stack 0
  5463                           
  5464                           ; 1 bytes @ 0x37
  5465  0002B7                     	ds	1
  5466  0002B8                     doModeVerbose@c:
  5467                           	opt stack 0
  5468                           
  5469                           ; 1 bytes @ 0x38
  5470  0002B8                     	ds	1
  5471  0002B9                     doModeVerbose@value:
  5472                           	opt stack 0
  5473                           
  5474                           ; 1 bytes @ 0x39
  5475  0002B9                     	ds	1
  5476  0002BA                     doModeVerbose@p_1190:
  5477                           	opt stack 0
  5478                           
  5479                           ; 2 bytes @ 0x3A
  5480  0002BA                     	ds	2
  5481  0002BC                     doModeVerbose@p_1243:
  5482                           	opt stack 0
  5483                           
  5484                           ; 2 bytes @ 0x3C
  5485  0002BC                     	ds	2
  5486  0002BE                     doModeVerbose@ifmode:
  5487                           	opt stack 0
  5488                           
  5489                           ; 1 bytes @ 0x3E
  5490  0002BE                     	ds	1
  5491  0002BF                     doModeVerbose@p:
  5492                           	opt stack 0
  5493                           
  5494                           ; 2 bytes @ 0x3F
  5495  0002BF                     	ds	2
  5496  0002C1                     doModeVerbose@p_1279:
  5497                           	opt stack 0
  5498                           
  5499                           ; 2 bytes @ 0x41
  5500  0002C1                     	ds	2
  5501  0002C3                     doModeVerbose@p_1299:
  5502                           	opt stack 0
  5503                           
  5504                           ; 2 bytes @ 0x43
  5505  0002C3                     	ds	2
  5506                           tblptru	equ	0xFF8
  5507                           tblptrh	equ	0xFF7
  5508                           tblptrl	equ	0xFF6
  5509                           tablat	equ	0xFF5
  5510                           prodh	equ	0xFF4
  5511                           prodl	equ	0xFF3
  5512                           intcon	equ	0xFF2
  5513                           indf0	equ	0xFEF
  5514                           postinc0	equ	0xFEE
  5515                           fsr0h	equ	0xFEA
  5516                           fsr0l	equ	0xFE9
  5517                           wreg	equ	0xFE8
  5518                           indf1	equ	0xFE7
  5519                           postinc1	equ	0xFE6
  5520                           postdec1	equ	0xFE5
  5521                           fsr1h	equ	0xFE2
  5522                           fsr1l	equ	0xFE1
  5523                           indf2	equ	0xFDF
  5524                           postinc2	equ	0xFDE
  5525                           postdec2	equ	0xFDD
  5526                           plusw2	equ	0xFDB
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531                           	psect	cstackBANK0
  5532  000060                     __pcstackBANK0:
  5533                           	opt stack 0
  5534  000060                     ?_WriteTimer0:
  5535                           	opt stack 0
  5536  000060                     ?_fifo_init:
  5537                           	opt stack 0
  5538  000060                     ?_OpenUSART:
  5539                           	opt stack 0
  5540  000060                     ?_Write_b_eep:
  5541                           	opt stack 0
  5542  000060                     ??_isdigit:
  5543  000060                     ?_Read_b_eep:
  5544                           	opt stack 0
  5545  000060                     ?_fifo_read:
  5546                           	opt stack 0
  5547  000060                     ?_memset:
  5548                           	opt stack 0
  5549  000060                     ?_strcpy:
  5550                           	opt stack 0
  5551  000060                     ?_strchr:
  5552                           	opt stack 0
  5553  000060                     ?_strlen:
  5554                           	opt stack 0
  5555  000060                     ?_memcpy:
  5556                           	opt stack 0
  5557  000060                     ?_strcat:
  5558                           	opt stack 0
  5559  000060                     ?___lwdiv:
  5560                           	opt stack 0
  5561  000060                     ?___lwmod:
  5562                           	opt stack 0
  5563  000060                     ?___wmul:
  5564                           	opt stack 0
  5565  000060                     ?___lldiv:
  5566                           	opt stack 0
  5567  000060                     ECANSetOperationMode@mode:
  5568                           	opt stack 0
  5569  000060                     nibbleFromChar@c:
  5570                           	opt stack 0
  5571  000060                     OpenTimer0@config:
  5572                           	opt stack 0
  5573  000060                     WriteUSART@data:
  5574                           	opt stack 0
  5575  000060                     toupper@c:
  5576                           	opt stack 0
  5577  000060                     fifo_init@f:
  5578                           	opt stack 0
  5579  000060                     fifo_read@f:
  5580                           	opt stack 0
  5581  000060                     _init_crc8$2066:
  5582                           	opt stack 0
  5583  000060                     Read_b_eep@badd:
  5584                           	opt stack 0
  5585  000060                     Write_b_eep@badd:
  5586                           	opt stack 0
  5587  000060                     WriteTimer0@timer0:
  5588                           	opt stack 0
  5589  000060                     OpenUSART@spbrg:
  5590                           	opt stack 0
  5591  000060                     ___lwdiv@dividend:
  5592                           	opt stack 0
  5593  000060                     ___lwmod@dividend:
  5594                           	opt stack 0
  5595  000060                     memcpy@d1:
  5596                           	opt stack 0
  5597  000060                     memset@p1:
  5598                           	opt stack 0
  5599  000060                     strcat@to:
  5600                           	opt stack 0
  5601  000060                     strchr@ptr:
  5602                           	opt stack 0
  5603  000060                     strcpy@to:
  5604                           	opt stack 0
  5605  000060                     strlen@s:
  5606                           	opt stack 0
  5607  000060                     ___wmul@multiplier:
  5608                           	opt stack 0
  5609  000060                     ___lldiv@dividend:
  5610                           	opt stack 0
  5611                           
  5612                           ; 4 bytes @ 0x0
  5613  000060                     	ds	1
  5614  000061                     ?_putsUSART:
  5615                           	opt stack 0
  5616  000061                     ??_printBinary:
  5617  000061                     ?_strichr:
  5618                           	opt stack 0
  5619  000061                     _isdigit$2983:
  5620                           	opt stack 0
  5621  000061                     putsUSART@data:
  5622                           	opt stack 0
  5623  000061                     strichr@ptr:
  5624                           	opt stack 0
  5625                           
  5626                           ; 2 bytes @ 0x1
  5627  000061                     	ds	1
  5628  000062                     ?_setFilter:
  5629                           	opt stack 0
  5630  000062                     ?__CANIDToRegs:
  5631                           	opt stack 0
  5632  000062                     Write_b_eep@bdat:
  5633                           	opt stack 0
  5634  000062                     OpenUSART@config:
  5635                           	opt stack 0
  5636  000062                     isdigit@c:
  5637                           	opt stack 0
  5638  000062                     __CANIDToRegs@ptr:
  5639                           	opt stack 0
  5640  000062                     fifo_init@buf:
  5641                           	opt stack 0
  5642  000062                     fifo_read@buf:
  5643                           	opt stack 0
  5644  000062                     init_crc8@j:
  5645                           	opt stack 0
  5646  000062                     WriteTimer0@timer:
  5647                           	opt stack 0
  5648  000062                     ___lwdiv@divisor:
  5649                           	opt stack 0
  5650  000062                     ___lwmod@divisor:
  5651                           	opt stack 0
  5652  000062                     memcpy@s1:
  5653                           	opt stack 0
  5654  000062                     memset@c:
  5655                           	opt stack 0
  5656  000062                     strcat@from:
  5657                           	opt stack 0
  5658  000062                     strchr@chr:
  5659                           	opt stack 0
  5660  000062                     strcpy@from:
  5661                           	opt stack 0
  5662  000062                     strlen@cp:
  5663                           	opt stack 0
  5664  000062                     ___wmul@multiplicand:
  5665                           	opt stack 0
  5666  000062                     setFilter@val:
  5667                           	opt stack 0
  5668                           
  5669                           ; 4 bytes @ 0x2
  5670  000062                     	ds	1
  5671  000063                     ??_putsUSART:
  5672  000063                     printBinary@value:
  5673                           	opt stack 0
  5674  000063                     Write_b_eep@GIE_BIT_VAL:
  5675                           	opt stack 0
  5676  000063                     strichr@chr:
  5677                           	opt stack 0
  5678                           
  5679                           ; 2 bytes @ 0x3
  5680  000063                     	ds	1
  5681  000064                     ??_strchr:
  5682  000064                     ?_hexStringToBytes:
  5683                           	opt stack 0
  5684  000064                     ?_strnicmp:
  5685                           	opt stack 0
  5686  000064                     init_app_eeprom@i:
  5687                           	opt stack 0
  5688  000064                     init_crc8@crc:
  5689                           	opt stack 0
  5690  000064                     ___lwdiv@counter:
  5691                           	opt stack 0
  5692  000064                     ___lwmod@counter:
  5693                           	opt stack 0
  5694  000064                     printBinary@i:
  5695                           	opt stack 0
  5696  000064                     fifo_init@size:
  5697                           	opt stack 0
  5698  000064                     fifo_read@nbytes:
  5699                           	opt stack 0
  5700  000064                     hexStringToBytes@buf:
  5701                           	opt stack 0
  5702  000064                     memcpy@n:
  5703                           	opt stack 0
  5704  000064                     memset@n:
  5705                           	opt stack 0
  5706  000064                     strcat@cp:
  5707                           	opt stack 0
  5708  000064                     strcpy@cp:
  5709                           	opt stack 0
  5710  000064                     strnicmp@s1:
  5711                           	opt stack 0
  5712  000064                     ___wmul@product:
  5713                           	opt stack 0
  5714  000064                     __CANIDToRegs@val:
  5715                           	opt stack 0
  5716  000064                     ___lldiv@divisor:
  5717                           	opt stack 0
  5718                           
  5719                           ; 4 bytes @ 0x4
  5720  000064                     	ds	1
  5721  000065                     init_crc8@i:
  5722                           	opt stack 0
  5723  000065                     ___lwdiv@quotient:
  5724                           	opt stack 0
  5725                           
  5726                           ; 2 bytes @ 0x5
  5727  000065                     	ds	1
  5728  000066                     ??_fifo_read:
  5729  000066                     ??_setFilter:
  5730  000066                     ?_atoi:
  5731                           	opt stack 0
  5732  000066                     ?_strspn:
  5733                           	opt stack 0
  5734  000066                     ?_strcspn:
  5735                           	opt stack 0
  5736  000066                     hexStringToBytes@size:
  5737                           	opt stack 0
  5738  000066                     atoi@s:
  5739                           	opt stack 0
  5740  000066                     memcpy@d:
  5741                           	opt stack 0
  5742  000066                     memset@p:
  5743                           	opt stack 0
  5744  000066                     strnicmp@s2:
  5745                           	opt stack 0
  5746  000066                     strcspn@s1:
  5747                           	opt stack 0
  5748  000066                     strspn@s1:
  5749                           	opt stack 0
  5750                           
  5751                           ; 2 bytes @ 0x6
  5752  000066                     	ds	1
  5753  000067                     ?_crc8:
  5754                           	opt stack 0
  5755  000067                     ?_utoa:
  5756                           	opt stack 0
  5757  000067                     crc8@crc:
  5758                           	opt stack 0
  5759  000067                     hexStringToBytes@inhex:
  5760                           	opt stack 0
  5761  000067                     utoa@buf:
  5762                           	opt stack 0
  5763                           
  5764                           ; 2 bytes @ 0x7
  5765  000067                     	ds	1
  5766  000068                     ??_atoi:
  5767  000068                     __CANIDToRegs@type:
  5768                           	opt stack 0
  5769  000068                     ___lldiv@counter:
  5770                           	opt stack 0
  5771  000068                     memcpy@s:
  5772                           	opt stack 0
  5773  000068                     strnicmp@len:
  5774                           	opt stack 0
  5775  000068                     strcspn@s2:
  5776                           	opt stack 0
  5777  000068                     strspn@s2:
  5778                           	opt stack 0
  5779                           
  5780                           ; 2 bytes @ 0x8
  5781  000068                     	ds	1
  5782  000069                     ??__CANIDToRegs:
  5783  000069                     ??_hexStringToBytes:
  5784  000069                     crc8@m:
  5785                           	opt stack 0
  5786  000069                     utoa@val:
  5787                           	opt stack 0
  5788  000069                     ___lldiv@quotient:
  5789                           	opt stack 0
  5790                           
  5791                           ; 4 bytes @ 0x9
  5792  000069                     	ds	1
  5793  00006A                     ??_crc8:
  5794  00006A                     ??_strnicmp:
  5795  00006A                     atoi@sign:
  5796                           	opt stack 0
  5797  00006A                     fifo_read@p:
  5798                           	opt stack 0
  5799  00006A                     strcspn@i:
  5800                           	opt stack 0
  5801  00006A                     strspn@i:
  5802                           	opt stack 0
  5803                           
  5804                           ; 2 bytes @ 0xA
  5805  00006A                     	ds	1
  5806  00006B                     __CANIDToRegs@Value:
  5807                           	opt stack 0
  5808  00006B                     atoi@a:
  5809                           	opt stack 0
  5810  00006B                     utoa@base:
  5811                           	opt stack 0
  5812                           
  5813                           ; 2 bytes @ 0xB
  5814  00006B                     	ds	1
  5815  00006C                     ?_sendEscapedUartData:
  5816                           	opt stack 0
  5817  00006C                     ?_calcCRC:
  5818                           	opt stack 0
  5819  00006C                     ?_ECANSendMessage:
  5820                           	opt stack 0
  5821  00006C                     ?_strtok:
  5822                           	opt stack 0
  5823  00006C                     setFilter@filter:
  5824                           	opt stack 0
  5825  00006C                     strnicmp@r:
  5826                           	opt stack 0
  5827  00006C                     sendEscapedUartData@pcrc:
  5828                           	opt stack 0
  5829  00006C                     calcCRC@p:
  5830                           	opt stack 0
  5831  00006C                     fifo_read@i:
  5832                           	opt stack 0
  5833  00006C                     hexStringToBytes@len:
  5834                           	opt stack 0
  5835  00006C                     strtok@s1:
  5836                           	opt stack 0
  5837  00006C                     ECANSendMessage@id:
  5838                           	opt stack 0
  5839                           
  5840                           ; 4 bytes @ 0xC
  5841  00006C                     	ds	1
  5842  00006D                     ?_stristr:
  5843                           	opt stack 0
  5844  00006D                     ?___llmod:
  5845                           	opt stack 0
  5846  00006D                     setFilter@sidh:
  5847                           	opt stack 0
  5848  00006D                     utoa@v:
  5849                           	opt stack 0
  5850  00006D                     stristr@s1:
  5851                           	opt stack 0
  5852  00006D                     ___llmod@dividend:
  5853                           	opt stack 0
  5854                           
  5855                           ; 4 bytes @ 0xD
  5856  00006D                     	ds	1
  5857  00006E                     ?_getCANFrame:
  5858                           	opt stack 0
  5859  00006E                     sendEscapedUartData@c:
  5860                           	opt stack 0
  5861  00006E                     calcCRC@len:
  5862                           	opt stack 0
  5863  00006E                     setFilter@sidl:
  5864                           	opt stack 0
  5865  00006E                     getCANFrame@pdlc:
  5866                           	opt stack 0
  5867  00006E                     hexStringToBytes@p:
  5868                           	opt stack 0
  5869  00006E                     strtok@s2:
  5870                           	opt stack 0
  5871                           
  5872                           ; 2 bytes @ 0xE
  5873  00006E                     	ds	1
  5874  00006F                     ?_sendVSCPDriverCommandReply:
  5875                           	opt stack 0
  5876  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5877                           	opt stack 0
  5878  00006F                     sendVSCPDriverAck@crc:
  5879                           	opt stack 0
  5880  00006F                     sendVSCPDriverNack@crc:
  5881                           	opt stack 0
  5882  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5883                           	opt stack 0
  5884  00006F                     sendVSCPModeCapabilities@crc:
  5885                           	opt stack 0
  5886  00006F                     calcCRC@j:
  5887                           	opt stack 0
  5888  00006F                     setFilter@eidh:
  5889                           	opt stack 0
  5890  00006F                     utoa@c:
  5891                           	opt stack 0
  5892  00006F                     stristr@s2:
  5893                           	opt stack 0
  5894                           
  5895                           ; 2 bytes @ 0xF
  5896  00006F                     	ds	1
  5897  000070                     ?_itoa:
  5898                           	opt stack 0
  5899  000070                     sendVSCPDriverErrorFrame@crc:
  5900                           	opt stack 0
  5901  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5902                           	opt stack 0
  5903  000070                     calcCRC@crc:
  5904                           	opt stack 0
  5905  000070                     setFilter@eidl:
  5906                           	opt stack 0
  5907  000070                     getCANFrame@pdata:
  5908                           	opt stack 0
  5909  000070                     ECANSendMessage@data:
  5910                           	opt stack 0
  5911  000070                     hexStringToBytes@i:
  5912                           	opt stack 0
  5913  000070                     itoa@buf:
  5914                           	opt stack 0
  5915                           
  5916                           ; 2 bytes @ 0x10
  5917  000070                     	ds	1
  5918  000071                     ??_init_app_ram:
  5919  000071                     sendVSCPDriverCommandReply@crc:
  5920                           	opt stack 0
  5921  000071                     ___llmod@divisor:
  5922                           	opt stack 0
  5923                           
  5924                           ; 4 bytes @ 0x11
  5925  000071                     	ds	1
  5926  000072                     getCANFrame@pid:
  5927                           	opt stack 0
  5928  000072                     ECANSendMessage@dataLen:
  5929                           	opt stack 0
  5930  000072                     itoa@val:
  5931                           	opt stack 0
  5932                           
  5933                           ; 2 bytes @ 0x12
  5934  000072                     	ds	1
  5935  000073                     ?_getVSCPFrame:
  5936                           	opt stack 0
  5937  000073                     getVSCPFrame@pvscptype:
  5938                           	opt stack 0
  5939  000073                     ECANSendMessage@msgFlags:
  5940                           	opt stack 0
  5941  000073                     receiveSendEventCANAL@data:
  5942                           	opt stack 0
  5943  000073                     receiveSendMultiEventCANAL@data:
  5944                           	opt stack 0
  5945                           
  5946                           ; 8 bytes @ 0x13
  5947  000073                     	ds	1
  5948  000074                     ??_ECANSendMessage:
  5949  000074                     getVSCPFrame@pNodeId:
  5950                           	opt stack 0
  5951  000074                     itoa@base:
  5952                           	opt stack 0
  5953                           
  5954                           ; 2 bytes @ 0x14
  5955  000074                     	ds	1
  5956  000075                     getVSCPFrame@pPriority:
  5957                           	opt stack 0
  5958  000075                     ___llmod@counter:
  5959                           	opt stack 0
  5960  000075                     ECANSendMessage@pb:
  5961                           	opt stack 0
  5962                           
  5963                           ; 18 bytes @ 0x15
  5964  000075                     	ds	1
  5965  000076                     ?_sprintf:
  5966                           	opt stack 0
  5967  000076                     ?_ultoa:
  5968                           	opt stack 0
  5969  000076                     getVSCPFrame@pSize:
  5970                           	opt stack 0
  5971  000076                     sprintf@sp:
  5972                           	opt stack 0
  5973  000076                     ultoa@buf:
  5974                           	opt stack 0
  5975                           
  5976                           ; 2 bytes @ 0x16
  5977  000076                     	ds	1
  5978  000077                     getVSCPFrame@pData:
  5979                           	opt stack 0
  5980                           
  5981                           ; 2 bytes @ 0x17
  5982  000077                     	ds	1
  5983  000078                     sprintf@f:
  5984                           	opt stack 0
  5985  000078                     ultoa@val:
  5986                           	opt stack 0
  5987  000078                     printFirmwareVersion@wrkbuf:
  5988                           	opt stack 0
  5989                           
  5990                           ; 20 bytes @ 0x18
  5991  000078                     	ds	1
  5992  000079                     ??_getVSCPFrame:
  5993  000079                     init_app_ram@i:
  5994                           	opt stack 0
  5995                           
  5996                           ; 1 bytes @ 0x19
  5997  000079                     	ds	1
  5998  00007A                     
  5999                           ; 0 bytes @ 0x1A
  6000  00007A                     	ds	1
  6001  00007B                     receiveSendEventCANAL@i:
  6002                           	opt stack 0
  6003  00007B                     receiveSendMultiEventCANAL@msgcount:
  6004                           	opt stack 0
  6005                           
  6006                           ; 1 bytes @ 0x1B
  6007  00007B                     	ds	1
  6008  00007C                     receiveSendMultiEventCANAL@i:
  6009                           	opt stack 0
  6010  00007C                     ultoa@base:
  6011                           	opt stack 0
  6012  00007C                     receiveSendEventCANAL@id:
  6013                           	opt stack 0
  6014                           
  6015                           ; 4 bytes @ 0x1C
  6016  00007C                     	ds	1
  6017  00007D                     getVSCPFrame@pvscpclass:
  6018                           	opt stack 0
  6019  00007D                     receiveSendMultiEventCANAL@id:
  6020                           	opt stack 0
  6021                           
  6022                           ; 4 bytes @ 0x1D
  6023  00007D                     	ds	1
  6024  00007E                     ??_sprintf:
  6025  00007E                     getVSCPFrame@id:
  6026                           	opt stack 0
  6027  00007E                     ultoa@v:
  6028                           	opt stack 0
  6029                           
  6030                           ; 4 bytes @ 0x1E
  6031  00007E                     	ds	2
  6032  000080                     receiveSendEventCANAL@dlc:
  6033                           	opt stack 0
  6034                           
  6035                           ; 1 bytes @ 0x20
  6036  000080                     	ds	1
  6037  000081                     receiveSendEventCANAL@crc:
  6038                           	opt stack 0
  6039  000081                     receiveSendMultiEventCANAL@dlc:
  6040                           	opt stack 0
  6041  000081                     sprintf@idx:
  6042                           	opt stack 0
  6043                           
  6044                           ; 1 bytes @ 0x21
  6045  000081                     	ds	1
  6046  000082                     receiveSendMultiEventCANAL@crc:
  6047                           	opt stack 0
  6048  000082                     ultoa@c:
  6049                           	opt stack 0
  6050  000082                     _sprintf$2128:
  6051                           	opt stack 0
  6052                           
  6053                           ; 2 bytes @ 0x22
  6054  000082                     	ds	1
  6055  000083                     ??_receiveSendEventSLCAN:
  6056  000083                     receiveSendMultiEventCANAL@pos:
  6057                           	opt stack 0
  6058                           
  6059                           ; 1 bytes @ 0x23
  6060  000083                     	ds	1
  6061  000084                     _sprintf$2129:
  6062                           	opt stack 0
  6063                           
  6064                           ; 2 bytes @ 0x24
  6065  000084                     	ds	2
  6066  000086                     _sprintf$2135:
  6067                           	opt stack 0
  6068  000086                     receiveSendEventSLCAN@id:
  6069                           	opt stack 0
  6070                           
  6071                           ; 4 bytes @ 0x26
  6072  000086                     	ds	1
  6073  000087                     ECANSendMessage@mode:
  6074                           	opt stack 0
  6075                           
  6076                           ; 1 bytes @ 0x27
  6077  000087                     	ds	1
  6078  000088                     ECANSendMessage@buffers:
  6079                           	opt stack 0
  6080  000088                     sprintf@ap:
  6081                           	opt stack 0
  6082                           
  6083                           ; 1 bytes @ 0x28
  6084  000088                     	ds	1
  6085  000089                     ECANSendMessage@j:
  6086                           	opt stack 0
  6087  000089                     sprintf@prec:
  6088                           	opt stack 0
  6089                           
  6090                           ; 2 bytes @ 0x29
  6091  000089                     	ds	1
  6092  00008A                     receiveSendEventSLCAN@dlc:
  6093                           	opt stack 0
  6094  00008A                     ECANSendMessage@tempBSEL0:
  6095                           	opt stack 0
  6096                           
  6097                           ; 1 bytes @ 0x2A
  6098  00008A                     	ds	1
  6099  00008B                     receiveSendEventSLCAN@i:
  6100                           	opt stack 0
  6101  00008B                     ECANSendMessage@tempPtr:
  6102                           	opt stack 0
  6103  00008B                     sprintf@width:
  6104                           	opt stack 0
  6105                           
  6106                           ; 2 bytes @ 0x2B
  6107  00008B                     	ds	2
  6108  00008D                     ECANSendMessage@temp:
  6109                           	opt stack 0
  6110  00008D                     sprintf@_val:
  6111                           	opt stack 0
  6112                           
  6113                           ; 4 bytes @ 0x2D
  6114  00008D                     	ds	1
  6115  00008E                     ECANSendMessage@i:
  6116                           	opt stack 0
  6117                           
  6118                           ; 1 bytes @ 0x2E
  6119  00008E                     	ds	1
  6120  00008F                     ECANSendMessage@ptr:
  6121                           	opt stack 0
  6122                           
  6123                           ; 2 bytes @ 0x2F
  6124  00008F                     	ds	2
  6125  000091                     ?_sendCANFrame:
  6126                           	opt stack 0
  6127  000091                     sprintf@c:
  6128                           	opt stack 0
  6129  000091                     sendCANFrame@id:
  6130                           	opt stack 0
  6131                           
  6132                           ; 4 bytes @ 0x31
  6133  000091                     	ds	1
  6134  000092                     sprintf@flag:
  6135                           	opt stack 0
  6136                           
  6137                           ; 2 bytes @ 0x32
  6138  000092                     	ds	2
  6139  000094                     ??_receivePrintEventVerbose:
  6140  000094                     _printStatistics$1473:
  6141                           	opt stack 0
  6142  000094                     _printErrors$1498:
  6143                           	opt stack 0
  6144                           
  6145                           ; 2 bytes @ 0x34
  6146  000094                     	ds	1
  6147  000095                     sendCANFrame@dlc:
  6148                           	opt stack 0
  6149                           
  6150                           ; 1 bytes @ 0x35
  6151  000095                     	ds	1
  6152  000096                     _printStatistics$1479:
  6153                           	opt stack 0
  6154  000096                     _printErrors$1504:
  6155                           	opt stack 0
  6156  000096                     sendCANFrame@pdata:
  6157                           	opt stack 0
  6158                           
  6159                           ; 2 bytes @ 0x36
  6160  000096                     	ds	2
  6161  000098                     ??_doModeSLCAN:
  6162  000098                     ??_receiveVSCPModeCanalMsg:
  6163  000098                     ?_sendVSCPFrame:
  6164                           	opt stack 0
  6165  000098                     _printStatistics$1485:
  6166                           	opt stack 0
  6167  000098                     _printErrors$1510:
  6168                           	opt stack 0
  6169  000098                     sendVSCPFrame@vscpclass:
  6170                           	opt stack 0
  6171                           
  6172                           ; 2 bytes @ 0x38
  6173  000098                     	ds	1
  6174  000099                     _receivePrintEventVerbose$1380:
  6175                           	opt stack 0
  6176                           
  6177                           ; 2 bytes @ 0x39
  6178  000099                     	ds	1
  6179  00009A                     sendVSCPFrame@vscptype:
  6180                           	opt stack 0
  6181  00009A                     _printStatistics$1491:
  6182                           	opt stack 0
  6183  00009A                     _printErrors$1516:
  6184                           	opt stack 0
  6185                           
  6186                           ; 2 bytes @ 0x3A
  6187  00009A                     	ds	1
  6188  00009B                     sendVSCPFrame@nodeid:
  6189                           	opt stack 0
  6190  00009B                     _receivePrintEventVerbose$1385:
  6191                           	opt stack 0
  6192                           
  6193                           ; 2 bytes @ 0x3B
  6194  00009B                     	ds	1
  6195  00009C                     sendVSCPFrame@priority:
  6196                           	opt stack 0
  6197  00009C                     _printErrors$1522:
  6198                           	opt stack 0
  6199                           
  6200                           ; 2 bytes @ 0x3C
  6201  00009C                     	ds	1
  6202  00009D                     sendVSCPFrame@size:
  6203                           	opt stack 0
  6204  00009D                     _receivePrintEventVerbose$1390:
  6205                           	opt stack 0
  6206                           
  6207                           ; 2 bytes @ 0x3D
  6208  00009D                     	ds	1
  6209  00009E                     _printErrors$1531:
  6210                           	opt stack 0
  6211  00009E                     sendVSCPFrame@pData:
  6212                           	opt stack 0
  6213                           
  6214                           ; 2 bytes @ 0x3E
  6215  00009E                     	ds	1
  6216  00009F                     _receivePrintEventVerbose$1395:
  6217                           	opt stack 0
  6218  00009F                     doModeSLCAN@id:
  6219                           	opt stack 0
  6220                           
  6221                           ; 4 bytes @ 0x3F
  6222  00009F                     	ds	1
  6223  0000A0                     ??_sendVSCPFrame:
  6224                           
  6225                           ; 0 bytes @ 0x40
  6226  0000A0                     	ds	1
  6227  0000A1                     _receivePrintEventVerbose$1400:
  6228                           	opt stack 0
  6229                           
  6230                           ; 2 bytes @ 0x41
  6231  0000A1                     	ds	2
  6232  0000A3                     doModeSLCAN@dlc:
  6233                           	opt stack 0
  6234  0000A3                     _receivePrintEventVerbose$1405:
  6235                           	opt stack 0
  6236                           
  6237                           ; 2 bytes @ 0x43
  6238  0000A3                     	ds	1
  6239  0000A4                     doModeSLCAN@c:
  6240                           	opt stack 0
  6241                           
  6242                           ; 1 bytes @ 0x44
  6243  0000A4                     	ds	1
  6244  0000A5                     doModeSLCAN@rv:
  6245                           	opt stack 0
  6246  0000A5                     receivePrintEventVerbose@i:
  6247                           	opt stack 0
  6248                           
  6249                           ; 1 bytes @ 0x45
  6250  0000A5                     	ds	7
  6251  0000AC                     receiveVSCPModeCanalMsg@data:
  6252                           	opt stack 0
  6253                           
  6254                           ; 8 bytes @ 0x4C
  6255  0000AC                     	ds	8
  6256  0000B4                     receiveVSCPModeCanalMsg@id:
  6257                           	opt stack 0
  6258  0000B4                     sendVSCPFrame@id:
  6259                           	opt stack 0
  6260                           
  6261                           ; 4 bytes @ 0x54
  6262  0000B4                     	ds	4
  6263  0000B8                     ?_readRegisterExtended:
  6264                           	opt stack 0
  6265  0000B8                     ?_writeRegisterExtended:
  6266                           	opt stack 0
  6267  0000B8                     ?_readRegister:
  6268                           	opt stack 0
  6269  0000B8                     receiveVSCPModeCanalMsg@dlc:
  6270                           	opt stack 0
  6271  0000B8                     readRegister@reg:
  6272                           	opt stack 0
  6273  0000B8                     readRegisterExtended@page:
  6274                           	opt stack 0
  6275  0000B8                     writeRegisterExtended@page:
  6276                           	opt stack 0
  6277                           
  6278                           ; 2 bytes @ 0x58
  6279  0000B8                     	ds	1
  6280  0000B9                     doModeVscp@c:
  6281                           	opt stack 0
  6282  0000B9                     readRegister@timeout:
  6283                           	opt stack 0
  6284                           
  6285                           ; 2 bytes @ 0x59
  6286  0000B9                     	ds	1
  6287  0000BA                     readRegisterExtended@reg:
  6288                           	opt stack 0
  6289  0000BA                     writeRegisterExtended@reg:
  6290                           	opt stack 0
  6291                           
  6292                           ; 1 bytes @ 0x5A
  6293  0000BA                     	ds	1
  6294  0000BB                     readRegister@value:
  6295                           	opt stack 0
  6296  0000BB                     readRegisterExtended@timeout:
  6297                           	opt stack 0
  6298  0000BB                     writeRegisterExtended@timeout:
  6299                           	opt stack 0
  6300                           
  6301                           ; 2 bytes @ 0x5B
  6302  0000BB                     	ds	1
  6303  0000BC                     ??_readRegister:
  6304                           
  6305                           ; 0 bytes @ 0x5C
  6306  0000BC                     	ds	1
  6307  0000BD                     readRegisterExtended@value:
  6308                           	opt stack 0
  6309  0000BD                     writeRegisterExtended@value:
  6310                           	opt stack 0
  6311                           
  6312                           ; 2 bytes @ 0x5D
  6313  0000BD                     	ds	2
  6314  0000BF                     ??_readRegisterExtended:
  6315  0000BF                     ??_writeRegisterExtended:
  6316                           
  6317                           ; 0 bytes @ 0x5F
  6318  0000BF                     	ds	1
  6319  0000C0                     readRegister@nodeid:
  6320                           	opt stack 0
  6321                           
  6322                           ; 1 bytes @ 0x60
  6323  0000C0                     	ds	1
  6324  0000C1                     printGUID@nodeid:
  6325                           	opt stack 0
  6326  0000C1                     printMDF@nodeid:
  6327                           	opt stack 0
  6328  0000C1                     printNodeFirmwareVersion@nodeid:
  6329                           	opt stack 0
  6330                           
  6331                           ; 1 bytes @ 0x61
  6332  0000C1                     	ds	1
  6333  0000C2                     printMDF@value:
  6334                           	opt stack 0
  6335  0000C2                     printGUID@buf:
  6336                           	opt stack 0
  6337  0000C2                     printNodeFirmwareVersion@buf:
  6338                           	opt stack 0
  6339                           
  6340                           ; 3 bytes @ 0x62
  6341  0000C2                     	ds	1
  6342  0000C3                     readRegisterExtended@nodeid:
  6343                           	opt stack 0
  6344  0000C3                     writeRegisterExtended@nodeid:
  6345                           	opt stack 0
  6346  0000C3                     printMDF@p:
  6347                           	opt stack 0
  6348                           
  6349                           ; 2 bytes @ 0x63
  6350  0000C3                     	ds	2
  6351  0000C5                     printGUID@value:
  6352                           	opt stack 0
  6353  0000C5                     printMDF@i:
  6354                           	opt stack 0
  6355  0000C5                     printNodeFirmwareVersion@value:
  6356                           	opt stack 0
  6357                           
  6358                           ; 1 bytes @ 0x65
  6359  0000C5                     	ds	1
  6360  0000C6                     printGUID@i:
  6361                           	opt stack 0
  6362  0000C6                     printNodeFirmwareVersion@i:
  6363                           	opt stack 0
  6364                           
  6365                           ; 1 bytes @ 0x66
  6366  0000C6                     	ds	1
  6367  0000C7                     _findNodes$1576:
  6368                           	opt stack 0
  6369                           
  6370                           ; 2 bytes @ 0x67
  6371  0000C7                     	ds	2
  6372  0000C9                     findNodes@nFound:
  6373                           	opt stack 0
  6374                           
  6375                           ; 1 bytes @ 0x69
  6376  0000C9                     	ds	1
  6377  0000CA                     findNodes@value:
  6378                           	opt stack 0
  6379                           
  6380                           ; 1 bytes @ 0x6A
  6381  0000CA                     	ds	1
  6382  0000CB                     findNodes@i:
  6383                           	opt stack 0
  6384                           
  6385                           ; 1 bytes @ 0x6B
  6386  0000CB                     	ds	1
  6387  0000CC                     ??_doModeVerbose:
  6388                           
  6389                           ; 0 bytes @ 0x6C
  6390  0000CC                     	ds	20
  6391  0000E0                     
  6392                           ; 2 bytes @ 0x80
  6393  0000E0                     	ds	2
  6394  0000E2                     
  6395                           ; 3 bytes @ 0x82
  6396  0000E2                     	ds	3
  6397  0000E5                     ??_main:
  6398                           
  6399                           ; 0 bytes @ 0x85
  6400  0000E5                     	ds	1
  6401  0000E6                     main@c:
  6402                           	opt stack 0
  6403                           
  6404                           ; 1 bytes @ 0x86
  6405  0000E6                     	ds	1
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           intcon	equ	0xFF2
  6413                           indf0	equ	0xFEF
  6414                           postinc0	equ	0xFEE
  6415                           fsr0h	equ	0xFEA
  6416                           fsr0l	equ	0xFE9
  6417                           wreg	equ	0xFE8
  6418                           indf1	equ	0xFE7
  6419                           postinc1	equ	0xFE6
  6420                           postdec1	equ	0xFE5
  6421                           fsr1h	equ	0xFE2
  6422                           fsr1l	equ	0xFE1
  6423                           indf2	equ	0xFDF
  6424                           postinc2	equ	0xFDE
  6425                           postdec2	equ	0xFDD
  6426                           plusw2	equ	0xFDB
  6427                           fsr2h	equ	0xFDA
  6428                           fsr2l	equ	0xFD9
  6429                           status	equ	0xFD8
  6430                           
  6431                           	psect	cstackCOMRAM
  6432  000001                     __pcstackCOMRAM:
  6433                           	opt stack 0
  6434  000001                     ?__RegsToCANID:
  6435                           	opt stack 0
  6436  000001                     ?i1_WriteTimer0:
  6437                           	opt stack 0
  6438  000001                     ?_fifo_write:
  6439                           	opt stack 0
  6440  000001                     ?_fifo_getFree:
  6441                           	opt stack 0
  6442  000001                     ?__ECANPointBuffer:
  6443                           	opt stack 0
  6444  000001                     ReadUSART@data:
  6445                           	opt stack 0
  6446  000001                     __RegsToCANID@ptr:
  6447                           	opt stack 0
  6448  000001                     fifo_write@f:
  6449                           	opt stack 0
  6450  000001                     fifo_getFree@f:
  6451                           	opt stack 0
  6452  000001                     i1WriteTimer0@timer0:
  6453                           	opt stack 0
  6454                           
  6455                           ; 2 bytes @ 0x0
  6456  000001                     	ds	2
  6457  000003                     ??_fifo_getFree:
  6458  000003                     __RegsToCANID@val:
  6459                           	opt stack 0
  6460  000003                     fifo_write@buf:
  6461                           	opt stack 0
  6462  000003                     i1WriteTimer0@timer:
  6463                           	opt stack 0
  6464                           
  6465                           ; 2 bytes @ 0x2
  6466  000003                     	ds	1
  6467  000004                     __ECANPointBuffer@b:
  6468                           	opt stack 0
  6469                           
  6470                           ; 1 bytes @ 0x3
  6471  000004                     	ds	1
  6472  000005                     __RegsToCANID@type:
  6473                           	opt stack 0
  6474  000005                     __ECANPointBuffer@pt:
  6475                           	opt stack 0
  6476  000005                     fifo_write@nbytes:
  6477                           	opt stack 0
  6478                           
  6479                           ; 4 bytes @ 0x4
  6480  000005                     	ds	1
  6481  000006                     ??__RegsToCANID:
  6482                           
  6483                           ; 0 bytes @ 0x5
  6484  000006                     	ds	2
  6485  000008                     __RegsToCANID@Value:
  6486                           	opt stack 0
  6487                           
  6488                           ; 2 bytes @ 0x7
  6489  000008                     	ds	1
  6490  000009                     ??_fifo_write:
  6491                           
  6492                           ; 0 bytes @ 0x8
  6493  000009                     	ds	1
  6494  00000A                     ?_ECANReceiveMessage:
  6495                           	opt stack 0
  6496  00000A                     ECANReceiveMessage@id:
  6497                           	opt stack 0
  6498                           
  6499                           ; 2 bytes @ 0x9
  6500  00000A                     	ds	2
  6501  00000C                     ECANReceiveMessage@data:
  6502                           	opt stack 0
  6503                           
  6504                           ; 2 bytes @ 0xB
  6505  00000C                     	ds	1
  6506  00000D                     fifo_write@p:
  6507                           	opt stack 0
  6508                           
  6509                           ; 2 bytes @ 0xC
  6510  00000D                     	ds	1
  6511  00000E                     ECANReceiveMessage@dataLen:
  6512                           	opt stack 0
  6513                           
  6514                           ; 1 bytes @ 0xD
  6515  00000E                     	ds	1
  6516  00000F                     ECANReceiveMessage@msgFlags:
  6517                           	opt stack 0
  6518  00000F                     fifo_write@i:
  6519                           	opt stack 0
  6520                           
  6521                           ; 4 bytes @ 0xE
  6522  00000F                     	ds	1
  6523  000010                     ECANReceiveMessage@savedPtr:
  6524                           	opt stack 0
  6525                           
  6526                           ; 2 bytes @ 0xF
  6527  000010                     	ds	2
  6528  000012                     ECANReceiveMessage@i:
  6529                           	opt stack 0
  6530                           
  6531                           ; 1 bytes @ 0x11
  6532  000012                     	ds	1
  6533  000013                     ECANReceiveMessage@mode:
  6534                           	opt stack 0
  6535                           
  6536                           ; 1 bytes @ 0x12
  6537  000013                     	ds	1
  6538  000014                     ECANReceiveMessage@temp:
  6539                           	opt stack 0
  6540                           
  6541                           ; 1 bytes @ 0x13
  6542  000014                     	ds	1
  6543  000015                     ECANReceiveMessage@ptr:
  6544                           	opt stack 0
  6545                           
  6546                           ; 2 bytes @ 0x14
  6547  000015                     	ds	2
  6548  000017                     ??_Interrupt:
  6549                           
  6550                           ; 0 bytes @ 0x16
  6551  000017                     	ds	9
  6552  000020                     Interrupt@c:
  6553                           	opt stack 0
  6554                           
  6555                           ; 1 bytes @ 0x1F
  6556  000020                     	ds	1
  6557  000021                     Interrupt@fail:
  6558                           	opt stack 0
  6559                           
  6560                           ; 1 bytes @ 0x20
  6561  000021                     	ds	1
  6562                           tblptru	equ	0xFF8
  6563                           tblptrh	equ	0xFF7
  6564                           tblptrl	equ	0xFF6
  6565                           tablat	equ	0xFF5
  6566                           prodh	equ	0xFF4
  6567                           prodl	equ	0xFF3
  6568                           intcon	equ	0xFF2
  6569                           indf0	equ	0xFEF
  6570                           postinc0	equ	0xFEE
  6571                           fsr0h	equ	0xFEA
  6572                           fsr0l	equ	0xFE9
  6573                           wreg	equ	0xFE8
  6574                           indf1	equ	0xFE7
  6575                           postinc1	equ	0xFE6
  6576                           postdec1	equ	0xFE5
  6577                           fsr1h	equ	0xFE2
  6578                           fsr1l	equ	0xFE1
  6579                           indf2	equ	0xFDF
  6580                           postinc2	equ	0xFDE
  6581                           postdec2	equ	0xFDD
  6582                           plusw2	equ	0xFDB
  6583                           fsr2h	equ	0xFDA
  6584                           fsr2l	equ	0xFD9
  6585                           status	equ	0xFD8
  6586                           
  6587 ;;
  6588 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6589 ;;
  6590 ;; *************** function _main *****************
  6591 ;; Defined at:
  6592 ;;		line 271 in file "main.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;  argc            2  128[BANK0 ] int 
  6595 ;;  argv            3  130[BANK0 ] PTR PTR unsigned char 
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;  c               1  134[BANK0 ] unsigned char 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  2  128[BANK0 ] int 
  6600 ;; Registers used:
  6601 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : F/1
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6607 ;;      Params:         0       5       0       0       0       0       0
  6608 ;;      Locals:         0       1       0       0       0       0       0
  6609 ;;      Temps:          0       1       0       0       0       0       0
  6610 ;;      Totals:         0       7       0       0       0       0       0
  6611 ;;Total ram usage:        7 bytes
  6612 ;; Hardware stack levels required when called:   11
  6613 ;; This function calls:
  6614 ;;		_fifo_init
  6615 ;;		_init_crc8
  6616 ;;		_Read_b_eep
  6617 ;;		_vscp_restoreDefaults
  6618 ;;		_init
  6619 ;;		_putsUSART
  6620 ;;		_printFirmwareVersion
  6621 ;;		_printMode
  6622 ;;		_fifo_read
  6623 ;;		_ECANSetOperationMode
  6624 ;;		_doModeVerbose
  6625 ;;		_doModeVscp
  6626 ;;		_doModeSLCAN
  6627 ;;		_doModeVscpNode
  6628 ;; This function is called by:
  6629 ;;		Startup code after reset
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text0
  6634  003FB0                     __ptext0:
  6635                           	opt stack 0
  6636  003FB0                     _main:
  6637                           	opt stack 19
  6638                           
  6639                           ;main.c: 273: caps.maxVscpFrames = 1;
  6640                           
  6641                           ;incstack = 0
  6642                           ;incstack = 0
  6643  003FB0  0E01               	movlw	1
  6644  003FB2  0101               	movlb	1	; () banked
  6645  003FB4  6FF1               	movwf	_caps& (0+255),b
  6646                           
  6647                           ;main.c: 274: caps.maxCanalFrames = 1;
  6648  003FB6  6FF2               	movwf	(_caps+1)& (0+255),b
  6649                           
  6650                           ; BSR set to: 1
  6651                           ;main.c: 279: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6652  003FB8  0E01               	movlw	high _serialInputFifo
  6653  003FBA  0100               	movlb	0	; () banked
  6654  003FBC  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6655  003FBE  0EDD               	movlw	low _serialInputFifo
  6656  003FC0  6F60               	movwf	?_fifo_init& (0+255),b
  6657  003FC2  0E02               	movlw	high _serial_inputBuffer
  6658  003FC4  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6659  003FC6  0E00               	movlw	low _serial_inputBuffer
  6660  003FC8  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6661  003FCA  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6662  003FCC  0E80               	movlw	128
  6663  003FCE  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6664  003FD0  EC4F  F009         	call	_fifo_init	;wreg free
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;main.c: 280: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6668  003FD4  0E01               	movlw	high _canInputFifo
  6669  003FD6  0100               	movlb	0	; () banked
  6670  003FD8  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6671  003FDA  0ECD               	movlw	low _canInputFifo
  6672  003FDC  6F60               	movwf	?_fifo_init& (0+255),b
  6673  003FDE  0E04               	movlw	high _can_inputBuffer
  6674  003FE0  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6675  003FE2  0E00               	movlw	low _can_inputBuffer
  6676  003FE4  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6677  003FE6  0E01               	movlw	1
  6678  003FE8  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6679  003FEA  0EEE               	movlw	238
  6680  003FEC  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6681  003FEE  EC4F  F009         	call	_fifo_init	;wreg free
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;main.c: 283: init_crc8();
  6685  003FF2  ECD8  F00B         	call	_init_crc8	;wreg free
  6686                           
  6687                           ; BSR set to: 1
  6688                           ;main.c: 287: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6689                           ;main.c: 288: ( 0xaa != Read_b_eep(0x02) ) ) {
  6690  003FF6  0100               	movlb	0	; () banked
  6691  003FF8  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6692  003FFA  0E01               	movlw	1
  6693  003FFC  6F60               	movwf	?_Read_b_eep& (0+255),b
  6694  003FFE  ECCC  F007         	call	_Read_b_eep	;wreg free
  6695  004002  0A55               	xorlw	85
  6696  004004  E108               	bnz	l13966
  6697  004006  0100               	movlb	0	; () banked
  6698  004008  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6699  00400A  0E02               	movlw	2
  6700  00400C  6F60               	movwf	?_Read_b_eep& (0+255),b
  6701  00400E  ECCC  F007         	call	_Read_b_eep	;wreg free
  6702  004012  0AAA               	xorlw	170
  6703  004014  A4D8               	btfss	status,2,c
  6704  004016                     l13966:
  6705                           
  6706                           ;main.c: 289: vscp_restoreDefaults();
  6707  004016  ECB6  F007         	call	_vscp_restoreDefaults	;wreg free
  6708                           
  6709                           ;main.c: 290: }
  6710                           ;main.c: 293: init();
  6711  00401A  ECF4  F009         	call	_init	;wreg free
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;main.c: 297: _delay((unsigned long)((10)*(40000000/4000.0)));
  6715  00401E  0E82               	movlw	130
  6716  004020  6FE5               	movwf	??_main& (0+255),b
  6717  004022  0EDD               	movlw	221
  6718  004024                     u23627:
  6719  004024  2EE8               	decfsz	wreg,f,c
  6720  004026  D7FE               	goto	u23627
  6721  004028  2FE5               	decfsz	??_main& (0+255),f,b
  6722  00402A  D7FC               	goto	u23627
  6723  00402C  D000               	nop2	
  6724                           
  6725                           ;main.c: 301: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6726  00402E  0E75               	movlw	high STR_1
  6727  004030  0100               	movlb	0	; () banked
  6728  004032  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6729  004034  0ED3               	movlw	low STR_1
  6730  004036  6F61               	movwf	?_putsUSART& (0+255),b
  6731  004038  EC8D  F00A         	call	_putsUSART	;wreg free
  6732                           
  6733                           ;main.c: 302: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6734  00403C  0E6E               	movlw	high STR_2
  6735  00403E  0100               	movlb	0	; () banked
  6736  004040  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6737  004042  0EF2               	movlw	low STR_2
  6738  004044  6F61               	movwf	?_putsUSART& (0+255),b
  6739  004046  EC8D  F00A         	call	_putsUSART	;wreg free
  6740                           
  6741                           ;main.c: 303: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6742  00404A  0E76               	movlw	high STR_3
  6743  00404C  0100               	movlb	0	; () banked
  6744  00404E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6745  004050  0E65               	movlw	low STR_3
  6746  004052  6F61               	movwf	?_putsUSART& (0+255),b
  6747  004054  EC8D  F00A         	call	_putsUSART	;wreg free
  6748                           
  6749                           ;main.c: 304: printFirmwareVersion();
  6750  004058  EC86  F00D         	call	_printFirmwareVersion	;wreg free
  6751                           
  6752                           ;main.c: 305: printMode();
  6753  00405C  EC02  F00D         	call	_printMode	;wreg free
  6754                           
  6755                           ;main.c: 309: if ( 0 != mode ) {
  6756  004060  0101               	movlb	1	; () banked
  6757  004062  512C               	movf	_mode& (0+255),w,b
  6758  004064  E03B               	bz	l14000
  6759                           
  6760                           ; BSR set to: 1
  6761                           ;main.c: 311: uint8_t c;
  6762                           ;main.c: 313: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6763  004066  0E70               	movlw	high STR_4
  6764  004068  0100               	movlb	0	; () banked
  6765  00406A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6766  00406C  0E0B               	movlw	low STR_4
  6767  00406E  6F61               	movwf	?_putsUSART& (0+255),b
  6768  004070  EC8D  F00A         	call	_putsUSART	;wreg free
  6769                           
  6770                           ;main.c: 315: timekeeper = 0;
  6771  004074  0101               	movlb	1	; () banked
  6772  004076  6B18               	clrf	_timekeeper& (0+255),b	;volatile
  6773  004078  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  6774  00407A  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  6775  00407C  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  6776                           
  6777                           ; BSR set to: 1
  6778                           ;main.c: 316: ledFunctionality = 6;
  6779  00407E  0E06               	movlw	6
  6780  004080  6E32               	movwf	_ledFunctionality,c
  6781                           
  6782                           ;main.c: 317: while (timekeeper < 3000) {
  6783  004082  D022               	goto	l13998
  6784  004084                     l439:
  6785                           
  6786                           ; BSR set to: 1
  6787  004084  0004               	clrwdt		;# 
  6788                           
  6789                           ;main.c: 319: (INTCONbits.GIE = 0);
  6790  004086  9EF2               	bcf	intcon,7,c	;volatile
  6791                           
  6792                           ;main.c: 320: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6793  004088  0E01               	movlw	high _serialInputFifo
  6794  00408A  0100               	movlb	0	; () banked
  6795  00408C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6796  00408E  0EDD               	movlw	low _serialInputFifo
  6797  004090  6F60               	movwf	?_fifo_read& (0+255),b
  6798  004092  0E00               	movlw	high main@c
  6799  004094  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6800  004096  0EE6               	movlw	low main@c
  6801  004098  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6802  00409A  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6803  00409C  0E01               	movlw	1
  6804  00409E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6805  0040A0  EC8D  F012         	call	_fifo_read	;wreg free
  6806  0040A4  0560               	decf	?_fifo_read& (0+255),w,b
  6807  0040A6  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6808  0040A8  E10E               	bnz	l440
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;main.c: 321: (INTCONbits.GIE = 1);
  6812  0040AA  8EF2               	bsf	intcon,7,c	;volatile
  6813                           
  6814                           ; BSR set to: 0
  6815                           ;main.c: 322: if ('v' == c) {
  6816  0040AC  51E6               	movf	main@c& (0+255),w,b
  6817  0040AE  0A76               	xorlw	118
  6818  0040B0  E10A               	bnz	l440
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;main.c: 323: mode = 0;
  6822  0040B2  0101               	movlb	1	; () banked
  6823  0040B4  6B2C               	clrf	_mode& (0+255),b
  6824                           
  6825                           ; BSR set to: 1
  6826                           ;main.c: 324: putsUSART((char *) "Temporary verbose mode set\r\n");
  6827  0040B6  0E77               	movlw	high STR_5
  6828  0040B8  0100               	movlb	0	; () banked
  6829  0040BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6830  0040BC  0E8C               	movlw	low STR_5
  6831  0040BE  6F61               	movwf	?_putsUSART& (0+255),b
  6832  0040C0  EC8D  F00A         	call	_putsUSART	;wreg free
  6833                           
  6834                           ;main.c: 325: break;
  6835  0040C4  D00B               	goto	l14000
  6836  0040C6                     l440:
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;main.c: 326: }
  6840                           ;main.c: 327: }
  6841                           ;main.c: 328: (INTCONbits.GIE = 1);
  6842  0040C6  8EF2               	bsf	intcon,7,c	;volatile
  6843  0040C8                     l13998:
  6844  0040C8  0EB8               	movlw	184
  6845  0040CA  0101               	movlb	1	; () banked
  6846  0040CC  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
  6847  0040CE  0E0B               	movlw	11
  6848  0040D0  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6849  0040D2  0E00               	movlw	0
  6850  0040D4  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6851  0040D6  0E00               	movlw	0
  6852  0040D8  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6853  0040DA  E3D4               	bnc	l439
  6854  0040DC                     l14000:
  6855                           
  6856                           ;main.c: 329: }
  6857                           ;main.c: 330: }
  6858                           ;main.c: 332: ledFunctionality = 1;
  6859  0040DC  0E01               	movlw	1
  6860  0040DE  6E32               	movwf	_ledFunctionality,c
  6861                           
  6862                           ;main.c: 337: switch ( Read_b_eep(0x07) ) {
  6863  0040E0  D019               	goto	l14016
  6864  0040E2                     l444:
  6865                           
  6866                           ;main.c: 340: bSilent = 0;
  6867  0040E2  6A30               	clrf	_bSilent,c
  6868                           
  6869                           ;main.c: 341: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  6870  0040E4  0E00               	movlw	0
  6871  0040E6  ECEA  F007         	call	_ECANSetOperationMode
  6872                           
  6873                           ;main.c: 342: break;
  6874  0040EA  D023               	goto	l450
  6875  0040EC                     l14004:
  6876                           
  6877                           ;main.c: 345: bSilent = 1;
  6878  0040EC  0E01               	movlw	1
  6879  0040EE  6E30               	movwf	_bSilent,c
  6880                           
  6881                           ;main.c: 346: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  6882  0040F0  0E00               	movlw	0
  6883  0040F2  ECEA  F007         	call	_ECANSetOperationMode
  6884                           
  6885                           ;main.c: 347: break;
  6886  0040F6  D01D               	goto	l450
  6887  0040F8                     l447:
  6888                           
  6889                           ;main.c: 350: bSilent = 0;
  6890  0040F8  6A30               	clrf	_bSilent,c
  6891                           
  6892                           ;main.c: 351: ECANSetOperationMode( ECAN_OP_MODE_LISTEN );
  6893  0040FA  0E60               	movlw	96
  6894  0040FC  ECEA  F007         	call	_ECANSetOperationMode
  6895                           
  6896                           ;main.c: 352: break;
  6897  004100  D018               	goto	l450
  6898  004102                     l448:
  6899                           
  6900                           ;main.c: 355: bSilent = 0;
  6901  004102  6A30               	clrf	_bSilent,c
  6902                           
  6903                           ;main.c: 356: ECANSetOperationMode( ECAN_OP_MODE_LOOP );
  6904  004104  0E40               	movlw	64
  6905  004106  ECEA  F007         	call	_ECANSetOperationMode
  6906                           
  6907                           ;main.c: 357: break;
  6908  00410A  D013               	goto	l450
  6909  00410C                     l14012:
  6910                           
  6911                           ;main.c: 360: ECANSetOperationMode( 0x20 );
  6912  00410C  0E20               	movlw	32
  6913  00410E  ECEA  F007         	call	_ECANSetOperationMode
  6914                           
  6915                           ;main.c: 361: break;
  6916  004112  D00F               	goto	l450
  6917  004114                     l14016:
  6918  004114  0100               	movlb	0	; () banked
  6919  004116  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6920  004118  0E07               	movlw	7
  6921  00411A  6F60               	movwf	?_Read_b_eep& (0+255),b
  6922  00411C  ECCC  F007         	call	_Read_b_eep	;wreg free
  6923                           
  6924                           ; Switch size 1, requested type "space"
  6925                           ; Number of cases is 4, Range of values is 1 to 4
  6926                           ; switch strategies available:
  6927                           ; Name         Instructions Cycles
  6928                           ; simple_byte           13     7 (average)
  6929                           ;	Chosen strategy is simple_byte
  6930  004120  0A01               	xorlw	1	; case 1
  6931  004122  E0DF               	bz	l444
  6932  004124  0A03               	xorlw	3	; case 2
  6933  004126  E0E2               	bz	l14004
  6934  004128  0A01               	xorlw	1	; case 3
  6935  00412A  E0E6               	bz	l447
  6936  00412C  0A07               	xorlw	7	; case 4
  6937  00412E  E0E9               	bz	l448
  6938  004130  D7ED               	goto	l14012
  6939  004132                     l450:
  6940  004132  0004               	clrwdt		;# 
  6941                           
  6942                           ;main.c: 374: if (COMSTATbits.TXBO) {
  6943  004134  AA74               	btfss	3956,5,c	;volatile
  6944  004136  D002               	goto	l451
  6945                           
  6946                           ;main.c: 376: ledFunctionality = 6;
  6947  004138  0E06               	movlw	6
  6948  00413A  D009               	goto	L1
  6949  00413C                     l451:
  6950                           
  6951                           ;main.c: 378: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6952  00413C  B874               	btfsc	3956,4,c	;volatile
  6953  00413E  D002               	goto	l14022
  6954  004140  A674               	btfss	3956,3,c	;volatile
  6955  004142  D002               	goto	l453
  6956  004144                     l14022:
  6957                           
  6958                           ;main.c: 380: ledFunctionality = 5;
  6959  004144  0E05               	movlw	5
  6960  004146  D003               	goto	L1
  6961  004148                     l453:
  6962                           
  6963                           ;main.c: 384: ledFunctionality = 4;
  6964  004148  0E04               	movlw	4
  6965                           
  6966                           ;main.c: 382: else if (COMSTATbits.EWARN) {
  6967  00414A  A074               	btfss	3956,0,c	;volatile
  6968                           
  6969                           ;main.c: 386: else {
  6970                           ;main.c: 388: ledFunctionality = 1;
  6971                           
  6972                           ;main.c: 385: }
  6973  00414C  0E01               	movlw	1
  6974  00414E                     L1:
  6975  00414E  6E32               	movwf	_ledFunctionality,c
  6976                           
  6977                           ;main.c: 389: }
  6978                           ;main.c: 392: if (COMSTATbits.RXBnOVFL) {
  6979  004150  AC74               	btfss	3956,6,c	;volatile
  6980  004152  D007               	goto	l14034
  6981                           
  6982                           ;main.c: 393: can_receiveOverruns++;
  6983  004154  0101               	movlb	1	; () banked
  6984  004156  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6985  004158  0E00               	movlw	0
  6986  00415A  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6987  00415C  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6988  00415E  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6989                           
  6990                           ; BSR set to: 1
  6991                           ;main.c: 394: COMSTATbits.RXBnOVFL = 0;
  6992  004160  9C74               	bcf	3956,6,c	;volatile
  6993  004162                     l14034:
  6994                           
  6995                           ;main.c: 395: }
  6996                           ;main.c: 399: if ( RCSTAbits.OERR ) {
  6997  004162  A2AB               	btfss	4011,1,c	;volatile
  6998  004164  D002               	goto	l460
  6999                           
  7000                           ;main.c: 400: RCSTAbits.CREN = 0;
  7001  004166  98AB               	bcf	4011,4,c	;volatile
  7002                           
  7003                           ;main.c: 401: RCSTAbits.CREN = 1;
  7004  004168  88AB               	bsf	4011,4,c	;volatile
  7005  00416A                     l460:
  7006                           
  7007                           ;main.c: 402: }
  7008                           ;main.c: 404: if (0 == mode) {
  7009  00416A  0101               	movlb	1	; () banked
  7010  00416C  672C               	tstfsz	_mode& (0+255),b
  7011  00416E  D003               	goto	l14040
  7012                           
  7013                           ; BSR set to: 1
  7014                           ;main.c: 405: doModeVerbose();
  7015  004170  EC0D  F02A         	call	_doModeVerbose	;wreg free
  7016                           
  7017                           ;main.c: 406: }
  7018  004174  D7DE               	goto	l450
  7019  004176                     l14040:
  7020                           
  7021                           ; BSR set to: 1
  7022                           ;main.c: 407: else if (1 == mode) {
  7023  004176  052C               	decf	_mode& (0+255),w,b
  7024  004178  E103               	bnz	l14044
  7025  00417A                     l14042:
  7026                           
  7027                           ; BSR set to: 1
  7028                           ;main.c: 408: doModeVscp();
  7029  00417A  EC20  F01D         	call	_doModeVscp	;wreg free
  7030                           
  7031                           ;main.c: 409: }
  7032  00417E  D7D9               	goto	l450
  7033  004180                     l14044:
  7034                           
  7035                           ; BSR set to: 1
  7036                           ;main.c: 410: else if (2 == mode) {
  7037  004180  512C               	movf	_mode& (0+255),w,b
  7038  004182  0A02               	xorlw	2
  7039  004184  E103               	bnz	l14048
  7040                           
  7041                           ; BSR set to: 1
  7042                           ;main.c: 411: doModeSLCAN();
  7043  004186  EC80  F024         	call	_doModeSLCAN	;wreg free
  7044                           
  7045                           ;main.c: 412: }
  7046  00418A  D7D3               	goto	l450
  7047  00418C                     l14048:
  7048                           
  7049                           ; BSR set to: 1
  7050                           ;main.c: 413: else if (3 == mode) {
  7051  00418C  512C               	movf	_mode& (0+255),w,b
  7052  00418E  0A03               	xorlw	3
  7053  004190  E1F4               	bnz	l14042
  7054                           
  7055                           ; BSR set to: 1
  7056                           ;main.c: 414: doModeVscpNode();
  7057  004192  ECB2  F007         	call	_doModeVscpNode	;wreg free
  7058                           
  7059                           ;main.c: 415: }
  7060  004196  D7CD               	goto	l450
  7061  004198                     __end_of_main:
  7062                           	opt stack 0
  7063                           tblptru	equ	0xFF8
  7064                           tblptrh	equ	0xFF7
  7065                           tblptrl	equ	0xFF6
  7066                           tablat	equ	0xFF5
  7067                           prodh	equ	0xFF4
  7068                           prodl	equ	0xFF3
  7069                           intcon	equ	0xFF2
  7070                           indf0	equ	0xFEF
  7071                           postinc0	equ	0xFEE
  7072                           fsr0h	equ	0xFEA
  7073                           fsr0l	equ	0xFE9
  7074                           wreg	equ	0xFE8
  7075                           indf1	equ	0xFE7
  7076                           postinc1	equ	0xFE6
  7077                           postdec1	equ	0xFE5
  7078                           fsr1h	equ	0xFE2
  7079                           fsr1l	equ	0xFE1
  7080                           indf2	equ	0xFDF
  7081                           postinc2	equ	0xFDE
  7082                           postdec2	equ	0xFDD
  7083                           plusw2	equ	0xFDB
  7084                           fsr2h	equ	0xFDA
  7085                           fsr2l	equ	0xFD9
  7086                           status	equ	0xFD8
  7087                           
  7088 ;; *************** function _doModeVscpNode *****************
  7089 ;; Defined at:
  7090 ;;		line 1720 in file "main.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;		None
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;		None               void
  7097 ;; Registers used:
  7098 ;;		None
  7099 ;; Tracked objects:
  7100 ;;		On entry : F/1
  7101 ;;		On exit  : F/1
  7102 ;;		Unchanged: F/0
  7103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7104 ;;      Params:         0       0       0       0       0       0       0
  7105 ;;      Locals:         0       0       0       0       0       0       0
  7106 ;;      Temps:          0       0       0       0       0       0       0
  7107 ;;      Totals:         0       0       0       0       0       0       0
  7108 ;;Total ram usage:        0 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    3
  7111 ;; This function calls:
  7112 ;;		Nothing
  7113 ;; This function is called by:
  7114 ;;		_main
  7115 ;; This function uses a non-reentrant model
  7116 ;;
  7117                           
  7118                           	psect	text1
  7119  000F64                     __ptext1:
  7120                           	opt stack 0
  7121  000F64                     _doModeVscpNode:
  7122                           	opt stack 26
  7123                           
  7124                           ; BSR set to: 1
  7125                           
  7126                           ; BSR set to: 1
  7127                           ;incstack = 0
  7128                           ;incstack = 0
  7129  000F64  0012               	return	
  7130  000F66                     __end_of_doModeVscpNode:
  7131                           	opt stack 0
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           intcon	equ	0xFF2
  7139                           indf0	equ	0xFEF
  7140                           postinc0	equ	0xFEE
  7141                           fsr0h	equ	0xFEA
  7142                           fsr0l	equ	0xFE9
  7143                           wreg	equ	0xFE8
  7144                           indf1	equ	0xFE7
  7145                           postinc1	equ	0xFE6
  7146                           postdec1	equ	0xFE5
  7147                           fsr1h	equ	0xFE2
  7148                           fsr1l	equ	0xFE1
  7149                           indf2	equ	0xFDF
  7150                           postinc2	equ	0xFDE
  7151                           postdec2	equ	0xFDD
  7152                           plusw2	equ	0xFDB
  7153                           fsr2h	equ	0xFDA
  7154                           fsr2l	equ	0xFD9
  7155                           status	equ	0xFD8
  7156                           
  7157 ;; *************** function _doModeSLCAN *****************
  7158 ;; Defined at:
  7159 ;;		line 1502 in file "main.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;		None
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  id              4   63[BANK0 ] unsigned long 
  7164 ;;  dlc             1   67[BANK0 ] unsigned char 
  7165 ;;  rv              1   69[BANK0 ] enum E15660
  7166 ;;  c               1   68[BANK0 ] unsigned char 
  7167 ;; Return value:  Size  Location     Type
  7168 ;;		None               void
  7169 ;; Registers used:
  7170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7171 ;; Tracked objects:
  7172 ;;		On entry : F/1
  7173 ;;		On exit  : F/0
  7174 ;;		Unchanged: 0/0
  7175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7176 ;;      Params:         0       0       0       0       0       0       0
  7177 ;;      Locals:         0       7       0       0       0       0       0
  7178 ;;      Temps:          0       7       0       0       0       0       0
  7179 ;;      Totals:         0      14       0       0       0       0       0
  7180 ;;Total ram usage:       14 bytes
  7181 ;; Hardware stack levels used:    1
  7182 ;; Hardware stack levels required when called:    7
  7183 ;; This function calls:
  7184 ;;		_putsUSART
  7185 ;;		_fifo_read
  7186 ;;		_ECANSetOperationMode
  7187 ;;		_Busy_eep
  7188 ;;		_Write_b_eep
  7189 ;;		_memset
  7190 ;;		_receiveSendEventSLCAN
  7191 ;;		_strlen
  7192 ;;		_hexStringToBytes
  7193 ;;		_memcpy
  7194 ;;		_sendCANFrame
  7195 ;; This function is called by:
  7196 ;;		_main
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           	psect	text2
  7201  004900                     __ptext2:
  7202                           	opt stack 0
  7203  004900                     _doModeSLCAN:
  7204                           	opt stack 22
  7205                           
  7206                           ; BSR set to: 1
  7207                           ;main.c: 1503: uint8_t c;
  7208                           ;main.c: 1504: BOOL rv = 0;
  7209                           
  7210                           ; BSR set to: 1
  7211                           ;incstack = 0
  7212                           ;incstack = 0
  7213  004900  0100               	movlb	0	; () banked
  7214  004902  6BA5               	clrf	doModeSLCAN@rv& (0+255),b
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;main.c: 1507: receiveSendEventSLCAN();
  7218  004904  ECAB  F01A         	call	_receiveSendEventSLCAN	;wreg free
  7219                           
  7220                           ;main.c: 1510: (INTCONbits.GIE = 0);
  7221  004908  9EF2               	bcf	intcon,7,c	;volatile
  7222                           
  7223                           ;main.c: 1512: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  7224  00490A  0E01               	movlw	high _serialInputFifo
  7225  00490C  0100               	movlb	0	; () banked
  7226  00490E  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  7227  004910  0EDD               	movlw	low _serialInputFifo
  7228  004912  6F60               	movwf	?_fifo_read& (0+255),b
  7229  004914  0E00               	movlw	high doModeSLCAN@c
  7230  004916  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  7231  004918  0EA4               	movlw	low doModeSLCAN@c
  7232  00491A  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  7233  00491C  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  7234  00491E  0E01               	movlw	1
  7235  004920  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  7236  004922  EC8D  F012         	call	_fifo_read	;wreg free
  7237  004926  0560               	decf	?_fifo_read& (0+255),w,b
  7238  004928  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  7239  00492A  E001 D1CE          	bnz	l15254
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;main.c: 1515: (INTCONbits.GIE = 1);
  7243  00492E  8EF2               	bsf	intcon,7,c	;volatile
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;main.c: 1517: if (0x0d != c) {
  7247  004930  51A4               	movf	doModeSLCAN@c& (0+255),w,b
  7248  004932  0A0D               	xorlw	13
  7249  004934  E101 D17D          	bz	l15242
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;main.c: 1518: cmdbuf[ pos ] = c;
  7253  004938  0E2D               	movlw	low _cmdbuf
  7254  00493A  2434               	addwf	_pos,w,c
  7255  00493C  6ED9               	movwf	fsr2l,c
  7256  00493E  6ADA               	clrf	fsr2h,c
  7257  004940  0E01               	movlw	high _cmdbuf
  7258  004942  22DA               	addwfc	fsr2h,f,c
  7259  004944  0100               	movlb	0	; () banked
  7260  004946  C0A4  FFDF         	movff	doModeSLCAN@c,indf2
  7261                           
  7262                           ; BSR set to: 0
  7263                           ;main.c: 1519: pos++;
  7264  00494A  2A34               	incf	_pos,f,c
  7265  00494C  D1BF               	goto	l780
  7266  00494E                     l15114:
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;main.c: 1527: if (1 == strlen(cmdbuf)) {
  7270  00494E  0E01               	movlw	high _cmdbuf
  7271  004950  0100               	movlb	0	; () banked
  7272  004952  6F61               	movwf	(?_strlen+1)& (0+255),b
  7273  004954  0E2D               	movlw	low _cmdbuf
  7274  004956  6F60               	movwf	?_strlen& (0+255),b
  7275  004958  EC6F  F009         	call	_strlen	;wreg free
  7276  00495C  0560               	decf	?_strlen& (0+255),w,b
  7277  00495E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7278  004960  E001 D196          	bnz	l15244
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;main.c: 1528: putsUSART((char *) "JFrankfurt RS-232\r\n");
  7282  004964  0E7A               	movlw	high STR_163
  7283  004966  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7284  004968  0E04               	movlw	low STR_163
  7285  00496A  6F61               	movwf	?_putsUSART& (0+255),b
  7286  00496C  EC8D  F00A         	call	_putsUSART	;wreg free
  7287  004970                     l15118:
  7288                           
  7289                           ;main.c: 1529: rv = 1;
  7290  004970  0E01               	movlw	1
  7291  004972  D114               	goto	L4
  7292  004974                     l15120:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;main.c: 1535: if (1 == strlen(cmdbuf)) {
  7296  004974  0E01               	movlw	high _cmdbuf
  7297  004976  0100               	movlb	0	; () banked
  7298  004978  6F61               	movwf	(?_strlen+1)& (0+255),b
  7299  00497A  0E2D               	movlw	low _cmdbuf
  7300  00497C  6F60               	movwf	?_strlen& (0+255),b
  7301  00497E  EC6F  F009         	call	_strlen	;wreg free
  7302  004982  0560               	decf	?_strlen& (0+255),w,b
  7303  004984  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7304  004986  E001 D183          	bnz	l15244
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;main.c: 1536: putsUSART((char *) "V1011\r\n");
  7308  00498A  0E7B               	movlw	high STR_164
  7309  00498C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7310  00498E  0EB3               	movlw	low STR_164
  7311  004990  6F61               	movwf	?_putsUSART& (0+255),b
  7312  004992  EC8D  F00A         	call	_putsUSART	;wreg free
  7313  004996  D7EC               	goto	l15118
  7314  004998                     l15126:
  7315                           
  7316                           ; BSR set to: 0
  7317                           ;main.c: 1543: if (1 == strlen(cmdbuf)) {
  7318  004998  0E01               	movlw	high _cmdbuf
  7319  00499A  0100               	movlb	0	; () banked
  7320  00499C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7321  00499E  0E2D               	movlw	low _cmdbuf
  7322  0049A0  6F60               	movwf	?_strlen& (0+255),b
  7323  0049A2  EC6F  F009         	call	_strlen	;wreg free
  7324  0049A6  0560               	decf	?_strlen& (0+255),w,b
  7325  0049A8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7326  0049AA  E001 D171          	bnz	l15244
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;main.c: 1544: putsUSART((char *) "N1977\r\n");
  7330  0049AE  0E7B               	movlw	high STR_165
  7331  0049B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7332  0049B2  0EBB               	movlw	low STR_165
  7333  0049B4  6F61               	movwf	?_putsUSART& (0+255),b
  7334  0049B6  EC8D  F00A         	call	_putsUSART	;wreg free
  7335  0049BA  D7DA               	goto	l15118
  7336  0049BC                     l15132:
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;main.c: 1553: bInitiated = 1;
  7340  0049BC  0E01               	movlw	1
  7341  0049BE  6E2D               	movwf	_bInitiated,c
  7342                           
  7343                           ;main.c: 1554: rv = 1;
  7344  0049C0  D0B8               	goto	L3
  7345  0049C2                     l790:
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;main.c: 1559: if (!bOpen) {
  7349  0049C2  662F               	tstfsz	_bOpen,c
  7350  0049C4  D003               	goto	l15136
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;main.c: 1560: bInitiated = 1;
  7354  0049C6  0E01               	movlw	1
  7355  0049C8  6E2D               	movwf	_bInitiated,c
  7356                           
  7357                           ;main.c: 1561: rv = 1;
  7358  0049CA  6FA5               	movwf	doModeSLCAN@rv& (0+255),b
  7359  0049CC                     l15136:
  7360                           
  7361                           ; BSR set to: 0
  7362                           ;main.c: 1566: if (1 == strlen(cmdbuf)) {
  7363  0049CC  0E01               	movlw	high _cmdbuf
  7364  0049CE  0100               	movlb	0	; () banked
  7365  0049D0  6F61               	movwf	(?_strlen+1)& (0+255),b
  7366  0049D2  0E2D               	movlw	low _cmdbuf
  7367  0049D4  6F60               	movwf	?_strlen& (0+255),b
  7368  0049D6  EC6F  F009         	call	_strlen	;wreg free
  7369  0049DA  0560               	decf	?_strlen& (0+255),w,b
  7370  0049DC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7371  0049DE  E001 D157          	bnz	l15244
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;main.c: 1567: if (!bOpen && bInitiated) {
  7375  0049E2  662F               	tstfsz	_bOpen,c
  7376  0049E4  D155               	goto	l15244
  7377                           
  7378                           ; BSR set to: 0
  7379  0049E6  502D               	movf	_bInitiated,w,c
  7380  0049E8  E101 D152          	bz	l15244
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;main.c: 1568: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7384  0049EC  0E00               	movlw	0
  7385  0049EE  ECEA  F007         	call	_ECANSetOperationMode
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;main.c: 1569: bOpen = 1;
  7389  0049F2  0E01               	movlw	1
  7390  0049F4  6E2F               	movwf	_bOpen,c
  7391  0049F6  D7BC               	goto	l15118
  7392  0049F8                     l15148:
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;main.c: 1577: if (1 == strlen(cmdbuf)) {
  7396  0049F8  0E01               	movlw	high _cmdbuf
  7397  0049FA  0100               	movlb	0	; () banked
  7398  0049FC  6F61               	movwf	(?_strlen+1)& (0+255),b
  7399  0049FE  0E2D               	movlw	low _cmdbuf
  7400  004A00  6F60               	movwf	?_strlen& (0+255),b
  7401  004A02  EC6F  F009         	call	_strlen	;wreg free
  7402  004A06  0560               	decf	?_strlen& (0+255),w,b
  7403  004A08  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7404  004A0A  E001 D141          	bnz	l15244
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;main.c: 1578: if (bOpen) {
  7408  004A0E  502F               	movf	_bOpen,w,c
  7409  004A10  E0AF               	bz	l15118
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;main.c: 1579: ECANSetOperationMode(0x20);
  7413  004A12  0E20               	movlw	32
  7414  004A14  ECEA  F007         	call	_ECANSetOperationMode
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;main.c: 1580: bOpen = 0;
  7418  004A18  6A2F               	clrf	_bOpen,c
  7419  004A1A  D7AA               	goto	l15118
  7420  004A1C                     l15158:
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;main.c: 1593: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7424  004A1C  502F               	movf	_bOpen,w,c
  7425  004A1E  E101 D137          	bz	l15244
  7426                           
  7427                           ; BSR set to: 0
  7428  004A22  0E01               	movlw	high _cmdbuf
  7429  004A24  0100               	movlb	0	; () banked
  7430  004A26  6F61               	movwf	(?_strlen+1)& (0+255),b
  7431  004A28  0E2D               	movlw	low _cmdbuf
  7432  004A2A  6F60               	movwf	?_strlen& (0+255),b
  7433  004A2C  EC6F  F009         	call	_strlen	;wreg free
  7434  004A30  0E0A               	movlw	10
  7435  004A32  5D60               	subwf	?_strlen& (0+255),w,b
  7436  004A34  0E00               	movlw	0
  7437  004A36  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7438  004A38  E201 D12A          	bnc	l15244
  7439                           
  7440                           ; BSR set to: 0
  7441                           ;main.c: 1595: uint32_t id;
  7442                           ;main.c: 1596: uint8_t dlc;
  7443                           ;main.c: 1598: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7444  004A3C  0E01               	movlw	high _wrkbuf
  7445  004A3E  0100               	movlb	0	; () banked
  7446  004A40  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7447  004A42  0E7D               	movlw	low _wrkbuf
  7448  004A44  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7449  004A46  0E50               	movlw	80
  7450  004A48  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7451  004A4A  0E01               	movlw	high _cmdbuf
  7452  004A4C  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7453  004A4E  0E2D               	movlw	low _cmdbuf
  7454  004A50  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7455  004A52  EC62  F00E         	call	_hexStringToBytes	;wreg free
  7456  004A56  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7457  004A58  0E05               	movlw	5
  7458  004A5A  5D98               	subwf	??_doModeSLCAN& (0+255),w,b
  7459  004A5C  E201 D118          	bnc	l15244
  7460                           
  7461                           ; BSR set to: 0
  7462                           ;main.c: 1600: }
  7463                           ;main.c: 1602: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7464  004A60  C180  F098         	movff	_wrkbuf+3,??_doModeSLCAN
  7465  004A64  0E08               	movlw	8
  7466  004A66  2798               	addwf	??_doModeSLCAN& (0+255),f,b
  7467  004A68  C17F  F099         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7468  004A6C  0E10               	movlw	16
  7469  004A6E  2799               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7470  004A70  C17E  F09A         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7471  004A74  0E18               	movlw	24
  7472  004A76  279A               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7473  004A78  C17D  F09B         	movff	_wrkbuf,??_doModeSLCAN+3
  7474  004A7C  0100               	movlb	0	; () banked
  7475  004A7E  6B9C               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7476  004A80  6B9D               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7477  004A82  6B9E               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7478  004A84  2B9A               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7479  004A86  D001               	goto	u20310
  7480  004A88                     u20315:
  7481  004A88  D922               	call	PL86	;call to abstracted procedure
  7482  004A8A                     u20310:
  7483  004A8A  2F9A               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7484  004A8C  D7FD               	goto	u20315
  7485  004A8E  2B99               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7486  004A90  D001               	goto	u20320
  7487  004A92                     u20325:
  7488  004A92  D91D               	call	PL86	;call to abstracted procedure
  7489  004A94                     u20320:
  7490  004A94  2F99               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7491  004A96  D7FD               	goto	u20325
  7492  004A98  2B98               	incf	??_doModeSLCAN& (0+255),f,b
  7493  004A9A  D001               	goto	u20330
  7494  004A9C                     u20335:
  7495  004A9C  D918               	call	PL86	;call to abstracted procedure
  7496  004A9E                     u20330:
  7497  004A9E  2F98               	decfsz	??_doModeSLCAN& (0+255),f,b
  7498  004AA0  D7FD               	goto	u20335
  7499  004AA2  C09E  F0A2         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7500  004AA6  C09D  F0A1         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7501  004AAA  C09C  F0A0         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7502  004AAE  C09B  F09F         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;main.c: 1603: dlc = vscpData[4];
  7506  004AB2  C1E9  F0A3         	movff	_vscpData+4,doModeSLCAN@dlc
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;main.c: 1606: if (dlc > 8) break;
  7510  004AB6  0E08               	movlw	8
  7511  004AB8  65A3               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7512  004ABA  D001               	goto	l15174
  7513  004ABC  D0E9               	goto	l15244
  7514  004ABE                     l15174:
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;main.c: 1607: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7518  004ABE  90D8               	bcf	status,0,c
  7519  004AC0  35A3               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7520  004AC2  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7521  004AC4  6B99               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7522  004AC6  3799               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7523  004AC8  0E0A               	movlw	10
  7524  004ACA  2798               	addwf	??_doModeSLCAN& (0+255),f,b
  7525  004ACC  0E00               	movlw	0
  7526  004ACE  2399               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7527  004AD0  0E01               	movlw	high _cmdbuf
  7528  004AD2  0100               	movlb	0	; () banked
  7529  004AD4  6F61               	movwf	(?_strlen+1)& (0+255),b
  7530  004AD6  0E2D               	movlw	low _cmdbuf
  7531  004AD8  6F60               	movwf	?_strlen& (0+255),b
  7532  004ADA  EC6F  F009         	call	_strlen	;wreg free
  7533  004ADE  5198               	movf	??_doModeSLCAN& (0+255),w,b
  7534  004AE0  5D60               	subwf	?_strlen& (0+255),w,b
  7535  004AE2  5199               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7536  004AE4  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7537  004AE6  E201 D0D3          	bnc	l15244
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;main.c: 1609: memcpy(vscpData, vscpData + 5, dlc);
  7541  004AEA  0E01               	movlw	high _vscpData
  7542  004AEC  0100               	movlb	0	; () banked
  7543  004AEE  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7544  004AF0  0EE5               	movlw	low _vscpData
  7545  004AF2  6F60               	movwf	?_memcpy& (0+255),b
  7546  004AF4  0EEA               	movlw	low (_vscpData+5)
  7547  004AF6  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7548  004AF8  0E01               	movlw	high (_vscpData+5)
  7549  004AFA  6F99               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7550  004AFC  C098  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7551  004B00  C099  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7552  004B04  C0A3  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7553  004B08  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7554  004B0A  EC8F  F009         	call	_memcpy	;wreg free
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;main.c: 1611: rv = sendCANFrame(id, dlc, vscpData);
  7558  004B0E  C09F  F091         	movff	doModeSLCAN@id,?_sendCANFrame
  7559  004B12  C0A0  F092         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7560  004B16  C0A1  F093         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7561  004B1A  C0A2  F094         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7562  004B1E  C0A3  F095         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7563  004B22  0E01               	movlw	high _vscpData
  7564  004B24  0100               	movlb	0	; () banked
  7565  004B26  6F97               	movwf	(?_sendCANFrame+6)& (0+255),b
  7566  004B28  0EE5               	movlw	low _vscpData
  7567  004B2A  6F96               	movwf	(?_sendCANFrame+5)& (0+255),b
  7568  004B2C  ECD5  F008         	call	_sendCANFrame	;wreg free
  7569  004B30  D035               	goto	L4
  7570  004B32                     L3:
  7571  004B32  6FA5               	movwf	doModeSLCAN@rv& (0+255),b
  7572  004B34  D0AD               	goto	l15244
  7573  004B36                     l15182:
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;main.c: 1626: if (bOpen && (strlen(cmdbuf) == 1)) {
  7577  004B36  502F               	movf	_bOpen,w,c
  7578  004B38  E101 D0AA          	bz	l15244
  7579                           
  7580                           ; BSR set to: 0
  7581  004B3C  0E01               	movlw	high _cmdbuf
  7582  004B3E  0100               	movlb	0	; () banked
  7583  004B40  6F61               	movwf	(?_strlen+1)& (0+255),b
  7584  004B42  0E2D               	movlw	low _cmdbuf
  7585  004B44  6F60               	movwf	?_strlen& (0+255),b
  7586  004B46  EC6F  F009         	call	_strlen	;wreg free
  7587  004B4A  0560               	decf	?_strlen& (0+255),w,b
  7588  004B4C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7589  004B4E  E001 D09F          	bnz	l15244
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;main.c: 1627: putsUSART((char *) "F00\r\n");
  7593  004B52  0E7C               	movlw	high STR_166
  7594  004B54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7595  004B56  0E5F               	movlw	low STR_166
  7596  004B58  6F61               	movwf	?_putsUSART& (0+255),b
  7597  004B5A  EC8D  F00A         	call	_putsUSART	;wreg free
  7598  004B5E  D098               	goto	l15244
  7599  004B60                     l15192:
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;main.c: 1643: if (2 == strlen(cmdbuf)) {
  7603  004B60  0E01               	movlw	high _cmdbuf
  7604  004B62  0100               	movlb	0	; () banked
  7605  004B64  6F61               	movwf	(?_strlen+1)& (0+255),b
  7606  004B66  0E2D               	movlw	low _cmdbuf
  7607  004B68  6F60               	movwf	?_strlen& (0+255),b
  7608  004B6A  EC6F  F009         	call	_strlen	;wreg free
  7609  004B6E  5160               	movf	?_strlen& (0+255),w,b
  7610  004B70  0A02               	xorlw	2
  7611  004B72  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7612  004B74  E001 D08C          	bnz	l15244
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;main.c: 1644: if (!bOpen) {
  7616  004B78  662F               	tstfsz	_bOpen,c
  7617  004B7A  D08A               	goto	l15244
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;main.c: 1645: if ('0' == cmdbuf[1]) {
  7621  004B7C  0101               	movlb	1	; () banked
  7622  004B7E  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7623  004B80  0A30               	xorlw	48
  7624  004B82  E10E               	bnz	l15204
  7625                           
  7626                           ; BSR set to: 1
  7627                           ;main.c: 1646: nTimeStamp = 0;
  7628  004B84  6A33               	clrf	_nTimeStamp,c
  7629                           
  7630                           ; BSR set to: 1
  7631                           ;main.c: 1648: (Busy_eep(), Write_b_eep(0x05,0));
  7632  004B86  ECB3  F007         	call	_Busy_eep	;wreg free
  7633  004B8A  0100               	movlb	0	; () banked
  7634  004B8C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7635  004B8E  0E05               	movlw	5
  7636  004B90  6F60               	movwf	?_Write_b_eep& (0+255),b
  7637  004B92  0E00               	movlw	0
  7638  004B94  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7639  004B96  EC83  F008         	call	_Write_b_eep	;wreg free
  7640  004B9A  D6EA               	goto	l15118
  7641  004B9C                     L4:
  7642  004B9C  0100               	movlb	0	; () banked
  7643  004B9E  D7C9               	goto	L3
  7644  004BA0                     l15204:
  7645                           
  7646                           ; BSR set to: 1
  7647  004BA0  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7648  004BA2  0A31               	xorlw	49
  7649  004BA4  E10D               	bnz	l815
  7650                           
  7651                           ; BSR set to: 1
  7652                           ;main.c: 1651: nTimeStamp = 1;
  7653  004BA6  0E01               	movlw	1
  7654  004BA8  6E33               	movwf	_nTimeStamp,c
  7655                           
  7656                           ; BSR set to: 1
  7657                           ;main.c: 1653: (Busy_eep(), Write_b_eep(0x05,1));
  7658  004BAA  ECB3  F007         	call	_Busy_eep	;wreg free
  7659  004BAE  0100               	movlb	0	; () banked
  7660  004BB0  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7661  004BB2  0E05               	movlw	5
  7662  004BB4  6F60               	movwf	?_Write_b_eep& (0+255),b
  7663  004BB6  0E01               	movlw	1
  7664  004BB8  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7665  004BBA  EC83  F008         	call	_Write_b_eep	;wreg free
  7666  004BBE  D6D8               	goto	l15118
  7667  004BC0                     l815:
  7668                           
  7669                           ; BSR set to: 1
  7670                           ;main.c: 1657: rv = 0;
  7671  004BC0  0100               	movlb	0	; () banked
  7672  004BC2  6BA5               	clrf	doModeSLCAN@rv& (0+255),b
  7673  004BC4  D065               	goto	l15244
  7674  004BC6                     l15212:
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;main.c: 1665: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7678  004BC6  ECB3  F007         	call	_Busy_eep	;wreg free
  7679  004BCA  0100               	movlb	0	; () banked
  7680  004BCC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7681  004BCE  0E01               	movlw	1
  7682  004BD0  6F60               	movwf	?_Write_b_eep& (0+255),b
  7683  004BD2  0EFF               	movlw	255
  7684  004BD4  6962               	setf	(?_Write_b_eep+2)& (0+255),b
  7685  004BD6  EC83  F008         	call	_Write_b_eep	;wreg free
  7686  004BDA  00FF               	reset		;# 
  7687                           
  7688                           ;main.c: 1667: break;
  7689  004BDC  D059               	goto	l15244
  7690  004BDE                     l15216:
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;main.c: 1671: if ( 'v' == cmdbuf[1] &&
  7694                           ;main.c: 1672: 's' == cmdbuf[2] &&
  7695                           ;main.c: 1673: 'c' == cmdbuf[3] &&
  7696                           ;main.c: 1674: 'p' == cmdbuf[4] ) {
  7697  004BDE  0101               	movlb	1	; () banked
  7698  004BE0  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7699  004BE2  0A76               	xorlw	118
  7700  004BE4  E10C               	bnz	l15226
  7701                           
  7702                           ; BSR set to: 1
  7703  004BE6  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  7704  004BE8  0A73               	xorlw	115
  7705  004BEA  E109               	bnz	l15226
  7706                           
  7707                           ; BSR set to: 1
  7708  004BEC  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  7709  004BEE  0A63               	xorlw	99
  7710  004BF0  E106               	bnz	l15226
  7711                           
  7712                           ; BSR set to: 1
  7713  004BF2  5131               	movf	(_cmdbuf+4)& (0+255),w,b
  7714  004BF4  0A70               	xorlw	112
  7715  004BF6  E103               	bnz	l15226
  7716                           
  7717                           ; BSR set to: 1
  7718                           ;main.c: 1675: mode = 1;
  7719  004BF8  0E01               	movlw	1
  7720  004BFA  6F2C               	movwf	_mode& (0+255),b
  7721                           
  7722                           ;main.c: 1676: }
  7723  004BFC  D049               	goto	l15244
  7724  004BFE                     l15226:
  7725                           
  7726                           ; BSR set to: 1
  7727                           ;main.c: 1677: else if ( 'v' == cmdbuf[1] &&
  7728                           ;main.c: 1678: 'e' == cmdbuf[2] &&
  7729                           ;main.c: 1679: 'r' == cmdbuf[3] &&
  7730                           ;main.c: 1680: 'b' == cmdbuf[4] ) {
  7731  004BFE  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7732  004C00  0A76               	xorlw	118
  7733  004C02  E146               	bnz	l15244
  7734                           
  7735                           ; BSR set to: 1
  7736  004C04  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  7737  004C06  0A65               	xorlw	101
  7738  004C08  E143               	bnz	l15244
  7739                           
  7740                           ; BSR set to: 1
  7741  004C0A  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  7742  004C0C  0A72               	xorlw	114
  7743  004C0E  E140               	bnz	l15244
  7744                           
  7745                           ; BSR set to: 1
  7746  004C10  5131               	movf	(_cmdbuf+4)& (0+255),w,b
  7747  004C12  0A62               	xorlw	98
  7748  004C14  E13D               	bnz	l15244
  7749                           
  7750                           ; BSR set to: 1
  7751                           ;main.c: 1681: mode = 0;
  7752  004C16  6B2C               	clrf	_mode& (0+255),b
  7753  004C18  D03B               	goto	l15244
  7754  004C1A                     l15236:
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;main.c: 1686: {
  7758                           ;main.c: 1688: if (0 == strlen(cmdbuf)) {
  7759  004C1A  0E01               	movlw	high _cmdbuf
  7760  004C1C  0100               	movlb	0	; () banked
  7761  004C1E  6F61               	movwf	(?_strlen+1)& (0+255),b
  7762  004C20  0E2D               	movlw	low _cmdbuf
  7763  004C22  6F60               	movwf	?_strlen& (0+255),b
  7764  004C24  EC6F  F009         	call	_strlen	;wreg free
  7765  004C28  5161               	movf	(?_strlen+1)& (0+255),w,b
  7766  004C2A  1160               	iorwf	?_strlen& (0+255),w,b
  7767  004C2C  E101 D6A0          	bz	l15118
  7768  004C30  D02F               	goto	l15244
  7769  004C32                     l15242:
  7770                           
  7771                           ; BSR set to: 0
  7772  004C32  51A4               	movf	doModeSLCAN@c& (0+255),w,b
  7773                           
  7774                           ; Switch size 1, requested type "space"
  7775                           ; Number of cases is 17, Range of values is 64 to 116
  7776                           ; switch strategies available:
  7777                           ; Name         Instructions Cycles
  7778                           ; simple_byte           52    27 (average)
  7779                           ;	Chosen strategy is simple_byte
  7780  004C34  0A40               	xorlw	64	; case 64
  7781  004C36  E0D3               	bz	l15216
  7782  004C38  0A02               	xorlw	2	; case 66
  7783  004C3A  E0C5               	bz	l15212
  7784  004C3C  0A01               	xorlw	1	; case 67
  7785  004C3E  E101 D6DB          	bz	l15148
  7786  004C42  0A05               	xorlw	5	; case 70
  7787  004C44  E101 D777          	bz	l15182
  7788  004C48  0A0C               	xorlw	12	; case 74
  7789  004C4A  E101 D680          	bz	l15114
  7790  004C4E  0A07               	xorlw	7	; case 77
  7791  004C50  E101 D68E          	bz	l15118
  7792  004C54  0A03               	xorlw	3	; case 78
  7793  004C56  E101 D69F          	bz	l15126
  7794  004C5A  0A01               	xorlw	1	; case 79
  7795  004C5C  E101 D6B6          	bz	l15136
  7796  004C60  0A1D               	xorlw	29	; case 82
  7797  004C62  E016               	bz	l15244
  7798  004C64  0A01               	xorlw	1	; case 83
  7799  004C66  E101 D6A9          	bz	l15132
  7800  004C6A  0A07               	xorlw	7	; case 84
  7801  004C6C  E101 D6D6          	bz	l15158
  7802  004C70  0A02               	xorlw	2	; case 86
  7803  004C72  E101 D67F          	bz	l15120
  7804  004C76  0A0C               	xorlw	12	; case 90
  7805  004C78  E101 D772          	bz	l15192
  7806  004C7C  0A37               	xorlw	55	; case 109
  7807  004C7E  E101 D677          	bz	l15118
  7808  004C82  0A1F               	xorlw	31	; case 114
  7809  004C84  E005               	bz	l15244
  7810  004C86  0A01               	xorlw	1	; case 115
  7811  004C88  E101 D69B          	bz	l790
  7812  004C8C  0A07               	xorlw	7	; case 116
  7813  004C8E  E1C5               	bnz	l15236
  7814  004C90                     l15244:
  7815                           
  7816                           ;main.c: 1696: if (rv) {
  7817  004C90  0100               	movlb	0	; () banked
  7818  004C92  51A5               	movf	doModeSLCAN@rv& (0+255),w,b
  7819  004C94  E007               	bz	l15248
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;main.c: 1698: putsUSART((char *) "\r");
  7823  004C96  0E7C               	movlw	high STR_167
  7824  004C98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7825  004C9A  0EF3               	movlw	low STR_167
  7826  004C9C  6F61               	movwf	?_putsUSART& (0+255),b
  7827  004C9E  EC8D  F00A         	call	_putsUSART	;wreg free
  7828                           
  7829                           ;main.c: 1699: }
  7830  004CA2  D006               	goto	l15250
  7831  004CA4                     l15248:
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;main.c: 1700: else {
  7835                           ;main.c: 1702: putsUSART((char *) "\a");
  7836  004CA4  0E7C               	movlw	high STR_168
  7837  004CA6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7838  004CA8  0EF1               	movlw	low STR_168
  7839  004CAA  6F61               	movwf	?_putsUSART& (0+255),b
  7840  004CAC  EC8D  F00A         	call	_putsUSART	;wreg free
  7841  004CB0                     l15250:
  7842                           
  7843                           ;main.c: 1703: }
  7844                           ;main.c: 1706: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7845  004CB0  0E01               	movlw	high _cmdbuf
  7846  004CB2  0100               	movlb	0	; () banked
  7847  004CB4  6F61               	movwf	(?_memset+1)& (0+255),b
  7848  004CB6  0E2D               	movlw	low _cmdbuf
  7849  004CB8  6F60               	movwf	?_memset& (0+255),b
  7850  004CBA  6B63               	clrf	(?_memset+3)& (0+255),b
  7851  004CBC  6B62               	clrf	(?_memset+2)& (0+255),b
  7852  004CBE  6B65               	clrf	(?_memset+5)& (0+255),b
  7853  004CC0  0E50               	movlw	80
  7854  004CC2  6F64               	movwf	(?_memset+4)& (0+255),b
  7855  004CC4  EC25  F008         	call	_memset	;wreg free
  7856                           
  7857                           ; BSR set to: 0
  7858                           ;main.c: 1707: pos = 0;
  7859  004CC8  6A34               	clrf	_pos,c
  7860  004CCA                     l15254:
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;main.c: 1709: }
  7864                           ;main.c: 1712: (INTCONbits.GIE = 1);
  7865  004CCA  8EF2               	bsf	intcon,7,c	;volatile
  7866  004CCC                     l780:
  7867                           
  7868                           ; BSR set to: 0
  7869  004CCC  0012               	return	
  7870  004CCE                     __end_of_doModeSLCAN:
  7871                           	opt stack 0
  7872  004CCE                     PL86:
  7873                           	opt stack 22
  7874  004CCE  90D8               	bcf	status,0,c
  7875  004CD0  379B               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7876  004CD2  379C               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7877  004CD4  379D               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7878  004CD6  379E               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7879  004CD8  0012               	return	
  7880  004CDA                     __end_ofPL86:
  7881                           	opt stack 0
  7882                           tblptru	equ	0xFF8
  7883                           tblptrh	equ	0xFF7
  7884                           tblptrl	equ	0xFF6
  7885                           tablat	equ	0xFF5
  7886                           prodh	equ	0xFF4
  7887                           prodl	equ	0xFF3
  7888                           intcon	equ	0xFF2
  7889                           indf0	equ	0xFEF
  7890                           postinc0	equ	0xFEE
  7891                           fsr0h	equ	0xFEA
  7892                           fsr0l	equ	0xFE9
  7893                           wreg	equ	0xFE8
  7894                           indf1	equ	0xFE7
  7895                           postinc1	equ	0xFE6
  7896                           postdec1	equ	0xFE5
  7897                           fsr1h	equ	0xFE2
  7898                           fsr1l	equ	0xFE1
  7899                           indf2	equ	0xFDF
  7900                           postinc2	equ	0xFDE
  7901                           postdec2	equ	0xFDD
  7902                           plusw2	equ	0xFDB
  7903                           fsr2h	equ	0xFDA
  7904                           fsr2l	equ	0xFD9
  7905                           status	equ	0xFD8
  7906                           
  7907 ;; *************** function _hexStringToBytes *****************
  7908 ;; Defined at:
  7909 ;;		line 35 in file "hexutils.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7912 ;;		 -> wrkbuf(80), 
  7913 ;;  size            1    6[BANK0 ] unsigned char 
  7914 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7915 ;;		 -> cmdbuf(80), 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  i               2   16[BANK0 ] int 
  7918 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7919 ;;		 -> cmdbuf(80), 
  7920 ;;  len             2   12[BANK0 ] int 
  7921 ;; Return value:  Size  Location     Type
  7922 ;;                  1    wreg      unsigned char 
  7923 ;; Registers used:
  7924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7925 ;; Tracked objects:
  7926 ;;		On entry : F/0
  7927 ;;		On exit  : F/0
  7928 ;;		Unchanged: 0/0
  7929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7930 ;;      Params:         0       5       0       0       0       0       0
  7931 ;;      Locals:         0       6       0       0       0       0       0
  7932 ;;      Temps:          0       3       0       0       0       0       0
  7933 ;;      Totals:         0      14       0       0       0       0       0
  7934 ;;Total ram usage:       14 bytes
  7935 ;; Hardware stack levels used:    1
  7936 ;; Hardware stack levels required when called:    4
  7937 ;; This function calls:
  7938 ;;		_strlen
  7939 ;;		_nibbleFromChar
  7940 ;; This function is called by:
  7941 ;;		_doModeSLCAN
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           	psect	text3
  7946  001CC4                     __ptext3:
  7947                           	opt stack 0
  7948  001CC4                     _hexStringToBytes:
  7949                           	opt stack 24
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;hexutils.c: 36: uint8_t *p;
  7953                           ;hexutils.c: 37: int len, i;
  7954                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;incstack = 0
  7958                           ;incstack = 0
  7959  001CC4  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7960  001CC8  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7961  001CCC  EC6F  F009         	call	_strlen	;wreg free
  7962  001CD0  90D8               	bcf	status,0,c
  7963  001CD2  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7964  001CD4  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7965  001CD6  3160               	rrcf	?_strlen& (0+255),w,b
  7966  001CD8  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;hexutils.c: 40: if (len > size) return 0;
  7970  001CDA  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7971  001CDC  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7972  001CDE  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7973  001CE0  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7974  001CE2  0A80               	xorlw	128
  7975  001CE4  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7976  001CE6  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7977  001CE8  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7978  001CEA  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7979  001CEC  0A80               	xorlw	128
  7980  001CEE  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7981  001CF0  E202               	bc	l1650
  7982                           
  7983                           ; BSR set to: 0
  7984  001CF2  0E00               	movlw	0
  7985  001CF4  D033               	goto	l1651
  7986  001CF6                     l1650:
  7987                           
  7988                           ; BSR set to: 0
  7989                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7990  001CF6  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7991  001CF8  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7992  001CFA  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7993  001CFE  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7994  001D02  D022               	goto	l16846
  7995  001D04                     l16840:
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7999  001D04  5170               	movf	hexStringToBytes@i& (0+255),w,b
  8000  001D06  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  8001  001D08  6ED9               	movwf	fsr2l,c
  8002  001D0A  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8003  001D0C  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  8004  001D0E  6EDA               	movwf	fsr2h,c
  8005  001D10  EE10 F001          	lfsr	1,1
  8006  001D14  516E               	movf	hexStringToBytes@p& (0+255),w,b
  8007  001D16  26E1               	addwf	fsr1l,f,c
  8008  001D18  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  8009  001D1A  22E2               	addwfc	fsr1h,f,c
  8010  001D1C  50E7               	movf	indf1,w,c
  8011  001D1E  EC30  F009         	call	_nibbleFromChar
  8012  001D22  6F69               	movwf	??_hexStringToBytes& (0+255),b
  8013  001D24  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  8014  001D28  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  8015  001D2C  50E7               	movf	indf1,w,c
  8016  001D2E  EC30  F009         	call	_nibbleFromChar
  8017  001D32  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  8018  001D34  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  8019  001D36  0BF0               	andlw	240
  8020  001D38  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  8021  001D3A  6EDF               	movwf	indf2,c
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;hexutils.c: 43: p += 2;
  8025  001D3C  0E02               	movlw	2
  8026  001D3E  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  8027  001D40  0E00               	movlw	0
  8028  001D42  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  8029                           
  8030                           ; BSR set to: 0
  8031  001D44  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  8032  001D46  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  8033  001D48                     l16846:
  8034                           
  8035                           ; BSR set to: 0
  8036  001D48  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8037  001D4A  0A80               	xorlw	128
  8038  001D4C  6F69               	movwf	??_hexStringToBytes& (0+255),b
  8039  001D4E  516C               	movf	hexStringToBytes@len& (0+255),w,b
  8040  001D50  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  8041  001D52  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8042  001D54  0A80               	xorlw	128
  8043  001D56  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  8044  001D58  E3D5               	bnc	l16840
  8045                           
  8046                           ; BSR set to: 0
  8047                           ;hexutils.c: 44: }
  8048                           ;hexutils.c: 46: return i;
  8049  001D5A  5170               	movf	hexStringToBytes@i& (0+255),w,b
  8050  001D5C                     l1651:
  8051                           
  8052                           ; BSR set to: 0
  8053  001D5C  0012               	return	
  8054  001D5E                     __end_of_hexStringToBytes:
  8055                           	opt stack 0
  8056                           tblptru	equ	0xFF8
  8057                           tblptrh	equ	0xFF7
  8058                           tblptrl	equ	0xFF6
  8059                           tablat	equ	0xFF5
  8060                           prodh	equ	0xFF4
  8061                           prodl	equ	0xFF3
  8062                           intcon	equ	0xFF2
  8063                           indf0	equ	0xFEF
  8064                           postinc0	equ	0xFEE
  8065                           fsr0h	equ	0xFEA
  8066                           fsr0l	equ	0xFE9
  8067                           wreg	equ	0xFE8
  8068                           indf1	equ	0xFE7
  8069                           postinc1	equ	0xFE6
  8070                           postdec1	equ	0xFE5
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           postdec2	equ	0xFDD
  8076                           plusw2	equ	0xFDB
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function _nibbleFromChar *****************
  8082 ;; Defined at:
  8083 ;;		line 20 in file "hexutils.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  c               1    wreg     unsigned char 
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;  c               1    0[BANK0 ] unsigned char 
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  1    wreg      unsigned char 
  8090 ;; Registers used:
  8091 ;;		wreg, status,2, status,0
  8092 ;; Tracked objects:
  8093 ;;		On entry : F/0
  8094 ;;		On exit  : F/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8097 ;;      Params:         0       0       0       0       0       0       0
  8098 ;;      Locals:         0       1       0       0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0       0       0
  8100 ;;      Totals:         0       1       0       0       0       0       0
  8101 ;;Total ram usage:        1 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    3
  8104 ;; This function calls:
  8105 ;;		Nothing
  8106 ;; This function is called by:
  8107 ;;		_hexStringToBytes
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           	psect	text4
  8112  001260                     __ptext4:
  8113                           	opt stack 0
  8114  001260                     _nibbleFromChar:
  8115                           	opt stack 24
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;incstack = 0
  8119                           ;incstack = 0
  8120                           ;nibbleFromChar@c stored from wreg
  8121  001260  CFE8 F060          	movff	wreg,nibbleFromChar@c
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  8125  001264  0E2F               	movlw	47
  8126  001266  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8127  001268  D006               	goto	l17046
  8128                           
  8129                           ; BSR set to: 0
  8130  00126A  0E3A               	movlw	58
  8131  00126C  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8132  00126E  D003               	goto	l17046
  8133                           
  8134                           ; BSR set to: 0
  8135  001270  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8136  001272  0FD0               	addlw	208
  8137  001274  D013               	goto	l1645
  8138  001276                     l17046:
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  8142  001276  0E60               	movlw	96
  8143  001278  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8144  00127A  D006               	goto	l17054
  8145                           
  8146                           ; BSR set to: 0
  8147  00127C  0E67               	movlw	103
  8148  00127E  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8149  001280  D003               	goto	l17054
  8150                           
  8151                           ; BSR set to: 0
  8152  001282  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8153  001284  0FA9               	addlw	169
  8154  001286  D00A               	goto	l1645
  8155  001288                     l17054:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  8159  001288  0E40               	movlw	64
  8160  00128A  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8161  00128C  D006               	goto	l17062
  8162                           
  8163                           ; BSR set to: 0
  8164  00128E  0E47               	movlw	71
  8165  001290  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8166  001292  D003               	goto	l17062
  8167                           
  8168                           ; BSR set to: 0
  8169  001294  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8170  001296  0FC9               	addlw	201
  8171  001298  D001               	goto	l1645
  8172  00129A                     l17062:
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;hexutils.c: 24: return 255;
  8176  00129A  0EFF               	movlw	255
  8177  00129C                     l1645:
  8178                           
  8179                           ; BSR set to: 0
  8180  00129C  0012               	return	
  8181  00129E                     __end_of_nibbleFromChar:
  8182                           	opt stack 0
  8183                           tblptru	equ	0xFF8
  8184                           tblptrh	equ	0xFF7
  8185                           tblptrl	equ	0xFF6
  8186                           tablat	equ	0xFF5
  8187                           prodh	equ	0xFF4
  8188                           prodl	equ	0xFF3
  8189                           intcon	equ	0xFF2
  8190                           indf0	equ	0xFEF
  8191                           postinc0	equ	0xFEE
  8192                           fsr0h	equ	0xFEA
  8193                           fsr0l	equ	0xFE9
  8194                           wreg	equ	0xFE8
  8195                           indf1	equ	0xFE7
  8196                           postinc1	equ	0xFE6
  8197                           postdec1	equ	0xFE5
  8198                           fsr1h	equ	0xFE2
  8199                           fsr1l	equ	0xFE1
  8200                           indf2	equ	0xFDF
  8201                           postinc2	equ	0xFDE
  8202                           postdec2	equ	0xFDD
  8203                           plusw2	equ	0xFDB
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8
  8207                           
  8208 ;; *************** function _receiveSendEventSLCAN *****************
  8209 ;; Defined at:
  8210 ;;		line 2309 in file "main.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;		None
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  id              4   38[BANK0 ] unsigned long 
  8215 ;;  i               2   43[BANK0 ] int 
  8216 ;;  dlc             1   42[BANK0 ] unsigned char 
  8217 ;; Return value:  Size  Location     Type
  8218 ;;                  1    wreg      enum E15660
  8219 ;; Registers used:
  8220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8221 ;; Tracked objects:
  8222 ;;		On entry : F/0
  8223 ;;		On exit  : 0/0
  8224 ;;		Unchanged: 0/0
  8225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8226 ;;      Params:         0       0       0       0       0       0       0
  8227 ;;      Locals:         0       7       0       0       0       0       0
  8228 ;;      Temps:          0       3       0       0       0       0       0
  8229 ;;      Totals:         0      10       0       0       0       0       0
  8230 ;;Total ram usage:       10 bytes
  8231 ;; Hardware stack levels used:    1
  8232 ;; Hardware stack levels required when called:    6
  8233 ;; This function calls:
  8234 ;;		_putsUSART
  8235 ;;		_WriteUSART
  8236 ;;		_strlen
  8237 ;;		_getCANFrame
  8238 ;;		_ultoa
  8239 ;;		_itoa
  8240 ;; This function is called by:
  8241 ;;		_doModeSLCAN
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           	psect	text5
  8246  003556                     __ptext5:
  8247                           	opt stack 0
  8248  003556                     _receiveSendEventSLCAN:
  8249                           	opt stack 22
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;main.c: 2310: int i;
  8253                           ;main.c: 2311: uint8_t dlc;
  8254                           ;main.c: 2312: uint32_t id;
  8255                           ;main.c: 2314: if (getCANFrame(&id, &dlc, vscpData)) {
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;incstack = 0
  8259                           ;incstack = 0
  8260  003556  0E00               	movlw	high receiveSendEventSLCAN@dlc
  8261  003558  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  8262  00355A  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  8263  00355C  6F6E               	movwf	?_getCANFrame& (0+255),b
  8264  00355E  0E01               	movlw	high _vscpData
  8265  003560  0100               	movlb	0	; () banked
  8266  003562  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
  8267  003564  0EE5               	movlw	low _vscpData
  8268  003566  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  8269  003568  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  8270  00356A  ECF3  F00F         	call	_getCANFrame
  8271  00356E  0900               	iorlw	0
  8272  003570  E101 D0B0          	bz	l1126
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;main.c: 2317: cntRxFrames++;
  8276  003574  0101               	movlb	1	; () banked
  8277  003576  2B0C               	incf	_cntRxFrames& (0+255),f,b
  8278  003578  0E00               	movlw	0
  8279  00357A  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  8280  00357C  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  8281  00357E  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  8282                           
  8283                           ;main.c: 2318: cntRxBytes += dlc;
  8284  003580  0100               	movlb	0	; () banked
  8285  003582  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8286  003584  0101               	movlb	1	; () banked
  8287  003586  2708               	addwf	_cntRxBytes& (0+255),f,b
  8288  003588  0E00               	movlw	0
  8289  00358A  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  8290  00358C  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  8291  00358E  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8292  003590                     l1099:
  8293  003590  A2AC               	btfss	4012,1,c	;volatile
  8294  003592  D7FE               	goto	l1099
  8295                           
  8296                           ;main.c: 2321: WriteUSART('T');
  8297  003594  0E54               	movlw	84
  8298  003596  ECD5  F007         	call	_WriteUSART
  8299                           
  8300                           ;main.c: 2323: ultoa(wrkbuf, id, 16);
  8301  00359A  0E01               	movlw	high _wrkbuf
  8302  00359C  0100               	movlb	0	; () banked
  8303  00359E  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8304  0035A0  0E7D               	movlw	low _wrkbuf
  8305  0035A2  6F76               	movwf	?_ultoa& (0+255),b
  8306  0035A4  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8307  0035A8  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8308  0035AC  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8309  0035B0  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8310  0035B4  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8311  0035B6  0E10               	movlw	16
  8312  0035B8  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8313  0035BA  EC5F  F013         	call	_ultoa	;wreg free
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;main.c: 2325: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8317  0035BE  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8318  0035C0  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8319  0035C2                     l1104:
  8320                           
  8321                           ; BSR set to: 0
  8322  0035C2  A2AC               	btfss	4012,1,c	;volatile
  8323  0035C4  D7FE               	goto	l1104
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;main.c: 2327: WriteUSART('0');
  8327  0035C6  0E30               	movlw	48
  8328  0035C8  ECD5  F007         	call	_WriteUSART
  8329                           
  8330                           ; BSR set to: 0
  8331  0035CC  D884               	call	PL96	;call to abstracted procedure
  8332  0035CE  B4D8               	btfsc	status,2,c
  8333  0035D0  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8334  0035D2  E3F7               	bnc	l1104
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;main.c: 2328: }
  8338                           ;main.c: 2329: putsUSART(wrkbuf);
  8339  0035D4  0E01               	movlw	high _wrkbuf
  8340  0035D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8341  0035D8  0E7D               	movlw	low _wrkbuf
  8342  0035DA  6F61               	movwf	?_putsUSART& (0+255),b
  8343  0035DC  EC8D  F00A         	call	_putsUSART	;wreg free
  8344                           
  8345                           ;main.c: 2332: itoa(wrkbuf, dlc, 16);
  8346  0035E0  0E01               	movlw	high _wrkbuf
  8347  0035E2  0100               	movlb	0	; () banked
  8348  0035E4  6F71               	movwf	(?_itoa+1)& (0+255),b
  8349  0035E6  0E7D               	movlw	low _wrkbuf
  8350  0035E8  6F70               	movwf	?_itoa& (0+255),b
  8351  0035EA  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8352  0035EE  6B73               	clrf	(?_itoa+3)& (0+255),b
  8353  0035F0  6B75               	clrf	(?_itoa+5)& (0+255),b
  8354  0035F2  0E10               	movlw	16
  8355  0035F4  6F74               	movwf	(?_itoa+4)& (0+255),b
  8356  0035F6  EC9D  F008         	call	_itoa	;wreg free
  8357  0035FA                     l1107:
  8358                           
  8359                           ; BSR set to: 0
  8360  0035FA  A2AC               	btfss	4012,1,c	;volatile
  8361  0035FC  D7FE               	goto	l1107
  8362                           
  8363                           ; BSR set to: 0
  8364                           ;main.c: 2334: WriteUSART(wrkbuf[0]);
  8365  0035FE  0101               	movlb	1	; () banked
  8366  003600  517D               	movf	_wrkbuf& (0+255),w,b
  8367  003602  ECD5  F007         	call	_WriteUSART
  8368                           
  8369                           ;main.c: 2337: for (i = 0; i < dlc; i++) {
  8370  003606  0100               	movlb	0	; () banked
  8371  003608  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8372  00360A  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8373  00360C  D02D               	goto	l16798
  8374  00360E                     l16786:
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 2338: itoa(wrkbuf, vscpData[i], 16);
  8378  00360E  0E01               	movlw	high _wrkbuf
  8379  003610  0100               	movlb	0	; () banked
  8380  003612  6F71               	movwf	(?_itoa+1)& (0+255),b
  8381  003614  0E7D               	movlw	low _wrkbuf
  8382  003616  6F70               	movwf	?_itoa& (0+255),b
  8383  003618  0EE5               	movlw	low _vscpData
  8384  00361A  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8385  00361C  6ED9               	movwf	fsr2l,c
  8386  00361E  0E01               	movlw	high _vscpData
  8387  003620  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8388  003622  6EDA               	movwf	fsr2h,c
  8389  003624  50DF               	movf	indf2,w,c
  8390  003626  6F72               	movwf	(?_itoa+2)& (0+255),b
  8391  003628  6B73               	clrf	(?_itoa+3)& (0+255),b
  8392  00362A  6B75               	clrf	(?_itoa+5)& (0+255),b
  8393  00362C  0E10               	movlw	16
  8394  00362E  6F74               	movwf	(?_itoa+4)& (0+255),b
  8395  003630  EC9D  F008         	call	_itoa	;wreg free
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;main.c: 2340: if (2 != strlen(wrkbuf)) {
  8399  003634  0E01               	movlw	high _wrkbuf
  8400  003636  0100               	movlb	0	; () banked
  8401  003638  6F61               	movwf	(?_strlen+1)& (0+255),b
  8402  00363A  0E7D               	movlw	low _wrkbuf
  8403  00363C  6F60               	movwf	?_strlen& (0+255),b
  8404  00363E  EC6F  F009         	call	_strlen	;wreg free
  8405  003642  5160               	movf	?_strlen& (0+255),w,b
  8406  003644  0A02               	xorlw	2
  8407  003646  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8408  003648  E005               	bz	l16794
  8409  00364A                     l1113:
  8410                           
  8411                           ; BSR set to: 0
  8412  00364A  A2AC               	btfss	4012,1,c	;volatile
  8413  00364C  D7FE               	goto	l1113
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;main.c: 2342: WriteUSART('0');
  8417  00364E  0E30               	movlw	48
  8418  003650  ECD5  F007         	call	_WriteUSART
  8419  003654                     l16794:
  8420                           
  8421                           ;main.c: 2343: }
  8422                           ;main.c: 2345: putsUSART(wrkbuf);
  8423  003654  0E01               	movlw	high _wrkbuf
  8424  003656  0100               	movlb	0	; () banked
  8425  003658  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8426  00365A  0E7D               	movlw	low _wrkbuf
  8427  00365C  6F61               	movwf	?_putsUSART& (0+255),b
  8428  00365E  EC8D  F00A         	call	_putsUSART	;wreg free
  8429  003662  0100               	movlb	0	; () banked
  8430  003664  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8431  003666  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8432  003668                     l16798:
  8433                           
  8434                           ; BSR set to: 0
  8435  003668  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8436  00366A  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8437  00366C  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8438  00366E  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8439  003670  0A80               	xorlw	128
  8440  003672  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8441  003674  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8442  003676  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8443  003678  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8444  00367A  0A80               	xorlw	128
  8445  00367C  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8446  00367E  E3C7               	bnc	l16786
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;main.c: 2346: }
  8450                           ;main.c: 2349: if (nTimeStamp) {
  8451  003680  5033               	movf	_nTimeStamp,w,c
  8452  003682  E023               	bz	l1123
  8453                           
  8454                           ; BSR set to: 0
  8455                           ;main.c: 2350: ultoa(wrkbuf, timer, 16);
  8456  003684  0E01               	movlw	high _wrkbuf
  8457  003686  0100               	movlb	0	; () banked
  8458  003688  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8459  00368A  0E7D               	movlw	low _wrkbuf
  8460  00368C  6F76               	movwf	?_ultoa& (0+255),b
  8461  00368E  C11C  F078         	movff	_timer,?_ultoa+2	;volatile
  8462  003692  C11D  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8463  003696  C11E  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8464  00369A  C11F  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8465  00369E  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8466  0036A0  0E10               	movlw	16
  8467  0036A2  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8468  0036A4  EC5F  F013         	call	_ultoa	;wreg free
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;main.c: 2352: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8472  0036A8  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8473  0036AA  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8474  0036AC                     l1120:
  8475                           
  8476                           ; BSR set to: 0
  8477  0036AC  A2AC               	btfss	4012,1,c	;volatile
  8478  0036AE  D7FE               	goto	l1120
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;main.c: 2354: WriteUSART('0');
  8482  0036B0  0E30               	movlw	48
  8483  0036B2  ECD5  F007         	call	_WriteUSART
  8484                           
  8485                           ; BSR set to: 0
  8486  0036B6  D80F               	call	PL96	;call to abstracted procedure
  8487  0036B8  B4D8               	btfsc	status,2,c
  8488  0036BA  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8489  0036BC  E3F7               	bnc	l1120
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 2355: }
  8493                           ;main.c: 2356: putsUSART(wrkbuf);
  8494  0036BE  0E01               	movlw	high _wrkbuf
  8495  0036C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8496  0036C2  0E7D               	movlw	low _wrkbuf
  8497  0036C4  6F61               	movwf	?_putsUSART& (0+255),b
  8498  0036C6  EC8D  F00A         	call	_putsUSART	;wreg free
  8499  0036CA                     l1123:
  8500  0036CA  A2AC               	btfss	4012,1,c	;volatile
  8501  0036CC  D7FE               	goto	l1123
  8502                           
  8503                           ;main.c: 2360: WriteUSART(0x0d);
  8504  0036CE  0E0D               	movlw	13
  8505  0036D0  ECD5  F007         	call	_WriteUSART
  8506  0036D4                     l1126:
  8507  0036D4  0012               	return	
  8508  0036D6                     __end_of_receiveSendEventSLCAN:
  8509                           	opt stack 0
  8510  0036D6                     PL96:
  8511                           	opt stack 22
  8512  0036D6  0100               	movlb	0	; () banked
  8513  0036D8  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8514  0036DA  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8515  0036DC  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8516  0036DE  0A80               	xorlw	128
  8517  0036E0  0F80               	addlw	-128
  8518  0036E2  0CB8               	retlw	184
  8519  0036E4                     __end_ofPL96:
  8520                           	opt stack 0
  8521                           tblptru	equ	0xFF8
  8522                           tblptrh	equ	0xFF7
  8523                           tblptrl	equ	0xFF6
  8524                           tablat	equ	0xFF5
  8525                           prodh	equ	0xFF4
  8526                           prodl	equ	0xFF3
  8527                           intcon	equ	0xFF2
  8528                           indf0	equ	0xFEF
  8529                           postinc0	equ	0xFEE
  8530                           fsr0h	equ	0xFEA
  8531                           fsr0l	equ	0xFE9
  8532                           wreg	equ	0xFE8
  8533                           indf1	equ	0xFE7
  8534                           postinc1	equ	0xFE6
  8535                           postdec1	equ	0xFE5
  8536                           fsr1h	equ	0xFE2
  8537                           fsr1l	equ	0xFE1
  8538                           indf2	equ	0xFDF
  8539                           postinc2	equ	0xFDE
  8540                           postdec2	equ	0xFDD
  8541                           plusw2	equ	0xFDB
  8542                           fsr2h	equ	0xFDA
  8543                           fsr2l	equ	0xFD9
  8544                           status	equ	0xFD8
  8545                           
  8546 ;; *************** function _ultoa *****************
  8547 ;; Defined at:
  8548 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8549 ;; Parameters:    Size  Location     Type
  8550 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8551 ;;		 -> wrkbuf(80), 
  8552 ;;  val             4   24[BANK0 ] unsigned long 
  8553 ;;  base            2   28[BANK0 ] int 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;  v               4   30[BANK0 ] unsigned long 
  8556 ;;  c               1   34[BANK0 ] unsigned char 
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  2   22[BANK0 ] PTR unsigned char 
  8559 ;; Registers used:
  8560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : F/0
  8563 ;;		On exit  : F/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8566 ;;      Params:         0       8       0       0       0       0       0
  8567 ;;      Locals:         0       5       0       0       0       0       0
  8568 ;;      Temps:          0       0       0       0       0       0       0
  8569 ;;      Totals:         0      13       0       0       0       0       0
  8570 ;;Total ram usage:       13 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; Hardware stack levels required when called:    4
  8573 ;; This function calls:
  8574 ;;		___lldiv
  8575 ;;		___llmod
  8576 ;; This function is called by:
  8577 ;;		_receiveSendEventSLCAN
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text6
  8582  0026BE                     __ptext6:
  8583                           	opt stack 0
  8584  0026BE                     _ultoa:
  8585                           	opt stack 23
  8586                           
  8587                           ; BSR set to: 0
  8588                           
  8589                           ;incstack = 0
  8590                           ;incstack = 0
  8591  0026BE  C078  F07E         	movff	ultoa@val,ultoa@v
  8592  0026C2  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8593  0026C6  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8594  0026CA  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8595  0026CE                     l16960:
  8596                           
  8597                           ; BSR set to: 0
  8598  0026CE  C07E  F060         	movff	ultoa@v,?___lldiv
  8599  0026D2  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8600  0026D6  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8601  0026DA  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8602  0026DE  D858               	call	PL76	;call to abstracted procedure
  8603  0026E0  EC4B  F00C         	call	___lldiv	;wreg free
  8604  0026E4  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8605  0026E8  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8606  0026EC  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8607  0026F0  C060  F07E         	movff	?___lldiv,ultoa@v
  8608                           
  8609                           ; BSR set to: 0
  8610  0026F4  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8611  0026F6  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8612                           
  8613                           ; BSR set to: 0
  8614  0026F8  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8615  0026FA  117E               	iorwf	ultoa@v& (0+255),w,b
  8616  0026FC  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8617  0026FE  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8618  002700  E1E6               	bnz	l16960
  8619                           
  8620                           ; BSR set to: 0
  8621  002702  C076  FFD9         	movff	ultoa@buf,fsr2l
  8622  002706  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8623  00270A  6ADF               	clrf	indf2,c
  8624                           
  8625                           ; BSR set to: 0
  8626  00270C  0776               	decf	ultoa@buf& (0+255),f,b
  8627  00270E  A0D8               	btfss	status,0,c
  8628  002710  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8629  002712                     l16970:
  8630                           
  8631                           ; BSR set to: 0
  8632  002712  C078  F06D         	movff	ultoa@val,?___llmod
  8633  002716  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8634  00271A  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8635  00271E  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8636  002722  C07C  F071         	movff	ultoa@base,?___llmod+4
  8637  002726  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8638  00272A  0E00               	movlw	0
  8639  00272C  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8640  00272E  0EFF               	movlw	-1
  8641  002730  6F73               	movwf	(?___llmod+6)& (0+255),b
  8642  002732  6F74               	movwf	(?___llmod+7)& (0+255),b
  8643  002734  EC43  F00B         	call	___llmod	;wreg free
  8644  002738  516D               	movf	?___llmod& (0+255),w,b
  8645  00273A  6F82               	movwf	ultoa@c& (0+255),b
  8646                           
  8647                           ; BSR set to: 0
  8648  00273C  C078  F060         	movff	ultoa@val,?___lldiv
  8649  002740  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8650  002744  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8651  002748  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8652  00274C  D821               	call	PL76	;call to abstracted procedure
  8653  00274E  EC4B  F00C         	call	___lldiv	;wreg free
  8654  002752  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8655  002756  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8656  00275A  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8657  00275E  C060  F078         	movff	?___lldiv,ultoa@val
  8658                           
  8659                           ; BSR set to: 0
  8660  002762  0E09               	movlw	9
  8661  002764  6582               	cpfsgt	ultoa@c& (0+255),b
  8662  002766  D002               	goto	l2495
  8663                           
  8664                           ; BSR set to: 0
  8665  002768  0E07               	movlw	7
  8666  00276A  2782               	addwf	ultoa@c& (0+255),f,b
  8667  00276C                     l2495:
  8668                           
  8669                           ; BSR set to: 0
  8670  00276C  0E30               	movlw	48
  8671  00276E  2782               	addwf	ultoa@c& (0+255),f,b
  8672                           
  8673                           ; BSR set to: 0
  8674  002770  C076  FFD9         	movff	ultoa@buf,fsr2l
  8675  002774  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8676  002778  C082  FFDF         	movff	ultoa@c,indf2
  8677                           
  8678                           ; BSR set to: 0
  8679  00277C  0776               	decf	ultoa@buf& (0+255),f,b
  8680  00277E  A0D8               	btfss	status,0,c
  8681  002780  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8682                           
  8683                           ; BSR set to: 0
  8684  002782  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8685  002784  1178               	iorwf	ultoa@val& (0+255),w,b
  8686  002786  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8687  002788  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8688  00278A  B4D8               	btfsc	status,2,c
  8689                           
  8690                           ; BSR set to: 0
  8691  00278C  0012               	return	
  8692  00278E  D7C1               	goto	l16970
  8693  002790                     __end_of_ultoa:
  8694                           	opt stack 0
  8695  002790                     PL76:
  8696                           	opt stack 23
  8697  002790  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8698  002794  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8699  002798  0E00               	movlw	0
  8700  00279A  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8701  00279C  0EFF               	movlw	-1
  8702  00279E  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8703  0027A0  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8704  0027A2  0012               	return	
  8705  0027A4                     __end_ofPL76:
  8706                           	opt stack 0
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           prodh	equ	0xFF4
  8712                           prodl	equ	0xFF3
  8713                           intcon	equ	0xFF2
  8714                           indf0	equ	0xFEF
  8715                           postinc0	equ	0xFEE
  8716                           fsr0h	equ	0xFEA
  8717                           fsr0l	equ	0xFE9
  8718                           wreg	equ	0xFE8
  8719                           indf1	equ	0xFE7
  8720                           postinc1	equ	0xFE6
  8721                           postdec1	equ	0xFE5
  8722                           fsr1h	equ	0xFE2
  8723                           fsr1l	equ	0xFE1
  8724                           indf2	equ	0xFDF
  8725                           postinc2	equ	0xFDE
  8726                           postdec2	equ	0xFDD
  8727                           plusw2	equ	0xFDB
  8728                           fsr2h	equ	0xFDA
  8729                           fsr2l	equ	0xFD9
  8730                           status	equ	0xFD8
  8731                           
  8732 ;; *************** function _doModeVscp *****************
  8733 ;; Defined at:
  8734 ;;		line 1273 in file "main.c"
  8735 ;; Parameters:    Size  Location     Type
  8736 ;;		None
  8737 ;; Auto vars:     Size  Location     Type
  8738 ;;  c               1   89[BANK0 ] unsigned char 
  8739 ;; Return value:  Size  Location     Type
  8740 ;;		None               void
  8741 ;; Registers used:
  8742 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8743 ;; Tracked objects:
  8744 ;;		On entry : 0/1
  8745 ;;		On exit  : 0/0
  8746 ;;		Unchanged: 0/0
  8747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8748 ;;      Params:         0       0       0       0       0       0       0
  8749 ;;      Locals:         0       1       0       0       0       0       0
  8750 ;;      Temps:          0       0       0       0       0       0       0
  8751 ;;      Totals:         0       1       0       0       0       0       0
  8752 ;;Total ram usage:        1 bytes
  8753 ;; Hardware stack levels used:    1
  8754 ;; Hardware stack levels required when called:    7
  8755 ;; This function calls:
  8756 ;;		_fifo_read
  8757 ;;		_ECANSetOperationMode
  8758 ;;		_receiveSendMultiEventCANAL
  8759 ;;		_receiveSendEventCANAL
  8760 ;;		_calcCRC
  8761 ;;		_sendVSCPDriverNack
  8762 ;;		_sendVSCPDriverAck
  8763 ;;		_receiveVSCPModeCanalMsg
  8764 ;;		_receiveVSCPModeMultiCanalMsg
  8765 ;;		_sendVSCPModeCapabilities
  8766 ;;		_sendVSCPDriverCommandReply
  8767 ;;		_sendVSCPDriverErrorFrame
  8768 ;; This function is called by:
  8769 ;;		_main
  8770 ;; This function uses a non-reentrant model
  8771 ;;
  8772                           
  8773                           	psect	text7
  8774  003A40                     __ptext7:
  8775                           	opt stack 0
  8776  003A40                     _doModeVscp:
  8777                           	opt stack 22
  8778                           
  8779                           ;main.c: 1274: uint8_t c;
  8780                           ;main.c: 1277: if ( caps.maxCanalFrames > 1 ) {
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;incstack = 0
  8784                           ;incstack = 0
  8785  003A40  0101               	movlb	1	; () banked
  8786  003A42  EE21  F0F2         	lfsr	2,_caps+1
  8787  003A46  0E01               	movlw	1
  8788  003A48  64DF               	cpfsgt	indf2,c
  8789  003A4A  D003               	goto	l14944
  8790                           
  8791                           ; BSR set to: 1
  8792                           ;main.c: 1280: receiveSendMultiEventCANAL();
  8793  003A4C  ECE7  F019         	call	_receiveSendMultiEventCANAL	;wreg free
  8794                           
  8795                           ;main.c: 1281: }
  8796  003A50  D002               	goto	l14946
  8797  003A52                     l14944:
  8798                           
  8799                           ; BSR set to: 1
  8800                           ;main.c: 1282: else {
  8801                           ;main.c: 1285: receiveSendEventCANAL();
  8802  003A52  EC8E  F018         	call	_receiveSendEventCANAL	;wreg free
  8803  003A56                     l14946:
  8804                           
  8805                           ;main.c: 1286: }
  8806                           ;main.c: 1289: (INTCONbits.GIE = 0);
  8807  003A56  9EF2               	bcf	intcon,7,c	;volatile
  8808                           
  8809                           ;main.c: 1291: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8810  003A58  0E01               	movlw	high _serialInputFifo
  8811  003A5A  0100               	movlb	0	; () banked
  8812  003A5C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8813  003A5E  0EDD               	movlw	low _serialInputFifo
  8814  003A60  6F60               	movwf	?_fifo_read& (0+255),b
  8815  003A62  0E00               	movlw	high doModeVscp@c
  8816  003A64  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8817  003A66  0EB9               	movlw	low doModeVscp@c
  8818  003A68  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8819  003A6A  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8820  003A6C  0E01               	movlw	1
  8821  003A6E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8822  003A70  EC8D  F012         	call	_fifo_read	;wreg free
  8823  003A74  0560               	decf	?_fifo_read& (0+255),w,b
  8824  003A76  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8825  003A78  E001 D0BF          	bnz	l15094
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;main.c: 1294: (INTCONbits.GIE = 1);
  8829  003A7C  8EF2               	bsf	intcon,7,c	;volatile
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;main.c: 1297: if ( pos >= sizeof( cmdbuf ) ) {
  8833  003A7E  0E4F               	movlw	79
  8834  003A80  6434               	cpfsgt	_pos,c
  8835  003A82  D003               	goto	l724
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;main.c: 1299: pos = 0;
  8839  003A84  6A34               	clrf	_pos,c
  8840                           
  8841                           ;main.c: 1300: bDLE = 0;
  8842  003A86  6A2B               	clrf	_bDLE,c
  8843                           
  8844                           ;main.c: 1301: stateVscpDriver = 0;
  8845  003A88  6A37               	clrf	_stateVscpDriver,c
  8846  003A8A                     l724:
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;main.c: 1302: }
  8850                           ;main.c: 1304: if ( 0 == stateVscpDriver ) {
  8851  003A8A  6637               	tstfsz	_stateVscpDriver,c
  8852  003A8C  D00D               	goto	l14968
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;main.c: 1306: if ( bDLE ) {
  8856  003A8E  502B               	movf	_bDLE,w,c
  8857  003A90  E008               	bz	l14964
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;main.c: 1308: bDLE = 0;
  8861  003A92  6A2B               	clrf	_bDLE,c
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;main.c: 1311: if ( 0x02 == c ) {
  8865  003A94  51B9               	movf	doModeVscp@c& (0+255),w,b
  8866  003A96  0A02               	xorlw	2
  8867  003A98  E12A               	bnz	l15004
  8868                           
  8869                           ; BSR set to: 0
  8870                           ;main.c: 1312: stateVscpDriver = 1;
  8871  003A9A  0E01               	movlw	1
  8872  003A9C  6E37               	movwf	_stateVscpDriver,c
  8873                           
  8874                           ; BSR set to: 0
  8875                           ;main.c: 1313: pos = 0;
  8876  003A9E  6A34               	clrf	_pos,c
  8877  003AA0  D026               	goto	l15004
  8878  003AA2                     l14964:
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;main.c: 1316: else {
  8882                           ;main.c: 1317: bDLE = 1;
  8883  003AA2  0E01               	movlw	1
  8884  003AA4  6E2B               	movwf	_bDLE,c
  8885  003AA6  D0AA               	goto	l729
  8886  003AA8                     l14968:
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;main.c: 1321: else if ( 1 == stateVscpDriver ) {
  8890  003AA8  0437               	decf	_stateVscpDriver,w,c
  8891  003AAA  E121               	bnz	l15004
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;main.c: 1324: if ( bDLE ) {
  8895  003AAC  502B               	movf	_bDLE,w,c
  8896  003AAE  E01B               	bz	l14988
  8897                           
  8898                           ; BSR set to: 0
  8899                           ;main.c: 1327: bDLE = 0;
  8900  003AB0  6A2B               	clrf	_bDLE,c
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;main.c: 1330: if ( 0x03 == c ) {
  8904  003AB2  51B9               	movf	doModeVscp@c& (0+255),w,b
  8905  003AB4  0A03               	xorlw	3
  8906  003AB6  E103               	bnz	l14978
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;main.c: 1331: stateVscpDriver = 2;
  8910  003AB8  0E02               	movlw	2
  8911  003ABA  6E37               	movwf	_stateVscpDriver,c
  8912                           
  8913                           ;main.c: 1332: }
  8914  003ABC  D018               	goto	l15004
  8915  003ABE                     l14978:
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;main.c: 1334: else if (0x10 == c) {
  8919  003ABE  51B9               	movf	doModeVscp@c& (0+255),w,b
  8920  003AC0  0A10               	xorlw	16
  8921  003AC2  E115               	bnz	l15004
  8922  003AC4                     u19940:
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;main.c: 1336: cmdbuf[ pos++ ] = c;
  8926  003AC4  0E2D               	movlw	low _cmdbuf
  8927  003AC6  2434               	addwf	_pos,w,c
  8928  003AC8  6ED9               	movwf	fsr2l,c
  8929  003ACA  6ADA               	clrf	fsr2h,c
  8930  003ACC  0E01               	movlw	high _cmdbuf
  8931  003ACE  22DA               	addwfc	fsr2h,f,c
  8932  003AD0  0100               	movlb	0	; () banked
  8933  003AD2  C0B9  FFDF         	movff	doModeVscp@c,indf2
  8934                           
  8935                           ; BSR set to: 0
  8936  003AD6  2A34               	incf	_pos,f,c
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;main.c: 1337: if ( pos >= sizeof( cmdbuf ) ) {
  8940  003AD8  0E4F               	movlw	79
  8941  003ADA  6434               	cpfsgt	_pos,c
  8942  003ADC  D08F               	goto	l729
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;main.c: 1340: bDLE = 0;
  8946  003ADE  6A2B               	clrf	_bDLE,c
  8947                           
  8948                           ;main.c: 1341: pos = 0;
  8949  003AE0  6A34               	clrf	_pos,c
  8950                           
  8951                           ;main.c: 1342: stateVscpDriver = 0;
  8952  003AE2  6A37               	clrf	_stateVscpDriver,c
  8953  003AE4  D08B               	goto	l729
  8954  003AE6                     l14988:
  8955                           
  8956                           ; BSR set to: 0
  8957                           ;main.c: 1347: else {
  8958                           ;main.c: 1348: if (0x10 == c) {
  8959  003AE6  51B9               	movf	doModeVscp@c& (0+255),w,b
  8960  003AE8  0A10               	xorlw	16
  8961  003AEA  E0DB               	bz	l14964
  8962  003AEC  D7EB               	goto	u19940
  8963  003AEE                     l15004:
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;main.c: 1364: }
  8967                           ;main.c: 1365: }
  8968                           ;main.c: 1366: }
  8969                           ;main.c: 1368: if (2 == stateVscpDriver) {
  8970  003AEE  5037               	movf	_stateVscpDriver,w,c
  8971  003AF0  0A02               	xorlw	2
  8972  003AF2  E001 D082          	bnz	l15094
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;main.c: 1371: stateVscpDriver = 0;
  8976  003AF6  6A37               	clrf	_stateVscpDriver,c
  8977                           
  8978                           ; BSR set to: 0
  8979                           ;main.c: 1383: if (calcCRC(cmdbuf, pos)) {
  8980  003AF8  0E01               	movlw	high _cmdbuf
  8981  003AFA  0100               	movlb	0	; () banked
  8982  003AFC  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8983  003AFE  0E2D               	movlw	low _cmdbuf
  8984  003B00  6F6C               	movwf	?_calcCRC& (0+255),b
  8985  003B02  C034  F06E         	movff	_pos,?_calcCRC+2
  8986  003B06  EC53  F008         	call	_calcCRC	;wreg free
  8987  003B0A  0900               	iorlw	0
  8988  003B0C  E003               	bz	l742
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;main.c: 1384: sendVSCPDriverNack();
  8992  003B0E  ECFF  F00E         	call	_sendVSCPDriverNack	;wreg free
  8993  003B12  D074               	goto	l729
  8994  003B14                     l742:
  8995                           
  8996                           ; BSR set to: 0
  8997                           ;main.c: 1386: }
  8998                           ;main.c: 1389: if (0 ==
  8999                           ;main.c: 1390: cmdbuf[ 0 ]) {
  9000  003B14  0101               	movlb	1	; () banked
  9001  003B16  672D               	tstfsz	_cmdbuf& (0+255),b
  9002  003B18  D003               	goto	l15016
  9003  003B1A                     l15014:
  9004                           
  9005                           ;main.c: 1391: sendVSCPDriverAck();
  9006  003B1A  EC4F  F00F         	call	_sendVSCPDriverAck	;wreg free
  9007                           
  9008                           ;main.c: 1392: }
  9009  003B1E  D06B               	goto	l15090
  9010  003B20                     l15016:
  9011                           
  9012                           ; BSR set to: 1
  9013                           ;main.c: 1394: else if (1 ==
  9014                           ;main.c: 1395: cmdbuf[ 0 ]) {
  9015  003B20  052D               	decf	_cmdbuf& (0+255),w,b
  9016  003B22  E103               	bnz	l15020
  9017  003B24                     l15018:
  9018                           
  9019                           ;main.c: 1396: sendVSCPDriverNack();
  9020  003B24  ECFF  F00E         	call	_sendVSCPDriverNack	;wreg free
  9021                           
  9022                           ;main.c: 1397: }
  9023  003B28  D066               	goto	l15090
  9024  003B2A                     l15020:
  9025                           
  9026                           ; BSR set to: 1
  9027                           ;main.c: 1399: else if (2 ==
  9028                           ;main.c: 1400: cmdbuf[ 0 ]) {
  9029  003B2A  512D               	movf	_cmdbuf& (0+255),w,b
  9030  003B2C  0A02               	xorlw	2
  9031  003B2E  E105               	bnz	l15028
  9032                           
  9033                           ; BSR set to: 1
  9034                           ;main.c: 1401: if ( receiveVSCPModeCanalMsg() ) {
  9035  003B30  ECD2  F013         	call	_receiveVSCPModeCanalMsg	;wreg free
  9036  003B34  0900               	iorlw	0
  9037  003B36  E1F1               	bnz	l15014
  9038  003B38  D7F5               	goto	l15018
  9039  003B3A                     l15028:
  9040                           
  9041                           ; BSR set to: 1
  9042                           ;main.c: 1409: else if (6 ==
  9043                           ;main.c: 1410: cmdbuf[ 0 ]) {
  9044  003B3A  512D               	movf	_cmdbuf& (0+255),w,b
  9045  003B3C  0A06               	xorlw	6
  9046  003B3E  E103               	bnz	l15036
  9047                           
  9048                           ; BSR set to: 1
  9049                           ;main.c: 1411: if (receiveVSCPModeMultiCanalMsg()) {
  9050  003B40  ECB1  F007         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  9051  003B44  D7F7               	goto	L5
  9052  003B46                     l15036:
  9053                           
  9054                           ; BSR set to: 1
  9055                           ;main.c: 1419: else if (6 ==
  9056                           ;main.c: 1420: cmdbuf[ 0 ]) {
  9057  003B46  512D               	movf	_cmdbuf& (0+255),w,b
  9058  003B48  0A06               	xorlw	6
  9059  003B4A  E0EC               	bz	l15018
  9060                           
  9061                           ; BSR set to: 1
  9062                           ;main.c: 1424: else if (3 ==
  9063                           ;main.c: 1425: cmdbuf[ 0 ]) {
  9064  003B4C  512D               	movf	_cmdbuf& (0+255),w,b
  9065  003B4E  0A03               	xorlw	3
  9066  003B50  E0E9               	bz	l15018
  9067                           
  9068                           ; BSR set to: 1
  9069                           ;main.c: 1429: else if (4 ==
  9070                           ;main.c: 1430: cmdbuf[ 0 ]) {
  9071  003B52  512D               	movf	_cmdbuf& (0+255),w,b
  9072  003B54  0A04               	xorlw	4
  9073  003B56  E0E6               	bz	l15018
  9074                           
  9075                           ; BSR set to: 1
  9076                           ;main.c: 1434: else if (8 ==
  9077                           ;main.c: 1435: cmdbuf[ 0 ]) {
  9078  003B58  512D               	movf	_cmdbuf& (0+255),w,b
  9079  003B5A  0A08               	xorlw	8
  9080  003B5C  E107               	bnz	l15054
  9081                           
  9082                           ; BSR set to: 1
  9083                           ;main.c: 1436: caps.maxVscpFrames = cmdbuf[ 5 ];
  9084  003B5E  C132  F1F1         	movff	_cmdbuf+5,_caps
  9085                           
  9086                           ;main.c: 1437: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  9087  003B62  C133  F1F2         	movff	_cmdbuf+6,_caps+1
  9088                           
  9089                           ; BSR set to: 1
  9090                           ;main.c: 1438: sendVSCPModeCapabilities();
  9091  003B66  ECA2  F010         	call	_sendVSCPModeCapabilities	;wreg free
  9092                           
  9093                           ;main.c: 1439: }
  9094  003B6A  D045               	goto	l15090
  9095  003B6C                     l15054:
  9096                           
  9097                           ; BSR set to: 1
  9098                           ;main.c: 1441: else if (255 ==
  9099                           ;main.c: 1442: cmdbuf[ 0 ]) {
  9100  003B6C  292D               	incf	_cmdbuf& (0+255),w,b
  9101  003B6E  E140               	bnz	l15088
  9102                           
  9103                           ; BSR set to: 1
  9104                           ;main.c: 1444: if (cmdbuf[ 5 ] ==
  9105                           ;main.c: 1445: 0) {
  9106  003B70  6732               	tstfsz	(_cmdbuf+5)& (0+255),b
  9107  003B72  D006               	goto	l15060
  9108                           
  9109                           ; BSR set to: 1
  9110                           ;main.c: 1446: sendVSCPDriverCommandReply(0, 0);
  9111  003B74  0E00               	movlw	0
  9112  003B76  0100               	movlb	0	; () banked
  9113  003B78  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9114  003B7A  ECF6  F012         	call	_sendVSCPDriverCommandReply
  9115                           
  9116                           ;main.c: 1447: }
  9117  003B7E  D03B               	goto	l15090
  9118  003B80                     l15060:
  9119                           
  9120                           ; BSR set to: 1
  9121                           ;main.c: 1449: else if (cmdbuf[ 5 ] ==
  9122                           ;main.c: 1450: 1) {
  9123  003B80  0532               	decf	(_cmdbuf+5)& (0+255),w,b
  9124  003B82  E109               	bnz	l15066
  9125                           
  9126                           ; BSR set to: 1
  9127                           ;main.c: 1451: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  9128  003B84  0E00               	movlw	0
  9129  003B86  ECEA  F007         	call	_ECANSetOperationMode
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;main.c: 1452: sendVSCPDriverCommandReply(0, 1);
  9133  003B8A  0E01               	movlw	1
  9134  003B8C  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9135  003B8E  0E00               	movlw	0
  9136  003B90  ECF6  F012         	call	_sendVSCPDriverCommandReply
  9137                           
  9138                           ;main.c: 1453: }
  9139  003B94  D030               	goto	l15090
  9140  003B96                     l15066:
  9141                           
  9142                           ; BSR set to: 1
  9143                           ;main.c: 1455: else if (cmdbuf[ 5 ] ==
  9144                           ;main.c: 1456: 2) {
  9145  003B96  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9146  003B98  0A02               	xorlw	2
  9147  003B9A  E109               	bnz	l15072
  9148                           
  9149                           ; BSR set to: 1
  9150                           ;main.c: 1457: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  9151  003B9C  0E40               	movlw	64
  9152  003B9E  ECEA  F007         	call	_ECANSetOperationMode
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;main.c: 1458: sendVSCPDriverCommandReply(0, 2);
  9156  003BA2  0E02               	movlw	2
  9157  003BA4  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9158  003BA6  0E00               	movlw	0
  9159  003BA8  ECF6  F012         	call	_sendVSCPDriverCommandReply
  9160                           
  9161                           ;main.c: 1459: }
  9162  003BAC  D024               	goto	l15090
  9163  003BAE                     l15072:
  9164                           
  9165                           ; BSR set to: 1
  9166                           ;main.c: 1461: else if (cmdbuf[ 5 ] ==
  9167                           ;main.c: 1462: 3) {
  9168  003BAE  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9169  003BB0  0A03               	xorlw	3
  9170  003BB2  E109               	bnz	l15078
  9171                           
  9172                           ; BSR set to: 1
  9173                           ;main.c: 1463: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  9174  003BB4  0E60               	movlw	96
  9175  003BB6  ECEA  F007         	call	_ECANSetOperationMode
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;main.c: 1464: sendVSCPDriverCommandReply(0, 3);
  9179  003BBA  0E03               	movlw	3
  9180  003BBC  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9181  003BBE  0E00               	movlw	0
  9182  003BC0  ECF6  F012         	call	_sendVSCPDriverCommandReply
  9183                           
  9184                           ;main.c: 1465: }
  9185  003BC4  D018               	goto	l15090
  9186  003BC6                     l15078:
  9187                           
  9188                           ; BSR set to: 1
  9189                           ;main.c: 1467: else if (cmdbuf[ 5 ] ==
  9190                           ;main.c: 1468: 4) {
  9191  003BC6  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9192  003BC8  0A04               	xorlw	4
  9193  003BCA  E109               	bnz	l15084
  9194                           
  9195                           ; BSR set to: 1
  9196                           ;main.c: 1469: ECANSetOperationMode(0x20);
  9197  003BCC  0E20               	movlw	32
  9198  003BCE  ECEA  F007         	call	_ECANSetOperationMode
  9199                           
  9200                           ; BSR set to: 0
  9201                           ;main.c: 1470: sendVSCPDriverCommandReply(0, 4);
  9202  003BD2  0E04               	movlw	4
  9203  003BD4  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9204  003BD6  0E00               	movlw	0
  9205  003BD8  ECF6  F012         	call	_sendVSCPDriverCommandReply
  9206                           
  9207                           ;main.c: 1471: }
  9208  003BDC  D00C               	goto	l15090
  9209  003BDE                     l15084:
  9210                           
  9211                           ; BSR set to: 1
  9212                           ;main.c: 1473: else if (cmdbuf[ 5 ] ==
  9213                           ;main.c: 1474: 5) {
  9214  003BDE  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9215  003BE0  0A05               	xorlw	5
  9216  003BE2  E109               	bnz	l15090
  9217                           
  9218                           ; BSR set to: 1
  9219                           ;main.c: 1475: sendVSCPDriverCommandReply(0, 0);
  9220  003BE4  0E00               	movlw	0
  9221  003BE6  0100               	movlb	0	; () banked
  9222  003BE8  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9223  003BEA  ECF6  F012         	call	_sendVSCPDriverCommandReply
  9224  003BEE  D003               	goto	l15090
  9225  003BF0                     l15088:
  9226                           
  9227                           ; BSR set to: 1
  9228                           ;main.c: 1480: else {
  9229                           ;main.c: 1482: sendVSCPDriverErrorFrame(2);
  9230  003BF0  0E02               	movlw	2
  9231  003BF2  ECFD  F010         	call	_sendVSCPDriverErrorFrame
  9232  003BF6                     l15090:
  9233                           
  9234                           ;main.c: 1483: }
  9235                           ;main.c: 1486: pos = 0;
  9236  003BF6  6A34               	clrf	_pos,c
  9237                           
  9238                           ;main.c: 1487: stateVscpDriver = 0;
  9239  003BF8  6A37               	clrf	_stateVscpDriver,c
  9240  003BFA                     l15094:
  9241                           
  9242                           ;main.c: 1489: }
  9243                           ;main.c: 1491: }
  9244                           ;main.c: 1494: (INTCONbits.GIE = 1);
  9245  003BFA  8EF2               	bsf	intcon,7,c	;volatile
  9246  003BFC                     l729:
  9247  003BFC  0012               	return	
  9248  003BFE                     __end_of_doModeVscp:
  9249                           	opt stack 0
  9250                           tblptru	equ	0xFF8
  9251                           tblptrh	equ	0xFF7
  9252                           tblptrl	equ	0xFF6
  9253                           tablat	equ	0xFF5
  9254                           prodh	equ	0xFF4
  9255                           prodl	equ	0xFF3
  9256                           intcon	equ	0xFF2
  9257                           indf0	equ	0xFEF
  9258                           postinc0	equ	0xFEE
  9259                           fsr0h	equ	0xFEA
  9260                           fsr0l	equ	0xFE9
  9261                           wreg	equ	0xFE8
  9262                           indf1	equ	0xFE7
  9263                           postinc1	equ	0xFE6
  9264                           postdec1	equ	0xFE5
  9265                           fsr1h	equ	0xFE2
  9266                           fsr1l	equ	0xFE1
  9267                           indf2	equ	0xFDF
  9268                           postinc2	equ	0xFDE
  9269                           postdec2	equ	0xFDD
  9270                           plusw2	equ	0xFDB
  9271                           fsr2h	equ	0xFDA
  9272                           fsr2l	equ	0xFD9
  9273                           status	equ	0xFD8
  9274                           
  9275 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9276 ;; Defined at:
  9277 ;;		line 1755 in file "main.c"
  9278 ;; Parameters:    Size  Location     Type
  9279 ;;  errorcode       1    wreg     unsigned char 
  9280 ;; Auto vars:     Size  Location     Type
  9281 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9282 ;;  crc             1   16[BANK0 ] unsigned char 
  9283 ;; Return value:  Size  Location     Type
  9284 ;;		None               void
  9285 ;; Registers used:
  9286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9287 ;; Tracked objects:
  9288 ;;		On entry : F/1
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9292 ;;      Params:         0       0       0       0       0       0       0
  9293 ;;      Locals:         0       2       0       0       0       0       0
  9294 ;;      Temps:          0       0       0       0       0       0       0
  9295 ;;      Totals:         0       2       0       0       0       0       0
  9296 ;;Total ram usage:        2 bytes
  9297 ;; Hardware stack levels used:    1
  9298 ;; Hardware stack levels required when called:    6
  9299 ;; This function calls:
  9300 ;;		_WriteUSART
  9301 ;;		_sendEscapedUartData
  9302 ;;		_crc8
  9303 ;; This function is called by:
  9304 ;;		_doModeVscp
  9305 ;; This function uses a non-reentrant model
  9306 ;;
  9307                           
  9308                           	psect	text8
  9309  0021FA                     __ptext8:
  9310                           	opt stack 0
  9311  0021FA                     _sendVSCPDriverErrorFrame:
  9312                           	opt stack 22
  9313                           
  9314                           ;incstack = 0
  9315                           ;incstack = 0
  9316                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9317  0021FA  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9318                           
  9319                           ; BSR set to: 1
  9320                           ;main.c: 1756: uint8_t crc = 0;
  9321  0021FE  0100               	movlb	0	; () banked
  9322  002200  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9323  002202                     l847:
  9324  002202  A2AC               	btfss	4012,1,c	;volatile
  9325  002204  D7FE               	goto	l847
  9326                           
  9327                           ;main.c: 1760: WriteUSART(0x10);
  9328  002206  0E10               	movlw	16
  9329  002208  ECD5  F007         	call	_WriteUSART
  9330  00220C                     l850:
  9331  00220C  A2AC               	btfss	4012,1,c	;volatile
  9332  00220E  D7FE               	goto	l850
  9333                           
  9334                           ;main.c: 1762: WriteUSART(0x02);
  9335  002210  0E02               	movlw	2
  9336  002212  ECD5  F007         	call	_WriteUSART
  9337  002216                     l853:
  9338  002216  A2AC               	btfss	4012,1,c	;volatile
  9339  002218  D7FE               	goto	l853
  9340                           
  9341                           ;main.c: 1766: WriteUSART(253);
  9342  00221A  0EFD               	movlw	253
  9343  00221C  ECD5  F007         	call	_WriteUSART
  9344                           
  9345                           ;main.c: 1767: crc8(&crc, 253);
  9346  002220  0100               	movlb	0	; () banked
  9347  002222  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9348  002224  6F68               	movwf	(?_crc8+1)& (0+255),b
  9349  002226  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9350  002228  6F67               	movwf	?_crc8& (0+255),b
  9351  00222A  0EFD               	movlw	253
  9352  00222C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9353  00222E  ECB9  F008         	call	_crc8	;wreg free
  9354  002232                     l856:
  9355  002232  A2AC               	btfss	4012,1,c	;volatile
  9356  002234  D7FE               	goto	l856
  9357                           
  9358                           ;main.c: 1771: WriteUSART(0);
  9359  002236  0E00               	movlw	0
  9360  002238  ECD5  F007         	call	_WriteUSART
  9361                           
  9362                           ;main.c: 1772: crc8(&crc, 0);
  9363  00223C  D836               	call	PL100	;call to abstracted procedure
  9364  00223E  ECB9  F008         	call	_crc8	;wreg free
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;main.c: 1775: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9368  002242  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9369  002244  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9370  002246  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9371  002248  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9372  00224A  0101               	movlb	1	; () banked
  9373  00224C  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  9374  00224E  EC13  F00B         	call	_sendEscapedUartData
  9375  002252                     l859:
  9376  002252  A2AC               	btfss	4012,1,c	;volatile
  9377  002254  D7FE               	goto	l859
  9378                           
  9379                           ;main.c: 1779: WriteUSART(0);
  9380  002256  0E00               	movlw	0
  9381  002258  ECD5  F007         	call	_WriteUSART
  9382                           
  9383                           ;main.c: 1780: crc8(&crc, 0);
  9384  00225C  D826               	call	PL100	;call to abstracted procedure
  9385  00225E  ECB9  F008         	call	_crc8	;wreg free
  9386  002262                     l862:
  9387  002262  A2AC               	btfss	4012,1,c	;volatile
  9388  002264  D7FE               	goto	l862
  9389                           
  9390                           ;main.c: 1782: WriteUSART(1);
  9391  002266  0E01               	movlw	1
  9392  002268  ECD5  F007         	call	_WriteUSART
  9393                           
  9394                           ;main.c: 1783: crc8(&crc, 1);
  9395  00226C  0100               	movlb	0	; () banked
  9396  00226E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9397  002270  6F68               	movwf	(?_crc8+1)& (0+255),b
  9398  002272  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9399  002274  6F67               	movwf	?_crc8& (0+255),b
  9400  002276  0E01               	movlw	1
  9401  002278  6F69               	movwf	(?_crc8+2)& (0+255),b
  9402  00227A  ECB9  F008         	call	_crc8	;wreg free
  9403                           
  9404                           ; BSR set to: 0
  9405                           ;main.c: 1786: sendEscapedUartData(errorcode, &crc);
  9406  00227E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9407  002280  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9408  002282  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9409  002284  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9410  002286  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9411  002288  EC13  F00B         	call	_sendEscapedUartData
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;main.c: 1789: sendEscapedUartData(crc, (0));
  9415  00228C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9416  00228E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9417  002290  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9418  002292  EC13  F00B         	call	_sendEscapedUartData
  9419  002296                     l865:
  9420  002296  A2AC               	btfss	4012,1,c	;volatile
  9421  002298  D7FE               	goto	l865
  9422                           
  9423                           ;main.c: 1793: WriteUSART(0x10);
  9424  00229A  0E10               	movlw	16
  9425  00229C  ECD5  F007         	call	_WriteUSART
  9426  0022A0                     l868:
  9427  0022A0  A2AC               	btfss	4012,1,c	;volatile
  9428  0022A2  D7FE               	goto	l868
  9429                           
  9430                           ;main.c: 1795: WriteUSART(0x03);
  9431  0022A4  0E03               	movlw	3
  9432  0022A6  EFD5  F007         	goto	_WriteUSART
  9433  0022AA                     __end_of_sendVSCPDriverErrorFrame:
  9434                           	opt stack 0
  9435  0022AA                     PL100:
  9436                           	opt stack 22
  9437  0022AA  0100               	movlb	0	; () banked
  9438  0022AC  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9439  0022AE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9440  0022B0  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9441  0022B2  6F67               	movwf	?_crc8& (0+255),b
  9442  0022B4  6B69               	clrf	(?_crc8+2)& (0+255),b
  9443  0022B6  0C00               	retlw	0
  9444  0022B8                     __end_ofPL100:
  9445                           	opt stack 0
  9446                           tblptru	equ	0xFF8
  9447                           tblptrh	equ	0xFF7
  9448                           tblptrl	equ	0xFF6
  9449                           tablat	equ	0xFF5
  9450                           prodh	equ	0xFF4
  9451                           prodl	equ	0xFF3
  9452                           intcon	equ	0xFF2
  9453                           indf0	equ	0xFEF
  9454                           postinc0	equ	0xFEE
  9455                           fsr0h	equ	0xFEA
  9456                           fsr0l	equ	0xFE9
  9457                           wreg	equ	0xFE8
  9458                           indf1	equ	0xFE7
  9459                           postinc1	equ	0xFE6
  9460                           postdec1	equ	0xFE5
  9461                           fsr1h	equ	0xFE2
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           plusw2	equ	0xFDB
  9467                           fsr2h	equ	0xFDA
  9468                           fsr2l	equ	0xFD9
  9469                           status	equ	0xFD8
  9470                           
  9471 ;; *************** function _sendVSCPDriverCommandReply *****************
  9472 ;; Defined at:
  9473 ;;		line 1892 in file "main.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;  cmdReplyCode    1    wreg     unsigned char 
  9476 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  9479 ;;  crc             1   17[BANK0 ] unsigned char 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;		None               void
  9482 ;; Registers used:
  9483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : F/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9489 ;;      Params:         0       1       0       0       0       0       0
  9490 ;;      Locals:         0       2       0       0       0       0       0
  9491 ;;      Temps:          0       0       0       0       0       0       0
  9492 ;;      Totals:         0       3       0       0       0       0       0
  9493 ;;Total ram usage:        3 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    6
  9496 ;; This function calls:
  9497 ;;		_WriteUSART
  9498 ;;		_sendEscapedUartData
  9499 ;;		_crc8
  9500 ;; This function is called by:
  9501 ;;		_doModeVscp
  9502 ;; This function uses a non-reentrant model
  9503 ;;
  9504                           
  9505                           	psect	text9
  9506  0025EC                     __ptext9:
  9507                           	opt stack 0
  9508  0025EC                     _sendVSCPDriverCommandReply:
  9509                           	opt stack 22
  9510                           
  9511                           ;incstack = 0
  9512                           ;incstack = 0
  9513                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  9514  0025EC  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;main.c: 1893: uint8_t crc = 0;
  9518  0025F0  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  9519  0025F2                     l928:
  9520                           
  9521                           ; BSR set to: 0
  9522  0025F2  A2AC               	btfss	4012,1,c	;volatile
  9523  0025F4  D7FE               	goto	l928
  9524                           
  9525                           ; BSR set to: 0
  9526                           ;main.c: 1897: WriteUSART(0x10);
  9527  0025F6  0E10               	movlw	16
  9528  0025F8  ECD5  F007         	call	_WriteUSART
  9529  0025FC                     l931:
  9530  0025FC  A2AC               	btfss	4012,1,c	;volatile
  9531  0025FE  D7FE               	goto	l931
  9532                           
  9533                           ;main.c: 1899: WriteUSART(0x02);
  9534  002600  0E02               	movlw	2
  9535  002602  ECD5  F007         	call	_WriteUSART
  9536  002606                     l934:
  9537  002606  A2AC               	btfss	4012,1,c	;volatile
  9538  002608  D7FE               	goto	l934
  9539                           
  9540                           ;main.c: 1903: WriteUSART(254);
  9541  00260A  0EFE               	movlw	254
  9542  00260C  ECD5  F007         	call	_WriteUSART
  9543                           
  9544                           ;main.c: 1904: crc8(&crc, 254);
  9545  002610  0100               	movlb	0	; () banked
  9546  002612  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9547  002614  6F68               	movwf	(?_crc8+1)& (0+255),b
  9548  002616  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9549  002618  6F67               	movwf	?_crc8& (0+255),b
  9550  00261A  0EFE               	movlw	254
  9551  00261C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9552  00261E  ECB9  F008         	call	_crc8	;wreg free
  9553  002622                     l937:
  9554                           
  9555                           ; BSR set to: 0
  9556  002622  A2AC               	btfss	4012,1,c	;volatile
  9557  002624  D7FE               	goto	l937
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;main.c: 1908: WriteUSART(0);
  9561  002626  0E00               	movlw	0
  9562  002628  ECD5  F007         	call	_WriteUSART
  9563                           
  9564                           ;main.c: 1909: crc8(&crc, 0);
  9565  00262C  D841               	call	PL88	;call to abstracted procedure
  9566  00262E  ECB9  F008         	call	_crc8	;wreg free
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;main.c: 1912: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9570  002632  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9571  002634  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9572  002636  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9573  002638  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9574  00263A  0101               	movlb	1	; () banked
  9575  00263C  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  9576  00263E  EC13  F00B         	call	_sendEscapedUartData
  9577  002642                     l940:
  9578                           
  9579                           ; BSR set to: 0
  9580  002642  A2AC               	btfss	4012,1,c	;volatile
  9581  002644  D7FE               	goto	l940
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;main.c: 1916: WriteUSART(0);
  9585  002646  0E00               	movlw	0
  9586  002648  ECD5  F007         	call	_WriteUSART
  9587                           
  9588                           ;main.c: 1917: crc8(&crc, 0);
  9589  00264C  D831               	call	PL88	;call to abstracted procedure
  9590  00264E  ECB9  F008         	call	_crc8	;wreg free
  9591  002652                     l943:
  9592                           
  9593                           ; BSR set to: 0
  9594  002652  A2AC               	btfss	4012,1,c	;volatile
  9595  002654  D7FE               	goto	l943
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;main.c: 1919: WriteUSART(2);
  9599  002656  0E02               	movlw	2
  9600  002658  ECD5  F007         	call	_WriteUSART
  9601                           
  9602                           ;main.c: 1920: crc8(&crc, 2);
  9603  00265C  0100               	movlb	0	; () banked
  9604  00265E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9605  002660  6F68               	movwf	(?_crc8+1)& (0+255),b
  9606  002662  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9607  002664  6F67               	movwf	?_crc8& (0+255),b
  9608  002666  0E02               	movlw	2
  9609  002668  6F69               	movwf	(?_crc8+2)& (0+255),b
  9610  00266A  ECB9  F008         	call	_crc8	;wreg free
  9611  00266E                     l946:
  9612                           
  9613                           ; BSR set to: 0
  9614  00266E  A2AC               	btfss	4012,1,c	;volatile
  9615  002670  D7FE               	goto	l946
  9616                           
  9617                           ; BSR set to: 0
  9618                           ;main.c: 1924: sendEscapedUartData(cmdReplyCode, &crc);
  9619  002672  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9620  002674  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9621  002676  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9622  002678  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9623  00267A  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9624  00267C  EC13  F00B         	call	_sendEscapedUartData
  9625  002680                     l949:
  9626                           
  9627                           ; BSR set to: 0
  9628  002680  A2AC               	btfss	4012,1,c	;volatile
  9629  002682  D7FE               	goto	l949
  9630                           
  9631                           ; BSR set to: 0
  9632                           ;main.c: 1928: sendEscapedUartData(cmdCode, &crc);
  9633  002684  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9634  002686  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9635  002688  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9636  00268A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9637  00268C  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9638  00268E  EC13  F00B         	call	_sendEscapedUartData
  9639                           
  9640                           ;main.c: 1931: sendEscapedUartData(crc, (0));
  9641  002692  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9642  002694  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9643  002696  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9644  002698  EC13  F00B         	call	_sendEscapedUartData
  9645  00269C                     l952:
  9646                           
  9647                           ; BSR set to: 0
  9648  00269C  A2AC               	btfss	4012,1,c	;volatile
  9649  00269E  D7FE               	goto	l952
  9650                           
  9651                           ; BSR set to: 0
  9652                           ;main.c: 1935: WriteUSART(0x10);
  9653  0026A0  0E10               	movlw	16
  9654  0026A2  ECD5  F007         	call	_WriteUSART
  9655  0026A6                     l955:
  9656  0026A6  A2AC               	btfss	4012,1,c	;volatile
  9657  0026A8  D7FE               	goto	l955
  9658                           
  9659                           ;main.c: 1937: WriteUSART(0x03);
  9660  0026AA  0E03               	movlw	3
  9661  0026AC  EFD5  F007         	goto	_WriteUSART
  9662  0026B0                     __end_of_sendVSCPDriverCommandReply:
  9663                           	opt stack 0
  9664  0026B0                     PL88:
  9665                           	opt stack 22
  9666  0026B0  0100               	movlb	0	; () banked
  9667  0026B2  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9668  0026B4  6F68               	movwf	(?_crc8+1)& (0+255),b
  9669  0026B6  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9670  0026B8  6F67               	movwf	?_crc8& (0+255),b
  9671  0026BA  6B69               	clrf	(?_crc8+2)& (0+255),b
  9672  0026BC  0C00               	retlw	0
  9673  0026BE                     __end_ofPL88:
  9674                           	opt stack 0
  9675                           tblptru	equ	0xFF8
  9676                           tblptrh	equ	0xFF7
  9677                           tblptrl	equ	0xFF6
  9678                           tablat	equ	0xFF5
  9679                           prodh	equ	0xFF4
  9680                           prodl	equ	0xFF3
  9681                           intcon	equ	0xFF2
  9682                           indf0	equ	0xFEF
  9683                           postinc0	equ	0xFEE
  9684                           fsr0h	equ	0xFEA
  9685                           fsr0l	equ	0xFE9
  9686                           wreg	equ	0xFE8
  9687                           indf1	equ	0xFE7
  9688                           postinc1	equ	0xFE6
  9689                           postdec1	equ	0xFE5
  9690                           fsr1h	equ	0xFE2
  9691                           fsr1l	equ	0xFE1
  9692                           indf2	equ	0xFDF
  9693                           postinc2	equ	0xFDE
  9694                           postdec2	equ	0xFDD
  9695                           plusw2	equ	0xFDB
  9696                           fsr2h	equ	0xFDA
  9697                           fsr2l	equ	0xFD9
  9698                           status	equ	0xFD8
  9699                           
  9700 ;; *************** function _sendVSCPModeCapabilities *****************
  9701 ;; Defined at:
  9702 ;;		line 2261 in file "main.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;		None
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;  crc             1   15[BANK0 ] unsigned char 
  9707 ;; Return value:  Size  Location     Type
  9708 ;;                  1    wreg      enum E15660
  9709 ;; Registers used:
  9710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9711 ;; Tracked objects:
  9712 ;;		On entry : F/1
  9713 ;;		On exit  : 0/0
  9714 ;;		Unchanged: 0/0
  9715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9716 ;;      Params:         0       0       0       0       0       0       0
  9717 ;;      Locals:         0       1       0       0       0       0       0
  9718 ;;      Temps:          0       0       0       0       0       0       0
  9719 ;;      Totals:         0       1       0       0       0       0       0
  9720 ;;Total ram usage:        1 bytes
  9721 ;; Hardware stack levels used:    1
  9722 ;; Hardware stack levels required when called:    6
  9723 ;; This function calls:
  9724 ;;		_WriteUSART
  9725 ;;		_sendEscapedUartData
  9726 ;;		_crc8
  9727 ;; This function is called by:
  9728 ;;		_doModeVscp
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text10
  9733  002144                     __ptext10:
  9734                           	opt stack 0
  9735  002144                     _sendVSCPModeCapabilities:
  9736                           	opt stack 22
  9737                           
  9738                           ; BSR set to: 1
  9739                           ;main.c: 2262: uint8_t crc = 0;
  9740                           
  9741                           ;incstack = 0
  9742                           ;incstack = 0
  9743  002144  0100               	movlb	0	; () banked
  9744  002146  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9745  002148                     l1077:
  9746  002148  A2AC               	btfss	4012,1,c	;volatile
  9747  00214A  D7FE               	goto	l1077
  9748                           
  9749                           ;main.c: 2266: WriteUSART(0x10);
  9750  00214C  0E10               	movlw	16
  9751  00214E  ECD5  F007         	call	_WriteUSART
  9752  002152                     l1080:
  9753  002152  A2AC               	btfss	4012,1,c	;volatile
  9754  002154  D7FE               	goto	l1080
  9755                           
  9756                           ;main.c: 2268: WriteUSART(0x02);
  9757  002156  0E02               	movlw	2
  9758  002158  ECD5  F007         	call	_WriteUSART
  9759  00215C                     l1083:
  9760  00215C  A2AC               	btfss	4012,1,c	;volatile
  9761  00215E  D7FE               	goto	l1083
  9762                           
  9763                           ;main.c: 2272: WriteUSART(9);
  9764  002160  0E09               	movlw	9
  9765  002162  ECD5  F007         	call	_WriteUSART
  9766                           
  9767                           ;main.c: 2273: crc8(&crc, 9);
  9768  002166  0100               	movlb	0	; () banked
  9769  002168  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9770  00216A  6F68               	movwf	(?_crc8+1)& (0+255),b
  9771  00216C  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9772  00216E  6F67               	movwf	?_crc8& (0+255),b
  9773  002170  0E09               	movlw	9
  9774  002172  6F69               	movwf	(?_crc8+2)& (0+255),b
  9775  002174  ECB9  F008         	call	_crc8	;wreg free
  9776  002178                     l1086:
  9777  002178  A2AC               	btfss	4012,1,c	;volatile
  9778  00217A  D7FE               	goto	l1086
  9779                           
  9780                           ;main.c: 2277: WriteUSART(0);
  9781  00217C  0E00               	movlw	0
  9782  00217E  ECD5  F007         	call	_WriteUSART
  9783                           
  9784                           ;main.c: 2278: crc8(&crc, 0);
  9785  002182  0100               	movlb	0	; () banked
  9786  002184  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9787  002186  6F68               	movwf	(?_crc8+1)& (0+255),b
  9788  002188  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9789  00218A  6F67               	movwf	?_crc8& (0+255),b
  9790  00218C  0E00               	movlw	0
  9791  00218E  6B69               	clrf	(?_crc8+2)& (0+255),b
  9792  002190  ECB9  F008         	call	_crc8	;wreg free
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;main.c: 2281: sendEscapedUartData(sequencyno, &crc );
  9796  002194  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9797  002196  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9798  002198  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9799  00219A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9800  00219C  5036               	movf	_sequencyno,w,c
  9801  00219E  EC13  F00B         	call	_sendEscapedUartData
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;main.c: 2282: sequencyno++;
  9805  0021A2  2A36               	incf	_sequencyno,f,c
  9806                           
  9807                           ; BSR set to: 0
  9808                           ;main.c: 2285: sendEscapedUartData( 0, &crc );
  9809  0021A4  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9810  0021A6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9811  0021A8  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9812  0021AA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9813  0021AC  0E00               	movlw	0
  9814  0021AE  EC13  F00B         	call	_sendEscapedUartData
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;main.c: 2286: sendEscapedUartData( 2, &crc );
  9818  0021B2  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9819  0021B4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9820  0021B6  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9821  0021B8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9822  0021BA  0E02               	movlw	2
  9823  0021BC  EC13  F00B         	call	_sendEscapedUartData
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;main.c: 2289: sendEscapedUartData( 1, &crc );
  9827  0021C0  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9828  0021C2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9829  0021C4  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9830  0021C6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9831  0021C8  0E01               	movlw	1
  9832  0021CA  EC13  F00B         	call	_sendEscapedUartData
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;main.c: 2290: sendEscapedUartData( 0, &crc );
  9836  0021CE  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9837  0021D0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9838  0021D2  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9839  0021D4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9840  0021D6  0E00               	movlw	0
  9841  0021D8  EC13  F00B         	call	_sendEscapedUartData
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;main.c: 2293: sendEscapedUartData(crc, (0));
  9845  0021DC  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9846  0021DE  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9847  0021E0  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9848  0021E2  EC13  F00B         	call	_sendEscapedUartData
  9849  0021E6                     l1089:
  9850  0021E6  A2AC               	btfss	4012,1,c	;volatile
  9851  0021E8  D7FE               	goto	l1089
  9852                           
  9853                           ;main.c: 2297: WriteUSART(0x10);
  9854  0021EA  0E10               	movlw	16
  9855  0021EC  ECD5  F007         	call	_WriteUSART
  9856  0021F0                     l1092:
  9857  0021F0  A2AC               	btfss	4012,1,c	;volatile
  9858  0021F2  D7FE               	goto	l1092
  9859                           
  9860                           ;main.c: 2299: WriteUSART(0x03);
  9861  0021F4  0E03               	movlw	3
  9862  0021F6  EFD5  F007         	goto	_WriteUSART
  9863  0021FA                     __end_of_sendVSCPModeCapabilities:
  9864                           	opt stack 0
  9865                           tblptru	equ	0xFF8
  9866                           tblptrh	equ	0xFF7
  9867                           tblptrl	equ	0xFF6
  9868                           tablat	equ	0xFF5
  9869                           prodh	equ	0xFF4
  9870                           prodl	equ	0xFF3
  9871                           intcon	equ	0xFF2
  9872                           indf0	equ	0xFEF
  9873                           postinc0	equ	0xFEE
  9874                           fsr0h	equ	0xFEA
  9875                           fsr0l	equ	0xFE9
  9876                           wreg	equ	0xFE8
  9877                           indf1	equ	0xFE7
  9878                           postinc1	equ	0xFE6
  9879                           postdec1	equ	0xFE5
  9880                           fsr1h	equ	0xFE2
  9881                           fsr1l	equ	0xFE1
  9882                           indf2	equ	0xFDF
  9883                           postinc2	equ	0xFDE
  9884                           postdec2	equ	0xFDD
  9885                           plusw2	equ	0xFDB
  9886                           fsr2h	equ	0xFDA
  9887                           fsr2l	equ	0xFD9
  9888                           status	equ	0xFD8
  9889                           
  9890 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9891 ;; Defined at:
  9892 ;;		line 2395 in file "main.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;		None
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;		None
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  1    wreg      enum E15660
  9899 ;; Registers used:
  9900 ;;		wreg
  9901 ;; Tracked objects:
  9902 ;;		On entry : F/1
  9903 ;;		On exit  : F/1
  9904 ;;		Unchanged: F/0
  9905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9906 ;;      Params:         0       0       0       0       0       0       0
  9907 ;;      Locals:         0       0       0       0       0       0       0
  9908 ;;      Temps:          0       0       0       0       0       0       0
  9909 ;;      Totals:         0       0       0       0       0       0       0
  9910 ;;Total ram usage:        0 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    3
  9913 ;; This function calls:
  9914 ;;		Nothing
  9915 ;; This function is called by:
  9916 ;;		_doModeVscp
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           	psect	text11
  9921  000F62                     __ptext11:
  9922                           	opt stack 0
  9923  000F62                     _receiveVSCPModeMultiCanalMsg:
  9924                           	opt stack 25
  9925                           
  9926                           ; BSR set to: 1
  9927                           
  9928                           ; BSR set to: 1
  9929                           ;main.c: 2397: return 0;
  9930                           
  9931                           ;incstack = 0
  9932                           ;incstack = 0
  9933  000F62  0C00               	retlw	0
  9934  000F64                     __end_of_receiveVSCPModeMultiCanalMsg:
  9935                           	opt stack 0
  9936                           tblptru	equ	0xFF8
  9937                           tblptrh	equ	0xFF7
  9938                           tblptrl	equ	0xFF6
  9939                           tablat	equ	0xFF5
  9940                           prodh	equ	0xFF4
  9941                           prodl	equ	0xFF3
  9942                           intcon	equ	0xFF2
  9943                           indf0	equ	0xFEF
  9944                           postinc0	equ	0xFEE
  9945                           fsr0h	equ	0xFEA
  9946                           fsr0l	equ	0xFE9
  9947                           wreg	equ	0xFE8
  9948                           indf1	equ	0xFE7
  9949                           postinc1	equ	0xFE6
  9950                           postdec1	equ	0xFE5
  9951                           fsr1h	equ	0xFE2
  9952                           fsr1l	equ	0xFE1
  9953                           indf2	equ	0xFDF
  9954                           postinc2	equ	0xFDE
  9955                           postdec2	equ	0xFDD
  9956                           plusw2	equ	0xFDB
  9957                           fsr2h	equ	0xFDA
  9958                           fsr2l	equ	0xFD9
  9959                           status	equ	0xFD8
  9960                           
  9961 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9962 ;; Defined at:
  9963 ;;		line 2371 in file "main.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;  data            8   76[BANK0 ] unsigned char [8]
  9968 ;;  id              4   84[BANK0 ] unsigned long 
  9969 ;;  dlc             1   88[BANK0 ] unsigned char 
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      enum E15660
  9972 ;; Registers used:
  9973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9974 ;; Tracked objects:
  9975 ;;		On entry : F/1
  9976 ;;		On exit  : E/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9979 ;;      Params:         0       0       0       0       0       0       0
  9980 ;;      Locals:         0      13       0       0       0       0       0
  9981 ;;      Temps:          0      20       0       0       0       0       0
  9982 ;;      Totals:         0      33       0       0       0       0       0
  9983 ;;Total ram usage:       33 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    6
  9986 ;; This function calls:
  9987 ;;		_memcpy
  9988 ;;		_sendCANFrame
  9989 ;; This function is called by:
  9990 ;;		_doModeVscp
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	text12
  9995  0027A4                     __ptext12:
  9996                           	opt stack 0
  9997  0027A4                     _receiveVSCPModeCanalMsg:
  9998                           	opt stack 22
  9999                           
 10000                           ; BSR set to: 1
 10001                           ;main.c: 2372: uint32_t id;
 10002                           ;main.c: 2373: uint8_t dlc;
 10003                           ;main.c: 2374: uint8_t data[8];
 10004                           ;main.c: 2376: id = ((uint32_t) cmdbuf[5] << 26) |
 10005                           ;main.c: 2377: ((uint32_t) cmdbuf[5 + 1] << 16) |
 10006                           ;main.c: 2378: ((uint32_t) cmdbuf[5 + 2] << 8) |
 10007                           ;main.c: 2379: cmdbuf[5 + 3];
 10008                           
 10009                           ; BSR set to: 1
 10010                           ;incstack = 0
 10011                           ;incstack = 0
 10012  0027A4  C134  F098         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
 10013  0027A8  0100               	movlb	0	; () banked
 10014  0027AA  6B99               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10015  0027AC  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
 10016  0027AE  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
 10017  0027B0  C09A  F09B         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
 10018  0027B4  C099  F09A         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
 10019  0027B8  C098  F099         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
 10020  0027BC  6B98               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
 10021  0027BE  C133  F09C         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
 10022  0027C2  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10023  0027C4  6B9E               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
 10024  0027C6  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
 10025  0027C8  C09D  F09F         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
 10026  0027CC  C09C  F09E         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
 10027  0027D0  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10028  0027D2  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
 10029  0027D4  C132  F0A0         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
 10030  0027D8  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
 10031  0027DA  6BA2               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
 10032  0027DC  6BA3               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
 10033  0027DE  0E1A               	movlw	26
 10034  0027E0                     u22565:
 10035  0027E0  90D8               	bcf	status,0,c
 10036  0027E2  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
 10037  0027E4  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
 10038  0027E6  37A2               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
 10039  0027E8  37A3               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
 10040  0027EA  2EE8               	decfsz	wreg,f,c
 10041  0027EC  D7F9               	goto	u22565
 10042  0027EE  519C               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
 10043  0027F0  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
 10044  0027F2  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
 10045  0027F4  519D               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
 10046  0027F6  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
 10047  0027F8  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
 10048  0027FA  519E               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
 10049  0027FC  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
 10050  0027FE  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
 10051  002800  519F               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
 10052  002802  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
 10053  002804  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
 10054  002806  5198               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
 10055  002808  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
 10056  00280A  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
 10057  00280C  5199               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
 10058  00280E  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
 10059  002810  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
 10060  002812  519A               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
 10061  002814  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
 10062  002816  6FAA               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
 10063  002818  519B               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
 10064  00281A  11A7               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
 10065  00281C  6FAB               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
 10066  00281E  0101               	movlb	1	; () banked
 10067  002820  5135               	movf	(_cmdbuf+8)& (0+255),w,b
 10068  002822  0100               	movlb	0	; () banked
 10069  002824  11A8               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
 10070  002826  6FB4               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
 10071  002828  51A9               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
 10072  00282A  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
 10073  00282C  51AA               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
 10074  00282E  6FB6               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
 10075  002830  51AB               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
 10076  002832  6FB7               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
 10077                           
 10078                           ;main.c: 2380: dlc = ( cmdbuf[4] - 4 ) & 0x07;
 10079  002834  0101               	movlb	1	; () banked
 10080  002836  5131               	movf	(_cmdbuf+4)& (0+255),w,b
 10081  002838  0FFC               	addlw	252
 10082  00283A  0B07               	andlw	7
 10083  00283C  0100               	movlb	0	; () banked
 10084  00283E  6FB8               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;main.c: 2381: if ( dlc > 8 ) {
 10088  002840  0E08               	movlw	8
 10089  002842  65B8               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10090  002844  D002               	goto	l16650
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;main.c: 2382: return 0;
 10094  002846  0E00               	movlw	0
 10095  002848  D021               	goto	l1130
 10096  00284A                     l16650:
 10097                           
 10098                           ; BSR set to: 0
 10099                           ;main.c: 2383: }
 10100                           ;main.c: 2384: memcpy( data, cmdbuf + 5 + 4, dlc );
 10101  00284A  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10102  00284C  6F61               	movwf	(?_memcpy+1)& (0+255),b
 10103  00284E  0EAC               	movlw	low receiveVSCPModeCanalMsg@data
 10104  002850  6F60               	movwf	?_memcpy& (0+255),b
 10105  002852  0E36               	movlw	low (_cmdbuf+9)
 10106  002854  6F98               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
 10107  002856  0E01               	movlw	high (_cmdbuf+9)
 10108  002858  6F99               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10109  00285A  C098  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
 10110  00285E  C099  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
 10111  002862  C0B8  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
 10112  002866  6B65               	clrf	(?_memcpy+5)& (0+255),b
 10113  002868  EC8F  F009         	call	_memcpy	;wreg free
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;main.c: 2386: return sendCANFrame(id, dlc, data);
 10117  00286C  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
 10118  002870  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
 10119  002874  C0B6  F093         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
 10120  002878  C0B7  F094         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
 10121  00287C  C0B8  F095         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
 10122  002880  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10123  002882  6F97               	movwf	(?_sendCANFrame+6)& (0+255),b
 10124  002884  0EAC               	movlw	low receiveVSCPModeCanalMsg@data
 10125  002886  6F96               	movwf	(?_sendCANFrame+5)& (0+255),b
 10126  002888  ECD5  F008         	call	_sendCANFrame	;wreg free
 10127  00288C                     l1130:
 10128  00288C  0012               	return	
 10129  00288E                     __end_of_receiveVSCPModeCanalMsg:
 10130                           	opt stack 0
 10131                           tblptru	equ	0xFF8
 10132                           tblptrh	equ	0xFF7
 10133                           tblptrl	equ	0xFF6
 10134                           tablat	equ	0xFF5
 10135                           prodh	equ	0xFF4
 10136                           prodl	equ	0xFF3
 10137                           intcon	equ	0xFF2
 10138                           indf0	equ	0xFEF
 10139                           postinc0	equ	0xFEE
 10140                           fsr0h	equ	0xFEA
 10141                           fsr0l	equ	0xFE9
 10142                           wreg	equ	0xFE8
 10143                           indf1	equ	0xFE7
 10144                           postinc1	equ	0xFE6
 10145                           postdec1	equ	0xFE5
 10146                           fsr1h	equ	0xFE2
 10147                           fsr1l	equ	0xFE1
 10148                           indf2	equ	0xFDF
 10149                           postinc2	equ	0xFDE
 10150                           postdec2	equ	0xFDD
 10151                           plusw2	equ	0xFDB
 10152                           fsr2h	equ	0xFDA
 10153                           fsr2l	equ	0xFD9
 10154                           status	equ	0xFD8
 10155                           
 10156 ;; *************** function _memcpy *****************
 10157 ;; Defined at:
 10158 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
 10159 ;; Parameters:    Size  Location     Type
 10160 ;;  d1              2    0[BANK0 ] PTR void 
 10161 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10162 ;;  s1              2    2[BANK0 ] PTR const void 
 10163 ;;		 -> vscpData(8), cmdbuf(80), 
 10164 ;;  n               2    4[BANK0 ] unsigned int 
 10165 ;; Auto vars:     Size  Location     Type
 10166 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 10167 ;;		 -> vscpData(8), cmdbuf(80), 
 10168 ;;  d               2    6[BANK0 ] PTR unsigned char 
 10169 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  2    0[BANK0 ] PTR void 
 10172 ;; Registers used:
 10173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10174 ;; Tracked objects:
 10175 ;;		On entry : F/0
 10176 ;;		On exit  : F/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10179 ;;      Params:         0       6       0       0       0       0       0
 10180 ;;      Locals:         0       4       0       0       0       0       0
 10181 ;;      Temps:          0       0       0       0       0       0       0
 10182 ;;      Totals:         0      10       0       0       0       0       0
 10183 ;;Total ram usage:       10 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    3
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_doModeSLCAN
 10190 ;;		_receiveVSCPModeCanalMsg
 10191 ;; This function uses a non-reentrant model
 10192 ;;
 10193                           
 10194                           	psect	text13
 10195  00131E                     __ptext13:
 10196                           	opt stack 0
 10197  00131E                     _memcpy:
 10198                           	opt stack 25
 10199                           
 10200                           ; BSR set to: 0
 10201                           
 10202                           ;incstack = 0
 10203                           ;incstack = 0
 10204  00131E  C062  F068         	movff	memcpy@s1,memcpy@s
 10205  001322  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
 10206  001326  C060  F066         	movff	memcpy@d1,memcpy@d
 10207  00132A  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
 10208  00132E  D00E               	goto	l16860
 10209  001330                     l16854:
 10210                           
 10211                           ; BSR set to: 0
 10212  001330  C068  FFD9         	movff	memcpy@s,fsr2l
 10213  001334  C069  FFDA         	movff	memcpy@s+1,fsr2h
 10214  001338  C066  FFE1         	movff	memcpy@d,fsr1l
 10215  00133C  C067  FFE2         	movff	memcpy@d+1,fsr1h
 10216  001340  CFDF FFE7          	movff	indf2,indf1
 10217                           
 10218                           ; BSR set to: 0
 10219  001344  4B68               	infsnz	memcpy@s& (0+255),f,b
 10220  001346  2B69               	incf	(memcpy@s+1)& (0+255),f,b
 10221                           
 10222                           ; BSR set to: 0
 10223  001348  4B66               	infsnz	memcpy@d& (0+255),f,b
 10224  00134A  2B67               	incf	(memcpy@d+1)& (0+255),f,b
 10225  00134C                     l16860:
 10226                           
 10227                           ; BSR set to: 0
 10228  00134C  0764               	decf	memcpy@n& (0+255),f,b
 10229  00134E  A0D8               	btfss	status,0,c
 10230  001350  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10231  001352  0100               	movlb	0	; () banked
 10232  001354  2964               	incf	memcpy@n& (0+255),w,b
 10233  001356  B4D8               	btfsc	status,2,c
 10234  001358  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10235  00135A  B4D8               	btfsc	status,2,c
 10236                           
 10237                           ; BSR set to: 0
 10238  00135C  0012               	return	
 10239  00135E  D7E8               	goto	l16854
 10240  001360                     __end_of_memcpy:
 10241                           	opt stack 0
 10242                           tblptru	equ	0xFF8
 10243                           tblptrh	equ	0xFF7
 10244                           tblptrl	equ	0xFF6
 10245                           tablat	equ	0xFF5
 10246                           prodh	equ	0xFF4
 10247                           prodl	equ	0xFF3
 10248                           intcon	equ	0xFF2
 10249                           indf0	equ	0xFEF
 10250                           postinc0	equ	0xFEE
 10251                           fsr0h	equ	0xFEA
 10252                           fsr0l	equ	0xFE9
 10253                           wreg	equ	0xFE8
 10254                           indf1	equ	0xFE7
 10255                           postinc1	equ	0xFE6
 10256                           postdec1	equ	0xFE5
 10257                           fsr1h	equ	0xFE2
 10258                           fsr1l	equ	0xFE1
 10259                           indf2	equ	0xFDF
 10260                           postinc2	equ	0xFDE
 10261                           postdec2	equ	0xFDD
 10262                           plusw2	equ	0xFDB
 10263                           fsr2h	equ	0xFDA
 10264                           fsr2l	equ	0xFD9
 10265                           status	equ	0xFD8
 10266                           
 10267 ;; *************** function _sendVSCPDriverAck *****************
 10268 ;; Defined at:
 10269 ;;		line 1803 in file "main.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;		None
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  crc             1   15[BANK0 ] unsigned char 
 10274 ;; Return value:  Size  Location     Type
 10275 ;;		None               void
 10276 ;; Registers used:
 10277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10278 ;; Tracked objects:
 10279 ;;		On entry : E/1
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10283 ;;      Params:         0       0       0       0       0       0       0
 10284 ;;      Locals:         0       1       0       0       0       0       0
 10285 ;;      Temps:          0       0       0       0       0       0       0
 10286 ;;      Totals:         0       1       0       0       0       0       0
 10287 ;;Total ram usage:        1 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    6
 10290 ;; This function calls:
 10291 ;;		_WriteUSART
 10292 ;;		_sendEscapedUartData
 10293 ;;		_crc8
 10294 ;; This function is called by:
 10295 ;;		_doModeVscp
 10296 ;; This function uses a non-reentrant model
 10297 ;;
 10298                           
 10299                           	psect	text14
 10300  001E9E                     __ptext14:
 10301                           	opt stack 0
 10302  001E9E                     _sendVSCPDriverAck:
 10303                           	opt stack 22
 10304                           
 10305                           ;main.c: 1804: uint8_t crc = 0;
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;incstack = 0
 10309                           ;incstack = 0
 10310  001E9E  0100               	movlb	0	; () banked
 10311  001EA0  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
 10312  001EA2                     l874:
 10313  001EA2  A2AC               	btfss	4012,1,c	;volatile
 10314  001EA4  D7FE               	goto	l874
 10315                           
 10316                           ;main.c: 1808: WriteUSART(0x10);
 10317  001EA6  0E10               	movlw	16
 10318  001EA8  ECD5  F007         	call	_WriteUSART
 10319  001EAC                     l877:
 10320  001EAC  A2AC               	btfss	4012,1,c	;volatile
 10321  001EAE  D7FE               	goto	l877
 10322                           
 10323                           ;main.c: 1810: WriteUSART(0x02);
 10324  001EB0  0E02               	movlw	2
 10325  001EB2  ECD5  F007         	call	_WriteUSART
 10326  001EB6                     l880:
 10327  001EB6  A2AC               	btfss	4012,1,c	;volatile
 10328  001EB8  D7FE               	goto	l880
 10329                           
 10330                           ;main.c: 1814: WriteUSART(251);
 10331  001EBA  0EFB               	movlw	251
 10332  001EBC  ECD5  F007         	call	_WriteUSART
 10333                           
 10334                           ;main.c: 1815: crc8(&crc, 251);
 10335  001EC0  0100               	movlb	0	; () banked
 10336  001EC2  0E00               	movlw	high sendVSCPDriverAck@crc
 10337  001EC4  6F68               	movwf	(?_crc8+1)& (0+255),b
 10338  001EC6  0E6F               	movlw	low sendVSCPDriverAck@crc
 10339  001EC8  6F67               	movwf	?_crc8& (0+255),b
 10340  001ECA  0EFB               	movlw	251
 10341  001ECC  6F69               	movwf	(?_crc8+2)& (0+255),b
 10342  001ECE  ECB9  F008         	call	_crc8	;wreg free
 10343  001ED2                     l883:
 10344  001ED2  A2AC               	btfss	4012,1,c	;volatile
 10345  001ED4  D7FE               	goto	l883
 10346                           
 10347                           ;main.c: 1819: WriteUSART(0);
 10348  001ED6  0E00               	movlw	0
 10349  001ED8  ECD5  F007         	call	_WriteUSART
 10350                           
 10351                           ;main.c: 1820: crc8(&crc, 0);
 10352  001EDC  D829               	call	PL44	;call to abstracted procedure
 10353  001EDE  ECB9  F008         	call	_crc8	;wreg free
 10354                           
 10355                           ; BSR set to: 0
 10356                           ;main.c: 1823: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10357  001EE2  0E00               	movlw	high sendVSCPDriverAck@crc
 10358  001EE4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10359  001EE6  0E6F               	movlw	low sendVSCPDriverAck@crc
 10360  001EE8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10361  001EEA  0101               	movlb	1	; () banked
 10362  001EEC  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 10363  001EEE  EC13  F00B         	call	_sendEscapedUartData
 10364  001EF2                     l886:
 10365  001EF2  A2AC               	btfss	4012,1,c	;volatile
 10366  001EF4  D7FE               	goto	l886
 10367                           
 10368                           ;main.c: 1827: WriteUSART(0);
 10369  001EF6  0E00               	movlw	0
 10370  001EF8  ECD5  F007         	call	_WriteUSART
 10371                           
 10372                           ;main.c: 1828: crc8(&crc, 0);
 10373  001EFC  D819               	call	PL44	;call to abstracted procedure
 10374  001EFE  ECB9  F008         	call	_crc8	;wreg free
 10375  001F02                     l889:
 10376  001F02  A2AC               	btfss	4012,1,c	;volatile
 10377  001F04  D7FE               	goto	l889
 10378                           
 10379                           ;main.c: 1830: WriteUSART(0);
 10380  001F06  0E00               	movlw	0
 10381  001F08  ECD5  F007         	call	_WriteUSART
 10382                           
 10383                           ;main.c: 1831: crc8(&crc, 0);
 10384  001F0C  D811               	call	PL44	;call to abstracted procedure
 10385  001F0E  ECB9  F008         	call	_crc8	;wreg free
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;main.c: 1834: sendEscapedUartData(crc, (0));
 10389  001F12  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10390  001F14  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10391  001F16  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10392  001F18  EC13  F00B         	call	_sendEscapedUartData
 10393  001F1C                     l892:
 10394  001F1C  A2AC               	btfss	4012,1,c	;volatile
 10395  001F1E  D7FE               	goto	l892
 10396                           
 10397                           ;main.c: 1838: WriteUSART(0x10);
 10398  001F20  0E10               	movlw	16
 10399  001F22  ECD5  F007         	call	_WriteUSART
 10400  001F26                     l895:
 10401  001F26  A2AC               	btfss	4012,1,c	;volatile
 10402  001F28  D7FE               	goto	l895
 10403                           
 10404                           ;main.c: 1840: WriteUSART(0x03);
 10405  001F2A  0E03               	movlw	3
 10406  001F2C  EFD5  F007         	goto	_WriteUSART
 10407  001F30                     __end_of_sendVSCPDriverAck:
 10408                           	opt stack 0
 10409  001F30                     PL44:
 10410                           	opt stack 22
 10411  001F30  0100               	movlb	0	; () banked
 10412  001F32  0E00               	movlw	high sendVSCPDriverAck@crc
 10413  001F34  6F68               	movwf	(?_crc8+1)& (0+255),b
 10414  001F36  0E6F               	movlw	low sendVSCPDriverAck@crc
 10415  001F38  6F67               	movwf	?_crc8& (0+255),b
 10416  001F3A  6B69               	clrf	(?_crc8+2)& (0+255),b
 10417  001F3C  0C00               	retlw	0
 10418  001F3E                     __end_ofPL44:
 10419                           	opt stack 0
 10420                           tblptru	equ	0xFF8
 10421                           tblptrh	equ	0xFF7
 10422                           tblptrl	equ	0xFF6
 10423                           tablat	equ	0xFF5
 10424                           prodh	equ	0xFF4
 10425                           prodl	equ	0xFF3
 10426                           intcon	equ	0xFF2
 10427                           indf0	equ	0xFEF
 10428                           postinc0	equ	0xFEE
 10429                           fsr0h	equ	0xFEA
 10430                           fsr0l	equ	0xFE9
 10431                           wreg	equ	0xFE8
 10432                           indf1	equ	0xFE7
 10433                           postinc1	equ	0xFE6
 10434                           postdec1	equ	0xFE5
 10435                           fsr1h	equ	0xFE2
 10436                           fsr1l	equ	0xFE1
 10437                           indf2	equ	0xFDF
 10438                           postinc2	equ	0xFDE
 10439                           postdec2	equ	0xFDD
 10440                           plusw2	equ	0xFDB
 10441                           fsr2h	equ	0xFDA
 10442                           fsr2l	equ	0xFD9
 10443                           status	equ	0xFD8
 10444                           
 10445 ;; *************** function _sendVSCPDriverNack *****************
 10446 ;; Defined at:
 10447 ;;		line 1847 in file "main.c"
 10448 ;; Parameters:    Size  Location     Type
 10449 ;;		None
 10450 ;; Auto vars:     Size  Location     Type
 10451 ;;  crc             1   15[BANK0 ] unsigned char 
 10452 ;; Return value:  Size  Location     Type
 10453 ;;		None               void
 10454 ;; Registers used:
 10455 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10456 ;; Tracked objects:
 10457 ;;		On entry : E/0
 10458 ;;		On exit  : 0/0
 10459 ;;		Unchanged: 0/0
 10460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10461 ;;      Params:         0       0       0       0       0       0       0
 10462 ;;      Locals:         0       1       0       0       0       0       0
 10463 ;;      Temps:          0       0       0       0       0       0       0
 10464 ;;      Totals:         0       1       0       0       0       0       0
 10465 ;;Total ram usage:        1 bytes
 10466 ;; Hardware stack levels used:    1
 10467 ;; Hardware stack levels required when called:    6
 10468 ;; This function calls:
 10469 ;;		_WriteUSART
 10470 ;;		_sendEscapedUartData
 10471 ;;		_crc8
 10472 ;; This function is called by:
 10473 ;;		_doModeVscp
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           	psect	text15
 10478  001DFE                     __ptext15:
 10479                           	opt stack 0
 10480  001DFE                     _sendVSCPDriverNack:
 10481                           	opt stack 22
 10482                           
 10483                           ;main.c: 1848: uint8_t crc = 0;
 10484                           
 10485                           ;incstack = 0
 10486                           ;incstack = 0
 10487  001DFE  0100               	movlb	0	; () banked
 10488  001E00  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10489  001E02                     l901:
 10490  001E02  A2AC               	btfss	4012,1,c	;volatile
 10491  001E04  D7FE               	goto	l901
 10492                           
 10493                           ;main.c: 1852: WriteUSART(0x10);
 10494  001E06  0E10               	movlw	16
 10495  001E08  ECD5  F007         	call	_WriteUSART
 10496  001E0C                     l904:
 10497  001E0C  A2AC               	btfss	4012,1,c	;volatile
 10498  001E0E  D7FE               	goto	l904
 10499                           
 10500                           ;main.c: 1854: WriteUSART(0x02);
 10501  001E10  0E02               	movlw	2
 10502  001E12  ECD5  F007         	call	_WriteUSART
 10503  001E16                     l907:
 10504  001E16  A2AC               	btfss	4012,1,c	;volatile
 10505  001E18  D7FE               	goto	l907
 10506                           
 10507                           ;main.c: 1858: WriteUSART(252);
 10508  001E1A  0EFC               	movlw	252
 10509  001E1C  ECD5  F007         	call	_WriteUSART
 10510                           
 10511                           ;main.c: 1859: crc8(&crc, 252);
 10512  001E20  0100               	movlb	0	; () banked
 10513  001E22  0E00               	movlw	high sendVSCPDriverNack@crc
 10514  001E24  6F68               	movwf	(?_crc8+1)& (0+255),b
 10515  001E26  0E6F               	movlw	low sendVSCPDriverNack@crc
 10516  001E28  6F67               	movwf	?_crc8& (0+255),b
 10517  001E2A  0EFC               	movlw	252
 10518  001E2C  6F69               	movwf	(?_crc8+2)& (0+255),b
 10519  001E2E  ECB9  F008         	call	_crc8	;wreg free
 10520  001E32                     l910:
 10521  001E32  A2AC               	btfss	4012,1,c	;volatile
 10522  001E34  D7FE               	goto	l910
 10523                           
 10524                           ;main.c: 1863: WriteUSART(0);
 10525  001E36  0E00               	movlw	0
 10526  001E38  ECD5  F007         	call	_WriteUSART
 10527                           
 10528                           ;main.c: 1864: crc8(&crc, 0);
 10529  001E3C  D829               	call	PL48	;call to abstracted procedure
 10530  001E3E  ECB9  F008         	call	_crc8	;wreg free
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;main.c: 1867: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10534  001E42  0E00               	movlw	high sendVSCPDriverNack@crc
 10535  001E44  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10536  001E46  0E6F               	movlw	low sendVSCPDriverNack@crc
 10537  001E48  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10538  001E4A  0101               	movlb	1	; () banked
 10539  001E4C  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 10540  001E4E  EC13  F00B         	call	_sendEscapedUartData
 10541  001E52                     l913:
 10542  001E52  A2AC               	btfss	4012,1,c	;volatile
 10543  001E54  D7FE               	goto	l913
 10544                           
 10545                           ;main.c: 1871: WriteUSART(0);
 10546  001E56  0E00               	movlw	0
 10547  001E58  ECD5  F007         	call	_WriteUSART
 10548                           
 10549                           ;main.c: 1872: crc8(&crc, 0);
 10550  001E5C  D819               	call	PL48	;call to abstracted procedure
 10551  001E5E  ECB9  F008         	call	_crc8	;wreg free
 10552  001E62                     l916:
 10553  001E62  A2AC               	btfss	4012,1,c	;volatile
 10554  001E64  D7FE               	goto	l916
 10555                           
 10556                           ;main.c: 1874: WriteUSART(0);
 10557  001E66  0E00               	movlw	0
 10558  001E68  ECD5  F007         	call	_WriteUSART
 10559                           
 10560                           ;main.c: 1875: crc8(&crc, 0);
 10561  001E6C  D811               	call	PL48	;call to abstracted procedure
 10562  001E6E  ECB9  F008         	call	_crc8	;wreg free
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;main.c: 1878: sendEscapedUartData(crc, (0));
 10566  001E72  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10567  001E74  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10568  001E76  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10569  001E78  EC13  F00B         	call	_sendEscapedUartData
 10570  001E7C                     l919:
 10571  001E7C  A2AC               	btfss	4012,1,c	;volatile
 10572  001E7E  D7FE               	goto	l919
 10573                           
 10574                           ;main.c: 1882: WriteUSART(0x10);
 10575  001E80  0E10               	movlw	16
 10576  001E82  ECD5  F007         	call	_WriteUSART
 10577  001E86                     l922:
 10578  001E86  A2AC               	btfss	4012,1,c	;volatile
 10579  001E88  D7FE               	goto	l922
 10580                           
 10581                           ;main.c: 1884: WriteUSART(0x03);
 10582  001E8A  0E03               	movlw	3
 10583  001E8C  EFD5  F007         	goto	_WriteUSART
 10584  001E90                     __end_of_sendVSCPDriverNack:
 10585                           	opt stack 0
 10586  001E90                     PL48:
 10587                           	opt stack 22
 10588  001E90  0100               	movlb	0	; () banked
 10589  001E92  0E00               	movlw	high sendVSCPDriverNack@crc
 10590  001E94  6F68               	movwf	(?_crc8+1)& (0+255),b
 10591  001E96  0E6F               	movlw	low sendVSCPDriverNack@crc
 10592  001E98  6F67               	movwf	?_crc8& (0+255),b
 10593  001E9A  6B69               	clrf	(?_crc8+2)& (0+255),b
 10594  001E9C  0C00               	retlw	0
 10595  001E9E                     __end_ofPL48:
 10596                           	opt stack 0
 10597                           tblptru	equ	0xFF8
 10598                           tblptrh	equ	0xFF7
 10599                           tblptrl	equ	0xFF6
 10600                           tablat	equ	0xFF5
 10601                           prodh	equ	0xFF4
 10602                           prodl	equ	0xFF3
 10603                           intcon	equ	0xFF2
 10604                           indf0	equ	0xFEF
 10605                           postinc0	equ	0xFEE
 10606                           fsr0h	equ	0xFEA
 10607                           fsr0l	equ	0xFE9
 10608                           wreg	equ	0xFE8
 10609                           indf1	equ	0xFE7
 10610                           postinc1	equ	0xFE6
 10611                           postdec1	equ	0xFE5
 10612                           fsr1h	equ	0xFE2
 10613                           fsr1l	equ	0xFE1
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           plusw2	equ	0xFDB
 10618                           fsr2h	equ	0xFDA
 10619                           fsr2l	equ	0xFD9
 10620                           status	equ	0xFD8
 10621                           
 10622 ;; *************** function _calcCRC *****************
 10623 ;; Defined at:
 10624 ;;		line 2607 in file "main.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10627 ;;		 -> cmdbuf(80), 
 10628 ;;  len             1   14[BANK0 ] unsigned char 
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;  crc             1   16[BANK0 ] unsigned char 
 10631 ;;  j               1   15[BANK0 ] unsigned char 
 10632 ;; Return value:  Size  Location     Type
 10633 ;;                  1    wreg      unsigned char 
 10634 ;; Registers used:
 10635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10636 ;; Tracked objects:
 10637 ;;		On entry : F/0
 10638 ;;		On exit  : F/0
 10639 ;;		Unchanged: 0/0
 10640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10641 ;;      Params:         0       3       0       0       0       0       0
 10642 ;;      Locals:         0       2       0       0       0       0       0
 10643 ;;      Temps:          0       0       0       0       0       0       0
 10644 ;;      Totals:         0       5       0       0       0       0       0
 10645 ;;Total ram usage:        5 bytes
 10646 ;; Hardware stack levels used:    1
 10647 ;; Hardware stack levels required when called:    5
 10648 ;; This function calls:
 10649 ;;		_crc8
 10650 ;; This function is called by:
 10651 ;;		_doModeVscp
 10652 ;; This function uses a non-reentrant model
 10653 ;;
 10654                           
 10655                           	psect	text16
 10656  0010A6                     __ptext16:
 10657                           	opt stack 0
 10658  0010A6                     _calcCRC:
 10659                           	opt stack 23
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;main.c: 2608: uint8_t j;
 10663                           ;main.c: 2609: uint8_t crc = 0;
 10664                           
 10665                           ;incstack = 0
 10666                           ;incstack = 0
 10667  0010A6  6B70               	clrf	calcCRC@crc& (0+255),b
 10668                           
 10669                           ;main.c: 2611: for (j = 0; j < len; j++) {
 10670  0010A8  6B6F               	clrf	calcCRC@j& (0+255),b
 10671  0010AA  D00F               	goto	l16576
 10672  0010AC                     l16572:
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;main.c: 2612: crc8(&crc, p[j]);
 10676  0010AC  0E00               	movlw	high calcCRC@crc
 10677  0010AE  6F68               	movwf	(?_crc8+1)& (0+255),b
 10678  0010B0  0E70               	movlw	low calcCRC@crc
 10679  0010B2  6F67               	movwf	?_crc8& (0+255),b
 10680  0010B4  516F               	movf	calcCRC@j& (0+255),w,b
 10681  0010B6  256C               	addwf	calcCRC@p& (0+255),w,b
 10682  0010B8  6ED9               	movwf	fsr2l,c
 10683  0010BA  0E00               	movlw	0
 10684  0010BC  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10685  0010BE  6EDA               	movwf	fsr2h,c
 10686  0010C0  50DF               	movf	indf2,w,c
 10687  0010C2  6F69               	movwf	(?_crc8+2)& (0+255),b
 10688  0010C4  ECB9  F008         	call	_crc8	;wreg free
 10689                           
 10690                           ; BSR set to: 0
 10691  0010C8  2B6F               	incf	calcCRC@j& (0+255),f,b
 10692  0010CA                     l16576:
 10693                           
 10694                           ; BSR set to: 0
 10695  0010CA  516E               	movf	calcCRC@len& (0+255),w,b
 10696  0010CC  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10697  0010CE  E3EE               	bnc	l16572
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;main.c: 2613: }
 10701                           ;main.c: 2615: return crc;
 10702  0010D0  5170               	movf	calcCRC@crc& (0+255),w,b
 10703                           
 10704                           ; BSR set to: 0
 10705  0010D2  0012               	return	
 10706  0010D4                     __end_of_calcCRC:
 10707                           	opt stack 0
 10708                           tblptru	equ	0xFF8
 10709                           tblptrh	equ	0xFF7
 10710                           tblptrl	equ	0xFF6
 10711                           tablat	equ	0xFF5
 10712                           prodh	equ	0xFF4
 10713                           prodl	equ	0xFF3
 10714                           intcon	equ	0xFF2
 10715                           indf0	equ	0xFEF
 10716                           postinc0	equ	0xFEE
 10717                           fsr0h	equ	0xFEA
 10718                           fsr0l	equ	0xFE9
 10719                           wreg	equ	0xFE8
 10720                           indf1	equ	0xFE7
 10721                           postinc1	equ	0xFE6
 10722                           postdec1	equ	0xFE5
 10723                           fsr1h	equ	0xFE2
 10724                           fsr1l	equ	0xFE1
 10725                           indf2	equ	0xFDF
 10726                           postinc2	equ	0xFDE
 10727                           postdec2	equ	0xFDD
 10728                           plusw2	equ	0xFDB
 10729                           fsr2h	equ	0xFDA
 10730                           fsr2l	equ	0xFD9
 10731                           status	equ	0xFD8
 10732                           
 10733 ;; *************** function _receiveSendEventCANAL *****************
 10734 ;; Defined at:
 10735 ;;		line 1999 in file "main.c"
 10736 ;; Parameters:    Size  Location     Type
 10737 ;;		None
 10738 ;; Auto vars:     Size  Location     Type
 10739 ;;  crc             1   33[BANK0 ] unsigned char 
 10740 ;;  data            8   19[BANK0 ] unsigned char [8]
 10741 ;;  id              4   28[BANK0 ] unsigned long 
 10742 ;;  dlc             1   32[BANK0 ] unsigned char 
 10743 ;;  i               1   27[BANK0 ] unsigned char 
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  1    wreg      enum E15660
 10746 ;; Registers used:
 10747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10748 ;; Tracked objects:
 10749 ;;		On entry : F/1
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10753 ;;      Params:         0       0       0       0       0       0       0
 10754 ;;      Locals:         0      15       0       0       0       0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0
 10756 ;;      Totals:         0      15       0       0       0       0       0
 10757 ;;Total ram usage:       15 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    6
 10760 ;; This function calls:
 10761 ;;		_WriteUSART
 10762 ;;		_sendEscapedUartData
 10763 ;;		_crc8
 10764 ;;		_getCANFrame
 10765 ;; This function is called by:
 10766 ;;		_doModeVscp
 10767 ;; This function uses a non-reentrant model
 10768 ;;
 10769                           
 10770                           	psect	text17
 10771  00311C                     __ptext17:
 10772                           	opt stack 0
 10773  00311C                     _receiveSendEventCANAL:
 10774                           	opt stack 22
 10775                           
 10776                           ; BSR set to: 1
 10777                           ;main.c: 2000: uint8_t i;
 10778                           ;main.c: 2001: uint32_t id;
 10779                           ;main.c: 2002: uint8_t dlc;
 10780                           ;main.c: 2003: uint8_t data[8];
 10781                           ;main.c: 2005: if ( getCANFrame( &id, &dlc, &data ) ) {
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;incstack = 0
 10785                           ;incstack = 0
 10786  00311C  0100               	movlb	0	; () banked
 10787  00311E  0E00               	movlw	high receiveSendEventCANAL@dlc
 10788  003120  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10789  003122  0E80               	movlw	low receiveSendEventCANAL@dlc
 10790  003124  6F6E               	movwf	?_getCANFrame& (0+255),b
 10791  003126  0E00               	movlw	high receiveSendEventCANAL@data
 10792  003128  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 10793  00312A  0E73               	movlw	low receiveSendEventCANAL@data
 10794  00312C  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10795  00312E  0E7C               	movlw	receiveSendEventCANAL@id& (0+255)
 10796  003130  ECF3  F00F         	call	_getCANFrame
 10797  003134  0900               	iorlw	0
 10798  003136  E101 D092          	bz	l1017
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;main.c: 2007: uint8_t crc = 0;
 10802  00313A  6B81               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;main.c: 2010: cntRxFrames++;
 10806  00313C  0101               	movlb	1	; () banked
 10807  00313E  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10808  003140  0E00               	movlw	0
 10809  003142  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10810  003144  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10811  003146  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10812                           
 10813                           ;main.c: 2011: cntRxBytes += dlc;
 10814  003148  0100               	movlb	0	; () banked
 10815  00314A  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10816  00314C  0101               	movlb	1	; () banked
 10817  00314E  2708               	addwf	_cntRxBytes& (0+255),f,b
 10818  003150  0E00               	movlw	0
 10819  003152  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10820  003154  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10821  003156  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10822  003158                     l996:
 10823                           
 10824                           ; BSR set to: 1
 10825  003158  A2AC               	btfss	4012,1,c	;volatile
 10826  00315A  D7FE               	goto	l996
 10827                           
 10828                           ; BSR set to: 1
 10829                           ;main.c: 2015: WriteUSART(0x10);
 10830  00315C  0E10               	movlw	16
 10831  00315E  ECD5  F007         	call	_WriteUSART
 10832  003162                     l999:
 10833  003162  A2AC               	btfss	4012,1,c	;volatile
 10834  003164  D7FE               	goto	l999
 10835                           
 10836                           ;main.c: 2017: WriteUSART(0x02);
 10837  003166  0E02               	movlw	2
 10838  003168  ECD5  F007         	call	_WriteUSART
 10839  00316C                     l1002:
 10840  00316C  A2AC               	btfss	4012,1,c	;volatile
 10841  00316E  D7FE               	goto	l1002
 10842                           
 10843                           ;main.c: 2021: WriteUSART(2);
 10844  003170  0E02               	movlw	2
 10845  003172  ECD5  F007         	call	_WriteUSART
 10846                           
 10847                           ;main.c: 2022: crc8(&crc, 2);
 10848  003176  0100               	movlb	0	; () banked
 10849  003178  0E00               	movlw	high receiveSendEventCANAL@crc
 10850  00317A  6F68               	movwf	(?_crc8+1)& (0+255),b
 10851  00317C  0E81               	movlw	low receiveSendEventCANAL@crc
 10852  00317E  6F67               	movwf	?_crc8& (0+255),b
 10853  003180  0E02               	movlw	2
 10854  003182  6F69               	movwf	(?_crc8+2)& (0+255),b
 10855  003184  ECB9  F008         	call	_crc8	;wreg free
 10856  003188                     l1005:
 10857  003188  A2AC               	btfss	4012,1,c	;volatile
 10858  00318A  D7FE               	goto	l1005
 10859                           
 10860                           ;main.c: 2026: WriteUSART(0);
 10861  00318C  0E00               	movlw	0
 10862  00318E  ECD5  F007         	call	_WriteUSART
 10863                           
 10864                           ;main.c: 2027: crc8(&crc, 0);
 10865  003192  0100               	movlb	0	; () banked
 10866  003194  0E00               	movlw	high receiveSendEventCANAL@crc
 10867  003196  6F68               	movwf	(?_crc8+1)& (0+255),b
 10868  003198  0E81               	movlw	low receiveSendEventCANAL@crc
 10869  00319A  6F67               	movwf	?_crc8& (0+255),b
 10870  00319C  0E00               	movlw	0
 10871  00319E  6B69               	clrf	(?_crc8+2)& (0+255),b
 10872  0031A0  ECB9  F008         	call	_crc8	;wreg free
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;main.c: 2030: sendEscapedUartData(sequencyno, &crc);
 10876  0031A4  0E00               	movlw	high receiveSendEventCANAL@crc
 10877  0031A6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10878  0031A8  0E81               	movlw	low receiveSendEventCANAL@crc
 10879  0031AA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10880  0031AC  5036               	movf	_sequencyno,w,c
 10881  0031AE  EC13  F00B         	call	_sendEscapedUartData
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;main.c: 2031: sequencyno++;
 10885  0031B2  2A36               	incf	_sequencyno,f,c
 10886                           
 10887                           ; BSR set to: 0
 10888                           ;main.c: 2034: sendEscapedUartData(0, &crc);
 10889  0031B4  0E00               	movlw	high receiveSendEventCANAL@crc
 10890  0031B6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10891  0031B8  0E81               	movlw	low receiveSendEventCANAL@crc
 10892  0031BA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10893  0031BC  0E00               	movlw	0
 10894  0031BE  EC13  F00B         	call	_sendEscapedUartData
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;main.c: 2035: sendEscapedUartData(5 + dlc, &crc);
 10898  0031C2  0E00               	movlw	high receiveSendEventCANAL@crc
 10899  0031C4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10900  0031C6  0E81               	movlw	low receiveSendEventCANAL@crc
 10901  0031C8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10902  0031CA  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10903  0031CC  0F05               	addlw	5
 10904  0031CE  EC13  F00B         	call	_sendEscapedUartData
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;main.c: 2041: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10908  0031D2  0E00               	movlw	high receiveSendEventCANAL@crc
 10909  0031D4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10910  0031D6  0E81               	movlw	low receiveSendEventCANAL@crc
 10911  0031D8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10912  0031DA  0100               	movlb	0	; () banked
 10913  0031DC  517F               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10914  0031DE  EC13  F00B         	call	_sendEscapedUartData
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;main.c: 2042: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10918  0031E2  0E00               	movlw	high receiveSendEventCANAL@crc
 10919  0031E4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10920  0031E6  0E81               	movlw	low receiveSendEventCANAL@crc
 10921  0031E8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10922  0031EA  0100               	movlb	0	; () banked
 10923  0031EC  517E               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10924  0031EE  EC13  F00B         	call	_sendEscapedUartData
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;main.c: 2043: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10928  0031F2  0E00               	movlw	high receiveSendEventCANAL@crc
 10929  0031F4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10930  0031F6  0E81               	movlw	low receiveSendEventCANAL@crc
 10931  0031F8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10932  0031FA  0100               	movlb	0	; () banked
 10933  0031FC  517D               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10934  0031FE  EC13  F00B         	call	_sendEscapedUartData
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;main.c: 2044: sendEscapedUartData((id & 0xff), &crc);
 10938  003202  0E00               	movlw	high receiveSendEventCANAL@crc
 10939  003204  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10940  003206  0E81               	movlw	low receiveSendEventCANAL@crc
 10941  003208  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10942  00320A  517C               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10943  00320C  EC13  F00B         	call	_sendEscapedUartData
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;main.c: 2047: sendEscapedUartData(dlc, &crc);
 10947  003210  0E00               	movlw	high receiveSendEventCANAL@crc
 10948  003212  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10949  003214  0E81               	movlw	low receiveSendEventCANAL@crc
 10950  003216  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10951  003218  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10952  00321A  EC13  F00B         	call	_sendEscapedUartData
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;main.c: 2050: for (i = 0; i < dlc; i++) {
 10956  00321E  6B7B               	clrf	receiveSendEventCANAL@i& (0+255),b
 10957  003220  D00C               	goto	l16560
 10958  003222                     l16556:
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;main.c: 2051: sendEscapedUartData( data[ i ], &crc );
 10962  003222  0E00               	movlw	high receiveSendEventCANAL@crc
 10963  003224  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10964  003226  0E81               	movlw	low receiveSendEventCANAL@crc
 10965  003228  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10966  00322A  517B               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10967  00322C  0F73               	addlw	low receiveSendEventCANAL@data
 10968  00322E  6ED9               	movwf	fsr2l,c
 10969  003230  6ADA               	clrf	fsr2h,c
 10970  003232  50DF               	movf	indf2,w,c
 10971  003234  EC13  F00B         	call	_sendEscapedUartData
 10972                           
 10973                           ; BSR set to: 0
 10974  003238  2B7B               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10975  00323A                     l16560:
 10976                           
 10977                           ; BSR set to: 0
 10978  00323A  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10979  00323C  5D7B               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10980  00323E  E3F1               	bnc	l16556
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;main.c: 2052: }
 10984                           ;main.c: 2057: sendEscapedUartData(crc, (0));
 10985  003240  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10986  003242  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10987  003244  5181               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10988  003246  EC13  F00B         	call	_sendEscapedUartData
 10989  00324A                     l1011:
 10990  00324A  A2AC               	btfss	4012,1,c	;volatile
 10991  00324C  D7FE               	goto	l1011
 10992                           
 10993                           ;main.c: 2061: WriteUSART(0x10);
 10994  00324E  0E10               	movlw	16
 10995  003250  ECD5  F007         	call	_WriteUSART
 10996  003254                     l1014:
 10997  003254  A2AC               	btfss	4012,1,c	;volatile
 10998  003256  D7FE               	goto	l1014
 10999                           
 11000                           ;main.c: 2063: WriteUSART(0x03);
 11001  003258  0E03               	movlw	3
 11002  00325A  ECD5  F007         	call	_WriteUSART
 11003  00325E                     l1017:
 11004  00325E  0012               	return	
 11005  003260                     __end_of_receiveSendEventCANAL:
 11006                           	opt stack 0
 11007                           tblptru	equ	0xFF8
 11008                           tblptrh	equ	0xFF7
 11009                           tblptrl	equ	0xFF6
 11010                           tablat	equ	0xFF5
 11011                           prodh	equ	0xFF4
 11012                           prodl	equ	0xFF3
 11013                           intcon	equ	0xFF2
 11014                           indf0	equ	0xFEF
 11015                           postinc0	equ	0xFEE
 11016                           fsr0h	equ	0xFEA
 11017                           fsr0l	equ	0xFE9
 11018                           wreg	equ	0xFE8
 11019                           indf1	equ	0xFE7
 11020                           postinc1	equ	0xFE6
 11021                           postdec1	equ	0xFE5
 11022                           fsr1h	equ	0xFE2
 11023                           fsr1l	equ	0xFE1
 11024                           indf2	equ	0xFDF
 11025                           postinc2	equ	0xFDE
 11026                           postdec2	equ	0xFDD
 11027                           plusw2	equ	0xFDB
 11028                           fsr2h	equ	0xFDA
 11029                           fsr2l	equ	0xFD9
 11030                           status	equ	0xFD8
 11031                           
 11032 ;; *************** function _receiveSendMultiEventCANAL *****************
 11033 ;; Defined at:
 11034 ;;		line 2076 in file "main.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;		None
 11037 ;; Auto vars:     Size  Location     Type
 11038 ;;  crc             1   34[BANK0 ] unsigned char 
 11039 ;;  data            8   19[BANK0 ] unsigned char [8]
 11040 ;;  id              4   29[BANK0 ] unsigned long 
 11041 ;;  pos             1   35[BANK0 ] unsigned char 
 11042 ;;  dlc             1   33[BANK0 ] unsigned char 
 11043 ;;  i               1   28[BANK0 ] unsigned char 
 11044 ;;  msgcount        1   27[BANK0 ] unsigned char 
 11045 ;; Return value:  Size  Location     Type
 11046 ;;                  1    wreg      enum E15660
 11047 ;; Registers used:
 11048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11049 ;; Tracked objects:
 11050 ;;		On entry : F/1
 11051 ;;		On exit  : 0/0
 11052 ;;		Unchanged: 0/0
 11053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11054 ;;      Params:         0       0       0       0       0       0       0
 11055 ;;      Locals:         0      17       0       0       0       0       0
 11056 ;;      Temps:          0       0       0       0       0       0       0
 11057 ;;      Totals:         0      17       0       0       0       0       0
 11058 ;;Total ram usage:       17 bytes
 11059 ;; Hardware stack levels used:    1
 11060 ;; Hardware stack levels required when called:    6
 11061 ;; This function calls:
 11062 ;;		_WriteUSART
 11063 ;;		_sendEscapedUartData
 11064 ;;		_crc8
 11065 ;;		_getCANFrame
 11066 ;; This function is called by:
 11067 ;;		_doModeVscp
 11068 ;; This function uses a non-reentrant model
 11069 ;;
 11070                           
 11071                           	psect	text18
 11072  0033CE                     __ptext18:
 11073                           	opt stack 0
 11074  0033CE                     _receiveSendMultiEventCANAL:
 11075                           	opt stack 22
 11076                           
 11077                           ; BSR set to: 1
 11078                           ;main.c: 2077: uint8_t i;
 11079                           ;main.c: 2078: uint8_t pos=0;
 11080                           
 11081                           ;incstack = 0
 11082                           ;incstack = 0
 11083  0033CE  0100               	movlb	0	; () banked
 11084  0033D0  6B83               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 11085                           
 11086                           ;main.c: 2079: uint8_t msgcount=0;
 11087  0033D2  6B7B               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11088                           
 11089                           ; BSR set to: 0
 11090                           ;main.c: 2080: uint32_t id;
 11091                           ;main.c: 2081: uint8_t dlc;
 11092                           ;main.c: 2082: uint8_t data[8];
 11093                           ;main.c: 2084: if ( getCANFrame( &id, &dlc, &data ) ) {
 11094  0033D4  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11095  0033D6  D8B6               	call	PL80	;call to abstracted procedure
 11096  0033D8  ECF3  F00F         	call	_getCANFrame
 11097  0033DC  0900               	iorlw	0
 11098  0033DE  E101 D0A8          	bz	l1049
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;main.c: 2086: uint8_t crc = 0;
 11102  0033E2  6B82               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;main.c: 2089: cntRxFrames++;
 11106  0033E4  0101               	movlb	1	; () banked
 11107  0033E6  2B0C               	incf	_cntRxFrames& (0+255),f,b
 11108  0033E8  0E00               	movlw	0
 11109  0033EA  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11110  0033EC  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11111  0033EE  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11112                           
 11113                           ;main.c: 2090: cntRxBytes += dlc;
 11114  0033F0  0100               	movlb	0	; () banked
 11115  0033F2  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11116  0033F4  0101               	movlb	1	; () banked
 11117  0033F6  2708               	addwf	_cntRxBytes& (0+255),f,b
 11118  0033F8  0E00               	movlw	0
 11119  0033FA  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11120  0033FC  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11121  0033FE  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11122  003400                     l1021:
 11123                           
 11124                           ; BSR set to: 1
 11125  003400  A2AC               	btfss	4012,1,c	;volatile
 11126  003402  D7FE               	goto	l1021
 11127                           
 11128                           ; BSR set to: 1
 11129                           ;main.c: 2094: WriteUSART(0x10);
 11130  003404  0E10               	movlw	16
 11131  003406  ECD5  F007         	call	_WriteUSART
 11132  00340A                     l1024:
 11133  00340A  A2AC               	btfss	4012,1,c	;volatile
 11134  00340C  D7FE               	goto	l1024
 11135                           
 11136                           ;main.c: 2096: WriteUSART(0x02);
 11137  00340E  0E02               	movlw	2
 11138  003410  ECD5  F007         	call	_WriteUSART
 11139  003414                     l1027:
 11140  003414  A2AC               	btfss	4012,1,c	;volatile
 11141  003416  D7FE               	goto	l1027
 11142                           
 11143                           ;main.c: 2100: WriteUSART(6);
 11144  003418  0E06               	movlw	6
 11145  00341A  ECD5  F007         	call	_WriteUSART
 11146                           
 11147                           ;main.c: 2101: crc8(&crc, 6);
 11148  00341E  0100               	movlb	0	; () banked
 11149  003420  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11150  003422  6F68               	movwf	(?_crc8+1)& (0+255),b
 11151  003424  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11152  003426  6F67               	movwf	?_crc8& (0+255),b
 11153  003428  0E06               	movlw	6
 11154  00342A  6F69               	movwf	(?_crc8+2)& (0+255),b
 11155  00342C  ECB9  F008         	call	_crc8	;wreg free
 11156  003430                     l1030:
 11157  003430  A2AC               	btfss	4012,1,c	;volatile
 11158  003432  D7FE               	goto	l1030
 11159                           
 11160                           ;main.c: 2105: WriteUSART(0);
 11161  003434  0E00               	movlw	0
 11162  003436  ECD5  F007         	call	_WriteUSART
 11163                           
 11164                           ;main.c: 2106: crc8(&crc, 0);
 11165  00343A  0100               	movlb	0	; () banked
 11166  00343C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11167  00343E  6F68               	movwf	(?_crc8+1)& (0+255),b
 11168  003440  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11169  003442  6F67               	movwf	?_crc8& (0+255),b
 11170  003444  0E00               	movlw	0
 11171  003446  6B69               	clrf	(?_crc8+2)& (0+255),b
 11172  003448  ECB9  F008         	call	_crc8	;wreg free
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;main.c: 2109: sendEscapedUartData(sequencyno, &crc);
 11176  00344C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11177  00344E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11178  003450  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11179  003452  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11180  003454  5036               	movf	_sequencyno,w,c
 11181  003456  EC13  F00B         	call	_sendEscapedUartData
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;main.c: 2110: sequencyno++;
 11185  00345A  2A36               	incf	_sequencyno,f,c
 11186  00345C                     l16462:
 11187                           
 11188                           ; BSR set to: 0
 11189                           ;main.c: 2120: wrkbuf[ pos ] = (id >> 24) & 0xff;
 11190  00345C  0E7D               	movlw	low _wrkbuf
 11191  00345E  0100               	movlb	0	; () banked
 11192  003460  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11193  003462  6ED9               	movwf	fsr2l,c
 11194  003464  6ADA               	clrf	fsr2h,c
 11195  003466  0E01               	movlw	high _wrkbuf
 11196  003468  22DA               	addwfc	fsr2h,f,c
 11197  00346A  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;main.c: 2121: pos++;
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;main.c: 2122: wrkbuf[ pos ] = (id >> 16) & 0xff;
 11204  00346E  D862               	call	PL26	;call to abstracted procedure
 11205  003470  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;main.c: 2123: pos++;
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;main.c: 2124: wrkbuf[ pos ] = (id >> 8) & 0xff;
 11212  003474  D85F               	call	PL26	;call to abstracted procedure
 11213  003476  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 11214                           
 11215                           ; BSR set to: 0
 11216                           ;main.c: 2125: pos++;
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;main.c: 2126: wrkbuf[ pos ] = id & 0xff;
 11220  00347A  D85C               	call	PL26	;call to abstracted procedure
 11221  00347C  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 11222                           
 11223                           ; BSR set to: 0
 11224                           ;main.c: 2127: pos++;
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;main.c: 2130: wrkbuf[ pos ] = dlc;
 11228  003480  D859               	call	PL26	;call to abstracted procedure
 11229  003482  C081  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 11230                           
 11231                           ; BSR set to: 0
 11232                           ;main.c: 2131: pos++;
 11233  003486  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;main.c: 2134: for (i = 0; i < dlc; i++) {
 11237  003488  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11238  00348A  D00F               	goto	l16490
 11239  00348C                     l16484:
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;main.c: 2135: wrkbuf[ pos ] = data[ i ];
 11243  00348C  517C               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11244  00348E  0F73               	addlw	low receiveSendMultiEventCANAL@data
 11245  003490  6ED9               	movwf	fsr2l,c
 11246  003492  6ADA               	clrf	fsr2h,c
 11247  003494  0E7D               	movlw	low _wrkbuf
 11248  003496  0100               	movlb	0	; () banked
 11249  003498  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11250  00349A  6EE1               	movwf	fsr1l,c
 11251  00349C  6AE2               	clrf	fsr1h,c
 11252  00349E  0E01               	movlw	high _wrkbuf
 11253  0034A0  22E2               	addwfc	fsr1h,f,c
 11254  0034A2  CFDF FFE7          	movff	indf2,indf1
 11255                           
 11256                           ; BSR set to: 1
 11257                           ;main.c: 2136: pos++;
 11258  0034A6  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11259                           
 11260                           ; BSR set to: 0
 11261  0034A8  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11262  0034AA                     l16490:
 11263                           
 11264                           ; BSR set to: 0
 11265  0034AA  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11266  0034AC  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11267  0034AE  E3EE               	bnc	l16484
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;main.c: 2137: }
 11271                           ;main.c: 2139: msgcount++;
 11272  0034B0  2B7B               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 11273                           
 11274                           ; BSR set to: 0
 11275                           ;main.c: 2141: } while ( ( msgcount < caps.maxCanalFrames ) &&
 11276                           ;main.c: 2142: ( msgcount < 5 ) &&
 11277                           ;main.c: 2143: getCANFrame( &id, &dlc, &data ) );
 11278  0034B2  0101               	movlb	1	; () banked
 11279  0034B4  51F2               	movf	(_caps+1)& (0+255),w,b
 11280  0034B6  0100               	movlb	0	; () banked
 11281  0034B8  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11282  0034BA  D009               	goto	l16500
 11283                           
 11284                           ; BSR set to: 0
 11285  0034BC  0E05               	movlw	5
 11286  0034BE  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11287  0034C0  D006               	goto	l16500
 11288                           
 11289                           ; BSR set to: 0
 11290  0034C2  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11291  0034C4  D83F               	call	PL80	;call to abstracted procedure
 11292  0034C6  ECF3  F00F         	call	_getCANFrame
 11293  0034CA  0900               	iorlw	0
 11294  0034CC  E1C7               	bnz	l16462
 11295  0034CE                     l16500:
 11296                           
 11297                           ; BSR set to: 0
 11298                           ;main.c: 2148: sendEscapedUartData(0, &crc);
 11299  0034CE  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11300  0034D0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11301  0034D2  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11302  0034D4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11303  0034D6  0E00               	movlw	0
 11304  0034D8  EC13  F00B         	call	_sendEscapedUartData
 11305                           
 11306                           ;main.c: 2149: sendEscapedUartData(pos, &crc);
 11307  0034DC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11308  0034DE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11309  0034E0  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11310  0034E2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11311  0034E4  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11312  0034E6  EC13  F00B         	call	_sendEscapedUartData
 11313                           
 11314                           ; BSR set to: 0
 11315                           ;main.c: 2152: for (i = 0; i < pos; i++) {
 11316  0034EA  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11317  0034EC  D010               	goto	l16508
 11318  0034EE                     l16504:
 11319                           
 11320                           ; BSR set to: 0
 11321                           ;main.c: 2153: sendEscapedUartData( wrkbuf[ i ], &crc);
 11322  0034EE  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11323  0034F0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11324  0034F2  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11325  0034F4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11326  0034F6  0E7D               	movlw	low _wrkbuf
 11327  0034F8  0100               	movlb	0	; () banked
 11328  0034FA  257C               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11329  0034FC  6ED9               	movwf	fsr2l,c
 11330  0034FE  6ADA               	clrf	fsr2h,c
 11331  003500  0101               	movlb	1	; () banked
 11332  003502  0E01               	movlw	high _wrkbuf
 11333  003504  22DA               	addwfc	fsr2h,f,c
 11334  003506  50DF               	movf	indf2,w,c
 11335  003508  EC13  F00B         	call	_sendEscapedUartData
 11336                           
 11337                           ; BSR set to: 0
 11338  00350C  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11339  00350E                     l16508:
 11340                           
 11341                           ; BSR set to: 0
 11342  00350E  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11343  003510  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11344  003512  E3ED               	bnc	l16504
 11345                           
 11346                           ; BSR set to: 0
 11347                           ;main.c: 2154: }
 11348                           ;main.c: 2157: sendEscapedUartData(crc, (0));
 11349  003514  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11350  003516  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11351  003518  5182               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11352  00351A  EC13  F00B         	call	_sendEscapedUartData
 11353  00351E                     l1043:
 11354  00351E  A2AC               	btfss	4012,1,c	;volatile
 11355  003520  D7FE               	goto	l1043
 11356                           
 11357                           ;main.c: 2161: WriteUSART(0x10);
 11358  003522  0E10               	movlw	16
 11359  003524  ECD5  F007         	call	_WriteUSART
 11360  003528                     l1046:
 11361  003528  A2AC               	btfss	4012,1,c	;volatile
 11362  00352A  D7FE               	goto	l1046
 11363                           
 11364                           ;main.c: 2163: WriteUSART(0x03);
 11365  00352C  0E03               	movlw	3
 11366  00352E  ECD5  F007         	call	_WriteUSART
 11367  003532                     l1049:
 11368  003532  0012               	return	
 11369  003534                     __end_of_receiveSendMultiEventCANAL:
 11370                           	opt stack 0
 11371  003534                     PL26:
 11372                           	opt stack 22
 11373  003534  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11374  003536  0E7D               	movlw	low _wrkbuf
 11375  003538  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11376  00353A  6ED9               	movwf	fsr2l,c
 11377  00353C  6ADA               	clrf	fsr2h,c
 11378  00353E  0E01               	movlw	high _wrkbuf
 11379  003540  22DA               	addwfc	fsr2h,f,c
 11380  003542  0012               	return	
 11381  003544                     __end_ofPL26:
 11382                           	opt stack 0
 11383  003544                     PL80:
 11384                           	opt stack 22
 11385  003544  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11386  003546  0E81               	movlw	low receiveSendMultiEventCANAL@dlc
 11387  003548  6F6E               	movwf	?_getCANFrame& (0+255),b
 11388  00354A  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11389  00354C  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 11390  00354E  0E73               	movlw	low receiveSendMultiEventCANAL@data
 11391  003550  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11392  003552  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11393  003554  0012               	return	
 11394  003556                     __end_ofPL80:
 11395                           	opt stack 0
 11396                           tblptru	equ	0xFF8
 11397                           tblptrh	equ	0xFF7
 11398                           tblptrl	equ	0xFF6
 11399                           tablat	equ	0xFF5
 11400                           prodh	equ	0xFF4
 11401                           prodl	equ	0xFF3
 11402                           intcon	equ	0xFF2
 11403                           indf0	equ	0xFEF
 11404                           postinc0	equ	0xFEE
 11405                           fsr0h	equ	0xFEA
 11406                           fsr0l	equ	0xFE9
 11407                           wreg	equ	0xFE8
 11408                           indf1	equ	0xFE7
 11409                           postinc1	equ	0xFE6
 11410                           postdec1	equ	0xFE5
 11411                           fsr1h	equ	0xFE2
 11412                           fsr1l	equ	0xFE1
 11413                           indf2	equ	0xFDF
 11414                           postinc2	equ	0xFDE
 11415                           postdec2	equ	0xFDD
 11416                           plusw2	equ	0xFDB
 11417                           fsr2h	equ	0xFDA
 11418                           fsr2l	equ	0xFD9
 11419                           status	equ	0xFD8
 11420                           
 11421 ;; *************** function _sendEscapedUartData *****************
 11422 ;; Defined at:
 11423 ;;		line 1729 in file "main.c"
 11424 ;; Parameters:    Size  Location     Type
 11425 ;;  c               1    wreg     unsigned char 
 11426 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11427 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11428 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11429 ;;		 -> NULL(0), 
 11430 ;; Auto vars:     Size  Location     Type
 11431 ;;  c               1   14[BANK0 ] unsigned char 
 11432 ;; Return value:  Size  Location     Type
 11433 ;;		None               void
 11434 ;; Registers used:
 11435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11436 ;; Tracked objects:
 11437 ;;		On entry : E/1
 11438 ;;		On exit  : F/0
 11439 ;;		Unchanged: 0/0
 11440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11441 ;;      Params:         0       2       0       0       0       0       0
 11442 ;;      Locals:         0       1       0       0       0       0       0
 11443 ;;      Temps:          0       0       0       0       0       0       0
 11444 ;;      Totals:         0       3       0       0       0       0       0
 11445 ;;Total ram usage:        3 bytes
 11446 ;; Hardware stack levels used:    1
 11447 ;; Hardware stack levels required when called:    5
 11448 ;; This function calls:
 11449 ;;		_WriteUSART
 11450 ;;		_crc8
 11451 ;; This function is called by:
 11452 ;;		_sendVSCPDriverErrorFrame
 11453 ;;		_sendVSCPDriverAck
 11454 ;;		_sendVSCPDriverNack
 11455 ;;		_sendVSCPDriverCommandReply
 11456 ;;		_receiveSendEventCANAL
 11457 ;;		_receiveSendMultiEventCANAL
 11458 ;;		_sendVSCPModeCapabilities
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           	psect	text19
 11463  001626                     __ptext19:
 11464                           	opt stack 0
 11465  001626                     _sendEscapedUartData:
 11466                           	opt stack 22
 11467                           
 11468                           ;incstack = 0
 11469                           ;incstack = 0
 11470                           ;sendEscapedUartData@c stored from wreg
 11471  001626  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11472                           
 11473                           ;main.c: 1730: if (0x10 == c) {
 11474  00162A  0100               	movlb	0	; () banked
 11475  00162C  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11476  00162E  0A10               	xorlw	16
 11477  001630  E117               	bnz	l840
 11478  001632                     l832:
 11479  001632  A2AC               	btfss	4012,1,c	;volatile
 11480  001634  D7FE               	goto	l832
 11481                           
 11482                           ;main.c: 1733: WriteUSART(0x10);
 11483  001636  0E10               	movlw	16
 11484  001638  ECD5  F007         	call	_WriteUSART
 11485  00163C                     l835:
 11486  00163C  A2AC               	btfss	4012,1,c	;volatile
 11487  00163E  D7FE               	goto	l835
 11488                           
 11489                           ;main.c: 1737: WriteUSART(0x10);
 11490  001640  0E10               	movlw	16
 11491  001642  ECD5  F007         	call	_WriteUSART
 11492                           
 11493                           ;main.c: 1738: if ((0) != pcrc) crc8(pcrc, 0x10);
 11494  001646  0100               	movlb	0	; () banked
 11495  001648  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11496  00164A  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11497  00164C  E01B               	bz	l844
 11498                           
 11499                           ; BSR set to: 0
 11500  00164E  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11501  001652  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11502  001656  0E10               	movlw	16
 11503  001658  6F69               	movwf	(?_crc8+2)& (0+255),b
 11504  00165A  ECB9  F008         	call	_crc8	;wreg free
 11505  00165E  D012               	goto	l844
 11506  001660                     l840:
 11507  001660  A2AC               	btfss	4012,1,c	;volatile
 11508  001662  D7FE               	goto	l840
 11509                           
 11510                           ;main.c: 1744: WriteUSART(c);
 11511  001664  0100               	movlb	0	; () banked
 11512  001666  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11513  001668  ECD5  F007         	call	_WriteUSART
 11514                           
 11515                           ;main.c: 1745: if ((0) != pcrc) crc8(pcrc, c);
 11516  00166C  0100               	movlb	0	; () banked
 11517  00166E  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11518  001670  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11519  001672  E008               	bz	l844
 11520                           
 11521                           ; BSR set to: 0
 11522  001674  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11523  001678  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11524  00167C  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11525  001680  ECB9  F008         	call	_crc8	;wreg free
 11526  001684                     l844:
 11527                           
 11528                           ; BSR set to: 0
 11529  001684  0012               	return	
 11530  001686                     __end_of_sendEscapedUartData:
 11531                           	opt stack 0
 11532                           tblptru	equ	0xFF8
 11533                           tblptrh	equ	0xFF7
 11534                           tblptrl	equ	0xFF6
 11535                           tablat	equ	0xFF5
 11536                           prodh	equ	0xFF4
 11537                           prodl	equ	0xFF3
 11538                           intcon	equ	0xFF2
 11539                           indf0	equ	0xFEF
 11540                           postinc0	equ	0xFEE
 11541                           fsr0h	equ	0xFEA
 11542                           fsr0l	equ	0xFE9
 11543                           wreg	equ	0xFE8
 11544                           indf1	equ	0xFE7
 11545                           postinc1	equ	0xFE6
 11546                           postdec1	equ	0xFE5
 11547                           fsr1h	equ	0xFE2
 11548                           fsr1l	equ	0xFE1
 11549                           indf2	equ	0xFDF
 11550                           postinc2	equ	0xFDE
 11551                           postdec2	equ	0xFDD
 11552                           plusw2	equ	0xFDB
 11553                           fsr2h	equ	0xFDA
 11554                           fsr2l	equ	0xFD9
 11555                           status	equ	0xFD8
 11556                           
 11557 ;; *************** function _crc8 *****************
 11558 ;; Defined at:
 11559 ;;		line 47 in file "crc8.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11562 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11563 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11564 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11565 ;;  m               1    9[BANK0 ] unsigned char 
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;		None
 11568 ;; Return value:  Size  Location     Type
 11569 ;;		None               void
 11570 ;; Registers used:
 11571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11572 ;; Tracked objects:
 11573 ;;		On entry : F/0
 11574 ;;		On exit  : F/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11577 ;;      Params:         0       3       0       0       0       0       0
 11578 ;;      Locals:         0       0       0       0       0       0       0
 11579 ;;      Temps:          0       2       0       0       0       0       0
 11580 ;;      Totals:         0       5       0       0       0       0       0
 11581 ;;Total ram usage:        5 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; Hardware stack levels required when called:    4
 11584 ;; This function calls:
 11585 ;;		_init_crc8
 11586 ;; This function is called by:
 11587 ;;		_sendEscapedUartData
 11588 ;;		_sendVSCPDriverErrorFrame
 11589 ;;		_sendVSCPDriverAck
 11590 ;;		_sendVSCPDriverNack
 11591 ;;		_sendVSCPDriverCommandReply
 11592 ;;		_receiveSendEventCANAL
 11593 ;;		_receiveSendMultiEventCANAL
 11594 ;;		_sendVSCPModeCapabilities
 11595 ;;		_calcCRC
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           	psect	text20
 11600  001172                     __ptext20:
 11601                           	opt stack 0
 11602  001172                     _crc8:
 11603                           	opt stack 23
 11604                           
 11605                           ; BSR set to: 0
 11606                           ;crc8.c: 48: if ( !made_table ) {
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;incstack = 0
 11610                           ;incstack = 0
 11611  001172  0101               	movlb	1	; () banked
 11612  001174  5129               	movf	(_made_table+1)& (0+255),w,b
 11613  001176  1128               	iorwf	_made_table& (0+255),w,b
 11614  001178  B4D8               	btfsc	status,2,c
 11615                           
 11616                           ; BSR set to: 1
 11617                           ;crc8.c: 49: init_crc8();
 11618  00117A  ECD8  F00B         	call	_init_crc8	;wreg free
 11619                           
 11620                           ; BSR set to: 1
 11621                           ;crc8.c: 50: }
 11622                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11623  00117E  C067  FFD9         	movff	crc8@crc,fsr2l
 11624  001182  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11625  001186  50DF               	movf	indf2,w,c
 11626  001188  0100               	movlb	0	; () banked
 11627  00118A  1969               	xorwf	crc8@m& (0+255),w,b
 11628  00118C  6F6A               	movwf	??_crc8& (0+255),b
 11629  00118E  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11630  001190  0E00               	movlw	low _crc8_table
 11631  001192  256A               	addwf	??_crc8& (0+255),w,b
 11632  001194  6ED9               	movwf	fsr2l,c
 11633  001196  0E03               	movlw	high _crc8_table
 11634  001198  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11635  00119A  6EDA               	movwf	fsr2h,c
 11636  00119C  C067  FFE1         	movff	crc8@crc,fsr1l
 11637  0011A0  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11638  0011A4  CFDF FFE7          	movff	indf2,indf1
 11639                           
 11640                           ; BSR set to: 0
 11641  0011A8  0012               	return	
 11642  0011AA                     __end_of_crc8:
 11643                           	opt stack 0
 11644                           tblptru	equ	0xFF8
 11645                           tblptrh	equ	0xFF7
 11646                           tblptrl	equ	0xFF6
 11647                           tablat	equ	0xFF5
 11648                           prodh	equ	0xFF4
 11649                           prodl	equ	0xFF3
 11650                           intcon	equ	0xFF2
 11651                           indf0	equ	0xFEF
 11652                           postinc0	equ	0xFEE
 11653                           fsr0h	equ	0xFEA
 11654                           fsr0l	equ	0xFE9
 11655                           wreg	equ	0xFE8
 11656                           indf1	equ	0xFE7
 11657                           postinc1	equ	0xFE6
 11658                           postdec1	equ	0xFE5
 11659                           fsr1h	equ	0xFE2
 11660                           fsr1l	equ	0xFE1
 11661                           indf2	equ	0xFDF
 11662                           postinc2	equ	0xFDE
 11663                           postdec2	equ	0xFDD
 11664                           plusw2	equ	0xFDB
 11665                           fsr2h	equ	0xFDA
 11666                           fsr2l	equ	0xFD9
 11667                           status	equ	0xFD8
 11668                           
 11669 ;; *************** function _init_crc8 *****************
 11670 ;; Defined at:
 11671 ;;		line 25 in file "crc8.c"
 11672 ;; Parameters:    Size  Location     Type
 11673 ;;		None
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;  i               2    5[BANK0 ] int 
 11676 ;;  j               2    2[BANK0 ] int 
 11677 ;;  crc             1    4[BANK0 ] unsigned char 
 11678 ;; Return value:  Size  Location     Type
 11679 ;;		None               void
 11680 ;; Registers used:
 11681 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11682 ;; Tracked objects:
 11683 ;;		On entry : E/0
 11684 ;;		On exit  : F/1
 11685 ;;		Unchanged: 0/0
 11686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11687 ;;      Params:         0       0       0       0       0       0       0
 11688 ;;      Locals:         0       7       0       0       0       0       0
 11689 ;;      Temps:          0       0       0       0       0       0       0
 11690 ;;      Totals:         0       7       0       0       0       0       0
 11691 ;;Total ram usage:        7 bytes
 11692 ;; Hardware stack levels used:    1
 11693 ;; Hardware stack levels required when called:    3
 11694 ;; This function calls:
 11695 ;;		Nothing
 11696 ;; This function is called by:
 11697 ;;		_main
 11698 ;;		_crc8
 11699 ;; This function uses a non-reentrant model
 11700 ;;
 11701                           
 11702                           	psect	text21
 11703  0017B0                     __ptext21:
 11704                           	opt stack 0
 11705  0017B0                     _init_crc8:
 11706                           	opt stack 23
 11707                           
 11708                           ;crc8.c: 26: int i,j;
 11709                           ;crc8.c: 27: unsigned char crc;
 11710                           ;crc8.c: 29: if (!made_table) {
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;incstack = 0
 11714                           ;incstack = 0
 11715  0017B0  0101               	movlb	1	; () banked
 11716  0017B2  5129               	movf	(_made_table+1)& (0+255),w,b
 11717  0017B4  1128               	iorwf	_made_table& (0+255),w,b
 11718  0017B6  E133               	bnz	l1631
 11719                           
 11720                           ; BSR set to: 1
 11721                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11722  0017B8  0100               	movlb	0	; () banked
 11723  0017BA  6B65               	clrf	init_crc8@i& (0+255),b
 11724  0017BC  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11725  0017BE                     l1623:
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;crc8.c: 31: crc = i;
 11729  0017BE  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11730                           
 11731                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11732  0017C2  6B62               	clrf	init_crc8@j& (0+255),b
 11733  0017C4  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11734  0017C6                     l1625:
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11738  0017C6  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11739  0017C8  D003               	goto	l14072
 11740                           
 11741                           ; BSR set to: 0
 11742  0017CA  6B60               	clrf	_init_crc8$2066& (0+255),b
 11743  0017CC  6B61               	clrf	(_init_crc8$2066+1)& (0+255),b
 11744  0017CE  D003               	goto	l14074
 11745  0017D0                     l14072:
 11746                           
 11747                           ; BSR set to: 0
 11748  0017D0  6B61               	clrf	(_init_crc8$2066+1)& (0+255),b
 11749  0017D2  0E07               	movlw	7
 11750  0017D4  6F60               	movwf	_init_crc8$2066& (0+255),b
 11751  0017D6                     l14074:
 11752                           
 11753                           ; BSR set to: 0
 11754  0017D6  5164               	movf	init_crc8@crc& (0+255),w,b
 11755  0017D8  2564               	addwf	init_crc8@crc& (0+255),w,b
 11756  0017DA  1960               	xorwf	_init_crc8$2066& (0+255),w,b
 11757  0017DC  6F64               	movwf	init_crc8@crc& (0+255),b
 11758                           
 11759                           ; BSR set to: 0
 11760  0017DE  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11761  0017E0  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11762                           
 11763                           ; BSR set to: 0
 11764  0017E2  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11765  0017E4  0A80               	xorlw	128
 11766  0017E6  0F80               	addlw	-128
 11767  0017E8  0E08               	movlw	8
 11768  0017EA  B4D8               	btfsc	status,2,c
 11769  0017EC  5D62               	subwf	init_crc8@j& (0+255),w,b
 11770  0017EE  E3EB               	bnc	l1625
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;crc8.c: 34: }
 11774                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11775  0017F0  0E00               	movlw	low _crc8_table
 11776  0017F2  0100               	movlb	0	; () banked
 11777  0017F4  2565               	addwf	init_crc8@i& (0+255),w,b
 11778  0017F6  6ED9               	movwf	fsr2l,c
 11779  0017F8  0E03               	movlw	high _crc8_table
 11780  0017FA  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11781  0017FC  6EDA               	movwf	fsr2h,c
 11782  0017FE  C064  FFDF         	movff	init_crc8@crc,indf2
 11783                           
 11784                           ; BSR set to: 0
 11785  001802  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11786  001804  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11787                           
 11788                           ; BSR set to: 0
 11789  001806  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11790  001808  0A80               	xorlw	128
 11791  00180A  0F7F               	addlw	-129
 11792  00180C  0E00               	movlw	0
 11793  00180E  B4D8               	btfsc	status,2,c
 11794  001810  5D65               	subwf	init_crc8@i& (0+255),w,b
 11795  001812  E3D5               	bnc	l1623
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;crc8.c: 37: }
 11799                           ;crc8.c: 38: made_table=1;
 11800  001814  0E00               	movlw	0
 11801  001816  0101               	movlb	1	; () banked
 11802  001818  6F29               	movwf	(_made_table+1)& (0+255),b
 11803  00181A  0E01               	movlw	1
 11804  00181C  6F28               	movwf	_made_table& (0+255),b
 11805  00181E                     l1631:
 11806                           
 11807                           ; BSR set to: 1
 11808  00181E  0012               	return	
 11809  001820                     __end_of_init_crc8:
 11810                           	opt stack 0
 11811                           tblptru	equ	0xFF8
 11812                           tblptrh	equ	0xFF7
 11813                           tblptrl	equ	0xFF6
 11814                           tablat	equ	0xFF5
 11815                           prodh	equ	0xFF4
 11816                           prodl	equ	0xFF3
 11817                           intcon	equ	0xFF2
 11818                           indf0	equ	0xFEF
 11819                           postinc0	equ	0xFEE
 11820                           fsr0h	equ	0xFEA
 11821                           fsr0l	equ	0xFE9
 11822                           wreg	equ	0xFE8
 11823                           indf1	equ	0xFE7
 11824                           postinc1	equ	0xFE6
 11825                           postdec1	equ	0xFE5
 11826                           fsr1h	equ	0xFE2
 11827                           fsr1l	equ	0xFE1
 11828                           indf2	equ	0xFDF
 11829                           postinc2	equ	0xFDE
 11830                           postdec2	equ	0xFDD
 11831                           plusw2	equ	0xFDB
 11832                           fsr2h	equ	0xFDA
 11833                           fsr2l	equ	0xFD9
 11834                           status	equ	0xFD8
 11835                           
 11836 ;; *************** function _doModeVerbose *****************
 11837 ;; Defined at:
 11838 ;;		line 584 in file "main.c"
 11839 ;; Parameters:    Size  Location     Type
 11840 ;;		None
 11841 ;; Auto vars:     Size  Location     Type
 11842 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11843 ;;		 -> STR_127(2), STR_125(2), STR_123(2), STR_121(2), 
 11844 ;;		 -> STR_118(2), STR_114(2), STR_112(2), STR_110(2), 
 11845 ;;		 -> STR_108(2), STR_105(2), STR_87(2), STR_85(2), 
 11846 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 11847 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11848 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11849 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11850 ;;		 -> STR_127(2), STR_125(2), STR_123(2), STR_121(2), 
 11851 ;;		 -> STR_118(2), STR_114(2), STR_112(2), STR_110(2), 
 11852 ;;		 -> STR_108(2), STR_105(2), STR_87(2), STR_85(2), 
 11853 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 11854 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11855 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11856 ;;  id              4   41[BANK2 ] unsigned long 
 11857 ;;  p               2   67[BANK2 ] PTR unsigned char 
 11858 ;;		 -> NULL(0), cmdbuf(80), 
 11859 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11860 ;;  maskno          1   46[BANK2 ] unsigned char 
 11861 ;;  mask_nodeid     1   17[BANK2 ] unsigned char 
 11862 ;;  mask_type       1   16[BANK2 ] unsigned char 
 11863 ;;  mask_priorit    1   15[BANK2 ] unsigned char 
 11864 ;;  id              4    0[BANK2 ] unsigned long 
 11865 ;;  p               2   65[BANK2 ] PTR unsigned char 
 11866 ;;		 -> NULL(0), cmdbuf(80), 
 11867 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11868 ;;  filterno        1   45[BANK2 ] unsigned char 
 11869 ;;  filter_nodei    1   14[BANK2 ] unsigned char 
 11870 ;;  filter_type     1   13[BANK2 ] unsigned char 
 11871 ;;  filter_prior    1   12[BANK2 ] unsigned char 
 11872 ;;  nodeid          1   54[BANK2 ] unsigned char 
 11873 ;;  p               2   60[BANK2 ] PTR unsigned char 
 11874 ;;		 -> NULL(0), cmdbuf(80), 
 11875 ;;  nodeid          1   51[BANK2 ] unsigned char 
 11876 ;;  value           1   48[BANK2 ] unsigned char 
 11877 ;;  reg             1   40[BANK2 ] unsigned char 
 11878 ;;  page            1   39[BANK2 ] unsigned char 
 11879 ;;  p               2   58[BANK2 ] PTR unsigned char 
 11880 ;;		 -> NULL(0), cmdbuf(80), 
 11881 ;;  value           1   57[BANK2 ] unsigned char 
 11882 ;;  i               1   55[BANK2 ] unsigned char 
 11883 ;;  reg             1   53[BANK2 ] unsigned char 
 11884 ;;  page            1   52[BANK2 ] unsigned char 
 11885 ;;  nodeid          1   50[BANK2 ] unsigned char 
 11886 ;;  count           1   49[BANK2 ] unsigned char 
 11887 ;;  rv              1   38[BANK2 ] enum E15660
 11888 ;;  p               2   63[BANK2 ] PTR unsigned char 
 11889 ;;		 -> NULL(0), cmdbuf(80), 
 11890 ;;  ifmode          1   62[BANK2 ] enum E16371
 11891 ;;  c               1   56[BANK2 ] unsigned char 
 11892 ;;  i               1   47[BANK2 ] unsigned char 
 11893 ;; Return value:  Size  Location     Type
 11894 ;;		None               void
 11895 ;; Registers used:
 11896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11897 ;; Tracked objects:
 11898 ;;		On entry : F/1
 11899 ;;		On exit  : 0/0
 11900 ;;		Unchanged: 0/0
 11901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11902 ;;      Params:         0       0       0       0       0       0       0
 11903 ;;      Locals:         0       0       0      69       0       0       0
 11904 ;;      Temps:          0      20       0       0       0       0       0
 11905 ;;      Totals:         0      20       0      69       0       0       0
 11906 ;;Total ram usage:       89 bytes
 11907 ;; Hardware stack levels used:    1
 11908 ;; Hardware stack levels required when called:   10
 11909 ;; This function calls:
 11910 ;;		_vscp_restoreDefaults
 11911 ;;		_putsUSART
 11912 ;;		_printFirmwareVersion
 11913 ;;		_fifo_read
 11914 ;;		_ECANSetOperationMode
 11915 ;;		_setFilter
 11916 ;;		__CANIDToRegs
 11917 ;;		_Busy_eep
 11918 ;;		_Write_b_eep
 11919 ;;		_receivePrintEventVerbose
 11920 ;;		_WriteUSART
 11921 ;;		_stristr
 11922 ;;		_strtok
 11923 ;;		_atoi
 11924 ;;		_memset
 11925 ;;		_sendVSCPFrame
 11926 ;;		_printStatistics
 11927 ;;		_printErrors
 11928 ;;		_printHelp
 11929 ;;		_findNodes
 11930 ;;		_strcpy
 11931 ;;		_strchr
 11932 ;;		_readRegisterExtended
 11933 ;;		_sprintf
 11934 ;;		_printBinary
 11935 ;;		_writeRegisterExtended
 11936 ;;		_printNodeFirmwareVersion
 11937 ;;		_printGUID
 11938 ;;		_printMDF
 11939 ;; This function is called by:
 11940 ;;		_main
 11941 ;; This function uses a non-reentrant model
 11942 ;;
 11943                           
 11944                           	psect	text22
 11945  00541A                     __ptext22:
 11946                           	opt stack 0
 11947  00541A                     _doModeVerbose:
 11948                           	opt stack 19
 11949                           
 11950                           ; BSR set to: 1
 11951                           ;main.c: 585: uint8_t c;
 11952                           ;main.c: 586: uint8_t i;
 11953                           ;main.c: 589: if (!bSilent) {
 11954                           
 11955                           ; BSR set to: 1
 11956                           ;incstack = 0
 11957                           ;incstack = 0
 11958  00541A  6630               	tstfsz	_bSilent,c
 11959  00541C  D002               	goto	l14192
 11960                           
 11961                           ; BSR set to: 1
 11962                           ;main.c: 590: receivePrintEventVerbose();
 11963  00541E  ECD2  F021         	call	_receivePrintEventVerbose	;wreg free
 11964  005422                     l14192:
 11965                           
 11966                           ;main.c: 591: }
 11967                           ;main.c: 594: (INTCONbits.GIE = 0);
 11968  005422  9EF2               	bcf	intcon,7,c	;volatile
 11969                           
 11970                           ;main.c: 596: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11971  005424  0E01               	movlw	high _serialInputFifo
 11972  005426  0100               	movlb	0	; () banked
 11973  005428  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11974  00542A  0EDD               	movlw	low _serialInputFifo
 11975  00542C  6F60               	movwf	?_fifo_read& (0+255),b
 11976  00542E  0E02               	movlw	high doModeVerbose@c
 11977  005430  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 11978  005432  0EB8               	movlw	low doModeVerbose@c
 11979  005434  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11980  005436  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 11981  005438  0E01               	movlw	1
 11982  00543A  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 11983  00543C  EC8D  F012         	call	_fifo_read	;wreg free
 11984  005440  0560               	decf	?_fifo_read& (0+255),w,b
 11985  005442  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11986  005444  E002 EF19  F035    	bnz	l14938
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;main.c: 599: (INTCONbits.GIE = 1);
 11990  00544A  8EF2               	bsf	intcon,7,c	;volatile
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;main.c: 602: if ( bLocalEcho ) {
 11994  00544C  502E               	movf	_bLocalEcho,w,c
 11995  00544E  E00F               	bz	l14206
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;main.c: 603: WriteUSART( c );
 11999  005450  0102               	movlb	2	; () banked
 12000  005452  51B8               	movf	doModeVerbose@c& (0+255),w,b
 12001  005454  ECD5  F007         	call	_WriteUSART
 12002  005458                     l492:
 12003  005458  A2AC               	btfss	4012,1,c	;volatile
 12004  00545A  D7FE               	goto	l492
 12005                           
 12006                           ;main.c: 605: if ( 0x0d == c ) {
 12007  00545C  0102               	movlb	2	; () banked
 12008  00545E  51B8               	movf	doModeVerbose@c& (0+255),w,b
 12009  005460  0A0D               	xorlw	13
 12010  005462  E105               	bnz	l14206
 12011                           
 12012                           ; BSR set to: 2
 12013                           ;main.c: 606: WriteUSART( 0x0a );
 12014  005464  0E0A               	movlw	10
 12015  005466  ECD5  F007         	call	_WriteUSART
 12016  00546A                     l496:
 12017  00546A  A2AC               	btfss	4012,1,c	;volatile
 12018  00546C  D7FE               	goto	l496
 12019  00546E                     l14206:
 12020                           
 12021                           ;main.c: 608: }
 12022                           ;main.c: 609: }
 12023                           ;main.c: 612: cmdbuf[ pos++ ] = c;
 12024  00546E  0E2D               	movlw	low _cmdbuf
 12025  005470  2434               	addwf	_pos,w,c
 12026  005472  6ED9               	movwf	fsr2l,c
 12027  005474  6ADA               	clrf	fsr2h,c
 12028  005476  0E01               	movlw	high _cmdbuf
 12029  005478  22DA               	addwfc	fsr2h,f,c
 12030  00547A  0102               	movlb	2	; () banked
 12031  00547C  C2B8  FFDF         	movff	doModeVerbose@c,indf2
 12032                           
 12033                           ; BSR set to: 2
 12034  005480  2A34               	incf	_pos,f,c
 12035                           
 12036                           ; BSR set to: 2
 12037                           ;main.c: 613: if (pos >= sizeof( cmdbuf ) ) {
 12038  005482  0E4F               	movlw	79
 12039  005484  6434               	cpfsgt	_pos,c
 12040  005486  D001               	goto	l14214
 12041                           
 12042                           ; BSR set to: 2
 12043                           ;main.c: 616: pos = 0;
 12044  005488  6A34               	clrf	_pos,c
 12045  00548A                     l14214:
 12046                           
 12047                           ; BSR set to: 2
 12048                           ;main.c: 617: }
 12049                           ;main.c: 620: if (0x0d == c) {
 12050  00548A  51B8               	movf	doModeVerbose@c& (0+255),w,b
 12051  00548C  0A0D               	xorlw	13
 12052  00548E  E002 EF19  F035    	bnz	l14938
 12053                           
 12054                           ; BSR set to: 2
 12055                           ;main.c: 622: cmdbuf[ pos ] = 0;
 12056  005494  0E2D               	movlw	low _cmdbuf
 12057  005496  2434               	addwf	_pos,w,c
 12058  005498  6ED9               	movwf	fsr2l,c
 12059  00549A  6ADA               	clrf	fsr2h,c
 12060  00549C  0E01               	movlw	high _cmdbuf
 12061  00549E  22DA               	addwfc	fsr2h,f,c
 12062  0054A0  6ADF               	clrf	indf2,c
 12063                           
 12064                           ; BSR set to: 1
 12065                           ;main.c: 625: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 12066  0054A2  0100               	movlb	0	; () banked
 12067  0054A4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12068  0054A6  0E2D               	movlw	low _cmdbuf
 12069  0054A8  6F6D               	movwf	?_stristr& (0+255),b
 12070  0054AA  0E7C               	movlw	high STR_6
 12071  0054AC  6F70               	movwf	(?_stristr+3)& (0+255),b
 12072  0054AE  0EC1               	movlw	low STR_6
 12073  0054B0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12074  0054B2  EC86  F00C         	call	_stristr	;wreg free
 12075  0054B6  0E2D               	movlw	low _cmdbuf
 12076  0054B8  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12077  0054BA  0E01               	movlw	high _cmdbuf
 12078  0054BC  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12079  0054BE  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12080  0054C0  E102               	bnz	u18785
 12081  0054C2  516D               	movf	?_stristr& (0+255),w,b
 12082  0054C4  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12083  0054C6                     u18785:
 12084  0054C6  E112               	bnz	l14226
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;main.c: 626: putsUSART((char *) "Will enter bootloader now...\r\n");
 12088  0054C8  0E77               	movlw	high STR_7
 12089  0054CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12090  0054CC  0E4E               	movlw	low STR_7
 12091  0054CE  6F61               	movwf	?_putsUSART& (0+255),b
 12092  0054D0  EC8D  F00A         	call	_putsUSART	;wreg free
 12093                           
 12094                           ;main.c: 627: (Busy_eep(), Write_b_eep(0x00,0xFF));
 12095  0054D4  ECB3  F007         	call	_Busy_eep	;wreg free
 12096  0054D8  0100               	movlb	0	; () banked
 12097  0054DA  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 12098  0054DC  6B60               	clrf	?_Write_b_eep& (0+255),b
 12099  0054DE  0EFF               	movlw	255
 12100  0054E0  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 12101  0054E2  EC83  F008         	call	_Write_b_eep	;wreg free
 12102  0054E6  00FF               	reset		;# 
 12103                           
 12104                           ;main.c: 629: }
 12105  0054E8  EF0C  F035         	goto	l14934
 12106  0054EC                     l14226:
 12107                           
 12108                           ; BSR set to: 0
 12109                           ;main.c: 631: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 12110  0054EC  ECB6  F035         	call	PL72	;call to abstracted procedure
 12111  0054F0  EC86  F00C         	call	_stristr	;wreg free
 12112  0054F4  0E2D               	movlw	low _cmdbuf
 12113  0054F6  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12114  0054F8  0E01               	movlw	high _cmdbuf
 12115  0054FA  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12116  0054FC  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12117  0054FE  E102               	bnz	u18795
 12118  005500  516D               	movf	?_stristr& (0+255),w,b
 12119  005502  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12120  005504                     u18795:
 12121  005504  E10C               	bnz	l14234
 12122                           
 12123                           ; BSR set to: 0
 12124                           ;main.c: 632: bSilent = 0;
 12125  005506  6A30               	clrf	_bSilent,c
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;main.c: 633: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12129  005508  0E00               	movlw	0
 12130  00550A  ECEA  F007         	call	_ECANSetOperationMode
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;main.c: 634: putsUSART((char *) "+OK\r\n");
 12134  00550E  0E7C               	movlw	high STR_9
 12135  005510  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12136  005512  0E65               	movlw	low STR_9
 12137  005514  6F61               	movwf	?_putsUSART& (0+255),b
 12138  005516  EC8D  F00A         	call	_putsUSART	;wreg free
 12139                           
 12140                           ;main.c: 635: }
 12141  00551A  EF0C  F035         	goto	l14934
 12142  00551E                     l14234:
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;main.c: 637: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 12146  00551E  0E01               	movlw	high _cmdbuf
 12147  005520  ECC0  F035         	call	PL78	;call to abstracted procedure
 12148  005524  EC86  F00C         	call	_stristr	;wreg free
 12149  005528  0E2D               	movlw	low _cmdbuf
 12150  00552A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12151  00552C  0E01               	movlw	high _cmdbuf
 12152  00552E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12153  005530  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12154  005532  E102               	bnz	u18805
 12155  005534  516D               	movf	?_stristr& (0+255),w,b
 12156  005536  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12157  005538                     u18805:
 12158  005538  E10D               	bnz	l14242
 12159                           
 12160                           ; BSR set to: 0
 12161                           ;main.c: 638: bSilent = 1;
 12162  00553A  0E01               	movlw	1
 12163  00553C  6E30               	movwf	_bSilent,c
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;main.c: 639: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12167  00553E  0E00               	movlw	0
 12168  005540  ECEA  F007         	call	_ECANSetOperationMode
 12169                           
 12170                           ; BSR set to: 0
 12171                           ;main.c: 640: putsUSART((char *) "+OK\r\n");
 12172  005544  0E7C               	movlw	high STR_9
 12173  005546  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12174  005548  0E65               	movlw	low STR_9
 12175  00554A  6F61               	movwf	?_putsUSART& (0+255),b
 12176  00554C  EC8D  F00A         	call	_putsUSART	;wreg free
 12177                           
 12178                           ;main.c: 641: }
 12179  005550  EF0C  F035         	goto	l14934
 12180  005554                     l14242:
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;main.c: 643: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 12184  005554  0E01               	movlw	high _cmdbuf
 12185  005556  0100               	movlb	0	; () banked
 12186  005558  ECC9  F035         	call	PL90	;call to abstracted procedure
 12187  00555C  EC86  F00C         	call	_stristr	;wreg free
 12188  005560  0E2D               	movlw	low _cmdbuf
 12189  005562  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12190  005564  0E01               	movlw	high _cmdbuf
 12191  005566  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12192  005568  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12193  00556A  E102               	bnz	u18815
 12194  00556C  516D               	movf	?_stristr& (0+255),w,b
 12195  00556E  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12196  005570                     u18815:
 12197  005570  E10D               	bnz	l14250
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;main.c: 644: bSilent = 1;
 12201  005572  0E01               	movlw	1
 12202  005574  6E30               	movwf	_bSilent,c
 12203                           
 12204                           ; BSR set to: 0
 12205                           ;main.c: 645: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 12206  005576  0E80               	movlw	128
 12207  005578  ECEA  F007         	call	_ECANSetOperationMode
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;main.c: 646: putsUSART((char *) "+OK\r\n");
 12211  00557C  0E7C               	movlw	high STR_9
 12212  00557E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12213  005580  0E65               	movlw	low STR_9
 12214  005582  6F61               	movwf	?_putsUSART& (0+255),b
 12215  005584  EC8D  F00A         	call	_putsUSART	;wreg free
 12216                           
 12217                           ;main.c: 647: }
 12218  005588  EF0C  F035         	goto	l14934
 12219  00558C                     l14250:
 12220                           
 12221                           ; BSR set to: 0
 12222                           ;main.c: 649: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 12223  00558C  0E01               	movlw	high _cmdbuf
 12224  00558E  0100               	movlb	0	; () banked
 12225  005590  ECD9  F035         	call	PL102	;call to abstracted procedure
 12226  005594  EC86  F00C         	call	_stristr	;wreg free
 12227  005598  0E2D               	movlw	low _cmdbuf
 12228  00559A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12229  00559C  0E01               	movlw	high _cmdbuf
 12230  00559E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12231  0055A0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12232  0055A2  E102               	bnz	u18825
 12233  0055A4  516D               	movf	?_stristr& (0+255),w,b
 12234  0055A6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12235  0055A8                     u18825:
 12236  0055A8  E10C               	bnz	l14258
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;main.c: 650: bSilent = 0;
 12240  0055AA  6A30               	clrf	_bSilent,c
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;main.c: 651: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 12244  0055AC  0E40               	movlw	64
 12245  0055AE  ECEA  F007         	call	_ECANSetOperationMode
 12246                           
 12247                           ; BSR set to: 0
 12248                           ;main.c: 652: putsUSART((char *) "+OK\r\n");
 12249  0055B2  0E7C               	movlw	high STR_9
 12250  0055B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12251  0055B6  0E65               	movlw	low STR_9
 12252  0055B8  6F61               	movwf	?_putsUSART& (0+255),b
 12253  0055BA  EC8D  F00A         	call	_putsUSART	;wreg free
 12254                           
 12255                           ;main.c: 653: }
 12256  0055BE  EF0C  F035         	goto	l14934
 12257  0055C2                     l14258:
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;main.c: 655: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 12261  0055C2  0E01               	movlw	high _cmdbuf
 12262  0055C4  0100               	movlb	0	; () banked
 12263  0055C6  ECD1  F035         	call	PL98	;call to abstracted procedure
 12264  0055CA  EC86  F00C         	call	_stristr	;wreg free
 12265  0055CE  0E2D               	movlw	low _cmdbuf
 12266  0055D0  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12267  0055D2  0E01               	movlw	high _cmdbuf
 12268  0055D4  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12269  0055D6  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12270  0055D8  E102               	bnz	u18835
 12271  0055DA  516D               	movf	?_stristr& (0+255),w,b
 12272  0055DC  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12273  0055DE                     u18835:
 12274  0055DE  E10C               	bnz	l14266
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;main.c: 656: bSilent = 0;
 12278  0055E0  6A30               	clrf	_bSilent,c
 12279                           
 12280                           ; BSR set to: 0
 12281                           ;main.c: 657: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 12282  0055E2  0E60               	movlw	96
 12283  0055E4  ECEA  F007         	call	_ECANSetOperationMode
 12284                           
 12285                           ; BSR set to: 0
 12286                           ;main.c: 658: putsUSART((char *) "+OK\r\n");
 12287  0055E8  0E7C               	movlw	high STR_9
 12288  0055EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12289  0055EC  0E65               	movlw	low STR_9
 12290  0055EE  6F61               	movwf	?_putsUSART& (0+255),b
 12291  0055F0  EC8D  F00A         	call	_putsUSART	;wreg free
 12292                           
 12293                           ;main.c: 659: }
 12294  0055F4  EF0C  F035         	goto	l14934
 12295  0055F8                     l14266:
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;main.c: 661: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 12299  0055F8  0E01               	movlw	high _cmdbuf
 12300  0055FA  0100               	movlb	0	; () banked
 12301  0055FC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12302  0055FE  0E2D               	movlw	low _cmdbuf
 12303  005600  6F6D               	movwf	?_stristr& (0+255),b
 12304  005602  0E7B               	movlw	high STR_18
 12305  005604  6F70               	movwf	(?_stristr+3)& (0+255),b
 12306  005606  0EF3               	movlw	low STR_18
 12307  005608  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12308  00560A  EC86  F00C         	call	_stristr	;wreg free
 12309  00560E  0E2D               	movlw	low _cmdbuf
 12310  005610  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12311  005612  0E01               	movlw	high _cmdbuf
 12312  005614  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12313  005616  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12314  005618  E102               	bnz	u18845
 12315  00561A  516D               	movf	?_stristr& (0+255),w,b
 12316  00561C  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12317  00561E                     u18845:
 12318  00561E  E10B               	bnz	l14272
 12319                           
 12320                           ; BSR set to: 0
 12321                           ;main.c: 662: printFirmwareVersion();
 12322  005620  EC86  F00D         	call	_printFirmwareVersion	;wreg free
 12323                           
 12324                           ;main.c: 663: putsUSART((char *) "+OK\r\n");
 12325  005624  0E7C               	movlw	high STR_9
 12326  005626  0100               	movlb	0	; () banked
 12327  005628  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12328  00562A  0E65               	movlw	low STR_9
 12329  00562C  6F61               	movwf	?_putsUSART& (0+255),b
 12330  00562E  EC8D  F00A         	call	_putsUSART	;wreg free
 12331                           
 12332                           ;main.c: 664: }
 12333  005632  EF0C  F035         	goto	l14934
 12334  005636                     l14272:
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;main.c: 666: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 12338  005636  0E01               	movlw	high _cmdbuf
 12339  005638  0100               	movlb	0	; () banked
 12340  00563A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12341  00563C  0E2D               	movlw	low _cmdbuf
 12342  00563E  6F6D               	movwf	?_stristr& (0+255),b
 12343  005640  0E7C               	movlw	high STR_20
 12344  005642  6F70               	movwf	(?_stristr+3)& (0+255),b
 12345  005644  0E2E               	movlw	low STR_20
 12346  005646  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12347  005648  EC86  F00C         	call	_stristr	;wreg free
 12348  00564C  0E2D               	movlw	low _cmdbuf
 12349  00564E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12350  005650  0E01               	movlw	high _cmdbuf
 12351  005652  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12352  005654  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12353  005656  E102               	bnz	u18855
 12354  005658  516D               	movf	?_stristr& (0+255),w,b
 12355  00565A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12356  00565C                     u18855:
 12357  00565C  E165               	bnz	l14308
 12358                           
 12359                           ; BSR set to: 0
 12360                           ;main.c: 667: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12361  00565E  506F               	movf	3951,w,c	;volatile
 12362  005660  0BE0               	andlw	224
 12363  005662  0102               	movlb	2	; () banked
 12364  005664  6FBE               	movwf	doModeVerbose@ifmode& (0+255),b
 12365                           
 12366                           ; BSR set to: 2
 12367                           ;main.c: 668: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12368  005666  67BE               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12369  005668  D00B               	goto	l14282
 12370                           
 12371                           ; BSR set to: 2
 12372  00566A  6630               	tstfsz	_bSilent,c
 12373  00566C  D009               	goto	l14282
 12374                           
 12375                           ; BSR set to: 2
 12376                           ;main.c: 669: putsUSART((char *) "+OK - Normal mode\r\n");
 12377  00566E  0E7A               	movlw	high STR_21
 12378  005670  0100               	movlb	0	; () banked
 12379  005672  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12380  005674  0E2C               	movlw	low STR_21
 12381  005676  6F61               	movwf	?_putsUSART& (0+255),b
 12382  005678  EC8D  F00A         	call	_putsUSART	;wreg free
 12383                           
 12384                           ;main.c: 670: }
 12385  00567C  EF0C  F035         	goto	l14934
 12386  005680                     l14282:
 12387                           
 12388                           ; BSR set to: 2
 12389                           ;main.c: 671: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12390  005680  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12391  005682  0E01               	movlw	1
 12392  005684  A4D8               	btfss	status,2,c
 12393  005686  0E00               	movlw	0
 12394  005688  1430               	andwf	_bSilent,w,c
 12395  00568A  E009               	bz	l14286
 12396                           
 12397                           ; BSR set to: 2
 12398                           ;main.c: 672: putsUSART((char *) "+OK - Silent mode\r\n");
 12399  00568C  0E7A               	movlw	high STR_22
 12400  00568E  0100               	movlb	0	; () banked
 12401  005690  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12402  005692  0E40               	movlw	low STR_22
 12403  005694  6F61               	movwf	?_putsUSART& (0+255),b
 12404  005696  EC8D  F00A         	call	_putsUSART	;wreg free
 12405                           
 12406                           ;main.c: 673: }
 12407  00569A  EF0C  F035         	goto	l14934
 12408  00569E                     l14286:
 12409                           
 12410                           ; BSR set to: 2
 12411                           ;main.c: 674: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12412  00569E  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12413  0056A0  0A20               	xorlw	32
 12414  0056A2  E109               	bnz	l14290
 12415                           
 12416                           ; BSR set to: 2
 12417                           ;main.c: 675: putsUSART((char *) "+OK - Sleep mode\r\n");
 12418  0056A4  0E7A               	movlw	high STR_23
 12419  0056A6  0100               	movlb	0	; () banked
 12420  0056A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12421  0056AA  0E7C               	movlw	low STR_23
 12422  0056AC  6F61               	movwf	?_putsUSART& (0+255),b
 12423  0056AE  EC8D  F00A         	call	_putsUSART	;wreg free
 12424                           
 12425                           ;main.c: 676: }
 12426  0056B2  EF0C  F035         	goto	l14934
 12427  0056B6                     l14290:
 12428                           
 12429                           ; BSR set to: 2
 12430                           ;main.c: 677: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12431  0056B6  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12432  0056B8  0A40               	xorlw	64
 12433  0056BA  E109               	bnz	l14294
 12434                           
 12435                           ; BSR set to: 2
 12436                           ;main.c: 678: putsUSART((char *) "+OK - Loopback mode\r\n");
 12437  0056BC  0E79               	movlw	high STR_24
 12438  0056BE  0100               	movlb	0	; () banked
 12439  0056C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12440  0056C2  0E99               	movlw	low STR_24
 12441  0056C4  6F61               	movwf	?_putsUSART& (0+255),b
 12442  0056C6  EC8D  F00A         	call	_putsUSART	;wreg free
 12443                           
 12444                           ;main.c: 679: }
 12445  0056CA  EF0C  F035         	goto	l14934
 12446  0056CE                     l14294:
 12447                           
 12448                           ; BSR set to: 2
 12449                           ;main.c: 680: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12450  0056CE  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12451  0056D0  0A60               	xorlw	96
 12452  0056D2  E109               	bnz	l14298
 12453                           
 12454                           ; BSR set to: 2
 12455                           ;main.c: 681: putsUSART((char *) "+OK - Listen only mode\r\n");
 12456  0056D4  0E78               	movlw	high STR_25
 12457  0056D6  0100               	movlb	0	; () banked
 12458  0056D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12459  0056DA  0E32               	movlw	low STR_25
 12460  0056DC  6F61               	movwf	?_putsUSART& (0+255),b
 12461  0056DE  EC8D  F00A         	call	_putsUSART	;wreg free
 12462                           
 12463                           ;main.c: 682: }
 12464  0056E2  EF0C  F035         	goto	l14934
 12465  0056E6                     l14298:
 12466                           
 12467                           ; BSR set to: 2
 12468                           ;main.c: 683: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12469  0056E6  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12470  0056E8  0A80               	xorlw	128
 12471  0056EA  E109               	bnz	l14302
 12472                           
 12473                           ; BSR set to: 2
 12474                           ;main.c: 684: putsUSART((char *) "+OK - Closed mode\r\n");
 12475  0056EC  0E7A               	movlw	high STR_26
 12476  0056EE  0100               	movlb	0	; () banked
 12477  0056F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12478  0056F2  0E18               	movlw	low STR_26
 12479  0056F4  6F61               	movwf	?_putsUSART& (0+255),b
 12480  0056F6  EC8D  F00A         	call	_putsUSART	;wreg free
 12481                           
 12482                           ;main.c: 685: }
 12483  0056FA  EF0C  F035         	goto	l14934
 12484  0056FE                     l14302:
 12485                           
 12486                           ; BSR set to: 2
 12487                           ;main.c: 686: else if (ECAN_OP_MODE_BITS == ifmode) {
 12488  0056FE  51BE               	movf	doModeVerbose@ifmode& (0+255),w,b
 12489  005700  0AE0               	xorlw	224
 12490  005702  E109               	bnz	l14306
 12491                           
 12492                           ; BSR set to: 2
 12493                           ;main.c: 687: putsUSART((char *) "+OK - Bits mode\r\n");
 12494  005704  0E7A               	movlw	high STR_27
 12495  005706  0100               	movlb	0	; () banked
 12496  005708  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12497  00570A  0E8F               	movlw	low STR_27
 12498  00570C  6F61               	movwf	?_putsUSART& (0+255),b
 12499  00570E  EC8D  F00A         	call	_putsUSART	;wreg free
 12500                           
 12501                           ;main.c: 688: }
 12502  005712  EF0C  F035         	goto	l14934
 12503  005716                     l14306:
 12504                           
 12505                           ; BSR set to: 2
 12506                           ;main.c: 689: else {
 12507                           ;main.c: 690: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12508  005716  0E78               	movlw	high STR_28
 12509  005718  0100               	movlb	0	; () banked
 12510  00571A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12511  00571C  0EC5               	movlw	low STR_28
 12512  00571E  6F61               	movwf	?_putsUSART& (0+255),b
 12513  005720  EC8D  F00A         	call	_putsUSART	;wreg free
 12514  005724  EF0C  F035         	goto	l14934
 12515  005728                     l14308:
 12516                           
 12517                           ; BSR set to: 0
 12518                           ;main.c: 695: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12519  005728  0E01               	movlw	high _cmdbuf
 12520  00572A  0100               	movlb	0	; () banked
 12521  00572C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12522  00572E  0E2D               	movlw	low _cmdbuf
 12523  005730  6F6D               	movwf	?_stristr& (0+255),b
 12524  005732  0E7C               	movlw	high STR_29
 12525  005734  6F70               	movwf	(?_stristr+3)& (0+255),b
 12526  005736  0EEB               	movlw	low STR_29
 12527  005738  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12528  00573A  EC86  F00C         	call	_stristr	;wreg free
 12529  00573E  0E2D               	movlw	low _cmdbuf
 12530  005740  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12531  005742  0E01               	movlw	high _cmdbuf
 12532  005744  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12533  005746  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12534  005748  E102               	bnz	u18955
 12535  00574A  516D               	movf	?_stristr& (0+255),w,b
 12536  00574C  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12537  00574E                     u18955:
 12538  00574E  E001 D0CF          	bnz	l14362
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;main.c: 697: char *p = strtok(cmdbuf, ",");
 12542  005752  EC72  F035         	call	PL30	;call to abstracted procedure
 12543  005756  ECCF  F00D         	call	_strtok	;wreg free
 12544  00575A  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12545  00575E  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12546                           
 12547                           ; BSR set to: 0
 12548                           ;main.c: 700: vscpPriority = 3;
 12549  005762  0E03               	movlw	3
 12550  005764  6E3D               	movwf	_vscpPriority,c
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;main.c: 701: if ((0) != p) {
 12554  005766  0102               	movlb	2	; () banked
 12555  005768  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12556  00576A  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12557  00576C  E008               	bz	l14318
 12558                           
 12559                           ; BSR set to: 2
 12560                           ;main.c: 702: vscpPriority = atoi(p);
 12561  00576E  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12562  005772  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12563  005776  ECBF  F015         	call	_atoi	;wreg free
 12564  00577A  5166               	movf	?_atoi& (0+255),w,b
 12565  00577C  6E3D               	movwf	_vscpPriority,c
 12566  00577E                     l14318:
 12567                           
 12568                           ;main.c: 703: }
 12569                           ;main.c: 706: vscpClass = 0;
 12570  00577E  6A38               	clrf	_vscpClass,c
 12571  005780  6A39               	clrf	_vscpClass+1,c
 12572                           
 12573                           ;main.c: 707: if ((0) != (p = strtok((0), ","))) {
 12574  005782  EC36  F035         	call	PL6	;call to abstracted procedure
 12575  005786  ECCF  F00D         	call	_strtok	;wreg free
 12576  00578A  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12577  00578E  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12578  005792  0102               	movlb	2	; () banked
 12579  005794  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12580  005796  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12581  005798  E00A               	bz	l14324
 12582                           
 12583                           ; BSR set to: 2
 12584                           ;main.c: 708: vscpClass = atoi(p);
 12585  00579A  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12586  00579E  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12587  0057A2  ECBF  F015         	call	_atoi	;wreg free
 12588  0057A6  C066  F038         	movff	?_atoi,_vscpClass
 12589  0057AA  C067  F039         	movff	?_atoi+1,_vscpClass+1
 12590  0057AE                     l14324:
 12591                           
 12592                           ;main.c: 709: }
 12593                           ;main.c: 712: vscpType = 0;
 12594  0057AE  6A3F               	clrf	_vscpType,c
 12595                           
 12596                           ;main.c: 713: if ((0) != (p = strtok((0), ","))) {
 12597  0057B0  EC36  F035         	call	PL6	;call to abstracted procedure
 12598  0057B4  ECCF  F00D         	call	_strtok	;wreg free
 12599  0057B8  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12600  0057BC  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12601  0057C0  0102               	movlb	2	; () banked
 12602  0057C2  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12603  0057C4  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12604  0057C6  E008               	bz	l14330
 12605                           
 12606                           ; BSR set to: 2
 12607                           ;main.c: 714: vscpType = atoi(p);
 12608  0057C8  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12609  0057CC  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12610  0057D0  ECBF  F015         	call	_atoi	;wreg free
 12611  0057D4  5166               	movf	?_atoi& (0+255),w,b
 12612  0057D6  6E3F               	movwf	_vscpType,c
 12613  0057D8                     l14330:
 12614                           
 12615                           ;main.c: 715: }
 12616                           ;main.c: 718: vscpNodeId = 0;
 12617  0057D8  6A3C               	clrf	_vscpNodeId,c
 12618                           
 12619                           ;main.c: 719: if ((0) != (p = strtok((0), ","))) {
 12620  0057DA  EC36  F035         	call	PL6	;call to abstracted procedure
 12621  0057DE  ECCF  F00D         	call	_strtok	;wreg free
 12622  0057E2  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12623  0057E6  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12624  0057EA  0102               	movlb	2	; () banked
 12625  0057EC  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12626  0057EE  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12627  0057F0  E008               	bz	l14336
 12628                           
 12629                           ; BSR set to: 2
 12630                           ;main.c: 720: vscpNodeId = atoi(p);
 12631  0057F2  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12632  0057F6  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12633  0057FA  ECBF  F015         	call	_atoi	;wreg free
 12634  0057FE  5166               	movf	?_atoi& (0+255),w,b
 12635  005800  6E3C               	movwf	_vscpNodeId,c
 12636  005802                     l14336:
 12637                           
 12638                           ;main.c: 721: }
 12639                           ;main.c: 724: vscpSize = 0;
 12640  005802  6A3E               	clrf	_vscpSize,c
 12641                           
 12642                           ;main.c: 725: if ((0) != (p = strtok((0), ","))) {
 12643  005804  EC36  F035         	call	PL6	;call to abstracted procedure
 12644  005808  ECCF  F00D         	call	_strtok	;wreg free
 12645  00580C  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12646  005810  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12647  005814  0102               	movlb	2	; () banked
 12648  005816  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12649  005818  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12650  00581A  E008               	bz	l14342
 12651                           
 12652                           ; BSR set to: 2
 12653                           ;main.c: 726: vscpSize = atoi(p);
 12654  00581C  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12655  005820  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12656  005824  ECBF  F015         	call	_atoi	;wreg free
 12657  005828  5166               	movf	?_atoi& (0+255),w,b
 12658  00582A  6E3E               	movwf	_vscpSize,c
 12659  00582C                     l14342:
 12660                           
 12661                           ;main.c: 727: }
 12662                           ;main.c: 729: memset( vscpData, 0, 8 );
 12663  00582C  0E01               	movlw	high _vscpData
 12664  00582E  0100               	movlb	0	; () banked
 12665  005830  6F61               	movwf	(?_memset+1)& (0+255),b
 12666  005832  0EE5               	movlw	low _vscpData
 12667  005834  6F60               	movwf	?_memset& (0+255),b
 12668  005836  6B63               	clrf	(?_memset+3)& (0+255),b
 12669  005838  6B62               	clrf	(?_memset+2)& (0+255),b
 12670  00583A  6B65               	clrf	(?_memset+5)& (0+255),b
 12671  00583C  0E08               	movlw	8
 12672  00583E  6F64               	movwf	(?_memset+4)& (0+255),b
 12673  005840  EC25  F008         	call	_memset	;wreg free
 12674                           
 12675                           ; BSR set to: 0
 12676                           ;main.c: 730: for (i = 0; i < vscpSize; i++) {
 12677  005844  0102               	movlb	2	; () banked
 12678  005846  6BAF               	clrf	doModeVerbose@i& (0+255),b
 12679  005848  D01D               	goto	l14352
 12680  00584A                     l14346:
 12681                           
 12682                           ; BSR set to: 2
 12683                           ;main.c: 731: if ((0) != (p = strtok((0), ","))) {
 12684  00584A  EC36  F035         	call	PL6	;call to abstracted procedure
 12685  00584E  ECCF  F00D         	call	_strtok	;wreg free
 12686  005852  C06C  F2BF         	movff	?_strtok,doModeVerbose@p
 12687  005856  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p+1
 12688  00585A  0102               	movlb	2	; () banked
 12689  00585C  51C0               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12690  00585E  11BF               	iorwf	doModeVerbose@p& (0+255),w,b
 12691  005860  E014               	bz	l14354
 12692                           
 12693                           ; BSR set to: 2
 12694                           ;main.c: 732: vscpData[ i ] = atoi(p);
 12695  005862  0EE5               	movlw	low _vscpData
 12696  005864  25AF               	addwf	doModeVerbose@i& (0+255),w,b
 12697  005866  6ED9               	movwf	fsr2l,c
 12698  005868  6ADA               	clrf	fsr2h,c
 12699  00586A  0101               	movlb	1	; () banked
 12700  00586C  0E01               	movlw	high _vscpData
 12701  00586E  22DA               	addwfc	fsr2h,f,c
 12702  005870  C2BF  F066         	movff	doModeVerbose@p,?_atoi
 12703  005874  C2C0  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12704  005878  ECBF  F015         	call	_atoi	;wreg free
 12705  00587C  5166               	movf	?_atoi& (0+255),w,b
 12706  00587E  6EDF               	movwf	indf2,c
 12707                           
 12708                           ; BSR set to: 0
 12709                           
 12710                           ;main.c: 733: }
 12711  005880  0102               	movlb	2	; () banked
 12712  005882  2BAF               	incf	doModeVerbose@i& (0+255),f,b
 12713  005884                     l14352:
 12714                           
 12715                           ; BSR set to: 2
 12716  005884  503E               	movf	_vscpSize,w,c
 12717  005886  5DAF               	subwf	doModeVerbose@i& (0+255),w,b
 12718  005888  E3E0               	bnc	l14346
 12719  00588A                     l14354:
 12720                           
 12721                           ; BSR set to: 2
 12722                           ;main.c: 736: }
 12723                           ;main.c: 737: }
 12724                           ;main.c: 739: if ( sendVSCPFrame(vscpClass,
 12725                           ;main.c: 740: vscpType,
 12726                           ;main.c: 741: vscpNodeId,
 12727                           ;main.c: 742: vscpPriority,
 12728                           ;main.c: 743: vscpSize,
 12729                           ;main.c: 744: vscpData ) ) {
 12730  00588A  C038  F098         	movff	_vscpClass,?_sendVSCPFrame
 12731  00588E  C039  F099         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12732  005892  C03F  F09A         	movff	_vscpType,?_sendVSCPFrame+2
 12733  005896  C03C  F09B         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12734  00589A  C03D  F09C         	movff	_vscpPriority,?_sendVSCPFrame+4
 12735  00589E  C03E  F09D         	movff	_vscpSize,?_sendVSCPFrame+5
 12736  0058A2  0E01               	movlw	high _vscpData
 12737  0058A4  0100               	movlb	0	; () banked
 12738  0058A6  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12739  0058A8  0EE5               	movlw	low _vscpData
 12740  0058AA  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12741  0058AC  EC47  F010         	call	_sendVSCPFrame	;wreg free
 12742  0058B0  0900               	iorlw	0
 12743  0058B2  E015               	bz	l14360
 12744                           
 12745                           ;main.c: 746: cntTxFrames++;
 12746  0058B4  0101               	movlb	1	; () banked
 12747  0058B6  2B14               	incf	_cntTxFrames& (0+255),f,b
 12748  0058B8  0E00               	movlw	0
 12749  0058BA  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12750  0058BC  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12751  0058BE  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12752                           
 12753                           ;main.c: 747: cntTxBytes += vscpSize;
 12754  0058C0  503E               	movf	_vscpSize,w,c
 12755  0058C2  2710               	addwf	_cntTxBytes& (0+255),f,b
 12756  0058C4  0E00               	movlw	0
 12757  0058C6  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12758  0058C8  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12759  0058CA  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12760                           
 12761                           ; BSR set to: 1
 12762                           ;main.c: 748: putsUSART((char *) "+OK\r\n");
 12763  0058CC  0E7C               	movlw	high STR_9
 12764  0058CE  0100               	movlb	0	; () banked
 12765  0058D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12766  0058D2  0E65               	movlw	low STR_9
 12767  0058D4  6F61               	movwf	?_putsUSART& (0+255),b
 12768  0058D6  EC8D  F00A         	call	_putsUSART	;wreg free
 12769                           
 12770                           ;main.c: 749: }
 12771  0058DA  EF0C  F035         	goto	l14934
 12772  0058DE                     l14360:
 12773                           
 12774                           ;main.c: 750: else {
 12775                           ;main.c: 751: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12776  0058DE  0E76               	movlw	high STR_37
 12777  0058E0  0100               	movlb	0	; () banked
 12778  0058E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12779  0058E4  0ECB               	movlw	low STR_37
 12780  0058E6  6F61               	movwf	?_putsUSART& (0+255),b
 12781  0058E8  EC8D  F00A         	call	_putsUSART	;wreg free
 12782  0058EC  EF0C  F035         	goto	l14934
 12783  0058F0                     l14362:
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;main.c: 755: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12787  0058F0  0E01               	movlw	high _cmdbuf
 12788  0058F2  0100               	movlb	0	; () banked
 12789  0058F4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12790  0058F6  0E2D               	movlw	low _cmdbuf
 12791  0058F8  6F6D               	movwf	?_stristr& (0+255),b
 12792  0058FA  0E7C               	movlw	high STR_38
 12793  0058FC  6F70               	movwf	(?_stristr+3)& (0+255),b
 12794  0058FE  0EE8               	movlw	low STR_38
 12795  005900  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12796  005902  EC86  F00C         	call	_stristr	;wreg free
 12797  005906  0E2D               	movlw	low _cmdbuf
 12798  005908  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12799  00590A  0E01               	movlw	high _cmdbuf
 12800  00590C  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12801  00590E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12802  005910  E102               	bnz	u19045
 12803  005912  516D               	movf	?_stristr& (0+255),w,b
 12804  005914  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12805  005916                     u19045:
 12806  005916  E116               	bnz	l14370
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;main.c: 756: if (receivePrintEventVerbose()) {
 12810  005918  ECD2  F021         	call	_receivePrintEventVerbose	;wreg free
 12811  00591C  0900               	iorlw	0
 12812  00591E  E009               	bz	l14368
 12813                           
 12814                           ;main.c: 757: putsUSART((char *) "+OK\r\n");
 12815  005920  0E7C               	movlw	high STR_9
 12816  005922  0100               	movlb	0	; () banked
 12817  005924  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12818  005926  0E65               	movlw	low STR_9
 12819  005928  6F61               	movwf	?_putsUSART& (0+255),b
 12820  00592A  EC8D  F00A         	call	_putsUSART	;wreg free
 12821                           
 12822                           ;main.c: 758: }
 12823  00592E  EF0C  F035         	goto	l14934
 12824  005932                     l14368:
 12825                           
 12826                           ;main.c: 759: else {
 12827                           ;main.c: 760: putsUSART((char *) "+OK - no events\r\n");
 12828  005932  0E7A               	movlw	high STR_40
 12829  005934  0100               	movlb	0	; () banked
 12830  005936  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12831  005938  0EA1               	movlw	low STR_40
 12832  00593A  6F61               	movwf	?_putsUSART& (0+255),b
 12833  00593C  EC8D  F00A         	call	_putsUSART	;wreg free
 12834  005940  EF0C  F035         	goto	l14934
 12835  005944                     l14370:
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;main.c: 764: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12839  005944  0E01               	movlw	high _cmdbuf
 12840  005946  0100               	movlb	0	; () banked
 12841  005948  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12842  00594A  0E2D               	movlw	low _cmdbuf
 12843  00594C  6F6D               	movwf	?_stristr& (0+255),b
 12844  00594E  0E7C               	movlw	high STR_41
 12845  005950  6F70               	movwf	(?_stristr+3)& (0+255),b
 12846  005952  0EBC               	movlw	low STR_41
 12847  005954  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12848  005956  EC86  F00C         	call	_stristr	;wreg free
 12849  00595A  0E2D               	movlw	low _cmdbuf
 12850  00595C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12851  00595E  0E01               	movlw	high _cmdbuf
 12852  005960  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12853  005962  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12854  005964  E102               	bnz	u19065
 12855  005966  516D               	movf	?_stristr& (0+255),w,b
 12856  005968  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12857  00596A                     u19065:
 12858  00596A  E10B               	bnz	l14376
 12859                           
 12860                           ; BSR set to: 0
 12861                           ;main.c: 765: printStatistics();
 12862  00596C  EC72  F01B         	call	_printStatistics	;wreg free
 12863                           
 12864                           ;main.c: 766: putsUSART((char *) "+OK\r\n");
 12865  005970  0E7C               	movlw	high STR_9
 12866  005972  0100               	movlb	0	; () banked
 12867  005974  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12868  005976  0E65               	movlw	low STR_9
 12869  005978  6F61               	movwf	?_putsUSART& (0+255),b
 12870  00597A  EC8D  F00A         	call	_putsUSART	;wreg free
 12871                           
 12872                           ;main.c: 767: }
 12873  00597E  EF0C  F035         	goto	l14934
 12874  005982                     l14376:
 12875                           
 12876                           ; BSR set to: 0
 12877                           ;main.c: 769: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12878  005982  0E01               	movlw	high _cmdbuf
 12879  005984  0100               	movlb	0	; () banked
 12880  005986  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12881  005988  0E2D               	movlw	low _cmdbuf
 12882  00598A  6F6D               	movwf	?_stristr& (0+255),b
 12883  00598C  0E7C               	movlw	high STR_43
 12884  00598E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12885  005990  0ED6               	movlw	low STR_43
 12886  005992  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12887  005994  EC86  F00C         	call	_stristr	;wreg free
 12888  005998  0E2D               	movlw	low _cmdbuf
 12889  00599A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12890  00599C  0E01               	movlw	high _cmdbuf
 12891  00599E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12892  0059A0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12893  0059A2  E102               	bnz	u19075
 12894  0059A4  516D               	movf	?_stristr& (0+255),w,b
 12895  0059A6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12896  0059A8                     u19075:
 12897  0059A8  E10B               	bnz	l14382
 12898                           
 12899                           ; BSR set to: 0
 12900                           ;main.c: 770: printErrors();
 12901  0059AA  EC1C  F023         	call	_printErrors	;wreg free
 12902                           
 12903                           ;main.c: 771: putsUSART((char *) "+OK\r\n");
 12904  0059AE  0E7C               	movlw	high STR_9
 12905  0059B0  0100               	movlb	0	; () banked
 12906  0059B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12907  0059B4  0E65               	movlw	low STR_9
 12908  0059B6  6F61               	movwf	?_putsUSART& (0+255),b
 12909  0059B8  EC8D  F00A         	call	_putsUSART	;wreg free
 12910                           
 12911                           ;main.c: 772: }
 12912  0059BC  EF0C  F035         	goto	l14934
 12913  0059C0                     l14382:
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;main.c: 774: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12917  0059C0  0E01               	movlw	high _cmdbuf
 12918  0059C2  0100               	movlb	0	; () banked
 12919  0059C4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12920  0059C6  0E2D               	movlw	low _cmdbuf
 12921  0059C8  6F6D               	movwf	?_stristr& (0+255),b
 12922  0059CA  0E7C               	movlw	high STR_45
 12923  0059CC  6F70               	movwf	(?_stristr+3)& (0+255),b
 12924  0059CE  0EB7               	movlw	low STR_45
 12925  0059D0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12926  0059D2  EC86  F00C         	call	_stristr	;wreg free
 12927  0059D6  0E2D               	movlw	low _cmdbuf
 12928  0059D8  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12929  0059DA  0E01               	movlw	high _cmdbuf
 12930  0059DC  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12931  0059DE  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12932  0059E0  E102               	bnz	u19085
 12933  0059E2  516D               	movf	?_stristr& (0+255),w,b
 12934  0059E4  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12935  0059E6                     u19085:
 12936  0059E6  E10B               	bnz	l14386
 12937                           
 12938                           ; BSR set to: 0
 12939                           ;main.c: 775: printHelp();
 12940  0059E8  EC41  F01C         	call	_printHelp	;wreg free
 12941                           
 12942                           ;main.c: 776: putsUSART((char *) "+OK\r\n");
 12943  0059EC  0E7C               	movlw	high STR_9
 12944  0059EE  0100               	movlb	0	; () banked
 12945  0059F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12946  0059F2  0E65               	movlw	low STR_9
 12947  0059F4  6F61               	movwf	?_putsUSART& (0+255),b
 12948  0059F6  EC8D  F00A         	call	_putsUSART	;wreg free
 12949                           
 12950                           ;main.c: 777: }
 12951  0059FA  EF0C  F035         	goto	l14934
 12952  0059FE                     l14386:
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;main.c: 779: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12956  0059FE  0E01               	movlw	high _cmdbuf
 12957  005A00  0100               	movlb	0	; () banked
 12958  005A02  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12959  005A04  0E2D               	movlw	low _cmdbuf
 12960  005A06  6F6D               	movwf	?_stristr& (0+255),b
 12961  005A08  0E7C               	movlw	high STR_47
 12962  005A0A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12963  005A0C  0E94               	movlw	low STR_47
 12964  005A0E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12965  005A10  EC86  F00C         	call	_stristr	;wreg free
 12966  005A14  0E2D               	movlw	low _cmdbuf
 12967  005A16  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12968  005A18  0E01               	movlw	high _cmdbuf
 12969  005A1A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12970  005A1C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12971  005A1E  E102               	bnz	u19095
 12972  005A20  516D               	movf	?_stristr& (0+255),w,b
 12973  005A22  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12974  005A24                     u19095:
 12975  005A24  E10B               	bnz	l14392
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;main.c: 780: findNodes();
 12979  005A26  ECCC  F016         	call	_findNodes	;wreg free
 12980                           
 12981                           ;main.c: 781: putsUSART((char *) "+OK\r\n");
 12982  005A2A  0E7C               	movlw	high STR_9
 12983  005A2C  0100               	movlb	0	; () banked
 12984  005A2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12985  005A30  0E65               	movlw	low STR_9
 12986  005A32  6F61               	movwf	?_putsUSART& (0+255),b
 12987  005A34  EC8D  F00A         	call	_putsUSART	;wreg free
 12988                           
 12989                           ;main.c: 782: }
 12990  005A38  EF0C  F035         	goto	l14934
 12991  005A3C                     l14392:
 12992                           
 12993                           ; BSR set to: 0
 12994                           ;main.c: 785: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12995  005A3C  0E01               	movlw	high _cmdbuf
 12996  005A3E  0100               	movlb	0	; () banked
 12997  005A40  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12998  005A42  0E2D               	movlw	low _cmdbuf
 12999  005A44  6F6D               	movwf	?_stristr& (0+255),b
 13000  005A46  0E7C               	movlw	high STR_49
 13001  005A48  6F70               	movwf	(?_stristr+3)& (0+255),b
 13002  005A4A  0E99               	movlw	low STR_49
 13003  005A4C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13004  005A4E  EC86  F00C         	call	_stristr	;wreg free
 13005  005A52  0E2D               	movlw	low _cmdbuf
 13006  005A54  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13007  005A56  0E01               	movlw	high _cmdbuf
 13008  005A58  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13009  005A5A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13010  005A5C  E102               	bnz	u19105
 13011  005A5E  516D               	movf	?_stristr& (0+255),w,b
 13012  005A60  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13013  005A62                     u19105:
 13014  005A62  E001 D211          	bnz	l14548
 13015                           
 13016                           ; BSR set to: 0
 13017                           ;main.c: 787: uint8_t i;
 13018                           ;main.c: 788: uint8_t nodeid;
 13019                           ;main.c: 789: uint8_t page = 0;
 13020  005A66  0102               	movlb	2	; () banked
 13021  005A68  6BB4               	clrf	doModeVerbose@page& (0+255),b
 13022                           
 13023                           ; BSR set to: 2
 13024                           ;main.c: 790: uint8_t reg;
 13025                           ;main.c: 791: uint8_t value;
 13026                           ;main.c: 792: uint8_t count = 1;
 13027  005A6A  0E01               	movlw	1
 13028  005A6C  6FB1               	movwf	doModeVerbose@count& (0+255),b
 13029                           
 13030                           ; BSR set to: 2
 13031                           ;main.c: 794: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13032  005A6E  506F               	movf	3951,w,c	;volatile
 13033  005A70  0BE0               	andlw	224
 13034  005A72  E009               	bz	l14404
 13035                           
 13036                           ; BSR set to: 2
 13037                           ;main.c: 795: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 13038  005A74  0E70               	movlw	high STR_50
 13039  005A76  0100               	movlb	0	; () banked
 13040  005A78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13041  005A7A  0EE3               	movlw	low STR_50
 13042  005A7C  6F61               	movwf	?_putsUSART& (0+255),b
 13043  005A7E  EC8D  F00A         	call	_putsUSART	;wreg free
 13044  005A82  EF1A  F035         	goto	l559
 13045  005A86                     l14404:
 13046                           
 13047                           ; BSR set to: 2
 13048                           ;main.c: 797: }
 13049                           ;main.c: 799: strcpy(cmdbuf, cmdbuf + 5);
 13050  005A86  EC1B  F035         	call	PL2	;call to abstracted procedure
 13051  005A8A  EC3C  F008         	call	_strcpy	;wreg free
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;main.c: 800: char *p = strtok(cmdbuf, " ");
 13055  005A8E  0E01               	movlw	high _cmdbuf
 13056  005A90  EC7C  F035         	call	PL34	;call to abstracted procedure
 13057  005A94  ECCF  F00D         	call	_strtok	;wreg free
 13058  005A98  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1190
 13059  005A9C  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13060                           
 13061                           ; BSR set to: 0
 13062                           ;main.c: 801: if ((0) != p) {
 13063  005AA0  0102               	movlb	2	; () banked
 13064  005AA2  51BB               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13065  005AA4  11BA               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13066  005AA6  E00A               	bz	l14412
 13067                           
 13068                           ; BSR set to: 2
 13069                           ;main.c: 802: nodeid = atoi(p);
 13070  005AA8  C2BA  F066         	movff	doModeVerbose@p_1190,?_atoi
 13071  005AAC  C2BB  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13072  005AB0  ECBF  F015         	call	_atoi	;wreg free
 13073  005AB4  5166               	movf	?_atoi& (0+255),w,b
 13074  005AB6  0102               	movlb	2	; () banked
 13075  005AB8  6FB2               	movwf	doModeVerbose@nodeid& (0+255),b
 13076                           
 13077                           ;main.c: 803: }
 13078  005ABA  D009               	goto	l14416
 13079  005ABC                     l14412:
 13080                           
 13081                           ; BSR set to: 2
 13082                           ;main.c: 804: else {
 13083                           ;main.c: 805: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13084  005ABC  0E78               	movlw	high STR_52
 13085  005ABE  0100               	movlb	0	; () banked
 13086  005AC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13087  005AC2  0EAD               	movlw	low STR_52
 13088  005AC4  6F61               	movwf	?_putsUSART& (0+255),b
 13089  005AC6  EC8D  F00A         	call	_putsUSART	;wreg free
 13090  005ACA  EF1A  F035         	goto	l559
 13091  005ACE                     l14416:
 13092                           
 13093                           ; BSR set to: 2
 13094                           ;main.c: 807: }
 13095                           ;main.c: 809: if ((0) != (p = strtok((0), " "))) {
 13096  005ACE  EC6A  F035         	call	PL24	;call to abstracted procedure
 13097  005AD2  ECCF  F00D         	call	_strtok	;wreg free
 13098  005AD6  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1190
 13099  005ADA  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13100  005ADE  0102               	movlb	2	; () banked
 13101  005AE0  51BB               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13102  005AE2  11BA               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13103  005AE4  E034               	bz	l14424
 13104                           
 13105                           ; BSR set to: 2
 13106                           ;main.c: 811: char *preg;
 13107                           ;main.c: 812: if (preg = strchr(p, ':')) {
 13108  005AE6  C2BA  F060         	movff	doModeVerbose@p_1190,?_strchr
 13109  005AEA  C2BB  F061         	movff	doModeVerbose@p_1190+1,?_strchr+1
 13110  005AEE  0100               	movlb	0	; () banked
 13111  005AF0  6B63               	clrf	(?_strchr+3)& (0+255),b
 13112  005AF2  0E3A               	movlw	58
 13113  005AF4  6F62               	movwf	(?_strchr+2)& (0+255),b
 13114  005AF6  EC74  F00B         	call	_strchr	;wreg free
 13115  005AFA  C060  F284         	movff	?_strchr,doModeVerbose@preg
 13116  005AFE  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 13117  005B02  0102               	movlb	2	; () banked
 13118  005B04  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 13119  005B06  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 13120  005B08  E018               	bz	l14422
 13121                           
 13122                           ; BSR set to: 2
 13123                           ;main.c: 813: page = atoi(p);
 13124  005B0A  C2BA  F066         	movff	doModeVerbose@p_1190,?_atoi
 13125  005B0E  C2BB  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13126  005B12  ECBF  F015         	call	_atoi	;wreg free
 13127  005B16  5166               	movf	?_atoi& (0+255),w,b
 13128  005B18  0102               	movlb	2	; () banked
 13129  005B1A  6FB4               	movwf	doModeVerbose@page& (0+255),b
 13130                           
 13131                           ;main.c: 814: reg = atoi(preg + 1);
 13132  005B1C  2984               	incf	doModeVerbose@preg& (0+255),w,b
 13133  005B1E  0100               	movlb	0	; () banked
 13134  005B20  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13135  005B22  0E00               	movlw	0
 13136  005B24  0102               	movlb	2	; () banked
 13137  005B26  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 13138  005B28  0100               	movlb	0	; () banked
 13139  005B2A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13140  005B2C  C0CC  F066         	movff	??_doModeVerbose,?_atoi
 13141  005B30  C0CD  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13142  005B34  ECBF  F015         	call	_atoi	;wreg free
 13143  005B38  D006               	goto	L6
 13144  005B3A                     l14422:
 13145                           
 13146                           ; BSR set to: 2
 13147                           ;main.c: 816: else {
 13148                           ;main.c: 817: reg = atoi(p);
 13149  005B3A  C2BA  F066         	movff	doModeVerbose@p_1190,?_atoi
 13150  005B3E  C2BB  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13151  005B42  ECBF  F015         	call	_atoi	;wreg free
 13152  005B46                     L6:
 13153  005B46  5166               	movf	?_atoi& (0+255),w,b
 13154  005B48  0102               	movlb	2	; () banked
 13155  005B4A  6FB5               	movwf	doModeVerbose@reg& (0+255),b
 13156  005B4C  D009               	goto	l14428
 13157  005B4E                     l14424:
 13158                           
 13159                           ; BSR set to: 2
 13160                           ;main.c: 821: else {
 13161                           ;main.c: 822: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13162  005B4E  0E77               	movlw	high STR_54
 13163  005B50  0100               	movlb	0	; () banked
 13164  005B52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13165  005B54  0E0D               	movlw	low STR_54
 13166  005B56  6F61               	movwf	?_putsUSART& (0+255),b
 13167  005B58  EC8D  F00A         	call	_putsUSART	;wreg free
 13168  005B5C  EF1A  F035         	goto	l559
 13169  005B60                     l14428:
 13170                           
 13171                           ; BSR set to: 2
 13172                           ;main.c: 824: }
 13173                           ;main.c: 827: if ((0) != (p = strtok((0), " "))) {
 13174  005B60  EC6A  F035         	call	PL24	;call to abstracted procedure
 13175  005B64  ECCF  F00D         	call	_strtok	;wreg free
 13176  005B68  C06C  F2BA         	movff	?_strtok,doModeVerbose@p_1190
 13177  005B6C  C06D  F2BB         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13178  005B70  0102               	movlb	2	; () banked
 13179  005B72  51BB               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13180  005B74  11BA               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13181  005B76  E00D               	bz	l566
 13182                           
 13183                           ; BSR set to: 2
 13184                           ;main.c: 828: count = atoi(p);
 13185  005B78  C2BA  F066         	movff	doModeVerbose@p_1190,?_atoi
 13186  005B7C  C2BB  F067         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13187  005B80  ECBF  F015         	call	_atoi	;wreg free
 13188  005B84  5166               	movf	?_atoi& (0+255),w,b
 13189  005B86  0102               	movlb	2	; () banked
 13190  005B88  6FB1               	movwf	doModeVerbose@count& (0+255),b
 13191                           
 13192                           ; BSR set to: 2
 13193                           ;main.c: 829: if (0 == count) count = 1;
 13194  005B8A  67B1               	tstfsz	doModeVerbose@count& (0+255),b
 13195  005B8C  D002               	goto	l566
 13196                           
 13197                           ; BSR set to: 2
 13198  005B8E  0E01               	movlw	1
 13199  005B90  6FB1               	movwf	doModeVerbose@count& (0+255),b
 13200  005B92                     l566:
 13201                           
 13202                           ; BSR set to: 2
 13203                           ;main.c: 830: }
 13204                           ;main.c: 832: BOOL rv = 1;
 13205  005B92  0E01               	movlw	1
 13206  005B94  6FA6               	movwf	doModeVerbose@rv& (0+255),b
 13207                           
 13208                           ; BSR set to: 2
 13209                           ;main.c: 833: for (i = 0; i < count; i++) {
 13210  005B96  6BB7               	clrf	doModeVerbose@i_1183& (0+255),b
 13211  005B98  D15F               	goto	l14540
 13212  005B9A                     l14438:
 13213                           
 13214                           ; BSR set to: 2
 13215                           ;main.c: 835: if (readRegisterExtended(nodeid,
 13216                           ;main.c: 836: page,
 13217                           ;main.c: 837: (reg + i) & 0xff,
 13218                           ;main.c: 838: rwtimeout,
 13219                           ;main.c: 839: &value)) {
 13220  005B9A  0100               	movlb	0	; () banked
 13221  005B9C  C2B4  F0B8         	movff	doModeVerbose@page,?_readRegisterExtended
 13222  005BA0  6BB9               	clrf	(?_readRegisterExtended+1)& (0+255),b
 13223  005BA2  0102               	movlb	2	; () banked
 13224  005BA4  51B5               	movf	doModeVerbose@reg& (0+255),w,b
 13225  005BA6  25B7               	addwf	doModeVerbose@i_1183& (0+255),w,b
 13226  005BA8  0100               	movlb	0	; () banked
 13227  005BAA  6FBA               	movwf	(?_readRegisterExtended+2)& (0+255),b
 13228  005BAC  C035  F0BB         	movff	_rwtimeout,?_readRegisterExtended+3
 13229  005BB0  6BBC               	clrf	(?_readRegisterExtended+4)& (0+255),b
 13230  005BB2  0E02               	movlw	high doModeVerbose@value
 13231  005BB4  6FBE               	movwf	(?_readRegisterExtended+6)& (0+255),b
 13232  005BB6  0EB9               	movlw	low doModeVerbose@value
 13233  005BB8  6FBD               	movwf	(?_readRegisterExtended+5)& (0+255),b
 13234  005BBA  0102               	movlb	2	; () banked
 13235  005BBC  51B2               	movf	doModeVerbose@nodeid& (0+255),w,b
 13236  005BBE  EC47  F014         	call	_readRegisterExtended
 13237  005BC2  0900               	iorlw	0
 13238  005BC4  E101 D0C8          	bz	l570
 13239                           
 13240                           ;main.c: 840: putsUSART((char *) "+OK - nodeid=");
 13241  005BC8  0E7B               	movlw	high STR_56
 13242  005BCA  0100               	movlb	0	; () banked
 13243  005BCC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13244  005BCE  0E37               	movlw	low STR_56
 13245  005BD0  6F61               	movwf	?_putsUSART& (0+255),b
 13246  005BD2  EC8D  F00A         	call	_putsUSART	;wreg free
 13247                           
 13248                           ;main.c: 841: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13249  005BD6  662C               	tstfsz	_bHex,c
 13250  005BD8  D005               	goto	l14446
 13251  005BDA  0E7C               	movlw	high STR_58
 13252  005BDC  0102               	movlb	2	; () banked
 13253  005BDE  6F93               	movwf	(_doModeVerbose$1202+1)& (0+255),b
 13254  005BE0  0E6B               	movlw	low STR_58
 13255  005BE2  D004               	goto	L7
 13256  005BE4                     l14446:
 13257  005BE4  0E7B               	movlw	high STR_57
 13258  005BE6  0102               	movlb	2	; () banked
 13259  005BE8  6F93               	movwf	(_doModeVerbose$1202+1)& (0+255),b
 13260  005BEA  0E67               	movlw	low STR_57
 13261  005BEC                     L7:
 13262  005BEC  6F92               	movwf	_doModeVerbose$1202& (0+255),b
 13263                           
 13264                           ; BSR set to: 2
 13265  005BEE  0E01               	movlw	high _wrkbuf
 13266  005BF0  0100               	movlb	0	; () banked
 13267  005BF2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13268  005BF4  0E7D               	movlw	low _wrkbuf
 13269  005BF6  6F76               	movwf	?_sprintf& (0+255),b
 13270  005BF8  C292  F078         	movff	_doModeVerbose$1202,?_sprintf+2
 13271  005BFC  C293  F079         	movff	_doModeVerbose$1202+1,?_sprintf+3
 13272  005C00  C2B2  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13273  005C04  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13274  005C06  EC6D  F026         	call	_sprintf	;wreg free
 13275                           
 13276                           ; BSR set to: 0
 13277                           ;main.c: 842: putsUSART(wrkbuf);
 13278  005C0A  0E01               	movlw	high _wrkbuf
 13279  005C0C  0100               	movlb	0	; () banked
 13280  005C0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13281  005C10  0E7D               	movlw	low _wrkbuf
 13282  005C12  6F61               	movwf	?_putsUSART& (0+255),b
 13283  005C14  EC8D  F00A         	call	_putsUSART	;wreg free
 13284                           
 13285                           ;main.c: 843: putsUSART((char *) "Value for reg ");
 13286  005C18  0E7B               	movlw	high STR_59
 13287  005C1A  0100               	movlb	0	; () banked
 13288  005C1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13289  005C1E  0E1A               	movlw	low STR_59
 13290  005C20  6F61               	movwf	?_putsUSART& (0+255),b
 13291  005C22  EC8D  F00A         	call	_putsUSART	;wreg free
 13292                           
 13293                           ;main.c: 844: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13294  005C26  662C               	tstfsz	_bHex,c
 13295  005C28  D005               	goto	l14458
 13296  005C2A  0E7C               	movlw	high STR_61
 13297  005C2C  0102               	movlb	2	; () banked
 13298  005C2E  6F95               	movwf	(_doModeVerbose$1207+1)& (0+255),b
 13299  005C30  0EEE               	movlw	low STR_61
 13300  005C32  D004               	goto	L8
 13301  005C34                     l14458:
 13302  005C34  0E7C               	movlw	high STR_60
 13303  005C36  0102               	movlb	2	; () banked
 13304  005C38  6F95               	movwf	(_doModeVerbose$1207+1)& (0+255),b
 13305  005C3A  0E4A               	movlw	low STR_60
 13306  005C3C                     L8:
 13307  005C3C  6F94               	movwf	_doModeVerbose$1207& (0+255),b
 13308                           
 13309                           ; BSR set to: 2
 13310  005C3E  0E01               	movlw	high _wrkbuf
 13311  005C40  0100               	movlb	0	; () banked
 13312  005C42  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13313  005C44  0E7D               	movlw	low _wrkbuf
 13314  005C46  6F76               	movwf	?_sprintf& (0+255),b
 13315  005C48  C294  F078         	movff	_doModeVerbose$1207,?_sprintf+2
 13316  005C4C  C295  F079         	movff	_doModeVerbose$1207+1,?_sprintf+3
 13317  005C50  C2B4  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13318  005C54  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13319  005C56  EC6D  F026         	call	_sprintf	;wreg free
 13320                           
 13321                           ; BSR set to: 0
 13322                           ;main.c: 845: putsUSART(wrkbuf);
 13323  005C5A  0E01               	movlw	high _wrkbuf
 13324  005C5C  0100               	movlb	0	; () banked
 13325  005C5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13326  005C60  0E7D               	movlw	low _wrkbuf
 13327  005C62  6F61               	movwf	?_putsUSART& (0+255),b
 13328  005C64  EC8D  F00A         	call	_putsUSART	;wreg free
 13329                           
 13330                           ;main.c: 846: WriteUSART(':');
 13331  005C68  0E3A               	movlw	58
 13332  005C6A  ECD5  F007         	call	_WriteUSART
 13333  005C6E                     l579:
 13334  005C6E  A2AC               	btfss	4012,1,c	;volatile
 13335  005C70  D7FE               	goto	l579
 13336                           
 13337                           ;main.c: 848: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13338  005C72  662C               	tstfsz	_bHex,c
 13339  005C74  D005               	goto	l14468
 13340  005C76  0E7C               	movlw	high STR_61
 13341  005C78  0102               	movlb	2	; () banked
 13342  005C7A  6F97               	movwf	(_doModeVerbose$1211+1)& (0+255),b
 13343  005C7C  0EEE               	movlw	low STR_61
 13344  005C7E  D004               	goto	L9
 13345  005C80                     l14468:
 13346  005C80  0E7C               	movlw	high STR_60
 13347  005C82  0102               	movlb	2	; () banked
 13348  005C84  6F97               	movwf	(_doModeVerbose$1211+1)& (0+255),b
 13349  005C86  0E4A               	movlw	low STR_60
 13350  005C88                     L9:
 13351  005C88  6F96               	movwf	_doModeVerbose$1211& (0+255),b
 13352                           
 13353                           ; BSR set to: 2
 13354  005C8A  0E01               	movlw	high _wrkbuf
 13355  005C8C  0100               	movlb	0	; () banked
 13356  005C8E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13357  005C90  0E7D               	movlw	low _wrkbuf
 13358  005C92  6F76               	movwf	?_sprintf& (0+255),b
 13359  005C94  C296  F078         	movff	_doModeVerbose$1211,?_sprintf+2
 13360  005C98  C297  F079         	movff	_doModeVerbose$1211+1,?_sprintf+3
 13361  005C9C  EC92  F035         	call	PL40	;call to abstracted procedure
 13362  005CA0  EC6D  F026         	call	_sprintf	;wreg free
 13363                           
 13364                           ; BSR set to: 0
 13365                           ;main.c: 849: putsUSART(wrkbuf);
 13366  005CA4  0E01               	movlw	high _wrkbuf
 13367  005CA6  0100               	movlb	0	; () banked
 13368  005CA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13369  005CAA  0E7D               	movlw	low _wrkbuf
 13370  005CAC  6F61               	movwf	?_putsUSART& (0+255),b
 13371  005CAE  EC8D  F00A         	call	_putsUSART	;wreg free
 13372                           
 13373                           ;main.c: 850: putsUSART((char *) " = ");
 13374  005CB2  0E7B               	movlw	high (STR_275+4)
 13375  005CB4  0100               	movlb	0	; () banked
 13376  005CB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13377  005CB8  0ECF               	movlw	low (STR_275+4)
 13378  005CBA  6F61               	movwf	?_putsUSART& (0+255),b
 13379  005CBC  EC8D  F00A         	call	_putsUSART	;wreg free
 13380                           
 13381                           ;main.c: 851: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 13382  005CC0  662C               	tstfsz	_bHex,c
 13383  005CC2  D005               	goto	l14480
 13384  005CC4  0E7C               	movlw	high STR_61
 13385  005CC6  0102               	movlb	2	; () banked
 13386  005CC8  6F99               	movwf	(_doModeVerbose$1216+1)& (0+255),b
 13387  005CCA  0EEE               	movlw	low STR_61
 13388  005CCC  D004               	goto	L10
 13389  005CCE                     l14480:
 13390  005CCE  0E7C               	movlw	high STR_60
 13391  005CD0  0102               	movlb	2	; () banked
 13392  005CD2  6F99               	movwf	(_doModeVerbose$1216+1)& (0+255),b
 13393  005CD4  0E4A               	movlw	low STR_60
 13394  005CD6                     L10:
 13395  005CD6  6F98               	movwf	_doModeVerbose$1216& (0+255),b
 13396                           
 13397                           ; BSR set to: 2
 13398  005CD8  0E01               	movlw	high _wrkbuf
 13399  005CDA  0100               	movlb	0	; () banked
 13400  005CDC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13401  005CDE  0E7D               	movlw	low _wrkbuf
 13402  005CE0  6F76               	movwf	?_sprintf& (0+255),b
 13403  005CE2  C298  F078         	movff	_doModeVerbose$1216,?_sprintf+2
 13404  005CE6  C299  F079         	movff	_doModeVerbose$1216+1,?_sprintf+3
 13405  005CEA  C2B9  F07A         	movff	doModeVerbose@value,?_sprintf+4
 13406  005CEE  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13407  005CF0  EC6D  F026         	call	_sprintf	;wreg free
 13408                           
 13409                           ; BSR set to: 0
 13410                           ;main.c: 852: putsUSART(wrkbuf);
 13411  005CF4  0E01               	movlw	high _wrkbuf
 13412  005CF6  0100               	movlb	0	; () banked
 13413  005CF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13414  005CFA  0E7D               	movlw	low _wrkbuf
 13415  005CFC  6F61               	movwf	?_putsUSART& (0+255),b
 13416  005CFE  EC8D  F00A         	call	_putsUSART	;wreg free
 13417  005D02                     l590:
 13418  005D02  A2AC               	btfss	4012,1,c	;volatile
 13419  005D04  D7FE               	goto	l590
 13420                           
 13421                           ;main.c: 854: putsUSART("\t\'");
 13422  005D06  0E7C               	movlw	high STR_67
 13423  005D08  0100               	movlb	0	; () banked
 13424  005D0A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13425  005D0C  0EE2               	movlw	low STR_67
 13426  005D0E  6F61               	movwf	?_putsUSART& (0+255),b
 13427  005D10  EC8D  F00A         	call	_putsUSART	;wreg free
 13428                           
 13429                           ;main.c: 855: if ((value > 32) && (value < 127)) {
 13430  005D14  0E20               	movlw	32
 13431  005D16  0102               	movlb	2	; () banked
 13432  005D18  65B9               	cpfsgt	doModeVerbose@value& (0+255),b
 13433  005D1A  D007               	goto	l14494
 13434                           
 13435                           ; BSR set to: 2
 13436  005D1C  0E7F               	movlw	127
 13437  005D1E  61B9               	cpfslt	doModeVerbose@value& (0+255),b
 13438  005D20  D004               	goto	l14494
 13439                           
 13440                           ; BSR set to: 2
 13441                           ;main.c: 856: WriteUSART(value);
 13442  005D22  51B9               	movf	doModeVerbose@value& (0+255),w,b
 13443  005D24  ECD5  F007         	call	_WriteUSART
 13444                           
 13445                           ;main.c: 857: }
 13446  005D28  D003               	goto	l595
 13447  005D2A                     l14494:
 13448                           
 13449                           ; BSR set to: 2
 13450                           ;main.c: 858: else {
 13451                           ;main.c: 859: WriteUSART('.');
 13452  005D2A  0E2E               	movlw	46
 13453  005D2C  ECD5  F007         	call	_WriteUSART
 13454  005D30                     l595:
 13455  005D30  A2AC               	btfss	4012,1,c	;volatile
 13456  005D32  D7FE               	goto	l595
 13457                           
 13458                           ;main.c: 862: putsUSART("\' \t");
 13459  005D34  0E7C               	movlw	high STR_68
 13460  005D36  0100               	movlb	0	; () banked
 13461  005D38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13462  005D3A  0EC6               	movlw	low STR_68
 13463  005D3C  6F61               	movwf	?_putsUSART& (0+255),b
 13464  005D3E  EC8D  F00A         	call	_putsUSART	;wreg free
 13465                           
 13466                           ;main.c: 863: printBinary(value);
 13467  005D42  0102               	movlb	2	; () banked
 13468  005D44  51B9               	movf	doModeVerbose@value& (0+255),w,b
 13469  005D46  EC3D  F00A         	call	_printBinary
 13470                           
 13471                           ; BSR set to: 0
 13472                           ;main.c: 864: putsUSART((char *) "\r\n");
 13473  005D4A  0E70               	movlw	high (STR_227+50)
 13474  005D4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13475  005D4E  0EE0               	movlw	low (STR_227+50)
 13476  005D50  6F61               	movwf	?_putsUSART& (0+255),b
 13477  005D52  EC8D  F00A         	call	_putsUSART	;wreg free
 13478                           
 13479                           ;main.c: 865: }
 13480  005D56  D07E               	goto	l14538
 13481  005D58                     l570:
 13482                           
 13483                           ;main.c: 866: else {
 13484                           ;main.c: 867: rv = 0;
 13485  005D58  0102               	movlb	2	; () banked
 13486  005D5A  6BA6               	clrf	doModeVerbose@rv& (0+255),b
 13487                           
 13488                           ; BSR set to: 2
 13489                           ;main.c: 868: putsUSART((char *) "-ERROR - nodeid=");
 13490  005D5C  0E7B               	movlw	high STR_70
 13491  005D5E  0100               	movlb	0	; () banked
 13492  005D60  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13493  005D62  0E09               	movlw	low STR_70
 13494  005D64  6F61               	movwf	?_putsUSART& (0+255),b
 13495  005D66  EC8D  F00A         	call	_putsUSART	;wreg free
 13496                           
 13497                           ;main.c: 869: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13498  005D6A  662C               	tstfsz	_bHex,c
 13499  005D6C  D005               	goto	l14508
 13500  005D6E  0E7C               	movlw	high STR_58
 13501  005D70  0102               	movlb	2	; () banked
 13502  005D72  6F9B               	movwf	(_doModeVerbose$1224+1)& (0+255),b
 13503  005D74  0E6B               	movlw	low STR_58
 13504  005D76  D004               	goto	L11
 13505  005D78                     l14508:
 13506  005D78  0E7B               	movlw	high STR_57
 13507  005D7A  0102               	movlb	2	; () banked
 13508  005D7C  6F9B               	movwf	(_doModeVerbose$1224+1)& (0+255),b
 13509  005D7E  0E67               	movlw	low STR_57
 13510  005D80                     L11:
 13511  005D80  6F9A               	movwf	_doModeVerbose$1224& (0+255),b
 13512                           
 13513                           ; BSR set to: 2
 13514  005D82  0E01               	movlw	high _wrkbuf
 13515  005D84  0100               	movlb	0	; () banked
 13516  005D86  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13517  005D88  0E7D               	movlw	low _wrkbuf
 13518  005D8A  6F76               	movwf	?_sprintf& (0+255),b
 13519  005D8C  C29A  F078         	movff	_doModeVerbose$1224,?_sprintf+2
 13520  005D90  C29B  F079         	movff	_doModeVerbose$1224+1,?_sprintf+3
 13521  005D94  C2B2  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13522  005D98  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13523  005D9A  EC6D  F026         	call	_sprintf	;wreg free
 13524                           
 13525                           ; BSR set to: 0
 13526                           ;main.c: 870: putsUSART(wrkbuf);
 13527  005D9E  0E01               	movlw	high _wrkbuf
 13528  005DA0  0100               	movlb	0	; () banked
 13529  005DA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13530  005DA4  0E7D               	movlw	low _wrkbuf
 13531  005DA6  6F61               	movwf	?_putsUSART& (0+255),b
 13532  005DA8  EC8D  F00A         	call	_putsUSART	;wreg free
 13533                           
 13534                           ;main.c: 871: putsUSART((char *) "Unable to read register ");
 13535  005DAC  0E78               	movlw	high STR_73
 13536  005DAE  0100               	movlb	0	; () banked
 13537  005DB0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13538  005DB2  0E64               	movlw	low STR_73
 13539  005DB4  6F61               	movwf	?_putsUSART& (0+255),b
 13540  005DB6  EC8D  F00A         	call	_putsUSART	;wreg free
 13541  005DBA                     l603:
 13542  005DBA  A2AC               	btfss	4012,1,c	;volatile
 13543  005DBC  D7FE               	goto	l603
 13544                           
 13545                           ;main.c: 873: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13546  005DBE  662C               	tstfsz	_bHex,c
 13547  005DC0  D005               	goto	l14518
 13548  005DC2  0E7C               	movlw	high STR_61
 13549  005DC4  0102               	movlb	2	; () banked
 13550  005DC6  6F9D               	movwf	(_doModeVerbose$1229+1)& (0+255),b
 13551  005DC8  0EEE               	movlw	low STR_61
 13552  005DCA  D004               	goto	L12
 13553  005DCC                     l14518:
 13554  005DCC  0E7C               	movlw	high STR_60
 13555  005DCE  0102               	movlb	2	; () banked
 13556  005DD0  6F9D               	movwf	(_doModeVerbose$1229+1)& (0+255),b
 13557  005DD2  0E4A               	movlw	low STR_60
 13558  005DD4                     L12:
 13559  005DD4  6F9C               	movwf	_doModeVerbose$1229& (0+255),b
 13560                           
 13561                           ; BSR set to: 2
 13562  005DD6  0E01               	movlw	high _wrkbuf
 13563  005DD8  0100               	movlb	0	; () banked
 13564  005DDA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13565  005DDC  0E7D               	movlw	low _wrkbuf
 13566  005DDE  6F76               	movwf	?_sprintf& (0+255),b
 13567  005DE0  C29C  F078         	movff	_doModeVerbose$1229,?_sprintf+2
 13568  005DE4  C29D  F079         	movff	_doModeVerbose$1229+1,?_sprintf+3
 13569  005DE8  C2B4  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13570  005DEC  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13571  005DEE  EC6D  F026         	call	_sprintf	;wreg free
 13572                           
 13573                           ; BSR set to: 0
 13574                           ;main.c: 874: putsUSART(wrkbuf);
 13575  005DF2  0E01               	movlw	high _wrkbuf
 13576  005DF4  0100               	movlb	0	; () banked
 13577  005DF6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13578  005DF8  0E7D               	movlw	low _wrkbuf
 13579  005DFA  6F61               	movwf	?_putsUSART& (0+255),b
 13580  005DFC  EC8D  F00A         	call	_putsUSART	;wreg free
 13581                           
 13582                           ;main.c: 875: WriteUSART(':');
 13583  005E00  0E3A               	movlw	58
 13584  005E02  ECD5  F007         	call	_WriteUSART
 13585                           
 13586                           ;main.c: 876: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13587  005E06  662C               	tstfsz	_bHex,c
 13588  005E08  D005               	goto	l14530
 13589  005E0A  0E7C               	movlw	high STR_61
 13590  005E0C  0102               	movlb	2	; () banked
 13591  005E0E  6F9F               	movwf	(_doModeVerbose$1233+1)& (0+255),b
 13592  005E10  0EEE               	movlw	low STR_61
 13593  005E12  D004               	goto	L13
 13594  005E14                     l14530:
 13595  005E14  0E7C               	movlw	high STR_60
 13596  005E16  0102               	movlb	2	; () banked
 13597  005E18  6F9F               	movwf	(_doModeVerbose$1233+1)& (0+255),b
 13598  005E1A  0E4A               	movlw	low STR_60
 13599  005E1C                     L13:
 13600  005E1C  6F9E               	movwf	_doModeVerbose$1233& (0+255),b
 13601                           
 13602                           ; BSR set to: 2
 13603  005E1E  0E01               	movlw	high _wrkbuf
 13604  005E20  0100               	movlb	0	; () banked
 13605  005E22  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13606  005E24  0E7D               	movlw	low _wrkbuf
 13607  005E26  6F76               	movwf	?_sprintf& (0+255),b
 13608  005E28  C29E  F078         	movff	_doModeVerbose$1233,?_sprintf+2
 13609  005E2C  C29F  F079         	movff	_doModeVerbose$1233+1,?_sprintf+3
 13610  005E30  EC92  F035         	call	PL40	;call to abstracted procedure
 13611  005E34  EC6D  F026         	call	_sprintf	;wreg free
 13612                           
 13613                           ; BSR set to: 0
 13614                           ;main.c: 877: putsUSART(wrkbuf);
 13615  005E38  0E01               	movlw	high _wrkbuf
 13616  005E3A  0100               	movlb	0	; () banked
 13617  005E3C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13618  005E3E  0E7D               	movlw	low _wrkbuf
 13619  005E40  6F61               	movwf	?_putsUSART& (0+255),b
 13620  005E42  EC8D  F00A         	call	_putsUSART	;wreg free
 13621                           
 13622                           ;main.c: 879: putsUSART((char *) "\r\n");
 13623  005E46  0E70               	movlw	high (STR_227+50)
 13624  005E48  0100               	movlb	0	; () banked
 13625  005E4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13626  005E4C  0EE0               	movlw	low (STR_227+50)
 13627  005E4E  6F61               	movwf	?_putsUSART& (0+255),b
 13628  005E50  EC8D  F00A         	call	_putsUSART	;wreg free
 13629  005E54                     l14538:
 13630  005E54  0102               	movlb	2	; () banked
 13631  005E56  2BB7               	incf	doModeVerbose@i_1183& (0+255),f,b
 13632  005E58                     l14540:
 13633                           
 13634                           ; BSR set to: 2
 13635  005E58  51B1               	movf	doModeVerbose@count& (0+255),w,b
 13636  005E5A  5DB7               	subwf	doModeVerbose@i_1183& (0+255),w,b
 13637  005E5C  E201 D69D          	bnc	l14438
 13638                           
 13639                           ; BSR set to: 2
 13640                           ;main.c: 880: }
 13641                           ;main.c: 881: }
 13642                           ;main.c: 883: if (rv) {
 13643  005E60  51A6               	movf	doModeVerbose@rv& (0+255),w,b
 13644  005E62  E009               	bz	l14546
 13645                           
 13646                           ; BSR set to: 2
 13647                           ;main.c: 884: putsUSART((char *) "+OK\r\n");
 13648  005E64  0E7C               	movlw	high STR_9
 13649  005E66  0100               	movlb	0	; () banked
 13650  005E68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13651  005E6A  0E65               	movlw	low STR_9
 13652  005E6C  6F61               	movwf	?_putsUSART& (0+255),b
 13653  005E6E  EC8D  F00A         	call	_putsUSART	;wreg free
 13654                           
 13655                           ;main.c: 885: }
 13656  005E72  EF0C  F035         	goto	l14934
 13657  005E76                     l14546:
 13658                           
 13659                           ; BSR set to: 2
 13660                           ;main.c: 886: else {
 13661                           ;main.c: 887: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13662  005E76  0E70               	movlw	high STR_80
 13663  005E78  0100               	movlb	0	; () banked
 13664  005E7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13665  005E7C  0E78               	movlw	low STR_80
 13666  005E7E  6F61               	movwf	?_putsUSART& (0+255),b
 13667  005E80  EC8D  F00A         	call	_putsUSART	;wreg free
 13668  005E84  EF0C  F035         	goto	l14934
 13669  005E88                     l14548:
 13670                           
 13671                           ; BSR set to: 0
 13672                           ;main.c: 893: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13673  005E88  0E01               	movlw	high _cmdbuf
 13674  005E8A  0100               	movlb	0	; () banked
 13675  005E8C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13676  005E8E  0E2D               	movlw	low _cmdbuf
 13677  005E90  6F6D               	movwf	?_stristr& (0+255),b
 13678  005E92  0E7C               	movlw	high STR_81
 13679  005E94  6F70               	movwf	(?_stristr+3)& (0+255),b
 13680  005E96  0E9E               	movlw	low STR_81
 13681  005E98  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13682  005E9A  EC86  F00C         	call	_stristr	;wreg free
 13683  005E9E  0E2D               	movlw	low _cmdbuf
 13684  005EA0  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13685  005EA2  0E01               	movlw	high _cmdbuf
 13686  005EA4  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13687  005EA6  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13688  005EA8  E102               	bnz	u19335
 13689  005EAA  516D               	movf	?_stristr& (0+255),w,b
 13690  005EAC  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13691  005EAE                     u19335:
 13692  005EAE  E001 D108          	bnz	l14614
 13693                           
 13694                           ; BSR set to: 0
 13695                           ;main.c: 895: uint8_t nodeid;
 13696                           ;main.c: 896: uint8_t page = 0;
 13697  005EB2  0102               	movlb	2	; () banked
 13698  005EB4  6BA7               	clrf	doModeVerbose@page_1239& (0+255),b
 13699                           
 13700                           ; BSR set to: 2
 13701                           ;main.c: 897: uint8_t reg;
 13702                           ;main.c: 898: uint8_t value;
 13703                           ;main.c: 900: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13704  005EB6  506F               	movf	3951,w,c	;volatile
 13705  005EB8  0BE0               	andlw	224
 13706  005EBA  E009               	bz	l14558
 13707                           
 13708                           ; BSR set to: 2
 13709                           ;main.c: 901: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 13710  005EBC  0E70               	movlw	high STR_50
 13711  005EBE  0100               	movlb	0	; () banked
 13712  005EC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13713  005EC2  0EE3               	movlw	low STR_50
 13714  005EC4  6F61               	movwf	?_putsUSART& (0+255),b
 13715  005EC6  EC8D  F00A         	call	_putsUSART	;wreg free
 13716  005ECA  EF1A  F035         	goto	l559
 13717  005ECE                     l14558:
 13718                           
 13719                           ; BSR set to: 2
 13720                           ;main.c: 903: }
 13721                           ;main.c: 905: strcpy(cmdbuf, cmdbuf + 5);
 13722  005ECE  EC1B  F035         	call	PL2	;call to abstracted procedure
 13723  005ED2  EC3C  F008         	call	_strcpy	;wreg free
 13724                           
 13725                           ; BSR set to: 0
 13726                           ;main.c: 906: char *p = strtok(cmdbuf, " ");
 13727  005ED6  0E01               	movlw	high _cmdbuf
 13728  005ED8  EC7C  F035         	call	PL34	;call to abstracted procedure
 13729  005EDC  ECCF  F00D         	call	_strtok	;wreg free
 13730  005EE0  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1243
 13731  005EE4  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1243+1
 13732                           
 13733                           ; BSR set to: 0
 13734                           ;main.c: 907: if ((0) != p) {
 13735  005EE8  0102               	movlb	2	; () banked
 13736  005EEA  51BD               	movf	(doModeVerbose@p_1243+1)& (0+255),w,b
 13737  005EEC  11BC               	iorwf	doModeVerbose@p_1243& (0+255),w,b
 13738  005EEE  E00A               	bz	l14566
 13739                           
 13740                           ; BSR set to: 2
 13741                           ;main.c: 908: nodeid = atoi(p);
 13742  005EF0  C2BC  F066         	movff	doModeVerbose@p_1243,?_atoi
 13743  005EF4  C2BD  F067         	movff	doModeVerbose@p_1243+1,?_atoi+1
 13744  005EF8  ECBF  F015         	call	_atoi	;wreg free
 13745  005EFC  5166               	movf	?_atoi& (0+255),w,b
 13746  005EFE  0102               	movlb	2	; () banked
 13747  005F00  6FB3               	movwf	doModeVerbose@nodeid_1238& (0+255),b
 13748                           
 13749                           ;main.c: 909: }
 13750  005F02  D009               	goto	l14570
 13751  005F04                     l14566:
 13752                           
 13753                           ; BSR set to: 2
 13754                           ;main.c: 910: else {
 13755                           ;main.c: 911: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13756  005F04  0E78               	movlw	high STR_52
 13757  005F06  0100               	movlb	0	; () banked
 13758  005F08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13759  005F0A  0EAD               	movlw	low STR_52
 13760  005F0C  6F61               	movwf	?_putsUSART& (0+255),b
 13761  005F0E  EC8D  F00A         	call	_putsUSART	;wreg free
 13762  005F12  EF1A  F035         	goto	l559
 13763  005F16                     l14570:
 13764                           
 13765                           ; BSR set to: 2
 13766                           ;main.c: 913: }
 13767                           ;main.c: 915: if ( (0) != ( p = strtok((0), " ") ) ) {
 13768  005F16  EC6A  F035         	call	PL24	;call to abstracted procedure
 13769  005F1A  ECCF  F00D         	call	_strtok	;wreg free
 13770  005F1E  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1243
 13771  005F22  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1243+1
 13772  005F26  0102               	movlb	2	; () banked
 13773  005F28  51BD               	movf	(doModeVerbose@p_1243+1)& (0+255),w,b
 13774  005F2A  11BC               	iorwf	doModeVerbose@p_1243& (0+255),w,b
 13775  005F2C  E034               	bz	l14578
 13776                           
 13777                           ; BSR set to: 2
 13778                           ;main.c: 917: char *preg;
 13779                           ;main.c: 918: if (preg = strchr(p, ':')) {
 13780  005F2E  C2BC  F060         	movff	doModeVerbose@p_1243,?_strchr
 13781  005F32  C2BD  F061         	movff	doModeVerbose@p_1243+1,?_strchr+1
 13782  005F36  0100               	movlb	0	; () banked
 13783  005F38  6B63               	clrf	(?_strchr+3)& (0+255),b
 13784  005F3A  0E3A               	movlw	58
 13785  005F3C  6F62               	movwf	(?_strchr+2)& (0+255),b
 13786  005F3E  EC74  F00B         	call	_strchr	;wreg free
 13787  005F42  C060  F286         	movff	?_strchr,doModeVerbose@preg_1247
 13788  005F46  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1247+1
 13789  005F4A  0102               	movlb	2	; () banked
 13790  005F4C  5187               	movf	(doModeVerbose@preg_1247+1)& (0+255),w,b
 13791  005F4E  1186               	iorwf	doModeVerbose@preg_1247& (0+255),w,b
 13792  005F50  E018               	bz	l14576
 13793                           
 13794                           ; BSR set to: 2
 13795                           ;main.c: 919: page = atoi(p);
 13796  005F52  C2BC  F066         	movff	doModeVerbose@p_1243,?_atoi
 13797  005F56  C2BD  F067         	movff	doModeVerbose@p_1243+1,?_atoi+1
 13798  005F5A  ECBF  F015         	call	_atoi	;wreg free
 13799  005F5E  5166               	movf	?_atoi& (0+255),w,b
 13800  005F60  0102               	movlb	2	; () banked
 13801  005F62  6FA7               	movwf	doModeVerbose@page_1239& (0+255),b
 13802                           
 13803                           ;main.c: 920: reg = atoi(preg + 1);
 13804  005F64  2986               	incf	doModeVerbose@preg_1247& (0+255),w,b
 13805  005F66  0100               	movlb	0	; () banked
 13806  005F68  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13807  005F6A  0E00               	movlw	0
 13808  005F6C  0102               	movlb	2	; () banked
 13809  005F6E  2187               	addwfc	(doModeVerbose@preg_1247+1)& (0+255),w,b
 13810  005F70  0100               	movlb	0	; () banked
 13811  005F72  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13812  005F74  C0CC  F066         	movff	??_doModeVerbose,?_atoi
 13813  005F78  C0CD  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13814  005F7C  ECBF  F015         	call	_atoi	;wreg free
 13815  005F80  D006               	goto	L14
 13816  005F82                     l14576:
 13817                           
 13818                           ; BSR set to: 2
 13819                           ;main.c: 922: else {
 13820                           ;main.c: 923: reg = atoi(p);
 13821  005F82  C2BC  F066         	movff	doModeVerbose@p_1243,?_atoi
 13822  005F86  C2BD  F067         	movff	doModeVerbose@p_1243+1,?_atoi+1
 13823  005F8A  ECBF  F015         	call	_atoi	;wreg free
 13824  005F8E                     L14:
 13825  005F8E  5166               	movf	?_atoi& (0+255),w,b
 13826  005F90  0102               	movlb	2	; () banked
 13827  005F92  6FA8               	movwf	doModeVerbose@reg_1240& (0+255),b
 13828  005F94  D009               	goto	l14582
 13829  005F96                     l14578:
 13830                           
 13831                           ; BSR set to: 2
 13832                           ;main.c: 927: else {
 13833                           ;main.c: 928: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13834  005F96  0E77               	movlw	high STR_54
 13835  005F98  0100               	movlb	0	; () banked
 13836  005F9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13837  005F9C  0E0D               	movlw	low STR_54
 13838  005F9E  6F61               	movwf	?_putsUSART& (0+255),b
 13839  005FA0  EC8D  F00A         	call	_putsUSART	;wreg free
 13840  005FA4  EF1A  F035         	goto	l559
 13841  005FA8                     l14582:
 13842                           
 13843                           ; BSR set to: 2
 13844                           ;main.c: 930: }
 13845                           ;main.c: 933: if ((0) != (p = strtok((0), " "))) {
 13846  005FA8  EC6A  F035         	call	PL24	;call to abstracted procedure
 13847  005FAC  ECCF  F00D         	call	_strtok	;wreg free
 13848  005FB0  C06C  F2BC         	movff	?_strtok,doModeVerbose@p_1243
 13849  005FB4  C06D  F2BD         	movff	?_strtok+1,doModeVerbose@p_1243+1
 13850  005FB8  0102               	movlb	2	; () banked
 13851  005FBA  51BD               	movf	(doModeVerbose@p_1243+1)& (0+255),w,b
 13852  005FBC  11BC               	iorwf	doModeVerbose@p_1243& (0+255),w,b
 13853  005FBE  E00A               	bz	l14586
 13854                           
 13855                           ; BSR set to: 2
 13856                           ;main.c: 934: value = atoi(p);
 13857  005FC0  C2BC  F066         	movff	doModeVerbose@p_1243,?_atoi
 13858  005FC4  C2BD  F067         	movff	doModeVerbose@p_1243+1,?_atoi+1
 13859  005FC8  ECBF  F015         	call	_atoi	;wreg free
 13860  005FCC  5166               	movf	?_atoi& (0+255),w,b
 13861  005FCE  0102               	movlb	2	; () banked
 13862  005FD0  6FB0               	movwf	doModeVerbose@value_1241& (0+255),b
 13863                           
 13864                           ;main.c: 935: }
 13865  005FD2  D009               	goto	l14590
 13866  005FD4                     l14586:
 13867                           
 13868                           ; BSR set to: 2
 13869                           ;main.c: 936: else {
 13870                           ;main.c: 937: putsUSART((char *) "-ERROR - Need a value\r\n");
 13871  005FD4  0E78               	movlw	high STR_88
 13872  005FD6  0100               	movlb	0	; () banked
 13873  005FD8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13874  005FDA  0EDD               	movlw	low STR_88
 13875  005FDC  6F61               	movwf	?_putsUSART& (0+255),b
 13876  005FDE  EC8D  F00A         	call	_putsUSART	;wreg free
 13877  005FE2  EF1A  F035         	goto	l559
 13878  005FE6                     l14590:
 13879                           
 13880                           ; BSR set to: 2
 13881                           ;main.c: 939: }
 13882                           ;main.c: 941: if (writeRegisterExtended(nodeid,
 13883                           ;main.c: 942: page,
 13884                           ;main.c: 943: reg,
 13885                           ;main.c: 944: rwtimeout,
 13886                           ;main.c: 945: &value)) {
 13887  005FE6  0100               	movlb	0	; () banked
 13888  005FE8  C2A7  F0B8         	movff	doModeVerbose@page_1239,?_writeRegisterExtended
 13889  005FEC  6BB9               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13890  005FEE  C2A8  F0BA         	movff	doModeVerbose@reg_1240,?_writeRegisterExtended+2
 13891  005FF2  C035  F0BB         	movff	_rwtimeout,?_writeRegisterExtended+3
 13892  005FF6  6BBC               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13893  005FF8  0E02               	movlw	high doModeVerbose@value_1241
 13894  005FFA  6FBE               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13895  005FFC  0EB0               	movlw	low doModeVerbose@value_1241
 13896  005FFE  6FBD               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13897  006000  0102               	movlb	2	; () banked
 13898  006002  51B3               	movf	doModeVerbose@nodeid_1238& (0+255),w,b
 13899  006004  ECC0  F014         	call	_writeRegisterExtended
 13900  006008  0900               	iorlw	0
 13901  00600A  E031               	bz	l14604
 13902                           
 13903                           ;main.c: 946: putsUSART((char *) "+OK - Value written successfully for ");
 13904  00600C  0E75               	movlw	high STR_89
 13905  00600E  0100               	movlb	0	; () banked
 13906  006010  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13907  006012  0E88               	movlw	low STR_89
 13908  006014  6F61               	movwf	?_putsUSART& (0+255),b
 13909  006016  EC8D  F00A         	call	_putsUSART	;wreg free
 13910                           
 13911                           ;main.c: 947: putsUSART((char *) "nodeid=");
 13912  00601A  0E7B               	movlw	high (STR_56+6)
 13913  00601C  0100               	movlb	0	; () banked
 13914  00601E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13915  006020  0E3D               	movlw	low (STR_56+6)
 13916  006022  6F61               	movwf	?_putsUSART& (0+255),b
 13917  006024  EC8D  F00A         	call	_putsUSART	;wreg free
 13918                           
 13919                           ;main.c: 948: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13920  006028  662C               	tstfsz	_bHex,c
 13921  00602A  D005               	goto	l14598
 13922  00602C  0E7C               	movlw	high STR_92
 13923  00602E  0102               	movlb	2	; () banked
 13924  006030  6FA1               	movwf	(_doModeVerbose$1256+1)& (0+255),b
 13925  006032  0ECE               	movlw	low STR_92
 13926  006034  D004               	goto	L15
 13927  006036                     l14598:
 13928  006036  0E7B               	movlw	high STR_91
 13929  006038  0102               	movlb	2	; () banked
 13930  00603A  6FA1               	movwf	(_doModeVerbose$1256+1)& (0+255),b
 13931  00603C  0EC3               	movlw	low STR_91
 13932  00603E                     L15:
 13933  00603E  6FA0               	movwf	_doModeVerbose$1256& (0+255),b
 13934                           
 13935                           ; BSR set to: 2
 13936  006040  0E01               	movlw	high _wrkbuf
 13937  006042  0100               	movlb	0	; () banked
 13938  006044  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13939  006046  0E7D               	movlw	low _wrkbuf
 13940  006048  6F76               	movwf	?_sprintf& (0+255),b
 13941  00604A  C2A0  F078         	movff	_doModeVerbose$1256,?_sprintf+2
 13942  00604E  C2A1  F079         	movff	_doModeVerbose$1256+1,?_sprintf+3
 13943  006052  C2B3  F07A         	movff	doModeVerbose@nodeid_1238,?_sprintf+4
 13944  006056  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13945  006058  EC6D  F026         	call	_sprintf	;wreg free
 13946                           
 13947                           ; BSR set to: 0
 13948                           ;main.c: 949: putsUSART(wrkbuf);
 13949  00605C  0E01               	movlw	high _wrkbuf
 13950  00605E  0100               	movlb	0	; () banked
 13951  006060  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13952  006062  0E7D               	movlw	low _wrkbuf
 13953  006064  6F61               	movwf	?_putsUSART& (0+255),b
 13954  006066  EC8D  F00A         	call	_putsUSART	;wreg free
 13955                           
 13956                           ;main.c: 950: }
 13957  00606A  EF0C  F035         	goto	l14934
 13958  00606E                     l14604:
 13959                           
 13960                           ;main.c: 951: else {
 13961                           ;main.c: 952: putsUSART((char *) "-ERROR - Failed to write value for ");
 13962  00606E  0E76               	movlw	high STR_93
 13963  006070  0100               	movlb	0	; () banked
 13964  006072  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13965  006074  0E41               	movlw	low STR_93
 13966  006076  6F61               	movwf	?_putsUSART& (0+255),b
 13967  006078  EC8D  F00A         	call	_putsUSART	;wreg free
 13968                           
 13969                           ;main.c: 953: putsUSART((char *) "nodeid=");
 13970  00607C  0E7B               	movlw	high (STR_56+6)
 13971  00607E  0100               	movlb	0	; () banked
 13972  006080  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13973  006082  0E3D               	movlw	low (STR_56+6)
 13974  006084  6F61               	movwf	?_putsUSART& (0+255),b
 13975  006086  EC8D  F00A         	call	_putsUSART	;wreg free
 13976                           
 13977                           ;main.c: 954: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13978  00608A  662C               	tstfsz	_bHex,c
 13979  00608C  D005               	goto	l14610
 13980  00608E  0E7C               	movlw	high STR_92
 13981  006090  0102               	movlb	2	; () banked
 13982  006092  6FA3               	movwf	(_doModeVerbose$1262+1)& (0+255),b
 13983  006094  0ECE               	movlw	low STR_92
 13984  006096  D004               	goto	L16
 13985  006098                     l14610:
 13986  006098  0E7B               	movlw	high STR_91
 13987  00609A  0102               	movlb	2	; () banked
 13988  00609C  6FA3               	movwf	(_doModeVerbose$1262+1)& (0+255),b
 13989  00609E  0EC3               	movlw	low STR_91
 13990  0060A0                     L16:
 13991  0060A0  6FA2               	movwf	_doModeVerbose$1262& (0+255),b
 13992                           
 13993                           ; BSR set to: 2
 13994  0060A2  0E01               	movlw	high _wrkbuf
 13995  0060A4  0100               	movlb	0	; () banked
 13996  0060A6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13997  0060A8  0E7D               	movlw	low _wrkbuf
 13998  0060AA  6F76               	movwf	?_sprintf& (0+255),b
 13999  0060AC  C2A2  F078         	movff	_doModeVerbose$1262,?_sprintf+2
 14000  0060B0  C2A3  F079         	movff	_doModeVerbose$1262+1,?_sprintf+3
 14001  0060B4  C2B3  F07A         	movff	doModeVerbose@nodeid_1238,?_sprintf+4
 14002  0060B8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14003  0060BA  EC6D  F026         	call	_sprintf	;wreg free
 14004  0060BE  EF0C  F035         	goto	l14934
 14005  0060C2                     l14614:
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;main.c: 960: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 14009  0060C2  0E01               	movlw	high _cmdbuf
 14010  0060C4  0100               	movlb	0	; () banked
 14011  0060C6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14012  0060C8  0E2D               	movlw	low _cmdbuf
 14013  0060CA  6F6D               	movwf	?_stristr& (0+255),b
 14014  0060CC  0E7C               	movlw	high STR_97
 14015  0060CE  6F70               	movwf	(?_stristr+3)& (0+255),b
 14016  0060D0  0EAD               	movlw	low STR_97
 14017  0060D2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14018  0060D4  EC86  F00C         	call	_stristr	;wreg free
 14019  0060D8  0E2D               	movlw	low _cmdbuf
 14020  0060DA  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14021  0060DC  0E01               	movlw	high _cmdbuf
 14022  0060DE  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14023  0060E0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14024  0060E2  E102               	bnz	u19425
 14025  0060E4  516D               	movf	?_stristr& (0+255),w,b
 14026  0060E6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14027  0060E8                     u19425:
 14028  0060E8  E15D               	bnz	l14648
 14029                           
 14030                           ; BSR set to: 0
 14031                           ;main.c: 962: uint8_t nodeid;
 14032                           ;main.c: 964: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14033  0060EA  506F               	movf	3951,w,c	;volatile
 14034  0060EC  0BE0               	andlw	224
 14035  0060EE  E008               	bz	l14622
 14036                           
 14037                           ; BSR set to: 0
 14038                           ;main.c: 965: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 14039  0060F0  0E70               	movlw	high STR_50
 14040  0060F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14041  0060F4  0EE3               	movlw	low STR_50
 14042  0060F6  6F61               	movwf	?_putsUSART& (0+255),b
 14043  0060F8  EC8D  F00A         	call	_putsUSART	;wreg free
 14044  0060FC  EF1A  F035         	goto	l559
 14045  006100                     l14622:
 14046                           
 14047                           ; BSR set to: 0
 14048                           ;main.c: 967: }
 14049                           ;main.c: 969: strcpy(cmdbuf, cmdbuf + 5);
 14050  006100  EC1B  F035         	call	PL2	;call to abstracted procedure
 14051  006104  EC3C  F008         	call	_strcpy	;wreg free
 14052                           
 14053                           ; BSR set to: 0
 14054                           ;main.c: 970: nodeid = atoi(cmdbuf);
 14055  006108  0E01               	movlw	high _cmdbuf
 14056  00610A  0100               	movlb	0	; () banked
 14057  00610C  6F67               	movwf	(?_atoi+1)& (0+255),b
 14058  00610E  0E2D               	movlw	low _cmdbuf
 14059  006110  6F66               	movwf	?_atoi& (0+255),b
 14060  006112  ECBF  F015         	call	_atoi	;wreg free
 14061  006116  5166               	movf	?_atoi& (0+255),w,b
 14062  006118  0102               	movlb	2	; () banked
 14063  00611A  6FB6               	movwf	doModeVerbose@nodeid_1264& (0+255),b
 14064                           
 14065                           ; BSR set to: 2
 14066                           ;main.c: 972: putsUSART((char *) "Info for node id = ");
 14067  00611C  0E7A               	movlw	high STR_99
 14068  00611E  0100               	movlb	0	; () banked
 14069  006120  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14070  006122  0E54               	movlw	low STR_99
 14071  006124  6F61               	movwf	?_putsUSART& (0+255),b
 14072  006126  EC8D  F00A         	call	_putsUSART	;wreg free
 14073                           
 14074                           ;main.c: 973: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 14075  00612A  662C               	tstfsz	_bHex,c
 14076  00612C  D005               	goto	l14632
 14077  00612E  0E7C               	movlw	high STR_61
 14078  006130  0102               	movlb	2	; () banked
 14079  006132  6FA5               	movwf	(_doModeVerbose$1270+1)& (0+255),b
 14080  006134  0EEE               	movlw	low STR_61
 14081  006136  D004               	goto	L17
 14082  006138                     l14632:
 14083  006138  0E7C               	movlw	high STR_60
 14084  00613A  0102               	movlb	2	; () banked
 14085  00613C  6FA5               	movwf	(_doModeVerbose$1270+1)& (0+255),b
 14086  00613E  0E4A               	movlw	low STR_60
 14087  006140                     L17:
 14088  006140  6FA4               	movwf	_doModeVerbose$1270& (0+255),b
 14089                           
 14090                           ; BSR set to: 2
 14091  006142  0E01               	movlw	high _wrkbuf
 14092  006144  0100               	movlb	0	; () banked
 14093  006146  6F77               	movwf	(?_sprintf+1)& (0+255),b
 14094  006148  0E7D               	movlw	low _wrkbuf
 14095  00614A  6F76               	movwf	?_sprintf& (0+255),b
 14096  00614C  C2A4  F078         	movff	_doModeVerbose$1270,?_sprintf+2
 14097  006150  C2A5  F079         	movff	_doModeVerbose$1270+1,?_sprintf+3
 14098  006154  C2B6  F07A         	movff	doModeVerbose@nodeid_1264,?_sprintf+4
 14099  006158  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14100  00615A  EC6D  F026         	call	_sprintf	;wreg free
 14101                           
 14102                           ; BSR set to: 0
 14103                           ;main.c: 974: putsUSART(wrkbuf);
 14104  00615E  0E01               	movlw	high _wrkbuf
 14105  006160  0100               	movlb	0	; () banked
 14106  006162  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14107  006164  0E7D               	movlw	low _wrkbuf
 14108  006166  6F61               	movwf	?_putsUSART& (0+255),b
 14109  006168  EC8D  F00A         	call	_putsUSART	;wreg free
 14110                           
 14111                           ;main.c: 975: putsUSART((char *) "\r\n");
 14112  00616C  0E70               	movlw	high (STR_227+50)
 14113  00616E  0100               	movlb	0	; () banked
 14114  006170  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14115  006172  0EE0               	movlw	low (STR_227+50)
 14116  006174  6F61               	movwf	?_putsUSART& (0+255),b
 14117  006176  EC8D  F00A         	call	_putsUSART	;wreg free
 14118                           
 14119                           ;main.c: 976: printNodeFirmwareVersion(nodeid);
 14120  00617A  0102               	movlb	2	; () banked
 14121  00617C  51B6               	movf	doModeVerbose@nodeid_1264& (0+255),w,b
 14122  00617E  ECBE  F011         	call	_printNodeFirmwareVersion
 14123                           
 14124                           ;main.c: 977: printGUID(nodeid);
 14125  006182  0102               	movlb	2	; () banked
 14126  006184  51B6               	movf	doModeVerbose@nodeid_1264& (0+255),w,b
 14127  006186  EC3E  F015         	call	_printGUID
 14128                           
 14129                           ;main.c: 978: printMDF(nodeid);
 14130  00618A  0102               	movlb	2	; () banked
 14131  00618C  51B6               	movf	doModeVerbose@nodeid_1264& (0+255),w,b
 14132  00618E  EC18  F00E         	call	_printMDF
 14133                           
 14134                           ;main.c: 979: putsUSART((char *) "+OK\r\n");
 14135  006192  0E7C               	movlw	high STR_9
 14136  006194  0100               	movlb	0	; () banked
 14137  006196  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14138  006198  0E65               	movlw	low STR_9
 14139  00619A  6F61               	movwf	?_putsUSART& (0+255),b
 14140  00619C  EC8D  F00A         	call	_putsUSART	;wreg free
 14141                           
 14142                           ;main.c: 980: }
 14143  0061A0  EF0C  F035         	goto	l14934
 14144  0061A4                     l14648:
 14145                           
 14146                           ; BSR set to: 0
 14147                           ;main.c: 984: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 14148  0061A4  0E01               	movlw	high _cmdbuf
 14149  0061A6  0100               	movlb	0	; () banked
 14150  0061A8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14151  0061AA  0E2D               	movlw	low _cmdbuf
 14152  0061AC  6F6D               	movwf	?_stristr& (0+255),b
 14153  0061AE  0E7C               	movlw	high STR_104
 14154  0061B0  6F70               	movwf	(?_stristr+3)& (0+255),b
 14155  0061B2  0E3C               	movlw	low STR_104
 14156  0061B4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14157  0061B6  EC86  F00C         	call	_stristr	;wreg free
 14158  0061BA  0E2D               	movlw	low _cmdbuf
 14159  0061BC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14160  0061BE  0E01               	movlw	high _cmdbuf
 14161  0061C0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14162  0061C2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14163  0061C4  E102               	bnz	u19455
 14164  0061C6  516D               	movf	?_stristr& (0+255),w,b
 14165  0061C8  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14166  0061CA                     u19455:
 14167  0061CA  E001 D0DC          	bnz	l14718
 14168                           
 14169                           ; BSR set to: 0
 14170                           ;main.c: 986: uint8_t filterno;
 14171                           ;main.c: 987: uint8_t filter_priority;
 14172                           ;main.c: 988: uint16_t filter_class;
 14173                           ;main.c: 989: uint8_t filter_type;
 14174                           ;main.c: 990: uint8_t filter_nodeid;
 14175                           ;main.c: 992: strcpy(cmdbuf, cmdbuf + 8);
 14176  0061CE  0E01               	movlw	high _cmdbuf
 14177  0061D0  EC29  F035         	call	PL4	;call to abstracted procedure
 14178  0061D4  EC3C  F008         	call	_strcpy	;wreg free
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;main.c: 993: char *p = strtok(cmdbuf, ",");
 14182  0061D8  EC72  F035         	call	PL30	;call to abstracted procedure
 14183  0061DC  ECCF  F00D         	call	_strtok	;wreg free
 14184  0061E0  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1279
 14185  0061E4  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1279+1
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;main.c: 994: if ((0) != p) {
 14189  0061E8  0102               	movlb	2	; () banked
 14190  0061EA  51C2               	movf	(doModeVerbose@p_1279+1)& (0+255),w,b
 14191  0061EC  11C1               	iorwf	doModeVerbose@p_1279& (0+255),w,b
 14192  0061EE  E015               	bz	l14664
 14193                           
 14194                           ; BSR set to: 2
 14195                           ;main.c: 995: filterno = atoi(p);
 14196  0061F0  C2C1  F066         	movff	doModeVerbose@p_1279,?_atoi
 14197  0061F4  C2C2  F067         	movff	doModeVerbose@p_1279+1,?_atoi+1
 14198  0061F8  ECBF  F015         	call	_atoi	;wreg free
 14199  0061FC  5166               	movf	?_atoi& (0+255),w,b
 14200  0061FE  0102               	movlb	2	; () banked
 14201  006200  6FAD               	movwf	doModeVerbose@filterno& (0+255),b
 14202                           
 14203                           ; BSR set to: 2
 14204                           ;main.c: 996: if (filterno > 15) {
 14205  006202  0E0F               	movlw	15
 14206  006204  65AD               	cpfsgt	doModeVerbose@filterno& (0+255),b
 14207  006206  D012               	goto	l14668
 14208                           
 14209                           ; BSR set to: 2
 14210                           ;main.c: 997: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 14211  006208  0E6E               	movlw	high STR_106
 14212  00620A  0100               	movlb	0	; () banked
 14213  00620C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14214  00620E  0E38               	movlw	low STR_106
 14215  006210  6F61               	movwf	?_putsUSART& (0+255),b
 14216  006212  EC8D  F00A         	call	_putsUSART	;wreg free
 14217  006216  EF1A  F035         	goto	l559
 14218  00621A                     l14664:
 14219                           
 14220                           ; BSR set to: 2
 14221                           ;main.c: 1001: else {
 14222                           ;main.c: 1002: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 14223  00621A  0E74               	movlw	high STR_107
 14224  00621C  0100               	movlb	0	; () banked
 14225  00621E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14226  006220  0E78               	movlw	low STR_107
 14227  006222  6F61               	movwf	?_putsUSART& (0+255),b
 14228  006224  EC8D  F00A         	call	_putsUSART	;wreg free
 14229  006228  EF1A  F035         	goto	l559
 14230  00622C                     l14668:
 14231                           
 14232                           ; BSR set to: 2
 14233                           ;main.c: 1004: }
 14234                           ;main.c: 1007: p = strtok((0), ",");
 14235  00622C  EC36  F035         	call	PL6	;call to abstracted procedure
 14236  006230  ECCF  F00D         	call	_strtok	;wreg free
 14237  006234  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1279
 14238  006238  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1279+1
 14239                           
 14240                           ; BSR set to: 0
 14241                           ;main.c: 1008: if ((0) != p) {
 14242  00623C  0102               	movlb	2	; () banked
 14243  00623E  51C2               	movf	(doModeVerbose@p_1279+1)& (0+255),w,b
 14244  006240  11C1               	iorwf	doModeVerbose@p_1279& (0+255),w,b
 14245  006242  E00A               	bz	l14674
 14246                           
 14247                           ; BSR set to: 2
 14248                           ;main.c: 1009: filter_priority = atoi(p);
 14249  006244  C2C1  F066         	movff	doModeVerbose@p_1279,?_atoi
 14250  006248  C2C2  F067         	movff	doModeVerbose@p_1279+1,?_atoi+1
 14251  00624C  ECBF  F015         	call	_atoi	;wreg free
 14252  006250  5166               	movf	?_atoi& (0+255),w,b
 14253  006252  0102               	movlb	2	; () banked
 14254  006254  6F8C               	movwf	doModeVerbose@filter_priority& (0+255),b
 14255                           
 14256                           ;main.c: 1010: }
 14257  006256  D008               	goto	l14678
 14258  006258                     l14674:
 14259                           
 14260                           ; BSR set to: 2
 14261                           ;main.c: 1011: else {
 14262                           ;main.c: 1012: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 14263  006258  0E73               	movlw	high STR_109
 14264  00625A  0100               	movlb	0	; () banked
 14265  00625C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14266  00625E  0E84               	movlw	low STR_109
 14267  006260  6F61               	movwf	?_putsUSART& (0+255),b
 14268  006262  EC8D  F00A         	call	_putsUSART	;wreg free
 14269  006266  D3E6               	goto	l559
 14270  006268                     l14678:
 14271                           
 14272                           ; BSR set to: 2
 14273                           ;main.c: 1014: }
 14274                           ;main.c: 1017: p = strtok((0), ",");
 14275  006268  EC36  F035         	call	PL6	;call to abstracted procedure
 14276  00626C  ECCF  F00D         	call	_strtok	;wreg free
 14277  006270  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1279
 14278  006274  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1279+1
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;main.c: 1018: if ((0) != p) {
 14282  006278  0102               	movlb	2	; () banked
 14283  00627A  51C2               	movf	(doModeVerbose@p_1279+1)& (0+255),w,b
 14284  00627C  11C1               	iorwf	doModeVerbose@p_1279& (0+255),w,b
 14285  00627E  E00B               	bz	l14684
 14286                           
 14287                           ; BSR set to: 2
 14288                           ;main.c: 1019: filter_class = atoi(p);
 14289  006280  C2C1  F066         	movff	doModeVerbose@p_1279,?_atoi
 14290  006284  C2C2  F067         	movff	doModeVerbose@p_1279+1,?_atoi+1
 14291  006288  ECBF  F015         	call	_atoi	;wreg free
 14292  00628C  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 14293  006290  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 14294                           
 14295                           ;main.c: 1020: }
 14296  006294  D008               	goto	l14688
 14297  006296                     l14684:
 14298                           
 14299                           ; BSR set to: 2
 14300                           ;main.c: 1021: else {
 14301                           ;main.c: 1022: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 14302  006296  0E75               	movlw	high STR_111
 14303  006298  0100               	movlb	0	; () banked
 14304  00629A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14305  00629C  0E14               	movlw	low STR_111
 14306  00629E  6F61               	movwf	?_putsUSART& (0+255),b
 14307  0062A0  EC8D  F00A         	call	_putsUSART	;wreg free
 14308  0062A4  D3C7               	goto	l559
 14309  0062A6                     l14688:
 14310                           
 14311                           ; BSR set to: 0
 14312                           ;main.c: 1024: }
 14313                           ;main.c: 1027: p = strtok((0), ",");
 14314  0062A6  DBEA               	call	PL8	;call to abstracted procedure
 14315  0062A8  ECCF  F00D         	call	_strtok	;wreg free
 14316  0062AC  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1279
 14317  0062B0  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1279+1
 14318                           
 14319                           ; BSR set to: 0
 14320                           ;main.c: 1028: if ((0) != p) {
 14321  0062B4  0102               	movlb	2	; () banked
 14322  0062B6  51C2               	movf	(doModeVerbose@p_1279+1)& (0+255),w,b
 14323  0062B8  11C1               	iorwf	doModeVerbose@p_1279& (0+255),w,b
 14324  0062BA  E00A               	bz	l14694
 14325                           
 14326                           ; BSR set to: 2
 14327                           ;main.c: 1029: filter_type = atoi(p);
 14328  0062BC  C2C1  F066         	movff	doModeVerbose@p_1279,?_atoi
 14329  0062C0  C2C2  F067         	movff	doModeVerbose@p_1279+1,?_atoi+1
 14330  0062C4  ECBF  F015         	call	_atoi	;wreg free
 14331  0062C8  5166               	movf	?_atoi& (0+255),w,b
 14332  0062CA  0102               	movlb	2	; () banked
 14333  0062CC  6F8D               	movwf	doModeVerbose@filter_type& (0+255),b
 14334                           
 14335                           ;main.c: 1030: }
 14336  0062CE  D008               	goto	l14698
 14337  0062D0                     l14694:
 14338                           
 14339                           ; BSR set to: 2
 14340                           ;main.c: 1031: else {
 14341                           ;main.c: 1032: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 14342  0062D0  0E75               	movlw	high STR_113
 14343  0062D2  0100               	movlb	0	; () banked
 14344  0062D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14345  0062D6  0E62               	movlw	low STR_113
 14346  0062D8  6F61               	movwf	?_putsUSART& (0+255),b
 14347  0062DA  EC8D  F00A         	call	_putsUSART	;wreg free
 14348  0062DE  D3AA               	goto	l559
 14349  0062E0                     l14698:
 14350                           
 14351                           ; BSR set to: 2
 14352                           ;main.c: 1034: }
 14353                           ;main.c: 1037: p = strtok((0), ",");
 14354  0062E0  DBC5               	call	PL6	;call to abstracted procedure
 14355  0062E2  ECCF  F00D         	call	_strtok	;wreg free
 14356  0062E6  C06C  F2C1         	movff	?_strtok,doModeVerbose@p_1279
 14357  0062EA  C06D  F2C2         	movff	?_strtok+1,doModeVerbose@p_1279+1
 14358                           
 14359                           ; BSR set to: 0
 14360                           ;main.c: 1038: if ((0) != p) {
 14361  0062EE  0102               	movlb	2	; () banked
 14362  0062F0  51C2               	movf	(doModeVerbose@p_1279+1)& (0+255),w,b
 14363  0062F2  11C1               	iorwf	doModeVerbose@p_1279& (0+255),w,b
 14364  0062F4  E00A               	bz	l14704
 14365                           
 14366                           ; BSR set to: 2
 14367                           ;main.c: 1039: filter_nodeid = atoi(p);
 14368  0062F6  C2C1  F066         	movff	doModeVerbose@p_1279,?_atoi
 14369  0062FA  C2C2  F067         	movff	doModeVerbose@p_1279+1,?_atoi+1
 14370  0062FE  ECBF  F015         	call	_atoi	;wreg free
 14371  006302  5166               	movf	?_atoi& (0+255),w,b
 14372  006304  0102               	movlb	2	; () banked
 14373  006306  6F8E               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 14374                           
 14375                           ;main.c: 1040: }
 14376  006308  D008               	goto	l14708
 14377  00630A                     l14704:
 14378                           
 14379                           ; BSR set to: 2
 14380                           ;main.c: 1041: else {
 14381                           ;main.c: 1042: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 14382  00630A  0E73               	movlw	high STR_115
 14383  00630C  0100               	movlb	0	; () banked
 14384  00630E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14385  006310  0ED7               	movlw	low STR_115
 14386  006312  6F61               	movwf	?_putsUSART& (0+255),b
 14387  006314  EC8D  F00A         	call	_putsUSART	;wreg free
 14388  006318  D38D               	goto	l559
 14389  00631A                     l14708:
 14390                           
 14391                           ; BSR set to: 2
 14392                           ;main.c: 1044: }
 14393                           ;main.c: 1047: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14394  00631A  0E80               	movlw	128
 14395  00631C  ECEA  F007         	call	_ECANSetOperationMode
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;main.c: 1049: uint32_t id = ((uint32_t) filter_priority << 26) |
 14399                           ;main.c: 1050: ((uint32_t) filter_class << 16) |
 14400                           ;main.c: 1051: ((uint32_t) filter_type << 8) |
 14401                           ;main.c: 1052: filter_nodeid;
 14402  006320  C28D  F0CC         	movff	doModeVerbose@filter_type,??_doModeVerbose
 14403  006324  DBF2               	call	PL38	;call to abstracted procedure
 14404  006326  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 14405  006328  0100               	movlb	0	; () banked
 14406  00632A  6FD0               	movwf	(??_doModeVerbose+4)& (0+255),b
 14407  00632C  0102               	movlb	2	; () banked
 14408  00632E  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 14409  006330  ECAB  F035         	call	PL62	;call to abstracted procedure
 14410  006334  C28C  F0D4         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 14411  006338  DBA8               	call	PL10	;call to abstracted procedure
 14412  00633A  518E               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 14413  00633C  0100               	movlb	0	; () banked
 14414  00633E  11DC               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14415  006340  0102               	movlb	2	; () banked
 14416  006342  6F80               	movwf	doModeVerbose@id& (0+255),b
 14417  006344  0100               	movlb	0	; () banked
 14418  006346  51DD               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14419  006348  0102               	movlb	2	; () banked
 14420  00634A  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 14421  00634C  0100               	movlb	0	; () banked
 14422  00634E  51DE               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14423  006350  0102               	movlb	2	; () banked
 14424  006352  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 14425  006354  0100               	movlb	0	; () banked
 14426  006356  51DF               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14427  006358  0102               	movlb	2	; () banked
 14428  00635A  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 14429                           
 14430                           ; BSR set to: 2
 14431                           ;main.c: 1053: setFilter(filterno, id);
 14432  00635C  C280  F062         	movff	doModeVerbose@id,?_setFilter
 14433  006360  C281  F063         	movff	doModeVerbose@id+1,?_setFilter+1
 14434  006364  C282  F064         	movff	doModeVerbose@id+2,?_setFilter+2
 14435  006368  C283  F065         	movff	doModeVerbose@id+3,?_setFilter+3
 14436  00636C  51AD               	movf	doModeVerbose@filterno& (0+255),w,b
 14437  00636E  ECE9  F01E         	call	_setFilter
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;main.c: 1056: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14441  006372  0E00               	movlw	0
 14442  006374  ECEA  F007         	call	_ECANSetOperationMode
 14443                           
 14444                           ; BSR set to: 0
 14445                           ;main.c: 1058: putsUSART((char *) "+OK\r\n");
 14446  006378  0E7C               	movlw	high STR_9
 14447  00637A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14448  00637C  0E65               	movlw	low STR_9
 14449  00637E  6F61               	movwf	?_putsUSART& (0+255),b
 14450  006380  EC8D  F00A         	call	_putsUSART	;wreg free
 14451                           
 14452                           ;main.c: 1059: }
 14453  006384  D349               	goto	l14934
 14454  006386                     l14718:
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;main.c: 1063: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 14458  006386  0E01               	movlw	high _cmdbuf
 14459  006388  0100               	movlb	0	; () banked
 14460  00638A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14461  00638C  0E2D               	movlw	low _cmdbuf
 14462  00638E  6F6D               	movwf	?_stristr& (0+255),b
 14463  006390  0E7C               	movlw	high STR_117
 14464  006392  6F70               	movwf	(?_stristr+3)& (0+255),b
 14465  006394  0EA3               	movlw	low STR_117
 14466  006396  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14467  006398  EC86  F00C         	call	_stristr	;wreg free
 14468  00639C  0E2D               	movlw	low _cmdbuf
 14469  00639E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14470  0063A0  0E01               	movlw	high _cmdbuf
 14471  0063A2  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14472  0063A4  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14473  0063A6  E102               	bnz	u19535
 14474  0063A8  516D               	movf	?_stristr& (0+255),w,b
 14475  0063AA  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14476  0063AC                     u19535:
 14477  0063AC  E001 D0DC          	bnz	l14792
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;main.c: 1065: uint8_t maskno;
 14481                           ;main.c: 1066: uint8_t mask_priority;
 14482                           ;main.c: 1067: uint16_t mask_class;
 14483                           ;main.c: 1068: uint8_t mask_type;
 14484                           ;main.c: 1069: uint8_t mask_nodeid;
 14485                           ;main.c: 1071: strcpy(cmdbuf, cmdbuf + 8);
 14486  0063B0  0E01               	movlw	high _cmdbuf
 14487  0063B2  DB4F               	call	PL4	;call to abstracted procedure
 14488  0063B4  EC3C  F008         	call	_strcpy	;wreg free
 14489                           
 14490                           ; BSR set to: 0
 14491                           ;main.c: 1072: char *p = strtok(cmdbuf, ",");
 14492  0063B8  DB95               	call	PL30	;call to abstracted procedure
 14493  0063BA  ECCF  F00D         	call	_strtok	;wreg free
 14494  0063BE  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1299
 14495  0063C2  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1299+1
 14496                           
 14497                           ; BSR set to: 0
 14498                           ;main.c: 1073: if ((0) != p) {
 14499  0063C6  0102               	movlb	2	; () banked
 14500  0063C8  51C4               	movf	(doModeVerbose@p_1299+1)& (0+255),w,b
 14501  0063CA  11C3               	iorwf	doModeVerbose@p_1299& (0+255),w,b
 14502  0063CC  E014               	bz	l14734
 14503                           
 14504                           ; BSR set to: 2
 14505                           ;main.c: 1074: maskno = atoi(p);
 14506  0063CE  C2C3  F066         	movff	doModeVerbose@p_1299,?_atoi
 14507  0063D2  C2C4  F067         	movff	doModeVerbose@p_1299+1,?_atoi+1
 14508  0063D6  ECBF  F015         	call	_atoi	;wreg free
 14509  0063DA  5166               	movf	?_atoi& (0+255),w,b
 14510  0063DC  0102               	movlb	2	; () banked
 14511  0063DE  6FAE               	movwf	doModeVerbose@maskno& (0+255),b
 14512                           
 14513                           ; BSR set to: 2
 14514                           ;main.c: 1075: if (maskno > 1) {
 14515  0063E0  0E01               	movlw	1
 14516  0063E2  65AE               	cpfsgt	doModeVerbose@maskno& (0+255),b
 14517  0063E4  D010               	goto	l14738
 14518                           
 14519                           ; BSR set to: 2
 14520                           ;main.c: 1076: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 14521  0063E6  0E71               	movlw	high STR_119
 14522  0063E8  0100               	movlb	0	; () banked
 14523  0063EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14524  0063EC  0E7E               	movlw	low STR_119
 14525  0063EE  6F61               	movwf	?_putsUSART& (0+255),b
 14526  0063F0  EC8D  F00A         	call	_putsUSART	;wreg free
 14527  0063F4  D31F               	goto	l559
 14528  0063F6                     l14734:
 14529                           
 14530                           ; BSR set to: 2
 14531                           ;main.c: 1080: else {
 14532                           ;main.c: 1081: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 14533  0063F6  0E75               	movlw	high STR_120
 14534  0063F8  0100               	movlb	0	; () banked
 14535  0063FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14536  0063FC  0EAE               	movlw	low STR_120
 14537  0063FE  6F61               	movwf	?_putsUSART& (0+255),b
 14538  006400  EC8D  F00A         	call	_putsUSART	;wreg free
 14539  006404  D317               	goto	l559
 14540  006406                     l14738:
 14541                           
 14542                           ; BSR set to: 2
 14543                           ;main.c: 1083: }
 14544                           ;main.c: 1086: p = strtok((0), ",");
 14545  006406  DB32               	call	PL6	;call to abstracted procedure
 14546  006408  ECCF  F00D         	call	_strtok	;wreg free
 14547  00640C  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1299
 14548  006410  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1299+1
 14549                           
 14550                           ; BSR set to: 0
 14551                           ;main.c: 1087: if ((0) != p) {
 14552  006414  0102               	movlb	2	; () banked
 14553  006416  51C4               	movf	(doModeVerbose@p_1299+1)& (0+255),w,b
 14554  006418  11C3               	iorwf	doModeVerbose@p_1299& (0+255),w,b
 14555  00641A  E00A               	bz	l14744
 14556                           
 14557                           ; BSR set to: 2
 14558                           ;main.c: 1088: mask_priority = atoi(p);
 14559  00641C  C2C3  F066         	movff	doModeVerbose@p_1299,?_atoi
 14560  006420  C2C4  F067         	movff	doModeVerbose@p_1299+1,?_atoi+1
 14561  006424  ECBF  F015         	call	_atoi	;wreg free
 14562  006428  5166               	movf	?_atoi& (0+255),w,b
 14563  00642A  0102               	movlb	2	; () banked
 14564  00642C  6F8F               	movwf	doModeVerbose@mask_priority& (0+255),b
 14565                           
 14566                           ;main.c: 1089: }
 14567  00642E  D008               	goto	l14748
 14568  006430                     l14744:
 14569                           
 14570                           ; BSR set to: 2
 14571                           ;main.c: 1090: else {
 14572                           ;main.c: 1091: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14573  006430  0E74               	movlw	high STR_122
 14574  006432  0100               	movlb	0	; () banked
 14575  006434  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14576  006436  0E28               	movlw	low STR_122
 14577  006438  6F61               	movwf	?_putsUSART& (0+255),b
 14578  00643A  EC8D  F00A         	call	_putsUSART	;wreg free
 14579  00643E  D2FA               	goto	l559
 14580  006440                     l14748:
 14581                           
 14582                           ; BSR set to: 2
 14583                           ;main.c: 1093: }
 14584                           ;main.c: 1096: p = strtok((0), ",");
 14585  006440  DB15               	call	PL6	;call to abstracted procedure
 14586  006442  ECCF  F00D         	call	_strtok	;wreg free
 14587  006446  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1299
 14588  00644A  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1299+1
 14589                           
 14590                           ; BSR set to: 0
 14591                           ;main.c: 1097: if ((0) != p) {
 14592  00644E  0102               	movlb	2	; () banked
 14593  006450  51C4               	movf	(doModeVerbose@p_1299+1)& (0+255),w,b
 14594  006452  11C3               	iorwf	doModeVerbose@p_1299& (0+255),w,b
 14595  006454  E00B               	bz	l14754
 14596                           
 14597                           ; BSR set to: 2
 14598                           ;main.c: 1098: mask_class = atoi(p);
 14599  006456  C2C3  F066         	movff	doModeVerbose@p_1299,?_atoi
 14600  00645A  C2C4  F067         	movff	doModeVerbose@p_1299+1,?_atoi+1
 14601  00645E  ECBF  F015         	call	_atoi	;wreg free
 14602  006462  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14603  006466  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14604                           
 14605                           ;main.c: 1099: }
 14606  00646A  D008               	goto	l14758
 14607  00646C                     l14754:
 14608                           
 14609                           ; BSR set to: 2
 14610                           ;main.c: 1100: else {
 14611                           ;main.c: 1101: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14612  00646C  0E75               	movlw	high STR_124
 14613  00646E  0100               	movlb	0	; () banked
 14614  006470  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14615  006472  0EF8               	movlw	low STR_124
 14616  006474  6F61               	movwf	?_putsUSART& (0+255),b
 14617  006476  EC8D  F00A         	call	_putsUSART	;wreg free
 14618  00647A  D2DC               	goto	l559
 14619  00647C                     l14758:
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;main.c: 1103: }
 14623                           ;main.c: 1106: p = strtok((0), ",");
 14624  00647C  DAFF               	call	PL8	;call to abstracted procedure
 14625  00647E  ECCF  F00D         	call	_strtok	;wreg free
 14626  006482  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1299
 14627  006486  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1299+1
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;main.c: 1107: if ((0) != p) {
 14631  00648A  0102               	movlb	2	; () banked
 14632  00648C  51C4               	movf	(doModeVerbose@p_1299+1)& (0+255),w,b
 14633  00648E  11C3               	iorwf	doModeVerbose@p_1299& (0+255),w,b
 14634  006490  E00A               	bz	l14764
 14635                           
 14636                           ; BSR set to: 2
 14637                           ;main.c: 1108: mask_type = atoi(p);
 14638  006492  C2C3  F066         	movff	doModeVerbose@p_1299,?_atoi
 14639  006496  C2C4  F067         	movff	doModeVerbose@p_1299+1,?_atoi+1
 14640  00649A  ECBF  F015         	call	_atoi	;wreg free
 14641  00649E  5166               	movf	?_atoi& (0+255),w,b
 14642  0064A0  0102               	movlb	2	; () banked
 14643  0064A2  6F90               	movwf	doModeVerbose@mask_type& (0+255),b
 14644                           
 14645                           ;main.c: 1109: }
 14646  0064A4  D008               	goto	l14768
 14647  0064A6                     l14764:
 14648                           
 14649                           ; BSR set to: 2
 14650                           ;main.c: 1110: else {
 14651                           ;main.c: 1111: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14652  0064A6  0E76               	movlw	high STR_126
 14653  0064A8  0100               	movlb	0	; () banked
 14654  0064AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14655  0064AC  0E1D               	movlw	low STR_126
 14656  0064AE  6F61               	movwf	?_putsUSART& (0+255),b
 14657  0064B0  EC8D  F00A         	call	_putsUSART	;wreg free
 14658  0064B4  D2BF               	goto	l559
 14659  0064B6                     l14768:
 14660                           
 14661                           ; BSR set to: 2
 14662                           ;main.c: 1113: }
 14663                           ;main.c: 1116: p = strtok((0), ",");
 14664  0064B6  DADA               	call	PL6	;call to abstracted procedure
 14665  0064B8  ECCF  F00D         	call	_strtok	;wreg free
 14666  0064BC  C06C  F2C3         	movff	?_strtok,doModeVerbose@p_1299
 14667  0064C0  C06D  F2C4         	movff	?_strtok+1,doModeVerbose@p_1299+1
 14668                           
 14669                           ; BSR set to: 0
 14670                           ;main.c: 1117: if ((0) != p) {
 14671  0064C4  0102               	movlb	2	; () banked
 14672  0064C6  51C4               	movf	(doModeVerbose@p_1299+1)& (0+255),w,b
 14673  0064C8  11C3               	iorwf	doModeVerbose@p_1299& (0+255),w,b
 14674  0064CA  E00A               	bz	l14774
 14675                           
 14676                           ; BSR set to: 2
 14677                           ;main.c: 1118: mask_nodeid = atoi(p);
 14678  0064CC  C2C3  F066         	movff	doModeVerbose@p_1299,?_atoi
 14679  0064D0  C2C4  F067         	movff	doModeVerbose@p_1299+1,?_atoi+1
 14680  0064D4  ECBF  F015         	call	_atoi	;wreg free
 14681  0064D8  5166               	movf	?_atoi& (0+255),w,b
 14682  0064DA  0102               	movlb	2	; () banked
 14683  0064DC  6F91               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14684                           
 14685                           ;main.c: 1119: }
 14686  0064DE  D008               	goto	l14778
 14687  0064E0                     l14774:
 14688                           
 14689                           ; BSR set to: 2
 14690                           ;main.c: 1120: else {
 14691                           ;main.c: 1121: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14692  0064E0  0E74               	movlw	high STR_128
 14693  0064E2  0100               	movlb	0	; () banked
 14694  0064E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14695  0064E6  0EED               	movlw	low STR_128
 14696  0064E8  6F61               	movwf	?_putsUSART& (0+255),b
 14697  0064EA  EC8D  F00A         	call	_putsUSART	;wreg free
 14698  0064EE  D2A2               	goto	l559
 14699  0064F0                     l14778:
 14700                           
 14701                           ; BSR set to: 2
 14702                           ;main.c: 1123: }
 14703                           ;main.c: 1124: uint32_t id = ((uint32_t) mask_priority << 26) |
 14704                           ;main.c: 1125: ((uint32_t) mask_class << 16) |
 14705                           ;main.c: 1126: ((uint32_t) mask_type << 8) |
 14706                           ;main.c: 1127: mask_nodeid;
 14707  0064F0  C290  F0CC         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14708  0064F4  DB0A               	call	PL38	;call to abstracted procedure
 14709  0064F6  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14710  0064F8  0100               	movlb	0	; () banked
 14711  0064FA  6FD0               	movwf	(??_doModeVerbose+4)& (0+255),b
 14712  0064FC  0102               	movlb	2	; () banked
 14713  0064FE  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14714  006500  DB2A               	call	PL62	;call to abstracted procedure
 14715  006502  C28F  F0D4         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14716  006506  DAC1               	call	PL10	;call to abstracted procedure
 14717  006508  5191               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14718  00650A  0100               	movlb	0	; () banked
 14719  00650C  11DC               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14720  00650E  0102               	movlb	2	; () banked
 14721  006510  6FA9               	movwf	doModeVerbose@id_1311& (0+255),b
 14722  006512  0100               	movlb	0	; () banked
 14723  006514  51DD               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14724  006516  0102               	movlb	2	; () banked
 14725  006518  6FAA               	movwf	(doModeVerbose@id_1311+1)& (0+255),b
 14726  00651A  0100               	movlb	0	; () banked
 14727  00651C  51DE               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14728  00651E  0102               	movlb	2	; () banked
 14729  006520  6FAB               	movwf	(doModeVerbose@id_1311+2)& (0+255),b
 14730  006522  0100               	movlb	0	; () banked
 14731  006524  51DF               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14732  006526  0102               	movlb	2	; () banked
 14733  006528  6FAC               	movwf	(doModeVerbose@id_1311+3)& (0+255),b
 14734                           
 14735                           ; BSR set to: 2
 14736                           ;main.c: 1130: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14737  00652A  0E80               	movlw	128
 14738  00652C  ECEA  F007         	call	_ECANSetOperationMode
 14739                           
 14740                           ; BSR set to: 0
 14741                           ;main.c: 1132: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14742                           ;main.c: 1133: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14743  006530  0102               	movlb	2	; () banked
 14744  006532  51AE               	movf	doModeVerbose@maskno& (0+255),w,b
 14745  006534  E008               	bz	l14786
 14746                           
 14747                           ; BSR set to: 2
 14748  006536  0E0F               	movlw	15	;volatile
 14749  006538  0100               	movlb	0	; () banked
 14750  00653A  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14751  00653C  0E18               	movlw	24	;volatile
 14752  00653E  DAFF               	call	PL50	;call to abstracted procedure
 14753  006540  EC42  F016         	call	__CANIDToRegs	;wreg free
 14754  006544  D007               	goto	l14788
 14755  006546                     l14786:
 14756                           
 14757                           ; BSR set to: 2
 14758  006546  0E0F               	movlw	15	;volatile
 14759  006548  0100               	movlb	0	; () banked
 14760  00654A  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14761  00654C  0E1C               	movlw	28	;volatile
 14762  00654E  DAF7               	call	PL50	;call to abstracted procedure
 14763  006550  EC42  F016         	call	__CANIDToRegs	;wreg free
 14764  006554                     l14788:
 14765                           
 14766                           ; BSR set to: 0
 14767                           ;main.c: 1136: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14768  006554  0E00               	movlw	0
 14769  006556  ECEA  F007         	call	_ECANSetOperationMode
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;main.c: 1138: putsUSART((char *) "+OK\r\n");
 14773  00655A  0E7C               	movlw	high STR_9
 14774  00655C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14775  00655E  0E65               	movlw	low STR_9
 14776  006560  6F61               	movwf	?_putsUSART& (0+255),b
 14777  006562  EC8D  F00A         	call	_putsUSART	;wreg free
 14778                           
 14779                           ;main.c: 1140: }
 14780  006566  D258               	goto	l14934
 14781  006568                     l14792:
 14782                           
 14783                           ; BSR set to: 0
 14784                           ;main.c: 1150: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14785  006568  0E01               	movlw	high _cmdbuf
 14786  00656A  0100               	movlb	0	; () banked
 14787  00656C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14788  00656E  0E2D               	movlw	low _cmdbuf
 14789  006570  6F6D               	movwf	?_stristr& (0+255),b
 14790  006572  0E7C               	movlw	high STR_130
 14791  006574  6F70               	movwf	(?_stristr+3)& (0+255),b
 14792  006576  0E8F               	movlw	low STR_130
 14793  006578  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14794  00657A  EC86  F00C         	call	_stristr	;wreg free
 14795  00657E  0E2D               	movlw	low _cmdbuf
 14796  006580  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14797  006582  0E01               	movlw	high _cmdbuf
 14798  006584  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14799  006586  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14800  006588  E102               	bnz	u19625
 14801  00658A  516D               	movf	?_stristr& (0+255),w,b
 14802  00658C  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14803  00658E                     u19625:
 14804  00658E  E001 D230          	bnz	l14928
 14805                           
 14806                           ; BSR set to: 0
 14807                           ;main.c: 1153: strcpy(cmdbuf, cmdbuf + 4);
 14808  006592  0E01               	movlw	high _cmdbuf
 14809  006594  0100               	movlb	0	; () banked
 14810  006596  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14811  006598  0E2D               	movlw	low _cmdbuf
 14812  00659A  6F60               	movwf	?_strcpy& (0+255),b
 14813  00659C  0E31               	movlw	low (_cmdbuf+4)
 14814  00659E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14815  0065A0  0E01               	movlw	high (_cmdbuf+4)
 14816  0065A2  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14817  0065A4  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 14818  0065A8  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14819  0065AC  EC3C  F008         	call	_strcpy	;wreg free
 14820                           
 14821                           ; BSR set to: 0
 14822                           ;main.c: 1156: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14823  0065B0  0E01               	movlw	high _cmdbuf
 14824  0065B2  0100               	movlb	0	; () banked
 14825  0065B4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14826  0065B6  0E2D               	movlw	low _cmdbuf
 14827  0065B8  6F6D               	movwf	?_stristr& (0+255),b
 14828  0065BA  0E7C               	movlw	high STR_131
 14829  0065BC  6F70               	movwf	(?_stristr+3)& (0+255),b
 14830  0065BE  0EDA               	movlw	low STR_131
 14831  0065C0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14832  0065C2  EC86  F00C         	call	_stristr	;wreg free
 14833  0065C6  0E2D               	movlw	low _cmdbuf
 14834  0065C8  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14835  0065CA  0E01               	movlw	high _cmdbuf
 14836  0065CC  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14837  0065CE  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14838  0065D0  E102               	bnz	u19635
 14839  0065D2  516D               	movf	?_stristr& (0+255),w,b
 14840  0065D4  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14841  0065D6                     u19635:
 14842  0065D6  E114               	bnz	l14804
 14843                           
 14844                           ; BSR set to: 0
 14845                           ;main.c: 1157: bHex = 1;
 14846  0065D8  0E01               	movlw	1
 14847  0065DA  6E2C               	movwf	_bHex,c
 14848                           
 14849                           ; BSR set to: 0
 14850                           ;main.c: 1158: (Busy_eep(), Write_b_eep(0x06,1));
 14851  0065DC  ECB3  F007         	call	_Busy_eep	;wreg free
 14852  0065E0  0100               	movlb	0	; () banked
 14853  0065E2  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14854  0065E4  0E06               	movlw	6
 14855  0065E6  6F60               	movwf	?_Write_b_eep& (0+255),b
 14856  0065E8  0E01               	movlw	1
 14857  0065EA  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14858  0065EC  EC83  F008         	call	_Write_b_eep	;wreg free
 14859                           
 14860                           ;main.c: 1159: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14861  0065F0  0E73               	movlw	high STR_132
 14862  0065F2  0100               	movlb	0	; () banked
 14863  0065F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14864  0065F6  0E58               	movlw	low STR_132
 14865  0065F8  6F61               	movwf	?_putsUSART& (0+255),b
 14866  0065FA  EC8D  F00A         	call	_putsUSART	;wreg free
 14867                           
 14868                           ;main.c: 1160: }
 14869  0065FE  D20C               	goto	l14934
 14870  006600                     l14804:
 14871                           
 14872                           ; BSR set to: 0
 14873                           ;main.c: 1162: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14874  006600  0E01               	movlw	high _cmdbuf
 14875  006602  0100               	movlb	0	; () banked
 14876  006604  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14877  006606  0E2D               	movlw	low _cmdbuf
 14878  006608  6F6D               	movwf	?_stristr& (0+255),b
 14879  00660A  0E7B               	movlw	high STR_133
 14880  00660C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14881  00660E  0EEB               	movlw	low STR_133
 14882  006610  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14883  006612  EC86  F00C         	call	_stristr	;wreg free
 14884  006616  0E2D               	movlw	low _cmdbuf
 14885  006618  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14886  00661A  0E01               	movlw	high _cmdbuf
 14887  00661C  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14888  00661E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14889  006620  E102               	bnz	u19645
 14890  006622  516D               	movf	?_stristr& (0+255),w,b
 14891  006624  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14892  006626                     u19645:
 14893  006626  E113               	bnz	l14814
 14894                           
 14895                           ; BSR set to: 0
 14896                           ;main.c: 1163: bHex = 0;
 14897  006628  6A2C               	clrf	_bHex,c
 14898                           
 14899                           ; BSR set to: 0
 14900                           ;main.c: 1164: (Busy_eep(), Write_b_eep(0x06,0));
 14901  00662A  ECB3  F007         	call	_Busy_eep	;wreg free
 14902  00662E  0100               	movlb	0	; () banked
 14903  006630  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14904  006632  0E06               	movlw	6
 14905  006634  6F60               	movwf	?_Write_b_eep& (0+255),b
 14906  006636  0E00               	movlw	0
 14907  006638  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14908  00663A  EC83  F008         	call	_Write_b_eep	;wreg free
 14909                           
 14910                           ;main.c: 1165: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14911  00663E  0E74               	movlw	high STR_134
 14912  006640  0100               	movlb	0	; () banked
 14913  006642  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14914  006644  0E50               	movlw	low STR_134
 14915  006646  6F61               	movwf	?_putsUSART& (0+255),b
 14916  006648  EC8D  F00A         	call	_putsUSART	;wreg free
 14917                           
 14918                           ;main.c: 1166: }
 14919  00664C  D1E5               	goto	l14934
 14920  00664E                     l14814:
 14921                           
 14922                           ; BSR set to: 0
 14923                           ;main.c: 1167: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14924  00664E  0E01               	movlw	high _cmdbuf
 14925  006650  0100               	movlb	0	; () banked
 14926  006652  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14927  006654  0E2D               	movlw	low _cmdbuf
 14928  006656  6F6D               	movwf	?_stristr& (0+255),b
 14929  006658  0E7B               	movlw	high STR_135
 14930  00665A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14931  00665C  0E51               	movlw	low STR_135
 14932  00665E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14933  006660  EC86  F00C         	call	_stristr	;wreg free
 14934  006664  516E               	movf	(?_stristr+1)& (0+255),w,b
 14935  006666  116D               	iorwf	?_stristr& (0+255),w,b
 14936  006668  E02E               	bz	l14828
 14937                           
 14938                           ; BSR set to: 0
 14939                           ;main.c: 1168: strcpy(cmdbuf, cmdbuf + 10);
 14940  00666A  0E01               	movlw	high _cmdbuf
 14941  00666C  0100               	movlb	0	; () banked
 14942  00666E  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14943  006670  0E2D               	movlw	low _cmdbuf
 14944  006672  6F60               	movwf	?_strcpy& (0+255),b
 14945  006674  0E37               	movlw	low (_cmdbuf+10)
 14946  006676  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14947  006678  0E01               	movlw	high (_cmdbuf+10)
 14948  00667A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14949  00667C  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 14950  006680  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14951  006684  EC3C  F008         	call	_strcpy	;wreg free
 14952                           
 14953                           ; BSR set to: 0
 14954                           ;main.c: 1169: rwtimeout = atoi(cmdbuf);
 14955  006688  0E01               	movlw	high _cmdbuf
 14956  00668A  0100               	movlb	0	; () banked
 14957  00668C  6F67               	movwf	(?_atoi+1)& (0+255),b
 14958  00668E  0E2D               	movlw	low _cmdbuf
 14959  006690  6F66               	movwf	?_atoi& (0+255),b
 14960  006692  ECBF  F015         	call	_atoi	;wreg free
 14961  006696  5166               	movf	?_atoi& (0+255),w,b
 14962  006698  6E35               	movwf	_rwtimeout,c
 14963                           
 14964                           ; BSR set to: 0
 14965                           ;main.c: 1170: if (rwtimeout < 20u) {
 14966  00669A  0E14               	movlw	20
 14967  00669C  6035               	cpfslt	_rwtimeout,c
 14968  00669E  D001               	goto	l14824
 14969                           
 14970                           ; BSR set to: 0
 14971                           ;main.c: 1171: rwtimeout = 20u;
 14972  0066A0  6E35               	movwf	_rwtimeout,c
 14973  0066A2                     l14824:
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;main.c: 1172: }
 14977                           ;main.c: 1173: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14978  0066A2  ECB3  F007         	call	_Busy_eep	;wreg free
 14979  0066A6  0100               	movlb	0	; () banked
 14980  0066A8  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14981  0066AA  0E09               	movlw	9
 14982  0066AC  6F60               	movwf	?_Write_b_eep& (0+255),b
 14983  0066AE  C035  F062         	movff	_rwtimeout,?_Write_b_eep+2
 14984  0066B2  EC83  F008         	call	_Write_b_eep	;wreg free
 14985                           
 14986                           ;main.c: 1174: putsUSART((char *) "+OK\r\n");
 14987  0066B6  0E7C               	movlw	high STR_9
 14988  0066B8  0100               	movlb	0	; () banked
 14989  0066BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14990  0066BC  0E65               	movlw	low STR_9
 14991  0066BE  6F61               	movwf	?_putsUSART& (0+255),b
 14992  0066C0  EC8D  F00A         	call	_putsUSART	;wreg free
 14993                           
 14994                           ;main.c: 1175: }
 14995  0066C4  D1A9               	goto	l14934
 14996  0066C6                     l14828:
 14997                           
 14998                           ; BSR set to: 0
 14999                           ;main.c: 1177: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 15000  0066C6  0E01               	movlw	high _cmdbuf
 15001  0066C8  0100               	movlb	0	; () banked
 15002  0066CA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15003  0066CC  0E2D               	movlw	low _cmdbuf
 15004  0066CE  6F6D               	movwf	?_stristr& (0+255),b
 15005  0066D0  0E7B               	movlw	high STR_137
 15006  0066D2  6F70               	movwf	(?_stristr+3)& (0+255),b
 15007  0066D4  0E8F               	movlw	low STR_137
 15008  0066D6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15009  0066D8  EC86  F00C         	call	_stristr	;wreg free
 15010  0066DC  516E               	movf	(?_stristr+1)& (0+255),w,b
 15011  0066DE  116D               	iorwf	?_stristr& (0+255),w,b
 15012  0066E0  E061               	bz	l14862
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;main.c: 1178: strcpy(cmdbuf, cmdbuf + 8);
 15016  0066E2  0E01               	movlw	high _cmdbuf
 15017  0066E4  D9B6               	call	PL4	;call to abstracted procedure
 15018  0066E6  EC3C  F008         	call	_strcpy	;wreg free
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;main.c: 1179: if (0 != stristr(cmdbuf, "CLOSE")) {
 15022  0066EA  0E01               	movlw	high _cmdbuf
 15023  0066EC  0100               	movlb	0	; () banked
 15024  0066EE  DA51               	call	PL90	;call to abstracted procedure
 15025  0066F0  EC86  F00C         	call	_stristr	;wreg free
 15026  0066F4  516E               	movf	(?_stristr+1)& (0+255),w,b
 15027  0066F6  116D               	iorwf	?_stristr& (0+255),w,b
 15028  0066F8  E00B               	bz	l14838
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;main.c: 1180: (Busy_eep(), Write_b_eep(0x07,0));
 15032  0066FA  ECB3  F007         	call	_Busy_eep	;wreg free
 15033  0066FE  0100               	movlb	0	; () banked
 15034  006700  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15035  006702  0E07               	movlw	7
 15036  006704  6F60               	movwf	?_Write_b_eep& (0+255),b
 15037  006706  0E00               	movlw	0
 15038  006708  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 15039  00670A  EC83  F008         	call	_Write_b_eep	;wreg free
 15040                           
 15041                           ;main.c: 1181: }
 15042  00670E  D184               	goto	l14934
 15043  006710                     l14838:
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;main.c: 1182: else if (0 != stristr(cmdbuf, "OPEN")) {
 15047  006710  DA2D               	call	PL72	;call to abstracted procedure
 15048  006712  EC86  F00C         	call	_stristr	;wreg free
 15049  006716  516E               	movf	(?_stristr+1)& (0+255),w,b
 15050  006718  116D               	iorwf	?_stristr& (0+255),w,b
 15051  00671A  E00B               	bz	l14844
 15052                           
 15053                           ; BSR set to: 0
 15054                           ;main.c: 1183: (Busy_eep(), Write_b_eep(0x07,1));
 15055  00671C  ECB3  F007         	call	_Busy_eep	;wreg free
 15056  006720  0100               	movlb	0	; () banked
 15057  006722  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15058  006724  0E07               	movlw	7
 15059  006726  6F60               	movwf	?_Write_b_eep& (0+255),b
 15060  006728  0E01               	movlw	1
 15061  00672A  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15062  00672C  EC83  F008         	call	_Write_b_eep	;wreg free
 15063                           
 15064                           ;main.c: 1184: }
 15065  006730  D173               	goto	l14934
 15066  006732                     l14844:
 15067                           
 15068                           ; BSR set to: 0
 15069                           ;main.c: 1185: else if (0 != stristr(cmdbuf, "SILENT")) {
 15070  006732  0E01               	movlw	high _cmdbuf
 15071  006734  DA25               	call	PL78	;call to abstracted procedure
 15072  006736  EC86  F00C         	call	_stristr	;wreg free
 15073  00673A  516E               	movf	(?_stristr+1)& (0+255),w,b
 15074  00673C  116D               	iorwf	?_stristr& (0+255),w,b
 15075  00673E  E00B               	bz	l14850
 15076                           
 15077                           ; BSR set to: 0
 15078                           ;main.c: 1186: (Busy_eep(), Write_b_eep(0x07,2));
 15079  006740  ECB3  F007         	call	_Busy_eep	;wreg free
 15080  006744  0100               	movlb	0	; () banked
 15081  006746  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15082  006748  0E07               	movlw	7
 15083  00674A  6F60               	movwf	?_Write_b_eep& (0+255),b
 15084  00674C  0E02               	movlw	2
 15085  00674E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15086  006750  EC83  F008         	call	_Write_b_eep	;wreg free
 15087                           
 15088                           ;main.c: 1187: }
 15089  006754  D161               	goto	l14934
 15090  006756                     l14850:
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;main.c: 1188: else if (0 != stristr(cmdbuf, "LISTEN")) {
 15094  006756  0E01               	movlw	high _cmdbuf
 15095  006758  0100               	movlb	0	; () banked
 15096  00675A  DA23               	call	PL98	;call to abstracted procedure
 15097  00675C  EC86  F00C         	call	_stristr	;wreg free
 15098  006760  516E               	movf	(?_stristr+1)& (0+255),w,b
 15099  006762  116D               	iorwf	?_stristr& (0+255),w,b
 15100  006764  E00B               	bz	l14856
 15101                           
 15102                           ; BSR set to: 0
 15103                           ;main.c: 1189: (Busy_eep(), Write_b_eep(0x07,3));
 15104  006766  ECB3  F007         	call	_Busy_eep	;wreg free
 15105  00676A  0100               	movlb	0	; () banked
 15106  00676C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15107  00676E  0E07               	movlw	7
 15108  006770  6F60               	movwf	?_Write_b_eep& (0+255),b
 15109  006772  0E03               	movlw	3
 15110  006774  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15111  006776  EC83  F008         	call	_Write_b_eep	;wreg free
 15112                           
 15113                           ;main.c: 1190: }
 15114  00677A  D14E               	goto	l14934
 15115  00677C                     l14856:
 15116                           
 15117                           ; BSR set to: 0
 15118                           ;main.c: 1191: else if (0 != stristr(cmdbuf, "LOOPBACK")) {
 15119  00677C  0E01               	movlw	high _cmdbuf
 15120  00677E  0100               	movlb	0	; () banked
 15121  006780  DA18               	call	PL102	;call to abstracted procedure
 15122  006782  EC86  F00C         	call	_stristr	;wreg free
 15123  006786  516E               	movf	(?_stristr+1)& (0+255),w,b
 15124  006788  116D               	iorwf	?_stristr& (0+255),w,b
 15125  00678A  E101 D145          	bz	l14934
 15126                           
 15127                           ; BSR set to: 0
 15128                           ;main.c: 1192: (Busy_eep(), Write_b_eep(0x07,4));
 15129  00678E  ECB3  F007         	call	_Busy_eep	;wreg free
 15130  006792  0100               	movlb	0	; () banked
 15131  006794  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15132  006796  0E07               	movlw	7
 15133  006798  6F60               	movwf	?_Write_b_eep& (0+255),b
 15134  00679A  0E04               	movlw	4
 15135  00679C  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15136  00679E  EC83  F008         	call	_Write_b_eep	;wreg free
 15137                           
 15138                           ; BSR set to: 0
 15139  0067A2  D13A               	goto	l14934
 15140  0067A4                     l14862:
 15141                           
 15142                           ; BSR set to: 0
 15143                           ;main.c: 1195: else if (0 != stristr(cmdbuf, "MODE ")) {
 15144  0067A4  0E01               	movlw	high _cmdbuf
 15145  0067A6  0100               	movlb	0	; () banked
 15146  0067A8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15147  0067AA  0E2D               	movlw	low _cmdbuf
 15148  0067AC  6F6D               	movwf	?_stristr& (0+255),b
 15149  0067AE  0E7C               	movlw	high STR_143
 15150  0067B0  6F70               	movwf	(?_stristr+3)& (0+255),b
 15151  0067B2  0E71               	movlw	low STR_143
 15152  0067B4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15153  0067B6  EC86  F00C         	call	_stristr	;wreg free
 15154  0067BA  516E               	movf	(?_stristr+1)& (0+255),w,b
 15155  0067BC  116D               	iorwf	?_stristr& (0+255),w,b
 15156  0067BE  E06C               	bz	l14892
 15157                           
 15158                           ; BSR set to: 0
 15159                           ;main.c: 1196: strcpy(cmdbuf, cmdbuf + 5);
 15160  0067C0  D93A               	call	PL2	;call to abstracted procedure
 15161  0067C2  EC3C  F008         	call	_strcpy	;wreg free
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;main.c: 1197: if (0 != stristr(cmdbuf, "VERBOSE")) {
 15165  0067C6  0E01               	movlw	high _cmdbuf
 15166  0067C8  0100               	movlb	0	; () banked
 15167  0067CA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15168  0067CC  0E2D               	movlw	low _cmdbuf
 15169  0067CE  6F6D               	movwf	?_stristr& (0+255),b
 15170  0067D0  0E7B               	movlw	high STR_144
 15171  0067D2  6F70               	movwf	(?_stristr+3)& (0+255),b
 15172  0067D4  0EE3               	movlw	low STR_144
 15173  0067D6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15174  0067D8  EC86  F00C         	call	_stristr	;wreg free
 15175  0067DC  516E               	movf	(?_stristr+1)& (0+255),w,b
 15176  0067DE  116D               	iorwf	?_stristr& (0+255),w,b
 15177  0067E0  E014               	bz	l14876
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;main.c: 1198: mode = 0;
 15181  0067E2  0101               	movlb	1	; () banked
 15182  0067E4  6B2C               	clrf	_mode& (0+255),b
 15183                           
 15184                           ; BSR set to: 1
 15185                           ;main.c: 1199: (Busy_eep(), Write_b_eep(0x03,0));
 15186  0067E6  ECB3  F007         	call	_Busy_eep	;wreg free
 15187  0067EA  0100               	movlb	0	; () banked
 15188  0067EC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15189  0067EE  0E03               	movlw	3
 15190  0067F0  6F60               	movwf	?_Write_b_eep& (0+255),b
 15191  0067F2  0E00               	movlw	0
 15192  0067F4  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 15193  0067F6  EC83  F008         	call	_Write_b_eep	;wreg free
 15194                           
 15195                           ;main.c: 1200: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 15196  0067FA  0E77               	movlw	high STR_145
 15197  0067FC  0100               	movlb	0	; () banked
 15198  0067FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15199  006800  0EC6               	movlw	low STR_145
 15200  006802  6F61               	movwf	?_putsUSART& (0+255),b
 15201  006804  EC8D  F00A         	call	_putsUSART	;wreg free
 15202                           
 15203                           ;main.c: 1201: }
 15204  006808  D107               	goto	l14934
 15205  00680A                     l14876:
 15206                           
 15207                           ; BSR set to: 0
 15208                           ;main.c: 1202: else if (0 != stristr(cmdbuf, "VSCP")) {
 15209  00680A  0E01               	movlw	high _cmdbuf
 15210  00680C  0100               	movlb	0	; () banked
 15211  00680E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15212  006810  0E2D               	movlw	low _cmdbuf
 15213  006812  6F6D               	movwf	?_stristr& (0+255),b
 15214  006814  0E7C               	movlw	high STR_146
 15215  006816  6F70               	movwf	(?_stristr+3)& (0+255),b
 15216  006818  0EB2               	movlw	low STR_146
 15217  00681A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15218  00681C  EC86  F00C         	call	_stristr	;wreg free
 15219  006820  516E               	movf	(?_stristr+1)& (0+255),w,b
 15220  006822  116D               	iorwf	?_stristr& (0+255),w,b
 15221  006824  E015               	bz	l14884
 15222                           
 15223                           ; BSR set to: 0
 15224                           ;main.c: 1203: mode = 1;
 15225  006826  0E01               	movlw	1
 15226  006828  0101               	movlb	1	; () banked
 15227  00682A  6F2C               	movwf	_mode& (0+255),b
 15228                           
 15229                           ; BSR set to: 1
 15230                           ;main.c: 1204: (Busy_eep(), Write_b_eep(0x03,1));
 15231  00682C  ECB3  F007         	call	_Busy_eep	;wreg free
 15232  006830  0100               	movlb	0	; () banked
 15233  006832  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15234  006834  0E03               	movlw	3
 15235  006836  6F60               	movwf	?_Write_b_eep& (0+255),b
 15236  006838  0E01               	movlw	1
 15237  00683A  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15238  00683C  EC83  F008         	call	_Write_b_eep	;wreg free
 15239                           
 15240                           ;main.c: 1205: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 15241  006840  0E77               	movlw	high STR_147
 15242  006842  0100               	movlb	0	; () banked
 15243  006844  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15244  006846  0E2E               	movlw	low STR_147
 15245  006848  6F61               	movwf	?_putsUSART& (0+255),b
 15246  00684A  EC8D  F00A         	call	_putsUSART	;wreg free
 15247                           
 15248                           ;main.c: 1206: }
 15249  00684E  D0E4               	goto	l14934
 15250  006850                     l14884:
 15251                           
 15252                           ; BSR set to: 0
 15253                           ;main.c: 1207: else if (0 != stristr(cmdbuf, "SLCAN")) {
 15254  006850  0E01               	movlw	high _cmdbuf
 15255  006852  0100               	movlb	0	; () banked
 15256  006854  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15257  006856  0E2D               	movlw	low _cmdbuf
 15258  006858  6F6D               	movwf	?_stristr& (0+255),b
 15259  00685A  0E7C               	movlw	high STR_148
 15260  00685C  6F70               	movwf	(?_stristr+3)& (0+255),b
 15261  00685E  0E89               	movlw	low STR_148
 15262  006860  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15263  006862  EC86  F00C         	call	_stristr	;wreg free
 15264  006866  516E               	movf	(?_stristr+1)& (0+255),w,b
 15265  006868  116D               	iorwf	?_stristr& (0+255),w,b
 15266  00686A  E101 D0D5          	bz	l14934
 15267                           
 15268                           ; BSR set to: 0
 15269                           ;main.c: 1208: mode = 2;
 15270  00686E  0E02               	movlw	2
 15271  006870  0101               	movlb	1	; () banked
 15272  006872  6F2C               	movwf	_mode& (0+255),b
 15273                           
 15274                           ; BSR set to: 1
 15275                           ;main.c: 1209: (Busy_eep(), Write_b_eep(0x03,2));
 15276  006874  ECB3  F007         	call	_Busy_eep	;wreg free
 15277  006878  0100               	movlb	0	; () banked
 15278  00687A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15279  00687C  0E03               	movlw	3
 15280  00687E  6F60               	movwf	?_Write_b_eep& (0+255),b
 15281  006880  0E02               	movlw	2
 15282  006882  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15283  006884  EC83  F008         	call	_Write_b_eep	;wreg free
 15284                           
 15285                           ;main.c: 1210: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 15286  006888  0E78               	movlw	high STR_149
 15287  00688A  0100               	movlb	0	; () banked
 15288  00688C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15289  00688E  0E18               	movlw	low STR_149
 15290  006890  6F61               	movwf	?_putsUSART& (0+255),b
 15291  006892  EC8D  F00A         	call	_putsUSART	;wreg free
 15292  006896  D0C0               	goto	l14934
 15293  006898                     l14892:
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;main.c: 1214: else if (0 != stristr(cmdbuf, "FILTER ")) {
 15297  006898  0E01               	movlw	high _cmdbuf
 15298  00689A  0100               	movlb	0	; () banked
 15299  00689C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15300  00689E  0E2D               	movlw	low _cmdbuf
 15301  0068A0  6F6D               	movwf	?_stristr& (0+255),b
 15302  0068A2  0E7B               	movlw	high STR_150
 15303  0068A4  6F70               	movwf	(?_stristr+3)& (0+255),b
 15304  0068A6  0ED3               	movlw	low STR_150
 15305  0068A8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15306  0068AA  EC86  F00C         	call	_stristr	;wreg free
 15307  0068AE  516E               	movf	(?_stristr+1)& (0+255),w,b
 15308  0068B0  116D               	iorwf	?_stristr& (0+255),w,b
 15309  0068B2  E010               	bz	l14896
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;main.c: 1215: strcpy(cmdbuf, cmdbuf + 7);
 15313  0068B4  0E01               	movlw	high _cmdbuf
 15314  0068B6  0100               	movlb	0	; () banked
 15315  0068B8  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15316  0068BA  0E2D               	movlw	low _cmdbuf
 15317  0068BC  6F60               	movwf	?_strcpy& (0+255),b
 15318  0068BE  0E34               	movlw	low (_cmdbuf+7)
 15319  0068C0  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15320  0068C2  0E01               	movlw	high (_cmdbuf+7)
 15321  0068C4  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15322  0068C6  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15323  0068CA  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15324  0068CE  EC3C  F008         	call	_strcpy	;wreg free
 15325                           
 15326                           ;main.c: 1217: }
 15327  0068D2  D0A2               	goto	l14934
 15328  0068D4                     l14896:
 15329                           
 15330                           ; BSR set to: 0
 15331                           ;main.c: 1219: else if (0 != stristr(cmdbuf, "MASK ")) {
 15332  0068D4  0E01               	movlw	high _cmdbuf
 15333  0068D6  0100               	movlb	0	; () banked
 15334  0068D8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15335  0068DA  0E2D               	movlw	low _cmdbuf
 15336  0068DC  6F6D               	movwf	?_stristr& (0+255),b
 15337  0068DE  0E7C               	movlw	high STR_151
 15338  0068E0  6F70               	movwf	(?_stristr+3)& (0+255),b
 15339  0068E2  0E77               	movlw	low STR_151
 15340  0068E4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15341  0068E6  EC86  F00C         	call	_stristr	;wreg free
 15342  0068EA  516E               	movf	(?_stristr+1)& (0+255),w,b
 15343  0068EC  116D               	iorwf	?_stristr& (0+255),w,b
 15344  0068EE  E004               	bz	l14900
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;main.c: 1220: strcpy(cmdbuf, cmdbuf + 5);
 15348  0068F0  D8A2               	call	PL2	;call to abstracted procedure
 15349  0068F2  EC3C  F008         	call	_strcpy	;wreg free
 15350                           
 15351                           ;main.c: 1221: }
 15352  0068F6  D090               	goto	l14934
 15353  0068F8                     l14900:
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;main.c: 1223: else if (cmdbuf == stristr(cmdbuf, "ECHO ")) {
 15357  0068F8  0E01               	movlw	high _cmdbuf
 15358  0068FA  0100               	movlb	0	; () banked
 15359  0068FC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15360  0068FE  0E2D               	movlw	low _cmdbuf
 15361  006900  6F6D               	movwf	?_stristr& (0+255),b
 15362  006902  0E7C               	movlw	high STR_152
 15363  006904  6F70               	movwf	(?_stristr+3)& (0+255),b
 15364  006906  0E7D               	movlw	low STR_152
 15365  006908  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15366  00690A  EC86  F00C         	call	_stristr	;wreg free
 15367  00690E  0E2D               	movlw	low _cmdbuf
 15368  006910  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15369  006912  0E01               	movlw	high _cmdbuf
 15370  006914  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15371  006916  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15372  006918  E102               	bnz	u19795
 15373  00691A  516D               	movf	?_stristr& (0+255),w,b
 15374  00691C  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15375  00691E                     u19795:
 15376  00691E  E137               	bnz	l14918
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;main.c: 1224: strcpy(cmdbuf, cmdbuf + 5);
 15380  006920  D88A               	call	PL2	;call to abstracted procedure
 15381  006922  EC3C  F008         	call	_strcpy	;wreg free
 15382                           
 15383                           ; BSR set to: 0
 15384                           ;main.c: 1225: if (0 != stristr(cmdbuf, "ON")) {
 15385  006926  0E01               	movlw	high _cmdbuf
 15386  006928  0100               	movlb	0	; () banked
 15387  00692A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15388  00692C  0E2D               	movlw	low _cmdbuf
 15389  00692E  6F6D               	movwf	?_stristr& (0+255),b
 15390  006930  0E7B               	movlw	high (STR_18+5)
 15391  006932  6F70               	movwf	(?_stristr+3)& (0+255),b
 15392  006934  0EF8               	movlw	low (STR_18+5)
 15393  006936  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15394  006938  EC86  F00C         	call	_stristr	;wreg free
 15395  00693C  516E               	movf	(?_stristr+1)& (0+255),w,b
 15396  00693E  116D               	iorwf	?_stristr& (0+255),w,b
 15397  006940  E009               	bz	l14910
 15398                           
 15399                           ; BSR set to: 0
 15400                           ;main.c: 1226: bLocalEcho = 1;
 15401  006942  0E01               	movlw	1
 15402  006944  6E2E               	movwf	_bLocalEcho,c
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;main.c: 1227: putsUSART((char *) "+OK - Local echo on\r\n");
 15406  006946  0E79               	movlw	high STR_154
 15407  006948  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15408  00694A  0EAF               	movlw	low STR_154
 15409  00694C  6F61               	movwf	?_putsUSART& (0+255),b
 15410  00694E  EC8D  F00A         	call	_putsUSART	;wreg free
 15411                           
 15412                           ;main.c: 1228: }
 15413  006952  D062               	goto	l14934
 15414  006954                     l14910:
 15415                           
 15416                           ; BSR set to: 0
 15417                           ;main.c: 1229: else if (0 != stristr(cmdbuf, "OFF")) {
 15418  006954  0E01               	movlw	high _cmdbuf
 15419  006956  0100               	movlb	0	; () banked
 15420  006958  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15421  00695A  0E2D               	movlw	low _cmdbuf
 15422  00695C  6F6D               	movwf	?_stristr& (0+255),b
 15423  00695E  0E7C               	movlw	high STR_155
 15424  006960  6F70               	movwf	(?_stristr+3)& (0+255),b
 15425  006962  0ED2               	movlw	low STR_155
 15426  006964  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15427  006966  EC86  F00C         	call	_stristr	;wreg free
 15428  00696A  516E               	movf	(?_stristr+1)& (0+255),w,b
 15429  00696C  116D               	iorwf	?_stristr& (0+255),w,b
 15430  00696E  E008               	bz	l14916
 15431                           
 15432                           ; BSR set to: 0
 15433                           ;main.c: 1230: bLocalEcho = 0;
 15434  006970  6A2E               	clrf	_bLocalEcho,c
 15435                           
 15436                           ; BSR set to: 0
 15437                           ;main.c: 1231: putsUSART((char *) "+OK - Local echo off\r\n");
 15438  006972  0E79               	movlw	high STR_156
 15439  006974  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15440  006976  0E54               	movlw	low STR_156
 15441  006978  6F61               	movwf	?_putsUSART& (0+255),b
 15442  00697A  EC8D  F00A         	call	_putsUSART	;wreg free
 15443                           
 15444                           ;main.c: 1232: }
 15445  00697E  D04C               	goto	l14934
 15446  006980                     l14916:
 15447                           
 15448                           ; BSR set to: 0
 15449                           ;main.c: 1233: else {
 15450                           ;main.c: 1234: putsUSART((char *) "+ERROR - Wrong argument to 'set echo'.\r\n");
 15451  006980  0E73               	movlw	high STR_157
 15452  006982  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15453  006984  0EAE               	movlw	low STR_157
 15454  006986  6F61               	movwf	?_putsUSART& (0+255),b
 15455  006988  EC8D  F00A         	call	_putsUSART	;wreg free
 15456  00698C  D045               	goto	l14934
 15457  00698E                     l14918:
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;main.c: 1238: else if (cmdbuf == stristr(cmdbuf, "DEFAULTS")) {
 15461  00698E  0E01               	movlw	high _cmdbuf
 15462  006990  0100               	movlb	0	; () banked
 15463  006992  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15464  006994  0E2D               	movlw	low _cmdbuf
 15465  006996  6F6D               	movwf	?_stristr& (0+255),b
 15466  006998  0E7B               	movlw	high STR_158
 15467  00699A  6F70               	movwf	(?_stristr+3)& (0+255),b
 15468  00699C  0EAA               	movlw	low STR_158
 15469  00699E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15470  0069A0  EC86  F00C         	call	_stristr	;wreg free
 15471  0069A4  0E2D               	movlw	low _cmdbuf
 15472  0069A6  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15473  0069A8  0E01               	movlw	high _cmdbuf
 15474  0069AA  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15475  0069AC  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15476  0069AE  E102               	bnz	u19825
 15477  0069B0  516D               	movf	?_stristr& (0+255),w,b
 15478  0069B2  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15479  0069B4                     u19825:
 15480  0069B4  E103               	bnz	l14922
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;main.c: 1239: vscp_restoreDefaults();
 15484  0069B6  ECB6  F007         	call	_vscp_restoreDefaults	;wreg free
 15485                           
 15486                           ;main.c: 1240: }
 15487  0069BA  D02E               	goto	l14934
 15488  0069BC                     l14922:
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;main.c: 1242: else if (cmdbuf == stristr(cmdbuf, "?")) {
 15492  0069BC  0E01               	movlw	high _cmdbuf
 15493  0069BE  0100               	movlb	0	; () banked
 15494  0069C0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15495  0069C2  0E2D               	movlw	low _cmdbuf
 15496  0069C4  6F6D               	movwf	?_stristr& (0+255),b
 15497  0069C6  0E7C               	movlw	high STR_159
 15498  0069C8  6F70               	movwf	(?_stristr+3)& (0+255),b
 15499  0069CA  0EFD               	movlw	low STR_159
 15500  0069CC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15501  0069CE  EC86  F00C         	call	_stristr	;wreg free
 15502  0069D2  0E2D               	movlw	low _cmdbuf
 15503  0069D4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15504  0069D6  0E01               	movlw	high _cmdbuf
 15505  0069D8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15506  0069DA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15507  0069DC  E102               	bnz	u19835
 15508  0069DE  516D               	movf	?_stristr& (0+255),w,b
 15509  0069E0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15510  0069E2                     u19835:
 15511  0069E2  E01A               	bz	l14934
 15512                           
 15513                           ; BSR set to: 0
 15514                           ;main.c: 1245: else {
 15515                           ;main.c: 1246: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 15516  0069E4  0E76               	movlw	high STR_160
 15517  0069E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15518  0069E8  0EEC               	movlw	low STR_160
 15519  0069EA  6F61               	movwf	?_putsUSART& (0+255),b
 15520  0069EC  EC8D  F00A         	call	_putsUSART	;wreg free
 15521  0069F0  D013               	goto	l14934
 15522  0069F2                     l14928:
 15523                           
 15524                           ; BSR set to: 0
 15525                           ;main.c: 1250: else {
 15526                           ;main.c: 1251: if ( 0x0d == cmdbuf[ 0 ] ) {
 15527  0069F2  0101               	movlb	1	; () banked
 15528  0069F4  512D               	movf	_cmdbuf& (0+255),w,b
 15529  0069F6  0A0D               	xorlw	13
 15530  0069F8  E108               	bnz	l14932
 15531                           
 15532                           ; BSR set to: 1
 15533                           ;main.c: 1252: putsUSART((char *) "+OK\r\n");
 15534  0069FA  0E7C               	movlw	high STR_9
 15535  0069FC  0100               	movlb	0	; () banked
 15536  0069FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15537  006A00  0E65               	movlw	low STR_9
 15538  006A02  6F61               	movwf	?_putsUSART& (0+255),b
 15539  006A04  EC8D  F00A         	call	_putsUSART	;wreg free
 15540                           
 15541                           ;main.c: 1253: }
 15542  006A08  D007               	goto	l14934
 15543  006A0A                     l14932:
 15544                           
 15545                           ; BSR set to: 1
 15546                           ;main.c: 1254: else {
 15547                           ;main.c: 1255: putsUSART((char *) "-ERROR - Unknown command\r\n");
 15548  006A0A  0E77               	movlw	high STR_162
 15549  006A0C  0100               	movlb	0	; () banked
 15550  006A0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15551  006A10  0EFD               	movlw	low STR_162
 15552  006A12  6F61               	movwf	?_putsUSART& (0+255),b
 15553  006A14  EC8D  F00A         	call	_putsUSART	;wreg free
 15554  006A18                     l14934:
 15555                           
 15556                           ;main.c: 1256: }
 15557                           ;main.c: 1257: }
 15558                           ;main.c: 1259: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 15559  006A18  0E01               	movlw	high _cmdbuf
 15560  006A1A  0100               	movlb	0	; () banked
 15561  006A1C  6F61               	movwf	(?_memset+1)& (0+255),b
 15562  006A1E  0E2D               	movlw	low _cmdbuf
 15563  006A20  6F60               	movwf	?_memset& (0+255),b
 15564  006A22  6B63               	clrf	(?_memset+3)& (0+255),b
 15565  006A24  6B62               	clrf	(?_memset+2)& (0+255),b
 15566  006A26  6B65               	clrf	(?_memset+5)& (0+255),b
 15567  006A28  0E50               	movlw	80
 15568  006A2A  6F64               	movwf	(?_memset+4)& (0+255),b
 15569  006A2C  EC25  F008         	call	_memset	;wreg free
 15570                           
 15571                           ; BSR set to: 0
 15572                           ;main.c: 1260: pos = 0;
 15573  006A30  6A34               	clrf	_pos,c
 15574  006A32                     l14938:
 15575                           
 15576                           ;main.c: 1261: }
 15577                           ;main.c: 1262: }
 15578                           ;main.c: 1265: (INTCONbits.GIE = 1);
 15579  006A32  8EF2               	bsf	intcon,7,c	;volatile
 15580  006A34                     l559:
 15581  006A34  0012               	return	
 15582  006A36                     __end_of_doModeVerbose:
 15583                           	opt stack 0
 15584  006A36                     PL2:
 15585                           	opt stack 19
 15586  006A36  0E01               	movlw	high _cmdbuf
 15587  006A38  0100               	movlb	0	; () banked
 15588  006A3A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15589  006A3C  0E2D               	movlw	low _cmdbuf
 15590  006A3E  6F60               	movwf	?_strcpy& (0+255),b
 15591  006A40  0E32               	movlw	low (_cmdbuf+5)
 15592  006A42  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15593  006A44  0E01               	movlw	high (_cmdbuf+5)
 15594  006A46  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15595  006A48  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15596  006A4C  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15597  006A50  0012               	return	
 15598  006A52                     __end_ofPL2:
 15599                           	opt stack 0
 15600  006A52                     PL4:
 15601                           	opt stack 19
 15602  006A52  0100               	movlb	0	; () banked
 15603  006A54  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15604  006A56  0E2D               	movlw	low _cmdbuf
 15605  006A58  6F60               	movwf	?_strcpy& (0+255),b
 15606  006A5A  0E35               	movlw	low (_cmdbuf+8)
 15607  006A5C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15608  006A5E  0E01               	movlw	high (_cmdbuf+8)
 15609  006A60  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15610  006A62  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15611  006A66  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15612  006A6A  0012               	return	
 15613  006A6C                     __end_ofPL4:
 15614                           	opt stack 0
 15615  006A6C                     PL6:
 15616                           	opt stack 19
 15617  006A6C  0100               	movlb	0	; () banked
 15618  006A6E  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15619  006A70  6B6C               	clrf	?_strtok& (0+255),b
 15620  006A72  0E7C               	movlw	high STR_30
 15621  006A74  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15622  006A76  0EF5               	movlw	low STR_30
 15623  006A78  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15624  006A7A  0012               	return	
 15625  006A7C                     __end_ofPL6:
 15626                           	opt stack 0
 15627  006A7C                     PL8:
 15628                           	opt stack 19
 15629  006A7C  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15630  006A7E  6B6C               	clrf	?_strtok& (0+255),b
 15631  006A80  0E7C               	movlw	high STR_30
 15632  006A82  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15633  006A84  0EF5               	movlw	low STR_30
 15634  006A86  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15635  006A88  0012               	return	
 15636  006A8A                     __end_ofPL8:
 15637                           	opt stack 0
 15638  006A8A                     PL10:
 15639                           	opt stack 19
 15640  006A8A  6BD5               	clrf	(??_doModeVerbose+9)& (0+255),b
 15641  006A8C  6BD6               	clrf	(??_doModeVerbose+10)& (0+255),b
 15642  006A8E  6BD7               	clrf	(??_doModeVerbose+11)& (0+255),b
 15643  006A90  0E1A               	movlw	26
 15644  006A92                     u19525:
 15645  006A92  90D8               	bcf	status,0,c
 15646  006A94  37D4               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 15647  006A96  37D5               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 15648  006A98  37D6               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 15649  006A9A  37D7               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 15650  006A9C  2EE8               	decfsz	wreg,f,c
 15651  006A9E  D7F9               	goto	u19525
 15652  006AA0  51D0               	movf	(??_doModeVerbose+4)& (0+255),w,b
 15653  006AA2  11D4               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 15654  006AA4  6FD8               	movwf	(??_doModeVerbose+12)& (0+255),b
 15655  006AA6  51D1               	movf	(??_doModeVerbose+5)& (0+255),w,b
 15656  006AA8  11D5               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 15657  006AAA  6FD9               	movwf	(??_doModeVerbose+13)& (0+255),b
 15658  006AAC  51D2               	movf	(??_doModeVerbose+6)& (0+255),w,b
 15659  006AAE  11D6               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 15660  006AB0  6FDA               	movwf	(??_doModeVerbose+14)& (0+255),b
 15661  006AB2  51D3               	movf	(??_doModeVerbose+7)& (0+255),w,b
 15662  006AB4  11D7               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 15663  006AB6  6FDB               	movwf	(??_doModeVerbose+15)& (0+255),b
 15664  006AB8  51CC               	movf	??_doModeVerbose& (0+255),w,b
 15665  006ABA  11D8               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 15666  006ABC  6FDC               	movwf	(??_doModeVerbose+16)& (0+255),b
 15667  006ABE  51CD               	movf	(??_doModeVerbose+1)& (0+255),w,b
 15668  006AC0  11D9               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 15669  006AC2  6FDD               	movwf	(??_doModeVerbose+17)& (0+255),b
 15670  006AC4  51CE               	movf	(??_doModeVerbose+2)& (0+255),w,b
 15671  006AC6  11DA               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 15672  006AC8  6FDE               	movwf	(??_doModeVerbose+18)& (0+255),b
 15673  006ACA  51CF               	movf	(??_doModeVerbose+3)& (0+255),w,b
 15674  006ACC  11DB               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 15675  006ACE  6FDF               	movwf	(??_doModeVerbose+19)& (0+255),b
 15676  006AD0  0102               	movlb	2	; () banked
 15677  006AD2  0012               	return	
 15678  006AD4                     __end_ofPL10:
 15679                           	opt stack 0
 15680  006AD4                     PL24:
 15681                           	opt stack 19
 15682  006AD4  0100               	movlb	0	; () banked
 15683  006AD6  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15684  006AD8  6B6C               	clrf	?_strtok& (0+255),b
 15685  006ADA  0E7B               	movlw	high (STR_57+8)
 15686  006ADC  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15687  006ADE  0E6F               	movlw	low (STR_57+8)
 15688  006AE0  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15689  006AE2  0012               	return	
 15690  006AE4                     __end_ofPL24:
 15691                           	opt stack 0
 15692  006AE4                     PL30:
 15693                           	opt stack 19
 15694  006AE4  0E01               	movlw	high _cmdbuf
 15695  006AE6  0100               	movlb	0	; () banked
 15696  006AE8  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15697  006AEA  0E2D               	movlw	low _cmdbuf
 15698  006AEC  6F6C               	movwf	?_strtok& (0+255),b
 15699  006AEE  0E7C               	movlw	high STR_30
 15700  006AF0  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15701  006AF2  0EF5               	movlw	low STR_30
 15702  006AF4  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15703  006AF6  0012               	return	
 15704  006AF8                     __end_ofPL30:
 15705                           	opt stack 0
 15706  006AF8                     PL34:
 15707                           	opt stack 19
 15708  006AF8  0100               	movlb	0	; () banked
 15709  006AFA  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15710  006AFC  0E2D               	movlw	low _cmdbuf
 15711  006AFE  6F6C               	movwf	?_strtok& (0+255),b
 15712  006B00  0E7B               	movlw	high (STR_57+8)
 15713  006B02  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15714  006B04  0E6F               	movlw	low (STR_57+8)
 15715  006B06  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15716  006B08  0012               	return	
 15717  006B0A                     __end_ofPL34:
 15718                           	opt stack 0
 15719  006B0A                     PL38:
 15720                           	opt stack 19
 15721  006B0A  0100               	movlb	0	; () banked
 15722  006B0C  6BCD               	clrf	(??_doModeVerbose+1)& (0+255),b
 15723  006B0E  6BCE               	clrf	(??_doModeVerbose+2)& (0+255),b
 15724  006B10  6BCF               	clrf	(??_doModeVerbose+3)& (0+255),b
 15725  006B12  C0CE  F0CF         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 15726  006B16  C0CD  F0CE         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 15727  006B1A  C0CC  F0CD         	movff	??_doModeVerbose,??_doModeVerbose+1
 15728  006B1E  6BCC               	clrf	??_doModeVerbose& (0+255),b
 15729  006B20  0102               	movlb	2	; () banked
 15730  006B22  0012               	return	
 15731  006B24                     __end_ofPL38:
 15732                           	opt stack 0
 15733  006B24                     PL40:
 15734                           	opt stack 19
 15735  006B24  0102               	movlb	2	; () banked
 15736  006B26  51B7               	movf	doModeVerbose@i_1183& (0+255),w,b
 15737  006B28  C2B5  F0CC         	movff	doModeVerbose@reg,??_doModeVerbose
 15738  006B2C  0100               	movlb	0	; () banked
 15739  006B2E  6BCD               	clrf	(??_doModeVerbose+1)& (0+255),b
 15740  006B30  27CC               	addwf	??_doModeVerbose& (0+255),f,b
 15741  006B32  0E00               	movlw	0
 15742  006B34  23CD               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 15743  006B36  51CC               	movf	??_doModeVerbose& (0+255),w,b
 15744  006B38  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 15745  006B3A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 15746  006B3C  0012               	return	
 15747  006B3E                     __end_ofPL40:
 15748                           	opt stack 0
 15749  006B3E                     PL50:
 15750                           	opt stack 19
 15751  006B3E  6F62               	movwf	?__CANIDToRegs& (0+255),b
 15752  006B40  C2A9  F064         	movff	doModeVerbose@id_1311,?__CANIDToRegs+2
 15753  006B44  C2AA  F065         	movff	doModeVerbose@id_1311+1,?__CANIDToRegs+3
 15754  006B48  C2AB  F066         	movff	doModeVerbose@id_1311+2,?__CANIDToRegs+4
 15755  006B4C  C2AC  F067         	movff	doModeVerbose@id_1311+3,?__CANIDToRegs+5
 15756  006B50  0E01               	movlw	1
 15757  006B52  6F68               	movwf	(?__CANIDToRegs+6)& (0+255),b
 15758  006B54  0C01               	retlw	1
 15759  006B56                     __end_ofPL50:
 15760                           	opt stack 0
 15761  006B56                     PL62:
 15762                           	opt stack 19
 15763  006B56  0100               	movlb	0	; () banked
 15764  006B58  6FD1               	movwf	(??_doModeVerbose+5)& (0+255),b
 15765  006B5A  6BD2               	clrf	(??_doModeVerbose+6)& (0+255),b
 15766  006B5C  6BD3               	clrf	(??_doModeVerbose+7)& (0+255),b
 15767  006B5E  C0D1  F0D3         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 15768  006B62  C0D0  F0D2         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 15769  006B66  6BD1               	clrf	(??_doModeVerbose+5)& (0+255),b
 15770  006B68  6BD0               	clrf	(??_doModeVerbose+4)& (0+255),b
 15771  006B6A  0012               	return	
 15772  006B6C                     __end_ofPL62:
 15773                           	opt stack 0
 15774  006B6C                     PL72:
 15775                           	opt stack 19
 15776  006B6C  0E01               	movlw	high _cmdbuf
 15777  006B6E  0100               	movlb	0	; () banked
 15778  006B70  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15779  006B72  0E2D               	movlw	low _cmdbuf
 15780  006B74  6F6D               	movwf	?_stristr& (0+255),b
 15781  006B76  0E7C               	movlw	high STR_8
 15782  006B78  6F70               	movwf	(?_stristr+3)& (0+255),b
 15783  006B7A  0EA8               	movlw	low STR_8
 15784  006B7C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15785  006B7E  0012               	return	
 15786  006B80                     __end_ofPL72:
 15787                           	opt stack 0
 15788  006B80                     PL78:
 15789                           	opt stack 19
 15790  006B80  0100               	movlb	0	; () banked
 15791  006B82  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15792  006B84  0E2D               	movlw	low _cmdbuf
 15793  006B86  6F6D               	movwf	?_stristr& (0+255),b
 15794  006B88  0E7C               	movlw	high STR_10
 15795  006B8A  6F70               	movwf	(?_stristr+3)& (0+255),b
 15796  006B8C  0E43               	movlw	low STR_10
 15797  006B8E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15798  006B90  0012               	return	
 15799  006B92                     __end_ofPL78:
 15800                           	opt stack 0
 15801  006B92                     PL90:
 15802                           	opt stack 19
 15803  006B92  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15804  006B94  0E2D               	movlw	low _cmdbuf
 15805  006B96  6F6D               	movwf	?_stristr& (0+255),b
 15806  006B98  0E7C               	movlw	high STR_12
 15807  006B9A  6F70               	movwf	(?_stristr+3)& (0+255),b
 15808  006B9C  0E83               	movlw	low STR_12
 15809  006B9E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15810  006BA0  0012               	return	
 15811  006BA2                     __end_ofPL90:
 15812                           	opt stack 0
 15813  006BA2                     PL98:
 15814                           	opt stack 19
 15815  006BA2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15816  006BA4  0E2D               	movlw	low _cmdbuf
 15817  006BA6  6F6D               	movwf	?_stristr& (0+255),b
 15818  006BA8  0E7C               	movlw	high STR_16
 15819  006BAA  6F70               	movwf	(?_stristr+3)& (0+255),b
 15820  006BAC  0E35               	movlw	low STR_16
 15821  006BAE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15822  006BB0  0012               	return	
 15823  006BB2                     __end_ofPL98:
 15824                           	opt stack 0
 15825  006BB2                     PL102:
 15826                           	opt stack 19
 15827  006BB2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15828  006BB4  0E2D               	movlw	low _cmdbuf
 15829  006BB6  6F6D               	movwf	?_stristr& (0+255),b
 15830  006BB8  0E7B               	movlw	high STR_14
 15831  006BBA  6F70               	movwf	(?_stristr+3)& (0+255),b
 15832  006BBC  0EA1               	movlw	low STR_14
 15833  006BBE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15834  006BC0  0012               	return	
 15835  006BC2                     __end_ofPL102:
 15836                           	opt stack 0
 15837                           tblptru	equ	0xFF8
 15838                           tblptrh	equ	0xFF7
 15839                           tblptrl	equ	0xFF6
 15840                           tablat	equ	0xFF5
 15841                           prodh	equ	0xFF4
 15842                           prodl	equ	0xFF3
 15843                           intcon	equ	0xFF2
 15844                           indf0	equ	0xFEF
 15845                           postinc0	equ	0xFEE
 15846                           fsr0h	equ	0xFEA
 15847                           fsr0l	equ	0xFE9
 15848                           wreg	equ	0xFE8
 15849                           indf1	equ	0xFE7
 15850                           postinc1	equ	0xFE6
 15851                           postdec1	equ	0xFE5
 15852                           fsr1h	equ	0xFE2
 15853                           fsr1l	equ	0xFE1
 15854                           indf2	equ	0xFDF
 15855                           postinc2	equ	0xFDE
 15856                           postdec2	equ	0xFDD
 15857                           plusw2	equ	0xFDB
 15858                           fsr2h	equ	0xFDA
 15859                           fsr2l	equ	0xFD9
 15860                           status	equ	0xFD8
 15861                           
 15862 ;; *************** function _writeRegisterExtended *****************
 15863 ;; Defined at:
 15864 ;;		line 2556 in file "main.c"
 15865 ;; Parameters:    Size  Location     Type
 15866 ;;  nodeid          1    wreg     unsigned char 
 15867 ;;  page            2   88[BANK0 ] unsigned short 
 15868 ;;  reg             1   90[BANK0 ] unsigned char 
 15869 ;;  timeout         2   91[BANK0 ] unsigned short 
 15870 ;;  value           2   93[BANK0 ] PTR unsigned char 
 15871 ;;		 -> doModeVerbose@value_1241(1), 
 15872 ;; Auto vars:     Size  Location     Type
 15873 ;;  nodeid          1   99[BANK0 ] unsigned char 
 15874 ;; Return value:  Size  Location     Type
 15875 ;;                  1    wreg      enum E15660
 15876 ;; Registers used:
 15877 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15878 ;; Tracked objects:
 15879 ;;		On entry : F/2
 15880 ;;		On exit  : E/0
 15881 ;;		Unchanged: 0/0
 15882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15883 ;;      Params:         0       7       0       0       0       0       0
 15884 ;;      Locals:         0       1       0       0       0       0       0
 15885 ;;      Temps:          0       4       0       0       0       0       0
 15886 ;;      Totals:         0      12       0       0       0       0       0
 15887 ;;Total ram usage:       12 bytes
 15888 ;; Hardware stack levels used:    1
 15889 ;; Hardware stack levels required when called:    7
 15890 ;; This function calls:
 15891 ;;		_sendVSCPFrame
 15892 ;;		_getVSCPFrame
 15893 ;; This function is called by:
 15894 ;;		_doModeVerbose
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           	psect	text23
 15899  002980                     __ptext23:
 15900                           	opt stack 0
 15901  002980                     _writeRegisterExtended:
 15902                           	opt stack 21
 15903                           
 15904                           ;incstack = 0
 15905                           ;incstack = 0
 15906                           ;writeRegisterExtended@nodeid stored from wreg
 15907  002980  CFE8 F0C3          	movff	wreg,writeRegisterExtended@nodeid
 15908                           
 15909                           ; BSR set to: 2
 15910                           ;main.c: 2557: vscpData[ 0 ] = nodeid;
 15911  002984  C0C3  F1E5         	movff	writeRegisterExtended@nodeid,_vscpData
 15912                           
 15913                           ; BSR set to: 2
 15914                           ;main.c: 2558: vscpData[ 1 ] = page >> 8;
 15915  002988  0100               	movlb	0	; () banked
 15916  00298A  51B9               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15917  00298C  0101               	movlb	1	; () banked
 15918  00298E  6FE6               	movwf	(_vscpData+1)& (0+255),b
 15919                           
 15920                           ; BSR set to: 1
 15921                           ;main.c: 2559: vscpData[ 2 ] = page & 0xff;
 15922  002990  C0B8  F1E7         	movff	writeRegisterExtended@page,_vscpData+2
 15923                           
 15924                           ; BSR set to: 1
 15925                           ;main.c: 2560: vscpData[ 3 ] = reg;
 15926  002994  C0BA  F1E8         	movff	writeRegisterExtended@reg,_vscpData+3
 15927                           
 15928                           ; BSR set to: 1
 15929                           ;main.c: 2561: vscpData[ 4 ] = *value;
 15930  002998  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15931  00299C  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15932  0029A0  50DF               	movf	indf2,w,c
 15933  0029A2  6FE9               	movwf	(_vscpData+4)& (0+255),b
 15934                           
 15935                           ; BSR set to: 1
 15936                           ;main.c: 2563: if (sendVSCPFrame(0,
 15937                           ;main.c: 2564: 38,
 15938                           ;main.c: 2565: 0,
 15939                           ;main.c: 2566: 0,
 15940                           ;main.c: 2567: 5,
 15941                           ;main.c: 2568: vscpData)) {
 15942  0029A4  0100               	movlb	0	; () banked
 15943  0029A6  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15944  0029A8  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 15945  0029AA  0E26               	movlw	38
 15946  0029AC  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15947  0029AE  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15948  0029B0  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15949  0029B2  0E05               	movlw	5
 15950  0029B4  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15951  0029B6  0E01               	movlw	high _vscpData
 15952  0029B8  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15953  0029BA  0EE5               	movlw	low _vscpData
 15954  0029BC  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15955  0029BE  EC47  F010         	call	_sendVSCPFrame	;wreg free
 15956  0029C2  0900               	iorlw	0
 15957  0029C4  E059               	bz	l16346
 15958                           
 15959                           ;main.c: 2570: timekeeper = 0;
 15960  0029C6  0101               	movlb	1	; () banked
 15961  0029C8  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 15962  0029CA  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15963  0029CC  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15964  0029CE  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15965                           
 15966                           ;main.c: 2571: while (timekeeper < timeout) {
 15967  0029D0  D03C               	goto	l16344
 15968  0029D2                     l1165:
 15969                           
 15970                           ; BSR set to: 1
 15971  0029D2  0004               	clrwdt		;# 
 15972                           
 15973                           ;main.c: 2575: if (getVSCPFrame(&vscpClass,
 15974                           ;main.c: 2576: &vscpType,
 15975                           ;main.c: 2577: &vscpNodeId,
 15976                           ;main.c: 2578: &vscpPriority,
 15977                           ;main.c: 2579: &vscpSize,
 15978                           ;main.c: 2580: vscpData)) {
 15979  0029D4  0E3F               	movlw	low _vscpType
 15980  0029D6  0100               	movlb	0	; () banked
 15981  0029D8  6F73               	movwf	?_getVSCPFrame& (0+255),b
 15982  0029DA  0E3C               	movlw	low _vscpNodeId
 15983  0029DC  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15984  0029DE  0E3D               	movlw	low _vscpPriority
 15985  0029E0  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15986  0029E2  0E3E               	movlw	low _vscpSize
 15987  0029E4  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15988  0029E6  0E01               	movlw	high _vscpData
 15989  0029E8  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15990  0029EA  0EE5               	movlw	low _vscpData
 15991  0029EC  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15992  0029EE  0E38               	movlw	_vscpClass& (0+255)
 15993  0029F0  EC42  F00D         	call	_getVSCPFrame
 15994  0029F4  0900               	iorlw	0
 15995  0029F6  E029               	bz	l16344
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;main.c: 2582: if ((nodeid == vscpNodeId) &&
 15999                           ;main.c: 2583: (5 == vscpSize) &&
 16000                           ;main.c: 2584: (0 == vscpData[ 0 ]) &&
 16001                           ;main.c: 2585: ((page >> 8) == vscpData[ 1 ]) &&
 16002                           ;main.c: 2586: ((page & 0xff) == vscpData[ 2 ]) &&
 16003                           ;main.c: 2587: (reg == vscpData[ 3 ]) &&
 16004                           ;main.c: 2588: (*value == vscpData[ 4 ])) {
 16005  0029F8  503C               	movf	_vscpNodeId,w,c
 16006  0029FA  63C3               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 16007  0029FC  D026               	goto	l16344
 16008                           
 16009                           ; BSR set to: 0
 16010  0029FE  503E               	movf	_vscpSize,w,c
 16011  002A00  0A05               	xorlw	5
 16012  002A02  E123               	bnz	l16344
 16013                           
 16014                           ; BSR set to: 0
 16015  002A04  0101               	movlb	1	; () banked
 16016  002A06  67E5               	tstfsz	_vscpData& (0+255),b
 16017  002A08  D020               	goto	l16344
 16018                           
 16019                           ; BSR set to: 1
 16020  002A0A  0100               	movlb	0	; () banked
 16021  002A0C  51B9               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 16022  002A0E  0101               	movlb	1	; () banked
 16023  002A10  19E6               	xorwf	(_vscpData+1)& (0+255),w,b
 16024  002A12  E11B               	bnz	l16344
 16025                           
 16026                           ; BSR set to: 1
 16027  002A14  0100               	movlb	0	; () banked
 16028  002A16  51B8               	movf	writeRegisterExtended@page& (0+255),w,b
 16029  002A18  EE21  F0E7         	lfsr	2,_vscpData+2
 16030  002A1C  62DF               	cpfseq	indf2,c
 16031  002A1E  D015               	goto	l16344
 16032                           
 16033                           ; BSR set to: 1
 16034  002A20  51BA               	movf	writeRegisterExtended@reg& (0+255),w,b
 16035  002A22  0101               	movlb	1	; () banked
 16036  002A24  EE21  F0E8         	lfsr	2,_vscpData+3
 16037  002A28  62DF               	cpfseq	indf2,c
 16038  002A2A  D00F               	goto	l16344
 16039                           
 16040                           ; BSR set to: 1
 16041  002A2C  51E9               	movf	(_vscpData+4)& (0+255),w,b
 16042  002A2E  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16043  002A32  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16044  002A36  62DF               	cpfseq	indf2,c
 16045  002A38  D008               	goto	l16344
 16046                           
 16047                           ; BSR set to: 1
 16048                           ;main.c: 2589: *value = vscpData[ 1 ];
 16049  002A3A  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16050  002A3E  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16051  002A42  C1E6  FFDF         	movff	_vscpData+1,indf2
 16052                           
 16053                           ; BSR set to: 1
 16054                           ;main.c: 2590: return 1;
 16055  002A46  0E01               	movlw	1
 16056  002A48  D018               	goto	l1168
 16057  002A4A                     l16344:
 16058  002A4A  0100               	movlb	0	; () banked
 16059  002A4C  51BB               	movf	writeRegisterExtended@timeout& (0+255),w,b
 16060  002A4E  6FBF               	movwf	??_writeRegisterExtended& (0+255),b
 16061  002A50  51BC               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 16062  002A52  6FC0               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 16063  002A54  6BC1               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 16064  002A56  6BC2               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 16065  002A58  51BF               	movf	??_writeRegisterExtended& (0+255),w,b
 16066  002A5A  0101               	movlb	1	; () banked
 16067  002A5C  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 16068  002A5E  0100               	movlb	0	; () banked
 16069  002A60  51C0               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 16070  002A62  0101               	movlb	1	; () banked
 16071  002A64  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16072  002A66  0100               	movlb	0	; () banked
 16073  002A68  51C1               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 16074  002A6A  0101               	movlb	1	; () banked
 16075  002A6C  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16076  002A6E  0100               	movlb	0	; () banked
 16077  002A70  51C2               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 16078  002A72  0101               	movlb	1	; () banked
 16079  002A74  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16080  002A76  E3AD               	bnc	l1165
 16081  002A78                     l16346:
 16082                           
 16083                           ;main.c: 2591: }
 16084                           ;main.c: 2593: }
 16085                           ;main.c: 2595: }
 16086                           ;main.c: 2597: }
 16087                           ;main.c: 2599: return 0;
 16088  002A78  0E00               	movlw	0
 16089  002A7A                     l1168:
 16090  002A7A  0012               	return	
 16091  002A7C                     __end_of_writeRegisterExtended:
 16092                           	opt stack 0
 16093                           tblptru	equ	0xFF8
 16094                           tblptrh	equ	0xFF7
 16095                           tblptrl	equ	0xFF6
 16096                           tablat	equ	0xFF5
 16097                           prodh	equ	0xFF4
 16098                           prodl	equ	0xFF3
 16099                           intcon	equ	0xFF2
 16100                           indf0	equ	0xFEF
 16101                           postinc0	equ	0xFEE
 16102                           fsr0h	equ	0xFEA
 16103                           fsr0l	equ	0xFE9
 16104                           wreg	equ	0xFE8
 16105                           indf1	equ	0xFE7
 16106                           postinc1	equ	0xFE6
 16107                           postdec1	equ	0xFE5
 16108                           fsr1h	equ	0xFE2
 16109                           fsr1l	equ	0xFE1
 16110                           indf2	equ	0xFDF
 16111                           postinc2	equ	0xFDE
 16112                           postdec2	equ	0xFDD
 16113                           plusw2	equ	0xFDB
 16114                           fsr2h	equ	0xFDA
 16115                           fsr2l	equ	0xFD9
 16116                           status	equ	0xFD8
 16117                           
 16118 ;; *************** function _printBinary *****************
 16119 ;; Defined at:
 16120 ;;		line 2643 in file "main.c"
 16121 ;; Parameters:    Size  Location     Type
 16122 ;;  value           1    wreg     unsigned char 
 16123 ;; Auto vars:     Size  Location     Type
 16124 ;;  value           1    3[BANK0 ] unsigned char 
 16125 ;;  i               2    4[BANK0 ] int 
 16126 ;; Return value:  Size  Location     Type
 16127 ;;		None               void
 16128 ;; Registers used:
 16129 ;;		wreg, status,2, status,0, cstack
 16130 ;; Tracked objects:
 16131 ;;		On entry : F/2
 16132 ;;		On exit  : F/0
 16133 ;;		Unchanged: 0/0
 16134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16135 ;;      Params:         0       0       0       0       0       0       0
 16136 ;;      Locals:         0       3       0       0       0       0       0
 16137 ;;      Temps:          0       2       0       0       0       0       0
 16138 ;;      Totals:         0       5       0       0       0       0       0
 16139 ;;Total ram usage:        5 bytes
 16140 ;; Hardware stack levels used:    1
 16141 ;; Hardware stack levels required when called:    4
 16142 ;; This function calls:
 16143 ;;		_WriteUSART
 16144 ;; This function is called by:
 16145 ;;		_doModeVerbose
 16146 ;; This function uses a non-reentrant model
 16147 ;;
 16148                           
 16149                           	psect	text24
 16150  00147A                     __ptext24:
 16151                           	opt stack 0
 16152  00147A                     _printBinary:
 16153                           	opt stack 24
 16154                           
 16155                           ;incstack = 0
 16156                           ;incstack = 0
 16157                           ;printBinary@value stored from wreg
 16158  00147A  CFE8 F063          	movff	wreg,printBinary@value
 16159                           
 16160                           ; BSR set to: 2
 16161                           ;main.c: 2644: int i;
 16162                           ;main.c: 2646: for (i = 7; i >= 0; i--) {
 16163  00147E  0100               	movlb	0	; () banked
 16164  001480  6B65               	clrf	(printBinary@i+1)& (0+255),b
 16165  001482  0E07               	movlw	7
 16166  001484  6F64               	movwf	printBinary@i& (0+255),b
 16167  001486                     l16296:
 16168                           
 16169                           ; BSR set to: 0
 16170                           ;main.c: 2647: if (value & (1 << i)) {
 16171  001486  C064  F061         	movff	printBinary@i,??_printBinary
 16172  00148A  0E01               	movlw	1
 16173  00148C  6F62               	movwf	(??_printBinary+1)& (0+255),b
 16174  00148E  2B61               	incf	??_printBinary& (0+255),f,b
 16175  001490  D002               	goto	u21954
 16176  001492                     u21955:
 16177  001492  90D8               	bcf	status,0,c
 16178  001494  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 16179  001496                     u21954:
 16180  001496  2F61               	decfsz	??_printBinary& (0+255),f,b
 16181  001498  D7FC               	goto	u21955
 16182  00149A  5162               	movf	(??_printBinary+1)& (0+255),w,b
 16183  00149C  1563               	andwf	printBinary@value& (0+255),w,b
 16184  00149E  E006               	bz	l1188
 16185  0014A0                     l1184:
 16186  0014A0  A2AC               	btfss	4012,1,c	;volatile
 16187  0014A2  D7FE               	goto	l1184
 16188                           
 16189                           ;main.c: 2649: WriteUSART('1');
 16190  0014A4  0E31               	movlw	49
 16191  0014A6  ECD5  F007         	call	_WriteUSART
 16192                           
 16193                           ;main.c: 2650: } else {
 16194  0014AA  D005               	goto	l16304
 16195  0014AC                     l1188:
 16196  0014AC  A2AC               	btfss	4012,1,c	;volatile
 16197  0014AE  D7FE               	goto	l1188
 16198                           
 16199                           ;main.c: 2652: WriteUSART('0');
 16200  0014B0  0E30               	movlw	48
 16201  0014B2  ECD5  F007         	call	_WriteUSART
 16202  0014B6                     l16304:
 16203  0014B6  0100               	movlb	0	; () banked
 16204  0014B8  0764               	decf	printBinary@i& (0+255),f,b
 16205  0014BA  A0D8               	btfss	status,0,c
 16206  0014BC  0765               	decf	(printBinary@i+1)& (0+255),f,b
 16207                           
 16208                           ; BSR set to: 0
 16209  0014BE  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 16210                           
 16211                           ; BSR set to: 0
 16212  0014C0  0012               	return	
 16213  0014C2  D7E1               	goto	l16296
 16214  0014C4                     __end_of_printBinary:
 16215                           	opt stack 0
 16216                           tblptru	equ	0xFF8
 16217                           tblptrh	equ	0xFF7
 16218                           tblptrl	equ	0xFF6
 16219                           tablat	equ	0xFF5
 16220                           prodh	equ	0xFF4
 16221                           prodl	equ	0xFF3
 16222                           intcon	equ	0xFF2
 16223                           indf0	equ	0xFEF
 16224                           postinc0	equ	0xFEE
 16225                           fsr0h	equ	0xFEA
 16226                           fsr0l	equ	0xFE9
 16227                           wreg	equ	0xFE8
 16228                           indf1	equ	0xFE7
 16229                           postinc1	equ	0xFE6
 16230                           postdec1	equ	0xFE5
 16231                           fsr1h	equ	0xFE2
 16232                           fsr1l	equ	0xFE1
 16233                           indf2	equ	0xFDF
 16234                           postinc2	equ	0xFDE
 16235                           postdec2	equ	0xFDD
 16236                           plusw2	equ	0xFDB
 16237                           fsr2h	equ	0xFDA
 16238                           fsr2l	equ	0xFD9
 16239                           status	equ	0xFD8
 16240                           
 16241 ;; *************** function _readRegisterExtended *****************
 16242 ;; Defined at:
 16243 ;;		line 2455 in file "main.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;  nodeid          1    wreg     unsigned char 
 16246 ;;  page            2   88[BANK0 ] unsigned short 
 16247 ;;  reg             1   90[BANK0 ] unsigned char 
 16248 ;;  timeout         2   91[BANK0 ] unsigned short 
 16249 ;;  value           2   93[BANK0 ] PTR unsigned char 
 16250 ;;		 -> doModeVerbose@value(1), 
 16251 ;; Auto vars:     Size  Location     Type
 16252 ;;  nodeid          1   99[BANK0 ] unsigned char 
 16253 ;; Return value:  Size  Location     Type
 16254 ;;                  1    wreg      enum E15660
 16255 ;; Registers used:
 16256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16257 ;; Tracked objects:
 16258 ;;		On entry : F/2
 16259 ;;		On exit  : E/0
 16260 ;;		Unchanged: 0/0
 16261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16262 ;;      Params:         0       7       0       0       0       0       0
 16263 ;;      Locals:         0       1       0       0       0       0       0
 16264 ;;      Temps:          0       4       0       0       0       0       0
 16265 ;;      Totals:         0      12       0       0       0       0       0
 16266 ;;Total ram usage:       12 bytes
 16267 ;; Hardware stack levels used:    1
 16268 ;; Hardware stack levels required when called:    7
 16269 ;; This function calls:
 16270 ;;		_sendVSCPFrame
 16271 ;;		_getVSCPFrame
 16272 ;; This function is called by:
 16273 ;;		_doModeVerbose
 16274 ;; This function uses a non-reentrant model
 16275 ;;
 16276                           
 16277                           	psect	text25
 16278  00288E                     __ptext25:
 16279                           	opt stack 0
 16280  00288E                     _readRegisterExtended:
 16281                           	opt stack 21
 16282                           
 16283                           ; BSR set to: 0
 16284                           ;incstack = 0
 16285                           ;incstack = 0
 16286                           ;readRegisterExtended@nodeid stored from wreg
 16287  00288E  CFE8 F0C3          	movff	wreg,readRegisterExtended@nodeid
 16288                           
 16289                           ; BSR set to: 2
 16290                           ;main.c: 2456: vscpData[ 0 ] = nodeid;
 16291  002892  C0C3  F1E5         	movff	readRegisterExtended@nodeid,_vscpData
 16292                           
 16293                           ; BSR set to: 2
 16294                           ;main.c: 2457: vscpData[ 1 ] = page >> 8;
 16295  002896  0100               	movlb	0	; () banked
 16296  002898  51B9               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16297  00289A  0101               	movlb	1	; () banked
 16298  00289C  6FE6               	movwf	(_vscpData+1)& (0+255),b
 16299                           
 16300                           ; BSR set to: 1
 16301                           ;main.c: 2458: vscpData[ 2 ] = page & 0xff;
 16302  00289E  C0B8  F1E7         	movff	readRegisterExtended@page,_vscpData+2
 16303                           
 16304                           ; BSR set to: 1
 16305                           ;main.c: 2459: vscpData[ 3 ] = reg;
 16306  0028A2  C0BA  F1E8         	movff	readRegisterExtended@reg,_vscpData+3
 16307                           
 16308                           ; BSR set to: 1
 16309                           ;main.c: 2460: vscpData[ 4 ] = 1;
 16310  0028A6  0E01               	movlw	1
 16311  0028A8  6FE9               	movwf	(_vscpData+4)& (0+255),b
 16312                           
 16313                           ; BSR set to: 1
 16314                           ;main.c: 2462: if (sendVSCPFrame(0,
 16315                           ;main.c: 2463: 37,
 16316                           ;main.c: 2464: 0,
 16317                           ;main.c: 2465: 0,
 16318                           ;main.c: 2466: 5,
 16319                           ;main.c: 2467: vscpData)) {
 16320  0028AA  0100               	movlb	0	; () banked
 16321  0028AC  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16322  0028AE  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 16323  0028B0  0E25               	movlw	37
 16324  0028B2  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16325  0028B4  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16326  0028B6  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16327  0028B8  0E05               	movlw	5
 16328  0028BA  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16329  0028BC  0E01               	movlw	high _vscpData
 16330  0028BE  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16331  0028C0  0EE5               	movlw	low _vscpData
 16332  0028C2  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16333  0028C4  EC47  F010         	call	_sendVSCPFrame	;wreg free
 16334  0028C8  0900               	iorlw	0
 16335  0028CA  E058               	bz	l15944
 16336                           
 16337                           ;main.c: 2469: timekeeper = 0;
 16338  0028CC  0101               	movlb	1	; () banked
 16339  0028CE  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 16340  0028D0  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16341  0028D2  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16342  0028D4  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16343                           
 16344                           ;main.c: 2470: while (timekeeper < timeout) {
 16345  0028D6  D03B               	goto	l15942
 16346  0028D8                     l1147:
 16347                           
 16348                           ; BSR set to: 1
 16349  0028D8  0004               	clrwdt		;# 
 16350                           
 16351                           ;main.c: 2474: if (getVSCPFrame(&vscpClass,
 16352                           ;main.c: 2475: &vscpType,
 16353                           ;main.c: 2476: &vscpNodeId,
 16354                           ;main.c: 2477: &vscpPriority,
 16355                           ;main.c: 2478: &vscpSize,
 16356                           ;main.c: 2479: vscpData)) {
 16357  0028DA  0E3F               	movlw	low _vscpType
 16358  0028DC  0100               	movlb	0	; () banked
 16359  0028DE  6F73               	movwf	?_getVSCPFrame& (0+255),b
 16360  0028E0  0E3C               	movlw	low _vscpNodeId
 16361  0028E2  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16362  0028E4  0E3D               	movlw	low _vscpPriority
 16363  0028E6  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16364  0028E8  0E3E               	movlw	low _vscpSize
 16365  0028EA  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16366  0028EC  0E01               	movlw	high _vscpData
 16367  0028EE  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16368  0028F0  0EE5               	movlw	low _vscpData
 16369  0028F2  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16370  0028F4  0E38               	movlw	_vscpClass& (0+255)
 16371  0028F6  EC42  F00D         	call	_getVSCPFrame
 16372  0028FA  0900               	iorlw	0
 16373  0028FC  E028               	bz	l15942
 16374                           
 16375                           ; BSR set to: 0
 16376                           ;main.c: 2480: if ((nodeid == vscpNodeId) &&
 16377                           ;main.c: 2481: (0 == vscpClass) &&
 16378                           ;main.c: 2482: (39 == vscpType) &&
 16379                           ;main.c: 2483: (5 == vscpSize) &&
 16380                           ;main.c: 2484: (0 == vscpData[ 0 ]) &&
 16381                           ;main.c: 2485: ((page >> 8) == vscpData[ 1 ]) &&
 16382                           ;main.c: 2486: ((page & 0xff) == vscpData[ 2 ]) &&
 16383                           ;main.c: 2487: (reg == vscpData[ 3 ])) {
 16384  0028FE  503C               	movf	_vscpNodeId,w,c
 16385  002900  63C3               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 16386  002902  D025               	goto	l15942
 16387                           
 16388                           ; BSR set to: 0
 16389  002904  5039               	movf	_vscpClass+1,w,c
 16390  002906  1038               	iorwf	_vscpClass,w,c
 16391  002908  E122               	bnz	l15942
 16392                           
 16393                           ; BSR set to: 0
 16394  00290A  503F               	movf	_vscpType,w,c
 16395  00290C  0A27               	xorlw	39
 16396  00290E  E11F               	bnz	l15942
 16397                           
 16398                           ; BSR set to: 0
 16399  002910  503E               	movf	_vscpSize,w,c
 16400  002912  0A05               	xorlw	5
 16401  002914  E11C               	bnz	l15942
 16402                           
 16403                           ; BSR set to: 0
 16404  002916  0101               	movlb	1	; () banked
 16405  002918  67E5               	tstfsz	_vscpData& (0+255),b
 16406  00291A  D019               	goto	l15942
 16407                           
 16408                           ; BSR set to: 1
 16409  00291C  0100               	movlb	0	; () banked
 16410  00291E  51B9               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16411  002920  0101               	movlb	1	; () banked
 16412  002922  19E6               	xorwf	(_vscpData+1)& (0+255),w,b
 16413  002924  E114               	bnz	l15942
 16414                           
 16415                           ; BSR set to: 1
 16416  002926  0100               	movlb	0	; () banked
 16417  002928  51B8               	movf	readRegisterExtended@page& (0+255),w,b
 16418  00292A  EE21  F0E7         	lfsr	2,_vscpData+2
 16419  00292E  62DF               	cpfseq	indf2,c
 16420  002930  D00E               	goto	l15942
 16421                           
 16422                           ; BSR set to: 1
 16423  002932  51BA               	movf	readRegisterExtended@reg& (0+255),w,b
 16424  002934  0101               	movlb	1	; () banked
 16425  002936  EE21  F0E8         	lfsr	2,_vscpData+3
 16426  00293A  62DF               	cpfseq	indf2,c
 16427  00293C  D008               	goto	l15942
 16428                           
 16429                           ; BSR set to: 1
 16430                           ;main.c: 2488: *value = vscpData[ 4 ];
 16431  00293E  C0BD  FFD9         	movff	readRegisterExtended@value,fsr2l
 16432  002942  C0BE  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 16433  002946  C1E9  FFDF         	movff	_vscpData+4,indf2
 16434                           
 16435                           ; BSR set to: 1
 16436                           ;main.c: 2489: return 1;
 16437  00294A  0E01               	movlw	1
 16438  00294C  D018               	goto	l1150
 16439  00294E                     l15942:
 16440  00294E  0100               	movlb	0	; () banked
 16441  002950  51BB               	movf	readRegisterExtended@timeout& (0+255),w,b
 16442  002952  6FBF               	movwf	??_readRegisterExtended& (0+255),b
 16443  002954  51BC               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 16444  002956  6FC0               	movwf	(??_readRegisterExtended+1)& (0+255),b
 16445  002958  6BC1               	clrf	(??_readRegisterExtended+2)& (0+255),b
 16446  00295A  6BC2               	clrf	(??_readRegisterExtended+3)& (0+255),b
 16447  00295C  51BF               	movf	??_readRegisterExtended& (0+255),w,b
 16448  00295E  0101               	movlb	1	; () banked
 16449  002960  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 16450  002962  0100               	movlb	0	; () banked
 16451  002964  51C0               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 16452  002966  0101               	movlb	1	; () banked
 16453  002968  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16454  00296A  0100               	movlb	0	; () banked
 16455  00296C  51C1               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 16456  00296E  0101               	movlb	1	; () banked
 16457  002970  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16458  002972  0100               	movlb	0	; () banked
 16459  002974  51C2               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 16460  002976  0101               	movlb	1	; () banked
 16461  002978  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16462  00297A  E3AE               	bnc	l1147
 16463  00297C                     l15944:
 16464                           
 16465                           ;main.c: 2490: }
 16466                           ;main.c: 2491: }
 16467                           ;main.c: 2492: }
 16468                           ;main.c: 2493: }
 16469                           ;main.c: 2495: return 0;
 16470  00297C  0E00               	movlw	0
 16471  00297E                     l1150:
 16472  00297E  0012               	return	
 16473  002980                     __end_of_readRegisterExtended:
 16474                           	opt stack 0
 16475                           tblptru	equ	0xFF8
 16476                           tblptrh	equ	0xFF7
 16477                           tblptrl	equ	0xFF6
 16478                           tablat	equ	0xFF5
 16479                           prodh	equ	0xFF4
 16480                           prodl	equ	0xFF3
 16481                           intcon	equ	0xFF2
 16482                           indf0	equ	0xFEF
 16483                           postinc0	equ	0xFEE
 16484                           fsr0h	equ	0xFEA
 16485                           fsr0l	equ	0xFE9
 16486                           wreg	equ	0xFE8
 16487                           indf1	equ	0xFE7
 16488                           postinc1	equ	0xFE6
 16489                           postdec1	equ	0xFE5
 16490                           fsr1h	equ	0xFE2
 16491                           fsr1l	equ	0xFE1
 16492                           indf2	equ	0xFDF
 16493                           postinc2	equ	0xFDE
 16494                           postdec2	equ	0xFDD
 16495                           plusw2	equ	0xFDB
 16496                           fsr2h	equ	0xFDA
 16497                           fsr2l	equ	0xFD9
 16498                           status	equ	0xFD8
 16499                           
 16500 ;; *************** function _strcpy *****************
 16501 ;; Defined at:
 16502 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16503 ;; Parameters:    Size  Location     Type
 16504 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16505 ;;		 -> cmdbuf(80), 
 16506 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16507 ;;		 -> cmdbuf(80), 
 16508 ;; Auto vars:     Size  Location     Type
 16509 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16510 ;;		 -> cmdbuf(80), 
 16511 ;; Return value:  Size  Location     Type
 16512 ;;                  2    0[BANK0 ] PTR unsigned char 
 16513 ;; Registers used:
 16514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16515 ;; Tracked objects:
 16516 ;;		On entry : F/0
 16517 ;;		On exit  : F/0
 16518 ;;		Unchanged: 0/0
 16519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16520 ;;      Params:         0       4       0       0       0       0       0
 16521 ;;      Locals:         0       2       0       0       0       0       0
 16522 ;;      Temps:          0       0       0       0       0       0       0
 16523 ;;      Totals:         0       6       0       0       0       0       0
 16524 ;;Total ram usage:        6 bytes
 16525 ;; Hardware stack levels used:    1
 16526 ;; Hardware stack levels required when called:    3
 16527 ;; This function calls:
 16528 ;;		Nothing
 16529 ;; This function is called by:
 16530 ;;		_doModeVerbose
 16531 ;; This function uses a non-reentrant model
 16532 ;;
 16533                           
 16534                           	psect	text26
 16535  001078                     __ptext26:
 16536                           	opt stack 0
 16537  001078                     _strcpy:
 16538                           	opt stack 25
 16539                           
 16540                           ; BSR set to: 0
 16541                           
 16542                           ;incstack = 0
 16543                           ;incstack = 0
 16544  001078  C060  F064         	movff	strcpy@to,strcpy@cp
 16545  00107C  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16546  001080  D004               	goto	l15902
 16547  001082                     l15900:
 16548                           
 16549                           ; BSR set to: 0
 16550  001082  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16551  001084  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16552  001086  4B62               	infsnz	strcpy@from& (0+255),f,b
 16553  001088  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16554  00108A                     l15902:
 16555                           
 16556                           ; BSR set to: 0
 16557  00108A  C062  FFD9         	movff	strcpy@from,fsr2l
 16558  00108E  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16559  001092  C064  FFE1         	movff	strcpy@cp,fsr1l
 16560  001096  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16561  00109A  CFDF FFE7          	movff	indf2,indf1
 16562  00109E  50E7               	movf	indf1,w,c
 16563  0010A0  B4D8               	btfsc	status,2,c
 16564                           
 16565                           ; BSR set to: 0
 16566  0010A2  0012               	return	
 16567  0010A4  D7EE               	goto	l15900
 16568  0010A6                     __end_of_strcpy:
 16569                           	opt stack 0
 16570                           tblptru	equ	0xFF8
 16571                           tblptrh	equ	0xFF7
 16572                           tblptrl	equ	0xFF6
 16573                           tablat	equ	0xFF5
 16574                           prodh	equ	0xFF4
 16575                           prodl	equ	0xFF3
 16576                           intcon	equ	0xFF2
 16577                           indf0	equ	0xFEF
 16578                           postinc0	equ	0xFEE
 16579                           fsr0h	equ	0xFEA
 16580                           fsr0l	equ	0xFE9
 16581                           wreg	equ	0xFE8
 16582                           indf1	equ	0xFE7
 16583                           postinc1	equ	0xFE6
 16584                           postdec1	equ	0xFE5
 16585                           fsr1h	equ	0xFE2
 16586                           fsr1l	equ	0xFE1
 16587                           indf2	equ	0xFDF
 16588                           postinc2	equ	0xFDE
 16589                           postdec2	equ	0xFDD
 16590                           plusw2	equ	0xFDB
 16591                           fsr2h	equ	0xFDA
 16592                           fsr2l	equ	0xFD9
 16593                           status	equ	0xFD8
 16594                           
 16595 ;; *************** function _findNodes *****************
 16596 ;; Defined at:
 16597 ;;		line 2794 in file "main.c"
 16598 ;; Parameters:    Size  Location     Type
 16599 ;;		None
 16600 ;; Auto vars:     Size  Location     Type
 16601 ;;  i               1  107[BANK0 ] unsigned char 
 16602 ;;  value           1  106[BANK0 ] unsigned char 
 16603 ;;  nFound          1  105[BANK0 ] unsigned char 
 16604 ;; Return value:  Size  Location     Type
 16605 ;;		None               void
 16606 ;; Registers used:
 16607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16608 ;; Tracked objects:
 16609 ;;		On entry : F/0
 16610 ;;		On exit  : 0/0
 16611 ;;		Unchanged: 0/0
 16612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16613 ;;      Params:         0       0       0       0       0       0       0
 16614 ;;      Locals:         0       5       0       0       0       0       0
 16615 ;;      Temps:          0       0       0       0       0       0       0
 16616 ;;      Totals:         0       5       0       0       0       0       0
 16617 ;;Total ram usage:        5 bytes
 16618 ;; Hardware stack levels used:    1
 16619 ;; Hardware stack levels required when called:    9
 16620 ;; This function calls:
 16621 ;;		_putsUSART
 16622 ;;		_WriteUSART
 16623 ;;		_printNodeFirmwareVersion
 16624 ;;		_printGUID
 16625 ;;		_printMDF
 16626 ;;		_itoa
 16627 ;;		_readRegister
 16628 ;; This function is called by:
 16629 ;;		_doModeVerbose
 16630 ;; This function uses a non-reentrant model
 16631 ;;
 16632                           
 16633                           	psect	text27
 16634  002D98                     __ptext27:
 16635                           	opt stack 0
 16636  002D98                     _findNodes:
 16637                           	opt stack 19
 16638                           
 16639                           ; BSR set to: 0
 16640                           ;main.c: 2795: uint8_t nFound = 0;
 16641                           
 16642                           ; BSR set to: 0
 16643                           ;incstack = 0
 16644                           ;incstack = 0
 16645  002D98  6BC9               	clrf	findNodes@nFound& (0+255),b
 16646                           
 16647                           ; BSR set to: 0
 16648                           ;main.c: 2796: uint8_t i;
 16649                           ;main.c: 2797: uint8_t value;
 16650                           ;main.c: 2799: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 16651  002D9A  506F               	movf	3951,w,c	;volatile
 16652  002D9C  0BE0               	andlw	224
 16653  002D9E  E007               	bz	l15848
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;main.c: 2800: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 16657  002DA0  0E70               	movlw	high STR_50
 16658  002DA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16659  002DA4  0EE3               	movlw	low STR_50
 16660  002DA6  6F61               	movwf	?_putsUSART& (0+255),b
 16661  002DA8  EC8D  F00A         	call	_putsUSART	;wreg free
 16662  002DAC  D083               	goto	l1250
 16663  002DAE                     l15848:
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;main.c: 2802: }
 16667                           ;main.c: 2804: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16668  002DAE  0E6D               	movlw	high STR_269
 16669  002DB0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16670  002DB2  0EB2               	movlw	low STR_269
 16671  002DB4  6F61               	movwf	?_putsUSART& (0+255),b
 16672  002DB6  EC8D  F00A         	call	_putsUSART	;wreg free
 16673                           
 16674                           ;main.c: 2806: for (i = 1; i != 0; i++) {
 16675  002DBA  0E01               	movlw	1
 16676  002DBC  0100               	movlb	0	; () banked
 16677  002DBE  6FCB               	movwf	findNodes@i& (0+255),b
 16678  002DC0                     l1251:
 16679                           
 16680                           ; BSR set to: 0
 16681  002DC0  0004               	clrwdt		;# 
 16682                           
 16683                           ;main.c: 2810: if (readRegister(i,
 16684                           ;main.c: 2811: 0xE0,
 16685                           ;main.c: 2812: rwtimeout,
 16686                           ;main.c: 2813: &value)) {
 16687  002DC2  0EE0               	movlw	224
 16688  002DC4  0100               	movlb	0	; () banked
 16689  002DC6  6FB8               	movwf	?_readRegister& (0+255),b
 16690  002DC8  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 16691  002DCC  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 16692  002DCE  0ECA               	movlw	low findNodes@value
 16693  002DD0  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 16694  002DD2  51CB               	movf	findNodes@i& (0+255),w,b
 16695  002DD4  EC5C  F011         	call	_readRegister
 16696  002DD8  0900               	iorlw	0
 16697  002DDA  E043               	bz	l15882
 16698                           
 16699                           ;main.c: 2814: putsUSART((char *) "\r\nNode found with node id = ");
 16700  002DDC  0E77               	movlw	high STR_270
 16701  002DDE  0100               	movlb	0	; () banked
 16702  002DE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16703  002DE2  0EA9               	movlw	low STR_270
 16704  002DE4  6F61               	movwf	?_putsUSART& (0+255),b
 16705  002DE6  EC8D  F00A         	call	_putsUSART	;wreg free
 16706                           
 16707                           ;main.c: 2815: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16708  002DEA  662C               	tstfsz	_bHex,c
 16709  002DEC  D004               	goto	l15864
 16710  002DEE  0100               	movlb	0	; () banked
 16711  002DF0  6BC8               	clrf	(_findNodes$1576+1)& (0+255),b
 16712  002DF2  0E0A               	movlw	10
 16713  002DF4  D003               	goto	L18
 16714  002DF6                     l15864:
 16715  002DF6  0100               	movlb	0	; () banked
 16716  002DF8  6BC8               	clrf	(_findNodes$1576+1)& (0+255),b
 16717  002DFA  0E10               	movlw	16
 16718  002DFC                     L18:
 16719  002DFC  6FC7               	movwf	_findNodes$1576& (0+255),b
 16720                           
 16721                           ; BSR set to: 0
 16722  002DFE  0E01               	movlw	high _wrkbuf
 16723  002E00  0100               	movlb	0	; () banked
 16724  002E02  6F71               	movwf	(?_itoa+1)& (0+255),b
 16725  002E04  0E7D               	movlw	low _wrkbuf
 16726  002E06  6F70               	movwf	?_itoa& (0+255),b
 16727  002E08  C03C  F072         	movff	_vscpNodeId,?_itoa+2
 16728  002E0C  6B73               	clrf	(?_itoa+3)& (0+255),b
 16729  002E0E  C0C7  F074         	movff	_findNodes$1576,?_itoa+4
 16730  002E12  C0C8  F075         	movff	_findNodes$1576+1,?_itoa+5
 16731  002E16  EC9D  F008         	call	_itoa	;wreg free
 16732                           
 16733                           ; BSR set to: 0
 16734                           ;main.c: 2816: putsUSART(wrkbuf);
 16735  002E1A  0E01               	movlw	high _wrkbuf
 16736  002E1C  0100               	movlb	0	; () banked
 16737  002E1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16738  002E20  0E7D               	movlw	low _wrkbuf
 16739  002E22  6F61               	movwf	?_putsUSART& (0+255),b
 16740  002E24  EC8D  F00A         	call	_putsUSART	;wreg free
 16741                           
 16742                           ;main.c: 2817: putsUSART((char *) "\r\n");
 16743  002E28  0E70               	movlw	high (STR_227+50)
 16744  002E2A  0100               	movlb	0	; () banked
 16745  002E2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16746  002E2E  0EE0               	movlw	low (STR_227+50)
 16747  002E30  6F61               	movwf	?_putsUSART& (0+255),b
 16748  002E32  EC8D  F00A         	call	_putsUSART	;wreg free
 16749                           
 16750                           ;main.c: 2818: printNodeFirmwareVersion(i);
 16751  002E36  0100               	movlb	0	; () banked
 16752  002E38  51CB               	movf	findNodes@i& (0+255),w,b
 16753  002E3A  ECBE  F011         	call	_printNodeFirmwareVersion
 16754                           
 16755                           ;main.c: 2819: printGUID(i);
 16756  002E3E  0100               	movlb	0	; () banked
 16757  002E40  51CB               	movf	findNodes@i& (0+255),w,b
 16758  002E42  EC3E  F015         	call	_printGUID
 16759                           
 16760                           ;main.c: 2820: printMDF(i);
 16761  002E46  0100               	movlb	0	; () banked
 16762  002E48  51CB               	movf	findNodes@i& (0+255),w,b
 16763  002E4A  EC18  F00E         	call	_printMDF
 16764                           
 16765                           ;main.c: 2821: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16766  002E4E  0E6D               	movlw	high STR_269
 16767  002E50  0100               	movlb	0	; () banked
 16768  002E52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16769  002E54  0EB2               	movlw	low STR_269
 16770  002E56  6F61               	movwf	?_putsUSART& (0+255),b
 16771  002E58  EC8D  F00A         	call	_putsUSART	;wreg free
 16772                           
 16773                           ;main.c: 2822: nFound++;
 16774  002E5C  0100               	movlb	0	; () banked
 16775  002E5E  2BC9               	incf	findNodes@nFound& (0+255),f,b
 16776                           
 16777                           ;main.c: 2823: }
 16778  002E60  D004               	goto	l15886
 16779  002E62                     l15882:
 16780                           
 16781                           ;main.c: 2824: else {
 16782                           ;main.c: 2825: WriteUSART('.');
 16783  002E62  0E2E               	movlw	46
 16784  002E64  ECD5  F007         	call	_WriteUSART
 16785                           
 16786                           ;main.c: 2826: (!TXSTAbits.TRMT);
 16787  002E68  50AC               	movf	4012,w,c	;volatile
 16788  002E6A                     l15886:
 16789  002E6A  0100               	movlb	0	; () banked
 16790  002E6C  2BCB               	incf	findNodes@i& (0+255),f,b
 16791                           
 16792                           ; BSR set to: 0
 16793  002E6E  67CB               	tstfsz	findNodes@i& (0+255),b
 16794  002E70  D7A7               	goto	l1251
 16795                           
 16796                           ; BSR set to: 0
 16797                           ;main.c: 2827: }
 16798                           ;main.c: 2829: }
 16799                           ;main.c: 2831: putsUSART((char *) "\r\n");
 16800  002E72  0E70               	movlw	high (STR_227+50)
 16801  002E74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16802  002E76  0EE0               	movlw	low (STR_227+50)
 16803  002E78  6F61               	movwf	?_putsUSART& (0+255),b
 16804  002E7A  EC8D  F00A         	call	_putsUSART	;wreg free
 16805                           
 16806                           ;main.c: 2832: itoa(wrkbuf, nFound, 10);
 16807  002E7E  0E01               	movlw	high _wrkbuf
 16808  002E80  0100               	movlb	0	; () banked
 16809  002E82  6F71               	movwf	(?_itoa+1)& (0+255),b
 16810  002E84  0E7D               	movlw	low _wrkbuf
 16811  002E86  6F70               	movwf	?_itoa& (0+255),b
 16812  002E88  C0C9  F072         	movff	findNodes@nFound,?_itoa+2
 16813  002E8C  6B73               	clrf	(?_itoa+3)& (0+255),b
 16814  002E8E  6B75               	clrf	(?_itoa+5)& (0+255),b
 16815  002E90  0E0A               	movlw	10
 16816  002E92  6F74               	movwf	(?_itoa+4)& (0+255),b
 16817  002E94  EC9D  F008         	call	_itoa	;wreg free
 16818                           
 16819                           ; BSR set to: 0
 16820                           ;main.c: 2833: putsUSART(wrkbuf);
 16821  002E98  0E01               	movlw	high _wrkbuf
 16822  002E9A  0100               	movlb	0	; () banked
 16823  002E9C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16824  002E9E  0E7D               	movlw	low _wrkbuf
 16825  002EA0  6F61               	movwf	?_putsUSART& (0+255),b
 16826  002EA2  EC8D  F00A         	call	_putsUSART	;wreg free
 16827                           
 16828                           ;main.c: 2834: putsUSART((char *) " node(s) found\r\n");
 16829  002EA6  0E7A               	movlw	high STR_274
 16830  002EA8  0100               	movlb	0	; () banked
 16831  002EAA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16832  002EAC  0EE7               	movlw	low STR_274
 16833  002EAE  6F61               	movwf	?_putsUSART& (0+255),b
 16834  002EB0  EC8D  F00A         	call	_putsUSART	;wreg free
 16835  002EB4                     l1250:
 16836  002EB4  0012               	return	
 16837  002EB6                     __end_of_findNodes:
 16838                           	opt stack 0
 16839                           tblptru	equ	0xFF8
 16840                           tblptrh	equ	0xFF7
 16841                           tblptrl	equ	0xFF6
 16842                           tablat	equ	0xFF5
 16843                           prodh	equ	0xFF4
 16844                           prodl	equ	0xFF3
 16845                           intcon	equ	0xFF2
 16846                           indf0	equ	0xFEF
 16847                           postinc0	equ	0xFEE
 16848                           fsr0h	equ	0xFEA
 16849                           fsr0l	equ	0xFE9
 16850                           wreg	equ	0xFE8
 16851                           indf1	equ	0xFE7
 16852                           postinc1	equ	0xFE6
 16853                           postdec1	equ	0xFE5
 16854                           fsr1h	equ	0xFE2
 16855                           fsr1l	equ	0xFE1
 16856                           indf2	equ	0xFDF
 16857                           postinc2	equ	0xFDE
 16858                           postdec2	equ	0xFDD
 16859                           plusw2	equ	0xFDB
 16860                           fsr2h	equ	0xFDA
 16861                           fsr2l	equ	0xFD9
 16862                           status	equ	0xFD8
 16863                           
 16864 ;; *************** function _printMDF *****************
 16865 ;; Defined at:
 16866 ;;		line 2885 in file "main.c"
 16867 ;; Parameters:    Size  Location     Type
 16868 ;;  nodeid          1    wreg     unsigned char 
 16869 ;; Auto vars:     Size  Location     Type
 16870 ;;  nodeid          1   97[BANK0 ] unsigned char 
 16871 ;;  p               2   99[BANK0 ] PTR unsigned char 
 16872 ;;		 -> wrkbuf(80), 
 16873 ;;  i               1  101[BANK0 ] unsigned char 
 16874 ;;  value           1   98[BANK0 ] unsigned char 
 16875 ;; Return value:  Size  Location     Type
 16876 ;;		None               void
 16877 ;; Registers used:
 16878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16879 ;; Tracked objects:
 16880 ;;		On entry : D/2
 16881 ;;		On exit  : 0/0
 16882 ;;		Unchanged: 0/0
 16883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16884 ;;      Params:         0       0       0       0       0       0       0
 16885 ;;      Locals:         0       5       0       0       0       0       0
 16886 ;;      Temps:          0       0       0       0       0       0       0
 16887 ;;      Totals:         0       5       0       0       0       0       0
 16888 ;;Total ram usage:        5 bytes
 16889 ;; Hardware stack levels used:    1
 16890 ;; Hardware stack levels required when called:    8
 16891 ;; This function calls:
 16892 ;;		_putsUSART
 16893 ;;		_memset
 16894 ;;		_readRegister
 16895 ;; This function is called by:
 16896 ;;		_doModeVerbose
 16897 ;;		_findNodes
 16898 ;; This function uses a non-reentrant model
 16899 ;;
 16900                           
 16901                           	psect	text28
 16902  001C30                     __ptext28:
 16903                           	opt stack 0
 16904  001C30                     _printMDF:
 16905                           	opt stack 20
 16906                           
 16907                           ;incstack = 0
 16908                           ;incstack = 0
 16909                           ;printMDF@nodeid stored from wreg
 16910  001C30  CFE8 F0C1          	movff	wreg,printMDF@nodeid
 16911                           
 16912                           ;main.c: 2886: uint8_t i;
 16913                           ;main.c: 2887: uint8_t value;
 16914                           ;main.c: 2888: char *p = wrkbuf;
 16915  001C34  0E01               	movlw	high _wrkbuf
 16916  001C36  0100               	movlb	0	; () banked
 16917  001C38  6FC4               	movwf	(printMDF@p+1)& (0+255),b
 16918  001C3A  0E7D               	movlw	low _wrkbuf
 16919  001C3C  6FC3               	movwf	printMDF@p& (0+255),b
 16920                           
 16921                           ; BSR set to: 0
 16922                           ;main.c: 2889: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16923  001C3E  0E01               	movlw	high _wrkbuf
 16924  001C40  6F61               	movwf	(?_memset+1)& (0+255),b
 16925  001C42  0E7D               	movlw	low _wrkbuf
 16926  001C44  6F60               	movwf	?_memset& (0+255),b
 16927  001C46  6B63               	clrf	(?_memset+3)& (0+255),b
 16928  001C48  6B62               	clrf	(?_memset+2)& (0+255),b
 16929  001C4A  6B65               	clrf	(?_memset+5)& (0+255),b
 16930  001C4C  0E50               	movlw	80
 16931  001C4E  6F64               	movwf	(?_memset+4)& (0+255),b
 16932  001C50  EC25  F008         	call	_memset	;wreg free
 16933                           
 16934                           ; BSR set to: 0
 16935                           ;main.c: 2890: putsUSART((char *) "MDF = http://");
 16936  001C54  0E7B               	movlw	high STR_280
 16937  001C56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16938  001C58  0E29               	movlw	low STR_280
 16939  001C5A  6F61               	movwf	?_putsUSART& (0+255),b
 16940  001C5C  EC8D  F00A         	call	_putsUSART	;wreg free
 16941                           
 16942                           ;main.c: 2892: for (i = 0; i < 32; i++) {
 16943  001C60  0100               	movlb	0	; () banked
 16944  001C62  6BC5               	clrf	printMDF@i& (0+255),b
 16945  001C64                     l16422:
 16946                           
 16947                           ; BSR set to: 0
 16948                           ;main.c: 2893: if (readRegister(nodeid,
 16949                           ;main.c: 2894: 0xE0 + i,
 16950                           ;main.c: 2895: rwtimeout,
 16951                           ;main.c: 2896: &value)) {
 16952  001C64  51C5               	movf	printMDF@i& (0+255),w,b
 16953  001C66  0FE0               	addlw	224
 16954  001C68  6FB8               	movwf	?_readRegister& (0+255),b
 16955  001C6A  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 16956  001C6E  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 16957  001C70  0EC2               	movlw	low printMDF@value
 16958  001C72  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 16959  001C74  51C1               	movf	printMDF@nodeid& (0+255),w,b
 16960  001C76  EC5C  F011         	call	_readRegister
 16961  001C7A  0900               	iorlw	0
 16962  001C7C  E00A               	bz	l16428
 16963                           
 16964                           ;main.c: 2897: *p = value;
 16965  001C7E  C0C3  FFD9         	movff	printMDF@p,fsr2l
 16966  001C82  C0C4  FFDA         	movff	printMDF@p+1,fsr2h
 16967  001C86  C0C2  FFDF         	movff	printMDF@value,indf2
 16968  001C8A                     l16426:
 16969                           
 16970                           ;main.c: 2898: p++;
 16971  001C8A  0100               	movlb	0	; () banked
 16972  001C8C  4BC3               	infsnz	printMDF@p& (0+255),f,b
 16973  001C8E  2BC4               	incf	(printMDF@p+1)& (0+255),f,b
 16974                           
 16975                           ;main.c: 2900: }
 16976  001C90  D007               	goto	l16432
 16977  001C92                     l16428:
 16978                           
 16979                           ;main.c: 2901: else {
 16980                           ;main.c: 2902: *p = '?';
 16981  001C92  C0C3  FFD9         	movff	printMDF@p,fsr2l
 16982  001C96  C0C4  FFDA         	movff	printMDF@p+1,fsr2h
 16983  001C9A  0E3F               	movlw	63
 16984  001C9C  6EDF               	movwf	indf2,c
 16985  001C9E  D7F5               	goto	l16426
 16986  001CA0                     l16432:
 16987                           
 16988                           ; BSR set to: 0
 16989  001CA0  2BC5               	incf	printMDF@i& (0+255),f,b
 16990                           
 16991                           ; BSR set to: 0
 16992  001CA2  0E1F               	movlw	31
 16993  001CA4  65C5               	cpfsgt	printMDF@i& (0+255),b
 16994  001CA6  D7DE               	goto	l16422
 16995                           
 16996                           ; BSR set to: 0
 16997                           ;main.c: 2904: }
 16998                           ;main.c: 2905: }
 16999                           ;main.c: 2907: putsUSART(wrkbuf);
 17000  001CA8  0E01               	movlw	high _wrkbuf
 17001  001CAA  0100               	movlb	0	; () banked
 17002  001CAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17003  001CAE  0E7D               	movlw	low _wrkbuf
 17004  001CB0  6F61               	movwf	?_putsUSART& (0+255),b
 17005  001CB2  EC8D  F00A         	call	_putsUSART	;wreg free
 17006                           
 17007                           ;main.c: 2908: putsUSART((char *) "\r\n");
 17008  001CB6  0E70               	movlw	high (STR_227+50)
 17009  001CB8  0100               	movlb	0	; () banked
 17010  001CBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17011  001CBC  0EE0               	movlw	low (STR_227+50)
 17012  001CBE  6F61               	movwf	?_putsUSART& (0+255),b
 17013  001CC0  EF8D  F00A         	goto	_putsUSART	;wreg free
 17014  001CC4                     __end_of_printMDF:
 17015                           	opt stack 0
 17016                           tblptru	equ	0xFF8
 17017                           tblptrh	equ	0xFF7
 17018                           tblptrl	equ	0xFF6
 17019                           tablat	equ	0xFF5
 17020                           prodh	equ	0xFF4
 17021                           prodl	equ	0xFF3
 17022                           intcon	equ	0xFF2
 17023                           indf0	equ	0xFEF
 17024                           postinc0	equ	0xFEE
 17025                           fsr0h	equ	0xFEA
 17026                           fsr0l	equ	0xFE9
 17027                           wreg	equ	0xFE8
 17028                           indf1	equ	0xFE7
 17029                           postinc1	equ	0xFE6
 17030                           postdec1	equ	0xFE5
 17031                           fsr1h	equ	0xFE2
 17032                           fsr1l	equ	0xFE1
 17033                           indf2	equ	0xFDF
 17034                           postinc2	equ	0xFDE
 17035                           postdec2	equ	0xFDD
 17036                           plusw2	equ	0xFDB
 17037                           fsr2h	equ	0xFDA
 17038                           fsr2l	equ	0xFD9
 17039                           status	equ	0xFD8
 17040                           
 17041 ;; *************** function _printGUID *****************
 17042 ;; Defined at:
 17043 ;;		line 2844 in file "main.c"
 17044 ;; Parameters:    Size  Location     Type
 17045 ;;  nodeid          1    wreg     unsigned char 
 17046 ;; Auto vars:     Size  Location     Type
 17047 ;;  nodeid          1   97[BANK0 ] unsigned char 
 17048 ;;  buf             3   98[BANK0 ] unsigned char [3]
 17049 ;;  i               1  102[BANK0 ] unsigned char 
 17050 ;;  value           1  101[BANK0 ] unsigned char 
 17051 ;; Return value:  Size  Location     Type
 17052 ;;		None               void
 17053 ;; Registers used:
 17054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17055 ;; Tracked objects:
 17056 ;;		On entry : D/2
 17057 ;;		On exit  : 0/0
 17058 ;;		Unchanged: 0/0
 17059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17060 ;;      Params:         0       0       0       0       0       0       0
 17061 ;;      Locals:         0       6       0       0       0       0       0
 17062 ;;      Temps:          0       0       0       0       0       0       0
 17063 ;;      Totals:         0       6       0       0       0       0       0
 17064 ;;Total ram usage:        6 bytes
 17065 ;; Hardware stack levels used:    1
 17066 ;; Hardware stack levels required when called:    8
 17067 ;; This function calls:
 17068 ;;		_putsUSART
 17069 ;;		_memset
 17070 ;;		_strlen
 17071 ;;		_itoa
 17072 ;;		_readRegister
 17073 ;;		_strcat
 17074 ;; This function is called by:
 17075 ;;		_doModeVerbose
 17076 ;;		_findNodes
 17077 ;; This function uses a non-reentrant model
 17078 ;;
 17079                           
 17080                           	psect	text29
 17081  002A7C                     __ptext29:
 17082                           	opt stack 0
 17083  002A7C                     _printGUID:
 17084                           	opt stack 20
 17085                           
 17086                           ;incstack = 0
 17087                           ;incstack = 0
 17088                           ;printGUID@nodeid stored from wreg
 17089  002A7C  CFE8 F0C1          	movff	wreg,printGUID@nodeid
 17090                           
 17091                           ;main.c: 2845: uint8_t i;
 17092                           ;main.c: 2846: uint8_t value;
 17093                           ;main.c: 2847: char buf[3];
 17094                           ;main.c: 2849: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 17095  002A80  0E01               	movlw	high _wrkbuf
 17096  002A82  0100               	movlb	0	; () banked
 17097  002A84  6F61               	movwf	(?_memset+1)& (0+255),b
 17098  002A86  0E7D               	movlw	low _wrkbuf
 17099  002A88  6F60               	movwf	?_memset& (0+255),b
 17100  002A8A  6B63               	clrf	(?_memset+3)& (0+255),b
 17101  002A8C  6B62               	clrf	(?_memset+2)& (0+255),b
 17102  002A8E  6B65               	clrf	(?_memset+5)& (0+255),b
 17103  002A90  0E50               	movlw	80
 17104  002A92  6F64               	movwf	(?_memset+4)& (0+255),b
 17105  002A94  EC25  F008         	call	_memset	;wreg free
 17106                           
 17107                           ; BSR set to: 0
 17108                           ;main.c: 2850: putsUSART((char *) "GUID = ");
 17109  002A98  0E7B               	movlw	high STR_275
 17110  002A9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17111  002A9C  0ECB               	movlw	low STR_275
 17112  002A9E  6F61               	movwf	?_putsUSART& (0+255),b
 17113  002AA0  EC8D  F00A         	call	_putsUSART	;wreg free
 17114                           
 17115                           ;main.c: 2852: for (i = 0; i < 16; i++) {
 17116  002AA4  0100               	movlb	0	; () banked
 17117  002AA6  6BC6               	clrf	printGUID@i& (0+255),b
 17118  002AA8                     l16388:
 17119                           
 17120                           ; BSR set to: 0
 17121                           ;main.c: 2853: if (readRegister(nodeid,
 17122                           ;main.c: 2854: 0xD0 + i,
 17123                           ;main.c: 2855: rwtimeout,
 17124                           ;main.c: 2856: &value)) {
 17125  002AA8  51C6               	movf	printGUID@i& (0+255),w,b
 17126  002AAA  0FD0               	addlw	208
 17127  002AAC  6FB8               	movwf	?_readRegister& (0+255),b
 17128  002AAE  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 17129  002AB2  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 17130  002AB4  0EC5               	movlw	low printGUID@value
 17131  002AB6  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 17132  002AB8  51C1               	movf	printGUID@nodeid& (0+255),w,b
 17133  002ABA  EC5C  F011         	call	_readRegister
 17134  002ABE  0900               	iorlw	0
 17135  002AC0  E029               	bz	l16398
 17136                           
 17137                           ;main.c: 2857: itoa(buf, value, 16);
 17138  002AC2  0100               	movlb	0	; () banked
 17139  002AC4  0E00               	movlw	high printGUID@buf
 17140  002AC6  6F71               	movwf	(?_itoa+1)& (0+255),b
 17141  002AC8  0EC2               	movlw	low printGUID@buf
 17142  002ACA  6F70               	movwf	?_itoa& (0+255),b
 17143  002ACC  C0C5  F072         	movff	printGUID@value,?_itoa+2
 17144  002AD0  6B73               	clrf	(?_itoa+3)& (0+255),b
 17145  002AD2  6B75               	clrf	(?_itoa+5)& (0+255),b
 17146  002AD4  0E10               	movlw	16
 17147  002AD6  6F74               	movwf	(?_itoa+4)& (0+255),b
 17148  002AD8  EC9D  F008         	call	_itoa	;wreg free
 17149                           
 17150                           ; BSR set to: 0
 17151                           ;main.c: 2858: if (1 == strlen(buf)) {
 17152  002ADC  0E00               	movlw	high printGUID@buf
 17153  002ADE  6F61               	movwf	(?_strlen+1)& (0+255),b
 17154  002AE0  0EC2               	movlw	low printGUID@buf
 17155  002AE2  6F60               	movwf	?_strlen& (0+255),b
 17156  002AE4  EC6F  F009         	call	_strlen	;wreg free
 17157  002AE8  0560               	decf	?_strlen& (0+255),w,b
 17158  002AEA  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 17159  002AEC  E10F               	bnz	l16396
 17160                           
 17161                           ; BSR set to: 0
 17162                           ;main.c: 2859: strcat(wrkbuf, "0");
 17163  002AEE  0E01               	movlw	high _wrkbuf
 17164  002AF0  0100               	movlb	0	; () banked
 17165  002AF2  6F61               	movwf	(?_strcat+1)& (0+255),b
 17166  002AF4  0E7D               	movlw	low _wrkbuf
 17167  002AF6  6F60               	movwf	?_strcat& (0+255),b
 17168  002AF8  0E7C               	movlw	high STR_276
 17169  002AFA  6F63               	movwf	(?_strcat+3)& (0+255),b
 17170  002AFC  0EF9               	movlw	low STR_276
 17171  002AFE  6F62               	movwf	(?_strcat+2)& (0+255),b
 17172  002B00  ECB9  F00A         	call	_strcat	;wreg free
 17173                           
 17174                           ;main.c: 2860: strcat(wrkbuf, buf);
 17175  002B04  D832               	call	PL66	;call to abstracted procedure
 17176  002B06  ECB9  F00A         	call	_strcat	;wreg free
 17177                           
 17178                           ;main.c: 2861: } else {
 17179  002B0A  D00F               	goto	l16400
 17180  002B0C                     l16396:
 17181                           
 17182                           ; BSR set to: 0
 17183                           ;main.c: 2862: strcat(wrkbuf, buf);
 17184  002B0C  D82E               	call	PL66	;call to abstracted procedure
 17185  002B0E  ECB9  F00A         	call	_strcat	;wreg free
 17186  002B12  D00B               	goto	l16400
 17187  002B14                     l16398:
 17188                           
 17189                           ;main.c: 2866: strcat(wrkbuf, "--");
 17190  002B14  0E01               	movlw	high _wrkbuf
 17191  002B16  0100               	movlb	0	; () banked
 17192  002B18  6F61               	movwf	(?_strcat+1)& (0+255),b
 17193  002B1A  0E7D               	movlw	low _wrkbuf
 17194  002B1C  6F60               	movwf	?_strcat& (0+255),b
 17195  002B1E  0E7C               	movlw	high STR_277
 17196  002B20  6F63               	movwf	(?_strcat+3)& (0+255),b
 17197  002B22  0EE5               	movlw	low STR_277
 17198  002B24  6F62               	movwf	(?_strcat+2)& (0+255),b
 17199  002B26  ECB9  F00A         	call	_strcat	;wreg free
 17200  002B2A                     l16400:
 17201                           
 17202                           ;main.c: 2867: }
 17203                           ;main.c: 2869: if (i < 15) {
 17204  002B2A  0E0F               	movlw	15
 17205  002B2C  0100               	movlb	0	; () banked
 17206  002B2E  61C6               	cpfslt	printGUID@i& (0+255),b
 17207  002B30  D00A               	goto	l16404
 17208                           
 17209                           ; BSR set to: 0
 17210                           ;main.c: 2870: strcat(wrkbuf, ":");
 17211  002B32  0E01               	movlw	high _wrkbuf
 17212  002B34  6F61               	movwf	(?_strcat+1)& (0+255),b
 17213  002B36  0E7D               	movlw	low _wrkbuf
 17214  002B38  6F60               	movwf	?_strcat& (0+255),b
 17215  002B3A  0E7C               	movlw	high STR_278
 17216  002B3C  6F63               	movwf	(?_strcat+3)& (0+255),b
 17217  002B3E  0EFB               	movlw	low STR_278
 17218  002B40  6F62               	movwf	(?_strcat+2)& (0+255),b
 17219  002B42  ECB9  F00A         	call	_strcat	;wreg free
 17220  002B46                     l16404:
 17221  002B46  0100               	movlb	0	; () banked
 17222  002B48  2BC6               	incf	printGUID@i& (0+255),f,b
 17223                           
 17224                           ; BSR set to: 0
 17225  002B4A  0E0F               	movlw	15
 17226  002B4C  65C6               	cpfsgt	printGUID@i& (0+255),b
 17227  002B4E  D7AC               	goto	l16388
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;main.c: 2871: }
 17231                           ;main.c: 2873: }
 17232                           ;main.c: 2875: putsUSART(wrkbuf);
 17233  002B50  0E01               	movlw	high _wrkbuf
 17234  002B52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17235  002B54  0E7D               	movlw	low _wrkbuf
 17236  002B56  6F61               	movwf	?_putsUSART& (0+255),b
 17237  002B58  EC8D  F00A         	call	_putsUSART	;wreg free
 17238                           
 17239                           ;main.c: 2876: putsUSART((char *) "\r\n");
 17240  002B5C  0E70               	movlw	high (STR_227+50)
 17241  002B5E  0100               	movlb	0	; () banked
 17242  002B60  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17243  002B62  0EE0               	movlw	low (STR_227+50)
 17244  002B64  6F61               	movwf	?_putsUSART& (0+255),b
 17245  002B66  EF8D  F00A         	goto	_putsUSART	;wreg free
 17246  002B6A                     __end_of_printGUID:
 17247                           	opt stack 0
 17248  002B6A                     PL66:
 17249                           	opt stack 20
 17250  002B6A  0E01               	movlw	high _wrkbuf
 17251  002B6C  0100               	movlb	0	; () banked
 17252  002B6E  6F61               	movwf	(?_strcat+1)& (0+255),b
 17253  002B70  0E7D               	movlw	low _wrkbuf
 17254  002B72  6F60               	movwf	?_strcat& (0+255),b
 17255  002B74  0E00               	movlw	high printGUID@buf
 17256  002B76  6F63               	movwf	(?_strcat+3)& (0+255),b
 17257  002B78  0EC2               	movlw	low printGUID@buf
 17258  002B7A  6F62               	movwf	(?_strcat+2)& (0+255),b
 17259  002B7C  0012               	return	
 17260  002B7E                     __end_ofPL66:
 17261                           	opt stack 0
 17262                           tblptru	equ	0xFF8
 17263                           tblptrh	equ	0xFF7
 17264                           tblptrl	equ	0xFF6
 17265                           tablat	equ	0xFF5
 17266                           prodh	equ	0xFF4
 17267                           prodl	equ	0xFF3
 17268                           intcon	equ	0xFF2
 17269                           indf0	equ	0xFEF
 17270                           postinc0	equ	0xFEE
 17271                           fsr0h	equ	0xFEA
 17272                           fsr0l	equ	0xFE9
 17273                           wreg	equ	0xFE8
 17274                           indf1	equ	0xFE7
 17275                           postinc1	equ	0xFE6
 17276                           postdec1	equ	0xFE5
 17277                           fsr1h	equ	0xFE2
 17278                           fsr1l	equ	0xFE1
 17279                           indf2	equ	0xFDF
 17280                           postinc2	equ	0xFDE
 17281                           postdec2	equ	0xFDD
 17282                           plusw2	equ	0xFDB
 17283                           fsr2h	equ	0xFDA
 17284                           fsr2l	equ	0xFD9
 17285                           status	equ	0xFD8
 17286                           
 17287 ;; *************** function _printNodeFirmwareVersion *****************
 17288 ;; Defined at:
 17289 ;;		line 2916 in file "main.c"
 17290 ;; Parameters:    Size  Location     Type
 17291 ;;  nodeid          1    wreg     unsigned char 
 17292 ;; Auto vars:     Size  Location     Type
 17293 ;;  nodeid          1   97[BANK0 ] unsigned char 
 17294 ;;  buf             3   98[BANK0 ] unsigned char [3]
 17295 ;;  i               1  102[BANK0 ] unsigned char 
 17296 ;;  value           1  101[BANK0 ] unsigned char 
 17297 ;; Return value:  Size  Location     Type
 17298 ;;		None               void
 17299 ;; Registers used:
 17300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17301 ;; Tracked objects:
 17302 ;;		On entry : D/2
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17306 ;;      Params:         0       0       0       0       0       0       0
 17307 ;;      Locals:         0       6       0       0       0       0       0
 17308 ;;      Temps:          0       0       0       0       0       0       0
 17309 ;;      Totals:         0       6       0       0       0       0       0
 17310 ;;Total ram usage:        6 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    8
 17313 ;; This function calls:
 17314 ;;		_putsUSART
 17315 ;;		_memset
 17316 ;;		_itoa
 17317 ;;		_readRegister
 17318 ;;		_strcat
 17319 ;; This function is called by:
 17320 ;;		_doModeVerbose
 17321 ;;		_findNodes
 17322 ;; This function uses a non-reentrant model
 17323 ;;
 17324                           
 17325                           	psect	text30
 17326  00237C                     __ptext30:
 17327                           	opt stack 0
 17328  00237C                     _printNodeFirmwareVersion:
 17329                           	opt stack 20
 17330                           
 17331                           ;incstack = 0
 17332                           ;incstack = 0
 17333                           ;printNodeFirmwareVersion@nodeid stored from wreg
 17334  00237C  CFE8 F0C1          	movff	wreg,printNodeFirmwareVersion@nodeid
 17335                           
 17336                           ;main.c: 2917: uint8_t i;
 17337                           ;main.c: 2918: uint8_t value;
 17338                           ;main.c: 2919: char buf[3];
 17339                           ;main.c: 2921: memset( wrkbuf, 0, sizeof(wrkbuf) );
 17340  002380  0E01               	movlw	high _wrkbuf
 17341  002382  0100               	movlb	0	; () banked
 17342  002384  6F61               	movwf	(?_memset+1)& (0+255),b
 17343  002386  0E7D               	movlw	low _wrkbuf
 17344  002388  6F60               	movwf	?_memset& (0+255),b
 17345  00238A  6B63               	clrf	(?_memset+3)& (0+255),b
 17346  00238C  6B62               	clrf	(?_memset+2)& (0+255),b
 17347  00238E  6B65               	clrf	(?_memset+5)& (0+255),b
 17348  002390  0E50               	movlw	80
 17349  002392  6F64               	movwf	(?_memset+4)& (0+255),b
 17350  002394  EC25  F008         	call	_memset	;wreg free
 17351                           
 17352                           ; BSR set to: 0
 17353                           ;main.c: 2922: putsUSART((char *) "Firmware version = ");
 17354  002398  0E7A               	movlw	high STR_282
 17355  00239A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17356  00239C  0E68               	movlw	low STR_282
 17357  00239E  6F61               	movwf	?_putsUSART& (0+255),b
 17358  0023A0  EC8D  F00A         	call	_putsUSART	;wreg free
 17359                           
 17360                           ;main.c: 2924: for (i = 0; i < 3; i++) {
 17361  0023A4  0100               	movlb	0	; () banked
 17362  0023A6  6BC6               	clrf	printNodeFirmwareVersion@i& (0+255),b
 17363  0023A8                     l16360:
 17364                           
 17365                           ; BSR set to: 0
 17366                           ;main.c: 2925: if (readRegister(nodeid,
 17367                           ;main.c: 2926: 0x94 + i,
 17368                           ;main.c: 2927: rwtimeout,
 17369                           ;main.c: 2928: &value)) {
 17370  0023A8  51C6               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 17371  0023AA  0F94               	addlw	148
 17372  0023AC  6FB8               	movwf	?_readRegister& (0+255),b
 17373  0023AE  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 17374  0023B2  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 17375  0023B4  0EC5               	movlw	low printNodeFirmwareVersion@value
 17376  0023B6  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 17377  0023B8  51C1               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 17378  0023BA  EC5C  F011         	call	_readRegister
 17379  0023BE  0900               	iorlw	0
 17380  0023C0  E019               	bz	l16366
 17381                           
 17382                           ;main.c: 2929: itoa(buf, value, 16);
 17383  0023C2  0100               	movlb	0	; () banked
 17384  0023C4  0E00               	movlw	high printNodeFirmwareVersion@buf
 17385  0023C6  6F71               	movwf	(?_itoa+1)& (0+255),b
 17386  0023C8  0EC2               	movlw	low printNodeFirmwareVersion@buf
 17387  0023CA  6F70               	movwf	?_itoa& (0+255),b
 17388  0023CC  C0C5  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 17389  0023D0  6B73               	clrf	(?_itoa+3)& (0+255),b
 17390  0023D2  6B75               	clrf	(?_itoa+5)& (0+255),b
 17391  0023D4  0E10               	movlw	16
 17392  0023D6  6F74               	movwf	(?_itoa+4)& (0+255),b
 17393  0023D8  EC9D  F008         	call	_itoa	;wreg free
 17394                           
 17395                           ; BSR set to: 0
 17396                           ;main.c: 2930: strcat(wrkbuf, buf);
 17397  0023DC  0E01               	movlw	high _wrkbuf
 17398  0023DE  0100               	movlb	0	; () banked
 17399  0023E0  6F61               	movwf	(?_strcat+1)& (0+255),b
 17400  0023E2  0E7D               	movlw	low _wrkbuf
 17401  0023E4  6F60               	movwf	?_strcat& (0+255),b
 17402  0023E6  0E00               	movlw	high printNodeFirmwareVersion@buf
 17403  0023E8  6F63               	movwf	(?_strcat+3)& (0+255),b
 17404  0023EA  0EC2               	movlw	low printNodeFirmwareVersion@buf
 17405  0023EC  6F62               	movwf	(?_strcat+2)& (0+255),b
 17406  0023EE  ECB9  F00A         	call	_strcat	;wreg free
 17407                           
 17408                           ;main.c: 2931: }
 17409  0023F2  D00B               	goto	l16368
 17410  0023F4                     l16366:
 17411                           
 17412                           ;main.c: 2932: else {
 17413                           ;main.c: 2933: strcat(wrkbuf, "?");
 17414  0023F4  0E01               	movlw	high _wrkbuf
 17415  0023F6  0100               	movlb	0	; () banked
 17416  0023F8  6F61               	movwf	(?_strcat+1)& (0+255),b
 17417  0023FA  0E7D               	movlw	low _wrkbuf
 17418  0023FC  6F60               	movwf	?_strcat& (0+255),b
 17419  0023FE  0E7C               	movlw	high STR_159
 17420  002400  6F63               	movwf	(?_strcat+3)& (0+255),b
 17421  002402  0EFD               	movlw	low STR_159
 17422  002404  6F62               	movwf	(?_strcat+2)& (0+255),b
 17423  002406  ECB9  F00A         	call	_strcat	;wreg free
 17424  00240A                     l16368:
 17425                           
 17426                           ;main.c: 2934: }
 17427                           ;main.c: 2936: if (i < 2) {
 17428  00240A  0E02               	movlw	2
 17429  00240C  0100               	movlb	0	; () banked
 17430  00240E  61C6               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 17431  002410  D00A               	goto	l16372
 17432                           
 17433                           ; BSR set to: 0
 17434                           ;main.c: 2937: strcat(wrkbuf, ".");
 17435  002412  0E01               	movlw	high _wrkbuf
 17436  002414  6F61               	movwf	(?_strcat+1)& (0+255),b
 17437  002416  0E7D               	movlw	low _wrkbuf
 17438  002418  6F60               	movwf	?_strcat& (0+255),b
 17439  00241A  0E7C               	movlw	high STR_284
 17440  00241C  6F63               	movwf	(?_strcat+3)& (0+255),b
 17441  00241E  0EF7               	movlw	low STR_284
 17442  002420  6F62               	movwf	(?_strcat+2)& (0+255),b
 17443  002422  ECB9  F00A         	call	_strcat	;wreg free
 17444  002426                     l16372:
 17445  002426  0100               	movlb	0	; () banked
 17446  002428  2BC6               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 17447                           
 17448                           ; BSR set to: 0
 17449  00242A  0E02               	movlw	2
 17450  00242C  65C6               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 17451  00242E  D7BC               	goto	l16360
 17452                           
 17453                           ; BSR set to: 0
 17454                           ;main.c: 2938: }
 17455                           ;main.c: 2940: }
 17456                           ;main.c: 2942: putsUSART(wrkbuf);
 17457  002430  0E01               	movlw	high _wrkbuf
 17458  002432  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17459  002434  0E7D               	movlw	low _wrkbuf
 17460  002436  6F61               	movwf	?_putsUSART& (0+255),b
 17461  002438  EC8D  F00A         	call	_putsUSART	;wreg free
 17462                           
 17463                           ;main.c: 2943: putsUSART((char *) "\r\n");
 17464  00243C  0E70               	movlw	high (STR_227+50)
 17465  00243E  0100               	movlb	0	; () banked
 17466  002440  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17467  002442  0EE0               	movlw	low (STR_227+50)
 17468  002444  6F61               	movwf	?_putsUSART& (0+255),b
 17469  002446  EF8D  F00A         	goto	_putsUSART	;wreg free
 17470  00244A                     __end_of_printNodeFirmwareVersion:
 17471                           	opt stack 0
 17472                           tblptru	equ	0xFF8
 17473                           tblptrh	equ	0xFF7
 17474                           tblptrl	equ	0xFF6
 17475                           tablat	equ	0xFF5
 17476                           prodh	equ	0xFF4
 17477                           prodl	equ	0xFF3
 17478                           intcon	equ	0xFF2
 17479                           indf0	equ	0xFEF
 17480                           postinc0	equ	0xFEE
 17481                           fsr0h	equ	0xFEA
 17482                           fsr0l	equ	0xFE9
 17483                           wreg	equ	0xFE8
 17484                           indf1	equ	0xFE7
 17485                           postinc1	equ	0xFE6
 17486                           postdec1	equ	0xFE5
 17487                           fsr1h	equ	0xFE2
 17488                           fsr1l	equ	0xFE1
 17489                           indf2	equ	0xFDF
 17490                           postinc2	equ	0xFDE
 17491                           postdec2	equ	0xFDD
 17492                           plusw2	equ	0xFDB
 17493                           fsr2h	equ	0xFDA
 17494                           fsr2l	equ	0xFD9
 17495                           status	equ	0xFD8
 17496                           
 17497 ;; *************** function _strcat *****************
 17498 ;; Defined at:
 17499 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 17500 ;; Parameters:    Size  Location     Type
 17501 ;;  to              2    0[BANK0 ] PTR unsigned char 
 17502 ;;		 -> wrkbuf(80), 
 17503 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 17504 ;;		 -> STR_284(2), STR_283(2), printNodeFirmwareVersion@buf(3), STR_278(2), 
 17505 ;;		 -> STR_277(3), STR_276(2), printGUID@buf(3), 
 17506 ;; Auto vars:     Size  Location     Type
 17507 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 17508 ;;		 -> wrkbuf(80), 
 17509 ;; Return value:  Size  Location     Type
 17510 ;;                  2    0[BANK0 ] PTR unsigned char 
 17511 ;; Registers used:
 17512 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17513 ;; Tracked objects:
 17514 ;;		On entry : F/0
 17515 ;;		On exit  : 0/0
 17516 ;;		Unchanged: 0/0
 17517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17518 ;;      Params:         0       4       0       0       0       0       0
 17519 ;;      Locals:         0       2       0       0       0       0       0
 17520 ;;      Temps:          0       0       0       0       0       0       0
 17521 ;;      Totals:         0       6       0       0       0       0       0
 17522 ;;Total ram usage:        6 bytes
 17523 ;; Hardware stack levels used:    1
 17524 ;; Hardware stack levels required when called:    3
 17525 ;; This function calls:
 17526 ;;		Nothing
 17527 ;; This function is called by:
 17528 ;;		_printGUID
 17529 ;;		_printNodeFirmwareVersion
 17530 ;; This function uses a non-reentrant model
 17531 ;;
 17532                           
 17533                           	psect	text31
 17534  001572                     __ptext31:
 17535                           	opt stack 0
 17536  001572                     _strcat:
 17537                           	opt stack 24
 17538                           
 17539                           ; BSR set to: 0
 17540                           
 17541                           ;incstack = 0
 17542                           ;incstack = 0
 17543  001572  C060  F064         	movff	strcat@to,strcat@cp
 17544  001576  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17545  00157A  D002               	goto	l17032
 17546  00157C                     l17030:
 17547                           
 17548                           ; BSR set to: 0
 17549  00157C  4B64               	infsnz	strcat@cp& (0+255),f,b
 17550  00157E  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17551  001580                     l17032:
 17552                           
 17553                           ; BSR set to: 0
 17554  001580  C064  FFD9         	movff	strcat@cp,fsr2l
 17555  001584  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17556  001588  50DF               	movf	indf2,w,c
 17557  00158A  E006               	bz	l17036
 17558  00158C  D7F7               	goto	l17030
 17559  00158E                     l17034:
 17560  00158E  0100               	movlb	0	; () banked
 17561  001590  4B64               	infsnz	strcat@cp& (0+255),f,b
 17562  001592  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17563  001594  4B62               	infsnz	strcat@from& (0+255),f,b
 17564  001596  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17565  001598                     l17036:
 17566                           
 17567                           ; BSR set to: 0
 17568  001598  C062  FFF6         	movff	strcat@from,tblptrl
 17569  00159C  C063  FFF7         	movff	strcat@from+1,tblptrh
 17570  0015A0  6AF8               	clrf	tblptru,c
 17571  0015A2  C064  FFD9         	movff	strcat@cp,fsr2l
 17572  0015A6  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17573  0015AA  0E05               	movlw	(high __ramtop+-1)
 17574  0015AC  64F7               	cpfsgt	tblptrh,c
 17575  0015AE  D003               	bra	u23287
 17576  0015B0  0008               	tblrd		*
 17577  0015B2  50F5               	movf	tablat,w,c
 17578  0015B4  D005               	bra	u23280
 17579  0015B6                     u23287:
 17580  0015B6  CFF6 FFE9          	movff	tblptrl,fsr0l
 17581  0015BA  CFF7 FFEA          	movff	tblptrh,fsr0h
 17582  0015BE  50EF               	movf	indf0,w,c
 17583  0015C0                     u23280:
 17584  0015C0  6EDF               	movwf	indf2,c
 17585  0015C2  50DF               	movf	indf2,w,c
 17586  0015C4  B4D8               	btfsc	status,2,c
 17587  0015C6  0012               	return	
 17588  0015C8  D7E2               	goto	l17034
 17589  0015CA                     __end_of_strcat:
 17590                           	opt stack 0
 17591                           tblptru	equ	0xFF8
 17592                           tblptrh	equ	0xFF7
 17593                           tblptrl	equ	0xFF6
 17594                           tablat	equ	0xFF5
 17595                           prodh	equ	0xFF4
 17596                           prodl	equ	0xFF3
 17597                           intcon	equ	0xFF2
 17598                           indf0	equ	0xFEF
 17599                           postinc0	equ	0xFEE
 17600                           fsr0h	equ	0xFEA
 17601                           fsr0l	equ	0xFE9
 17602                           wreg	equ	0xFE8
 17603                           indf1	equ	0xFE7
 17604                           postinc1	equ	0xFE6
 17605                           postdec1	equ	0xFE5
 17606                           fsr1h	equ	0xFE2
 17607                           fsr1l	equ	0xFE1
 17608                           indf2	equ	0xFDF
 17609                           postinc2	equ	0xFDE
 17610                           postdec2	equ	0xFDD
 17611                           plusw2	equ	0xFDB
 17612                           fsr2h	equ	0xFDA
 17613                           fsr2l	equ	0xFD9
 17614                           status	equ	0xFD8
 17615                           
 17616 ;; *************** function _readRegister *****************
 17617 ;; Defined at:
 17618 ;;		line 2409 in file "main.c"
 17619 ;; Parameters:    Size  Location     Type
 17620 ;;  nodeid          1    wreg     unsigned char 
 17621 ;;  reg             1   88[BANK0 ] unsigned char 
 17622 ;;  timeout         2   89[BANK0 ] unsigned short 
 17623 ;;  value           1   91[BANK0 ] PTR unsigned char 
 17624 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17625 ;; Auto vars:     Size  Location     Type
 17626 ;;  nodeid          1   96[BANK0 ] unsigned char 
 17627 ;; Return value:  Size  Location     Type
 17628 ;;                  1    wreg      enum E15660
 17629 ;; Registers used:
 17630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17631 ;; Tracked objects:
 17632 ;;		On entry : F/0
 17633 ;;		On exit  : E/0
 17634 ;;		Unchanged: 0/0
 17635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17636 ;;      Params:         0       4       0       0       0       0       0
 17637 ;;      Locals:         0       1       0       0       0       0       0
 17638 ;;      Temps:          0       4       0       0       0       0       0
 17639 ;;      Totals:         0       9       0       0       0       0       0
 17640 ;;Total ram usage:        9 bytes
 17641 ;; Hardware stack levels used:    1
 17642 ;; Hardware stack levels required when called:    7
 17643 ;; This function calls:
 17644 ;;		_sendVSCPFrame
 17645 ;;		_getVSCPFrame
 17646 ;; This function is called by:
 17647 ;;		_findNodes
 17648 ;;		_printGUID
 17649 ;;		_printMDF
 17650 ;;		_printNodeFirmwareVersion
 17651 ;; This function uses a non-reentrant model
 17652 ;;
 17653                           
 17654                           	psect	text32
 17655  0022B8                     __ptext32:
 17656                           	opt stack 0
 17657  0022B8                     _readRegister:
 17658                           	opt stack 20
 17659                           
 17660                           ;incstack = 0
 17661                           ;incstack = 0
 17662                           ;readRegister@nodeid stored from wreg
 17663  0022B8  CFE8 F0C0          	movff	wreg,readRegister@nodeid
 17664                           
 17665                           ; BSR set to: 0
 17666                           ;main.c: 2410: vscpData[ 0 ] = nodeid;
 17667  0022BC  C0C0  F1E5         	movff	readRegister@nodeid,_vscpData
 17668                           
 17669                           ; BSR set to: 0
 17670                           ;main.c: 2411: vscpData[ 1 ] = reg;
 17671  0022C0  C0B8  F1E6         	movff	readRegister@reg,_vscpData+1
 17672                           
 17673                           ; BSR set to: 0
 17674                           ;main.c: 2413: if (sendVSCPFrame(0,
 17675                           ;main.c: 2414: 9,
 17676                           ;main.c: 2415: 0,
 17677                           ;main.c: 2416: 0,
 17678                           ;main.c: 2417: 2,
 17679                           ;main.c: 2418: vscpData)) {
 17680  0022C4  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17681  0022C6  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 17682  0022C8  0E09               	movlw	9
 17683  0022CA  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17684  0022CC  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17685  0022CE  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17686  0022D0  0E02               	movlw	2
 17687  0022D2  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17688  0022D4  0E01               	movlw	high _vscpData
 17689  0022D6  0100               	movlb	0	; () banked
 17690  0022D8  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17691  0022DA  0EE5               	movlw	low _vscpData
 17692  0022DC  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17693  0022DE  EC47  F010         	call	_sendVSCPFrame	;wreg free
 17694  0022E2  0900               	iorlw	0
 17695  0022E4  E049               	bz	l17024
 17696                           
 17697                           ;main.c: 2420: timekeeper = 0;
 17698  0022E6  0101               	movlb	1	; () banked
 17699  0022E8  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 17700  0022EA  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17701  0022EC  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17702  0022EE  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17703                           
 17704                           ;main.c: 2421: while (timekeeper < timeout) {
 17705  0022F0  D02C               	goto	l17022
 17706  0022F2                     l1138:
 17707                           
 17708                           ; BSR set to: 1
 17709  0022F2  0004               	clrwdt		;# 
 17710                           
 17711                           ;main.c: 2425: if (getVSCPFrame(&vscpClass,
 17712                           ;main.c: 2426: &vscpType,
 17713                           ;main.c: 2427: &vscpNodeId,
 17714                           ;main.c: 2428: &vscpPriority,
 17715                           ;main.c: 2429: &vscpSize,
 17716                           ;main.c: 2430: vscpData)) {
 17717  0022F4  0E3F               	movlw	low _vscpType
 17718  0022F6  0100               	movlb	0	; () banked
 17719  0022F8  6F73               	movwf	?_getVSCPFrame& (0+255),b
 17720  0022FA  0E3C               	movlw	low _vscpNodeId
 17721  0022FC  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17722  0022FE  0E3D               	movlw	low _vscpPriority
 17723  002300  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17724  002302  0E3E               	movlw	low _vscpSize
 17725  002304  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17726  002306  0E01               	movlw	high _vscpData
 17727  002308  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17728  00230A  0EE5               	movlw	low _vscpData
 17729  00230C  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17730  00230E  0E38               	movlw	_vscpClass& (0+255)
 17731  002310  EC42  F00D         	call	_getVSCPFrame
 17732  002314  0900               	iorlw	0
 17733  002316  E019               	bz	l17022
 17734                           
 17735                           ; BSR set to: 0
 17736                           ;main.c: 2431: if ((nodeid == vscpNodeId) &&
 17737                           ;main.c: 2432: (0 == vscpClass) &&
 17738                           ;main.c: 2433: (10 == vscpType) &&
 17739                           ;main.c: 2434: (2 == vscpSize) &&
 17740                           ;main.c: 2435: (reg == vscpData[ 0 ])) {
 17741  002318  503C               	movf	_vscpNodeId,w,c
 17742  00231A  63C0               	cpfseq	readRegister@nodeid& (0+255),b
 17743  00231C  D016               	goto	l17022
 17744                           
 17745                           ; BSR set to: 0
 17746  00231E  5039               	movf	_vscpClass+1,w,c
 17747  002320  1038               	iorwf	_vscpClass,w,c
 17748  002322  E113               	bnz	l17022
 17749                           
 17750                           ; BSR set to: 0
 17751  002324  503F               	movf	_vscpType,w,c
 17752  002326  0A0A               	xorlw	10
 17753  002328  E110               	bnz	l17022
 17754                           
 17755                           ; BSR set to: 0
 17756  00232A  503E               	movf	_vscpSize,w,c
 17757  00232C  0A02               	xorlw	2
 17758  00232E  E10D               	bnz	l17022
 17759                           
 17760                           ; BSR set to: 0
 17761  002330  0101               	movlb	1	; () banked
 17762  002332  51E5               	movf	_vscpData& (0+255),w,b
 17763  002334  0100               	movlb	0	; () banked
 17764  002336  63B8               	cpfseq	readRegister@reg& (0+255),b
 17765  002338  D008               	goto	l17022
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;main.c: 2436: *value = vscpData[ 1 ];
 17769  00233A  51BB               	movf	readRegister@value& (0+255),w,b
 17770  00233C  6ED9               	movwf	fsr2l,c
 17771  00233E  6ADA               	clrf	fsr2h,c
 17772  002340  0101               	movlb	1	; () banked
 17773  002342  C1E6  FFDF         	movff	_vscpData+1,indf2
 17774                           
 17775                           ; BSR set to: 1
 17776                           ;main.c: 2437: return 1;
 17777  002346  0E01               	movlw	1
 17778  002348  D018               	goto	l1141
 17779  00234A                     l17022:
 17780  00234A  0100               	movlb	0	; () banked
 17781  00234C  51B9               	movf	readRegister@timeout& (0+255),w,b
 17782  00234E  6FBC               	movwf	??_readRegister& (0+255),b
 17783  002350  51BA               	movf	(readRegister@timeout+1)& (0+255),w,b
 17784  002352  6FBD               	movwf	(??_readRegister+1)& (0+255),b
 17785  002354  6BBE               	clrf	(??_readRegister+2)& (0+255),b
 17786  002356  6BBF               	clrf	(??_readRegister+3)& (0+255),b
 17787  002358  51BC               	movf	??_readRegister& (0+255),w,b
 17788  00235A  0101               	movlb	1	; () banked
 17789  00235C  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 17790  00235E  0100               	movlb	0	; () banked
 17791  002360  51BD               	movf	(??_readRegister+1)& (0+255),w,b
 17792  002362  0101               	movlb	1	; () banked
 17793  002364  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17794  002366  0100               	movlb	0	; () banked
 17795  002368  51BE               	movf	(??_readRegister+2)& (0+255),w,b
 17796  00236A  0101               	movlb	1	; () banked
 17797  00236C  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17798  00236E  0100               	movlb	0	; () banked
 17799  002370  51BF               	movf	(??_readRegister+3)& (0+255),w,b
 17800  002372  0101               	movlb	1	; () banked
 17801  002374  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17802  002376  E3BD               	bnc	l1138
 17803  002378                     l17024:
 17804                           
 17805                           ;main.c: 2438: }
 17806                           ;main.c: 2439: }
 17807                           ;main.c: 2440: }
 17808                           ;main.c: 2441: }
 17809                           ;main.c: 2443: return 0;
 17810  002378  0E00               	movlw	0
 17811  00237A                     l1141:
 17812  00237A  0012               	return	
 17813  00237C                     __end_of_readRegister:
 17814                           	opt stack 0
 17815                           tblptru	equ	0xFF8
 17816                           tblptrh	equ	0xFF7
 17817                           tblptrl	equ	0xFF6
 17818                           tablat	equ	0xFF5
 17819                           prodh	equ	0xFF4
 17820                           prodl	equ	0xFF3
 17821                           intcon	equ	0xFF2
 17822                           indf0	equ	0xFEF
 17823                           postinc0	equ	0xFEE
 17824                           fsr0h	equ	0xFEA
 17825                           fsr0l	equ	0xFE9
 17826                           wreg	equ	0xFE8
 17827                           indf1	equ	0xFE7
 17828                           postinc1	equ	0xFE6
 17829                           postdec1	equ	0xFE5
 17830                           fsr1h	equ	0xFE2
 17831                           fsr1l	equ	0xFE1
 17832                           indf2	equ	0xFDF
 17833                           postinc2	equ	0xFDE
 17834                           postdec2	equ	0xFDD
 17835                           plusw2	equ	0xFDB
 17836                           fsr2h	equ	0xFDA
 17837                           fsr2l	equ	0xFD9
 17838                           status	equ	0xFD8
 17839                           
 17840 ;; *************** function _sendVSCPFrame *****************
 17841 ;; Defined at:
 17842 ;;		line 3140 in file "main.c"
 17843 ;; Parameters:    Size  Location     Type
 17844 ;;  vscpclass       2   56[BANK0 ] unsigned short 
 17845 ;;  vscptype        1   58[BANK0 ] unsigned char 
 17846 ;;  nodeid          1   59[BANK0 ] unsigned char 
 17847 ;;  priority        1   60[BANK0 ] unsigned char 
 17848 ;;  size            1   61[BANK0 ] unsigned char 
 17849 ;;  pData           2   62[BANK0 ] PTR unsigned char 
 17850 ;;		 -> vscpData(8), 
 17851 ;; Auto vars:     Size  Location     Type
 17852 ;;  id              4   84[BANK0 ] unsigned long 
 17853 ;; Return value:  Size  Location     Type
 17854 ;;                  1    wreg      unsigned char 
 17855 ;; Registers used:
 17856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17857 ;; Tracked objects:
 17858 ;;		On entry : F/0
 17859 ;;		On exit  : E/0
 17860 ;;		Unchanged: 0/0
 17861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17862 ;;      Params:         0       8       0       0       0       0       0
 17863 ;;      Locals:         0       4       0       0       0       0       0
 17864 ;;      Temps:          0      20       0       0       0       0       0
 17865 ;;      Totals:         0      32       0       0       0       0       0
 17866 ;;Total ram usage:       32 bytes
 17867 ;; Hardware stack levels used:    1
 17868 ;; Hardware stack levels required when called:    6
 17869 ;; This function calls:
 17870 ;;		_sendCANFrame
 17871 ;; This function is called by:
 17872 ;;		_doModeVerbose
 17873 ;;		_readRegister
 17874 ;;		_readRegisterExtended
 17875 ;;		_writeRegisterExtended
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           	psect	text33
 17880  00208E                     __ptext33:
 17881                           	opt stack 0
 17882  00208E                     _sendVSCPFrame:
 17883                           	opt stack 20
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;main.c: 3141: uint32_t id = ((uint32_t) priority << 26) |
 17887                           ;main.c: 3142: ((uint32_t) vscpclass << 16) |
 17888                           ;main.c: 3143: ((uint32_t) vscptype << 8) |
 17889                           ;main.c: 3144: nodeid;
 17890                           
 17891                           ;incstack = 0
 17892                           ;incstack = 0
 17893  00208E  C09A  F0A0         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17894  002092  6BA1               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17895  002094  6BA2               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17896  002096  6BA3               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17897  002098  C0A2  F0A3         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17898  00209C  C0A1  F0A2         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17899  0020A0  C0A0  F0A1         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17900  0020A4  6BA0               	clrf	??_sendVSCPFrame& (0+255),b
 17901  0020A6  5198               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17902  0020A8  6FA4               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17903  0020AA  5199               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17904  0020AC  6FA5               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17905  0020AE  6BA6               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17906  0020B0  6BA7               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17907  0020B2  C0A5  F0A7         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17908  0020B6  C0A4  F0A6         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17909  0020BA  6BA5               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17910  0020BC  6BA4               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17911  0020BE  C09C  F0A8         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17912  0020C2  6BA9               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17913  0020C4  6BAA               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17914  0020C6  6BAB               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17915  0020C8  0E1A               	movlw	26
 17916  0020CA                     u21015:
 17917  0020CA  90D8               	bcf	status,0,c
 17918  0020CC  37A8               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17919  0020CE  37A9               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17920  0020D0  37AA               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17921  0020D2  37AB               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17922  0020D4  2EE8               	decfsz	wreg,f,c
 17923  0020D6  D7F9               	goto	u21015
 17924  0020D8  51A4               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17925  0020DA  11A8               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17926  0020DC  6FAC               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17927  0020DE  51A5               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17928  0020E0  11A9               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17929  0020E2  6FAD               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17930  0020E4  51A6               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17931  0020E6  11AA               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17932  0020E8  6FAE               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17933  0020EA  51A7               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17934  0020EC  11AB               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17935  0020EE  6FAF               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17936  0020F0  51A0               	movf	??_sendVSCPFrame& (0+255),w,b
 17937  0020F2  11AC               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17938  0020F4  6FB0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17939  0020F6  51A1               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17940  0020F8  11AD               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17941  0020FA  6FB1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17942  0020FC  51A2               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17943  0020FE  11AE               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17944  002100  6FB2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17945  002102  51A3               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17946  002104  11AF               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17947  002106  6FB3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17948  002108  519B               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17949  00210A  11B0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17950  00210C  6FB4               	movwf	sendVSCPFrame@id& (0+255),b
 17951  00210E  51B1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17952  002110  6FB5               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17953  002112  51B2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17954  002114  6FB6               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17955  002116  51B3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17956  002118  6FB7               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17957                           
 17958                           ; BSR set to: 0
 17959                           ;main.c: 3146: if (!sendCANFrame(id, size, pData)) {
 17960  00211A  C0B4  F091         	movff	sendVSCPFrame@id,?_sendCANFrame
 17961  00211E  C0B5  F092         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17962  002122  C0B6  F093         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17963  002126  C0B7  F094         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17964  00212A  C09D  F095         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17965  00212E  C09E  F096         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17966  002132  C09F  F097         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17967  002136  ECD5  F008         	call	_sendCANFrame	;wreg free
 17968  00213A  0900               	iorlw	0
 17969                           
 17970                           ;main.c: 3148: return 0;
 17971  00213C  0E00               	movlw	0
 17972  00213E  A4D8               	btfss	status,2,c
 17973                           
 17974                           ;main.c: 3149: }
 17975                           ;main.c: 3151: return 1;
 17976  002140  0E01               	movlw	1
 17977  002142  0012               	return	
 17978  002144                     __end_of_sendVSCPFrame:
 17979                           	opt stack 0
 17980                           tblptru	equ	0xFF8
 17981                           tblptrh	equ	0xFF7
 17982                           tblptrl	equ	0xFF6
 17983                           tablat	equ	0xFF5
 17984                           prodh	equ	0xFF4
 17985                           prodl	equ	0xFF3
 17986                           intcon	equ	0xFF2
 17987                           indf0	equ	0xFEF
 17988                           postinc0	equ	0xFEE
 17989                           fsr0h	equ	0xFEA
 17990                           fsr0l	equ	0xFE9
 17991                           wreg	equ	0xFE8
 17992                           indf1	equ	0xFE7
 17993                           postinc1	equ	0xFE6
 17994                           postdec1	equ	0xFE5
 17995                           fsr1h	equ	0xFE2
 17996                           fsr1l	equ	0xFE1
 17997                           indf2	equ	0xFDF
 17998                           postinc2	equ	0xFDE
 17999                           postdec2	equ	0xFDD
 18000                           plusw2	equ	0xFDB
 18001                           fsr2h	equ	0xFDA
 18002                           fsr2l	equ	0xFD9
 18003                           status	equ	0xFD8
 18004                           
 18005 ;; *************** function _sendCANFrame *****************
 18006 ;; Defined at:
 18007 ;;		line 3186 in file "main.c"
 18008 ;; Parameters:    Size  Location     Type
 18009 ;;  id              4   49[BANK0 ] unsigned long 
 18010 ;;  dlc             1   53[BANK0 ] unsigned char 
 18011 ;;  pdata           2   54[BANK0 ] PTR unsigned char 
 18012 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 18013 ;; Auto vars:     Size  Location     Type
 18014 ;;		None
 18015 ;; Return value:  Size  Location     Type
 18016 ;;                  1    wreg      unsigned char 
 18017 ;; Registers used:
 18018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18019 ;; Tracked objects:
 18020 ;;		On entry : F/0
 18021 ;;		On exit  : E/0
 18022 ;;		Unchanged: 0/0
 18023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18024 ;;      Params:         0       7       0       0       0       0       0
 18025 ;;      Locals:         0       0       0       0       0       0       0
 18026 ;;      Temps:          0       0       0       0       0       0       0
 18027 ;;      Totals:         0       7       0       0       0       0       0
 18028 ;;Total ram usage:        7 bytes
 18029 ;; Hardware stack levels used:    1
 18030 ;; Hardware stack levels required when called:    5
 18031 ;; This function calls:
 18032 ;;		_ECANSendMessage
 18033 ;; This function is called by:
 18034 ;;		_doModeSLCAN
 18035 ;;		_receiveVSCPModeCanalMsg
 18036 ;;		_sendVSCPFrame
 18037 ;; This function uses a non-reentrant model
 18038 ;;
 18039                           
 18040                           	psect	text34
 18041  0011AA                     __ptext34:
 18042                           	opt stack 0
 18043  0011AA                     _sendCANFrame:
 18044                           	opt stack 23
 18045                           
 18046                           ; BSR set to: 0
 18047                           ;main.c: 3187: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 18048                           
 18049                           ;incstack = 0
 18050                           ;incstack = 0
 18051  0011AA  C091  F06C         	movff	sendCANFrame@id,?_ECANSendMessage
 18052  0011AE  C092  F06D         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 18053  0011B2  C093  F06E         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 18054  0011B6  C094  F06F         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 18055  0011BA  C096  F070         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 18056  0011BE  C097  F071         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 18057  0011C2  C095  F072         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 18058  0011C6  0E20               	movlw	32
 18059  0011C8  6F73               	movwf	(?_ECANSendMessage+7)& (0+255),b
 18060  0011CA  EC30  F019         	call	_ECANSendMessage	;wreg free
 18061  0011CE  0900               	iorlw	0
 18062  0011D0  E107               	bnz	l16870
 18063                           
 18064                           ; BSR set to: 0
 18065                           ;main.c: 3189: can_transmitOverruns++;
 18066  0011D2  0101               	movlb	1	; () banked
 18067  0011D4  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 18068  0011D6  0E00               	movlw	0
 18069  0011D8  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 18070  0011DA  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 18071  0011DC  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 18072                           
 18073                           ; BSR set to: 1
 18074                           ;main.c: 3190: return 0;
 18075  0011DE  D001               	goto	l1339
 18076  0011E0                     l16870:
 18077                           
 18078                           ; BSR set to: 0
 18079                           ;main.c: 3191: }
 18080                           ;main.c: 3193: return 1;
 18081  0011E0  0E01               	movlw	1
 18082  0011E2                     l1339:
 18083  0011E2  0012               	return	
 18084  0011E4                     __end_of_sendCANFrame:
 18085                           	opt stack 0
 18086                           tblptru	equ	0xFF8
 18087                           tblptrh	equ	0xFF7
 18088                           tblptrl	equ	0xFF6
 18089                           tablat	equ	0xFF5
 18090                           prodh	equ	0xFF4
 18091                           prodl	equ	0xFF3
 18092                           intcon	equ	0xFF2
 18093                           indf0	equ	0xFEF
 18094                           postinc0	equ	0xFEE
 18095                           fsr0h	equ	0xFEA
 18096                           fsr0l	equ	0xFE9
 18097                           wreg	equ	0xFE8
 18098                           indf1	equ	0xFE7
 18099                           postinc1	equ	0xFE6
 18100                           postdec1	equ	0xFE5
 18101                           fsr1h	equ	0xFE2
 18102                           fsr1l	equ	0xFE1
 18103                           indf2	equ	0xFDF
 18104                           postinc2	equ	0xFDE
 18105                           postdec2	equ	0xFDD
 18106                           plusw2	equ	0xFDB
 18107                           fsr2h	equ	0xFDA
 18108                           fsr2l	equ	0xFD9
 18109                           status	equ	0xFD8
 18110                           
 18111 ;; *************** function _ECANSendMessage *****************
 18112 ;; Defined at:
 18113 ;;		line 617 in file "ECAN.c"
 18114 ;; Parameters:    Size  Location     Type
 18115 ;;  id              4   12[BANK0 ] unsigned long 
 18116 ;;  data            2   16[BANK0 ] PTR unsigned char 
 18117 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 18118 ;;  dataLen         1   18[BANK0 ] unsigned char 
 18119 ;;  msgFlags        1   19[BANK0 ] enum E16315
 18120 ;; Auto vars:     Size  Location     Type
 18121 ;;  pb             18   21[BANK0 ] PTR unsigned char [9]
 18122 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18123 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18124 ;;		 -> B0CON(1), 
 18125 ;;  ptr             2   47[BANK0 ] PTR unsigned char 
 18126 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18127 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18128 ;;		 -> B0CON(1), 
 18129 ;;  tempPtr         2   43[BANK0 ] PTR unsigned char 
 18130 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18131 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18132 ;;		 -> B0CON(1), 
 18133 ;;  i               1   46[BANK0 ] unsigned char 
 18134 ;;  temp            1   45[BANK0 ] unsigned char 
 18135 ;;  tempBSEL0       1   42[BANK0 ] struct .
 18136 ;;  j               1   41[BANK0 ] unsigned char 
 18137 ;;  buffers         1   40[BANK0 ] unsigned char 
 18138 ;;  mode            1   39[BANK0 ] unsigned char 
 18139 ;; Return value:  Size  Location     Type
 18140 ;;                  1    wreg      enum E15660
 18141 ;; Registers used:
 18142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18143 ;; Tracked objects:
 18144 ;;		On entry : F/0
 18145 ;;		On exit  : F/0
 18146 ;;		Unchanged: 0/0
 18147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18148 ;;      Params:         0       8       0       0       0       0       0
 18149 ;;      Locals:         0      28       0       0       0       0       0
 18150 ;;      Temps:          0       1       0       0       0       0       0
 18151 ;;      Totals:         0      37       0       0       0       0       0
 18152 ;;Total ram usage:       37 bytes
 18153 ;; Hardware stack levels used:    1
 18154 ;; Hardware stack levels required when called:    4
 18155 ;; This function calls:
 18156 ;;		__CANIDToRegs
 18157 ;; This function is called by:
 18158 ;;		_sendCANFrame
 18159 ;; This function uses a non-reentrant model
 18160 ;;
 18161                           
 18162                           	psect	text35
 18163  003260                     __ptext35:
 18164                           	opt stack 0
 18165  003260                     _ECANSendMessage:
 18166                           	opt stack 23
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;ECAN.c: 619: BYTE mode;
 18170                           ;ECAN.c: 620: BYTE buffers;
 18171                           ;ECAN.c: 628: BYTE i,j;
 18172                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 18173                           ;ECAN.c: 630: BYTE* pb[9];
 18174                           ;ECAN.c: 631: BYTE temp;
 18175                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 18176                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 18177                           
 18178                           ;incstack = 0
 18179                           ;incstack = 0
 18180  003260  0E0F               	movlw	15	;volatile
 18181  003262  0100               	movlb	0	; () banked
 18182  003264  6F76               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 18183  003266  0E40               	movlw	64	;volatile
 18184  003268  6F75               	movwf	ECANSendMessage@pb& (0+255),b
 18185                           
 18186                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 18187  00326A  0E0F               	movlw	15	;volatile
 18188  00326C  6F78               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 18189  00326E  0E30               	movlw	48	;volatile
 18190  003270  6F77               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 18191                           
 18192                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 18193  003272  0E0F               	movlw	15	;volatile
 18194  003274  6F7A               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 18195  003276  0E20               	movlw	32	;volatile
 18196  003278  6F79               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 18197                           
 18198                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 18199  00327A  0E0E               	movlw	14	;volatile
 18200  00327C  6F7C               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 18201  00327E  0E20               	movlw	32	;volatile
 18202  003280  6F7B               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 18203                           
 18204                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 18205  003282  0E0E               	movlw	14	;volatile
 18206  003284  6F7E               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 18207  003286  0E30               	movlw	48	;volatile
 18208  003288  6F7D               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 18209                           
 18210                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 18211  00328A  0E0E               	movlw	14	;volatile
 18212  00328C  6F80               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 18213  00328E  0E40               	movlw	64	;volatile
 18214  003290  6F7F               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 18215                           
 18216                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 18217  003292  0E0E               	movlw	14	;volatile
 18218  003294  6F82               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 18219  003296  0E50               	movlw	80	;volatile
 18220  003298  6F81               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 18221                           
 18222                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 18223  00329A  0E0E               	movlw	14	;volatile
 18224  00329C  6F84               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 18225  00329E  0E60               	movlw	96	;volatile
 18226  0032A0  6F83               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 18227                           
 18228                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 18229  0032A2  0E0E               	movlw	14	;volatile
 18230  0032A4  6F86               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 18231  0032A6  0E70               	movlw	112	;volatile
 18232  0032A8  6F85               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 18233                           
 18234                           ; BSR set to: 0
 18235                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 18236  0032AA  5077               	movf	3959,w,c	;volatile
 18237  0032AC  0BC0               	andlw	192
 18238  0032AE  6F87               	movwf	ECANSendMessage@mode& (0+255),b
 18239                           
 18240                           ; BSR set to: 0
 18241                           ;ECAN.c: 660: if ( mode == 0x00 )
 18242  0032B0  6787               	tstfsz	ECANSendMessage@mode& (0+255),b
 18243  0032B2  D002               	goto	l13564
 18244                           
 18245                           ; BSR set to: 0
 18246                           ;ECAN.c: 661: buffers = 2;
 18247  0032B4  0E02               	movlw	2
 18248  0032B6  D001               	goto	L19
 18249  0032B8                     l13564:
 18250                           
 18251                           ; BSR set to: 0
 18252                           ;ECAN.c: 662: else
 18253                           ;ECAN.c: 663: buffers = 8;
 18254  0032B8  0E08               	movlw	8
 18255  0032BA                     L19:
 18256  0032BA  6F88               	movwf	ECANSendMessage@buffers& (0+255),b
 18257                           
 18258                           ; BSR set to: 0
 18259                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 18260  0032BC  010D               	movlb	13	; () banked
 18261  0032BE  90D8               	bcf	status,0,c
 18262  0032C0  31F8               	rrcf	248,w,b	;volatile
 18263  0032C2  0100               	movlb	0	; () banked
 18264  0032C4  6F8A               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 18265                           
 18266                           ; BSR set to: 0
 18267                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 18268  0032C6  6B8E               	clrf	ECANSendMessage@i& (0+255),b
 18269  0032C8  D07D               	goto	l13624
 18270  0032CA                     l13570:
 18271                           
 18272                           ; BSR set to: 0
 18273                           ;ECAN.c: 688: {
 18274                           ;ECAN.c: 693: ptr = pb[i];
 18275  0032CA  518E               	movf	ECANSendMessage@i& (0+255),w,b
 18276  0032CC  0D02               	mullw	2
 18277  0032CE  50F3               	movf	prodl,w,c
 18278  0032D0  0F75               	addlw	low ECANSendMessage@pb
 18279  0032D2  6ED9               	movwf	fsr2l,c
 18280  0032D4  6ADA               	clrf	fsr2h,c
 18281  0032D6  CFDE F08F          	movff	postinc2,ECANSendMessage@ptr
 18282  0032DA  CFDD F090          	movff	postdec2,ECANSendMessage@ptr+1
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;ECAN.c: 694: tempPtr = ptr;
 18286  0032DE  C08F  F08B         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 18287  0032E2  C090  F08C         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 18288                           
 18289                           ; BSR set to: 0
 18290                           ;ECAN.c: 702: if ( i > 2 )
 18291  0032E6  0E02               	movlw	2
 18292  0032E8  658E               	cpfsgt	ECANSendMessage@i& (0+255),b
 18293  0032EA  D004               	goto	l13582
 18294                           
 18295                           ; BSR set to: 0
 18296                           ;ECAN.c: 703: {
 18297                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 18298  0032EC  90D8               	bcf	status,0,c
 18299  0032EE  338A               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 18300                           
 18301                           ; BSR set to: 0
 18302                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 18303  0032F0  A18A               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 18304  0032F2  D067               	goto	l13622
 18305  0032F4                     l13582:
 18306                           
 18307                           ; BSR set to: 0
 18308                           ;ECAN.c: 714: }
 18309                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 18310  0032F4  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18311  0032F8  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18312  0032FC  50DF               	movf	indf2,w,c
 18313  0032FE  6F74               	movwf	??_ECANSendMessage& (0+255),b
 18314  003300  B774               	btfsc	??_ECANSendMessage& (0+255),3,b
 18315  003302  D05F               	goto	l13622
 18316                           
 18317                           ; BSR set to: 0
 18318                           ;ECAN.c: 721: {
 18319                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 18320  003304  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18321  003308  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18322  00330C  0EFC               	movlw	252
 18323  00330E  16DF               	andwf	indf2,f,c
 18324                           
 18325                           ; BSR set to: 0
 18326                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 18327  003310  C073  F074         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 18328  003314  0E03               	movlw	3
 18329  003316  1774               	andwf	??_ECANSendMessage& (0+255),f,b
 18330  003318  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18331  00331C  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18332  003320  5174               	movf	??_ECANSendMessage& (0+255),w,b
 18333  003322  12DF               	iorwf	indf2,f,c
 18334                           
 18335                           ; BSR set to: 0
 18336                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 18337  003324  AD73               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 18338  003326  D004               	goto	l1507
 18339                           
 18340                           ; BSR set to: 0
 18341                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 18342  003328  5172               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18343  00332A  0940               	iorlw	64
 18344  00332C  6F8D               	movwf	ECANSendMessage@temp& (0+255),b
 18345  00332E  D002               	goto	l13592
 18346  003330                     l1507:
 18347                           
 18348                           ; BSR set to: 0
 18349                           ;ECAN.c: 729: else
 18350                           ;ECAN.c: 730: temp = dataLen;
 18351  003330  C072  F08D         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 18352  003334                     l13592:
 18353                           
 18354                           ; BSR set to: 0
 18355                           ;ECAN.c: 732: *(ptr+5) = temp;
 18356  003334  EE20 F005          	lfsr	2,5
 18357  003338  518F               	movf	ECANSendMessage@ptr& (0+255),w,b
 18358  00333A  26D9               	addwf	fsr2l,f,c
 18359  00333C  5190               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 18360  00333E  22DA               	addwfc	fsr2h,f,c
 18361  003340  C08D  FFDF         	movff	ECANSendMessage@temp,indf2
 18362                           
 18363                           ; BSR set to: 0
 18364                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 18365  003344  AB73               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 18366  003346  D003               	goto	l1509
 18367                           
 18368                           ; BSR set to: 0
 18369                           ;ECAN.c: 736: temp = 1;
 18370  003348  0E01               	movlw	1
 18371  00334A  6F8D               	movwf	ECANSendMessage@temp& (0+255),b
 18372  00334C  D001               	goto	l13598
 18373  00334E                     l1509:
 18374                           
 18375                           ; BSR set to: 0
 18376                           ;ECAN.c: 738: else
 18377                           ;ECAN.c: 739: temp = 0;
 18378  00334E  6B8D               	clrf	ECANSendMessage@temp& (0+255),b
 18379  003350                     l13598:
 18380                           
 18381                           ; BSR set to: 0
 18382                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 18383  003350  298F               	incf	ECANSendMessage@ptr& (0+255),w,b
 18384  003352  6F62               	movwf	?__CANIDToRegs& (0+255),b
 18385  003354  0E00               	movlw	0
 18386  003356  2190               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 18387  003358  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 18388  00335A  C06C  F064         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 18389  00335E  C06D  F065         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 18390  003362  C06E  F066         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 18391  003366  C06F  F067         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 18392  00336A  C08D  F068         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 18393  00336E  EC42  F016         	call	__CANIDToRegs	;wreg free
 18394                           
 18395                           ; BSR set to: 0
 18396                           ;ECAN.c: 745: ptr += 6;
 18397  003372  0E06               	movlw	6
 18398  003374  278F               	addwf	ECANSendMessage@ptr& (0+255),f,b
 18399  003376  0E00               	movlw	0
 18400  003378  2390               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 18401                           
 18402                           ; BSR set to: 0
 18403                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 18404  00337A  6B89               	clrf	ECANSendMessage@j& (0+255),b
 18405  00337C  D00F               	goto	l13612
 18406  00337E                     l13604:
 18407                           
 18408                           ; BSR set to: 0
 18409                           ;ECAN.c: 748: *ptr++ = *data++;
 18410  00337E  C070  FFD9         	movff	ECANSendMessage@data,fsr2l
 18411  003382  C071  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 18412  003386  C08F  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 18413  00338A  C090  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 18414  00338E  CFDF FFE7          	movff	indf2,indf1
 18415                           
 18416                           ; BSR set to: 0
 18417  003392  4B70               	infsnz	ECANSendMessage@data& (0+255),f,b
 18418  003394  2B71               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 18419                           
 18420                           ; BSR set to: 0
 18421  003396  4B8F               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 18422  003398  2B90               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 18423                           
 18424                           ; BSR set to: 0
 18425  00339A  2B89               	incf	ECANSendMessage@j& (0+255),f,b
 18426  00339C                     l13612:
 18427                           
 18428                           ; BSR set to: 0
 18429  00339C  5172               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18430  00339E  5D89               	subwf	ECANSendMessage@j& (0+255),w,b
 18431  0033A0  E3EE               	bnc	l13604
 18432                           
 18433                           ; BSR set to: 0
 18434                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 18435  0033A2  C08B  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18436  0033A6  C08C  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18437  0033AA  50DF               	movf	indf2,w,c
 18438  0033AC  6F74               	movwf	??_ECANSendMessage& (0+255),b
 18439  0033AE  B574               	btfsc	??_ECANSendMessage& (0+255),2,b
 18440  0033B0  D006               	goto	l13618
 18441                           
 18442                           ; BSR set to: 0
 18443                           ;ECAN.c: 753: *tempPtr |= 0x08;
 18444  0033B2  C08B  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18445  0033B6  C08C  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18446  0033BA  0E00               	movlw	0
 18447  0033BC  86DB               	bsf	plusw2,3,c
 18448  0033BE                     l13618:
 18449                           
 18450                           ; BSR set to: 0
 18451                           ;ECAN.c: 755: return TRUE;
 18452  0033BE  0E01               	movlw	1
 18453  0033C0  D005               	goto	l1515
 18454  0033C2                     l13622:
 18455                           
 18456                           ; BSR set to: 0
 18457  0033C2  2B8E               	incf	ECANSendMessage@i& (0+255),f,b
 18458  0033C4                     l13624:
 18459                           
 18460                           ; BSR set to: 0
 18461  0033C4  5188               	movf	ECANSendMessage@buffers& (0+255),w,b
 18462  0033C6  5D8E               	subwf	ECANSendMessage@i& (0+255),w,b
 18463  0033C8  E380               	bnc	l13570
 18464                           
 18465                           ; BSR set to: 0
 18466                           ;ECAN.c: 756: }
 18467                           ;ECAN.c: 757: }
 18468                           ;ECAN.c: 760: return FALSE;
 18469  0033CA  0E00               	movlw	0
 18470  0033CC                     l1515:
 18471                           
 18472                           ; BSR set to: 0
 18473  0033CC  0012               	return	
 18474  0033CE                     __end_of_ECANSendMessage:
 18475                           	opt stack 0
 18476                           tblptru	equ	0xFF8
 18477                           tblptrh	equ	0xFF7
 18478                           tblptrl	equ	0xFF6
 18479                           tablat	equ	0xFF5
 18480                           prodh	equ	0xFF4
 18481                           prodl	equ	0xFF3
 18482                           intcon	equ	0xFF2
 18483                           indf0	equ	0xFEF
 18484                           postinc0	equ	0xFEE
 18485                           fsr0h	equ	0xFEA
 18486                           fsr0l	equ	0xFE9
 18487                           wreg	equ	0xFE8
 18488                           indf1	equ	0xFE7
 18489                           postinc1	equ	0xFE6
 18490                           postdec1	equ	0xFE5
 18491                           fsr1h	equ	0xFE2
 18492                           fsr1l	equ	0xFE1
 18493                           indf2	equ	0xFDF
 18494                           postinc2	equ	0xFDE
 18495                           postdec2	equ	0xFDD
 18496                           plusw2	equ	0xFDB
 18497                           fsr2h	equ	0xFDA
 18498                           fsr2l	equ	0xFD9
 18499                           status	equ	0xFD8
 18500                           
 18501 ;; *************** function _memset *****************
 18502 ;; Defined at:
 18503 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18504 ;; Parameters:    Size  Location     Type
 18505 ;;  p1              2    0[BANK0 ] PTR void 
 18506 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18507 ;;  c               2    2[BANK0 ] int 
 18508 ;;  n               2    4[BANK0 ] unsigned int 
 18509 ;; Auto vars:     Size  Location     Type
 18510 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18511 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18512 ;; Return value:  Size  Location     Type
 18513 ;;                  2    0[BANK0 ] PTR void 
 18514 ;; Registers used:
 18515 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18516 ;; Tracked objects:
 18517 ;;		On entry : F/0
 18518 ;;		On exit  : F/0
 18519 ;;		Unchanged: 0/0
 18520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18521 ;;      Params:         0       6       0       0       0       0       0
 18522 ;;      Locals:         0       2       0       0       0       0       0
 18523 ;;      Temps:          0       0       0       0       0       0       0
 18524 ;;      Totals:         0       8       0       0       0       0       0
 18525 ;;Total ram usage:        8 bytes
 18526 ;; Hardware stack levels used:    1
 18527 ;; Hardware stack levels required when called:    3
 18528 ;; This function calls:
 18529 ;;		Nothing
 18530 ;; This function is called by:
 18531 ;;		_doModeVerbose
 18532 ;;		_doModeSLCAN
 18533 ;;		_printGUID
 18534 ;;		_printMDF
 18535 ;;		_printNodeFirmwareVersion
 18536 ;; This function uses a non-reentrant model
 18537 ;;
 18538                           
 18539                           	psect	text36
 18540  00104A                     __ptext36:
 18541                           	opt stack 0
 18542  00104A                     _memset:
 18543                           	opt stack 25
 18544                           
 18545                           ; BSR set to: 0
 18546                           
 18547                           ; BSR set to: 0
 18548                           ;incstack = 0
 18549                           ;incstack = 0
 18550  00104A  C060  F066         	movff	memset@p1,memset@p
 18551  00104E  C061  F067         	movff	memset@p1+1,memset@p+1
 18552  001052  D008               	goto	l15662
 18553  001054                     l15658:
 18554                           
 18555                           ; BSR set to: 0
 18556  001054  C066  FFD9         	movff	memset@p,fsr2l
 18557  001058  C067  FFDA         	movff	memset@p+1,fsr2h
 18558  00105C  C062  FFDF         	movff	memset@c,indf2
 18559                           
 18560                           ; BSR set to: 0
 18561  001060  4B66               	infsnz	memset@p& (0+255),f,b
 18562  001062  2B67               	incf	(memset@p+1)& (0+255),f,b
 18563  001064                     l15662:
 18564                           
 18565                           ; BSR set to: 0
 18566  001064  0764               	decf	memset@n& (0+255),f,b
 18567  001066  A0D8               	btfss	status,0,c
 18568  001068  0765               	decf	(memset@n+1)& (0+255),f,b
 18569  00106A  0100               	movlb	0	; () banked
 18570  00106C  2964               	incf	memset@n& (0+255),w,b
 18571  00106E  B4D8               	btfsc	status,2,c
 18572  001070  2965               	incf	(memset@n+1)& (0+255),w,b
 18573  001072  B4D8               	btfsc	status,2,c
 18574                           
 18575                           ; BSR set to: 0
 18576  001074  0012               	return	
 18577  001076  D7EE               	goto	l15658
 18578  001078                     __end_of_memset:
 18579                           	opt stack 0
 18580                           tblptru	equ	0xFF8
 18581                           tblptrh	equ	0xFF7
 18582                           tblptrl	equ	0xFF6
 18583                           tablat	equ	0xFF5
 18584                           prodh	equ	0xFF4
 18585                           prodl	equ	0xFF3
 18586                           intcon	equ	0xFF2
 18587                           indf0	equ	0xFEF
 18588                           postinc0	equ	0xFEE
 18589                           fsr0h	equ	0xFEA
 18590                           fsr0l	equ	0xFE9
 18591                           wreg	equ	0xFE8
 18592                           indf1	equ	0xFE7
 18593                           postinc1	equ	0xFE6
 18594                           postdec1	equ	0xFE5
 18595                           fsr1h	equ	0xFE2
 18596                           fsr1l	equ	0xFE1
 18597                           indf2	equ	0xFDF
 18598                           postinc2	equ	0xFDE
 18599                           postdec2	equ	0xFDD
 18600                           plusw2	equ	0xFDB
 18601                           fsr2h	equ	0xFDA
 18602                           fsr2l	equ	0xFD9
 18603                           status	equ	0xFD8
 18604                           
 18605 ;; *************** function _printHelp *****************
 18606 ;; Defined at:
 18607 ;;		line 2753 in file "main.c"
 18608 ;; Parameters:    Size  Location     Type
 18609 ;;		None
 18610 ;; Auto vars:     Size  Location     Type
 18611 ;;		None
 18612 ;; Return value:  Size  Location     Type
 18613 ;;		None               void
 18614 ;; Registers used:
 18615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18616 ;; Tracked objects:
 18617 ;;		On entry : F/0
 18618 ;;		On exit  : 0/0
 18619 ;;		Unchanged: 0/0
 18620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18621 ;;      Params:         0       0       0       0       0       0       0
 18622 ;;      Locals:         0       0       0       0       0       0       0
 18623 ;;      Temps:          0       0       0       0       0       0       0
 18624 ;;      Totals:         0       0       0       0       0       0       0
 18625 ;;Total ram usage:        0 bytes
 18626 ;; Hardware stack levels used:    1
 18627 ;; Hardware stack levels required when called:    5
 18628 ;; This function calls:
 18629 ;;		_putsUSART
 18630 ;; This function is called by:
 18631 ;;		_doModeVerbose
 18632 ;; This function uses a non-reentrant model
 18633 ;;
 18634                           
 18635                           	psect	text37
 18636  003882                     __ptext37:
 18637                           	opt stack 0
 18638  003882                     _printHelp:
 18639                           	opt stack 23
 18640                           
 18641                           ; BSR set to: 0
 18642                           ;main.c: 2754: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;incstack = 0
 18646                           ;incstack = 0
 18647  003882  0E74               	movlw	high STR_236
 18648  003884  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18649  003886  0EC6               	movlw	low STR_236
 18650  003888  6F61               	movwf	?_putsUSART& (0+255),b
 18651  00388A  EC8D  F00A         	call	_putsUSART	;wreg free
 18652                           
 18653                           ;main.c: 2755: putsUSART((char *) "------------------------------------\r\n");
 18654  00388E  0E6D               	movlw	high (STR_269+28)
 18655  003890  0100               	movlb	0	; () banked
 18656  003892  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18657  003894  0ECE               	movlw	low (STR_269+28)
 18658  003896  6F61               	movwf	?_putsUSART& (0+255),b
 18659  003898  EC8D  F00A         	call	_putsUSART	;wreg free
 18660                           
 18661                           ;main.c: 2756: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18662  00389C  0E77               	movlw	high STR_238
 18663  00389E  0100               	movlb	0	; () banked
 18664  0038A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18665  0038A2  0EE2               	movlw	low STR_238
 18666  0038A4  6F61               	movwf	?_putsUSART& (0+255),b
 18667  0038A6  EC8D  F00A         	call	_putsUSART	;wreg free
 18668                           
 18669                           ;main.c: 2757: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18670  0038AA  0E73               	movlw	high STR_239
 18671  0038AC  0100               	movlb	0	; () banked
 18672  0038AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18673  0038B0  0E2C               	movlw	low STR_239
 18674  0038B2  6F61               	movwf	?_putsUSART& (0+255),b
 18675  0038B4  EC8D  F00A         	call	_putsUSART	;wreg free
 18676                           
 18677                           ;main.c: 2758: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18678  0038B8  0E72               	movlw	high STR_240
 18679  0038BA  0100               	movlb	0	; () banked
 18680  0038BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18681  0038BE  0ED2               	movlw	low STR_240
 18682  0038C0  6F61               	movwf	?_putsUSART& (0+255),b
 18683  0038C2  EC8D  F00A         	call	_putsUSART	;wreg free
 18684                           
 18685                           ;main.c: 2759: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18686  0038C6  0E71               	movlw	high STR_241
 18687  0038C8  0100               	movlb	0	; () banked
 18688  0038CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18689  0038CC  0E4B               	movlw	low STR_241
 18690  0038CE  6F61               	movwf	?_putsUSART& (0+255),b
 18691  0038D0  EC8D  F00A         	call	_putsUSART	;wreg free
 18692                           
 18693                           ;main.c: 2760: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18694  0038D4  0E71               	movlw	high STR_242
 18695  0038D6  0100               	movlb	0	; () banked
 18696  0038D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18697  0038DA  0EB0               	movlw	low STR_242
 18698  0038DC  6F61               	movwf	?_putsUSART& (0+255),b
 18699  0038DE  EC8D  F00A         	call	_putsUSART	;wreg free
 18700                           
 18701                           ;main.c: 2761: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18702  0038E2  0E77               	movlw	high STR_243
 18703  0038E4  0100               	movlb	0	; () banked
 18704  0038E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18705  0038E8  0E6D               	movlw	low STR_243
 18706  0038EA  6F61               	movwf	?_putsUSART& (0+255),b
 18707  0038EC  EC8D  F00A         	call	_putsUSART	;wreg free
 18708                           
 18709                           ;main.c: 2762: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18710  0038F0  0E71               	movlw	high STR_244
 18711  0038F2  0100               	movlb	0	; () banked
 18712  0038F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18713  0038F6  0EE2               	movlw	low STR_244
 18714  0038F8  6F61               	movwf	?_putsUSART& (0+255),b
 18715  0038FA  EC8D  F00A         	call	_putsUSART	;wreg free
 18716                           
 18717                           ;main.c: 2763: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18718  0038FE  0E73               	movlw	high STR_245
 18719  003900  0100               	movlb	0	; () banked
 18720  003902  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18721  003904  0E00               	movlw	low STR_245
 18722  003906  6F61               	movwf	?_putsUSART& (0+255),b
 18723  003908  EC8D  F00A         	call	_putsUSART	;wreg free
 18724                           
 18725                           ;main.c: 2764: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18726  00390C  0E78               	movlw	high STR_246
 18727  00390E  0100               	movlb	0	; () banked
 18728  003910  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18729  003912  0E7D               	movlw	low STR_246
 18730  003914  6F61               	movwf	?_putsUSART& (0+255),b
 18731  003916  EC8D  F00A         	call	_putsUSART	;wreg free
 18732                           
 18733                           ;main.c: 2765: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18734  00391A  0E6F               	movlw	high STR_247
 18735  00391C  0100               	movlb	0	; () banked
 18736  00391E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18737  003920  0E65               	movlw	low STR_247
 18738  003922  6F61               	movwf	?_putsUSART& (0+255),b
 18739  003924  EC8D  F00A         	call	_putsUSART	;wreg free
 18740                           
 18741                           ;main.c: 2766: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18742  003928  0E79               	movlw	high STR_248
 18743  00392A  0100               	movlb	0	; () banked
 18744  00392C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18745  00392E  0E3D               	movlw	low STR_248
 18746  003930  6F61               	movwf	?_putsUSART& (0+255),b
 18747  003932  EC8D  F00A         	call	_putsUSART	;wreg free
 18748                           
 18749                           ;main.c: 2767: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18750  003936  0E76               	movlw	high STR_249
 18751  003938  0100               	movlb	0	; () banked
 18752  00393A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18753  00393C  0EAA               	movlw	low STR_249
 18754  00393E  6F61               	movwf	?_putsUSART& (0+255),b
 18755  003940  EC8D  F00A         	call	_putsUSART	;wreg free
 18756                           
 18757                           ;main.c: 2768: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18758  003944  0E74               	movlw	high STR_250
 18759  003946  0100               	movlb	0	; () banked
 18760  003948  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18761  00394A  0E9F               	movlw	low STR_250
 18762  00394C  6F61               	movwf	?_putsUSART& (0+255),b
 18763  00394E  EC8D  F00A         	call	_putsUSART	;wreg free
 18764                           
 18765                           ;main.c: 2769: putsUSART((char *) "HELP - Display this help information.\r\n");
 18766  003952  0E74               	movlw	high STR_251
 18767  003954  0100               	movlb	0	; () banked
 18768  003956  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18769  003958  0E00               	movlw	low STR_251
 18770  00395A  6F61               	movwf	?_putsUSART& (0+255),b
 18771  00395C  EC8D  F00A         	call	_putsUSART	;wreg free
 18772                           
 18773                           ;main.c: 2770: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18774  003960  0E72               	movlw	high STR_252
 18775  003962  0100               	movlb	0	; () banked
 18776  003964  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18777  003966  0EA3               	movlw	low STR_252
 18778  003968  6F61               	movwf	?_putsUSART& (0+255),b
 18779  00396A  EC8D  F00A         	call	_putsUSART	;wreg free
 18780                           
 18781                           ;main.c: 2771: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 18782  00396E  0E6C               	movlw	high STR_253
 18783  003970  0100               	movlb	0	; () banked
 18784  003972  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18785  003974  0ED5               	movlw	low STR_253
 18786  003976  6F61               	movwf	?_putsUSART& (0+255),b
 18787  003978  EC8D  F00A         	call	_putsUSART	;wreg free
 18788                           
 18789                           ;main.c: 2772: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 18790  00397C  0E6D               	movlw	high STR_254
 18791  00397E  0100               	movlb	0	; () banked
 18792  003980  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18793  003982  0E21               	movlw	low STR_254
 18794  003984  6F61               	movwf	?_putsUSART& (0+255),b
 18795  003986  EC8D  F00A         	call	_putsUSART	;wreg free
 18796                           
 18797                           ;main.c: 2773: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18798  00398A  0E6C               	movlw	high STR_255
 18799  00398C  0100               	movlb	0	; () banked
 18800  00398E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18801  003990  0E88               	movlw	low STR_255
 18802  003992  6F61               	movwf	?_putsUSART& (0+255),b
 18803  003994  EC8D  F00A         	call	_putsUSART	;wreg free
 18804                           
 18805                           ;main.c: 2774: putsUSART((char *) "FILTER - Set filter .\r\n");
 18806  003998  0E78               	movlw	high STR_256
 18807  00399A  0100               	movlb	0	; () banked
 18808  00399C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18809  00399E  0E95               	movlw	low STR_256
 18810  0039A0  6F61               	movwf	?_putsUSART& (0+255),b
 18811  0039A2  EC8D  F00A         	call	_putsUSART	;wreg free
 18812                           
 18813                           ;main.c: 2775: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18814  0039A6  0E6C               	movlw	high STR_257
 18815  0039A8  0100               	movlb	0	; () banked
 18816  0039AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18817  0039AC  0E3A               	movlw	low STR_257
 18818  0039AE  6F61               	movwf	?_putsUSART& (0+255),b
 18819  0039B0  EC8D  F00A         	call	_putsUSART	;wreg free
 18820                           
 18821                           ;main.c: 2776: putsUSART((char *) "MASK - Set mask .\r\n");
 18822  0039B4  0E79               	movlw	high STR_258
 18823  0039B6  0100               	movlb	0	; () banked
 18824  0039B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18825  0039BA  0EF0               	movlw	low STR_258
 18826  0039BC  6F61               	movwf	?_putsUSART& (0+255),b
 18827  0039BE  EC8D  F00A         	call	_putsUSART	;wreg free
 18828                           
 18829                           ;main.c: 2777: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18830  0039C2  0E6D               	movlw	high STR_259
 18831  0039C4  0100               	movlb	0	; () banked
 18832  0039C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18833  0039C8  0E6B               	movlw	low STR_259
 18834  0039CA  6F61               	movwf	?_putsUSART& (0+255),b
 18835  0039CC  EC8D  F00A         	call	_putsUSART	;wreg free
 18836                           
 18837                           ;main.c: 2778: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18838  0039D0  0E76               	movlw	high STR_260
 18839  0039D2  0100               	movlb	0	; () banked
 18840  0039D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18841  0039D6  0E88               	movlw	low STR_260
 18842  0039D8  6F61               	movwf	?_putsUSART& (0+255),b
 18843  0039DA  EC8D  F00A         	call	_putsUSART	;wreg free
 18844                           
 18845                           ;main.c: 2779: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18846  0039DE  0E72               	movlw	high STR_261
 18847  0039E0  0100               	movlb	0	; () banked
 18848  0039E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18849  0039E4  0E74               	movlw	low STR_261
 18850  0039E6  6F61               	movwf	?_putsUSART& (0+255),b
 18851  0039E8  EC8D  F00A         	call	_putsUSART	;wreg free
 18852                           
 18853                           ;main.c: 2780: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18854  0039EC  0E72               	movlw	high STR_262
 18855  0039EE  0100               	movlb	0	; () banked
 18856  0039F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18857  0039F2  0E45               	movlw	low STR_262
 18858  0039F4  6F61               	movwf	?_putsUSART& (0+255),b
 18859  0039F6  EC8D  F00A         	call	_putsUSART	;wreg free
 18860                           
 18861                           ;main.c: 2781: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=20 ms .\r\n");
 18862  0039FA  0E6D               	movlw	high STR_263
 18863  0039FC  0100               	movlb	0	; () banked
 18864  0039FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18865  003A00  0EF5               	movlw	low STR_263
 18866  003A02  6F61               	movwf	?_putsUSART& (0+255),b
 18867  003A04  EC8D  F00A         	call	_putsUSART	;wreg free
 18868                           
 18869                           ;main.c: 2782: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18870  003A08  0E72               	movlw	high STR_264
 18871  003A0A  0100               	movlb	0	; () banked
 18872  003A0C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18873  003A0E  0E14               	movlw	low STR_264
 18874  003A10  6F61               	movwf	?_putsUSART& (0+255),b
 18875  003A12  EC8D  F00A         	call	_putsUSART	;wreg free
 18876                           
 18877                           ;main.c: 2783: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18878  003A16  0E6F               	movlw	high STR_265
 18879  003A18  0100               	movlb	0	; () banked
 18880  003A1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18881  003A1C  0ED4               	movlw	low STR_265
 18882  003A1E  6F61               	movwf	?_putsUSART& (0+255),b
 18883  003A20  EC8D  F00A         	call	_putsUSART	;wreg free
 18884                           
 18885                           ;main.c: 2784: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18886  003A24  0E6E               	movlw	high STR_266
 18887  003A26  0100               	movlb	0	; () banked
 18888  003A28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18889  003A2A  0E7A               	movlw	low STR_266
 18890  003A2C  6F61               	movwf	?_putsUSART& (0+255),b
 18891  003A2E  EC8D  F00A         	call	_putsUSART	;wreg free
 18892                           
 18893                           ;main.c: 2785: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18894  003A32  0E75               	movlw	high STR_267
 18895  003A34  0100               	movlb	0	; () banked
 18896  003A36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18897  003A38  0E3B               	movlw	low STR_267
 18898  003A3A  6F61               	movwf	?_putsUSART& (0+255),b
 18899  003A3C  EF8D  F00A         	goto	_putsUSART	;wreg free
 18900  003A40                     __end_of_printHelp:
 18901                           	opt stack 0
 18902                           tblptru	equ	0xFF8
 18903                           tblptrh	equ	0xFF7
 18904                           tblptrl	equ	0xFF6
 18905                           tablat	equ	0xFF5
 18906                           prodh	equ	0xFF4
 18907                           prodl	equ	0xFF3
 18908                           intcon	equ	0xFF2
 18909                           indf0	equ	0xFEF
 18910                           postinc0	equ	0xFEE
 18911                           fsr0h	equ	0xFEA
 18912                           fsr0l	equ	0xFE9
 18913                           wreg	equ	0xFE8
 18914                           indf1	equ	0xFE7
 18915                           postinc1	equ	0xFE6
 18916                           postdec1	equ	0xFE5
 18917                           fsr1h	equ	0xFE2
 18918                           fsr1l	equ	0xFE1
 18919                           indf2	equ	0xFDF
 18920                           postinc2	equ	0xFDE
 18921                           postdec2	equ	0xFDD
 18922                           plusw2	equ	0xFDB
 18923                           fsr2h	equ	0xFDA
 18924                           fsr2l	equ	0xFD9
 18925                           status	equ	0xFD8
 18926                           
 18927 ;; *************** function _printErrors *****************
 18928 ;; Defined at:
 18929 ;;		line 2689 in file "main.c"
 18930 ;; Parameters:    Size  Location     Type
 18931 ;;		None
 18932 ;; Auto vars:     Size  Location     Type
 18933 ;;		None
 18934 ;; Return value:  Size  Location     Type
 18935 ;;		None               void
 18936 ;; Registers used:
 18937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18938 ;; Tracked objects:
 18939 ;;		On entry : F/0
 18940 ;;		On exit  : 0/0
 18941 ;;		Unchanged: 0/0
 18942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18943 ;;      Params:         0       0       0       0       0       0       0
 18944 ;;      Locals:         0      12       0       0       0       0       0
 18945 ;;      Temps:          0       0       0       0       0       0       0
 18946 ;;      Totals:         0      12       0       0       0       0       0
 18947 ;;Total ram usage:       12 bytes
 18948 ;; Hardware stack levels used:    1
 18949 ;; Hardware stack levels required when called:    5
 18950 ;; This function calls:
 18951 ;;		_putsUSART
 18952 ;;		_sprintf
 18953 ;; This function is called by:
 18954 ;;		_doModeVerbose
 18955 ;; This function uses a non-reentrant model
 18956 ;;
 18957                           
 18958                           	psect	text38
 18959  004638                     __ptext38:
 18960                           	opt stack 0
 18961  004638                     _printErrors:
 18962                           	opt stack 23
 18963                           
 18964                           ; BSR set to: 0
 18965                           ;main.c: 2690: putsUSART((char *) "CAN Receive overruns: ");
 18966                           
 18967                           ;incstack = 0
 18968                           ;incstack = 0
 18969  004638  0E79               	movlw	high STR_206
 18970  00463A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18971  00463C  0E6B               	movlw	low STR_206
 18972  00463E  6F61               	movwf	?_putsUSART& (0+255),b
 18973  004640  EC8D  F00A         	call	_putsUSART	;wreg free
 18974                           
 18975                           ;main.c: 2691: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18976  004644  662C               	tstfsz	_bHex,c
 18977  004646  D005               	goto	l15738
 18978  004648  0E7C               	movlw	high STR_192
 18979  00464A  0100               	movlb	0	; () banked
 18980  00464C  6F95               	movwf	(_printErrors$1498+1)& (0+255),b
 18981  00464E  0EDE               	movlw	low STR_192
 18982  004650  D004               	goto	L20
 18983  004652                     l15738:
 18984  004652  0E7B               	movlw	high STR_207
 18985  004654  0100               	movlb	0	; () banked
 18986  004656  6F95               	movwf	(_printErrors$1498+1)& (0+255),b
 18987  004658  0EFB               	movlw	low STR_207
 18988  00465A                     L20:
 18989  00465A  6F94               	movwf	_printErrors$1498& (0+255),b
 18990                           
 18991                           ; BSR set to: 0
 18992  00465C  0E01               	movlw	high _wrkbuf
 18993  00465E  0100               	movlb	0	; () banked
 18994  004660  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18995  004662  0E7D               	movlw	low _wrkbuf
 18996  004664  6F76               	movwf	?_sprintf& (0+255),b
 18997  004666  C094  F078         	movff	_printErrors$1498,?_sprintf+2
 18998  00466A  C095  F079         	movff	_printErrors$1498+1,?_sprintf+3
 18999  00466E  C100  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 19000  004672  C101  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 19001  004676  C102  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 19002  00467A  C103  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 19003  00467E  EC6D  F026         	call	_sprintf	;wreg free
 19004                           
 19005                           ; BSR set to: 0
 19006                           ;main.c: 2692: putsUSART(wrkbuf);
 19007  004682  0E01               	movlw	high _wrkbuf
 19008  004684  0100               	movlb	0	; () banked
 19009  004686  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19010  004688  0E7D               	movlw	low _wrkbuf
 19011  00468A  6F61               	movwf	?_putsUSART& (0+255),b
 19012  00468C  EC8D  F00A         	call	_putsUSART	;wreg free
 19013                           
 19014                           ;main.c: 2693: putsUSART((char *) "\r\n");
 19015  004690  0E70               	movlw	high (STR_227+50)
 19016  004692  0100               	movlb	0	; () banked
 19017  004694  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19018  004696  0EE0               	movlw	low (STR_227+50)
 19019  004698  6F61               	movwf	?_putsUSART& (0+255),b
 19020  00469A  EC8D  F00A         	call	_putsUSART	;wreg free
 19021                           
 19022                           ;main.c: 2695: putsUSART((char *) "CAN Transmit overruns: ");
 19023  00469E  0E79               	movlw	high STR_210
 19024  0046A0  0100               	movlb	0	; () banked
 19025  0046A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19026  0046A4  0E25               	movlw	low STR_210
 19027  0046A6  6F61               	movwf	?_putsUSART& (0+255),b
 19028  0046A8  EC8D  F00A         	call	_putsUSART	;wreg free
 19029                           
 19030                           ;main.c: 2696: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 19031  0046AC  662C               	tstfsz	_bHex,c
 19032  0046AE  D005               	goto	l15752
 19033  0046B0  0E7C               	movlw	high STR_192
 19034  0046B2  0100               	movlb	0	; () banked
 19035  0046B4  6F97               	movwf	(_printErrors$1504+1)& (0+255),b
 19036  0046B6  0EDE               	movlw	low STR_192
 19037  0046B8  D004               	goto	L21
 19038  0046BA                     l15752:
 19039  0046BA  0E7B               	movlw	high STR_207
 19040  0046BC  0100               	movlb	0	; () banked
 19041  0046BE  6F97               	movwf	(_printErrors$1504+1)& (0+255),b
 19042  0046C0  0EFB               	movlw	low STR_207
 19043  0046C2                     L21:
 19044  0046C2  6F96               	movwf	_printErrors$1504& (0+255),b
 19045                           
 19046                           ; BSR set to: 0
 19047  0046C4  0E01               	movlw	high _wrkbuf
 19048  0046C6  0100               	movlb	0	; () banked
 19049  0046C8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19050  0046CA  0E7D               	movlw	low _wrkbuf
 19051  0046CC  6F76               	movwf	?_sprintf& (0+255),b
 19052  0046CE  C096  F078         	movff	_printErrors$1504,?_sprintf+2
 19053  0046D2  C097  F079         	movff	_printErrors$1504+1,?_sprintf+3
 19054  0046D6  C104  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 19055  0046DA  C105  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 19056  0046DE  C106  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 19057  0046E2  C107  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 19058  0046E6  EC6D  F026         	call	_sprintf	;wreg free
 19059                           
 19060                           ; BSR set to: 0
 19061                           ;main.c: 2697: putsUSART(wrkbuf);
 19062  0046EA  0E01               	movlw	high _wrkbuf
 19063  0046EC  0100               	movlb	0	; () banked
 19064  0046EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19065  0046F0  0E7D               	movlw	low _wrkbuf
 19066  0046F2  6F61               	movwf	?_putsUSART& (0+255),b
 19067  0046F4  EC8D  F00A         	call	_putsUSART	;wreg free
 19068                           
 19069                           ;main.c: 2698: putsUSART((char *) "\r\n");
 19070  0046F8  0E70               	movlw	high (STR_227+50)
 19071  0046FA  0100               	movlb	0	; () banked
 19072  0046FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19073  0046FE  0EE0               	movlw	low (STR_227+50)
 19074  004700  6F61               	movwf	?_putsUSART& (0+255),b
 19075  004702  EC8D  F00A         	call	_putsUSART	;wreg free
 19076                           
 19077                           ;main.c: 2700: putsUSART((char *) "UART Receive overruns: ");
 19078  004706  0E79               	movlw	high STR_214
 19079  004708  0100               	movlb	0	; () banked
 19080  00470A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19081  00470C  0E0D               	movlw	low STR_214
 19082  00470E  6F61               	movwf	?_putsUSART& (0+255),b
 19083  004710  EC8D  F00A         	call	_putsUSART	;wreg free
 19084                           
 19085                           ;main.c: 2701: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 19086  004714  662C               	tstfsz	_bHex,c
 19087  004716  D005               	goto	l15766
 19088  004718  0E7C               	movlw	high STR_192
 19089  00471A  0100               	movlb	0	; () banked
 19090  00471C  6F99               	movwf	(_printErrors$1510+1)& (0+255),b
 19091  00471E  0EDE               	movlw	low STR_192
 19092  004720  D004               	goto	L22
 19093  004722                     l15766:
 19094  004722  0E7B               	movlw	high STR_207
 19095  004724  0100               	movlb	0	; () banked
 19096  004726  6F99               	movwf	(_printErrors$1510+1)& (0+255),b
 19097  004728  0EFB               	movlw	low STR_207
 19098  00472A                     L22:
 19099  00472A  6F98               	movwf	_printErrors$1510& (0+255),b
 19100                           
 19101                           ; BSR set to: 0
 19102  00472C  0E01               	movlw	high _wrkbuf
 19103  00472E  0100               	movlb	0	; () banked
 19104  004730  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19105  004732  0E7D               	movlw	low _wrkbuf
 19106  004734  6F76               	movwf	?_sprintf& (0+255),b
 19107  004736  C098  F078         	movff	_printErrors$1510,?_sprintf+2
 19108  00473A  C099  F079         	movff	_printErrors$1510+1,?_sprintf+3
 19109  00473E  C120  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 19110  004742  C121  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 19111  004746  C122  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 19112  00474A  C123  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 19113  00474E  EC6D  F026         	call	_sprintf	;wreg free
 19114                           
 19115                           ; BSR set to: 0
 19116                           ;main.c: 2702: putsUSART(wrkbuf);
 19117  004752  0E01               	movlw	high _wrkbuf
 19118  004754  0100               	movlb	0	; () banked
 19119  004756  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19120  004758  0E7D               	movlw	low _wrkbuf
 19121  00475A  6F61               	movwf	?_putsUSART& (0+255),b
 19122  00475C  EC8D  F00A         	call	_putsUSART	;wreg free
 19123                           
 19124                           ;main.c: 2703: putsUSART((char *) "\r\n");
 19125  004760  0E70               	movlw	high (STR_227+50)
 19126  004762  0100               	movlb	0	; () banked
 19127  004764  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19128  004766  0EE0               	movlw	low (STR_227+50)
 19129  004768  6F61               	movwf	?_putsUSART& (0+255),b
 19130  00476A  EC8D  F00A         	call	_putsUSART	;wreg free
 19131                           
 19132                           ;main.c: 2705: putsUSART((char *) "UART Receive overruns: ");
 19133  00476E  0E79               	movlw	high STR_214
 19134  004770  0100               	movlb	0	; () banked
 19135  004772  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19136  004774  0E0D               	movlw	low STR_214
 19137  004776  6F61               	movwf	?_putsUSART& (0+255),b
 19138  004778  EC8D  F00A         	call	_putsUSART	;wreg free
 19139                           
 19140                           ;main.c: 2706: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 19141  00477C  662C               	tstfsz	_bHex,c
 19142  00477E  D005               	goto	l15780
 19143  004780  0E7C               	movlw	high STR_192
 19144  004782  0100               	movlb	0	; () banked
 19145  004784  6F9B               	movwf	(_printErrors$1516+1)& (0+255),b
 19146  004786  0EDE               	movlw	low STR_192
 19147  004788  D004               	goto	L23
 19148  00478A                     l15780:
 19149  00478A  0E7B               	movlw	high STR_207
 19150  00478C  0100               	movlb	0	; () banked
 19151  00478E  6F9B               	movwf	(_printErrors$1516+1)& (0+255),b
 19152  004790  0EFB               	movlw	low STR_207
 19153  004792                     L23:
 19154  004792  6F9A               	movwf	_printErrors$1516& (0+255),b
 19155                           
 19156                           ; BSR set to: 0
 19157  004794  0E01               	movlw	high _wrkbuf
 19158  004796  0100               	movlb	0	; () banked
 19159  004798  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19160  00479A  0E7D               	movlw	low _wrkbuf
 19161  00479C  6F76               	movwf	?_sprintf& (0+255),b
 19162  00479E  C09A  F078         	movff	_printErrors$1516,?_sprintf+2
 19163  0047A2  C09B  F079         	movff	_printErrors$1516+1,?_sprintf+3
 19164  0047A6  C124  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 19165  0047AA  C125  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 19166  0047AE  C126  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 19167  0047B2  C127  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 19168  0047B6  EC6D  F026         	call	_sprintf	;wreg free
 19169                           
 19170                           ; BSR set to: 0
 19171                           ;main.c: 2707: putsUSART(wrkbuf);
 19172  0047BA  0E01               	movlw	high _wrkbuf
 19173  0047BC  0100               	movlb	0	; () banked
 19174  0047BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19175  0047C0  0E7D               	movlw	low _wrkbuf
 19176  0047C2  6F61               	movwf	?_putsUSART& (0+255),b
 19177  0047C4  EC8D  F00A         	call	_putsUSART	;wreg free
 19178                           
 19179                           ;main.c: 2708: putsUSART((char *) "\r\n");
 19180  0047C8  0E70               	movlw	high (STR_227+50)
 19181  0047CA  0100               	movlb	0	; () banked
 19182  0047CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19183  0047CE  0EE0               	movlw	low (STR_227+50)
 19184  0047D0  6F61               	movwf	?_putsUSART& (0+255),b
 19185  0047D2  EC8D  F00A         	call	_putsUSART	;wreg free
 19186                           
 19187                           ;main.c: 2710: putsUSART((char *) "Transmit Error Counter: ");
 19188  0047D6  0E78               	movlw	high STR_222
 19189  0047D8  0100               	movlb	0	; () banked
 19190  0047DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19191  0047DC  0E4B               	movlw	low STR_222
 19192  0047DE  6F61               	movwf	?_putsUSART& (0+255),b
 19193  0047E0  EC8D  F00A         	call	_putsUSART	;wreg free
 19194                           
 19195                           ;main.c: 2711: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 19196  0047E4  662C               	tstfsz	_bHex,c
 19197  0047E6  D005               	goto	l15794
 19198  0047E8  0E7C               	movlw	high STR_61
 19199  0047EA  0100               	movlb	0	; () banked
 19200  0047EC  6F9D               	movwf	(_printErrors$1522+1)& (0+255),b
 19201  0047EE  0EEE               	movlw	low STR_61
 19202  0047F0  D004               	goto	L24
 19203  0047F2                     l15794:
 19204  0047F2  0E7C               	movlw	high STR_60
 19205  0047F4  0100               	movlb	0	; () banked
 19206  0047F6  6F9D               	movwf	(_printErrors$1522+1)& (0+255),b
 19207  0047F8  0E4A               	movlw	low STR_60
 19208  0047FA                     L24:
 19209  0047FA  6F9C               	movwf	_printErrors$1522& (0+255),b
 19210                           
 19211                           ; BSR set to: 0
 19212  0047FC  0E01               	movlw	high _wrkbuf
 19213  0047FE  0100               	movlb	0	; () banked
 19214  004800  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19215  004802  0E7D               	movlw	low _wrkbuf
 19216  004804  6F76               	movwf	?_sprintf& (0+255),b
 19217  004806  C09C  F078         	movff	_printErrors$1522,?_sprintf+2
 19218  00480A  C09D  F079         	movff	_printErrors$1522+1,?_sprintf+3
 19219  00480E  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 19220  004812  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19221  004814  EC6D  F026         	call	_sprintf	;wreg free
 19222                           
 19223                           ; BSR set to: 0
 19224                           ;main.c: 2712: putsUSART(wrkbuf);
 19225  004818  0E01               	movlw	high _wrkbuf
 19226  00481A  0100               	movlb	0	; () banked
 19227  00481C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19228  00481E  0E7D               	movlw	low _wrkbuf
 19229  004820  6F61               	movwf	?_putsUSART& (0+255),b
 19230  004822  EC8D  F00A         	call	_putsUSART	;wreg free
 19231                           
 19232                           ;main.c: 2713: putsUSART((char *) "\r\n");
 19233  004826  0E70               	movlw	high (STR_227+50)
 19234  004828  0100               	movlb	0	; () banked
 19235  00482A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19236  00482C  0EE0               	movlw	low (STR_227+50)
 19237  00482E  6F61               	movwf	?_putsUSART& (0+255),b
 19238  004830  EC8D  F00A         	call	_putsUSART	;wreg free
 19239                           
 19240                           ;main.c: 2715: if (COMSTATbits.TXWARN) {
 19241  004834  A474               	btfss	3956,2,c	;volatile
 19242  004836  D007               	goto	l15806
 19243                           
 19244                           ;main.c: 2716: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19245  004838  0E6E               	movlw	high STR_226
 19246  00483A  0100               	movlb	0	; () banked
 19247  00483C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19248  00483E  0EB8               	movlw	low STR_226
 19249  004840  6F61               	movwf	?_putsUSART& (0+255),b
 19250  004842  EC8D  F00A         	call	_putsUSART	;wreg free
 19251  004846                     l15806:
 19252                           
 19253                           ;main.c: 2717: }
 19254                           ;main.c: 2719: if (COMSTATbits.TXBO) {
 19255  004846  AA74               	btfss	3956,5,c	;volatile
 19256  004848  D007               	goto	l15810
 19257                           
 19258                           ;main.c: 2720: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19259  00484A  0E70               	movlw	high STR_227
 19260  00484C  0100               	movlb	0	; () banked
 19261  00484E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19262  004850  0EAE               	movlw	low STR_227
 19263  004852  6F61               	movwf	?_putsUSART& (0+255),b
 19264  004854  EC8D  F00A         	call	_putsUSART	;wreg free
 19265  004858                     l15810:
 19266                           
 19267                           ;main.c: 2721: }
 19268                           ;main.c: 2723: if (COMSTATbits.TXBP) {
 19269  004858  A874               	btfss	3956,4,c	;volatile
 19270  00485A  D007               	goto	l1235
 19271                           
 19272                           ;main.c: 2724: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19273  00485C  0E6F               	movlw	high STR_228
 19274  00485E  0100               	movlb	0	; () banked
 19275  004860  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19276  004862  0E2C               	movlw	low STR_228
 19277  004864  6F61               	movwf	?_putsUSART& (0+255),b
 19278  004866  EC8D  F00A         	call	_putsUSART	;wreg free
 19279  00486A                     l1235:
 19280                           
 19281                           ;main.c: 2725: }
 19282                           ;main.c: 2728: putsUSART((char *) "Receive Error Counter: ");
 19283  00486A  0E78               	movlw	high STR_229
 19284  00486C  0100               	movlb	0	; () banked
 19285  00486E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19286  004870  0EF5               	movlw	low STR_229
 19287  004872  6F61               	movwf	?_putsUSART& (0+255),b
 19288  004874  EC8D  F00A         	call	_putsUSART	;wreg free
 19289                           
 19290                           ;main.c: 2729: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19291  004878  662C               	tstfsz	_bHex,c
 19292  00487A  D005               	goto	l15818
 19293  00487C  0E7C               	movlw	high STR_61
 19294  00487E  0100               	movlb	0	; () banked
 19295  004880  6F9F               	movwf	(_printErrors$1531+1)& (0+255),b
 19296  004882  0EEE               	movlw	low STR_61
 19297  004884  D004               	goto	L25
 19298  004886                     l15818:
 19299  004886  0E7C               	movlw	high STR_60
 19300  004888  0100               	movlb	0	; () banked
 19301  00488A  6F9F               	movwf	(_printErrors$1531+1)& (0+255),b
 19302  00488C  0E4A               	movlw	low STR_60
 19303  00488E                     L25:
 19304  00488E  6F9E               	movwf	_printErrors$1531& (0+255),b
 19305                           
 19306                           ; BSR set to: 0
 19307  004890  0E01               	movlw	high _wrkbuf
 19308  004892  0100               	movlb	0	; () banked
 19309  004894  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19310  004896  0E7D               	movlw	low _wrkbuf
 19311  004898  6F76               	movwf	?_sprintf& (0+255),b
 19312  00489A  C09E  F078         	movff	_printErrors$1531,?_sprintf+2
 19313  00489E  C09F  F079         	movff	_printErrors$1531+1,?_sprintf+3
 19314  0048A2  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19315  0048A6  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19316  0048A8  EC6D  F026         	call	_sprintf	;wreg free
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;main.c: 2730: putsUSART(wrkbuf);
 19320  0048AC  0E01               	movlw	high _wrkbuf
 19321  0048AE  0100               	movlb	0	; () banked
 19322  0048B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19323  0048B2  0E7D               	movlw	low _wrkbuf
 19324  0048B4  6F61               	movwf	?_putsUSART& (0+255),b
 19325  0048B6  EC8D  F00A         	call	_putsUSART	;wreg free
 19326                           
 19327                           ;main.c: 2731: putsUSART((char *) "\r\n");
 19328  0048BA  0E70               	movlw	high (STR_227+50)
 19329  0048BC  0100               	movlb	0	; () banked
 19330  0048BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19331  0048C0  0EE0               	movlw	low (STR_227+50)
 19332  0048C2  6F61               	movwf	?_putsUSART& (0+255),b
 19333  0048C4  EC8D  F00A         	call	_putsUSART	;wreg free
 19334                           
 19335                           ;main.c: 2733: if (COMSTATbits.RXWARN) {
 19336  0048C8  A274               	btfss	3956,1,c	;volatile
 19337  0048CA  D007               	goto	l15830
 19338                           
 19339                           ;main.c: 2734: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19340  0048CC  0E6F               	movlw	high STR_233
 19341  0048CE  0100               	movlb	0	; () banked
 19342  0048D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19343  0048D2  0E9D               	movlw	low STR_233
 19344  0048D4  6F61               	movwf	?_putsUSART& (0+255),b
 19345  0048D6  EC8D  F00A         	call	_putsUSART	;wreg free
 19346  0048DA                     l15830:
 19347                           
 19348                           ;main.c: 2735: }
 19349                           ;main.c: 2737: if (COMSTATbits.RXBP) {
 19350  0048DA  A674               	btfss	3956,3,c	;volatile
 19351  0048DC  D007               	goto	l15834
 19352                           
 19353                           ;main.c: 2738: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19354  0048DE  0E70               	movlw	high STR_234
 19355  0048E0  0100               	movlb	0	; () banked
 19356  0048E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19357  0048E4  0E42               	movlw	low STR_234
 19358  0048E6  6F61               	movwf	?_putsUSART& (0+255),b
 19359  0048E8  EC8D  F00A         	call	_putsUSART	;wreg free
 19360  0048EC                     l15834:
 19361                           
 19362                           ;main.c: 2739: }
 19363                           ;main.c: 2741: if (COMSTATbits.EWARN) {
 19364  0048EC  A074               	btfss	3956,0,c	;volatile
 19365  0048EE  D007               	goto	l1243
 19366                           
 19367                           ;main.c: 2742: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19368  0048F0  0E71               	movlw	high STR_235
 19369  0048F2  0100               	movlb	0	; () banked
 19370  0048F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19371  0048F6  0E17               	movlw	low STR_235
 19372  0048F8  6F61               	movwf	?_putsUSART& (0+255),b
 19373  0048FA  EC8D  F00A         	call	_putsUSART	;wreg free
 19374  0048FE                     l1243:
 19375  0048FE  0012               	return	
 19376  004900                     __end_of_printErrors:
 19377                           	opt stack 0
 19378                           tblptru	equ	0xFF8
 19379                           tblptrh	equ	0xFF7
 19380                           tblptrl	equ	0xFF6
 19381                           tablat	equ	0xFF5
 19382                           prodh	equ	0xFF4
 19383                           prodl	equ	0xFF3
 19384                           intcon	equ	0xFF2
 19385                           indf0	equ	0xFEF
 19386                           postinc0	equ	0xFEE
 19387                           fsr0h	equ	0xFEA
 19388                           fsr0l	equ	0xFE9
 19389                           wreg	equ	0xFE8
 19390                           indf1	equ	0xFE7
 19391                           postinc1	equ	0xFE6
 19392                           postdec1	equ	0xFE5
 19393                           fsr1h	equ	0xFE2
 19394                           fsr1l	equ	0xFE1
 19395                           indf2	equ	0xFDF
 19396                           postinc2	equ	0xFDE
 19397                           postdec2	equ	0xFDD
 19398                           plusw2	equ	0xFDB
 19399                           fsr2h	equ	0xFDA
 19400                           fsr2l	equ	0xFD9
 19401                           status	equ	0xFD8
 19402                           
 19403 ;; *************** function _printStatistics *****************
 19404 ;; Defined at:
 19405 ;;		line 2662 in file "main.c"
 19406 ;; Parameters:    Size  Location     Type
 19407 ;;		None
 19408 ;; Auto vars:     Size  Location     Type
 19409 ;;		None
 19410 ;; Return value:  Size  Location     Type
 19411 ;;		None               void
 19412 ;; Registers used:
 19413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19414 ;; Tracked objects:
 19415 ;;		On entry : F/0
 19416 ;;		On exit  : 0/0
 19417 ;;		Unchanged: 0/0
 19418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19419 ;;      Params:         0       0       0       0       0       0       0
 19420 ;;      Locals:         0       8       0       0       0       0       0
 19421 ;;      Temps:          0       0       0       0       0       0       0
 19422 ;;      Totals:         0       8       0       0       0       0       0
 19423 ;;Total ram usage:        8 bytes
 19424 ;; Hardware stack levels used:    1
 19425 ;; Hardware stack levels required when called:    5
 19426 ;; This function calls:
 19427 ;;		_putsUSART
 19428 ;;		_sprintf
 19429 ;; This function is called by:
 19430 ;;		_doModeVerbose
 19431 ;; This function uses a non-reentrant model
 19432 ;;
 19433                           
 19434                           	psect	text39
 19435  0036E4                     __ptext39:
 19436                           	opt stack 0
 19437  0036E4                     _printStatistics:
 19438                           	opt stack 23
 19439                           
 19440                           ; BSR set to: 0
 19441                           ;main.c: 2663: putsUSART((char *) "Sent CAN frames: ");
 19442                           
 19443                           ;incstack = 0
 19444                           ;incstack = 0
 19445  0036E4  0E7A               	movlw	high STR_190
 19446  0036E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19447  0036E8  0EB3               	movlw	low STR_190
 19448  0036EA  6F61               	movwf	?_putsUSART& (0+255),b
 19449  0036EC  EC8D  F00A         	call	_putsUSART	;wreg free
 19450                           
 19451                           ;main.c: 2664: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19452  0036F0  662C               	tstfsz	_bHex,c
 19453  0036F2  D005               	goto	l15682
 19454  0036F4  0E7C               	movlw	high STR_192
 19455  0036F6  0100               	movlb	0	; () banked
 19456  0036F8  6F95               	movwf	(_printStatistics$1473+1)& (0+255),b
 19457  0036FA  0EDE               	movlw	low STR_192
 19458  0036FC  D004               	goto	L26
 19459  0036FE                     l15682:
 19460  0036FE  0E7C               	movlw	high STR_191
 19461  003700  0100               	movlb	0	; () banked
 19462  003702  6F95               	movwf	(_printStatistics$1473+1)& (0+255),b
 19463  003704  0E58               	movlw	low STR_191
 19464  003706                     L26:
 19465  003706  6F94               	movwf	_printStatistics$1473& (0+255),b
 19466                           
 19467                           ; BSR set to: 0
 19468  003708  0E01               	movlw	high _wrkbuf
 19469  00370A  0100               	movlb	0	; () banked
 19470  00370C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19471  00370E  0E7D               	movlw	low _wrkbuf
 19472  003710  6F76               	movwf	?_sprintf& (0+255),b
 19473  003712  C094  F078         	movff	_printStatistics$1473,?_sprintf+2
 19474  003716  C095  F079         	movff	_printStatistics$1473+1,?_sprintf+3
 19475  00371A  C114  F07A         	movff	_cntTxFrames,?_sprintf+4
 19476  00371E  C115  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19477  003722  C116  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19478  003726  C117  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19479  00372A  EC6D  F026         	call	_sprintf	;wreg free
 19480                           
 19481                           ; BSR set to: 0
 19482                           ;main.c: 2665: putsUSART(wrkbuf);
 19483  00372E  0E01               	movlw	high _wrkbuf
 19484  003730  0100               	movlb	0	; () banked
 19485  003732  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19486  003734  0E7D               	movlw	low _wrkbuf
 19487  003736  6F61               	movwf	?_putsUSART& (0+255),b
 19488  003738  EC8D  F00A         	call	_putsUSART	;wreg free
 19489                           
 19490                           ;main.c: 2666: putsUSART((char *) "\r\n");
 19491  00373C  0E70               	movlw	high (STR_227+50)
 19492  00373E  0100               	movlb	0	; () banked
 19493  003740  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19494  003742  0EE0               	movlw	low (STR_227+50)
 19495  003744  6F61               	movwf	?_putsUSART& (0+255),b
 19496  003746  EC8D  F00A         	call	_putsUSART	;wreg free
 19497                           
 19498                           ;main.c: 2668: putsUSART((char *) "Sent CAN bytes: ");
 19499  00374A  0E7A               	movlw	high STR_194
 19500  00374C  0100               	movlb	0	; () banked
 19501  00374E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19502  003750  0EF8               	movlw	low STR_194
 19503  003752  6F61               	movwf	?_putsUSART& (0+255),b
 19504  003754  EC8D  F00A         	call	_putsUSART	;wreg free
 19505                           
 19506                           ;main.c: 2669: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19507  003758  662C               	tstfsz	_bHex,c
 19508  00375A  D005               	goto	l15696
 19509  00375C  0E7C               	movlw	high STR_192
 19510  00375E  0100               	movlb	0	; () banked
 19511  003760  6F97               	movwf	(_printStatistics$1479+1)& (0+255),b
 19512  003762  0EDE               	movlw	low STR_192
 19513  003764  D004               	goto	L27
 19514  003766                     l15696:
 19515  003766  0E7C               	movlw	high STR_191
 19516  003768  0100               	movlb	0	; () banked
 19517  00376A  6F97               	movwf	(_printStatistics$1479+1)& (0+255),b
 19518  00376C  0E58               	movlw	low STR_191
 19519  00376E                     L27:
 19520  00376E  6F96               	movwf	_printStatistics$1479& (0+255),b
 19521                           
 19522                           ; BSR set to: 0
 19523  003770  0E01               	movlw	high _wrkbuf
 19524  003772  0100               	movlb	0	; () banked
 19525  003774  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19526  003776  0E7D               	movlw	low _wrkbuf
 19527  003778  6F76               	movwf	?_sprintf& (0+255),b
 19528  00377A  C096  F078         	movff	_printStatistics$1479,?_sprintf+2
 19529  00377E  C097  F079         	movff	_printStatistics$1479+1,?_sprintf+3
 19530  003782  C110  F07A         	movff	_cntTxBytes,?_sprintf+4
 19531  003786  C111  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19532  00378A  C112  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19533  00378E  C113  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19534  003792  EC6D  F026         	call	_sprintf	;wreg free
 19535                           
 19536                           ; BSR set to: 0
 19537                           ;main.c: 2670: putsUSART(wrkbuf);
 19538  003796  0E01               	movlw	high _wrkbuf
 19539  003798  0100               	movlb	0	; () banked
 19540  00379A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19541  00379C  0E7D               	movlw	low _wrkbuf
 19542  00379E  6F61               	movwf	?_putsUSART& (0+255),b
 19543  0037A0  EC8D  F00A         	call	_putsUSART	;wreg free
 19544                           
 19545                           ;main.c: 2671: putsUSART((char *) "\r\n");
 19546  0037A4  0E70               	movlw	high (STR_227+50)
 19547  0037A6  0100               	movlb	0	; () banked
 19548  0037A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19549  0037AA  0EE0               	movlw	low (STR_227+50)
 19550  0037AC  6F61               	movwf	?_putsUSART& (0+255),b
 19551  0037AE  EC8D  F00A         	call	_putsUSART	;wreg free
 19552                           
 19553                           ;main.c: 2673: putsUSART((char *) "Received CAN frames: ");
 19554  0037B2  0E79               	movlw	high STR_198
 19555  0037B4  0100               	movlb	0	; () banked
 19556  0037B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19557  0037B8  0EC5               	movlw	low STR_198
 19558  0037BA  6F61               	movwf	?_putsUSART& (0+255),b
 19559  0037BC  EC8D  F00A         	call	_putsUSART	;wreg free
 19560                           
 19561                           ;main.c: 2674: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19562  0037C0  662C               	tstfsz	_bHex,c
 19563  0037C2  D005               	goto	l15710
 19564  0037C4  0E7C               	movlw	high STR_192
 19565  0037C6  0100               	movlb	0	; () banked
 19566  0037C8  6F99               	movwf	(_printStatistics$1485+1)& (0+255),b
 19567  0037CA  0EDE               	movlw	low STR_192
 19568  0037CC  D004               	goto	L28
 19569  0037CE                     l15710:
 19570  0037CE  0E7C               	movlw	high STR_191
 19571  0037D0  0100               	movlb	0	; () banked
 19572  0037D2  6F99               	movwf	(_printStatistics$1485+1)& (0+255),b
 19573  0037D4  0E58               	movlw	low STR_191
 19574  0037D6                     L28:
 19575  0037D6  6F98               	movwf	_printStatistics$1485& (0+255),b
 19576                           
 19577                           ; BSR set to: 0
 19578  0037D8  0E01               	movlw	high _wrkbuf
 19579  0037DA  0100               	movlb	0	; () banked
 19580  0037DC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19581  0037DE  0E7D               	movlw	low _wrkbuf
 19582  0037E0  6F76               	movwf	?_sprintf& (0+255),b
 19583  0037E2  C098  F078         	movff	_printStatistics$1485,?_sprintf+2
 19584  0037E6  C099  F079         	movff	_printStatistics$1485+1,?_sprintf+3
 19585  0037EA  C10C  F07A         	movff	_cntRxFrames,?_sprintf+4
 19586  0037EE  C10D  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19587  0037F2  C10E  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19588  0037F6  C10F  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19589  0037FA  EC6D  F026         	call	_sprintf	;wreg free
 19590                           
 19591                           ; BSR set to: 0
 19592                           ;main.c: 2675: putsUSART(wrkbuf);
 19593  0037FE  0E01               	movlw	high _wrkbuf
 19594  003800  0100               	movlb	0	; () banked
 19595  003802  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19596  003804  0E7D               	movlw	low _wrkbuf
 19597  003806  6F61               	movwf	?_putsUSART& (0+255),b
 19598  003808  EC8D  F00A         	call	_putsUSART	;wreg free
 19599                           
 19600                           ;main.c: 2676: putsUSART((char *) "\r\n");
 19601  00380C  0E70               	movlw	high (STR_227+50)
 19602  00380E  0100               	movlb	0	; () banked
 19603  003810  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19604  003812  0EE0               	movlw	low (STR_227+50)
 19605  003814  6F61               	movwf	?_putsUSART& (0+255),b
 19606  003816  EC8D  F00A         	call	_putsUSART	;wreg free
 19607                           
 19608                           ;main.c: 2678: putsUSART((char *) "Received CAN bytes: ");
 19609  00381A  0E79               	movlw	high STR_202
 19610  00381C  0100               	movlb	0	; () banked
 19611  00381E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19612  003820  0EDB               	movlw	low STR_202
 19613  003822  6F61               	movwf	?_putsUSART& (0+255),b
 19614  003824  EC8D  F00A         	call	_putsUSART	;wreg free
 19615                           
 19616                           ;main.c: 2679: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19617  003828  662C               	tstfsz	_bHex,c
 19618  00382A  D005               	goto	l15724
 19619  00382C  0E7C               	movlw	high STR_192
 19620  00382E  0100               	movlb	0	; () banked
 19621  003830  6F9B               	movwf	(_printStatistics$1491+1)& (0+255),b
 19622  003832  0EDE               	movlw	low STR_192
 19623  003834  D004               	goto	L29
 19624  003836                     l15724:
 19625  003836  0E7C               	movlw	high STR_191
 19626  003838  0100               	movlb	0	; () banked
 19627  00383A  6F9B               	movwf	(_printStatistics$1491+1)& (0+255),b
 19628  00383C  0E58               	movlw	low STR_191
 19629  00383E                     L29:
 19630  00383E  6F9A               	movwf	_printStatistics$1491& (0+255),b
 19631                           
 19632                           ; BSR set to: 0
 19633  003840  0E01               	movlw	high _wrkbuf
 19634  003842  0100               	movlb	0	; () banked
 19635  003844  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19636  003846  0E7D               	movlw	low _wrkbuf
 19637  003848  6F76               	movwf	?_sprintf& (0+255),b
 19638  00384A  C09A  F078         	movff	_printStatistics$1491,?_sprintf+2
 19639  00384E  C09B  F079         	movff	_printStatistics$1491+1,?_sprintf+3
 19640  003852  C108  F07A         	movff	_cntRxBytes,?_sprintf+4
 19641  003856  C109  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19642  00385A  C10A  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19643  00385E  C10B  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19644  003862  EC6D  F026         	call	_sprintf	;wreg free
 19645                           
 19646                           ; BSR set to: 0
 19647                           ;main.c: 2680: putsUSART(wrkbuf);
 19648  003866  0E01               	movlw	high _wrkbuf
 19649  003868  0100               	movlb	0	; () banked
 19650  00386A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19651  00386C  0E7D               	movlw	low _wrkbuf
 19652  00386E  6F61               	movwf	?_putsUSART& (0+255),b
 19653  003870  EC8D  F00A         	call	_putsUSART	;wreg free
 19654                           
 19655                           ;main.c: 2681: putsUSART((char *) "\r\n");
 19656  003874  0E70               	movlw	high (STR_227+50)
 19657  003876  0100               	movlb	0	; () banked
 19658  003878  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19659  00387A  0EE0               	movlw	low (STR_227+50)
 19660  00387C  6F61               	movwf	?_putsUSART& (0+255),b
 19661  00387E  EF8D  F00A         	goto	_putsUSART	;wreg free
 19662  003882                     __end_of_printStatistics:
 19663                           	opt stack 0
 19664                           tblptru	equ	0xFF8
 19665                           tblptrh	equ	0xFF7
 19666                           tblptrl	equ	0xFF6
 19667                           tablat	equ	0xFF5
 19668                           prodh	equ	0xFF4
 19669                           prodl	equ	0xFF3
 19670                           intcon	equ	0xFF2
 19671                           indf0	equ	0xFEF
 19672                           postinc0	equ	0xFEE
 19673                           fsr0h	equ	0xFEA
 19674                           fsr0l	equ	0xFE9
 19675                           wreg	equ	0xFE8
 19676                           indf1	equ	0xFE7
 19677                           postinc1	equ	0xFE6
 19678                           postdec1	equ	0xFE5
 19679                           fsr1h	equ	0xFE2
 19680                           fsr1l	equ	0xFE1
 19681                           indf2	equ	0xFDF
 19682                           postinc2	equ	0xFDE
 19683                           postdec2	equ	0xFDD
 19684                           plusw2	equ	0xFDB
 19685                           fsr2h	equ	0xFDA
 19686                           fsr2l	equ	0xFD9
 19687                           status	equ	0xFD8
 19688                           
 19689 ;; *************** function _atoi *****************
 19690 ;; Defined at:
 19691 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19692 ;; Parameters:    Size  Location     Type
 19693 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19694 ;;		 -> STR_127(2), STR_125(2), STR_123(2), STR_121(2), 
 19695 ;;		 -> STR_118(2), STR_114(2), STR_112(2), STR_110(2), 
 19696 ;;		 -> STR_108(2), STR_105(2), STR_87(2), STR_85(2), 
 19697 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 19698 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19699 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19700 ;; Auto vars:     Size  Location     Type
 19701 ;;  a               2   11[BANK0 ] int 
 19702 ;;  sign            1   10[BANK0 ] unsigned char 
 19703 ;; Return value:  Size  Location     Type
 19704 ;;                  2    6[BANK0 ] int 
 19705 ;; Registers used:
 19706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19707 ;; Tracked objects:
 19708 ;;		On entry : C/2
 19709 ;;		On exit  : F/0
 19710 ;;		Unchanged: 0/0
 19711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19712 ;;      Params:         0       2       0       0       0       0       0
 19713 ;;      Locals:         0       3       0       0       0       0       0
 19714 ;;      Temps:          0       2       0       0       0       0       0
 19715 ;;      Totals:         0       7       0       0       0       0       0
 19716 ;;Total ram usage:        7 bytes
 19717 ;; Hardware stack levels used:    1
 19718 ;; Hardware stack levels required when called:    4
 19719 ;; This function calls:
 19720 ;;		_isdigit
 19721 ;;		___wmul
 19722 ;; This function is called by:
 19723 ;;		_doModeVerbose
 19724 ;; This function uses a non-reentrant model
 19725 ;;
 19726                           
 19727                           	psect	text40
 19728  002B7E                     __ptext40:
 19729                           	opt stack 0
 19730  002B7E                     _atoi:
 19731                           	opt stack 24
 19732                           
 19733                           ;incstack = 0
 19734                           ;incstack = 0
 19735  002B7E  D003               	goto	l15634
 19736  002B80                     l15632:
 19737  002B80  0100               	movlb	0	; () banked
 19738  002B82  4B66               	infsnz	atoi@s& (0+255),f,b
 19739  002B84  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19740  002B86                     l15634:
 19741  002B86  0100               	movlb	0	; () banked
 19742  002B88  D876               	call	PL18	;call to abstracted procedure
 19743  002B8A  64EA               	cpfsgt	fsr0h,c
 19744  002B8C  D003               	bra	u20887
 19745  002B8E  6EEA               	movwf	fsr0h,c
 19746  002B90  50EF               	movf	indf0,w,c
 19747  002B92  D003               	bra	u20880
 19748  002B94                     u20887:
 19749  002B94  6EF7               	movwf	tblptrh,c
 19750  002B96  0008               	tblrd		*
 19751  002B98  50F5               	movf	tablat,w,c
 19752  002B9A                     u20880:
 19753  002B9A  0A20               	xorlw	32
 19754  002B9C  E0F1               	bz	l15632
 19755  002B9E  0100               	movlb	0	; () banked
 19756  002BA0  D86A               	call	PL18	;call to abstracted procedure
 19757  002BA2  64EA               	cpfsgt	fsr0h,c
 19758  002BA4  D003               	bra	u20907
 19759  002BA6  6EEA               	movwf	fsr0h,c
 19760  002BA8  50EF               	movf	indf0,w,c
 19761  002BAA  D003               	bra	u20900
 19762  002BAC                     u20907:
 19763  002BAC  6EF7               	movwf	tblptrh,c
 19764  002BAE  0008               	tblrd		*
 19765  002BB0  50F5               	movf	tablat,w,c
 19766  002BB2                     u20900:
 19767  002BB2  0A09               	xorlw	9
 19768  002BB4  E0E5               	bz	l15632
 19769  002BB6  0100               	movlb	0	; () banked
 19770  002BB8  6B6B               	clrf	atoi@a& (0+255),b
 19771  002BBA  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19772  002BBC  6B6A               	clrf	atoi@sign& (0+255),b
 19773                           
 19774                           ; BSR set to: 0
 19775  002BBE  D85B               	call	PL18	;call to abstracted procedure
 19776  002BC0  64EA               	cpfsgt	fsr0h,c
 19777  002BC2  D003               	bra	u20927
 19778  002BC4  6EEA               	movwf	fsr0h,c
 19779  002BC6  50EF               	movf	indf0,w,c
 19780  002BC8  D003               	bra	u20920
 19781  002BCA                     u20927:
 19782  002BCA  6EF7               	movwf	tblptrh,c
 19783  002BCC  0008               	tblrd		*
 19784  002BCE  50F5               	movf	tablat,w,c
 19785  002BD0                     u20920:
 19786  002BD0  0A2D               	xorlw	45
 19787  002BD2  E103               	bnz	l15642
 19788  002BD4  0100               	movlb	0	; () banked
 19789  002BD6  2B6A               	incf	atoi@sign& (0+255),f,b
 19790  002BD8  D00D               	goto	L30
 19791  002BDA                     l15642:
 19792  002BDA  0100               	movlb	0	; () banked
 19793  002BDC  D84C               	call	PL18	;call to abstracted procedure
 19794  002BDE  64EA               	cpfsgt	fsr0h,c
 19795  002BE0  D003               	bra	u20947
 19796  002BE2  6EEA               	movwf	fsr0h,c
 19797  002BE4  50EF               	movf	indf0,w,c
 19798  002BE6  D003               	bra	u20940
 19799  002BE8                     u20947:
 19800  002BE8  6EF7               	movwf	tblptrh,c
 19801  002BEA  0008               	tblrd		*
 19802  002BEC  50F5               	movf	tablat,w,c
 19803  002BEE                     u20940:
 19804  002BEE  0A2B               	xorlw	43
 19805  002BF0  E121               	bnz	l15650
 19806  002BF2                     l15644:
 19807  002BF2  0100               	movlb	0	; () banked
 19808  002BF4                     L30:
 19809  002BF4  4B66               	infsnz	atoi@s& (0+255),f,b
 19810  002BF6  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19811  002BF8  D01D               	goto	l15650
 19812  002BFA                     l15646:
 19813                           
 19814                           ; BSR set to: 0
 19815  002BFA  C06B  F060         	movff	atoi@a,?___wmul
 19816  002BFE  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19817  002C02  6B63               	clrf	(?___wmul+3)& (0+255),b
 19818  002C04  0E0A               	movlw	10
 19819  002C06  6F62               	movwf	(?___wmul+2)& (0+255),b
 19820  002C08  EC6A  F008         	call	___wmul	;wreg free
 19821  002C0C  D834               	call	PL18	;call to abstracted procedure
 19822  002C0E  64EA               	cpfsgt	fsr0h,c
 19823  002C10  D003               	bra	u20967
 19824  002C12  6EEA               	movwf	fsr0h,c
 19825  002C14  50EF               	movf	indf0,w,c
 19826  002C16  D003               	bra	u20960
 19827  002C18                     u20967:
 19828  002C18  6EF7               	movwf	tblptrh,c
 19829  002C1A  0008               	tblrd		*
 19830  002C1C  50F5               	movf	tablat,w,c
 19831  002C1E                     u20960:
 19832  002C1E  0100               	movlb	0	; () banked
 19833  002C20  2760               	addwf	?___wmul& (0+255),f,b
 19834  002C22  0E00               	movlw	0
 19835  002C24  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19836  002C26  0ED0               	movlw	208
 19837  002C28  2560               	addwf	?___wmul& (0+255),w,b
 19838  002C2A  6F6B               	movwf	atoi@a& (0+255),b
 19839  002C2C  0EFF               	movlw	255
 19840  002C2E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19841  002C30  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19842  002C32  D7DF               	goto	l15644
 19843  002C34                     l15650:
 19844  002C34  0100               	movlb	0	; () banked
 19845  002C36  D81F               	call	PL18	;call to abstracted procedure
 19846  002C38  64EA               	cpfsgt	fsr0h,c
 19847  002C3A  D003               	bra	u20977
 19848  002C3C  6EEA               	movwf	fsr0h,c
 19849  002C3E  50EF               	movf	indf0,w,c
 19850  002C40  D003               	bra	u20970
 19851  002C42                     u20977:
 19852  002C42  6EF7               	movwf	tblptrh,c
 19853  002C44  0008               	tblrd		*
 19854  002C46  50F5               	movf	tablat,w,c
 19855  002C48                     u20970:
 19856  002C48  EC15  F008         	call	_isdigit
 19857  002C4C  E2D6               	bc	l15646
 19858                           
 19859                           ; BSR set to: 0
 19860  002C4E  516A               	movf	atoi@sign& (0+255),w,b
 19861  002C50  E00D               	bz	l2120
 19862                           
 19863                           ; BSR set to: 0
 19864  002C52  C06B  F068         	movff	atoi@a,??_atoi
 19865  002C56  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19866  002C5A  1F68               	comf	??_atoi& (0+255),f,b
 19867  002C5C  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19868  002C5E  4B68               	infsnz	??_atoi& (0+255),f,b
 19869  002C60  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19870  002C62  C068  F066         	movff	??_atoi,?_atoi
 19871  002C66  C069  F067         	movff	??_atoi+1,?_atoi+1
 19872  002C6A  D004               	goto	l2121
 19873  002C6C                     l2120:
 19874                           
 19875                           ; BSR set to: 0
 19876  002C6C  C06B  F066         	movff	atoi@a,?_atoi
 19877  002C70  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19878  002C74                     l2121:
 19879                           
 19880                           ; BSR set to: 0
 19881  002C74  0012               	return	
 19882  002C76                     __end_of_atoi:
 19883                           	opt stack 0
 19884  002C76                     PL18:
 19885                           	opt stack 24
 19886  002C76  5166               	movf	atoi@s& (0+255),w,b
 19887  002C78  6EF6               	movwf	tblptrl,c
 19888  002C7A  6EE9               	movwf	fsr0l,c
 19889  002C7C  0E05               	movlw	(high __ramtop+-1)
 19890  002C7E  6EEA               	movwf	fsr0h,c
 19891  002C80  5167               	movf	(atoi@s+1)& (0+255),w,b
 19892  002C82  0012               	return	
 19893  002C84                     __end_ofPL18:
 19894                           	opt stack 0
 19895                           tblptru	equ	0xFF8
 19896                           tblptrh	equ	0xFF7
 19897                           tblptrl	equ	0xFF6
 19898                           tablat	equ	0xFF5
 19899                           prodh	equ	0xFF4
 19900                           prodl	equ	0xFF3
 19901                           intcon	equ	0xFF2
 19902                           indf0	equ	0xFEF
 19903                           postinc0	equ	0xFEE
 19904                           fsr0h	equ	0xFEA
 19905                           fsr0l	equ	0xFE9
 19906                           wreg	equ	0xFE8
 19907                           indf1	equ	0xFE7
 19908                           postinc1	equ	0xFE6
 19909                           postdec1	equ	0xFE5
 19910                           fsr1h	equ	0xFE2
 19911                           fsr1l	equ	0xFE1
 19912                           indf2	equ	0xFDF
 19913                           postinc2	equ	0xFDE
 19914                           postdec2	equ	0xFDD
 19915                           plusw2	equ	0xFDB
 19916                           fsr2h	equ	0xFDA
 19917                           fsr2l	equ	0xFD9
 19918                           status	equ	0xFD8
 19919                           
 19920 ;; *************** function _strtok *****************
 19921 ;; Defined at:
 19922 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19923 ;; Parameters:    Size  Location     Type
 19924 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19925 ;;		 -> NULL(0), cmdbuf(80), 
 19926 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19927 ;;		 -> STR_127(2), STR_125(2), STR_123(2), STR_121(2), 
 19928 ;;		 -> STR_118(2), STR_114(2), STR_112(2), STR_110(2), 
 19929 ;;		 -> STR_108(2), STR_105(2), STR_87(2), STR_85(2), 
 19930 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 19931 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19932 ;;		 -> STR_31(2), STR_30(2), 
 19933 ;; Auto vars:     Size  Location     Type
 19934 ;;		None
 19935 ;; Return value:  Size  Location     Type
 19936 ;;                  2   12[BANK0 ] PTR unsigned char 
 19937 ;; Registers used:
 19938 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19939 ;; Tracked objects:
 19940 ;;		On entry : F/0
 19941 ;;		On exit  : F/0
 19942 ;;		Unchanged: 0/0
 19943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19944 ;;      Params:         0       4       0       0       0       0       0
 19945 ;;      Locals:         0       0       0       0       0       0       0
 19946 ;;      Temps:          0       0       0       0       0       0       0
 19947 ;;      Totals:         0       4       0       0       0       0       0
 19948 ;;Total ram usage:        4 bytes
 19949 ;; Hardware stack levels used:    1
 19950 ;; Hardware stack levels required when called:    5
 19951 ;; This function calls:
 19952 ;;		_strspn
 19953 ;;		_strcspn
 19954 ;; This function is called by:
 19955 ;;		_doModeVerbose
 19956 ;; This function uses a non-reentrant model
 19957 ;;
 19958                           
 19959                           	psect	text41
 19960  001B9E                     __ptext41:
 19961                           	opt stack 0
 19962  001B9E                     _strtok:
 19963                           	opt stack 23
 19964                           
 19965                           ; BSR set to: 0
 19966                           
 19967                           ; BSR set to: 0
 19968                           ;incstack = 0
 19969                           ;incstack = 0
 19970  001B9E  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19971  001BA0  116C               	iorwf	strtok@s1& (0+255),w,b
 19972  001BA2  E104               	bnz	l15612
 19973                           
 19974                           ; BSR set to: 0
 19975  001BA4  C024  F06C         	movff	strtok@sp,strtok@s1
 19976  001BA8  C025  F06D         	movff	strtok@sp+1,strtok@s1+1
 19977  001BAC                     l15612:
 19978                           
 19979                           ; BSR set to: 0
 19980  001BAC  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19981  001BAE  116C               	iorwf	strtok@s1& (0+255),w,b
 19982  001BB0  E016               	bz	L31
 19983                           
 19984                           ; BSR set to: 0
 19985                           
 19986                           ; BSR set to: 0
 19987  001BB2  C06C  F066         	movff	strtok@s1,?_strspn
 19988  001BB6  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19989  001BBA  C06E  F068         	movff	strtok@s2,?_strspn+2
 19990  001BBE  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19991  001BC2  ECB0  F009         	call	_strspn	;wreg free
 19992  001BC6  5166               	movf	?_strspn& (0+255),w,b
 19993  001BC8  276C               	addwf	strtok@s1& (0+255),f,b
 19994  001BCA  5167               	movf	(?_strspn+1)& (0+255),w,b
 19995  001BCC  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19996                           
 19997                           ; BSR set to: 0
 19998  001BCE  C06C  FFD9         	movff	strtok@s1,fsr2l
 19999  001BD2  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 20000  001BD6  50DF               	movf	indf2,w,c
 20001  001BD8  E105               	bnz	l15622
 20002                           
 20003                           ; BSR set to: 0
 20004  001BDA  6A24               	clrf	strtok@sp,c
 20005  001BDC  6A25               	clrf	strtok@sp+1,c
 20006  001BDE                     L31:
 20007  001BDE  6B6C               	clrf	?_strtok& (0+255),b
 20008  001BE0  6B6D               	clrf	(?_strtok+1)& (0+255),b
 20009  001BE2  D025               	goto	l2613
 20010  001BE4                     l15622:
 20011                           
 20012                           ; BSR set to: 0
 20013  001BE4  C06C  F066         	movff	strtok@s1,?_strcspn
 20014  001BE8  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 20015  001BEC  C06E  F068         	movff	strtok@s2,?_strcspn+2
 20016  001BF0  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 20017  001BF4  ECD2  F009         	call	_strcspn	;wreg free
 20018  001BF8  5166               	movf	?_strcspn& (0+255),w,b
 20019  001BFA  256C               	addwf	strtok@s1& (0+255),w,b
 20020  001BFC  6E24               	movwf	strtok@sp,c
 20021  001BFE  5167               	movf	(?_strcspn+1)& (0+255),w,b
 20022  001C00  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 20023  001C02  6E25               	movwf	strtok@sp+1,c
 20024                           
 20025                           ; BSR set to: 0
 20026  001C04  C024  FFD9         	movff	strtok@sp,fsr2l
 20027  001C08  C025  FFDA         	movff	strtok@sp+1,fsr2h
 20028  001C0C  50DF               	movf	indf2,w,c
 20029  001C0E  E009               	bz	l2615
 20030                           
 20031                           ; BSR set to: 0
 20032  001C10  C024  FFD9         	movff	strtok@sp,fsr2l
 20033  001C14  C025  FFDA         	movff	strtok@sp+1,fsr2h
 20034  001C18  0E00               	movlw	0
 20035  001C1A  6EDF               	movwf	indf2,c
 20036                           
 20037                           ; BSR set to: 0
 20038  001C1C  4A24               	infsnz	strtok@sp,f,c
 20039  001C1E  2A25               	incf	strtok@sp+1,f,c
 20040  001C20  D002               	goto	l2616
 20041  001C22                     l2615:
 20042                           
 20043                           ; BSR set to: 0
 20044  001C22  6A24               	clrf	strtok@sp,c
 20045  001C24  6A25               	clrf	strtok@sp+1,c
 20046  001C26                     l2616:
 20047                           
 20048                           ; BSR set to: 0
 20049  001C26  C06C  F06C         	movff	strtok@s1,?_strtok
 20050  001C2A  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 20051  001C2E                     l2613:
 20052                           
 20053                           ; BSR set to: 0
 20054  001C2E  0012               	return	
 20055  001C30                     __end_of_strtok:
 20056                           	opt stack 0
 20057                           tblptru	equ	0xFF8
 20058                           tblptrh	equ	0xFF7
 20059                           tblptrl	equ	0xFF6
 20060                           tablat	equ	0xFF5
 20061                           prodh	equ	0xFF4
 20062                           prodl	equ	0xFF3
 20063                           intcon	equ	0xFF2
 20064                           indf0	equ	0xFEF
 20065                           postinc0	equ	0xFEE
 20066                           fsr0h	equ	0xFEA
 20067                           fsr0l	equ	0xFE9
 20068                           wreg	equ	0xFE8
 20069                           indf1	equ	0xFE7
 20070                           postinc1	equ	0xFE6
 20071                           postdec1	equ	0xFE5
 20072                           fsr1h	equ	0xFE2
 20073                           fsr1l	equ	0xFE1
 20074                           indf2	equ	0xFDF
 20075                           postinc2	equ	0xFDE
 20076                           postdec2	equ	0xFDD
 20077                           plusw2	equ	0xFDB
 20078                           fsr2h	equ	0xFDA
 20079                           fsr2l	equ	0xFD9
 20080                           status	equ	0xFD8
 20081                           
 20082 ;; *************** function _strcspn *****************
 20083 ;; Defined at:
 20084 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 20085 ;; Parameters:    Size  Location     Type
 20086 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20087 ;;		 -> NULL(0), cmdbuf(80), 
 20088 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20089 ;;		 -> STR_127(2), STR_125(2), STR_123(2), STR_121(2), 
 20090 ;;		 -> STR_118(2), STR_114(2), STR_112(2), STR_110(2), 
 20091 ;;		 -> STR_108(2), STR_105(2), STR_87(2), STR_85(2), 
 20092 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20093 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20094 ;;		 -> STR_31(2), STR_30(2), 
 20095 ;; Auto vars:     Size  Location     Type
 20096 ;;  i               2   10[BANK0 ] unsigned int 
 20097 ;; Return value:  Size  Location     Type
 20098 ;;                  2    6[BANK0 ] unsigned int 
 20099 ;; Registers used:
 20100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20101 ;; Tracked objects:
 20102 ;;		On entry : F/0
 20103 ;;		On exit  : F/0
 20104 ;;		Unchanged: 0/0
 20105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20106 ;;      Params:         0       4       0       0       0       0       0
 20107 ;;      Locals:         0       2       0       0       0       0       0
 20108 ;;      Temps:          0       0       0       0       0       0       0
 20109 ;;      Totals:         0       6       0       0       0       0       0
 20110 ;;Total ram usage:        6 bytes
 20111 ;; Hardware stack levels used:    1
 20112 ;; Hardware stack levels required when called:    4
 20113 ;; This function calls:
 20114 ;;		_strchr
 20115 ;; This function is called by:
 20116 ;;		_strtok
 20117 ;; This function uses a non-reentrant model
 20118 ;;
 20119                           
 20120                           	psect	text42
 20121  0013A4                     __ptext42:
 20122                           	opt stack 0
 20123  0013A4                     _strcspn:
 20124                           	opt stack 23
 20125                           
 20126                           ; BSR set to: 0
 20127                           
 20128                           ; BSR set to: 0
 20129                           ;incstack = 0
 20130                           ;incstack = 0
 20131  0013A4  6B6A               	clrf	strcspn@i& (0+255),b
 20132  0013A6  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 20133  0013A8  D004               	goto	l17218
 20134  0013AA                     l17216:
 20135                           
 20136                           ; BSR set to: 0
 20137  0013AA  4B66               	infsnz	strcspn@s1& (0+255),f,b
 20138  0013AC  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 20139  0013AE  4B6A               	infsnz	strcspn@i& (0+255),f,b
 20140  0013B0  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 20141  0013B2                     l17218:
 20142                           
 20143                           ; BSR set to: 0
 20144  0013B2  C066  FFD9         	movff	strcspn@s1,fsr2l
 20145  0013B6  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20146  0013BA  50DF               	movf	indf2,w,c
 20147  0013BC  E010               	bz	l2640
 20148                           
 20149                           ; BSR set to: 0
 20150  0013BE  C068  F060         	movff	strcspn@s2,?_strchr
 20151  0013C2  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 20152  0013C6  C066  FFD9         	movff	strcspn@s1,fsr2l
 20153  0013CA  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20154  0013CE  50DF               	movf	indf2,w,c
 20155  0013D0  6F62               	movwf	(?_strchr+2)& (0+255),b
 20156  0013D2  6B63               	clrf	(?_strchr+3)& (0+255),b
 20157  0013D4  EC74  F00B         	call	_strchr	;wreg free
 20158  0013D8  5161               	movf	(?_strchr+1)& (0+255),w,b
 20159  0013DA  1160               	iorwf	?_strchr& (0+255),w,b
 20160  0013DC  E0E6               	bz	l17216
 20161  0013DE                     l2640:
 20162                           
 20163                           ; BSR set to: 0
 20164  0013DE  C06A  F066         	movff	strcspn@i,?_strcspn
 20165  0013E2  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 20166                           
 20167                           ; BSR set to: 0
 20168  0013E6  0012               	return	
 20169  0013E8                     __end_of_strcspn:
 20170                           	opt stack 0
 20171                           tblptru	equ	0xFF8
 20172                           tblptrh	equ	0xFF7
 20173                           tblptrl	equ	0xFF6
 20174                           tablat	equ	0xFF5
 20175                           prodh	equ	0xFF4
 20176                           prodl	equ	0xFF3
 20177                           intcon	equ	0xFF2
 20178                           indf0	equ	0xFEF
 20179                           postinc0	equ	0xFEE
 20180                           fsr0h	equ	0xFEA
 20181                           fsr0l	equ	0xFE9
 20182                           wreg	equ	0xFE8
 20183                           indf1	equ	0xFE7
 20184                           postinc1	equ	0xFE6
 20185                           postdec1	equ	0xFE5
 20186                           fsr1h	equ	0xFE2
 20187                           fsr1l	equ	0xFE1
 20188                           indf2	equ	0xFDF
 20189                           postinc2	equ	0xFDE
 20190                           postdec2	equ	0xFDD
 20191                           plusw2	equ	0xFDB
 20192                           fsr2h	equ	0xFDA
 20193                           fsr2l	equ	0xFD9
 20194                           status	equ	0xFD8
 20195                           
 20196 ;; *************** function _strspn *****************
 20197 ;; Defined at:
 20198 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 20199 ;; Parameters:    Size  Location     Type
 20200 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20201 ;;		 -> NULL(0), cmdbuf(80), 
 20202 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20203 ;;		 -> STR_127(2), STR_125(2), STR_123(2), STR_121(2), 
 20204 ;;		 -> STR_118(2), STR_114(2), STR_112(2), STR_110(2), 
 20205 ;;		 -> STR_108(2), STR_105(2), STR_87(2), STR_85(2), 
 20206 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20207 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20208 ;;		 -> STR_31(2), STR_30(2), 
 20209 ;; Auto vars:     Size  Location     Type
 20210 ;;  i               2   10[BANK0 ] unsigned int 
 20211 ;; Return value:  Size  Location     Type
 20212 ;;                  2    6[BANK0 ] unsigned int 
 20213 ;; Registers used:
 20214 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20215 ;; Tracked objects:
 20216 ;;		On entry : F/0
 20217 ;;		On exit  : F/0
 20218 ;;		Unchanged: 0/0
 20219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20220 ;;      Params:         0       4       0       0       0       0       0
 20221 ;;      Locals:         0       2       0       0       0       0       0
 20222 ;;      Temps:          0       0       0       0       0       0       0
 20223 ;;      Totals:         0       6       0       0       0       0       0
 20224 ;;Total ram usage:        6 bytes
 20225 ;; Hardware stack levels used:    1
 20226 ;; Hardware stack levels required when called:    4
 20227 ;; This function calls:
 20228 ;;		_strchr
 20229 ;; This function is called by:
 20230 ;;		_strtok
 20231 ;; This function uses a non-reentrant model
 20232 ;;
 20233                           
 20234                           	psect	text43
 20235  001360                     __ptext43:
 20236                           	opt stack 0
 20237  001360                     _strspn:
 20238                           	opt stack 23
 20239                           
 20240                           ; BSR set to: 0
 20241                           
 20242                           ; BSR set to: 0
 20243                           ;incstack = 0
 20244                           ;incstack = 0
 20245  001360  6B6A               	clrf	strspn@i& (0+255),b
 20246  001362  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20247  001364  D004               	goto	l17210
 20248  001366                     l17208:
 20249                           
 20250                           ; BSR set to: 0
 20251  001366  4B66               	infsnz	strspn@s1& (0+255),f,b
 20252  001368  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20253  00136A  4B6A               	infsnz	strspn@i& (0+255),f,b
 20254  00136C  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20255  00136E                     l17210:
 20256                           
 20257                           ; BSR set to: 0
 20258  00136E  C066  FFD9         	movff	strspn@s1,fsr2l
 20259  001372  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20260  001376  50DF               	movf	indf2,w,c
 20261  001378  E010               	bz	l2659
 20262                           
 20263                           ; BSR set to: 0
 20264  00137A  C068  F060         	movff	strspn@s2,?_strchr
 20265  00137E  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20266  001382  C066  FFD9         	movff	strspn@s1,fsr2l
 20267  001386  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20268  00138A  50DF               	movf	indf2,w,c
 20269  00138C  6F62               	movwf	(?_strchr+2)& (0+255),b
 20270  00138E  6B63               	clrf	(?_strchr+3)& (0+255),b
 20271  001390  EC74  F00B         	call	_strchr	;wreg free
 20272  001394  5161               	movf	(?_strchr+1)& (0+255),w,b
 20273  001396  1160               	iorwf	?_strchr& (0+255),w,b
 20274  001398  E1E6               	bnz	l17208
 20275  00139A                     l2659:
 20276                           
 20277                           ; BSR set to: 0
 20278  00139A  C06A  F066         	movff	strspn@i,?_strspn
 20279  00139E  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20280                           
 20281                           ; BSR set to: 0
 20282  0013A2  0012               	return	
 20283  0013A4                     __end_of_strspn:
 20284                           	opt stack 0
 20285                           tblptru	equ	0xFF8
 20286                           tblptrh	equ	0xFF7
 20287                           tblptrl	equ	0xFF6
 20288                           tablat	equ	0xFF5
 20289                           prodh	equ	0xFF4
 20290                           prodl	equ	0xFF3
 20291                           intcon	equ	0xFF2
 20292                           indf0	equ	0xFEF
 20293                           postinc0	equ	0xFEE
 20294                           fsr0h	equ	0xFEA
 20295                           fsr0l	equ	0xFE9
 20296                           wreg	equ	0xFE8
 20297                           indf1	equ	0xFE7
 20298                           postinc1	equ	0xFE6
 20299                           postdec1	equ	0xFE5
 20300                           fsr1h	equ	0xFE2
 20301                           fsr1l	equ	0xFE1
 20302                           indf2	equ	0xFDF
 20303                           postinc2	equ	0xFDE
 20304                           postdec2	equ	0xFDD
 20305                           plusw2	equ	0xFDB
 20306                           fsr2h	equ	0xFDA
 20307                           fsr2l	equ	0xFD9
 20308                           status	equ	0xFD8
 20309                           
 20310 ;; *************** function _strchr *****************
 20311 ;; Defined at:
 20312 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20313 ;; Parameters:    Size  Location     Type
 20314 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20315 ;;		 -> STR_127(2), STR_125(2), STR_123(2), STR_121(2), 
 20316 ;;		 -> STR_118(2), STR_114(2), STR_112(2), STR_110(2), 
 20317 ;;		 -> STR_108(2), STR_105(2), STR_87(2), STR_85(2), 
 20318 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20319 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20320 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20321 ;;  chr             2    2[BANK0 ] int 
 20322 ;; Auto vars:     Size  Location     Type
 20323 ;;		None
 20324 ;; Return value:  Size  Location     Type
 20325 ;;                  2    0[BANK0 ] PTR unsigned char 
 20326 ;; Registers used:
 20327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20328 ;; Tracked objects:
 20329 ;;		On entry : F/0
 20330 ;;		On exit  : F/0
 20331 ;;		Unchanged: 0/0
 20332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20333 ;;      Params:         0       4       0       0       0       0       0
 20334 ;;      Locals:         0       0       0       0       0       0       0
 20335 ;;      Temps:          0       2       0       0       0       0       0
 20336 ;;      Totals:         0       6       0       0       0       0       0
 20337 ;;Total ram usage:        6 bytes
 20338 ;; Hardware stack levels used:    1
 20339 ;; Hardware stack levels required when called:    3
 20340 ;; This function calls:
 20341 ;;		Nothing
 20342 ;; This function is called by:
 20343 ;;		_doModeVerbose
 20344 ;;		_strcspn
 20345 ;;		_strspn
 20346 ;; This function uses a non-reentrant model
 20347 ;;
 20348                           
 20349                           	psect	text44
 20350  0016E8                     __ptext44:
 20351                           	opt stack 0
 20352  0016E8                     _strchr:
 20353                           	opt stack 25
 20354  0016E8                     l2561:
 20355                           
 20356                           ; BSR set to: 0
 20357  0016E8  0100               	movlb	0	; () banked
 20358  0016EA  5160               	movf	strchr@ptr& (0+255),w,b
 20359  0016EC  6EF6               	movwf	tblptrl,c
 20360  0016EE  6EE9               	movwf	fsr0l,c
 20361  0016F0  0E05               	movlw	(high __ramtop+-1)
 20362  0016F2  6EEA               	movwf	fsr0h,c
 20363  0016F4  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20364  0016F6  64EA               	cpfsgt	fsr0h,c
 20365  0016F8  D003               	bra	u15597
 20366  0016FA  6EEA               	movwf	fsr0h,c
 20367  0016FC  50EF               	movf	indf0,w,c
 20368  0016FE  D003               	bra	u15590
 20369  001700                     u15597:
 20370  001700  6EF7               	movwf	tblptrh,c
 20371  001702  0008               	tblrd		*
 20372  001704  50F5               	movf	tablat,w,c
 20373  001706                     u15590:
 20374  001706  0100               	movlb	0	; () banked
 20375  001708  1962               	xorwf	strchr@chr& (0+255),w,b
 20376  00170A  E105               	bnz	l12420
 20377                           
 20378                           ; BSR set to: 0
 20379  00170C  C060  F060         	movff	strchr@ptr,?_strchr
 20380  001710  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20381  001714  D019               	goto	l2563
 20382  001716                     l12420:
 20383                           
 20384                           ; BSR set to: 0
 20385  001716  5160               	movf	strchr@ptr& (0+255),w,b
 20386  001718  6F64               	movwf	??_strchr& (0+255),b
 20387  00171A  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20388  00171C  6F65               	movwf	(??_strchr+1)& (0+255),b
 20389  00171E  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20390  001720  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20391  001722  5164               	movf	??_strchr& (0+255),w,b
 20392  001724  6EF6               	movwf	tblptrl,c
 20393  001726  6EE9               	movwf	fsr0l,c
 20394  001728  0E05               	movlw	(high __ramtop+-1)
 20395  00172A  6EEA               	movwf	fsr0h,c
 20396  00172C  5165               	movf	(??_strchr+1)& (0+255),w,b
 20397  00172E  64EA               	cpfsgt	fsr0h,c
 20398  001730  D003               	bra	u15617
 20399  001732  6EEA               	movwf	fsr0h,c
 20400  001734  50EF               	movf	indf0,w,c
 20401  001736  D003               	bra	u15610
 20402  001738                     u15617:
 20403  001738  6EF7               	movwf	tblptrh,c
 20404  00173A  0008               	tblrd		*
 20405  00173C  50F5               	movf	tablat,w,c
 20406  00173E                     u15610:
 20407  00173E  0900               	iorlw	0
 20408  001740  E1D3               	bnz	l2561
 20409  001742  0100               	movlb	0	; () banked
 20410  001744  6B60               	clrf	?_strchr& (0+255),b
 20411  001746  6B61               	clrf	(?_strchr+1)& (0+255),b
 20412  001748                     l2563:
 20413                           
 20414                           ; BSR set to: 0
 20415  001748  0012               	return	
 20416  00174A                     __end_of_strchr:
 20417                           	opt stack 0
 20418                           tblptru	equ	0xFF8
 20419                           tblptrh	equ	0xFF7
 20420                           tblptrl	equ	0xFF6
 20421                           tablat	equ	0xFF5
 20422                           prodh	equ	0xFF4
 20423                           prodl	equ	0xFF3
 20424                           intcon	equ	0xFF2
 20425                           indf0	equ	0xFEF
 20426                           postinc0	equ	0xFEE
 20427                           fsr0h	equ	0xFEA
 20428                           fsr0l	equ	0xFE9
 20429                           wreg	equ	0xFE8
 20430                           indf1	equ	0xFE7
 20431                           postinc1	equ	0xFE6
 20432                           postdec1	equ	0xFE5
 20433                           fsr1h	equ	0xFE2
 20434                           fsr1l	equ	0xFE1
 20435                           indf2	equ	0xFDF
 20436                           postinc2	equ	0xFDE
 20437                           postdec2	equ	0xFDD
 20438                           plusw2	equ	0xFDB
 20439                           fsr2h	equ	0xFDA
 20440                           fsr2l	equ	0xFD9
 20441                           status	equ	0xFD8
 20442                           
 20443 ;; *************** function _stristr *****************
 20444 ;; Defined at:
 20445 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20446 ;; Parameters:    Size  Location     Type
 20447 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20448 ;;		 -> NULL(0), cmdbuf(80), 
 20449 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20450 ;;		 -> STR_159(2), STR_158(9), STR_155(4), STR_153(3), 
 20451 ;;		 -> STR_152(6), STR_151(6), STR_150(8), STR_148(6), 
 20452 ;;		 -> STR_146(5), STR_144(8), STR_143(6), STR_142(9), 
 20453 ;;		 -> STR_141(7), STR_140(7), STR_139(5), STR_138(6), 
 20454 ;;		 -> STR_137(9), STR_135(11), STR_133(8), STR_131(4), 
 20455 ;;		 -> STR_130(5), STR_117(5), STR_104(7), STR_97(5), 
 20456 ;;		 -> STR_81(5), STR_49(5), STR_47(5), STR_45(5), 
 20457 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20458 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20459 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20460 ;; Auto vars:     Size  Location     Type
 20461 ;;		None
 20462 ;; Return value:  Size  Location     Type
 20463 ;;                  2   13[BANK0 ] PTR unsigned char 
 20464 ;; Registers used:
 20465 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20466 ;; Tracked objects:
 20467 ;;		On entry : F/0
 20468 ;;		On exit  : F/0
 20469 ;;		Unchanged: 0/0
 20470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20471 ;;      Params:         0       4       0       0       0       0       0
 20472 ;;      Locals:         0       0       0       0       0       0       0
 20473 ;;      Temps:          0       0       0       0       0       0       0
 20474 ;;      Totals:         0       4       0       0       0       0       0
 20475 ;;Total ram usage:        4 bytes
 20476 ;; Hardware stack levels used:    1
 20477 ;; Hardware stack levels required when called:    5
 20478 ;; This function calls:
 20479 ;;		_strlen
 20480 ;;		_strnicmp
 20481 ;;		_strichr
 20482 ;; This function is called by:
 20483 ;;		_doModeVerbose
 20484 ;; This function uses a non-reentrant model
 20485 ;;
 20486                           
 20487                           	psect	text45
 20488  00190C                     __ptext45:
 20489                           	opt stack 0
 20490  00190C                     _stristr:
 20491                           	opt stack 23
 20492                           
 20493                           ; BSR set to: 0
 20494                           
 20495                           ; BSR set to: 0
 20496                           ;incstack = 0
 20497                           ;incstack = 0
 20498  00190C  D02F               	goto	l15604
 20499  00190E                     l15598:
 20500                           
 20501                           ; BSR set to: 0
 20502  00190E  C06D  F064         	movff	stristr@s1,?_strnicmp
 20503  001912  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20504  001916  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20505  00191A  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20506  00191E  C06F  F060         	movff	stristr@s2,?_strlen
 20507  001922  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20508  001926  EC6F  F009         	call	_strlen	;wreg free
 20509  00192A  C060  F068         	movff	?_strlen,?_strnicmp+4
 20510  00192E  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20511  001932  ECA5  F00B         	call	_strnicmp	;wreg free
 20512  001936  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20513  001938  1164               	iorwf	?_strnicmp& (0+255),w,b
 20514  00193A  E105               	bnz	l15602
 20515                           
 20516                           ; BSR set to: 0
 20517  00193C  C06D  F06D         	movff	stristr@s1,?_stristr
 20518  001940  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20519  001944  D01E               	goto	l2582
 20520  001946                     l15602:
 20521                           
 20522                           ; BSR set to: 0
 20523  001946  296D               	incf	stristr@s1& (0+255),w,b
 20524  001948  6F61               	movwf	?_strichr& (0+255),b
 20525  00194A  0E00               	movlw	0
 20526  00194C  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20527  00194E  6F62               	movwf	(?_strichr+1)& (0+255),b
 20528  001950  C06F  FFF6         	movff	stristr@s2,tblptrl
 20529  001954  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20530  001958  0008               	tblrd		*
 20531  00195A  50F5               	movf	tablat,w,c
 20532  00195C  6F63               	movwf	(?_strichr+2)& (0+255),b
 20533  00195E  6B64               	clrf	(?_strichr+3)& (0+255),b
 20534  001960  EC11  F009         	call	_strichr	;wreg free
 20535  001964  C061  F06D         	movff	?_strichr,stristr@s1
 20536  001968  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20537  00196C                     l15604:
 20538                           
 20539                           ; BSR set to: 0
 20540  00196C  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20541  00196E  116D               	iorwf	stristr@s1& (0+255),w,b
 20542  001970  E006               	bz	l2585
 20543                           
 20544                           ; BSR set to: 0
 20545  001972  C06D  FFD9         	movff	stristr@s1,fsr2l
 20546  001976  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20547  00197A  50DF               	movf	indf2,w,c
 20548  00197C  E1C8               	bnz	l15598
 20549  00197E                     l2585:
 20550                           
 20551                           ; BSR set to: 0
 20552  00197E  6B6D               	clrf	?_stristr& (0+255),b
 20553  001980  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20554  001982                     l2582:
 20555                           
 20556                           ; BSR set to: 0
 20557  001982  0012               	return	
 20558  001984                     __end_of_stristr:
 20559                           	opt stack 0
 20560                           tblptru	equ	0xFF8
 20561                           tblptrh	equ	0xFF7
 20562                           tblptrl	equ	0xFF6
 20563                           tablat	equ	0xFF5
 20564                           prodh	equ	0xFF4
 20565                           prodl	equ	0xFF3
 20566                           intcon	equ	0xFF2
 20567                           indf0	equ	0xFEF
 20568                           postinc0	equ	0xFEE
 20569                           fsr0h	equ	0xFEA
 20570                           fsr0l	equ	0xFE9
 20571                           wreg	equ	0xFE8
 20572                           indf1	equ	0xFE7
 20573                           postinc1	equ	0xFE6
 20574                           postdec1	equ	0xFE5
 20575                           fsr1h	equ	0xFE2
 20576                           fsr1l	equ	0xFE1
 20577                           indf2	equ	0xFDF
 20578                           postinc2	equ	0xFDE
 20579                           postdec2	equ	0xFDD
 20580                           plusw2	equ	0xFDB
 20581                           fsr2h	equ	0xFDA
 20582                           fsr2l	equ	0xFD9
 20583                           status	equ	0xFD8
 20584                           
 20585 ;; *************** function _strichr *****************
 20586 ;; Defined at:
 20587 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20588 ;; Parameters:    Size  Location     Type
 20589 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20590 ;;		 -> NULL(0), cmdbuf(80), 
 20591 ;;  chr             2    3[BANK0 ] int 
 20592 ;; Auto vars:     Size  Location     Type
 20593 ;;		None
 20594 ;; Return value:  Size  Location     Type
 20595 ;;                  2    1[BANK0 ] PTR unsigned char 
 20596 ;; Registers used:
 20597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20598 ;; Tracked objects:
 20599 ;;		On entry : F/0
 20600 ;;		On exit  : F/0
 20601 ;;		Unchanged: 0/0
 20602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20603 ;;      Params:         0       4       0       0       0       0       0
 20604 ;;      Locals:         0       0       0       0       0       0       0
 20605 ;;      Temps:          0       0       0       0       0       0       0
 20606 ;;      Totals:         0       4       0       0       0       0       0
 20607 ;;Total ram usage:        4 bytes
 20608 ;; Hardware stack levels used:    1
 20609 ;; Hardware stack levels required when called:    4
 20610 ;; This function calls:
 20611 ;;		_toupper
 20612 ;; This function is called by:
 20613 ;;		_stristr
 20614 ;; This function uses a non-reentrant model
 20615 ;;
 20616                           
 20617                           	psect	text46
 20618  001222                     __ptext46:
 20619                           	opt stack 0
 20620  001222                     _strichr:
 20621                           	opt stack 23
 20622                           
 20623                           ; BSR set to: 0
 20624                           
 20625                           ; BSR set to: 0
 20626                           ;incstack = 0
 20627                           ;incstack = 0
 20628  001222  5163               	movf	strichr@chr& (0+255),w,b
 20629  001224  ECDF  F007         	call	_toupper
 20630  001228  6F63               	movwf	strichr@chr& (0+255),b
 20631  00122A  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20632  00122C  D010               	goto	l17194
 20633  00122E                     l17188:
 20634                           
 20635                           ; BSR set to: 0
 20636  00122E  C061  FFD9         	movff	strichr@ptr,fsr2l
 20637  001232  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20638  001236  50DF               	movf	indf2,w,c
 20639  001238  ECDF  F007         	call	_toupper
 20640  00123C  1963               	xorwf	strichr@chr& (0+255),w,b
 20641  00123E  E105               	bnz	l17192
 20642                           
 20643                           ; BSR set to: 0
 20644  001240  C061  F061         	movff	strichr@ptr,?_strichr
 20645  001244  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20646  001248  D00A               	goto	l2649
 20647  00124A                     l17192:
 20648                           
 20649                           ; BSR set to: 0
 20650  00124A  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20651  00124C  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20652  00124E                     l17194:
 20653                           
 20654                           ; BSR set to: 0
 20655  00124E  C061  FFD9         	movff	strichr@ptr,fsr2l
 20656  001252  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20657  001256  50DF               	movf	indf2,w,c
 20658  001258  E1EA               	bnz	l17188
 20659                           
 20660                           ; BSR set to: 0
 20661  00125A  6B61               	clrf	?_strichr& (0+255),b
 20662  00125C  6B62               	clrf	(?_strichr+1)& (0+255),b
 20663  00125E                     l2649:
 20664                           
 20665                           ; BSR set to: 0
 20666  00125E  0012               	return	
 20667  001260                     __end_of_strichr:
 20668                           	opt stack 0
 20669                           tblptru	equ	0xFF8
 20670                           tblptrh	equ	0xFF7
 20671                           tblptrl	equ	0xFF6
 20672                           tablat	equ	0xFF5
 20673                           prodh	equ	0xFF4
 20674                           prodl	equ	0xFF3
 20675                           intcon	equ	0xFF2
 20676                           indf0	equ	0xFEF
 20677                           postinc0	equ	0xFEE
 20678                           fsr0h	equ	0xFEA
 20679                           fsr0l	equ	0xFE9
 20680                           wreg	equ	0xFE8
 20681                           indf1	equ	0xFE7
 20682                           postinc1	equ	0xFE6
 20683                           postdec1	equ	0xFE5
 20684                           fsr1h	equ	0xFE2
 20685                           fsr1l	equ	0xFE1
 20686                           indf2	equ	0xFDF
 20687                           postinc2	equ	0xFDE
 20688                           postdec2	equ	0xFDD
 20689                           plusw2	equ	0xFDB
 20690                           fsr2h	equ	0xFDA
 20691                           fsr2l	equ	0xFD9
 20692                           status	equ	0xFD8
 20693                           
 20694 ;; *************** function _strnicmp *****************
 20695 ;; Defined at:
 20696 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20697 ;; Parameters:    Size  Location     Type
 20698 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20699 ;;		 -> NULL(0), cmdbuf(80), 
 20700 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20701 ;;		 -> STR_159(2), STR_158(9), STR_155(4), STR_153(3), 
 20702 ;;		 -> STR_152(6), STR_151(6), STR_150(8), STR_148(6), 
 20703 ;;		 -> STR_146(5), STR_144(8), STR_143(6), STR_142(9), 
 20704 ;;		 -> STR_141(7), STR_140(7), STR_139(5), STR_138(6), 
 20705 ;;		 -> STR_137(9), STR_135(11), STR_133(8), STR_131(4), 
 20706 ;;		 -> STR_130(5), STR_117(5), STR_104(7), STR_97(5), 
 20707 ;;		 -> STR_81(5), STR_49(5), STR_47(5), STR_45(5), 
 20708 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20709 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20710 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20711 ;;  len             2    8[BANK0 ] unsigned int 
 20712 ;; Auto vars:     Size  Location     Type
 20713 ;;  r               1   12[BANK0 ] char 
 20714 ;; Return value:  Size  Location     Type
 20715 ;;                  2    4[BANK0 ] int 
 20716 ;; Registers used:
 20717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20718 ;; Tracked objects:
 20719 ;;		On entry : F/0
 20720 ;;		On exit  : F/0
 20721 ;;		Unchanged: 0/0
 20722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20723 ;;      Params:         0       6       0       0       0       0       0
 20724 ;;      Locals:         0       1       0       0       0       0       0
 20725 ;;      Temps:          0       2       0       0       0       0       0
 20726 ;;      Totals:         0       9       0       0       0       0       0
 20727 ;;Total ram usage:        9 bytes
 20728 ;; Hardware stack levels used:    1
 20729 ;; Hardware stack levels required when called:    4
 20730 ;; This function calls:
 20731 ;;		_toupper
 20732 ;; This function is called by:
 20733 ;;		_stristr
 20734 ;; This function uses a non-reentrant model
 20735 ;;
 20736                           
 20737                           	psect	text47
 20738  00174A                     __ptext47:
 20739                           	opt stack 0
 20740  00174A                     _strnicmp:
 20741                           	opt stack 23
 20742                           
 20743                           ; BSR set to: 0
 20744                           
 20745                           ; BSR set to: 0
 20746                           ;incstack = 0
 20747                           ;incstack = 0
 20748  00174A  D027               	goto	l17184
 20749  00174C                     l17174:
 20750                           
 20751                           ; BSR set to: 0
 20752  00174C  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20753  001750  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20754  001754  0008               	tblrd		*
 20755  001756  50F5               	movf	tablat,w,c
 20756  001758  ECDF  F007         	call	_toupper
 20757  00175C  6F6A               	movwf	??_strnicmp& (0+255),b
 20758  00175E  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20759  001762  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20760  001766  50DF               	movf	indf2,w,c
 20761  001768  ECDF  F007         	call	_toupper
 20762  00176C  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20763  00176E  516A               	movf	??_strnicmp& (0+255),w,b
 20764  001770  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20765  001772  6F6C               	movwf	strnicmp@r& (0+255),b
 20766  001774  0100               	movlb	0	; () banked
 20767  001776  676C               	tstfsz	strnicmp@r& (0+255),b
 20768  001778  D006               	goto	l17178
 20769                           
 20770                           ; BSR set to: 0
 20771  00177A  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20772  00177E  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20773  001782  50DF               	movf	indf2,w,c
 20774  001784  E106               	bnz	l17182
 20775  001786                     l17178:
 20776                           
 20777                           ; BSR set to: 0
 20778  001786  516C               	movf	strnicmp@r& (0+255),w,b
 20779  001788  6F64               	movwf	?_strnicmp& (0+255),b
 20780  00178A  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20781  00178C  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20782  00178E  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20783  001790  D00E               	goto	l2601
 20784  001792                     l17182:
 20785                           
 20786                           ; BSR set to: 0
 20787  001792  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20788  001794  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20789  001796  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20790  001798  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20791  00179A                     l17184:
 20792                           
 20793                           ; BSR set to: 0
 20794  00179A  0768               	decf	strnicmp@len& (0+255),f,b
 20795  00179C  A0D8               	btfss	status,0,c
 20796  00179E  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20797  0017A0  0100               	movlb	0	; () banked
 20798  0017A2  2968               	incf	strnicmp@len& (0+255),w,b
 20799  0017A4  B4D8               	btfsc	status,2,c
 20800  0017A6  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20801  0017A8  E1D1               	bnz	l17174
 20802                           
 20803                           ; BSR set to: 0
 20804  0017AA  6B64               	clrf	?_strnicmp& (0+255),b
 20805  0017AC  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20806  0017AE                     l2601:
 20807                           
 20808                           ; BSR set to: 0
 20809  0017AE  0012               	return	
 20810  0017B0                     __end_of_strnicmp:
 20811                           	opt stack 0
 20812                           tblptru	equ	0xFF8
 20813                           tblptrh	equ	0xFF7
 20814                           tblptrl	equ	0xFF6
 20815                           tablat	equ	0xFF5
 20816                           prodh	equ	0xFF4
 20817                           prodl	equ	0xFF3
 20818                           intcon	equ	0xFF2
 20819                           indf0	equ	0xFEF
 20820                           postinc0	equ	0xFEE
 20821                           fsr0h	equ	0xFEA
 20822                           fsr0l	equ	0xFE9
 20823                           wreg	equ	0xFE8
 20824                           indf1	equ	0xFE7
 20825                           postinc1	equ	0xFE6
 20826                           postdec1	equ	0xFE5
 20827                           fsr1h	equ	0xFE2
 20828                           fsr1l	equ	0xFE1
 20829                           indf2	equ	0xFDF
 20830                           postinc2	equ	0xFDE
 20831                           postdec2	equ	0xFDD
 20832                           plusw2	equ	0xFDB
 20833                           fsr2h	equ	0xFDA
 20834                           fsr2l	equ	0xFD9
 20835                           status	equ	0xFD8
 20836                           
 20837 ;; *************** function _toupper *****************
 20838 ;; Defined at:
 20839 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20840 ;; Parameters:    Size  Location     Type
 20841 ;;  c               1    wreg     unsigned char 
 20842 ;; Auto vars:     Size  Location     Type
 20843 ;;  c               1    0[BANK0 ] unsigned char 
 20844 ;; Return value:  Size  Location     Type
 20845 ;;                  1    wreg      unsigned char 
 20846 ;; Registers used:
 20847 ;;		wreg, status,2, status,0
 20848 ;; Tracked objects:
 20849 ;;		On entry : F/0
 20850 ;;		On exit  : F/0
 20851 ;;		Unchanged: 0/0
 20852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20853 ;;      Params:         0       0       0       0       0       0       0
 20854 ;;      Locals:         0       1       0       0       0       0       0
 20855 ;;      Temps:          0       0       0       0       0       0       0
 20856 ;;      Totals:         0       1       0       0       0       0       0
 20857 ;;Total ram usage:        1 bytes
 20858 ;; Hardware stack levels used:    1
 20859 ;; Hardware stack levels required when called:    3
 20860 ;; This function calls:
 20861 ;;		Nothing
 20862 ;; This function is called by:
 20863 ;;		_strnicmp
 20864 ;;		_strichr
 20865 ;; This function uses a non-reentrant model
 20866 ;;
 20867                           
 20868                           	psect	text48
 20869  000FBE                     __ptext48:
 20870                           	opt stack 0
 20871  000FBE                     _toupper:
 20872                           	opt stack 23
 20873                           
 20874                           ; BSR set to: 0
 20875                           ;incstack = 0
 20876                           ;incstack = 0
 20877                           ;toupper@c stored from wreg
 20878  000FBE  CFE8 F060          	movff	wreg,toupper@c
 20879                           
 20880                           ; BSR set to: 0
 20881  000FC2  0E7B               	movlw	123
 20882  000FC4  6160               	cpfslt	toupper@c& (0+255),b
 20883  000FC6  D004               	goto	l17202
 20884                           
 20885                           ; BSR set to: 0
 20886  000FC8  0E60               	movlw	96
 20887  000FCA  6560               	cpfsgt	toupper@c& (0+255),b
 20888  000FCC  D001               	goto	l17202
 20889                           
 20890                           ; BSR set to: 0
 20891  000FCE  9B60               	bcf	toupper@c& (0+255),5,b
 20892  000FD0                     l17202:
 20893                           
 20894                           ; BSR set to: 0
 20895  000FD0  5160               	movf	toupper@c& (0+255),w,b
 20896                           
 20897                           ; BSR set to: 0
 20898  000FD2  0012               	return	
 20899  000FD4                     __end_of_toupper:
 20900                           	opt stack 0
 20901                           tblptru	equ	0xFF8
 20902                           tblptrh	equ	0xFF7
 20903                           tblptrl	equ	0xFF6
 20904                           tablat	equ	0xFF5
 20905                           prodh	equ	0xFF4
 20906                           prodl	equ	0xFF3
 20907                           intcon	equ	0xFF2
 20908                           indf0	equ	0xFEF
 20909                           postinc0	equ	0xFEE
 20910                           fsr0h	equ	0xFEA
 20911                           fsr0l	equ	0xFE9
 20912                           wreg	equ	0xFE8
 20913                           indf1	equ	0xFE7
 20914                           postinc1	equ	0xFE6
 20915                           postdec1	equ	0xFE5
 20916                           fsr1h	equ	0xFE2
 20917                           fsr1l	equ	0xFE1
 20918                           indf2	equ	0xFDF
 20919                           postinc2	equ	0xFDE
 20920                           postdec2	equ	0xFDD
 20921                           plusw2	equ	0xFDB
 20922                           fsr2h	equ	0xFDA
 20923                           fsr2l	equ	0xFD9
 20924                           status	equ	0xFD8
 20925                           
 20926 ;; *************** function _strlen *****************
 20927 ;; Defined at:
 20928 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20929 ;; Parameters:    Size  Location     Type
 20930 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20931 ;;		 -> printGUID@buf(3), STR_159(2), STR_158(9), STR_155(4), 
 20932 ;;		 -> STR_153(3), STR_152(6), STR_151(6), STR_150(8), 
 20933 ;;		 -> STR_148(6), STR_146(5), STR_144(8), STR_143(6), 
 20934 ;;		 -> STR_142(9), STR_141(7), STR_140(7), STR_139(5), 
 20935 ;;		 -> STR_138(6), STR_137(9), STR_135(11), STR_133(8), 
 20936 ;;		 -> STR_131(4), STR_130(5), STR_117(5), STR_104(7), 
 20937 ;;		 -> STR_97(5), STR_81(5), wrkbuf(80), STR_49(5), 
 20938 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20939 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20940 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20941 ;;		 -> STR_8(5), STR_6(5), cmdbuf(80), 
 20942 ;; Auto vars:     Size  Location     Type
 20943 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20944 ;;		 -> printGUID@buf(3), STR_159(2), STR_158(9), STR_155(4), 
 20945 ;;		 -> STR_153(3), STR_152(6), STR_151(6), STR_150(8), 
 20946 ;;		 -> STR_148(6), STR_146(5), STR_144(8), STR_143(6), 
 20947 ;;		 -> STR_142(9), STR_141(7), STR_140(7), STR_139(5), 
 20948 ;;		 -> STR_138(6), STR_137(9), STR_135(11), STR_133(8), 
 20949 ;;		 -> STR_131(4), STR_130(5), STR_117(5), STR_104(7), 
 20950 ;;		 -> STR_97(5), STR_81(5), wrkbuf(80), STR_49(5), 
 20951 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20952 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20953 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20954 ;;		 -> STR_8(5), STR_6(5), cmdbuf(80), 
 20955 ;; Return value:  Size  Location     Type
 20956 ;;                  2    0[BANK0 ] unsigned int 
 20957 ;; Registers used:
 20958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20959 ;; Tracked objects:
 20960 ;;		On entry : F/0
 20961 ;;		On exit  : F/0
 20962 ;;		Unchanged: 0/0
 20963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20964 ;;      Params:         0       2       0       0       0       0       0
 20965 ;;      Locals:         0       2       0       0       0       0       0
 20966 ;;      Temps:          0       0       0       0       0       0       0
 20967 ;;      Totals:         0       4       0       0       0       0       0
 20968 ;;Total ram usage:        4 bytes
 20969 ;; Hardware stack levels used:    1
 20970 ;; Hardware stack levels required when called:    3
 20971 ;; This function calls:
 20972 ;;		Nothing
 20973 ;; This function is called by:
 20974 ;;		_doModeSLCAN
 20975 ;;		_receiveSendEventSLCAN
 20976 ;;		_printGUID
 20977 ;;		_hexStringToBytes
 20978 ;;		_stristr
 20979 ;; This function uses a non-reentrant model
 20980 ;;
 20981                           
 20982                           	psect	text49
 20983  0012DE                     __ptext49:
 20984                           	opt stack 0
 20985  0012DE                     _strlen:
 20986                           	opt stack 24
 20987                           
 20988                           ; BSR set to: 0
 20989                           
 20990                           ; BSR set to: 0
 20991                           ;incstack = 0
 20992                           ;incstack = 0
 20993  0012DE  C060  F062         	movff	strlen@s,strlen@cp
 20994  0012E2  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20995  0012E6  D003               	goto	l16826
 20996  0012E8                     l16824:
 20997  0012E8  0100               	movlb	0	; () banked
 20998  0012EA  4B62               	infsnz	strlen@cp& (0+255),f,b
 20999  0012EC  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 21000  0012EE                     l16826:
 21001                           
 21002                           ; BSR set to: 0
 21003  0012EE  5162               	movf	strlen@cp& (0+255),w,b
 21004  0012F0  6EF6               	movwf	tblptrl,c
 21005  0012F2  6EE9               	movwf	fsr0l,c
 21006  0012F4  0E05               	movlw	(high __ramtop+-1)
 21007  0012F6  6EEA               	movwf	fsr0h,c
 21008  0012F8  5163               	movf	(strlen@cp+1)& (0+255),w,b
 21009  0012FA  64EA               	cpfsgt	fsr0h,c
 21010  0012FC  D003               	bra	u22947
 21011  0012FE  6EEA               	movwf	fsr0h,c
 21012  001300  50EF               	movf	indf0,w,c
 21013  001302  D003               	bra	u22940
 21014  001304                     u22947:
 21015  001304  6EF7               	movwf	tblptrh,c
 21016  001306  0008               	tblrd		*
 21017  001308  50F5               	movf	tablat,w,c
 21018  00130A                     u22940:
 21019  00130A  0900               	iorlw	0
 21020  00130C  E1ED               	bnz	l16824
 21021  00130E  0100               	movlb	0	; () banked
 21022  001310  5160               	movf	strlen@s& (0+255),w,b
 21023  001312  5D62               	subwf	strlen@cp& (0+255),w,b
 21024  001314  6F60               	movwf	?_strlen& (0+255),b
 21025  001316  5161               	movf	(strlen@s+1)& (0+255),w,b
 21026  001318  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 21027  00131A  6F61               	movwf	(?_strlen+1)& (0+255),b
 21028                           
 21029                           ; BSR set to: 0
 21030  00131C  0012               	return	
 21031  00131E                     __end_of_strlen:
 21032                           	opt stack 0
 21033                           tblptru	equ	0xFF8
 21034                           tblptrh	equ	0xFF7
 21035                           tblptrl	equ	0xFF6
 21036                           tablat	equ	0xFF5
 21037                           prodh	equ	0xFF4
 21038                           prodl	equ	0xFF3
 21039                           intcon	equ	0xFF2
 21040                           indf0	equ	0xFEF
 21041                           postinc0	equ	0xFEE
 21042                           fsr0h	equ	0xFEA
 21043                           fsr0l	equ	0xFE9
 21044                           wreg	equ	0xFE8
 21045                           indf1	equ	0xFE7
 21046                           postinc1	equ	0xFE6
 21047                           postdec1	equ	0xFE5
 21048                           fsr1h	equ	0xFE2
 21049                           fsr1l	equ	0xFE1
 21050                           indf2	equ	0xFDF
 21051                           postinc2	equ	0xFDE
 21052                           postdec2	equ	0xFDD
 21053                           plusw2	equ	0xFDB
 21054                           fsr2h	equ	0xFDA
 21055                           fsr2l	equ	0xFD9
 21056                           status	equ	0xFD8
 21057                           
 21058 ;; *************** function _receivePrintEventVerbose *****************
 21059 ;; Defined at:
 21060 ;;		line 1945 in file "main.c"
 21061 ;; Parameters:    Size  Location     Type
 21062 ;;		None
 21063 ;; Auto vars:     Size  Location     Type
 21064 ;;  i               1   69[BANK0 ] unsigned char 
 21065 ;; Return value:  Size  Location     Type
 21066 ;;                  1    wreg      enum E15660
 21067 ;; Registers used:
 21068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21069 ;; Tracked objects:
 21070 ;;		On entry : E/1
 21071 ;;		On exit  : 0/0
 21072 ;;		Unchanged: 0/0
 21073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21074 ;;      Params:         0       0       0       0       0       0       0
 21075 ;;      Locals:         0      13       0       0       0       0       0
 21076 ;;      Temps:          0       5       0       0       0       0       0
 21077 ;;      Totals:         0      18       0       0       0       0       0
 21078 ;;Total ram usage:       18 bytes
 21079 ;; Hardware stack levels used:    1
 21080 ;; Hardware stack levels required when called:    6
 21081 ;; This function calls:
 21082 ;;		_putsUSART
 21083 ;;		_sprintf
 21084 ;;		_getVSCPFrame
 21085 ;; This function is called by:
 21086 ;;		_doModeVerbose
 21087 ;; This function uses a non-reentrant model
 21088 ;;
 21089                           
 21090                           	psect	text50
 21091  0043A4                     __ptext50:
 21092                           	opt stack 0
 21093  0043A4                     _receivePrintEventVerbose:
 21094                           	opt stack 22
 21095                           
 21096                           ;main.c: 1946: uint8_t i;
 21097                           ;main.c: 1948: if (getVSCPFrame(&vscpClass,
 21098                           ;main.c: 1949: &vscpType,
 21099                           ;main.c: 1950: &vscpNodeId,
 21100                           ;main.c: 1951: &vscpPriority,
 21101                           ;main.c: 1952: &vscpSize,
 21102                           ;main.c: 1953: vscpData)) {
 21103                           
 21104                           ; BSR set to: 0
 21105                           ;incstack = 0
 21106                           ;incstack = 0
 21107  0043A4  0E3F               	movlw	low _vscpType
 21108  0043A6  0100               	movlb	0	; () banked
 21109  0043A8  6F73               	movwf	?_getVSCPFrame& (0+255),b
 21110  0043AA  0E3C               	movlw	low _vscpNodeId
 21111  0043AC  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 21112  0043AE  0E3D               	movlw	low _vscpPriority
 21113  0043B0  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 21114  0043B2  0E3E               	movlw	low _vscpSize
 21115  0043B4  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 21116  0043B6  0E01               	movlw	high _vscpData
 21117  0043B8  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 21118  0043BA  0EE5               	movlw	low _vscpData
 21119  0043BC  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 21120  0043BE  0E38               	movlw	_vscpClass& (0+255)
 21121  0043C0  EC42  F00D         	call	_getVSCPFrame
 21122  0043C4  0900               	iorlw	0
 21123  0043C6  E101 D135          	bz	l15584
 21124                           
 21125                           ; BSR set to: 0
 21126                           ;main.c: 1956: cntRxFrames++;
 21127  0043CA  0101               	movlb	1	; () banked
 21128  0043CC  2B0C               	incf	_cntRxFrames& (0+255),f,b
 21129  0043CE  0E00               	movlw	0
 21130  0043D0  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 21131  0043D2  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 21132  0043D4  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 21133                           
 21134                           ;main.c: 1957: cntRxBytes += vscpSize;
 21135  0043D6  503E               	movf	_vscpSize,w,c
 21136  0043D8  2708               	addwf	_cntRxBytes& (0+255),f,b
 21137  0043DA  0E00               	movlw	0
 21138  0043DC  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 21139  0043DE  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 21140  0043E0  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 21141                           
 21142                           ; BSR set to: 1
 21143                           ;main.c: 1959: putsUSART((char *) "<Prio=");
 21144  0043E2  0E7C               	movlw	high STR_169
 21145  0043E4  0100               	movlb	0	; () banked
 21146  0043E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21147  0043E8  0E27               	movlw	low STR_169
 21148  0043EA  6F61               	movwf	?_putsUSART& (0+255),b
 21149  0043EC  EC8D  F00A         	call	_putsUSART	;wreg free
 21150                           
 21151                           ;main.c: 1960: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 21152  0043F0  662C               	tstfsz	_bHex,c
 21153  0043F2  D005               	goto	l15502
 21154  0043F4  0E7C               	movlw	high STR_61
 21155  0043F6  0100               	movlb	0	; () banked
 21156  0043F8  6F9A               	movwf	(_receivePrintEventVerbose$1380+1)& (0+255),b
 21157  0043FA  0EEE               	movlw	low STR_61
 21158  0043FC  D004               	goto	L32
 21159  0043FE                     l15502:
 21160  0043FE  0E7C               	movlw	high STR_60
 21161  004400  0100               	movlb	0	; () banked
 21162  004402  6F9A               	movwf	(_receivePrintEventVerbose$1380+1)& (0+255),b
 21163  004404  0E4A               	movlw	low STR_60
 21164  004406                     L32:
 21165  004406  6F99               	movwf	_receivePrintEventVerbose$1380& (0+255),b
 21166                           
 21167                           ; BSR set to: 0
 21168  004408  0E01               	movlw	high _wrkbuf
 21169  00440A  0100               	movlb	0	; () banked
 21170  00440C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21171  00440E  0E7D               	movlw	low _wrkbuf
 21172  004410  6F76               	movwf	?_sprintf& (0+255),b
 21173  004412  C099  F078         	movff	_receivePrintEventVerbose$1380,?_sprintf+2
 21174  004416  C09A  F079         	movff	_receivePrintEventVerbose$1380+1,?_sprintf+3
 21175  00441A  C03D  F07A         	movff	_vscpPriority,?_sprintf+4
 21176  00441E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21177  004420  EC6D  F026         	call	_sprintf	;wreg free
 21178                           
 21179                           ; BSR set to: 0
 21180                           ;main.c: 1961: putsUSART(wrkbuf);
 21181  004424  0E01               	movlw	high _wrkbuf
 21182  004426  0100               	movlb	0	; () banked
 21183  004428  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21184  00442A  0E7D               	movlw	low _wrkbuf
 21185  00442C  6F61               	movwf	?_putsUSART& (0+255),b
 21186  00442E  EC8D  F00A         	call	_putsUSART	;wreg free
 21187                           
 21188                           ;main.c: 1962: putsUSART((char *) ",class=");
 21189  004432  0E7B               	movlw	high STR_172
 21190  004434  0100               	movlb	0	; () banked
 21191  004436  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21192  004438  0EDB               	movlw	low STR_172
 21193  00443A  6F61               	movwf	?_putsUSART& (0+255),b
 21194  00443C  EC8D  F00A         	call	_putsUSART	;wreg free
 21195                           
 21196                           ;main.c: 1963: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 21197  004440  662C               	tstfsz	_bHex,c
 21198  004442  D005               	goto	l15514
 21199  004444  0E7C               	movlw	high STR_61
 21200  004446  0100               	movlb	0	; () banked
 21201  004448  6F9C               	movwf	(_receivePrintEventVerbose$1385+1)& (0+255),b
 21202  00444A  0EEE               	movlw	low STR_61
 21203  00444C  D004               	goto	L33
 21204  00444E                     l15514:
 21205  00444E  0E7C               	movlw	high STR_173
 21206  004450  0100               	movlb	0	; () banked
 21207  004452  6F9C               	movwf	(_receivePrintEventVerbose$1385+1)& (0+255),b
 21208  004454  0E51               	movlw	low STR_173
 21209  004456                     L33:
 21210  004456  6F9B               	movwf	_receivePrintEventVerbose$1385& (0+255),b
 21211                           
 21212                           ; BSR set to: 0
 21213  004458  0E01               	movlw	high _wrkbuf
 21214  00445A  0100               	movlb	0	; () banked
 21215  00445C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21216  00445E  0E7D               	movlw	low _wrkbuf
 21217  004460  6F76               	movwf	?_sprintf& (0+255),b
 21218  004462  C09B  F078         	movff	_receivePrintEventVerbose$1385,?_sprintf+2
 21219  004466  C09C  F079         	movff	_receivePrintEventVerbose$1385+1,?_sprintf+3
 21220  00446A  C038  F07A         	movff	_vscpClass,?_sprintf+4
 21221  00446E  C039  F07B         	movff	_vscpClass+1,?_sprintf+5
 21222  004472  EC6D  F026         	call	_sprintf	;wreg free
 21223                           
 21224                           ; BSR set to: 0
 21225                           ;main.c: 1964: putsUSART(wrkbuf);
 21226  004476  0E01               	movlw	high _wrkbuf
 21227  004478  0100               	movlb	0	; () banked
 21228  00447A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21229  00447C  0E7D               	movlw	low _wrkbuf
 21230  00447E  6F61               	movwf	?_putsUSART& (0+255),b
 21231  004480  EC8D  F00A         	call	_putsUSART	;wreg free
 21232                           
 21233                           ;main.c: 1965: putsUSART((char *) ",type=");
 21234  004484  0E7C               	movlw	high STR_175
 21235  004486  0100               	movlb	0	; () banked
 21236  004488  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21237  00448A  0E19               	movlw	low STR_175
 21238  00448C  6F61               	movwf	?_putsUSART& (0+255),b
 21239  00448E  EC8D  F00A         	call	_putsUSART	;wreg free
 21240                           
 21241                           ;main.c: 1966: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21242  004492  662C               	tstfsz	_bHex,c
 21243  004494  D005               	goto	l15526
 21244  004496  0E7C               	movlw	high STR_61
 21245  004498  0100               	movlb	0	; () banked
 21246  00449A  6F9E               	movwf	(_receivePrintEventVerbose$1390+1)& (0+255),b
 21247  00449C  0EEE               	movlw	low STR_61
 21248  00449E  D004               	goto	L34
 21249  0044A0                     l15526:
 21250  0044A0  0E7C               	movlw	high STR_60
 21251  0044A2  0100               	movlb	0	; () banked
 21252  0044A4  6F9E               	movwf	(_receivePrintEventVerbose$1390+1)& (0+255),b
 21253  0044A6  0E4A               	movlw	low STR_60
 21254  0044A8                     L34:
 21255  0044A8  6F9D               	movwf	_receivePrintEventVerbose$1390& (0+255),b
 21256                           
 21257                           ; BSR set to: 0
 21258  0044AA  0E01               	movlw	high _wrkbuf
 21259  0044AC  0100               	movlb	0	; () banked
 21260  0044AE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21261  0044B0  0E7D               	movlw	low _wrkbuf
 21262  0044B2  6F76               	movwf	?_sprintf& (0+255),b
 21263  0044B4  C09D  F078         	movff	_receivePrintEventVerbose$1390,?_sprintf+2
 21264  0044B8  C09E  F079         	movff	_receivePrintEventVerbose$1390+1,?_sprintf+3
 21265  0044BC  C03F  F07A         	movff	_vscpType,?_sprintf+4
 21266  0044C0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21267  0044C2  EC6D  F026         	call	_sprintf	;wreg free
 21268                           
 21269                           ; BSR set to: 0
 21270                           ;main.c: 1967: putsUSART(wrkbuf);
 21271  0044C6  0E01               	movlw	high _wrkbuf
 21272  0044C8  0100               	movlb	0	; () banked
 21273  0044CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21274  0044CC  0E7D               	movlw	low _wrkbuf
 21275  0044CE  6F61               	movwf	?_putsUSART& (0+255),b
 21276  0044D0  EC8D  F00A         	call	_putsUSART	;wreg free
 21277                           
 21278                           ;main.c: 1968: putsUSART((char *) ",nodeid=");
 21279  0044D4  0E7B               	movlw	high STR_178
 21280  0044D6  0100               	movlb	0	; () banked
 21281  0044D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21282  0044DA  0E98               	movlw	low STR_178
 21283  0044DC  6F61               	movwf	?_putsUSART& (0+255),b
 21284  0044DE  EC8D  F00A         	call	_putsUSART	;wreg free
 21285                           
 21286                           ;main.c: 1969: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21287  0044E2  662C               	tstfsz	_bHex,c
 21288  0044E4  D005               	goto	l15538
 21289  0044E6  0E7C               	movlw	high STR_61
 21290  0044E8  0100               	movlb	0	; () banked
 21291  0044EA  6FA0               	movwf	(_receivePrintEventVerbose$1395+1)& (0+255),b
 21292  0044EC  0EEE               	movlw	low STR_61
 21293  0044EE  D004               	goto	L35
 21294  0044F0                     l15538:
 21295  0044F0  0E7C               	movlw	high STR_60
 21296  0044F2  0100               	movlb	0	; () banked
 21297  0044F4  6FA0               	movwf	(_receivePrintEventVerbose$1395+1)& (0+255),b
 21298  0044F6  0E4A               	movlw	low STR_60
 21299  0044F8                     L35:
 21300  0044F8  6F9F               	movwf	_receivePrintEventVerbose$1395& (0+255),b
 21301                           
 21302                           ; BSR set to: 0
 21303  0044FA  0E01               	movlw	high _wrkbuf
 21304  0044FC  0100               	movlb	0	; () banked
 21305  0044FE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21306  004500  0E7D               	movlw	low _wrkbuf
 21307  004502  6F76               	movwf	?_sprintf& (0+255),b
 21308  004504  C09F  F078         	movff	_receivePrintEventVerbose$1395,?_sprintf+2
 21309  004508  C0A0  F079         	movff	_receivePrintEventVerbose$1395+1,?_sprintf+3
 21310  00450C  C03C  F07A         	movff	_vscpNodeId,?_sprintf+4
 21311  004510  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21312  004512  EC6D  F026         	call	_sprintf	;wreg free
 21313                           
 21314                           ; BSR set to: 0
 21315                           ;main.c: 1970: putsUSART(wrkbuf);
 21316  004516  0E01               	movlw	high _wrkbuf
 21317  004518  0100               	movlb	0	; () banked
 21318  00451A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21319  00451C  0E7D               	movlw	low _wrkbuf
 21320  00451E  6F61               	movwf	?_putsUSART& (0+255),b
 21321  004520  EC8D  F00A         	call	_putsUSART	;wreg free
 21322                           
 21323                           ;main.c: 1971: putsUSART((char *) ",size=");
 21324  004524  0E7C               	movlw	high STR_181
 21325  004526  0100               	movlb	0	; () banked
 21326  004528  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21327  00452A  0E20               	movlw	low STR_181
 21328  00452C  6F61               	movwf	?_putsUSART& (0+255),b
 21329  00452E  EC8D  F00A         	call	_putsUSART	;wreg free
 21330                           
 21331                           ;main.c: 1972: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21332  004532  662C               	tstfsz	_bHex,c
 21333  004534  D005               	goto	l15550
 21334  004536  0E7C               	movlw	high STR_61
 21335  004538  0100               	movlb	0	; () banked
 21336  00453A  6FA2               	movwf	(_receivePrintEventVerbose$1400+1)& (0+255),b
 21337  00453C  0EEE               	movlw	low STR_61
 21338  00453E  D004               	goto	L36
 21339  004540                     l15550:
 21340  004540  0E7C               	movlw	high STR_60
 21341  004542  0100               	movlb	0	; () banked
 21342  004544  6FA2               	movwf	(_receivePrintEventVerbose$1400+1)& (0+255),b
 21343  004546  0E4A               	movlw	low STR_60
 21344  004548                     L36:
 21345  004548  6FA1               	movwf	_receivePrintEventVerbose$1400& (0+255),b
 21346                           
 21347                           ; BSR set to: 0
 21348  00454A  0E01               	movlw	high _wrkbuf
 21349  00454C  0100               	movlb	0	; () banked
 21350  00454E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21351  004550  0E7D               	movlw	low _wrkbuf
 21352  004552  6F76               	movwf	?_sprintf& (0+255),b
 21353  004554  C0A1  F078         	movff	_receivePrintEventVerbose$1400,?_sprintf+2
 21354  004558  C0A2  F079         	movff	_receivePrintEventVerbose$1400+1,?_sprintf+3
 21355  00455C  C03E  F07A         	movff	_vscpSize,?_sprintf+4
 21356  004560  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21357  004562  EC6D  F026         	call	_sprintf	;wreg free
 21358                           
 21359                           ; BSR set to: 0
 21360                           ;main.c: 1973: putsUSART(wrkbuf);
 21361  004566  0E01               	movlw	high _wrkbuf
 21362  004568  0100               	movlb	0	; () banked
 21363  00456A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21364  00456C  0E7D               	movlw	low _wrkbuf
 21365  00456E  6F61               	movwf	?_putsUSART& (0+255),b
 21366  004570  EC8D  F00A         	call	_putsUSART	;wreg free
 21367                           
 21368                           ;main.c: 1974: if (vscpSize > 0) {
 21369  004574  503E               	movf	_vscpSize,w,c
 21370  004576  E04E               	bz	l15578
 21371                           
 21372                           ;main.c: 1975: putsUSART((char *) ",Data=");
 21373  004578  0E7C               	movlw	high STR_184
 21374  00457A  0100               	movlb	0	; () banked
 21375  00457C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21376  00457E  0E12               	movlw	low STR_184
 21377  004580  6F61               	movwf	?_putsUSART& (0+255),b
 21378  004582  EC8D  F00A         	call	_putsUSART	;wreg free
 21379                           
 21380                           ;main.c: 1976: for (i = 0; i < vscpSize; i++) {
 21381  004586  0100               	movlb	0	; () banked
 21382  004588  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21383  00458A  D040               	goto	l15576
 21384  00458C                     l984:
 21385                           
 21386                           ; BSR set to: 0
 21387                           ;main.c: 1978: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21388  00458C  662C               	tstfsz	_bHex,c
 21389  00458E  D004               	goto	l15564
 21390                           
 21391                           ; BSR set to: 0
 21392  004590  0E7C               	movlw	high STR_61
 21393  004592  6FA4               	movwf	(_receivePrintEventVerbose$1405+1)& (0+255),b
 21394  004594  0EEE               	movlw	low STR_61
 21395  004596  D003               	goto	L37
 21396  004598                     l15564:
 21397                           
 21398                           ; BSR set to: 0
 21399  004598  0E7C               	movlw	high STR_60
 21400  00459A  6FA4               	movwf	(_receivePrintEventVerbose$1405+1)& (0+255),b
 21401  00459C  0E4A               	movlw	low STR_60
 21402  00459E                     L37:
 21403  00459E  6FA3               	movwf	_receivePrintEventVerbose$1405& (0+255),b
 21404                           
 21405                           ; BSR set to: 0
 21406  0045A0  0E01               	movlw	high _wrkbuf
 21407  0045A2  0100               	movlb	0	; () banked
 21408  0045A4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21409  0045A6  0E7D               	movlw	low _wrkbuf
 21410  0045A8  6F76               	movwf	?_sprintf& (0+255),b
 21411  0045AA  C0A3  F078         	movff	_receivePrintEventVerbose$1405,?_sprintf+2
 21412  0045AE  C0A4  F079         	movff	_receivePrintEventVerbose$1405+1,?_sprintf+3
 21413  0045B2  0EE5               	movlw	low _vscpData
 21414  0045B4  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21415  0045B6  6ED9               	movwf	fsr2l,c
 21416  0045B8  6ADA               	clrf	fsr2h,c
 21417  0045BA  0E01               	movlw	high _vscpData
 21418  0045BC  22DA               	addwfc	fsr2h,f,c
 21419  0045BE  50DF               	movf	indf2,w,c
 21420  0045C0  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21421  0045C2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21422  0045C4  EC6D  F026         	call	_sprintf	;wreg free
 21423                           
 21424                           ; BSR set to: 0
 21425                           ;main.c: 1979: putsUSART(wrkbuf);
 21426  0045C8  0E01               	movlw	high _wrkbuf
 21427  0045CA  0100               	movlb	0	; () banked
 21428  0045CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21429  0045CE  0E7D               	movlw	low _wrkbuf
 21430  0045D0  6F61               	movwf	?_putsUSART& (0+255),b
 21431  0045D2  EC8D  F00A         	call	_putsUSART	;wreg free
 21432                           
 21433                           ;main.c: 1980: if (i < (vscpSize - 1)) {
 21434  0045D6  0EFF               	movlw	255
 21435  0045D8  243E               	addwf	_vscpSize,w,c
 21436  0045DA  0100               	movlb	0	; () banked
 21437  0045DC  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21438  0045DE  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21439  0045E0  0EFF               	movlw	255
 21440  0045E2  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21441  0045E4  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21442  0045E6  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21443  0045E8  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21444  0045EA  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21445  0045EC  0A80               	xorlw	128
 21446  0045EE  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21447  0045F0  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21448  0045F2  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21449  0045F4  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21450  0045F6  0A80               	xorlw	128
 21451  0045F8  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21452  0045FA  E206               	bc	l15574
 21453                           
 21454                           ; BSR set to: 0
 21455                           ;main.c: 1981: putsUSART((char *) ",");
 21456  0045FC  0E7C               	movlw	high STR_30
 21457  0045FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21458  004600  0EF5               	movlw	low STR_30
 21459  004602  6F61               	movwf	?_putsUSART& (0+255),b
 21460  004604  EC8D  F00A         	call	_putsUSART	;wreg free
 21461  004608                     l15574:
 21462  004608  0100               	movlb	0	; () banked
 21463  00460A  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21464  00460C                     l15576:
 21465                           
 21466                           ; BSR set to: 0
 21467  00460C  503E               	movf	_vscpSize,w,c
 21468  00460E  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21469  004610  E208               	bc	l991
 21470  004612  D7BC               	goto	l984
 21471  004614                     l15578:
 21472                           
 21473                           ;main.c: 1985: putsUSART((char *) ",Data=none");
 21474  004614  0E7B               	movlw	high STR_188
 21475  004616  0100               	movlb	0	; () banked
 21476  004618  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21477  00461A  0E5C               	movlw	low STR_188
 21478  00461C  6F61               	movwf	?_putsUSART& (0+255),b
 21479  00461E  EC8D  F00A         	call	_putsUSART	;wreg free
 21480  004622                     l991:
 21481                           
 21482                           ;main.c: 1986: }
 21483                           ;main.c: 1987: putsUSART((char *) ">\r\n");
 21484  004622  0E7C               	movlw	high STR_189
 21485  004624  0100               	movlb	0	; () banked
 21486  004626  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21487  004628  0ECA               	movlw	low STR_189
 21488  00462A  6F61               	movwf	?_putsUSART& (0+255),b
 21489  00462C  EC8D  F00A         	call	_putsUSART	;wreg free
 21490                           
 21491                           ;main.c: 1988: return 1;
 21492  004630  0E01               	movlw	1
 21493  004632  D001               	goto	l992
 21494  004634                     l15584:
 21495                           
 21496                           ; BSR set to: 0
 21497                           ;main.c: 1989: }
 21498                           ;main.c: 1991: return 0;
 21499  004634  0E00               	movlw	0
 21500  004636                     l992:
 21501  004636  0012               	return	
 21502  004638                     __end_of_receivePrintEventVerbose:
 21503                           	opt stack 0
 21504                           tblptru	equ	0xFF8
 21505                           tblptrh	equ	0xFF7
 21506                           tblptrl	equ	0xFF6
 21507                           tablat	equ	0xFF5
 21508                           prodh	equ	0xFF4
 21509                           prodl	equ	0xFF3
 21510                           intcon	equ	0xFF2
 21511                           indf0	equ	0xFEF
 21512                           postinc0	equ	0xFEE
 21513                           fsr0h	equ	0xFEA
 21514                           fsr0l	equ	0xFE9
 21515                           wreg	equ	0xFE8
 21516                           indf1	equ	0xFE7
 21517                           postinc1	equ	0xFE6
 21518                           postdec1	equ	0xFE5
 21519                           fsr1h	equ	0xFE2
 21520                           fsr1l	equ	0xFE1
 21521                           indf2	equ	0xFDF
 21522                           postinc2	equ	0xFDE
 21523                           postdec2	equ	0xFDD
 21524                           plusw2	equ	0xFDB
 21525                           fsr2h	equ	0xFDA
 21526                           fsr2l	equ	0xFD9
 21527                           status	equ	0xFD8
 21528                           
 21529 ;; *************** function _getVSCPFrame *****************
 21530 ;; Defined at:
 21531 ;;		line 3165 in file "main.c"
 21532 ;; Parameters:    Size  Location     Type
 21533 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21534 ;;		 -> vscpClass(2), 
 21535 ;;  pvscptype       1   19[BANK0 ] PTR unsigned char 
 21536 ;;		 -> vscpType(1), 
 21537 ;;  pNodeId         1   20[BANK0 ] PTR unsigned char 
 21538 ;;		 -> vscpNodeId(1), 
 21539 ;;  pPriority       1   21[BANK0 ] PTR unsigned char 
 21540 ;;		 -> vscpPriority(1), 
 21541 ;;  pSize           1   22[BANK0 ] PTR unsigned char 
 21542 ;;		 -> vscpSize(1), 
 21543 ;;  pData           2   23[BANK0 ] PTR unsigned char 
 21544 ;;		 -> vscpData(8), 
 21545 ;; Auto vars:     Size  Location     Type
 21546 ;;  pvscpclass      1   29[BANK0 ] PTR unsigned short 
 21547 ;;		 -> vscpClass(2), 
 21548 ;;  id              4   30[BANK0 ] unsigned long 
 21549 ;; Return value:  Size  Location     Type
 21550 ;;                  1    wreg      unsigned char 
 21551 ;; Registers used:
 21552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21553 ;; Tracked objects:
 21554 ;;		On entry : F/0
 21555 ;;		On exit  : F/0
 21556 ;;		Unchanged: 0/0
 21557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21558 ;;      Params:         0       6       0       0       0       0       0
 21559 ;;      Locals:         0       5       0       0       0       0       0
 21560 ;;      Temps:          0       4       0       0       0       0       0
 21561 ;;      Totals:         0      15       0       0       0       0       0
 21562 ;;Total ram usage:       15 bytes
 21563 ;; Hardware stack levels used:    1
 21564 ;; Hardware stack levels required when called:    5
 21565 ;; This function calls:
 21566 ;;		_getCANFrame
 21567 ;; This function is called by:
 21568 ;;		_receivePrintEventVerbose
 21569 ;;		_readRegister
 21570 ;;		_readRegisterExtended
 21571 ;;		_writeRegisterExtended
 21572 ;; This function uses a non-reentrant model
 21573 ;;
 21574                           
 21575                           	psect	text51
 21576  001A84                     __ptext51:
 21577                           	opt stack 0
 21578  001A84                     _getVSCPFrame:
 21579                           	opt stack 21
 21580                           
 21581                           ;incstack = 0
 21582                           ;incstack = 0
 21583                           ;getVSCPFrame@pvscpclass stored from wreg
 21584  001A84  CFE8 F07D          	movff	wreg,getVSCPFrame@pvscpclass
 21585                           
 21586                           ; BSR set to: 0
 21587                           ;main.c: 3166: uint32_t id;
 21588                           ;main.c: 3168: if (!getCANFrame(&id, pSize, pData)) {
 21589  001A88  C076  F06E         	movff	getVSCPFrame@pSize,?_getCANFrame
 21590  001A8C  0E0F               	movlw	15
 21591  001A8E  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 21592  001A90  0E5F               	movlw	__accesstop+-1
 21593  001A92  656E               	cpfsgt	?_getCANFrame& (0+255),b
 21594  001A94  6B6F               	clrf	(?_getCANFrame+1)& (0+255),b
 21595  001A96  C077  F070         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21596  001A9A  C078  F071         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21597  001A9E  0E7E               	movlw	getVSCPFrame@id& (0+255)
 21598  001AA0  ECF3  F00F         	call	_getCANFrame
 21599  001AA4  0900               	iorlw	0
 21600  001AA6  E102               	bnz	l16904
 21601                           
 21602                           ; BSR set to: 0
 21603                           ;main.c: 3169: return 0;
 21604  001AA8  0E00               	movlw	0
 21605  001AAA  D02F               	goto	l1335
 21606  001AAC                     l16904:
 21607                           
 21608                           ; BSR set to: 0
 21609                           ;main.c: 3170: }
 21610                           ;main.c: 3172: *pNodeId = id & 0x0ff;
 21611  001AAC  5174               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21612  001AAE  6ED9               	movwf	fsr2l,c
 21613  001AB0  6ADA               	clrf	fsr2h,c
 21614  001AB2  C07E  FFDF         	movff	getVSCPFrame@id,indf2
 21615                           
 21616                           ;main.c: 3173: *pvscptype = (id >> 8) & 0xff;
 21617  001AB6  5173               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21618  001AB8  6ED9               	movwf	fsr2l,c
 21619  001ABA  6ADA               	clrf	fsr2h,c
 21620  001ABC  C07F  FFDF         	movff	getVSCPFrame@id+1,indf2
 21621                           
 21622                           ; BSR set to: 0
 21623                           ;main.c: 3174: *pvscpclass = (id >> 16) & 0x1ff;
 21624  001AC0  0100               	movlb	0	; () banked
 21625  001AC2  5180               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21626  001AC4  6F79               	movwf	??_getVSCPFrame& (0+255),b
 21627  001AC6  0E01               	movlw	1
 21628  001AC8  1581               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21629  001ACA  6F7A               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21630  001ACC  517D               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21631  001ACE  6ED9               	movwf	fsr2l,c
 21632  001AD0  6ADA               	clrf	fsr2h,c
 21633  001AD2  C079  FFDE         	movff	??_getVSCPFrame,postinc2
 21634  001AD6  C07A  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21635                           
 21636                           ; BSR set to: 0
 21637                           ;main.c: 3175: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21638  001ADA  5175               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21639  001ADC  6ED9               	movwf	fsr2l,c
 21640  001ADE  6ADA               	clrf	fsr2h,c
 21641  001AE0  C07E  F079         	movff	getVSCPFrame@id,??_getVSCPFrame
 21642  001AE4  C07F  F07A         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21643  001AE8  C080  F07B         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21644  001AEC  C081  F07C         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21645  001AF0  0E1B               	movlw	27
 21646  001AF2  D005               	goto	u23090
 21647  001AF4                     u23095:
 21648  001AF4  90D8               	bcf	status,0,c
 21649  001AF6  337C               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21650  001AF8  337B               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21651  001AFA  337A               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21652  001AFC  3379               	rrcf	??_getVSCPFrame& (0+255),f,b
 21653  001AFE                     u23090:
 21654  001AFE  2EE8               	decfsz	wreg,f,c
 21655  001B00  D7F9               	goto	u23095
 21656  001B02  5179               	movf	??_getVSCPFrame& (0+255),w,b
 21657  001B04  0B07               	andlw	7
 21658  001B06  6EDF               	movwf	indf2,c
 21659                           
 21660                           ; BSR set to: 0
 21661                           ;main.c: 3177: return 1;
 21662  001B08  0E01               	movlw	1
 21663  001B0A                     l1335:
 21664                           
 21665                           ; BSR set to: 0
 21666  001B0A  0012               	return	
 21667  001B0C                     __end_of_getVSCPFrame:
 21668                           	opt stack 0
 21669                           tblptru	equ	0xFF8
 21670                           tblptrh	equ	0xFF7
 21671                           tblptrl	equ	0xFF6
 21672                           tablat	equ	0xFF5
 21673                           prodh	equ	0xFF4
 21674                           prodl	equ	0xFF3
 21675                           intcon	equ	0xFF2
 21676                           indf0	equ	0xFEF
 21677                           postinc0	equ	0xFEE
 21678                           fsr0h	equ	0xFEA
 21679                           fsr0l	equ	0xFE9
 21680                           wreg	equ	0xFE8
 21681                           indf1	equ	0xFE7
 21682                           postinc1	equ	0xFE6
 21683                           postdec1	equ	0xFE5
 21684                           fsr1h	equ	0xFE2
 21685                           fsr1l	equ	0xFE1
 21686                           indf2	equ	0xFDF
 21687                           postinc2	equ	0xFDE
 21688                           postdec2	equ	0xFDD
 21689                           plusw2	equ	0xFDB
 21690                           fsr2h	equ	0xFDA
 21691                           fsr2l	equ	0xFD9
 21692                           status	equ	0xFD8
 21693                           
 21694 ;; *************** function _getCANFrame *****************
 21695 ;; Defined at:
 21696 ;;		line 3201 in file "main.c"
 21697 ;; Parameters:    Size  Location     Type
 21698 ;;  pid             1    wreg     PTR unsigned long 
 21699 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21700 ;;  pdlc            2   14[BANK0 ] PTR unsigned char 
 21701 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21702 ;;  pdata           2   16[BANK0 ] PTR unsigned char 
 21703 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21704 ;; Auto vars:     Size  Location     Type
 21705 ;;  pid             1   18[BANK0 ] PTR unsigned long 
 21706 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21707 ;; Return value:  Size  Location     Type
 21708 ;;                  1    wreg      unsigned char 
 21709 ;; Registers used:
 21710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21711 ;; Tracked objects:
 21712 ;;		On entry : F/0
 21713 ;;		On exit  : F/0
 21714 ;;		Unchanged: 0/0
 21715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21716 ;;      Params:         0       4       0       0       0       0       0
 21717 ;;      Locals:         0       1       0       0       0       0       0
 21718 ;;      Temps:          0       0       0       0       0       0       0
 21719 ;;      Totals:         0       5       0       0       0       0       0
 21720 ;;Total ram usage:        5 bytes
 21721 ;; Hardware stack levels used:    1
 21722 ;; Hardware stack levels required when called:    4
 21723 ;; This function calls:
 21724 ;;		_fifo_read
 21725 ;; This function is called by:
 21726 ;;		_receiveSendEventCANAL
 21727 ;;		_receiveSendMultiEventCANAL
 21728 ;;		_receiveSendEventSLCAN
 21729 ;;		_getVSCPFrame
 21730 ;; This function uses a non-reentrant model
 21731 ;;
 21732                           
 21733                           	psect	text52
 21734  001FE6                     __ptext52:
 21735                           	opt stack 0
 21736  001FE6                     _getCANFrame:
 21737                           	opt stack 23
 21738                           
 21739                           ; BSR set to: 0
 21740                           ;incstack = 0
 21741                           ;incstack = 0
 21742                           ;getCANFrame@pid stored from wreg
 21743  001FE6  CFE8 F072          	movff	wreg,getCANFrame@pid
 21744                           
 21745                           ; BSR set to: 0
 21746                           ;main.c: 3222: if ( fifo_canrxcount ) {
 21747  001FEA  5031               	movf	_fifo_canrxcount,w,c	;volatile
 21748  001FEC  E013               	bz	l16922
 21749                           
 21750                           ; BSR set to: 0
 21751                           ;main.c: 3225: (INTCONbits.GIE = 0);
 21752  001FEE  9EF2               	bcf	intcon,7,c	;volatile
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;main.c: 3226: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21756  001FF0  0E01               	movlw	high _canInputFifo
 21757  001FF2  0100               	movlb	0	; () banked
 21758  001FF4  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21759  001FF6  0ECD               	movlw	low _canInputFifo
 21760  001FF8  6F60               	movwf	?_fifo_read& (0+255),b
 21761  001FFA  C072  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21762  001FFE  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21763  002000  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21764  002002  0E04               	movlw	4
 21765  002004  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21766  002006  EC8D  F012         	call	_fifo_read	;wreg free
 21767  00200A  5160               	movf	?_fifo_read& (0+255),w,b
 21768  00200C  0A04               	xorlw	4
 21769  00200E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21770  002010  E003               	bz	l16926
 21771  002012                     l16920:
 21772                           
 21773                           ; BSR set to: 0
 21774                           ;main.c: 3227: (INTCONbits.GIE = 1);
 21775  002012  8EF2               	bsf	intcon,7,c	;volatile
 21776  002014                     l16922:
 21777                           
 21778                           ; BSR set to: 0
 21779                           ;main.c: 3228: return 0;
 21780  002014  0E00               	movlw	0
 21781  002016  D03A               	goto	l1344
 21782  002018                     l16926:
 21783                           
 21784                           ; BSR set to: 0
 21785                           ;main.c: 3229: }
 21786                           ;main.c: 3232: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21787  002018  0E01               	movlw	high _canInputFifo
 21788  00201A  0100               	movlb	0	; () banked
 21789  00201C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21790  00201E  0ECD               	movlw	low _canInputFifo
 21791  002020  6F60               	movwf	?_fifo_read& (0+255),b
 21792  002022  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21793  002026  C06F  F063         	movff	getCANFrame@pdlc+1,?_fifo_read+3
 21794  00202A  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21795  00202C  0E01               	movlw	1
 21796  00202E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21797  002030  EC8D  F012         	call	_fifo_read	;wreg free
 21798  002034  0560               	decf	?_fifo_read& (0+255),w,b
 21799  002036  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21800  002038  E1EC               	bnz	l16920
 21801                           
 21802                           ; BSR set to: 0
 21803                           ;main.c: 3235: }
 21804                           ;main.c: 3238: if ( *pdlc > 8 ) {
 21805  00203A  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21806  00203E  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21807  002042  0E08               	movlw	8
 21808  002044  64DF               	cpfsgt	indf2,c
 21809  002046  D005               	goto	l16938
 21810                           
 21811                           ; BSR set to: 0
 21812                           ;main.c: 3239: *pdlc = 0;
 21813  002048  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21814  00204C  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21815  002050  6ADF               	clrf	indf2,c
 21816  002052                     l16938:
 21817                           
 21818                           ; BSR set to: 0
 21819                           ;main.c: 3240: }
 21820                           ;main.c: 3243: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21821  002052  0E01               	movlw	high _canInputFifo
 21822  002054  0100               	movlb	0	; () banked
 21823  002056  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21824  002058  0ECD               	movlw	low _canInputFifo
 21825  00205A  6F60               	movwf	?_fifo_read& (0+255),b
 21826  00205C  C070  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21827  002060  C071  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21828  002064  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21829  002068  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21830  00206C  50DF               	movf	indf2,w,c
 21831  00206E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21832  002070  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21833  002072  EC8D  F012         	call	_fifo_read	;wreg free
 21834  002076  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21835  00207A  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21836  00207E  50DF               	movf	indf2,w,c
 21837  002080  1960               	xorwf	?_fifo_read& (0+255),w,b
 21838  002082  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21839  002084  E1C6               	bnz	l16920
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;main.c: 3246: }
 21843                           ;main.c: 3248: fifo_canrxcount--;
 21844  002086  0631               	decf	_fifo_canrxcount,f,c	;volatile
 21845                           
 21846                           ; BSR set to: 0
 21847                           ;main.c: 3250: (INTCONbits.GIE = 1);
 21848  002088  8EF2               	bsf	intcon,7,c	;volatile
 21849                           
 21850                           ; BSR set to: 0
 21851                           ;main.c: 3252: return 1;
 21852  00208A  0E01               	movlw	1
 21853  00208C                     l1344:
 21854                           
 21855                           ; BSR set to: 0
 21856  00208C  0012               	return	
 21857  00208E                     __end_of_getCANFrame:
 21858                           	opt stack 0
 21859                           tblptru	equ	0xFF8
 21860                           tblptrh	equ	0xFF7
 21861                           tblptrl	equ	0xFF6
 21862                           tablat	equ	0xFF5
 21863                           prodh	equ	0xFF4
 21864                           prodl	equ	0xFF3
 21865                           intcon	equ	0xFF2
 21866                           indf0	equ	0xFEF
 21867                           postinc0	equ	0xFEE
 21868                           fsr0h	equ	0xFEA
 21869                           fsr0l	equ	0xFE9
 21870                           wreg	equ	0xFE8
 21871                           indf1	equ	0xFE7
 21872                           postinc1	equ	0xFE6
 21873                           postdec1	equ	0xFE5
 21874                           fsr1h	equ	0xFE2
 21875                           fsr1l	equ	0xFE1
 21876                           indf2	equ	0xFDF
 21877                           postinc2	equ	0xFDE
 21878                           postdec2	equ	0xFDD
 21879                           plusw2	equ	0xFDB
 21880                           fsr2h	equ	0xFDA
 21881                           fsr2l	equ	0xFD9
 21882                           status	equ	0xFD8
 21883                           
 21884 ;; *************** function _fifo_read *****************
 21885 ;; Defined at:
 21886 ;;		line 29 in file "fifo.c"
 21887 ;; Parameters:    Size  Location     Type
 21888 ;;  f               2    0[BANK0 ] PTR struct .
 21889 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21890 ;;  buf             2    2[BANK0 ] PTR const void 
 21891 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21892 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21893 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21894 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21895 ;;  nbytes          2    4[BANK0 ] unsigned short 
 21896 ;; Auto vars:     Size  Location     Type
 21897 ;;  i               2   12[BANK0 ] unsigned short 
 21898 ;;  p               2   10[BANK0 ] PTR unsigned char 
 21899 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21900 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21901 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21902 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21903 ;; Return value:  Size  Location     Type
 21904 ;;                  2    0[BANK0 ] unsigned short 
 21905 ;; Registers used:
 21906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21907 ;; Tracked objects:
 21908 ;;		On entry : F/0
 21909 ;;		On exit  : F/0
 21910 ;;		Unchanged: 0/0
 21911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21912 ;;      Params:         0       6       0       0       0       0       0
 21913 ;;      Locals:         0       4       0       0       0       0       0
 21914 ;;      Temps:          0       4       0       0       0       0       0
 21915 ;;      Totals:         0      14       0       0       0       0       0
 21916 ;;Total ram usage:       14 bytes
 21917 ;; Hardware stack levels used:    1
 21918 ;; Hardware stack levels required when called:    3
 21919 ;; This function calls:
 21920 ;;		Nothing
 21921 ;; This function is called by:
 21922 ;;		_main
 21923 ;;		_doModeVerbose
 21924 ;;		_doModeVscp
 21925 ;;		_doModeSLCAN
 21926 ;;		_getCANFrame
 21927 ;; This function uses a non-reentrant model
 21928 ;;
 21929                           
 21930                           	psect	text53
 21931  00251A                     __ptext53:
 21932                           	opt stack 0
 21933  00251A                     _fifo_read:
 21934                           	opt stack 23
 21935                           
 21936                           ; BSR set to: 0
 21937                           ;fifo.c: 30: uint16_t i;
 21938                           ;fifo.c: 31: uint8_t *p;
 21939                           ;fifo.c: 32: p = buf;
 21940                           
 21941                           ; BSR set to: 0
 21942                           ;incstack = 0
 21943                           ;incstack = 0
 21944  00251A  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 21945  00251E  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 21946                           
 21947                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21948  002522  6B6C               	clrf	fifo_read@i& (0+255),b
 21949  002524  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 21950  002526  D04A               	goto	l10656
 21951  002528                     l10642:
 21952                           
 21953                           ; BSR set to: 0
 21954                           ;fifo.c: 36: if ( f->tail != f->head ) {
 21955  002528  EE20 F002          	lfsr	2,2
 21956  00252C  D851               	call	PL36	;call to abstracted procedure
 21957  00252E  18E5               	xorwf	postdec1,w,c
 21958  002530  CFDF FFE8          	movff	indf2,wreg
 21959  002534  B4D8               	btfsc	status,2,c
 21960  002536  18E7               	xorwf	indf1,w,c
 21961  002538  E03A               	bz	l1595
 21962                           
 21963                           ; BSR set to: 0
 21964                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21965  00253A  EE20 F004          	lfsr	2,4
 21966  00253E  5160               	movf	fifo_read@f& (0+255),w,b
 21967  002540  26D9               	addwf	fsr2l,f,c
 21968  002542  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21969  002544  22DA               	addwfc	fsr2h,f,c
 21970  002546  CFDE F066          	movff	postinc2,??_fifo_read
 21971  00254A  CFDD F067          	movff	postdec2,??_fifo_read+1
 21972  00254E  C060  FFD9         	movff	fifo_read@f,fsr2l
 21973  002552  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 21974  002556  CFDE F068          	movff	postinc2,??_fifo_read+2
 21975  00255A  CFDD F069          	movff	postdec2,??_fifo_read+3
 21976  00255E  5166               	movf	??_fifo_read& (0+255),w,b
 21977  002560  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 21978  002562  6ED9               	movwf	fsr2l,c
 21979  002564  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 21980  002566  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21981  002568  6EDA               	movwf	fsr2h,c
 21982  00256A  C06A  FFE1         	movff	fifo_read@p,fsr1l
 21983  00256E  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 21984  002572  CFDF FFE7          	movff	indf2,indf1
 21985                           
 21986                           ; BSR set to: 0
 21987  002576  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 21988  002578  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 21989                           
 21990                           ; BSR set to: 0
 21991                           ;fifo.c: 38: f->tail++;
 21992  00257A  EE20 F004          	lfsr	2,4
 21993  00257E  5160               	movf	fifo_read@f& (0+255),w,b
 21994  002580  26D9               	addwf	fsr2l,f,c
 21995  002582  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21996  002584  22DA               	addwfc	fsr2h,f,c
 21997  002586  2ADE               	incf	postinc2,f,c
 21998  002588  0E00               	movlw	0
 21999  00258A  22DD               	addwfc	postdec2,f,c
 22000                           
 22001                           ; BSR set to: 0
 22002                           ;fifo.c: 39: if (f->tail >= f->size) {
 22003  00258C  EE20 F006          	lfsr	2,6
 22004  002590  D81F               	call	PL36	;call to abstracted procedure
 22005  002592  5CE5               	subwf	postdec1,w,c
 22006  002594  E102               	bnz	u12965
 22007  002596  50DF               	movf	indf2,w,c
 22008  002598  5CE7               	subwf	indf1,w,c
 22009  00259A                     u12965:
 22010  00259A  E30E               	bnc	l10654
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;fifo.c: 40: f->tail = 0;
 22014  00259C  EE20 F004          	lfsr	2,4
 22015  0025A0  5160               	movf	fifo_read@f& (0+255),w,b
 22016  0025A2  26D9               	addwf	fsr2l,f,c
 22017  0025A4  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22018  0025A6  22DA               	addwfc	fsr2h,f,c
 22019  0025A8  6ADE               	clrf	postinc2,c
 22020  0025AA  6ADD               	clrf	postdec2,c
 22021  0025AC  D005               	goto	l10654
 22022  0025AE                     l1595:
 22023                           
 22024                           ; BSR set to: 0
 22025                           ;fifo.c: 43: else {
 22026                           ;fifo.c: 44: return i;
 22027  0025AE  C06C  F060         	movff	fifo_read@i,?_fifo_read
 22028  0025B2  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 22029  0025B6  D00B               	goto	l1598
 22030  0025B8                     l10654:
 22031                           
 22032                           ; BSR set to: 0
 22033  0025B8  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 22034  0025BA  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 22035  0025BC                     l10656:
 22036                           
 22037                           ; BSR set to: 0
 22038  0025BC  5164               	movf	fifo_read@nbytes& (0+255),w,b
 22039  0025BE  5D6C               	subwf	fifo_read@i& (0+255),w,b
 22040  0025C0  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 22041  0025C2  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 22042  0025C4  E3B1               	bnc	l10642
 22043                           
 22044                           ; BSR set to: 0
 22045                           ;fifo.c: 45: }
 22046                           ;fifo.c: 47: }
 22047                           ;fifo.c: 49: return nbytes;
 22048  0025C6  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 22049  0025CA  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 22050  0025CE                     l1598:
 22051                           
 22052                           ; BSR set to: 0
 22053  0025CE  0012               	return	
 22054  0025D0                     __end_of_fifo_read:
 22055                           	opt stack 0
 22056  0025D0                     PL36:
 22057                           	opt stack 23
 22058  0025D0  5160               	movf	fifo_read@f& (0+255),w,b
 22059  0025D2  26D9               	addwf	fsr2l,f,c
 22060  0025D4  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22061  0025D6  22DA               	addwfc	fsr2h,f,c
 22062  0025D8  EE10 F004          	lfsr	1,4
 22063  0025DC  5160               	movf	fifo_read@f& (0+255),w,b
 22064  0025DE  26E1               	addwf	fsr1l,f,c
 22065  0025E0  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22066  0025E2  22E2               	addwfc	fsr1h,f,c
 22067  0025E4  52E6               	movf	postinc1,f,c
 22068  0025E6  52DE               	movf	postinc2,f,c
 22069  0025E8  50DD               	movf	postdec2,w,c
 22070  0025EA  0012               	return	
 22071  0025EC                     __end_ofPL36:
 22072                           	opt stack 0
 22073                           tblptru	equ	0xFF8
 22074                           tblptrh	equ	0xFF7
 22075                           tblptrl	equ	0xFF6
 22076                           tablat	equ	0xFF5
 22077                           prodh	equ	0xFF4
 22078                           prodl	equ	0xFF3
 22079                           intcon	equ	0xFF2
 22080                           indf0	equ	0xFEF
 22081                           postinc0	equ	0xFEE
 22082                           fsr0h	equ	0xFEA
 22083                           fsr0l	equ	0xFE9
 22084                           wreg	equ	0xFE8
 22085                           indf1	equ	0xFE7
 22086                           postinc1	equ	0xFE6
 22087                           postdec1	equ	0xFE5
 22088                           fsr1h	equ	0xFE2
 22089                           fsr1l	equ	0xFE1
 22090                           indf2	equ	0xFDF
 22091                           postinc2	equ	0xFDE
 22092                           postdec2	equ	0xFDD
 22093                           plusw2	equ	0xFDB
 22094                           fsr2h	equ	0xFDA
 22095                           fsr2l	equ	0xFD9
 22096                           status	equ	0xFD8
 22097                           
 22098 ;; *************** function _sprintf *****************
 22099 ;; Defined at:
 22100 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 22101 ;; Parameters:    Size  Location     Type
 22102 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 22103 ;;		 -> wrkbuf(80), 
 22104 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 22105 ;;		 -> STR_231(3), STR_230(7), STR_224(3), STR_223(7), 
 22106 ;;		 -> STR_220(4), STR_219(8), STR_216(4), STR_215(8), 
 22107 ;;		 -> STR_212(4), STR_211(8), STR_208(4), STR_207(8), 
 22108 ;;		 -> STR_204(4), STR_203(7), STR_200(4), STR_199(7), 
 22109 ;;		 -> STR_196(4), STR_195(7), STR_192(4), STR_191(7), 
 22110 ;;		 -> STR_186(3), STR_185(7), STR_183(3), STR_182(7), 
 22111 ;;		 -> STR_180(3), STR_179(7), STR_177(3), STR_176(7), 
 22112 ;;		 -> STR_174(3), STR_173(7), STR_171(3), STR_170(7), 
 22113 ;;		 -> STR_101(3), STR_100(7), STR_96(4), STR_95(8), 
 22114 ;;		 -> STR_92(4), STR_91(8), STR_77(3), STR_76(7), 
 22115 ;;		 -> STR_75(3), STR_74(7), STR_72(6), STR_71(10), 
 22116 ;;		 -> STR_66(3), STR_65(7), STR_63(3), STR_62(7), 
 22117 ;;		 -> STR_61(3), STR_60(7), STR_58(6), STR_57(10), 
 22118 ;; Auto vars:     Size  Location     Type
 22119 ;;  idx             1   33[BANK0 ] unsigned char 
 22120 ;;  _val            4   45[BANK0 ] struct .
 22121 ;;  flag            2   50[BANK0 ] unsigned short 
 22122 ;;  width           2   43[BANK0 ] int 
 22123 ;;  prec            2   41[BANK0 ] int 
 22124 ;;  c               1   49[BANK0 ] char 
 22125 ;;  ap              1   40[BANK0 ] PTR void [1]
 22126 ;;		 -> ?_sprintf(2), 
 22127 ;; Return value:  Size  Location     Type
 22128 ;;                  2   22[BANK0 ] int 
 22129 ;; Registers used:
 22130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22131 ;; Tracked objects:
 22132 ;;		On entry : F/0
 22133 ;;		On exit  : F/0
 22134 ;;		Unchanged: 0/0
 22135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22136 ;;      Params:         0       8       0       0       0       0       0
 22137 ;;      Locals:         0      19       0       0       0       0       0
 22138 ;;      Temps:          0       3       0       0       0       0       0
 22139 ;;      Totals:         0      30       0       0       0       0       0
 22140 ;;Total ram usage:       30 bytes
 22141 ;; Hardware stack levels used:    1
 22142 ;; Hardware stack levels required when called:    4
 22143 ;; This function calls:
 22144 ;;		_isdigit
 22145 ;;		___lldiv
 22146 ;;		___llmod
 22147 ;;		___wmul
 22148 ;; This function is called by:
 22149 ;;		_doModeVerbose
 22150 ;;		_receivePrintEventVerbose
 22151 ;;		_printStatistics
 22152 ;;		_printErrors
 22153 ;; This function uses a non-reentrant model
 22154 ;;
 22155                           
 22156                           	psect	text54
 22157  004CDA                     __ptext54:
 22158                           	opt stack 0
 22159  004CDA                     _sprintf:
 22160                           	opt stack 24
 22161                           
 22162                           ; BSR set to: 0
 22163                           ;doprnt.c: 494: va_list ap;
 22164                           ;doprnt.c: 499: signed char c;
 22165                           ;doprnt.c: 501: int width;
 22166                           ;doprnt.c: 504: int prec;
 22167                           ;doprnt.c: 508: unsigned short flag;
 22168                           ;doprnt.c: 527: union {
 22169                           ;doprnt.c: 528: unsigned long _val;
 22170                           ;doprnt.c: 529: struct {
 22171                           ;doprnt.c: 530: const char * _cp;
 22172                           ;doprnt.c: 531: unsigned _len;
 22173                           ;doprnt.c: 532: } _str;
 22174                           ;doprnt.c: 533: } _val;
 22175                           ;doprnt.c: 542: *ap = __va_start();
 22176                           
 22177                           ; BSR set to: 0
 22178                           ;incstack = 0
 22179                           ;incstack = 0
 22180  004CDA  0E7A               	movlw	low (?_sprintf+4)
 22181  004CDC  6F88               	movwf	sprintf@ap& (0+255),b
 22182                           
 22183                           ;doprnt.c: 545: while(c = *f++) {
 22184  004CDE  D32C               	goto	l16284
 22185  004CE0                     l15950:
 22186                           
 22187                           ; BSR set to: 0
 22188                           ;doprnt.c: 547: if(c != '%')
 22189  004CE0  5191               	movf	sprintf@c& (0+255),w,b
 22190  004CE2  0A25               	xorlw	37
 22191  004CE4  E009               	bz	l1682
 22192                           
 22193                           ; BSR set to: 0
 22194                           ;doprnt.c: 549: {
 22195                           ;doprnt.c: 550: ((*sp++ = (c)));
 22196  004CE6  C076  FFD9         	movff	sprintf@sp,fsr2l
 22197  004CEA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22198  004CEE  C091  FFDF         	movff	sprintf@c,indf2
 22199                           
 22200                           ; BSR set to: 0
 22201  004CF2  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22202  004CF4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22203                           
 22204                           ;doprnt.c: 551: continue;
 22205  004CF6  D320               	goto	l16284
 22206  004CF8                     l1682:
 22207                           
 22208                           ; BSR set to: 0
 22209                           ;doprnt.c: 552: }
 22210                           ;doprnt.c: 555: width = 0;
 22211  004CF8  6B8B               	clrf	sprintf@width& (0+255),b
 22212  004CFA  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22213                           
 22214                           ;doprnt.c: 557: flag = 0;
 22215  004CFC  6B92               	clrf	sprintf@flag& (0+255),b
 22216  004CFE  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22217  004D00  D009               	goto	l15966
 22218  004D02                     l15956:
 22219                           
 22220                           ; BSR set to: 0
 22221                           ;doprnt.c: 563: flag |= 0x08;
 22222  004D02  8792               	bsf	sprintf@flag& (0+255),3,b
 22223  004D04  D005               	goto	L38
 22224  004D06                     l15958:
 22225                           
 22226                           ; BSR set to: 0
 22227                           ;doprnt.c: 570: flag |= 0x01;
 22228  004D06  8192               	bsf	sprintf@flag& (0+255),0,b
 22229  004D08  D003               	goto	L38
 22230  004D0A                     l15960:
 22231                           
 22232                           ; BSR set to: 0
 22233                           ;doprnt.c: 583: flag |= 0x800;
 22234  004D0A  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22235  004D0C  D001               	goto	L38
 22236  004D0E                     l15962:
 22237                           
 22238                           ; BSR set to: 0
 22239                           ;doprnt.c: 589: flag |= 0x04;
 22240  004D0E  8592               	bsf	sprintf@flag& (0+255),2,b
 22241  004D10                     L38:
 22242                           
 22243                           ;doprnt.c: 590: f++;
 22244  004D10  4B78               	infsnz	sprintf@f& (0+255),f,b
 22245  004D12  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22246  004D14                     l15966:
 22247                           
 22248                           ; BSR set to: 0
 22249  004D14  C078  FFF6         	movff	sprintf@f,tblptrl
 22250  004D18  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22251  004D1C  0008               	tblrd		*
 22252  004D1E  50F5               	movf	tablat,w,c
 22253                           
 22254                           ; Switch size 1, requested type "space"
 22255                           ; Number of cases is 4, Range of values is 32 to 48
 22256                           ; switch strategies available:
 22257                           ; Name         Instructions Cycles
 22258                           ; simple_byte           13     7 (average)
 22259                           ;	Chosen strategy is simple_byte
 22260  004D20  0A20               	xorlw	32	; case 32
 22261  004D22  E0F1               	bz	l15958
 22262  004D24  0A03               	xorlw	3	; case 35
 22263  004D26  E0F1               	bz	l15960
 22264  004D28  0A0E               	xorlw	14	; case 45
 22265  004D2A  E0EB               	bz	l15956
 22266  004D2C  0A1D               	xorlw	29	; case 48
 22267  004D2E  E0EF               	bz	l15962
 22268                           
 22269                           ; BSR set to: 0
 22270                           ;doprnt.c: 602: if(flag & 0x08)
 22271  004D30  B792               	btfsc	sprintf@flag& (0+255),3,b
 22272                           
 22273                           ; BSR set to: 0
 22274                           ;doprnt.c: 603: flag &= ~0x04;
 22275  004D32  9592               	bcf	sprintf@flag& (0+255),2,b
 22276                           
 22277                           ; BSR set to: 0
 22278                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22279  004D34  C078  FFF6         	movff	sprintf@f,tblptrl
 22280  004D38  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22281  004D3C  0008               	tblrd		*
 22282  004D3E  50F5               	movf	tablat,w,c
 22283  004D40  EC15  F008         	call	_isdigit
 22284  004D44  E325               	bnc	l15982
 22285                           
 22286                           ; BSR set to: 0
 22287                           ;doprnt.c: 607: width = 0;
 22288  004D46  6B8B               	clrf	sprintf@width& (0+255),b
 22289  004D48  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22290  004D4A                     l15974:
 22291                           
 22292                           ; BSR set to: 0
 22293                           ;doprnt.c: 609: width *= 10;
 22294  004D4A  C08B  F060         	movff	sprintf@width,?___wmul
 22295  004D4E  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22296  004D52  6B63               	clrf	(?___wmul+3)& (0+255),b
 22297  004D54  0E0A               	movlw	10
 22298  004D56  6F62               	movwf	(?___wmul+2)& (0+255),b
 22299  004D58  EC6A  F008         	call	___wmul	;wreg free
 22300  004D5C  C060  F08B         	movff	?___wmul,sprintf@width
 22301  004D60  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22302                           
 22303                           ; BSR set to: 0
 22304                           ;doprnt.c: 610: width += *f++ - '0';
 22305  004D64  C078  FFF6         	movff	sprintf@f,tblptrl
 22306  004D68  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22307  004D6C  0008               	tblrd		*
 22308  004D6E  CFF5 F07E          	movff	tablat,??_sprintf
 22309  004D72  0ED0               	movlw	208
 22310  004D74  257E               	addwf	??_sprintf& (0+255),w,b
 22311  004D76  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22312  004D78  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22313  004D7A  0EFF               	movlw	255
 22314  004D7C  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22315  004D7E  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22316  004D80  278B               	addwf	sprintf@width& (0+255),f,b
 22317  004D82  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22318  004D84  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22319                           
 22320                           ; BSR set to: 0
 22321                           
 22322                           ; BSR set to: 0
 22323                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22324  004D86  DB36               	call	PL84	;call to abstracted procedure
 22325  004D88  EC15  F008         	call	_isdigit
 22326  004D8C  E314               	bnc	l15990
 22327  004D8E  D7DD               	goto	l15974
 22328  004D90                     l15982:
 22329                           
 22330                           ; BSR set to: 0
 22331  004D90  C078  FFF6         	movff	sprintf@f,tblptrl
 22332  004D94  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22333  004D98  0008               	tblrd		*
 22334  004D9A  50F5               	movf	tablat,w,c
 22335  004D9C  0A2A               	xorlw	42
 22336  004D9E  E10B               	bnz	l15990
 22337                           
 22338                           ; BSR set to: 0
 22339                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22340  004DA0  5188               	movf	sprintf@ap& (0+255),w,b
 22341  004DA2  6ED9               	movwf	fsr2l,c
 22342  004DA4  6ADA               	clrf	fsr2h,c
 22343  004DA6  CFDE F08B          	movff	postinc2,sprintf@width
 22344  004DAA  CFDD F08C          	movff	postdec2,sprintf@width+1
 22345                           
 22346                           ; BSR set to: 0
 22347  004DAE  0E02               	movlw	2
 22348  004DB0  2788               	addwf	sprintf@ap& (0+255),f,b
 22349                           
 22350                           ; BSR set to: 0
 22351                           ;doprnt.c: 615: f++;
 22352  004DB2  4B78               	infsnz	sprintf@f& (0+255),f,b
 22353  004DB4  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22354  004DB6                     l15990:
 22355                           
 22356                           ; BSR set to: 0
 22357                           ;doprnt.c: 617: }
 22358                           ;doprnt.c: 620: if(*f == '.') {
 22359  004DB6  C078  FFF6         	movff	sprintf@f,tblptrl
 22360  004DBA  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22361  004DBE  0008               	tblrd		*
 22362  004DC0  50F5               	movf	tablat,w,c
 22363  004DC2  0A2E               	xorlw	46
 22364  004DC4  E137               	bnz	l1698
 22365                           
 22366                           ; BSR set to: 0
 22367                           ;doprnt.c: 621: flag |= 0x4000;
 22368  004DC6  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22369                           
 22370                           ;doprnt.c: 622: f++;
 22371                           
 22372                           ; BSR set to: 0
 22373                           ;doprnt.c: 624: if(*f == '*') {
 22374  004DC8  DB15               	call	PL84	;call to abstracted procedure
 22375  004DCA  0A2A               	xorlw	42
 22376  004DCC  E10C               	bnz	l1699
 22377                           
 22378                           ; BSR set to: 0
 22379                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22380  004DCE  5188               	movf	sprintf@ap& (0+255),w,b
 22381  004DD0  6ED9               	movwf	fsr2l,c
 22382  004DD2  6ADA               	clrf	fsr2h,c
 22383  004DD4  CFDE F089          	movff	postinc2,sprintf@prec
 22384  004DD8  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22385                           
 22386                           ; BSR set to: 0
 22387  004DDC  0E02               	movlw	2
 22388  004DDE  2788               	addwf	sprintf@ap& (0+255),f,b
 22389                           
 22390                           ; BSR set to: 0
 22391                           ;doprnt.c: 626: f++;
 22392  004DE0  4B78               	infsnz	sprintf@f& (0+255),f,b
 22393  004DE2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22394                           
 22395                           ;doprnt.c: 627: } else
 22396  004DE4  D088               	goto	l16060
 22397  004DE6                     l1699:
 22398                           
 22399                           ; BSR set to: 0
 22400                           ;doprnt.c: 629: {
 22401                           ;doprnt.c: 630: prec = 0;
 22402  004DE6  6B89               	clrf	sprintf@prec& (0+255),b
 22403  004DE8  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22404                           
 22405                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22406  004DEA  D01A               	goto	l16006
 22407  004DEC                     l16002:
 22408                           
 22409                           ; BSR set to: 0
 22410                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22411  004DEC  C089  F060         	movff	sprintf@prec,?___wmul
 22412  004DF0  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22413  004DF4  6B63               	clrf	(?___wmul+3)& (0+255),b
 22414  004DF6  0E0A               	movlw	10
 22415  004DF8  6F62               	movwf	(?___wmul+2)& (0+255),b
 22416  004DFA  EC6A  F008         	call	___wmul	;wreg free
 22417  004DFE  C078  FFF6         	movff	sprintf@f,tblptrl
 22418  004E02  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22419  004E06  0008               	tblrd		*
 22420  004E08  50F5               	movf	tablat,w,c
 22421  004E0A  2760               	addwf	?___wmul& (0+255),f,b
 22422  004E0C  0E00               	movlw	0
 22423  004E0E  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22424  004E10  0ED0               	movlw	208
 22425  004E12  2560               	addwf	?___wmul& (0+255),w,b
 22426  004E14  6F89               	movwf	sprintf@prec& (0+255),b
 22427  004E16  0EFF               	movlw	255
 22428  004E18  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22429  004E1A  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22430                           
 22431                           ; BSR set to: 0
 22432  004E1C  4B78               	infsnz	sprintf@f& (0+255),f,b
 22433  004E1E  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22434  004E20                     l16006:
 22435                           
 22436                           ; BSR set to: 0
 22437  004E20  C078  FFF6         	movff	sprintf@f,tblptrl
 22438  004E24  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22439  004E28  0008               	tblrd		*
 22440  004E2A  50F5               	movf	tablat,w,c
 22441  004E2C  EC15  F008         	call	_isdigit
 22442  004E30  E362               	bnc	l16060
 22443  004E32  D7DC               	goto	l16002
 22444  004E34                     l1698:
 22445                           
 22446                           ; BSR set to: 0
 22447                           ;doprnt.c: 635: prec = 0;
 22448  004E34  6B89               	clrf	sprintf@prec& (0+255),b
 22449  004E36  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22450  004E38  D05E               	goto	l16060
 22451  004E3A                     l16008:
 22452                           
 22453                           ; BSR set to: 0
 22454                           ;doprnt.c: 652: flag |= 0x10;
 22455  004E3A  8992               	bsf	sprintf@flag& (0+255),4,b
 22456                           
 22457                           ;doprnt.c: 653: goto loop;
 22458  004E3C  D05C               	goto	l16060
 22459  004E3E                     l16010:
 22460                           
 22461                           ; BSR set to: 0
 22462                           ;doprnt.c: 700: flag |= 0x40;
 22463  004E3E  8D92               	bsf	sprintf@flag& (0+255),6,b
 22464                           
 22465                           ;doprnt.c: 702: break;
 22466  004E40  D06F               	goto	l16062
 22467  004E42                     l16012:
 22468                           
 22469                           ; BSR set to: 0
 22470                           ;doprnt.c: 723: flag |= 0x20;
 22471  004E42  8B92               	bsf	sprintf@flag& (0+255),5,b
 22472  004E44                     l1715:
 22473                           
 22474                           ; BSR set to: 0
 22475                           ;doprnt.c: 730: flag |= 0x80;
 22476  004E44  8F92               	bsf	sprintf@flag& (0+255),7,b
 22477                           
 22478                           ;doprnt.c: 732: break;
 22479  004E46  D06C               	goto	l16062
 22480  004E48                     l16014:
 22481                           
 22482                           ; BSR set to: 0
 22483                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22484  004E48  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22485  004E4A  1189               	iorwf	sprintf@prec& (0+255),w,b
 22486  004E4C  E009               	bz	l16020
 22487                           
 22488                           ; BSR set to: 0
 22489  004E4E  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22490  004E50  5D89               	subwf	sprintf@prec& (0+255),w,b
 22491  004E52  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22492  004E54  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22493  004E56  E204               	bc	l16020
 22494                           
 22495                           ; BSR set to: 0
 22496                           ;doprnt.c: 763: _val._str._len = prec;
 22497  004E58  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22498  004E5C  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22499  004E60                     l16020:
 22500                           
 22501                           ; BSR set to: 0
 22502                           ;doprnt.c: 766: if(width > _val._str._len)
 22503  004E60  518B               	movf	sprintf@width& (0+255),w,b
 22504  004E62  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22505  004E64  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22506  004E66  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22507  004E68  E207               	bc	l1718
 22508                           
 22509                           ; BSR set to: 0
 22510                           ;doprnt.c: 767: width -= _val._str._len;
 22511  004E6A  EE20  F08E         	lfsr	2,sprintf@_val+1
 22512  004E6E  50DE               	movf	postinc2,w,c
 22513  004E70  5F8B               	subwf	sprintf@width& (0+255),f,b
 22514  004E72  50DD               	movf	postdec2,w,c
 22515  004E74  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22516  004E76  D002               	goto	l1719
 22517  004E78                     l1718:
 22518                           
 22519                           ; BSR set to: 0
 22520                           ;doprnt.c: 768: else
 22521                           ;doprnt.c: 769: width = 0;
 22522  004E78  6B8B               	clrf	sprintf@width& (0+255),b
 22523  004E7A  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22524  004E7C                     l1719:
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;doprnt.c: 771: if(!(flag & 0x08))
 22528  004E7C  A792               	btfss	sprintf@flag& (0+255),3,b
 22529  004E7E  D004               	goto	l16030
 22530  004E80  D015               	goto	l16038
 22531  004E82                     l16026:
 22532                           
 22533                           ; BSR set to: 0
 22534                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22535  004E82  DAB1               	call	PL64	;call to abstracted procedure
 22536                           
 22537                           ; BSR set to: 0
 22538  004E84  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22539  004E86  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22540  004E88                     l16030:
 22541                           
 22542                           ; BSR set to: 0
 22543  004E88  078B               	decf	sprintf@width& (0+255),f,b
 22544  004E8A  DAC2               	call	PL110	;call to abstracted procedure
 22545  004E8C  B4D8               	btfsc	status,2,c
 22546  004E8E  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22547  004E90  E00D               	bz	l16038
 22548  004E92  D7F7               	goto	l16026
 22549  004E94                     l16032:
 22550                           
 22551                           ; BSR set to: 0
 22552                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22553  004E94  518D               	movf	sprintf@_val& (0+255),w,b
 22554  004E96  6ED9               	movwf	fsr2l,c
 22555  004E98  6ADA               	clrf	fsr2h,c
 22556  004E9A  C076  FFE1         	movff	sprintf@sp,fsr1l
 22557  004E9E  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22558  004EA2  CFDF FFE7          	movff	indf2,indf1
 22559                           
 22560                           ; BSR set to: 0
 22561  004EA6  2B8D               	incf	sprintf@_val& (0+255),f,b
 22562                           
 22563                           ; BSR set to: 0
 22564  004EA8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22565  004EAA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22566  004EAC                     l16038:
 22567                           
 22568                           ; BSR set to: 0
 22569  004EAC  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22570  004EAE  A0D8               	btfss	status,0,c
 22571  004EB0  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22572  004EB2  0100               	movlb	0	; () banked
 22573  004EB4  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22574  004EB6  B4D8               	btfsc	status,2,c
 22575  004EB8  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22576  004EBA  E1EC               	bnz	l16032
 22577                           
 22578                           ; BSR set to: 0
 22579                           ;doprnt.c: 779: if(flag & 0x08)
 22580  004EBC  B792               	btfsc	sprintf@flag& (0+255),3,b
 22581  004EBE  D004               	goto	l16046
 22582  004EC0  D23B               	goto	l16284
 22583  004EC2                     l16042:
 22584                           
 22585                           ; BSR set to: 0
 22586                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22587  004EC2  DA91               	call	PL64	;call to abstracted procedure
 22588                           
 22589                           ; BSR set to: 0
 22590  004EC4  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22591  004EC6  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22592  004EC8                     l16046:
 22593                           
 22594                           ; BSR set to: 0
 22595  004EC8  078B               	decf	sprintf@width& (0+255),f,b
 22596  004ECA  DAA2               	call	PL110	;call to abstracted procedure
 22597  004ECC  B4D8               	btfsc	status,2,c
 22598  004ECE  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22599  004ED0  E101 D232          	bz	l16284
 22600  004ED4  D7F6               	goto	l16042
 22601  004ED6                     l16048:
 22602                           
 22603                           ; BSR set to: 0
 22604                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22605  004ED6  5188               	movf	sprintf@ap& (0+255),w,b
 22606  004ED8  6ED9               	movwf	fsr2l,c
 22607  004EDA  6ADA               	clrf	fsr2h,c
 22608  004EDC  50DF               	movf	indf2,w,c
 22609  004EDE  6F91               	movwf	sprintf@c& (0+255),b
 22610                           
 22611                           ; BSR set to: 0
 22612  004EE0  0E02               	movlw	2
 22613  004EE2  2788               	addwf	sprintf@ap& (0+255),f,b
 22614  004EE4                     l16052:
 22615                           
 22616                           ; BSR set to: 0
 22617                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22618  004EE4  0E91               	movlw	low sprintf@c
 22619  004EE6  6F8D               	movwf	sprintf@_val& (0+255),b
 22620                           
 22621                           ; BSR set to: 0
 22622                           ;doprnt.c: 815: _val._str._len = 1;
 22623  004EE8  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22624  004EEA  0E01               	movlw	1
 22625  004EEC  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22626                           
 22627                           ;doprnt.c: 816: goto dostring;
 22628  004EEE  D7AC               	goto	l16014
 22629  004EF0                     l16056:
 22630                           
 22631                           ; BSR set to: 0
 22632                           ;doprnt.c: 827: flag |= 0xC0;
 22633  004EF0  0EC0               	movlw	192
 22634  004EF2  1392               	iorwf	sprintf@flag& (0+255),f,b
 22635                           
 22636                           ;doprnt.c: 828: break;
 22637  004EF4  D015               	goto	l16062
 22638  004EF6                     l16060:
 22639                           
 22640                           ; BSR set to: 0
 22641  004EF6  DA6C               	call	PL60	;call to abstracted procedure
 22642  004EF8  5191               	movf	sprintf@c& (0+255),w,b
 22643                           
 22644                           ; Switch size 1, requested type "space"
 22645                           ; Number of cases is 9, Range of values is 0 to 120
 22646                           ; switch strategies available:
 22647                           ; Name         Instructions Cycles
 22648                           ; simple_byte           28    15 (average)
 22649                           ;	Chosen strategy is simple_byte
 22650  004EFA  E101 D220          	bz	l16286
 22651  004EFE  0A58               	xorlw	88	; case 88
 22652  004F00  E0A0               	bz	l16012
 22653  004F02  0A3B               	xorlw	59	; case 99
 22654  004F04  E0E8               	bz	l16048
 22655  004F06  0A07               	xorlw	7	; case 100
 22656  004F08  E00B               	bz	l16062
 22657  004F0A  0A0D               	xorlw	13	; case 105
 22658  004F0C  E009               	bz	l16062
 22659  004F0E  0A05               	xorlw	5	; case 108
 22660  004F10  E094               	bz	l16008
 22661  004F12  0A03               	xorlw	3	; case 111
 22662  004F14  E094               	bz	l16010
 22663  004F16  0A1A               	xorlw	26	; case 117
 22664  004F18  E0EB               	bz	l16056
 22665  004F1A  0A0D               	xorlw	13	; case 120
 22666  004F1C  E093               	bz	l1715
 22667  004F1E  D7E2               	goto	l16052
 22668  004F20                     l16062:
 22669                           
 22670                           ; BSR set to: 0
 22671                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22672  004F20  5192               	movf	sprintf@flag& (0+255),w,b
 22673  004F22  0BC0               	andlw	192
 22674  004F24  E120               	bnz	l1734
 22675                           
 22676                           ; BSR set to: 0
 22677                           ;doprnt.c: 1260: {
 22678                           ;doprnt.c: 1262: if(flag & 0x10)
 22679  004F26  A992               	btfss	sprintf@flag& (0+255),4,b
 22680  004F28  D003               	goto	l16070
 22681                           
 22682                           ; BSR set to: 0
 22683                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22684  004F2A  5188               	movf	sprintf@ap& (0+255),w,b
 22685                           
 22686                           ; BSR set to: 0
 22687  004F2C  DA46               	call	PL52	;call to abstracted procedure
 22688  004F2E  D00D               	goto	L39
 22689  004F30                     l16070:
 22690                           
 22691                           ; BSR set to: 0
 22692                           ;doprnt.c: 1264: else
 22693                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22694  004F30  5188               	movf	sprintf@ap& (0+255),w,b
 22695  004F32  6ED9               	movwf	fsr2l,c
 22696  004F34  6ADA               	clrf	fsr2h,c
 22697  004F36  CFDE F08D          	movff	postinc2,sprintf@_val
 22698  004F3A  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22699  004F3E  0E00               	movlw	0
 22700  004F40  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22701  004F42  0EFF               	movlw	-1
 22702  004F44  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22703  004F46  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22704                           
 22705                           ; BSR set to: 0
 22706  004F48  0E02               	movlw	2
 22707  004F4A                     L39:
 22708  004F4A  2788               	addwf	sprintf@ap& (0+255),f,b
 22709                           
 22710                           ; BSR set to: 0
 22711                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22712  004F4C  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22713  004F4E  D01F               	goto	l16088
 22714                           
 22715                           ; BSR set to: 0
 22716                           ;doprnt.c: 1269: flag |= 0x03;
 22717  004F50  0E03               	movlw	3
 22718  004F52  1392               	iorwf	sprintf@flag& (0+255),f,b
 22719                           
 22720                           ; BSR set to: 0
 22721                           ;doprnt.c: 1270: _val._val = -_val._val;
 22722  004F54  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22723  004F56  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22724  004F58  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22725  004F5A  6D8D               	negf	sprintf@_val& (0+255),b
 22726  004F5C  0E00               	movlw	0
 22727  004F5E  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22728  004F60  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22729  004F62  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22730  004F64  D014               	goto	l16088
 22731  004F66                     l1734:
 22732                           
 22733                           ; BSR set to: 0
 22734                           ;doprnt.c: 1275: else
 22735                           ;doprnt.c: 1280: {
 22736                           ;doprnt.c: 1288: if(flag & 0x10)
 22737  004F66  A992               	btfss	sprintf@flag& (0+255),4,b
 22738  004F68  D003               	goto	l16084
 22739                           
 22740                           ; BSR set to: 0
 22741                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22742  004F6A  5188               	movf	sprintf@ap& (0+255),w,b
 22743                           
 22744                           ; BSR set to: 0
 22745  004F6C  DA26               	call	PL52	;call to abstracted procedure
 22746  004F6E  D00E               	goto	L40
 22747  004F70                     l16084:
 22748                           
 22749                           ; BSR set to: 0
 22750                           ;doprnt.c: 1290: else
 22751                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22752  004F70  5188               	movf	sprintf@ap& (0+255),w,b
 22753  004F72  6ED9               	movwf	fsr2l,c
 22754  004F74  6ADA               	clrf	fsr2h,c
 22755  004F76  CFDE F07E          	movff	postinc2,??_sprintf
 22756  004F7A  CFDD F07F          	movff	postdec2,??_sprintf+1
 22757  004F7E  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22758  004F82  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22759  004F86  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22760  004F88  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22761                           
 22762                           ; BSR set to: 0
 22763  004F8A  0E02               	movlw	2
 22764  004F8C                     L40:
 22765  004F8C  2788               	addwf	sprintf@ap& (0+255),f,b
 22766  004F8E                     l16088:
 22767                           
 22768                           ; BSR set to: 0
 22769                           ;doprnt.c: 1294: }
 22770                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22771  004F8E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22772  004F90  1189               	iorwf	sprintf@prec& (0+255),w,b
 22773  004F92  E15C               	bnz	l16138
 22774                           
 22775                           ; BSR set to: 0
 22776  004F94  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22777  004F96  118D               	iorwf	sprintf@_val& (0+255),w,b
 22778  004F98  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22779  004F9A  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22780  004F9C  E157               	bnz	l16138
 22781                           
 22782                           ; BSR set to: 0
 22783                           ;doprnt.c: 1298: prec++;
 22784  004F9E  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22785  004FA0  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22786  004FA2  D054               	goto	l16138
 22787  004FA4                     l16094:
 22788                           
 22789                           ; BSR set to: 0
 22790                           ;doprnt.c: 1309: case 0xC0:
 22791                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22792  004FA4  0E01               	movlw	1
 22793  004FA6  6F91               	movwf	sprintf@c& (0+255),b
 22794  004FA8                     l16096:
 22795                           
 22796                           ; BSR set to: 0
 22797  004FA8  5191               	movf	sprintf@c& (0+255),w,b
 22798  004FAA  0A0A               	xorlw	10
 22799  004FAC  E058               	bz	l16140
 22800                           
 22801                           ; BSR set to: 0
 22802                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22803  004FAE  5191               	movf	sprintf@c& (0+255),w,b
 22804  004FB0  0D04               	mullw	4
 22805  004FB2  0EF2               	movlw	low _dpowers
 22806  004FB4  24F3               	addwf	prodl,w,c
 22807  004FB6  6EF6               	movwf	tblptrl,c
 22808  004FB8  0E6B               	movlw	high _dpowers
 22809  004FBA  20F4               	addwfc	prodh,w,c
 22810  004FBC  6EF7               	movwf	tblptrh,c
 22811  004FBE  0009               	tblrd		*+
 22812  004FC0  50F5               	movf	tablat,w,c
 22813  004FC2  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22814  004FC4  0009               	tblrd		*+
 22815  004FC6  50F5               	movf	tablat,w,c
 22816  004FC8  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22817  004FCA  0009               	tblrd		*+
 22818  004FCC  50F5               	movf	tablat,w,c
 22819  004FCE  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22820  004FD0  0009               	tblrd		*+
 22821  004FD2  50F5               	movf	tablat,w,c
 22822  004FD4  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22823  004FD6  E343               	bnc	l16140
 22824                           
 22825                           ; BSR set to: 0
 22826  004FD8  2B91               	incf	sprintf@c& (0+255),f,b
 22827  004FDA  D7E6               	goto	l16096
 22828  004FDC                     l16108:
 22829                           
 22830                           ; BSR set to: 0
 22831                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22832  004FDC  0E01               	movlw	1
 22833  004FDE  6F91               	movwf	sprintf@c& (0+255),b
 22834  004FE0                     l16110:
 22835                           
 22836                           ; BSR set to: 0
 22837  004FE0  5191               	movf	sprintf@c& (0+255),w,b
 22838  004FE2  0A08               	xorlw	8
 22839  004FE4  E03C               	bz	l16140
 22840                           
 22841                           ; BSR set to: 0
 22842                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22843  004FE6  5191               	movf	sprintf@c& (0+255),w,b
 22844  004FE8  0D04               	mullw	4
 22845  004FEA  0E1A               	movlw	low _hexpowers
 22846  004FEC  24F3               	addwf	prodl,w,c
 22847  004FEE  6EF6               	movwf	tblptrl,c
 22848  004FF0  0E6C               	movlw	high _hexpowers
 22849  004FF2  20F4               	addwfc	prodh,w,c
 22850  004FF4  6EF7               	movwf	tblptrh,c
 22851  004FF6  0009               	tblrd		*+
 22852  004FF8  50F5               	movf	tablat,w,c
 22853  004FFA  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22854  004FFC  0009               	tblrd		*+
 22855  004FFE  50F5               	movf	tablat,w,c
 22856  005000  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22857  005002  0009               	tblrd		*+
 22858  005004  50F5               	movf	tablat,w,c
 22859  005006  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22860  005008  0009               	tblrd		*+
 22861  00500A  50F5               	movf	tablat,w,c
 22862  00500C  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22863  00500E  E327               	bnc	l16140
 22864                           
 22865                           ; BSR set to: 0
 22866  005010  2B91               	incf	sprintf@c& (0+255),f,b
 22867  005012  D7E6               	goto	l16110
 22868  005014                     l16122:
 22869                           
 22870                           ; BSR set to: 0
 22871                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22872  005014  0E01               	movlw	1
 22873  005016  6F91               	movwf	sprintf@c& (0+255),b
 22874  005018                     l16124:
 22875                           
 22876                           ; BSR set to: 0
 22877  005018  5191               	movf	sprintf@c& (0+255),w,b
 22878  00501A  0A0C               	xorlw	12
 22879  00501C  E020               	bz	l16140
 22880                           
 22881                           ; BSR set to: 0
 22882                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22883  00501E  5191               	movf	sprintf@c& (0+255),w,b
 22884  005020  0D04               	mullw	4
 22885  005022  0EC2               	movlw	low _octpowers
 22886  005024  24F3               	addwf	prodl,w,c
 22887  005026  6EF6               	movwf	tblptrl,c
 22888  005028  0E6B               	movlw	high _octpowers
 22889  00502A  20F4               	addwfc	prodh,w,c
 22890  00502C  6EF7               	movwf	tblptrh,c
 22891  00502E  0009               	tblrd		*+
 22892  005030  50F5               	movf	tablat,w,c
 22893  005032  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22894  005034  0009               	tblrd		*+
 22895  005036  50F5               	movf	tablat,w,c
 22896  005038  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22897  00503A  0009               	tblrd		*+
 22898  00503C  50F5               	movf	tablat,w,c
 22899  00503E  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22900  005040  0009               	tblrd		*+
 22901  005042  50F5               	movf	tablat,w,c
 22902  005044  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22903  005046  E30B               	bnc	l16140
 22904                           
 22905                           ; BSR set to: 0
 22906  005048  2B91               	incf	sprintf@c& (0+255),f,b
 22907  00504A  D7E6               	goto	l16124
 22908  00504C                     l16138:
 22909                           
 22910                           ; BSR set to: 0
 22911  00504C  5192               	movf	sprintf@flag& (0+255),w,b
 22912  00504E  0BC0               	andlw	192
 22913                           
 22914                           ; Switch size 1, requested type "space"
 22915                           ; Number of cases is 4, Range of values is 0 to 192
 22916                           ; switch strategies available:
 22917                           ; Name         Instructions Cycles
 22918                           ; simple_byte           13     7 (average)
 22919                           ;	Chosen strategy is simple_byte
 22920  005050  E0A9               	bz	l16094
 22921  005052  0A40               	xorlw	64	; case 64
 22922  005054  E0DF               	bz	l16122
 22923  005056  0AC0               	xorlw	192	; case 128
 22924  005058  E0C1               	bz	l16108
 22925  00505A  0A40               	xorlw	64	; case 192
 22926  00505C  E0A3               	bz	l16094
 22927  00505E                     l16140:
 22928                           
 22929                           ; BSR set to: 0
 22930                           ;doprnt.c: 1346: if(c < prec)
 22931  00505E  0E80               	movlw	128
 22932  005060  BF91               	btfsc	sprintf@c& (0+255),7,b
 22933  005062  0E7F               	movlw	127
 22934  005064  6F7E               	movwf	??_sprintf& (0+255),b
 22935  005066  5189               	movf	sprintf@prec& (0+255),w,b
 22936  005068  5D91               	subwf	sprintf@c& (0+255),w,b
 22937  00506A  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22938  00506C  0A80               	xorlw	128
 22939  00506E  597E               	subwfb	??_sprintf& (0+255),w,b
 22940  005070  E203               	bc	l16144
 22941                           
 22942                           ; BSR set to: 0
 22943                           ;doprnt.c: 1347: c = prec;
 22944  005072  C089  F091         	movff	sprintf@prec,sprintf@c
 22945  005076  D00F               	goto	l16148
 22946  005078                     l16144:
 22947                           
 22948                           ; BSR set to: 0
 22949                           ;doprnt.c: 1348: else if(prec < c)
 22950  005078  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22951  00507A  0A80               	xorlw	128
 22952  00507C  6F7E               	movwf	??_sprintf& (0+255),b
 22953  00507E  5191               	movf	sprintf@c& (0+255),w,b
 22954  005080  5D89               	subwf	sprintf@prec& (0+255),w,b
 22955  005082  0E80               	movlw	128
 22956  005084  BF91               	btfsc	sprintf@c& (0+255),7,b
 22957  005086  0E7F               	movlw	127
 22958  005088  597E               	subwfb	??_sprintf& (0+255),w,b
 22959  00508A  E205               	bc	l16148
 22960                           
 22961                           ; BSR set to: 0
 22962                           ;doprnt.c: 1349: prec = c;
 22963  00508C  5191               	movf	sprintf@c& (0+255),w,b
 22964  00508E  6F89               	movwf	sprintf@prec& (0+255),b
 22965  005090  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22966  005092  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22967  005094  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22968  005096                     l16148:
 22969                           
 22970                           ; BSR set to: 0
 22971                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22972  005096  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22973  005098  118B               	iorwf	sprintf@width& (0+255),w,b
 22974  00509A  E006               	bz	l16154
 22975                           
 22976                           ; BSR set to: 0
 22977  00509C  5192               	movf	sprintf@flag& (0+255),w,b
 22978  00509E  0B03               	andlw	3
 22979  0050A0  E003               	bz	l16154
 22980                           
 22981                           ; BSR set to: 0
 22982                           ;doprnt.c: 1353: width--;
 22983  0050A2  078B               	decf	sprintf@width& (0+255),f,b
 22984  0050A4  A0D8               	btfss	status,0,c
 22985  0050A6  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22986  0050A8                     l16154:
 22987                           
 22988                           ; BSR set to: 0
 22989                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22990  0050A8  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22991  0050AA  D010               	goto	l16160
 22992                           
 22993                           ; BSR set to: 0
 22994                           ;doprnt.c: 1356: if(width > prec)
 22995  0050AC  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22996  0050AE  0A80               	xorlw	128
 22997  0050B0  6F7E               	movwf	??_sprintf& (0+255),b
 22998  0050B2  518B               	movf	sprintf@width& (0+255),w,b
 22999  0050B4  5D89               	subwf	sprintf@prec& (0+255),w,b
 23000  0050B6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23001  0050B8  0A80               	xorlw	128
 23002  0050BA  597E               	subwfb	??_sprintf& (0+255),w,b
 23003  0050BC  E205               	bc	l1762
 23004                           
 23005                           ; BSR set to: 0
 23006                           ;doprnt.c: 1357: width -= prec;
 23007  0050BE  5189               	movf	sprintf@prec& (0+255),w,b
 23008  0050C0  5F8B               	subwf	sprintf@width& (0+255),f,b
 23009  0050C2  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23010  0050C4  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23011  0050C6  D002               	goto	l16160
 23012  0050C8                     l1762:
 23013                           
 23014                           ; BSR set to: 0
 23015                           ;doprnt.c: 1358: else
 23016                           ;doprnt.c: 1359: width = 0;
 23017  0050C8  6B8B               	clrf	sprintf@width& (0+255),b
 23018  0050CA  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23019  0050CC                     l16160:
 23020                           
 23021                           ; BSR set to: 0
 23022                           ;doprnt.c: 1360: }
 23023                           ;doprnt.c: 1364: if((flag & (
 23024                           ;doprnt.c: 1366: 0x04|
 23025                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 23026  0050CC  0EC4               	movlw	196
 23027  0050CE  D94D               	call	PL16	;call to abstracted procedure
 23028  0050D0  0E40               	movlw	64
 23029  0050D2  B4D8               	btfsc	status,2,c
 23030  0050D4  197E               	xorwf	??_sprintf& (0+255),w,b
 23031  0050D6  E107               	bnz	l16166
 23032                           
 23033                           ; BSR set to: 0
 23034                           ;doprnt.c: 1369: if(width)
 23035  0050D8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23036  0050DA  118B               	iorwf	sprintf@width& (0+255),w,b
 23037  0050DC  E018               	bz	l16172
 23038                           
 23039                           ; BSR set to: 0
 23040                           ;doprnt.c: 1370: width--;
 23041  0050DE  078B               	decf	sprintf@width& (0+255),f,b
 23042  0050E0  A0D8               	btfss	status,0,c
 23043  0050E2  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23044  0050E4  D014               	goto	l16172
 23045  0050E6                     l16166:
 23046                           
 23047                           ; BSR set to: 0
 23048                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23049  0050E6  0EC0               	movlw	192
 23050  0050E8  D940               	call	PL16	;call to abstracted procedure
 23051  0050EA  0E80               	movlw	128
 23052  0050EC  B4D8               	btfsc	status,2,c
 23053  0050EE  197E               	xorwf	??_sprintf& (0+255),w,b
 23054  0050F0  E10E               	bnz	l16172
 23055                           
 23056                           ; BSR set to: 0
 23057                           ;doprnt.c: 1379: if(width > 2)
 23058  0050F2  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23059  0050F4  0A80               	xorlw	128
 23060  0050F6  0F80               	addlw	-128
 23061  0050F8  0E03               	movlw	3
 23062  0050FA  B4D8               	btfsc	status,2,c
 23063  0050FC  5D8B               	subwf	sprintf@width& (0+255),w,b
 23064  0050FE  E305               	bnc	l1768
 23065                           
 23066                           ; BSR set to: 0
 23067                           ;doprnt.c: 1380: width -= 2;
 23068  005100  0EFE               	movlw	254
 23069  005102  278B               	addwf	sprintf@width& (0+255),f,b
 23070  005104  0EFF               	movlw	255
 23071  005106  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 23072  005108  D002               	goto	l16172
 23073  00510A                     l1768:
 23074                           
 23075                           ; BSR set to: 0
 23076                           ;doprnt.c: 1381: else
 23077                           ;doprnt.c: 1382: width = 0;
 23078  00510A  6B8B               	clrf	sprintf@width& (0+255),b
 23079  00510C  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23080  00510E                     l16172:
 23081                           
 23082                           ; BSR set to: 0
 23083                           ;doprnt.c: 1383: }
 23084                           ;doprnt.c: 1388: if(width > c)
 23085  00510E  0E80               	movlw	128
 23086  005110  BF91               	btfsc	sprintf@c& (0+255),7,b
 23087  005112  0E7F               	movlw	127
 23088  005114  6F7E               	movwf	??_sprintf& (0+255),b
 23089  005116  518B               	movf	sprintf@width& (0+255),w,b
 23090  005118  5D91               	subwf	sprintf@c& (0+255),w,b
 23091  00511A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23092  00511C  0A80               	xorlw	128
 23093  00511E  597E               	subwfb	??_sprintf& (0+255),w,b
 23094  005120  E207               	bc	l1770
 23095                           
 23096                           ; BSR set to: 0
 23097                           ;doprnt.c: 1389: width -= c;
 23098  005122  5191               	movf	sprintf@c& (0+255),w,b
 23099  005124  5F8B               	subwf	sprintf@width& (0+255),f,b
 23100  005126  0E00               	movlw	0
 23101  005128  BF91               	btfsc	sprintf@c& (0+255),7,b
 23102  00512A  0EFF               	movlw	255
 23103  00512C  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23104  00512E  D002               	goto	l1771
 23105  005130                     l1770:
 23106                           
 23107                           ; BSR set to: 0
 23108                           ;doprnt.c: 1390: else
 23109                           ;doprnt.c: 1391: width = 0;
 23110  005130  6B8B               	clrf	sprintf@width& (0+255),b
 23111  005132  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23112  005134                     l1771:
 23113                           
 23114                           ; BSR set to: 0
 23115                           ;doprnt.c: 1394: if(flag & 0x04) {
 23116  005134  A592               	btfss	sprintf@flag& (0+255),2,b
 23117  005136  D03C               	goto	l16210
 23118                           
 23119                           ; BSR set to: 0
 23120                           ;doprnt.c: 1399: if(flag & 0x03)
 23121  005138  5192               	movf	sprintf@flag& (0+255),w,b
 23122  00513A  0B03               	andlw	3
 23123  00513C  E009               	bz	l1773
 23124                           
 23125                           ; BSR set to: 0
 23126                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 23127  00513E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23128  005142  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23129  005146  0E2D               	movlw	45
 23130  005148  6EDF               	movwf	indf2,c
 23131  00514A                     l16180:
 23132                           
 23133                           ; BSR set to: 0
 23134  00514A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23135  00514C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23136  00514E  D022               	goto	l16202
 23137  005150                     l1773:
 23138                           
 23139                           ; BSR set to: 0
 23140                           ;doprnt.c: 1403: else
 23141                           ;doprnt.c: 1406: if(flag & 0x01)
 23142  005150  A192               	btfss	sprintf@flag& (0+255),0,b
 23143  005152  D006               	goto	l16186
 23144                           
 23145                           ; BSR set to: 0
 23146                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 23147  005154  C076  FFD9         	movff	sprintf@sp,fsr2l
 23148  005158  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23149  00515C  0E20               	movlw	32
 23150  00515E  D7F4               	goto	L41
 23151  005160                     l16186:
 23152                           
 23153                           ; BSR set to: 0
 23154                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23155  005160  0EC0               	movlw	192
 23156  005162  D903               	call	PL16	;call to abstracted procedure
 23157  005164  0E80               	movlw	128
 23158  005166  B4D8               	btfsc	status,2,c
 23159  005168  197E               	xorwf	??_sprintf& (0+255),w,b
 23160  00516A  E114               	bnz	l16202
 23161                           
 23162                           ; BSR set to: 0
 23163                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 23164  00516C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23165  005170  D94A               	call	PL92	;call to abstracted procedure
 23166                           
 23167                           ; BSR set to: 0
 23168  005172  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23169  005174  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23170                           
 23171                           ; BSR set to: 0
 23172                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23173  005176  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23174  005178  D003               	goto	l16196
 23175                           
 23176                           ; BSR set to: 0
 23177  00517A  6B83               	clrf	(_sprintf$2128+1)& (0+255),b
 23178  00517C  0E78               	movlw	120
 23179  00517E  D002               	goto	L42
 23180  005180                     l16196:
 23181                           
 23182                           ; BSR set to: 0
 23183  005180  6B83               	clrf	(_sprintf$2128+1)& (0+255),b
 23184  005182  0E58               	movlw	88
 23185  005184                     L42:
 23186  005184  6F82               	movwf	_sprintf$2128& (0+255),b
 23187                           
 23188                           ; BSR set to: 0
 23189  005186  C076  FFD9         	movff	sprintf@sp,fsr2l
 23190  00518A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23191  00518E  C082  FFDF         	movff	_sprintf$2128,indf2
 23192  005192  D7DB               	goto	l16180
 23193  005194                     l16202:
 23194                           
 23195                           ; BSR set to: 0
 23196                           ;doprnt.c: 1419: }
 23197                           ;doprnt.c: 1422: if(width)
 23198  005194  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23199  005196  118B               	iorwf	sprintf@width& (0+255),w,b
 23200  005198  E101 D0B9          	bz	l16274
 23201                           
 23202                           ; BSR set to: 0
 23203                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 23204  00519C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23205  0051A0  D932               	call	PL92	;call to abstracted procedure
 23206                           
 23207                           ; BSR set to: 0
 23208  0051A2  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23209  0051A4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23210                           
 23211                           ; BSR set to: 0
 23212                           ;doprnt.c: 1425: while(--width);
 23213  0051A6  078B               	decf	sprintf@width& (0+255),f,b
 23214  0051A8  A0D8               	btfss	status,0,c
 23215  0051AA  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23216  0051AC  0100               	movlb	0	; () banked
 23217  0051AE  D7F2               	goto	l16202
 23218  0051B0                     l16210:
 23219                           
 23220                           ; BSR set to: 0
 23221                           ;doprnt.c: 1429: {
 23222                           ;doprnt.c: 1431: if(width
 23223                           ;doprnt.c: 1433: && !(flag & 0x08)
 23224                           ;doprnt.c: 1435: )
 23225  0051B0  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23226  0051B2  118B               	iorwf	sprintf@width& (0+255),w,b
 23227  0051B4  A4D8               	btfss	status,2,c
 23228                           
 23229                           ; BSR set to: 0
 23230  0051B6  B792               	btfsc	sprintf@flag& (0+255),3,b
 23231  0051B8  D004               	goto	l16220
 23232  0051BA                     l16214:
 23233                           
 23234                           ; BSR set to: 0
 23235                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23236  0051BA  C076  FFD9         	movff	sprintf@sp,fsr2l
 23237                           
 23238                           ; BSR set to: 0
 23239                           
 23240                           ; BSR set to: 0
 23241                           ;doprnt.c: 1438: while(--width);
 23242  0051BE  D8F0               	call	PL42	;call to abstracted procedure
 23243  0051C0  E1FC               	bnz	l16214
 23244  0051C2                     l16220:
 23245                           
 23246                           ; BSR set to: 0
 23247                           ;doprnt.c: 1445: if(flag & 0x03)
 23248  0051C2  5192               	movf	sprintf@flag& (0+255),w,b
 23249  0051C4  0B03               	andlw	3
 23250  0051C6  E009               	bz	l1789
 23251                           
 23252                           ; BSR set to: 0
 23253                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23254  0051C8  C076  FFD9         	movff	sprintf@sp,fsr2l
 23255  0051CC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23256  0051D0  0E2D               	movlw	45
 23257  0051D2  6EDF               	movwf	indf2,c
 23258                           
 23259                           ; BSR set to: 0
 23260  0051D4  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23261  0051D6  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23262  0051D8  D008               	goto	l16230
 23263  0051DA                     l1789:
 23264                           
 23265                           ; BSR set to: 0
 23266                           ;doprnt.c: 1450: else if(flag & 0x01)
 23267  0051DA  A192               	btfss	sprintf@flag& (0+255),0,b
 23268  0051DC  D006               	goto	l16230
 23269                           
 23270                           ; BSR set to: 0
 23271                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23272  0051DE  C076  FFD9         	movff	sprintf@sp,fsr2l
 23273  0051E2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23274  0051E6  0E20               	movlw	32
 23275  0051E8  D7F4               	goto	L43
 23276  0051EA                     l16230:
 23277                           
 23278                           ; BSR set to: 0
 23279                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23280  0051EA  0EC0               	movlw	192
 23281  0051EC  D8BE               	call	PL16	;call to abstracted procedure
 23282  0051EE  0E40               	movlw	64
 23283  0051F0  B4D8               	btfsc	status,2,c
 23284  0051F2  197E               	xorwf	??_sprintf& (0+255),w,b
 23285  0051F4  E106               	bnz	l16236
 23286                           
 23287                           ; BSR set to: 0
 23288                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23289  0051F6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23290  0051FA  D905               	call	PL92	;call to abstracted procedure
 23291  0051FC                     l16234:
 23292                           
 23293                           ; BSR set to: 0
 23294  0051FC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23295  0051FE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23296  005200  D086               	goto	l16274
 23297  005202                     l16236:
 23298                           
 23299                           ; BSR set to: 0
 23300                           ;doprnt.c: 1457: else
 23301                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23302  005202  0EC0               	movlw	192
 23303  005204  D8B2               	call	PL16	;call to abstracted procedure
 23304  005206  0E80               	movlw	128
 23305  005208  B4D8               	btfsc	status,2,c
 23306  00520A  197E               	xorwf	??_sprintf& (0+255),w,b
 23307  00520C  E001 D07F          	bnz	l16274
 23308                           
 23309                           ; BSR set to: 0
 23310                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23311  005210  C076  FFD9         	movff	sprintf@sp,fsr2l
 23312  005214  D8F8               	call	PL92	;call to abstracted procedure
 23313                           
 23314                           ; BSR set to: 0
 23315  005216  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23316  005218  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23317                           
 23318                           ; BSR set to: 0
 23319                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23320  00521A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23321  00521C  D003               	goto	l16246
 23322                           
 23323                           ; BSR set to: 0
 23324  00521E  6B85               	clrf	(_sprintf$2129+1)& (0+255),b
 23325  005220  0E78               	movlw	120
 23326  005222  D002               	goto	L44
 23327  005224                     l16246:
 23328                           
 23329                           ; BSR set to: 0
 23330  005224  6B85               	clrf	(_sprintf$2129+1)& (0+255),b
 23331  005226  0E58               	movlw	88
 23332  005228                     L44:
 23333  005228  6F84               	movwf	_sprintf$2129& (0+255),b
 23334                           
 23335                           ; BSR set to: 0
 23336  00522A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23337  00522E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23338  005232  C084  FFDF         	movff	_sprintf$2129,indf2
 23339  005236  D7E2               	goto	l16234
 23340  005238                     l16252:
 23341                           
 23342                           ; BSR set to: 0
 23343                           ;doprnt.c: 1493: case 0xC0:
 23344                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23345  005238  C089  F07E         	movff	sprintf@prec,??_sprintf
 23346  00523C  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23347  005240  90D8               	bcf	status,0,c
 23348  005242  377E               	rlcf	??_sprintf& (0+255),f,b
 23349  005244  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23350  005246  90D8               	bcf	status,0,c
 23351  005248  377E               	rlcf	??_sprintf& (0+255),f,b
 23352  00524A  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23353  00524C  0EF2               	movlw	low _dpowers
 23354  00524E  257E               	addwf	??_sprintf& (0+255),w,b
 23355  005250  6EF6               	movwf	tblptrl,c
 23356  005252  0E6B               	movlw	high _dpowers
 23357  005254  D87B               	call	PL12	;call to abstracted procedure
 23358  005256  C08D  F060         	movff	sprintf@_val,?___lldiv
 23359  00525A  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23360  00525E  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23361  005262  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23362  005266  EC4B  F00C         	call	___lldiv	;wreg free
 23363  00526A  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23364  00526E  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23365  005272  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23366  005276  C060  F06D         	movff	?___lldiv,?___llmod
 23367  00527A  0E0A               	movlw	10
 23368  00527C  6F71               	movwf	(?___llmod+4)& (0+255),b
 23369  00527E  0E00               	movlw	0
 23370  005280  6B72               	clrf	(?___llmod+5)& (0+255),b
 23371  005282  6B73               	clrf	(?___llmod+6)& (0+255),b
 23372  005284  6B74               	clrf	(?___llmod+7)& (0+255),b
 23373  005286  EC43  F00B         	call	___llmod	;wreg free
 23374  00528A  516D               	movf	?___llmod& (0+255),w,b
 23375  00528C  D02D               	goto	L45
 23376  00528E                     l16254:
 23377                           
 23378                           ; BSR set to: 0
 23379                           ;doprnt.c: 1506: {
 23380                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23381  00528E  D875               	call	PL20	;call to abstracted procedure
 23382  005290  0E1A               	movlw	low _hexpowers
 23383  005292  257E               	addwf	??_sprintf& (0+255),w,b
 23384  005294  6EF6               	movwf	tblptrl,c
 23385  005296  0E6C               	movlw	high _hexpowers
 23386  005298  D859               	call	PL12	;call to abstracted procedure
 23387  00529A  EC4B  F00C         	call	___lldiv	;wreg free
 23388  00529E  5160               	movf	?___lldiv& (0+255),w,b
 23389  0052A0  0B0F               	andlw	15
 23390  0052A2  6F81               	movwf	sprintf@idx& (0+255),b
 23391                           
 23392                           ; BSR set to: 0
 23393                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23394  0052A4  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23395  0052A6  D004               	goto	l16260
 23396                           
 23397                           ; BSR set to: 0
 23398  0052A8  0E7A               	movlw	high STR_296
 23399  0052AA  6F87               	movwf	(_sprintf$2135+1)& (0+255),b
 23400  0052AC  0ED6               	movlw	low STR_296
 23401  0052AE  D003               	goto	L46
 23402  0052B0                     l16260:
 23403                           
 23404                           ; BSR set to: 0
 23405  0052B0  0E7A               	movlw	high STR_295
 23406  0052B2  6F87               	movwf	(_sprintf$2135+1)& (0+255),b
 23407  0052B4  0EC5               	movlw	low STR_295
 23408  0052B6                     L46:
 23409  0052B6  6F86               	movwf	_sprintf$2135& (0+255),b
 23410                           
 23411                           ; BSR set to: 0
 23412  0052B8  5181               	movf	sprintf@idx& (0+255),w,b
 23413  0052BA  2586               	addwf	_sprintf$2135& (0+255),w,b
 23414  0052BC  6F7E               	movwf	??_sprintf& (0+255),b
 23415  0052BE  0E00               	movlw	0
 23416  0052C0  2187               	addwfc	(_sprintf$2135+1)& (0+255),w,b
 23417  0052C2  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23418  0052C4  C07E  FFF6         	movff	??_sprintf,tblptrl
 23419  0052C8  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23420  0052CC  0008               	tblrd		*
 23421  0052CE  CFF5 F091          	movff	tablat,sprintf@c
 23422                           
 23423                           ;doprnt.c: 1515: }
 23424                           ;doprnt.c: 1517: break;
 23425  0052D2  D016               	goto	l16270
 23426  0052D4                     l16264:
 23427                           
 23428                           ; BSR set to: 0
 23429                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23430  0052D4  D852               	call	PL20	;call to abstracted procedure
 23431  0052D6  0EC2               	movlw	low _octpowers
 23432  0052D8  257E               	addwf	??_sprintf& (0+255),w,b
 23433  0052DA  6EF6               	movwf	tblptrl,c
 23434  0052DC  0E6B               	movlw	high _octpowers
 23435  0052DE  D836               	call	PL12	;call to abstracted procedure
 23436  0052E0  EC4B  F00C         	call	___lldiv	;wreg free
 23437  0052E4  5160               	movf	?___lldiv& (0+255),w,b
 23438  0052E6  0B07               	andlw	7
 23439  0052E8                     L45:
 23440  0052E8  0F30               	addlw	48
 23441  0052EA  6F91               	movwf	sprintf@c& (0+255),b
 23442                           
 23443                           ;doprnt.c: 1527: break;
 23444  0052EC  D009               	goto	l16270
 23445  0052EE                     l16268:
 23446                           
 23447                           ; BSR set to: 0
 23448  0052EE  5192               	movf	sprintf@flag& (0+255),w,b
 23449  0052F0  0BC0               	andlw	192
 23450                           
 23451                           ; Switch size 1, requested type "space"
 23452                           ; Number of cases is 4, Range of values is 0 to 192
 23453                           ; switch strategies available:
 23454                           ; Name         Instructions Cycles
 23455                           ; simple_byte           13     7 (average)
 23456                           ;	Chosen strategy is simple_byte
 23457  0052F2  E0A2               	bz	l16252
 23458  0052F4  0A40               	xorlw	64	; case 64
 23459  0052F6  E0EE               	bz	l16264
 23460  0052F8  0AC0               	xorlw	192	; case 128
 23461  0052FA  E0C9               	bz	l16254
 23462  0052FC  0A40               	xorlw	64	; case 192
 23463  0052FE  E09C               	bz	l16252
 23464  005300                     l16270:
 23465                           
 23466                           ; BSR set to: 0
 23467                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23468  005300  C076  FFD9         	movff	sprintf@sp,fsr2l
 23469  005304  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23470  005308  C091  FFDF         	movff	sprintf@c,indf2
 23471  00530C  D777               	goto	l16234
 23472  00530E                     l16274:
 23473                           
 23474                           ; BSR set to: 0
 23475  00530E  0789               	decf	sprintf@prec& (0+255),f,b
 23476  005310  A0D8               	btfss	status,0,c
 23477  005312  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23478  005314  0100               	movlb	0	; () banked
 23479  005316  2989               	incf	sprintf@prec& (0+255),w,b
 23480  005318  B4D8               	btfsc	status,2,c
 23481  00531A  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23482  00531C  E1E8               	bnz	l16268
 23483                           
 23484                           ; BSR set to: 0
 23485                           ;doprnt.c: 1532: }
 23486                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23487  00531E  A792               	btfss	sprintf@flag& (0+255),3,b
 23488  005320  D00B               	goto	l16284
 23489                           
 23490                           ; BSR set to: 0
 23491  005322  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23492  005324  0A80               	xorlw	128
 23493  005326  0F80               	addlw	-128
 23494  005328  0E01               	movlw	1
 23495  00532A  B4D8               	btfsc	status,2,c
 23496  00532C  5D8B               	subwf	sprintf@width& (0+255),w,b
 23497  00532E  E304               	bnc	l16284
 23498  005330                     l16278:
 23499                           
 23500                           ; BSR set to: 0
 23501                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23502  005330  C076  FFD9         	movff	sprintf@sp,fsr2l
 23503                           
 23504                           ; BSR set to: 0
 23505                           
 23506                           ; BSR set to: 0
 23507                           ;doprnt.c: 1538: while(--width);
 23508  005334  D835               	call	PL42	;call to abstracted procedure
 23509  005336  E1FC               	bnz	l16278
 23510  005338                     l16284:
 23511                           
 23512                           ; BSR set to: 0
 23513  005338  D84B               	call	PL60	;call to abstracted procedure
 23514  00533A  6791               	tstfsz	sprintf@c& (0+255),b
 23515  00533C  D4D1               	goto	l15950
 23516  00533E                     l16286:
 23517                           
 23518                           ; BSR set to: 0
 23519                           ;doprnt.c: 1545: *sp = 0;
 23520  00533E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23521  005342  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23522  005346  0E00               	movlw	0
 23523  005348  6EDF               	movwf	indf2,c
 23524                           
 23525                           ; BSR set to: 0
 23526  00534A  0C00               	retlw	0
 23527  00534C                     __end_of_sprintf:
 23528                           	opt stack 0
 23529  00534C                     PL12:
 23530                           	opt stack 24
 23531  00534C  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23532  00534E  6EF7               	movwf	tblptrh,c
 23533  005350  0009               	tblrd		*+
 23534  005352  CFF5 F064          	movff	tablat,?___lldiv+4
 23535  005356  0009               	tblrd		*+
 23536  005358  CFF5 F065          	movff	tablat,?___lldiv+5
 23537  00535C  0009               	tblrd		*+
 23538  00535E  CFF5 F066          	movff	tablat,?___lldiv+6
 23539  005362  000A               	tblrd		*-
 23540  005364  CFF5 F067          	movff	tablat,?___lldiv+7
 23541  005368  0012               	return	
 23542  00536A                     __end_ofPL12:
 23543                           	opt stack 0
 23544  00536A                     PL16:
 23545                           	opt stack 24
 23546  00536A  1592               	andwf	sprintf@flag& (0+255),w,b
 23547  00536C  6F7E               	movwf	??_sprintf& (0+255),b
 23548  00536E  0E08               	movlw	8
 23549  005370  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23550  005372  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23551  005374  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23552  005376  0A08               	xorlw	8
 23553  005378  0012               	return	
 23554  00537A                     __end_ofPL16:
 23555                           	opt stack 0
 23556  00537A                     PL20:
 23557                           	opt stack 24
 23558  00537A  C08D  F060         	movff	sprintf@_val,?___lldiv
 23559  00537E  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23560  005382  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23561  005386  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23562  00538A  C089  F07E         	movff	sprintf@prec,??_sprintf
 23563  00538E  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23564  005392  90D8               	bcf	status,0,c
 23565  005394  377E               	rlcf	??_sprintf& (0+255),f,b
 23566  005396  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23567  005398  90D8               	bcf	status,0,c
 23568  00539A  377E               	rlcf	??_sprintf& (0+255),f,b
 23569  00539C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23570  00539E  0012               	return	
 23571  0053A0                     __end_ofPL20:
 23572                           	opt stack 0
 23573  0053A0                     PL42:
 23574                           	opt stack 24
 23575  0053A0  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23576  0053A4  0E20               	movlw	32
 23577  0053A6  6EDF               	movwf	indf2,c
 23578  0053A8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23579  0053AA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23580  0053AC  078B               	decf	sprintf@width& (0+255),f,b
 23581  0053AE  A0D8               	btfss	status,0,c
 23582  0053B0  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23583  0053B2  0100               	movlb	0	; () banked
 23584  0053B4  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23585  0053B6  118B               	iorwf	sprintf@width& (0+255),w,b
 23586  0053B8  0012               	return	
 23587  0053BA                     __end_ofPL42:
 23588                           	opt stack 0
 23589  0053BA                     PL52:
 23590                           	opt stack 24
 23591  0053BA  6ED9               	movwf	fsr2l,c
 23592  0053BC  6ADA               	clrf	fsr2h,c
 23593  0053BE  CFDE F08D          	movff	postinc2,sprintf@_val
 23594  0053C2  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23595  0053C6  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23596  0053CA  CFDE F090          	movff	postinc2,sprintf@_val+3
 23597  0053CE  0C04               	retlw	4
 23598  0053D0                     __end_ofPL52:
 23599                           	opt stack 0
 23600  0053D0                     PL60:
 23601                           	opt stack 24
 23602  0053D0  C078  FFF6         	movff	sprintf@f,tblptrl
 23603  0053D4  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23604  0053D8  4B78               	infsnz	sprintf@f& (0+255),f,b
 23605  0053DA  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23606  0053DC  0008               	tblrd		*
 23607  0053DE  CFF5 F091          	movff	tablat,sprintf@c
 23608  0053E2  0100               	movlb	0	; () banked
 23609  0053E4  0012               	return	
 23610  0053E6                     __end_ofPL60:
 23611                           	opt stack 0
 23612  0053E6                     PL64:
 23613                           	opt stack 24
 23614  0053E6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23615  0053EA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23616  0053EE  0E20               	movlw	32
 23617  0053F0  6EDF               	movwf	indf2,c
 23618  0053F2  0C20               	retlw	32
 23619  0053F4                     __end_ofPL64:
 23620                           	opt stack 0
 23621  0053F4                     PL84:
 23622                           	opt stack 24
 23623  0053F4  4B78               	infsnz	sprintf@f& (0+255),f,b
 23624  0053F6  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23625  0053F8  C078  FFF6         	movff	sprintf@f,tblptrl
 23626  0053FC  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23627  005400  0008               	tblrd		*
 23628  005402  50F5               	movf	tablat,w,c
 23629  005404  0012               	return	
 23630  005406                     __end_ofPL84:
 23631                           	opt stack 0
 23632  005406                     PL92:
 23633                           	opt stack 24
 23634  005406  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23635  00540A  0E30               	movlw	48
 23636  00540C  6EDF               	movwf	indf2,c
 23637  00540E  0C30               	retlw	48
 23638  005410                     __end_ofPL92:
 23639                           	opt stack 0
 23640  005410                     PL110:
 23641                           	opt stack 24
 23642  005410  A0D8               	btfss	status,0,c
 23643  005412  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23644  005414  0100               	movlb	0	; () banked
 23645  005416  298B               	incf	sprintf@width& (0+255),w,b
 23646  005418  0012               	return	
 23647  00541A                     __end_ofPL110:
 23648                           	opt stack 0
 23649                           tblptru	equ	0xFF8
 23650                           tblptrh	equ	0xFF7
 23651                           tblptrl	equ	0xFF6
 23652                           tablat	equ	0xFF5
 23653                           prodh	equ	0xFF4
 23654                           prodl	equ	0xFF3
 23655                           intcon	equ	0xFF2
 23656                           indf0	equ	0xFEF
 23657                           postinc0	equ	0xFEE
 23658                           fsr0h	equ	0xFEA
 23659                           fsr0l	equ	0xFE9
 23660                           wreg	equ	0xFE8
 23661                           indf1	equ	0xFE7
 23662                           postinc1	equ	0xFE6
 23663                           postdec1	equ	0xFE5
 23664                           fsr1h	equ	0xFE2
 23665                           fsr1l	equ	0xFE1
 23666                           indf2	equ	0xFDF
 23667                           postinc2	equ	0xFDE
 23668                           postdec2	equ	0xFDD
 23669                           plusw2	equ	0xFDB
 23670                           fsr2h	equ	0xFDA
 23671                           fsr2l	equ	0xFD9
 23672                           status	equ	0xFD8
 23673                           
 23674 ;; *************** function ___wmul *****************
 23675 ;; Defined at:
 23676 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23677 ;; Parameters:    Size  Location     Type
 23678 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23679 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23680 ;; Auto vars:     Size  Location     Type
 23681 ;;  product         2    4[BANK0 ] unsigned int 
 23682 ;; Return value:  Size  Location     Type
 23683 ;;                  2    0[BANK0 ] unsigned int 
 23684 ;; Registers used:
 23685 ;;		wreg, status,2, status,0, prodl, prodh
 23686 ;; Tracked objects:
 23687 ;;		On entry : F/0
 23688 ;;		On exit  : F/0
 23689 ;;		Unchanged: 0/0
 23690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23691 ;;      Params:         0       4       0       0       0       0       0
 23692 ;;      Locals:         0       2       0       0       0       0       0
 23693 ;;      Temps:          0       0       0       0       0       0       0
 23694 ;;      Totals:         0       6       0       0       0       0       0
 23695 ;;Total ram usage:        6 bytes
 23696 ;; Hardware stack levels used:    1
 23697 ;; Hardware stack levels required when called:    3
 23698 ;; This function calls:
 23699 ;;		Nothing
 23700 ;; This function is called by:
 23701 ;;		_sprintf
 23702 ;;		_atoi
 23703 ;; This function uses a non-reentrant model
 23704 ;;
 23705                           
 23706                           	psect	text55
 23707  0010D4                     __ptext55:
 23708                           	opt stack 0
 23709  0010D4                     ___wmul:
 23710                           	opt stack 24
 23711                           
 23712                           ; BSR set to: 0
 23713                           
 23714                           ; BSR set to: 0
 23715                           ;incstack = 0
 23716                           ;incstack = 0
 23717  0010D4  5160               	movf	___wmul@multiplier& (0+255),w,b
 23718  0010D6  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23719  0010D8  CFF3 F064          	movff	prodl,___wmul@product
 23720  0010DC  CFF4 F065          	movff	prodh,___wmul@product+1
 23721  0010E0  5160               	movf	___wmul@multiplier& (0+255),w,b
 23722  0010E2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23723  0010E4  D808               	call	PL94	;call to abstracted procedure
 23724  0010E6  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23725  0010E8  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23726  0010EA  D805               	call	PL94	;call to abstracted procedure
 23727                           
 23728                           ; BSR set to: 0
 23729  0010EC  C064  F060         	movff	___wmul@product,?___wmul
 23730  0010F0  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23731                           
 23732                           ; BSR set to: 0
 23733  0010F4  0012               	return	
 23734  0010F6                     __end_of___wmul:
 23735                           	opt stack 0
 23736  0010F6                     PL94:
 23737                           	opt stack 24
 23738  0010F6  CFF3 FFF4          	movff	prodl,prodh
 23739  0010FA  6AF3               	clrf	prodl,c
 23740  0010FC  50F3               	movf	prodl,w,c
 23741  0010FE  2764               	addwf	___wmul@product& (0+255),f,b
 23742  001100  50F4               	movf	prodh,w,c
 23743  001102  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23744  001104  0012               	return	
 23745  001106                     __end_ofPL94:
 23746                           	opt stack 0
 23747                           tblptru	equ	0xFF8
 23748                           tblptrh	equ	0xFF7
 23749                           tblptrl	equ	0xFF6
 23750                           tablat	equ	0xFF5
 23751                           prodh	equ	0xFF4
 23752                           prodl	equ	0xFF3
 23753                           intcon	equ	0xFF2
 23754                           indf0	equ	0xFEF
 23755                           postinc0	equ	0xFEE
 23756                           fsr0h	equ	0xFEA
 23757                           fsr0l	equ	0xFE9
 23758                           wreg	equ	0xFE8
 23759                           indf1	equ	0xFE7
 23760                           postinc1	equ	0xFE6
 23761                           postdec1	equ	0xFE5
 23762                           fsr1h	equ	0xFE2
 23763                           fsr1l	equ	0xFE1
 23764                           indf2	equ	0xFDF
 23765                           postinc2	equ	0xFDE
 23766                           postdec2	equ	0xFDD
 23767                           plusw2	equ	0xFDB
 23768                           fsr2h	equ	0xFDA
 23769                           fsr2l	equ	0xFD9
 23770                           status	equ	0xFD8
 23771                           
 23772 ;; *************** function ___llmod *****************
 23773 ;; Defined at:
 23774 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23775 ;; Parameters:    Size  Location     Type
 23776 ;;  dividend        4   13[BANK0 ] unsigned long 
 23777 ;;  divisor         4   17[BANK0 ] unsigned long 
 23778 ;; Auto vars:     Size  Location     Type
 23779 ;;  counter         1   21[BANK0 ] unsigned char 
 23780 ;; Return value:  Size  Location     Type
 23781 ;;                  4   13[BANK0 ] unsigned long 
 23782 ;; Registers used:
 23783 ;;		wreg, status,2, status,0
 23784 ;; Tracked objects:
 23785 ;;		On entry : F/0
 23786 ;;		On exit  : F/0
 23787 ;;		Unchanged: 0/0
 23788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23789 ;;      Params:         0       8       0       0       0       0       0
 23790 ;;      Locals:         0       1       0       0       0       0       0
 23791 ;;      Temps:          0       0       0       0       0       0       0
 23792 ;;      Totals:         0       9       0       0       0       0       0
 23793 ;;Total ram usage:        9 bytes
 23794 ;; Hardware stack levels used:    1
 23795 ;; Hardware stack levels required when called:    3
 23796 ;; This function calls:
 23797 ;;		Nothing
 23798 ;; This function is called by:
 23799 ;;		_sprintf
 23800 ;;		_ultoa
 23801 ;; This function uses a non-reentrant model
 23802 ;;
 23803                           
 23804                           	psect	text56
 23805  001686                     __ptext56:
 23806                           	opt stack 0
 23807  001686                     ___llmod:
 23808                           	opt stack 23
 23809                           
 23810                           ; BSR set to: 0
 23811                           
 23812                           ; BSR set to: 0
 23813                           ;incstack = 0
 23814                           ;incstack = 0
 23815  001686  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23816  001688  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23817  00168A  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23818  00168C  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23819  00168E  E023               	bz	l2437
 23820                           
 23821                           ; BSR set to: 0
 23822  001690  0E01               	movlw	1
 23823  001692  6F75               	movwf	___llmod@counter& (0+255),b
 23824  001694  D006               	goto	l17124
 23825  001696                     l17122:
 23826                           
 23827                           ; BSR set to: 0
 23828  001696  90D8               	bcf	status,0,c
 23829  001698  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23830  00169A  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23831  00169C  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23832  00169E  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23833  0016A0  2B75               	incf	___llmod@counter& (0+255),f,b
 23834  0016A2                     l17124:
 23835                           
 23836                           ; BSR set to: 0
 23837  0016A2  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23838  0016A4  D7F8               	goto	l17122
 23839  0016A6                     l17126:
 23840                           
 23841                           ; BSR set to: 0
 23842  0016A6  5171               	movf	___llmod@divisor& (0+255),w,b
 23843  0016A8  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23844  0016AA  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23845  0016AC  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23846  0016AE  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23847  0016B0  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23848  0016B2  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23849  0016B4  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23850  0016B6  E308               	bnc	l17130
 23851                           
 23852                           ; BSR set to: 0
 23853  0016B8  5171               	movf	___llmod@divisor& (0+255),w,b
 23854  0016BA  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23855  0016BC  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23856  0016BE  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23857  0016C0  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23858  0016C2  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23859  0016C4  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23860  0016C6  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23861  0016C8                     l17130:
 23862                           
 23863                           ; BSR set to: 0
 23864  0016C8  90D8               	bcf	status,0,c
 23865  0016CA  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23866  0016CC  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23867  0016CE  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23868  0016D0  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23869                           
 23870                           ; BSR set to: 0
 23871  0016D2  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23872  0016D4  D7E8               	goto	l17126
 23873  0016D6                     l2437:
 23874                           
 23875                           ; BSR set to: 0
 23876  0016D6  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23877  0016DA  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23878  0016DE  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23879  0016E2  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23880                           
 23881                           ; BSR set to: 0
 23882  0016E6  0012               	return	
 23883  0016E8                     __end_of___llmod:
 23884                           	opt stack 0
 23885                           tblptru	equ	0xFF8
 23886                           tblptrh	equ	0xFF7
 23887                           tblptrl	equ	0xFF6
 23888                           tablat	equ	0xFF5
 23889                           prodh	equ	0xFF4
 23890                           prodl	equ	0xFF3
 23891                           intcon	equ	0xFF2
 23892                           indf0	equ	0xFEF
 23893                           postinc0	equ	0xFEE
 23894                           fsr0h	equ	0xFEA
 23895                           fsr0l	equ	0xFE9
 23896                           wreg	equ	0xFE8
 23897                           indf1	equ	0xFE7
 23898                           postinc1	equ	0xFE6
 23899                           postdec1	equ	0xFE5
 23900                           fsr1h	equ	0xFE2
 23901                           fsr1l	equ	0xFE1
 23902                           indf2	equ	0xFDF
 23903                           postinc2	equ	0xFDE
 23904                           postdec2	equ	0xFDD
 23905                           plusw2	equ	0xFDB
 23906                           fsr2h	equ	0xFDA
 23907                           fsr2l	equ	0xFD9
 23908                           status	equ	0xFD8
 23909                           
 23910 ;; *************** function ___lldiv *****************
 23911 ;; Defined at:
 23912 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23913 ;; Parameters:    Size  Location     Type
 23914 ;;  dividend        4    0[BANK0 ] unsigned long 
 23915 ;;  divisor         4    4[BANK0 ] unsigned long 
 23916 ;; Auto vars:     Size  Location     Type
 23917 ;;  quotient        4    9[BANK0 ] unsigned long 
 23918 ;;  counter         1    8[BANK0 ] unsigned char 
 23919 ;; Return value:  Size  Location     Type
 23920 ;;                  4    0[BANK0 ] unsigned long 
 23921 ;; Registers used:
 23922 ;;		wreg, status,2, status,0
 23923 ;; Tracked objects:
 23924 ;;		On entry : F/0
 23925 ;;		On exit  : F/0
 23926 ;;		Unchanged: 0/0
 23927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23928 ;;      Params:         0       8       0       0       0       0       0
 23929 ;;      Locals:         0       5       0       0       0       0       0
 23930 ;;      Temps:          0       0       0       0       0       0       0
 23931 ;;      Totals:         0      13       0       0       0       0       0
 23932 ;;Total ram usage:       13 bytes
 23933 ;; Hardware stack levels used:    1
 23934 ;; Hardware stack levels required when called:    3
 23935 ;; This function calls:
 23936 ;;		Nothing
 23937 ;; This function is called by:
 23938 ;;		_sprintf
 23939 ;;		_ultoa
 23940 ;; This function uses a non-reentrant model
 23941 ;;
 23942                           
 23943                           	psect	text57
 23944  001896                     __ptext57:
 23945                           	opt stack 0
 23946  001896                     ___lldiv:
 23947                           	opt stack 23
 23948                           
 23949                           ; BSR set to: 0
 23950                           
 23951                           ; BSR set to: 0
 23952                           ;incstack = 0
 23953                           ;incstack = 0
 23954  001896  6B69               	clrf	___lldiv@quotient& (0+255),b
 23955  001898  6B6A               	clrf	(___lldiv@quotient+1)& (0+255),b
 23956  00189A  6B6B               	clrf	(___lldiv@quotient+2)& (0+255),b
 23957  00189C  6B6C               	clrf	(___lldiv@quotient+3)& (0+255),b
 23958                           
 23959                           ; BSR set to: 0
 23960  00189E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23961  0018A0  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23962  0018A2  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23963  0018A4  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23964  0018A6  E029               	bz	l2427
 23965                           
 23966                           ; BSR set to: 0
 23967  0018A8  0E01               	movlw	1
 23968  0018AA  6F68               	movwf	___lldiv@counter& (0+255),b
 23969  0018AC  D006               	goto	l17104
 23970  0018AE                     l17102:
 23971                           
 23972                           ; BSR set to: 0
 23973  0018AE  90D8               	bcf	status,0,c
 23974  0018B0  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23975  0018B2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23976  0018B4  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23977  0018B6  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23978  0018B8  2B68               	incf	___lldiv@counter& (0+255),f,b
 23979  0018BA                     l17104:
 23980                           
 23981                           ; BSR set to: 0
 23982  0018BA  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23983  0018BC  D7F8               	goto	l17102
 23984  0018BE                     l17106:
 23985                           
 23986                           ; BSR set to: 0
 23987  0018BE  90D8               	bcf	status,0,c
 23988  0018C0  3769               	rlcf	___lldiv@quotient& (0+255),f,b
 23989  0018C2  376A               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23990  0018C4  376B               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23991  0018C6  376C               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23992                           
 23993                           ; BSR set to: 0
 23994  0018C8  5164               	movf	___lldiv@divisor& (0+255),w,b
 23995  0018CA  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23996  0018CC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23997  0018CE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23998  0018D0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23999  0018D2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 24000  0018D4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24001  0018D6  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 24002  0018D8  E309               	bnc	l17114
 24003                           
 24004                           ; BSR set to: 0
 24005  0018DA  5164               	movf	___lldiv@divisor& (0+255),w,b
 24006  0018DC  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 24007  0018DE  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24008  0018E0  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 24009  0018E2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24010  0018E4  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 24011  0018E6  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24012  0018E8  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 24013                           
 24014                           ; BSR set to: 0
 24015  0018EA  8169               	bsf	___lldiv@quotient& (0+255),0,b
 24016  0018EC                     l17114:
 24017                           
 24018                           ; BSR set to: 0
 24019  0018EC  90D8               	bcf	status,0,c
 24020  0018EE  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 24021  0018F0  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 24022  0018F2  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 24023  0018F4  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 24024                           
 24025                           ; BSR set to: 0
 24026  0018F6  2F68               	decfsz	___lldiv@counter& (0+255),f,b
 24027  0018F8  D7E2               	goto	l17106
 24028  0018FA                     l2427:
 24029                           
 24030                           ; BSR set to: 0
 24031  0018FA  C069  F060         	movff	___lldiv@quotient,?___lldiv
 24032  0018FE  C06A  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 24033  001902  C06B  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 24034  001906  C06C  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 24035                           
 24036                           ; BSR set to: 0
 24037  00190A  0012               	return	
 24038  00190C                     __end_of___lldiv:
 24039                           	opt stack 0
 24040                           tblptru	equ	0xFF8
 24041                           tblptrh	equ	0xFF7
 24042                           tblptrl	equ	0xFF6
 24043                           tablat	equ	0xFF5
 24044                           prodh	equ	0xFF4
 24045                           prodl	equ	0xFF3
 24046                           intcon	equ	0xFF2
 24047                           indf0	equ	0xFEF
 24048                           postinc0	equ	0xFEE
 24049                           fsr0h	equ	0xFEA
 24050                           fsr0l	equ	0xFE9
 24051                           wreg	equ	0xFE8
 24052                           indf1	equ	0xFE7
 24053                           postinc1	equ	0xFE6
 24054                           postdec1	equ	0xFE5
 24055                           fsr1h	equ	0xFE2
 24056                           fsr1l	equ	0xFE1
 24057                           indf2	equ	0xFDF
 24058                           postinc2	equ	0xFDE
 24059                           postdec2	equ	0xFDD
 24060                           plusw2	equ	0xFDB
 24061                           fsr2h	equ	0xFDA
 24062                           fsr2l	equ	0xFD9
 24063                           status	equ	0xFD8
 24064                           
 24065 ;; *************** function _isdigit *****************
 24066 ;; Defined at:
 24067 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 24068 ;; Parameters:    Size  Location     Type
 24069 ;;  c               1    wreg     unsigned char 
 24070 ;; Auto vars:     Size  Location     Type
 24071 ;;  c               1    2[BANK0 ] unsigned char 
 24072 ;; Return value:  Size  Location     Type
 24073 ;;		None               void
 24074 ;; Registers used:
 24075 ;;		wreg, status,2, status,0
 24076 ;; Tracked objects:
 24077 ;;		On entry : 0/0
 24078 ;;		On exit  : F/0
 24079 ;;		Unchanged: 0/0
 24080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24081 ;;      Params:         0       0       0       0       0       0       0
 24082 ;;      Locals:         0       2       0       0       0       0       0
 24083 ;;      Temps:          0       1       0       0       0       0       0
 24084 ;;      Totals:         0       3       0       0       0       0       0
 24085 ;;Total ram usage:        3 bytes
 24086 ;; Hardware stack levels used:    1
 24087 ;; Hardware stack levels required when called:    3
 24088 ;; This function calls:
 24089 ;;		Nothing
 24090 ;; This function is called by:
 24091 ;;		_sprintf
 24092 ;;		_atoi
 24093 ;; This function uses a non-reentrant model
 24094 ;;
 24095                           
 24096                           	psect	text58
 24097  00102A                     __ptext58:
 24098                           	opt stack 0
 24099  00102A                     _isdigit:
 24100                           	opt stack 24
 24101                           
 24102                           ; BSR set to: 0
 24103                           ;incstack = 0
 24104                           ;incstack = 0
 24105                           ;isdigit@c stored from wreg
 24106  00102A  CFE8 F062          	movff	wreg,isdigit@c
 24107  00102E  0100               	movlb	0	; () banked
 24108  001030  6B61               	clrf	_isdigit$2983& (0+255),b
 24109                           
 24110                           ; BSR set to: 0
 24111  001032  0E3A               	movlw	58
 24112  001034  6162               	cpfslt	isdigit@c& (0+255),b
 24113  001036  D005               	goto	l13666
 24114                           
 24115                           ; BSR set to: 0
 24116  001038  0E2F               	movlw	47
 24117  00103A  6562               	cpfsgt	isdigit@c& (0+255),b
 24118  00103C  D002               	goto	l13666
 24119                           
 24120                           ; BSR set to: 0
 24121  00103E  0E01               	movlw	1
 24122  001040  6F61               	movwf	_isdigit$2983& (0+255),b
 24123  001042                     l13666:
 24124                           
 24125                           ; BSR set to: 0
 24126  001042  C061  F060         	movff	_isdigit$2983,??_isdigit
 24127  001046  3160               	rrcf	??_isdigit& (0+255),w,b
 24128                           
 24129                           ; BSR set to: 0
 24130  001048  0012               	return	
 24131  00104A                     __end_of_isdigit:
 24132                           	opt stack 0
 24133                           tblptru	equ	0xFF8
 24134                           tblptrh	equ	0xFF7
 24135                           tblptrl	equ	0xFF6
 24136                           tablat	equ	0xFF5
 24137                           prodh	equ	0xFF4
 24138                           prodl	equ	0xFF3
 24139                           intcon	equ	0xFF2
 24140                           indf0	equ	0xFEF
 24141                           postinc0	equ	0xFEE
 24142                           fsr0h	equ	0xFEA
 24143                           fsr0l	equ	0xFE9
 24144                           wreg	equ	0xFE8
 24145                           indf1	equ	0xFE7
 24146                           postinc1	equ	0xFE6
 24147                           postdec1	equ	0xFE5
 24148                           fsr1h	equ	0xFE2
 24149                           fsr1l	equ	0xFE1
 24150                           indf2	equ	0xFDF
 24151                           postinc2	equ	0xFDE
 24152                           postdec2	equ	0xFDD
 24153                           plusw2	equ	0xFDB
 24154                           fsr2h	equ	0xFDA
 24155                           fsr2l	equ	0xFD9
 24156                           status	equ	0xFD8
 24157                           
 24158 ;; *************** function _printFirmwareVersion *****************
 24159 ;; Defined at:
 24160 ;;		line 2961 in file "main.c"
 24161 ;; Parameters:    Size  Location     Type
 24162 ;;		None
 24163 ;; Auto vars:     Size  Location     Type
 24164 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 24165 ;; Return value:  Size  Location     Type
 24166 ;;		None               void
 24167 ;; Registers used:
 24168 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24169 ;; Tracked objects:
 24170 ;;		On entry : 0/0
 24171 ;;		On exit  : 0/0
 24172 ;;		Unchanged: 0/0
 24173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24174 ;;      Params:         0       0       0       0       0       0       0
 24175 ;;      Locals:         0      20       0       0       0       0       0
 24176 ;;      Temps:          0       0       0       0       0       0       0
 24177 ;;      Totals:         0      20       0       0       0       0       0
 24178 ;;Total ram usage:       20 bytes
 24179 ;; Hardware stack levels used:    1
 24180 ;; Hardware stack levels required when called:    6
 24181 ;; This function calls:
 24182 ;;		_putsUSART
 24183 ;;		_WriteUSART
 24184 ;;		_itoa
 24185 ;; This function is called by:
 24186 ;;		_main
 24187 ;;		_doModeVerbose
 24188 ;; This function uses a non-reentrant model
 24189 ;;
 24190                           
 24191                           	psect	text59
 24192  001B0C                     __ptext59:
 24193                           	opt stack 0
 24194  001B0C                     _printFirmwareVersion:
 24195                           	opt stack 22
 24196                           
 24197                           ;main.c: 2962: char wrkbuf[20];
 24198                           ;main.c: 2963: putsUSART((char *) "Version: ");
 24199                           
 24200                           ; BSR set to: 0
 24201                           ;incstack = 0
 24202                           ;incstack = 0
 24203  001B0C  0E7B               	movlw	high STR_286
 24204  001B0E  0100               	movlb	0	; () banked
 24205  001B10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24206  001B12  0E71               	movlw	low STR_286
 24207  001B14  6F61               	movwf	?_putsUSART& (0+255),b
 24208  001B16  EC8D  F00A         	call	_putsUSART	;wreg free
 24209                           
 24210                           ;main.c: 2964: itoa(wrkbuf, 1, 10);
 24211  001B1A  0100               	movlb	0	; () banked
 24212  001B1C  D835               	call	PL58	;call to abstracted procedure
 24213  001B1E  EC9D  F008         	call	_itoa	;wreg free
 24214                           
 24215                           ; BSR set to: 0
 24216                           ;main.c: 2965: putsUSART(wrkbuf);
 24217  001B22  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24218  001B24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24219  001B26  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24220  001B28  6F61               	movwf	?_putsUSART& (0+255),b
 24221  001B2A  EC8D  F00A         	call	_putsUSART	;wreg free
 24222  001B2E                     l1289:
 24223  001B2E  A2AC               	btfss	4012,1,c	;volatile
 24224  001B30  D7FE               	goto	l1289
 24225                           
 24226                           ;main.c: 2967: WriteUSART('.');
 24227  001B32  0E2E               	movlw	46
 24228  001B34  ECD5  F007         	call	_WriteUSART
 24229                           
 24230                           ;main.c: 2968: itoa(wrkbuf, 1, 10);
 24231  001B38  0100               	movlb	0	; () banked
 24232  001B3A  D826               	call	PL58	;call to abstracted procedure
 24233  001B3C  EC9D  F008         	call	_itoa	;wreg free
 24234                           
 24235                           ; BSR set to: 0
 24236                           ;main.c: 2969: putsUSART(wrkbuf);
 24237  001B40  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24238  001B42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24239  001B44  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24240  001B46  6F61               	movwf	?_putsUSART& (0+255),b
 24241  001B48  EC8D  F00A         	call	_putsUSART	;wreg free
 24242  001B4C                     l1292:
 24243  001B4C  A2AC               	btfss	4012,1,c	;volatile
 24244  001B4E  D7FE               	goto	l1292
 24245                           
 24246                           ;main.c: 2971: WriteUSART('.');
 24247  001B50  0E2E               	movlw	46
 24248  001B52  ECD5  F007         	call	_WriteUSART
 24249                           
 24250                           ;main.c: 2972: itoa(wrkbuf, 0, 10);
 24251  001B56  0100               	movlb	0	; () banked
 24252  001B58  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24253  001B5A  6F71               	movwf	(?_itoa+1)& (0+255),b
 24254  001B5C  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24255  001B5E  6F70               	movwf	?_itoa& (0+255),b
 24256  001B60  6B73               	clrf	(?_itoa+3)& (0+255),b
 24257  001B62  6B72               	clrf	(?_itoa+2)& (0+255),b
 24258  001B64  6B75               	clrf	(?_itoa+5)& (0+255),b
 24259  001B66  0E0A               	movlw	10
 24260  001B68  6F74               	movwf	(?_itoa+4)& (0+255),b
 24261  001B6A  EC9D  F008         	call	_itoa	;wreg free
 24262                           
 24263                           ; BSR set to: 0
 24264                           ;main.c: 2973: putsUSART(wrkbuf);
 24265  001B6E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24266  001B70  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24267  001B72  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24268  001B74  6F61               	movwf	?_putsUSART& (0+255),b
 24269  001B76  EC8D  F00A         	call	_putsUSART	;wreg free
 24270                           
 24271                           ;main.c: 2974: putsUSART((char *) "\r\n");
 24272  001B7A  0E70               	movlw	high (STR_227+50)
 24273  001B7C  0100               	movlb	0	; () banked
 24274  001B7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24275  001B80  0EE0               	movlw	low (STR_227+50)
 24276  001B82  6F61               	movwf	?_putsUSART& (0+255),b
 24277  001B84  EF8D  F00A         	goto	_putsUSART	;wreg free
 24278  001B88                     __end_of_printFirmwareVersion:
 24279                           	opt stack 0
 24280  001B88                     PL58:
 24281                           	opt stack 22
 24282  001B88  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24283  001B8A  6F71               	movwf	(?_itoa+1)& (0+255),b
 24284  001B8C  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24285  001B8E  6F70               	movwf	?_itoa& (0+255),b
 24286  001B90  6B73               	clrf	(?_itoa+3)& (0+255),b
 24287  001B92  0E01               	movlw	1
 24288  001B94  6F72               	movwf	(?_itoa+2)& (0+255),b
 24289  001B96  6B75               	clrf	(?_itoa+5)& (0+255),b
 24290  001B98  0E0A               	movlw	10
 24291  001B9A  6F74               	movwf	(?_itoa+4)& (0+255),b
 24292  001B9C  0C0A               	retlw	10
 24293  001B9E                     __end_ofPL58:
 24294                           	opt stack 0
 24295                           tblptru	equ	0xFF8
 24296                           tblptrh	equ	0xFF7
 24297                           tblptrl	equ	0xFF6
 24298                           tablat	equ	0xFF5
 24299                           prodh	equ	0xFF4
 24300                           prodl	equ	0xFF3
 24301                           intcon	equ	0xFF2
 24302                           indf0	equ	0xFEF
 24303                           postinc0	equ	0xFEE
 24304                           fsr0h	equ	0xFEA
 24305                           fsr0l	equ	0xFE9
 24306                           wreg	equ	0xFE8
 24307                           indf1	equ	0xFE7
 24308                           postinc1	equ	0xFE6
 24309                           postdec1	equ	0xFE5
 24310                           fsr1h	equ	0xFE2
 24311                           fsr1l	equ	0xFE1
 24312                           indf2	equ	0xFDF
 24313                           postinc2	equ	0xFDE
 24314                           postdec2	equ	0xFDD
 24315                           plusw2	equ	0xFDB
 24316                           fsr2h	equ	0xFDA
 24317                           fsr2l	equ	0xFD9
 24318                           status	equ	0xFD8
 24319                           
 24320 ;; *************** function _itoa *****************
 24321 ;; Defined at:
 24322 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24323 ;; Parameters:    Size  Location     Type
 24324 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24325 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24326 ;;  val             2   18[BANK0 ] int 
 24327 ;;  base            2   20[BANK0 ] int 
 24328 ;; Auto vars:     Size  Location     Type
 24329 ;;  cp              2    0        PTR unsigned char 
 24330 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24331 ;; Return value:  Size  Location     Type
 24332 ;;                  2   16[BANK0 ] PTR unsigned char 
 24333 ;; Registers used:
 24334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24335 ;; Tracked objects:
 24336 ;;		On entry : F/0
 24337 ;;		On exit  : F/0
 24338 ;;		Unchanged: 0/0
 24339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24340 ;;      Params:         0       6       0       0       0       0       0
 24341 ;;      Locals:         0       2       0       0       0       0       0
 24342 ;;      Temps:          0       0       0       0       0       0       0
 24343 ;;      Totals:         0       8       0       0       0       0       0
 24344 ;;Total ram usage:        8 bytes
 24345 ;; Hardware stack levels used:    1
 24346 ;; Hardware stack levels required when called:    5
 24347 ;; This function calls:
 24348 ;;		_utoa
 24349 ;; This function is called by:
 24350 ;;		_receiveSendEventSLCAN
 24351 ;;		_findNodes
 24352 ;;		_printGUID
 24353 ;;		_printNodeFirmwareVersion
 24354 ;;		_printFirmwareVersion
 24355 ;; This function uses a non-reentrant model
 24356 ;;
 24357                           
 24358                           	psect	text60
 24359  00113A                     __ptext60:
 24360                           	opt stack 0
 24361  00113A                     _itoa:
 24362                           	opt stack 22
 24363                           
 24364                           ; BSR set to: 0
 24365                           
 24366                           ;incstack = 0
 24367                           ;incstack = 0
 24368  00113A  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24369  00113C  D00C               	goto	l16992
 24370                           
 24371                           ; BSR set to: 0
 24372  00113E  C070  FFD9         	movff	itoa@buf,fsr2l
 24373  001142  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24374  001146  0E2D               	movlw	45
 24375  001148  6EDF               	movwf	indf2,c
 24376                           
 24377                           ; BSR set to: 0
 24378  00114A  4B70               	infsnz	itoa@buf& (0+255),f,b
 24379  00114C  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24380                           
 24381                           ; BSR set to: 0
 24382  00114E  6D72               	negf	itoa@val& (0+255),b
 24383  001150  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24384  001152  B0D8               	btfsc	status,0,c
 24385  001154  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24386  001156                     l16992:
 24387                           
 24388                           ; BSR set to: 0
 24389  001156  C070  F067         	movff	itoa@buf,?_utoa
 24390  00115A  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24391  00115E  C072  F069         	movff	itoa@val,?_utoa+2
 24392  001162  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24393  001166  C074  F06B         	movff	itoa@base,?_utoa+4
 24394  00116A  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24395  00116E  EFAF  F00E         	goto	_utoa	;wreg free
 24396  001172                     __end_of_itoa:
 24397                           	opt stack 0
 24398                           tblptru	equ	0xFF8
 24399                           tblptrh	equ	0xFF7
 24400                           tblptrl	equ	0xFF6
 24401                           tablat	equ	0xFF5
 24402                           prodh	equ	0xFF4
 24403                           prodl	equ	0xFF3
 24404                           intcon	equ	0xFF2
 24405                           indf0	equ	0xFEF
 24406                           postinc0	equ	0xFEE
 24407                           fsr0h	equ	0xFEA
 24408                           fsr0l	equ	0xFE9
 24409                           wreg	equ	0xFE8
 24410                           indf1	equ	0xFE7
 24411                           postinc1	equ	0xFE6
 24412                           postdec1	equ	0xFE5
 24413                           fsr1h	equ	0xFE2
 24414                           fsr1l	equ	0xFE1
 24415                           indf2	equ	0xFDF
 24416                           postinc2	equ	0xFDE
 24417                           postdec2	equ	0xFDD
 24418                           plusw2	equ	0xFDB
 24419                           fsr2h	equ	0xFDA
 24420                           fsr2l	equ	0xFD9
 24421                           status	equ	0xFD8
 24422                           
 24423 ;; *************** function _utoa *****************
 24424 ;; Defined at:
 24425 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24426 ;; Parameters:    Size  Location     Type
 24427 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24428 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24429 ;;  val             2    9[BANK0 ] unsigned int 
 24430 ;;  base            2   11[BANK0 ] int 
 24431 ;; Auto vars:     Size  Location     Type
 24432 ;;  v               2   13[BANK0 ] unsigned int 
 24433 ;;  c               1   15[BANK0 ] unsigned char 
 24434 ;; Return value:  Size  Location     Type
 24435 ;;                  2    7[BANK0 ] PTR unsigned char 
 24436 ;; Registers used:
 24437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24438 ;; Tracked objects:
 24439 ;;		On entry : F/0
 24440 ;;		On exit  : F/0
 24441 ;;		Unchanged: 0/0
 24442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24443 ;;      Params:         0       6       0       0       0       0       0
 24444 ;;      Locals:         0       3       0       0       0       0       0
 24445 ;;      Temps:          0       0       0       0       0       0       0
 24446 ;;      Totals:         0       9       0       0       0       0       0
 24447 ;;Total ram usage:        9 bytes
 24448 ;; Hardware stack levels used:    1
 24449 ;; Hardware stack levels required when called:    4
 24450 ;; This function calls:
 24451 ;;		___lwdiv
 24452 ;;		___lwmod
 24453 ;; This function is called by:
 24454 ;;		_itoa
 24455 ;; This function uses a non-reentrant model
 24456 ;;
 24457                           
 24458                           	psect	text61
 24459  001D5E                     __ptext61:
 24460                           	opt stack 0
 24461  001D5E                     _utoa:
 24462                           	opt stack 22
 24463                           
 24464                           ; BSR set to: 0
 24465                           
 24466                           ; BSR set to: 0
 24467                           ;incstack = 0
 24468                           ;incstack = 0
 24469  001D5E  C069  F06D         	movff	utoa@val,utoa@v
 24470  001D62  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24471  001D66                     l17068:
 24472                           
 24473                           ; BSR set to: 0
 24474  001D66  C06D  F060         	movff	utoa@v,?___lwdiv
 24475  001D6A  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24476  001D6E  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24477  001D72  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24478  001D76  EC18  F00A         	call	___lwdiv	;wreg free
 24479  001D7A  C060  F06D         	movff	?___lwdiv,utoa@v
 24480  001D7E  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24481                           
 24482                           ; BSR set to: 0
 24483  001D82  4B67               	infsnz	utoa@buf& (0+255),f,b
 24484  001D84  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24485                           
 24486                           ; BSR set to: 0
 24487  001D86  516E               	movf	(utoa@v+1)& (0+255),w,b
 24488  001D88  116D               	iorwf	utoa@v& (0+255),w,b
 24489  001D8A  E1ED               	bnz	l17068
 24490                           
 24491                           ; BSR set to: 0
 24492  001D8C  C067  FFD9         	movff	utoa@buf,fsr2l
 24493  001D90  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24494  001D94  0E00               	movlw	0
 24495  001D96  6ADF               	clrf	indf2,c
 24496                           
 24497                           ; BSR set to: 0
 24498  001D98  0767               	decf	utoa@buf& (0+255),f,b
 24499  001D9A  A0D8               	btfss	status,0,c
 24500  001D9C  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24501  001D9E                     l17078:
 24502                           
 24503                           ; BSR set to: 0
 24504  001D9E  C069  F060         	movff	utoa@val,?___lwmod
 24505  001DA2  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24506  001DA6  C06B  F062         	movff	utoa@base,?___lwmod+2
 24507  001DAA  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24508  001DAE  ECF2  F008         	call	___lwmod	;wreg free
 24509  001DB2  5160               	movf	?___lwmod& (0+255),w,b
 24510  001DB4  6F6F               	movwf	utoa@c& (0+255),b
 24511                           
 24512                           ; BSR set to: 0
 24513  001DB6  C069  F060         	movff	utoa@val,?___lwdiv
 24514  001DBA  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24515  001DBE  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24516  001DC2  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24517  001DC6  EC18  F00A         	call	___lwdiv	;wreg free
 24518  001DCA  C060  F069         	movff	?___lwdiv,utoa@val
 24519  001DCE  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24520                           
 24521                           ; BSR set to: 0
 24522  001DD2  0E09               	movlw	9
 24523  001DD4  656F               	cpfsgt	utoa@c& (0+255),b
 24524  001DD6  D002               	goto	l2396
 24525                           
 24526                           ; BSR set to: 0
 24527  001DD8  0E07               	movlw	7
 24528  001DDA  276F               	addwf	utoa@c& (0+255),f,b
 24529  001DDC                     l2396:
 24530                           
 24531                           ; BSR set to: 0
 24532  001DDC  0E30               	movlw	48
 24533  001DDE  276F               	addwf	utoa@c& (0+255),f,b
 24534                           
 24535                           ; BSR set to: 0
 24536  001DE0  C067  FFD9         	movff	utoa@buf,fsr2l
 24537  001DE4  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24538  001DE8  C06F  FFDF         	movff	utoa@c,indf2
 24539                           
 24540                           ; BSR set to: 0
 24541  001DEC  0767               	decf	utoa@buf& (0+255),f,b
 24542  001DEE  A0D8               	btfss	status,0,c
 24543  001DF0  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24544                           
 24545                           ; BSR set to: 0
 24546  001DF2  516A               	movf	(utoa@val+1)& (0+255),w,b
 24547  001DF4  1169               	iorwf	utoa@val& (0+255),w,b
 24548  001DF6  E1D3               	bnz	l17078
 24549                           
 24550                           ; BSR set to: 0
 24551                           ;	Return value of _utoa is never used
 24552  001DF8  4B67               	infsnz	utoa@buf& (0+255),f,b
 24553  001DFA  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24554                           
 24555                           ; BSR set to: 0
 24556  001DFC  0012               	return	
 24557  001DFE                     __end_of_utoa:
 24558                           	opt stack 0
 24559                           tblptru	equ	0xFF8
 24560                           tblptrh	equ	0xFF7
 24561                           tblptrl	equ	0xFF6
 24562                           tablat	equ	0xFF5
 24563                           prodh	equ	0xFF4
 24564                           prodl	equ	0xFF3
 24565                           intcon	equ	0xFF2
 24566                           indf0	equ	0xFEF
 24567                           postinc0	equ	0xFEE
 24568                           fsr0h	equ	0xFEA
 24569                           fsr0l	equ	0xFE9
 24570                           wreg	equ	0xFE8
 24571                           indf1	equ	0xFE7
 24572                           postinc1	equ	0xFE6
 24573                           postdec1	equ	0xFE5
 24574                           fsr1h	equ	0xFE2
 24575                           fsr1l	equ	0xFE1
 24576                           indf2	equ	0xFDF
 24577                           postinc2	equ	0xFDE
 24578                           postdec2	equ	0xFDD
 24579                           plusw2	equ	0xFDB
 24580                           fsr2h	equ	0xFDA
 24581                           fsr2l	equ	0xFD9
 24582                           status	equ	0xFD8
 24583                           
 24584 ;; *************** function ___lwmod *****************
 24585 ;; Defined at:
 24586 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24587 ;; Parameters:    Size  Location     Type
 24588 ;;  dividend        2    0[BANK0 ] unsigned int 
 24589 ;;  divisor         2    2[BANK0 ] unsigned int 
 24590 ;; Auto vars:     Size  Location     Type
 24591 ;;  counter         1    4[BANK0 ] unsigned char 
 24592 ;; Return value:  Size  Location     Type
 24593 ;;                  2    0[BANK0 ] unsigned int 
 24594 ;; Registers used:
 24595 ;;		wreg, status,2, status,0
 24596 ;; Tracked objects:
 24597 ;;		On entry : F/0
 24598 ;;		On exit  : F/0
 24599 ;;		Unchanged: 0/0
 24600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24601 ;;      Params:         0       4       0       0       0       0       0
 24602 ;;      Locals:         0       1       0       0       0       0       0
 24603 ;;      Temps:          0       0       0       0       0       0       0
 24604 ;;      Totals:         0       5       0       0       0       0       0
 24605 ;;Total ram usage:        5 bytes
 24606 ;; Hardware stack levels used:    1
 24607 ;; Hardware stack levels required when called:    3
 24608 ;; This function calls:
 24609 ;;		Nothing
 24610 ;; This function is called by:
 24611 ;;		_utoa
 24612 ;; This function uses a non-reentrant model
 24613 ;;
 24614                           
 24615                           	psect	text62
 24616  0011E4                     __ptext62:
 24617                           	opt stack 0
 24618  0011E4                     ___lwmod:
 24619                           	opt stack 22
 24620                           
 24621                           ; BSR set to: 0
 24622                           
 24623                           ; BSR set to: 0
 24624                           ;incstack = 0
 24625                           ;incstack = 0
 24626  0011E4  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24627  0011E6  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24628  0011E8  E017               	bz	l2520
 24629                           
 24630                           ; BSR set to: 0
 24631  0011EA  0E01               	movlw	1
 24632  0011EC  6F64               	movwf	___lwmod@counter& (0+255),b
 24633  0011EE  D004               	goto	l17162
 24634  0011F0                     l17160:
 24635                           
 24636                           ; BSR set to: 0
 24637  0011F0  90D8               	bcf	status,0,c
 24638  0011F2  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24639  0011F4  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24640  0011F6  2B64               	incf	___lwmod@counter& (0+255),f,b
 24641  0011F8                     l17162:
 24642                           
 24643                           ; BSR set to: 0
 24644  0011F8  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24645  0011FA  D7FA               	goto	l17160
 24646  0011FC                     l17164:
 24647                           
 24648                           ; BSR set to: 0
 24649  0011FC  5162               	movf	___lwmod@divisor& (0+255),w,b
 24650  0011FE  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24651  001200  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24652  001202  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24653  001204  E304               	bnc	l17168
 24654                           
 24655                           ; BSR set to: 0
 24656  001206  5162               	movf	___lwmod@divisor& (0+255),w,b
 24657  001208  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24658  00120A  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24659  00120C  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24660  00120E                     l17168:
 24661                           
 24662                           ; BSR set to: 0
 24663  00120E  90D8               	bcf	status,0,c
 24664  001210  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24665  001212  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24666                           
 24667                           ; BSR set to: 0
 24668  001214  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24669  001216  D7F2               	goto	l17164
 24670  001218                     l2520:
 24671                           
 24672                           ; BSR set to: 0
 24673  001218  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24674  00121C  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24675                           
 24676                           ; BSR set to: 0
 24677  001220  0012               	return	
 24678  001222                     __end_of___lwmod:
 24679                           	opt stack 0
 24680                           tblptru	equ	0xFF8
 24681                           tblptrh	equ	0xFF7
 24682                           tblptrl	equ	0xFF6
 24683                           tablat	equ	0xFF5
 24684                           prodh	equ	0xFF4
 24685                           prodl	equ	0xFF3
 24686                           intcon	equ	0xFF2
 24687                           indf0	equ	0xFEF
 24688                           postinc0	equ	0xFEE
 24689                           fsr0h	equ	0xFEA
 24690                           fsr0l	equ	0xFE9
 24691                           wreg	equ	0xFE8
 24692                           indf1	equ	0xFE7
 24693                           postinc1	equ	0xFE6
 24694                           postdec1	equ	0xFE5
 24695                           fsr1h	equ	0xFE2
 24696                           fsr1l	equ	0xFE1
 24697                           indf2	equ	0xFDF
 24698                           postinc2	equ	0xFDE
 24699                           postdec2	equ	0xFDD
 24700                           plusw2	equ	0xFDB
 24701                           fsr2h	equ	0xFDA
 24702                           fsr2l	equ	0xFD9
 24703                           status	equ	0xFD8
 24704                           
 24705 ;; *************** function ___lwdiv *****************
 24706 ;; Defined at:
 24707 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24708 ;; Parameters:    Size  Location     Type
 24709 ;;  dividend        2    0[BANK0 ] unsigned int 
 24710 ;;  divisor         2    2[BANK0 ] unsigned int 
 24711 ;; Auto vars:     Size  Location     Type
 24712 ;;  quotient        2    5[BANK0 ] unsigned int 
 24713 ;;  counter         1    4[BANK0 ] unsigned char 
 24714 ;; Return value:  Size  Location     Type
 24715 ;;                  2    0[BANK0 ] unsigned int 
 24716 ;; Registers used:
 24717 ;;		wreg, status,2, status,0
 24718 ;; Tracked objects:
 24719 ;;		On entry : F/0
 24720 ;;		On exit  : F/0
 24721 ;;		Unchanged: 0/0
 24722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24723 ;;      Params:         0       4       0       0       0       0       0
 24724 ;;      Locals:         0       3       0       0       0       0       0
 24725 ;;      Temps:          0       0       0       0       0       0       0
 24726 ;;      Totals:         0       7       0       0       0       0       0
 24727 ;;Total ram usage:        7 bytes
 24728 ;; Hardware stack levels used:    1
 24729 ;; Hardware stack levels required when called:    3
 24730 ;; This function calls:
 24731 ;;		Nothing
 24732 ;; This function is called by:
 24733 ;;		_utoa
 24734 ;; This function uses a non-reentrant model
 24735 ;;
 24736                           
 24737                           	psect	text63
 24738  001430                     __ptext63:
 24739                           	opt stack 0
 24740  001430                     ___lwdiv:
 24741                           	opt stack 22
 24742                           
 24743                           ; BSR set to: 0
 24744                           
 24745                           ; BSR set to: 0
 24746                           ;incstack = 0
 24747                           ;incstack = 0
 24748  001430  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24749  001432  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24750                           
 24751                           ; BSR set to: 0
 24752  001434  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24753  001436  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24754  001438  E01B               	bz	l2510
 24755                           
 24756                           ; BSR set to: 0
 24757  00143A  0E01               	movlw	1
 24758  00143C  6F64               	movwf	___lwdiv@counter& (0+255),b
 24759  00143E  D004               	goto	l17142
 24760  001440                     l17140:
 24761                           
 24762                           ; BSR set to: 0
 24763  001440  90D8               	bcf	status,0,c
 24764  001442  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24765  001444  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24766  001446  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24767  001448                     l17142:
 24768                           
 24769                           ; BSR set to: 0
 24770  001448  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24771  00144A  D7FA               	goto	l17140
 24772  00144C                     l17144:
 24773                           
 24774                           ; BSR set to: 0
 24775  00144C  90D8               	bcf	status,0,c
 24776  00144E  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24777  001450  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24778                           
 24779                           ; BSR set to: 0
 24780  001452  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24781  001454  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24782  001456  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24783  001458  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24784  00145A  E305               	bnc	l17152
 24785                           
 24786                           ; BSR set to: 0
 24787  00145C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24788  00145E  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24789  001460  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24790  001462  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24791                           
 24792                           ; BSR set to: 0
 24793  001464  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24794  001466                     l17152:
 24795                           
 24796                           ; BSR set to: 0
 24797  001466  90D8               	bcf	status,0,c
 24798  001468  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24799  00146A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24800                           
 24801                           ; BSR set to: 0
 24802  00146C  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24803  00146E  D7EE               	goto	l17144
 24804  001470                     l2510:
 24805                           
 24806                           ; BSR set to: 0
 24807  001470  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24808  001474  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24809                           
 24810                           ; BSR set to: 0
 24811  001478  0012               	return	
 24812  00147A                     __end_of___lwdiv:
 24813                           	opt stack 0
 24814                           tblptru	equ	0xFF8
 24815                           tblptrh	equ	0xFF7
 24816                           tblptrl	equ	0xFF6
 24817                           tablat	equ	0xFF5
 24818                           prodh	equ	0xFF4
 24819                           prodl	equ	0xFF3
 24820                           intcon	equ	0xFF2
 24821                           indf0	equ	0xFEF
 24822                           postinc0	equ	0xFEE
 24823                           fsr0h	equ	0xFEA
 24824                           fsr0l	equ	0xFE9
 24825                           wreg	equ	0xFE8
 24826                           indf1	equ	0xFE7
 24827                           postinc1	equ	0xFE6
 24828                           postdec1	equ	0xFE5
 24829                           fsr1h	equ	0xFE2
 24830                           fsr1l	equ	0xFE1
 24831                           indf2	equ	0xFDF
 24832                           postinc2	equ	0xFDE
 24833                           postdec2	equ	0xFDD
 24834                           plusw2	equ	0xFDB
 24835                           fsr2h	equ	0xFDA
 24836                           fsr2l	equ	0xFD9
 24837                           status	equ	0xFD8
 24838                           
 24839 ;; *************** function _vscp_restoreDefaults *****************
 24840 ;; Defined at:
 24841 ;;		line 2951 in file "main.c"
 24842 ;; Parameters:    Size  Location     Type
 24843 ;;		None
 24844 ;; Auto vars:     Size  Location     Type
 24845 ;;		None
 24846 ;; Return value:  Size  Location     Type
 24847 ;;		None               void
 24848 ;; Registers used:
 24849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24850 ;; Tracked objects:
 24851 ;;		On entry : 0/1
 24852 ;;		On exit  : F/0
 24853 ;;		Unchanged: 0/0
 24854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24855 ;;      Params:         0       0       0       0       0       0       0
 24856 ;;      Locals:         0       0       0       0       0       0       0
 24857 ;;      Temps:          0       0       0       0       0       0       0
 24858 ;;      Totals:         0       0       0       0       0       0       0
 24859 ;;Total ram usage:        0 bytes
 24860 ;; Hardware stack levels used:    1
 24861 ;; Hardware stack levels required when called:    5
 24862 ;; This function calls:
 24863 ;;		_init_app_ram
 24864 ;;		_init_app_eeprom
 24865 ;; This function is called by:
 24866 ;;		_main
 24867 ;;		_doModeVerbose
 24868 ;; This function uses a non-reentrant model
 24869 ;;
 24870                           
 24871                           	psect	text64
 24872  000F6C                     __ptext64:
 24873                           	opt stack 0
 24874  000F6C                     _vscp_restoreDefaults:
 24875                           	opt stack 23
 24876                           
 24877                           ;main.c: 2952: init_app_eeprom();
 24878                           
 24879                           ; BSR set to: 0
 24880                           ;incstack = 0
 24881                           ;incstack = 0
 24882  000F6C  EC25  F012         	call	_init_app_eeprom	;wreg free
 24883                           
 24884                           ;main.c: 2953: init_app_ram();
 24885  000F70  EFFF  F01D         	goto	_init_app_ram	;wreg free
 24886  000F74                     __end_of_vscp_restoreDefaults:
 24887                           	opt stack 0
 24888                           tblptru	equ	0xFF8
 24889                           tblptrh	equ	0xFF7
 24890                           tblptrl	equ	0xFF6
 24891                           tablat	equ	0xFF5
 24892                           prodh	equ	0xFF4
 24893                           prodl	equ	0xFF3
 24894                           intcon	equ	0xFF2
 24895                           indf0	equ	0xFEF
 24896                           postinc0	equ	0xFEE
 24897                           fsr0h	equ	0xFEA
 24898                           fsr0l	equ	0xFE9
 24899                           wreg	equ	0xFE8
 24900                           indf1	equ	0xFE7
 24901                           postinc1	equ	0xFE6
 24902                           postdec1	equ	0xFE5
 24903                           fsr1h	equ	0xFE2
 24904                           fsr1l	equ	0xFE1
 24905                           indf2	equ	0xFDF
 24906                           postinc2	equ	0xFDE
 24907                           postdec2	equ	0xFDD
 24908                           plusw2	equ	0xFDB
 24909                           fsr2h	equ	0xFDA
 24910                           fsr2l	equ	0xFD9
 24911                           status	equ	0xFD8
 24912                           
 24913 ;; *************** function _init_app_eeprom *****************
 24914 ;; Defined at:
 24915 ;;		line 555 in file "main.c"
 24916 ;; Parameters:    Size  Location     Type
 24917 ;;		None
 24918 ;; Auto vars:     Size  Location     Type
 24919 ;;  i               1    4[BANK0 ] unsigned char 
 24920 ;; Return value:  Size  Location     Type
 24921 ;;		None               void
 24922 ;; Registers used:
 24923 ;;		wreg, status,2, status,0, cstack
 24924 ;; Tracked objects:
 24925 ;;		On entry : 0/1
 24926 ;;		On exit  : 0/0
 24927 ;;		Unchanged: 0/0
 24928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24929 ;;      Params:         0       0       0       0       0       0       0
 24930 ;;      Locals:         0       1       0       0       0       0       0
 24931 ;;      Temps:          0       0       0       0       0       0       0
 24932 ;;      Totals:         0       1       0       0       0       0       0
 24933 ;;Total ram usage:        1 bytes
 24934 ;; Hardware stack levels used:    1
 24935 ;; Hardware stack levels required when called:    4
 24936 ;; This function calls:
 24937 ;;		_Busy_eep
 24938 ;;		_Write_b_eep
 24939 ;; This function is called by:
 24940 ;;		_vscp_restoreDefaults
 24941 ;; This function uses a non-reentrant model
 24942 ;;
 24943                           
 24944                           	psect	text65
 24945  00244A                     __ptext65:
 24946                           	opt stack 0
 24947  00244A                     _init_app_eeprom:
 24948                           	opt stack 23
 24949                           
 24950                           ;main.c: 556: uint8_t i;
 24951                           ;main.c: 558: (Busy_eep(), Write_b_eep(0x01,0x55));
 24952                           
 24953                           ; BSR set to: 0
 24954                           ;incstack = 0
 24955                           ;incstack = 0
 24956  00244A  ECB3  F007         	call	_Busy_eep	;wreg free
 24957  00244E  0100               	movlb	0	; () banked
 24958  002450  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24959  002452  0E01               	movlw	1
 24960  002454  6F60               	movwf	?_Write_b_eep& (0+255),b
 24961  002456  0E55               	movlw	85
 24962  002458  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 24963  00245A  EC83  F008         	call	_Write_b_eep	;wreg free
 24964                           
 24965                           ;main.c: 559: (Busy_eep(), Write_b_eep(0x02,0xAA));
 24966  00245E  ECB3  F007         	call	_Busy_eep	;wreg free
 24967  002462  0100               	movlb	0	; () banked
 24968  002464  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24969  002466  0E02               	movlw	2
 24970  002468  6F60               	movwf	?_Write_b_eep& (0+255),b
 24971  00246A  0EAA               	movlw	170
 24972  00246C  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 24973  00246E  EC83  F008         	call	_Write_b_eep	;wreg free
 24974                           
 24975                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x03,0));
 24976  002472  ECB3  F007         	call	_Busy_eep	;wreg free
 24977  002476  0100               	movlb	0	; () banked
 24978  002478  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24979  00247A  0E03               	movlw	3
 24980  00247C  6F60               	movwf	?_Write_b_eep& (0+255),b
 24981  00247E  0E00               	movlw	0
 24982  002480  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 24983  002482  EC83  F008         	call	_Write_b_eep	;wreg free
 24984                           
 24985                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x05,0));
 24986  002486  ECB3  F007         	call	_Busy_eep	;wreg free
 24987  00248A  0100               	movlb	0	; () banked
 24988  00248C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24989  00248E  0E05               	movlw	5
 24990  002490  6F60               	movwf	?_Write_b_eep& (0+255),b
 24991  002492  0E00               	movlw	0
 24992  002494  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 24993  002496  EC83  F008         	call	_Write_b_eep	;wreg free
 24994                           
 24995                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x06,0));
 24996  00249A  ECB3  F007         	call	_Busy_eep	;wreg free
 24997  00249E  0100               	movlb	0	; () banked
 24998  0024A0  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 24999  0024A2  0E06               	movlw	6
 25000  0024A4  6F60               	movwf	?_Write_b_eep& (0+255),b
 25001  0024A6  0E00               	movlw	0
 25002  0024A8  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25003  0024AA  EC83  F008         	call	_Write_b_eep	;wreg free
 25004                           
 25005                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x09,20u));
 25006  0024AE  ECB3  F007         	call	_Busy_eep	;wreg free
 25007  0024B2  0100               	movlb	0	; () banked
 25008  0024B4  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25009  0024B6  0E09               	movlw	9
 25010  0024B8  6F60               	movwf	?_Write_b_eep& (0+255),b
 25011  0024BA  0E14               	movlw	20
 25012  0024BC  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 25013  0024BE  EC83  F008         	call	_Write_b_eep	;wreg free
 25014                           
 25015                           ;main.c: 566: for (i = 0x20; i < (0x5C + 4); i++) {
 25016  0024C2  0E20               	movlw	32
 25017  0024C4  0100               	movlb	0	; () banked
 25018  0024C6  6F64               	movwf	init_app_eeprom@i& (0+255),b
 25019  0024C8                     l15452:
 25020                           
 25021                           ; BSR set to: 0
 25022                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x20,0xFF));
 25023  0024C8  ECB3  F007         	call	_Busy_eep	;wreg free
 25024  0024CC  0100               	movlb	0	; () banked
 25025  0024CE  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25026  0024D0  0E20               	movlw	32
 25027  0024D2  6F60               	movwf	?_Write_b_eep& (0+255),b
 25028  0024D4  0EFF               	movlw	255
 25029  0024D6  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 25030  0024D8  EC83  F008         	call	_Write_b_eep	;wreg free
 25031  0024DC  0100               	movlb	0	; () banked
 25032  0024DE  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 25033                           
 25034                           ; BSR set to: 0
 25035  0024E0  0E5F               	movlw	95
 25036  0024E2  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 25037  0024E4  D7F1               	goto	l15452
 25038                           
 25039                           ; BSR set to: 0
 25040                           ;main.c: 568: }
 25041                           ;main.c: 571: for (i = 0x60; i < (0x64 + 4); i++) {
 25042  0024E6  0E60               	movlw	96
 25043  0024E8  6F64               	movwf	init_app_eeprom@i& (0+255),b
 25044  0024EA                     l15466:
 25045                           
 25046                           ; BSR set to: 0
 25047                           ;main.c: 572: (Busy_eep(), Write_b_eep(0x60,0x00));
 25048  0024EA  ECB3  F007         	call	_Busy_eep	;wreg free
 25049  0024EE  0100               	movlb	0	; () banked
 25050  0024F0  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25051  0024F2  0E60               	movlw	96
 25052  0024F4  6F60               	movwf	?_Write_b_eep& (0+255),b
 25053  0024F6  0E00               	movlw	0
 25054  0024F8  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25055  0024FA  EC83  F008         	call	_Write_b_eep	;wreg free
 25056  0024FE  0100               	movlb	0	; () banked
 25057  002500  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 25058                           
 25059                           ; BSR set to: 0
 25060  002502  0E67               	movlw	103
 25061  002504  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 25062  002506  D7F1               	goto	l15466
 25063                           
 25064                           ; BSR set to: 0
 25065                           ;main.c: 573: }
 25066                           ;main.c: 575: (Busy_eep(), Write_b_eep(0x65,0));
 25067  002508  ECB3  F007         	call	_Busy_eep	;wreg free
 25068  00250C  0100               	movlb	0	; () banked
 25069  00250E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25070  002510  0E65               	movlw	101
 25071  002512  6F60               	movwf	?_Write_b_eep& (0+255),b
 25072  002514  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25073  002516  EF83  F008         	goto	_Write_b_eep	;wreg free
 25074  00251A                     __end_of_init_app_eeprom:
 25075                           	opt stack 0
 25076                           tblptru	equ	0xFF8
 25077                           tblptrh	equ	0xFF7
 25078                           tblptrl	equ	0xFF6
 25079                           tablat	equ	0xFF5
 25080                           prodh	equ	0xFF4
 25081                           prodl	equ	0xFF3
 25082                           intcon	equ	0xFF2
 25083                           indf0	equ	0xFEF
 25084                           postinc0	equ	0xFEE
 25085                           fsr0h	equ	0xFEA
 25086                           fsr0l	equ	0xFE9
 25087                           wreg	equ	0xFE8
 25088                           indf1	equ	0xFE7
 25089                           postinc1	equ	0xFE6
 25090                           postdec1	equ	0xFE5
 25091                           fsr1h	equ	0xFE2
 25092                           fsr1l	equ	0xFE1
 25093                           indf2	equ	0xFDF
 25094                           postinc2	equ	0xFDE
 25095                           postdec2	equ	0xFDD
 25096                           plusw2	equ	0xFDB
 25097                           fsr2h	equ	0xFDA
 25098                           fsr2l	equ	0xFD9
 25099                           status	equ	0xFD8
 25100                           
 25101 ;; *************** function _Write_b_eep *****************
 25102 ;; Defined at:
 25103 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 25104 ;; Parameters:    Size  Location     Type
 25105 ;;  badd            2    0[BANK0 ] unsigned int 
 25106 ;;  bdat            1    2[BANK0 ] unsigned char 
 25107 ;; Auto vars:     Size  Location     Type
 25108 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 25109 ;; Return value:  Size  Location     Type
 25110 ;;		None               void
 25111 ;; Registers used:
 25112 ;;		wreg, status,2
 25113 ;; Tracked objects:
 25114 ;;		On entry : F/0
 25115 ;;		On exit  : 0/0
 25116 ;;		Unchanged: 0/0
 25117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25118 ;;      Params:         0       3       0       0       0       0       0
 25119 ;;      Locals:         0       1       0       0       0       0       0
 25120 ;;      Temps:          0       0       0       0       0       0       0
 25121 ;;      Totals:         0       4       0       0       0       0       0
 25122 ;;Total ram usage:        4 bytes
 25123 ;; Hardware stack levels used:    1
 25124 ;; Hardware stack levels required when called:    3
 25125 ;; This function calls:
 25126 ;;		Nothing
 25127 ;; This function is called by:
 25128 ;;		_init_app_eeprom
 25129 ;;		_doModeVerbose
 25130 ;;		_doModeSLCAN
 25131 ;; This function uses a non-reentrant model
 25132 ;;
 25133                           
 25134                           	psect	text66
 25135  001106                     __ptext66:
 25136                           	opt stack 0
 25137  001106                     _Write_b_eep:
 25138                           	opt stack 25
 25139                           
 25140                           ; BSR set to: 0
 25141                           
 25142                           ;incstack = 0
 25143                           ;incstack = 0
 25144  001106  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 25145  00110A  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 25146  00110E  9EA6               	bcf	4006,7,c	;volatile
 25147  001110  9CA6               	bcf	4006,6,c	;volatile
 25148  001112  84A6               	bsf	4006,2,c	;volatile
 25149                           
 25150                           ; BSR set to: 0
 25151  001114  0E00               	movlw	0
 25152  001116  BEF2               	btfsc	intcon,7,c	;volatile
 25153  001118  0E01               	movlw	1
 25154  00111A  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 25155                           
 25156                           ; BSR set to: 0
 25157  00111C  9EF2               	bcf	intcon,7,c	;volatile
 25158                           
 25159                           ; BSR set to: 0
 25160  00111E  0E55               	movlw	85
 25161  001120  6EA7               	movwf	4007,c	;volatile
 25162                           
 25163                           ; BSR set to: 0
 25164  001122  0EAA               	movlw	170
 25165  001124  6EA7               	movwf	4007,c	;volatile
 25166                           
 25167                           ; BSR set to: 0
 25168  001126  82A6               	bsf	4006,1,c	;volatile
 25169  001128                     l1846:
 25170                           
 25171                           ; BSR set to: 0
 25172  001128  B2A6               	btfsc	4006,1,c	;volatile
 25173  00112A  D7FE               	goto	l1846
 25174                           
 25175                           ; BSR set to: 0
 25176  00112C  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 25177  00112E  D002               	bra	u20685
 25178  001130  9EF2               	bcf	intcon,7,c	;volatile
 25179  001132  D001               	bra	u20686
 25180  001134                     u20685:
 25181  001134  8EF2               	bsf	intcon,7,c	;volatile
 25182  001136                     u20686:
 25183  001136  94A6               	bcf	4006,2,c	;volatile
 25184  001138  0012               	return	
 25185  00113A                     __end_of_Write_b_eep:
 25186                           	opt stack 0
 25187                           tblptru	equ	0xFF8
 25188                           tblptrh	equ	0xFF7
 25189                           tblptrl	equ	0xFF6
 25190                           tablat	equ	0xFF5
 25191                           prodh	equ	0xFF4
 25192                           prodl	equ	0xFF3
 25193                           intcon	equ	0xFF2
 25194                           indf0	equ	0xFEF
 25195                           postinc0	equ	0xFEE
 25196                           fsr0h	equ	0xFEA
 25197                           fsr0l	equ	0xFE9
 25198                           wreg	equ	0xFE8
 25199                           indf1	equ	0xFE7
 25200                           postinc1	equ	0xFE6
 25201                           postdec1	equ	0xFE5
 25202                           fsr1h	equ	0xFE2
 25203                           fsr1l	equ	0xFE1
 25204                           indf2	equ	0xFDF
 25205                           postinc2	equ	0xFDE
 25206                           postdec2	equ	0xFDD
 25207                           plusw2	equ	0xFDB
 25208                           fsr2h	equ	0xFDA
 25209                           fsr2l	equ	0xFD9
 25210                           status	equ	0xFD8
 25211                           
 25212 ;; *************** function _Busy_eep *****************
 25213 ;; Defined at:
 25214 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 25215 ;; Parameters:    Size  Location     Type
 25216 ;;		None
 25217 ;; Auto vars:     Size  Location     Type
 25218 ;;		None
 25219 ;; Return value:  Size  Location     Type
 25220 ;;		None               void
 25221 ;; Registers used:
 25222 ;;		None
 25223 ;; Tracked objects:
 25224 ;;		On entry : 0/1
 25225 ;;		On exit  : 0/0
 25226 ;;		Unchanged: 0/0
 25227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25228 ;;      Params:         0       0       0       0       0       0       0
 25229 ;;      Locals:         0       0       0       0       0       0       0
 25230 ;;      Temps:          0       0       0       0       0       0       0
 25231 ;;      Totals:         0       0       0       0       0       0       0
 25232 ;;Total ram usage:        0 bytes
 25233 ;; Hardware stack levels used:    1
 25234 ;; Hardware stack levels required when called:    3
 25235 ;; This function calls:
 25236 ;;		Nothing
 25237 ;; This function is called by:
 25238 ;;		_init_app_eeprom
 25239 ;;		_doModeVerbose
 25240 ;;		_doModeSLCAN
 25241 ;; This function uses a non-reentrant model
 25242 ;;
 25243                           
 25244                           	psect	text67
 25245  000F66                     __ptext67:
 25246                           	opt stack 0
 25247  000F66                     _Busy_eep:
 25248                           	opt stack 25
 25249  000F66                     l1821:
 25250  000F66  A2A6               	btfss	4006,1,c	;volatile
 25251  000F68  0012               	return	
 25252  000F6A  D7FD               	goto	l1821
 25253  000F6C                     __end_of_Busy_eep:
 25254                           	opt stack 0
 25255                           tblptru	equ	0xFF8
 25256                           tblptrh	equ	0xFF7
 25257                           tblptrl	equ	0xFF6
 25258                           tablat	equ	0xFF5
 25259                           prodh	equ	0xFF4
 25260                           prodl	equ	0xFF3
 25261                           intcon	equ	0xFF2
 25262                           indf0	equ	0xFEF
 25263                           postinc0	equ	0xFEE
 25264                           fsr0h	equ	0xFEA
 25265                           fsr0l	equ	0xFE9
 25266                           wreg	equ	0xFE8
 25267                           indf1	equ	0xFE7
 25268                           postinc1	equ	0xFE6
 25269                           postdec1	equ	0xFE5
 25270                           fsr1h	equ	0xFE2
 25271                           fsr1l	equ	0xFE1
 25272                           indf2	equ	0xFDF
 25273                           postinc2	equ	0xFDE
 25274                           postdec2	equ	0xFDD
 25275                           plusw2	equ	0xFDB
 25276                           fsr2h	equ	0xFDA
 25277                           fsr2l	equ	0xFD9
 25278                           status	equ	0xFD8
 25279                           
 25280 ;; *************** function _printMode *****************
 25281 ;; Defined at:
 25282 ;;		line 2982 in file "main.c"
 25283 ;; Parameters:    Size  Location     Type
 25284 ;;		None
 25285 ;; Auto vars:     Size  Location     Type
 25286 ;;		None
 25287 ;; Return value:  Size  Location     Type
 25288 ;;		None               void
 25289 ;; Registers used:
 25290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25291 ;; Tracked objects:
 25292 ;;		On entry : 0/0
 25293 ;;		On exit  : 0/0
 25294 ;;		Unchanged: 0/0
 25295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25296 ;;      Params:         0       0       0       0       0       0       0
 25297 ;;      Locals:         0       0       0       0       0       0       0
 25298 ;;      Temps:          0       0       0       0       0       0       0
 25299 ;;      Totals:         0       0       0       0       0       0       0
 25300 ;;Total ram usage:        0 bytes
 25301 ;; Hardware stack levels used:    1
 25302 ;; Hardware stack levels required when called:    5
 25303 ;; This function calls:
 25304 ;;		_putsUSART
 25305 ;; This function is called by:
 25306 ;;		_main
 25307 ;; This function uses a non-reentrant model
 25308 ;;
 25309                           
 25310                           	psect	text68
 25311  001A04                     __ptext68:
 25312                           	opt stack 0
 25313  001A04                     _printMode:
 25314                           	opt stack 24
 25315                           
 25316                           ;main.c: 2983: putsUSART((char *) "Mode: ");
 25317                           
 25318                           ;incstack = 0
 25319                           ;incstack = 0
 25320  001A04  0E7C               	movlw	high STR_288
 25321  001A06  0100               	movlb	0	; () banked
 25322  001A08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25323  001A0A  0E0B               	movlw	low STR_288
 25324  001A0C  6F61               	movwf	?_putsUSART& (0+255),b
 25325  001A0E  EC8D  F00A         	call	_putsUSART	;wreg free
 25326                           
 25327                           ;main.c: 2984: if (0 == mode) {
 25328  001A12  0101               	movlb	1	; () banked
 25329  001A14  672C               	tstfsz	_mode& (0+255),b
 25330  001A16  D008               	goto	l14170
 25331                           
 25332                           ; BSR set to: 1
 25333                           ;main.c: 2985: putsUSART((char *) "Verbose");
 25334  001A18  0E7C               	movlw	high STR_289
 25335  001A1A  0100               	movlb	0	; () banked
 25336  001A1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25337  001A1E  0E03               	movlw	low STR_289
 25338  001A20  6F61               	movwf	?_putsUSART& (0+255),b
 25339  001A22  EC8D  F00A         	call	_putsUSART	;wreg free
 25340                           
 25341                           ;main.c: 2986: } else if (1 == mode) {
 25342  001A26  D027               	goto	l1299
 25343  001A28                     l14170:
 25344                           
 25345                           ; BSR set to: 1
 25346  001A28  052C               	decf	_mode& (0+255),w,b
 25347  001A2A  E108               	bnz	l14174
 25348                           
 25349                           ; BSR set to: 1
 25350                           ;main.c: 2987: putsUSART((char *) "VSCP Driver");
 25351  001A2C  0E7B               	movlw	high STR_290
 25352  001A2E  0100               	movlb	0	; () banked
 25353  001A30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25354  001A32  0E45               	movlw	low STR_290
 25355  001A34  6F61               	movwf	?_putsUSART& (0+255),b
 25356  001A36  EC8D  F00A         	call	_putsUSART	;wreg free
 25357                           
 25358                           ;main.c: 2988: } else if (2 == mode) {
 25359  001A3A  D01D               	goto	l1299
 25360  001A3C                     l14174:
 25361                           
 25362                           ; BSR set to: 1
 25363  001A3C  512C               	movf	_mode& (0+255),w,b
 25364  001A3E  0A02               	xorlw	2
 25365  001A40  E108               	bnz	l14178
 25366                           
 25367                           ; BSR set to: 1
 25368                           ;main.c: 2989: putsUSART((char *) "SL Driver");
 25369  001A42  0E7B               	movlw	high STR_291
 25370  001A44  0100               	movlb	0	; () banked
 25371  001A46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25372  001A48  0E85               	movlw	low STR_291
 25373  001A4A  6F61               	movwf	?_putsUSART& (0+255),b
 25374  001A4C  EC8D  F00A         	call	_putsUSART	;wreg free
 25375                           
 25376                           ;main.c: 2990: } else if (3 == mode) {
 25377  001A50  D012               	goto	l1299
 25378  001A52                     l14178:
 25379                           
 25380                           ; BSR set to: 1
 25381  001A52  512C               	movf	_mode& (0+255),w,b
 25382  001A54  0A03               	xorlw	3
 25383  001A56  E108               	bnz	l14182
 25384                           
 25385                           ; BSR set to: 1
 25386                           ;main.c: 2991: putsUSART((char *) "VSCP Node");
 25387  001A58  0E7B               	movlw	high STR_292
 25388  001A5A  0100               	movlb	0	; () banked
 25389  001A5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25390  001A5E  0E7B               	movlw	low STR_292
 25391  001A60  6F61               	movwf	?_putsUSART& (0+255),b
 25392  001A62  EC8D  F00A         	call	_putsUSART	;wreg free
 25393                           
 25394                           ;main.c: 2992: } else {
 25395  001A66  D007               	goto	l1299
 25396  001A68                     l14182:
 25397                           
 25398                           ; BSR set to: 1
 25399                           ;main.c: 2993: putsUSART((char *) "Unknown (Verbose used)");
 25400  001A68  0E79               	movlw	high STR_293
 25401  001A6A  0100               	movlb	0	; () banked
 25402  001A6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25403  001A6E  0E82               	movlw	low STR_293
 25404  001A70  6F61               	movwf	?_putsUSART& (0+255),b
 25405  001A72  EC8D  F00A         	call	_putsUSART	;wreg free
 25406  001A76                     l1299:
 25407                           
 25408                           ;main.c: 2994: }
 25409                           ;main.c: 2995: putsUSART((char *) "\r\n");
 25410  001A76  0E70               	movlw	high (STR_227+50)
 25411  001A78  0100               	movlb	0	; () banked
 25412  001A7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25413  001A7C  0EE0               	movlw	low (STR_227+50)
 25414  001A7E  6F61               	movwf	?_putsUSART& (0+255),b
 25415  001A80  EF8D  F00A         	goto	_putsUSART	;wreg free
 25416  001A84                     __end_of_printMode:
 25417                           	opt stack 0
 25418                           tblptru	equ	0xFF8
 25419                           tblptrh	equ	0xFF7
 25420                           tblptrl	equ	0xFF6
 25421                           tablat	equ	0xFF5
 25422                           prodh	equ	0xFF4
 25423                           prodl	equ	0xFF3
 25424                           intcon	equ	0xFF2
 25425                           indf0	equ	0xFEF
 25426                           postinc0	equ	0xFEE
 25427                           fsr0h	equ	0xFEA
 25428                           fsr0l	equ	0xFE9
 25429                           wreg	equ	0xFE8
 25430                           indf1	equ	0xFE7
 25431                           postinc1	equ	0xFE6
 25432                           postdec1	equ	0xFE5
 25433                           fsr1h	equ	0xFE2
 25434                           fsr1l	equ	0xFE1
 25435                           indf2	equ	0xFDF
 25436                           postinc2	equ	0xFDE
 25437                           postdec2	equ	0xFDD
 25438                           plusw2	equ	0xFDB
 25439                           fsr2h	equ	0xFDA
 25440                           fsr2l	equ	0xFD9
 25441                           status	equ	0xFD8
 25442                           
 25443 ;; *************** function _putsUSART *****************
 25444 ;; Defined at:
 25445 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 25446 ;; Parameters:    Size  Location     Type
 25447 ;;  data            2    1[BANK0 ] PTR unsigned char 
 25448 ;;		 -> STR_294(3), STR_293(23), STR_292(10), STR_291(10), 
 25449 ;;		 -> STR_290(12), STR_289(8), STR_288(7), STR_287(3), 
 25450 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_286(10), STR_285(3), STR_282(20), 
 25451 ;;		 -> STR_281(3), STR_280(14), STR_279(3), STR_275(8), 
 25452 ;;		 -> STR_274(17), STR_273(3), STR_272(67), STR_271(3), 
 25453 ;;		 -> STR_270(29), STR_269(67), STR_268(52), STR_267(39), 
 25454 ;;		 -> STR_266(62), STR_265(55), STR_264(49), STR_263(67), 
 25455 ;;		 -> STR_262(47), STR_261(47), STR_260(34), STR_259(71), 
 25456 ;;		 -> STR_258(20), STR_257(78), STR_256(24), STR_255(77), 
 25457 ;;		 -> STR_254(74), STR_253(76), STR_252(47), STR_251(40), 
 25458 ;;		 -> STR_250(39), STR_249(33), STR_248(23), STR_247(56), 
 25459 ;;		 -> STR_246(24), STR_245(44), STR_244(50), STR_243(31), 
 25460 ;;		 -> STR_242(50), STR_241(51), STR_240(46), STR_239(44), 
 25461 ;;		 -> STR_238(27), STR_237(39), STR_236(39), STR_235(52), 
 25462 ;;		 -> STR_234(54), STR_233(55), STR_232(3), STR_229(24), 
 25463 ;;		 -> STR_228(57), STR_227(53), STR_226(58), STR_225(3), 
 25464 ;;		 -> STR_222(25), STR_221(3), STR_218(24), STR_217(3), 
 25465 ;;		 -> STR_214(24), STR_213(3), STR_210(24), STR_209(3), 
 25466 ;;		 -> STR_206(23), STR_205(3), STR_202(21), STR_201(3), 
 25467 ;;		 -> STR_198(22), STR_197(3), STR_194(17), STR_193(3), 
 25468 ;;		 -> STR_190(18), STR_189(4), STR_188(11), STR_187(2), 
 25469 ;;		 -> STR_184(7), STR_181(7), STR_178(9), STR_175(7), 
 25470 ;;		 -> STR_172(8), STR_169(7), STR_168(2), STR_167(2), 
 25471 ;;		 -> STR_166(6), STR_165(8), STR_164(8), STR_163(20), 
 25472 ;;		 -> STR_162(27), STR_161(6), STR_160(33), STR_157(41), 
 25473 ;;		 -> STR_156(23), STR_154(22), STR_149(26), STR_147(32), 
 25474 ;;		 -> STR_145(28), STR_136(6), STR_134(40), STR_132(44), 
 25475 ;;		 -> STR_129(6), STR_128(39), STR_126(36), STR_124(37), 
 25476 ;;		 -> STR_122(40), STR_120(37), STR_119(50), STR_116(6), 
 25477 ;;		 -> STR_115(41), STR_113(38), STR_111(39), STR_109(42), 
 25478 ;;		 -> STR_107(39), STR_106(66), STR_103(6), STR_102(3), 
 25479 ;;		 -> STR_99(20), STR_98(52), STR_94(8), STR_93(36), 
 25480 ;;		 -> STR_90(8), STR_89(38), STR_88(24), STR_86(33), 
 25481 ;;		 -> STR_84(24), STR_82(52), STR_80(54), STR_79(6), 
 25482 ;;		 -> STR_78(3), STR_73(25), STR_70(17), STR_69(3), 
 25483 ;;		 -> STR_68(4), STR_67(3), STR_64(4), STR_59(15), 
 25484 ;;		 -> wrkbuf(80), STR_56(14), STR_54(33), STR_52(24), 
 25485 ;;		 -> STR_50(52), STR_48(6), STR_46(6), STR_44(6), 
 25486 ;;		 -> STR_42(6), STR_40(18), STR_39(6), STR_37(33), 
 25487 ;;		 -> STR_36(6), STR_28(24), STR_27(18), STR_26(20), 
 25488 ;;		 -> STR_25(25), STR_24(22), STR_23(19), STR_22(20), 
 25489 ;;		 -> STR_21(20), STR_19(6), STR_17(6), STR_15(6), 
 25490 ;;		 -> STR_13(6), STR_11(6), STR_9(6), STR_7(31), 
 25491 ;;		 -> STR_5(29), STR_4(55), STR_3(35), STR_2(58), 
 25492 ;;		 -> STR_1(37), 
 25493 ;; Auto vars:     Size  Location     Type
 25494 ;;		None
 25495 ;; Return value:  Size  Location     Type
 25496 ;;		None               void
 25497 ;; Registers used:
 25498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25499 ;; Tracked objects:
 25500 ;;		On entry : F/0
 25501 ;;		On exit  : 0/0
 25502 ;;		Unchanged: 0/0
 25503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25504 ;;      Params:         0       2       0       0       0       0       0
 25505 ;;      Locals:         0       0       0       0       0       0       0
 25506 ;;      Temps:          0       2       0       0       0       0       0
 25507 ;;      Totals:         0       4       0       0       0       0       0
 25508 ;;Total ram usage:        4 bytes
 25509 ;; Hardware stack levels used:    1
 25510 ;; Hardware stack levels required when called:    4
 25511 ;; This function calls:
 25512 ;;		_WriteUSART
 25513 ;; This function is called by:
 25514 ;;		_main
 25515 ;;		_doModeVerbose
 25516 ;;		_doModeSLCAN
 25517 ;;		_receivePrintEventVerbose
 25518 ;;		_receiveSendEventSLCAN
 25519 ;;		_printStatistics
 25520 ;;		_printErrors
 25521 ;;		_printHelp
 25522 ;;		_findNodes
 25523 ;;		_printGUID
 25524 ;;		_printMDF
 25525 ;;		_printNodeFirmwareVersion
 25526 ;;		_printFirmwareVersion
 25527 ;;		_printMode
 25528 ;; This function uses a non-reentrant model
 25529 ;;
 25530                           
 25531                           	psect	text69
 25532  00151A                     __ptext69:
 25533                           	opt stack 0
 25534  00151A                     _putsUSART:
 25535                           	opt stack 23
 25536  00151A                     l1912:
 25537  00151A  A2AC               	btfss	4012,1,c	;volatile
 25538  00151C  D7FE               	goto	l1912
 25539  00151E  0100               	movlb	0	; () banked
 25540  001520  5161               	movf	putsUSART@data& (0+255),w,b
 25541  001522  6EF6               	movwf	tblptrl,c
 25542  001524  6EE9               	movwf	fsr0l,c
 25543  001526  0E05               	movlw	(high __ramtop+-1)
 25544  001528  6EEA               	movwf	fsr0h,c
 25545  00152A  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25546  00152C  64EA               	cpfsgt	fsr0h,c
 25547  00152E  D003               	bra	u18607
 25548  001530  6EEA               	movwf	fsr0h,c
 25549  001532  50EF               	movf	indf0,w,c
 25550  001534  D003               	bra	u18600
 25551  001536                     u18607:
 25552  001536  6EF7               	movwf	tblptrh,c
 25553  001538  0008               	tblrd		*
 25554  00153A  50F5               	movf	tablat,w,c
 25555  00153C                     u18600:
 25556  00153C  ECD5  F007         	call	_WriteUSART
 25557  001540  0100               	movlb	0	; () banked
 25558  001542  5161               	movf	putsUSART@data& (0+255),w,b
 25559  001544  6F63               	movwf	??_putsUSART& (0+255),b
 25560  001546  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25561  001548  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 25562  00154A  4B61               	infsnz	putsUSART@data& (0+255),f,b
 25563  00154C  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 25564  00154E  5163               	movf	??_putsUSART& (0+255),w,b
 25565  001550  6EF6               	movwf	tblptrl,c
 25566  001552  6EE9               	movwf	fsr0l,c
 25567  001554  0E05               	movlw	(high __ramtop+-1)
 25568  001556  6EEA               	movwf	fsr0h,c
 25569  001558  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 25570  00155A  64EA               	cpfsgt	fsr0h,c
 25571  00155C  D003               	bra	u18617
 25572  00155E  6EEA               	movwf	fsr0h,c
 25573  001560  50EF               	movf	indf0,w,c
 25574  001562  D003               	bra	u18610
 25575  001564                     u18617:
 25576  001564  6EF7               	movwf	tblptrh,c
 25577  001566  0008               	tblrd		*
 25578  001568  50F5               	movf	tablat,w,c
 25579  00156A                     u18610:
 25580  00156A  0900               	iorlw	0
 25581  00156C  B4D8               	btfsc	status,2,c
 25582  00156E  0012               	return	
 25583  001570  D7D4               	goto	l1912
 25584  001572                     __end_of_putsUSART:
 25585                           	opt stack 0
 25586                           tblptru	equ	0xFF8
 25587                           tblptrh	equ	0xFF7
 25588                           tblptrl	equ	0xFF6
 25589                           tablat	equ	0xFF5
 25590                           prodh	equ	0xFF4
 25591                           prodl	equ	0xFF3
 25592                           intcon	equ	0xFF2
 25593                           indf0	equ	0xFEF
 25594                           postinc0	equ	0xFEE
 25595                           fsr0h	equ	0xFEA
 25596                           fsr0l	equ	0xFE9
 25597                           wreg	equ	0xFE8
 25598                           indf1	equ	0xFE7
 25599                           postinc1	equ	0xFE6
 25600                           postdec1	equ	0xFE5
 25601                           fsr1h	equ	0xFE2
 25602                           fsr1l	equ	0xFE1
 25603                           indf2	equ	0xFDF
 25604                           postinc2	equ	0xFDE
 25605                           postdec2	equ	0xFDD
 25606                           plusw2	equ	0xFDB
 25607                           fsr2h	equ	0xFDA
 25608                           fsr2l	equ	0xFD9
 25609                           status	equ	0xFD8
 25610                           
 25611 ;; *************** function _WriteUSART *****************
 25612 ;; Defined at:
 25613 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 25614 ;; Parameters:    Size  Location     Type
 25615 ;;  data            1    wreg     unsigned char 
 25616 ;; Auto vars:     Size  Location     Type
 25617 ;;  data            1    0[BANK0 ] unsigned char 
 25618 ;; Return value:  Size  Location     Type
 25619 ;;		None               void
 25620 ;; Registers used:
 25621 ;;		wreg
 25622 ;; Tracked objects:
 25623 ;;		On entry : 0/1
 25624 ;;		On exit  : 0/0
 25625 ;;		Unchanged: 0/0
 25626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25627 ;;      Params:         0       0       0       0       0       0       0
 25628 ;;      Locals:         0       1       0       0       0       0       0
 25629 ;;      Temps:          0       0       0       0       0       0       0
 25630 ;;      Totals:         0       1       0       0       0       0       0
 25631 ;;Total ram usage:        1 bytes
 25632 ;; Hardware stack levels used:    1
 25633 ;; Hardware stack levels required when called:    3
 25634 ;; This function calls:
 25635 ;;		Nothing
 25636 ;; This function is called by:
 25637 ;;		_doModeVerbose
 25638 ;;		_sendEscapedUartData
 25639 ;;		_sendVSCPDriverErrorFrame
 25640 ;;		_sendVSCPDriverAck
 25641 ;;		_sendVSCPDriverNack
 25642 ;;		_sendVSCPDriverCommandReply
 25643 ;;		_receiveSendEventCANAL
 25644 ;;		_receiveSendMultiEventCANAL
 25645 ;;		_sendVSCPModeCapabilities
 25646 ;;		_receiveSendEventSLCAN
 25647 ;;		_printBinary
 25648 ;;		_findNodes
 25649 ;;		_printFirmwareVersion
 25650 ;;		_putsUSART
 25651 ;; This function uses a non-reentrant model
 25652 ;;
 25653                           
 25654                           	psect	text70
 25655  000FAA                     __ptext70:
 25656                           	opt stack 0
 25657  000FAA                     _WriteUSART:
 25658                           	opt stack 24
 25659                           
 25660                           ;incstack = 0
 25661                           ;incstack = 0
 25662                           ;WriteUSART@data stored from wreg
 25663  000FAA  CFE8 F060          	movff	wreg,WriteUSART@data
 25664  000FAE  ACAC               	btfss	4012,6,c	;volatile
 25665  000FB0  D003               	goto	l15594
 25666  000FB2  90AC               	bcf	4012,0,c	;volatile
 25667  000FB4  B226               	btfsc	_USART_Status,1,c
 25668  000FB6  80AC               	bsf	4012,0,c	;volatile
 25669  000FB8                     l15594:
 25670  000FB8  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25671  000FBC  0012               	return	
 25672  000FBE                     __end_of_WriteUSART:
 25673                           	opt stack 0
 25674                           tblptru	equ	0xFF8
 25675                           tblptrh	equ	0xFF7
 25676                           tblptrl	equ	0xFF6
 25677                           tablat	equ	0xFF5
 25678                           prodh	equ	0xFF4
 25679                           prodl	equ	0xFF3
 25680                           intcon	equ	0xFF2
 25681                           indf0	equ	0xFEF
 25682                           postinc0	equ	0xFEE
 25683                           fsr0h	equ	0xFEA
 25684                           fsr0l	equ	0xFE9
 25685                           wreg	equ	0xFE8
 25686                           indf1	equ	0xFE7
 25687                           postinc1	equ	0xFE6
 25688                           postdec1	equ	0xFE5
 25689                           fsr1h	equ	0xFE2
 25690                           fsr1l	equ	0xFE1
 25691                           indf2	equ	0xFDF
 25692                           postinc2	equ	0xFDE
 25693                           postdec2	equ	0xFDD
 25694                           plusw2	equ	0xFDB
 25695                           fsr2h	equ	0xFDA
 25696                           fsr2l	equ	0xFD9
 25697                           status	equ	0xFD8
 25698                           
 25699 ;; *************** function _init *****************
 25700 ;; Defined at:
 25701 ;;		line 432 in file "main.c"
 25702 ;; Parameters:    Size  Location     Type
 25703 ;;		None
 25704 ;; Auto vars:     Size  Location     Type
 25705 ;;		None
 25706 ;; Return value:  Size  Location     Type
 25707 ;;		None               void
 25708 ;; Registers used:
 25709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25710 ;; Tracked objects:
 25711 ;;		On entry : 0/1
 25712 ;;		On exit  : F/0
 25713 ;;		Unchanged: 0/0
 25714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25715 ;;      Params:         0       0       0       0       0       0       0
 25716 ;;      Locals:         0       0       0       0       0       0       0
 25717 ;;      Temps:          0       0       0       0       0       0       0
 25718 ;;      Totals:         0       0       0       0       0       0       0
 25719 ;;Total ram usage:        0 bytes
 25720 ;; Hardware stack levels used:    1
 25721 ;; Hardware stack levels required when called:    5
 25722 ;; This function calls:
 25723 ;;		_WriteTimer0
 25724 ;;		_init_app_ram
 25725 ;;		_OpenUSART
 25726 ;;		_OpenTimer0
 25727 ;;		_ECANInitialize
 25728 ;; This function is called by:
 25729 ;;		_main
 25730 ;; This function uses a non-reentrant model
 25731 ;;
 25732                           
 25733                           	psect	text71
 25734  0013E8                     __ptext71:
 25735                           	opt stack 0
 25736  0013E8                     _init:
 25737                           	opt stack 24
 25738                           
 25739                           ;main.c: 434: init_app_ram();
 25740                           
 25741                           ;incstack = 0
 25742                           ;incstack = 0
 25743  0013E8  ECFF  F01D         	call	_init_app_ram	;wreg free
 25744                           
 25745                           ; BSR set to: 0
 25746                           ;main.c: 437: OSCCONbits.IRCF0 = 1;
 25747  0013EC  88D3               	bsf	4051,4,c	;volatile
 25748                           
 25749                           ; BSR set to: 0
 25750                           ;main.c: 438: OSCCONbits.IRCF1 = 1;
 25751  0013EE  8AD3               	bsf	4051,5,c	;volatile
 25752                           
 25753                           ; BSR set to: 0
 25754                           ;main.c: 439: OSCCONbits.IRCF2 = 1;
 25755  0013F0  8CD3               	bsf	4051,6,c	;volatile
 25756                           
 25757                           ; BSR set to: 0
 25758                           ;main.c: 440: OSCTUNEbits.PLLEN = 1;
 25759  0013F2  8C9B               	bsf	3995,6,c	;volatile
 25760                           
 25761                           ; BSR set to: 0
 25762                           ;main.c: 442: TRISBbits.RB2 = 0;
 25763  0013F4  9493               	bcf	3987,2,c	;volatile
 25764                           
 25765                           ; BSR set to: 0
 25766                           ;main.c: 443: TRISBbits.RB3 = 1;
 25767  0013F6  8693               	bsf	3987,3,c	;volatile
 25768                           
 25769                           ; BSR set to: 0
 25770                           ;main.c: 445: TRISCbits.RC1 = 0;
 25771  0013F8  9294               	bcf	3988,1,c	;volatile
 25772                           
 25773                           ; BSR set to: 0
 25774                           ;main.c: 446: TRISCbits.RC6 = 0;
 25775  0013FA  9C94               	bcf	3988,6,c	;volatile
 25776                           
 25777                           ; BSR set to: 0
 25778                           ;main.c: 447: TRISCbits.RC7 = 1;
 25779  0013FC  8E94               	bsf	3988,7,c	;volatile
 25780                           
 25781                           ; BSR set to: 0
 25782                           ;main.c: 451: OpenUSART( 0b01111111 &
 25783                           ;main.c: 452: 0b11111111 &
 25784                           ;main.c: 453: 0b11111110 &
 25785                           ;main.c: 454: 0b11111101 &
 25786                           ;main.c: 455: 0b11111111,
 25787                           ;main.c: 456: 21 );
 25788  0013FE  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25789  001400  0E15               	movlw	21
 25790  001402  6F60               	movwf	?_OpenUSART& (0+255),b
 25791  001404  0E7C               	movlw	124
 25792  001406  ECE5  F00A         	call	_OpenUSART
 25793                           
 25794                           ; BSR set to: 0
 25795                           ;main.c: 458: RCIF = 0;
 25796  00140A  9A9E               	bcf	3998,5,c	;volatile
 25797                           
 25798                           ; BSR set to: 0
 25799                           ;main.c: 459: RCIP = 0;
 25800  00140C  9A9F               	bcf	3999,5,c	;volatile
 25801                           
 25802                           ; BSR set to: 0
 25803                           ;main.c: 460: RCIE = 1;
 25804  00140E  8A9D               	bsf	3997,5,c	;volatile
 25805                           
 25806                           ; BSR set to: 0
 25807                           ;main.c: 461: PEIE = 1;
 25808  001410  8CF2               	bsf	intcon,6,c	;volatile
 25809                           
 25810                           ; BSR set to: 0
 25811                           ;main.c: 464: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25812  001412  0E92               	movlw	146
 25813  001414  EC06  F008         	call	_OpenTimer0
 25814                           
 25815                           ; BSR set to: 0
 25816                           ;main.c: 465: WriteTimer0(0xfb1d);
 25817  001418  0EFB               	movlw	251
 25818  00141A  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25819  00141C  0E1D               	movlw	29
 25820  00141E  6F60               	movwf	?_WriteTimer0& (0+255),b
 25821  001420  ECC3  F007         	call	_WriteTimer0	;wreg free
 25822                           
 25823                           ; BSR set to: 0
 25824                           ;main.c: 472: ECANInitialize();
 25825  001424  ECC2  F00C         	call	_ECANInitialize	;wreg free
 25826                           
 25827                           ; BSR set to: 0
 25828                           ;main.c: 496: RXBnIE = 1;
 25829  001428  82A3               	bsf	4003,1,c	;volatile
 25830                           
 25831                           ; BSR set to: 0
 25832                           ;main.c: 497: ERRIE = 1;
 25833  00142A  8AA3               	bsf	4003,5,c	;volatile
 25834                           
 25835                           ; BSR set to: 0
 25836                           ;main.c: 499: (INTCONbits.GIE = 1);
 25837  00142C  8EF2               	bsf	intcon,7,c	;volatile
 25838                           
 25839                           ; BSR set to: 0
 25840  00142E  0012               	return	
 25841  001430                     __end_of_init:
 25842                           	opt stack 0
 25843                           tblptru	equ	0xFF8
 25844                           tblptrh	equ	0xFF7
 25845                           tblptrl	equ	0xFF6
 25846                           tablat	equ	0xFF5
 25847                           prodh	equ	0xFF4
 25848                           prodl	equ	0xFF3
 25849                           intcon	equ	0xFF2
 25850                           indf0	equ	0xFEF
 25851                           postinc0	equ	0xFEE
 25852                           fsr0h	equ	0xFEA
 25853                           fsr0l	equ	0xFE9
 25854                           wreg	equ	0xFE8
 25855                           indf1	equ	0xFE7
 25856                           postinc1	equ	0xFE6
 25857                           postdec1	equ	0xFE5
 25858                           fsr1h	equ	0xFE2
 25859                           fsr1l	equ	0xFE1
 25860                           indf2	equ	0xFDF
 25861                           postinc2	equ	0xFDE
 25862                           postdec2	equ	0xFDD
 25863                           plusw2	equ	0xFDB
 25864                           fsr2h	equ	0xFDA
 25865                           fsr2l	equ	0xFD9
 25866                           status	equ	0xFD8
 25867                           
 25868 ;; *************** function _ECANInitialize *****************
 25869 ;; Defined at:
 25870 ;;		line 168 in file "ECAN.c"
 25871 ;; Parameters:    Size  Location     Type
 25872 ;;		None
 25873 ;; Auto vars:     Size  Location     Type
 25874 ;;		None
 25875 ;; Return value:  Size  Location     Type
 25876 ;;		None               void
 25877 ;; Registers used:
 25878 ;;		wreg, status,2, status,0, cstack
 25879 ;; Tracked objects:
 25880 ;;		On entry : F/0
 25881 ;;		On exit  : F/0
 25882 ;;		Unchanged: 0/0
 25883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25884 ;;      Params:         0       0       0       0       0       0       0
 25885 ;;      Locals:         0       0       0       0       0       0       0
 25886 ;;      Temps:          0       0       0       0       0       0       0
 25887 ;;      Totals:         0       0       0       0       0       0       0
 25888 ;;Total ram usage:        0 bytes
 25889 ;; Hardware stack levels used:    1
 25890 ;; Hardware stack levels required when called:    4
 25891 ;; This function calls:
 25892 ;;		_ECANSetOperationMode
 25893 ;; This function is called by:
 25894 ;;		_init
 25895 ;; This function uses a non-reentrant model
 25896 ;;
 25897                           
 25898                           	psect	text72
 25899  001984                     __ptext72:
 25900                           	opt stack 0
 25901  001984                     _ECANInitialize:
 25902                           	opt stack 24
 25903                           
 25904                           ; BSR set to: 0
 25905                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25906                           
 25907                           ; BSR set to: 0
 25908                           ;incstack = 0
 25909                           ;incstack = 0
 25910  001984  0E80               	movlw	128
 25911  001986  ECEA  F007         	call	_ECANSetOperationMode
 25912                           
 25913                           ; BSR set to: 0
 25914                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25915  00198A  0E09               	movlw	9
 25916  00198C  6E70               	movwf	3952,c	;volatile
 25917                           
 25918                           ; BSR set to: 0
 25919                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25920  00198E  0EFC               	movlw	252
 25921  001990  6E71               	movwf	3953,c	;volatile
 25922                           
 25923                           ; BSR set to: 0
 25924                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25925                           ;ECAN.c: 181: (0 << 6) |
 25926                           ;ECAN.c: 182: (2-1);
 25927  001992  0E01               	movlw	1
 25928  001994  6E72               	movwf	3954,c	;volatile
 25929                           
 25930                           ; BSR set to: 0
 25931                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25932  001996  0E20               	movlw	32
 25933  001998  6E73               	movwf	3955,c	;volatile
 25934                           
 25935                           ; BSR set to: 0
 25936                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25937  00199A  8E77               	bsf	3959,7,c	;volatile
 25938                           
 25939                           ; BSR set to: 0
 25940                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25941  00199C  9C77               	bcf	3959,6,c	;volatile
 25942                           
 25943                           ; BSR set to: 0
 25944                           ;ECAN.c: 205: RXB0CON = 0;
 25945  00199E  6A60               	clrf	3936,c	;volatile
 25946                           
 25947                           ; BSR set to: 0
 25948                           ;ECAN.c: 211: RXB1CON = 0;
 25949  0019A0  010F               	movlb	15	; () banked
 25950  0019A2  6B50               	clrf	80,b	;volatile
 25951                           
 25952                           ; BSR set to: 15
 25953                           ;ECAN.c: 221: B0CON = 0;
 25954  0019A4  010E               	movlb	14	; () banked
 25955  0019A6  6B20               	clrf	32,b	;volatile
 25956                           
 25957                           ; BSR set to: 14
 25958                           ;ECAN.c: 231: B1CON = 0;
 25959  0019A8  6B30               	clrf	48,b	;volatile
 25960                           
 25961                           ; BSR set to: 14
 25962                           ;ECAN.c: 241: B2CON = 0;
 25963  0019AA  6B40               	clrf	64,b	;volatile
 25964                           
 25965                           ; BSR set to: 14
 25966                           ;ECAN.c: 251: B3CON = 0;
 25967  0019AC  6B50               	clrf	80,b	;volatile
 25968                           
 25969                           ; BSR set to: 14
 25970                           ;ECAN.c: 261: B4CON = 0;
 25971  0019AE  6B60               	clrf	96,b	;volatile
 25972                           
 25973                           ; BSR set to: 14
 25974                           ;ECAN.c: 271: B5CON = 0;
 25975  0019B0  6B70               	clrf	112,b	;volatile
 25976                           
 25977                           ; BSR set to: 14
 25978                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25979  0019B2  010D               	movlb	13	; () banked
 25980  0019B4  6BF8               	clrf	248,b	;volatile
 25981                           
 25982                           ; BSR set to: 13
 25983                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25984  0019B6  010F               	movlb	15	; () banked
 25985  0019B8  6B00               	clrf	0,b	;volatile
 25986                           
 25987                           ; BSR set to: 15
 25988  0019BA  0E08               	movlw	8
 25989  0019BC  6F01               	movwf	1,b	;volatile
 25990                           
 25991                           ; BSR set to: 15
 25992  0019BE  6B02               	clrf	2,b	;volatile
 25993                           
 25994                           ; BSR set to: 15
 25995  0019C0  6B03               	clrf	3,b	;volatile
 25996                           
 25997                           ; BSR set to: 15
 25998                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25999  0019C2  0E01               	movlw	1
 26000  0019C4  010D               	movlb	13	; () banked
 26001  0019C6  6FD4               	movwf	212,b	;volatile
 26002                           
 26003                           ; BSR set to: 13
 26004                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 26005  0019C8  6BD5               	clrf	213,b	;volatile
 26006                           
 26007                           ; BSR set to: 13
 26008                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 26009  0019CA  6BE0               	clrf	224,b	;volatile
 26010                           
 26011                           ; BSR set to: 13
 26012                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 26013  0019CC  0E11               	movlw	17
 26014  0019CE  6FE1               	movwf	225,b	;volatile
 26015                           
 26016                           ; BSR set to: 13
 26017                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 26018  0019D0  6FE2               	movwf	226,b	;volatile
 26019                           
 26020                           ; BSR set to: 13
 26021                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 26022  0019D2  6BE3               	clrf	227,b	;volatile
 26023                           
 26024                           ; BSR set to: 13
 26025                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 26026  0019D4  6BE4               	clrf	228,b	;volatile
 26027                           
 26028                           ; BSR set to: 13
 26029                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 26030  0019D6  6BE5               	clrf	229,b	;volatile
 26031                           
 26032                           ; BSR set to: 13
 26033                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 26034  0019D8  6BE6               	clrf	230,b	;volatile
 26035                           
 26036                           ; BSR set to: 13
 26037                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 26038  0019DA  6BE7               	clrf	231,b	;volatile
 26039                           
 26040                           ; BSR set to: 13
 26041                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 26042  0019DC  0E54               	movlw	84
 26043  0019DE  6FF0               	movwf	240,b	;volatile
 26044                           
 26045                           ; BSR set to: 13
 26046                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 26047  0019E0  0E05               	movlw	5
 26048  0019E2  6FF1               	movwf	241,b	;volatile
 26049                           
 26050                           ; BSR set to: 13
 26051                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 26052  0019E4  6BF2               	clrf	242,b	;volatile
 26053                           
 26054                           ; BSR set to: 13
 26055                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 26056  0019E6  6BF2               	clrf	242,b	;volatile
 26057                           
 26058                           ; BSR set to: 13
 26059                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 26060  0019E8  010F               	movlb	15	; () banked
 26061  0019EA  6B18               	clrf	24,b	;volatile
 26062                           
 26063                           ; BSR set to: 15
 26064  0019EC  6B19               	clrf	25,b	;volatile
 26065                           
 26066                           ; BSR set to: 15
 26067  0019EE  6B1A               	clrf	26,b	;volatile
 26068                           
 26069                           ; BSR set to: 15
 26070  0019F0  6B1B               	clrf	27,b	;volatile
 26071                           
 26072                           ; BSR set to: 15
 26073                           ;ECAN.c: 482: RXM0EXIDM = 1;
 26074  0019F2  8719               	bsf	25,3,b	;volatile
 26075                           
 26076                           ; BSR set to: 15
 26077                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 26078  0019F4  6B1C               	clrf	28,b	;volatile
 26079                           
 26080                           ; BSR set to: 15
 26081  0019F6  6B1D               	clrf	29,b	;volatile
 26082                           
 26083                           ; BSR set to: 15
 26084  0019F8  6B1E               	clrf	30,b	;volatile
 26085                           
 26086                           ; BSR set to: 15
 26087  0019FA  6B1F               	clrf	31,b	;volatile
 26088                           
 26089                           ; BSR set to: 15
 26090                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 26091  0019FC  871D               	bsf	29,3,b	;volatile
 26092                           
 26093                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 26094  0019FE  0E20               	movlw	32
 26095  001A00  EFEA  F007         	goto	_ECANSetOperationMode
 26096  001A04                     __end_of_ECANInitialize:
 26097                           	opt stack 0
 26098                           tblptru	equ	0xFF8
 26099                           tblptrh	equ	0xFF7
 26100                           tblptrl	equ	0xFF6
 26101                           tablat	equ	0xFF5
 26102                           prodh	equ	0xFF4
 26103                           prodl	equ	0xFF3
 26104                           intcon	equ	0xFF2
 26105                           indf0	equ	0xFEF
 26106                           postinc0	equ	0xFEE
 26107                           fsr0h	equ	0xFEA
 26108                           fsr0l	equ	0xFE9
 26109                           wreg	equ	0xFE8
 26110                           indf1	equ	0xFE7
 26111                           postinc1	equ	0xFE6
 26112                           postdec1	equ	0xFE5
 26113                           fsr1h	equ	0xFE2
 26114                           fsr1l	equ	0xFE1
 26115                           indf2	equ	0xFDF
 26116                           postinc2	equ	0xFDE
 26117                           postdec2	equ	0xFDD
 26118                           plusw2	equ	0xFDB
 26119                           fsr2h	equ	0xFDA
 26120                           fsr2l	equ	0xFD9
 26121                           status	equ	0xFD8
 26122                           
 26123 ;; *************** function _OpenTimer0 *****************
 26124 ;; Defined at:
 26125 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 26126 ;; Parameters:    Size  Location     Type
 26127 ;;  config          1    wreg     unsigned char 
 26128 ;; Auto vars:     Size  Location     Type
 26129 ;;  config          1    0[BANK0 ] unsigned char 
 26130 ;; Return value:  Size  Location     Type
 26131 ;;		None               void
 26132 ;; Registers used:
 26133 ;;		wreg, status,2, status,0
 26134 ;; Tracked objects:
 26135 ;;		On entry : F/0
 26136 ;;		On exit  : F/0
 26137 ;;		Unchanged: 0/0
 26138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26139 ;;      Params:         0       0       0       0       0       0       0
 26140 ;;      Locals:         0       1       0       0       0       0       0
 26141 ;;      Temps:          0       0       0       0       0       0       0
 26142 ;;      Totals:         0       1       0       0       0       0       0
 26143 ;;Total ram usage:        1 bytes
 26144 ;; Hardware stack levels used:    1
 26145 ;; Hardware stack levels required when called:    3
 26146 ;; This function calls:
 26147 ;;		Nothing
 26148 ;; This function is called by:
 26149 ;;		_init
 26150 ;; This function uses a non-reentrant model
 26151 ;;
 26152                           
 26153                           	psect	text73
 26154  00100C                     __ptext73:
 26155                           	opt stack 0
 26156  00100C                     _OpenTimer0:
 26157                           	opt stack 25
 26158                           
 26159                           ; BSR set to: 0
 26160                           ;incstack = 0
 26161                           ;incstack = 0
 26162                           ;OpenTimer0@config stored from wreg
 26163  00100C  CFE8 F060          	movff	wreg,OpenTimer0@config
 26164                           
 26165                           ; BSR set to: 0
 26166  001010  5160               	movf	OpenTimer0@config& (0+255),w,b
 26167  001012  0B7F               	andlw	127
 26168  001014  6ED5               	movwf	4053,c	;volatile
 26169                           
 26170                           ; BSR set to: 0
 26171  001016  6AD7               	clrf	4055,c	;volatile
 26172                           
 26173                           ; BSR set to: 0
 26174  001018  6AD6               	clrf	4054,c	;volatile
 26175                           
 26176                           ; BSR set to: 0
 26177  00101A  94F2               	bcf	intcon,2,c	;volatile
 26178                           
 26179                           ; BSR set to: 0
 26180  00101C  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 26181  00101E  D002               	goto	l1862
 26182                           
 26183                           ; BSR set to: 0
 26184  001020  8AF2               	bsf	intcon,5,c	;volatile
 26185  001022  D001               	goto	l1863
 26186  001024                     l1862:
 26187                           
 26188                           ; BSR set to: 0
 26189  001024  9AF2               	bcf	intcon,5,c	;volatile
 26190  001026                     l1863:
 26191                           
 26192                           ; BSR set to: 0
 26193  001026  8ED5               	bsf	4053,7,c	;volatile
 26194                           
 26195                           ; BSR set to: 0
 26196  001028  0012               	return	
 26197  00102A                     __end_of_OpenTimer0:
 26198                           	opt stack 0
 26199                           tblptru	equ	0xFF8
 26200                           tblptrh	equ	0xFF7
 26201                           tblptrl	equ	0xFF6
 26202                           tablat	equ	0xFF5
 26203                           prodh	equ	0xFF4
 26204                           prodl	equ	0xFF3
 26205                           intcon	equ	0xFF2
 26206                           indf0	equ	0xFEF
 26207                           postinc0	equ	0xFEE
 26208                           fsr0h	equ	0xFEA
 26209                           fsr0l	equ	0xFE9
 26210                           wreg	equ	0xFE8
 26211                           indf1	equ	0xFE7
 26212                           postinc1	equ	0xFE6
 26213                           postdec1	equ	0xFE5
 26214                           fsr1h	equ	0xFE2
 26215                           fsr1l	equ	0xFE1
 26216                           indf2	equ	0xFDF
 26217                           postinc2	equ	0xFDE
 26218                           postdec2	equ	0xFDD
 26219                           plusw2	equ	0xFDB
 26220                           fsr2h	equ	0xFDA
 26221                           fsr2l	equ	0xFD9
 26222                           status	equ	0xFD8
 26223                           
 26224 ;; *************** function _OpenUSART *****************
 26225 ;; Defined at:
 26226 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 26227 ;; Parameters:    Size  Location     Type
 26228 ;;  config          1    wreg     unsigned char 
 26229 ;;  spbrg           2    0[BANK0 ] unsigned int 
 26230 ;; Auto vars:     Size  Location     Type
 26231 ;;  config          1    2[BANK0 ] unsigned char 
 26232 ;; Return value:  Size  Location     Type
 26233 ;;		None               void
 26234 ;; Registers used:
 26235 ;;		wreg, status,2
 26236 ;; Tracked objects:
 26237 ;;		On entry : F/0
 26238 ;;		On exit  : F/0
 26239 ;;		Unchanged: 0/0
 26240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26241 ;;      Params:         0       2       0       0       0       0       0
 26242 ;;      Locals:         0       1       0       0       0       0       0
 26243 ;;      Temps:          0       0       0       0       0       0       0
 26244 ;;      Totals:         0       3       0       0       0       0       0
 26245 ;;Total ram usage:        3 bytes
 26246 ;; Hardware stack levels used:    1
 26247 ;; Hardware stack levels required when called:    3
 26248 ;; This function calls:
 26249 ;;		Nothing
 26250 ;; This function is called by:
 26251 ;;		_init
 26252 ;; This function uses a non-reentrant model
 26253 ;;
 26254                           
 26255                           	psect	text74
 26256  0015CA                     __ptext74:
 26257                           	opt stack 0
 26258  0015CA                     _OpenUSART:
 26259                           	opt stack 25
 26260                           
 26261                           ; BSR set to: 0
 26262                           ;incstack = 0
 26263                           ;incstack = 0
 26264                           ;OpenUSART@config stored from wreg
 26265  0015CA  CFE8 F062          	movff	wreg,OpenUSART@config
 26266                           
 26267                           ; BSR set to: 0
 26268  0015CE  6AAC               	clrf	4012,c	;volatile
 26269  0015D0  6AAB               	clrf	4011,c	;volatile
 26270                           
 26271                           ; BSR set to: 0
 26272  0015D2  B162               	btfsc	OpenUSART@config& (0+255),0,b
 26273                           
 26274                           ; BSR set to: 0
 26275  0015D4  88AC               	bsf	4012,4,c	;volatile
 26276                           
 26277                           ; BSR set to: 0
 26278  0015D6  A362               	btfss	OpenUSART@config& (0+255),1,b
 26279  0015D8  D002               	goto	l15288
 26280                           
 26281                           ; BSR set to: 0
 26282  0015DA  8CAC               	bsf	4012,6,c	;volatile
 26283  0015DC  8CAB               	bsf	4011,6,c	;volatile
 26284  0015DE                     l15288:
 26285                           
 26286                           ; BSR set to: 0
 26287  0015DE  B562               	btfsc	OpenUSART@config& (0+255),2,b
 26288                           
 26289                           ; BSR set to: 0
 26290  0015E0  8EAC               	bsf	4012,7,c	;volatile
 26291                           
 26292                           ; BSR set to: 0
 26293  0015E2  A762               	btfss	OpenUSART@config& (0+255),3,b
 26294  0015E4  D002               	goto	l1895
 26295                           
 26296                           ; BSR set to: 0
 26297  0015E6  88AB               	bsf	4011,4,c	;volatile
 26298  0015E8  D001               	goto	l15296
 26299  0015EA                     l1895:
 26300                           
 26301                           ; BSR set to: 0
 26302  0015EA  8AAB               	bsf	4011,5,c	;volatile
 26303  0015EC                     l15296:
 26304                           
 26305                           ; BSR set to: 0
 26306  0015EC  B962               	btfsc	OpenUSART@config& (0+255),4,b
 26307                           
 26308                           ; BSR set to: 0
 26309  0015EE  84AC               	bsf	4012,2,c	;volatile
 26310                           
 26311                           ; BSR set to: 0
 26312  0015F0  989E               	bcf	3998,4,c	;volatile
 26313                           
 26314                           ; BSR set to: 0
 26315  0015F2  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 26316                           
 26317                           ; BSR set to: 0
 26318  0015F4  86AB               	bsf	4011,3,c	;volatile
 26319                           
 26320                           ; BSR set to: 0
 26321  0015F6  AD62               	btfss	OpenUSART@config& (0+255),6,b
 26322  0015F8  D002               	goto	l1899
 26323                           
 26324                           ; BSR set to: 0
 26325  0015FA  8A9D               	bsf	3997,5,c	;volatile
 26326  0015FC  D001               	goto	l1900
 26327  0015FE                     l1899:
 26328                           
 26329                           ; BSR set to: 0
 26330  0015FE  9A9D               	bcf	3997,5,c	;volatile
 26331  001600                     l1900:
 26332                           
 26333                           ; BSR set to: 0
 26334  001600  9A9E               	bcf	3998,5,c	;volatile
 26335                           
 26336                           ; BSR set to: 0
 26337  001602  AF62               	btfss	OpenUSART@config& (0+255),7,b
 26338  001604  D002               	goto	l1901
 26339                           
 26340                           ; BSR set to: 0
 26341  001606  889D               	bsf	3997,4,c	;volatile
 26342  001608  D001               	goto	l1902
 26343  00160A                     l1901:
 26344                           
 26345                           ; BSR set to: 0
 26346  00160A  989D               	bcf	3997,4,c	;volatile
 26347  00160C                     l1902:
 26348                           
 26349                           ; BSR set to: 0
 26350  00160C  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 26351                           
 26352                           ; BSR set to: 0
 26353  001610  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 26354  001612  6EB0               	movwf	4016,c	;volatile
 26355                           
 26356                           ; BSR set to: 0
 26357  001614  8AAC               	bsf	4012,5,c	;volatile
 26358                           
 26359                           ; BSR set to: 0
 26360  001616  8EAB               	bsf	4011,7,c	;volatile
 26361                           
 26362                           ; BSR set to: 0
 26363  001618  9C94               	bcf	3988,6,c	;volatile
 26364                           
 26365                           ; BSR set to: 0
 26366  00161A  8E94               	bsf	3988,7,c	;volatile
 26367                           
 26368                           ; BSR set to: 0
 26369  00161C  B8AC               	btfsc	4012,4,c	;volatile
 26370                           
 26371                           ; BSR set to: 0
 26372  00161E  BEAC               	btfsc	4012,7,c	;volatile
 26373  001620  D001               	goto	l1904
 26374                           
 26375                           ; BSR set to: 0
 26376  001622  8C94               	bsf	3988,6,c	;volatile
 26377  001624                     l1904:
 26378                           
 26379                           ; BSR set to: 0
 26380  001624  0012               	return	
 26381  001626                     __end_of_OpenUSART:
 26382                           	opt stack 0
 26383                           tblptru	equ	0xFF8
 26384                           tblptrh	equ	0xFF7
 26385                           tblptrl	equ	0xFF6
 26386                           tablat	equ	0xFF5
 26387                           prodh	equ	0xFF4
 26388                           prodl	equ	0xFF3
 26389                           intcon	equ	0xFF2
 26390                           indf0	equ	0xFEF
 26391                           postinc0	equ	0xFEE
 26392                           fsr0h	equ	0xFEA
 26393                           fsr0l	equ	0xFE9
 26394                           wreg	equ	0xFE8
 26395                           indf1	equ	0xFE7
 26396                           postinc1	equ	0xFE6
 26397                           postdec1	equ	0xFE5
 26398                           fsr1h	equ	0xFE2
 26399                           fsr1l	equ	0xFE1
 26400                           indf2	equ	0xFDF
 26401                           postinc2	equ	0xFDE
 26402                           postdec2	equ	0xFDD
 26403                           plusw2	equ	0xFDB
 26404                           fsr2h	equ	0xFDA
 26405                           fsr2l	equ	0xFD9
 26406                           status	equ	0xFD8
 26407                           
 26408 ;; *************** function _init_app_ram *****************
 26409 ;; Defined at:
 26410 ;;		line 508 in file "main.c"
 26411 ;; Parameters:    Size  Location     Type
 26412 ;;		None
 26413 ;; Auto vars:     Size  Location     Type
 26414 ;;  i               1   25[BANK0 ] unsigned char 
 26415 ;; Return value:  Size  Location     Type
 26416 ;;		None               void
 26417 ;; Registers used:
 26418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26419 ;; Tracked objects:
 26420 ;;		On entry : 0/1
 26421 ;;		On exit  : F/0
 26422 ;;		Unchanged: 0/0
 26423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26424 ;;      Params:         0       0       0       0       0       0       0
 26425 ;;      Locals:         0       1       0       0       0       0       0
 26426 ;;      Temps:          0       8       0       0       0       0       0
 26427 ;;      Totals:         0       9       0       0       0       0       0
 26428 ;;Total ram usage:        9 bytes
 26429 ;; Hardware stack levels used:    1
 26430 ;; Hardware stack levels required when called:    4
 26431 ;; This function calls:
 26432 ;;		_Read_b_eep
 26433 ;;		_ECANSetOperationMode
 26434 ;;		_setFilter
 26435 ;;		__CANIDToRegs
 26436 ;; This function is called by:
 26437 ;;		_init
 26438 ;;		_vscp_restoreDefaults
 26439 ;; This function uses a non-reentrant model
 26440 ;;
 26441                           
 26442                           	psect	text75
 26443  003BFE                     __ptext75:
 26444                           	opt stack 0
 26445  003BFE                     _init_app_ram:
 26446                           	opt stack 23
 26447                           
 26448                           ;main.c: 510: can_receiveOverruns = 0;
 26449                           
 26450                           ; BSR set to: 0
 26451                           ;incstack = 0
 26452                           ;incstack = 0
 26453  003BFE  0101               	movlb	1	; () banked
 26454  003C00  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26455  003C02  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26456  003C04  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26457  003C06  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26458                           
 26459                           ;main.c: 511: can_transmitOverruns = 0;
 26460  003C08  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26461  003C0A  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26462  003C0C  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26463  003C0E  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26464                           
 26465                           ;main.c: 512: uart_receiveOverruns = 0;
 26466  003C10  6B20               	clrf	_uart_receiveOverruns& (0+255),b
 26467  003C12  6B21               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26468  003C14  6B22               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26469  003C16  6B23               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26470                           
 26471                           ;main.c: 513: uart_transmitOverruns = 0;
 26472  003C18  6B24               	clrf	_uart_transmitOverruns& (0+255),b
 26473  003C1A  6B25               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26474  003C1C  6B26               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26475  003C1E  6B27               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26476                           
 26477                           ;main.c: 514: timer = 0;
 26478  003C20  6B1C               	clrf	_timer& (0+255),b	;volatile
 26479  003C22  6B1D               	clrf	(_timer+1)& (0+255),b	;volatile
 26480  003C24  6B1E               	clrf	(_timer+2)& (0+255),b	;volatile
 26481  003C26  6B1F               	clrf	(_timer+3)& (0+255),b	;volatile
 26482                           
 26483                           ; BSR set to: 1
 26484                           ;main.c: 516: bHex = Read_b_eep(0x06);
 26485  003C28  0100               	movlb	0	; () banked
 26486  003C2A  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26487  003C2C  0E06               	movlw	6
 26488  003C2E  6F60               	movwf	?_Read_b_eep& (0+255),b
 26489  003C30  ECCC  F007         	call	_Read_b_eep	;wreg free
 26490  003C34  6E2C               	movwf	_bHex,c
 26491                           
 26492                           ;main.c: 517: mode = Read_b_eep(0x03);
 26493  003C36  0100               	movlb	0	; () banked
 26494  003C38  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26495  003C3A  0E03               	movlw	3
 26496  003C3C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26497  003C3E  ECCC  F007         	call	_Read_b_eep	;wreg free
 26498  003C42  0101               	movlb	1	; () banked
 26499  003C44  6F2C               	movwf	_mode& (0+255),b
 26500                           
 26501                           ;main.c: 518: bLocalEcho = Read_b_eep(0x65);
 26502  003C46  0100               	movlb	0	; () banked
 26503  003C48  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26504  003C4A  0E65               	movlw	101
 26505  003C4C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26506  003C4E  ECCC  F007         	call	_Read_b_eep	;wreg free
 26507  003C52  6E2E               	movwf	_bLocalEcho,c
 26508                           
 26509                           ;main.c: 520: rwtimeout = Read_b_eep(0x09);
 26510  003C54  0100               	movlb	0	; () banked
 26511  003C56  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26512  003C58  0E09               	movlw	9
 26513  003C5A  6F60               	movwf	?_Read_b_eep& (0+255),b
 26514  003C5C  ECCC  F007         	call	_Read_b_eep	;wreg free
 26515  003C60  6E35               	movwf	_rwtimeout,c
 26516                           
 26517                           ;main.c: 525: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 26518  003C62  0E80               	movlw	128
 26519  003C64  ECEA  F007         	call	_ECANSetOperationMode
 26520                           
 26521                           ; BSR set to: 0
 26522                           ;main.c: 527: for (uint8_t i=0; i<15; i++ ) {
 26523  003C68  6B79               	clrf	init_app_ram@i& (0+255),b
 26524  003C6A                     l15268:
 26525                           
 26526                           ; BSR set to: 0
 26527                           ;main.c: 528: setFilter( i,
 26528                           ;main.c: 529: ( Read_b_eep(0x20 + i*4) << 24 ) +
 26529                           ;main.c: 530: ( Read_b_eep(0x20 + 1 + i*4) << 16 ) +
 26530                           ;main.c: 531: ( Read_b_eep(0x20 + 2 + i*4) << 8 ) +
 26531                           ;main.c: 532: ( Read_b_eep(0x20 + 3 + i*4) ) );
 26532  003C6A  5179               	movf	init_app_ram@i& (0+255),w,b
 26533  003C6C  6F71               	movwf	??_init_app_ram& (0+255),b
 26534  003C6E  6B72               	clrf	(??_init_app_ram+1)& (0+255),b
 26535  003C70  90D8               	bcf	status,0,c
 26536  003C72  3771               	rlcf	??_init_app_ram& (0+255),f,b
 26537  003C74  3772               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 26538  003C76  90D8               	bcf	status,0,c
 26539  003C78  3771               	rlcf	??_init_app_ram& (0+255),f,b
 26540  003C7A  3772               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 26541  003C7C  0E22               	movlw	34
 26542  003C7E  2571               	addwf	??_init_app_ram& (0+255),w,b
 26543  003C80  6F60               	movwf	?_Read_b_eep& (0+255),b
 26544  003C82  0E00               	movlw	0
 26545  003C84  2172               	addwfc	(??_init_app_ram+1)& (0+255),w,b
 26546  003C86  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26547  003C88  ECCC  F007         	call	_Read_b_eep	;wreg free
 26548  003C8C  0100               	movlb	0	; () banked
 26549  003C8E  6F74               	movwf	(??_init_app_ram+3)& (0+255),b
 26550  003C90  6B73               	clrf	(??_init_app_ram+2)& (0+255),b
 26551  003C92  5179               	movf	init_app_ram@i& (0+255),w,b
 26552  003C94  0D04               	mullw	4
 26553  003C96  0E20               	movlw	32
 26554  003C98  24F3               	addwf	prodl,w,c
 26555  003C9A  6F60               	movwf	?_Read_b_eep& (0+255),b
 26556  003C9C  0E00               	movlw	0
 26557  003C9E  20F4               	addwfc	prodh,w,c
 26558  003CA0  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26559  003CA2  ECCC  F007         	call	_Read_b_eep	;wreg free
 26560  003CA6  0100               	movlb	0	; () banked
 26561  003CA8  6F75               	movwf	(??_init_app_ram+4)& (0+255),b
 26562  003CAA  6B76               	clrf	(??_init_app_ram+5)& (0+255),b
 26563  003CAC  5179               	movf	init_app_ram@i& (0+255),w,b
 26564  003CAE  0D04               	mullw	4
 26565  003CB0  0E21               	movlw	33
 26566  003CB2  24F3               	addwf	prodl,w,c
 26567  003CB4  6F60               	movwf	?_Read_b_eep& (0+255),b
 26568  003CB6  0E00               	movlw	0
 26569  003CB8  20F4               	addwfc	prodh,w,c
 26570  003CBA  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26571  003CBC  ECCC  F007         	call	_Read_b_eep	;wreg free
 26572  003CC0  0100               	movlb	0	; () banked
 26573  003CC2  2775               	addwf	(??_init_app_ram+4)& (0+255),f,b
 26574  003CC4  0E00               	movlw	0
 26575  003CC6  2376               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 26576  003CC8  5173               	movf	(??_init_app_ram+2)& (0+255),w,b
 26577  003CCA  2575               	addwf	(??_init_app_ram+4)& (0+255),w,b
 26578  003CCC  6F77               	movwf	(??_init_app_ram+6)& (0+255),b
 26579  003CCE  5174               	movf	(??_init_app_ram+3)& (0+255),w,b
 26580  003CD0  2176               	addwfc	(??_init_app_ram+5)& (0+255),w,b
 26581  003CD2  6F78               	movwf	(??_init_app_ram+7)& (0+255),b
 26582  003CD4  5179               	movf	init_app_ram@i& (0+255),w,b
 26583  003CD6  0D04               	mullw	4
 26584  003CD8  0E23               	movlw	35
 26585  003CDA  24F3               	addwf	prodl,w,c
 26586  003CDC  6F60               	movwf	?_Read_b_eep& (0+255),b
 26587  003CDE  0E00               	movlw	0
 26588  003CE0  20F4               	addwfc	prodh,w,c
 26589  003CE2  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26590  003CE4  ECCC  F007         	call	_Read_b_eep	;wreg free
 26591  003CE8  0100               	movlb	0	; () banked
 26592  003CEA  2777               	addwf	(??_init_app_ram+6)& (0+255),f,b
 26593  003CEC  0E00               	movlw	0
 26594  003CEE  2378               	addwfc	(??_init_app_ram+7)& (0+255),f,b
 26595  003CF0  C077  F062         	movff	??_init_app_ram+6,?_setFilter
 26596  003CF4  C078  F063         	movff	??_init_app_ram+7,?_setFilter+1
 26597  003CF8  BF63               	btfsc	(?_setFilter+1)& (0+255),7,b
 26598  003CFA  0EFF               	movlw	-1
 26599  003CFC  6F64               	movwf	(?_setFilter+2)& (0+255),b
 26600  003CFE  6F65               	movwf	(?_setFilter+3)& (0+255),b
 26601  003D00  5179               	movf	init_app_ram@i& (0+255),w,b
 26602  003D02  ECE9  F01E         	call	_setFilter
 26603                           
 26604                           ; BSR set to: 0
 26605  003D06  2B79               	incf	init_app_ram@i& (0+255),f,b
 26606                           
 26607                           ; BSR set to: 0
 26608  003D08  0E0E               	movlw	14
 26609  003D0A  6579               	cpfsgt	init_app_ram@i& (0+255),b
 26610  003D0C  D7AE               	goto	l15268
 26611                           
 26612                           ; BSR set to: 0
 26613                           ;main.c: 533: }
 26614                           ;main.c: 535: _CANIDToRegs((BYTE*)&RXM0SIDH, ( Read_b_eep(0x60) << 24 ) + ( Read_b_eep(0
      +                          x60 + 1) << 16 ) + ( Read_b_eep(0x60 + 2) << 8 ) + ( Read_b_eep(0x60 + 3) ), 1);
 26615  003D0E  0E0F               	movlw	15	;volatile
 26616  003D10  0100               	movlb	0	; () banked
 26617  003D12  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 26618  003D14  0E18               	movlw	24	;volatile
 26619  003D16  6F62               	movwf	?__CANIDToRegs& (0+255),b
 26620  003D18  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26621  003D1A  0E62               	movlw	98
 26622  003D1C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26623  003D1E  ECCC  F007         	call	_Read_b_eep	;wreg free
 26624  003D22  0100               	movlb	0	; () banked
 26625  003D24  6F72               	movwf	(??_init_app_ram+1)& (0+255),b
 26626  003D26  6B71               	clrf	??_init_app_ram& (0+255),b
 26627  003D28  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26628  003D2A  0E60               	movlw	96
 26629  003D2C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26630  003D2E  ECCC  F007         	call	_Read_b_eep	;wreg free
 26631  003D32  0100               	movlb	0	; () banked
 26632  003D34  6F73               	movwf	(??_init_app_ram+2)& (0+255),b
 26633  003D36  6B74               	clrf	(??_init_app_ram+3)& (0+255),b
 26634  003D38  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26635  003D3A  0E61               	movlw	97
 26636  003D3C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26637  003D3E  ECCC  F007         	call	_Read_b_eep	;wreg free
 26638  003D42  D83B               	call	PL56	;call to abstracted procedure
 26639  003D44  0E63               	movlw	99
 26640  003D46  6F60               	movwf	?_Read_b_eep& (0+255),b
 26641  003D48  ECCC  F007         	call	_Read_b_eep	;wreg free
 26642  003D4C  D827               	call	PL32	;call to abstracted procedure
 26643  003D4E  EC42  F016         	call	__CANIDToRegs	;wreg free
 26644                           
 26645                           ;main.c: 541: _CANIDToRegs((BYTE*)&RXM1SIDH, ( Read_b_eep(0x64) << 24 ) + ( Read_b_eep(0
      +                          x64 + 1) << 16 ) + ( Read_b_eep(0x64 + 2) << 8 ) + ( Read_b_eep(0x64 + 3) ), 1);
 26646  003D52  0E0F               	movlw	15	;volatile
 26647  003D54  0100               	movlb	0	; () banked
 26648  003D56  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 26649  003D58  0E1C               	movlw	28	;volatile
 26650  003D5A  6F62               	movwf	?__CANIDToRegs& (0+255),b
 26651  003D5C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26652  003D5E  0E66               	movlw	102
 26653  003D60  6F60               	movwf	?_Read_b_eep& (0+255),b
 26654  003D62  ECCC  F007         	call	_Read_b_eep	;wreg free
 26655  003D66  0100               	movlb	0	; () banked
 26656  003D68  6F72               	movwf	(??_init_app_ram+1)& (0+255),b
 26657  003D6A  6B71               	clrf	??_init_app_ram& (0+255),b
 26658  003D6C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26659  003D6E  0E64               	movlw	100
 26660  003D70  6F60               	movwf	?_Read_b_eep& (0+255),b
 26661  003D72  ECCC  F007         	call	_Read_b_eep	;wreg free
 26662  003D76  0100               	movlb	0	; () banked
 26663  003D78  6F73               	movwf	(??_init_app_ram+2)& (0+255),b
 26664  003D7A  6B74               	clrf	(??_init_app_ram+3)& (0+255),b
 26665  003D7C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26666  003D7E  0E65               	movlw	101
 26667  003D80  6F60               	movwf	?_Read_b_eep& (0+255),b
 26668  003D82  ECCC  F007         	call	_Read_b_eep	;wreg free
 26669  003D86  D819               	call	PL56	;call to abstracted procedure
 26670  003D88  0E67               	movlw	103
 26671  003D8A  6F60               	movwf	?_Read_b_eep& (0+255),b
 26672  003D8C  ECCC  F007         	call	_Read_b_eep	;wreg free
 26673  003D90  D805               	call	PL32	;call to abstracted procedure
 26674  003D92  EC42  F016         	call	__CANIDToRegs	;wreg free
 26675                           
 26676                           ; BSR set to: 0
 26677                           ;main.c: 547: ECANSetOperationMode(0x20);
 26678  003D96  0E20               	movlw	32
 26679  003D98  EFEA  F007         	goto	_ECANSetOperationMode
 26680  003D9C                     __end_of_init_app_ram:
 26681                           	opt stack 0
 26682  003D9C                     PL32:
 26683                           	opt stack 23
 26684  003D9C  0100               	movlb	0	; () banked
 26685  003D9E  2775               	addwf	(??_init_app_ram+4)& (0+255),f,b
 26686  003DA0  0E00               	movlw	0
 26687  003DA2  2376               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 26688  003DA4  C075  F064         	movff	??_init_app_ram+4,?__CANIDToRegs+2
 26689  003DA8  C076  F065         	movff	??_init_app_ram+5,?__CANIDToRegs+3
 26690  003DAC  BF65               	btfsc	(?__CANIDToRegs+3)& (0+255),7,b
 26691  003DAE  0EFF               	movlw	-1
 26692  003DB0  6F66               	movwf	(?__CANIDToRegs+4)& (0+255),b
 26693  003DB2  6F67               	movwf	(?__CANIDToRegs+5)& (0+255),b
 26694  003DB4  0E01               	movlw	1
 26695  003DB6  6F68               	movwf	(?__CANIDToRegs+6)& (0+255),b
 26696  003DB8  0C01               	retlw	1
 26697  003DBA                     __end_ofPL32:
 26698                           	opt stack 0
 26699  003DBA                     PL56:
 26700                           	opt stack 23
 26701  003DBA  0100               	movlb	0	; () banked
 26702  003DBC  2773               	addwf	(??_init_app_ram+2)& (0+255),f,b
 26703  003DBE  0E00               	movlw	0
 26704  003DC0  2374               	addwfc	(??_init_app_ram+3)& (0+255),f,b
 26705  003DC2  5171               	movf	??_init_app_ram& (0+255),w,b
 26706  003DC4  2573               	addwf	(??_init_app_ram+2)& (0+255),w,b
 26707  003DC6  6F75               	movwf	(??_init_app_ram+4)& (0+255),b
 26708  003DC8  5172               	movf	(??_init_app_ram+1)& (0+255),w,b
 26709  003DCA  2174               	addwfc	(??_init_app_ram+3)& (0+255),w,b
 26710  003DCC  6F76               	movwf	(??_init_app_ram+5)& (0+255),b
 26711  003DCE  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26712  003DD0  0012               	return	
 26713  003DD2                     __end_ofPL56:
 26714                           	opt stack 0
 26715                           tblptru	equ	0xFF8
 26716                           tblptrh	equ	0xFF7
 26717                           tblptrl	equ	0xFF6
 26718                           tablat	equ	0xFF5
 26719                           prodh	equ	0xFF4
 26720                           prodl	equ	0xFF3
 26721                           intcon	equ	0xFF2
 26722                           indf0	equ	0xFEF
 26723                           postinc0	equ	0xFEE
 26724                           fsr0h	equ	0xFEA
 26725                           fsr0l	equ	0xFE9
 26726                           wreg	equ	0xFE8
 26727                           indf1	equ	0xFE7
 26728                           postinc1	equ	0xFE6
 26729                           postdec1	equ	0xFE5
 26730                           fsr1h	equ	0xFE2
 26731                           fsr1l	equ	0xFE1
 26732                           indf2	equ	0xFDF
 26733                           postinc2	equ	0xFDE
 26734                           postdec2	equ	0xFDD
 26735                           plusw2	equ	0xFDB
 26736                           fsr2h	equ	0xFDA
 26737                           fsr2l	equ	0xFD9
 26738                           status	equ	0xFD8
 26739                           
 26740 ;; *************** function __CANIDToRegs *****************
 26741 ;; Defined at:
 26742 ;;		line 1101 in file "ECAN.c"
 26743 ;; Parameters:    Size  Location     Type
 26744 ;;  ptr             2    2[BANK0 ] PTR unsigned char 
 26745 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 26746 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 26747 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 26748 ;;  val             4    4[BANK0 ] unsigned long 
 26749 ;;  type            1    8[BANK0 ] unsigned char 
 26750 ;; Auto vars:     Size  Location     Type
 26751 ;;  Value           1   11[BANK0 ] PTR struct _CAN_MESSAGE_
 26752 ;;		 -> _CANIDToRegs@val(4), 
 26753 ;; Return value:  Size  Location     Type
 26754 ;;		None               void
 26755 ;; Registers used:
 26756 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26757 ;; Tracked objects:
 26758 ;;		On entry : F/0
 26759 ;;		On exit  : F/0
 26760 ;;		Unchanged: 0/0
 26761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26762 ;;      Params:         0       7       0       0       0       0       0
 26763 ;;      Locals:         0       1       0       0       0       0       0
 26764 ;;      Temps:          0       2       0       0       0       0       0
 26765 ;;      Totals:         0      10       0       0       0       0       0
 26766 ;;Total ram usage:       10 bytes
 26767 ;; Hardware stack levels used:    1
 26768 ;; Hardware stack levels required when called:    3
 26769 ;; This function calls:
 26770 ;;		Nothing
 26771 ;; This function is called by:
 26772 ;;		_init_app_ram
 26773 ;;		_doModeVerbose
 26774 ;;		_ECANSendMessage
 26775 ;; This function uses a non-reentrant model
 26776 ;;
 26777                           
 26778                           	psect	text76
 26779  002C84                     __ptext76:
 26780                           	opt stack 0
 26781  002C84                     __CANIDToRegs:
 26782                           	opt stack 23
 26783                           
 26784                           ; BSR set to: 0
 26785                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 26786                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 26787                           
 26788                           ; BSR set to: 0
 26789                           ;incstack = 0
 26790                           ;incstack = 0
 26791  002C84  0E64               	movlw	low __CANIDToRegs@val
 26792  002C86  6F6B               	movwf	__CANIDToRegs@Value& (0+255),b
 26793                           
 26794                           ; BSR set to: 0
 26795                           ;ECAN.c: 1106: if ( type == 0 )
 26796  002C88  6768               	tstfsz	__CANIDToRegs@type& (0+255),b
 26797  002C8A  D022               	goto	l11924
 26798                           
 26799                           ; BSR set to: 0
 26800                           ;ECAN.c: 1107: {
 26801                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 26802  002C8C  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26803  002C8E  6ED9               	movwf	fsr2l,c
 26804  002C90  6ADA               	clrf	fsr2h,c
 26805  002C92  50DF               	movf	indf2,w,c
 26806  002C94  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26807  002C96  90D8               	bcf	status,0,c
 26808  002C98  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26809  002C9A  90D8               	bcf	status,0,c
 26810  002C9C  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26811  002C9E  90D8               	bcf	status,0,c
 26812  002CA0  3169               	rrcf	??__CANIDToRegs& (0+255),w,b
 26813                           
 26814                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 26815  002CA2  D862               	call	PL54	;call to abstracted procedure
 26816  002CA4  2AD9               	incf	fsr2l,f,c
 26817  002CA6  6ADA               	clrf	fsr2h,c
 26818  002CA8  D872               	call	PL108	;call to abstracted procedure
 26819  002CAA                     u14965:
 26820  002CAA  90D8               	bcf	status,0,c
 26821  002CAC  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26822  002CAE  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26823  002CB0  D7FC               	goto	u14965
 26824  002CB2  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26825                           
 26826                           ; BSR set to: 0
 26827                           ;ECAN.c: 1111: ptr++;
 26828                           
 26829                           ; BSR set to: 0
 26830                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 26831  002CB6  D846               	call	PL28	;call to abstracted procedure
 26832  002CB8  D86A               	call	PL108	;call to abstracted procedure
 26833  002CBA                     u14975:
 26834  002CBA  90D8               	bcf	status,0,c
 26835  002CBC  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26836  002CBE  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26837  002CC0  D7FC               	goto	u14975
 26838  002CC2  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26839  002CC4  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26840  002CC8  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26841  002CCC  6EDF               	movwf	indf2,c
 26842                           
 26843                           ;ECAN.c: 1113: }
 26844  002CCE  D039               	goto	l1569
 26845  002CD0                     l11924:
 26846                           
 26847                           ; BSR set to: 0
 26848                           ;ECAN.c: 1114: else
 26849                           ;ECAN.c: 1115: {
 26850                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 26851  002CD0  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26852  002CD2  D842               	call	PL46	;call to abstracted procedure
 26853  002CD4  0E05               	movlw	5
 26854  002CD6  6F6A               	movwf	(??__CANIDToRegs+1)& (0+255),b
 26855  002CD8                     u14985:
 26856  002CD8  90D8               	bcf	status,0,c
 26857  002CDA  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26858  002CDC  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26859  002CDE  D7FC               	goto	u14985
 26860  002CE0  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26861                           
 26862                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 26863  002CE2  D842               	call	PL54	;call to abstracted procedure
 26864  002CE4  0E03               	movlw	3
 26865  002CE6  D849               	call	PL68	;call to abstracted procedure
 26866  002CE8  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26867  002CEA  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26868                           
 26869                           ; BSR set to: 0
 26870                           ;ECAN.c: 1119: ptr++;
 26871                           
 26872                           ; BSR set to: 0
 26873                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 26874  002CEE  D82A               	call	PL28	;call to abstracted procedure
 26875  002CF0  0E02               	movlw	2
 26876  002CF2  D843               	call	PL68	;call to abstracted procedure
 26877  002CF4  3569               	rlcf	??__CANIDToRegs& (0+255),w,b
 26878  002CF6  0BE0               	andlw	224
 26879  002CF8  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26880  002CFC  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26881  002D00  6EDF               	movwf	indf2,c
 26882                           
 26883                           ; BSR set to: 0
 26884                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 26885  002D02  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26886  002D06  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26887  002D0A  0E00               	movlw	0
 26888  002D0C  86DB               	bsf	plusw2,3,c
 26889                           
 26890                           ; BSR set to: 0
 26891                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 26892  002D0E  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26893  002D10  D823               	call	PL46	;call to abstracted procedure
 26894  002D12  0E03               	movlw	3
 26895  002D14  1769               	andwf	??__CANIDToRegs& (0+255),f,b
 26896  002D16  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26897                           
 26898                           ;ECAN.c: 1124: ptr++;
 26899                           
 26900                           ; BSR set to: 0
 26901                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 26902  002D1A  D814               	call	PL28	;call to abstracted procedure
 26903  002D1C  2AD9               	incf	fsr2l,f,c
 26904  002D1E  6ADA               	clrf	fsr2h,c
 26905  002D20  C062  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 26906  002D24  C063  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 26907  002D28  CFDF FFE7          	movff	indf2,indf1
 26908                           
 26909                           ; BSR set to: 0
 26910                           ;ECAN.c: 1126: ptr++;
 26911  002D2C  4B62               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 26912  002D2E  2B63               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 26913                           
 26914                           ; BSR set to: 0
 26915                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 26916  002D30  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26917  002D32  6ED9               	movwf	fsr2l,c
 26918  002D34  6ADA               	clrf	fsr2h,c
 26919  002D36  C062  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 26920  002D3A  C063  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 26921  002D3E  CFDF FFE7          	movff	indf2,indf1
 26922  002D42                     l1569:
 26923                           
 26924                           ; BSR set to: 0
 26925  002D42  0012               	return	
 26926  002D44                     __end_of__CANIDToRegs:
 26927                           	opt stack 0
 26928  002D44                     PL28:
 26929                           	opt stack 23
 26930  002D44  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26931  002D48  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26932  002D4A  12DF               	iorwf	indf2,f,c
 26933  002D4C  4B62               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 26934  002D4E  2B63               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 26935  002D50  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26936  002D52  6ED9               	movwf	fsr2l,c
 26937  002D54  6ADA               	clrf	fsr2h,c
 26938  002D56  0012               	return	
 26939  002D58                     __end_ofPL28:
 26940                           	opt stack 0
 26941  002D58                     PL46:
 26942                           	opt stack 23
 26943  002D58  6ED9               	movwf	fsr2l,c
 26944  002D5A  6ADA               	clrf	fsr2h,c
 26945  002D5C  0E02               	movlw	2
 26946  002D5E  26D9               	addwf	fsr2l,f,c
 26947  002D60  6ADA               	clrf	fsr2h,c
 26948  002D62  50DF               	movf	indf2,w,c
 26949  002D64  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26950  002D66  0012               	return	
 26951  002D68                     __end_ofPL46:
 26952                           	opt stack 0
 26953  002D68                     PL54:
 26954                           	opt stack 23
 26955  002D68  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26956  002D6C  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26957  002D70  6EDF               	movwf	indf2,c
 26958  002D72  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26959  002D74  6ED9               	movwf	fsr2l,c
 26960  002D76  6ADA               	clrf	fsr2h,c
 26961  002D78  0012               	return	
 26962  002D7A                     __end_ofPL54:
 26963                           	opt stack 0
 26964  002D7A                     PL68:
 26965                           	opt stack 23
 26966  002D7A  26D9               	addwf	fsr2l,f,c
 26967  002D7C  6ADA               	clrf	fsr2h,c
 26968  002D7E  50DF               	movf	indf2,w,c
 26969  002D80  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26970  002D82  90D8               	bcf	status,0,c
 26971  002D84  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26972  002D86  90D8               	bcf	status,0,c
 26973  002D88  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26974  002D8A  90D8               	bcf	status,0,c
 26975  002D8C  0012               	return	
 26976  002D8E                     __end_ofPL68:
 26977                           	opt stack 0
 26978  002D8E                     PL108:
 26979                           	opt stack 23
 26980  002D8E  50DF               	movf	indf2,w,c
 26981  002D90  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26982  002D92  0E05               	movlw	5
 26983  002D94  6F6A               	movwf	(??__CANIDToRegs+1)& (0+255),b
 26984  002D96  0C05               	retlw	5
 26985  002D98                     __end_ofPL108:
 26986                           	opt stack 0
 26987                           tblptru	equ	0xFF8
 26988                           tblptrh	equ	0xFF7
 26989                           tblptrl	equ	0xFF6
 26990                           tablat	equ	0xFF5
 26991                           prodh	equ	0xFF4
 26992                           prodl	equ	0xFF3
 26993                           intcon	equ	0xFF2
 26994                           indf0	equ	0xFEF
 26995                           postinc0	equ	0xFEE
 26996                           fsr0h	equ	0xFEA
 26997                           fsr0l	equ	0xFE9
 26998                           wreg	equ	0xFE8
 26999                           indf1	equ	0xFE7
 27000                           postinc1	equ	0xFE6
 27001                           postdec1	equ	0xFE5
 27002                           fsr1h	equ	0xFE2
 27003                           fsr1l	equ	0xFE1
 27004                           indf2	equ	0xFDF
 27005                           postinc2	equ	0xFDE
 27006                           postdec2	equ	0xFDD
 27007                           plusw2	equ	0xFDB
 27008                           fsr2h	equ	0xFDA
 27009                           fsr2l	equ	0xFD9
 27010                           status	equ	0xFD8
 27011                           
 27012 ;; *************** function _setFilter *****************
 27013 ;; Defined at:
 27014 ;;		line 3003 in file "main.c"
 27015 ;; Parameters:    Size  Location     Type
 27016 ;;  filter          1    wreg     unsigned char 
 27017 ;;  val             4    2[BANK0 ] unsigned long 
 27018 ;; Auto vars:     Size  Location     Type
 27019 ;;  filter          1   12[BANK0 ] unsigned char 
 27020 ;;  eidl            1   16[BANK0 ] unsigned char 
 27021 ;;  eidh            1   15[BANK0 ] unsigned char 
 27022 ;;  sidl            1   14[BANK0 ] unsigned char 
 27023 ;;  sidh            1   13[BANK0 ] unsigned char 
 27024 ;; Return value:  Size  Location     Type
 27025 ;;		None               void
 27026 ;; Registers used:
 27027 ;;		wreg, status,2, status,0
 27028 ;; Tracked objects:
 27029 ;;		On entry : D/2
 27030 ;;		On exit  : F/0
 27031 ;;		Unchanged: 0/0
 27032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27033 ;;      Params:         0       4       0       0       0       0       0
 27034 ;;      Locals:         0       5       0       0       0       0       0
 27035 ;;      Temps:          0       6       0       0       0       0       0
 27036 ;;      Totals:         0      15       0       0       0       0       0
 27037 ;;Total ram usage:       15 bytes
 27038 ;; Hardware stack levels used:    1
 27039 ;; Hardware stack levels required when called:    3
 27040 ;; This function calls:
 27041 ;;		Nothing
 27042 ;; This function is called by:
 27043 ;;		_init_app_ram
 27044 ;;		_doModeVerbose
 27045 ;; This function uses a non-reentrant model
 27046 ;;
 27047                           
 27048                           	psect	text77
 27049  003DD2                     __ptext77:
 27050                           	opt stack 0
 27051  003DD2                     _setFilter:
 27052                           	opt stack 25
 27053                           
 27054                           ; BSR set to: 0
 27055                           ;incstack = 0
 27056                           ;incstack = 0
 27057                           ;setFilter@filter stored from wreg
 27058  003DD2  CFE8 F06C          	movff	wreg,setFilter@filter
 27059                           
 27060                           ;main.c: 3004: uint8_t sidh = (long) val >> 21L;
 27061  003DD6  0E15               	movlw	21
 27062  003DD8  0100               	movlb	0	; () banked
 27063  003DDA  6F66               	movwf	??_setFilter& (0+255),b
 27064  003DDC  C062  F067         	movff	setFilter@val,??_setFilter+1
 27065  003DE0  C063  F068         	movff	setFilter@val+1,??_setFilter+2
 27066  003DE4  C064  F069         	movff	setFilter@val+2,??_setFilter+3
 27067  003DE8  C065  F06A         	movff	setFilter@val+3,??_setFilter+4
 27068  003DEC                     u14935:
 27069  003DEC  6766               	tstfsz	??_setFilter& (0+255),b
 27070  003DEE  D001               	goto	u14936
 27071  003DF0  D007               	goto	u14937
 27072  003DF2                     u14936:
 27073  003DF2  356A               	rlcf	(??_setFilter+4)& (0+255),w,b
 27074  003DF4  336A               	rrcf	(??_setFilter+4)& (0+255),f,b
 27075  003DF6  3369               	rrcf	(??_setFilter+3)& (0+255),f,b
 27076  003DF8  3368               	rrcf	(??_setFilter+2)& (0+255),f,b
 27077  003DFA  3367               	rrcf	(??_setFilter+1)& (0+255),f,b
 27078  003DFC  2F66               	decfsz	??_setFilter& (0+255),f,b
 27079  003DFE  D7F6               	goto	u14935
 27080  003E00                     u14937:
 27081  003E00  5167               	movf	(??_setFilter+1)& (0+255),w,b
 27082  003E02  6F6D               	movwf	setFilter@sidh& (0+255),b
 27083                           
 27084                           ;main.c: 3005: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 27085                           ;main.c: 3006: ((long) (val) & 0x03L) |
 27086                           ;main.c: 3007: 0x08;
 27087  003E04  C062  F066         	movff	setFilter@val,??_setFilter
 27088  003E08  0E03               	movlw	3
 27089  003E0A  1766               	andwf	??_setFilter& (0+255),f,b
 27090  003E0C  0E0D               	movlw	13
 27091  003E0E  6F67               	movwf	(??_setFilter+1)& (0+255),b
 27092  003E10  C062  F068         	movff	setFilter@val,??_setFilter+2
 27093  003E14  C063  F069         	movff	setFilter@val+1,??_setFilter+3
 27094  003E18  C064  F06A         	movff	setFilter@val+2,??_setFilter+4
 27095  003E1C  C065  F06B         	movff	setFilter@val+3,??_setFilter+5
 27096  003E20                     u14945:
 27097  003E20  6767               	tstfsz	(??_setFilter+1)& (0+255),b
 27098  003E22  D001               	goto	u14946
 27099  003E24  D007               	goto	u14947
 27100  003E26                     u14946:
 27101  003E26  356B               	rlcf	(??_setFilter+5)& (0+255),w,b
 27102  003E28  336B               	rrcf	(??_setFilter+5)& (0+255),f,b
 27103  003E2A  336A               	rrcf	(??_setFilter+4)& (0+255),f,b
 27104  003E2C  3369               	rrcf	(??_setFilter+3)& (0+255),f,b
 27105  003E2E  3368               	rrcf	(??_setFilter+2)& (0+255),f,b
 27106  003E30  2F67               	decfsz	(??_setFilter+1)& (0+255),f,b
 27107  003E32  D7F6               	goto	u14945
 27108  003E34                     u14947:
 27109  003E34  5168               	movf	(??_setFilter+2)& (0+255),w,b
 27110  003E36  0BE0               	andlw	224
 27111  003E38  1166               	iorwf	??_setFilter& (0+255),w,b
 27112  003E3A  0908               	iorlw	8
 27113  003E3C  6F6E               	movwf	setFilter@sidl& (0+255),b
 27114                           
 27115                           ; BSR set to: 0
 27116                           ;main.c: 3008: uint8_t eidh = (long) val >> 8L;
 27117  003E3E  C063  F06F         	movff	setFilter@val+1,setFilter@eidh
 27118                           
 27119                           ; BSR set to: 0
 27120                           ;main.c: 3009: uint8_t eidl = val;
 27121  003E42  C062  F070         	movff	setFilter@val,setFilter@eidl
 27122                           
 27123                           ;main.c: 3011: switch (filter) {
 27124  003E46  D090               	goto	l11912
 27125  003E48                     l1310:
 27126                           
 27127                           ; BSR set to: 0
 27128                           ;main.c: 3014: RXF0SIDH = sidh;
 27129  003E48  C06D  FF00         	movff	setFilter@sidh,3840	;volatile
 27130                           
 27131                           ;main.c: 3015: RXF0SIDL = sidl;
 27132  003E4C  C06E  FF01         	movff	setFilter@sidl,3841	;volatile
 27133                           
 27134                           ;main.c: 3016: RXF0EIDH = eidh;
 27135  003E50  C06F  FF02         	movff	setFilter@eidh,3842	;volatile
 27136                           
 27137                           ;main.c: 3017: RXF0EIDL = eidl;
 27138  003E54  C070  FF03         	movff	setFilter@eidl,3843	;volatile
 27139                           
 27140                           ;main.c: 3018: break;
 27141  003E58  D0AA               	goto	l1327
 27142  003E5A                     l1312:
 27143                           
 27144                           ; BSR set to: 0
 27145                           ;main.c: 3021: RXF1SIDH = sidh;
 27146  003E5A  C06D  FF04         	movff	setFilter@sidh,3844	;volatile
 27147                           
 27148                           ;main.c: 3022: RXF1SIDL = sidl;
 27149  003E5E  C06E  FF05         	movff	setFilter@sidl,3845	;volatile
 27150                           
 27151                           ;main.c: 3023: RXF1EIDH = eidh;
 27152  003E62  C06F  FF06         	movff	setFilter@eidh,3846	;volatile
 27153                           
 27154                           ;main.c: 3024: RXF1EIDL = eidl;
 27155  003E66  C070  FF07         	movff	setFilter@eidl,3847	;volatile
 27156                           
 27157                           ;main.c: 3025: break;
 27158  003E6A  D0A1               	goto	l1327
 27159  003E6C                     l1313:
 27160                           
 27161                           ; BSR set to: 0
 27162                           ;main.c: 3028: RXF2SIDH = sidh;
 27163  003E6C  C06D  FF08         	movff	setFilter@sidh,3848	;volatile
 27164                           
 27165                           ;main.c: 3029: RXF2SIDL = sidl;
 27166  003E70  C06E  FF09         	movff	setFilter@sidl,3849	;volatile
 27167                           
 27168                           ;main.c: 3030: RXF2EIDH = eidh;
 27169  003E74  C06F  FF0A         	movff	setFilter@eidh,3850	;volatile
 27170                           
 27171                           ;main.c: 3031: RXF2EIDL = eidl;
 27172  003E78  C070  FF0B         	movff	setFilter@eidl,3851	;volatile
 27173                           
 27174                           ;main.c: 3032: break;
 27175  003E7C  D098               	goto	l1327
 27176  003E7E                     l1314:
 27177                           
 27178                           ; BSR set to: 0
 27179                           ;main.c: 3035: RXF3SIDH = sidh;
 27180  003E7E  C06D  FF0C         	movff	setFilter@sidh,3852	;volatile
 27181                           
 27182                           ;main.c: 3036: RXF3SIDL = sidl;
 27183  003E82  C06E  FF0D         	movff	setFilter@sidl,3853	;volatile
 27184                           
 27185                           ;main.c: 3037: RXF3EIDH = eidh;
 27186  003E86  C06F  FF0E         	movff	setFilter@eidh,3854	;volatile
 27187                           
 27188                           ;main.c: 3038: RXF3EIDL = eidl;
 27189  003E8A  C070  FF0F         	movff	setFilter@eidl,3855	;volatile
 27190                           
 27191                           ;main.c: 3039: break;
 27192  003E8E  D08F               	goto	l1327
 27193  003E90                     l1315:
 27194                           
 27195                           ; BSR set to: 0
 27196                           ;main.c: 3042: RXF4SIDH = sidh;
 27197  003E90  C06D  FF10         	movff	setFilter@sidh,3856	;volatile
 27198                           
 27199                           ;main.c: 3043: RXF4SIDL = sidl;
 27200  003E94  C06E  FF11         	movff	setFilter@sidl,3857	;volatile
 27201                           
 27202                           ;main.c: 3044: RXF4EIDH = eidh;
 27203  003E98  C06F  FF12         	movff	setFilter@eidh,3858	;volatile
 27204                           
 27205                           ;main.c: 3045: RXF4EIDL = eidl;
 27206  003E9C  C070  FF13         	movff	setFilter@eidl,3859	;volatile
 27207                           
 27208                           ;main.c: 3046: break;
 27209  003EA0  D086               	goto	l1327
 27210  003EA2                     l1316:
 27211                           
 27212                           ; BSR set to: 0
 27213                           ;main.c: 3049: RXF5SIDH = sidh;
 27214  003EA2  C06D  FF14         	movff	setFilter@sidh,3860	;volatile
 27215                           
 27216                           ;main.c: 3050: RXF5SIDL = sidl;
 27217  003EA6  C06E  FF15         	movff	setFilter@sidl,3861	;volatile
 27218                           
 27219                           ;main.c: 3051: RXF5EIDH = eidh;
 27220  003EAA  C06F  FF16         	movff	setFilter@eidh,3862	;volatile
 27221                           
 27222                           ;main.c: 3052: RXF5EIDL = eidl;
 27223  003EAE  C070  FF17         	movff	setFilter@eidl,3863	;volatile
 27224                           
 27225                           ;main.c: 3053: break;
 27226  003EB2  D07D               	goto	l1327
 27227  003EB4                     l1317:
 27228                           
 27229                           ; BSR set to: 0
 27230                           ;main.c: 3056: RXF6SIDH = sidh;
 27231  003EB4  C06D  FD60         	movff	setFilter@sidh,3424	;volatile
 27232                           
 27233                           ;main.c: 3057: RXF6SIDL = sidl;
 27234  003EB8  C06E  FD61         	movff	setFilter@sidl,3425	;volatile
 27235                           
 27236                           ;main.c: 3058: RXF6EIDH = eidh;
 27237  003EBC  C06F  FD62         	movff	setFilter@eidh,3426	;volatile
 27238                           
 27239                           ;main.c: 3059: RXF6EIDL = eidl;
 27240  003EC0  C070  FD63         	movff	setFilter@eidl,3427	;volatile
 27241                           
 27242                           ;main.c: 3060: break;
 27243  003EC4  D074               	goto	l1327
 27244  003EC6                     l1318:
 27245                           
 27246                           ; BSR set to: 0
 27247                           ;main.c: 3063: RXF7SIDH = sidh;
 27248  003EC6  C06D  FD64         	movff	setFilter@sidh,3428	;volatile
 27249                           
 27250                           ;main.c: 3064: RXF7SIDL = sidl;
 27251  003ECA  C06E  FD65         	movff	setFilter@sidl,3429	;volatile
 27252                           
 27253                           ;main.c: 3065: RXF7EIDH = eidh;
 27254  003ECE  C06F  FD66         	movff	setFilter@eidh,3430	;volatile
 27255                           
 27256                           ;main.c: 3066: RXF7EIDL = eidl;
 27257  003ED2  C070  FD67         	movff	setFilter@eidl,3431	;volatile
 27258                           
 27259                           ;main.c: 3067: break;
 27260  003ED6  D06B               	goto	l1327
 27261  003ED8                     l1319:
 27262                           
 27263                           ; BSR set to: 0
 27264                           ;main.c: 3070: RXF8SIDH = sidh;
 27265  003ED8  C06D  FD68         	movff	setFilter@sidh,3432	;volatile
 27266                           
 27267                           ;main.c: 3071: RXF8SIDL = sidl;
 27268  003EDC  C06E  FD69         	movff	setFilter@sidl,3433	;volatile
 27269                           
 27270                           ;main.c: 3072: RXF8EIDH = eidh;
 27271  003EE0  C06F  FD6A         	movff	setFilter@eidh,3434	;volatile
 27272                           
 27273                           ;main.c: 3073: RXF8EIDL = eidl;
 27274  003EE4  C070  FD6B         	movff	setFilter@eidl,3435	;volatile
 27275                           
 27276                           ;main.c: 3074: break;
 27277  003EE8  D062               	goto	l1327
 27278  003EEA                     l1320:
 27279                           
 27280                           ; BSR set to: 0
 27281                           ;main.c: 3077: RXF9SIDH = sidh;
 27282  003EEA  C06D  FD70         	movff	setFilter@sidh,3440	;volatile
 27283                           
 27284                           ;main.c: 3078: RXF9SIDL = sidl;
 27285  003EEE  C06E  FD71         	movff	setFilter@sidl,3441	;volatile
 27286                           
 27287                           ;main.c: 3079: RXF9EIDH = eidh;
 27288  003EF2  C06F  FD72         	movff	setFilter@eidh,3442	;volatile
 27289                           
 27290                           ;main.c: 3080: RXF9EIDL = eidl;
 27291  003EF6  C070  FD73         	movff	setFilter@eidl,3443	;volatile
 27292                           
 27293                           ;main.c: 3081: break;
 27294  003EFA  D059               	goto	l1327
 27295  003EFC                     l1321:
 27296                           
 27297                           ; BSR set to: 0
 27298                           ;main.c: 3084: RXF10SIDH = sidh;
 27299  003EFC  C06D  FD74         	movff	setFilter@sidh,3444	;volatile
 27300                           
 27301                           ;main.c: 3085: RXF10SIDL = sidl;
 27302  003F00  C06E  FD75         	movff	setFilter@sidl,3445	;volatile
 27303                           
 27304                           ;main.c: 3086: RXF10EIDH = eidh;
 27305  003F04  C06F  FD76         	movff	setFilter@eidh,3446	;volatile
 27306                           
 27307                           ;main.c: 3087: RXF10EIDL = eidl;
 27308  003F08  C070  FD77         	movff	setFilter@eidl,3447	;volatile
 27309                           
 27310                           ;main.c: 3088: break;
 27311  003F0C  D050               	goto	l1327
 27312  003F0E                     l1322:
 27313                           
 27314                           ; BSR set to: 0
 27315                           ;main.c: 3091: RXF11SIDH = sidh;
 27316  003F0E  C06D  FD78         	movff	setFilter@sidh,3448	;volatile
 27317                           
 27318                           ;main.c: 3092: RXF11SIDL = sidl;
 27319  003F12  C06E  FD79         	movff	setFilter@sidl,3449	;volatile
 27320                           
 27321                           ;main.c: 3093: RXF11EIDH = eidh;
 27322  003F16  C06F  FD7A         	movff	setFilter@eidh,3450	;volatile
 27323                           
 27324                           ;main.c: 3094: RXF11EIDL = eidl;
 27325  003F1A  C070  FD7B         	movff	setFilter@eidl,3451	;volatile
 27326                           
 27327                           ;main.c: 3095: break;
 27328  003F1E  D047               	goto	l1327
 27329  003F20                     l1323:
 27330                           
 27331                           ; BSR set to: 0
 27332                           ;main.c: 3098: RXF12SIDH = sidh;
 27333  003F20  C06D  FD80         	movff	setFilter@sidh,3456	;volatile
 27334                           
 27335                           ;main.c: 3099: RXF12SIDL = sidl;
 27336  003F24  C06E  FD81         	movff	setFilter@sidl,3457	;volatile
 27337                           
 27338                           ;main.c: 3100: RXF12EIDH = eidh;
 27339  003F28  C06F  FD82         	movff	setFilter@eidh,3458	;volatile
 27340                           
 27341                           ;main.c: 3101: RXF12EIDL = eidl;
 27342  003F2C  C070  FD83         	movff	setFilter@eidl,3459	;volatile
 27343                           
 27344                           ;main.c: 3102: break;
 27345  003F30  D03E               	goto	l1327
 27346  003F32                     l1324:
 27347                           
 27348                           ; BSR set to: 0
 27349                           ;main.c: 3105: RXF13SIDH = sidh;
 27350  003F32  C06D  FD84         	movff	setFilter@sidh,3460	;volatile
 27351                           
 27352                           ;main.c: 3106: RXF13SIDL = sidl;
 27353  003F36  C06E  FD85         	movff	setFilter@sidl,3461	;volatile
 27354                           
 27355                           ;main.c: 3107: RXF13EIDH = eidh;
 27356  003F3A  C06F  FD86         	movff	setFilter@eidh,3462	;volatile
 27357                           
 27358                           ;main.c: 3108: RXF13EIDL = eidl;
 27359  003F3E  C070  FD87         	movff	setFilter@eidl,3463	;volatile
 27360                           
 27361                           ;main.c: 3109: break;
 27362  003F42  D035               	goto	l1327
 27363  003F44                     l1325:
 27364                           
 27365                           ; BSR set to: 0
 27366                           ;main.c: 3112: RXF14SIDH = sidh;
 27367  003F44  C06D  FD88         	movff	setFilter@sidh,3464	;volatile
 27368                           
 27369                           ;main.c: 3113: RXF14SIDL = sidl;
 27370  003F48  C06E  FD89         	movff	setFilter@sidl,3465	;volatile
 27371                           
 27372                           ;main.c: 3114: RXF14EIDH = eidh;
 27373  003F4C  C06F  FD8A         	movff	setFilter@eidh,3466	;volatile
 27374                           
 27375                           ;main.c: 3115: RXF14EIDL = eidl;
 27376  003F50  C070  FD8B         	movff	setFilter@eidl,3467	;volatile
 27377                           
 27378                           ;main.c: 3116: break;
 27379  003F54  D02C               	goto	l1327
 27380  003F56                     l1326:
 27381                           
 27382                           ; BSR set to: 0
 27383                           ;main.c: 3119: RXF15SIDH = sidh;
 27384  003F56  C06D  FD90         	movff	setFilter@sidh,3472	;volatile
 27385                           
 27386                           ;main.c: 3120: RXF15SIDL = sidl;
 27387  003F5A  C06E  FD91         	movff	setFilter@sidl,3473	;volatile
 27388                           
 27389                           ;main.c: 3121: RXF15EIDH = eidh;
 27390  003F5E  C06F  FD92         	movff	setFilter@eidh,3474	;volatile
 27391                           
 27392                           ;main.c: 3122: RXF15EIDL = eidl;
 27393  003F62  C070  FD93         	movff	setFilter@eidl,3475	;volatile
 27394                           
 27395                           ;main.c: 3123: break;
 27396  003F66  D023               	goto	l1327
 27397  003F68                     l11912:
 27398                           
 27399                           ; BSR set to: 0
 27400  003F68  516C               	movf	setFilter@filter& (0+255),w,b
 27401                           
 27402                           ; Switch size 1, requested type "space"
 27403                           ; Number of cases is 16, Range of values is 0 to 15
 27404                           ; switch strategies available:
 27405                           ; Name         Instructions Cycles
 27406                           ; simple_byte           49    25 (average)
 27407                           ;	Chosen strategy is simple_byte
 27408  003F6A  E101 D76D          	bz	l1310
 27409  003F6E  0A01               	xorlw	1	; case 1
 27410  003F70  E101 D773          	bz	l1312
 27411  003F74  0A03               	xorlw	3	; case 2
 27412  003F76  E101 D779          	bz	l1313
 27413  003F7A  0A01               	xorlw	1	; case 3
 27414  003F7C  E080               	bz	l1314
 27415  003F7E  0A07               	xorlw	7	; case 4
 27416  003F80  E087               	bz	l1315
 27417  003F82  0A01               	xorlw	1	; case 5
 27418  003F84  E08E               	bz	l1316
 27419  003F86  0A03               	xorlw	3	; case 6
 27420  003F88  E095               	bz	l1317
 27421  003F8A  0A01               	xorlw	1	; case 7
 27422  003F8C  E09C               	bz	l1318
 27423  003F8E  0A0F               	xorlw	15	; case 8
 27424  003F90  E0A3               	bz	l1319
 27425  003F92  0A01               	xorlw	1	; case 9
 27426  003F94  E0AA               	bz	l1320
 27427  003F96  0A03               	xorlw	3	; case 10
 27428  003F98  E0B1               	bz	l1321
 27429  003F9A  0A01               	xorlw	1	; case 11
 27430  003F9C  E0B8               	bz	l1322
 27431  003F9E  0A07               	xorlw	7	; case 12
 27432  003FA0  E0BF               	bz	l1323
 27433  003FA2  0A01               	xorlw	1	; case 13
 27434  003FA4  E0C6               	bz	l1324
 27435  003FA6  0A03               	xorlw	3	; case 14
 27436  003FA8  E0CD               	bz	l1325
 27437  003FAA  0A01               	xorlw	1	; case 15
 27438  003FAC  E0D4               	bz	l1326
 27439  003FAE                     l1327:
 27440                           
 27441                           ; BSR set to: 0
 27442  003FAE  0012               	return	
 27443  003FB0                     __end_of_setFilter:
 27444                           	opt stack 0
 27445                           tblptru	equ	0xFF8
 27446                           tblptrh	equ	0xFF7
 27447                           tblptrl	equ	0xFF6
 27448                           tablat	equ	0xFF5
 27449                           prodh	equ	0xFF4
 27450                           prodl	equ	0xFF3
 27451                           intcon	equ	0xFF2
 27452                           indf0	equ	0xFEF
 27453                           postinc0	equ	0xFEE
 27454                           fsr0h	equ	0xFEA
 27455                           fsr0l	equ	0xFE9
 27456                           wreg	equ	0xFE8
 27457                           indf1	equ	0xFE7
 27458                           postinc1	equ	0xFE6
 27459                           postdec1	equ	0xFE5
 27460                           fsr1h	equ	0xFE2
 27461                           fsr1l	equ	0xFE1
 27462                           indf2	equ	0xFDF
 27463                           postinc2	equ	0xFDE
 27464                           postdec2	equ	0xFDD
 27465                           plusw2	equ	0xFDB
 27466                           fsr2h	equ	0xFDA
 27467                           fsr2l	equ	0xFD9
 27468                           status	equ	0xFD8
 27469                           
 27470 ;; *************** function _ECANSetOperationMode *****************
 27471 ;; Defined at:
 27472 ;;		line 1014 in file "ECAN.c"
 27473 ;; Parameters:    Size  Location     Type
 27474 ;;  mode            1    wreg     enum E16346
 27475 ;; Auto vars:     Size  Location     Type
 27476 ;;  mode            1    0[BANK0 ] enum E16346
 27477 ;; Return value:  Size  Location     Type
 27478 ;;		None               void
 27479 ;; Registers used:
 27480 ;;		wreg, status,2, status,0
 27481 ;; Tracked objects:
 27482 ;;		On entry : 0/1
 27483 ;;		On exit  : F/0
 27484 ;;		Unchanged: 0/0
 27485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27486 ;;      Params:         0       0       0       0       0       0       0
 27487 ;;      Locals:         0       1       0       0       0       0       0
 27488 ;;      Temps:          0       0       0       0       0       0       0
 27489 ;;      Totals:         0       1       0       0       0       0       0
 27490 ;;Total ram usage:        1 bytes
 27491 ;; Hardware stack levels used:    1
 27492 ;; Hardware stack levels required when called:    3
 27493 ;; This function calls:
 27494 ;;		Nothing
 27495 ;; This function is called by:
 27496 ;;		_main
 27497 ;;		_init_app_ram
 27498 ;;		_doModeVerbose
 27499 ;;		_doModeVscp
 27500 ;;		_doModeSLCAN
 27501 ;;		_ECANInitialize
 27502 ;; This function uses a non-reentrant model
 27503 ;;
 27504                           
 27505                           	psect	text78
 27506  000FD4                     __ptext78:
 27507                           	opt stack 0
 27508  000FD4                     _ECANSetOperationMode:
 27509                           	opt stack 25
 27510                           
 27511                           ; BSR set to: 0
 27512                           ;incstack = 0
 27513                           ;incstack = 0
 27514                           ;ECANSetOperationMode@mode stored from wreg
 27515  000FD4  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 27516                           
 27517                           ;ECAN.c: 1015: CANCON &= 0x1F;
 27518  000FD8  0E1F               	movlw	31
 27519  000FDA  166F               	andwf	3951,f,c	;volatile
 27520                           
 27521                           ;ECAN.c: 1016: CANCON |= mode;
 27522  000FDC  0100               	movlb	0	; () banked
 27523  000FDE  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 27524  000FE0  126F               	iorwf	3951,f,c	;volatile
 27525  000FE2                     l14186:
 27526                           
 27527                           ; BSR set to: 0
 27528  000FE2  506F               	movf	3951,w,c	;volatile
 27529  000FE4  0BE0               	andlw	224
 27530  000FE6  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 27531  000FE8  B4D8               	btfsc	status,2,c
 27532                           
 27533                           ; BSR set to: 0
 27534  000FEA  0012               	return	
 27535  000FEC  D7FA               	goto	l14186
 27536  000FEE                     __end_of_ECANSetOperationMode:
 27537                           	opt stack 0
 27538                           tblptru	equ	0xFF8
 27539                           tblptrh	equ	0xFF7
 27540                           tblptrl	equ	0xFF6
 27541                           tablat	equ	0xFF5
 27542                           prodh	equ	0xFF4
 27543                           prodl	equ	0xFF3
 27544                           intcon	equ	0xFF2
 27545                           indf0	equ	0xFEF
 27546                           postinc0	equ	0xFEE
 27547                           fsr0h	equ	0xFEA
 27548                           fsr0l	equ	0xFE9
 27549                           wreg	equ	0xFE8
 27550                           indf1	equ	0xFE7
 27551                           postinc1	equ	0xFE6
 27552                           postdec1	equ	0xFE5
 27553                           fsr1h	equ	0xFE2
 27554                           fsr1l	equ	0xFE1
 27555                           indf2	equ	0xFDF
 27556                           postinc2	equ	0xFDE
 27557                           postdec2	equ	0xFDD
 27558                           plusw2	equ	0xFDB
 27559                           fsr2h	equ	0xFDA
 27560                           fsr2l	equ	0xFD9
 27561                           status	equ	0xFD8
 27562                           
 27563 ;; *************** function _Read_b_eep *****************
 27564 ;; Defined at:
 27565 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 27566 ;; Parameters:    Size  Location     Type
 27567 ;;  badd            2    0[BANK0 ] unsigned int 
 27568 ;; Auto vars:     Size  Location     Type
 27569 ;;		None
 27570 ;; Return value:  Size  Location     Type
 27571 ;;                  1    wreg      unsigned char 
 27572 ;; Registers used:
 27573 ;;		wreg, status,2
 27574 ;; Tracked objects:
 27575 ;;		On entry : F/0
 27576 ;;		On exit  : 0/0
 27577 ;;		Unchanged: 0/0
 27578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27579 ;;      Params:         0       2       0       0       0       0       0
 27580 ;;      Locals:         0       0       0       0       0       0       0
 27581 ;;      Temps:          0       0       0       0       0       0       0
 27582 ;;      Totals:         0       2       0       0       0       0       0
 27583 ;;Total ram usage:        2 bytes
 27584 ;; Hardware stack levels used:    1
 27585 ;; Hardware stack levels required when called:    3
 27586 ;; This function calls:
 27587 ;;		Nothing
 27588 ;; This function is called by:
 27589 ;;		_main
 27590 ;;		_init_app_ram
 27591 ;; This function uses a non-reentrant model
 27592 ;;
 27593                           
 27594                           	psect	text79
 27595  000F98                     __ptext79:
 27596                           	opt stack 0
 27597  000F98                     _Read_b_eep:
 27598                           	opt stack 23
 27599                           
 27600                           ; BSR set to: 0
 27601                           
 27602                           ; BSR set to: 0
 27603                           ;incstack = 0
 27604                           ;incstack = 0
 27605  000F98  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 27606  000F9C  9CA6               	bcf	4006,6,c	;volatile
 27607  000F9E  9EA6               	bcf	4006,7,c	;volatile
 27608  000FA0  80A6               	bsf	4006,0,c	;volatile
 27609  000FA2  F000               	nop		;# 
 27610  000FA4  F000               	nop		;# 
 27611  000FA6  50A8               	movf	4008,w,c	;volatile
 27612  000FA8  0012               	return	
 27613  000FAA                     __end_of_Read_b_eep:
 27614                           	opt stack 0
 27615                           tblptru	equ	0xFF8
 27616                           tblptrh	equ	0xFF7
 27617                           tblptrl	equ	0xFF6
 27618                           tablat	equ	0xFF5
 27619                           prodh	equ	0xFF4
 27620                           prodl	equ	0xFF3
 27621                           intcon	equ	0xFF2
 27622                           indf0	equ	0xFEF
 27623                           postinc0	equ	0xFEE
 27624                           fsr0h	equ	0xFEA
 27625                           fsr0l	equ	0xFE9
 27626                           wreg	equ	0xFE8
 27627                           indf1	equ	0xFE7
 27628                           postinc1	equ	0xFE6
 27629                           postdec1	equ	0xFE5
 27630                           fsr1h	equ	0xFE2
 27631                           fsr1l	equ	0xFE1
 27632                           indf2	equ	0xFDF
 27633                           postinc2	equ	0xFDE
 27634                           postdec2	equ	0xFDD
 27635                           plusw2	equ	0xFDB
 27636                           fsr2h	equ	0xFDA
 27637                           fsr2l	equ	0xFD9
 27638                           status	equ	0xFD8
 27639                           
 27640 ;; *************** function _WriteTimer0 *****************
 27641 ;; Defined at:
 27642 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27643 ;; Parameters:    Size  Location     Type
 27644 ;;  timer0          2    0[BANK0 ] unsigned int 
 27645 ;; Auto vars:     Size  Location     Type
 27646 ;;  timer           2    2[BANK0 ] struct Timers
 27647 ;; Return value:  Size  Location     Type
 27648 ;;		None               void
 27649 ;; Registers used:
 27650 ;;		None
 27651 ;; Tracked objects:
 27652 ;;		On entry : F/0
 27653 ;;		On exit  : F/0
 27654 ;;		Unchanged: F/0
 27655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27656 ;;      Params:         0       2       0       0       0       0       0
 27657 ;;      Locals:         0       2       0       0       0       0       0
 27658 ;;      Temps:          0       0       0       0       0       0       0
 27659 ;;      Totals:         0       4       0       0       0       0       0
 27660 ;;Total ram usage:        4 bytes
 27661 ;; Hardware stack levels used:    1
 27662 ;; Hardware stack levels required when called:    3
 27663 ;; This function calls:
 27664 ;;		Nothing
 27665 ;; This function is called by:
 27666 ;;		_init
 27667 ;; This function uses a non-reentrant model
 27668 ;;
 27669                           
 27670                           	psect	text80
 27671  000F86                     __ptext80:
 27672                           	opt stack 0
 27673  000F86                     _WriteTimer0:
 27674                           	opt stack 25
 27675                           
 27676                           ; BSR set to: 0
 27677                           
 27678                           ;incstack = 0
 27679                           ;incstack = 0
 27680  000F86  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 27681  000F8A  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 27682  000F8E  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 27683  000F92  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 27684                           
 27685                           ; BSR set to: 0
 27686  000F96  0012               	return	
 27687  000F98                     __end_of_WriteTimer0:
 27688                           	opt stack 0
 27689                           tblptru	equ	0xFF8
 27690                           tblptrh	equ	0xFF7
 27691                           tblptrl	equ	0xFF6
 27692                           tablat	equ	0xFF5
 27693                           prodh	equ	0xFF4
 27694                           prodl	equ	0xFF3
 27695                           intcon	equ	0xFF2
 27696                           indf0	equ	0xFEF
 27697                           postinc0	equ	0xFEE
 27698                           fsr0h	equ	0xFEA
 27699                           fsr0l	equ	0xFE9
 27700                           wreg	equ	0xFE8
 27701                           indf1	equ	0xFE7
 27702                           postinc1	equ	0xFE6
 27703                           postdec1	equ	0xFE5
 27704                           fsr1h	equ	0xFE2
 27705                           fsr1l	equ	0xFE1
 27706                           indf2	equ	0xFDF
 27707                           postinc2	equ	0xFDE
 27708                           postdec2	equ	0xFDD
 27709                           plusw2	equ	0xFDB
 27710                           fsr2h	equ	0xFDA
 27711                           fsr2l	equ	0xFD9
 27712                           status	equ	0xFD8
 27713                           
 27714 ;; *************** function _fifo_init *****************
 27715 ;; Defined at:
 27716 ;;		line 14 in file "fifo.c"
 27717 ;; Parameters:    Size  Location     Type
 27718 ;;  f               2    0[BANK0 ] PTR struct .
 27719 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 27720 ;;  buf             2    2[BANK0 ] PTR const void 
 27721 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 27722 ;;  size            2    4[BANK0 ] unsigned short 
 27723 ;; Auto vars:     Size  Location     Type
 27724 ;;		None
 27725 ;; Return value:  Size  Location     Type
 27726 ;;		None               void
 27727 ;; Registers used:
 27728 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 27729 ;; Tracked objects:
 27730 ;;		On entry : F/0
 27731 ;;		On exit  : F/0
 27732 ;;		Unchanged: 0/0
 27733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27734 ;;      Params:         0       6       0       0       0       0       0
 27735 ;;      Locals:         0       0       0       0       0       0       0
 27736 ;;      Temps:          0       0       0       0       0       0       0
 27737 ;;      Totals:         0       6       0       0       0       0       0
 27738 ;;Total ram usage:        6 bytes
 27739 ;; Hardware stack levels used:    1
 27740 ;; Hardware stack levels required when called:    3
 27741 ;; This function calls:
 27742 ;;		Nothing
 27743 ;; This function is called by:
 27744 ;;		_main
 27745 ;; This function uses a non-reentrant model
 27746 ;;
 27747                           
 27748                           	psect	text81
 27749  00129E                     __ptext81:
 27750                           	opt stack 0
 27751  00129E                     _fifo_init:
 27752                           	opt stack 26
 27753                           
 27754                           ; BSR set to: 0
 27755                           ;fifo.c: 15: f->head = 0;
 27756                           
 27757                           ; BSR set to: 0
 27758                           ;incstack = 0
 27759                           ;incstack = 0
 27760  00129E  EE20 F002          	lfsr	2,2
 27761  0012A2  D816               	call	PL106	;call to abstracted procedure
 27762                           
 27763                           ;fifo.c: 16: f->tail = 0;
 27764  0012A4  EE20 F004          	lfsr	2,4
 27765  0012A8  D813               	call	PL106	;call to abstracted procedure
 27766                           
 27767                           ;fifo.c: 17: f->size = size;
 27768  0012AA  EE20 F006          	lfsr	2,6
 27769  0012AE  5160               	movf	fifo_init@f& (0+255),w,b
 27770  0012B0  26D9               	addwf	fsr2l,f,c
 27771  0012B2  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 27772  0012B4  22DA               	addwfc	fsr2h,f,c
 27773  0012B6  C064  FFDE         	movff	fifo_init@size,postinc2
 27774  0012BA  C065  FFDD         	movff	fifo_init@size+1,postdec2
 27775                           
 27776                           ; BSR set to: 0
 27777                           ;fifo.c: 18: f->buf = buf;
 27778  0012BE  C060  FFD9         	movff	fifo_init@f,fsr2l
 27779  0012C2  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 27780  0012C6  C062  FFDE         	movff	fifo_init@buf,postinc2
 27781  0012CA  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 27782                           
 27783                           ; BSR set to: 0
 27784  0012CE  0012               	return	
 27785  0012D0                     __end_of_fifo_init:
 27786                           	opt stack 0
 27787  0012D0                     PL106:
 27788                           	opt stack 26
 27789  0012D0  5160               	movf	fifo_init@f& (0+255),w,b
 27790  0012D2  26D9               	addwf	fsr2l,f,c
 27791  0012D4  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 27792  0012D6  22DA               	addwfc	fsr2h,f,c
 27793  0012D8  6ADE               	clrf	postinc2,c
 27794  0012DA  6ADD               	clrf	postdec2,c
 27795  0012DC  0012               	return	
 27796  0012DE                     __end_ofPL106:
 27797                           	opt stack 0
 27798                           tblptru	equ	0xFF8
 27799                           tblptrh	equ	0xFF7
 27800                           tblptrl	equ	0xFF6
 27801                           tablat	equ	0xFF5
 27802                           prodh	equ	0xFF4
 27803                           prodl	equ	0xFF3
 27804                           intcon	equ	0xFF2
 27805                           indf0	equ	0xFEF
 27806                           postinc0	equ	0xFEE
 27807                           fsr0h	equ	0xFEA
 27808                           fsr0l	equ	0xFE9
 27809                           wreg	equ	0xFE8
 27810                           indf1	equ	0xFE7
 27811                           postinc1	equ	0xFE6
 27812                           postdec1	equ	0xFE5
 27813                           fsr1h	equ	0xFE2
 27814                           fsr1l	equ	0xFE1
 27815                           indf2	equ	0xFDF
 27816                           postinc2	equ	0xFDE
 27817                           postdec2	equ	0xFDD
 27818                           plusw2	equ	0xFDB
 27819                           fsr2h	equ	0xFDA
 27820                           fsr2l	equ	0xFD9
 27821                           status	equ	0xFD8
 27822                           
 27823 ;; *************** function _Interrupt *****************
 27824 ;; Defined at:
 27825 ;;		line 145 in file "main.c"
 27826 ;; Parameters:    Size  Location     Type
 27827 ;;		None
 27828 ;; Auto vars:     Size  Location     Type
 27829 ;;  fail            1   32[COMRAM] unsigned char 
 27830 ;;  c               1   31[COMRAM] unsigned char 
 27831 ;; Return value:  Size  Location     Type
 27832 ;;		None               void
 27833 ;; Registers used:
 27834 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27835 ;; Tracked objects:
 27836 ;;		On entry : 0/0
 27837 ;;		On exit  : 0/0
 27838 ;;		Unchanged: 0/0
 27839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27840 ;;      Params:         0       0       0       0       0       0       0
 27841 ;;      Locals:         2       0       0       0       0       0       0
 27842 ;;      Temps:          9       0       0       0       0       0       0
 27843 ;;      Totals:        11       0       0       0       0       0       0
 27844 ;;Total ram usage:       11 bytes
 27845 ;; Hardware stack levels used:    1
 27846 ;; Hardware stack levels required when called:    2
 27847 ;; This function calls:
 27848 ;;		_ReadUSART
 27849 ;;		_fifo_write
 27850 ;;		_ECANReceiveMessage
 27851 ;;		_fifo_getFree
 27852 ;;		i1_WriteTimer0
 27853 ;; This function is called by:
 27854 ;;		Interrupt level 1
 27855 ;; This function uses a non-reentrant model
 27856 ;;
 27857                           
 27858                           	psect	intcodelo
 27859  000018                     __pintcodelo:
 27860                           	opt stack 0
 27861  000018                     _Interrupt:
 27862                           	opt stack 19
 27863                           
 27864                           ; BSR set to: 0
 27865                           ;incstack = 0
 27866  000018  CFD8 F019          	movff	status,??_Interrupt+2
 27867  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 27868  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 27869  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 27870  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 27871  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 27872  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 27873  000034                     
 27874                           ;main.c: 146: uint8_t c;
 27875                           ;main.c: 149: if ( 1 == PIR1bits.RCIF ) {
 27876  000034  AA9E               	btfss	3998,5,c	;volatile
 27877  000036  D001               	goto	i1u1812_21
 27878  000038  D001               	goto	i1u1812_20
 27879  00003A                     i1u1812_21:
 27880  00003A  D02B               	goto	i1l401
 27881  00003C                     i1u1812_20:
 27882  00003C                     
 27883                           ;main.c: 151: c = ReadUSART();
 27884  00003C  ECF7  F007         	call	_ReadUSART	;wreg free
 27885  000040  6E20               	movwf	Interrupt@c,c
 27886  000042                     
 27887                           ;main.c: 153: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 27888  000042  0101               	movlb	1	; () banked
 27889  000044  0E01               	movlw	high _serialInputFifo
 27890  000046  6E02               	movwf	?_fifo_write+1,c
 27891  000048  0EDD               	movlw	low _serialInputFifo
 27892  00004A  6E01               	movwf	?_fifo_write,c
 27893  00004C  0E20               	movlw	low Interrupt@c
 27894  00004E  6E03               	movwf	?_fifo_write+2,c
 27895  000050  0E00               	movlw	high Interrupt@c
 27896  000052  6E04               	movwf	?_fifo_write+3,c
 27897  000054  0E0F               	movlw	15
 27898  000056  6E04               	movwf	?_fifo_write+3,c
 27899  000058  0E5F               	movlw	__accesstop+-1
 27900  00005A  6403               	cpfsgt	?_fifo_write+2,c
 27901  00005C  6A04               	clrf	?_fifo_write+3,c
 27902  00005E  0E01               	movlw	1
 27903  000060  6E05               	movwf	?_fifo_write+4,c
 27904  000062  0E00               	movlw	0
 27905  000064  6E06               	movwf	?_fifo_write+5,c
 27906  000066  0E00               	movlw	0
 27907  000068  6E07               	movwf	?_fifo_write+6,c
 27908  00006A  0E00               	movlw	0
 27909  00006C  6E08               	movwf	?_fifo_write+7,c
 27910  00006E  EC5B  F017         	call	_fifo_write	;wreg free
 27911  000072  0401               	decf	?_fifo_write,w,c
 27912  000074  1002               	iorwf	?_fifo_write+1,w,c
 27913  000076  B4D8               	btfsc	status,2,c
 27914  000078  D001               	goto	i1u1813_21
 27915  00007A  D001               	goto	i1u1813_20
 27916  00007C                     i1u1813_21:
 27917  00007C  D008               	goto	i1l13842
 27918  00007E                     i1u1813_20:
 27919  00007E                     
 27920                           ; BSR set to: 1
 27921                           ;main.c: 155: uart_receiveOverruns++;
 27922  00007E  0E01               	movlw	1
 27923  000080  2720               	addwf	_uart_receiveOverruns& (0+255),f,b
 27924  000082  0E00               	movlw	0
 27925  000084  2321               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 27926  000086  0E00               	movlw	0
 27927  000088  2322               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 27928  00008A  0E00               	movlw	0
 27929  00008C  2323               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 27930  00008E                     i1l13842:
 27931                           
 27932                           ; BSR set to: 1
 27933                           ;main.c: 156: }
 27934                           ;main.c: 159: PIR1bits.RCIF = 0;
 27935  00008E  9A9E               	bcf	3998,5,c	;volatile
 27936                           
 27937                           ;main.c: 161: }
 27938  000090  D07D               	goto	i1l403
 27939  000092                     i1l401:
 27940                           
 27941                           ;main.c: 163: else if (1 == INTCONbits.TMR0IF) {
 27942  000092  A4F2               	btfss	intcon,2,c	;volatile
 27943  000094  D001               	goto	i1u1814_21
 27944  000096  D001               	goto	i1u1814_20
 27945  000098                     i1u1814_21:
 27946  000098  D079               	goto	i1l403
 27947  00009A                     i1u1814_20:
 27948  00009A                     
 27949                           ;main.c: 165: WriteTimer0(0xfb1d);
 27950  00009A  0EFB               	movlw	251
 27951  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 27952  00009E  0E1D               	movlw	29
 27953  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 27954  0000A2  ECBA  F007         	call	i1_WriteTimer0	;wreg free
 27955  0000A6                     
 27956                           ;main.c: 167: timer++;
 27957  0000A6  0E01               	movlw	1
 27958  0000A8  0101               	movlb	1	; () banked
 27959  0000AA  271C               	addwf	_timer& (0+255),f,b	;volatile
 27960  0000AC  0E00               	movlw	0
 27961  0000AE  231D               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 27962  0000B0  0E00               	movlw	0
 27963  0000B2  231E               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 27964  0000B4  0E00               	movlw	0
 27965  0000B6  231F               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 27966  0000B8                     
 27967                           ; BSR set to: 1
 27968                           ;main.c: 168: timekeeper++;
 27969  0000B8  0E01               	movlw	1
 27970  0000BA  2718               	addwf	_timekeeper& (0+255),f,b	;volatile
 27971  0000BC  0E00               	movlw	0
 27972  0000BE  2319               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 27973  0000C0  0E00               	movlw	0
 27974  0000C2  231A               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 27975  0000C4  0E00               	movlw	0
 27976  0000C6  231B               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 27977  0000C8                     
 27978                           ; BSR set to: 1
 27979                           ;main.c: 171: status_led_cnt++;
 27980  0000C8  4A22               	infsnz	_status_led_cnt,f,c	;volatile
 27981  0000CA  2A23               	incf	_status_led_cnt+1,f,c	;volatile
 27982  0000CC                     
 27983                           ; BSR set to: 1
 27984                           ;main.c: 172: if ((2 == ledFunctionality) &&
 27985                           ;main.c: 173: (status_led_cnt > 1000)) {
 27986  0000CC  5032               	movf	_ledFunctionality,w,c
 27987  0000CE  0A02               	xorlw	2
 27988  0000D0  A4D8               	btfss	status,2,c
 27989  0000D2  D001               	goto	i1u1815_21
 27990  0000D4  D001               	goto	i1u1815_20
 27991  0000D6                     i1u1815_21:
 27992  0000D6  D00C               	goto	i1l13858
 27993  0000D8                     i1u1815_20:
 27994  0000D8                     
 27995                           ; BSR set to: 1
 27996  0000D8  0EE9               	movlw	233
 27997  0000DA  5C22               	subwf	_status_led_cnt,w,c	;volatile
 27998  0000DC  0E03               	movlw	3
 27999  0000DE  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28000  0000E0  A0D8               	btfss	status,0,c
 28001  0000E2  D001               	goto	i1u1816_21
 28002  0000E4  D001               	goto	i1u1816_20
 28003  0000E6                     i1u1816_21:
 28004  0000E6  D004               	goto	i1l13858
 28005  0000E8                     i1u1816_20:
 28006  0000E8                     i1l13856:
 28007                           
 28008                           ; BSR set to: 1
 28009                           ;main.c: 174: LATC1 = ~LATC1;
 28010  0000E8  728B               	btg	3979,1,c	;volatile
 28011                           
 28012                           ;main.c: 175: status_led_cnt = 0;
 28013  0000EA  6A22               	clrf	_status_led_cnt,c	;volatile
 28014  0000EC  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28015                           
 28016                           ;main.c: 176: }
 28017  0000EE  D04D               	goto	i1l406
 28018  0000F0                     i1l13858:
 28019                           
 28020                           ; BSR set to: 1
 28021                           ;main.c: 177: else if ((3 == ledFunctionality) &&
 28022                           ;main.c: 178: (status_led_cnt > 400)) {
 28023  0000F0  5032               	movf	_ledFunctionality,w,c
 28024  0000F2  0A03               	xorlw	3
 28025  0000F4  A4D8               	btfss	status,2,c
 28026  0000F6  D001               	goto	i1u1817_21
 28027  0000F8  D001               	goto	i1u1817_20
 28028  0000FA                     i1u1817_21:
 28029  0000FA  D009               	goto	i1l13864
 28030  0000FC                     i1u1817_20:
 28031  0000FC                     
 28032                           ; BSR set to: 1
 28033  0000FC  0E91               	movlw	145
 28034  0000FE  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28035  000100  0E01               	movlw	1
 28036  000102  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28037  000104  A0D8               	btfss	status,0,c
 28038  000106  D001               	goto	i1u1818_21
 28039  000108  D001               	goto	i1u1818_20
 28040  00010A                     i1u1818_21:
 28041  00010A  D001               	goto	i1l13864
 28042  00010C                     i1u1818_20:
 28043  00010C  D7ED               	goto	i1l13856
 28044  00010E                     i1l13864:
 28045                           
 28046                           ; BSR set to: 1
 28047                           ;main.c: 182: else if ((4 == ledFunctionality) &&
 28048                           ;main.c: 183: (status_led_cnt > 100)) {
 28049  00010E  5032               	movf	_ledFunctionality,w,c
 28050  000110  0A04               	xorlw	4
 28051  000112  A4D8               	btfss	status,2,c
 28052  000114  D001               	goto	i1u1819_21
 28053  000116  D001               	goto	i1u1819_20
 28054  000118                     i1u1819_21:
 28055  000118  D009               	goto	i1l13870
 28056  00011A                     i1u1819_20:
 28057  00011A                     
 28058                           ; BSR set to: 1
 28059  00011A  0E65               	movlw	101
 28060  00011C  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28061  00011E  0E00               	movlw	0
 28062  000120  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28063  000122  A0D8               	btfss	status,0,c
 28064  000124  D001               	goto	i1u1820_21
 28065  000126  D001               	goto	i1u1820_20
 28066  000128                     i1u1820_21:
 28067  000128  D001               	goto	i1l13870
 28068  00012A                     i1u1820_20:
 28069  00012A  D7DE               	goto	i1l13856
 28070  00012C                     i1l13870:
 28071                           
 28072                           ; BSR set to: 1
 28073                           ;main.c: 187: else if ((5 == ledFunctionality) &&
 28074                           ;main.c: 188: (status_led_cnt > 70)) {
 28075  00012C  5032               	movf	_ledFunctionality,w,c
 28076  00012E  0A05               	xorlw	5
 28077  000130  A4D8               	btfss	status,2,c
 28078  000132  D001               	goto	i1u1821_21
 28079  000134  D001               	goto	i1u1821_20
 28080  000136                     i1u1821_21:
 28081  000136  D009               	goto	i1l13876
 28082  000138                     i1u1821_20:
 28083  000138                     
 28084                           ; BSR set to: 1
 28085  000138  0E47               	movlw	71
 28086  00013A  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28087  00013C  0E00               	movlw	0
 28088  00013E  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28089  000140  A0D8               	btfss	status,0,c
 28090  000142  D001               	goto	i1u1822_21
 28091  000144  D001               	goto	i1u1822_20
 28092  000146                     i1u1822_21:
 28093  000146  D001               	goto	i1l13876
 28094  000148                     i1u1822_20:
 28095  000148  D7CF               	goto	i1l13856
 28096  00014A                     i1l13876:
 28097                           
 28098                           ; BSR set to: 1
 28099                           ;main.c: 192: else if ((6 == ledFunctionality) &&
 28100                           ;main.c: 193: (status_led_cnt > 40)) {
 28101  00014A  5032               	movf	_ledFunctionality,w,c
 28102  00014C  0A06               	xorlw	6
 28103  00014E  A4D8               	btfss	status,2,c
 28104  000150  D001               	goto	i1u1823_21
 28105  000152  D001               	goto	i1u1823_20
 28106  000154                     i1u1823_21:
 28107  000154  D009               	goto	i1l13882
 28108  000156                     i1u1823_20:
 28109  000156                     
 28110                           ; BSR set to: 1
 28111  000156  0E29               	movlw	41
 28112  000158  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28113  00015A  0E00               	movlw	0
 28114  00015C  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28115  00015E  A0D8               	btfss	status,0,c
 28116  000160  D001               	goto	i1u1824_21
 28117  000162  D001               	goto	i1u1824_20
 28118  000164                     i1u1824_21:
 28119  000164  D001               	goto	i1l13882
 28120  000166                     i1u1824_20:
 28121  000166  D7C0               	goto	i1l13856
 28122  000168                     i1l13882:
 28123                           
 28124                           ; BSR set to: 1
 28125                           ;main.c: 197: else if (1 == ledFunctionality) {
 28126  000168  0432               	decf	_ledFunctionality,w,c
 28127  00016A  A4D8               	btfss	status,2,c
 28128  00016C  D001               	goto	i1u1825_21
 28129  00016E  D001               	goto	i1u1825_20
 28130  000170                     i1u1825_21:
 28131  000170  D004               	goto	i1l415
 28132  000172                     i1u1825_20:
 28133  000172                     
 28134                           ; BSR set to: 1
 28135                           ;main.c: 198: LATC1 = 1;
 28136  000172  828B               	bsf	3979,1,c	;volatile
 28137                           
 28138                           ;main.c: 199: status_led_cnt = 0;
 28139  000174  6A22               	clrf	_status_led_cnt,c	;volatile
 28140  000176  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28141                           
 28142                           ;main.c: 200: }
 28143  000178  D008               	goto	i1l406
 28144  00017A                     i1l415:
 28145                           
 28146                           ; BSR set to: 1
 28147                           ;main.c: 201: else if (0 == ledFunctionality) {
 28148  00017A  6632               	tstfsz	_ledFunctionality,c
 28149  00017C  D001               	goto	i1u1826_21
 28150  00017E  D001               	goto	i1u1826_20
 28151  000180                     i1u1826_21:
 28152  000180  D004               	goto	i1l412
 28153  000182                     i1u1826_20:
 28154  000182                     
 28155                           ; BSR set to: 1
 28156                           ;main.c: 202: LATC1 = 0;
 28157  000182  928B               	bcf	3979,1,c	;volatile
 28158                           
 28159                           ;main.c: 203: status_led_cnt = 0;
 28160  000184  6A22               	clrf	_status_led_cnt,c	;volatile
 28161  000186  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28162  000188  D000               	goto	i1l406
 28163  00018A                     i1l412:
 28164  00018A                     i1l406:
 28165                           
 28166                           ; BSR set to: 1
 28167                           ;main.c: 204: }
 28168                           ;main.c: 206: INTCONbits.TMR0IF = 0;
 28169  00018A  94F2               	bcf	intcon,2,c	;volatile
 28170  00018C                     i1l403:
 28171                           
 28172                           ;main.c: 207: }
 28173                           ;main.c: 210: if ( 1 == IRXIF ) {
 28174  00018C  AEA4               	btfss	4004,7,c	;volatile
 28175  00018E  D001               	goto	i1u1827_21
 28176  000190  D001               	goto	i1u1827_20
 28177  000192                     i1u1827_21:
 28178  000192  D001               	goto	i1l418
 28179  000194                     i1u1827_20:
 28180  000194                     
 28181                           ;main.c: 212: IRXIF = 0;
 28182  000194  9EA4               	bcf	4004,7,c	;volatile
 28183  000196                     i1l418:
 28184                           
 28185                           ;main.c: 213: }
 28186                           ;main.c: 216: if ( RXBnIF ) {
 28187  000196  A2A4               	btfss	4004,1,c	;volatile
 28188  000198  D001               	goto	i1u1828_21
 28189  00019A  D001               	goto	i1u1828_20
 28190  00019C                     i1u1828_21:
 28191  00019C  D09F               	goto	i1l431
 28192  00019E                     i1u1828_20:
 28193  00019E                     
 28194                           ;main.c: 218: if ( ECANReceiveMessage((unsigned long *)&id,
 28195                           ;main.c: 219: (BYTE*)&data,
 28196                           ;main.c: 220: (BYTE*)&dlc,
 28197                           ;main.c: 221: &flags) ) {
 28198  00019E  0101               	movlb	1	; () banked
 28199  0001A0  0E01               	movlw	high _id
 28200  0001A2  6E0B               	movwf	?_ECANReceiveMessage+1,c
 28201  0001A4  0EED               	movlw	low _id
 28202  0001A6  6E0A               	movwf	?_ECANReceiveMessage,c
 28203  0001A8  0E01               	movlw	high _data
 28204  0001AA  6E0D               	movwf	?_ECANReceiveMessage+3,c
 28205  0001AC  0ED5               	movlw	low _data
 28206  0001AE  6E0C               	movwf	?_ECANReceiveMessage+2,c
 28207  0001B0  0E3A               	movlw	low _dlc
 28208  0001B2  6E0E               	movwf	?_ECANReceiveMessage+4,c
 28209  0001B4  0E3B               	movlw	low _flags
 28210  0001B6  6E0F               	movwf	?_ECANReceiveMessage+5,c
 28211  0001B8  ECCC  F020         	call	_ECANReceiveMessage	;wreg free
 28212  0001BC  0900               	iorlw	0
 28213  0001BE  B4D8               	btfsc	status,2,c
 28214  0001C0  D001               	goto	i1u1829_21
 28215  0001C2  D001               	goto	i1u1829_20
 28216  0001C4                     i1u1829_21:
 28217  0001C4  D08A               	goto	i1l13924
 28218  0001C6                     i1u1829_20:
 28219  0001C6                     
 28220                           ;main.c: 224: if ( flags & ECAN_RX_OVERFLOW ) {
 28221  0001C6  A63B               	btfss	_flags,3,c
 28222  0001C8  D001               	goto	i1u1830_21
 28223  0001CA  D001               	goto	i1u1830_20
 28224  0001CC                     i1u1830_21:
 28225  0001CC  D00E               	goto	i1l421
 28226  0001CE                     i1u1830_20:
 28227  0001CE                     
 28228                           ;main.c: 225: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 28229  0001CE  AA3B               	btfss	_flags,5,c
 28230  0001D0  D001               	goto	i1u1831_21
 28231  0001D2  D001               	goto	i1u1831_20
 28232  0001D4                     i1u1831_21:
 28233  0001D4  D082               	goto	i1l13924
 28234  0001D6                     i1u1831_20:
 28235  0001D6                     i1l13896:
 28236  0001D6  0E01               	movlw	1
 28237  0001D8  0101               	movlb	1	; () banked
 28238  0001DA  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 28239  0001DC  0E00               	movlw	0
 28240  0001DE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 28241  0001E0  0E00               	movlw	0
 28242  0001E2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 28243  0001E4  0E00               	movlw	0
 28244  0001E6  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 28245  0001E8  D078               	goto	i1l13924
 28246  0001EA                     i1l421:
 28247                           
 28248                           ;main.c: 227: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 28249                           ;main.c: 228: ( flags & ECAN_RX_XTD_FRAME ) ) {
 28250  0001EA  BC3B               	btfsc	_flags,6,c
 28251  0001EC  D001               	goto	i1u1832_21
 28252  0001EE  D001               	goto	i1u1832_20
 28253  0001F0                     i1u1832_21:
 28254  0001F0  D074               	goto	i1l13924
 28255  0001F2                     i1u1832_20:
 28256  0001F2  AA3B               	btfss	_flags,5,c
 28257  0001F4  D001               	goto	i1u1833_21
 28258  0001F6  D001               	goto	i1u1833_20
 28259  0001F8                     i1u1833_21:
 28260  0001F8  D070               	goto	i1l13924
 28261  0001FA                     i1u1833_20:
 28262  0001FA                     
 28263                           ;main.c: 230: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 28264  0001FA  503A               	movf	_dlc,w,c
 28265  0001FC  6E17               	movwf	??_Interrupt& (0+255),c
 28266  0001FE  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 28267  000200  0E05               	movlw	5
 28268  000202  2617               	addwf	??_Interrupt,f,c
 28269  000204  0E00               	movlw	0
 28270  000206  2218               	addwfc	??_Interrupt+1,f,c
 28271  000208  0101               	movlb	1	; () banked
 28272  00020A  0E01               	movlw	high _canInputFifo
 28273  00020C  6E02               	movwf	?_fifo_getFree+1,c
 28274  00020E  0ECD               	movlw	low _canInputFifo
 28275  000210  6E01               	movwf	?_fifo_getFree,c
 28276  000212  EC9F  F00F         	call	_fifo_getFree	;wreg free
 28277  000216  5017               	movf	??_Interrupt,w,c
 28278  000218  5C01               	subwf	?_fifo_getFree,w,c
 28279  00021A  5018               	movf	??_Interrupt+1,w,c
 28280  00021C  5802               	subwfb	?_fifo_getFree+1,w,c
 28281  00021E  A0D8               	btfss	status,0,c
 28282  000220  D001               	goto	i1u1834_21
 28283  000222  D001               	goto	i1u1834_20
 28284  000224                     i1u1834_21:
 28285  000224  D7D8               	goto	i1l13896
 28286  000226                     i1u1834_20:
 28287  000226                     
 28288                           ; BSR set to: 1
 28289                           ;main.c: 231: uint8_t fail = 0;
 28290  000226  6A21               	clrf	Interrupt@fail,c
 28291  000228                     
 28292                           ; BSR set to: 1
 28293                           ;main.c: 232: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 28294  000228  0E01               	movlw	high _canInputFifo
 28295  00022A  6E02               	movwf	?_fifo_write+1,c
 28296  00022C  0ECD               	movlw	low _canInputFifo
 28297  00022E  6E01               	movwf	?_fifo_write,c
 28298  000230  0E01               	movlw	high _id
 28299  000232  6E04               	movwf	?_fifo_write+3,c
 28300  000234  0EED               	movlw	low _id
 28301  000236  6E03               	movwf	?_fifo_write+2,c
 28302  000238  0E04               	movlw	4
 28303  00023A  6E05               	movwf	?_fifo_write+4,c
 28304  00023C  0E00               	movlw	0
 28305  00023E  6E06               	movwf	?_fifo_write+5,c
 28306  000240  0E00               	movlw	0
 28307  000242  6E07               	movwf	?_fifo_write+6,c
 28308  000244  0E00               	movlw	0
 28309  000246  6E08               	movwf	?_fifo_write+7,c
 28310  000248  EC5B  F017         	call	_fifo_write	;wreg free
 28311  00024C  5001               	movf	?_fifo_write,w,c
 28312  00024E  0A04               	xorlw	4
 28313  000250  1002               	iorwf	?_fifo_write+1,w,c
 28314  000252  B4D8               	btfsc	status,2,c
 28315  000254  D001               	goto	i1u1835_21
 28316  000256  D001               	goto	i1u1835_20
 28317  000258                     i1u1835_21:
 28318  000258  D002               	goto	i1l13908
 28319  00025A                     i1u1835_20:
 28320  00025A                     
 28321                           ; BSR set to: 1
 28322                           ;main.c: 233: fail = 1;
 28323  00025A  0E01               	movlw	1
 28324  00025C  6E21               	movwf	Interrupt@fail,c
 28325  00025E                     i1l13908:
 28326                           
 28327                           ; BSR set to: 1
 28328                           ;main.c: 234: }
 28329                           ;main.c: 235: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 28330  00025E  0E01               	movlw	high _canInputFifo
 28331  000260  6E02               	movwf	?_fifo_write+1,c
 28332  000262  0ECD               	movlw	low _canInputFifo
 28333  000264  6E01               	movwf	?_fifo_write,c
 28334  000266  0E3A               	movlw	low _dlc
 28335  000268  6E03               	movwf	?_fifo_write+2,c
 28336  00026A  0E00               	movlw	high _dlc
 28337  00026C  6E04               	movwf	?_fifo_write+3,c
 28338  00026E  0E0F               	movlw	15
 28339  000270  6E04               	movwf	?_fifo_write+3,c
 28340  000272  0E5F               	movlw	__accesstop+-1
 28341  000274  6403               	cpfsgt	?_fifo_write+2,c
 28342  000276  6A04               	clrf	?_fifo_write+3,c
 28343  000278  0E01               	movlw	1
 28344  00027A  6E05               	movwf	?_fifo_write+4,c
 28345  00027C  0E00               	movlw	0
 28346  00027E  6E06               	movwf	?_fifo_write+5,c
 28347  000280  0E00               	movlw	0
 28348  000282  6E07               	movwf	?_fifo_write+6,c
 28349  000284  0E00               	movlw	0
 28350  000286  6E08               	movwf	?_fifo_write+7,c
 28351  000288  EC5B  F017         	call	_fifo_write	;wreg free
 28352  00028C  0401               	decf	?_fifo_write,w,c
 28353  00028E  1002               	iorwf	?_fifo_write+1,w,c
 28354  000290  B4D8               	btfsc	status,2,c
 28355  000292  D001               	goto	i1u1836_21
 28356  000294  D001               	goto	i1u1836_20
 28357  000296                     i1u1836_21:
 28358  000296  D002               	goto	i1l13912
 28359  000298                     i1u1836_20:
 28360  000298                     
 28361                           ; BSR set to: 1
 28362                           ;main.c: 236: fail = 1;
 28363  000298  0E01               	movlw	1
 28364  00029A  6E21               	movwf	Interrupt@fail,c
 28365  00029C                     i1l13912:
 28366                           
 28367                           ; BSR set to: 1
 28368                           ;main.c: 237: }
 28369                           ;main.c: 238: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 28370  00029C  0E01               	movlw	high _canInputFifo
 28371  00029E  6E02               	movwf	?_fifo_write+1,c
 28372  0002A0  0ECD               	movlw	low _canInputFifo
 28373  0002A2  6E01               	movwf	?_fifo_write,c
 28374  0002A4  0E01               	movlw	high _data
 28375  0002A6  6E04               	movwf	?_fifo_write+3,c
 28376  0002A8  0ED5               	movlw	low _data
 28377  0002AA  6E03               	movwf	?_fifo_write+2,c
 28378  0002AC  503A               	movf	_dlc,w,c
 28379  0002AE  6E05               	movwf	?_fifo_write+4,c
 28380  0002B0  6A06               	clrf	?_fifo_write+5,c
 28381  0002B2  6A07               	clrf	?_fifo_write+6,c
 28382  0002B4  6A08               	clrf	?_fifo_write+7,c
 28383  0002B6  EC5B  F017         	call	_fifo_write	;wreg free
 28384  0002BA  503A               	movf	_dlc,w,c
 28385  0002BC  1801               	xorwf	?_fifo_write,w,c
 28386  0002BE  1002               	iorwf	?_fifo_write+1,w,c
 28387  0002C0  B4D8               	btfsc	status,2,c
 28388  0002C2  D001               	goto	i1u1837_21
 28389  0002C4  D001               	goto	i1u1837_20
 28390  0002C6                     i1u1837_21:
 28391  0002C6  D002               	goto	i1l13916
 28392  0002C8                     i1u1837_20:
 28393  0002C8                     
 28394                           ; BSR set to: 1
 28395                           ;main.c: 239: fail = 1;
 28396  0002C8  0E01               	movlw	1
 28397  0002CA  6E21               	movwf	Interrupt@fail,c
 28398  0002CC                     i1l13916:
 28399                           
 28400                           ; BSR set to: 1
 28401                           ;main.c: 240: }
 28402                           ;main.c: 242: fifo_canrxcount++;
 28403  0002CC  2A31               	incf	_fifo_canrxcount,f,c	;volatile
 28404  0002CE                     
 28405                           ; BSR set to: 1
 28406                           ;main.c: 244: if ( fail ) {
 28407  0002CE  5021               	movf	Interrupt@fail,w,c
 28408  0002D0  B4D8               	btfsc	status,2,c
 28409  0002D2  D001               	goto	i1u1838_21
 28410  0002D4  D001               	goto	i1u1838_20
 28411  0002D6                     i1u1838_21:
 28412  0002D6  D001               	goto	i1l13924
 28413  0002D8                     i1u1838_20:
 28414  0002D8  D77E               	goto	i1l13896
 28415  0002DA                     i1l13924:
 28416                           
 28417                           ;main.c: 251: }
 28418                           ;main.c: 253: }
 28419                           ;main.c: 255: }
 28420                           ;main.c: 258: RXBnIF = 0;
 28421  0002DA  92A4               	bcf	4004,1,c	;volatile
 28422  0002DC                     i1l431:
 28423  0002DC  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 28424  0002E0  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 28425  0002E4  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 28426  0002E8  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 28427  0002EC  C01B  FFE0         	movff	??_Interrupt+4,bsr
 28428  0002F0  C01A  FFE8         	movff	??_Interrupt+3,wreg
 28429  0002F4  C019  FFD8         	movff	??_Interrupt+2,status
 28430  0002F8  0010               	retfie	
 28431  0002FA                     __end_of_Interrupt:
 28432                           	opt stack 0
 28433                           tblptru	equ	0xFF8
 28434                           tblptrh	equ	0xFF7
 28435                           tblptrl	equ	0xFF6
 28436                           tablat	equ	0xFF5
 28437                           prodh	equ	0xFF4
 28438                           prodl	equ	0xFF3
 28439                           intcon	equ	0xFF2
 28440                           indf0	equ	0xFEF
 28441                           postinc0	equ	0xFEE
 28442                           fsr0h	equ	0xFEA
 28443                           fsr0l	equ	0xFE9
 28444                           wreg	equ	0xFE8
 28445                           indf1	equ	0xFE7
 28446                           postinc1	equ	0xFE6
 28447                           postdec1	equ	0xFE5
 28448                           fsr1h	equ	0xFE2
 28449                           fsr1l	equ	0xFE1
 28450                           bsr	equ	0xFE0
 28451                           indf2	equ	0xFDF
 28452                           postinc2	equ	0xFDE
 28453                           postdec2	equ	0xFDD
 28454                           plusw2	equ	0xFDB
 28455                           fsr2h	equ	0xFDA
 28456                           fsr2l	equ	0xFD9
 28457                           status	equ	0xFD8
 28458                           
 28459 ;; *************** function i1_WriteTimer0 *****************
 28460 ;; Defined at:
 28461 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 28462 ;; Parameters:    Size  Location     Type
 28463 ;;  timer0          2    0[COMRAM] unsigned int 
 28464 ;; Auto vars:     Size  Location     Type
 28465 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 28466 ;; Return value:  Size  Location     Type
 28467 ;;		None               void
 28468 ;; Registers used:
 28469 ;;		None
 28470 ;; Tracked objects:
 28471 ;;		On entry : 0/0
 28472 ;;		On exit  : 0/0
 28473 ;;		Unchanged: 0/0
 28474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28475 ;;      Params:         2       0       0       0       0       0       0
 28476 ;;      Locals:         2       0       0       0       0       0       0
 28477 ;;      Temps:          0       0       0       0       0       0       0
 28478 ;;      Totals:         4       0       0       0       0       0       0
 28479 ;;Total ram usage:        4 bytes
 28480 ;; Hardware stack levels used:    1
 28481 ;; This function calls:
 28482 ;;		Nothing
 28483 ;; This function is called by:
 28484 ;;		_Interrupt
 28485 ;; This function uses a non-reentrant model
 28486 ;;
 28487                           
 28488                           	psect	text83
 28489  000F74                     __ptext83:
 28490                           	opt stack 0
 28491  000F74                     i1_WriteTimer0:
 28492                           	opt stack 20
 28493                           
 28494                           ;incstack = 0
 28495                           ;incstack = 0
 28496  000F74  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 28497  000F78  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 28498  000F7C  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 28499  000F80  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 28500  000F84  0012               	return	
 28501  000F86                     __end_ofi1_WriteTimer0:
 28502                           	opt stack 0
 28503                           tblptru	equ	0xFF8
 28504                           tblptrh	equ	0xFF7
 28505                           tblptrl	equ	0xFF6
 28506                           tablat	equ	0xFF5
 28507                           prodh	equ	0xFF4
 28508                           prodl	equ	0xFF3
 28509                           intcon	equ	0xFF2
 28510                           indf0	equ	0xFEF
 28511                           postinc0	equ	0xFEE
 28512                           fsr0h	equ	0xFEA
 28513                           fsr0l	equ	0xFE9
 28514                           wreg	equ	0xFE8
 28515                           indf1	equ	0xFE7
 28516                           postinc1	equ	0xFE6
 28517                           postdec1	equ	0xFE5
 28518                           fsr1h	equ	0xFE2
 28519                           fsr1l	equ	0xFE1
 28520                           bsr	equ	0xFE0
 28521                           indf2	equ	0xFDF
 28522                           postinc2	equ	0xFDE
 28523                           postdec2	equ	0xFDD
 28524                           plusw2	equ	0xFDB
 28525                           fsr2h	equ	0xFDA
 28526                           fsr2l	equ	0xFD9
 28527                           status	equ	0xFD8
 28528                           
 28529 ;; *************** function _fifo_getFree *****************
 28530 ;; Defined at:
 28531 ;;		line 97 in file "fifo.c"
 28532 ;; Parameters:    Size  Location     Type
 28533 ;;  f               2    0[COMRAM] PTR struct .
 28534 ;;		 -> canInputFifo(8), 
 28535 ;; Auto vars:     Size  Location     Type
 28536 ;;		None
 28537 ;; Return value:  Size  Location     Type
 28538 ;;                  2    0[COMRAM] unsigned short 
 28539 ;; Registers used:
 28540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28541 ;; Tracked objects:
 28542 ;;		On entry : F/1
 28543 ;;		On exit  : F/1
 28544 ;;		Unchanged: F/0
 28545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28546 ;;      Params:         2       0       0       0       0       0       0
 28547 ;;      Locals:         0       0       0       0       0       0       0
 28548 ;;      Temps:          8       0       0       0       0       0       0
 28549 ;;      Totals:        10       0       0       0       0       0       0
 28550 ;;Total ram usage:       10 bytes
 28551 ;; Hardware stack levels used:    1
 28552 ;; This function calls:
 28553 ;;		Nothing
 28554 ;; This function is called by:
 28555 ;;		_Interrupt
 28556 ;; This function uses a non-reentrant model
 28557 ;;
 28558                           
 28559                           	psect	text84
 28560  001F3E                     __ptext84:
 28561                           	opt stack 0
 28562  001F3E                     _fifo_getFree:
 28563                           	opt stack 20
 28564                           
 28565                           ; BSR set to: 1
 28566                           ;fifo.c: 98: if (f->head < f->tail) {
 28567                           
 28568                           ;incstack = 0
 28569                           ;incstack = 0
 28570  001F3E  EE20 F004          	lfsr	2,4
 28571  001F42  5001               	movf	fifo_getFree@f,w,c
 28572  001F44  26D9               	addwf	fsr2l,f,c
 28573  001F46  5002               	movf	fifo_getFree@f+1,w,c
 28574  001F48  22DA               	addwfc	fsr2h,f,c
 28575  001F4A  EE10 F002          	lfsr	1,2
 28576  001F4E  5001               	movf	fifo_getFree@f,w,c
 28577  001F50  26E1               	addwf	fsr1l,f,c
 28578  001F52  5002               	movf	fifo_getFree@f+1,w,c
 28579  001F54  22E2               	addwfc	fsr1h,f,c
 28580  001F56  52E6               	movf	postinc1,f,c
 28581  001F58  52DE               	movf	postinc2,f,c
 28582  001F5A  50DD               	movf	postdec2,w,c
 28583  001F5C  5CE5               	subwf	postdec1,w,c
 28584  001F5E  E102               	bnz	i1u657_25
 28585  001F60  50DF               	movf	indf2,w,c
 28586  001F62  5CE7               	subwf	indf1,w,c
 28587  001F64                     i1u657_25:
 28588  001F64  E213               	bc	i1l6678
 28589                           
 28590                           ; BSR set to: 1
 28591                           ;fifo.c: 99: return (f->tail - f->head);
 28592  001F66  EE20 F002          	lfsr	2,2
 28593  001F6A  D834               	call	PL82	;call to abstracted procedure
 28594  001F6C  EE20 F004          	lfsr	2,4
 28595  001F70  5001               	movf	fifo_getFree@f,w,c
 28596  001F72  26D9               	addwf	fsr2l,f,c
 28597  001F74  5002               	movf	fifo_getFree@f+1,w,c
 28598  001F76  22DA               	addwfc	fsr2h,f,c
 28599  001F78  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 28600  001F7C  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 28601  001F80  5003               	movf	??_fifo_getFree,w,c
 28602  001F82  5C05               	subwf	??_fifo_getFree+2,w,c
 28603  001F84  6E01               	movwf	?_fifo_getFree,c
 28604  001F86  5004               	movf	??_fifo_getFree+1,w,c
 28605  001F88  5806               	subwfb	??_fifo_getFree+3,w,c
 28606  001F8A  D022               	goto	L47
 28607  001F8C                     i1l6678:
 28608                           
 28609                           ; BSR set to: 1
 28610                           ;fifo.c: 101: else {
 28611                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 28612  001F8C  EE20 F004          	lfsr	2,4
 28613  001F90  D821               	call	PL82	;call to abstracted procedure
 28614  001F92  EE20 F002          	lfsr	2,2
 28615  001F96  5001               	movf	fifo_getFree@f,w,c
 28616  001F98  26D9               	addwf	fsr2l,f,c
 28617  001F9A  5002               	movf	fifo_getFree@f+1,w,c
 28618  001F9C  22DA               	addwfc	fsr2h,f,c
 28619  001F9E  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 28620  001FA2  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 28621  001FA6  EE20 F006          	lfsr	2,6
 28622  001FAA  5001               	movf	fifo_getFree@f,w,c
 28623  001FAC  26D9               	addwf	fsr2l,f,c
 28624  001FAE  5002               	movf	fifo_getFree@f+1,w,c
 28625  001FB0  22DA               	addwfc	fsr2h,f,c
 28626  001FB2  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 28627  001FB6  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 28628  001FBA  5005               	movf	??_fifo_getFree+2,w,c
 28629  001FBC  5C07               	subwf	??_fifo_getFree+4,w,c
 28630  001FBE  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 28631  001FC0  5006               	movf	??_fifo_getFree+3,w,c
 28632  001FC2  5808               	subwfb	??_fifo_getFree+5,w,c
 28633  001FC4  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 28634  001FC6  5003               	movf	??_fifo_getFree,w,c
 28635  001FC8  2409               	addwf	??_fifo_getFree+6,w,c
 28636  001FCA  6E01               	movwf	?_fifo_getFree,c
 28637  001FCC  5004               	movf	??_fifo_getFree+1,w,c
 28638  001FCE  200A               	addwfc	??_fifo_getFree+7,w,c
 28639  001FD0                     L47:
 28640  001FD0  6E02               	movwf	?_fifo_getFree+1,c
 28641                           
 28642                           ; BSR set to: 1
 28643  001FD2  0012               	return	
 28644  001FD4                     __end_of_fifo_getFree:
 28645                           	opt stack 0
 28646  001FD4                     PL82:
 28647                           	opt stack 20
 28648  001FD4  5001               	movf	fifo_getFree@f,w,c
 28649  001FD6  26D9               	addwf	fsr2l,f,c
 28650  001FD8  5002               	movf	fifo_getFree@f+1,w,c
 28651  001FDA  22DA               	addwfc	fsr2h,f,c
 28652  001FDC  CFDE F003          	movff	postinc2,??_fifo_getFree
 28653  001FE0  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 28654  001FE4  0012               	return	
 28655  001FE6                     __end_ofPL82:
 28656                           	opt stack 0
 28657                           tblptru	equ	0xFF8
 28658                           tblptrh	equ	0xFF7
 28659                           tblptrl	equ	0xFF6
 28660                           tablat	equ	0xFF5
 28661                           prodh	equ	0xFF4
 28662                           prodl	equ	0xFF3
 28663                           intcon	equ	0xFF2
 28664                           indf0	equ	0xFEF
 28665                           postinc0	equ	0xFEE
 28666                           fsr0h	equ	0xFEA
 28667                           fsr0l	equ	0xFE9
 28668                           wreg	equ	0xFE8
 28669                           indf1	equ	0xFE7
 28670                           postinc1	equ	0xFE6
 28671                           postdec1	equ	0xFE5
 28672                           fsr1h	equ	0xFE2
 28673                           fsr1l	equ	0xFE1
 28674                           bsr	equ	0xFE0
 28675                           indf2	equ	0xFDF
 28676                           postinc2	equ	0xFDE
 28677                           postdec2	equ	0xFDD
 28678                           plusw2	equ	0xFDB
 28679                           fsr2h	equ	0xFDA
 28680                           fsr2l	equ	0xFD9
 28681                           status	equ	0xFD8
 28682                           
 28683 ;; *************** function _ECANReceiveMessage *****************
 28684 ;; Defined at:
 28685 ;;		line 803 in file "ECAN.c"
 28686 ;; Parameters:    Size  Location     Type
 28687 ;;  id              2    9[COMRAM] PTR unsigned long 
 28688 ;;		 -> id(4), 
 28689 ;;  data            2   11[COMRAM] PTR unsigned char 
 28690 ;;		 -> data(8), 
 28691 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 28692 ;;		 -> dlc(1), 
 28693 ;;  msgFlags        1   14[COMRAM] PTR enum E16333
 28694 ;;		 -> flags(1), 
 28695 ;; Auto vars:     Size  Location     Type
 28696 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 28697 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28698 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28699 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 28700 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28701 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28702 ;;  temp            1   19[COMRAM] struct .
 28703 ;;  mode            1   18[COMRAM] unsigned char 
 28704 ;;  i               1   17[COMRAM] unsigned char 
 28705 ;; Return value:  Size  Location     Type
 28706 ;;                  1    wreg      enum E15660
 28707 ;; Registers used:
 28708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28709 ;; Tracked objects:
 28710 ;;		On entry : F/1
 28711 ;;		On exit  : 0/0
 28712 ;;		Unchanged: 0/0
 28713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28714 ;;      Params:         6       0       0       0       0       0       0
 28715 ;;      Locals:         7       0       0       0       0       0       0
 28716 ;;      Temps:          0       0       0       0       0       0       0
 28717 ;;      Totals:        13       0       0       0       0       0       0
 28718 ;;Total ram usage:       13 bytes
 28719 ;; Hardware stack levels used:    1
 28720 ;; Hardware stack levels required when called:    1
 28721 ;; This function calls:
 28722 ;;		__ECANPointBuffer
 28723 ;;		__RegsToCANID
 28724 ;; This function is called by:
 28725 ;;		_Interrupt
 28726 ;; This function uses a non-reentrant model
 28727 ;;
 28728                           
 28729                           	psect	text85
 28730  004198                     __ptext85:
 28731                           	opt stack 0
 28732  004198                     _ECANReceiveMessage:
 28733                           	opt stack 19
 28734                           
 28735                           ; BSR set to: 1
 28736                           ;ECAN.c: 805: BYTE mode;
 28737                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 28738                           ;ECAN.c: 809: char i;
 28739                           ;ECAN.c: 810: BYTE_VAL temp;
 28740                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 28741                           
 28742                           ; BSR set to: 1
 28743                           ;incstack = 0
 28744                           ;incstack = 0
 28745  004198  6A27               	clrf	__ECANRxFilterHitInfo,c
 28746                           
 28747                           ; BSR set to: 1
 28748                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 28749  00419A  5077               	movf	3959,w,c	;volatile
 28750  00419C  0BC0               	andlw	192
 28751  00419E  6E13               	movwf	ECANReceiveMessage@mode,c
 28752                           
 28753                           ; BSR set to: 1
 28754                           ;ECAN.c: 816: if ( mode == 0x00 )
 28755  0041A0  6613               	tstfsz	ECANReceiveMessage@mode,c
 28756  0041A2  D032               	goto	i1l10186
 28757                           
 28758                           ; BSR set to: 1
 28759                           ;ECAN.c: 822: {
 28760                           ;ECAN.c: 824: if ( RXB0FUL )
 28761  0041A4  AE60               	btfss	3936,7,c	;volatile
 28762  0041A6  D012               	goto	i1l1520
 28763                           
 28764                           ; BSR set to: 1
 28765                           ;ECAN.c: 825: {
 28766                           ;ECAN.c: 827: RXB0IF = 0;
 28767  0041A8  90A4               	bcf	4004,0,c	;volatile
 28768                           
 28769                           ;ECAN.c: 830: if ( RXB0OVFL )
 28770  0041AA  AE74               	btfss	3956,7,c	;volatile
 28771  0041AC  D006               	goto	i1l10162
 28772                           
 28773                           ; BSR set to: 1
 28774                           ;ECAN.c: 831: {
 28775                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 28776  0041AE  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28777  0041B0  6ED9               	movwf	fsr2l,c
 28778  0041B2  6ADA               	clrf	fsr2h,c
 28779  0041B4  0E00               	movlw	0
 28780  0041B6  86DB               	bsf	plusw2,3,c
 28781                           
 28782                           ; BSR set to: 1
 28783                           ;ECAN.c: 833: RXB0OVFL = 0;
 28784  0041B8  9E74               	bcf	3956,7,c	;volatile
 28785  0041BA                     i1l10162:
 28786                           
 28787                           ; BSR set to: 1
 28788                           ;ECAN.c: 834: }
 28789                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 28790  0041BA  A060               	btfss	3936,0,c	;volatile
 28791  0041BC  D002               	bra	i1u1212_25
 28792  0041BE  8027               	bsf	__ECANRxFilterHitInfo,0,c
 28793  0041C0  D001               	bra	i1u1212_27
 28794  0041C2                     i1u1212_25:
 28795  0041C2  9027               	bcf	__ECANRxFilterHitInfo,0,c
 28796  0041C4                     i1u1212_27:
 28797                           
 28798                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 28799  0041C4  0E0F               	movlw	15	;volatile
 28800  0041C6  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28801  0041C8  0E60               	movlw	96	;volatile
 28802  0041CA  D01A               	goto	L48
 28803  0041CC                     i1l1520:
 28804                           
 28805                           ; BSR set to: 1
 28806                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 28807  0041CC  010F               	movlb	15	; () banked
 28808  0041CE  AF50               	btfss	80,7,b	;volatile
 28809  0041D0  D019               	goto	i1l10180
 28810                           
 28811                           ; BSR set to: 15
 28812                           ;ECAN.c: 842: {
 28813                           ;ECAN.c: 844: RXB1IF = 0;
 28814  0041D2  92A4               	bcf	4004,1,c	;volatile
 28815                           
 28816                           ;ECAN.c: 847: if ( RXB1OVFL )
 28817  0041D4  AC74               	btfss	3956,6,c	;volatile
 28818  0041D6  D006               	goto	i1l10172
 28819                           
 28820                           ; BSR set to: 15
 28821                           ;ECAN.c: 848: {
 28822                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 28823  0041D8  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28824  0041DA  6ED9               	movwf	fsr2l,c
 28825  0041DC  6ADA               	clrf	fsr2h,c
 28826  0041DE  0E00               	movlw	0
 28827  0041E0  86DB               	bsf	plusw2,3,c
 28828                           
 28829                           ; BSR set to: 15
 28830                           ;ECAN.c: 850: RXB1OVFL = 0;
 28831  0041E2  9C74               	bcf	3956,6,c	;volatile
 28832  0041E4                     i1l10172:
 28833                           
 28834                           ; BSR set to: 15
 28835                           ;ECAN.c: 851: }
 28836                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 28837  0041E4  5150               	movf	80,w,b	;volatile
 28838  0041E6  0B07               	andlw	7
 28839  0041E8  6E27               	movwf	__ECANRxFilterHitInfo,c
 28840                           
 28841                           ; BSR set to: 15
 28842                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 28843  0041EA  0E02               	movlw	2
 28844  0041EC  6027               	cpfslt	__ECANRxFilterHitInfo,c
 28845  0041EE  D005               	goto	i1l10178
 28846                           
 28847                           ; BSR set to: 15
 28848                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 28849  0041F0  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28850  0041F2  6ED9               	movwf	fsr2l,c
 28851  0041F4  6ADA               	clrf	fsr2h,c
 28852  0041F6  0E00               	movlw	0
 28853  0041F8  8EDB               	bsf	plusw2,7,c
 28854  0041FA                     i1l10178:
 28855                           
 28856                           ; BSR set to: 15
 28857                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 28858  0041FA  0E0F               	movlw	15	;volatile
 28859  0041FC  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28860  0041FE  0E50               	movlw	80	;volatile
 28861  004200                     L48:
 28862  004200  6E15               	movwf	ECANReceiveMessage@ptr,c
 28863                           
 28864                           ;ECAN.c: 860: }
 28865  004202  D065               	goto	i1l10240
 28866  004204                     i1l10180:
 28867                           
 28868                           ;ECAN.c: 861: else
 28869                           ;ECAN.c: 862: return FALSE;
 28870  004204  0E00               	movlw	0
 28871  004206  D0C6               	goto	i1l1527
 28872  004208                     i1l10186:
 28873                           
 28874                           ; BSR set to: 1
 28875                           ;ECAN.c: 869: else if ( mode == 0x40 )
 28876  004208  5013               	movf	ECANReceiveMessage@mode,w,c
 28877  00420A  0A40               	xorlw	64
 28878  00420C  E146               	bnz	i1l1530
 28879                           
 28880                           ; BSR set to: 1
 28881                           ;ECAN.c: 875: {
 28882                           ;ECAN.c: 876: if ( RXB0FUL )
 28883  00420E  AE60               	btfss	3936,7,c	;volatile
 28884  004210  D004               	goto	i1l1531
 28885                           
 28886                           ; BSR set to: 1
 28887                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 28888  004212  0E0F               	movlw	15	;volatile
 28889  004214  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28890  004216  0E60               	movlw	96	;volatile
 28891  004218  D03E               	goto	L55
 28892  00421A                     i1l1531:
 28893                           
 28894                           ; BSR set to: 1
 28895                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 28896  00421A  010F               	movlb	15	; () banked
 28897  00421C  AF50               	btfss	80,7,b	;volatile
 28898  00421E  D004               	goto	i1l1533
 28899                           
 28900                           ; BSR set to: 15
 28901                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 28902  004220  0E0F               	movlw	15	;volatile
 28903  004222  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28904  004224  0E50               	movlw	80	;volatile
 28905  004226  D037               	goto	L55
 28906  004228                     i1l1533:
 28907                           
 28908                           ; BSR set to: 15
 28909                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 28910  004228  010D               	movlb	13
 28911  00422A  B5F8               	btfsc	248,2,b	;volatile
 28912  00422C  D007               	goto	i1l1535
 28913  00422E  010E               	movlb	14
 28914  004230  AF20               	btfss	32,7,b	;volatile
 28915  004232  D004               	goto	i1l1535
 28916                           
 28917                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 28918  004234  0E0E               	movlw	14	;volatile
 28919  004236  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28920  004238  0E20               	movlw	32	;volatile
 28921  00423A  D02D               	goto	L55
 28922  00423C                     i1l1535:
 28923                           
 28924                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 28925  00423C  010D               	movlb	13
 28926  00423E  B7F8               	btfsc	248,3,b	;volatile
 28927  004240  D007               	goto	i1l1537
 28928  004242  010E               	movlb	14
 28929  004244  AF30               	btfss	48,7,b	;volatile
 28930  004246  D004               	goto	i1l1537
 28931                           
 28932                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 28933  004248  0E0E               	movlw	14	;volatile
 28934  00424A  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28935  00424C  0E30               	movlw	48	;volatile
 28936  00424E  D023               	goto	L55
 28937  004250                     i1l1537:
 28938                           
 28939                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 28940  004250  010D               	movlb	13
 28941  004252  B9F8               	btfsc	248,4,b	;volatile
 28942  004254  D007               	goto	i1l1539
 28943  004256  010E               	movlb	14
 28944  004258  AF40               	btfss	64,7,b	;volatile
 28945  00425A  D004               	goto	i1l1539
 28946                           
 28947                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 28948  00425C  0E0E               	movlw	14	;volatile
 28949  00425E  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28950  004260  0E40               	movlw	64	;volatile
 28951  004262  D019               	goto	L55
 28952  004264                     i1l1539:
 28953                           
 28954                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 28955  004264  010D               	movlb	13
 28956  004266  BBF8               	btfsc	248,5,b	;volatile
 28957  004268  D005               	goto	i1l1541
 28958  00426A  010E               	movlb	14
 28959  00426C  AF50               	btfss	80,7,b	;volatile
 28960  00426E  D002               	goto	i1l1541
 28961                           
 28962                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 28963  004270  0E0E               	movlw	14	;volatile
 28964  004272  D7D7               	goto	L56
 28965  004274                     i1l1541:
 28966                           
 28967                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 28968  004274  010D               	movlb	13
 28969  004276  BDF8               	btfsc	248,6,b	;volatile
 28970  004278  D005               	goto	i1l1543
 28971  00427A  010E               	movlb	14
 28972  00427C  AF60               	btfss	96,7,b	;volatile
 28973  00427E  D002               	goto	i1l1543
 28974                           
 28975                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 28976  004280  0E0E               	movlw	14	;volatile
 28977  004282  D7C8               	goto	L57
 28978  004284                     i1l1543:
 28979                           
 28980                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 28981  004284  010D               	movlb	13
 28982  004286  BFF8               	btfsc	248,7,b	;volatile
 28983  004288  D7BD               	goto	i1l10180
 28984  00428A  010E               	movlb	14
 28985  00428C  AF70               	btfss	112,7,b	;volatile
 28986  00428E  D7BA               	goto	i1l10180
 28987                           
 28988                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 28989  004290  0E0E               	movlw	14	;volatile
 28990  004292  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28991  004294  0E70               	movlw	112	;volatile
 28992  004296                     L55:
 28993  004296  6E15               	movwf	ECANReceiveMessage@ptr,c
 28994  004298  D00A               	goto	i1l10230
 28995  00429A                     i1l1530:
 28996                           
 28997                           ; BSR set to: 1
 28998                           ;ECAN.c: 910: else
 28999                           ;ECAN.c: 915: {
 29000                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 29001  00429A  AE74               	btfss	3956,7,c	;volatile
 29002  00429C  D7B3               	goto	i1l10180
 29003                           
 29004                           ; BSR set to: 1
 29005                           ;ECAN.c: 919: {
 29006                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 29007  00429E  506F               	movf	3951,w,c	;volatile
 29008  0042A0  0B07               	andlw	7
 29009  0042A2  EC10  F00C         	call	__ECANPointBuffer
 29010  0042A6  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 29011  0042AA  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 29012  0042AE                     i1l10230:
 29013                           
 29014                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 29015  0042AE  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 29016  0042B2  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 29017  0042B6  50DF               	movf	indf2,w,c
 29018  0042B8  0B1F               	andlw	31
 29019  0042BA  6E27               	movwf	__ECANRxFilterHitInfo,c
 29020                           
 29021                           ;ECAN.c: 934: RXB1IF = 0;
 29022  0042BC  92A4               	bcf	4004,1,c	;volatile
 29023                           
 29024                           ;ECAN.c: 936: if ( RXB1OVFL )
 29025  0042BE  AC74               	btfss	3956,6,c	;volatile
 29026  0042C0  D006               	goto	i1l10240
 29027                           
 29028                           ;ECAN.c: 937: {
 29029                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 29030  0042C2  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29031  0042C4  6ED9               	movwf	fsr2l,c
 29032  0042C6  6ADA               	clrf	fsr2h,c
 29033  0042C8  0E00               	movlw	0
 29034  0042CA  86DB               	bsf	plusw2,3,c
 29035                           
 29036                           ;ECAN.c: 939: RXB1OVFL = 0;
 29037  0042CC  9C74               	bcf	3956,6,c	;volatile
 29038  0042CE                     i1l10240:
 29039                           
 29040                           ;ECAN.c: 944: savedPtr = ptr;
 29041  0042CE  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 29042  0042D2  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 29043                           
 29044                           ;ECAN.c: 945: *msgFlags = 0;
 29045  0042D6  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29046  0042D8  6ED9               	movwf	fsr2l,c
 29047  0042DA  6ADA               	clrf	fsr2h,c
 29048  0042DC  6ADF               	clrf	indf2,c
 29049                           
 29050                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 29051  0042DE  EE20 F005          	lfsr	2,5
 29052  0042E2  D859               	call	PL104	;call to abstracted procedure
 29053                           
 29054                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 29055  0042E4  500E               	movf	ECANReceiveMessage@dataLen,w,c
 29056  0042E6  6ED9               	movwf	fsr2l,c
 29057  0042E8  6ADA               	clrf	fsr2h,c
 29058  0042EA  5014               	movf	ECANReceiveMessage@temp,w,c
 29059  0042EC  0B0F               	andlw	15
 29060  0042EE  6EDF               	movwf	indf2,c
 29061                           
 29062                           ;ECAN.c: 952: if ( temp.bits.b6 )
 29063  0042F0  AC14               	btfss	ECANReceiveMessage@temp,6,c
 29064  0042F2  D005               	goto	i1l1551
 29065                           
 29066                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 29067  0042F4  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29068  0042F6  6ED9               	movwf	fsr2l,c
 29069  0042F8  6ADA               	clrf	fsr2h,c
 29070  0042FA  0E00               	movlw	0
 29071  0042FC  8CDB               	bsf	plusw2,6,c
 29072  0042FE                     i1l1551:
 29073                           
 29074                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 29075  0042FE  EE20 F002          	lfsr	2,2
 29076  004302  D849               	call	PL104	;call to abstracted procedure
 29077                           
 29078                           ;ECAN.c: 957: if ( temp.bits.b3 )
 29079  004304  A614               	btfss	ECANReceiveMessage@temp,3,c
 29080  004306  D008               	goto	i1l1552
 29081                           
 29082                           ;ECAN.c: 958: {
 29083                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 29084  004308  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29085  00430A  6ED9               	movwf	fsr2l,c
 29086  00430C  6ADA               	clrf	fsr2h,c
 29087  00430E  0E00               	movlw	0
 29088  004310  8ADB               	bsf	plusw2,5,c
 29089                           
 29090                           ;ECAN.c: 960: temp.Val = 1;
 29091  004312  0E01               	movlw	1
 29092  004314  6E14               	movwf	ECANReceiveMessage@temp,c
 29093                           
 29094                           ;ECAN.c: 961: }
 29095  004316  D001               	goto	i1l10258
 29096  004318                     i1l1552:
 29097                           
 29098                           ;ECAN.c: 962: else
 29099                           ;ECAN.c: 963: temp.Val = 0;
 29100  004318  6A14               	clrf	ECANReceiveMessage@temp,c
 29101  00431A                     i1l10258:
 29102                           
 29103                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 29104  00431A  2815               	incf	ECANReceiveMessage@ptr,w,c
 29105  00431C  6E01               	movwf	?__RegsToCANID,c
 29106  00431E  0E00               	movlw	0
 29107  004320  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 29108  004322  6E02               	movwf	?__RegsToCANID+1,c
 29109  004324  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 29110  004328  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 29111  00432C  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 29112  004330  ECF1  F017         	call	__RegsToCANID	;wreg free
 29113                           
 29114                           ;ECAN.c: 968: ptr += 6;
 29115  004334  0E06               	movlw	6
 29116  004336  2615               	addwf	ECANReceiveMessage@ptr,f,c
 29117  004338  0E00               	movlw	0
 29118  00433A  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 29119                           
 29120                           ;ECAN.c: 969: temp.Val = *dataLen;
 29121  00433C  500E               	movf	ECANReceiveMessage@dataLen,w,c
 29122  00433E  6ED9               	movwf	fsr2l,c
 29123  004340  6ADA               	clrf	fsr2h,c
 29124  004342  50DF               	movf	indf2,w,c
 29125  004344  6E14               	movwf	ECANReceiveMessage@temp,c
 29126                           
 29127                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 29128  004346  6A12               	clrf	ECANReceiveMessage@i,c
 29129  004348  D00F               	goto	i1l10274
 29130  00434A                     i1l10266:
 29131                           
 29132                           ;ECAN.c: 971: *data++ = *ptr++;
 29133  00434A  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 29134  00434E  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 29135  004352  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 29136  004356  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 29137  00435A  CFDF FFE7          	movff	indf2,indf1
 29138  00435E  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 29139  004360  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 29140  004362  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 29141  004364  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 29142  004366  2A12               	incf	ECANReceiveMessage@i,f,c
 29143  004368                     i1l10274:
 29144  004368  5014               	movf	ECANReceiveMessage@temp,w,c
 29145  00436A  5C12               	subwf	ECANReceiveMessage@i,w,c
 29146  00436C  E3EE               	bnc	i1l10266
 29147                           
 29148                           ;ECAN.c: 974: if ( IRXIF )
 29149  00436E  AEA4               	btfss	4004,7,c	;volatile
 29150  004370  D006               	goto	i1l10280
 29151                           
 29152                           ;ECAN.c: 975: {
 29153                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 29154  004372  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29155  004374  6ED9               	movwf	fsr2l,c
 29156  004376  6ADA               	clrf	fsr2h,c
 29157  004378  0E00               	movlw	0
 29158  00437A  88DB               	bsf	plusw2,4,c
 29159                           
 29160                           ;ECAN.c: 977: IRXIF = 0;
 29161  00437C  9EA4               	bcf	4004,7,c	;volatile
 29162  00437E                     i1l10280:
 29163                           
 29164                           ;ECAN.c: 978: }
 29165                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 29166  00437E  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 29167  004382  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 29168  004386  0E7F               	movlw	127
 29169  004388  16DF               	andwf	indf2,f,c
 29170                           
 29171                           ;ECAN.c: 985: if ( mode == 0x80 )
 29172  00438A  5013               	movf	ECANReceiveMessage@mode,w,c
 29173  00438C  0A80               	xorlw	128
 29174  00438E  B4D8               	btfsc	status,2,c
 29175                           
 29176                           ;ECAN.c: 986: FIFOEMPTY = 0;
 29177  004390  9E74               	bcf	3956,7,c	;volatile
 29178                           
 29179                           ;ECAN.c: 992: return TRUE;
 29180  004392  0E01               	movlw	1
 29181  004394                     i1l1527:
 29182  004394  0012               	return	
 29183  004396                     __end_of_ECANReceiveMessage:
 29184                           	opt stack 0
 29185  004396                     PL104:
 29186                           	opt stack 19
 29187  004396  5015               	movf	ECANReceiveMessage@ptr,w,c
 29188  004398  26D9               	addwf	fsr2l,f,c
 29189  00439A  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 29190  00439C  22DA               	addwfc	fsr2h,f,c
 29191  00439E  50DF               	movf	indf2,w,c
 29192  0043A0  6E14               	movwf	ECANReceiveMessage@temp,c
 29193  0043A2  0012               	return	
 29194  0043A4                     __end_ofPL104:
 29195                           	opt stack 0
 29196                           tblptru	equ	0xFF8
 29197                           tblptrh	equ	0xFF7
 29198                           tblptrl	equ	0xFF6
 29199                           tablat	equ	0xFF5
 29200                           prodh	equ	0xFF4
 29201                           prodl	equ	0xFF3
 29202                           intcon	equ	0xFF2
 29203                           indf0	equ	0xFEF
 29204                           postinc0	equ	0xFEE
 29205                           fsr0h	equ	0xFEA
 29206                           fsr0l	equ	0xFE9
 29207                           wreg	equ	0xFE8
 29208                           indf1	equ	0xFE7
 29209                           postinc1	equ	0xFE6
 29210                           postdec1	equ	0xFE5
 29211                           fsr1h	equ	0xFE2
 29212                           fsr1l	equ	0xFE1
 29213                           bsr	equ	0xFE0
 29214                           indf2	equ	0xFDF
 29215                           postinc2	equ	0xFDE
 29216                           postdec2	equ	0xFDD
 29217                           plusw2	equ	0xFDB
 29218                           fsr2h	equ	0xFDA
 29219                           fsr2l	equ	0xFD9
 29220                           status	equ	0xFD8
 29221                           
 29222 ;; *************** function __RegsToCANID *****************
 29223 ;; Defined at:
 29224 ;;		line 1158 in file "ECAN.c"
 29225 ;; Parameters:    Size  Location     Type
 29226 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 29227 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29228 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29229 ;;  val             2    2[COMRAM] PTR unsigned long 
 29230 ;;		 -> id(4), 
 29231 ;;  type            1    4[COMRAM] unsigned char 
 29232 ;; Auto vars:     Size  Location     Type
 29233 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 29234 ;;		 -> id(4), 
 29235 ;; Return value:  Size  Location     Type
 29236 ;;		None               void
 29237 ;; Registers used:
 29238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29239 ;; Tracked objects:
 29240 ;;		On entry : 0/1
 29241 ;;		On exit  : 0/0
 29242 ;;		Unchanged: 0/0
 29243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29244 ;;      Params:         5       0       0       0       0       0       0
 29245 ;;      Locals:         2       0       0       0       0       0       0
 29246 ;;      Temps:          2       0       0       0       0       0       0
 29247 ;;      Totals:         9       0       0       0       0       0       0
 29248 ;;Total ram usage:        9 bytes
 29249 ;; Hardware stack levels used:    1
 29250 ;; This function calls:
 29251 ;;		Nothing
 29252 ;; This function is called by:
 29253 ;;		_ECANReceiveMessage
 29254 ;; This function uses a non-reentrant model
 29255 ;;
 29256                           
 29257                           	psect	text86
 29258  002FE2                     __ptext86:
 29259                           	opt stack 0
 29260  002FE2                     __RegsToCANID:
 29261                           	opt stack 19
 29262                           
 29263                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 29264                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 29265                           
 29266                           ;incstack = 0
 29267                           ;incstack = 0
 29268  002FE2  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 29269  002FE6  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 29270                           
 29271                           ;ECAN.c: 1163: if ( type == 0 )
 29272  002FEA  6605               	tstfsz	__RegsToCANID@type,c
 29273  002FEC  D038               	goto	i1l9930
 29274                           
 29275                           ;ECAN.c: 1164: {
 29276                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 29277  002FEE  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29278  002FF2  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29279  002FF6  50DF               	movf	indf2,w,c
 29280  002FF8  6E06               	movwf	??__RegsToCANID& (0+255),c
 29281  002FFA  90D8               	bcf	status,0,c
 29282  002FFC  3606               	rlcf	??__RegsToCANID,f,c
 29283  002FFE  90D8               	bcf	status,0,c
 29284  003000  3606               	rlcf	??__RegsToCANID,f,c
 29285  003002  90D8               	bcf	status,0,c
 29286  003004  3406               	rlcf	??__RegsToCANID,w,c
 29287  003006  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 29288  00300A  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 29289  00300E  6EDF               	movwf	indf2,c
 29290                           
 29291                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 29292  003010  EE20 F001          	lfsr	2,1
 29293  003014  D864               	call	PL22	;call to abstracted procedure
 29294  003016  0E05               	movlw	5
 29295  003018  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29296  00301A                     i1u1172_25:
 29297  00301A  90D8               	bcf	status,0,c
 29298  00301C  3206               	rrcf	??__RegsToCANID,f,c
 29299  00301E  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29300  003020  D7FC               	goto	i1u1172_25
 29301  003022  5006               	movf	??__RegsToCANID,w,c
 29302                           
 29303                           ;ECAN.c: 1168: ptr++;
 29304                           
 29305                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 29306  003024  D871               	call	PL74	;call to abstracted procedure
 29307  003026  0E05               	movlw	5
 29308  003028  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29309  00302A                     i1u1173_25:
 29310  00302A  90D8               	bcf	status,0,c
 29311  00302C  3206               	rrcf	??__RegsToCANID,f,c
 29312  00302E  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29313  003030  D7FC               	goto	i1u1173_25
 29314  003032  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 29315  003036  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 29316  00303A  5006               	movf	??__RegsToCANID,w,c
 29317  00303C  12DF               	iorwf	indf2,f,c
 29318                           
 29319                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 29320  00303E  EE20 F002          	lfsr	2,2
 29321  003042  5008               	movf	__RegsToCANID@Value,w,c
 29322  003044  26D9               	addwf	fsr2l,f,c
 29323  003046  5009               	movf	__RegsToCANID@Value+1,w,c
 29324  003048  22DA               	addwfc	fsr2h,f,c
 29325  00304A  6ADF               	clrf	indf2,c
 29326                           
 29327                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 29328  00304C  EE20 F003          	lfsr	2,3
 29329  003050  5008               	movf	__RegsToCANID@Value,w,c
 29330  003052  26D9               	addwf	fsr2l,f,c
 29331  003054  5009               	movf	__RegsToCANID@Value+1,w,c
 29332  003056  22DA               	addwfc	fsr2h,f,c
 29333  003058  0E00               	movlw	0
 29334  00305A  6EDF               	movwf	indf2,c
 29335                           
 29336                           ;ECAN.c: 1172: }
 29337  00305C  D03F               	goto	i1l1574
 29338  00305E                     i1l9930:
 29339                           
 29340                           ;ECAN.c: 1173: else
 29341                           ;ECAN.c: 1174: {
 29342                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 29343  00305E  EE20 F002          	lfsr	2,2
 29344  003062  D83D               	call	PL22	;call to abstracted procedure
 29345  003064  0E05               	movlw	5
 29346  003066  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29347  003068                     i1u1174_25:
 29348  003068  90D8               	bcf	status,0,c
 29349  00306A  3606               	rlcf	??__RegsToCANID,f,c
 29350  00306C  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29351  00306E  D7FC               	goto	i1u1174_25
 29352  003070  5006               	movf	??__RegsToCANID,w,c
 29353  003072  6EDF               	movwf	indf2,c
 29354                           
 29355                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 29356  003074  EE20 F003          	lfsr	2,3
 29357  003078  D832               	call	PL22	;call to abstracted procedure
 29358  00307A  90D8               	bcf	status,0,c
 29359  00307C  3206               	rrcf	??__RegsToCANID,f,c
 29360  00307E  90D8               	bcf	status,0,c
 29361  003080  3206               	rrcf	??__RegsToCANID,f,c
 29362  003082  90D8               	bcf	status,0,c
 29363  003084  3006               	rrcf	??__RegsToCANID,w,c
 29364                           
 29365                           ;ECAN.c: 1178: ptr++;
 29366                           
 29367                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 29368  003086  D840               	call	PL74	;call to abstracted procedure
 29369  003088  0E03               	movlw	3
 29370  00308A  D834               	call	PL70	;call to abstracted procedure
 29371                           
 29372                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 29373  00308C  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29374  003090  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29375  003094  50DF               	movf	indf2,w,c
 29376  003096  6E06               	movwf	??__RegsToCANID& (0+255),c
 29377  003098  90D8               	bcf	status,0,c
 29378  00309A  3206               	rrcf	??__RegsToCANID,f,c
 29379  00309C  90D8               	bcf	status,0,c
 29380  00309E  3206               	rrcf	??__RegsToCANID,f,c
 29381  0030A0  90D8               	bcf	status,0,c
 29382  0030A2  3206               	rrcf	??__RegsToCANID,f,c
 29383  0030A4  0E1C               	movlw	28
 29384  0030A6  D826               	call	PL70	;call to abstracted procedure
 29385                           
 29386                           ;ECAN.c: 1182: ptr++;
 29387  0030A8  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29388  0030AA  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29389                           
 29390                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 29391  0030AC  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29392  0030B0  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29393  0030B4  EE10 F001          	lfsr	1,1
 29394  0030B8  5008               	movf	__RegsToCANID@Value,w,c
 29395  0030BA  26E1               	addwf	fsr1l,f,c
 29396  0030BC  5009               	movf	__RegsToCANID@Value+1,w,c
 29397  0030BE  22E2               	addwfc	fsr1h,f,c
 29398  0030C0  CFDF FFE7          	movff	indf2,indf1
 29399                           
 29400                           ;ECAN.c: 1184: ptr++;
 29401  0030C4  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29402  0030C6  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29403                           
 29404                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 29405  0030C8  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29406  0030CC  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29407  0030D0  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 29408  0030D4  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 29409  0030D8  CFDF FFE7          	movff	indf2,indf1
 29410  0030DC                     i1l1574:
 29411  0030DC  0012               	return	
 29412  0030DE                     __end_of__RegsToCANID:
 29413                           	opt stack 0
 29414  0030DE                     PL22:
 29415                           	opt stack 19
 29416  0030DE  5008               	movf	__RegsToCANID@Value,w,c
 29417  0030E0  26D9               	addwf	fsr2l,f,c
 29418  0030E2  5009               	movf	__RegsToCANID@Value+1,w,c
 29419  0030E4  22DA               	addwfc	fsr2h,f,c
 29420  0030E6  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 29421  0030EA  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 29422  0030EE  50E7               	movf	indf1,w,c
 29423  0030F0  6E06               	movwf	??__RegsToCANID& (0+255),c
 29424  0030F2  0012               	return	
 29425  0030F4                     __end_ofPL22:
 29426                           	opt stack 0
 29427  0030F4                     PL70:
 29428                           	opt stack 19
 29429  0030F4  1606               	andwf	??__RegsToCANID,f,c
 29430  0030F6  EE20 F002          	lfsr	2,2
 29431  0030FA  5008               	movf	__RegsToCANID@Value,w,c
 29432  0030FC  26D9               	addwf	fsr2l,f,c
 29433  0030FE  5009               	movf	__RegsToCANID@Value+1,w,c
 29434  003100  22DA               	addwfc	fsr2h,f,c
 29435  003102  5006               	movf	??__RegsToCANID,w,c
 29436  003104  12DF               	iorwf	indf2,f,c
 29437  003106  0012               	return	
 29438  003108                     __end_ofPL70:
 29439                           	opt stack 0
 29440  003108                     PL74:
 29441                           	opt stack 19
 29442  003108  6EDF               	movwf	indf2,c
 29443  00310A  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29444  00310C  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29445  00310E  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29446  003112  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29447  003116  50DF               	movf	indf2,w,c
 29448  003118  6E06               	movwf	??__RegsToCANID& (0+255),c
 29449  00311A  0012               	return	
 29450  00311C                     __end_ofPL74:
 29451                           	opt stack 0
 29452                           tblptru	equ	0xFF8
 29453                           tblptrh	equ	0xFF7
 29454                           tblptrl	equ	0xFF6
 29455                           tablat	equ	0xFF5
 29456                           prodh	equ	0xFF4
 29457                           prodl	equ	0xFF3
 29458                           intcon	equ	0xFF2
 29459                           indf0	equ	0xFEF
 29460                           postinc0	equ	0xFEE
 29461                           fsr0h	equ	0xFEA
 29462                           fsr0l	equ	0xFE9
 29463                           wreg	equ	0xFE8
 29464                           indf1	equ	0xFE7
 29465                           postinc1	equ	0xFE6
 29466                           postdec1	equ	0xFE5
 29467                           fsr1h	equ	0xFE2
 29468                           fsr1l	equ	0xFE1
 29469                           bsr	equ	0xFE0
 29470                           indf2	equ	0xFDF
 29471                           postinc2	equ	0xFDE
 29472                           postdec2	equ	0xFDD
 29473                           plusw2	equ	0xFDB
 29474                           fsr2h	equ	0xFDA
 29475                           fsr2l	equ	0xFD9
 29476                           status	equ	0xFD8
 29477                           
 29478 ;; *************** function __ECANPointBuffer *****************
 29479 ;; Defined at:
 29480 ;;		line 1209 in file "ECAN.c"
 29481 ;; Parameters:    Size  Location     Type
 29482 ;;  b               1    wreg     unsigned char 
 29483 ;; Auto vars:     Size  Location     Type
 29484 ;;  b               1    3[COMRAM] unsigned char 
 29485 ;;  pt              2    4[COMRAM] PTR unsigned char 
 29486 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29487 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29488 ;; Return value:  Size  Location     Type
 29489 ;;                  2    0[COMRAM] PTR unsigned char 
 29490 ;; Registers used:
 29491 ;;		wreg, status,2, status,0
 29492 ;; Tracked objects:
 29493 ;;		On entry : F/1
 29494 ;;		On exit  : 0/0
 29495 ;;		Unchanged: 0/0
 29496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29497 ;;      Params:         3       0       0       0       0       0       0
 29498 ;;      Locals:         3       0       0       0       0       0       0
 29499 ;;      Temps:          0       0       0       0       0       0       0
 29500 ;;      Totals:         6       0       0       0       0       0       0
 29501 ;;Total ram usage:        6 bytes
 29502 ;; Hardware stack levels used:    1
 29503 ;; This function calls:
 29504 ;;		Nothing
 29505 ;; This function is called by:
 29506 ;;		_ECANReceiveMessage
 29507 ;; This function uses a non-reentrant model
 29508 ;;
 29509                           
 29510                           	psect	text87
 29511  001820                     __ptext87:
 29512                           	opt stack 0
 29513  001820                     __ECANPointBuffer:
 29514                           	opt stack 19
 29515                           
 29516                           ;incstack = 0
 29517                           ;incstack = 0
 29518                           ;__ECANPointBuffer@b stored from wreg
 29519  001820  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 29520                           
 29521                           ; BSR set to: 1
 29522                           ;ECAN.c: 1210: BYTE* pt;
 29523                           ;ECAN.c: 1212: switch(b)
 29524  001824  D024               	goto	i1l9914
 29525  001826                     i1l9896:
 29526                           
 29527                           ; BSR set to: 1
 29528                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 29529  001826  0E0F               	movlw	15	;volatile
 29530  001828  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29531  00182A  0E60               	movlw	96	;volatile
 29532  00182C  D01E               	goto	L64
 29533  00182E                     i1l9898:
 29534                           
 29535                           ; BSR set to: 1
 29536                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 29537  00182E  010F               	movlb	15	; () banked
 29538  001830  0E0F               	movlw	15	;volatile
 29539  001832  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29540  001834  0E50               	movlw	80	;volatile
 29541  001836  D019               	goto	L64
 29542  001838                     i1l9900:
 29543                           
 29544                           ; BSR set to: 1
 29545                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 29546  001838  010E               	movlb	14	; () banked
 29547  00183A  0E0E               	movlw	14	;volatile
 29548  00183C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29549  00183E  0E20               	movlw	32	;volatile
 29550  001840  D014               	goto	L64
 29551  001842                     i1l9902:
 29552                           
 29553                           ; BSR set to: 1
 29554                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 29555  001842  010E               	movlb	14	; () banked
 29556  001844  0E0E               	movlw	14	;volatile
 29557  001846  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29558  001848  0E30               	movlw	48	;volatile
 29559  00184A  D00F               	goto	L64
 29560  00184C                     i1l9904:
 29561                           
 29562                           ; BSR set to: 1
 29563                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 29564  00184C  010E               	movlb	14	; () banked
 29565  00184E  0E0E               	movlw	14	;volatile
 29566  001850  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29567  001852  0E40               	movlw	64	;volatile
 29568  001854  D00A               	goto	L64
 29569  001856                     i1l9906:
 29570                           
 29571                           ; BSR set to: 1
 29572                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 29573  001856  010E               	movlb	14	; () banked
 29574  001858  0E0E               	movlw	14	;volatile
 29575  00185A  D7EB               	goto	L65
 29576  00185C                     i1l9908:
 29577                           
 29578                           ; BSR set to: 1
 29579                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 29580  00185C  010E               	movlb	14	; () banked
 29581  00185E  0E0E               	movlw	14	;volatile
 29582  001860  D7E3               	goto	L66
 29583  001862                     i1l9910:
 29584                           
 29585                           ; BSR set to: 1
 29586                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 29587  001862  010E               	movlb	14	; () banked
 29588  001864  0E0E               	movlw	14	;volatile
 29589  001866  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29590  001868  0E70               	movlw	112	;volatile
 29591  00186A                     L64:
 29592  00186A  6E05               	movwf	__ECANPointBuffer@pt,c
 29593                           
 29594                           ;ECAN.c: 1237: break;
 29595  00186C  D00F               	goto	i1l1579
 29596  00186E                     i1l9914:
 29597                           
 29598                           ; BSR set to: 1
 29599  00186E  5004               	movf	__ECANPointBuffer@b,w,c
 29600                           
 29601                           ; Switch size 1, requested type "space"
 29602                           ; Number of cases is 7, Range of values is 0 to 6
 29603                           ; switch strategies available:
 29604                           ; Name         Instructions Cycles
 29605                           ; simple_byte           22    12 (average)
 29606                           ;	Chosen strategy is simple_byte
 29607  001870  E0DA               	bz	i1l9896
 29608  001872  0A01               	xorlw	1	; case 1
 29609  001874  E0DC               	bz	i1l9898
 29610  001876  0A03               	xorlw	3	; case 2
 29611  001878  E0DF               	bz	i1l9900
 29612  00187A  0A01               	xorlw	1	; case 3
 29613  00187C  E0E2               	bz	i1l9902
 29614  00187E  0A07               	xorlw	7	; case 4
 29615  001880  E0E5               	bz	i1l9904
 29616  001882  0A01               	xorlw	1	; case 5
 29617  001884  E0E8               	bz	i1l9906
 29618  001886  0A03               	xorlw	3	; case 6
 29619  001888  E0E9               	bz	i1l9908
 29620  00188A  D7EB               	goto	i1l9910
 29621  00188C                     i1l1579:
 29622                           
 29623                           ;ECAN.c: 1239: return (pt);
 29624  00188C  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 29625  001890  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 29626  001894  0012               	return	
 29627  001896                     __end_of__ECANPointBuffer:
 29628                           	opt stack 0
 29629                           tblptru	equ	0xFF8
 29630                           tblptrh	equ	0xFF7
 29631                           tblptrl	equ	0xFF6
 29632                           tablat	equ	0xFF5
 29633                           prodh	equ	0xFF4
 29634                           prodl	equ	0xFF3
 29635                           intcon	equ	0xFF2
 29636                           indf0	equ	0xFEF
 29637                           postinc0	equ	0xFEE
 29638                           fsr0h	equ	0xFEA
 29639                           fsr0l	equ	0xFE9
 29640                           wreg	equ	0xFE8
 29641                           indf1	equ	0xFE7
 29642                           postinc1	equ	0xFE6
 29643                           postdec1	equ	0xFE5
 29644                           fsr1h	equ	0xFE2
 29645                           fsr1l	equ	0xFE1
 29646                           bsr	equ	0xFE0
 29647                           indf2	equ	0xFDF
 29648                           postinc2	equ	0xFDE
 29649                           postdec2	equ	0xFDD
 29650                           plusw2	equ	0xFDB
 29651                           fsr2h	equ	0xFDA
 29652                           fsr2l	equ	0xFD9
 29653                           status	equ	0xFD8
 29654                           
 29655 ;; *************** function _fifo_write *****************
 29656 ;; Defined at:
 29657 ;;		line 61 in file "fifo.c"
 29658 ;; Parameters:    Size  Location     Type
 29659 ;;  f               2    0[COMRAM] PTR struct .
 29660 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 29661 ;;  buf             2    2[COMRAM] PTR const void 
 29662 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 29663 ;;  nbytes          4    4[COMRAM] unsigned long 
 29664 ;; Auto vars:     Size  Location     Type
 29665 ;;  i               4   14[COMRAM] unsigned long 
 29666 ;;  p               2   12[COMRAM] PTR const unsigned char 
 29667 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 29668 ;; Return value:  Size  Location     Type
 29669 ;;                  2    0[COMRAM] unsigned short 
 29670 ;; Registers used:
 29671 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29672 ;; Tracked objects:
 29673 ;;		On entry : F/1
 29674 ;;		On exit  : F/1
 29675 ;;		Unchanged: F/0
 29676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29677 ;;      Params:         8       0       0       0       0       0       0
 29678 ;;      Locals:         6       0       0       0       0       0       0
 29679 ;;      Temps:          4       0       0       0       0       0       0
 29680 ;;      Totals:        18       0       0       0       0       0       0
 29681 ;;Total ram usage:       18 bytes
 29682 ;; Hardware stack levels used:    1
 29683 ;; This function calls:
 29684 ;;		Nothing
 29685 ;; This function is called by:
 29686 ;;		_Interrupt
 29687 ;; This function uses a non-reentrant model
 29688 ;;
 29689                           
 29690                           	psect	text88
 29691  002EB6                     __ptext88:
 29692                           	opt stack 0
 29693  002EB6                     _fifo_write:
 29694                           	opt stack 20
 29695                           
 29696                           ; BSR set to: 1
 29697                           ;fifo.c: 62: uint32_t i;
 29698                           ;fifo.c: 63: const uint8_t *p;
 29699                           ;fifo.c: 64: p = buf;
 29700                           
 29701                           ;incstack = 0
 29702                           ;incstack = 0
 29703  002EB6  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 29704  002EBA  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 29705                           
 29706                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 29707  002EBE  6A0F               	clrf	fifo_write@i,c
 29708  002EC0  6A10               	clrf	fifo_write@i+1,c
 29709  002EC2  6A11               	clrf	fifo_write@i+2,c
 29710  002EC4  6A12               	clrf	fifo_write@i+3,c
 29711  002EC6  D068               	goto	i1l6666
 29712  002EC8                     i1l6646:
 29713                           
 29714                           ; BSR set to: 1
 29715                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 29716                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 29717  002EC8  EE20 F004          	lfsr	2,4
 29718  002ECC  5001               	movf	fifo_write@f,w,c
 29719  002ECE  D872               	call	PL14	;call to abstracted procedure
 29720  002ED0  E102               	bnz	i1u652_25
 29721  002ED2  5009               	movf	??_fifo_write,w,c
 29722  002ED4  180B               	xorwf	??_fifo_write+2,w,c
 29723  002ED6                     i1u652_25:
 29724  002ED6  E011               	bz	i1l1606
 29725                           
 29726                           ; BSR set to: 1
 29727  002ED8  EE20 F006          	lfsr	2,6
 29728  002EDC  5001               	movf	fifo_write@f,w,c
 29729  002EDE  D86A               	call	PL14	;call to abstracted procedure
 29730  002EE0  E102               	bnz	i1u653_25
 29731  002EE2  5009               	movf	??_fifo_write,w,c
 29732  002EE4  180B               	xorwf	??_fifo_write+2,w,c
 29733  002EE6                     i1u653_25:
 29734  002EE6  E10E               	bnz	i1l6654
 29735                           
 29736                           ; BSR set to: 1
 29737  002EE8  EE20 F004          	lfsr	2,4
 29738  002EEC  5001               	movf	fifo_write@f,w,c
 29739  002EEE  26D9               	addwf	fsr2l,f,c
 29740  002EF0  5002               	movf	fifo_write@f+1,w,c
 29741  002EF2  22DA               	addwfc	fsr2h,f,c
 29742  002EF4  50DE               	movf	postinc2,w,c
 29743  002EF6  10DD               	iorwf	postdec2,w,c
 29744  002EF8  E105               	bnz	i1l6654
 29745  002EFA                     i1l1606:
 29746                           
 29747                           ; BSR set to: 1
 29748                           ;fifo.c: 71: return i;
 29749  002EFA  C00F  F001         	movff	fifo_write@i,?_fifo_write
 29750  002EFE  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 29751  002F02  D057               	goto	i1l1607
 29752  002F04                     i1l6654:
 29753                           
 29754                           ; BSR set to: 1
 29755                           ;fifo.c: 73: else {
 29756                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 29757  002F04  C00D  FFD9         	movff	fifo_write@p,fsr2l
 29758  002F08  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 29759  002F0C  EE10 F002          	lfsr	1,2
 29760  002F10  5001               	movf	fifo_write@f,w,c
 29761  002F12  26E1               	addwf	fsr1l,f,c
 29762  002F14  5002               	movf	fifo_write@f+1,w,c
 29763  002F16  22E2               	addwfc	fsr1h,f,c
 29764  002F18  CFE6 F009          	movff	postinc1,??_fifo_write
 29765  002F1C  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 29766  002F20  C001  FFE1         	movff	fifo_write@f,fsr1l
 29767  002F24  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 29768  002F28  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 29769  002F2C  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 29770  002F30  5009               	movf	??_fifo_write,w,c
 29771  002F32  240B               	addwf	??_fifo_write+2,w,c
 29772  002F34  6EE1               	movwf	fsr1l,c
 29773  002F36  500A               	movf	??_fifo_write+1,w,c
 29774  002F38  200C               	addwfc	??_fifo_write+3,w,c
 29775  002F3A  6EE2               	movwf	fsr1h,c
 29776  002F3C  CFDF FFE7          	movff	indf2,indf1
 29777                           
 29778                           ; BSR set to: 1
 29779  002F40  4A0D               	infsnz	fifo_write@p,f,c
 29780  002F42  2A0E               	incf	fifo_write@p+1,f,c
 29781                           
 29782                           ; BSR set to: 1
 29783                           ;fifo.c: 75: f->head++;
 29784  002F44  EE20 F002          	lfsr	2,2
 29785  002F48  5001               	movf	fifo_write@f,w,c
 29786  002F4A  26D9               	addwf	fsr2l,f,c
 29787  002F4C  5002               	movf	fifo_write@f+1,w,c
 29788  002F4E  22DA               	addwfc	fsr2h,f,c
 29789  002F50  2ADE               	incf	postinc2,f,c
 29790  002F52  0E00               	movlw	0
 29791  002F54  22DD               	addwfc	postdec2,f,c
 29792                           
 29793                           ; BSR set to: 1
 29794                           ;fifo.c: 77: if (f->head >= f->size) {
 29795  002F56  EE20 F006          	lfsr	2,6
 29796  002F5A  5001               	movf	fifo_write@f,w,c
 29797  002F5C  26D9               	addwf	fsr2l,f,c
 29798  002F5E  5002               	movf	fifo_write@f+1,w,c
 29799  002F60  22DA               	addwfc	fsr2h,f,c
 29800  002F62  EE10 F002          	lfsr	1,2
 29801  002F66  5001               	movf	fifo_write@f,w,c
 29802  002F68  26E1               	addwf	fsr1l,f,c
 29803  002F6A  5002               	movf	fifo_write@f+1,w,c
 29804  002F6C  22E2               	addwfc	fsr1h,f,c
 29805  002F6E  52E6               	movf	postinc1,f,c
 29806  002F70  52DE               	movf	postinc2,f,c
 29807  002F72  50DD               	movf	postdec2,w,c
 29808  002F74  5CE5               	subwf	postdec1,w,c
 29809  002F76  E102               	bnz	i1u655_25
 29810  002F78  50DF               	movf	indf2,w,c
 29811  002F7A  5CE7               	subwf	indf1,w,c
 29812  002F7C                     i1u655_25:
 29813  002F7C  E308               	bnc	i1l6664
 29814                           
 29815                           ; BSR set to: 1
 29816                           ;fifo.c: 78: f->head = 0;
 29817  002F7E  EE20 F002          	lfsr	2,2
 29818  002F82  5001               	movf	fifo_write@f,w,c
 29819  002F84  26D9               	addwf	fsr2l,f,c
 29820  002F86  5002               	movf	fifo_write@f+1,w,c
 29821  002F88  22DA               	addwfc	fsr2h,f,c
 29822  002F8A  6ADE               	clrf	postinc2,c
 29823  002F8C  6ADD               	clrf	postdec2,c
 29824  002F8E                     i1l6664:
 29825                           
 29826                           ; BSR set to: 1
 29827  002F8E  2A0F               	incf	fifo_write@i,f,c
 29828  002F90  0E00               	movlw	0
 29829  002F92  2210               	addwfc	fifo_write@i+1,f,c
 29830  002F94  2211               	addwfc	fifo_write@i+2,f,c
 29831  002F96  2212               	addwfc	fifo_write@i+3,f,c
 29832  002F98                     i1l6666:
 29833                           
 29834                           ; BSR set to: 1
 29835  002F98  5005               	movf	fifo_write@nbytes,w,c
 29836  002F9A  5C0F               	subwf	fifo_write@i,w,c
 29837  002F9C  5006               	movf	fifo_write@nbytes+1,w,c
 29838  002F9E  5810               	subwfb	fifo_write@i+1,w,c
 29839  002FA0  5007               	movf	fifo_write@nbytes+2,w,c
 29840  002FA2  5811               	subwfb	fifo_write@i+2,w,c
 29841  002FA4  5008               	movf	fifo_write@nbytes+3,w,c
 29842  002FA6  5812               	subwfb	fifo_write@i+3,w,c
 29843  002FA8  E38F               	bnc	i1l6646
 29844                           
 29845                           ; BSR set to: 1
 29846                           ;fifo.c: 79: }
 29847                           ;fifo.c: 80: }
 29848                           ;fifo.c: 82: }
 29849                           ;fifo.c: 84: return nbytes;
 29850  002FAA  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 29851  002FAE  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 29852  002FB2                     i1l1607:
 29853                           
 29854                           ; BSR set to: 1
 29855  002FB2  0012               	return	
 29856  002FB4                     __end_of_fifo_write:
 29857                           	opt stack 0
 29858  002FB4                     PL14:
 29859                           	opt stack 20
 29860  002FB4  26D9               	addwf	fsr2l,f,c
 29861  002FB6  5002               	movf	fifo_write@f+1,w,c
 29862  002FB8  22DA               	addwfc	fsr2h,f,c
 29863  002FBA  CFDE F009          	movff	postinc2,??_fifo_write
 29864  002FBE  CFDD F00A          	movff	postdec2,??_fifo_write+1
 29865  002FC2  EE20 F002          	lfsr	2,2
 29866  002FC6  5001               	movf	fifo_write@f,w,c
 29867  002FC8  26D9               	addwf	fsr2l,f,c
 29868  002FCA  5002               	movf	fifo_write@f+1,w,c
 29869  002FCC  22DA               	addwfc	fsr2h,f,c
 29870  002FCE  CFDE F00B          	movff	postinc2,??_fifo_write+2
 29871  002FD2  CFDD F00C          	movff	postdec2,??_fifo_write+3
 29872  002FD6  2A0B               	incf	??_fifo_write+2,f,c
 29873  002FD8  0E00               	movlw	0
 29874  002FDA  220C               	addwfc	??_fifo_write+3,f,c
 29875  002FDC  500A               	movf	??_fifo_write+1,w,c
 29876  002FDE  180C               	xorwf	??_fifo_write+3,w,c
 29877  002FE0  0012               	return	
 29878  002FE2                     __end_ofPL14:
 29879                           	opt stack 0
 29880                           tblptru	equ	0xFF8
 29881                           tblptrh	equ	0xFF7
 29882                           tblptrl	equ	0xFF6
 29883                           tablat	equ	0xFF5
 29884                           prodh	equ	0xFF4
 29885                           prodl	equ	0xFF3
 29886                           intcon	equ	0xFF2
 29887                           indf0	equ	0xFEF
 29888                           postinc0	equ	0xFEE
 29889                           fsr0h	equ	0xFEA
 29890                           fsr0l	equ	0xFE9
 29891                           wreg	equ	0xFE8
 29892                           indf1	equ	0xFE7
 29893                           postinc1	equ	0xFE6
 29894                           postdec1	equ	0xFE5
 29895                           fsr1h	equ	0xFE2
 29896                           fsr1l	equ	0xFE1
 29897                           bsr	equ	0xFE0
 29898                           indf2	equ	0xFDF
 29899                           postinc2	equ	0xFDE
 29900                           postdec2	equ	0xFDD
 29901                           plusw2	equ	0xFDB
 29902                           fsr2h	equ	0xFDA
 29903                           fsr2l	equ	0xFD9
 29904                           status	equ	0xFD8
 29905                           
 29906 ;; *************** function _ReadUSART *****************
 29907 ;; Defined at:
 29908 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 29909 ;; Parameters:    Size  Location     Type
 29910 ;;		None
 29911 ;; Auto vars:     Size  Location     Type
 29912 ;;  data            1    0[COMRAM] unsigned char 
 29913 ;; Return value:  Size  Location     Type
 29914 ;;                  1    wreg      unsigned char 
 29915 ;; Registers used:
 29916 ;;		wreg, status,2, status,0
 29917 ;; Tracked objects:
 29918 ;;		On entry : 0/0
 29919 ;;		On exit  : 0/0
 29920 ;;		Unchanged: 0/0
 29921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29922 ;;      Params:         0       0       0       0       0       0       0
 29923 ;;      Locals:         1       0       0       0       0       0       0
 29924 ;;      Temps:          0       0       0       0       0       0       0
 29925 ;;      Totals:         1       0       0       0       0       0       0
 29926 ;;Total ram usage:        1 bytes
 29927 ;; Hardware stack levels used:    1
 29928 ;; This function calls:
 29929 ;;		Nothing
 29930 ;; This function is called by:
 29931 ;;		_Interrupt
 29932 ;; This function uses a non-reentrant model
 29933 ;;
 29934                           
 29935                           	psect	text89
 29936  000FEE                     __ptext89:
 29937                           	opt stack 0
 29938  000FEE                     _ReadUSART:
 29939                           	opt stack 20
 29940                           
 29941                           ; BSR set to: 1
 29942                           ;incstack = 0
 29943                           ;incstack = 0
 29944  000FEE  0EF2               	movlw	242
 29945  000FF0  1626               	andwf	_USART_Status,f,c
 29946  000FF2  ACAB               	btfss	4011,6,c	;volatile
 29947  000FF4  D003               	goto	i1l1925
 29948  000FF6  9026               	bcf	_USART_Status,0,c
 29949  000FF8  B0AB               	btfsc	4011,0,c	;volatile
 29950  000FFA  8026               	bsf	_USART_Status,0,c
 29951  000FFC                     i1l1925:
 29952  000FFC  B4AB               	btfsc	4011,2,c	;volatile
 29953  000FFE  8426               	bsf	_USART_Status,2,c
 29954  001000  B2AB               	btfsc	4011,1,c	;volatile
 29955  001002  8626               	bsf	_USART_Status,3,c
 29956  001004  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 29957  001008  5001               	movf	ReadUSART@data,w,c
 29958  00100A  0012               	return	
 29959  00100C                     __end_of_ReadUSART:
 29960                           	opt stack 0
 29961                           tblptru	equ	0xFF8
 29962                           tblptrh	equ	0xFF7
 29963                           tblptrl	equ	0xFF6
 29964                           tablat	equ	0xFF5
 29965                           prodh	equ	0xFF4
 29966                           prodl	equ	0xFF3
 29967                           intcon	equ	0xFF2
 29968                           indf0	equ	0xFEF
 29969                           postinc0	equ	0xFEE
 29970                           fsr0h	equ	0xFEA
 29971                           fsr0l	equ	0xFE9
 29972                           wreg	equ	0xFE8
 29973                           indf1	equ	0xFE7
 29974                           postinc1	equ	0xFE6
 29975                           postdec1	equ	0xFE5
 29976                           fsr1h	equ	0xFE2
 29977                           fsr1l	equ	0xFE1
 29978                           bsr	equ	0xFE0
 29979                           indf2	equ	0xFDF
 29980                           postinc2	equ	0xFDE
 29981                           postdec2	equ	0xFDD
 29982                           plusw2	equ	0xFDB
 29983                           fsr2h	equ	0xFDA
 29984                           fsr2l	equ	0xFD9
 29985                           status	equ	0xFD8
 29986                           tblptru	equ	0xFF8
 29987                           tblptrh	equ	0xFF7
 29988                           tblptrl	equ	0xFF6
 29989                           tablat	equ	0xFF5
 29990                           prodh	equ	0xFF4
 29991                           prodl	equ	0xFF3
 29992                           intcon	equ	0xFF2
 29993                           indf0	equ	0xFEF
 29994                           postinc0	equ	0xFEE
 29995                           fsr0h	equ	0xFEA
 29996                           fsr0l	equ	0xFE9
 29997                           wreg	equ	0xFE8
 29998                           indf1	equ	0xFE7
 29999                           postinc1	equ	0xFE6
 30000                           postdec1	equ	0xFE5
 30001                           fsr1h	equ	0xFE2
 30002                           fsr1l	equ	0xFE1
 30003                           bsr	equ	0xFE0
 30004                           indf2	equ	0xFDF
 30005                           postinc2	equ	0xFDE
 30006                           postdec2	equ	0xFDD
 30007                           plusw2	equ	0xFDB
 30008                           fsr2h	equ	0xFDA
 30009                           fsr2l	equ	0xFD9
 30010                           status	equ	0xFD8
 30011                           
 30012                           	psect	rparam
 30013  0000                     tblptru	equ	0xFF8
 30014                           tblptrh	equ	0xFF7
 30015                           tblptrl	equ	0xFF6
 30016                           tablat	equ	0xFF5
 30017                           prodh	equ	0xFF4
 30018                           prodl	equ	0xFF3
 30019                           intcon	equ	0xFF2
 30020                           indf0	equ	0xFEF
 30021                           postinc0	equ	0xFEE
 30022                           fsr0h	equ	0xFEA
 30023                           fsr0l	equ	0xFE9
 30024                           wreg	equ	0xFE8
 30025                           indf1	equ	0xFE7
 30026                           postinc1	equ	0xFE6
 30027                           postdec1	equ	0xFE5
 30028                           fsr1h	equ	0xFE2
 30029                           fsr1l	equ	0xFE1
 30030                           bsr	equ	0xFE0
 30031                           indf2	equ	0xFDF
 30032                           postinc2	equ	0xFDE
 30033                           postdec2	equ	0xFDD
 30034                           plusw2	equ	0xFDB
 30035                           fsr2h	equ	0xFDA
 30036                           fsr2l	equ	0xFD9
 30037                           status	equ	0xFD8
 30038                           tblptru	equ	0xFF8
 30039                           tblptrh	equ	0xFF7
 30040                           tblptrl	equ	0xFF6
 30041                           tablat	equ	0xFF5
 30042                           prodh	equ	0xFF4
 30043                           prodl	equ	0xFF3
 30044                           intcon	equ	0xFF2
 30045                           indf0	equ	0xFEF
 30046                           postinc0	equ	0xFEE
 30047                           fsr0h	equ	0xFEA
 30048                           fsr0l	equ	0xFE9
 30049                           wreg	equ	0xFE8
 30050                           indf1	equ	0xFE7
 30051                           postinc1	equ	0xFE6
 30052                           postdec1	equ	0xFE5
 30053                           fsr1h	equ	0xFE2
 30054                           fsr1l	equ	0xFE1
 30055                           bsr	equ	0xFE0
 30056                           indf2	equ	0xFDF
 30057                           postinc2	equ	0xFDE
 30058                           postdec2	equ	0xFDD
 30059                           plusw2	equ	0xFDB
 30060                           fsr2h	equ	0xFDA
 30061                           fsr2l	equ	0xFD9
 30062                           status	equ	0xFD8


Data Sizes:
    Strings     4293
    Constant    120
    Data        0
    BSS         1149
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      63
    BANK0           160    135     135
    BANK1           256      0     244
    BANK2           256     69     197
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_159(CODE[2]), STR_158(CODE[9]), STR_155(CODE[4]), 
		 -> STR_153(CODE[3]), STR_152(CODE[6]), STR_151(CODE[6]), STR_150(CODE[8]), 
		 -> STR_148(CODE[6]), STR_146(CODE[5]), STR_144(CODE[8]), STR_143(CODE[6]), 
		 -> STR_142(CODE[9]), STR_141(CODE[7]), STR_140(CODE[7]), STR_139(CODE[5]), 
		 -> STR_138(CODE[6]), STR_137(CODE[9]), STR_135(CODE[11]), STR_133(CODE[8]), 
		 -> STR_131(CODE[4]), STR_130(CODE[5]), STR_117(CODE[5]), STR_104(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_159(CODE[2]), STR_158(CODE[9]), STR_155(CODE[4]), STR_153(CODE[3]), 
		 -> STR_152(CODE[6]), STR_151(CODE[6]), STR_150(CODE[8]), STR_148(CODE[6]), 
		 -> STR_146(CODE[5]), STR_144(CODE[8]), STR_143(CODE[6]), STR_142(CODE[9]), 
		 -> STR_141(CODE[7]), STR_140(CODE[7]), STR_139(CODE[5]), STR_138(CODE[6]), 
		 -> STR_137(CODE[9]), STR_135(CODE[11]), STR_133(CODE[8]), STR_131(CODE[4]), 
		 -> STR_130(CODE[5]), STR_117(CODE[5]), STR_104(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_159(CODE[2]), STR_158(CODE[9]), STR_155(CODE[4]), 
		 -> STR_153(CODE[3]), STR_152(CODE[6]), STR_151(CODE[6]), STR_150(CODE[8]), 
		 -> STR_148(CODE[6]), STR_146(CODE[5]), STR_144(CODE[8]), STR_143(CODE[6]), 
		 -> STR_142(CODE[9]), STR_141(CODE[7]), STR_140(CODE[7]), STR_139(CODE[5]), 
		 -> STR_138(CODE[6]), STR_137(CODE[9]), STR_135(CODE[11]), STR_133(CODE[8]), 
		 -> STR_131(CODE[4]), STR_130(CODE[5]), STR_117(CODE[5]), STR_104(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_159(CODE[2]), STR_158(CODE[9]), STR_155(CODE[4]), 
		 -> STR_153(CODE[3]), STR_152(CODE[6]), STR_151(CODE[6]), STR_150(CODE[8]), 
		 -> STR_148(CODE[6]), STR_146(CODE[5]), STR_144(CODE[8]), STR_143(CODE[6]), 
		 -> STR_142(CODE[9]), STR_141(CODE[7]), STR_140(CODE[7]), STR_139(CODE[5]), 
		 -> STR_138(CODE[6]), STR_137(CODE[9]), STR_135(CODE[11]), STR_133(CODE[8]), 
		 -> STR_131(CODE[4]), STR_130(CODE[5]), STR_117(CODE[5]), STR_104(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_159(CODE[2]), STR_158(CODE[9]), STR_155(CODE[4]), STR_153(CODE[3]), 
		 -> STR_152(CODE[6]), STR_151(CODE[6]), STR_150(CODE[8]), STR_148(CODE[6]), 
		 -> STR_146(CODE[5]), STR_144(CODE[8]), STR_143(CODE[6]), STR_142(CODE[9]), 
		 -> STR_141(CODE[7]), STR_140(CODE[7]), STR_139(CODE[5]), STR_138(CODE[6]), 
		 -> STR_137(CODE[9]), STR_135(CODE[11]), STR_133(CODE[8]), STR_131(CODE[4]), 
		 -> STR_130(CODE[5]), STR_117(CODE[5]), STR_104(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_284(CODE[2]), STR_283(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_278(CODE[2]), 
		 -> STR_277(CODE[3]), STR_276(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_294(CODE[3]), STR_293(CODE[23]), STR_292(CODE[10]), STR_291(CODE[10]), 
		 -> STR_290(CODE[12]), STR_289(CODE[8]), STR_288(CODE[7]), STR_287(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_286(CODE[10]), STR_285(CODE[3]), STR_282(CODE[20]), 
		 -> STR_281(CODE[3]), STR_280(CODE[14]), STR_279(CODE[3]), STR_275(CODE[8]), 
		 -> STR_274(CODE[17]), STR_273(CODE[3]), STR_272(CODE[67]), STR_271(CODE[3]), 
		 -> STR_270(CODE[29]), STR_269(CODE[67]), STR_268(CODE[52]), STR_267(CODE[39]), 
		 -> STR_266(CODE[62]), STR_265(CODE[55]), STR_264(CODE[49]), STR_263(CODE[67]), 
		 -> STR_262(CODE[47]), STR_261(CODE[47]), STR_260(CODE[34]), STR_259(CODE[71]), 
		 -> STR_258(CODE[20]), STR_257(CODE[78]), STR_256(CODE[24]), STR_255(CODE[77]), 
		 -> STR_254(CODE[74]), STR_253(CODE[76]), STR_252(CODE[47]), STR_251(CODE[40]), 
		 -> STR_250(CODE[39]), STR_249(CODE[33]), STR_248(CODE[23]), STR_247(CODE[56]), 
		 -> STR_246(CODE[24]), STR_245(CODE[44]), STR_244(CODE[50]), STR_243(CODE[31]), 
		 -> STR_242(CODE[50]), STR_241(CODE[51]), STR_240(CODE[46]), STR_239(CODE[44]), 
		 -> STR_238(CODE[27]), STR_237(CODE[39]), STR_236(CODE[39]), STR_235(CODE[52]), 
		 -> STR_234(CODE[54]), STR_233(CODE[55]), STR_232(CODE[3]), STR_229(CODE[24]), 
		 -> STR_228(CODE[57]), STR_227(CODE[53]), STR_226(CODE[58]), STR_225(CODE[3]), 
		 -> STR_222(CODE[25]), STR_221(CODE[3]), STR_218(CODE[24]), STR_217(CODE[3]), 
		 -> STR_214(CODE[24]), STR_213(CODE[3]), STR_210(CODE[24]), STR_209(CODE[3]), 
		 -> STR_206(CODE[23]), STR_205(CODE[3]), STR_202(CODE[21]), STR_201(CODE[3]), 
		 -> STR_198(CODE[22]), STR_197(CODE[3]), STR_194(CODE[17]), STR_193(CODE[3]), 
		 -> STR_190(CODE[18]), STR_189(CODE[4]), STR_188(CODE[11]), STR_187(CODE[2]), 
		 -> STR_184(CODE[7]), STR_181(CODE[7]), STR_178(CODE[9]), STR_175(CODE[7]), 
		 -> STR_172(CODE[8]), STR_169(CODE[7]), STR_168(CODE[2]), STR_167(CODE[2]), 
		 -> STR_166(CODE[6]), STR_165(CODE[8]), STR_164(CODE[8]), STR_163(CODE[20]), 
		 -> STR_162(CODE[27]), STR_161(CODE[6]), STR_160(CODE[33]), STR_157(CODE[41]), 
		 -> STR_156(CODE[23]), STR_154(CODE[22]), STR_149(CODE[26]), STR_147(CODE[32]), 
		 -> STR_145(CODE[28]), STR_136(CODE[6]), STR_134(CODE[40]), STR_132(CODE[44]), 
		 -> STR_129(CODE[6]), STR_128(CODE[39]), STR_126(CODE[36]), STR_124(CODE[37]), 
		 -> STR_122(CODE[40]), STR_120(CODE[37]), STR_119(CODE[50]), STR_116(CODE[6]), 
		 -> STR_115(CODE[41]), STR_113(CODE[38]), STR_111(CODE[39]), STR_109(CODE[42]), 
		 -> STR_107(CODE[39]), STR_106(CODE[66]), STR_103(CODE[6]), STR_102(CODE[3]), 
		 -> STR_99(CODE[20]), STR_98(CODE[52]), STR_94(CODE[8]), STR_93(CODE[36]), 
		 -> STR_90(CODE[8]), STR_89(CODE[38]), STR_88(CODE[24]), STR_86(CODE[33]), 
		 -> STR_84(CODE[24]), STR_82(CODE[52]), STR_80(CODE[54]), STR_79(CODE[6]), 
		 -> STR_78(CODE[3]), STR_73(CODE[25]), STR_70(CODE[17]), STR_69(CODE[3]), 
		 -> STR_68(CODE[4]), STR_67(CODE[3]), STR_64(CODE[4]), STR_59(CODE[15]), 
		 -> wrkbuf(BANK1[80]), STR_56(CODE[14]), STR_54(CODE[33]), STR_52(CODE[24]), 
		 -> STR_50(CODE[52]), STR_48(CODE[6]), STR_46(CODE[6]), STR_44(CODE[6]), 
		 -> STR_42(CODE[6]), STR_40(CODE[18]), STR_39(CODE[6]), STR_37(CODE[33]), 
		 -> STR_36(CODE[6]), STR_28(CODE[24]), STR_27(CODE[18]), STR_26(CODE[20]), 
		 -> STR_25(CODE[25]), STR_24(CODE[22]), STR_23(CODE[19]), STR_22(CODE[20]), 
		 -> STR_21(CODE[20]), STR_19(CODE[6]), STR_17(CODE[6]), STR_15(CODE[6]), 
		 -> STR_13(CODE[6]), STR_11(CODE[6]), STR_9(CODE[6]), STR_7(CODE[31]), 
		 -> STR_5(CODE[29]), STR_4(CODE[55]), STR_3(CODE[35]), STR_2(CODE[58]), 
		 -> STR_1(CODE[37]), 

    sprintf$2135	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_296(CODE[17]), STR_295(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_231(CODE[3]), STR_230(CODE[7]), STR_224(CODE[3]), STR_223(CODE[7]), 
		 -> STR_220(CODE[4]), STR_219(CODE[8]), STR_216(CODE[4]), STR_215(CODE[8]), 
		 -> STR_212(CODE[4]), STR_211(CODE[8]), STR_208(CODE[4]), STR_207(CODE[8]), 
		 -> STR_204(CODE[4]), STR_203(CODE[7]), STR_200(CODE[4]), STR_199(CODE[7]), 
		 -> STR_196(CODE[4]), STR_195(CODE[7]), STR_192(CODE[4]), STR_191(CODE[7]), 
		 -> STR_186(CODE[3]), STR_185(CODE[7]), STR_183(CODE[3]), STR_182(CODE[7]), 
		 -> STR_180(CODE[3]), STR_179(CODE[7]), STR_177(CODE[3]), STR_176(CODE[7]), 
		 -> STR_174(CODE[3]), STR_173(CODE[7]), STR_171(CODE[3]), STR_170(CODE[7]), 
		 -> STR_101(CODE[3]), STR_100(CODE[7]), STR_96(CODE[4]), STR_95(CODE[8]), 
		 -> STR_92(CODE[4]), STR_91(CODE[8]), STR_77(CODE[3]), STR_76(CODE[7]), 
		 -> STR_75(CODE[3]), STR_74(CODE[7]), STR_72(CODE[6]), STR_71(CODE[10]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_63(CODE[3]), STR_62(CODE[7]), 
		 -> STR_61(CODE[3]), STR_60(CODE[7]), STR_58(CODE[6]), STR_57(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2115$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(COMRAM[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(COMRAM[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(COMRAM[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(COMRAM[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(COMRAM[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1531	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_231(CODE[3]), STR_230(CODE[7]), 

    printErrors$1522	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_224(CODE[3]), STR_223(CODE[7]), 

    printErrors$1516	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_220(CODE[4]), STR_219(CODE[8]), 

    printErrors$1510	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_216(CODE[4]), STR_215(CODE[8]), 

    printErrors$1504	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_212(CODE[4]), STR_211(CODE[8]), 

    printErrors$1498	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_208(CODE[4]), STR_207(CODE[8]), 

    printStatistics$1491	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_204(CODE[4]), STR_203(CODE[7]), 

    printStatistics$1485	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_200(CODE[4]), STR_199(CODE[7]), 

    printStatistics$1479	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_196(CODE[4]), STR_195(CODE[7]), 

    printStatistics$1473	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_192(CODE[4]), STR_191(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1241(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1405	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_186(CODE[3]), STR_185(CODE[7]), 

    receivePrintEventVerbose$1400	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_183(CODE[3]), STR_182(CODE[7]), 

    receivePrintEventVerbose$1395	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_180(CODE[3]), STR_179(CODE[7]), 

    receivePrintEventVerbose$1390	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_177(CODE[3]), STR_176(CODE[7]), 

    receivePrintEventVerbose$1385	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[3]), STR_173(CODE[7]), 

    receivePrintEventVerbose$1380	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_171(CODE[3]), STR_170(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1299	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1279	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1270	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_101(CODE[3]), STR_100(CODE[7]), 

    doModeVerbose$1262	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_96(CODE[4]), STR_95(CODE[8]), 

    doModeVerbose$1256	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_92(CODE[4]), STR_91(CODE[8]), 

    doModeVerbose@preg_1247	PTR unsigned char  size(2) Largest target is 80
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1243	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1233	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_77(CODE[3]), STR_76(CODE[7]), 

    doModeVerbose$1229	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_75(CODE[3]), STR_74(CODE[7]), 

    doModeVerbose$1224	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_72(CODE[6]), STR_71(CODE[10]), 

    doModeVerbose$1216	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1211	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_63(CODE[3]), STR_62(CODE[7]), 

    doModeVerbose$1207	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_61(CODE[3]), STR_60(CODE[7]), 

    doModeVerbose$1202	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_127(CODE[2]), STR_125(CODE[2]), STR_123(CODE[2]), STR_121(CODE[2]), 
		 -> STR_118(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), STR_110(CODE[2]), 
		 -> STR_108(CODE[2]), STR_105(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1190	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_Write_b_eep
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_setFilter
    __CANIDToRegs->_Read_b_eep
    _setFilter->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  142842
                                            128 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
               _ECANSetOperationMode
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9556
                                             56 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
               _ECANSetOperationMode
                           _Busy_eep
                        _Write_b_eep
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1050
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4556
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   21256
                                             89 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2536
                                             56 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3506
                                             19 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3950
                                             19 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       89    89      0  100643
                                            108 BANK0     20    20      0
                                              0 BANK2     69    69      0
               _vscp_restoreDefaults
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                         _WriteUSART
                            _stristr
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4030
                                             88 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3946
                                             88 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   23384
                                            103 BANK0      5     5      0
                          _putsUSART
                         _WriteUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    4470
                                             97 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6606
                                             97 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6336
                                             97 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3778
                                             88 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2312
                                             56 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2012
                                             49 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             12 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7545
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7437
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1010
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1236
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     180
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8897
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1214
                                             19 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     740
                                             14 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     446
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7095
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _vscp_restoreDefaults                                 0     0      0    3637
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (3) _init_app_eeprom                                      1     1      0     330
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    4042
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     420
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _init_app_ram                                         9     9      0    3307
                                             17 BANK0      9     9      0
                         _Read_b_eep
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              2 BANK0     10     3      7
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              2 BANK0     15    11      4
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     147
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     252
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2084
                                             22 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _ECANSetOperationMode
   _doModeVerbose
     _vscp_restoreDefaults
       _init_app_ram
         _Read_b_eep
         _ECANSetOperationMode
         _setFilter
           _Read_b_eep (ARG)
         __CANIDToRegs
           _Read_b_eep (ARG)
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _ECANSetOperationMode
     _setFilter
       _Read_b_eep (ARG)
     __CANIDToRegs
       _Read_b_eep (ARG)
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _WriteUSART
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _ECANSetOperationMode
     _Busy_eep
     _Write_b_eep
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
           _Read_b_eep (ARG)
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     45      C5       8       77.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F4       6       95.3%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     87      87       4       84.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      3F       1       66.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     37F      15        0.0%
DATA                 0      0     57B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Oct 06 22:18:10 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 6A36  
                          printBinary@i 0064                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 2144  
            doModeVerbose@filter_nodeid 028E                                      PL2 6A36  
                                    PL4 6A52                                      PL6 6A6C  
                                    PL8 6A7C                                      _id 01ED  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 0F66  
                                   PL10 6A8A                                     PL20 537A  
                                   PL12 534C                                     PL30 6AE4  
                                   PL22 30DE                                     PL14 2FB4  
                                   PL40 6B24                                     PL32 3D9C  
                                   PL24 6AD4                                     PL16 536A  
                                   PL50 6B3E                                     PL42 53A0  
                                   PL34 6AF8                                     PL26 3534  
                                   PL18 2C76                                     PL60 53D0  
                                   PL52 53BA                                     PL44 1F30  
                                   PL36 25D0                                     PL28 2D44  
                                   PL70 30F4                                     PL62 6B56  
                                   PL54 2D68                                     PL46 2D58  
                                   PL38 6B0A                                     PL80 3544  
                                   PL72 6B6C                                     PL64 53E6  
                                   PL56 3DBA                                     PL48 1E90  
                                   PL90 6B92                                     PL82 1FD4  
                                   PL74 3108                                     PL66 2B6A  
                                   PL58 1B88                                     PL92 5406  
                                   PL84 53F4                                     PL76 2790  
                                   PL68 2D7A                                     PL94 10F6  
                                   PL86 4CCE                                     PL78 6B80  
                                   PL96 36D6                                     PL88 26B0  
                                   PL98 6BA2                 sendEscapedUartData@pcrc 006C  
                                   l440 40C6                                     l450 4132  
                                   l603 5DBA                                     l451 413C  
                                   l460 416A                                     l444 40E2  
                                   l453 4148                                     l447 40F8  
                                   l439 4084                                     l448 4102  
                                   l570 5D58                                     l492 5458  
                                   l724 3A8A                                     l901 1E02  
                                   l590 5D02                                     l566 5B92  
                                   l910 1E32                                     l742 3B14  
                                   l559 6A34                                     l815 4BC0  
                                   l496 546A                                     l832 1632  
                                   l840 1660                                     l904 1E0C  
                                   l913 1E52                                     l729 3BFC  
                                   l922 1E86                                     l850 220C  
                                   l595 5D30                                     l579 5C6E  
                                   l835 163C                                     l907 1E16  
                                   l931 25FC                                     l844 1684  
                                   l916 1E62                                     l940 2642  
                                   l780 4CCC                                     l853 2216  
                                   l934 2606                                     l862 2262  
                                   l790 49C2                                     l919 1E7C  
                                   l943 2652                                     l847 2202  
                                   l880 1EB6                                     l952 269C  
                                   l928 25F2                                     l856 2232  
                                   l937 2622                                     l865 2296  
                                   l874 1EA2                                     l946 266E  
                                   l883 1ED2                                     l955 26A6  
                                   l859 2252                                     l892 1F1C  
                                   l868 22A0                                     l877 1EAC  
                                   l949 2680                                     l886 1EF2  
                                   l991 4622                                     l895 1F26  
                                   l992 4636                                     l984 458C  
                                   l889 1F02                                     l996 3158  
                                   l999 3162                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 007E                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _dlc 003A                                     _pos 0034  
                  __size_of_Write_b_eep 0034          __size_of_writeRegisterExtended 00FC  
                                   wreg 000FE8           __end_of_writeRegisterExtended 2A7C  
                                  PL100 22AA                                    PL110 5410  
                                  PL102 6BB2                                    PL104 4396  
                                  PL106 12D0                                    PL108 2D8E  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1002 316C                                    l1011 324A  
                                  l1021 3400                                    l1005 3188  
                                  l1030 3430                                    l1014 3254  
                                  l1024 340A                                    l1120 36AC  
                                  l1104 35C2                                    l1017 325E  
                                  l1113 364A                                    l1130 288C  
                                  l1043 351E                                    l1027 3414  
                                  l1123 36CA                                    l1107 35FA  
                                  l1141 237A                                    l1310 3E48  
                                  l1150 297E                                    l1046 3528  
                                  l1126 36D4                                    l1320 3EEA  
                                  l1312 3E5A                                    l2120 2C6C  
                                  l1080 2152                                    l1321 3EFC  
                                  l1313 3E6C                                    l2121 2C74  
                                  l1049 3532                                    l1322 3F0E  
                                  l1314 3E7E                                    l1138 22F2  
                                  l1250 2EB4                                    l1323 3F20  
                                  l1315 3E90                                    l1243 48FE  
                                  l1235 486A                                    l1251 2DC0  
                                  l1147 28D8                                    l1083 215C  
                                  l1324 3F32                                    l1316 3EA2  
                                  l1092 21F0                                    l1325 3F44  
                                  l1317 3EB4                                    l1165 29D2  
                                  l1077 2148                                    l1326 3F56  
                                  l1318 3EC6                                    l1086 2178  
                                  l1319 3ED8                                    l1327 3FAE  
                                  l1335 1B0A                                    l1344 208C  
                                  l1184 14A0                                    l1168 2A7A  
                                  l1089 21E6                                    l1515 33CC  
                                  l1507 3330                                    l1339 11E2  
                                  l1099 3590                                    l1292 1B4C  
                                  l1188 14AC                                    l1509 334E  
                                  l2510 1470                                    l1623 17BE  
                                  l1631 181E                                    l2520 1218  
                                  l1289 1B2E                                    l2601 17AE  
                                  l1625 17C6                                    l1650 1CF6  
                                  l1299 1A76                                    l2427 18FA  
                                  l1715 4E44                                    l1651 1D5C  
                                  l1900 1600                                    l1901 160A  
                                  l1821 0F66                                    l2437 16D6  
                                  l2613 1C2E                                    l1645 129C  
                                  l1902 160C                                    l1734 4F66  
                                  l1718 4E78                                    l1719 4E7C  
                                  l2615 1C22                                    l1904 1624  
                                  l1912 151A                                    l2640 13DE  
                                  l2616 1C26                                    l1569 2D42  
                                  l2561 16E8                                    l1770 5130  
                                  l1762 50C8                                    l1682 4CF8  
                                  l1771 5134                                    l1595 25AE  
                                  l2563 1748                                    l2396 1DDC  
                                  l1773 5150                                    l1862 1024  
                                  l1846 1128                                    l1598 25CE  
                                  l2582 1982                                    l1863 1026  
                                  l2495 276C                                    l1768 510A  
                                  l2649 125E                                    l2585 197E  
                                  l1698 4E34                                    l1699 4DE6  
                                  l2659 139A                                    l1789 51DA  
                                  l1895 15EA                                    l1899 15FE  
                                  STR_1 75D3                                    STR_2 6EF2  
                                  STR_3 7665                                    STR_4 700B  
                                  STR_5 778C                                    STR_6 7CC1  
                                  STR_7 774E                                    STR_8 7CA8  
                                  STR_9 7C65                                    _PEIE 007F96  
                        sendCANFrame@id 0091                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0061                                    _bDLE 002B  
                          __CFG_PWRT$ON 000000                                    ___IT 000101  
            __end_of_sendVSCPDriverNack 1E90                                    _bHex 002C  
          doModeVerbose@filter_priority 028C                                    _crc8 1172  
                                  _data 01D5                                    _caps 01F1  
                                  _atoi 2B7E                                    _main 3FB0  
                                  _init 13E8                                    _mode 012C  
                                  _itoa 113A                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 1D5E                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 02FA                            _sprintf$2135 0086  
                          _sprintf$2128 0082                            _sprintf$2129 0084  
          receiveSendMultiEventCANAL@id 007D               ECANReceiveMessage@dataLen 000E  
    __end_of_receiveSendMultiEventCANAL 3534              _receiveSendMultiEventCANAL 33CE  
                    doModeVerbose@count 02B1                   getVSCPFrame@pPriority 0075  
                    doModeVerbose@value 02B9                    __end_of_getVSCPFrame 1B0C  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 00A8                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   _B0CON 000E20  
                                 l14000 40DC                                   _B1CON 000E30  
                                 l10642 2528                                   l12420 1716  
                                 l14012 410C                                   l14004 40EC  
                                 l10654 25B8                                   l14022 4144  
                                 l10656 25BC                                   l14040 4176  
                                 l14016 4114                                   _B2CON 000E40  
                                 l14042 417A                                   l14034 4162  
                                 l15020 3B2A                                   l15004 3AEE  
                                 l14044 4180                                   l14302 56FE  
                                 l14214 548A                                   l14206 546E  
                                 l15014 3B1A                                   l11912 3F68  
                                 l14072 17D0                                   l15016 3B20  
                                 l15120 4974                                   l14048 418C  
                                 _B3CON 000E50                                   l14170 1A28  
                                 l16010 4E3E                                   l16002 4DEC  
                                 l14330 57D8                                   l14306 5716  
                                 l14250 558C                                   l14242 5554  
                                 l14234 551E                                   l14226 54EC  
                                 l14074 17D6                                   l15018 3B24  
                                 l15114 494E                                   l11924 2CD0  
                                 l16020 4E60                                   l16012 4E42  
                                 l13604 337E                                   l13612 339C  
                                 l14412 5ABC                                   l14404 5A86  
                                 l14324 57AE                                   l14308 5728  
                                 l15060 3B80                                   l15036 3B46  
                                 l15028 3B3A                                   l15212 4BC6  
                                 l15204 4BA0                                   l15132 49BC  
                                 l14182 1A68                                   l14174 1A3C  
                                 l16110 4FE0                                   l16030 4E88  
                                 l16014 4E48                                   l16006 4E20  
                                 l13622 33C2                                   l14422 5B3A  
                                 l14342 582C                                   l14318 577E  
                                 l15054 3B6C                                   l15126 4998  
                                 l15118 4970                                   l16032 4E94  
                                 l16008 4E3A                                   l13624 33C4  
                                 l14424 5B4E                                   l14416 5ACE  
                                 l14360 58DE                                   l14352 5884  
                                 l14336 5802                                   l14272 5636  
                                 l14192 5422                                   l15072 3BAE  
                                 l15216 4BDE                                   l15136 49CC  
                                 _B4CON 000E60                                   l14186 0FE2  
                                 l14178 1A52                                   l16202 5194  
                                 l16210 51B0                                   l16122 5014  
                                 l16042 4EC2                                   l16026 4E82  
                                 l13618 33BE                                   l13570 32CA  
                                 l14610 6098                                   l14530 5E14  
                                 l14370 5944                                   l14354 588A  
                                 l14346 584A                                   l14362 58F0  
                                 l14290 56B6                                   l14282 5680  
                                 l14266 55F8                                   l14258 55C2  
                                 l15066 3B96                                   l15090 3BF6  
                                 l15250 4CB0                                   l15226 4BFE  
                                 l15242 4C32                                   l16220 51C2  
                                 l16124 5018                                   l16108 4FDC  
                                 l16140 505E                                   l16052 4EE4  
                                 l16060 4EF6                                   l13564 32B8  
                                 l14604 606E                                   l14508 5D78  
                                 l14540 5E58                                   l14428 5B60  
                                 l15084 3BDE                                   l15236 4C1A  
                                 l15148 49F8                                   l15244 4C90  
                                 l17102 18AE                                   l16230 51EA  
                                 l16214 51BA                                   l16070 4F30  
                                 l16046 4EC8                                   l16038 4EAC  
                                 l16062 4F20                                   l15502 43FE  
                                 l13582 32F4                                   l17022 234A  
                                 l17030 157C                                   l14622 6100  
                                 l14614 60C2                                   l14518 5DCC  
                                 l14446 5BE4                                   l14438 5B9A  
                                 l14382 59C0                                   l14294 56CE  
                                 l14286 569E                                   l15078 3BC6  
                                 l15094 3BFA                                   l15182 4B36  
                                 l15174 4ABE                                   l15158 4A1C  
                                 l15254 4CCA                                   l17104 18BA  
                                 l16160 50CC                                   l16144 5078  
                                 l16056 4EF0                                   l16048 4ED6  
                                 l13592 3334                                   l17024 2378  
                                 l17032 1580                                   l16400 2B2A  
                                 l16304 14B6                                   l14704 630A  
                                 l14632 6138                                   l14480 5CCE  
                                 l14392 5A3C                                   l14376 5982  
                                 l14368 5932                                   l15088 3BF0  
                                 l15248 4CA4                                   l15192 4B60  
                                 _B5CON 000E70                                   l13666 1042  
                                 l17114 18EC                                   l17106 18BE  
                                 l17130 16C8                                   l17122 1696  
                                 l16234 51FC                                   l16154 50A8  
                                 l16138 504C                                   l15514 444E  
                                 l17202 0FD0                                   l15602 1946  
                                 l17210 136E                                   l17034 158E  
                                 l14570 5F16                                   l14546 5E76  
                                 l14538 5E54                                   l14458 5C34  
                                 l14386 59FE                                   l14298 56E6  
                                 l15268 3C6A                                   l15452 24C8  
                                 l17140 1440                                   l17124 16A2  
                                 l16260 52B0                                   l16252 5238  
                                 l16236 5202                                   l16180 514A  
                                 l16172 510E                                   l16148 5096  
                                 l16084 4F70                                   l15604 196C  
                                 l15612 1BAC                                   l17036 1598  
                                 l16404 2B46                                   l14900 68F8  
                                 l14804 6600                                   l14708 631A  
                                 l14468 5C80                                   l14548 5E88  
                                 l16500 34CE                                   l17142 1448  
                                 l17126 16A6                                   l16254 528E  
                                 l16270 5300                                   l16246 5224  
                                 l16166 50E6                                   l16094 4FA4  
                                 l15550 4540                                   l15526 44A0  
                                 l15622 1BE4                                   l15710 37CE  
                                 l13598 3350                                   l16422 1C64  
                                 l14910 6954                                   l14814 664E  
                                 l14734 63F6                                   l14718 6386  
                                 l14590 5FE6                                   l14582 5FA8  
                                 l14566 5F04                                   l14558 5ECE  
                                 l14494 5D2A                                   l17062 129A  
                                 l17054 1288                                   l17046 1276  
                                 l15296 15EC                                   l15288 15DE  
                                 l17152 1466                                   l17144 144C  
                                 l17160 11F0                                   l16264 52D4  
                                 l16096 4FA8                                   l16088 4F8E  
                                 l17208 1366                                   l17216 13AA  
                                 l15632 2B80                                   l16360 23A8  
                                 l16432 1CA0                                   l16344 2A4A  
                                 l14824 66A2                                   l14744 6430  
                                 l14664 621A                                   l14648 61A4  
                                 l14576 5F82                                   l16504 34EE  
                                 l15466 24EA                                   l17162 11F8  
                                 l16274 530E                                   l16186 5160  
                                 l15538 44F0                                   l17218 13B2  
                                 l15650 2C34                                   l15642 2BDA  
                                 l15634 2B86                                   l15810 4858  
                                 l16426 1C8A                                   l16346 2A78  
                                 l14922 69BC                                   l14850 6756  
                                 l14754 646C                                   l14738 6406  
                                 l14674 6258                                   l14586 5FD4  
                                 l14578 5F96                                   l17164 11FC  
                                 l17068 1D66                                   l16268 52EE  
                                 l16196 5180                                   l16284 5338  
                                 l15564 4598                                   l15644 2BF2  
                                 l15724 3836                                   l16372 2426  
                                 l16428 1C92                                   l15900 1082  
                                 l14932 6A0A                                   l14916 6980  
                                 l14844 6732                                   l14828 66C6  
                                 l14764 64A6                                   l14748 6440  
                                 l14684 6296                                   l14668 622C  
                                 l16508 350E                                   l17078 1D9E  
                                 l16278 5330                                   l16286 533E  
                                 l15574 4608                                   l17182 1792  
                                 l17174 174C                                   l15646 2BFA  
                                 l15830 48DA                                   l15806 4846  
                                 l15662 1064                                   l16366 23F4  
                                 l15902 108A                                   l14918 698E  
                                 l14838 6710                                   l14862 67A4  
                                 l14774 64E0                                   l14758 647C  
                                 l14694 62D0                                   l14678 6268  
                                 l14598 6036                                   l14934 6A18  
                                 l16462 345C                                   l13966 4016  
                                 ?_crc8 0067                                   l17168 120E  
                                 l15576 460C                                   l15584 4634  
                                 l17184 179A                                   l17192 124A  
                                 l15752 46BA                                   l16368 240A  
                                 l16296 1486                                   l14856 677C  
                                 l14928 69F2                                   l14768 64B6  
                                 l14792 6568                                   l14688 62A6  
                                 l16560 323A                                   l14944 3A52  
                                 l15594 0FB8                                   l15578 4614  
                                 l17178 1786                                   l17194 124E  
                                 l15682 36FE                                   l15834 48EC  
                                 l15818 4886                                   l15738 4652  
                                 l15658 1054                                   l14786 6546  
                                 l14778 64F0                                   l14698 62E0  
                                 l14938 6A32                                   l16490 34AA  
                                 l16650 284A                                   l14946 3A56  
                                 l17188 122E                                   l15780 478A  
                                 l16396 2B0C                                   l16388 2AA8  
                                 l14884 6850                                   l14876 680A  
                                 l14892 6898                                   l14788 6554  
                                 l16484 348C                                   l16556 3222  
                                 l16572 10AC                                   l14964 3AA2  
                                 l15950 4CE0                                   l15598 190E  
                                 l15766 4722                                   l16398 2B14  
                                 l15942 294E                                   l13998 40C8  
                                 l15960 4D0A                                   l16920 2012  
                                 l16904 1AAC                                   l16824 12E8  
                                 l15696 3766                                   l15864 2DF6  
                                 l15848 2DAE                                   l15944 297C  
                                 l14896 68D4                                   l16576 10CA  
                                 l14968 3AA8                                   l16840 1D04  
                                 l15962 4D0E                                   l16922 2014  
                                 l16826 12EE                                   l15794 47F2  
                                 l15882 2E62                                   l14978 3ABE  
                                 l15956 4D02                                   l16860 134C  
                                 l14988 3AE6                                   l15990 4DB6  
                                 l15974 4D4A                                   l15982 4D90  
                                 l15958 4D06                                   l15966 4D14  
                                 l16926 2018                                   l16870 11E0  
                                 l15886 2E6A                                   l16854 1330  
                                 l16846 1D48                                   l16960 26CE  
                                 l16938 2052                                   l16970 2712  
                                 l16794 3654                                   l16786 360E  
                  __size_of_doModeSLCAN 03CE                                   l16798 3668  
                                 l16992 1156                                   ?_atoi 0066  
                                 ?_main 00E0                                   ?_init 0001  
                                 ?_itoa 0070                           i1_WriteTimer0 0F74  
                                 _EEADR 000FA9                                   STR_10 7C43  
                                 STR_11 7C65                                   STR_12 7C83  
                                 STR_20 7C2E                                   STR_13 7C65  
                                 STR_21 7A2C                                   STR_30 7CF5  
                                 STR_14 7BA1                                   STR_22 7A40  
                                 STR_15 7C65                                   STR_31 7CF5  
                                 STR_23 7A7C                                   STR_32 7CF5  
                                 STR_16 7C35                                   STR_40 7AA1  
                                 STR_24 7999                                   STR_17 7C65  
                                 STR_33 7CF5                                   STR_41 7CBC  
                                 STR_25 7832                                   STR_42 7C65  
                                 STR_34 7CF5                                   STR_18 7BF3  
                                 STR_26 7A18                                   STR_50 70E3  
                                 STR_19 7C65                                   STR_51 7B6F  
                                 STR_35 7CF5                                   STR_43 7CD6  
                                 STR_27 7A8F                                   STR_44 7C65  
                                 STR_36 7C65                                   STR_60 7C4A  
                                 STR_28 78C5                                   STR_52 78AD  
                                 STR_53 7B6F                                   STR_61 7CEE  
                                 STR_29 7CEB                                   STR_45 7CB7  
                                 STR_37 76CB                                   STR_46 7C65  
                                 STR_62 7C4A                                   STR_38 7CE8  
                                 STR_70 7B09                                   STR_54 770D  
                                 STR_39 7C65                                   STR_55 7B6F  
                                 STR_71 7B67                                   STR_63 7CEE  
                                 STR_47 7C94                                   STR_48 7C65  
                                 STR_72 7C6B                                   STR_64 7BCF  
                                 STR_56 7B37                                   STR_80 7078  
                                 STR_65 7C4A                                   STR_81 7C9E  
                                 STR_49 7C99                                   STR_57 7B67  
                                 STR_73 7864                                   STR_82 70E3  
                                 STR_90 7B3D                                   STR_74 7C4A  
                                 STR_66 7CEE                                   STR_58 7C6B  
                                 STR_83 7B6F                                   STR_75 7CEE  
                                 STR_67 7CE2                                   STR_91 7BC3  
                                 STR_59 7B1A                                   STR_84 78AD  
                                 STR_76 7C4A                                   STR_92 7CCE  
                                 STR_68 7CC6                                   STR_69 70E0  
                                 STR_85 7B6F                                   STR_77 7CEE  
                                 STR_93 7641                                   STR_78 70E0  
                                 STR_86 770D                                   STR_94 7B3D  
                                 STR_79 7C65                                   STR_95 7BC3  
                                 STR_87 7B6F                                   STR_96 7CCE  
                                 STR_88 78DD                                   STR_97 7CAD  
                                 STR_89 7588                                   STR_98 70E3  
                                 STR_99 7A54            __end_of_printFirmwareVersion 1B88  
                                 _BSEL0 000DF8                         __end_of___lldiv 190C  
                                 ?_utoa 0067                         __end_of_calcCRC 10D4  
                                 _T0CON 000FD5                                   u20310 4A8A  
                                 u21015 20CA                                   u20320 4A94  
                       __end_of___llmod 16E8                                   u20330 4A9E  
                                 u20315 4A88                                   u20325 4A92  
                                 u20335 4A9C                                   _LATC1 007C59  
                                 u20900 2BB2                                   u20920 2BD0  
                                 u23090 1AFE                                   u20907 2BAC  
                                 u20940 2BEE                                   u20685 1134  
                                 u20686 1136                                   u23095 1AF4  
                                 u20927 2BCA                                   u20960 2C1E  
                                 u20880 2B9A                                   u23280 15C0  
                                 u15610 173E                                   u20970 2C48  
                                 u20947 2BE8                                   u12965 259A  
                                 u22565 27E0                                   u20967 2C18  
                                 u20887 2B94                                   u23287 15B6  
                                 u15617 1738                                   u20977 2C42  
                                 u21954 1496                                   u21955 1492  
                                 u23627 4024                                   u22940 130A  
                                 u15590 1706                                   u14935 3DEC  
                                 u14936 3DF2                                   u14945 3E20  
                                 u14937 3E00                                   u19105 5A62  
                                 u14946 3E26                                   u14947 3E34  
                                 u22947 1304                                   u14965 2CAA  
                                 u15597 1700                                   u19045 5916  
                                 u14975 2CBA                                   u18600 153C  
                                 u14985 2CD8                                   u19065 596A  
                                 u18610 156A                         __end_of___lwdiv 147A  
                                 u19075 59A8                                   u19085 59E6  
                                 u18607 1536                                   u19335 5EAE  
                                 u19095 5A24                                   _ERRIE 007D1D  
                                 u18617 1564                                   u19425 60E8  
                                 u19525 6A92                                   u18805 5538  
                                 u19535 63AC                                   u19455 61CA  
                                 u18815 5570                                   u19625 658E  
                                 u18825 55A8                                   u19635 65D6  
                                 u18835 55DE                                   u19645 6626  
                                 u18845 561E                                   u18855 565C  
                          _vscpPriority 003D                                   i1l401 0092  
                                 u19825 69B4                                   u18785 54C6  
                                 i1l403 018C                                   u19835 69E2  
                                 u18955 574E                                   u18795 5504  
                                 i1l412 018A                                   u19940 3AC4  
                                 i1l421 01EA                                   i1l406 018A  
                                 i1l431 02DC                                   i1l415 017A  
                       __end_of___lwmod 1222                                   i1l418 0196  
                                 u19795 691E                         sendCANFrame@dlc 0095  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0063                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00BA                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 002F  
               readRegisterExtended@reg 00BA                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 0060                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 1CC4                                   crc8@m 0069  
                                 _flags 003B                         __end_of_dpowers 6C1A  
                Write_b_eep@GIE_BIT_VAL 0063                         __end_of_isdigit 104A  
                                 _timer 011C                                   atoi@a 006B  
                                 atoi@s 0066                                   main@c 00E6  
                                 _ultoa 26BE                              Interrupt@c 0020  
            ??_printNodeFirmwareVersion 00C1                        _printErrors$1510 0098  
                      _printErrors$1504 0096                        _printErrors$1522 009C  
                      _printErrors$1531 009E                        _printErrors$1516 009A  
                                 tablat 000FF5                        _printErrors$1498 0094  
               ??_receiveSendEventCANAL 0073             __end_of_sendEscapedUartData 1686  
                                 plusw2 000FDB                                   utoa@c 006F  
                                 utoa@v 006D                                   status 000FD8  
                       __end_of_sprintf 534C                 ??_receiveSendEventSLCAN 0083  
                       __end_of_strichr 1260                         __end_of_strcspn 13E8  
                       __end_of_toupper 0FD4                         __end_of_stristr 1984  
                          __end_ofPL100 22B8                            __end_ofPL110 541A  
                          __end_ofPL102 6BC2                            __end_ofPL104 43A4  
                          __end_ofPL106 12DE                            __end_ofPL108 2D98  
     __size_of_receivePrintEventVerbose 0294                     doModeVerbose@i_1183 02B7  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1243 02BC  
                   doModeVerbose@p_1190 02BA                     doModeVerbose@p_1279 02C1  
                   doModeVerbose@p_1299 02C3                          WriteUSART@data 0060  
                  _ECANSetOperationMode 0FD4                            _canInputFifo 01CD  
                       __initialization 14C4                  doModeVerbose@page_1239 02A7  
         receiveSendMultiEventCANAL@dlc 0081                            __end_of_crc8 11AA  
         receiveSendMultiEventCANAL@crc 0082                            __end_of_atoi 2C76  
         receiveSendMultiEventCANAL@pos 0083                            __end_of_main 4198  
                          __end_of_init 1430                            __end_of_itoa 1172  
                          __end_of_utoa 1DFE                     doModeVerbose@ifmode 02BE  
                            _Read_b_eep 0F98                     doModeVerbose@maskno 02AE  
                      __end_of_Busy_eep 0F6C                     doModeVerbose@nodeid 02B2  
                         doModeSLCAN@id 009F                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 00A5                       ??_ECANSendMessage 0074  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00BD  
                                ??_crc8 006A                   getVSCPFrame@pvscptype 0073  
                                ??_atoi 0068                  ??_vscp_restoreDefaults 007A  
                                ??_main 00E5                       readRegister@value 00BB  
                                ??_init 007A                                  ??_itoa 0076  
                                ??_utoa 006D                  doModeVerbose@mask_type 0290  
                         __activetblptr 000002                         _stateVscpDriver 0037  
                     __RegsToCANID@type 0005                    _can_transmitOverruns 0104  
            ECANReceiveMessage@msgFlags 000F                           ?_readRegister 00B8  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1247 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00BB              ECANReceiveMessage@savedPtr 0010  
                                _CANCON 000F6F                        ___llmod@dividend 006D  
                                STR_100 7C4A                                  STR_101 7CEE  
                                STR_102 70E0                                  STR_110 7CF5  
                                STR_103 7C65                                  STR_111 7514  
                                STR_112 7CF5                                  STR_200 7CDE  
                                STR_104 7C3C                                  STR_120 75AE  
                                STR_201 70E0                                  STR_121 7CF5  
                                STR_105 7CF5                                  STR_113 7562  
                                STR_114 7CF5                                  STR_130 7C8F  
                                STR_202 79DB                                  STR_210 7925  
                                STR_122 7428                                  STR_106 6E38  
                                STR_123 7CF5                                  STR_203 7C58  
                                STR_211 7BFB                                  STR_131 7CDA  
                                STR_107 7478                                  STR_115 73D7  
                                STR_116 7C65                                  STR_108 7CF5  
                                STR_140 7C43                                  STR_220 7CDE  
                                STR_212 7CDE                                  STR_204 7CDE  
                                STR_124 75F8                                  STR_132 7358  
                                STR_221 70E0                                  STR_213 70E0  
                                STR_205 70E0                                  STR_125 7CF5  
                                STR_141 7C35                                  STR_117 7CA3  
                                STR_133 7BEB                                  STR_109 7384  
                                STR_118 7CF5                                  STR_142 7BA1  
                                STR_230 7C4A                                  STR_150 7BD3  
                                STR_206 796B                                  STR_214 790D  
                                STR_222 784B                                  STR_126 761D  
                                STR_134 7450                                  STR_127 7CF5  
                                STR_223 7C4A                                  STR_215 7BFB  
                                STR_231 7CEE                                  STR_151 7C77  
                                STR_143 7C71                                  STR_207 7BFB  
                                STR_135 7B51                                  STR_119 717E  
                                STR_232 70E0                                  STR_136 7C65  
                                STR_224 7CEE                                  STR_216 7CDE  
                                STR_208 7CDE                                  STR_152 7C7D  
                                STR_144 7BE3                                  STR_160 76EC  
                                STR_128 74ED                                  STR_240 72D2  
                                STR_225 70E0                                  STR_217 70E0  
                                STR_209 70E0                                  STR_161 7C65  
                                STR_129 7C65                                  STR_153 7BF8  
                                STR_137 7B8F                                  STR_145 77C6  
                                STR_241 714B                                  STR_233 6F9D  
                                STR_218 790D                                  STR_138 7C83  
                                STR_170 7C4A                                  STR_146 7CB2  
                                STR_154 79AF                                  STR_162 77FD  
                                STR_250 749F                                  STR_242 71B0  
                                STR_234 7042                                  STR_226 6EB8  
                                STR_139 7CA8                                  STR_219 7BFB  
                                STR_171 7CEE                                  STR_155 7CD2  
                                STR_163 7A04                                  STR_243 776D  
                                STR_147 772E                                  STR_251 7400  
                                STR_235 7117                                  STR_227 70AE  
                                STR_180 7CEE                                  STR_148 7C89  
                                STR_172 7BDB                                  STR_164 7BB3  
                                STR_156 7954                                  STR_260 7688  
                                STR_236 74C6                                  STR_252 72A3  
                                STR_244 71E2                                  STR_228 6F2C  
                                STR_237 6DCE                                  STR_173 7C51  
                                STR_181 7C20                                  STR_165 7BBB  
                                STR_229 78F5                                  STR_149 7818  
                                STR_157 73AE                                  STR_245 7300  
                                STR_261 7274                                  STR_253 6CD5  
                                _EEDATA 000FA8                                  STR_182 7C4A  
                                STR_174 7CEE                                  STR_166 7C5F  
                                STR_158 7BAA                                  STR_190 7AB3  
                                STR_246 787D                                  STR_238 77E2  
                                STR_270 77A9                                  STR_262 7245  
                                STR_254 6D21                                  STR_271 70E0  
                                STR_183 7CEE                                  STR_159 7CFD  
                                STR_167 7CF3                                  STR_191 7C58  
                                STR_175 7C19                                  STR_239 732C  
                                STR_247 6F65                                  STR_263 6DF5  
                                STR_255 6C88                                  STR_272 6DB2  
                                STR_176 7C4A                                  STR_168 7CF1  
                                STR_192 7CDE                                  STR_184 7C12  
                                STR_280 7B29                                  STR_248 793D  
                                STR_256 7895                                  STR_264 7214  
                                STR_281 70E0                                  STR_273 70E0  
                                STR_193 70E0                                  STR_185 7C4A  
                                STR_177 7CEE                                  STR_169 7C27  
                                STR_249 76AA                                  STR_265 6FD4  
                                STR_257 6C3A                                  STR_186 7CEE  
                                STR_178 7B98                                  STR_290 7B45  
                                STR_194 7AF8                                  STR_274 7AE7  
                                STR_282 7A68                                  STR_258 79F0  
                                STR_266 6E7A                                  STR_187 7CF5  
                                STR_283 7CFD                                  STR_179 7C4A  
                                STR_195 7C58                                  STR_275 7BCB  
                                STR_291 7B85                                  STR_267 753B  
                                STR_259 6D6B                                  STR_268 70E3  
                                STR_196 7CDE                                  STR_276 7CF9  
                                STR_284 7CF7                                  STR_292 7B7B  
                                STR_188 7B5C                                  STR_285 70E0  
                                STR_197 70E0                                  STR_277 7CE5  
                                STR_189 7CCA                                  STR_293 7982  
                                STR_269 6DB2                                  STR_294 70E0  
                                STR_278 7CFB                                  STR_286 7B71  
                                STR_198 79C5                                  STR_287 70E0  
                                STR_279 70E0                                  STR_199 7C58  
                                STR_295 7AC5                                  STR_288 7C0B  
                                STR_296 7AD6                                  STR_289 7C03  
                                _EECON2 000FA7            __end_of_readRegisterExtended 2980  
                                _CIOCON 000F73                                  ?_ultoa 0076  
          ??_sendVSCPDriverCommandReply 0070                    __end_of_fifo_getFree 1FD4  
                                i1l1520 41CC                           ?_init_app_ram 0001  
                                i1l1530 429A                                  i1l1531 421A  
                                _MDSEL0 007BBE                                  i1l1541 4274  
                                i1l1533 4228                                  _MDSEL1 007BBF  
                                i1l1606 2EFA                                  i1l1607 2FB2  
                                i1l1551 42FE                                  i1l1543 4284  
                                i1l1535 423C                                  i1l1527 4394  
                                i1l1552 4318                                  i1l1537 4250  
                                i1l1539 4264                                  i1l1574 30DC  
                                i1l1579 188C                                  i1l1925 0FFC  
                            _OpenTimer0 100C                                  i1l6654 2F04  
                                i1l6646 2EC8                                  i1l6664 2F8E  
                                i1l6666 2F98                                  i1l6678 1F8C  
                                i1l9900 1838                                  i1l9910 1862  
                                i1l9902 1842                                  i1l9904 184C  
                                i1l9906 1856                                  i1l9914 186E  
                                i1l9930 305E                                  i1l9908 185C  
                                i1l9896 1826                                  i1l9898 182E  
                       _init_app_eeprom 244A                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 000C  
                ECANReceiveMessage@mode 0013                  ECANReceiveMessage@temp 0014  
                                _RXBnIE 007D19                                  _RXBnIF 007D21  
                     getVSCPFrame@pData 0077              ??_sendVSCPDriverErrorFrame 006F  
                     getVSCPFrame@pSize 0076                      _doModeVerbose$1202 0292  
                    _doModeVerbose$1211 0296                      _doModeVerbose$1207 0294  
                    _doModeVerbose$1224 029A                      _doModeVerbose$1216 0298  
                    _doModeVerbose$1233 029E                      _doModeVerbose$1229 029C  
                    _doModeVerbose$1270 02A4                      _doModeVerbose$1262 02A2  
                    _doModeVerbose$1256 02A0                   ?_ECANSetOperationMode 0001  
                    __CANIDToRegs@Value 006B                      __size_of_Interrupt 02E2  
                            _bLocalEcho 002E                readRegisterExtended@page 00B8  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0005  
                        getCANFrame@pid 0072                                  ___wmul 10D4  
                            _bInitiated 002D                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0068                               ??_calcCRC 006F  
                                _cmdbuf 012D                               ??___llmod 0075  
                      OpenTimer0@config 0060                  receiveSendEventCANAL@i 007B  
                             ??___lwdiv 0064                               ??___lwmod 0064  
         _receivePrintEventVerbose$1400 00A1           _receivePrintEventVerbose$1405 00A3  
         _receivePrintEventVerbose$1380 0099           _receivePrintEventVerbose$1390 009D  
         _receivePrintEventVerbose$1385 009B           _receivePrintEventVerbose$1395 009F  
                                _memcpy 131E                                  _memset 104A  
                                clear_0 14CC                                  clear_1 14E0  
                                clear_2 14F2                                  clear_3 14FE  
                                clear_4 150A                           ?_sendCANFrame 0091  
                                _strcat 1572                                  _strchr 16E8  
                                _strcpy 1078                                  _strlen 12DE  
                                _wrkbuf 017D                                  _strtok 1B9E  
                                _strspn 1360     __size_of_sendVSCPDriverCommandReply 00C4  
                             ??_isdigit 0060                  receiveSendEventSLCAN@i 008B  
                      __end_of_printMDF 1CC4                            __mediumconst 6BC2  
                        ??_readRegister 00BC                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0071  
                             ??_stristr 0071              ??_sendVSCPModeCapabilities 006F  
            doModeVerbose@mask_priority 028F                        __end_of_strnicmp 17B0  
                            __accesstop 0060                 __end_of__initialization 1510  
                  _printFirmwareVersion 1B0C                   __size_of_getVSCPFrame 0088  
             receiveSendEventCANAL@data 0073                    doModeVerbose@id_1311 02A9  
                            _WriteUSART 0FAA                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 019E                    _printStatistics$1473 0094  
                  _printStatistics$1491 009A                    _printStatistics$1485 0098  
                  _printStatistics$1479 0096                   _uart_transmitOverruns 0124  
                           ?_Read_b_eep 0060                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 2790                              __end_ofPL2 6A52  
                            __end_ofPL4 6A6C                              __end_ofPL6 6A7C  
                            __end_ofPL8 6A8A                          ??_sendCANFrame 0098  
                     __end_of_ReadUSART 100C                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 009E  
                       readRegister@reg 00B8                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 011E                          doModeSLCAN@dlc 00A3  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00B6  
                getVSCPFrame@pvscpclass 007D                         _fifo_canrxcount 0031  
               __end_of_init_app_eeprom 251A                       __end_of_Interrupt 02FA  
                         ReadUSART@data 0001                      readRegister@nodeid 00C0  
                        _status_led_cnt 0022                      __RegsToCANID@Value 0008  
                            _crc8_table 0300                       __end_of_OpenUSART 1626  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C6  
                       setFilter@filter 006C                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 244A                              _doModeVscp 3A40  
                               ??_ultoa 007E                            _getVSCPFrame 1A84  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                            __pbssBANK3 0300                             ?_OpenTimer0 0001  
                            calcCRC@crc 0070                               ?_Busy_eep 0001  
                            calcCRC@len 006E                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 0060                      __size_of_init_crc8 0070  
                          __IT_INT_MASK 0028                           setFilter@eidh 006F  
                         setFilter@eidl 0070                            __IT_SAVE_BSR 0029  
                         setFilter@sidh 006D                           setFilter@sidl 006E  
                      ??_doModeVscpNode 0060                              _nTimeStamp 0033  
           ?_receiveSendMultiEventCANAL 0001                __end_of_hexStringToBytes 1D5E  
              ECANSetOperationMode@mode 0060                                 ?___wmul 0060  
                    __size_of_setFilter 01DE                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 0027  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 1DFE  
                               _B5RXFUL 007387                        WriteTimer0@timer 0062  
                         putsUSART@data 0061                    _readRegisterExtended 288E  
                               ?_memcpy 0060                                 _ECANCON 000F77  
                               ?_memset 0060                           ??_WriteTimer0 0062  
                        ??__RegsToCANID 0006                           ??_Write_b_eep 0063  
                 sendVSCPFrame@priority 009C                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 0060                                 ?_strchr 0060  
                               ?_strcpy 0060                                 ?_strlen 0060  
                               ?_strtok 006C                                 ?_strspn 0066  
                            _cntRxBytes 0108                              _cntTxBytes 0110  
                               i1l10230 42AE                                 i1l10240 42CE  
                               i1l10162 41BA                                 i1l10172 41E4  
                               i1l10180 4204                                 i1l10280 437E  
                               i1l10266 434A                                 i1l10274 4368  
                               i1l10258 431A                                 i1l10178 41FA  
                               i1l10186 4208                      __size_of_printGUID 00EE  
                   ?_sendVSCPDriverNack 0001                                 i1l13900 01FA  
                               i1l13910 0298                                 i1l13902 0226  
                               i1l13912 029C                                 i1l13904 0228  
                               i1l13840 007E                                 i1l13914 02C8  
                               i1l13906 025A                                 i1l13850 00C8  
                               i1l13842 008E                                 i1l13834 0034  
                               i1l13916 02CC                                 i1l13908 025E  
                               i1l13924 02DA                                 i1l13860 00FC  
                               i1l13852 00CC                                 i1l13844 009A  
                               i1l13836 003C                                 i1l13918 02CE  
                               i1l13870 012C                                 i1l13854 00D8  
                               i1l13846 00A6                                 i1l13838 0042  
                               i1l13872 0138                                 i1l13864 010E  
                               i1l13856 00E8                                 i1l13848 00B8  
                               i1l13890 019E                                 i1l13882 0168  
                               i1l13866 011A                                 i1l13858 00F0  
                               i1l13892 01C6                                 i1l13884 0172  
                               i1l13876 014A                                 i1l13894 01CE  
                               i1l13886 0182                                 i1l13878 0156  
                               i1l13896 01D6                                 i1l13888 0194  
                               i1l13898 01F2                              _fifo_write 2EB6  
                    __size_of_printHelp 01BE                      __size_of_printMode 0080  
                 sendVSCPFrame@vscptype 009A                   __size_of_fifo_getFree 0096  
               doModeVerbose@value_1241 02B0                       sendCANFrame@pdata 0096  
                            _made_table 0128                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 1820                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 26B0  
            _sendVSCPDriverCommandReply 25EC                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 2980  
      __size_of_receiveVSCPModeCanalMsg 00EA                  __size_of_doModeVerbose 161C  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00B6  
                   __size_of_Read_b_eep 0012                              ??_Busy_eep 0060  
      __end_of_sendVSCPDriverErrorFrame 22AA          __size_of_receiveSendEventCANAL 0144  
         __end_of_receiveSendEventCANAL 3260                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 0180  
                       _ECANSendMessage 3260           __end_of_receiveSendEventSLCAN 36D6  
                               __Hparam 0000                       __end_of_findNodes 2EB6  
                               __Lparam 0000                       __end_of_fifo_init 12D0  
                     __end_of_fifo_read 25D0                           ??_getCANFrame 0072  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B8  
                  __end_of_readRegister 237C                               ?_printMDF 0001  
                               _bSilent 0030               receiveVSCPModeCanalMsg@id 00B4  
                         ??_doModeSLCAN 0098                                 ___lldiv 1896  
                       __size_of___wmul 0022                                 _calcCRC 10A6  
                       getCANFrame@pdlc 006E                                 ___llmod 1686  
                               ___lwdiv 1430                               _FIFOEMPTY 007BA7  
                               ___lwmod 11E4                   ?_readRegisterExtended 00B8  
           printNodeFirmwareVersion@buf 00C2                    __end_of_init_app_ram 3D9C  
                          _fifo_getFree 1F3E                            init_crc8@crc 0064  
                               __pcinit 14C4                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3FB0                                 __ptext1 0F64  
                               __ptext2 4900                                 __ptext3 1CC4  
                               __ptext4 1260                 receiveSendEventCANAL@id 007C  
                               __ptext5 3556                                 __ptext6 26BE  
                               __ptext7 3A40                                 __ptext8 21FA  
                               __ptext9 25EC                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C5                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 002E  
                       __size_of_strlen 0040                       __end_of_hexpowers 6C3A  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6BF2                       __end_of_init_crc8 1820  
                               _isdigit 102A          printNodeFirmwareVersion@nodeid 00C1  
                   __end_of_WriteTimer0 0F98                          _nibbleFromChar 1260  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 113A  
                               _sprintf 4CDA        __end_of_sendVSCPModeCapabilities 21FA  
                     __end_of_setFilter 3FB0                                 _strichr 1222  
                        doModeVerbose@c 02B8                          doModeVerbose@i 02AF  
                        doModeVerbose@p 02BF                                 _strcspn 13A4  
                               _toupper 0FBE                             ?_doModeVscp 0001  
                               _stristr 190C                    __size_of_printBinary 004A  
                  end_of_initialization 1510                       __end_of_octpowers 6BF2  
                  __size_of_printErrors 02C8                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                             i1u1212_25 41C2                               i1u1212_27 41C4  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                         __Lmediumconst 6BC2                               i1u1172_25 301A  
                  __end_of_sendCANFrame 11E4                               i1u1173_25 302A  
                             i1u1174_25 3068                               i1u1820_20 012A  
                             i1u1812_20 003C                               i1u1820_21 0128  
                             i1u1812_21 003A                               i1u1821_20 0138  
                             i1u1813_20 007E                               i1u1821_21 0136  
                             i1u1813_21 007C                               i1u1830_20 01CE  
                             i1u1822_20 0148                               i1u1814_20 009A  
                             i1u1830_21 01CC                               i1u1822_21 0146  
                             i1u1814_21 0098                               i1u1831_20 01D6  
                             i1u1823_20 0156                               i1u1815_20 00D8  
                             i1u1831_21 01D4                               i1u1823_21 0154  
                             i1u1815_21 00D6                               i1u1832_20 01F2  
                             i1u1824_20 0166                               i1u1816_20 00E8  
                             i1u1832_21 01F0                               i1u1824_21 0164  
                             i1u1816_21 00E6                               i1u1833_20 01FA  
                             i1u1825_20 0172                               i1u1817_20 00FC  
                             i1u1833_21 01F8                               i1u1825_21 0170  
                             i1u1817_21 00FA                               i1u1834_20 0226  
                             i1u1826_20 0182                               i1u1818_20 010C  
                             i1u1834_21 0224                               i1u1826_21 0180  
                             i1u1818_21 010A                               i1u1835_20 025A  
                             i1u1827_20 0194                               i1u1819_20 011A  
                             i1u1835_21 0258                               i1u1827_21 0192  
                             i1u1819_21 0118                               i1u1836_20 0298  
                             i1u1828_20 019E                               i1u1836_21 0296  
                             i1u1828_21 019C                               i1u1837_20 02C8  
                             i1u1829_20 01C6                               i1u1837_21 02C6  
                             i1u1829_21 01C4                               i1u1838_20 02D8  
                             i1u1838_21 02D6                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 2B6A  
                       ___lldiv@divisor 0064                       __end_of_printHelp 3A40  
                       ___lldiv@counter 0068                       __end_of_printMode 1A84  
                     ECANSendMessage@id 006C                       ECANSendMessage@pb 0075  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00C1  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 1572  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 541A  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00CE  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 208E                                 strlen@s 0060  
                            _sequencyno 0036                              _timekeeper 0118  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 208E  
                            findNodes@i 00CB                  __end_of_nibbleFromChar 129E  
                   __end_of_doModeSLCAN 4CCE                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 006C  
                            fifo_read@p 006A                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B8  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 33CE  
                  _uart_receiveOverruns 0120                _receivePrintEventVerbose 43A4  
                            _vscpNodeId 003C                           ?__CANIDToRegs 0062  
                  __end_of__RegsToCANID 30DE                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02B4  
                     doModeVerbose@preg 0284                          _init_crc8$2066 0060  
                ??_readRegisterExtended 00BF                          ?_doModeVerbose 0001  
                          ??_Read_b_eep 0062                          ?_sendVSCPFrame 0098  
                        __end_of___wmul 10F6                     __size_of_doModeVscp 01BE  
                           _WriteTimer0 0F86                             _Write_b_eep 1106  
                        __end_of_memcpy 1360                          __end_of_memset 1078  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                               ___DCDelay 01F3  
                        __end_of_strcat 15CA                          __end_of_strchr 174A  
                        __end_of_strcpy 10A6                          __end_of_strlen 131E  
              doModeVerbose@filter_type 028D                          __end_of_strtok 1C30  
                        __end_of_strspn 13A4                             __end_ofPL10 6AD4  
                           __end_ofPL20 53A0                             __end_ofPL12 536A  
                           __end_ofPL30 6AF8                             __end_ofPL22 30F4  
                           __end_ofPL14 2FE2                             __end_ofPL40 6B3E  
                           __end_ofPL32 3DBA                             __end_ofPL24 6AE4  
                           __end_ofPL16 537A                             __end_ofPL50 6B56  
                           __end_ofPL42 53BA                             __end_ofPL34 6B0A  
                           __end_ofPL26 3544                             __end_ofPL18 2C84  
                           __end_ofPL60 53E6                             __end_ofPL52 53D0  
                           __end_ofPL44 1F3E                             __end_ofPL36 25EC  
                           __end_ofPL28 2D58                             __end_ofPL70 3108  
                           __end_ofPL62 6B6C                             __end_ofPL54 2D7A  
                           __end_ofPL46 2D68                             __end_ofPL38 6B24  
                           __end_ofPL80 3556                             __end_ofPL72 6B80  
                           __end_ofPL64 53F4                             __end_ofPL56 3DD2  
                           __end_ofPL48 1E9E                             __end_ofPL90 6BA2  
                           __end_ofPL82 1FE6                             __end_ofPL74 311C  
                           __end_ofPL66 2B7E                             __end_ofPL58 1B9E  
                           __end_ofPL92 5410                             __end_ofPL84 5406  
                           __end_ofPL76 27A4                             __end_ofPL68 2D8E  
                           __end_ofPL94 1106                             __end_ofPL86 4CDA  
                           __end_ofPL78 6B92                             __end_ofPL96 36E4  
                           __end_ofPL88 26BE                             __end_ofPL98 6BB2  
                   start_initialization 14C4                               _ReadUSART 0FEE  
                       findNodes@nFound 00C9                   doModeVerbose@reg_1240 02A8  
                 doModeVerbose@filterno 02AD                 _receiveVSCPModeCanalMsg 27A4  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A4  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0069  
            readRegisterExtended@nodeid 00C3                               _OpenUSART 15CA  
                    __end_of_Read_b_eep 0FAA                     sendVSCPFrame@nodeid 009B  
                       ___llmod@divisor 0071                   __size_of_readRegister 00C4  
                       ___llmod@counter 0075                       __size_of_Busy_eep 0006  
                 ECANReceiveMessage@ptr 0015                     __size_of_fifo_write 00FE  
                 __size_of_init_app_ram 019E                          _findNodes$1576 00C7  
              __end_of__ECANPointBuffer 1896                       __CANIDToRegs@type 0068  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 1FE6                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 4900               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 4396                                ??_memcpy 0066  
                   readRegister@timeout 00B9                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0291  
                 __end_ofi1_WriteTimer0 0F86                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 102A                                ??_strtok 0070  
                              ??_strspn 006A                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0022                              ?_ReadUSART 0001  
                       __IT_SAVE_STATUS 012A                           __pcstackBANK0 0060  
                         __pcstackBANK2 0280                     __end_of__stringdata 7CFF  
                          _readRegister 22B8                   __size_of_sendCANFrame 003A  
                          _isdigit$2983 0061             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006C  
                     sendVSCPFrame@size 009D                            _init_app_ram 3BFE  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK1 01F1  
                         __IT_SAVE_WREG 012B                        _ledFunctionality 0032  
              doModeVerbose@nodeid_1238 02B3                doModeVerbose@nodeid_1264 02B6  
                          setFilter@val 0062                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 00CC           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 36E4                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 00A0                          _ECANInitialize 1984  
                     _sendVSCPDriverAck 1E9E                           __pmediumconst 6BC2  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 2D98  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 129E                               _fifo_read 251A  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0094  
                           __pintcodelo 0018                            _sendCANFrame 11AA  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0098  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00C1                     _sendEscapedUartData 1626  
                             _hexpowers 6C1A                        ___lwdiv@quotient 0065  
                             _init_crc8 17B0                   __size_of__RegsToCANID 00FC  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 010C  
                          ??_doModeVscp 00B9                                ?_strcspn 0066  
                              ?_toupper 0001                                ?_stristr 006D  
                    __end_of_WriteUSART 0FBE                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                         _can_inputBuffer 0400  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0098  
                             _setFilter 3DD2                             strnicmp@len 0068  
                             _octpowers 6BC2                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 1A04  
             __end_of_sendVSCPDriverAck 1F30                                i1u652_25 2ED6  
                              i1u653_25 2EE6                                i1u655_25 2F7C  
                              i1u657_25 1F64                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 311C                        ECANSendMessage@i 008E  
                      ECANSendMessage@j 0089                    ?_sendEscapedUartData 006C  
                 _receiveSendEventSLCAN 3556                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007C                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0070                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006E  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 2A7C                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C6  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 3882  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 1A04                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 3BFE                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 2D44                               _putsUSART 151A  
                           __stringdata 6C3A                       ___wmul@multiplier 0060  
                          __RegsToCANID 2FE2                               _vscpClass 0038  
               ??_writeRegisterExtended 00BF                         Write_b_eep@badd 0060  
                       Write_b_eep@bdat 0062                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0094  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0074  
                         ??_printBinary 0061                        doModeVerbose@reg 02B5  
                         ??_printErrors 0094                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 0035  
             writeRegisterExtended@page 00B8                                ___DCByte 002A  
  __end_of_receiveVSCPModeMultiCanalMsg 0F64   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 0F62                             ??_Interrupt 0017  
               __end_of_printStatistics 3882                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00BB                                _Busy_eep 0F66  
              __size_of_init_app_eeprom 00D0                              ?_setFilter 0062  
                       OpenUSART@config 0062                          findNodes@value 00CA  
          __end_of_vscp_restoreDefaults 0F74                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 007C         __end_of_receiveVSCPModeCanalMsg 288E  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000A                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0064  
                    __end_of_fifo_write 2FB4                        __CANIDToRegs@ptr 0062  
           receiveVSCPModeCanalMsg@data 00AC                              ?_printGUID 0001  
                           doModeVscp@c 00B9                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 0070  
                          ?_Write_b_eep 0060                              ?_putsUSART 0061  
                       fifo_read@nbytes 0064                              sprintf@idx 0081  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 2144  
                              __ptext11 0F62                                __ptext20 1172  
                              __ptext12 27A4                                __ptext21 17B0  
                              __ptext13 131E                                __ptext30 237C  
                              __ptext22 541A                                __ptext14 1E9E  
                              __ptext31 1572                                __ptext23 2980  
                              __ptext15 1DFE                                __ptext40 2B7E  
                              __ptext32 22B8                                __ptext24 147A  
                              __ptext16 10A6                                __ptext41 1B9E  
                              __ptext33 208E                                __ptext25 288E  
                              __ptext17 311C                                __ptext50 43A4  
                              __ptext42 13A4                                __ptext34 11AA  
                              __ptext26 1078                                __ptext18 33CE  
                              __ptext51 1A84                                __ptext43 1360  
                              __ptext35 3260                                __ptext27 2D98  
                              __ptext19 1626                                __ptext60 113A  
                              __ptext52 1FE6                                __ptext44 16E8  
                              __ptext36 104A                                __ptext28 1C30  
                              __ptext61 1D5E                                __ptext53 251A  
                              __ptext45 190C                                __ptext37 3882  
                              __ptext29 2A7C                                __ptext70 0FAA  
                              __ptext62 11E4                                __ptext54 4CDA  
                              __ptext46 1222                                __ptext38 4638  
                              __ptext71 13E8                                __ptext63 1430  
                              __ptext55 10D4                                __ptext47 174A  
                              __ptext39 36E4                                __ptext80 0F86  
                              __ptext72 1984                                __ptext64 0F6C  
                              __ptext56 1686                                __ptext48 0FBE  
                              __ptext81 129E                                __ptext73 100C  
                              __ptext65 244A                                __ptext57 1896  
                              __ptext49 12DE                                __ptext74 15CA  
                              __ptext66 1106                                __ptext58 102A  
                              __ptext83 0F74                                __ptext75 3BFE  
                              __ptext67 0F66                                __ptext59 1B0C  
                              __ptext84 1F3E                                __ptext76 2C84  
                              __ptext68 1A04                                __ptext85 4198  
                              __ptext77 3DD2                                __ptext69 151A  
                              __ptext86 2FE2                                __ptext78 0FD4  
                              __ptext87 1820                                __ptext79 0F98  
                              __ptext88 2EB6                                __ptext89 0FEE  
              receiveSendEventCANAL@dlc 0080                receiveSendEventCANAL@crc 0081  
                        printMDF@nodeid 00C1                           ?_getVSCPFrame 0073  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C5                     __end_of_printBinary 14C4  
                         __size_of_crc8 0038                           __size_of_atoi 00F8  
                         __size_of_main 01E8                           __size_of_init 0048  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 4900                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066                           init_app_ram@i 0079  
            __size_of_sendVSCPDriverAck 0092          receiveSendMultiEventCANAL@data 0073  
                ?_receiveSendEventSLCAN 0001                _printNodeFirmwareVersion 237C  
                   ECANSendMessage@data 0070                ECANSendMessage@tempBSEL0 008A  
                              _printMDF 1C30                               printMDF@i 00C5  
                             printMDF@p 00C3                            ?_getCANFrame 006E  
                   ECANSendMessage@mode 0087                     ECANSendMessage@temp 008D  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 0073  
                              atoi@sign 006A                             ??_findNodes 00C7  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0066  
                           ??_fifo_read 0066                                _vscpData 01E5  
         __size_of_readRegisterExtended 00F2                                main@argc 00E0  
                              main@argv 00E2                                _vscpSize 003E  
                    ??__ECANPointBuffer 0004                                _vscpType 003F  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A6  
                              _strnicmp 174A                        init_app_eeprom@i 0064  
           writeRegisterExtended@nodeid 00C3                           Interrupt@fail 0021  
                       _serialInputFifo 01DD                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 0012  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 4198  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 0079  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 00B4  
                              intlevel1 0000                               sprintf@ap 0088  
                             sprintf@sp 0076                    hexStringToBytes@size 0066  
                             strchr@chr 0062                        ?_printStatistics 0001  
              receiveSendEventSLCAN@dlc 008A                        ___lwmod@dividend 0060  
                             strchr@ptr 0060                     ?_ECANReceiveMessage 000A  
                      ___lldiv@dividend 0060                             ??_setFilter 0066  
                         printMDF@value 00C2     __size_of_receiveSendMultiEventCANAL 0166  
                         fifo_getFree@f 0001                               strcspn@s1 0066  
                             strcspn@s2 0068      receiveSendMultiEventCANAL@msgcount 007B  
               ECANSendMessage@msgFlags 0073                              _OSCCONbits 000FD3  
                             strnicmp@r 006C                               stristr@s1 006D  
                             stristr@s2 006F                      ECANSendMessage@ptr 008F  
                     ??_init_app_eeprom 0064                   __size_of__CANIDToRegs 00C0  
                           ??_printGUID 00C1                             ??_printHelp 0065  
                           ??_printMode 0065                _sendVSCPDriverErrorFrame 21FA  
                         ?_fifo_getFree 0001                  ECANSendMessage@dataLen 0072  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 0010  
                           ??_putsUSART 0063                                utoa@base 006B  
                              ultoa@buf 0076                                ultoa@val 0078  
                         fifo_init@size 0064                                sprintf@c 0091  
                              sprintf@f 0078                     hexStringToBytes@buf 0064  
                              strcat@cp 0064                     hexStringToBytes@len 006C  
                        _doModeVscpNode 0F64                                strcat@to 0060  
      __end_of_receivePrintEventVerbose 4638                  ECANSendMessage@buffers 0088  
                      ___lldiv@quotient 0069                         ___lwmod@divisor 0062  
          __end_of_ECANSetOperationMode 0FEE                    _vscp_restoreDefaults 0F6C  
                          printGUID@buf 00C2                                strcpy@cp 0064  
                              strlen@cp 0062                                strcpy@to 0060  
                       ___lwmod@counter 0064                                strcspn@i 006A  
                              toupper@c 0060                             _printBinary 147A  
                              strtok@s1 006C                                strtok@s2 006E  
                              strspn@s1 0066                                strspn@s2 0068  
                            _RXM1EXIDEN 0078EB                                strtok@sp 0024  
                ECANSendMessage@tempPtr 008B                             _printErrors 4638  
                          fifo_init@buf 0062                            fifo_read@buf 0062  
         sendVSCPDriverCommandReply@crc 0071                            __CANIDToRegs 2C84  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0026  
             readRegisterExtended@value 00BD                _sendVSCPModeCapabilities 2144  
              __size_of_ECANSendMessage 016E  
