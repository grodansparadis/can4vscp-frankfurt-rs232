

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Wed Oct 07 16:22:02 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006BA6                     __pmediumconst:
   136                           	opt stack 0
   137  006BA6                     _octpowers:
   138                           	opt stack 0
   139  006BA6  0001               	dw	1
   140  006BA8  0000               	dw	0
   141  006BAA  0008               	dw	8
   142  006BAC  0000               	dw	0
   143  006BAE  0040               	dw	64
   144  006BB0  0000               	dw	0
   145  006BB2  0200               	dw	512
   146  006BB4  0000               	dw	0
   147  006BB6  1000               	dw	4096
   148  006BB8  0000               	dw	0
   149  006BBA  8000               	dw	32768
   150  006BBC  0000               	dw	0
   151  006BBE  0000               	dw	0
   152  006BC0  0004               	dw	4
   153  006BC2  0000               	dw	0
   154  006BC4  0020               	dw	32
   155  006BC6  0000               	dw	0
   156  006BC8  0100               	dw	256
   157  006BCA  0000               	dw	0
   158  006BCC  0800               	dw	2048
   159  006BCE  0000               	dw	0
   160  006BD0  4000               	dw	16384
   161  006BD2  0000               	dw	0
   162  006BD4  0000               	dw	0
   163  006BD6                     __end_of_octpowers:
   164                           	opt stack 0
   165  006BD6                     _dpowers:
   166                           	opt stack 0
   167  006BD6  0001               	dw	1
   168  006BD8  0000               	dw	0
   169  006BDA  000A               	dw	10
   170  006BDC  0000               	dw	0
   171  006BDE  0064               	dw	100
   172  006BE0  0000               	dw	0
   173  006BE2  03E8               	dw	1000
   174  006BE4  0000               	dw	0
   175  006BE6  2710               	dw	10000
   176  006BE8  0000               	dw	0
   177  006BEA  86A0               	dw	34464
   178  006BEC  0001               	dw	1
   179  006BEE  4240               	dw	16960
   180  006BF0  000F               	dw	15
   181  006BF2  9680               	dw	38528
   182  006BF4  0098               	dw	152
   183  006BF6  E100               	dw	57600
   184  006BF8  05F5               	dw	1525
   185  006BFA  CA00               	dw	51712
   186  006BFC  3B9A               	dw	15258
   187  006BFE                     __end_of_dpowers:
   188                           	opt stack 0
   189  006BFE                     _hexpowers:
   190                           	opt stack 0
   191  006BFE  0001               	dw	1
   192  006C00  0000               	dw	0
   193  006C02  0010               	dw	16
   194  006C04  0000               	dw	0
   195  006C06  0100               	dw	256
   196  006C08  0000               	dw	0
   197  006C0A  1000               	dw	4096
   198  006C0C  0000               	dw	0
   199  006C0E  0000               	dw	0
   200  006C10  0001               	dw	1
   201  006C12  0000               	dw	0
   202  006C14  0010               	dw	16
   203  006C16  0000               	dw	0
   204  006C18  0100               	dw	256
   205  006C1A  0000               	dw	0
   206  006C1C  1000               	dw	4096
   207  006C1E                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _RCREG	set	4014
   230  0000                     _RCSTA	set	4011
   231  0000                     _RCSTAbits	set	4011
   232  0000                     _RXB1CONbits	set	3920
   233  0000                     _RXERRCNT	set	3957
   234  0000                     _RXF0EIDH	set	3842
   235  0000                     _RXF0EIDL	set	3843
   236  0000                     _RXF0SIDH	set	3840
   237  0000                     _RXF0SIDL	set	3841
   238  0000                     _RXF10EIDH	set	3446
   239  0000                     _RXF10EIDL	set	3447
   240  0000                     _RXF10SIDH	set	3444
   241  0000                     _RXF10SIDL	set	3445
   242  0000                     _RXF11EIDH	set	3450
   243  0000                     _RXF11EIDL	set	3451
   244  0000                     _RXF11SIDH	set	3448
   245  0000                     _RXF11SIDL	set	3449
   246  0000                     _RXF12EIDH	set	3458
   247  0000                     _RXF12EIDL	set	3459
   248  0000                     _RXF12SIDH	set	3456
   249  0000                     _RXF12SIDL	set	3457
   250  0000                     _RXF13EIDH	set	3462
   251  0000                     _RXF13EIDL	set	3463
   252  0000                     _RXF13SIDH	set	3460
   253  0000                     _RXF13SIDL	set	3461
   254  0000                     _RXF14EIDH	set	3466
   255  0000                     _RXF14EIDL	set	3467
   256  0000                     _RXF14SIDH	set	3464
   257  0000                     _RXF14SIDL	set	3465
   258  0000                     _RXF15EIDH	set	3474
   259  0000                     _RXF15EIDL	set	3475
   260  0000                     _RXF15SIDH	set	3472
   261  0000                     _RXF15SIDL	set	3473
   262  0000                     _RXF1EIDH	set	3846
   263  0000                     _RXF1EIDL	set	3847
   264  0000                     _RXF1SIDH	set	3844
   265  0000                     _RXF1SIDL	set	3845
   266  0000                     _RXF2EIDH	set	3850
   267  0000                     _RXF2EIDL	set	3851
   268  0000                     _RXF2SIDH	set	3848
   269  0000                     _RXF2SIDL	set	3849
   270  0000                     _RXF3EIDH	set	3854
   271  0000                     _RXF3EIDL	set	3855
   272  0000                     _RXF3SIDH	set	3852
   273  0000                     _RXF3SIDL	set	3853
   274  0000                     _RXF4EIDH	set	3858
   275  0000                     _RXF4EIDL	set	3859
   276  0000                     _RXF4SIDH	set	3856
   277  0000                     _RXF4SIDL	set	3857
   278  0000                     _RXF5EIDH	set	3862
   279  0000                     _RXF5EIDL	set	3863
   280  0000                     _RXF5SIDH	set	3860
   281  0000                     _RXF5SIDL	set	3861
   282  0000                     _RXF6EIDH	set	3426
   283  0000                     _RXF6EIDL	set	3427
   284  0000                     _RXF6SIDH	set	3424
   285  0000                     _RXF6SIDL	set	3425
   286  0000                     _RXF7EIDH	set	3430
   287  0000                     _RXF7EIDL	set	3431
   288  0000                     _RXF7SIDH	set	3428
   289  0000                     _RXF7SIDL	set	3429
   290  0000                     _RXF8EIDH	set	3434
   291  0000                     _RXF8EIDL	set	3435
   292  0000                     _RXF8SIDH	set	3432
   293  0000                     _RXF8SIDL	set	3433
   294  0000                     _RXF9EIDH	set	3442
   295  0000                     _RXF9EIDL	set	3443
   296  0000                     _RXF9SIDH	set	3440
   297  0000                     _RXF9SIDL	set	3441
   298  0000                     _RXFBCON0	set	3552
   299  0000                     _RXFBCON1	set	3553
   300  0000                     _RXFBCON2	set	3554
   301  0000                     _RXFBCON3	set	3555
   302  0000                     _RXFBCON4	set	3556
   303  0000                     _RXFBCON5	set	3557
   304  0000                     _RXFBCON6	set	3558
   305  0000                     _RXFBCON7	set	3559
   306  0000                     _RXFCON0	set	3540
   307  0000                     _RXFCON1	set	3541
   308  0000                     _RXM0EIDH	set	3866
   309  0000                     _RXM0EIDL	set	3867
   310  0000                     _RXM0SIDL	set	3865
   311  0000                     _RXM1EIDH	set	3870
   312  0000                     _RXM1EIDL	set	3871
   313  0000                     _RXM1SIDL	set	3869
   314  0000                     _SPBRG	set	4015
   315  0000                     _SPBRGH	set	4016
   316  0000                     _T0CON	set	4053
   317  0000                     _T0CONbits	set	4053
   318  0000                     _TMR0H	set	4055
   319  0000                     _TMR0L	set	4054
   320  0000                     _TRISBbits	set	3987
   321  0000                     _TRISCbits	set	3988
   322  0000                     _TXERRCNT	set	3958
   323  0000                     _TXREG	set	4013
   324  0000                     _TXSTA	set	4012
   325  0000                     _TXSTAbits	set	4012
   326  0000                     _B0RXFUL	set	28935
   327  0000                     _B0TXEN	set	28610
   328  0000                     _B1RXFUL	set	29063
   329  0000                     _B1TXEN	set	28611
   330  0000                     _B2RXFUL	set	29191
   331  0000                     _B2TXEN	set	28612
   332  0000                     _B3RXFUL	set	29319
   333  0000                     _B3TXEN	set	28613
   334  0000                     _B4RXFUL	set	29447
   335  0000                     _B4TXEN	set	28614
   336  0000                     _B5RXFUL	set	29575
   337  0000                     _B5TXEN	set	28615
   338  0000                     _ERRIE	set	32029
   339  0000                     _ERRIF	set	32037
   340  0000                     _FIFOEMPTY	set	31655
   341  0000                     _IRXIF	set	32039
   342  0000                     _LATC1	set	31833
   343  0000                     _MDSEL0	set	31678
   344  0000                     _MDSEL1	set	31679
   345  0000                     _PEIE	set	32662
   346  0000                     _RCIE	set	31981
   347  0000                     _RCIF	set	31989
   348  0000                     _RCIP	set	31997
   349  0000                     _RXB0FILHIT0	set	31488
   350  0000                     _RXB0FUL	set	31495
   351  0000                     _RXB0IF	set	32032
   352  0000                     _RXB0OVFL	set	31655
   353  0000                     _RXB1IF	set	32033
   354  0000                     _RXB1OVFL	set	31654
   355  0000                     _RXBnIE	set	32025
   356  0000                     _RXBnIF	set	32033
   357  0000                     _RXM0EXIDM	set	30923
   358  0000                     _RXM1EXIDEN	set	30955
   359  0000                     _B0CON	set	3616
   360  0000                     _B1CON	set	3632
   361  0000                     _B2CON	set	3648
   362  0000                     _B3CON	set	3664
   363  0000                     _B4CON	set	3680
   364  0000                     _B5CON	set	3696
   365  0000                     _RXB0CON	set	3936
   366  0000                     _RXB1CON	set	3920
   367  0000                     _RXM0SIDH	set	3864
   368  0000                     _RXM1SIDH	set	3868
   369  0000                     _TXB0CON	set	3904
   370  0000                     _TXB1CON	set	3888
   371  0000                     _TXB2CON	set	3872
   372  006C1E                     __stringdata:
   373                           	opt stack 0
   374  006C1E                     STR_258:
   375  006C1E  20                 	db	32
   376  006C1F  20                 	db	32
   377  006C20  20                 	db	32
   378  006C21  20                 	db	32
   379  006C22  20                 	db	32
   380  006C23  20                 	db	32
   381  006C24  20                 	db	32
   382  006C25  20                 	db	32
   383  006C26  20                 	db	32
   384  006C27  46                 	db	70	;'F'
   385  006C28  6F                 	db	111	;'o'
   386  006C29  72                 	db	114	;'r'
   387  006C2A  6D                 	db	109	;'m'
   388  006C2B  61                 	db	97	;'a'
   389  006C2C  74                 	db	116	;'t'
   390  006C2D  3A                 	db	58	;':'
   391  006C2E  20                 	db	32
   392  006C2F  66                 	db	102	;'f'
   393  006C30  69                 	db	105	;'i'
   394  006C31  6C                 	db	108	;'l'
   395  006C32  74                 	db	116	;'t'
   396  006C33  65                 	db	101	;'e'
   397  006C34  72                 	db	114	;'r'
   398  006C35  20                 	db	32
   399  006C36  66                 	db	102	;'f'
   400  006C37  69                 	db	105	;'i'
   401  006C38  6C                 	db	108	;'l'
   402  006C39  74                 	db	116	;'t'
   403  006C3A  65                 	db	101	;'e'
   404  006C3B  72                 	db	114	;'r'
   405  006C3C  6E                 	db	110	;'n'
   406  006C3D  6F                 	db	111	;'o'
   407  006C3E  2C                 	db	44
   408  006C3F  70                 	db	112	;'p'
   409  006C40  72                 	db	114	;'r'
   410  006C41  69                 	db	105	;'i'
   411  006C42  6F                 	db	111	;'o'
   412  006C43  2C                 	db	44
   413  006C44  63                 	db	99	;'c'
   414  006C45  6C                 	db	108	;'l'
   415  006C46  61                 	db	97	;'a'
   416  006C47  73                 	db	115	;'s'
   417  006C48  73                 	db	115	;'s'
   418  006C49  2C                 	db	44
   419  006C4A  74                 	db	116	;'t'
   420  006C4B  79                 	db	121	;'y'
   421  006C4C  70                 	db	112	;'p'
   422  006C4D  65                 	db	101	;'e'
   423  006C4E  2C                 	db	44
   424  006C4F  6E                 	db	110	;'n'
   425  006C50  6F                 	db	111	;'o'
   426  006C51  64                 	db	100	;'d'
   427  006C52  65                 	db	101	;'e'
   428  006C53  69                 	db	105	;'i'
   429  006C54  64                 	db	100	;'d'
   430  006C55  20                 	db	32
   431  006C56  20                 	db	32
   432  006C57  28                 	db	40
   433  006C58  66                 	db	102	;'f'
   434  006C59  69                 	db	105	;'i'
   435  006C5A  6C                 	db	108	;'l'
   436  006C5B  74                 	db	116	;'t'
   437  006C5C  65                 	db	101	;'e'
   438  006C5D  72                 	db	114	;'r'
   439  006C5E  6E                 	db	110	;'n'
   440  006C5F  6F                 	db	111	;'o'
   441  006C60  20                 	db	32
   442  006C61  3D                 	db	61	;'='
   443  006C62  20                 	db	32
   444  006C63  30                 	db	48	;'0'
   445  006C64  2D                 	db	45
   446  006C65  31                 	db	49	;'1'
   447  006C66  35                 	db	53	;'5'
   448  006C67  29                 	db	41
   449  006C68  2E                 	db	46
   450  006C69  0D                 	db	13
   451  006C6A  0A                 	db	10
   452  006C6B  00                 	db	0
   453  006C6C                     STR_256:
   454  006C6C  49                 	db	73	;'I'
   455  006C6D  4E                 	db	78	;'N'
   456  006C6E  46                 	db	70	;'F'
   457  006C6F  4F                 	db	79	;'O'
   458  006C70  20                 	db	32
   459  006C71  2D                 	db	45
   460  006C72  20                 	db	32
   461  006C73  47                 	db	71	;'G'
   462  006C74  65                 	db	101	;'e'
   463  006C75  74                 	db	116	;'t'
   464  006C76  20                 	db	32
   465  006C77  69                 	db	105	;'i'
   466  006C78  6E                 	db	110	;'n'
   467  006C79  66                 	db	102	;'f'
   468  006C7A  6F                 	db	111	;'o'
   469  006C7B  20                 	db	32
   470  006C7C  61                 	db	97	;'a'
   471  006C7D  62                 	db	98	;'b'
   472  006C7E  6F                 	db	111	;'o'
   473  006C7F  75                 	db	117	;'u'
   474  006C80  74                 	db	116	;'t'
   475  006C81  20                 	db	32
   476  006C82  61                 	db	97	;'a'
   477  006C83  6E                 	db	110	;'n'
   478  006C84  20                 	db	32
   479  006C85  65                 	db	101	;'e'
   480  006C86  78                 	db	120	;'x'
   481  006C87  69                 	db	105	;'i'
   482  006C88  73                 	db	115	;'s'
   483  006C89  74                 	db	116	;'t'
   484  006C8A  65                 	db	101	;'e'
   485  006C8B  6E                 	db	110	;'n'
   486  006C8C  74                 	db	116	;'t'
   487  006C8D  20                 	db	32
   488  006C8E  6E                 	db	110	;'n'
   489  006C8F  6F                 	db	111	;'o'
   490  006C90  64                 	db	100	;'d'
   491  006C91  65                 	db	101	;'e'
   492  006C92  20                 	db	32
   493  006C93  6F                 	db	111	;'o'
   494  006C94  6E                 	db	110	;'n'
   495  006C95  20                 	db	32
   496  006C96  74                 	db	116	;'t'
   497  006C97  68                 	db	104	;'h'
   498  006C98  65                 	db	101	;'e'
   499  006C99  20                 	db	32
   500  006C9A  62                 	db	98	;'b'
   501  006C9B  75                 	db	117	;'u'
   502  006C9C  73                 	db	115	;'s'
   503  006C9D  20                 	db	32
   504  006C9E  28                 	db	40
   505  006C9F  46                 	db	70	;'F'
   506  006CA0  6F                 	db	111	;'o'
   507  006CA1  72                 	db	114	;'r'
   508  006CA2  6D                 	db	109	;'m'
   509  006CA3  61                 	db	97	;'a'
   510  006CA4  74                 	db	116	;'t'
   511  006CA5  3A                 	db	58	;':'
   512  006CA6  20                 	db	32
   513  006CA7  69                 	db	105	;'i'
   514  006CA8  6E                 	db	110	;'n'
   515  006CA9  66                 	db	102	;'f'
   516  006CAA  6F                 	db	111	;'o'
   517  006CAB  20                 	db	32
   518  006CAC  6E                 	db	110	;'n'
   519  006CAD  69                 	db	105	;'i'
   520  006CAE  63                 	db	99	;'c'
   521  006CAF  6B                 	db	107	;'k'
   522  006CB0  6E                 	db	110	;'n'
   523  006CB1  61                 	db	97	;'a'
   524  006CB2  6D                 	db	109	;'m'
   525  006CB3  65                 	db	101	;'e'
   526  006CB4  29                 	db	41
   527  006CB5  2E                 	db	46
   528  006CB6  0D                 	db	13
   529  006CB7  0A                 	db	10
   530  006CB8  00                 	db	0
   531  006CB9                     STR_254:
   532  006CB9  52                 	db	82	;'R'
   533  006CBA  52                 	db	82	;'R'
   534  006CBB  45                 	db	69	;'E'
   535  006CBC  47                 	db	71	;'G'
   536  006CBD  20                 	db	32
   537  006CBE  2D                 	db	45
   538  006CBF  20                 	db	32
   539  006CC0  52                 	db	82	;'R'
   540  006CC1  65                 	db	101	;'e'
   541  006CC2  61                 	db	97	;'a'
   542  006CC3  64                 	db	100	;'d'
   543  006CC4  20                 	db	32
   544  006CC5  72                 	db	114	;'r'
   545  006CC6  65                 	db	101	;'e'
   546  006CC7  67                 	db	103	;'g'
   547  006CC8  69                 	db	105	;'i'
   548  006CC9  73                 	db	115	;'s'
   549  006CCA  74                 	db	116	;'t'
   550  006CCB  65                 	db	101	;'e'
   551  006CCC  72                 	db	114	;'r'
   552  006CCD  28                 	db	40
   553  006CCE  73                 	db	115	;'s'
   554  006CCF  29                 	db	41
   555  006CD0  20                 	db	32
   556  006CD1  6F                 	db	111	;'o'
   557  006CD2  66                 	db	102	;'f'
   558  006CD3  20                 	db	32
   559  006CD4  6E                 	db	110	;'n'
   560  006CD5  6F                 	db	111	;'o'
   561  006CD6  64                 	db	100	;'d'
   562  006CD7  65                 	db	101	;'e'
   563  006CD8  20                 	db	32
   564  006CD9  28                 	db	40
   565  006CDA  46                 	db	70	;'F'
   566  006CDB  6F                 	db	111	;'o'
   567  006CDC  72                 	db	114	;'r'
   568  006CDD  6D                 	db	109	;'m'
   569  006CDE  61                 	db	97	;'a'
   570  006CDF  74                 	db	116	;'t'
   571  006CE0  3A                 	db	58	;':'
   572  006CE1  20                 	db	32
   573  006CE2  72                 	db	114	;'r'
   574  006CE3  72                 	db	114	;'r'
   575  006CE4  65                 	db	101	;'e'
   576  006CE5  67                 	db	103	;'g'
   577  006CE6  20                 	db	32
   578  006CE7  6E                 	db	110	;'n'
   579  006CE8  6F                 	db	111	;'o'
   580  006CE9  64                 	db	100	;'d'
   581  006CEA  65                 	db	101	;'e'
   582  006CEB  69                 	db	105	;'i'
   583  006CEC  64                 	db	100	;'d'
   584  006CED  20                 	db	32
   585  006CEE  5B                 	db	91	;'['
   586  006CEF  70                 	db	112	;'p'
   587  006CF0  61                 	db	97	;'a'
   588  006CF1  67                 	db	103	;'g'
   589  006CF2  65                 	db	101	;'e'
   590  006CF3  3A                 	db	58	;':'
   591  006CF4  5D                 	db	93	;']'
   592  006CF5  72                 	db	114	;'r'
   593  006CF6  65                 	db	101	;'e'
   594  006CF7  67                 	db	103	;'g'
   595  006CF8  20                 	db	32
   596  006CF9  5B                 	db	91	;'['
   597  006CFA  63                 	db	99	;'c'
   598  006CFB  6F                 	db	111	;'o'
   599  006CFC  75                 	db	117	;'u'
   600  006CFD  6E                 	db	110	;'n'
   601  006CFE  74                 	db	116	;'t'
   602  006CFF  5D                 	db	93	;']'
   603  006D00  29                 	db	41
   604  006D01  2E                 	db	46
   605  006D02  0D                 	db	13
   606  006D03  0A                 	db	10
   607  006D04  00                 	db	0
   608  006D05                     STR_255:
   609  006D05  57                 	db	87	;'W'
   610  006D06  52                 	db	82	;'R'
   611  006D07  45                 	db	69	;'E'
   612  006D08  47                 	db	71	;'G'
   613  006D09  20                 	db	32
   614  006D0A  2D                 	db	45
   615  006D0B  20                 	db	32
   616  006D0C  57                 	db	87	;'W'
   617  006D0D  72                 	db	114	;'r'
   618  006D0E  69                 	db	105	;'i'
   619  006D0F  74                 	db	116	;'t'
   620  006D10  65                 	db	101	;'e'
   621  006D11  20                 	db	32
   622  006D12  72                 	db	114	;'r'
   623  006D13  65                 	db	101	;'e'
   624  006D14  67                 	db	103	;'g'
   625  006D15  69                 	db	105	;'i'
   626  006D16  73                 	db	115	;'s'
   627  006D17  74                 	db	116	;'t'
   628  006D18  65                 	db	101	;'e'
   629  006D19  72                 	db	114	;'r'
   630  006D1A  20                 	db	32
   631  006D1B  6F                 	db	111	;'o'
   632  006D1C  66                 	db	102	;'f'
   633  006D1D  20                 	db	32
   634  006D1E  6E                 	db	110	;'n'
   635  006D1F  6F                 	db	111	;'o'
   636  006D20  64                 	db	100	;'d'
   637  006D21  65                 	db	101	;'e'
   638  006D22  20                 	db	32
   639  006D23  28                 	db	40
   640  006D24  46                 	db	70	;'F'
   641  006D25  6F                 	db	111	;'o'
   642  006D26  72                 	db	114	;'r'
   643  006D27  6D                 	db	109	;'m'
   644  006D28  61                 	db	97	;'a'
   645  006D29  74                 	db	116	;'t'
   646  006D2A  3A                 	db	58	;':'
   647  006D2B  20                 	db	32
   648  006D2C  77                 	db	119	;'w'
   649  006D2D  72                 	db	114	;'r'
   650  006D2E  65                 	db	101	;'e'
   651  006D2F  67                 	db	103	;'g'
   652  006D30  20                 	db	32
   653  006D31  6E                 	db	110	;'n'
   654  006D32  6F                 	db	111	;'o'
   655  006D33  64                 	db	100	;'d'
   656  006D34  65                 	db	101	;'e'
   657  006D35  69                 	db	105	;'i'
   658  006D36  64                 	db	100	;'d'
   659  006D37  20                 	db	32
   660  006D38  5B                 	db	91	;'['
   661  006D39  70                 	db	112	;'p'
   662  006D3A  61                 	db	97	;'a'
   663  006D3B  67                 	db	103	;'g'
   664  006D3C  65                 	db	101	;'e'
   665  006D3D  3A                 	db	58	;':'
   666  006D3E  5D                 	db	93	;']'
   667  006D3F  72                 	db	114	;'r'
   668  006D40  65                 	db	101	;'e'
   669  006D41  67                 	db	103	;'g'
   670  006D42  20                 	db	32
   671  006D43  63                 	db	99	;'c'
   672  006D44  6F                 	db	111	;'o'
   673  006D45  6E                 	db	110	;'n'
   674  006D46  74                 	db	116	;'t'
   675  006D47  65                 	db	101	;'e'
   676  006D48  6E                 	db	110	;'n'
   677  006D49  74                 	db	116	;'t'
   678  006D4A  29                 	db	41
   679  006D4B  2E                 	db	46
   680  006D4C  0D                 	db	13
   681  006D4D  0A                 	db	10
   682  006D4E  00                 	db	0
   683  006D4F                     STR_260:
   684  006D4F  20                 	db	32
   685  006D50  20                 	db	32
   686  006D51  20                 	db	32
   687  006D52  20                 	db	32
   688  006D53  20                 	db	32
   689  006D54  20                 	db	32
   690  006D55  20                 	db	32
   691  006D56  46                 	db	70	;'F'
   692  006D57  6F                 	db	111	;'o'
   693  006D58  72                 	db	114	;'r'
   694  006D59  6D                 	db	109	;'m'
   695  006D5A  61                 	db	97	;'a'
   696  006D5B  74                 	db	116	;'t'
   697  006D5C  3A                 	db	58	;':'
   698  006D5D  20                 	db	32
   699  006D5E  6D                 	db	109	;'m'
   700  006D5F  61                 	db	97	;'a'
   701  006D60  73                 	db	115	;'s'
   702  006D61  6B                 	db	107	;'k'
   703  006D62  20                 	db	32
   704  006D63  6D                 	db	109	;'m'
   705  006D64  61                 	db	97	;'a'
   706  006D65  73                 	db	115	;'s'
   707  006D66  6B                 	db	107	;'k'
   708  006D67  6E                 	db	110	;'n'
   709  006D68  6F                 	db	111	;'o'
   710  006D69  2C                 	db	44
   711  006D6A  70                 	db	112	;'p'
   712  006D6B  72                 	db	114	;'r'
   713  006D6C  69                 	db	105	;'i'
   714  006D6D  6F                 	db	111	;'o'
   715  006D6E  2C                 	db	44
   716  006D6F  63                 	db	99	;'c'
   717  006D70  6C                 	db	108	;'l'
   718  006D71  61                 	db	97	;'a'
   719  006D72  73                 	db	115	;'s'
   720  006D73  73                 	db	115	;'s'
   721  006D74  2C                 	db	44
   722  006D75  74                 	db	116	;'t'
   723  006D76  79                 	db	121	;'y'
   724  006D77  70                 	db	112	;'p'
   725  006D78  65                 	db	101	;'e'
   726  006D79  2C                 	db	44
   727  006D7A  6E                 	db	110	;'n'
   728  006D7B  6F                 	db	111	;'o'
   729  006D7C  64                 	db	100	;'d'
   730  006D7D  65                 	db	101	;'e'
   731  006D7E  69                 	db	105	;'i'
   732  006D7F  64                 	db	100	;'d'
   733  006D80  20                 	db	32
   734  006D81  28                 	db	40
   735  006D82  6D                 	db	109	;'m'
   736  006D83  61                 	db	97	;'a'
   737  006D84  73                 	db	115	;'s'
   738  006D85  6B                 	db	107	;'k'
   739  006D86  6E                 	db	110	;'n'
   740  006D87  6F                 	db	111	;'o'
   741  006D88  20                 	db	32
   742  006D89  3D                 	db	61	;'='
   743  006D8A  20                 	db	32
   744  006D8B  30                 	db	48	;'0'
   745  006D8C  20                 	db	32
   746  006D8D  6F                 	db	111	;'o'
   747  006D8E  72                 	db	114	;'r'
   748  006D8F  20                 	db	32
   749  006D90  31                 	db	49	;'1'
   750  006D91  29                 	db	41
   751  006D92  2E                 	db	46
   752  006D93  0D                 	db	13
   753  006D94  0A                 	db	10
   754  006D95  00                 	db	0
   755  006D96                     STR_270:
   756  006D96  2D                 	db	45
   757  006D97  2D                 	db	45
   758  006D98  2D                 	db	45
   759  006D99  2D                 	db	45
   760  006D9A  2D                 	db	45
   761  006D9B  2D                 	db	45
   762  006D9C  2D                 	db	45
   763  006D9D  2D                 	db	45
   764  006D9E  2D                 	db	45
   765  006D9F  2D                 	db	45
   766  006DA0  2D                 	db	45
   767  006DA1  2D                 	db	45
   768  006DA2  2D                 	db	45
   769  006DA3  2D                 	db	45
   770  006DA4  2D                 	db	45
   771  006DA5  2D                 	db	45
   772  006DA6  2D                 	db	45
   773  006DA7  2D                 	db	45
   774  006DA8  2D                 	db	45
   775  006DA9  2D                 	db	45
   776  006DAA  2D                 	db	45
   777  006DAB  2D                 	db	45
   778  006DAC  2D                 	db	45
   779  006DAD  2D                 	db	45
   780  006DAE  2D                 	db	45
   781  006DAF  2D                 	db	45
   782  006DB0  2D                 	db	45
   783  006DB1  2D                 	db	45
   784  006DB2  2D                 	db	45
   785  006DB3  2D                 	db	45
   786  006DB4  2D                 	db	45
   787  006DB5  2D                 	db	45
   788  006DB6  2D                 	db	45
   789  006DB7  2D                 	db	45
   790  006DB8  2D                 	db	45
   791  006DB9  2D                 	db	45
   792  006DBA  2D                 	db	45
   793  006DBB  2D                 	db	45
   794  006DBC  2D                 	db	45
   795  006DBD  2D                 	db	45
   796  006DBE  2D                 	db	45
   797  006DBF  2D                 	db	45
   798  006DC0  2D                 	db	45
   799  006DC1  2D                 	db	45
   800  006DC2  2D                 	db	45
   801  006DC3  2D                 	db	45
   802  006DC4  2D                 	db	45
   803  006DC5  2D                 	db	45
   804  006DC6  2D                 	db	45
   805  006DC7  2D                 	db	45
   806  006DC8  2D                 	db	45
   807  006DC9  2D                 	db	45
   808  006DCA  2D                 	db	45
   809  006DCB  2D                 	db	45
   810  006DCC  2D                 	db	45
   811  006DCD  2D                 	db	45
   812  006DCE  2D                 	db	45
   813  006DCF  2D                 	db	45
   814  006DD0  2D                 	db	45
   815  006DD1  2D                 	db	45
   816  006DD2  2D                 	db	45
   817  006DD3  2D                 	db	45
   818  006DD4  2D                 	db	45
   819  006DD5  2D                 	db	45
   820  006DD6  0D                 	db	13
   821  006DD7  0A                 	db	10
   822  006DD8  00                 	db	0
   823  006DD9                     STR_264:
   824  006DD9  20                 	db	32
   825  006DDA  20                 	db	32
   826  006DDB  20                 	db	32
   827  006DDC  20                 	db	32
   828  006DDD  52                 	db	82	;'R'
   829  006DDE  57                 	db	87	;'W'
   830  006DDF  54                 	db	84	;'T'
   831  006DE0  49                 	db	73	;'I'
   832  006DE1  4D                 	db	77	;'M'
   833  006DE2  45                 	db	69	;'E'
   834  006DE3  4F                 	db	79	;'O'
   835  006DE4  55                 	db	85	;'U'
   836  006DE5  54                 	db	84	;'T'
   837  006DE6  20                 	db	32
   838  006DE7  2D                 	db	45
   839  006DE8  20                 	db	32
   840  006DE9  53                 	db	83	;'S'
   841  006DEA  65                 	db	101	;'e'
   842  006DEB  74                 	db	116	;'t'
   843  006DEC  20                 	db	32
   844  006DED  72                 	db	114	;'r'
   845  006DEE  65                 	db	101	;'e'
   846  006DEF  67                 	db	103	;'g'
   847  006DF0  69                 	db	105	;'i'
   848  006DF1  73                 	db	115	;'s'
   849  006DF2  74                 	db	116	;'t'
   850  006DF3  65                 	db	101	;'e'
   851  006DF4  72                 	db	114	;'r'
   852  006DF5  20                 	db	32
   853  006DF6  72                 	db	114	;'r'
   854  006DF7  65                 	db	101	;'e'
   855  006DF8  61                 	db	97	;'a'
   856  006DF9  64                 	db	100	;'d'
   857  006DFA  2F                 	db	47
   858  006DFB  77                 	db	119	;'w'
   859  006DFC  72                 	db	114	;'r'
   860  006DFD  69                 	db	105	;'i'
   861  006DFE  74                 	db	116	;'t'
   862  006DFF  65                 	db	101	;'e'
   863  006E00  20                 	db	32
   864  006E01  74                 	db	116	;'t'
   865  006E02  69                 	db	105	;'i'
   866  006E03  6D                 	db	109	;'m'
   867  006E04  65                 	db	101	;'e'
   868  006E05  6F                 	db	111	;'o'
   869  006E06  75                 	db	117	;'u'
   870  006E07  74                 	db	116	;'t'
   871  006E08  2E                 	db	46
   872  006E09  20                 	db	32
   873  006E0A  44                 	db	68	;'D'
   874  006E0B  65                 	db	101	;'e'
   875  006E0C  66                 	db	102	;'f'
   876  006E0D  61                 	db	97	;'a'
   877  006E0E  75                 	db	117	;'u'
   878  006E0F  6C                 	db	108	;'l'
   879  006E10  74                 	db	116	;'t'
   880  006E11  3D                 	db	61	;'='
   881  006E12  32                 	db	50	;'2'
   882  006E13  30                 	db	48	;'0'
   883  006E14  20                 	db	32
   884  006E15  6D                 	db	109	;'m'
   885  006E16  73                 	db	115	;'s'
   886  006E17  20                 	db	32
   887  006E18  2E                 	db	46
   888  006E19  0D                 	db	13
   889  006E1A  0A                 	db	10
   890  006E1B  00                 	db	0
   891  006E1C                     STR_107:
   892  006E1C  2D                 	db	45
   893  006E1D  45                 	db	69	;'E'
   894  006E1E  52                 	db	82	;'R'
   895  006E1F  52                 	db	82	;'R'
   896  006E20  4F                 	db	79	;'O'
   897  006E21  52                 	db	82	;'R'
   898  006E22  20                 	db	32
   899  006E23  2D                 	db	45
   900  006E24  20                 	db	32
   901  006E25  46                 	db	70	;'F'
   902  006E26  69                 	db	105	;'i'
   903  006E27  6C                 	db	108	;'l'
   904  006E28  74                 	db	116	;'t'
   905  006E29  65                 	db	101	;'e'
   906  006E2A  72                 	db	114	;'r'
   907  006E2B  20                 	db	32
   908  006E2C  6E                 	db	110	;'n'
   909  006E2D  75                 	db	117	;'u'
   910  006E2E  6D                 	db	109	;'m'
   911  006E2F  62                 	db	98	;'b'
   912  006E30  65                 	db	101	;'e'
   913  006E31  72                 	db	114	;'r'
   914  006E32  20                 	db	32
   915  006E33  63                 	db	99	;'c'
   916  006E34  61                 	db	97	;'a'
   917  006E35  6E                 	db	110	;'n'
   918  006E36  20                 	db	32
   919  006E37  6F                 	db	111	;'o'
   920  006E38  6E                 	db	110	;'n'
   921  006E39  6C                 	db	108	;'l'
   922  006E3A  79                 	db	121	;'y'
   923  006E3B  20                 	db	32
   924  006E3C  62                 	db	98	;'b'
   925  006E3D  65                 	db	101	;'e'
   926  006E3E  20                 	db	32
   927  006E3F  73                 	db	115	;'s'
   928  006E40  65                 	db	101	;'e'
   929  006E41  74                 	db	116	;'t'
   930  006E42  20                 	db	32
   931  006E43  74                 	db	116	;'t'
   932  006E44  6F                 	db	111	;'o'
   933  006E45  20                 	db	32
   934  006E46  61                 	db	97	;'a'
   935  006E47  20                 	db	32
   936  006E48  76                 	db	118	;'v'
   937  006E49  61                 	db	97	;'a'
   938  006E4A  6C                 	db	108	;'l'
   939  006E4B  75                 	db	117	;'u'
   940  006E4C  65                 	db	101	;'e'
   941  006E4D  20                 	db	32
   942  006E4E  62                 	db	98	;'b'
   943  006E4F  65                 	db	101	;'e'
   944  006E50  74                 	db	116	;'t'
   945  006E51  77                 	db	119	;'w'
   946  006E52  65                 	db	101	;'e'
   947  006E53  65                 	db	101	;'e'
   948  006E54  6E                 	db	110	;'n'
   949  006E55  20                 	db	32
   950  006E56  30                 	db	48	;'0'
   951  006E57  2D                 	db	45
   952  006E58  31                 	db	49	;'1'
   953  006E59  35                 	db	53	;'5'
   954  006E5A  2E                 	db	46
   955  006E5B  0D                 	db	13
   956  006E5C  0A                 	db	10
   957  006E5D  00                 	db	0
   958  006E5E                     STR_267:
   959  006E5E  20                 	db	32
   960  006E5F  20                 	db	32
   961  006E60  20                 	db	32
   962  006E61  20                 	db	32
   963  006E62  4D                 	db	77	;'M'
   964  006E63  4F                 	db	79	;'O'
   965  006E64  44                 	db	68	;'D'
   966  006E65  45                 	db	69	;'E'
   967  006E66  20                 	db	32
   968  006E67  2D                 	db	45
   969  006E68  20                 	db	32
   970  006E69  53                 	db	83	;'S'
   971  006E6A  65                 	db	101	;'e'
   972  006E6B  74                 	db	116	;'t'
   973  006E6C  20                 	db	32
   974  006E6D  61                 	db	97	;'a'
   975  006E6E  64                 	db	100	;'d'
   976  006E6F  61                 	db	97	;'a'
   977  006E70  70                 	db	112	;'p'
   978  006E71  74                 	db	116	;'t'
   979  006E72  65                 	db	101	;'e'
   980  006E73  72                 	db	114	;'r'
   981  006E74  20                 	db	32
   982  006E75  6D                 	db	109	;'m'
   983  006E76  6F                 	db	111	;'o'
   984  006E77  64                 	db	100	;'d'
   985  006E78  65                 	db	101	;'e'
   986  006E79  20                 	db	32
   987  006E7A  74                 	db	116	;'t'
   988  006E7B  68                 	db	104	;'h'
   989  006E7C  61                 	db	97	;'a'
   990  006E7D  74                 	db	116	;'t'
   991  006E7E  20                 	db	32
   992  006E7F  73                 	db	115	;'s'
   993  006E80  68                 	db	104	;'h'
   994  006E81  6F                 	db	111	;'o'
   995  006E82  75                 	db	117	;'u'
   996  006E83  6C                 	db	108	;'l'
   997  006E84  64                 	db	100	;'d'
   998  006E85  20                 	db	32
   999  006E86  62                 	db	98	;'b'
  1000  006E87  65                 	db	101	;'e'
  1001  006E88  20                 	db	32
  1002  006E89  75                 	db	117	;'u'
  1003  006E8A  73                 	db	115	;'s'
  1004  006E8B  65                 	db	101	;'e'
  1005  006E8C  64                 	db	100	;'d'
  1006  006E8D  20                 	db	32
  1007  006E8E  6F                 	db	111	;'o'
  1008  006E8F  6E                 	db	110	;'n'
  1009  006E90  20                 	db	32
  1010  006E91  73                 	db	115	;'s'
  1011  006E92  74                 	db	116	;'t'
  1012  006E93  61                 	db	97	;'a'
  1013  006E94  72                 	db	114	;'r'
  1014  006E95  74                 	db	116	;'t'
  1015  006E96  75                 	db	117	;'u'
  1016  006E97  70                 	db	112	;'p'
  1017  006E98  2E                 	db	46
  1018  006E99  0D                 	db	13
  1019  006E9A  0A                 	db	10
  1020  006E9B  00                 	db	0
  1021  006E9C                     STR_227:
  1022  006E9C  54                 	db	84	;'T'
  1023  006E9D  72                 	db	114	;'r'
  1024  006E9E  61                 	db	97	;'a'
  1025  006E9F  6E                 	db	110	;'n'
  1026  006EA0  73                 	db	115	;'s'
  1027  006EA1  6D                 	db	109	;'m'
  1028  006EA2  69                 	db	105	;'i'
  1029  006EA3  74                 	db	116	;'t'
  1030  006EA4  74                 	db	116	;'t'
  1031  006EA5  65                 	db	101	;'e'
  1032  006EA6  72                 	db	114	;'r'
  1033  006EA7  20                 	db	32
  1034  006EA8  69                 	db	105	;'i'
  1035  006EA9  6E                 	db	110	;'n'
  1036  006EAA  20                 	db	32
  1037  006EAB  45                 	db	69	;'E'
  1038  006EAC  72                 	db	114	;'r'
  1039  006EAD  72                 	db	114	;'r'
  1040  006EAE  6F                 	db	111	;'o'
  1041  006EAF  72                 	db	114	;'r'
  1042  006EB0  20                 	db	32
  1043  006EB1  53                 	db	83	;'S'
  1044  006EB2  74                 	db	116	;'t'
  1045  006EB3  61                 	db	97	;'a'
  1046  006EB4  74                 	db	116	;'t'
  1047  006EB5  65                 	db	101	;'e'
  1048  006EB6  20                 	db	32
  1049  006EB7  57                 	db	87	;'W'
  1050  006EB8  61                 	db	97	;'a'
  1051  006EB9  72                 	db	114	;'r'
  1052  006EBA  6E                 	db	110	;'n'
  1053  006EBB  69                 	db	105	;'i'
  1054  006EBC  6E                 	db	110	;'n'
  1055  006EBD  67                 	db	103	;'g'
  1056  006EBE  20                 	db	32
  1057  006EBF  28                 	db	40
  1058  006EC0  31                 	db	49	;'1'
  1059  006EC1  32                 	db	50	;'2'
  1060  006EC2  38                 	db	56	;'8'
  1061  006EC3  20                 	db	32
  1062  006EC4  3E                 	db	62	;'>'
  1063  006EC5  20                 	db	32
  1064  006EC6  54                 	db	84	;'T'
  1065  006EC7  45                 	db	69	;'E'
  1066  006EC8  52                 	db	82	;'R'
  1067  006EC9  52                 	db	82	;'R'
  1068  006ECA  43                 	db	67	;'C'
  1069  006ECB  4E                 	db	78	;'N'
  1070  006ECC  54                 	db	84	;'T'
  1071  006ECD  20                 	db	32
  1072  006ECE  3F                 	db	63	;'?'
  1073  006ECF  20                 	db	32
  1074  006ED0  39                 	db	57	;'9'
  1075  006ED1  36                 	db	54	;'6'
  1076  006ED2  29                 	db	41
  1077  006ED3  0D                 	db	13
  1078  006ED4  0A                 	db	10
  1079  006ED5  00                 	db	0
  1080  006ED6                     STR_2:
  1081  006ED6  43                 	db	67	;'C'
  1082  006ED7  6F                 	db	111	;'o'
  1083  006ED8  70                 	db	112	;'p'
  1084  006ED9  79                 	db	121	;'y'
  1085  006EDA  72                 	db	114	;'r'
  1086  006EDB  69                 	db	105	;'i'
  1087  006EDC  67                 	db	103	;'g'
  1088  006EDD  68                 	db	104	;'h'
  1089  006EDE  74                 	db	116	;'t'
  1090  006EDF  20                 	db	32
  1091  006EE0  28                 	db	40
  1092  006EE1  43                 	db	67	;'C'
  1093  006EE2  29                 	db	41
  1094  006EE3  20                 	db	32
  1095  006EE4  32                 	db	50	;'2'
  1096  006EE5  30                 	db	48	;'0'
  1097  006EE6  31                 	db	49	;'1'
  1098  006EE7  34                 	db	52	;'4'
  1099  006EE8  2D                 	db	45
  1100  006EE9  32                 	db	50	;'2'
  1101  006EEA  30                 	db	48	;'0'
  1102  006EEB  31                 	db	49	;'1'
  1103  006EEC  35                 	db	53	;'5'
  1104  006EED  20                 	db	32
  1105  006EEE  50                 	db	80	;'P'
  1106  006EEF  61                 	db	97	;'a'
  1107  006EF0  72                 	db	114	;'r'
  1108  006EF1  61                 	db	97	;'a'
  1109  006EF2  64                 	db	100	;'d'
  1110  006EF3  69                 	db	105	;'i'
  1111  006EF4  73                 	db	115	;'s'
  1112  006EF5  65                 	db	101	;'e'
  1113  006EF6  20                 	db	32
  1114  006EF7  6F                 	db	111	;'o'
  1115  006EF8  66                 	db	102	;'f'
  1116  006EF9  20                 	db	32
  1117  006EFA  74                 	db	116	;'t'
  1118  006EFB  68                 	db	104	;'h'
  1119  006EFC  65                 	db	101	;'e'
  1120  006EFD  20                 	db	32
  1121  006EFE  46                 	db	70	;'F'
  1122  006EFF  72                 	db	114	;'r'
  1123  006F00  6F                 	db	111	;'o'
  1124  006F01  67                 	db	103	;'g'
  1125  006F02  20                 	db	32
  1126  006F03  41                 	db	65	;'A'
  1127  006F04  42                 	db	66	;'B'
  1128  006F05  2C                 	db	44
  1129  006F06  20                 	db	32
  1130  006F07  53                 	db	83	;'S'
  1131  006F08  77                 	db	119	;'w'
  1132  006F09  65                 	db	101	;'e'
  1133  006F0A  64                 	db	100	;'d'
  1134  006F0B  65                 	db	101	;'e'
  1135  006F0C  6E                 	db	110	;'n'
  1136  006F0D  0D                 	db	13
  1137  006F0E  0A                 	db	10
  1138  006F0F  00                 	db	0
  1139  006F10                     STR_229:
  1140  006F10  54                 	db	84	;'T'
  1141  006F11  72                 	db	114	;'r'
  1142  006F12  61                 	db	97	;'a'
  1143  006F13  6E                 	db	110	;'n'
  1144  006F14  73                 	db	115	;'s'
  1145  006F15  6D                 	db	109	;'m'
  1146  006F16  69                 	db	105	;'i'
  1147  006F17  74                 	db	116	;'t'
  1148  006F18  74                 	db	116	;'t'
  1149  006F19  65                 	db	101	;'e'
  1150  006F1A  72                 	db	114	;'r'
  1151  006F1B  20                 	db	32
  1152  006F1C  69                 	db	105	;'i'
  1153  006F1D  6E                 	db	110	;'n'
  1154  006F1E  20                 	db	32
  1155  006F1F  45                 	db	69	;'E'
  1156  006F20  72                 	db	114	;'r'
  1157  006F21  72                 	db	114	;'r'
  1158  006F22  6F                 	db	111	;'o'
  1159  006F23  72                 	db	114	;'r'
  1160  006F24  20                 	db	32
  1161  006F25  53                 	db	83	;'S'
  1162  006F26  74                 	db	116	;'t'
  1163  006F27  61                 	db	97	;'a'
  1164  006F28  74                 	db	116	;'t'
  1165  006F29  65                 	db	101	;'e'
  1166  006F2A  20                 	db	32
  1167  006F2B  42                 	db	66	;'B'
  1168  006F2C  75                 	db	117	;'u'
  1169  006F2D  73                 	db	115	;'s'
  1170  006F2E  20                 	db	32
  1171  006F2F  50                 	db	80	;'P'
  1172  006F30  61                 	db	97	;'a'
  1173  006F31  73                 	db	115	;'s'
  1174  006F32  73                 	db	115	;'s'
  1175  006F33  69                 	db	105	;'i'
  1176  006F34  76                 	db	118	;'v'
  1177  006F35  65                 	db	101	;'e'
  1178  006F36  20                 	db	32
  1179  006F37  28                 	db	40
  1180  006F38  54                 	db	84	;'T'
  1181  006F39  45                 	db	69	;'E'
  1182  006F3A  52                 	db	82	;'R'
  1183  006F3B  52                 	db	82	;'R'
  1184  006F3C  43                 	db	67	;'C'
  1185  006F3D  4E                 	db	78	;'N'
  1186  006F3E  54                 	db	84	;'T'
  1187  006F3F  20                 	db	32
  1188  006F40  3F                 	db	63	;'?'
  1189  006F41  20                 	db	32
  1190  006F42  31                 	db	49	;'1'
  1191  006F43  32                 	db	50	;'2'
  1192  006F44  38                 	db	56	;'8'
  1193  006F45  29                 	db	41
  1194  006F46  0D                 	db	13
  1195  006F47  0A                 	db	10
  1196  006F48  00                 	db	0
  1197  006F49                     STR_248:
  1198  006F49  20                 	db	32
  1199  006F4A  20                 	db	32
  1200  006F4B  20                 	db	32
  1201  006F4C  20                 	db	32
  1202  006F4D  20                 	db	32
  1203  006F4E  46                 	db	70	;'F'
  1204  006F4F  6F                 	db	111	;'o'
  1205  006F50  72                 	db	114	;'r'
  1206  006F51  6D                 	db	109	;'m'
  1207  006F52  61                 	db	97	;'a'
  1208  006F53  74                 	db	116	;'t'
  1209  006F54  3A                 	db	58	;':'
  1210  006F55  20                 	db	32
  1211  006F56  70                 	db	112	;'p'
  1212  006F57  72                 	db	114	;'r'
  1213  006F58  69                 	db	105	;'i'
  1214  006F59  6F                 	db	111	;'o'
  1215  006F5A  72                 	db	114	;'r'
  1216  006F5B  69                 	db	105	;'i'
  1217  006F5C  74                 	db	116	;'t'
  1218  006F5D  79                 	db	121	;'y'
  1219  006F5E  2C                 	db	44
  1220  006F5F  63                 	db	99	;'c'
  1221  006F60  6C                 	db	108	;'l'
  1222  006F61  61                 	db	97	;'a'
  1223  006F62  73                 	db	115	;'s'
  1224  006F63  73                 	db	115	;'s'
  1225  006F64  2C                 	db	44
  1226  006F65  74                 	db	116	;'t'
  1227  006F66  79                 	db	121	;'y'
  1228  006F67  70                 	db	112	;'p'
  1229  006F68  65                 	db	101	;'e'
  1230  006F69  2C                 	db	44
  1231  006F6A  6E                 	db	110	;'n'
  1232  006F6B  6F                 	db	111	;'o'
  1233  006F6C  64                 	db	100	;'d'
  1234  006F6D  65                 	db	101	;'e'
  1235  006F6E  69                 	db	105	;'i'
  1236  006F6F  64                 	db	100	;'d'
  1237  006F70  2C                 	db	44
  1238  006F71  63                 	db	99	;'c'
  1239  006F72  6F                 	db	111	;'o'
  1240  006F73  75                 	db	117	;'u'
  1241  006F74  6E                 	db	110	;'n'
  1242  006F75  74                 	db	116	;'t'
  1243  006F76  2C                 	db	44
  1244  006F77  64                 	db	100	;'d'
  1245  006F78  61                 	db	97	;'a'
  1246  006F79  74                 	db	116	;'t'
  1247  006F7A  61                 	db	97	;'a'
  1248  006F7B  2C                 	db	44
  1249  006F7C  2C                 	db	44
  1250  006F7D  2C                 	db	44
  1251  006F7E  0D                 	db	13
  1252  006F7F  0A                 	db	10
  1253  006F80  00                 	db	0
  1254  006F81                     STR_234:
  1255  006F81  52                 	db	82	;'R'
  1256  006F82  65                 	db	101	;'e'
  1257  006F83  63                 	db	99	;'c'
  1258  006F84  65                 	db	101	;'e'
  1259  006F85  69                 	db	105	;'i'
  1260  006F86  76                 	db	118	;'v'
  1261  006F87  65                 	db	101	;'e'
  1262  006F88  72                 	db	114	;'r'
  1263  006F89  20                 	db	32
  1264  006F8A  69                 	db	105	;'i'
  1265  006F8B  6E                 	db	110	;'n'
  1266  006F8C  20                 	db	32
  1267  006F8D  45                 	db	69	;'E'
  1268  006F8E  72                 	db	114	;'r'
  1269  006F8F  72                 	db	114	;'r'
  1270  006F90  6F                 	db	111	;'o'
  1271  006F91  72                 	db	114	;'r'
  1272  006F92  20                 	db	32
  1273  006F93  53                 	db	83	;'S'
  1274  006F94  74                 	db	116	;'t'
  1275  006F95  61                 	db	97	;'a'
  1276  006F96  74                 	db	116	;'t'
  1277  006F97  65                 	db	101	;'e'
  1278  006F98  20                 	db	32
  1279  006F99  57                 	db	87	;'W'
  1280  006F9A  61                 	db	97	;'a'
  1281  006F9B  72                 	db	114	;'r'
  1282  006F9C  6E                 	db	110	;'n'
  1283  006F9D  69                 	db	105	;'i'
  1284  006F9E  6E                 	db	110	;'n'
  1285  006F9F  67                 	db	103	;'g'
  1286  006FA0  20                 	db	32
  1287  006FA1  28                 	db	40
  1288  006FA2  31                 	db	49	;'1'
  1289  006FA3  32                 	db	50	;'2'
  1290  006FA4  38                 	db	56	;'8'
  1291  006FA5  20                 	db	32
  1292  006FA6  3E                 	db	62	;'>'
  1293  006FA7  20                 	db	32
  1294  006FA8  52                 	db	82	;'R'
  1295  006FA9  45                 	db	69	;'E'
  1296  006FAA  52                 	db	82	;'R'
  1297  006FAB  52                 	db	82	;'R'
  1298  006FAC  43                 	db	67	;'C'
  1299  006FAD  4E                 	db	78	;'N'
  1300  006FAE  54                 	db	84	;'T'
  1301  006FAF  20                 	db	32
  1302  006FB0  3F                 	db	63	;'?'
  1303  006FB1  20                 	db	32
  1304  006FB2  39                 	db	57	;'9'
  1305  006FB3  36                 	db	54	;'6'
  1306  006FB4  29                 	db	41
  1307  006FB5  0D                 	db	13
  1308  006FB6  0A                 	db	10
  1309  006FB7  00                 	db	0
  1310  006FB8                     STR_266:
  1311  006FB8  20                 	db	32
  1312  006FB9  20                 	db	32
  1313  006FBA  20                 	db	32
  1314  006FBB  20                 	db	32
  1315  006FBC  53                 	db	83	;'S'
  1316  006FBD  54                 	db	84	;'T'
  1317  006FBE  41                 	db	65	;'A'
  1318  006FBF  52                 	db	82	;'R'
  1319  006FC0  54                 	db	84	;'T'
  1320  006FC1  49                 	db	73	;'I'
  1321  006FC2  46                 	db	70	;'F'
  1322  006FC3  20                 	db	32
  1323  006FC4  2D                 	db	45
  1324  006FC5  20                 	db	32
  1325  006FC6  53                 	db	83	;'S'
  1326  006FC7  65                 	db	101	;'e'
  1327  006FC8  74                 	db	116	;'t'
  1328  006FC9  20                 	db	32
  1329  006FCA  69                 	db	105	;'i'
  1330  006FCB  6E                 	db	110	;'n'
  1331  006FCC  74                 	db	116	;'t'
  1332  006FCD  65                 	db	101	;'e'
  1333  006FCE  72                 	db	114	;'r'
  1334  006FCF  66                 	db	102	;'f'
  1335  006FD0  61                 	db	97	;'a'
  1336  006FD1  63                 	db	99	;'c'
  1337  006FD2  65                 	db	101	;'e'
  1338  006FD3  20                 	db	32
  1339  006FD4  73                 	db	115	;'s'
  1340  006FD5  74                 	db	116	;'t'
  1341  006FD6  61                 	db	97	;'a'
  1342  006FD7  74                 	db	116	;'t'
  1343  006FD8  65                 	db	101	;'e'
  1344  006FD9  20                 	db	32
  1345  006FDA  74                 	db	116	;'t'
  1346  006FDB  6F                 	db	111	;'o'
  1347  006FDC  20                 	db	32
  1348  006FDD  75                 	db	117	;'u'
  1349  006FDE  73                 	db	115	;'s'
  1350  006FDF  65                 	db	101	;'e'
  1351  006FE0  20                 	db	32
  1352  006FE1  6F                 	db	111	;'o'
  1353  006FE2  6E                 	db	110	;'n'
  1354  006FE3  20                 	db	32
  1355  006FE4  73                 	db	115	;'s'
  1356  006FE5  74                 	db	116	;'t'
  1357  006FE6  61                 	db	97	;'a'
  1358  006FE7  72                 	db	114	;'r'
  1359  006FE8  74                 	db	116	;'t'
  1360  006FE9  75                 	db	117	;'u'
  1361  006FEA  70                 	db	112	;'p'
  1362  006FEB  2E                 	db	46
  1363  006FEC  0D                 	db	13
  1364  006FED  0A                 	db	10
  1365  006FEE  00                 	db	0
  1366  006FEF                     STR_4:
  1367  006FEF  50                 	db	80	;'P'
  1368  006FF0  72                 	db	114	;'r'
  1369  006FF1  65                 	db	101	;'e'
  1370  006FF2  73                 	db	115	;'s'
  1371  006FF3  73                 	db	115	;'s'
  1372  006FF4  20                 	db	32
  1373  006FF5  27                 	db	39
  1374  006FF6  76                 	db	118	;'v'
  1375  006FF7  27                 	db	39
  1376  006FF8  20                 	db	32
  1377  006FF9  77                 	db	119	;'w'
  1378  006FFA  69                 	db	105	;'i'
  1379  006FFB  74                 	db	116	;'t'
  1380  006FFC  68                 	db	104	;'h'
  1381  006FFD  69                 	db	105	;'i'
  1382  006FFE  6E                 	db	110	;'n'
  1383  006FFF  20                 	db	32
  1384  007000  74                 	db	116	;'t'
  1385  007001  68                 	db	104	;'h'
  1386  007002  72                 	db	114	;'r'
  1387  007003  65                 	db	101	;'e'
  1388  007004  65                 	db	101	;'e'
  1389  007005  20                 	db	32
  1390  007006  73                 	db	115	;'s'
  1391  007007  65                 	db	101	;'e'
  1392  007008  63                 	db	99	;'c'
  1393  007009  6F                 	db	111	;'o'
  1394  00700A  6E                 	db	110	;'n'
  1395  00700B  64                 	db	100	;'d'
  1396  00700C  73                 	db	115	;'s'
  1397  00700D  20                 	db	32
  1398  00700E  74                 	db	116	;'t'
  1399  00700F  6F                 	db	111	;'o'
  1400  007010  20                 	db	32
  1401  007011  65                 	db	101	;'e'
  1402  007012  6E                 	db	110	;'n'
  1403  007013  74                 	db	116	;'t'
  1404  007014  65                 	db	101	;'e'
  1405  007015  72                 	db	114	;'r'
  1406  007016  20                 	db	32
  1407  007017  76                 	db	118	;'v'
  1408  007018  65                 	db	101	;'e'
  1409  007019  72                 	db	114	;'r'
  1410  00701A  62                 	db	98	;'b'
  1411  00701B  6F                 	db	111	;'o'
  1412  00701C  73                 	db	115	;'s'
  1413  00701D  65                 	db	101	;'e'
  1414  00701E  20                 	db	32
  1415  00701F  6D                 	db	109	;'m'
  1416  007020  6F                 	db	111	;'o'
  1417  007021  64                 	db	100	;'d'
  1418  007022  65                 	db	101	;'e'
  1419  007023  0D                 	db	13
  1420  007024  0A                 	db	10
  1421  007025  00                 	db	0
  1422  007026                     STR_235:
  1423  007026  52                 	db	82	;'R'
  1424  007027  65                 	db	101	;'e'
  1425  007028  63                 	db	99	;'c'
  1426  007029  65                 	db	101	;'e'
  1427  00702A  69                 	db	105	;'i'
  1428  00702B  76                 	db	118	;'v'
  1429  00702C  65                 	db	101	;'e'
  1430  00702D  72                 	db	114	;'r'
  1431  00702E  20                 	db	32
  1432  00702F  69                 	db	105	;'i'
  1433  007030  6E                 	db	110	;'n'
  1434  007031  20                 	db	32
  1435  007032  45                 	db	69	;'E'
  1436  007033  72                 	db	114	;'r'
  1437  007034  72                 	db	114	;'r'
  1438  007035  6F                 	db	111	;'o'
  1439  007036  72                 	db	114	;'r'
  1440  007037  20                 	db	32
  1441  007038  53                 	db	83	;'S'
  1442  007039  74                 	db	116	;'t'
  1443  00703A  61                 	db	97	;'a'
  1444  00703B  74                 	db	116	;'t'
  1445  00703C  65                 	db	101	;'e'
  1446  00703D  20                 	db	32
  1447  00703E  42                 	db	66	;'B'
  1448  00703F  75                 	db	117	;'u'
  1449  007040  73                 	db	115	;'s'
  1450  007041  20                 	db	32
  1451  007042  50                 	db	80	;'P'
  1452  007043  61                 	db	97	;'a'
  1453  007044  73                 	db	115	;'s'
  1454  007045  73                 	db	115	;'s'
  1455  007046  69                 	db	105	;'i'
  1456  007047  76                 	db	118	;'v'
  1457  007048  65                 	db	101	;'e'
  1458  007049  20                 	db	32
  1459  00704A  28                 	db	40
  1460  00704B  52                 	db	82	;'R'
  1461  00704C  45                 	db	69	;'E'
  1462  00704D  52                 	db	82	;'R'
  1463  00704E  52                 	db	82	;'R'
  1464  00704F  43                 	db	67	;'C'
  1465  007050  4E                 	db	78	;'N'
  1466  007051  54                 	db	84	;'T'
  1467  007052  20                 	db	32
  1468  007053  3F                 	db	63	;'?'
  1469  007054  20                 	db	32
  1470  007055  31                 	db	49	;'1'
  1471  007056  32                 	db	50	;'2'
  1472  007057  38                 	db	56	;'8'
  1473  007058  29                 	db	41
  1474  007059  0D                 	db	13
  1475  00705A  0A                 	db	10
  1476  00705B  00                 	db	0
  1477  00705C                     STR_80:
  1478  00705C  2D                 	db	45
  1479  00705D  45                 	db	69	;'E'
  1480  00705E  52                 	db	82	;'R'
  1481  00705F  52                 	db	82	;'R'
  1482  007060  4F                 	db	79	;'O'
  1483  007061  52                 	db	82	;'R'
  1484  007062  20                 	db	32
  1485  007063  2D                 	db	45
  1486  007064  20                 	db	32
  1487  007065  4F                 	db	79	;'O'
  1488  007066  6E                 	db	110	;'n'
  1489  007067  65                 	db	101	;'e'
  1490  007068  20                 	db	32
  1491  007069  6F                 	db	111	;'o'
  1492  00706A  72                 	db	114	;'r'
  1493  00706B  20                 	db	32
  1494  00706C  6D                 	db	109	;'m'
  1495  00706D  6F                 	db	111	;'o'
  1496  00706E  72                 	db	114	;'r'
  1497  00706F  65                 	db	101	;'e'
  1498  007070  20                 	db	32
  1499  007071  72                 	db	114	;'r'
  1500  007072  65                 	db	101	;'e'
  1501  007073  67                 	db	103	;'g'
  1502  007074  69                 	db	105	;'i'
  1503  007075  73                 	db	115	;'s'
  1504  007076  74                 	db	116	;'t'
  1505  007077  65                 	db	101	;'e'
  1506  007078  72                 	db	114	;'r'
  1507  007079  28                 	db	40
  1508  00707A  73                 	db	115	;'s'
  1509  00707B  29                 	db	41
  1510  00707C  20                 	db	32
  1511  00707D  63                 	db	99	;'c'
  1512  00707E  6F                 	db	111	;'o'
  1513  00707F  75                 	db	117	;'u'
  1514  007080  6C                 	db	108	;'l'
  1515  007081  64                 	db	100	;'d'
  1516  007082  20                 	db	32
  1517  007083  6E                 	db	110	;'n'
  1518  007084  6F                 	db	111	;'o'
  1519  007085  74                 	db	116	;'t'
  1520  007086  20                 	db	32
  1521  007087  62                 	db	98	;'b'
  1522  007088  65                 	db	101	;'e'
  1523  007089  20                 	db	32
  1524  00708A  72                 	db	114	;'r'
  1525  00708B  65                 	db	101	;'e'
  1526  00708C  61                 	db	97	;'a'
  1527  00708D  64                 	db	100	;'d'
  1528  00708E  2E                 	db	46
  1529  00708F  0D                 	db	13
  1530  007090  0A                 	db	10
  1531  007091  00                 	db	0
  1532  007092                     STR_228:
  1533  007092  54                 	db	84	;'T'
  1534  007093  72                 	db	114	;'r'
  1535  007094  61                 	db	97	;'a'
  1536  007095  6E                 	db	110	;'n'
  1537  007096  73                 	db	115	;'s'
  1538  007097  6D                 	db	109	;'m'
  1539  007098  69                 	db	105	;'i'
  1540  007099  74                 	db	116	;'t'
  1541  00709A  74                 	db	116	;'t'
  1542  00709B  65                 	db	101	;'e'
  1543  00709C  72                 	db	114	;'r'
  1544  00709D  20                 	db	32
  1545  00709E  69                 	db	105	;'i'
  1546  00709F  6E                 	db	110	;'n'
  1547  0070A0  20                 	db	32
  1548  0070A1  45                 	db	69	;'E'
  1549  0070A2  72                 	db	114	;'r'
  1550  0070A3  72                 	db	114	;'r'
  1551  0070A4  6F                 	db	111	;'o'
  1552  0070A5  72                 	db	114	;'r'
  1553  0070A6  20                 	db	32
  1554  0070A7  53                 	db	83	;'S'
  1555  0070A8  74                 	db	116	;'t'
  1556  0070A9  61                 	db	97	;'a'
  1557  0070AA  74                 	db	116	;'t'
  1558  0070AB  65                 	db	101	;'e'
  1559  0070AC  20                 	db	32
  1560  0070AD  42                 	db	66	;'B'
  1561  0070AE  75                 	db	117	;'u'
  1562  0070AF  73                 	db	115	;'s'
  1563  0070B0  20                 	db	32
  1564  0070B1  4F                 	db	79	;'O'
  1565  0070B2  46                 	db	70	;'F'
  1566  0070B3  46                 	db	70	;'F'
  1567  0070B4  20                 	db	32
  1568  0070B5  28                 	db	40
  1569  0070B6  54                 	db	84	;'T'
  1570  0070B7  45                 	db	69	;'E'
  1571  0070B8  52                 	db	82	;'R'
  1572  0070B9  52                 	db	82	;'R'
  1573  0070BA  43                 	db	67	;'C'
  1574  0070BB  4E                 	db	78	;'N'
  1575  0070BC  54                 	db	84	;'T'
  1576  0070BD  20                 	db	32
  1577  0070BE  3F                 	db	63	;'?'
  1578  0070BF  20                 	db	32
  1579  0070C0  32                 	db	50	;'2'
  1580  0070C1  35                 	db	53	;'5'
  1581  0070C2  36                 	db	54	;'6'
  1582  0070C3  29                 	db	41
  1583  0070C4  0D                 	db	13
  1584  0070C5  0A                 	db	10
  1585  0070C6  00                 	db	0
  1586  0070C7                     STR_50:
  1587  0070C7  2D                 	db	45
  1588  0070C8  45                 	db	69	;'E'
  1589  0070C9  52                 	db	82	;'R'
  1590  0070CA  52                 	db	82	;'R'
  1591  0070CB  4F                 	db	79	;'O'
  1592  0070CC  52                 	db	82	;'R'
  1593  0070CD  20                 	db	32
  1594  0070CE  2D                 	db	45
  1595  0070CF  20                 	db	32
  1596  0070D0  43                 	db	67	;'C'
  1597  0070D1  6F                 	db	111	;'o'
  1598  0070D2  6D                 	db	109	;'m'
  1599  0070D3  6D                 	db	109	;'m'
  1600  0070D4  61                 	db	97	;'a'
  1601  0070D5  6E                 	db	110	;'n'
  1602  0070D6  64                 	db	100	;'d'
  1603  0070D7  20                 	db	32
  1604  0070D8  6F                 	db	111	;'o'
  1605  0070D9  6E                 	db	110	;'n'
  1606  0070DA  6C                 	db	108	;'l'
  1607  0070DB  79                 	db	121	;'y'
  1608  0070DC  20                 	db	32
  1609  0070DD  77                 	db	119	;'w'
  1610  0070DE  6F                 	db	111	;'o'
  1611  0070DF  72                 	db	114	;'r'
  1612  0070E0  6B                 	db	107	;'k'
  1613  0070E1  73                 	db	115	;'s'
  1614  0070E2  20                 	db	32
  1615  0070E3  69                 	db	105	;'i'
  1616  0070E4  66                 	db	102	;'f'
  1617  0070E5  20                 	db	32
  1618  0070E6  69                 	db	105	;'i'
  1619  0070E7  6E                 	db	110	;'n'
  1620  0070E8  74                 	db	116	;'t'
  1621  0070E9  65                 	db	101	;'e'
  1622  0070EA  72                 	db	114	;'r'
  1623  0070EB  66                 	db	102	;'f'
  1624  0070EC  61                 	db	97	;'a'
  1625  0070ED  63                 	db	99	;'c'
  1626  0070EE  65                 	db	101	;'e'
  1627  0070EF  20                 	db	32
  1628  0070F0  69                 	db	105	;'i'
  1629  0070F1  73                 	db	115	;'s'
  1630  0070F2  20                 	db	32
  1631  0070F3  6F                 	db	111	;'o'
  1632  0070F4  70                 	db	112	;'p'
  1633  0070F5  65                 	db	101	;'e'
  1634  0070F6  6E                 	db	110	;'n'
  1635  0070F7  2E                 	db	46
  1636  0070F8  0D                 	db	13
  1637  0070F9  0A                 	db	10
  1638  0070FA  00                 	db	0
  1639  0070FB                     STR_236:
  1640  0070FB  54                 	db	84	;'T'
  1641  0070FC  72                 	db	114	;'r'
  1642  0070FD  61                 	db	97	;'a'
  1643  0070FE  6E                 	db	110	;'n'
  1644  0070FF  73                 	db	115	;'s'
  1645  007100  6D                 	db	109	;'m'
  1646  007101  69                 	db	105	;'i'
  1647  007102  74                 	db	116	;'t'
  1648  007103  74                 	db	116	;'t'
  1649  007104  65                 	db	101	;'e'
  1650  007105  72                 	db	114	;'r'
  1651  007106  20                 	db	32
  1652  007107  6F                 	db	111	;'o'
  1653  007108  72                 	db	114	;'r'
  1654  007109  20                 	db	32
  1655  00710A  52                 	db	82	;'R'
  1656  00710B  65                 	db	101	;'e'
  1657  00710C  63                 	db	99	;'c'
  1658  00710D  65                 	db	101	;'e'
  1659  00710E  69                 	db	105	;'i'
  1660  00710F  76                 	db	118	;'v'
  1661  007110  65                 	db	101	;'e'
  1662  007111  72                 	db	114	;'r'
  1663  007112  20                 	db	32
  1664  007113  69                 	db	105	;'i'
  1665  007114  73                 	db	115	;'s'
  1666  007115  20                 	db	32
  1667  007116  69                 	db	105	;'i'
  1668  007117  6E                 	db	110	;'n'
  1669  007118  20                 	db	32
  1670  007119  45                 	db	69	;'E'
  1671  00711A  72                 	db	114	;'r'
  1672  00711B  72                 	db	114	;'r'
  1673  00711C  6F                 	db	111	;'o'
  1674  00711D  72                 	db	114	;'r'
  1675  00711E  20                 	db	32
  1676  00711F  53                 	db	83	;'S'
  1677  007120  74                 	db	116	;'t'
  1678  007121  61                 	db	97	;'a'
  1679  007122  74                 	db	116	;'t'
  1680  007123  65                 	db	101	;'e'
  1681  007124  20                 	db	32
  1682  007125  57                 	db	87	;'W'
  1683  007126  61                 	db	97	;'a'
  1684  007127  72                 	db	114	;'r'
  1685  007128  6E                 	db	110	;'n'
  1686  007129  69                 	db	105	;'i'
  1687  00712A  6E                 	db	110	;'n'
  1688  00712B  67                 	db	103	;'g'
  1689  00712C  0D                 	db	13
  1690  00712D  0A                 	db	10
  1691  00712E  00                 	db	0
  1692  00712F                     STR_242:
  1693  00712F  4C                 	db	76	;'L'
  1694  007130  49                 	db	73	;'I'
  1695  007131  53                 	db	83	;'S'
  1696  007132  54                 	db	84	;'T'
  1697  007133  45                 	db	69	;'E'
  1698  007134  4E                 	db	78	;'N'
  1699  007135  20                 	db	32
  1700  007136  2D                 	db	45
  1701  007137  20                 	db	32
  1702  007138  4F                 	db	79	;'O'
  1703  007139  70                 	db	112	;'p'
  1704  00713A  65                 	db	101	;'e'
  1705  00713B  6E                 	db	110	;'n'
  1706  00713C  20                 	db	32
  1707  00713D  43                 	db	67	;'C'
  1708  00713E  41                 	db	65	;'A'
  1709  00713F  4E                 	db	78	;'N'
  1710  007140  20                 	db	32
  1711  007141  69                 	db	105	;'i'
  1712  007142  6E                 	db	110	;'n'
  1713  007143  74                 	db	116	;'t'
  1714  007144  65                 	db	101	;'e'
  1715  007145  72                 	db	114	;'r'
  1716  007146  66                 	db	102	;'f'
  1717  007147  61                 	db	97	;'a'
  1718  007148  63                 	db	99	;'c'
  1719  007149  65                 	db	101	;'e'
  1720  00714A  20                 	db	32
  1721  00714B  69                 	db	105	;'i'
  1722  00714C  6E                 	db	110	;'n'
  1723  00714D  20                 	db	32
  1724  00714E  6C                 	db	108	;'l'
  1725  00714F  69                 	db	105	;'i'
  1726  007150  73                 	db	115	;'s'
  1727  007151  74                 	db	116	;'t'
  1728  007152  65                 	db	101	;'e'
  1729  007153  6E                 	db	110	;'n'
  1730  007154  20                 	db	32
  1731  007155  6F                 	db	111	;'o'
  1732  007156  6E                 	db	110	;'n'
  1733  007157  6C                 	db	108	;'l'
  1734  007158  79                 	db	121	;'y'
  1735  007159  20                 	db	32
  1736  00715A  6D                 	db	109	;'m'
  1737  00715B  6F                 	db	111	;'o'
  1738  00715C  64                 	db	100	;'d'
  1739  00715D  65                 	db	101	;'e'
  1740  00715E  2E                 	db	46
  1741  00715F  0D                 	db	13
  1742  007160  0A                 	db	10
  1743  007161  00                 	db	0
  1744  007162                     STR_120:
  1745  007162  2D                 	db	45
  1746  007163  45                 	db	69	;'E'
  1747  007164  52                 	db	82	;'R'
  1748  007165  52                 	db	82	;'R'
  1749  007166  4F                 	db	79	;'O'
  1750  007167  52                 	db	82	;'R'
  1751  007168  20                 	db	32
  1752  007169  2D                 	db	45
  1753  00716A  20                 	db	32
  1754  00716B  4D                 	db	77	;'M'
  1755  00716C  61                 	db	97	;'a'
  1756  00716D  73                 	db	115	;'s'
  1757  00716E  6B                 	db	107	;'k'
  1758  00716F  20                 	db	32
  1759  007170  6E                 	db	110	;'n'
  1760  007171  75                 	db	117	;'u'
  1761  007172  6D                 	db	109	;'m'
  1762  007173  62                 	db	98	;'b'
  1763  007174  65                 	db	101	;'e'
  1764  007175  72                 	db	114	;'r'
  1765  007176  20                 	db	32
  1766  007177  63                 	db	99	;'c'
  1767  007178  61                 	db	97	;'a'
  1768  007179  6E                 	db	110	;'n'
  1769  00717A  20                 	db	32
  1770  00717B  6F                 	db	111	;'o'
  1771  00717C  6E                 	db	110	;'n'
  1772  00717D  6C                 	db	108	;'l'
  1773  00717E  79                 	db	121	;'y'
  1774  00717F  20                 	db	32
  1775  007180  62                 	db	98	;'b'
  1776  007181  65                 	db	101	;'e'
  1777  007182  20                 	db	32
  1778  007183  73                 	db	115	;'s'
  1779  007184  65                 	db	101	;'e'
  1780  007185  74                 	db	116	;'t'
  1781  007186  20                 	db	32
  1782  007187  61                 	db	97	;'a'
  1783  007188  73                 	db	115	;'s'
  1784  007189  20                 	db	32
  1785  00718A  30                 	db	48	;'0'
  1786  00718B  20                 	db	32
  1787  00718C  6F                 	db	111	;'o'
  1788  00718D  72                 	db	114	;'r'
  1789  00718E  20                 	db	32
  1790  00718F  31                 	db	49	;'1'
  1791  007190  2E                 	db	46
  1792  007191  0D                 	db	13
  1793  007192  0A                 	db	10
  1794  007193  00                 	db	0
  1795  007194                     STR_243:
  1796  007194  4C                 	db	76	;'L'
  1797  007195  4F                 	db	79	;'O'
  1798  007196  4F                 	db	79	;'O'
  1799  007197  50                 	db	80	;'P'
  1800  007198  42                 	db	66	;'B'
  1801  007199  41                 	db	65	;'A'
  1802  00719A  43                 	db	67	;'C'
  1803  00719B  4B                 	db	75	;'K'
  1804  00719C  20                 	db	32
  1805  00719D  2D                 	db	45
  1806  00719E  20                 	db	32
  1807  00719F  4F                 	db	79	;'O'
  1808  0071A0  70                 	db	112	;'p'
  1809  0071A1  65                 	db	101	;'e'
  1810  0071A2  6E                 	db	110	;'n'
  1811  0071A3  20                 	db	32
  1812  0071A4  43                 	db	67	;'C'
  1813  0071A5  41                 	db	65	;'A'
  1814  0071A6  4E                 	db	78	;'N'
  1815  0071A7  20                 	db	32
  1816  0071A8  69                 	db	105	;'i'
  1817  0071A9  6E                 	db	110	;'n'
  1818  0071AA  74                 	db	116	;'t'
  1819  0071AB  65                 	db	101	;'e'
  1820  0071AC  72                 	db	114	;'r'
  1821  0071AD  66                 	db	102	;'f'
  1822  0071AE  61                 	db	97	;'a'
  1823  0071AF  63                 	db	99	;'c'
  1824  0071B0  65                 	db	101	;'e'
  1825  0071B1  20                 	db	32
  1826  0071B2  69                 	db	105	;'i'
  1827  0071B3  6E                 	db	110	;'n'
  1828  0071B4  20                 	db	32
  1829  0071B5  6C                 	db	108	;'l'
  1830  0071B6  6F                 	db	111	;'o'
  1831  0071B7  6F                 	db	111	;'o'
  1832  0071B8  70                 	db	112	;'p'
  1833  0071B9  62                 	db	98	;'b'
  1834  0071BA  61                 	db	97	;'a'
  1835  0071BB  63                 	db	99	;'c'
  1836  0071BC  6B                 	db	107	;'k'
  1837  0071BD  20                 	db	32
  1838  0071BE  6D                 	db	109	;'m'
  1839  0071BF  6F                 	db	111	;'o'
  1840  0071C0  64                 	db	100	;'d'
  1841  0071C1  65                 	db	101	;'e'
  1842  0071C2  2E                 	db	46
  1843  0071C3  0D                 	db	13
  1844  0071C4  0A                 	db	10
  1845  0071C5  00                 	db	0
  1846  0071C6                     STR_245:
  1847  0071C6  56                 	db	86	;'V'
  1848  0071C7  45                 	db	69	;'E'
  1849  0071C8  52                 	db	82	;'R'
  1850  0071C9  53                 	db	83	;'S'
  1851  0071CA  49                 	db	73	;'I'
  1852  0071CB  4F                 	db	79	;'O'
  1853  0071CC  4E                 	db	78	;'N'
  1854  0071CD  20                 	db	32
  1855  0071CE  2D                 	db	45
  1856  0071CF  20                 	db	32
  1857  0071D0  44                 	db	68	;'D'
  1858  0071D1  69                 	db	105	;'i'
  1859  0071D2  73                 	db	115	;'s'
  1860  0071D3  70                 	db	112	;'p'
  1861  0071D4  6C                 	db	108	;'l'
  1862  0071D5  61                 	db	97	;'a'
  1863  0071D6  79                 	db	121	;'y'
  1864  0071D7  20                 	db	32
  1865  0071D8  66                 	db	102	;'f'
  1866  0071D9  69                 	db	105	;'i'
  1867  0071DA  72                 	db	114	;'r'
  1868  0071DB  6D                 	db	109	;'m'
  1869  0071DC  77                 	db	119	;'w'
  1870  0071DD  61                 	db	97	;'a'
  1871  0071DE  72                 	db	114	;'r'
  1872  0071DF  65                 	db	101	;'e'
  1873  0071E0  20                 	db	32
  1874  0071E1  76                 	db	118	;'v'
  1875  0071E2  65                 	db	101	;'e'
  1876  0071E3  72                 	db	114	;'r'
  1877  0071E4  73                 	db	115	;'s'
  1878  0071E5  69                 	db	105	;'i'
  1879  0071E6  6F                 	db	111	;'o'
  1880  0071E7  6E                 	db	110	;'n'
  1881  0071E8  20                 	db	32
  1882  0071E9  69                 	db	105	;'i'
  1883  0071EA  6E                 	db	110	;'n'
  1884  0071EB  66                 	db	102	;'f'
  1885  0071EC  6F                 	db	111	;'o'
  1886  0071ED  72                 	db	114	;'r'
  1887  0071EE  6D                 	db	109	;'m'
  1888  0071EF  61                 	db	97	;'a'
  1889  0071F0  74                 	db	116	;'t'
  1890  0071F1  69                 	db	105	;'i'
  1891  0071F2  6F                 	db	111	;'o'
  1892  0071F3  6E                 	db	110	;'n'
  1893  0071F4  2E                 	db	46
  1894  0071F5  0D                 	db	13
  1895  0071F6  0A                 	db	10
  1896  0071F7  00                 	db	0
  1897  0071F8                     STR_265:
  1898  0071F8  20                 	db	32
  1899  0071F9  20                 	db	32
  1900  0071FA  20                 	db	32
  1901  0071FB  20                 	db	32
  1902  0071FC  20                 	db	32
  1903  0071FD  20                 	db	32
  1904  0071FE  20                 	db	32
  1905  0071FF  20                 	db	32
  1906  007200  20                 	db	32
  1907  007201  20                 	db	32
  1908  007202  20                 	db	32
  1909  007203  20                 	db	32
  1910  007204  20                 	db	32
  1911  007205  20                 	db	32
  1912  007206  20                 	db	32
  1913  007207  20                 	db	32
  1914  007208  46                 	db	70	;'F'
  1915  007209  6F                 	db	111	;'o'
  1916  00720A  72                 	db	114	;'r'
  1917  00720B  6D                 	db	109	;'m'
  1918  00720C  61                 	db	97	;'a'
  1919  00720D  74                 	db	116	;'t'
  1920  00720E  3A                 	db	58	;':'
  1921  00720F  20                 	db	32
  1922  007210  73                 	db	115	;'s'
  1923  007211  65                 	db	101	;'e'
  1924  007212  74                 	db	116	;'t'
  1925  007213  20                 	db	32
  1926  007214  72                 	db	114	;'r'
  1927  007215  77                 	db	119	;'w'
  1928  007216  74                 	db	116	;'t'
  1929  007217  69                 	db	105	;'i'
  1930  007218  6D                 	db	109	;'m'
  1931  007219  65                 	db	101	;'e'
  1932  00721A  6F                 	db	111	;'o'
  1933  00721B  75                 	db	117	;'u'
  1934  00721C  74                 	db	116	;'t'
  1935  00721D  20                 	db	32
  1936  00721E  74                 	db	116	;'t'
  1937  00721F  69                 	db	105	;'i'
  1938  007220  6D                 	db	109	;'m'
  1939  007221  65                 	db	101	;'e'
  1940  007222  6F                 	db	111	;'o'
  1941  007223  75                 	db	117	;'u'
  1942  007224  74                 	db	116	;'t'
  1943  007225  2E                 	db	46
  1944  007226  0D                 	db	13
  1945  007227  0A                 	db	10
  1946  007228  00                 	db	0
  1947  007229                     STR_263:
  1948  007229  20                 	db	32
  1949  00722A  20                 	db	32
  1950  00722B  20                 	db	32
  1951  00722C  20                 	db	32
  1952  00722D  44                 	db	68	;'D'
  1953  00722E  45                 	db	69	;'E'
  1954  00722F  43                 	db	67	;'C'
  1955  007230  49                 	db	73	;'I'
  1956  007231  4D                 	db	77	;'M'
  1957  007232  41                 	db	65	;'A'
  1958  007233  4C                 	db	76	;'L'
  1959  007234  20                 	db	32
  1960  007235  2D                 	db	45
  1961  007236  20                 	db	32
  1962  007237  44                 	db	68	;'D'
  1963  007238  69                 	db	105	;'i'
  1964  007239  73                 	db	115	;'s'
  1965  00723A  70                 	db	112	;'p'
  1966  00723B  6C                 	db	108	;'l'
  1967  00723C  61                 	db	97	;'a'
  1968  00723D  79                 	db	121	;'y'
  1969  00723E  20                 	db	32
  1970  00723F  6E                 	db	110	;'n'
  1971  007240  75                 	db	117	;'u'
  1972  007241  6D                 	db	109	;'m'
  1973  007242  65                 	db	101	;'e'
  1974  007243  72                 	db	114	;'r'
  1975  007244  69                 	db	105	;'i'
  1976  007245  63                 	db	99	;'c'
  1977  007246  61                 	db	97	;'a'
  1978  007247  6C                 	db	108	;'l'
  1979  007248  73                 	db	115	;'s'
  1980  007249  20                 	db	32
  1981  00724A  69                 	db	105	;'i'
  1982  00724B  6E                 	db	110	;'n'
  1983  00724C  20                 	db	32
  1984  00724D  64                 	db	100	;'d'
  1985  00724E  65                 	db	101	;'e'
  1986  00724F  63                 	db	99	;'c'
  1987  007250  69                 	db	105	;'i'
  1988  007251  6D                 	db	109	;'m'
  1989  007252  61                 	db	97	;'a'
  1990  007253  6C                 	db	108	;'l'
  1991  007254  2E                 	db	46
  1992  007255  0D                 	db	13
  1993  007256  0A                 	db	10
  1994  007257  00                 	db	0
  1995  007258                     STR_262:
  1996  007258  20                 	db	32
  1997  007259  20                 	db	32
  1998  00725A  20                 	db	32
  1999  00725B  20                 	db	32
  2000  00725C  48                 	db	72	;'H'
  2001  00725D  45                 	db	69	;'E'
  2002  00725E  58                 	db	88	;'X'
  2003  00725F  20                 	db	32
  2004  007260  2D                 	db	45
  2005  007261  20                 	db	32
  2006  007262  44                 	db	68	;'D'
  2007  007263  69                 	db	105	;'i'
  2008  007264  73                 	db	115	;'s'
  2009  007265  70                 	db	112	;'p'
  2010  007266  6C                 	db	108	;'l'
  2011  007267  61                 	db	97	;'a'
  2012  007268  79                 	db	121	;'y'
  2013  007269  20                 	db	32
  2014  00726A  6E                 	db	110	;'n'
  2015  00726B  75                 	db	117	;'u'
  2016  00726C  6D                 	db	109	;'m'
  2017  00726D  65                 	db	101	;'e'
  2018  00726E  72                 	db	114	;'r'
  2019  00726F  69                 	db	105	;'i'
  2020  007270  63                 	db	99	;'c'
  2021  007271  61                 	db	97	;'a'
  2022  007272  6C                 	db	108	;'l'
  2023  007273  73                 	db	115	;'s'
  2024  007274  20                 	db	32
  2025  007275  69                 	db	105	;'i'
  2026  007276  6E                 	db	110	;'n'
  2027  007277  20                 	db	32
  2028  007278  68                 	db	104	;'h'
  2029  007279  65                 	db	101	;'e'
  2030  00727A  78                 	db	120	;'x'
  2031  00727B  61                 	db	97	;'a'
  2032  00727C  64                 	db	100	;'d'
  2033  00727D  65                 	db	101	;'e'
  2034  00727E  63                 	db	99	;'c'
  2035  00727F  69                 	db	105	;'i'
  2036  007280  6D                 	db	109	;'m'
  2037  007281  61                 	db	97	;'a'
  2038  007282  6C                 	db	108	;'l'
  2039  007283  2E                 	db	46
  2040  007284  0D                 	db	13
  2041  007285  0A                 	db	10
  2042  007286  00                 	db	0
  2043  007287                     STR_253:
  2044  007287  46                 	db	70	;'F'
  2045  007288  49                 	db	73	;'I'
  2046  007289  4E                 	db	78	;'N'
  2047  00728A  44                 	db	68	;'D'
  2048  00728B  20                 	db	32
  2049  00728C  2D                 	db	45
  2050  00728D  20                 	db	32
  2051  00728E  46                 	db	70	;'F'
  2052  00728F  69                 	db	105	;'i'
  2053  007290  6E                 	db	110	;'n'
  2054  007291  64                 	db	100	;'d'
  2055  007292  20                 	db	32
  2056  007293  61                 	db	97	;'a'
  2057  007294  76                 	db	118	;'v'
  2058  007295  61                 	db	97	;'a'
  2059  007296  69                 	db	105	;'i'
  2060  007297  6C                 	db	108	;'l'
  2061  007298  61                 	db	97	;'a'
  2062  007299  62                 	db	98	;'b'
  2063  00729A  6C                 	db	108	;'l'
  2064  00729B  65                 	db	101	;'e'
  2065  00729C  20                 	db	32
  2066  00729D  43                 	db	67	;'C'
  2067  00729E  41                 	db	65	;'A'
  2068  00729F  4E                 	db	78	;'N'
  2069  0072A0  34                 	db	52	;'4'
  2070  0072A1  56                 	db	86	;'V'
  2071  0072A2  53                 	db	83	;'S'
  2072  0072A3  43                 	db	67	;'C'
  2073  0072A4  50                 	db	80	;'P'
  2074  0072A5  20                 	db	32
  2075  0072A6  6E                 	db	110	;'n'
  2076  0072A7  6F                 	db	111	;'o'
  2077  0072A8  64                 	db	100	;'d'
  2078  0072A9  65                 	db	101	;'e'
  2079  0072AA  73                 	db	115	;'s'
  2080  0072AB  20                 	db	32
  2081  0072AC  6F                 	db	111	;'o'
  2082  0072AD  6E                 	db	110	;'n'
  2083  0072AE  20                 	db	32
  2084  0072AF  62                 	db	98	;'b'
  2085  0072B0  75                 	db	117	;'u'
  2086  0072B1  73                 	db	115	;'s'
  2087  0072B2  2E                 	db	46
  2088  0072B3  0D                 	db	13
  2089  0072B4  0A                 	db	10
  2090  0072B5  00                 	db	0
  2091  0072B6                     STR_241:
  2092  0072B6  53                 	db	83	;'S'
  2093  0072B7  49                 	db	73	;'I'
  2094  0072B8  4C                 	db	76	;'L'
  2095  0072B9  45                 	db	69	;'E'
  2096  0072BA  4E                 	db	78	;'N'
  2097  0072BB  54                 	db	84	;'T'
  2098  0072BC  20                 	db	32
  2099  0072BD  2D                 	db	45
  2100  0072BE  20                 	db	32
  2101  0072BF  4F                 	db	79	;'O'
  2102  0072C0  70                 	db	112	;'p'
  2103  0072C1  65                 	db	101	;'e'
  2104  0072C2  6E                 	db	110	;'n'
  2105  0072C3  20                 	db	32
  2106  0072C4  43                 	db	67	;'C'
  2107  0072C5  41                 	db	65	;'A'
  2108  0072C6  4E                 	db	78	;'N'
  2109  0072C7  20                 	db	32
  2110  0072C8  69                 	db	105	;'i'
  2111  0072C9  6E                 	db	110	;'n'
  2112  0072CA  74                 	db	116	;'t'
  2113  0072CB  65                 	db	101	;'e'
  2114  0072CC  72                 	db	114	;'r'
  2115  0072CD  66                 	db	102	;'f'
  2116  0072CE  61                 	db	97	;'a'
  2117  0072CF  63                 	db	99	;'c'
  2118  0072D0  65                 	db	101	;'e'
  2119  0072D1  20                 	db	32
  2120  0072D2  69                 	db	105	;'i'
  2121  0072D3  6E                 	db	110	;'n'
  2122  0072D4  20                 	db	32
  2123  0072D5  73                 	db	115	;'s'
  2124  0072D6  69                 	db	105	;'i'
  2125  0072D7  6C                 	db	108	;'l'
  2126  0072D8  65                 	db	101	;'e'
  2127  0072D9  6E                 	db	110	;'n'
  2128  0072DA  74                 	db	116	;'t'
  2129  0072DB  20                 	db	32
  2130  0072DC  6D                 	db	109	;'m'
  2131  0072DD  6F                 	db	111	;'o'
  2132  0072DE  64                 	db	100	;'d'
  2133  0072DF  65                 	db	101	;'e'
  2134  0072E0  2E                 	db	46
  2135  0072E1  0D                 	db	13
  2136  0072E2  0A                 	db	10
  2137  0072E3  00                 	db	0
  2138  0072E4                     STR_246:
  2139  0072E4  49                 	db	73	;'I'
  2140  0072E5  46                 	db	70	;'F'
  2141  0072E6  4D                 	db	77	;'M'
  2142  0072E7  4F                 	db	79	;'O'
  2143  0072E8  44                 	db	68	;'D'
  2144  0072E9  45                 	db	69	;'E'
  2145  0072EA  20                 	db	32
  2146  0072EB  2D                 	db	45
  2147  0072EC  20                 	db	32
  2148  0072ED  44                 	db	68	;'D'
  2149  0072EE  69                 	db	105	;'i'
  2150  0072EF  73                 	db	115	;'s'
  2151  0072F0  70                 	db	112	;'p'
  2152  0072F1  6C                 	db	108	;'l'
  2153  0072F2  61                 	db	97	;'a'
  2154  0072F3  79                 	db	121	;'y'
  2155  0072F4  20                 	db	32
  2156  0072F5  73                 	db	115	;'s'
  2157  0072F6  65                 	db	101	;'e'
  2158  0072F7  6C                 	db	108	;'l'
  2159  0072F8  65                 	db	101	;'e'
  2160  0072F9  63                 	db	99	;'c'
  2161  0072FA  74                 	db	116	;'t'
  2162  0072FB  65                 	db	101	;'e'
  2163  0072FC  64                 	db	100	;'d'
  2164  0072FD  20                 	db	32
  2165  0072FE  69                 	db	105	;'i'
  2166  0072FF  6E                 	db	110	;'n'
  2167  007300  74                 	db	116	;'t'
  2168  007301  65                 	db	101	;'e'
  2169  007302  72                 	db	114	;'r'
  2170  007303  66                 	db	102	;'f'
  2171  007304  61                 	db	97	;'a'
  2172  007305  63                 	db	99	;'c'
  2173  007306  65                 	db	101	;'e'
  2174  007307  20                 	db	32
  2175  007308  6D                 	db	109	;'m'
  2176  007309  6F                 	db	111	;'o'
  2177  00730A  64                 	db	100	;'d'
  2178  00730B  65                 	db	101	;'e'
  2179  00730C  2E                 	db	46
  2180  00730D  0D                 	db	13
  2181  00730E  0A                 	db	10
  2182  00730F  00                 	db	0
  2183  007310                     STR_240:
  2184  007310  4F                 	db	79	;'O'
  2185  007311  50                 	db	80	;'P'
  2186  007312  45                 	db	69	;'E'
  2187  007313  4E                 	db	78	;'N'
  2188  007314  20                 	db	32
  2189  007315  2D                 	db	45
  2190  007316  20                 	db	32
  2191  007317  4F                 	db	79	;'O'
  2192  007318  70                 	db	112	;'p'
  2193  007319  65                 	db	101	;'e'
  2194  00731A  6E                 	db	110	;'n'
  2195  00731B  20                 	db	32
  2196  00731C  43                 	db	67	;'C'
  2197  00731D  41                 	db	65	;'A'
  2198  00731E  4E                 	db	78	;'N'
  2199  00731F  20                 	db	32
  2200  007320  69                 	db	105	;'i'
  2201  007321  6E                 	db	110	;'n'
  2202  007322  74                 	db	116	;'t'
  2203  007323  65                 	db	101	;'e'
  2204  007324  72                 	db	114	;'r'
  2205  007325  66                 	db	102	;'f'
  2206  007326  61                 	db	97	;'a'
  2207  007327  63                 	db	99	;'c'
  2208  007328  65                 	db	101	;'e'
  2209  007329  20                 	db	32
  2210  00732A  69                 	db	105	;'i'
  2211  00732B  6E                 	db	110	;'n'
  2212  00732C  20                 	db	32
  2213  00732D  6E                 	db	110	;'n'
  2214  00732E  6F                 	db	111	;'o'
  2215  00732F  72                 	db	114	;'r'
  2216  007330  6D                 	db	109	;'m'
  2217  007331  61                 	db	97	;'a'
  2218  007332  6C                 	db	108	;'l'
  2219  007333  20                 	db	32
  2220  007334  6D                 	db	109	;'m'
  2221  007335  6F                 	db	111	;'o'
  2222  007336  64                 	db	100	;'d'
  2223  007337  65                 	db	101	;'e'
  2224  007338  2E                 	db	46
  2225  007339  0D                 	db	13
  2226  00733A  0A                 	db	10
  2227  00733B  00                 	db	0
  2228  00733C                     STR_133:
  2229  00733C  2B                 	db	43
  2230  00733D  4F                 	db	79	;'O'
  2231  00733E  4B                 	db	75	;'K'
  2232  00733F  20                 	db	32
  2233  007340  2D                 	db	45
  2234  007341  20                 	db	32
  2235  007342  4E                 	db	78	;'N'
  2236  007343  75                 	db	117	;'u'
  2237  007344  6D                 	db	109	;'m'
  2238  007345  65                 	db	101	;'e'
  2239  007346  72                 	db	114	;'r'
  2240  007347  69                 	db	105	;'i'
  2241  007348  63                 	db	99	;'c'
  2242  007349  61                 	db	97	;'a'
  2243  00734A  6C                 	db	108	;'l'
  2244  00734B  20                 	db	32
  2245  00734C  6F                 	db	111	;'o'
  2246  00734D  75                 	db	117	;'u'
  2247  00734E  74                 	db	116	;'t'
  2248  00734F  70                 	db	112	;'p'
  2249  007350  75                 	db	117	;'u'
  2250  007351  74                 	db	116	;'t'
  2251  007352  20                 	db	32
  2252  007353  6E                 	db	110	;'n'
  2253  007354  6F                 	db	111	;'o'
  2254  007355  77                 	db	119	;'w'
  2255  007356  20                 	db	32
  2256  007357  69                 	db	105	;'i'
  2257  007358  6E                 	db	110	;'n'
  2258  007359  20                 	db	32
  2259  00735A  68                 	db	104	;'h'
  2260  00735B  65                 	db	101	;'e'
  2261  00735C  78                 	db	120	;'x'
  2262  00735D  61                 	db	97	;'a'
  2263  00735E  64                 	db	100	;'d'
  2264  00735F  65                 	db	101	;'e'
  2265  007360  63                 	db	99	;'c'
  2266  007361  69                 	db	105	;'i'
  2267  007362  6D                 	db	109	;'m'
  2268  007363  61                 	db	97	;'a'
  2269  007364  6C                 	db	108	;'l'
  2270  007365  0D                 	db	13
  2271  007366  0A                 	db	10
  2272  007367  00                 	db	0
  2273  007368                     STR_110:
  2274  007368  2D                 	db	45
  2275  007369  45                 	db	69	;'E'
  2276  00736A  52                 	db	82	;'R'
  2277  00736B  52                 	db	82	;'R'
  2278  00736C  4F                 	db	79	;'O'
  2279  00736D  52                 	db	82	;'R'
  2280  00736E  20                 	db	32
  2281  00736F  2D                 	db	45
  2282  007370  20                 	db	32
  2283  007371  66                 	db	102	;'f'
  2284  007372  69                 	db	105	;'i'
  2285  007373  6C                 	db	108	;'l'
  2286  007374  74                 	db	116	;'t'
  2287  007375  65                 	db	101	;'e'
  2288  007376  72                 	db	114	;'r'
  2289  007377  20                 	db	32
  2290  007378  66                 	db	102	;'f'
  2291  007379  6F                 	db	111	;'o'
  2292  00737A  72                 	db	114	;'r'
  2293  00737B  20                 	db	32
  2294  00737C  70                 	db	112	;'p'
  2295  00737D  72                 	db	114	;'r'
  2296  00737E  69                 	db	105	;'i'
  2297  00737F  6F                 	db	111	;'o'
  2298  007380  72                 	db	114	;'r'
  2299  007381  69                 	db	105	;'i'
  2300  007382  74                 	db	116	;'t'
  2301  007383  79                 	db	121	;'y'
  2302  007384  20                 	db	32
  2303  007385  69                 	db	105	;'i'
  2304  007386  73                 	db	115	;'s'
  2305  007387  20                 	db	32
  2306  007388  6D                 	db	109	;'m'
  2307  007389  69                 	db	105	;'i'
  2308  00738A  73                 	db	115	;'s'
  2309  00738B  73                 	db	115	;'s'
  2310  00738C  69                 	db	105	;'i'
  2311  00738D  6E                 	db	110	;'n'
  2312  00738E  67                 	db	103	;'g'
  2313  00738F  0D                 	db	13
  2314  007390  0A                 	db	10
  2315  007391  00                 	db	0
  2316  007392                     STR_158:
  2317  007392  2B                 	db	43
  2318  007393  45                 	db	69	;'E'
  2319  007394  52                 	db	82	;'R'
  2320  007395  52                 	db	82	;'R'
  2321  007396  4F                 	db	79	;'O'
  2322  007397  52                 	db	82	;'R'
  2323  007398  20                 	db	32
  2324  007399  2D                 	db	45
  2325  00739A  20                 	db	32
  2326  00739B  57                 	db	87	;'W'
  2327  00739C  72                 	db	114	;'r'
  2328  00739D  6F                 	db	111	;'o'
  2329  00739E  6E                 	db	110	;'n'
  2330  00739F  67                 	db	103	;'g'
  2331  0073A0  20                 	db	32
  2332  0073A1  61                 	db	97	;'a'
  2333  0073A2  72                 	db	114	;'r'
  2334  0073A3  67                 	db	103	;'g'
  2335  0073A4  75                 	db	117	;'u'
  2336  0073A5  6D                 	db	109	;'m'
  2337  0073A6  65                 	db	101	;'e'
  2338  0073A7  6E                 	db	110	;'n'
  2339  0073A8  74                 	db	116	;'t'
  2340  0073A9  20                 	db	32
  2341  0073AA  74                 	db	116	;'t'
  2342  0073AB  6F                 	db	111	;'o'
  2343  0073AC  20                 	db	32
  2344  0073AD  27                 	db	39
  2345  0073AE  73                 	db	115	;'s'
  2346  0073AF  65                 	db	101	;'e'
  2347  0073B0  74                 	db	116	;'t'
  2348  0073B1  20                 	db	32
  2349  0073B2  65                 	db	101	;'e'
  2350  0073B3  63                 	db	99	;'c'
  2351  0073B4  68                 	db	104	;'h'
  2352  0073B5  6F                 	db	111	;'o'
  2353  0073B6  27                 	db	39
  2354  0073B7  2E                 	db	46
  2355  0073B8  0D                 	db	13
  2356  0073B9  0A                 	db	10
  2357  0073BA  00                 	db	0
  2358  0073BB                     STR_116:
  2359  0073BB  2D                 	db	45
  2360  0073BC  45                 	db	69	;'E'
  2361  0073BD  52                 	db	82	;'R'
  2362  0073BE  52                 	db	82	;'R'
  2363  0073BF  4F                 	db	79	;'O'
  2364  0073C0  52                 	db	82	;'R'
  2365  0073C1  20                 	db	32
  2366  0073C2  2D                 	db	45
  2367  0073C3  20                 	db	32
  2368  0073C4  66                 	db	102	;'f'
  2369  0073C5  69                 	db	105	;'i'
  2370  0073C6  6C                 	db	108	;'l'
  2371  0073C7  74                 	db	116	;'t'
  2372  0073C8  65                 	db	101	;'e'
  2373  0073C9  72                 	db	114	;'r'
  2374  0073CA  20                 	db	32
  2375  0073CB  66                 	db	102	;'f'
  2376  0073CC  6F                 	db	111	;'o'
  2377  0073CD  72                 	db	114	;'r'
  2378  0073CE  20                 	db	32
  2379  0073CF  6E                 	db	110	;'n'
  2380  0073D0  69                 	db	105	;'i'
  2381  0073D1  64                 	db	100	;'d'
  2382  0073D2  65                 	db	101	;'e'
  2383  0073D3  20                 	db	32
  2384  0073D4  69                 	db	105	;'i'
  2385  0073D5  64                 	db	100	;'d'
  2386  0073D6  20                 	db	32
  2387  0073D7  69                 	db	105	;'i'
  2388  0073D8  73                 	db	115	;'s'
  2389  0073D9  20                 	db	32
  2390  0073DA  6D                 	db	109	;'m'
  2391  0073DB  69                 	db	105	;'i'
  2392  0073DC  73                 	db	115	;'s'
  2393  0073DD  73                 	db	115	;'s'
  2394  0073DE  69                 	db	105	;'i'
  2395  0073DF  6E                 	db	110	;'n'
  2396  0073E0  67                 	db	103	;'g'
  2397  0073E1  0D                 	db	13
  2398  0073E2  0A                 	db	10
  2399  0073E3  00                 	db	0
  2400  0073E4                     STR_252:
  2401  0073E4  48                 	db	72	;'H'
  2402  0073E5  45                 	db	69	;'E'
  2403  0073E6  4C                 	db	76	;'L'
  2404  0073E7  50                 	db	80	;'P'
  2405  0073E8  20                 	db	32
  2406  0073E9  2D                 	db	45
  2407  0073EA  20                 	db	32
  2408  0073EB  44                 	db	68	;'D'
  2409  0073EC  69                 	db	105	;'i'
  2410  0073ED  73                 	db	115	;'s'
  2411  0073EE  70                 	db	112	;'p'
  2412  0073EF  6C                 	db	108	;'l'
  2413  0073F0  61                 	db	97	;'a'
  2414  0073F1  79                 	db	121	;'y'
  2415  0073F2  20                 	db	32
  2416  0073F3  74                 	db	116	;'t'
  2417  0073F4  68                 	db	104	;'h'
  2418  0073F5  69                 	db	105	;'i'
  2419  0073F6  73                 	db	115	;'s'
  2420  0073F7  20                 	db	32
  2421  0073F8  68                 	db	104	;'h'
  2422  0073F9  65                 	db	101	;'e'
  2423  0073FA  6C                 	db	108	;'l'
  2424  0073FB  70                 	db	112	;'p'
  2425  0073FC  20                 	db	32
  2426  0073FD  69                 	db	105	;'i'
  2427  0073FE  6E                 	db	110	;'n'
  2428  0073FF  66                 	db	102	;'f'
  2429  007400  6F                 	db	111	;'o'
  2430  007401  72                 	db	114	;'r'
  2431  007402  6D                 	db	109	;'m'
  2432  007403  61                 	db	97	;'a'
  2433  007404  74                 	db	116	;'t'
  2434  007405  69                 	db	105	;'i'
  2435  007406  6F                 	db	111	;'o'
  2436  007407  6E                 	db	110	;'n'
  2437  007408  2E                 	db	46
  2438  007409  0D                 	db	13
  2439  00740A  0A                 	db	10
  2440  00740B  00                 	db	0
  2441  00740C                     STR_123:
  2442  00740C  2D                 	db	45
  2443  00740D  45                 	db	69	;'E'
  2444  00740E  52                 	db	82	;'R'
  2445  00740F  52                 	db	82	;'R'
  2446  007410  4F                 	db	79	;'O'
  2447  007411  52                 	db	82	;'R'
  2448  007412  20                 	db	32
  2449  007413  2D                 	db	45
  2450  007414  20                 	db	32
  2451  007415  6D                 	db	109	;'m'
  2452  007416  61                 	db	97	;'a'
  2453  007417  73                 	db	115	;'s'
  2454  007418  6B                 	db	107	;'k'
  2455  007419  20                 	db	32
  2456  00741A  66                 	db	102	;'f'
  2457  00741B  6F                 	db	111	;'o'
  2458  00741C  72                 	db	114	;'r'
  2459  00741D  20                 	db	32
  2460  00741E  70                 	db	112	;'p'
  2461  00741F  72                 	db	114	;'r'
  2462  007420  69                 	db	105	;'i'
  2463  007421  6F                 	db	111	;'o'
  2464  007422  72                 	db	114	;'r'
  2465  007423  69                 	db	105	;'i'
  2466  007424  74                 	db	116	;'t'
  2467  007425  79                 	db	121	;'y'
  2468  007426  20                 	db	32
  2469  007427  69                 	db	105	;'i'
  2470  007428  73                 	db	115	;'s'
  2471  007429  20                 	db	32
  2472  00742A  6D                 	db	109	;'m'
  2473  00742B  69                 	db	105	;'i'
  2474  00742C  73                 	db	115	;'s'
  2475  00742D  73                 	db	115	;'s'
  2476  00742E  69                 	db	105	;'i'
  2477  00742F  6E                 	db	110	;'n'
  2478  007430  67                 	db	103	;'g'
  2479  007431  0D                 	db	13
  2480  007432  0A                 	db	10
  2481  007433  00                 	db	0
  2482  007434                     STR_135:
  2483  007434  2B                 	db	43
  2484  007435  4F                 	db	79	;'O'
  2485  007436  4B                 	db	75	;'K'
  2486  007437  20                 	db	32
  2487  007438  2D                 	db	45
  2488  007439  20                 	db	32
  2489  00743A  4E                 	db	78	;'N'
  2490  00743B  75                 	db	117	;'u'
  2491  00743C  6D                 	db	109	;'m'
  2492  00743D  65                 	db	101	;'e'
  2493  00743E  72                 	db	114	;'r'
  2494  00743F  69                 	db	105	;'i'
  2495  007440  63                 	db	99	;'c'
  2496  007441  61                 	db	97	;'a'
  2497  007442  6C                 	db	108	;'l'
  2498  007443  20                 	db	32
  2499  007444  6F                 	db	111	;'o'
  2500  007445  75                 	db	117	;'u'
  2501  007446  74                 	db	116	;'t'
  2502  007447  70                 	db	112	;'p'
  2503  007448  75                 	db	117	;'u'
  2504  007449  74                 	db	116	;'t'
  2505  00744A  20                 	db	32
  2506  00744B  6E                 	db	110	;'n'
  2507  00744C  6F                 	db	111	;'o'
  2508  00744D  77                 	db	119	;'w'
  2509  00744E  20                 	db	32
  2510  00744F  69                 	db	105	;'i'
  2511  007450  6E                 	db	110	;'n'
  2512  007451  20                 	db	32
  2513  007452  64                 	db	100	;'d'
  2514  007453  65                 	db	101	;'e'
  2515  007454  63                 	db	99	;'c'
  2516  007455  69                 	db	105	;'i'
  2517  007456  6D                 	db	109	;'m'
  2518  007457  61                 	db	97	;'a'
  2519  007458  6C                 	db	108	;'l'
  2520  007459  0D                 	db	13
  2521  00745A  0A                 	db	10
  2522  00745B  00                 	db	0
  2523  00745C                     STR_108:
  2524  00745C  2D                 	db	45
  2525  00745D  45                 	db	69	;'E'
  2526  00745E  52                 	db	82	;'R'
  2527  00745F  52                 	db	82	;'R'
  2528  007460  4F                 	db	79	;'O'
  2529  007461  52                 	db	82	;'R'
  2530  007462  20                 	db	32
  2531  007463  2D                 	db	45
  2532  007464  20                 	db	32
  2533  007465  4E                 	db	78	;'N'
  2534  007466  6F                 	db	111	;'o'
  2535  007467  20                 	db	32
  2536  007468  66                 	db	102	;'f'
  2537  007469  69                 	db	105	;'i'
  2538  00746A  6C                 	db	108	;'l'
  2539  00746B  74                 	db	116	;'t'
  2540  00746C  65                 	db	101	;'e'
  2541  00746D  72                 	db	114	;'r'
  2542  00746E  20                 	db	32
  2543  00746F  6E                 	db	110	;'n'
  2544  007470  75                 	db	117	;'u'
  2545  007471  6D                 	db	109	;'m'
  2546  007472  62                 	db	98	;'b'
  2547  007473  65                 	db	101	;'e'
  2548  007474  72                 	db	114	;'r'
  2549  007475  20                 	db	32
  2550  007476  73                 	db	115	;'s'
  2551  007477  70                 	db	112	;'p'
  2552  007478  65                 	db	101	;'e'
  2553  007479  63                 	db	99	;'c'
  2554  00747A  69                 	db	105	;'i'
  2555  00747B  66                 	db	102	;'f'
  2556  00747C  69                 	db	105	;'i'
  2557  00747D  65                 	db	101	;'e'
  2558  00747E  64                 	db	100	;'d'
  2559  00747F  2E                 	db	46
  2560  007480  0D                 	db	13
  2561  007481  0A                 	db	10
  2562  007482  00                 	db	0
  2563  007483                     STR_251:
  2564  007483  45                 	db	69	;'E'
  2565  007484  52                 	db	82	;'R'
  2566  007485  52                 	db	82	;'R'
  2567  007486  20                 	db	32
  2568  007487  2D                 	db	45
  2569  007488  20                 	db	32
  2570  007489  44                 	db	68	;'D'
  2571  00748A  69                 	db	105	;'i'
  2572  00748B  73                 	db	115	;'s'
  2573  00748C  70                 	db	112	;'p'
  2574  00748D  6C                 	db	108	;'l'
  2575  00748E  61                 	db	97	;'a'
  2576  00748F  79                 	db	121	;'y'
  2577  007490  20                 	db	32
  2578  007491  43                 	db	67	;'C'
  2579  007492  41                 	db	65	;'A'
  2580  007493  4E                 	db	78	;'N'
  2581  007494  20                 	db	32
  2582  007495  65                 	db	101	;'e'
  2583  007496  72                 	db	114	;'r'
  2584  007497  72                 	db	114	;'r'
  2585  007498  6F                 	db	111	;'o'
  2586  007499  72                 	db	114	;'r'
  2587  00749A  20                 	db	32
  2588  00749B  69                 	db	105	;'i'
  2589  00749C  6E                 	db	110	;'n'
  2590  00749D  66                 	db	102	;'f'
  2591  00749E  6F                 	db	111	;'o'
  2592  00749F  72                 	db	114	;'r'
  2593  0074A0  6D                 	db	109	;'m'
  2594  0074A1  61                 	db	97	;'a'
  2595  0074A2  74                 	db	116	;'t'
  2596  0074A3  69                 	db	105	;'i'
  2597  0074A4  6F                 	db	111	;'o'
  2598  0074A5  6E                 	db	110	;'n'
  2599  0074A6  2E                 	db	46
  2600  0074A7  0D                 	db	13
  2601  0074A8  0A                 	db	10
  2602  0074A9  00                 	db	0
  2603  0074AA                     STR_237:
  2604  0074AA  48                 	db	72	;'H'
  2605  0074AB  65                 	db	101	;'e'
  2606  0074AC  6C                 	db	108	;'l'
  2607  0074AD  70                 	db	112	;'p'
  2608  0074AE  20                 	db	32
  2609  0074AF  66                 	db	102	;'f'
  2610  0074B0  6F                 	db	111	;'o'
  2611  0074B1  72                 	db	114	;'r'
  2612  0074B2  20                 	db	32
  2613  0074B3  74                 	db	116	;'t'
  2614  0074B4  68                 	db	104	;'h'
  2615  0074B5  65                 	db	101	;'e'
  2616  0074B6  20                 	db	32
  2617  0074B7  46                 	db	70	;'F'
  2618  0074B8  72                 	db	114	;'r'
  2619  0074B9  61                 	db	97	;'a'
  2620  0074BA  6E                 	db	110	;'n'
  2621  0074BB  6B                 	db	107	;'k'
  2622  0074BC  66                 	db	102	;'f'
  2623  0074BD  75                 	db	117	;'u'
  2624  0074BE  72                 	db	114	;'r'
  2625  0074BF  74                 	db	116	;'t'
  2626  0074C0  20                 	db	32
  2627  0074C1  52                 	db	82	;'R'
  2628  0074C2  53                 	db	83	;'S'
  2629  0074C3  2D                 	db	45
  2630  0074C4  32                 	db	50	;'2'
  2631  0074C5  33                 	db	51	;'3'
  2632  0074C6  32                 	db	50	;'2'
  2633  0074C7  20                 	db	32
  2634  0074C8  6D                 	db	109	;'m'
  2635  0074C9  6F                 	db	111	;'o'
  2636  0074CA  64                 	db	100	;'d'
  2637  0074CB  75                 	db	117	;'u'
  2638  0074CC  6C                 	db	108	;'l'
  2639  0074CD  65                 	db	101	;'e'
  2640  0074CE  0D                 	db	13
  2641  0074CF  0A                 	db	10
  2642  0074D0  00                 	db	0
  2643  0074D1                     STR_129:
  2644  0074D1  2D                 	db	45
  2645  0074D2  45                 	db	69	;'E'
  2646  0074D3  52                 	db	82	;'R'
  2647  0074D4  52                 	db	82	;'R'
  2648  0074D5  4F                 	db	79	;'O'
  2649  0074D6  52                 	db	82	;'R'
  2650  0074D7  20                 	db	32
  2651  0074D8  2D                 	db	45
  2652  0074D9  20                 	db	32
  2653  0074DA  6D                 	db	109	;'m'
  2654  0074DB  61                 	db	97	;'a'
  2655  0074DC  73                 	db	115	;'s'
  2656  0074DD  6B                 	db	107	;'k'
  2657  0074DE  20                 	db	32
  2658  0074DF  66                 	db	102	;'f'
  2659  0074E0  6F                 	db	111	;'o'
  2660  0074E1  72                 	db	114	;'r'
  2661  0074E2  20                 	db	32
  2662  0074E3  6E                 	db	110	;'n'
  2663  0074E4  69                 	db	105	;'i'
  2664  0074E5  64                 	db	100	;'d'
  2665  0074E6  65                 	db	101	;'e'
  2666  0074E7  20                 	db	32
  2667  0074E8  69                 	db	105	;'i'
  2668  0074E9  64                 	db	100	;'d'
  2669  0074EA  20                 	db	32
  2670  0074EB  69                 	db	105	;'i'
  2671  0074EC  73                 	db	115	;'s'
  2672  0074ED  20                 	db	32
  2673  0074EE  6D                 	db	109	;'m'
  2674  0074EF  69                 	db	105	;'i'
  2675  0074F0  73                 	db	115	;'s'
  2676  0074F1  73                 	db	115	;'s'
  2677  0074F2  69                 	db	105	;'i'
  2678  0074F3  6E                 	db	110	;'n'
  2679  0074F4  67                 	db	103	;'g'
  2680  0074F5  0D                 	db	13
  2681  0074F6  0A                 	db	10
  2682  0074F7  00                 	db	0
  2683  0074F8                     STR_112:
  2684  0074F8  2D                 	db	45
  2685  0074F9  45                 	db	69	;'E'
  2686  0074FA  52                 	db	82	;'R'
  2687  0074FB  52                 	db	82	;'R'
  2688  0074FC  4F                 	db	79	;'O'
  2689  0074FD  52                 	db	82	;'R'
  2690  0074FE  20                 	db	32
  2691  0074FF  2D                 	db	45
  2692  007500  20                 	db	32
  2693  007501  66                 	db	102	;'f'
  2694  007502  69                 	db	105	;'i'
  2695  007503  6C                 	db	108	;'l'
  2696  007504  74                 	db	116	;'t'
  2697  007505  65                 	db	101	;'e'
  2698  007506  72                 	db	114	;'r'
  2699  007507  20                 	db	32
  2700  007508  66                 	db	102	;'f'
  2701  007509  6F                 	db	111	;'o'
  2702  00750A  72                 	db	114	;'r'
  2703  00750B  20                 	db	32
  2704  00750C  63                 	db	99	;'c'
  2705  00750D  6C                 	db	108	;'l'
  2706  00750E  61                 	db	97	;'a'
  2707  00750F  73                 	db	115	;'s'
  2708  007510  73                 	db	115	;'s'
  2709  007511  20                 	db	32
  2710  007512  69                 	db	105	;'i'
  2711  007513  73                 	db	115	;'s'
  2712  007514  20                 	db	32
  2713  007515  6D                 	db	109	;'m'
  2714  007516  69                 	db	105	;'i'
  2715  007517  73                 	db	115	;'s'
  2716  007518  73                 	db	115	;'s'
  2717  007519  69                 	db	105	;'i'
  2718  00751A  6E                 	db	110	;'n'
  2719  00751B  67                 	db	103	;'g'
  2720  00751C  0D                 	db	13
  2721  00751D  0A                 	db	10
  2722  00751E  00                 	db	0
  2723  00751F                     STR_268:
  2724  00751F  20                 	db	32
  2725  007520  20                 	db	32
  2726  007521  20                 	db	32
  2727  007522  20                 	db	32
  2728  007523  20                 	db	32
  2729  007524  20                 	db	32
  2730  007525  20                 	db	32
  2731  007526  20                 	db	32
  2732  007527  20                 	db	32
  2733  007528  20                 	db	32
  2734  007529  20                 	db	32
  2735  00752A  4D                 	db	77	;'M'
  2736  00752B  6F                 	db	111	;'o'
  2737  00752C  64                 	db	100	;'d'
  2738  00752D  65                 	db	101	;'e'
  2739  00752E  73                 	db	115	;'s'
  2740  00752F  3A                 	db	58	;':'
  2741  007530  20                 	db	32
  2742  007531  76                 	db	118	;'v'
  2743  007532  65                 	db	101	;'e'
  2744  007533  72                 	db	114	;'r'
  2745  007534  62                 	db	98	;'b'
  2746  007535  6F                 	db	111	;'o'
  2747  007536  73                 	db	115	;'s'
  2748  007537  65                 	db	101	;'e'
  2749  007538  7C                 	db	124
  2750  007539  76                 	db	118	;'v'
  2751  00753A  73                 	db	115	;'s'
  2752  00753B  63                 	db	99	;'c'
  2753  00753C  70                 	db	112	;'p'
  2754  00753D  7C                 	db	124
  2755  00753E  73                 	db	115	;'s'
  2756  00753F  6C                 	db	108	;'l'
  2757  007540  63                 	db	99	;'c'
  2758  007541  61                 	db	97	;'a'
  2759  007542  6E                 	db	110	;'n'
  2760  007543  0D                 	db	13
  2761  007544  0A                 	db	10
  2762  007545  00                 	db	0
  2763  007546                     STR_114:
  2764  007546  2D                 	db	45
  2765  007547  45                 	db	69	;'E'
  2766  007548  52                 	db	82	;'R'
  2767  007549  52                 	db	82	;'R'
  2768  00754A  4F                 	db	79	;'O'
  2769  00754B  52                 	db	82	;'R'
  2770  00754C  20                 	db	32
  2771  00754D  2D                 	db	45
  2772  00754E  20                 	db	32
  2773  00754F  66                 	db	102	;'f'
  2774  007550  69                 	db	105	;'i'
  2775  007551  6C                 	db	108	;'l'
  2776  007552  74                 	db	116	;'t'
  2777  007553  65                 	db	101	;'e'
  2778  007554  72                 	db	114	;'r'
  2779  007555  20                 	db	32
  2780  007556  66                 	db	102	;'f'
  2781  007557  6F                 	db	111	;'o'
  2782  007558  72                 	db	114	;'r'
  2783  007559  20                 	db	32
  2784  00755A  74                 	db	116	;'t'
  2785  00755B  79                 	db	121	;'y'
  2786  00755C  70                 	db	112	;'p'
  2787  00755D  65                 	db	101	;'e'
  2788  00755E  20                 	db	32
  2789  00755F  69                 	db	105	;'i'
  2790  007560  73                 	db	115	;'s'
  2791  007561  20                 	db	32
  2792  007562  6D                 	db	109	;'m'
  2793  007563  69                 	db	105	;'i'
  2794  007564  73                 	db	115	;'s'
  2795  007565  73                 	db	115	;'s'
  2796  007566  69                 	db	105	;'i'
  2797  007567  6E                 	db	110	;'n'
  2798  007568  67                 	db	103	;'g'
  2799  007569  0D                 	db	13
  2800  00756A  0A                 	db	10
  2801  00756B  00                 	db	0
  2802  00756C                     STR_89:
  2803  00756C  2B                 	db	43
  2804  00756D  4F                 	db	79	;'O'
  2805  00756E  4B                 	db	75	;'K'
  2806  00756F  20                 	db	32
  2807  007570  2D                 	db	45
  2808  007571  20                 	db	32
  2809  007572  56                 	db	86	;'V'
  2810  007573  61                 	db	97	;'a'
  2811  007574  6C                 	db	108	;'l'
  2812  007575  75                 	db	117	;'u'
  2813  007576  65                 	db	101	;'e'
  2814  007577  20                 	db	32
  2815  007578  77                 	db	119	;'w'
  2816  007579  72                 	db	114	;'r'
  2817  00757A  69                 	db	105	;'i'
  2818  00757B  74                 	db	116	;'t'
  2819  00757C  74                 	db	116	;'t'
  2820  00757D  65                 	db	101	;'e'
  2821  00757E  6E                 	db	110	;'n'
  2822  00757F  20                 	db	32
  2823  007580  73                 	db	115	;'s'
  2824  007581  75                 	db	117	;'u'
  2825  007582  63                 	db	99	;'c'
  2826  007583  63                 	db	99	;'c'
  2827  007584  65                 	db	101	;'e'
  2828  007585  73                 	db	115	;'s'
  2829  007586  73                 	db	115	;'s'
  2830  007587  66                 	db	102	;'f'
  2831  007588  75                 	db	117	;'u'
  2832  007589  6C                 	db	108	;'l'
  2833  00758A  6C                 	db	108	;'l'
  2834  00758B  79                 	db	121	;'y'
  2835  00758C  20                 	db	32
  2836  00758D  66                 	db	102	;'f'
  2837  00758E  6F                 	db	111	;'o'
  2838  00758F  72                 	db	114	;'r'
  2839  007590  20                 	db	32
  2840  007591  00                 	db	0
  2841  007592                     STR_121:
  2842  007592  2D                 	db	45
  2843  007593  45                 	db	69	;'E'
  2844  007594  52                 	db	82	;'R'
  2845  007595  52                 	db	82	;'R'
  2846  007596  4F                 	db	79	;'O'
  2847  007597  52                 	db	82	;'R'
  2848  007598  20                 	db	32
  2849  007599  2D                 	db	45
  2850  00759A  20                 	db	32
  2851  00759B  4E                 	db	78	;'N'
  2852  00759C  6F                 	db	111	;'o'
  2853  00759D  20                 	db	32
  2854  00759E  6D                 	db	109	;'m'
  2855  00759F  61                 	db	97	;'a'
  2856  0075A0  73                 	db	115	;'s'
  2857  0075A1  6B                 	db	107	;'k'
  2858  0075A2  20                 	db	32
  2859  0075A3  6E                 	db	110	;'n'
  2860  0075A4  75                 	db	117	;'u'
  2861  0075A5  6D                 	db	109	;'m'
  2862  0075A6  62                 	db	98	;'b'
  2863  0075A7  65                 	db	101	;'e'
  2864  0075A8  72                 	db	114	;'r'
  2865  0075A9  20                 	db	32
  2866  0075AA  73                 	db	115	;'s'
  2867  0075AB  70                 	db	112	;'p'
  2868  0075AC  65                 	db	101	;'e'
  2869  0075AD  63                 	db	99	;'c'
  2870  0075AE  69                 	db	105	;'i'
  2871  0075AF  66                 	db	102	;'f'
  2872  0075B0  69                 	db	105	;'i'
  2873  0075B1  65                 	db	101	;'e'
  2874  0075B2  64                 	db	100	;'d'
  2875  0075B3  2E                 	db	46
  2876  0075B4  0D                 	db	13
  2877  0075B5  0A                 	db	10
  2878  0075B6  00                 	db	0
  2879  0075B7                     STR_1:
  2880  0075B7  0D                 	db	13
  2881  0075B8  0A                 	db	10
  2882  0075B9  46                 	db	70	;'F'
  2883  0075BA  72                 	db	114	;'r'
  2884  0075BB  61                 	db	97	;'a'
  2885  0075BC  6E                 	db	110	;'n'
  2886  0075BD  6B                 	db	107	;'k'
  2887  0075BE  66                 	db	102	;'f'
  2888  0075BF  75                 	db	117	;'u'
  2889  0075C0  72                 	db	114	;'r'
  2890  0075C1  74                 	db	116	;'t'
  2891  0075C2  20                 	db	32
  2892  0075C3  52                 	db	82	;'R'
  2893  0075C4  53                 	db	83	;'S'
  2894  0075C5  2D                 	db	45
  2895  0075C6  32                 	db	50	;'2'
  2896  0075C7  33                 	db	51	;'3'
  2897  0075C8  32                 	db	50	;'2'
  2898  0075C9  20                 	db	32
  2899  0075CA  43                 	db	67	;'C'
  2900  0075CB  41                 	db	65	;'A'
  2901  0075CC  4E                 	db	78	;'N'
  2902  0075CD  34                 	db	52	;'4'
  2903  0075CE  56                 	db	86	;'V'
  2904  0075CF  53                 	db	83	;'S'
  2905  0075D0  43                 	db	67	;'C'
  2906  0075D1  50                 	db	80	;'P'
  2907  0075D2  20                 	db	32
  2908  0075D3  6D                 	db	109	;'m'
  2909  0075D4  6F                 	db	111	;'o'
  2910  0075D5  64                 	db	100	;'d'
  2911  0075D6  75                 	db	117	;'u'
  2912  0075D7  6C                 	db	108	;'l'
  2913  0075D8  65                 	db	101	;'e'
  2914  0075D9  0D                 	db	13
  2915  0075DA  0A                 	db	10
  2916  0075DB  00                 	db	0
  2917  0075DC                     STR_125:
  2918  0075DC  2D                 	db	45
  2919  0075DD  45                 	db	69	;'E'
  2920  0075DE  52                 	db	82	;'R'
  2921  0075DF  52                 	db	82	;'R'
  2922  0075E0  4F                 	db	79	;'O'
  2923  0075E1  52                 	db	82	;'R'
  2924  0075E2  20                 	db	32
  2925  0075E3  2D                 	db	45
  2926  0075E4  20                 	db	32
  2927  0075E5  6D                 	db	109	;'m'
  2928  0075E6  61                 	db	97	;'a'
  2929  0075E7  73                 	db	115	;'s'
  2930  0075E8  6B                 	db	107	;'k'
  2931  0075E9  20                 	db	32
  2932  0075EA  66                 	db	102	;'f'
  2933  0075EB  6F                 	db	111	;'o'
  2934  0075EC  72                 	db	114	;'r'
  2935  0075ED  20                 	db	32
  2936  0075EE  63                 	db	99	;'c'
  2937  0075EF  6C                 	db	108	;'l'
  2938  0075F0  61                 	db	97	;'a'
  2939  0075F1  73                 	db	115	;'s'
  2940  0075F2  73                 	db	115	;'s'
  2941  0075F3  20                 	db	32
  2942  0075F4  69                 	db	105	;'i'
  2943  0075F5  73                 	db	115	;'s'
  2944  0075F6  20                 	db	32
  2945  0075F7  6D                 	db	109	;'m'
  2946  0075F8  69                 	db	105	;'i'
  2947  0075F9  73                 	db	115	;'s'
  2948  0075FA  73                 	db	115	;'s'
  2949  0075FB  69                 	db	105	;'i'
  2950  0075FC  6E                 	db	110	;'n'
  2951  0075FD  67                 	db	103	;'g'
  2952  0075FE  0D                 	db	13
  2953  0075FF  0A                 	db	10
  2954  007600  00                 	db	0
  2955  007601                     STR_127:
  2956  007601  2D                 	db	45
  2957  007602  45                 	db	69	;'E'
  2958  007603  52                 	db	82	;'R'
  2959  007604  52                 	db	82	;'R'
  2960  007605  4F                 	db	79	;'O'
  2961  007606  52                 	db	82	;'R'
  2962  007607  20                 	db	32
  2963  007608  2D                 	db	45
  2964  007609  20                 	db	32
  2965  00760A  6D                 	db	109	;'m'
  2966  00760B  61                 	db	97	;'a'
  2967  00760C  73                 	db	115	;'s'
  2968  00760D  6B                 	db	107	;'k'
  2969  00760E  20                 	db	32
  2970  00760F  66                 	db	102	;'f'
  2971  007610  6F                 	db	111	;'o'
  2972  007611  72                 	db	114	;'r'
  2973  007612  20                 	db	32
  2974  007613  74                 	db	116	;'t'
  2975  007614  79                 	db	121	;'y'
  2976  007615  70                 	db	112	;'p'
  2977  007616  65                 	db	101	;'e'
  2978  007617  20                 	db	32
  2979  007618  69                 	db	105	;'i'
  2980  007619  73                 	db	115	;'s'
  2981  00761A  20                 	db	32
  2982  00761B  6D                 	db	109	;'m'
  2983  00761C  69                 	db	105	;'i'
  2984  00761D  73                 	db	115	;'s'
  2985  00761E  73                 	db	115	;'s'
  2986  00761F  69                 	db	105	;'i'
  2987  007620  6E                 	db	110	;'n'
  2988  007621  67                 	db	103	;'g'
  2989  007622  0D                 	db	13
  2990  007623  0A                 	db	10
  2991  007624  00                 	db	0
  2992  007625                     STR_93:
  2993  007625  2D                 	db	45
  2994  007626  45                 	db	69	;'E'
  2995  007627  52                 	db	82	;'R'
  2996  007628  52                 	db	82	;'R'
  2997  007629  4F                 	db	79	;'O'
  2998  00762A  52                 	db	82	;'R'
  2999  00762B  20                 	db	32
  3000  00762C  2D                 	db	45
  3001  00762D  20                 	db	32
  3002  00762E  46                 	db	70	;'F'
  3003  00762F  61                 	db	97	;'a'
  3004  007630  69                 	db	105	;'i'
  3005  007631  6C                 	db	108	;'l'
  3006  007632  65                 	db	101	;'e'
  3007  007633  64                 	db	100	;'d'
  3008  007634  20                 	db	32
  3009  007635  74                 	db	116	;'t'
  3010  007636  6F                 	db	111	;'o'
  3011  007637  20                 	db	32
  3012  007638  77                 	db	119	;'w'
  3013  007639  72                 	db	114	;'r'
  3014  00763A  69                 	db	105	;'i'
  3015  00763B  74                 	db	116	;'t'
  3016  00763C  65                 	db	101	;'e'
  3017  00763D  20                 	db	32
  3018  00763E  76                 	db	118	;'v'
  3019  00763F  61                 	db	97	;'a'
  3020  007640  6C                 	db	108	;'l'
  3021  007641  75                 	db	117	;'u'
  3022  007642  65                 	db	101	;'e'
  3023  007643  20                 	db	32
  3024  007644  66                 	db	102	;'f'
  3025  007645  6F                 	db	111	;'o'
  3026  007646  72                 	db	114	;'r'
  3027  007647  20                 	db	32
  3028  007648  00                 	db	0
  3029  007649                     STR_3:
  3030  007649  68                 	db	104	;'h'
  3031  00764A  74                 	db	116	;'t'
  3032  00764B  74                 	db	116	;'t'
  3033  00764C  70                 	db	112	;'p'
  3034  00764D  3A                 	db	58	;':'
  3035  00764E  2F                 	db	47
  3036  00764F  2F                 	db	47
  3037  007650  77                 	db	119	;'w'
  3038  007651  77                 	db	119	;'w'
  3039  007652  77                 	db	119	;'w'
  3040  007653  2E                 	db	46
  3041  007654  70                 	db	112	;'p'
  3042  007655  61                 	db	97	;'a'
  3043  007656  72                 	db	114	;'r'
  3044  007657  61                 	db	97	;'a'
  3045  007658  64                 	db	100	;'d'
  3046  007659  69                 	db	105	;'i'
  3047  00765A  73                 	db	115	;'s'
  3048  00765B  65                 	db	101	;'e'
  3049  00765C  6F                 	db	111	;'o'
  3050  00765D  66                 	db	102	;'f'
  3051  00765E  74                 	db	116	;'t'
  3052  00765F  68                 	db	104	;'h'
  3053  007660  65                 	db	101	;'e'
  3054  007661  66                 	db	102	;'f'
  3055  007662  72                 	db	114	;'r'
  3056  007663  6F                 	db	111	;'o'
  3057  007664  67                 	db	103	;'g'
  3058  007665  2E                 	db	46
  3059  007666  63                 	db	99	;'c'
  3060  007667  6F                 	db	111	;'o'
  3061  007668  6D                 	db	109	;'m'
  3062  007669  0D                 	db	13
  3063  00766A  0A                 	db	10
  3064  00766B  00                 	db	0
  3065  00766C                     STR_261:
  3066  00766C  53                 	db	83	;'S'
  3067  00766D  45                 	db	69	;'E'
  3068  00766E  54                 	db	84	;'T'
  3069  00766F  20                 	db	32
  3070  007670  2D                 	db	45
  3071  007671  20                 	db	32
  3072  007672  50                 	db	80	;'P'
  3073  007673  65                 	db	101	;'e'
  3074  007674  72                 	db	114	;'r'
  3075  007675  73                 	db	115	;'s'
  3076  007676  69                 	db	105	;'i'
  3077  007677  73                 	db	115	;'s'
  3078  007678  74                 	db	116	;'t'
  3079  007679  65                 	db	101	;'e'
  3080  00767A  6E                 	db	110	;'n'
  3081  00767B  74                 	db	116	;'t'
  3082  00767C  20                 	db	32
  3083  00767D  66                 	db	102	;'f'
  3084  00767E  75                 	db	117	;'u'
  3085  00767F  6E                 	db	110	;'n'
  3086  007680  63                 	db	99	;'c'
  3087  007681  74                 	db	116	;'t'
  3088  007682  69                 	db	105	;'i'
  3089  007683  6F                 	db	111	;'o'
  3090  007684  6E                 	db	110	;'n'
  3091  007685  61                 	db	97	;'a'
  3092  007686  6C                 	db	108	;'l'
  3093  007687  69                 	db	105	;'i'
  3094  007688  74                 	db	116	;'t'
  3095  007689  79                 	db	121	;'y'
  3096  00768A  2E                 	db	46
  3097  00768B  0D                 	db	13
  3098  00768C  0A                 	db	10
  3099  00768D  00                 	db	0
  3100  00768E                     STR_250:
  3101  00768E  53                 	db	83	;'S'
  3102  00768F  54                 	db	84	;'T'
  3103  007690  41                 	db	65	;'A'
  3104  007691  54                 	db	84	;'T'
  3105  007692  20                 	db	32
  3106  007693  2D                 	db	45
  3107  007694  20                 	db	32
  3108  007695  44                 	db	68	;'D'
  3109  007696  69                 	db	105	;'i'
  3110  007697  73                 	db	115	;'s'
  3111  007698  70                 	db	112	;'p'
  3112  007699  6C                 	db	108	;'l'
  3113  00769A  61                 	db	97	;'a'
  3114  00769B  79                 	db	121	;'y'
  3115  00769C  20                 	db	32
  3116  00769D  43                 	db	67	;'C'
  3117  00769E  41                 	db	65	;'A'
  3118  00769F  4E                 	db	78	;'N'
  3119  0076A0  20                 	db	32
  3120  0076A1  73                 	db	115	;'s'
  3121  0076A2  74                 	db	116	;'t'
  3122  0076A3  61                 	db	97	;'a'
  3123  0076A4  74                 	db	116	;'t'
  3124  0076A5  69                 	db	105	;'i'
  3125  0076A6  73                 	db	115	;'s'
  3126  0076A7  74                 	db	116	;'t'
  3127  0076A8  69                 	db	105	;'i'
  3128  0076A9  63                 	db	99	;'c'
  3129  0076AA  73                 	db	115	;'s'
  3130  0076AB  2E                 	db	46
  3131  0076AC  0D                 	db	13
  3132  0076AD  0A                 	db	10
  3133  0076AE  00                 	db	0
  3134  0076AF                     STR_37:
  3135  0076AF  2D                 	db	45
  3136  0076B0  45                 	db	69	;'E'
  3137  0076B1  52                 	db	82	;'R'
  3138  0076B2  52                 	db	82	;'R'
  3139  0076B3  4F                 	db	79	;'O'
  3140  0076B4  52                 	db	82	;'R'
  3141  0076B5  20                 	db	32
  3142  0076B6  2D                 	db	45
  3143  0076B7  20                 	db	32
  3144  0076B8  46                 	db	70	;'F'
  3145  0076B9  61                 	db	97	;'a'
  3146  0076BA  69                 	db	105	;'i'
  3147  0076BB  6C                 	db	108	;'l'
  3148  0076BC  65                 	db	101	;'e'
  3149  0076BD  64                 	db	100	;'d'
  3150  0076BE  20                 	db	32
  3151  0076BF  74                 	db	116	;'t'
  3152  0076C0  6F                 	db	111	;'o'
  3153  0076C1  20                 	db	32
  3154  0076C2  73                 	db	115	;'s'
  3155  0076C3  65                 	db	101	;'e'
  3156  0076C4  6E                 	db	110	;'n'
  3157  0076C5  64                 	db	100	;'d'
  3158  0076C6  20                 	db	32
  3159  0076C7  65                 	db	101	;'e'
  3160  0076C8  76                 	db	118	;'v'
  3161  0076C9  65                 	db	101	;'e'
  3162  0076CA  6E                 	db	110	;'n'
  3163  0076CB  74                 	db	116	;'t'
  3164  0076CC  2E                 	db	46
  3165  0076CD  0D                 	db	13
  3166  0076CE  0A                 	db	10
  3167  0076CF  00                 	db	0
  3168  0076D0                     STR_161:
  3169  0076D0  2D                 	db	45
  3170  0076D1  45                 	db	69	;'E'
  3171  0076D2  52                 	db	82	;'R'
  3172  0076D3  52                 	db	82	;'R'
  3173  0076D4  4F                 	db	79	;'O'
  3174  0076D5  52                 	db	82	;'R'
  3175  0076D6  20                 	db	32
  3176  0076D7  2D                 	db	45
  3177  0076D8  20                 	db	32
  3178  0076D9  55                 	db	85	;'U'
  3179  0076DA  6E                 	db	110	;'n'
  3180  0076DB  6B                 	db	107	;'k'
  3181  0076DC  6E                 	db	110	;'n'
  3182  0076DD  6F                 	db	111	;'o'
  3183  0076DE  77                 	db	119	;'w'
  3184  0076DF  6E                 	db	110	;'n'
  3185  0076E0  20                 	db	32
  3186  0076E1  27                 	db	39
  3187  0076E2  53                 	db	83	;'S'
  3188  0076E3  45                 	db	69	;'E'
  3189  0076E4  54                 	db	84	;'T'
  3190  0076E5  27                 	db	39
  3191  0076E6  20                 	db	32
  3192  0076E7  63                 	db	99	;'c'
  3193  0076E8  6F                 	db	111	;'o'
  3194  0076E9  6D                 	db	109	;'m'
  3195  0076EA  6D                 	db	109	;'m'
  3196  0076EB  61                 	db	97	;'a'
  3197  0076EC  6E                 	db	110	;'n'
  3198  0076ED  64                 	db	100	;'d'
  3199  0076EE  0D                 	db	13
  3200  0076EF  0A                 	db	10
  3201  0076F0  00                 	db	0
  3202  0076F1                     STR_54:
  3203  0076F1  2D                 	db	45
  3204  0076F2  45                 	db	69	;'E'
  3205  0076F3  52                 	db	82	;'R'
  3206  0076F4  52                 	db	82	;'R'
  3207  0076F5  4F                 	db	79	;'O'
  3208  0076F6  52                 	db	82	;'R'
  3209  0076F7  20                 	db	32
  3210  0076F8  2D                 	db	45
  3211  0076F9  20                 	db	32
  3212  0076FA  4E                 	db	78	;'N'
  3213  0076FB  65                 	db	101	;'e'
  3214  0076FC  65                 	db	101	;'e'
  3215  0076FD  64                 	db	100	;'d'
  3216  0076FE  73                 	db	115	;'s'
  3217  0076FF  20                 	db	32
  3218  007700  5B                 	db	91	;'['
  3219  007701  70                 	db	112	;'p'
  3220  007702  61                 	db	97	;'a'
  3221  007703  67                 	db	103	;'g'
  3222  007704  65                 	db	101	;'e'
  3223  007705  3A                 	db	58	;':'
  3224  007706  5D                 	db	93	;']'
  3225  007707  72                 	db	114	;'r'
  3226  007708  65                 	db	101	;'e'
  3227  007709  67                 	db	103	;'g'
  3228  00770A  69                 	db	105	;'i'
  3229  00770B  73                 	db	115	;'s'
  3230  00770C  74                 	db	116	;'t'
  3231  00770D  65                 	db	101	;'e'
  3232  00770E  72                 	db	114	;'r'
  3233  00770F  0D                 	db	13
  3234  007710  0A                 	db	10
  3235  007711  00                 	db	0
  3236  007712                     STR_148:
  3237  007712  2B                 	db	43
  3238  007713  4F                 	db	79	;'O'
  3239  007714  4B                 	db	75	;'K'
  3240  007715  20                 	db	32
  3241  007716  2D                 	db	45
  3242  007717  20                 	db	32
  3243  007718  4D                 	db	77	;'M'
  3244  007719  6F                 	db	111	;'o'
  3245  00771A  64                 	db	100	;'d'
  3246  00771B  65                 	db	101	;'e'
  3247  00771C  20                 	db	32
  3248  00771D  69                 	db	105	;'i'
  3249  00771E  73                 	db	115	;'s'
  3250  00771F  20                 	db	32
  3251  007720  6E                 	db	110	;'n'
  3252  007721  6F                 	db	111	;'o'
  3253  007722  77                 	db	119	;'w'
  3254  007723  20                 	db	32
  3255  007724  56                 	db	86	;'V'
  3256  007725  53                 	db	83	;'S'
  3257  007726  43                 	db	67	;'C'
  3258  007727  50                 	db	80	;'P'
  3259  007728  20                 	db	32
  3260  007729  44                 	db	68	;'D'
  3261  00772A  72                 	db	114	;'r'
  3262  00772B  69                 	db	105	;'i'
  3263  00772C  76                 	db	118	;'v'
  3264  00772D  65                 	db	101	;'e'
  3265  00772E  72                 	db	114	;'r'
  3266  00772F  0D                 	db	13
  3267  007730  0A                 	db	10
  3268  007731  00                 	db	0
  3269  007732                     STR_7:
  3270  007732  57                 	db	87	;'W'
  3271  007733  69                 	db	105	;'i'
  3272  007734  6C                 	db	108	;'l'
  3273  007735  6C                 	db	108	;'l'
  3274  007736  20                 	db	32
  3275  007737  65                 	db	101	;'e'
  3276  007738  6E                 	db	110	;'n'
  3277  007739  74                 	db	116	;'t'
  3278  00773A  65                 	db	101	;'e'
  3279  00773B  72                 	db	114	;'r'
  3280  00773C  20                 	db	32
  3281  00773D  62                 	db	98	;'b'
  3282  00773E  6F                 	db	111	;'o'
  3283  00773F  6F                 	db	111	;'o'
  3284  007740  74                 	db	116	;'t'
  3285  007741  6C                 	db	108	;'l'
  3286  007742  6F                 	db	111	;'o'
  3287  007743  61                 	db	97	;'a'
  3288  007744  64                 	db	100	;'d'
  3289  007745  65                 	db	101	;'e'
  3290  007746  72                 	db	114	;'r'
  3291  007747  20                 	db	32
  3292  007748  6E                 	db	110	;'n'
  3293  007749  6F                 	db	111	;'o'
  3294  00774A  77                 	db	119	;'w'
  3295  00774B  2E                 	db	46
  3296  00774C  2E                 	db	46
  3297  00774D  2E                 	db	46
  3298  00774E  0D                 	db	13
  3299  00774F  0A                 	db	10
  3300  007750  00                 	db	0
  3301  007751                     STR_244:
  3302  007751  43                 	db	67	;'C'
  3303  007752  4C                 	db	76	;'L'
  3304  007753  4F                 	db	79	;'O'
  3305  007754  53                 	db	83	;'S'
  3306  007755  45                 	db	69	;'E'
  3307  007756  20                 	db	32
  3308  007757  2D                 	db	45
  3309  007758  20                 	db	32
  3310  007759  43                 	db	67	;'C'
  3311  00775A  6C                 	db	108	;'l'
  3312  00775B  6F                 	db	111	;'o'
  3313  00775C  73                 	db	115	;'s'
  3314  00775D  65                 	db	101	;'e'
  3315  00775E  20                 	db	32
  3316  00775F  43                 	db	67	;'C'
  3317  007760  41                 	db	65	;'A'
  3318  007761  4E                 	db	78	;'N'
  3319  007762  20                 	db	32
  3320  007763  69                 	db	105	;'i'
  3321  007764  6E                 	db	110	;'n'
  3322  007765  74                 	db	116	;'t'
  3323  007766  65                 	db	101	;'e'
  3324  007767  72                 	db	114	;'r'
  3325  007768  66                 	db	102	;'f'
  3326  007769  61                 	db	97	;'a'
  3327  00776A  63                 	db	99	;'c'
  3328  00776B  65                 	db	101	;'e'
  3329  00776C  2E                 	db	46
  3330  00776D  0D                 	db	13
  3331  00776E  0A                 	db	10
  3332  00776F  00                 	db	0
  3333  007770                     STR_5:
  3334  007770  54                 	db	84	;'T'
  3335  007771  65                 	db	101	;'e'
  3336  007772  6D                 	db	109	;'m'
  3337  007773  70                 	db	112	;'p'
  3338  007774  6F                 	db	111	;'o'
  3339  007775  72                 	db	114	;'r'
  3340  007776  61                 	db	97	;'a'
  3341  007777  72                 	db	114	;'r'
  3342  007778  79                 	db	121	;'y'
  3343  007779  20                 	db	32
  3344  00777A  76                 	db	118	;'v'
  3345  00777B  65                 	db	101	;'e'
  3346  00777C  72                 	db	114	;'r'
  3347  00777D  62                 	db	98	;'b'
  3348  00777E  6F                 	db	111	;'o'
  3349  00777F  73                 	db	115	;'s'
  3350  007780  65                 	db	101	;'e'
  3351  007781  20                 	db	32
  3352  007782  6D                 	db	109	;'m'
  3353  007783  6F                 	db	111	;'o'
  3354  007784  64                 	db	100	;'d'
  3355  007785  65                 	db	101	;'e'
  3356  007786  20                 	db	32
  3357  007787  73                 	db	115	;'s'
  3358  007788  65                 	db	101	;'e'
  3359  007789  74                 	db	116	;'t'
  3360  00778A  0D                 	db	13
  3361  00778B  0A                 	db	10
  3362  00778C  00                 	db	0
  3363  00778D                     STR_271:
  3364  00778D  0D                 	db	13
  3365  00778E  0A                 	db	10
  3366  00778F  4E                 	db	78	;'N'
  3367  007790  6F                 	db	111	;'o'
  3368  007791  64                 	db	100	;'d'
  3369  007792  65                 	db	101	;'e'
  3370  007793  20                 	db	32
  3371  007794  66                 	db	102	;'f'
  3372  007795  6F                 	db	111	;'o'
  3373  007796  75                 	db	117	;'u'
  3374  007797  6E                 	db	110	;'n'
  3375  007798  64                 	db	100	;'d'
  3376  007799  20                 	db	32
  3377  00779A  77                 	db	119	;'w'
  3378  00779B  69                 	db	105	;'i'
  3379  00779C  74                 	db	116	;'t'
  3380  00779D  68                 	db	104	;'h'
  3381  00779E  20                 	db	32
  3382  00779F  6E                 	db	110	;'n'
  3383  0077A0  6F                 	db	111	;'o'
  3384  0077A1  64                 	db	100	;'d'
  3385  0077A2  65                 	db	101	;'e'
  3386  0077A3  20                 	db	32
  3387  0077A4  69                 	db	105	;'i'
  3388  0077A5  64                 	db	100	;'d'
  3389  0077A6  20                 	db	32
  3390  0077A7  3D                 	db	61	;'='
  3391  0077A8  20                 	db	32
  3392  0077A9  00                 	db	0
  3393  0077AA                     STR_146:
  3394  0077AA  2B                 	db	43
  3395  0077AB  4F                 	db	79	;'O'
  3396  0077AC  4B                 	db	75	;'K'
  3397  0077AD  20                 	db	32
  3398  0077AE  2D                 	db	45
  3399  0077AF  20                 	db	32
  3400  0077B0  4D                 	db	77	;'M'
  3401  0077B1  6F                 	db	111	;'o'
  3402  0077B2  64                 	db	100	;'d'
  3403  0077B3  65                 	db	101	;'e'
  3404  0077B4  20                 	db	32
  3405  0077B5  69                 	db	105	;'i'
  3406  0077B6  73                 	db	115	;'s'
  3407  0077B7  20                 	db	32
  3408  0077B8  6E                 	db	110	;'n'
  3409  0077B9  6F                 	db	111	;'o'
  3410  0077BA  77                 	db	119	;'w'
  3411  0077BB  20                 	db	32
  3412  0077BC  76                 	db	118	;'v'
  3413  0077BD  65                 	db	101	;'e'
  3414  0077BE  72                 	db	114	;'r'
  3415  0077BF  62                 	db	98	;'b'
  3416  0077C0  6F                 	db	111	;'o'
  3417  0077C1  73                 	db	115	;'s'
  3418  0077C2  65                 	db	101	;'e'
  3419  0077C3  0D                 	db	13
  3420  0077C4  0A                 	db	10
  3421  0077C5  00                 	db	0
  3422  0077C6                     STR_103:
  3423  0077C6  2D                 	db	45
  3424  0077C7  45                 	db	69	;'E'
  3425  0077C8  52                 	db	82	;'R'
  3426  0077C9  52                 	db	82	;'R'
  3427  0077CA  4F                 	db	79	;'O'
  3428  0077CB  52                 	db	82	;'R'
  3429  0077CC  20                 	db	32
  3430  0077CD  2D                 	db	45
  3431  0077CE  20                 	db	32
  3432  0077CF  4E                 	db	78	;'N'
  3433  0077D0  6F                 	db	111	;'o'
  3434  0077D1  64                 	db	100	;'d'
  3435  0077D2  65                 	db	101	;'e'
  3436  0077D3  20                 	db	32
  3437  0077D4  6E                 	db	110	;'n'
  3438  0077D5  6F                 	db	111	;'o'
  3439  0077D6  74                 	db	116	;'t'
  3440  0077D7  20                 	db	32
  3441  0077D8  66                 	db	102	;'f'
  3442  0077D9  6F                 	db	111	;'o'
  3443  0077DA  75                 	db	117	;'u'
  3444  0077DB  6E                 	db	110	;'n'
  3445  0077DC  64                 	db	100	;'d'
  3446  0077DD  2E                 	db	46
  3447  0077DE  0D                 	db	13
  3448  0077DF  0A                 	db	10
  3449  0077E0  00                 	db	0
  3450  0077E1                     STR_239:
  3451  0077E1  42                 	db	66	;'B'
  3452  0077E2  4F                 	db	79	;'O'
  3453  0077E3  4F                 	db	79	;'O'
  3454  0077E4  54                 	db	84	;'T'
  3455  0077E5  20                 	db	32
  3456  0077E6  2D                 	db	45
  3457  0077E7  20                 	db	32
  3458  0077E8  45                 	db	69	;'E'
  3459  0077E9  6E                 	db	110	;'n'
  3460  0077EA  74                 	db	116	;'t'
  3461  0077EB  65                 	db	101	;'e'
  3462  0077EC  72                 	db	114	;'r'
  3463  0077ED  20                 	db	32
  3464  0077EE  62                 	db	98	;'b'
  3465  0077EF  6F                 	db	111	;'o'
  3466  0077F0  6F                 	db	111	;'o'
  3467  0077F1  74                 	db	116	;'t'
  3468  0077F2  6C                 	db	108	;'l'
  3469  0077F3  6F                 	db	111	;'o'
  3470  0077F4  61                 	db	97	;'a'
  3471  0077F5  64                 	db	100	;'d'
  3472  0077F6  65                 	db	101	;'e'
  3473  0077F7  72                 	db	114	;'r'
  3474  0077F8  2E                 	db	46
  3475  0077F9  0D                 	db	13
  3476  0077FA  0A                 	db	10
  3477  0077FB  00                 	db	0
  3478  0077FC                     STR_163:
  3479  0077FC  2D                 	db	45
  3480  0077FD  45                 	db	69	;'E'
  3481  0077FE  52                 	db	82	;'R'
  3482  0077FF  52                 	db	82	;'R'
  3483  007800  4F                 	db	79	;'O'
  3484  007801  52                 	db	82	;'R'
  3485  007802  20                 	db	32
  3486  007803  2D                 	db	45
  3487  007804  20                 	db	32
  3488  007805  55                 	db	85	;'U'
  3489  007806  6E                 	db	110	;'n'
  3490  007807  6B                 	db	107	;'k'
  3491  007808  6E                 	db	110	;'n'
  3492  007809  6F                 	db	111	;'o'
  3493  00780A  77                 	db	119	;'w'
  3494  00780B  6E                 	db	110	;'n'
  3495  00780C  20                 	db	32
  3496  00780D  63                 	db	99	;'c'
  3497  00780E  6F                 	db	111	;'o'
  3498  00780F  6D                 	db	109	;'m'
  3499  007810  6D                 	db	109	;'m'
  3500  007811  61                 	db	97	;'a'
  3501  007812  6E                 	db	110	;'n'
  3502  007813  64                 	db	100	;'d'
  3503  007814  0D                 	db	13
  3504  007815  0A                 	db	10
  3505  007816  00                 	db	0
  3506  007817                     STR_150:
  3507  007817  2B                 	db	43
  3508  007818  4F                 	db	79	;'O'
  3509  007819  4B                 	db	75	;'K'
  3510  00781A  20                 	db	32
  3511  00781B  2D                 	db	45
  3512  00781C  20                 	db	32
  3513  00781D  4D                 	db	77	;'M'
  3514  00781E  6F                 	db	111	;'o'
  3515  00781F  64                 	db	100	;'d'
  3516  007820  65                 	db	101	;'e'
  3517  007821  20                 	db	32
  3518  007822  69                 	db	105	;'i'
  3519  007823  73                 	db	115	;'s'
  3520  007824  20                 	db	32
  3521  007825  6E                 	db	110	;'n'
  3522  007826  6F                 	db	111	;'o'
  3523  007827  77                 	db	119	;'w'
  3524  007828  20                 	db	32
  3525  007829  53                 	db	83	;'S'
  3526  00782A  4C                 	db	76	;'L'
  3527  00782B  43                 	db	67	;'C'
  3528  00782C  41                 	db	65	;'A'
  3529  00782D  4E                 	db	78	;'N'
  3530  00782E  0D                 	db	13
  3531  00782F  0A                 	db	10
  3532  007830  00                 	db	0
  3533  007831                     STR_25:
  3534  007831  2B                 	db	43
  3535  007832  4F                 	db	79	;'O'
  3536  007833  4B                 	db	75	;'K'
  3537  007834  20                 	db	32
  3538  007835  2D                 	db	45
  3539  007836  20                 	db	32
  3540  007837  4C                 	db	76	;'L'
  3541  007838  69                 	db	105	;'i'
  3542  007839  73                 	db	115	;'s'
  3543  00783A  74                 	db	116	;'t'
  3544  00783B  65                 	db	101	;'e'
  3545  00783C  6E                 	db	110	;'n'
  3546  00783D  20                 	db	32
  3547  00783E  6F                 	db	111	;'o'
  3548  00783F  6E                 	db	110	;'n'
  3549  007840  6C                 	db	108	;'l'
  3550  007841  79                 	db	121	;'y'
  3551  007842  20                 	db	32
  3552  007843  6D                 	db	109	;'m'
  3553  007844  6F                 	db	111	;'o'
  3554  007845  64                 	db	100	;'d'
  3555  007846  65                 	db	101	;'e'
  3556  007847  0D                 	db	13
  3557  007848  0A                 	db	10
  3558  007849  00                 	db	0
  3559  00784A                     STR_223:
  3560  00784A  54                 	db	84	;'T'
  3561  00784B  72                 	db	114	;'r'
  3562  00784C  61                 	db	97	;'a'
  3563  00784D  6E                 	db	110	;'n'
  3564  00784E  73                 	db	115	;'s'
  3565  00784F  6D                 	db	109	;'m'
  3566  007850  69                 	db	105	;'i'
  3567  007851  74                 	db	116	;'t'
  3568  007852  20                 	db	32
  3569  007853  45                 	db	69	;'E'
  3570  007854  72                 	db	114	;'r'
  3571  007855  72                 	db	114	;'r'
  3572  007856  6F                 	db	111	;'o'
  3573  007857  72                 	db	114	;'r'
  3574  007858  20                 	db	32
  3575  007859  43                 	db	67	;'C'
  3576  00785A  6F                 	db	111	;'o'
  3577  00785B  75                 	db	117	;'u'
  3578  00785C  6E                 	db	110	;'n'
  3579  00785D  74                 	db	116	;'t'
  3580  00785E  65                 	db	101	;'e'
  3581  00785F  72                 	db	114	;'r'
  3582  007860  3A                 	db	58	;':'
  3583  007861  20                 	db	32
  3584  007862  00                 	db	0
  3585  007863                     STR_73:
  3586  007863  55                 	db	85	;'U'
  3587  007864  6E                 	db	110	;'n'
  3588  007865  61                 	db	97	;'a'
  3589  007866  62                 	db	98	;'b'
  3590  007867  6C                 	db	108	;'l'
  3591  007868  65                 	db	101	;'e'
  3592  007869  20                 	db	32
  3593  00786A  74                 	db	116	;'t'
  3594  00786B  6F                 	db	111	;'o'
  3595  00786C  20                 	db	32
  3596  00786D  72                 	db	114	;'r'
  3597  00786E  65                 	db	101	;'e'
  3598  00786F  61                 	db	97	;'a'
  3599  007870  64                 	db	100	;'d'
  3600  007871  20                 	db	32
  3601  007872  72                 	db	114	;'r'
  3602  007873  65                 	db	101	;'e'
  3603  007874  67                 	db	103	;'g'
  3604  007875  69                 	db	105	;'i'
  3605  007876  73                 	db	115	;'s'
  3606  007877  74                 	db	116	;'t'
  3607  007878  65                 	db	101	;'e'
  3608  007879  72                 	db	114	;'r'
  3609  00787A  20                 	db	32
  3610  00787B  00                 	db	0
  3611  00787C                     STR_247:
  3612  00787C  54                 	db	84	;'T'
  3613  00787D  58                 	db	88	;'X'
  3614  00787E  20                 	db	32
  3615  00787F  2D                 	db	45
  3616  007880  20                 	db	32
  3617  007881  53                 	db	83	;'S'
  3618  007882  65                 	db	101	;'e'
  3619  007883  6E                 	db	110	;'n'
  3620  007884  64                 	db	100	;'d'
  3621  007885  20                 	db	32
  3622  007886  43                 	db	67	;'C'
  3623  007887  41                 	db	65	;'A'
  3624  007888  4E                 	db	78	;'N'
  3625  007889  20                 	db	32
  3626  00788A  66                 	db	102	;'f'
  3627  00788B  72                 	db	114	;'r'
  3628  00788C  61                 	db	97	;'a'
  3629  00788D  6D                 	db	109	;'m'
  3630  00788E  65                 	db	101	;'e'
  3631  00788F  20                 	db	32
  3632  007890  2E                 	db	46
  3633  007891  0D                 	db	13
  3634  007892  0A                 	db	10
  3635  007893  00                 	db	0
  3636  007894                     STR_257:
  3637  007894  46                 	db	70	;'F'
  3638  007895  49                 	db	73	;'I'
  3639  007896  4C                 	db	76	;'L'
  3640  007897  54                 	db	84	;'T'
  3641  007898  45                 	db	69	;'E'
  3642  007899  52                 	db	82	;'R'
  3643  00789A  20                 	db	32
  3644  00789B  2D                 	db	45
  3645  00789C  20                 	db	32
  3646  00789D  53                 	db	83	;'S'
  3647  00789E  65                 	db	101	;'e'
  3648  00789F  74                 	db	116	;'t'
  3649  0078A0  20                 	db	32
  3650  0078A1  66                 	db	102	;'f'
  3651  0078A2  69                 	db	105	;'i'
  3652  0078A3  6C                 	db	108	;'l'
  3653  0078A4  74                 	db	116	;'t'
  3654  0078A5  65                 	db	101	;'e'
  3655  0078A6  72                 	db	114	;'r'
  3656  0078A7  20                 	db	32
  3657  0078A8  2E                 	db	46
  3658  0078A9  0D                 	db	13
  3659  0078AA  0A                 	db	10
  3660  0078AB  00                 	db	0
  3661  0078AC                     STR_52:
  3662  0078AC  2D                 	db	45
  3663  0078AD  45                 	db	69	;'E'
  3664  0078AE  52                 	db	82	;'R'
  3665  0078AF  52                 	db	82	;'R'
  3666  0078B0  4F                 	db	79	;'O'
  3667  0078B1  52                 	db	82	;'R'
  3668  0078B2  20                 	db	32
  3669  0078B3  2D                 	db	45
  3670  0078B4  20                 	db	32
  3671  0078B5  4E                 	db	78	;'N'
  3672  0078B6  65                 	db	101	;'e'
  3673  0078B7  65                 	db	101	;'e'
  3674  0078B8  64                 	db	100	;'d'
  3675  0078B9  73                 	db	115	;'s'
  3676  0078BA  20                 	db	32
  3677  0078BB  6E                 	db	110	;'n'
  3678  0078BC  6F                 	db	111	;'o'
  3679  0078BD  64                 	db	100	;'d'
  3680  0078BE  65                 	db	101	;'e'
  3681  0078BF  69                 	db	105	;'i'
  3682  0078C0  64                 	db	100	;'d'
  3683  0078C1  0D                 	db	13
  3684  0078C2  0A                 	db	10
  3685  0078C3  00                 	db	0
  3686  0078C4                     STR_28:
  3687  0078C4  2D                 	db	45
  3688  0078C5  45                 	db	69	;'E'
  3689  0078C6  52                 	db	82	;'R'
  3690  0078C7  52                 	db	82	;'R'
  3691  0078C8  4F                 	db	79	;'O'
  3692  0078C9  52                 	db	82	;'R'
  3693  0078CA  20                 	db	32
  3694  0078CB  2D                 	db	45
  3695  0078CC  20                 	db	32
  3696  0078CD  55                 	db	85	;'U'
  3697  0078CE  6E                 	db	110	;'n'
  3698  0078CF  6B                 	db	107	;'k'
  3699  0078D0  6E                 	db	110	;'n'
  3700  0078D1  6F                 	db	111	;'o'
  3701  0078D2  77                 	db	119	;'w'
  3702  0078D3  6E                 	db	110	;'n'
  3703  0078D4  20                 	db	32
  3704  0078D5  6D                 	db	109	;'m'
  3705  0078D6  6F                 	db	111	;'o'
  3706  0078D7  64                 	db	100	;'d'
  3707  0078D8  65                 	db	101	;'e'
  3708  0078D9  0D                 	db	13
  3709  0078DA  0A                 	db	10
  3710  0078DB  00                 	db	0
  3711  0078DC                     STR_88:
  3712  0078DC  2D                 	db	45
  3713  0078DD  45                 	db	69	;'E'
  3714  0078DE  52                 	db	82	;'R'
  3715  0078DF  52                 	db	82	;'R'
  3716  0078E0  4F                 	db	79	;'O'
  3717  0078E1  52                 	db	82	;'R'
  3718  0078E2  20                 	db	32
  3719  0078E3  2D                 	db	45
  3720  0078E4  20                 	db	32
  3721  0078E5  4E                 	db	78	;'N'
  3722  0078E6  65                 	db	101	;'e'
  3723  0078E7  65                 	db	101	;'e'
  3724  0078E8  64                 	db	100	;'d'
  3725  0078E9  20                 	db	32
  3726  0078EA  61                 	db	97	;'a'
  3727  0078EB  20                 	db	32
  3728  0078EC  76                 	db	118	;'v'
  3729  0078ED  61                 	db	97	;'a'
  3730  0078EE  6C                 	db	108	;'l'
  3731  0078EF  75                 	db	117	;'u'
  3732  0078F0  65                 	db	101	;'e'
  3733  0078F1  0D                 	db	13
  3734  0078F2  0A                 	db	10
  3735  0078F3  00                 	db	0
  3736  0078F4                     STR_230:
  3737  0078F4  52                 	db	82	;'R'
  3738  0078F5  65                 	db	101	;'e'
  3739  0078F6  63                 	db	99	;'c'
  3740  0078F7  65                 	db	101	;'e'
  3741  0078F8  69                 	db	105	;'i'
  3742  0078F9  76                 	db	118	;'v'
  3743  0078FA  65                 	db	101	;'e'
  3744  0078FB  20                 	db	32
  3745  0078FC  45                 	db	69	;'E'
  3746  0078FD  72                 	db	114	;'r'
  3747  0078FE  72                 	db	114	;'r'
  3748  0078FF  6F                 	db	111	;'o'
  3749  007900  72                 	db	114	;'r'
  3750  007901  20                 	db	32
  3751  007902  43                 	db	67	;'C'
  3752  007903  6F                 	db	111	;'o'
  3753  007904  75                 	db	117	;'u'
  3754  007905  6E                 	db	110	;'n'
  3755  007906  74                 	db	116	;'t'
  3756  007907  65                 	db	101	;'e'
  3757  007908  72                 	db	114	;'r'
  3758  007909  3A                 	db	58	;':'
  3759  00790A  20                 	db	32
  3760  00790B  00                 	db	0
  3761  00790C                     STR_215:
  3762  00790C  55                 	db	85	;'U'
  3763  00790D  41                 	db	65	;'A'
  3764  00790E  52                 	db	82	;'R'
  3765  00790F  54                 	db	84	;'T'
  3766  007910  20                 	db	32
  3767  007911  52                 	db	82	;'R'
  3768  007912  65                 	db	101	;'e'
  3769  007913  63                 	db	99	;'c'
  3770  007914  65                 	db	101	;'e'
  3771  007915  69                 	db	105	;'i'
  3772  007916  76                 	db	118	;'v'
  3773  007917  65                 	db	101	;'e'
  3774  007918  20                 	db	32
  3775  007919  6F                 	db	111	;'o'
  3776  00791A  76                 	db	118	;'v'
  3777  00791B  65                 	db	101	;'e'
  3778  00791C  72                 	db	114	;'r'
  3779  00791D  72                 	db	114	;'r'
  3780  00791E  75                 	db	117	;'u'
  3781  00791F  6E                 	db	110	;'n'
  3782  007920  73                 	db	115	;'s'
  3783  007921  3A                 	db	58	;':'
  3784  007922  20                 	db	32
  3785  007923  00                 	db	0
  3786  007924                     STR_211:
  3787  007924  43                 	db	67	;'C'
  3788  007925  41                 	db	65	;'A'
  3789  007926  4E                 	db	78	;'N'
  3790  007927  20                 	db	32
  3791  007928  54                 	db	84	;'T'
  3792  007929  72                 	db	114	;'r'
  3793  00792A  61                 	db	97	;'a'
  3794  00792B  6E                 	db	110	;'n'
  3795  00792C  73                 	db	115	;'s'
  3796  00792D  6D                 	db	109	;'m'
  3797  00792E  69                 	db	105	;'i'
  3798  00792F  74                 	db	116	;'t'
  3799  007930  20                 	db	32
  3800  007931  6F                 	db	111	;'o'
  3801  007932  76                 	db	118	;'v'
  3802  007933  65                 	db	101	;'e'
  3803  007934  72                 	db	114	;'r'
  3804  007935  72                 	db	114	;'r'
  3805  007936  75                 	db	117	;'u'
  3806  007937  6E                 	db	110	;'n'
  3807  007938  73                 	db	115	;'s'
  3808  007939  3A                 	db	58	;':'
  3809  00793A  20                 	db	32
  3810  00793B  00                 	db	0
  3811  00793C                     STR_249:
  3812  00793C  52                 	db	82	;'R'
  3813  00793D  58                 	db	88	;'X'
  3814  00793E  20                 	db	32
  3815  00793F  2D                 	db	45
  3816  007940  20                 	db	32
  3817  007941  52                 	db	82	;'R'
  3818  007942  65                 	db	101	;'e'
  3819  007943  61                 	db	97	;'a'
  3820  007944  64                 	db	100	;'d'
  3821  007945  20                 	db	32
  3822  007946  43                 	db	67	;'C'
  3823  007947  41                 	db	65	;'A'
  3824  007948  4E                 	db	78	;'N'
  3825  007949  20                 	db	32
  3826  00794A  66                 	db	102	;'f'
  3827  00794B  72                 	db	114	;'r'
  3828  00794C  61                 	db	97	;'a'
  3829  00794D  6D                 	db	109	;'m'
  3830  00794E  65                 	db	101	;'e'
  3831  00794F  2E                 	db	46
  3832  007950  0D                 	db	13
  3833  007951  0A                 	db	10
  3834  007952  00                 	db	0
  3835  007953                     STR_157:
  3836  007953  2B                 	db	43
  3837  007954  4F                 	db	79	;'O'
  3838  007955  4B                 	db	75	;'K'
  3839  007956  20                 	db	32
  3840  007957  2D                 	db	45
  3841  007958  20                 	db	32
  3842  007959  4C                 	db	76	;'L'
  3843  00795A  6F                 	db	111	;'o'
  3844  00795B  63                 	db	99	;'c'
  3845  00795C  61                 	db	97	;'a'
  3846  00795D  6C                 	db	108	;'l'
  3847  00795E  20                 	db	32
  3848  00795F  65                 	db	101	;'e'
  3849  007960  63                 	db	99	;'c'
  3850  007961  68                 	db	104	;'h'
  3851  007962  6F                 	db	111	;'o'
  3852  007963  20                 	db	32
  3853  007964  6F                 	db	111	;'o'
  3854  007965  66                 	db	102	;'f'
  3855  007966  66                 	db	102	;'f'
  3856  007967  0D                 	db	13
  3857  007968  0A                 	db	10
  3858  007969  00                 	db	0
  3859  00796A                     STR_207:
  3860  00796A  43                 	db	67	;'C'
  3861  00796B  41                 	db	65	;'A'
  3862  00796C  4E                 	db	78	;'N'
  3863  00796D  20                 	db	32
  3864  00796E  52                 	db	82	;'R'
  3865  00796F  65                 	db	101	;'e'
  3866  007970  63                 	db	99	;'c'
  3867  007971  65                 	db	101	;'e'
  3868  007972  69                 	db	105	;'i'
  3869  007973  76                 	db	118	;'v'
  3870  007974  65                 	db	101	;'e'
  3871  007975  20                 	db	32
  3872  007976  6F                 	db	111	;'o'
  3873  007977  76                 	db	118	;'v'
  3874  007978  65                 	db	101	;'e'
  3875  007979  72                 	db	114	;'r'
  3876  00797A  72                 	db	114	;'r'
  3877  00797B  75                 	db	117	;'u'
  3878  00797C  6E                 	db	110	;'n'
  3879  00797D  73                 	db	115	;'s'
  3880  00797E  3A                 	db	58	;':'
  3881  00797F  20                 	db	32
  3882  007980  00                 	db	0
  3883  007981                     STR_294:
  3884  007981  55                 	db	85	;'U'
  3885  007982  6E                 	db	110	;'n'
  3886  007983  6B                 	db	107	;'k'
  3887  007984  6E                 	db	110	;'n'
  3888  007985  6F                 	db	111	;'o'
  3889  007986  77                 	db	119	;'w'
  3890  007987  6E                 	db	110	;'n'
  3891  007988  20                 	db	32
  3892  007989  28                 	db	40
  3893  00798A  56                 	db	86	;'V'
  3894  00798B  65                 	db	101	;'e'
  3895  00798C  72                 	db	114	;'r'
  3896  00798D  62                 	db	98	;'b'
  3897  00798E  6F                 	db	111	;'o'
  3898  00798F  73                 	db	115	;'s'
  3899  007990  65                 	db	101	;'e'
  3900  007991  20                 	db	32
  3901  007992  75                 	db	117	;'u'
  3902  007993  73                 	db	115	;'s'
  3903  007994  65                 	db	101	;'e'
  3904  007995  64                 	db	100	;'d'
  3905  007996  29                 	db	41
  3906  007997  00                 	db	0
  3907  007998                     STR_24:
  3908  007998  2B                 	db	43
  3909  007999  4F                 	db	79	;'O'
  3910  00799A  4B                 	db	75	;'K'
  3911  00799B  20                 	db	32
  3912  00799C  2D                 	db	45
  3913  00799D  20                 	db	32
  3914  00799E  4C                 	db	76	;'L'
  3915  00799F  6F                 	db	111	;'o'
  3916  0079A0  6F                 	db	111	;'o'
  3917  0079A1  70                 	db	112	;'p'
  3918  0079A2  62                 	db	98	;'b'
  3919  0079A3  61                 	db	97	;'a'
  3920  0079A4  63                 	db	99	;'c'
  3921  0079A5  6B                 	db	107	;'k'
  3922  0079A6  20                 	db	32
  3923  0079A7  6D                 	db	109	;'m'
  3924  0079A8  6F                 	db	111	;'o'
  3925  0079A9  64                 	db	100	;'d'
  3926  0079AA  65                 	db	101	;'e'
  3927  0079AB  0D                 	db	13
  3928  0079AC  0A                 	db	10
  3929  0079AD  00                 	db	0
  3930  0079AE                     STR_155:
  3931  0079AE  2B                 	db	43
  3932  0079AF  4F                 	db	79	;'O'
  3933  0079B0  4B                 	db	75	;'K'
  3934  0079B1  20                 	db	32
  3935  0079B2  2D                 	db	45
  3936  0079B3  20                 	db	32
  3937  0079B4  4C                 	db	76	;'L'
  3938  0079B5  6F                 	db	111	;'o'
  3939  0079B6  63                 	db	99	;'c'
  3940  0079B7  61                 	db	97	;'a'
  3941  0079B8  6C                 	db	108	;'l'
  3942  0079B9  20                 	db	32
  3943  0079BA  65                 	db	101	;'e'
  3944  0079BB  63                 	db	99	;'c'
  3945  0079BC  68                 	db	104	;'h'
  3946  0079BD  6F                 	db	111	;'o'
  3947  0079BE  20                 	db	32
  3948  0079BF  6F                 	db	111	;'o'
  3949  0079C0  6E                 	db	110	;'n'
  3950  0079C1  0D                 	db	13
  3951  0079C2  0A                 	db	10
  3952  0079C3  00                 	db	0
  3953  0079C4                     STR_199:
  3954  0079C4  52                 	db	82	;'R'
  3955  0079C5  65                 	db	101	;'e'
  3956  0079C6  63                 	db	99	;'c'
  3957  0079C7  65                 	db	101	;'e'
  3958  0079C8  69                 	db	105	;'i'
  3959  0079C9  76                 	db	118	;'v'
  3960  0079CA  65                 	db	101	;'e'
  3961  0079CB  64                 	db	100	;'d'
  3962  0079CC  20                 	db	32
  3963  0079CD  43                 	db	67	;'C'
  3964  0079CE  41                 	db	65	;'A'
  3965  0079CF  4E                 	db	78	;'N'
  3966  0079D0  20                 	db	32
  3967  0079D1  66                 	db	102	;'f'
  3968  0079D2  72                 	db	114	;'r'
  3969  0079D3  61                 	db	97	;'a'
  3970  0079D4  6D                 	db	109	;'m'
  3971  0079D5  65                 	db	101	;'e'
  3972  0079D6  73                 	db	115	;'s'
  3973  0079D7  3A                 	db	58	;':'
  3974  0079D8  20                 	db	32
  3975  0079D9  00                 	db	0
  3976  0079DA                     STR_203:
  3977  0079DA  52                 	db	82	;'R'
  3978  0079DB  65                 	db	101	;'e'
  3979  0079DC  63                 	db	99	;'c'
  3980  0079DD  65                 	db	101	;'e'
  3981  0079DE  69                 	db	105	;'i'
  3982  0079DF  76                 	db	118	;'v'
  3983  0079E0  65                 	db	101	;'e'
  3984  0079E1  64                 	db	100	;'d'
  3985  0079E2  20                 	db	32
  3986  0079E3  43                 	db	67	;'C'
  3987  0079E4  41                 	db	65	;'A'
  3988  0079E5  4E                 	db	78	;'N'
  3989  0079E6  20                 	db	32
  3990  0079E7  62                 	db	98	;'b'
  3991  0079E8  79                 	db	121	;'y'
  3992  0079E9  74                 	db	116	;'t'
  3993  0079EA  65                 	db	101	;'e'
  3994  0079EB  73                 	db	115	;'s'
  3995  0079EC  3A                 	db	58	;':'
  3996  0079ED  20                 	db	32
  3997  0079EE  00                 	db	0
  3998  0079EF                     STR_259:
  3999  0079EF  4D                 	db	77	;'M'
  4000  0079F0  41                 	db	65	;'A'
  4001  0079F1  53                 	db	83	;'S'
  4002  0079F2  4B                 	db	75	;'K'
  4003  0079F3  20                 	db	32
  4004  0079F4  2D                 	db	45
  4005  0079F5  20                 	db	32
  4006  0079F6  53                 	db	83	;'S'
  4007  0079F7  65                 	db	101	;'e'
  4008  0079F8  74                 	db	116	;'t'
  4009  0079F9  20                 	db	32
  4010  0079FA  6D                 	db	109	;'m'
  4011  0079FB  61                 	db	97	;'a'
  4012  0079FC  73                 	db	115	;'s'
  4013  0079FD  6B                 	db	107	;'k'
  4014  0079FE  20                 	db	32
  4015  0079FF  2E                 	db	46
  4016  007A00  0D                 	db	13
  4017  007A01  0A                 	db	10
  4018  007A02  00                 	db	0
  4019  007A03                     STR_164:
  4020  007A03  4A                 	db	74	;'J'
  4021  007A04  46                 	db	70	;'F'
  4022  007A05  72                 	db	114	;'r'
  4023  007A06  61                 	db	97	;'a'
  4024  007A07  6E                 	db	110	;'n'
  4025  007A08  6B                 	db	107	;'k'
  4026  007A09  66                 	db	102	;'f'
  4027  007A0A  75                 	db	117	;'u'
  4028  007A0B  72                 	db	114	;'r'
  4029  007A0C  74                 	db	116	;'t'
  4030  007A0D  20                 	db	32
  4031  007A0E  52                 	db	82	;'R'
  4032  007A0F  53                 	db	83	;'S'
  4033  007A10  2D                 	db	45
  4034  007A11  32                 	db	50	;'2'
  4035  007A12  33                 	db	51	;'3'
  4036  007A13  32                 	db	50	;'2'
  4037  007A14  0D                 	db	13
  4038  007A15  0A                 	db	10
  4039  007A16  00                 	db	0
  4040  007A17                     STR_26:
  4041  007A17  2B                 	db	43
  4042  007A18  4F                 	db	79	;'O'
  4043  007A19  4B                 	db	75	;'K'
  4044  007A1A  20                 	db	32
  4045  007A1B  2D                 	db	45
  4046  007A1C  20                 	db	32
  4047  007A1D  43                 	db	67	;'C'
  4048  007A1E  6C                 	db	108	;'l'
  4049  007A1F  6F                 	db	111	;'o'
  4050  007A20  73                 	db	115	;'s'
  4051  007A21  65                 	db	101	;'e'
  4052  007A22  64                 	db	100	;'d'
  4053  007A23  20                 	db	32
  4054  007A24  6D                 	db	109	;'m'
  4055  007A25  6F                 	db	111	;'o'
  4056  007A26  64                 	db	100	;'d'
  4057  007A27  65                 	db	101	;'e'
  4058  007A28  0D                 	db	13
  4059  007A29  0A                 	db	10
  4060  007A2A  00                 	db	0
  4061  007A2B                     STR_21:
  4062  007A2B  2B                 	db	43
  4063  007A2C  4F                 	db	79	;'O'
  4064  007A2D  4B                 	db	75	;'K'
  4065  007A2E  20                 	db	32
  4066  007A2F  2D                 	db	45
  4067  007A30  20                 	db	32
  4068  007A31  4E                 	db	78	;'N'
  4069  007A32  6F                 	db	111	;'o'
  4070  007A33  72                 	db	114	;'r'
  4071  007A34  6D                 	db	109	;'m'
  4072  007A35  61                 	db	97	;'a'
  4073  007A36  6C                 	db	108	;'l'
  4074  007A37  20                 	db	32
  4075  007A38  6D                 	db	109	;'m'
  4076  007A39  6F                 	db	111	;'o'
  4077  007A3A  64                 	db	100	;'d'
  4078  007A3B  65                 	db	101	;'e'
  4079  007A3C  0D                 	db	13
  4080  007A3D  0A                 	db	10
  4081  007A3E  00                 	db	0
  4082  007A3F                     STR_22:
  4083  007A3F  2B                 	db	43
  4084  007A40  4F                 	db	79	;'O'
  4085  007A41  4B                 	db	75	;'K'
  4086  007A42  20                 	db	32
  4087  007A43  2D                 	db	45
  4088  007A44  20                 	db	32
  4089  007A45  53                 	db	83	;'S'
  4090  007A46  69                 	db	105	;'i'
  4091  007A47  6C                 	db	108	;'l'
  4092  007A48  65                 	db	101	;'e'
  4093  007A49  6E                 	db	110	;'n'
  4094  007A4A  74                 	db	116	;'t'
  4095  007A4B  20                 	db	32
  4096  007A4C  6D                 	db	109	;'m'
  4097  007A4D  6F                 	db	111	;'o'
  4098  007A4E  64                 	db	100	;'d'
  4099  007A4F  65                 	db	101	;'e'
  4100  007A50  0D                 	db	13
  4101  007A51  0A                 	db	10
  4102  007A52  00                 	db	0
  4103  007A53                     STR_99:
  4104  007A53  49                 	db	73	;'I'
  4105  007A54  6E                 	db	110	;'n'
  4106  007A55  66                 	db	102	;'f'
  4107  007A56  6F                 	db	111	;'o'
  4108  007A57  20                 	db	32
  4109  007A58  66                 	db	102	;'f'
  4110  007A59  6F                 	db	111	;'o'
  4111  007A5A  72                 	db	114	;'r'
  4112  007A5B  20                 	db	32
  4113  007A5C  6E                 	db	110	;'n'
  4114  007A5D  6F                 	db	111	;'o'
  4115  007A5E  64                 	db	100	;'d'
  4116  007A5F  65                 	db	101	;'e'
  4117  007A60  20                 	db	32
  4118  007A61  69                 	db	105	;'i'
  4119  007A62  64                 	db	100	;'d'
  4120  007A63  20                 	db	32
  4121  007A64  3D                 	db	61	;'='
  4122  007A65  20                 	db	32
  4123  007A66  00                 	db	0
  4124  007A67                     STR_283:
  4125  007A67  46                 	db	70	;'F'
  4126  007A68  69                 	db	105	;'i'
  4127  007A69  72                 	db	114	;'r'
  4128  007A6A  6D                 	db	109	;'m'
  4129  007A6B  77                 	db	119	;'w'
  4130  007A6C  61                 	db	97	;'a'
  4131  007A6D  72                 	db	114	;'r'
  4132  007A6E  65                 	db	101	;'e'
  4133  007A6F  20                 	db	32
  4134  007A70  76                 	db	118	;'v'
  4135  007A71  65                 	db	101	;'e'
  4136  007A72  72                 	db	114	;'r'
  4137  007A73  73                 	db	115	;'s'
  4138  007A74  69                 	db	105	;'i'
  4139  007A75  6F                 	db	111	;'o'
  4140  007A76  6E                 	db	110	;'n'
  4141  007A77  20                 	db	32
  4142  007A78  3D                 	db	61	;'='
  4143  007A79  20                 	db	32
  4144  007A7A  00                 	db	0
  4145  007A7B                     STR_23:
  4146  007A7B  2B                 	db	43
  4147  007A7C  4F                 	db	79	;'O'
  4148  007A7D  4B                 	db	75	;'K'
  4149  007A7E  20                 	db	32
  4150  007A7F  2D                 	db	45
  4151  007A80  20                 	db	32
  4152  007A81  53                 	db	83	;'S'
  4153  007A82  6C                 	db	108	;'l'
  4154  007A83  65                 	db	101	;'e'
  4155  007A84  65                 	db	101	;'e'
  4156  007A85  70                 	db	112	;'p'
  4157  007A86  20                 	db	32
  4158  007A87  6D                 	db	109	;'m'
  4159  007A88  6F                 	db	111	;'o'
  4160  007A89  64                 	db	100	;'d'
  4161  007A8A  65                 	db	101	;'e'
  4162  007A8B  0D                 	db	13
  4163  007A8C  0A                 	db	10
  4164  007A8D  00                 	db	0
  4165  007A8E                     STR_27:
  4166  007A8E  2B                 	db	43
  4167  007A8F  4F                 	db	79	;'O'
  4168  007A90  4B                 	db	75	;'K'
  4169  007A91  20                 	db	32
  4170  007A92  2D                 	db	45
  4171  007A93  20                 	db	32
  4172  007A94  42                 	db	66	;'B'
  4173  007A95  69                 	db	105	;'i'
  4174  007A96  74                 	db	116	;'t'
  4175  007A97  73                 	db	115	;'s'
  4176  007A98  20                 	db	32
  4177  007A99  6D                 	db	109	;'m'
  4178  007A9A  6F                 	db	111	;'o'
  4179  007A9B  64                 	db	100	;'d'
  4180  007A9C  65                 	db	101	;'e'
  4181  007A9D  0D                 	db	13
  4182  007A9E  0A                 	db	10
  4183  007A9F  00                 	db	0
  4184  007AA0                     STR_40:
  4185  007AA0  2B                 	db	43
  4186  007AA1  4F                 	db	79	;'O'
  4187  007AA2  4B                 	db	75	;'K'
  4188  007AA3  20                 	db	32
  4189  007AA4  2D                 	db	45
  4190  007AA5  20                 	db	32
  4191  007AA6  6E                 	db	110	;'n'
  4192  007AA7  6F                 	db	111	;'o'
  4193  007AA8  20                 	db	32
  4194  007AA9  65                 	db	101	;'e'
  4195  007AAA  76                 	db	118	;'v'
  4196  007AAB  65                 	db	101	;'e'
  4197  007AAC  6E                 	db	110	;'n'
  4198  007AAD  74                 	db	116	;'t'
  4199  007AAE  73                 	db	115	;'s'
  4200  007AAF  0D                 	db	13
  4201  007AB0  0A                 	db	10
  4202  007AB1  00                 	db	0
  4203  007AB2                     STR_191:
  4204  007AB2  53                 	db	83	;'S'
  4205  007AB3  65                 	db	101	;'e'
  4206  007AB4  6E                 	db	110	;'n'
  4207  007AB5  74                 	db	116	;'t'
  4208  007AB6  20                 	db	32
  4209  007AB7  43                 	db	67	;'C'
  4210  007AB8  41                 	db	65	;'A'
  4211  007AB9  4E                 	db	78	;'N'
  4212  007ABA  20                 	db	32
  4213  007ABB  66                 	db	102	;'f'
  4214  007ABC  72                 	db	114	;'r'
  4215  007ABD  61                 	db	97	;'a'
  4216  007ABE  6D                 	db	109	;'m'
  4217  007ABF  65                 	db	101	;'e'
  4218  007AC0  73                 	db	115	;'s'
  4219  007AC1  3A                 	db	58	;':'
  4220  007AC2  20                 	db	32
  4221  007AC3  00                 	db	0
  4222  007AC4                     STR_296:
  4223  007AC4  30                 	db	48	;'0'
  4224  007AC5  31                 	db	49	;'1'
  4225  007AC6  32                 	db	50	;'2'
  4226  007AC7  33                 	db	51	;'3'
  4227  007AC8  34                 	db	52	;'4'
  4228  007AC9  35                 	db	53	;'5'
  4229  007ACA  36                 	db	54	;'6'
  4230  007ACB  37                 	db	55	;'7'
  4231  007ACC  38                 	db	56	;'8'
  4232  007ACD  39                 	db	57	;'9'
  4233  007ACE  41                 	db	65	;'A'
  4234  007ACF  42                 	db	66	;'B'
  4235  007AD0  43                 	db	67	;'C'
  4236  007AD1  44                 	db	68	;'D'
  4237  007AD2  45                 	db	69	;'E'
  4238  007AD3  46                 	db	70	;'F'
  4239  007AD4  00                 	db	0
  4240  007AD5                     STR_297:
  4241  007AD5  30                 	db	48	;'0'
  4242  007AD6  31                 	db	49	;'1'
  4243  007AD7  32                 	db	50	;'2'
  4244  007AD8  33                 	db	51	;'3'
  4245  007AD9  34                 	db	52	;'4'
  4246  007ADA  35                 	db	53	;'5'
  4247  007ADB  36                 	db	54	;'6'
  4248  007ADC  37                 	db	55	;'7'
  4249  007ADD  38                 	db	56	;'8'
  4250  007ADE  39                 	db	57	;'9'
  4251  007ADF  61                 	db	97	;'a'
  4252  007AE0  62                 	db	98	;'b'
  4253  007AE1  63                 	db	99	;'c'
  4254  007AE2  64                 	db	100	;'d'
  4255  007AE3  65                 	db	101	;'e'
  4256  007AE4  66                 	db	102	;'f'
  4257  007AE5  00                 	db	0
  4258  007AE6                     STR_275:
  4259  007AE6  20                 	db	32
  4260  007AE7  6E                 	db	110	;'n'
  4261  007AE8  6F                 	db	111	;'o'
  4262  007AE9  64                 	db	100	;'d'
  4263  007AEA  65                 	db	101	;'e'
  4264  007AEB  28                 	db	40
  4265  007AEC  73                 	db	115	;'s'
  4266  007AED  29                 	db	41
  4267  007AEE  20                 	db	32
  4268  007AEF  66                 	db	102	;'f'
  4269  007AF0  6F                 	db	111	;'o'
  4270  007AF1  75                 	db	117	;'u'
  4271  007AF2  6E                 	db	110	;'n'
  4272  007AF3  64                 	db	100	;'d'
  4273  007AF4  0D                 	db	13
  4274  007AF5  0A                 	db	10
  4275  007AF6  00                 	db	0
  4276  007AF7                     STR_195:
  4277  007AF7  53                 	db	83	;'S'
  4278  007AF8  65                 	db	101	;'e'
  4279  007AF9  6E                 	db	110	;'n'
  4280  007AFA  74                 	db	116	;'t'
  4281  007AFB  20                 	db	32
  4282  007AFC  43                 	db	67	;'C'
  4283  007AFD  41                 	db	65	;'A'
  4284  007AFE  4E                 	db	78	;'N'
  4285  007AFF  20                 	db	32
  4286  007B00  62                 	db	98	;'b'
  4287  007B01  79                 	db	121	;'y'
  4288  007B02  74                 	db	116	;'t'
  4289  007B03  65                 	db	101	;'e'
  4290  007B04  73                 	db	115	;'s'
  4291  007B05  3A                 	db	58	;':'
  4292  007B06  20                 	db	32
  4293  007B07  00                 	db	0
  4294  007B08                     STR_70:
  4295  007B08  2D                 	db	45
  4296  007B09  45                 	db	69	;'E'
  4297  007B0A  52                 	db	82	;'R'
  4298  007B0B  52                 	db	82	;'R'
  4299  007B0C  4F                 	db	79	;'O'
  4300  007B0D  52                 	db	82	;'R'
  4301  007B0E  20                 	db	32
  4302  007B0F  2D                 	db	45
  4303  007B10  20                 	db	32
  4304  007B11  6E                 	db	110	;'n'
  4305  007B12  6F                 	db	111	;'o'
  4306  007B13  64                 	db	100	;'d'
  4307  007B14  65                 	db	101	;'e'
  4308  007B15  69                 	db	105	;'i'
  4309  007B16  64                 	db	100	;'d'
  4310  007B17  3D                 	db	61	;'='
  4311  007B18  00                 	db	0
  4312  007B19                     STR_59:
  4313  007B19  56                 	db	86	;'V'
  4314  007B1A  61                 	db	97	;'a'
  4315  007B1B  6C                 	db	108	;'l'
  4316  007B1C  75                 	db	117	;'u'
  4317  007B1D  65                 	db	101	;'e'
  4318  007B1E  20                 	db	32
  4319  007B1F  66                 	db	102	;'f'
  4320  007B20  6F                 	db	111	;'o'
  4321  007B21  72                 	db	114	;'r'
  4322  007B22  20                 	db	32
  4323  007B23  72                 	db	114	;'r'
  4324  007B24  65                 	db	101	;'e'
  4325  007B25  67                 	db	103	;'g'
  4326  007B26  20                 	db	32
  4327  007B27  00                 	db	0
  4328  007B28                     STR_281:
  4329  007B28  4D                 	db	77	;'M'
  4330  007B29  44                 	db	68	;'D'
  4331  007B2A  46                 	db	70	;'F'
  4332  007B2B  20                 	db	32
  4333  007B2C  3D                 	db	61	;'='
  4334  007B2D  20                 	db	32
  4335  007B2E  68                 	db	104	;'h'
  4336  007B2F  74                 	db	116	;'t'
  4337  007B30  74                 	db	116	;'t'
  4338  007B31  70                 	db	112	;'p'
  4339  007B32  3A                 	db	58	;':'
  4340  007B33  2F                 	db	47
  4341  007B34  2F                 	db	47
  4342  007B35  00                 	db	0
  4343  007B36                     STR_56:
  4344  007B36  2B                 	db	43
  4345  007B37  4F                 	db	79	;'O'
  4346  007B38  4B                 	db	75	;'K'
  4347  007B39  20                 	db	32
  4348  007B3A  2D                 	db	45
  4349  007B3B  20                 	db	32
  4350  007B3C  6E                 	db	110	;'n'
  4351  007B3D  6F                 	db	111	;'o'
  4352  007B3E  64                 	db	100	;'d'
  4353  007B3F  65                 	db	101	;'e'
  4354  007B40  69                 	db	105	;'i'
  4355  007B41  64                 	db	100	;'d'
  4356  007B42  3D                 	db	61	;'='
  4357  007B43  00                 	db	0
  4358  007B44                     STR_291:
  4359  007B44  56                 	db	86	;'V'
  4360  007B45  53                 	db	83	;'S'
  4361  007B46  43                 	db	67	;'C'
  4362  007B47  50                 	db	80	;'P'
  4363  007B48  20                 	db	32
  4364  007B49  44                 	db	68	;'D'
  4365  007B4A  72                 	db	114	;'r'
  4366  007B4B  69                 	db	105	;'i'
  4367  007B4C  76                 	db	118	;'v'
  4368  007B4D  65                 	db	101	;'e'
  4369  007B4E  72                 	db	114	;'r'
  4370  007B4F  00                 	db	0
  4371  007B50                     STR_136:
  4372  007B50  52                 	db	82	;'R'
  4373  007B51  57                 	db	87	;'W'
  4374  007B52  54                 	db	84	;'T'
  4375  007B53  49                 	db	73	;'I'
  4376  007B54  4D                 	db	77	;'M'
  4377  007B55  45                 	db	69	;'E'
  4378  007B56  4F                 	db	79	;'O'
  4379  007B57  55                 	db	85	;'U'
  4380  007B58  54                 	db	84	;'T'
  4381  007B59  20                 	db	32
  4382  007B5A  00                 	db	0
  4383  007B5B                     STR_189:
  4384  007B5B  2C                 	db	44
  4385  007B5C  44                 	db	68	;'D'
  4386  007B5D  61                 	db	97	;'a'
  4387  007B5E  74                 	db	116	;'t'
  4388  007B5F  61                 	db	97	;'a'
  4389  007B60  3D                 	db	61	;'='
  4390  007B61  6E                 	db	110	;'n'
  4391  007B62  6F                 	db	111	;'o'
  4392  007B63  6E                 	db	110	;'n'
  4393  007B64  65                 	db	101	;'e'
  4394  007B65  00                 	db	0
  4395  007B66                     STR_57:
  4396  007B66  30                 	db	48	;'0'
  4397  007B67  78                 	db	120	;'x'
  4398  007B68  25                 	db	37
  4399  007B69  30                 	db	48	;'0'
  4400  007B6A  32                 	db	50	;'2'
  4401  007B6B  58                 	db	88	;'X'
  4402  007B6C  20                 	db	32
  4403  007B6D  2D                 	db	45
  4404  007B6E  20                 	db	32
  4405  007B6F  00                 	db	0
  4406  007B70                     STR_287:
  4407  007B70  56                 	db	86	;'V'
  4408  007B71  65                 	db	101	;'e'
  4409  007B72  72                 	db	114	;'r'
  4410  007B73  73                 	db	115	;'s'
  4411  007B74  69                 	db	105	;'i'
  4412  007B75  6F                 	db	111	;'o'
  4413  007B76  6E                 	db	110	;'n'
  4414  007B77  3A                 	db	58	;':'
  4415  007B78  20                 	db	32
  4416  007B79  00                 	db	0
  4417  007B7A                     STR_293:
  4418  007B7A  56                 	db	86	;'V'
  4419  007B7B  53                 	db	83	;'S'
  4420  007B7C  43                 	db	67	;'C'
  4421  007B7D  50                 	db	80	;'P'
  4422  007B7E  20                 	db	32
  4423  007B7F  4E                 	db	78	;'N'
  4424  007B80  6F                 	db	111	;'o'
  4425  007B81  64                 	db	100	;'d'
  4426  007B82  65                 	db	101	;'e'
  4427  007B83  00                 	db	0
  4428  007B84                     STR_292:
  4429  007B84  53                 	db	83	;'S'
  4430  007B85  4C                 	db	76	;'L'
  4431  007B86  20                 	db	32
  4432  007B87  44                 	db	68	;'D'
  4433  007B88  72                 	db	114	;'r'
  4434  007B89  69                 	db	105	;'i'
  4435  007B8A  76                 	db	118	;'v'
  4436  007B8B  65                 	db	101	;'e'
  4437  007B8C  72                 	db	114	;'r'
  4438  007B8D  00                 	db	0
  4439  007B8E                     STR_138:
  4440  007B8E  53                 	db	83	;'S'
  4441  007B8F  54                 	db	84	;'T'
  4442  007B90  41                 	db	65	;'A'
  4443  007B91  52                 	db	82	;'R'
  4444  007B92  54                 	db	84	;'T'
  4445  007B93  49                 	db	73	;'I'
  4446  007B94  46                 	db	70	;'F'
  4447  007B95  20                 	db	32
  4448  007B96  00                 	db	0
  4449  007B97                     STR_179:
  4450  007B97  2C                 	db	44
  4451  007B98  6E                 	db	110	;'n'
  4452  007B99  6F                 	db	111	;'o'
  4453  007B9A  64                 	db	100	;'d'
  4454  007B9B  65                 	db	101	;'e'
  4455  007B9C  69                 	db	105	;'i'
  4456  007B9D  64                 	db	100	;'d'
  4457  007B9E  3D                 	db	61	;'='
  4458  007B9F  00                 	db	0
  4459  007BA0                     STR_14:
  4460  007BA0  4C                 	db	76	;'L'
  4461  007BA1  4F                 	db	79	;'O'
  4462  007BA2  4F                 	db	79	;'O'
  4463  007BA3  50                 	db	80	;'P'
  4464  007BA4  42                 	db	66	;'B'
  4465  007BA5  41                 	db	65	;'A'
  4466  007BA6  43                 	db	67	;'C'
  4467  007BA7  4B                 	db	75	;'K'
  4468  007BA8  00                 	db	0
  4469  007BA9                     STR_159:
  4470  007BA9  44                 	db	68	;'D'
  4471  007BAA  45                 	db	69	;'E'
  4472  007BAB  46                 	db	70	;'F'
  4473  007BAC  41                 	db	65	;'A'
  4474  007BAD  55                 	db	85	;'U'
  4475  007BAE  4C                 	db	76	;'L'
  4476  007BAF  54                 	db	84	;'T'
  4477  007BB0  53                 	db	83	;'S'
  4478  007BB1  00                 	db	0
  4479  007BB2                     STR_165:
  4480  007BB2  56                 	db	86	;'V'
  4481  007BB3  31                 	db	49	;'1'
  4482  007BB4  30                 	db	48	;'0'
  4483  007BB5  31                 	db	49	;'1'
  4484  007BB6  31                 	db	49	;'1'
  4485  007BB7  0D                 	db	13
  4486  007BB8  0A                 	db	10
  4487  007BB9  00                 	db	0
  4488  007BBA                     STR_166:
  4489  007BBA  4E                 	db	78	;'N'
  4490  007BBB  31                 	db	49	;'1'
  4491  007BBC  39                 	db	57	;'9'
  4492  007BBD  37                 	db	55	;'7'
  4493  007BBE  37                 	db	55	;'7'
  4494  007BBF  0D                 	db	13
  4495  007BC0  0A                 	db	10
  4496  007BC1  00                 	db	0
  4497  007BC2                     STR_91:
  4498  007BC2  30                 	db	48	;'0'
  4499  007BC3  78                 	db	120	;'x'
  4500  007BC4  25                 	db	37
  4501  007BC5  30                 	db	48	;'0'
  4502  007BC6  32                 	db	50	;'2'
  4503  007BC7  58                 	db	88	;'X'
  4504  007BC8  0A                 	db	10
  4505  007BC9  00                 	db	0
  4506  007BCA                     STR_276:
  4507  007BCA  47                 	db	71	;'G'
  4508  007BCB  55                 	db	85	;'U'
  4509  007BCC  49                 	db	73	;'I'
  4510  007BCD  44                 	db	68	;'D'
  4511  007BCE  20                 	db	32
  4512  007BCF  3D                 	db	61	;'='
  4513  007BD0  20                 	db	32
  4514  007BD1  00                 	db	0
  4515  007BD2                     STR_151:
  4516  007BD2  46                 	db	70	;'F'
  4517  007BD3  49                 	db	73	;'I'
  4518  007BD4  4C                 	db	76	;'L'
  4519  007BD5  54                 	db	84	;'T'
  4520  007BD6  45                 	db	69	;'E'
  4521  007BD7  52                 	db	82	;'R'
  4522  007BD8  20                 	db	32
  4523  007BD9  00                 	db	0
  4524  007BDA                     STR_173:
  4525  007BDA  2C                 	db	44
  4526  007BDB  63                 	db	99	;'c'
  4527  007BDC  6C                 	db	108	;'l'
  4528  007BDD  61                 	db	97	;'a'
  4529  007BDE  73                 	db	115	;'s'
  4530  007BDF  73                 	db	115	;'s'
  4531  007BE0  3D                 	db	61	;'='
  4532  007BE1  00                 	db	0
  4533  007BE2                     STR_145:
  4534  007BE2  56                 	db	86	;'V'
  4535  007BE3  45                 	db	69	;'E'
  4536  007BE4  52                 	db	82	;'R'
  4537  007BE5  42                 	db	66	;'B'
  4538  007BE6  4F                 	db	79	;'O'
  4539  007BE7  53                 	db	83	;'S'
  4540  007BE8  45                 	db	69	;'E'
  4541  007BE9  00                 	db	0
  4542  007BEA                     STR_134:
  4543  007BEA  44                 	db	68	;'D'
  4544  007BEB  45                 	db	69	;'E'
  4545  007BEC  43                 	db	67	;'C'
  4546  007BED  49                 	db	73	;'I'
  4547  007BEE  4D                 	db	77	;'M'
  4548  007BEF  41                 	db	65	;'A'
  4549  007BF0  4C                 	db	76	;'L'
  4550  007BF1  00                 	db	0
  4551  007BF2                     STR_18:
  4552  007BF2  56                 	db	86	;'V'
  4553  007BF3  45                 	db	69	;'E'
  4554  007BF4  52                 	db	82	;'R'
  4555  007BF5  53                 	db	83	;'S'
  4556  007BF6  49                 	db	73	;'I'
  4557  007BF7  4F                 	db	79	;'O'
  4558  007BF8  4E                 	db	78	;'N'
  4559  007BF9  00                 	db	0
  4560  007BFA                     STR_208:
  4561  007BFA  30                 	db	48	;'0'
  4562  007BFB  78                 	db	120	;'x'
  4563  007BFC  25                 	db	37
  4564  007BFD  30                 	db	48	;'0'
  4565  007BFE  38                 	db	56	;'8'
  4566  007BFF  6C                 	db	108	;'l'
  4567  007C00  58                 	db	88	;'X'
  4568  007C01  00                 	db	0
  4569  007C02                     STR_290:
  4570  007C02  56                 	db	86	;'V'
  4571  007C03  65                 	db	101	;'e'
  4572  007C04  72                 	db	114	;'r'
  4573  007C05  62                 	db	98	;'b'
  4574  007C06  6F                 	db	111	;'o'
  4575  007C07  73                 	db	115	;'s'
  4576  007C08  65                 	db	101	;'e'
  4577  007C09  00                 	db	0
  4578  007C0A                     STR_289:
  4579  007C0A  4D                 	db	77	;'M'
  4580  007C0B  6F                 	db	111	;'o'
  4581  007C0C  64                 	db	100	;'d'
  4582  007C0D  65                 	db	101	;'e'
  4583  007C0E  3A                 	db	58	;':'
  4584  007C0F  20                 	db	32
  4585  007C10  00                 	db	0
  4586  007C11                     STR_185:
  4587  007C11  2C                 	db	44
  4588  007C12  44                 	db	68	;'D'
  4589  007C13  61                 	db	97	;'a'
  4590  007C14  74                 	db	116	;'t'
  4591  007C15  61                 	db	97	;'a'
  4592  007C16  3D                 	db	61	;'='
  4593  007C17  00                 	db	0
  4594  007C18                     STR_176:
  4595  007C18  2C                 	db	44
  4596  007C19  74                 	db	116	;'t'
  4597  007C1A  79                 	db	121	;'y'
  4598  007C1B  70                 	db	112	;'p'
  4599  007C1C  65                 	db	101	;'e'
  4600  007C1D  3D                 	db	61	;'='
  4601  007C1E  00                 	db	0
  4602  007C1F                     STR_182:
  4603  007C1F  2C                 	db	44
  4604  007C20  73                 	db	115	;'s'
  4605  007C21  69                 	db	105	;'i'
  4606  007C22  7A                 	db	122	;'z'
  4607  007C23  65                 	db	101	;'e'
  4608  007C24  3D                 	db	61	;'='
  4609  007C25  00                 	db	0
  4610  007C26                     STR_170:
  4611  007C26  3C                 	db	60	;'<'
  4612  007C27  50                 	db	80	;'P'
  4613  007C28  72                 	db	114	;'r'
  4614  007C29  69                 	db	105	;'i'
  4615  007C2A  6F                 	db	111	;'o'
  4616  007C2B  3D                 	db	61	;'='
  4617  007C2C  00                 	db	0
  4618  007C2D                     STR_20:
  4619  007C2D  49                 	db	73	;'I'
  4620  007C2E  46                 	db	70	;'F'
  4621  007C2F  4D                 	db	77	;'M'
  4622  007C30  4F                 	db	79	;'O'
  4623  007C31  44                 	db	68	;'D'
  4624  007C32  45                 	db	69	;'E'
  4625  007C33  00                 	db	0
  4626  007C34                     STR_16:
  4627  007C34  4C                 	db	76	;'L'
  4628  007C35  49                 	db	73	;'I'
  4629  007C36  53                 	db	83	;'S'
  4630  007C37  54                 	db	84	;'T'
  4631  007C38  45                 	db	69	;'E'
  4632  007C39  4E                 	db	78	;'N'
  4633  007C3A  00                 	db	0
  4634  007C3B                     STR_105:
  4635  007C3B  46                 	db	70	;'F'
  4636  007C3C  49                 	db	73	;'I'
  4637  007C3D  4C                 	db	76	;'L'
  4638  007C3E  54                 	db	84	;'T'
  4639  007C3F  45                 	db	69	;'E'
  4640  007C40  52                 	db	82	;'R'
  4641  007C41  00                 	db	0
  4642  007C42                     STR_10:
  4643  007C42  53                 	db	83	;'S'
  4644  007C43  49                 	db	73	;'I'
  4645  007C44  4C                 	db	76	;'L'
  4646  007C45  45                 	db	69	;'E'
  4647  007C46  4E                 	db	78	;'N'
  4648  007C47  54                 	db	84	;'T'
  4649  007C48  00                 	db	0
  4650  007C49                     STR_60:
  4651  007C49  30                 	db	48	;'0'
  4652  007C4A  78                 	db	120	;'x'
  4653  007C4B  25                 	db	37
  4654  007C4C  30                 	db	48	;'0'
  4655  007C4D  32                 	db	50	;'2'
  4656  007C4E  58                 	db	88	;'X'
  4657  007C4F  00                 	db	0
  4658  007C50                     STR_174:
  4659  007C50  30                 	db	48	;'0'
  4660  007C51  78                 	db	120	;'x'
  4661  007C52  25                 	db	37
  4662  007C53  30                 	db	48	;'0'
  4663  007C54  34                 	db	52	;'4'
  4664  007C55  58                 	db	88	;'X'
  4665  007C56  00                 	db	0
  4666  007C57                     STR_192:
  4667  007C57  30                 	db	48	;'0'
  4668  007C58  78                 	db	120	;'x'
  4669  007C59  25                 	db	37
  4670  007C5A  30                 	db	48	;'0'
  4671  007C5B  38                 	db	56	;'8'
  4672  007C5C  58                 	db	88	;'X'
  4673  007C5D  00                 	db	0
  4674  007C5E                     STR_167:
  4675  007C5E  46                 	db	70	;'F'
  4676  007C5F  30                 	db	48	;'0'
  4677  007C60  30                 	db	48	;'0'
  4678  007C61  0D                 	db	13
  4679  007C62  0A                 	db	10
  4680  007C63  00                 	db	0
  4681  007C64                     STR_9:
  4682  007C64  2B                 	db	43
  4683  007C65  4F                 	db	79	;'O'
  4684  007C66  4B                 	db	75	;'K'
  4685  007C67  0D                 	db	13
  4686  007C68  0A                 	db	10
  4687  007C69  00                 	db	0
  4688  007C6A                     STR_58:
  4689  007C6A  25                 	db	37
  4690  007C6B  64                 	db	100	;'d'
  4691  007C6C  20                 	db	32
  4692  007C6D  2D                 	db	45
  4693  007C6E  20                 	db	32
  4694  007C6F  00                 	db	0
  4695  007C70                     STR_144:
  4696  007C70  4D                 	db	77	;'M'
  4697  007C71  4F                 	db	79	;'O'
  4698  007C72  44                 	db	68	;'D'
  4699  007C73  45                 	db	69	;'E'
  4700  007C74  20                 	db	32
  4701  007C75  00                 	db	0
  4702  007C76                     STR_152:
  4703  007C76  4D                 	db	77	;'M'
  4704  007C77  41                 	db	65	;'A'
  4705  007C78  53                 	db	83	;'S'
  4706  007C79  4B                 	db	75	;'K'
  4707  007C7A  20                 	db	32
  4708  007C7B  00                 	db	0
  4709  007C7C                     STR_153:
  4710  007C7C  45                 	db	69	;'E'
  4711  007C7D  43                 	db	67	;'C'
  4712  007C7E  48                 	db	72	;'H'
  4713  007C7F  4F                 	db	79	;'O'
  4714  007C80  20                 	db	32
  4715  007C81  00                 	db	0
  4716  007C82                     STR_12:
  4717  007C82  43                 	db	67	;'C'
  4718  007C83  4C                 	db	76	;'L'
  4719  007C84  4F                 	db	79	;'O'
  4720  007C85  53                 	db	83	;'S'
  4721  007C86  45                 	db	69	;'E'
  4722  007C87  00                 	db	0
  4723  007C88                     STR_149:
  4724  007C88  53                 	db	83	;'S'
  4725  007C89  4C                 	db	76	;'L'
  4726  007C8A  43                 	db	67	;'C'
  4727  007C8B  41                 	db	65	;'A'
  4728  007C8C  4E                 	db	78	;'N'
  4729  007C8D  00                 	db	0
  4730  007C8E                     STR_131:
  4731  007C8E  53                 	db	83	;'S'
  4732  007C8F  45                 	db	69	;'E'
  4733  007C90  54                 	db	84	;'T'
  4734  007C91  20                 	db	32
  4735  007C92  00                 	db	0
  4736  007C93                     STR_47:
  4737  007C93  46                 	db	70	;'F'
  4738  007C94  49                 	db	73	;'I'
  4739  007C95  4E                 	db	78	;'N'
  4740  007C96  44                 	db	68	;'D'
  4741  007C97  00                 	db	0
  4742  007C98                     STR_49:
  4743  007C98  52                 	db	82	;'R'
  4744  007C99  52                 	db	82	;'R'
  4745  007C9A  45                 	db	69	;'E'
  4746  007C9B  47                 	db	71	;'G'
  4747  007C9C  00                 	db	0
  4748  007C9D                     STR_81:
  4749  007C9D  57                 	db	87	;'W'
  4750  007C9E  52                 	db	82	;'R'
  4751  007C9F  45                 	db	69	;'E'
  4752  007CA0  47                 	db	71	;'G'
  4753  007CA1  00                 	db	0
  4754  007CA2                     STR_118:
  4755  007CA2  4D                 	db	77	;'M'
  4756  007CA3  41                 	db	65	;'A'
  4757  007CA4  53                 	db	83	;'S'
  4758  007CA5  4B                 	db	75	;'K'
  4759  007CA6  00                 	db	0
  4760  007CA7                     STR_8:
  4761  007CA7  4F                 	db	79	;'O'
  4762  007CA8  50                 	db	80	;'P'
  4763  007CA9  45                 	db	69	;'E'
  4764  007CAA  4E                 	db	78	;'N'
  4765  007CAB  00                 	db	0
  4766  007CAC                     STR_97:
  4767  007CAC  49                 	db	73	;'I'
  4768  007CAD  4E                 	db	78	;'N'
  4769  007CAE  46                 	db	70	;'F'
  4770  007CAF  4F                 	db	79	;'O'
  4771  007CB0  00                 	db	0
  4772  007CB1                     STR_147:
  4773  007CB1  56                 	db	86	;'V'
  4774  007CB2  53                 	db	83	;'S'
  4775  007CB3  43                 	db	67	;'C'
  4776  007CB4  50                 	db	80	;'P'
  4777  007CB5  00                 	db	0
  4778  007CB6                     STR_45:
  4779  007CB6  48                 	db	72	;'H'
  4780  007CB7  45                 	db	69	;'E'
  4781  007CB8  4C                 	db	76	;'L'
  4782  007CB9  50                 	db	80	;'P'
  4783  007CBA  00                 	db	0
  4784  007CBB                     STR_41:
  4785  007CBB  53                 	db	83	;'S'
  4786  007CBC  54                 	db	84	;'T'
  4787  007CBD  41                 	db	65	;'A'
  4788  007CBE  54                 	db	84	;'T'
  4789  007CBF  00                 	db	0
  4790  007CC0                     STR_6:
  4791  007CC0  42                 	db	66	;'B'
  4792  007CC1  4F                 	db	79	;'O'
  4793  007CC2  4F                 	db	79	;'O'
  4794  007CC3  54                 	db	84	;'T'
  4795  007CC4  00                 	db	0
  4796  007CC5                     STR_68:
  4797  007CC5  27                 	db	39
  4798  007CC6  20                 	db	32
  4799  007CC7  09                 	db	9
  4800  007CC8  00                 	db	0
  4801  007CC9                     STR_190:
  4802  007CC9  3E                 	db	62	;'>'
  4803  007CCA  0D                 	db	13
  4804  007CCB  0A                 	db	10
  4805  007CCC  00                 	db	0
  4806  007CCD                     STR_92:
  4807  007CCD  25                 	db	37
  4808  007CCE  64                 	db	100	;'d'
  4809  007CCF  0A                 	db	10
  4810  007CD0  00                 	db	0
  4811  007CD1                     STR_156:
  4812  007CD1  4F                 	db	79	;'O'
  4813  007CD2  46                 	db	70	;'F'
  4814  007CD3  46                 	db	70	;'F'
  4815  007CD4  00                 	db	0
  4816  007CD5                     STR_43:
  4817  007CD5  45                 	db	69	;'E'
  4818  007CD6  52                 	db	82	;'R'
  4819  007CD7  52                 	db	82	;'R'
  4820  007CD8  00                 	db	0
  4821  007CD9                     STR_132:
  4822  007CD9  48                 	db	72	;'H'
  4823  007CDA  45                 	db	69	;'E'
  4824  007CDB  58                 	db	88	;'X'
  4825  007CDC  00                 	db	0
  4826  007CDD                     STR_193:
  4827  007CDD  25                 	db	37
  4828  007CDE  6C                 	db	108	;'l'
  4829  007CDF  75                 	db	117	;'u'
  4830  007CE0  00                 	db	0
  4831  007CE1                     STR_67:
  4832  007CE1  09                 	db	9
  4833  007CE2  27                 	db	39
  4834  007CE3  00                 	db	0
  4835  007CE4                     STR_278:
  4836  007CE4  2D                 	db	45
  4837  007CE5  2D                 	db	45
  4838  007CE6  00                 	db	0
  4839  007CE7                     STR_38:
  4840  007CE7  52                 	db	82	;'R'
  4841  007CE8  58                 	db	88	;'X'
  4842  007CE9  00                 	db	0
  4843  007CEA                     STR_29:
  4844  007CEA  54                 	db	84	;'T'
  4845  007CEB  58                 	db	88	;'X'
  4846  007CEC  00                 	db	0
  4847  007CED                     STR_61:
  4848  007CED  25                 	db	37
  4849  007CEE  64                 	db	100	;'d'
  4850  007CEF  00                 	db	0
  4851  007CF0                     STR_169:
  4852  007CF0  07                 	db	7
  4853  007CF1  00                 	db	0
  4854  007CF2                     STR_168:
  4855  007CF2  0D                 	db	13
  4856  007CF3  00                 	db	0
  4857  007CF4                     STR_30:
  4858  007CF4  2C                 	db	44
  4859  007CF5  00                 	db	0
  4860  007CF6                     STR_285:
  4861  007CF6  2E                 	db	46
  4862  007CF7  00                 	db	0
  4863  007CF8                     STR_277:
  4864  007CF8  30                 	db	48	;'0'
  4865  007CF9  00                 	db	0
  4866  007CFA                     STR_279:
  4867  007CFA  3A                 	db	58	;':'
  4868  007CFB  00                 	db	0
  4869  007CFC                     STR_160:
  4870  007CFC  3F                 	db	63	;'?'
  4871  007CFD  00                 	db	0
  4872  007CFE                     __end_of__stringdata:
  4873                           	opt stack 0
  4874                           
  4875                           ; #config settings
  4876  007CFE  00                 	db	0	; dummy byte at the end
  4877  0000                     tblptru	equ	0xFF8
  4878                           tblptrh	equ	0xFF7
  4879                           tblptrl	equ	0xFF6
  4880                           tablat	equ	0xFF5
  4881                           prodh	equ	0xFF4
  4882                           prodl	equ	0xFF3
  4883                           intcon	equ	0xFF2
  4884                           indf0	equ	0xFEF
  4885                           fsr0h	equ	0xFEA
  4886                           fsr0l	equ	0xFE9
  4887                           wreg	equ	0xFE8
  4888                           indf1	equ	0xFE7
  4889                           postinc1	equ	0xFE6
  4890                           postdec1	equ	0xFE5
  4891                           fsr1h	equ	0xFE2
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           postinc2	equ	0xFDE
  4895                           postdec2	equ	0xFDD
  4896                           plusw2	equ	0xFDB
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901                           	psect	nvBANK1
  4902  0001F1                     __pnvBANK1:
  4903                           	opt stack 0
  4904  0001F1                     _caps:
  4905                           	opt stack 0
  4906  0001F1                     	ds	2
  4907  0001F3                     ___DCDelay:
  4908                           	opt stack 0
  4909  0001F3                     	ds	1
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           intcon	equ	0xFF2
  4917                           indf0	equ	0xFEF
  4918                           fsr0h	equ	0xFEA
  4919                           fsr0l	equ	0xFE9
  4920                           wreg	equ	0xFE8
  4921                           indf1	equ	0xFE7
  4922                           postinc1	equ	0xFE6
  4923                           postdec1	equ	0xFE5
  4924                           fsr1h	equ	0xFE2
  4925                           fsr1l	equ	0xFE1
  4926                           indf2	equ	0xFDF
  4927                           postinc2	equ	0xFDE
  4928                           postdec2	equ	0xFDD
  4929                           plusw2	equ	0xFDB
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934                           	psect	cinit
  4935  001522                     __pcinit:
  4936                           	opt stack 0
  4937  001522                     start_initialization:
  4938                           	opt stack 0
  4939  001522                     __initialization:
  4940                           	opt stack 0
  4941                           
  4942                           ; Clear objects allocated to BIGRAM (494 bytes)
  4943  001522  EE04  F000         	lfsr	0,__pbssBIGRAM
  4944  001526  EE11 F0EE          	lfsr	1,494
  4945  00152A                     clear_0:
  4946  00152A  6AEE               	clrf	postinc0,c
  4947  00152C  50E5               	movf	postdec1,w,c
  4948  00152E  50E1               	movf	fsr1l,w,c
  4949  001530  E1FC               	bnz	clear_0
  4950  001532  50E2               	movf	fsr1h,w,c
  4951  001534  E1FA               	bnz	clear_0
  4952                           
  4953                           ; Clear objects allocated to BANK3 (256 bytes)
  4954  001536  EE03  F000         	lfsr	0,__pbssBANK3
  4955  00153A  EE11 F000          	lfsr	1,256
  4956  00153E                     clear_1:
  4957  00153E  6AEE               	clrf	postinc0,c
  4958  001540  50E5               	movf	postdec1,w,c
  4959  001542  50E1               	movf	fsr1l,w,c
  4960  001544  E1FC               	bnz	clear_1
  4961  001546  50E2               	movf	fsr1h,w,c
  4962  001548  E1FA               	bnz	clear_1
  4963                           
  4964                           ; Clear objects allocated to BANK2 (128 bytes)
  4965  00154A  EE02  F000         	lfsr	0,__pbssBANK2
  4966  00154E  0E80               	movlw	128
  4967  001550                     clear_2:
  4968  001550  6AEE               	clrf	postinc0,c
  4969  001552  06E8               	decf	wreg,f,c
  4970  001554  E1FD               	bnz	clear_2
  4971                           
  4972                           ; Clear objects allocated to BANK1 (241 bytes)
  4973  001556  EE01  F000         	lfsr	0,__pbssBANK1
  4974  00155A  0EF1               	movlw	241
  4975  00155C                     clear_3:
  4976  00155C  6AEE               	clrf	postinc0,c
  4977  00155E  06E8               	decf	wreg,f,c
  4978  001560  E1FD               	bnz	clear_3
  4979                           
  4980                           ; Clear objects allocated to COMRAM (30 bytes)
  4981  001562  EE00  F022         	lfsr	0,__pbssCOMRAM
  4982  001566  0E1E               	movlw	30
  4983  001568                     clear_4:
  4984  001568  6AEE               	clrf	postinc0,c
  4985  00156A  06E8               	decf	wreg,f,c
  4986  00156C  E1FD               	bnz	clear_4
  4987  00156E                     end_of_initialization:
  4988                           	opt stack 0
  4989  00156E                     __end_of__initialization:
  4990                           	opt stack 0
  4991  00156E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4992  001570  6EF8               	movwf	tblptru,c
  4993  001572  0100               	movlb	0
  4994  001574  EFEA  F01D         	goto	_main	;jump to C main() function
  4995                           tblptru	equ	0xFF8
  4996                           tblptrh	equ	0xFF7
  4997                           tblptrl	equ	0xFF6
  4998                           tablat	equ	0xFF5
  4999                           prodh	equ	0xFF4
  5000                           prodl	equ	0xFF3
  5001                           intcon	equ	0xFF2
  5002                           indf0	equ	0xFEF
  5003                           postinc0	equ	0xFEE
  5004                           fsr0h	equ	0xFEA
  5005                           fsr0l	equ	0xFE9
  5006                           wreg	equ	0xFE8
  5007                           indf1	equ	0xFE7
  5008                           postinc1	equ	0xFE6
  5009                           postdec1	equ	0xFE5
  5010                           fsr1h	equ	0xFE2
  5011                           fsr1l	equ	0xFE1
  5012                           indf2	equ	0xFDF
  5013                           postinc2	equ	0xFDE
  5014                           postdec2	equ	0xFDD
  5015                           plusw2	equ	0xFDB
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020                           	psect	bssCOMRAM
  5021  000022                     __pbssCOMRAM:
  5022                           	opt stack 0
  5023  000022                     _status_led_cnt:
  5024                           	opt stack 0
  5025  000022                     	ds	2
  5026  000024                     strtok@sp:
  5027                           	opt stack 0
  5028  000024                     	ds	2
  5029  000026                     _USART_Status:
  5030                           	opt stack 0
  5031  000026                     	ds	1
  5032  000027                     __ECANRxFilterHitInfo:
  5033                           	opt stack 0
  5034  000027                     	ds	1
  5035  000028                     __IT_INT_MASK:
  5036                           	opt stack 0
  5037  000028                     	ds	1
  5038  000029                     __IT_SAVE_BSR:
  5039                           	opt stack 0
  5040  000029                     	ds	1
  5041  00002A                     ___DCByte:
  5042                           	opt stack 0
  5043  00002A                     	ds	1
  5044  00002B                     _bDLE:
  5045                           	opt stack 0
  5046  00002B                     	ds	1
  5047  00002C                     _bHex:
  5048                           	opt stack 0
  5049  00002C                     	ds	1
  5050  00002D                     _bInitiated:
  5051                           	opt stack 0
  5052  00002D                     	ds	1
  5053  00002E                     _bLocalEcho:
  5054                           	opt stack 0
  5055  00002E                     	ds	1
  5056  00002F                     _bOpen:
  5057                           	opt stack 0
  5058  00002F                     	ds	1
  5059  000030                     _bSilent:
  5060                           	opt stack 0
  5061  000030                     	ds	1
  5062  000031                     _fifo_canrxcount:
  5063                           	opt stack 0
  5064  000031                     	ds	1
  5065  000032                     _ledFunctionality:
  5066                           	opt stack 0
  5067  000032                     	ds	1
  5068  000033                     _nTimeStamp:
  5069                           	opt stack 0
  5070  000033                     	ds	1
  5071  000034                     _pos:
  5072                           	opt stack 0
  5073  000034                     	ds	1
  5074  000035                     _rwtimeout:
  5075                           	opt stack 0
  5076  000035                     	ds	1
  5077  000036                     _sequencyno:
  5078                           	opt stack 0
  5079  000036                     	ds	1
  5080  000037                     _stateVscpDriver:
  5081                           	opt stack 0
  5082  000037                     	ds	1
  5083  000038                     _vscpClass:
  5084                           	opt stack 0
  5085  000038                     	ds	2
  5086  00003A                     _dlc:
  5087                           	opt stack 0
  5088  00003A                     	ds	1
  5089  00003B                     _flags:
  5090                           	opt stack 0
  5091  00003B                     	ds	1
  5092  00003C                     _vscpNodeId:
  5093                           	opt stack 0
  5094  00003C                     	ds	1
  5095  00003D                     _vscpPriority:
  5096                           	opt stack 0
  5097  00003D                     	ds	1
  5098  00003E                     _vscpSize:
  5099                           	opt stack 0
  5100  00003E                     	ds	1
  5101  00003F                     _vscpType:
  5102                           	opt stack 0
  5103  00003F                     	ds	1
  5104                           tblptru	equ	0xFF8
  5105                           tblptrh	equ	0xFF7
  5106                           tblptrl	equ	0xFF6
  5107                           tablat	equ	0xFF5
  5108                           prodh	equ	0xFF4
  5109                           prodl	equ	0xFF3
  5110                           intcon	equ	0xFF2
  5111                           indf0	equ	0xFEF
  5112                           postinc0	equ	0xFEE
  5113                           fsr0h	equ	0xFEA
  5114                           fsr0l	equ	0xFE9
  5115                           wreg	equ	0xFE8
  5116                           indf1	equ	0xFE7
  5117                           postinc1	equ	0xFE6
  5118                           postdec1	equ	0xFE5
  5119                           fsr1h	equ	0xFE2
  5120                           fsr1l	equ	0xFE1
  5121                           indf2	equ	0xFDF
  5122                           postinc2	equ	0xFDE
  5123                           postdec2	equ	0xFDD
  5124                           plusw2	equ	0xFDB
  5125                           fsr2h	equ	0xFDA
  5126                           fsr2l	equ	0xFD9
  5127                           status	equ	0xFD8
  5128                           
  5129                           	psect	bssBANK1
  5130  000100                     __pbssBANK1:
  5131                           	opt stack 0
  5132  000100                     _can_receiveOverruns:
  5133                           	opt stack 0
  5134  000100                     	ds	4
  5135  000104                     _can_transmitOverruns:
  5136                           	opt stack 0
  5137  000104                     	ds	4
  5138  000108                     _cntRxBytes:
  5139                           	opt stack 0
  5140  000108                     	ds	4
  5141  00010C                     _cntRxFrames:
  5142                           	opt stack 0
  5143  00010C                     	ds	4
  5144  000110                     _cntTxBytes:
  5145                           	opt stack 0
  5146  000110                     	ds	4
  5147  000114                     _cntTxFrames:
  5148                           	opt stack 0
  5149  000114                     	ds	4
  5150  000118                     _timekeeper:
  5151                           	opt stack 0
  5152  000118                     	ds	4
  5153  00011C                     _timer:
  5154                           	opt stack 0
  5155  00011C                     	ds	4
  5156  000120                     _uart_receiveOverruns:
  5157                           	opt stack 0
  5158  000120                     	ds	4
  5159  000124                     _uart_transmitOverruns:
  5160                           	opt stack 0
  5161  000124                     	ds	4
  5162  000128                     _made_table:
  5163                           	opt stack 0
  5164  000128                     	ds	2
  5165  00012A                     __IT_SAVE_STATUS:
  5166                           	opt stack 0
  5167  00012A                     	ds	1
  5168  00012B                     __IT_SAVE_WREG:
  5169                           	opt stack 0
  5170  00012B                     	ds	1
  5171  00012C                     _mode:
  5172                           	opt stack 0
  5173  00012C                     	ds	1
  5174  00012D                     _cmdbuf:
  5175                           	opt stack 0
  5176  00012D                     	ds	80
  5177  00017D                     _wrkbuf:
  5178                           	opt stack 0
  5179  00017D                     	ds	80
  5180  0001CD                     _canInputFifo:
  5181                           	opt stack 0
  5182  0001CD                     	ds	8
  5183  0001D5                     _data:
  5184                           	opt stack 0
  5185  0001D5                     	ds	8
  5186  0001DD                     _serialInputFifo:
  5187                           	opt stack 0
  5188  0001DD                     	ds	8
  5189  0001E5                     _vscpData:
  5190                           	opt stack 0
  5191  0001E5                     	ds	8
  5192  0001ED                     _id:
  5193                           	opt stack 0
  5194  0001ED                     	ds	4
  5195                           tblptru	equ	0xFF8
  5196                           tblptrh	equ	0xFF7
  5197                           tblptrl	equ	0xFF6
  5198                           tablat	equ	0xFF5
  5199                           prodh	equ	0xFF4
  5200                           prodl	equ	0xFF3
  5201                           intcon	equ	0xFF2
  5202                           indf0	equ	0xFEF
  5203                           postinc0	equ	0xFEE
  5204                           fsr0h	equ	0xFEA
  5205                           fsr0l	equ	0xFE9
  5206                           wreg	equ	0xFE8
  5207                           indf1	equ	0xFE7
  5208                           postinc1	equ	0xFE6
  5209                           postdec1	equ	0xFE5
  5210                           fsr1h	equ	0xFE2
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           plusw2	equ	0xFDB
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220                           	psect	bssBANK2
  5221  000200                     __pbssBANK2:
  5222                           	opt stack 0
  5223  000200                     _serial_inputBuffer:
  5224                           	opt stack 0
  5225  000200                     	ds	128
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           indf0	equ	0xFEF
  5234                           postinc0	equ	0xFEE
  5235                           fsr0h	equ	0xFEA
  5236                           fsr0l	equ	0xFE9
  5237                           wreg	equ	0xFE8
  5238                           indf1	equ	0xFE7
  5239                           postinc1	equ	0xFE6
  5240                           postdec1	equ	0xFE5
  5241                           fsr1h	equ	0xFE2
  5242                           fsr1l	equ	0xFE1
  5243                           indf2	equ	0xFDF
  5244                           postinc2	equ	0xFDE
  5245                           postdec2	equ	0xFDD
  5246                           plusw2	equ	0xFDB
  5247                           fsr2h	equ	0xFDA
  5248                           fsr2l	equ	0xFD9
  5249                           status	equ	0xFD8
  5250                           
  5251                           	psect	bssBANK3
  5252  000300                     __pbssBANK3:
  5253                           	opt stack 0
  5254  000300                     _crc8_table:
  5255                           	opt stack 0
  5256  000300                     	ds	256
  5257                           tblptru	equ	0xFF8
  5258                           tblptrh	equ	0xFF7
  5259                           tblptrl	equ	0xFF6
  5260                           tablat	equ	0xFF5
  5261                           prodh	equ	0xFF4
  5262                           prodl	equ	0xFF3
  5263                           intcon	equ	0xFF2
  5264                           indf0	equ	0xFEF
  5265                           postinc0	equ	0xFEE
  5266                           fsr0h	equ	0xFEA
  5267                           fsr0l	equ	0xFE9
  5268                           wreg	equ	0xFE8
  5269                           indf1	equ	0xFE7
  5270                           postinc1	equ	0xFE6
  5271                           postdec1	equ	0xFE5
  5272                           fsr1h	equ	0xFE2
  5273                           fsr1l	equ	0xFE1
  5274                           indf2	equ	0xFDF
  5275                           postinc2	equ	0xFDE
  5276                           postdec2	equ	0xFDD
  5277                           plusw2	equ	0xFDB
  5278                           fsr2h	equ	0xFDA
  5279                           fsr2l	equ	0xFD9
  5280                           status	equ	0xFD8
  5281                           
  5282                           	psect	bssBIGRAM
  5283  000400                     __pbssBIGRAM:
  5284                           	opt stack 0
  5285  000400                     _can_inputBuffer:
  5286                           	opt stack 0
  5287  000400                     	ds	494
  5288                           tblptru	equ	0xFF8
  5289                           tblptrh	equ	0xFF7
  5290                           tblptrl	equ	0xFF6
  5291                           tablat	equ	0xFF5
  5292                           prodh	equ	0xFF4
  5293                           prodl	equ	0xFF3
  5294                           intcon	equ	0xFF2
  5295                           indf0	equ	0xFEF
  5296                           postinc0	equ	0xFEE
  5297                           fsr0h	equ	0xFEA
  5298                           fsr0l	equ	0xFE9
  5299                           wreg	equ	0xFE8
  5300                           indf1	equ	0xFE7
  5301                           postinc1	equ	0xFE6
  5302                           postdec1	equ	0xFE5
  5303                           fsr1h	equ	0xFE2
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           postinc2	equ	0xFDE
  5307                           postdec2	equ	0xFDD
  5308                           plusw2	equ	0xFDB
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313                           	psect	cstackBANK2
  5314  000280                     __pcstackBANK2:
  5315                           	opt stack 0
  5316  000280                     doModeVerbose@id:
  5317                           	opt stack 0
  5318                           
  5319                           ; 4 bytes @ 0x0
  5320  000280                     	ds	4
  5321  000284                     doModeVerbose@preg:
  5322                           	opt stack 0
  5323                           
  5324                           ; 2 bytes @ 0x4
  5325  000284                     	ds	2
  5326  000286                     doModeVerbose@preg_1252:
  5327                           	opt stack 0
  5328                           
  5329                           ; 2 bytes @ 0x6
  5330  000286                     	ds	2
  5331  000288                     doModeVerbose@filter_class:
  5332                           	opt stack 0
  5333                           
  5334                           ; 2 bytes @ 0x8
  5335  000288                     	ds	2
  5336  00028A                     doModeVerbose@mask_class:
  5337                           	opt stack 0
  5338                           
  5339                           ; 2 bytes @ 0xA
  5340  00028A                     	ds	2
  5341  00028C                     doModeVerbose@filter_priority:
  5342                           	opt stack 0
  5343                           
  5344                           ; 1 bytes @ 0xC
  5345  00028C                     	ds	1
  5346  00028D                     doModeVerbose@filter_type:
  5347                           	opt stack 0
  5348                           
  5349                           ; 1 bytes @ 0xD
  5350  00028D                     	ds	1
  5351  00028E                     doModeVerbose@filter_nodeid:
  5352                           	opt stack 0
  5353                           
  5354                           ; 1 bytes @ 0xE
  5355  00028E                     	ds	1
  5356  00028F                     doModeVerbose@mask_priority:
  5357                           	opt stack 0
  5358                           
  5359                           ; 1 bytes @ 0xF
  5360  00028F                     	ds	1
  5361  000290                     doModeVerbose@mask_type:
  5362                           	opt stack 0
  5363                           
  5364                           ; 1 bytes @ 0x10
  5365  000290                     	ds	1
  5366  000291                     doModeVerbose@mask_nodeid:
  5367                           	opt stack 0
  5368                           
  5369                           ; 1 bytes @ 0x11
  5370  000291                     	ds	1
  5371  000292                     _doModeVerbose$1207:
  5372                           	opt stack 0
  5373                           
  5374                           ; 2 bytes @ 0x12
  5375  000292                     	ds	2
  5376  000294                     _doModeVerbose$1212:
  5377                           	opt stack 0
  5378                           
  5379                           ; 2 bytes @ 0x14
  5380  000294                     	ds	2
  5381  000296                     _doModeVerbose$1216:
  5382                           	opt stack 0
  5383                           
  5384                           ; 2 bytes @ 0x16
  5385  000296                     	ds	2
  5386  000298                     _doModeVerbose$1221:
  5387                           	opt stack 0
  5388                           
  5389                           ; 2 bytes @ 0x18
  5390  000298                     	ds	2
  5391  00029A                     _doModeVerbose$1229:
  5392                           	opt stack 0
  5393                           
  5394                           ; 2 bytes @ 0x1A
  5395  00029A                     	ds	2
  5396  00029C                     _doModeVerbose$1234:
  5397                           	opt stack 0
  5398                           
  5399                           ; 2 bytes @ 0x1C
  5400  00029C                     	ds	2
  5401  00029E                     _doModeVerbose$1238:
  5402                           	opt stack 0
  5403                           
  5404                           ; 2 bytes @ 0x1E
  5405  00029E                     	ds	2
  5406  0002A0                     _doModeVerbose$1261:
  5407                           	opt stack 0
  5408                           
  5409                           ; 2 bytes @ 0x20
  5410  0002A0                     	ds	2
  5411  0002A2                     _doModeVerbose$1267:
  5412                           	opt stack 0
  5413                           
  5414                           ; 2 bytes @ 0x22
  5415  0002A2                     	ds	2
  5416  0002A4                     _doModeVerbose$1276:
  5417                           	opt stack 0
  5418                           
  5419                           ; 2 bytes @ 0x24
  5420  0002A4                     	ds	2
  5421  0002A6                     doModeVerbose@rv:
  5422                           	opt stack 0
  5423                           
  5424                           ; 1 bytes @ 0x26
  5425  0002A6                     	ds	1
  5426  0002A7                     doModeVerbose@page_1244:
  5427                           	opt stack 0
  5428                           
  5429                           ; 1 bytes @ 0x27
  5430  0002A7                     	ds	1
  5431  0002A8                     doModeVerbose@reg_1245:
  5432                           	opt stack 0
  5433                           
  5434                           ; 1 bytes @ 0x28
  5435  0002A8                     	ds	1
  5436  0002A9                     doModeVerbose@value_1270:
  5437                           	opt stack 0
  5438                           
  5439                           ; 1 bytes @ 0x29
  5440  0002A9                     	ds	1
  5441  0002AA                     doModeVerbose@id_1318:
  5442                           	opt stack 0
  5443                           
  5444                           ; 4 bytes @ 0x2A
  5445  0002AA                     	ds	4
  5446  0002AE                     doModeVerbose@filterno:
  5447                           	opt stack 0
  5448                           
  5449                           ; 1 bytes @ 0x2E
  5450  0002AE                     	ds	1
  5451  0002AF                     doModeVerbose@maskno:
  5452                           	opt stack 0
  5453                           
  5454                           ; 1 bytes @ 0x2F
  5455  0002AF                     	ds	1
  5456  0002B0                     doModeVerbose@i:
  5457                           	opt stack 0
  5458                           
  5459                           ; 1 bytes @ 0x30
  5460  0002B0                     	ds	1
  5461  0002B1                     doModeVerbose@value_1246:
  5462                           	opt stack 0
  5463                           
  5464                           ; 1 bytes @ 0x31
  5465  0002B1                     	ds	1
  5466  0002B2                     doModeVerbose@count:
  5467                           	opt stack 0
  5468                           
  5469                           ; 1 bytes @ 0x32
  5470  0002B2                     	ds	1
  5471  0002B3                     doModeVerbose@nodeid:
  5472                           	opt stack 0
  5473                           
  5474                           ; 1 bytes @ 0x33
  5475  0002B3                     	ds	1
  5476  0002B4                     doModeVerbose@nodeid_1243:
  5477                           	opt stack 0
  5478                           
  5479                           ; 1 bytes @ 0x34
  5480  0002B4                     	ds	1
  5481  0002B5                     doModeVerbose@page:
  5482                           	opt stack 0
  5483                           
  5484                           ; 1 bytes @ 0x35
  5485  0002B5                     	ds	1
  5486  0002B6                     doModeVerbose@reg:
  5487                           	opt stack 0
  5488                           
  5489                           ; 1 bytes @ 0x36
  5490  0002B6                     	ds	1
  5491  0002B7                     doModeVerbose@i_1188:
  5492                           	opt stack 0
  5493                           
  5494                           ; 1 bytes @ 0x37
  5495  0002B7                     	ds	1
  5496  0002B8                     doModeVerbose@nodeid_1269:
  5497                           	opt stack 0
  5498                           
  5499                           ; 1 bytes @ 0x38
  5500  0002B8                     	ds	1
  5501  0002B9                     doModeVerbose@c:
  5502                           	opt stack 0
  5503                           
  5504                           ; 1 bytes @ 0x39
  5505  0002B9                     	ds	1
  5506  0002BA                     doModeVerbose@value:
  5507                           	opt stack 0
  5508                           
  5509                           ; 1 bytes @ 0x3A
  5510  0002BA                     	ds	1
  5511  0002BB                     doModeVerbose@p_1195:
  5512                           	opt stack 0
  5513                           
  5514                           ; 2 bytes @ 0x3B
  5515  0002BB                     	ds	2
  5516  0002BD                     doModeVerbose@p_1248:
  5517                           	opt stack 0
  5518                           
  5519                           ; 2 bytes @ 0x3D
  5520  0002BD                     	ds	2
  5521  0002BF                     doModeVerbose@ifmode:
  5522                           	opt stack 0
  5523                           
  5524                           ; 1 bytes @ 0x3F
  5525  0002BF                     	ds	1
  5526  0002C0                     doModeVerbose@p:
  5527                           	opt stack 0
  5528                           
  5529                           ; 2 bytes @ 0x40
  5530  0002C0                     	ds	2
  5531  0002C2                     doModeVerbose@p_1286:
  5532                           	opt stack 0
  5533                           
  5534                           ; 2 bytes @ 0x42
  5535  0002C2                     	ds	2
  5536  0002C4                     doModeVerbose@p_1306:
  5537                           	opt stack 0
  5538                           
  5539                           ; 2 bytes @ 0x44
  5540  0002C4                     	ds	2
  5541                           tblptru	equ	0xFF8
  5542                           tblptrh	equ	0xFF7
  5543                           tblptrl	equ	0xFF6
  5544                           tablat	equ	0xFF5
  5545                           prodh	equ	0xFF4
  5546                           prodl	equ	0xFF3
  5547                           intcon	equ	0xFF2
  5548                           indf0	equ	0xFEF
  5549                           postinc0	equ	0xFEE
  5550                           fsr0h	equ	0xFEA
  5551                           fsr0l	equ	0xFE9
  5552                           wreg	equ	0xFE8
  5553                           indf1	equ	0xFE7
  5554                           postinc1	equ	0xFE6
  5555                           postdec1	equ	0xFE5
  5556                           fsr1h	equ	0xFE2
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           plusw2	equ	0xFDB
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566                           	psect	cstackBANK0
  5567  000060                     __pcstackBANK0:
  5568                           	opt stack 0
  5569  000060                     ?_WriteTimer0:
  5570                           	opt stack 0
  5571  000060                     ?_fifo_init:
  5572                           	opt stack 0
  5573  000060                     ?_OpenUSART:
  5574                           	opt stack 0
  5575  000060                     ?_Write_b_eep:
  5576                           	opt stack 0
  5577  000060                     ??_isdigit:
  5578  000060                     ?_Read_b_eep:
  5579                           	opt stack 0
  5580  000060                     ?_fifo_read:
  5581                           	opt stack 0
  5582  000060                     ?_memset:
  5583                           	opt stack 0
  5584  000060                     ?_strcpy:
  5585                           	opt stack 0
  5586  000060                     ?_strchr:
  5587                           	opt stack 0
  5588  000060                     ?_strlen:
  5589                           	opt stack 0
  5590  000060                     ?_memcpy:
  5591                           	opt stack 0
  5592  000060                     ?_strcat:
  5593                           	opt stack 0
  5594  000060                     ?___lwdiv:
  5595                           	opt stack 0
  5596  000060                     ?___lwmod:
  5597                           	opt stack 0
  5598  000060                     ?___wmul:
  5599                           	opt stack 0
  5600  000060                     ?___lldiv:
  5601                           	opt stack 0
  5602  000060                     ECANSetOperationMode@mode:
  5603                           	opt stack 0
  5604  000060                     nibbleFromChar@c:
  5605                           	opt stack 0
  5606  000060                     OpenTimer0@config:
  5607                           	opt stack 0
  5608  000060                     WriteUSART@data:
  5609                           	opt stack 0
  5610  000060                     toupper@c:
  5611                           	opt stack 0
  5612  000060                     fifo_init@f:
  5613                           	opt stack 0
  5614  000060                     fifo_read@f:
  5615                           	opt stack 0
  5616  000060                     _init_crc8$2073:
  5617                           	opt stack 0
  5618  000060                     Read_b_eep@badd:
  5619                           	opt stack 0
  5620  000060                     Write_b_eep@badd:
  5621                           	opt stack 0
  5622  000060                     WriteTimer0@timer0:
  5623                           	opt stack 0
  5624  000060                     OpenUSART@spbrg:
  5625                           	opt stack 0
  5626  000060                     ___lwdiv@dividend:
  5627                           	opt stack 0
  5628  000060                     ___lwmod@dividend:
  5629                           	opt stack 0
  5630  000060                     memcpy@d1:
  5631                           	opt stack 0
  5632  000060                     memset@p1:
  5633                           	opt stack 0
  5634  000060                     strcat@to:
  5635                           	opt stack 0
  5636  000060                     strchr@ptr:
  5637                           	opt stack 0
  5638  000060                     strcpy@to:
  5639                           	opt stack 0
  5640  000060                     strlen@s:
  5641                           	opt stack 0
  5642  000060                     ___wmul@multiplier:
  5643                           	opt stack 0
  5644  000060                     ___lldiv@dividend:
  5645                           	opt stack 0
  5646                           
  5647                           ; 4 bytes @ 0x0
  5648  000060                     	ds	1
  5649  000061                     ?_putsUSART:
  5650                           	opt stack 0
  5651  000061                     ??_printBinary:
  5652  000061                     ?_strichr:
  5653                           	opt stack 0
  5654  000061                     _isdigit$2990:
  5655                           	opt stack 0
  5656  000061                     putsUSART@data:
  5657                           	opt stack 0
  5658  000061                     strichr@ptr:
  5659                           	opt stack 0
  5660                           
  5661                           ; 2 bytes @ 0x1
  5662  000061                     	ds	1
  5663  000062                     ?_setFilter:
  5664                           	opt stack 0
  5665  000062                     ?__CANIDToRegs:
  5666                           	opt stack 0
  5667  000062                     Write_b_eep@bdat:
  5668                           	opt stack 0
  5669  000062                     OpenUSART@config:
  5670                           	opt stack 0
  5671  000062                     isdigit@c:
  5672                           	opt stack 0
  5673  000062                     __CANIDToRegs@ptr:
  5674                           	opt stack 0
  5675  000062                     fifo_init@buf:
  5676                           	opt stack 0
  5677  000062                     fifo_read@buf:
  5678                           	opt stack 0
  5679  000062                     init_crc8@j:
  5680                           	opt stack 0
  5681  000062                     WriteTimer0@timer:
  5682                           	opt stack 0
  5683  000062                     ___lwdiv@divisor:
  5684                           	opt stack 0
  5685  000062                     ___lwmod@divisor:
  5686                           	opt stack 0
  5687  000062                     memcpy@s1:
  5688                           	opt stack 0
  5689  000062                     memset@c:
  5690                           	opt stack 0
  5691  000062                     strcat@from:
  5692                           	opt stack 0
  5693  000062                     strchr@chr:
  5694                           	opt stack 0
  5695  000062                     strcpy@from:
  5696                           	opt stack 0
  5697  000062                     strlen@cp:
  5698                           	opt stack 0
  5699  000062                     ___wmul@multiplicand:
  5700                           	opt stack 0
  5701  000062                     setFilter@val:
  5702                           	opt stack 0
  5703                           
  5704                           ; 4 bytes @ 0x2
  5705  000062                     	ds	1
  5706  000063                     ??_putsUSART:
  5707  000063                     printBinary@value:
  5708                           	opt stack 0
  5709  000063                     Write_b_eep@GIE_BIT_VAL:
  5710                           	opt stack 0
  5711  000063                     strichr@chr:
  5712                           	opt stack 0
  5713                           
  5714                           ; 2 bytes @ 0x3
  5715  000063                     	ds	1
  5716  000064                     ??_strchr:
  5717  000064                     ?_hexStringToBytes:
  5718                           	opt stack 0
  5719  000064                     ?_strnicmp:
  5720                           	opt stack 0
  5721  000064                     init_app_eeprom@i:
  5722                           	opt stack 0
  5723  000064                     init_crc8@crc:
  5724                           	opt stack 0
  5725  000064                     ___lwdiv@counter:
  5726                           	opt stack 0
  5727  000064                     ___lwmod@counter:
  5728                           	opt stack 0
  5729  000064                     printBinary@i:
  5730                           	opt stack 0
  5731  000064                     fifo_init@size:
  5732                           	opt stack 0
  5733  000064                     fifo_read@nbytes:
  5734                           	opt stack 0
  5735  000064                     hexStringToBytes@buf:
  5736                           	opt stack 0
  5737  000064                     memcpy@n:
  5738                           	opt stack 0
  5739  000064                     memset@n:
  5740                           	opt stack 0
  5741  000064                     strcat@cp:
  5742                           	opt stack 0
  5743  000064                     strcpy@cp:
  5744                           	opt stack 0
  5745  000064                     strnicmp@s1:
  5746                           	opt stack 0
  5747  000064                     ___wmul@product:
  5748                           	opt stack 0
  5749  000064                     __CANIDToRegs@val:
  5750                           	opt stack 0
  5751  000064                     ___lldiv@divisor:
  5752                           	opt stack 0
  5753                           
  5754                           ; 4 bytes @ 0x4
  5755  000064                     	ds	1
  5756  000065                     init_crc8@i:
  5757                           	opt stack 0
  5758  000065                     ___lwdiv@quotient:
  5759                           	opt stack 0
  5760                           
  5761                           ; 2 bytes @ 0x5
  5762  000065                     	ds	1
  5763  000066                     ??_fifo_read:
  5764  000066                     ??_setFilter:
  5765  000066                     ?_atoi:
  5766                           	opt stack 0
  5767  000066                     ?_strspn:
  5768                           	opt stack 0
  5769  000066                     ?_strcspn:
  5770                           	opt stack 0
  5771  000066                     hexStringToBytes@size:
  5772                           	opt stack 0
  5773  000066                     atoi@s:
  5774                           	opt stack 0
  5775  000066                     memcpy@d:
  5776                           	opt stack 0
  5777  000066                     memset@p:
  5778                           	opt stack 0
  5779  000066                     strnicmp@s2:
  5780                           	opt stack 0
  5781  000066                     strcspn@s1:
  5782                           	opt stack 0
  5783  000066                     strspn@s1:
  5784                           	opt stack 0
  5785                           
  5786                           ; 2 bytes @ 0x6
  5787  000066                     	ds	1
  5788  000067                     ?_crc8:
  5789                           	opt stack 0
  5790  000067                     ?_utoa:
  5791                           	opt stack 0
  5792  000067                     crc8@crc:
  5793                           	opt stack 0
  5794  000067                     hexStringToBytes@inhex:
  5795                           	opt stack 0
  5796  000067                     utoa@buf:
  5797                           	opt stack 0
  5798                           
  5799                           ; 2 bytes @ 0x7
  5800  000067                     	ds	1
  5801  000068                     ??_atoi:
  5802  000068                     __CANIDToRegs@type:
  5803                           	opt stack 0
  5804  000068                     ___lldiv@counter:
  5805                           	opt stack 0
  5806  000068                     memcpy@s:
  5807                           	opt stack 0
  5808  000068                     strnicmp@len:
  5809                           	opt stack 0
  5810  000068                     strcspn@s2:
  5811                           	opt stack 0
  5812  000068                     strspn@s2:
  5813                           	opt stack 0
  5814                           
  5815                           ; 2 bytes @ 0x8
  5816  000068                     	ds	1
  5817  000069                     ??__CANIDToRegs:
  5818  000069                     ??_hexStringToBytes:
  5819  000069                     crc8@m:
  5820                           	opt stack 0
  5821  000069                     utoa@val:
  5822                           	opt stack 0
  5823  000069                     ___lldiv@quotient:
  5824                           	opt stack 0
  5825                           
  5826                           ; 4 bytes @ 0x9
  5827  000069                     	ds	1
  5828  00006A                     ??_crc8:
  5829  00006A                     ??_strnicmp:
  5830  00006A                     atoi@sign:
  5831                           	opt stack 0
  5832  00006A                     fifo_read@p:
  5833                           	opt stack 0
  5834  00006A                     strcspn@i:
  5835                           	opt stack 0
  5836  00006A                     strspn@i:
  5837                           	opt stack 0
  5838                           
  5839                           ; 2 bytes @ 0xA
  5840  00006A                     	ds	1
  5841  00006B                     __CANIDToRegs@Value:
  5842                           	opt stack 0
  5843  00006B                     atoi@a:
  5844                           	opt stack 0
  5845  00006B                     utoa@base:
  5846                           	opt stack 0
  5847                           
  5848                           ; 2 bytes @ 0xB
  5849  00006B                     	ds	1
  5850  00006C                     ?_sendEscapedUartData:
  5851                           	opt stack 0
  5852  00006C                     ?_calcCRC:
  5853                           	opt stack 0
  5854  00006C                     ?_ECANSendMessage:
  5855                           	opt stack 0
  5856  00006C                     ?_strtok:
  5857                           	opt stack 0
  5858  00006C                     setFilter@filter:
  5859                           	opt stack 0
  5860  00006C                     strnicmp@r:
  5861                           	opt stack 0
  5862  00006C                     sendEscapedUartData@pcrc:
  5863                           	opt stack 0
  5864  00006C                     calcCRC@p:
  5865                           	opt stack 0
  5866  00006C                     fifo_read@i:
  5867                           	opt stack 0
  5868  00006C                     hexStringToBytes@len:
  5869                           	opt stack 0
  5870  00006C                     strtok@s1:
  5871                           	opt stack 0
  5872  00006C                     ECANSendMessage@id:
  5873                           	opt stack 0
  5874                           
  5875                           ; 4 bytes @ 0xC
  5876  00006C                     	ds	1
  5877  00006D                     ?_stristr:
  5878                           	opt stack 0
  5879  00006D                     ?___llmod:
  5880                           	opt stack 0
  5881  00006D                     setFilter@sidh:
  5882                           	opt stack 0
  5883  00006D                     utoa@v:
  5884                           	opt stack 0
  5885  00006D                     stristr@s1:
  5886                           	opt stack 0
  5887  00006D                     ___llmod@dividend:
  5888                           	opt stack 0
  5889                           
  5890                           ; 4 bytes @ 0xD
  5891  00006D                     	ds	1
  5892  00006E                     ?_getCANFrame:
  5893                           	opt stack 0
  5894  00006E                     sendEscapedUartData@c:
  5895                           	opt stack 0
  5896  00006E                     calcCRC@len:
  5897                           	opt stack 0
  5898  00006E                     setFilter@sidl:
  5899                           	opt stack 0
  5900  00006E                     getCANFrame@pdlc:
  5901                           	opt stack 0
  5902  00006E                     hexStringToBytes@p:
  5903                           	opt stack 0
  5904  00006E                     strtok@s2:
  5905                           	opt stack 0
  5906                           
  5907                           ; 2 bytes @ 0xE
  5908  00006E                     	ds	1
  5909  00006F                     ?_sendVSCPDriverCommandReply:
  5910                           	opt stack 0
  5911  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5912                           	opt stack 0
  5913  00006F                     sendVSCPDriverAck@crc:
  5914                           	opt stack 0
  5915  00006F                     sendVSCPDriverNack@crc:
  5916                           	opt stack 0
  5917  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5918                           	opt stack 0
  5919  00006F                     sendVSCPModeCapabilities@crc:
  5920                           	opt stack 0
  5921  00006F                     calcCRC@j:
  5922                           	opt stack 0
  5923  00006F                     setFilter@eidh:
  5924                           	opt stack 0
  5925  00006F                     utoa@c:
  5926                           	opt stack 0
  5927  00006F                     stristr@s2:
  5928                           	opt stack 0
  5929                           
  5930                           ; 2 bytes @ 0xF
  5931  00006F                     	ds	1
  5932  000070                     ?_itoa:
  5933                           	opt stack 0
  5934  000070                     sendVSCPDriverErrorFrame@crc:
  5935                           	opt stack 0
  5936  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5937                           	opt stack 0
  5938  000070                     calcCRC@crc:
  5939                           	opt stack 0
  5940  000070                     setFilter@eidl:
  5941                           	opt stack 0
  5942  000070                     getCANFrame@pdata:
  5943                           	opt stack 0
  5944  000070                     ECANSendMessage@data:
  5945                           	opt stack 0
  5946  000070                     hexStringToBytes@i:
  5947                           	opt stack 0
  5948  000070                     itoa@buf:
  5949                           	opt stack 0
  5950                           
  5951                           ; 2 bytes @ 0x10
  5952  000070                     	ds	1
  5953  000071                     ??_init_app_ram:
  5954  000071                     sendVSCPDriverCommandReply@crc:
  5955                           	opt stack 0
  5956  000071                     ___llmod@divisor:
  5957                           	opt stack 0
  5958                           
  5959                           ; 4 bytes @ 0x11
  5960  000071                     	ds	1
  5961  000072                     getCANFrame@pid:
  5962                           	opt stack 0
  5963  000072                     ECANSendMessage@dataLen:
  5964                           	opt stack 0
  5965  000072                     itoa@val:
  5966                           	opt stack 0
  5967                           
  5968                           ; 2 bytes @ 0x12
  5969  000072                     	ds	1
  5970  000073                     ?_getVSCPFrame:
  5971                           	opt stack 0
  5972  000073                     getVSCPFrame@pvscptype:
  5973                           	opt stack 0
  5974  000073                     ECANSendMessage@msgFlags:
  5975                           	opt stack 0
  5976  000073                     receiveSendEventCANAL@data:
  5977                           	opt stack 0
  5978  000073                     receiveSendMultiEventCANAL@data:
  5979                           	opt stack 0
  5980                           
  5981                           ; 8 bytes @ 0x13
  5982  000073                     	ds	1
  5983  000074                     ??_ECANSendMessage:
  5984  000074                     getVSCPFrame@pNodeId:
  5985                           	opt stack 0
  5986  000074                     itoa@base:
  5987                           	opt stack 0
  5988                           
  5989                           ; 2 bytes @ 0x14
  5990  000074                     	ds	1
  5991  000075                     getVSCPFrame@pPriority:
  5992                           	opt stack 0
  5993  000075                     ___llmod@counter:
  5994                           	opt stack 0
  5995  000075                     ECANSendMessage@pb:
  5996                           	opt stack 0
  5997                           
  5998                           ; 18 bytes @ 0x15
  5999  000075                     	ds	1
  6000  000076                     ?_sprintf:
  6001                           	opt stack 0
  6002  000076                     ?_ultoa:
  6003                           	opt stack 0
  6004  000076                     getVSCPFrame@pSize:
  6005                           	opt stack 0
  6006  000076                     sprintf@sp:
  6007                           	opt stack 0
  6008  000076                     ultoa@buf:
  6009                           	opt stack 0
  6010                           
  6011                           ; 2 bytes @ 0x16
  6012  000076                     	ds	1
  6013  000077                     getVSCPFrame@pData:
  6014                           	opt stack 0
  6015                           
  6016                           ; 2 bytes @ 0x17
  6017  000077                     	ds	1
  6018  000078                     sprintf@f:
  6019                           	opt stack 0
  6020  000078                     ultoa@val:
  6021                           	opt stack 0
  6022  000078                     printFirmwareVersion@wrkbuf:
  6023                           	opt stack 0
  6024                           
  6025                           ; 20 bytes @ 0x18
  6026  000078                     	ds	1
  6027  000079                     init_app_ram@i:
  6028                           	opt stack 0
  6029  000079                     getVSCPFrame@pvscpclass:
  6030                           	opt stack 0
  6031                           
  6032                           ; 1 bytes @ 0x19
  6033  000079                     	ds	1
  6034  00007A                     getVSCPFrame@id:
  6035                           	opt stack 0
  6036                           
  6037                           ; 4 bytes @ 0x1A
  6038  00007A                     	ds	1
  6039  00007B                     receiveSendEventCANAL@i:
  6040                           	opt stack 0
  6041  00007B                     receiveSendMultiEventCANAL@msgcount:
  6042                           	opt stack 0
  6043                           
  6044                           ; 1 bytes @ 0x1B
  6045  00007B                     	ds	1
  6046  00007C                     receiveSendMultiEventCANAL@i:
  6047                           	opt stack 0
  6048  00007C                     ultoa@base:
  6049                           	opt stack 0
  6050  00007C                     receiveSendEventCANAL@id:
  6051                           	opt stack 0
  6052                           
  6053                           ; 4 bytes @ 0x1C
  6054  00007C                     	ds	1
  6055  00007D                     receiveSendMultiEventCANAL@id:
  6056                           	opt stack 0
  6057                           
  6058                           ; 4 bytes @ 0x1D
  6059  00007D                     	ds	1
  6060  00007E                     ??_sprintf:
  6061  00007E                     ultoa@v:
  6062                           	opt stack 0
  6063                           
  6064                           ; 4 bytes @ 0x1E
  6065  00007E                     	ds	2
  6066  000080                     receiveSendEventCANAL@dlc:
  6067                           	opt stack 0
  6068                           
  6069                           ; 1 bytes @ 0x20
  6070  000080                     	ds	1
  6071  000081                     receiveSendEventCANAL@crc:
  6072                           	opt stack 0
  6073  000081                     receiveSendMultiEventCANAL@dlc:
  6074                           	opt stack 0
  6075  000081                     sprintf@idx:
  6076                           	opt stack 0
  6077                           
  6078                           ; 1 bytes @ 0x21
  6079  000081                     	ds	1
  6080  000082                     receiveSendMultiEventCANAL@crc:
  6081                           	opt stack 0
  6082  000082                     ultoa@c:
  6083                           	opt stack 0
  6084  000082                     _sprintf$2135:
  6085                           	opt stack 0
  6086                           
  6087                           ; 2 bytes @ 0x22
  6088  000082                     	ds	1
  6089  000083                     ??_receiveSendEventSLCAN:
  6090  000083                     receiveSendMultiEventCANAL@pos:
  6091                           	opt stack 0
  6092                           
  6093                           ; 1 bytes @ 0x23
  6094  000083                     	ds	1
  6095  000084                     _sprintf$2136:
  6096                           	opt stack 0
  6097                           
  6098                           ; 2 bytes @ 0x24
  6099  000084                     	ds	2
  6100  000086                     _sprintf$2142:
  6101                           	opt stack 0
  6102  000086                     receiveSendEventSLCAN@id:
  6103                           	opt stack 0
  6104                           
  6105                           ; 4 bytes @ 0x26
  6106  000086                     	ds	1
  6107  000087                     ECANSendMessage@mode:
  6108                           	opt stack 0
  6109                           
  6110                           ; 1 bytes @ 0x27
  6111  000087                     	ds	1
  6112  000088                     ECANSendMessage@buffers:
  6113                           	opt stack 0
  6114  000088                     sprintf@ap:
  6115                           	opt stack 0
  6116                           
  6117                           ; 1 bytes @ 0x28
  6118  000088                     	ds	1
  6119  000089                     ECANSendMessage@j:
  6120                           	opt stack 0
  6121  000089                     sprintf@prec:
  6122                           	opt stack 0
  6123                           
  6124                           ; 2 bytes @ 0x29
  6125  000089                     	ds	1
  6126  00008A                     receiveSendEventSLCAN@dlc:
  6127                           	opt stack 0
  6128  00008A                     ECANSendMessage@tempBSEL0:
  6129                           	opt stack 0
  6130                           
  6131                           ; 1 bytes @ 0x2A
  6132  00008A                     	ds	1
  6133  00008B                     receiveSendEventSLCAN@i:
  6134                           	opt stack 0
  6135  00008B                     ECANSendMessage@tempPtr:
  6136                           	opt stack 0
  6137  00008B                     sprintf@width:
  6138                           	opt stack 0
  6139                           
  6140                           ; 2 bytes @ 0x2B
  6141  00008B                     	ds	2
  6142  00008D                     ECANSendMessage@temp:
  6143                           	opt stack 0
  6144  00008D                     sprintf@_val:
  6145                           	opt stack 0
  6146                           
  6147                           ; 4 bytes @ 0x2D
  6148  00008D                     	ds	1
  6149  00008E                     ECANSendMessage@i:
  6150                           	opt stack 0
  6151                           
  6152                           ; 1 bytes @ 0x2E
  6153  00008E                     	ds	1
  6154  00008F                     ECANSendMessage@ptr:
  6155                           	opt stack 0
  6156                           
  6157                           ; 2 bytes @ 0x2F
  6158  00008F                     	ds	2
  6159  000091                     ?_sendCANFrame:
  6160                           	opt stack 0
  6161  000091                     sprintf@c:
  6162                           	opt stack 0
  6163  000091                     sendCANFrame@id:
  6164                           	opt stack 0
  6165                           
  6166                           ; 4 bytes @ 0x31
  6167  000091                     	ds	1
  6168  000092                     sprintf@flag:
  6169                           	opt stack 0
  6170                           
  6171                           ; 2 bytes @ 0x32
  6172  000092                     	ds	2
  6173  000094                     ??_receivePrintEventVerbose:
  6174  000094                     _printStatistics$1480:
  6175                           	opt stack 0
  6176  000094                     _printErrors$1505:
  6177                           	opt stack 0
  6178                           
  6179                           ; 2 bytes @ 0x34
  6180  000094                     	ds	1
  6181  000095                     sendCANFrame@dlc:
  6182                           	opt stack 0
  6183                           
  6184                           ; 1 bytes @ 0x35
  6185  000095                     	ds	1
  6186  000096                     _printStatistics$1486:
  6187                           	opt stack 0
  6188  000096                     _printErrors$1511:
  6189                           	opt stack 0
  6190  000096                     sendCANFrame@pdata:
  6191                           	opt stack 0
  6192                           
  6193                           ; 2 bytes @ 0x36
  6194  000096                     	ds	2
  6195  000098                     ??_doModeSLCAN:
  6196  000098                     ??_receiveVSCPModeCanalMsg:
  6197  000098                     ?_sendVSCPFrame:
  6198                           	opt stack 0
  6199  000098                     _printStatistics$1492:
  6200                           	opt stack 0
  6201  000098                     _printErrors$1517:
  6202                           	opt stack 0
  6203  000098                     sendVSCPFrame@vscpclass:
  6204                           	opt stack 0
  6205                           
  6206                           ; 2 bytes @ 0x38
  6207  000098                     	ds	1
  6208  000099                     _receivePrintEventVerbose$1387:
  6209                           	opt stack 0
  6210                           
  6211                           ; 2 bytes @ 0x39
  6212  000099                     	ds	1
  6213  00009A                     sendVSCPFrame@vscptype:
  6214                           	opt stack 0
  6215  00009A                     _printStatistics$1498:
  6216                           	opt stack 0
  6217  00009A                     _printErrors$1523:
  6218                           	opt stack 0
  6219                           
  6220                           ; 2 bytes @ 0x3A
  6221  00009A                     	ds	1
  6222  00009B                     sendVSCPFrame@nodeid:
  6223                           	opt stack 0
  6224  00009B                     _receivePrintEventVerbose$1392:
  6225                           	opt stack 0
  6226                           
  6227                           ; 2 bytes @ 0x3B
  6228  00009B                     	ds	1
  6229  00009C                     sendVSCPFrame@priority:
  6230                           	opt stack 0
  6231  00009C                     _printErrors$1529:
  6232                           	opt stack 0
  6233                           
  6234                           ; 2 bytes @ 0x3C
  6235  00009C                     	ds	1
  6236  00009D                     sendVSCPFrame@size:
  6237                           	opt stack 0
  6238  00009D                     _receivePrintEventVerbose$1397:
  6239                           	opt stack 0
  6240                           
  6241                           ; 2 bytes @ 0x3D
  6242  00009D                     	ds	1
  6243  00009E                     _printErrors$1538:
  6244                           	opt stack 0
  6245  00009E                     sendVSCPFrame@pData:
  6246                           	opt stack 0
  6247                           
  6248                           ; 2 bytes @ 0x3E
  6249  00009E                     	ds	1
  6250  00009F                     _receivePrintEventVerbose$1402:
  6251                           	opt stack 0
  6252  00009F                     doModeSLCAN@id:
  6253                           	opt stack 0
  6254                           
  6255                           ; 4 bytes @ 0x3F
  6256  00009F                     	ds	1
  6257  0000A0                     ??_sendVSCPFrame:
  6258                           
  6259                           ; 0 bytes @ 0x40
  6260  0000A0                     	ds	1
  6261  0000A1                     _receivePrintEventVerbose$1407:
  6262                           	opt stack 0
  6263                           
  6264                           ; 2 bytes @ 0x41
  6265  0000A1                     	ds	2
  6266  0000A3                     doModeSLCAN@dlc:
  6267                           	opt stack 0
  6268  0000A3                     _receivePrintEventVerbose$1412:
  6269                           	opt stack 0
  6270                           
  6271                           ; 2 bytes @ 0x43
  6272  0000A3                     	ds	1
  6273  0000A4                     doModeSLCAN@c:
  6274                           	opt stack 0
  6275                           
  6276                           ; 1 bytes @ 0x44
  6277  0000A4                     	ds	1
  6278  0000A5                     doModeSLCAN@rv:
  6279                           	opt stack 0
  6280  0000A5                     receivePrintEventVerbose@i:
  6281                           	opt stack 0
  6282                           
  6283                           ; 1 bytes @ 0x45
  6284  0000A5                     	ds	7
  6285  0000AC                     receiveVSCPModeCanalMsg@data:
  6286                           	opt stack 0
  6287                           
  6288                           ; 8 bytes @ 0x4C
  6289  0000AC                     	ds	8
  6290  0000B4                     receiveVSCPModeCanalMsg@id:
  6291                           	opt stack 0
  6292  0000B4                     sendVSCPFrame@id:
  6293                           	opt stack 0
  6294                           
  6295                           ; 4 bytes @ 0x54
  6296  0000B4                     	ds	4
  6297  0000B8                     ?_readRegisterExtended:
  6298                           	opt stack 0
  6299  0000B8                     ?_writeRegisterExtended:
  6300                           	opt stack 0
  6301  0000B8                     ?_readRegister:
  6302                           	opt stack 0
  6303  0000B8                     receiveVSCPModeCanalMsg@dlc:
  6304                           	opt stack 0
  6305  0000B8                     readRegister@reg:
  6306                           	opt stack 0
  6307  0000B8                     readRegisterExtended@page:
  6308                           	opt stack 0
  6309  0000B8                     writeRegisterExtended@page:
  6310                           	opt stack 0
  6311                           
  6312                           ; 2 bytes @ 0x58
  6313  0000B8                     	ds	1
  6314  0000B9                     doModeVscp@c:
  6315                           	opt stack 0
  6316  0000B9                     readRegister@timeout:
  6317                           	opt stack 0
  6318                           
  6319                           ; 2 bytes @ 0x59
  6320  0000B9                     	ds	1
  6321  0000BA                     readRegisterExtended@reg:
  6322                           	opt stack 0
  6323  0000BA                     writeRegisterExtended@reg:
  6324                           	opt stack 0
  6325                           
  6326                           ; 1 bytes @ 0x5A
  6327  0000BA                     	ds	1
  6328  0000BB                     readRegister@value:
  6329                           	opt stack 0
  6330  0000BB                     readRegisterExtended@timeout:
  6331                           	opt stack 0
  6332  0000BB                     writeRegisterExtended@timeout:
  6333                           	opt stack 0
  6334                           
  6335                           ; 2 bytes @ 0x5B
  6336  0000BB                     	ds	1
  6337  0000BC                     ??_readRegister:
  6338                           
  6339                           ; 0 bytes @ 0x5C
  6340  0000BC                     	ds	1
  6341  0000BD                     readRegisterExtended@value:
  6342                           	opt stack 0
  6343  0000BD                     writeRegisterExtended@value:
  6344                           	opt stack 0
  6345                           
  6346                           ; 2 bytes @ 0x5D
  6347  0000BD                     	ds	2
  6348  0000BF                     ??_readRegisterExtended:
  6349  0000BF                     ??_writeRegisterExtended:
  6350                           
  6351                           ; 0 bytes @ 0x5F
  6352  0000BF                     	ds	1
  6353  0000C0                     readRegister@nodeid:
  6354                           	opt stack 0
  6355                           
  6356                           ; 1 bytes @ 0x60
  6357  0000C0                     	ds	1
  6358  0000C1                     printGUID@nodeid:
  6359                           	opt stack 0
  6360  0000C1                     printMDF@nodeid:
  6361                           	opt stack 0
  6362  0000C1                     printNodeFirmwareVersion@nodeid:
  6363                           	opt stack 0
  6364                           
  6365                           ; 1 bytes @ 0x61
  6366  0000C1                     	ds	1
  6367  0000C2                     printMDF@value:
  6368                           	opt stack 0
  6369  0000C2                     printGUID@buf:
  6370                           	opt stack 0
  6371  0000C2                     printNodeFirmwareVersion@buf:
  6372                           	opt stack 0
  6373                           
  6374                           ; 3 bytes @ 0x62
  6375  0000C2                     	ds	1
  6376  0000C3                     readRegisterExtended@nodeid:
  6377                           	opt stack 0
  6378  0000C3                     writeRegisterExtended@nodeid:
  6379                           	opt stack 0
  6380  0000C3                     printMDF@p:
  6381                           	opt stack 0
  6382                           
  6383                           ; 2 bytes @ 0x63
  6384  0000C3                     	ds	2
  6385  0000C5                     printGUID@value:
  6386                           	opt stack 0
  6387  0000C5                     printMDF@i:
  6388                           	opt stack 0
  6389  0000C5                     printNodeFirmwareVersion@value:
  6390                           	opt stack 0
  6391                           
  6392                           ; 1 bytes @ 0x65
  6393  0000C5                     	ds	1
  6394  0000C6                     printGUID@i:
  6395                           	opt stack 0
  6396  0000C6                     printNodeFirmwareVersion@i:
  6397                           	opt stack 0
  6398                           
  6399                           ; 1 bytes @ 0x66
  6400  0000C6                     	ds	1
  6401  0000C7                     _findNodes$1583:
  6402                           	opt stack 0
  6403                           
  6404                           ; 2 bytes @ 0x67
  6405  0000C7                     	ds	2
  6406  0000C9                     findNodes@nFound:
  6407                           	opt stack 0
  6408                           
  6409                           ; 1 bytes @ 0x69
  6410  0000C9                     	ds	1
  6411  0000CA                     findNodes@value:
  6412                           	opt stack 0
  6413                           
  6414                           ; 1 bytes @ 0x6A
  6415  0000CA                     	ds	1
  6416  0000CB                     findNodes@i:
  6417                           	opt stack 0
  6418                           
  6419                           ; 1 bytes @ 0x6B
  6420  0000CB                     	ds	1
  6421  0000CC                     ??_doModeVerbose:
  6422                           
  6423                           ; 0 bytes @ 0x6C
  6424  0000CC                     	ds	20
  6425  0000E0                     
  6426                           ; 2 bytes @ 0x80
  6427  0000E0                     	ds	2
  6428  0000E2                     
  6429                           ; 3 bytes @ 0x82
  6430  0000E2                     	ds	3
  6431  0000E5                     ??_main:
  6432                           
  6433                           ; 0 bytes @ 0x85
  6434  0000E5                     	ds	1
  6435  0000E6                     main@c:
  6436                           	opt stack 0
  6437                           
  6438                           ; 1 bytes @ 0x86
  6439  0000E6                     	ds	1
  6440                           tblptru	equ	0xFF8
  6441                           tblptrh	equ	0xFF7
  6442                           tblptrl	equ	0xFF6
  6443                           tablat	equ	0xFF5
  6444                           prodh	equ	0xFF4
  6445                           prodl	equ	0xFF3
  6446                           intcon	equ	0xFF2
  6447                           indf0	equ	0xFEF
  6448                           postinc0	equ	0xFEE
  6449                           fsr0h	equ	0xFEA
  6450                           fsr0l	equ	0xFE9
  6451                           wreg	equ	0xFE8
  6452                           indf1	equ	0xFE7
  6453                           postinc1	equ	0xFE6
  6454                           postdec1	equ	0xFE5
  6455                           fsr1h	equ	0xFE2
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           plusw2	equ	0xFDB
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465                           	psect	cstackCOMRAM
  6466  000001                     __pcstackCOMRAM:
  6467                           	opt stack 0
  6468  000001                     ?__RegsToCANID:
  6469                           	opt stack 0
  6470  000001                     ?i1_WriteTimer0:
  6471                           	opt stack 0
  6472  000001                     ?_fifo_write:
  6473                           	opt stack 0
  6474  000001                     ?_fifo_getFree:
  6475                           	opt stack 0
  6476  000001                     ?__ECANPointBuffer:
  6477                           	opt stack 0
  6478  000001                     ReadUSART@data:
  6479                           	opt stack 0
  6480  000001                     __RegsToCANID@ptr:
  6481                           	opt stack 0
  6482  000001                     fifo_write@f:
  6483                           	opt stack 0
  6484  000001                     fifo_getFree@f:
  6485                           	opt stack 0
  6486  000001                     i1WriteTimer0@timer0:
  6487                           	opt stack 0
  6488                           
  6489                           ; 2 bytes @ 0x0
  6490  000001                     	ds	2
  6491  000003                     ??_fifo_getFree:
  6492  000003                     __RegsToCANID@val:
  6493                           	opt stack 0
  6494  000003                     fifo_write@buf:
  6495                           	opt stack 0
  6496  000003                     i1WriteTimer0@timer:
  6497                           	opt stack 0
  6498                           
  6499                           ; 2 bytes @ 0x2
  6500  000003                     	ds	1
  6501  000004                     __ECANPointBuffer@b:
  6502                           	opt stack 0
  6503                           
  6504                           ; 1 bytes @ 0x3
  6505  000004                     	ds	1
  6506  000005                     __RegsToCANID@type:
  6507                           	opt stack 0
  6508  000005                     __ECANPointBuffer@pt:
  6509                           	opt stack 0
  6510  000005                     fifo_write@nbytes:
  6511                           	opt stack 0
  6512                           
  6513                           ; 4 bytes @ 0x4
  6514  000005                     	ds	1
  6515  000006                     ??__RegsToCANID:
  6516                           
  6517                           ; 0 bytes @ 0x5
  6518  000006                     	ds	2
  6519  000008                     __RegsToCANID@Value:
  6520                           	opt stack 0
  6521                           
  6522                           ; 2 bytes @ 0x7
  6523  000008                     	ds	1
  6524  000009                     ??_fifo_write:
  6525                           
  6526                           ; 0 bytes @ 0x8
  6527  000009                     	ds	1
  6528  00000A                     ?_ECANReceiveMessage:
  6529                           	opt stack 0
  6530  00000A                     ECANReceiveMessage@id:
  6531                           	opt stack 0
  6532                           
  6533                           ; 2 bytes @ 0x9
  6534  00000A                     	ds	2
  6535  00000C                     ECANReceiveMessage@data:
  6536                           	opt stack 0
  6537                           
  6538                           ; 2 bytes @ 0xB
  6539  00000C                     	ds	1
  6540  00000D                     fifo_write@p:
  6541                           	opt stack 0
  6542                           
  6543                           ; 2 bytes @ 0xC
  6544  00000D                     	ds	1
  6545  00000E                     ECANReceiveMessage@dataLen:
  6546                           	opt stack 0
  6547                           
  6548                           ; 1 bytes @ 0xD
  6549  00000E                     	ds	1
  6550  00000F                     ECANReceiveMessage@msgFlags:
  6551                           	opt stack 0
  6552  00000F                     fifo_write@i:
  6553                           	opt stack 0
  6554                           
  6555                           ; 4 bytes @ 0xE
  6556  00000F                     	ds	1
  6557  000010                     ECANReceiveMessage@savedPtr:
  6558                           	opt stack 0
  6559                           
  6560                           ; 2 bytes @ 0xF
  6561  000010                     	ds	2
  6562  000012                     ECANReceiveMessage@i:
  6563                           	opt stack 0
  6564                           
  6565                           ; 1 bytes @ 0x11
  6566  000012                     	ds	1
  6567  000013                     ECANReceiveMessage@mode:
  6568                           	opt stack 0
  6569                           
  6570                           ; 1 bytes @ 0x12
  6571  000013                     	ds	1
  6572  000014                     ECANReceiveMessage@temp:
  6573                           	opt stack 0
  6574                           
  6575                           ; 1 bytes @ 0x13
  6576  000014                     	ds	1
  6577  000015                     ECANReceiveMessage@ptr:
  6578                           	opt stack 0
  6579                           
  6580                           ; 2 bytes @ 0x14
  6581  000015                     	ds	2
  6582  000017                     ??_Interrupt:
  6583                           
  6584                           ; 0 bytes @ 0x16
  6585  000017                     	ds	9
  6586  000020                     Interrupt@c:
  6587                           	opt stack 0
  6588                           
  6589                           ; 1 bytes @ 0x1F
  6590  000020                     	ds	1
  6591  000021                     Interrupt@fail:
  6592                           	opt stack 0
  6593                           
  6594                           ; 1 bytes @ 0x20
  6595  000021                     	ds	1
  6596                           tblptru	equ	0xFF8
  6597                           tblptrh	equ	0xFF7
  6598                           tblptrl	equ	0xFF6
  6599                           tablat	equ	0xFF5
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           intcon	equ	0xFF2
  6603                           indf0	equ	0xFEF
  6604                           postinc0	equ	0xFEE
  6605                           fsr0h	equ	0xFEA
  6606                           fsr0l	equ	0xFE9
  6607                           wreg	equ	0xFE8
  6608                           indf1	equ	0xFE7
  6609                           postinc1	equ	0xFE6
  6610                           postdec1	equ	0xFE5
  6611                           fsr1h	equ	0xFE2
  6612                           fsr1l	equ	0xFE1
  6613                           indf2	equ	0xFDF
  6614                           postinc2	equ	0xFDE
  6615                           postdec2	equ	0xFDD
  6616                           plusw2	equ	0xFDB
  6617                           fsr2h	equ	0xFDA
  6618                           fsr2l	equ	0xFD9
  6619                           status	equ	0xFD8
  6620                           
  6621 ;;
  6622 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6623 ;;
  6624 ;; *************** function _main *****************
  6625 ;; Defined at:
  6626 ;;		line 295 in file "main.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;  argc            2  128[BANK0 ] int 
  6629 ;;  argv            3  130[BANK0 ] PTR PTR unsigned char 
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;  c               1  134[BANK0 ] unsigned char 
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  2  128[BANK0 ] int 
  6634 ;; Registers used:
  6635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : F/1
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6641 ;;      Params:         0       5       0       0       0       0       0
  6642 ;;      Locals:         0       1       0       0       0       0       0
  6643 ;;      Temps:          0       1       0       0       0       0       0
  6644 ;;      Totals:         0       7       0       0       0       0       0
  6645 ;;Total ram usage:        7 bytes
  6646 ;; Hardware stack levels required when called:   11
  6647 ;; This function calls:
  6648 ;;		_fifo_init
  6649 ;;		_init_crc8
  6650 ;;		_Read_b_eep
  6651 ;;		_vscp_restoreDefaults
  6652 ;;		_init
  6653 ;;		_putsUSART
  6654 ;;		_printFirmwareVersion
  6655 ;;		_printMode
  6656 ;;		_fifo_read
  6657 ;;		_ECANSetOperationMode
  6658 ;;		_checkCANBusState
  6659 ;;		_doModeVerbose
  6660 ;;		_doModeVscp
  6661 ;;		_doModeSLCAN
  6662 ;;		_doModeVscpNode
  6663 ;; This function is called by:
  6664 ;;		Startup code after reset
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text0
  6669  003BD4                     __ptext0:
  6670                           	opt stack 0
  6671  003BD4                     _main:
  6672                           	opt stack 19
  6673                           
  6674                           ;main.c: 297: caps.maxVscpFrames = 1;
  6675                           
  6676                           ;incstack = 0
  6677                           ;incstack = 0
  6678  003BD4  0E01               	movlw	1
  6679  003BD6  0101               	movlb	1	; () banked
  6680  003BD8  6FF1               	movwf	_caps& (0+255),b
  6681                           
  6682                           ;main.c: 298: caps.maxCanalFrames = 1;
  6683  003BDA  6FF2               	movwf	(_caps+1)& (0+255),b
  6684                           
  6685                           ; BSR set to: 1
  6686                           ;main.c: 303: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6687  003BDC  0E01               	movlw	high _serialInputFifo
  6688  003BDE  0100               	movlb	0	; () banked
  6689  003BE0  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6690  003BE2  0EDD               	movlw	low _serialInputFifo
  6691  003BE4  6F60               	movwf	?_fifo_init& (0+255),b
  6692  003BE6  0E02               	movlw	high _serial_inputBuffer
  6693  003BE8  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6694  003BEA  0E00               	movlw	low _serial_inputBuffer
  6695  003BEC  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6696  003BEE  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6697  003BF0  0E80               	movlw	128
  6698  003BF2  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6699  003BF4  EC7E  F009         	call	_fifo_init	;wreg free
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;main.c: 304: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6703  003BF8  0E01               	movlw	high _canInputFifo
  6704  003BFA  0100               	movlb	0	; () banked
  6705  003BFC  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6706  003BFE  0ECD               	movlw	low _canInputFifo
  6707  003C00  6F60               	movwf	?_fifo_init& (0+255),b
  6708  003C02  0E04               	movlw	high _can_inputBuffer
  6709  003C04  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6710  003C06  0E00               	movlw	low _can_inputBuffer
  6711  003C08  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6712  003C0A  0E01               	movlw	1
  6713  003C0C  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6714  003C0E  0EEE               	movlw	238
  6715  003C10  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6716  003C12  EC7E  F009         	call	_fifo_init	;wreg free
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;main.c: 307: init_crc8();
  6720  003C16  EC07  F00C         	call	_init_crc8	;wreg free
  6721                           
  6722                           ; BSR set to: 1
  6723                           ;main.c: 311: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6724                           ;main.c: 312: ( 0xaa != Read_b_eep(0x02) ) ) {
  6725  003C1A  0100               	movlb	0	; () banked
  6726  003C1C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6727  003C1E  0E01               	movlw	1
  6728  003C20  6F60               	movwf	?_Read_b_eep& (0+255),b
  6729  003C22  ECEC  F007         	call	_Read_b_eep	;wreg free
  6730  003C26  0A55               	xorlw	85
  6731  003C28  E108               	bnz	l14264
  6732  003C2A  0100               	movlb	0	; () banked
  6733  003C2C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6734  003C2E  0E02               	movlw	2
  6735  003C30  6F60               	movwf	?_Read_b_eep& (0+255),b
  6736  003C32  ECEC  F007         	call	_Read_b_eep	;wreg free
  6737  003C36  0AAA               	xorlw	170
  6738  003C38  A4D8               	btfss	status,2,c
  6739  003C3A                     l14264:
  6740                           
  6741                           ;main.c: 313: vscp_restoreDefaults();
  6742  003C3A  ECD6  F007         	call	_vscp_restoreDefaults	;wreg free
  6743                           
  6744                           ;main.c: 314: }
  6745                           ;main.c: 317: init();
  6746  003C3E  EC23  F00A         	call	_init	;wreg free
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;main.c: 321: _delay((unsigned long)((10)*(40000000/4000.0)));
  6750  003C42  0E82               	movlw	130
  6751  003C44  6FE5               	movwf	??_main& (0+255),b
  6752  003C46  0EDD               	movlw	221
  6753  003C48                     u23667:
  6754  003C48  2EE8               	decfsz	wreg,f,c
  6755  003C4A  D7FE               	goto	u23667
  6756  003C4C  2FE5               	decfsz	??_main& (0+255),f,b
  6757  003C4E  D7FC               	goto	u23667
  6758  003C50  D000               	nop2	
  6759                           
  6760                           ;main.c: 325: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6761  003C52  0E75               	movlw	high STR_1
  6762  003C54  0100               	movlb	0	; () banked
  6763  003C56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6764  003C58  0EB7               	movlw	low STR_1
  6765  003C5A  6F61               	movwf	?_putsUSART& (0+255),b
  6766  003C5C  ECBC  F00A         	call	_putsUSART	;wreg free
  6767                           
  6768                           ;main.c: 326: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6769  003C60  0E6E               	movlw	high STR_2
  6770  003C62  0100               	movlb	0	; () banked
  6771  003C64  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6772  003C66  0ED6               	movlw	low STR_2
  6773  003C68  6F61               	movwf	?_putsUSART& (0+255),b
  6774  003C6A  ECBC  F00A         	call	_putsUSART	;wreg free
  6775                           
  6776                           ;main.c: 327: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6777  003C6E  0E76               	movlw	high STR_3
  6778  003C70  0100               	movlb	0	; () banked
  6779  003C72  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6780  003C74  0E49               	movlw	low STR_3
  6781  003C76  6F61               	movwf	?_putsUSART& (0+255),b
  6782  003C78  ECBC  F00A         	call	_putsUSART	;wreg free
  6783                           
  6784                           ;main.c: 328: printFirmwareVersion();
  6785  003C7C  EC71  F00D         	call	_printFirmwareVersion	;wreg free
  6786                           
  6787                           ;main.c: 329: printMode();
  6788  003C80  EC31  F00D         	call	_printMode	;wreg free
  6789                           
  6790                           ;main.c: 333: if ( 0 != mode ) {
  6791  003C84  0101               	movlb	1	; () banked
  6792  003C86  512C               	movf	_mode& (0+255),w,b
  6793  003C88  E03B               	bz	l14298
  6794                           
  6795                           ; BSR set to: 1
  6796                           ;main.c: 335: uint8_t c;
  6797                           ;main.c: 337: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6798  003C8A  0E6F               	movlw	high STR_4
  6799  003C8C  0100               	movlb	0	; () banked
  6800  003C8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6801  003C90  0EEF               	movlw	low STR_4
  6802  003C92  6F61               	movwf	?_putsUSART& (0+255),b
  6803  003C94  ECBC  F00A         	call	_putsUSART	;wreg free
  6804                           
  6805                           ;main.c: 339: timekeeper = 0;
  6806  003C98  0101               	movlb	1	; () banked
  6807  003C9A  6B18               	clrf	_timekeeper& (0+255),b	;volatile
  6808  003C9C  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  6809  003C9E  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  6810  003CA0  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  6811                           
  6812                           ; BSR set to: 1
  6813                           ;main.c: 340: ledFunctionality = 6;
  6814  003CA2  0E06               	movlw	6
  6815  003CA4  6E32               	movwf	_ledFunctionality,c	;volatile
  6816                           
  6817                           ;main.c: 341: while (timekeeper < 3000) {
  6818  003CA6  D022               	goto	l14296
  6819  003CA8                     l450:
  6820                           
  6821                           ; BSR set to: 1
  6822  003CA8  0004               	clrwdt		;# 
  6823                           
  6824                           ;main.c: 343: (INTCONbits.GIE = 0);
  6825  003CAA  9EF2               	bcf	intcon,7,c	;volatile
  6826                           
  6827                           ;main.c: 344: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6828  003CAC  0E01               	movlw	high _serialInputFifo
  6829  003CAE  0100               	movlb	0	; () banked
  6830  003CB0  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6831  003CB2  0EDD               	movlw	low _serialInputFifo
  6832  003CB4  6F60               	movwf	?_fifo_read& (0+255),b
  6833  003CB6  0E00               	movlw	high main@c
  6834  003CB8  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6835  003CBA  0EE6               	movlw	low main@c
  6836  003CBC  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6837  003CBE  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6838  003CC0  0E01               	movlw	1
  6839  003CC2  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6840  003CC4  EC78  F012         	call	_fifo_read	;wreg free
  6841  003CC8  0560               	decf	?_fifo_read& (0+255),w,b
  6842  003CCA  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6843  003CCC  E10E               	bnz	l451
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;main.c: 345: (INTCONbits.GIE = 1);
  6847  003CCE  8EF2               	bsf	intcon,7,c	;volatile
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;main.c: 346: if ('v' == c) {
  6851  003CD0  51E6               	movf	main@c& (0+255),w,b
  6852  003CD2  0A76               	xorlw	118
  6853  003CD4  E10A               	bnz	l451
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;main.c: 347: mode = 0;
  6857  003CD6  0101               	movlb	1	; () banked
  6858  003CD8  6B2C               	clrf	_mode& (0+255),b
  6859                           
  6860                           ; BSR set to: 1
  6861                           ;main.c: 348: putsUSART((char *) "Temporary verbose mode set\r\n");
  6862  003CDA  0E77               	movlw	high STR_5
  6863  003CDC  0100               	movlb	0	; () banked
  6864  003CDE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6865  003CE0  0E70               	movlw	low STR_5
  6866  003CE2  6F61               	movwf	?_putsUSART& (0+255),b
  6867  003CE4  ECBC  F00A         	call	_putsUSART	;wreg free
  6868                           
  6869                           ;main.c: 349: break;
  6870  003CE8  D00B               	goto	l14298
  6871  003CEA                     l451:
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;main.c: 350: }
  6875                           ;main.c: 351: }
  6876                           ;main.c: 352: (INTCONbits.GIE = 1);
  6877  003CEA  8EF2               	bsf	intcon,7,c	;volatile
  6878  003CEC                     l14296:
  6879  003CEC  0EB8               	movlw	184
  6880  003CEE  0101               	movlb	1	; () banked
  6881  003CF0  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
  6882  003CF2  0E0B               	movlw	11
  6883  003CF4  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6884  003CF6  0E00               	movlw	0
  6885  003CF8  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6886  003CFA  0E00               	movlw	0
  6887  003CFC  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6888  003CFE  E3D4               	bnc	l450
  6889  003D00                     l14298:
  6890                           
  6891                           ;main.c: 353: }
  6892                           ;main.c: 354: }
  6893                           ;main.c: 356: ledFunctionality = 1;
  6894  003D00  0E01               	movlw	1
  6895  003D02  6E32               	movwf	_ledFunctionality,c	;volatile
  6896                           
  6897                           ;main.c: 361: switch ( Read_b_eep(0x07) ) {
  6898  003D04  D019               	goto	l14314
  6899  003D06                     l455:
  6900                           
  6901                           ;main.c: 364: bSilent = 0;
  6902  003D06  6A30               	clrf	_bSilent,c
  6903                           
  6904                           ;main.c: 365: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  6905  003D08  0E00               	movlw	0
  6906  003D0A  EC0A  F008         	call	_ECANSetOperationMode
  6907                           
  6908                           ;main.c: 366: break;
  6909  003D0E  D023               	goto	l461
  6910  003D10                     l14302:
  6911                           
  6912                           ;main.c: 369: bSilent = 1;
  6913  003D10  0E01               	movlw	1
  6914  003D12  6E30               	movwf	_bSilent,c
  6915                           
  6916                           ;main.c: 370: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  6917  003D14  0E00               	movlw	0
  6918  003D16  EC0A  F008         	call	_ECANSetOperationMode
  6919                           
  6920                           ;main.c: 371: break;
  6921  003D1A  D01D               	goto	l461
  6922  003D1C                     l458:
  6923                           
  6924                           ;main.c: 374: bSilent = 0;
  6925  003D1C  6A30               	clrf	_bSilent,c
  6926                           
  6927                           ;main.c: 375: ECANSetOperationMode( ECAN_OP_MODE_LISTEN );
  6928  003D1E  0E60               	movlw	96
  6929  003D20  EC0A  F008         	call	_ECANSetOperationMode
  6930                           
  6931                           ;main.c: 376: break;
  6932  003D24  D018               	goto	l461
  6933  003D26                     l459:
  6934                           
  6935                           ;main.c: 379: bSilent = 0;
  6936  003D26  6A30               	clrf	_bSilent,c
  6937                           
  6938                           ;main.c: 380: ECANSetOperationMode( ECAN_OP_MODE_LOOP );
  6939  003D28  0E40               	movlw	64
  6940  003D2A  EC0A  F008         	call	_ECANSetOperationMode
  6941                           
  6942                           ;main.c: 381: break;
  6943  003D2E  D013               	goto	l461
  6944  003D30                     l14310:
  6945                           
  6946                           ;main.c: 384: ECANSetOperationMode( 0x20 );
  6947  003D30  0E20               	movlw	32
  6948  003D32  EC0A  F008         	call	_ECANSetOperationMode
  6949                           
  6950                           ;main.c: 385: break;
  6951  003D36  D00F               	goto	l461
  6952  003D38                     l14314:
  6953  003D38  0100               	movlb	0	; () banked
  6954  003D3A  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6955  003D3C  0E07               	movlw	7
  6956  003D3E  6F60               	movwf	?_Read_b_eep& (0+255),b
  6957  003D40  ECEC  F007         	call	_Read_b_eep	;wreg free
  6958                           
  6959                           ; Switch size 1, requested type "space"
  6960                           ; Number of cases is 4, Range of values is 1 to 4
  6961                           ; switch strategies available:
  6962                           ; Name         Instructions Cycles
  6963                           ; simple_byte           13     7 (average)
  6964                           ;	Chosen strategy is simple_byte
  6965  003D44  0A01               	xorlw	1	; case 1
  6966  003D46  E0DF               	bz	l455
  6967  003D48  0A03               	xorlw	3	; case 2
  6968  003D4A  E0E2               	bz	l14302
  6969  003D4C  0A01               	xorlw	1	; case 3
  6970  003D4E  E0E6               	bz	l458
  6971  003D50  0A07               	xorlw	7	; case 4
  6972  003D52  E0E9               	bz	l459
  6973  003D54  D7ED               	goto	l14310
  6974  003D56                     l461:
  6975  003D56  0004               	clrwdt		;# 
  6976                           
  6977                           ;main.c: 397: checkCANBusState();
  6978  003D58  EC35  F008         	call	_checkCANBusState	;wreg free
  6979                           
  6980                           ;main.c: 401: if ( RCSTAbits.OERR ) {
  6981  003D5C  A2AB               	btfss	4011,1,c	;volatile
  6982  003D5E  D002               	goto	l462
  6983                           
  6984                           ;main.c: 402: RCSTAbits.CREN = 0;
  6985  003D60  98AB               	bcf	4011,4,c	;volatile
  6986                           
  6987                           ;main.c: 403: RCSTAbits.CREN = 1;
  6988  003D62  88AB               	bsf	4011,4,c	;volatile
  6989  003D64                     l462:
  6990                           
  6991                           ;main.c: 404: }
  6992                           ;main.c: 406: if (0 == mode) {
  6993  003D64  0101               	movlb	1	; () banked
  6994  003D66  672C               	tstfsz	_mode& (0+255),b
  6995  003D68  D003               	goto	l14324
  6996                           
  6997                           ; BSR set to: 1
  6998                           ;main.c: 407: doModeVerbose();
  6999  003D6A  ECDF  F029         	call	_doModeVerbose	;wreg free
  7000                           
  7001                           ;main.c: 408: }
  7002  003D6E  D7F3               	goto	l461
  7003  003D70                     l14324:
  7004                           
  7005                           ; BSR set to: 1
  7006                           ;main.c: 409: else if (1 == mode) {
  7007  003D70  052C               	decf	_mode& (0+255),w,b
  7008  003D72  E103               	bnz	l14328
  7009  003D74                     l14326:
  7010                           
  7011                           ; BSR set to: 1
  7012                           ;main.c: 410: doModeVscp();
  7013  003D74  EC0B  F01D         	call	_doModeVscp	;wreg free
  7014                           
  7015                           ;main.c: 411: }
  7016  003D78  D7EE               	goto	l461
  7017  003D7A                     l14328:
  7018                           
  7019                           ; BSR set to: 1
  7020                           ;main.c: 412: else if (2 == mode) {
  7021  003D7A  512C               	movf	_mode& (0+255),w,b
  7022  003D7C  0A02               	xorlw	2
  7023  003D7E  E103               	bnz	l14332
  7024                           
  7025                           ; BSR set to: 1
  7026                           ;main.c: 413: doModeSLCAN();
  7027  003D80  EC56  F024         	call	_doModeSLCAN	;wreg free
  7028                           
  7029                           ;main.c: 414: }
  7030  003D84  D7E8               	goto	l461
  7031  003D86                     l14332:
  7032                           
  7033                           ; BSR set to: 1
  7034                           ;main.c: 415: else if (3 == mode) {
  7035  003D86  512C               	movf	_mode& (0+255),w,b
  7036  003D88  0A03               	xorlw	3
  7037  003D8A  E1F4               	bnz	l14326
  7038                           
  7039                           ; BSR set to: 1
  7040                           ;main.c: 416: doModeVscpNode();
  7041  003D8C  ECD2  F007         	call	_doModeVscpNode	;wreg free
  7042                           
  7043                           ;main.c: 417: }
  7044  003D90  D7E2               	goto	l461
  7045  003D92                     __end_of_main:
  7046                           	opt stack 0
  7047                           tblptru	equ	0xFF8
  7048                           tblptrh	equ	0xFF7
  7049                           tblptrl	equ	0xFF6
  7050                           tablat	equ	0xFF5
  7051                           prodh	equ	0xFF4
  7052                           prodl	equ	0xFF3
  7053                           intcon	equ	0xFF2
  7054                           indf0	equ	0xFEF
  7055                           postinc0	equ	0xFEE
  7056                           fsr0h	equ	0xFEA
  7057                           fsr0l	equ	0xFE9
  7058                           wreg	equ	0xFE8
  7059                           indf1	equ	0xFE7
  7060                           postinc1	equ	0xFE6
  7061                           postdec1	equ	0xFE5
  7062                           fsr1h	equ	0xFE2
  7063                           fsr1l	equ	0xFE1
  7064                           indf2	equ	0xFDF
  7065                           postinc2	equ	0xFDE
  7066                           postdec2	equ	0xFDD
  7067                           plusw2	equ	0xFDB
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function _doModeVscpNode *****************
  7073 ;; Defined at:
  7074 ;;		line 1804 in file "main.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;		None
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;		None
  7079 ;; Return value:  Size  Location     Type
  7080 ;;		None               void
  7081 ;; Registers used:
  7082 ;;		None
  7083 ;; Tracked objects:
  7084 ;;		On entry : F/1
  7085 ;;		On exit  : F/1
  7086 ;;		Unchanged: F/0
  7087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7088 ;;      Params:         0       0       0       0       0       0       0
  7089 ;;      Locals:         0       0       0       0       0       0       0
  7090 ;;      Temps:          0       0       0       0       0       0       0
  7091 ;;      Totals:         0       0       0       0       0       0       0
  7092 ;;Total ram usage:        0 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    3
  7095 ;; This function calls:
  7096 ;;		Nothing
  7097 ;; This function is called by:
  7098 ;;		_main
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           	psect	text1
  7103  000FA4                     __ptext1:
  7104                           	opt stack 0
  7105  000FA4                     _doModeVscpNode:
  7106                           	opt stack 26
  7107                           
  7108                           ; BSR set to: 1
  7109                           
  7110                           ; BSR set to: 1
  7111                           ;incstack = 0
  7112                           ;incstack = 0
  7113  000FA4  0012               	return	
  7114  000FA6                     __end_of_doModeVscpNode:
  7115                           	opt stack 0
  7116                           tblptru	equ	0xFF8
  7117                           tblptrh	equ	0xFF7
  7118                           tblptrl	equ	0xFF6
  7119                           tablat	equ	0xFF5
  7120                           prodh	equ	0xFF4
  7121                           prodl	equ	0xFF3
  7122                           intcon	equ	0xFF2
  7123                           indf0	equ	0xFEF
  7124                           postinc0	equ	0xFEE
  7125                           fsr0h	equ	0xFEA
  7126                           fsr0l	equ	0xFE9
  7127                           wreg	equ	0xFE8
  7128                           indf1	equ	0xFE7
  7129                           postinc1	equ	0xFE6
  7130                           postdec1	equ	0xFE5
  7131                           fsr1h	equ	0xFE2
  7132                           fsr1l	equ	0xFE1
  7133                           indf2	equ	0xFDF
  7134                           postinc2	equ	0xFDE
  7135                           postdec2	equ	0xFDD
  7136                           plusw2	equ	0xFDB
  7137                           fsr2h	equ	0xFDA
  7138                           fsr2l	equ	0xFD9
  7139                           status	equ	0xFD8
  7140                           
  7141 ;; *************** function _doModeSLCAN *****************
  7142 ;; Defined at:
  7143 ;;		line 1586 in file "main.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;		None
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  id              4   63[BANK0 ] unsigned long 
  7148 ;;  dlc             1   67[BANK0 ] unsigned char 
  7149 ;;  rv              1   69[BANK0 ] enum E15660
  7150 ;;  c               1   68[BANK0 ] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;		None               void
  7153 ;; Registers used:
  7154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7155 ;; Tracked objects:
  7156 ;;		On entry : F/1
  7157 ;;		On exit  : F/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7160 ;;      Params:         0       0       0       0       0       0       0
  7161 ;;      Locals:         0       7       0       0       0       0       0
  7162 ;;      Temps:          0       7       0       0       0       0       0
  7163 ;;      Totals:         0      14       0       0       0       0       0
  7164 ;;Total ram usage:       14 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    7
  7167 ;; This function calls:
  7168 ;;		_putsUSART
  7169 ;;		_fifo_read
  7170 ;;		_ECANSetOperationMode
  7171 ;;		_Busy_eep
  7172 ;;		_Write_b_eep
  7173 ;;		_memset
  7174 ;;		_receiveSendEventSLCAN
  7175 ;;		_strlen
  7176 ;;		_hexStringToBytes
  7177 ;;		_memcpy
  7178 ;;		_sendCANFrame
  7179 ;; This function is called by:
  7180 ;;		_main
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           	psect	text2
  7185  0048AC                     __ptext2:
  7186                           	opt stack 0
  7187  0048AC                     _doModeSLCAN:
  7188                           	opt stack 22
  7189                           
  7190                           ; BSR set to: 1
  7191                           ;main.c: 1587: uint8_t c;
  7192                           ;main.c: 1588: BOOL rv = 0;
  7193                           
  7194                           ; BSR set to: 1
  7195                           ;incstack = 0
  7196                           ;incstack = 0
  7197  0048AC  0100               	movlb	0	; () banked
  7198  0048AE  6BA5               	clrf	doModeSLCAN@rv& (0+255),b
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;main.c: 1591: receiveSendEventSLCAN();
  7202  0048B0  EC96  F01A         	call	_receiveSendEventSLCAN	;wreg free
  7203                           
  7204                           ;main.c: 1594: (INTCONbits.GIE = 0);
  7205  0048B4  9EF2               	bcf	intcon,7,c	;volatile
  7206                           
  7207                           ;main.c: 1596: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  7208  0048B6  0E01               	movlw	high _serialInputFifo
  7209  0048B8  0100               	movlb	0	; () banked
  7210  0048BA  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  7211  0048BC  0EDD               	movlw	low _serialInputFifo
  7212  0048BE  6F60               	movwf	?_fifo_read& (0+255),b
  7213  0048C0  0E00               	movlw	high doModeSLCAN@c
  7214  0048C2  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  7215  0048C4  0EA4               	movlw	low doModeSLCAN@c
  7216  0048C6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  7217  0048C8  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  7218  0048CA  0E01               	movlw	1
  7219  0048CC  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  7220  0048CE  EC78  F012         	call	_fifo_read	;wreg free
  7221  0048D2  0560               	decf	?_fifo_read& (0+255),w,b
  7222  0048D4  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  7223  0048D6  E001 D1CA          	bnz	l15636
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;main.c: 1599: (INTCONbits.GIE = 1);
  7227  0048DA  8EF2               	bsf	intcon,7,c	;volatile
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;main.c: 1601: if (0x0d != c) {
  7231  0048DC  51A4               	movf	doModeSLCAN@c& (0+255),w,b
  7232  0048DE  0A0D               	xorlw	13
  7233  0048E0  E101 D17D          	bz	l15624
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;main.c: 1602: cmdbuf[ pos ] = c;
  7237  0048E4  0E2D               	movlw	low _cmdbuf
  7238  0048E6  2434               	addwf	_pos,w,c
  7239  0048E8  6ED9               	movwf	fsr2l,c
  7240  0048EA  6ADA               	clrf	fsr2h,c
  7241  0048EC  0E01               	movlw	high _cmdbuf
  7242  0048EE  22DA               	addwfc	fsr2h,f,c
  7243  0048F0  0100               	movlb	0	; () banked
  7244  0048F2  C0A4  FFDF         	movff	doModeSLCAN@c,indf2
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;main.c: 1603: pos++;
  7248  0048F6  2A34               	incf	_pos,f,c
  7249  0048F8  D1BB               	goto	l794
  7250  0048FA                     l15496:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;main.c: 1611: if (1 == strlen(cmdbuf)) {
  7254  0048FA  0E01               	movlw	high _cmdbuf
  7255  0048FC  0100               	movlb	0	; () banked
  7256  0048FE  6F61               	movwf	(?_strlen+1)& (0+255),b
  7257  004900  0E2D               	movlw	low _cmdbuf
  7258  004902  6F60               	movwf	?_strlen& (0+255),b
  7259  004904  EC9E  F009         	call	_strlen	;wreg free
  7260  004908  0560               	decf	?_strlen& (0+255),w,b
  7261  00490A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7262  00490C  E001 D196          	bnz	l15626
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;main.c: 1612: putsUSART((char *) "JFrankfurt RS-232\r\n");
  7266  004910  0E7A               	movlw	high STR_164
  7267  004912  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7268  004914  0E03               	movlw	low STR_164
  7269  004916  6F61               	movwf	?_putsUSART& (0+255),b
  7270  004918  ECBC  F00A         	call	_putsUSART	;wreg free
  7271  00491C                     l15500:
  7272                           
  7273                           ;main.c: 1613: rv = 1;
  7274  00491C  0E01               	movlw	1
  7275  00491E  D114               	goto	L3
  7276  004920                     l15502:
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;main.c: 1619: if (1 == strlen(cmdbuf)) {
  7280  004920  0E01               	movlw	high _cmdbuf
  7281  004922  0100               	movlb	0	; () banked
  7282  004924  6F61               	movwf	(?_strlen+1)& (0+255),b
  7283  004926  0E2D               	movlw	low _cmdbuf
  7284  004928  6F60               	movwf	?_strlen& (0+255),b
  7285  00492A  EC9E  F009         	call	_strlen	;wreg free
  7286  00492E  0560               	decf	?_strlen& (0+255),w,b
  7287  004930  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7288  004932  E001 D183          	bnz	l15626
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;main.c: 1620: putsUSART((char *) "V1011\r\n");
  7292  004936  0E7B               	movlw	high STR_165
  7293  004938  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7294  00493A  0EB2               	movlw	low STR_165
  7295  00493C  6F61               	movwf	?_putsUSART& (0+255),b
  7296  00493E  ECBC  F00A         	call	_putsUSART	;wreg free
  7297  004942  D7EC               	goto	l15500
  7298  004944                     l15508:
  7299                           
  7300                           ; BSR set to: 0
  7301                           ;main.c: 1627: if (1 == strlen(cmdbuf)) {
  7302  004944  0E01               	movlw	high _cmdbuf
  7303  004946  0100               	movlb	0	; () banked
  7304  004948  6F61               	movwf	(?_strlen+1)& (0+255),b
  7305  00494A  0E2D               	movlw	low _cmdbuf
  7306  00494C  6F60               	movwf	?_strlen& (0+255),b
  7307  00494E  EC9E  F009         	call	_strlen	;wreg free
  7308  004952  0560               	decf	?_strlen& (0+255),w,b
  7309  004954  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7310  004956  E001 D171          	bnz	l15626
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;main.c: 1628: putsUSART((char *) "N1977\r\n");
  7314  00495A  0E7B               	movlw	high STR_166
  7315  00495C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7316  00495E  0EBA               	movlw	low STR_166
  7317  004960  6F61               	movwf	?_putsUSART& (0+255),b
  7318  004962  ECBC  F00A         	call	_putsUSART	;wreg free
  7319  004966  D7DA               	goto	l15500
  7320  004968                     l15514:
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;main.c: 1637: bInitiated = 1;
  7324  004968  0E01               	movlw	1
  7325  00496A  6E2D               	movwf	_bInitiated,c
  7326                           
  7327                           ;main.c: 1638: rv = 1;
  7328  00496C  D0B8               	goto	L2
  7329  00496E                     l804:
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;main.c: 1643: if (!bOpen) {
  7333  00496E  662F               	tstfsz	_bOpen,c
  7334  004970  D003               	goto	l15518
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;main.c: 1644: bInitiated = 1;
  7338  004972  0E01               	movlw	1
  7339  004974  6E2D               	movwf	_bInitiated,c
  7340                           
  7341                           ;main.c: 1645: rv = 1;
  7342  004976  6FA5               	movwf	doModeSLCAN@rv& (0+255),b
  7343  004978                     l15518:
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;main.c: 1650: if (1 == strlen(cmdbuf)) {
  7347  004978  0E01               	movlw	high _cmdbuf
  7348  00497A  0100               	movlb	0	; () banked
  7349  00497C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7350  00497E  0E2D               	movlw	low _cmdbuf
  7351  004980  6F60               	movwf	?_strlen& (0+255),b
  7352  004982  EC9E  F009         	call	_strlen	;wreg free
  7353  004986  0560               	decf	?_strlen& (0+255),w,b
  7354  004988  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7355  00498A  E001 D157          	bnz	l15626
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;main.c: 1651: if (!bOpen && bInitiated) {
  7359  00498E  662F               	tstfsz	_bOpen,c
  7360  004990  D155               	goto	l15626
  7361                           
  7362                           ; BSR set to: 0
  7363  004992  502D               	movf	_bInitiated,w,c
  7364  004994  E101 D152          	bz	l15626
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;main.c: 1652: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7368  004998  0E00               	movlw	0
  7369  00499A  EC0A  F008         	call	_ECANSetOperationMode
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;main.c: 1653: bOpen = 1;
  7373  00499E  0E01               	movlw	1
  7374  0049A0  6E2F               	movwf	_bOpen,c
  7375  0049A2  D7BC               	goto	l15500
  7376  0049A4                     l15530:
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;main.c: 1661: if (1 == strlen(cmdbuf)) {
  7380  0049A4  0E01               	movlw	high _cmdbuf
  7381  0049A6  0100               	movlb	0	; () banked
  7382  0049A8  6F61               	movwf	(?_strlen+1)& (0+255),b
  7383  0049AA  0E2D               	movlw	low _cmdbuf
  7384  0049AC  6F60               	movwf	?_strlen& (0+255),b
  7385  0049AE  EC9E  F009         	call	_strlen	;wreg free
  7386  0049B2  0560               	decf	?_strlen& (0+255),w,b
  7387  0049B4  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7388  0049B6  E001 D141          	bnz	l15626
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;main.c: 1662: if (bOpen) {
  7392  0049BA  502F               	movf	_bOpen,w,c
  7393  0049BC  E0AF               	bz	l15500
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;main.c: 1663: ECANSetOperationMode(0x20);
  7397  0049BE  0E20               	movlw	32
  7398  0049C0  EC0A  F008         	call	_ECANSetOperationMode
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;main.c: 1664: bOpen = 0;
  7402  0049C4  6A2F               	clrf	_bOpen,c
  7403  0049C6  D7AA               	goto	l15500
  7404  0049C8                     l15540:
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;main.c: 1677: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7408  0049C8  502F               	movf	_bOpen,w,c
  7409  0049CA  E101 D137          	bz	l15626
  7410                           
  7411                           ; BSR set to: 0
  7412  0049CE  0E01               	movlw	high _cmdbuf
  7413  0049D0  0100               	movlb	0	; () banked
  7414  0049D2  6F61               	movwf	(?_strlen+1)& (0+255),b
  7415  0049D4  0E2D               	movlw	low _cmdbuf
  7416  0049D6  6F60               	movwf	?_strlen& (0+255),b
  7417  0049D8  EC9E  F009         	call	_strlen	;wreg free
  7418  0049DC  0E0A               	movlw	10
  7419  0049DE  5D60               	subwf	?_strlen& (0+255),w,b
  7420  0049E0  0E00               	movlw	0
  7421  0049E2  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7422  0049E4  E201 D12A          	bnc	l15626
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;main.c: 1679: uint32_t id;
  7426                           ;main.c: 1680: uint8_t dlc;
  7427                           ;main.c: 1682: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7428  0049E8  0E01               	movlw	high _wrkbuf
  7429  0049EA  0100               	movlb	0	; () banked
  7430  0049EC  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7431  0049EE  0E7D               	movlw	low _wrkbuf
  7432  0049F0  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7433  0049F2  0E50               	movlw	80
  7434  0049F4  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7435  0049F6  0E01               	movlw	high _cmdbuf
  7436  0049F8  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7437  0049FA  0E2D               	movlw	low _cmdbuf
  7438  0049FC  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7439  0049FE  EC4F  F00E         	call	_hexStringToBytes	;wreg free
  7440  004A02  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7441  004A04  0E05               	movlw	5
  7442  004A06  5D98               	subwf	??_doModeSLCAN& (0+255),w,b
  7443  004A08  E201 D118          	bnc	l15626
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;main.c: 1684: }
  7447                           ;main.c: 1686: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7448  004A0C  C180  F098         	movff	_wrkbuf+3,??_doModeSLCAN
  7449  004A10  0E08               	movlw	8
  7450  004A12  2798               	addwf	??_doModeSLCAN& (0+255),f,b
  7451  004A14  C17F  F099         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7452  004A18  0E10               	movlw	16
  7453  004A1A  2799               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7454  004A1C  C17E  F09A         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7455  004A20  0E18               	movlw	24
  7456  004A22  279A               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7457  004A24  C17D  F09B         	movff	_wrkbuf,??_doModeSLCAN+3
  7458  004A28  0100               	movlb	0	; () banked
  7459  004A2A  6B9C               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7460  004A2C  6B9D               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7461  004A2E  6B9E               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7462  004A30  2B9A               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7463  004A32  D001               	goto	u20380
  7464  004A34                     u20385:
  7465  004A34  D91E               	call	PL88	;call to abstracted procedure
  7466  004A36                     u20380:
  7467  004A36  2F9A               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7468  004A38  D7FD               	goto	u20385
  7469  004A3A  2B99               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7470  004A3C  D001               	goto	u20390
  7471  004A3E                     u20395:
  7472  004A3E  D919               	call	PL88	;call to abstracted procedure
  7473  004A40                     u20390:
  7474  004A40  2F99               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7475  004A42  D7FD               	goto	u20395
  7476  004A44  2B98               	incf	??_doModeSLCAN& (0+255),f,b
  7477  004A46  D001               	goto	u20400
  7478  004A48                     u20405:
  7479  004A48  D914               	call	PL88	;call to abstracted procedure
  7480  004A4A                     u20400:
  7481  004A4A  2F98               	decfsz	??_doModeSLCAN& (0+255),f,b
  7482  004A4C  D7FD               	goto	u20405
  7483  004A4E  C09E  F0A2         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7484  004A52  C09D  F0A1         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7485  004A56  C09C  F0A0         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7486  004A5A  C09B  F09F         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;main.c: 1687: dlc = vscpData[4];
  7490  004A5E  C1E9  F0A3         	movff	_vscpData+4,doModeSLCAN@dlc
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;main.c: 1690: if (dlc > 8) break;
  7494  004A62  0E08               	movlw	8
  7495  004A64  65A3               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7496  004A66  D001               	goto	l15556
  7497  004A68  D0E9               	goto	l15626
  7498  004A6A                     l15556:
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;main.c: 1691: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7502  004A6A  90D8               	bcf	status,0,c
  7503  004A6C  35A3               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7504  004A6E  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7505  004A70  6B99               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7506  004A72  3799               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7507  004A74  0E0A               	movlw	10
  7508  004A76  2798               	addwf	??_doModeSLCAN& (0+255),f,b
  7509  004A78  0E00               	movlw	0
  7510  004A7A  2399               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7511  004A7C  0E01               	movlw	high _cmdbuf
  7512  004A7E  0100               	movlb	0	; () banked
  7513  004A80  6F61               	movwf	(?_strlen+1)& (0+255),b
  7514  004A82  0E2D               	movlw	low _cmdbuf
  7515  004A84  6F60               	movwf	?_strlen& (0+255),b
  7516  004A86  EC9E  F009         	call	_strlen	;wreg free
  7517  004A8A  5198               	movf	??_doModeSLCAN& (0+255),w,b
  7518  004A8C  5D60               	subwf	?_strlen& (0+255),w,b
  7519  004A8E  5199               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7520  004A90  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7521  004A92  E201 D0D3          	bnc	l15626
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;main.c: 1693: memcpy(vscpData, vscpData + 5, dlc);
  7525  004A96  0E01               	movlw	high _vscpData
  7526  004A98  0100               	movlb	0	; () banked
  7527  004A9A  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7528  004A9C  0EE5               	movlw	low _vscpData
  7529  004A9E  6F60               	movwf	?_memcpy& (0+255),b
  7530  004AA0  0EEA               	movlw	low (_vscpData+5)
  7531  004AA2  6F98               	movwf	??_doModeSLCAN& (0+255),b
  7532  004AA4  0E01               	movlw	high (_vscpData+5)
  7533  004AA6  6F99               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7534  004AA8  C098  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7535  004AAC  C099  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7536  004AB0  C0A3  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7537  004AB4  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7538  004AB6  ECBE  F009         	call	_memcpy	;wreg free
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;main.c: 1695: rv = sendCANFrame(id, dlc, vscpData);
  7542  004ABA  C09F  F091         	movff	doModeSLCAN@id,?_sendCANFrame
  7543  004ABE  C0A0  F092         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7544  004AC2  C0A1  F093         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7545  004AC6  C0A2  F094         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7546  004ACA  C0A3  F095         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7547  004ACE  0E01               	movlw	high _vscpData
  7548  004AD0  0100               	movlb	0	; () banked
  7549  004AD2  6F97               	movwf	(?_sendCANFrame+6)& (0+255),b
  7550  004AD4  0EE5               	movlw	low _vscpData
  7551  004AD6  6F96               	movwf	(?_sendCANFrame+5)& (0+255),b
  7552  004AD8  EC04  F009         	call	_sendCANFrame	;wreg free
  7553  004ADC  D035               	goto	L3
  7554  004ADE                     L2:
  7555  004ADE  6FA5               	movwf	doModeSLCAN@rv& (0+255),b
  7556  004AE0  D0AD               	goto	l15626
  7557  004AE2                     l15564:
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;main.c: 1710: if (bOpen && (strlen(cmdbuf) == 1)) {
  7561  004AE2  502F               	movf	_bOpen,w,c
  7562  004AE4  E101 D0AA          	bz	l15626
  7563                           
  7564                           ; BSR set to: 0
  7565  004AE8  0E01               	movlw	high _cmdbuf
  7566  004AEA  0100               	movlb	0	; () banked
  7567  004AEC  6F61               	movwf	(?_strlen+1)& (0+255),b
  7568  004AEE  0E2D               	movlw	low _cmdbuf
  7569  004AF0  6F60               	movwf	?_strlen& (0+255),b
  7570  004AF2  EC9E  F009         	call	_strlen	;wreg free
  7571  004AF6  0560               	decf	?_strlen& (0+255),w,b
  7572  004AF8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7573  004AFA  E001 D09F          	bnz	l15626
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;main.c: 1711: putsUSART((char *) "F00\r\n");
  7577  004AFE  0E7C               	movlw	high STR_167
  7578  004B00  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7579  004B02  0E5E               	movlw	low STR_167
  7580  004B04  6F61               	movwf	?_putsUSART& (0+255),b
  7581  004B06  ECBC  F00A         	call	_putsUSART	;wreg free
  7582  004B0A  D098               	goto	l15626
  7583  004B0C                     l15574:
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;main.c: 1727: if (2 == strlen(cmdbuf)) {
  7587  004B0C  0E01               	movlw	high _cmdbuf
  7588  004B0E  0100               	movlb	0	; () banked
  7589  004B10  6F61               	movwf	(?_strlen+1)& (0+255),b
  7590  004B12  0E2D               	movlw	low _cmdbuf
  7591  004B14  6F60               	movwf	?_strlen& (0+255),b
  7592  004B16  EC9E  F009         	call	_strlen	;wreg free
  7593  004B1A  5160               	movf	?_strlen& (0+255),w,b
  7594  004B1C  0A02               	xorlw	2
  7595  004B1E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7596  004B20  E001 D08C          	bnz	l15626
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;main.c: 1728: if (!bOpen) {
  7600  004B24  662F               	tstfsz	_bOpen,c
  7601  004B26  D08A               	goto	l15626
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;main.c: 1729: if ('0' == cmdbuf[1]) {
  7605  004B28  0101               	movlb	1	; () banked
  7606  004B2A  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7607  004B2C  0A30               	xorlw	48
  7608  004B2E  E10E               	bnz	l15586
  7609                           
  7610                           ; BSR set to: 1
  7611                           ;main.c: 1730: nTimeStamp = 0;
  7612  004B30  6A33               	clrf	_nTimeStamp,c
  7613                           
  7614                           ; BSR set to: 1
  7615                           ;main.c: 1732: (Busy_eep(), Write_b_eep(0x05,0));
  7616  004B32  ECD3  F007         	call	_Busy_eep	;wreg free
  7617  004B36  0100               	movlb	0	; () banked
  7618  004B38  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7619  004B3A  0E05               	movlw	5
  7620  004B3C  6F60               	movwf	?_Write_b_eep& (0+255),b
  7621  004B3E  0E00               	movlw	0
  7622  004B40  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7623  004B42  ECB2  F008         	call	_Write_b_eep	;wreg free
  7624  004B46  D6EA               	goto	l15500
  7625  004B48                     L3:
  7626  004B48  0100               	movlb	0	; () banked
  7627  004B4A  D7C9               	goto	L2
  7628  004B4C                     l15586:
  7629                           
  7630                           ; BSR set to: 1
  7631  004B4C  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7632  004B4E  0A31               	xorlw	49
  7633  004B50  E10D               	bnz	l829
  7634                           
  7635                           ; BSR set to: 1
  7636                           ;main.c: 1735: nTimeStamp = 1;
  7637  004B52  0E01               	movlw	1
  7638  004B54  6E33               	movwf	_nTimeStamp,c
  7639                           
  7640                           ; BSR set to: 1
  7641                           ;main.c: 1737: (Busy_eep(), Write_b_eep(0x05,1));
  7642  004B56  ECD3  F007         	call	_Busy_eep	;wreg free
  7643  004B5A  0100               	movlb	0	; () banked
  7644  004B5C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7645  004B5E  0E05               	movlw	5
  7646  004B60  6F60               	movwf	?_Write_b_eep& (0+255),b
  7647  004B62  0E01               	movlw	1
  7648  004B64  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7649  004B66  ECB2  F008         	call	_Write_b_eep	;wreg free
  7650  004B6A  D6D8               	goto	l15500
  7651  004B6C                     l829:
  7652                           
  7653                           ; BSR set to: 1
  7654                           ;main.c: 1741: rv = 0;
  7655  004B6C  0100               	movlb	0	; () banked
  7656  004B6E  6BA5               	clrf	doModeSLCAN@rv& (0+255),b
  7657  004B70  D065               	goto	l15626
  7658  004B72                     l15594:
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;main.c: 1749: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7662  004B72  ECD3  F007         	call	_Busy_eep	;wreg free
  7663  004B76  0100               	movlb	0	; () banked
  7664  004B78  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7665  004B7A  0E01               	movlw	1
  7666  004B7C  6F60               	movwf	?_Write_b_eep& (0+255),b
  7667  004B7E  0EFF               	movlw	255
  7668  004B80  6962               	setf	(?_Write_b_eep+2)& (0+255),b
  7669  004B82  ECB2  F008         	call	_Write_b_eep	;wreg free
  7670  004B86  00FF               	reset		;# 
  7671                           
  7672                           ;main.c: 1751: break;
  7673  004B88  D059               	goto	l15626
  7674  004B8A                     l15598:
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;main.c: 1755: if ( 'v' == cmdbuf[1] &&
  7678                           ;main.c: 1756: 's' == cmdbuf[2] &&
  7679                           ;main.c: 1757: 'c' == cmdbuf[3] &&
  7680                           ;main.c: 1758: 'p' == cmdbuf[4] ) {
  7681  004B8A  0101               	movlb	1	; () banked
  7682  004B8C  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7683  004B8E  0A76               	xorlw	118
  7684  004B90  E10C               	bnz	l15608
  7685                           
  7686                           ; BSR set to: 1
  7687  004B92  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  7688  004B94  0A73               	xorlw	115
  7689  004B96  E109               	bnz	l15608
  7690                           
  7691                           ; BSR set to: 1
  7692  004B98  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  7693  004B9A  0A63               	xorlw	99
  7694  004B9C  E106               	bnz	l15608
  7695                           
  7696                           ; BSR set to: 1
  7697  004B9E  5131               	movf	(_cmdbuf+4)& (0+255),w,b
  7698  004BA0  0A70               	xorlw	112
  7699  004BA2  E103               	bnz	l15608
  7700                           
  7701                           ; BSR set to: 1
  7702                           ;main.c: 1759: mode = 1;
  7703  004BA4  0E01               	movlw	1
  7704  004BA6  6F2C               	movwf	_mode& (0+255),b
  7705                           
  7706                           ;main.c: 1760: }
  7707  004BA8  D049               	goto	l15626
  7708  004BAA                     l15608:
  7709                           
  7710                           ; BSR set to: 1
  7711                           ;main.c: 1761: else if ( 'v' == cmdbuf[1] &&
  7712                           ;main.c: 1762: 'e' == cmdbuf[2] &&
  7713                           ;main.c: 1763: 'r' == cmdbuf[3] &&
  7714                           ;main.c: 1764: 'b' == cmdbuf[4] ) {
  7715  004BAA  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  7716  004BAC  0A76               	xorlw	118
  7717  004BAE  E146               	bnz	l15626
  7718                           
  7719                           ; BSR set to: 1
  7720  004BB0  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  7721  004BB2  0A65               	xorlw	101
  7722  004BB4  E143               	bnz	l15626
  7723                           
  7724                           ; BSR set to: 1
  7725  004BB6  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  7726  004BB8  0A72               	xorlw	114
  7727  004BBA  E140               	bnz	l15626
  7728                           
  7729                           ; BSR set to: 1
  7730  004BBC  5131               	movf	(_cmdbuf+4)& (0+255),w,b
  7731  004BBE  0A62               	xorlw	98
  7732  004BC0  E13D               	bnz	l15626
  7733                           
  7734                           ; BSR set to: 1
  7735                           ;main.c: 1765: mode = 0;
  7736  004BC2  6B2C               	clrf	_mode& (0+255),b
  7737  004BC4  D03B               	goto	l15626
  7738  004BC6                     l15618:
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;main.c: 1770: {
  7742                           ;main.c: 1772: if (0 == strlen(cmdbuf)) {
  7743  004BC6  0E01               	movlw	high _cmdbuf
  7744  004BC8  0100               	movlb	0	; () banked
  7745  004BCA  6F61               	movwf	(?_strlen+1)& (0+255),b
  7746  004BCC  0E2D               	movlw	low _cmdbuf
  7747  004BCE  6F60               	movwf	?_strlen& (0+255),b
  7748  004BD0  EC9E  F009         	call	_strlen	;wreg free
  7749  004BD4  5161               	movf	(?_strlen+1)& (0+255),w,b
  7750  004BD6  1160               	iorwf	?_strlen& (0+255),w,b
  7751  004BD8  E101 D6A0          	bz	l15500
  7752  004BDC  D02F               	goto	l15626
  7753  004BDE                     l15624:
  7754                           
  7755                           ; BSR set to: 0
  7756  004BDE  51A4               	movf	doModeSLCAN@c& (0+255),w,b
  7757                           
  7758                           ; Switch size 1, requested type "space"
  7759                           ; Number of cases is 17, Range of values is 64 to 116
  7760                           ; switch strategies available:
  7761                           ; Name         Instructions Cycles
  7762                           ; simple_byte           52    27 (average)
  7763                           ;	Chosen strategy is simple_byte
  7764  004BE0  0A40               	xorlw	64	; case 64
  7765  004BE2  E0D3               	bz	l15598
  7766  004BE4  0A02               	xorlw	2	; case 66
  7767  004BE6  E0C5               	bz	l15594
  7768  004BE8  0A01               	xorlw	1	; case 67
  7769  004BEA  E101 D6DB          	bz	l15530
  7770  004BEE  0A05               	xorlw	5	; case 70
  7771  004BF0  E101 D777          	bz	l15564
  7772  004BF4  0A0C               	xorlw	12	; case 74
  7773  004BF6  E101 D680          	bz	l15496
  7774  004BFA  0A07               	xorlw	7	; case 77
  7775  004BFC  E101 D68E          	bz	l15500
  7776  004C00  0A03               	xorlw	3	; case 78
  7777  004C02  E101 D69F          	bz	l15508
  7778  004C06  0A01               	xorlw	1	; case 79
  7779  004C08  E101 D6B6          	bz	l15518
  7780  004C0C  0A1D               	xorlw	29	; case 82
  7781  004C0E  E016               	bz	l15626
  7782  004C10  0A01               	xorlw	1	; case 83
  7783  004C12  E101 D6A9          	bz	l15514
  7784  004C16  0A07               	xorlw	7	; case 84
  7785  004C18  E101 D6D6          	bz	l15540
  7786  004C1C  0A02               	xorlw	2	; case 86
  7787  004C1E  E101 D67F          	bz	l15502
  7788  004C22  0A0C               	xorlw	12	; case 90
  7789  004C24  E101 D772          	bz	l15574
  7790  004C28  0A37               	xorlw	55	; case 109
  7791  004C2A  E101 D677          	bz	l15500
  7792  004C2E  0A1F               	xorlw	31	; case 114
  7793  004C30  E005               	bz	l15626
  7794  004C32  0A01               	xorlw	1	; case 115
  7795  004C34  E101 D69B          	bz	l804
  7796  004C38  0A07               	xorlw	7	; case 116
  7797  004C3A  E1C5               	bnz	l15618
  7798  004C3C                     l15626:
  7799                           
  7800                           ;main.c: 1780: if (rv) {
  7801  004C3C  0100               	movlb	0	; () banked
  7802  004C3E  51A5               	movf	doModeSLCAN@rv& (0+255),w,b
  7803  004C40  E007               	bz	l15630
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;main.c: 1782: putsUSART((char *) "\r");
  7807  004C42  0E7C               	movlw	high STR_168
  7808  004C44  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7809  004C46  0EF2               	movlw	low STR_168
  7810  004C48  6F61               	movwf	?_putsUSART& (0+255),b
  7811  004C4A  ECBC  F00A         	call	_putsUSART	;wreg free
  7812                           
  7813                           ;main.c: 1783: }
  7814  004C4E  D006               	goto	l15632
  7815  004C50                     l15630:
  7816                           
  7817                           ; BSR set to: 0
  7818                           ;main.c: 1784: else {
  7819                           ;main.c: 1786: putsUSART((char *) "\a");
  7820  004C50  0E7C               	movlw	high STR_169
  7821  004C52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7822  004C54  0EF0               	movlw	low STR_169
  7823  004C56  6F61               	movwf	?_putsUSART& (0+255),b
  7824  004C58  ECBC  F00A         	call	_putsUSART	;wreg free
  7825  004C5C                     l15632:
  7826                           
  7827                           ;main.c: 1787: }
  7828                           ;main.c: 1790: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7829  004C5C  0E01               	movlw	high _cmdbuf
  7830  004C5E  0100               	movlb	0	; () banked
  7831  004C60  6F61               	movwf	(?_memset+1)& (0+255),b
  7832  004C62  0E2D               	movlw	low _cmdbuf
  7833  004C64  EC48  F00E         	call	PL20	;call to abstracted procedure
  7834  004C68  EC54  F008         	call	_memset	;wreg free
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;main.c: 1791: pos = 0;
  7838  004C6C  6A34               	clrf	_pos,c
  7839  004C6E                     l15636:
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;main.c: 1793: }
  7843                           ;main.c: 1796: (INTCONbits.GIE = 1);
  7844  004C6E  8EF2               	bsf	intcon,7,c	;volatile
  7845  004C70                     l794:
  7846                           
  7847                           ; BSR set to: 0
  7848  004C70  0012               	return	
  7849  004C72                     __end_of_doModeSLCAN:
  7850                           	opt stack 0
  7851  004C72                     PL88:
  7852                           	opt stack 22
  7853  004C72  90D8               	bcf	status,0,c
  7854  004C74  379B               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7855  004C76  379C               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7856  004C78  379D               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7857  004C7A  379E               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7858  004C7C  0012               	return	
  7859  004C7E                     __end_ofPL88:
  7860                           	opt stack 0
  7861                           tblptru	equ	0xFF8
  7862                           tblptrh	equ	0xFF7
  7863                           tblptrl	equ	0xFF6
  7864                           tablat	equ	0xFF5
  7865                           prodh	equ	0xFF4
  7866                           prodl	equ	0xFF3
  7867                           intcon	equ	0xFF2
  7868                           indf0	equ	0xFEF
  7869                           postinc0	equ	0xFEE
  7870                           fsr0h	equ	0xFEA
  7871                           fsr0l	equ	0xFE9
  7872                           wreg	equ	0xFE8
  7873                           indf1	equ	0xFE7
  7874                           postinc1	equ	0xFE6
  7875                           postdec1	equ	0xFE5
  7876                           fsr1h	equ	0xFE2
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           plusw2	equ	0xFDB
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886 ;; *************** function _hexStringToBytes *****************
  7887 ;; Defined at:
  7888 ;;		line 35 in file "hexutils.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7891 ;;		 -> wrkbuf(80), 
  7892 ;;  size            1    6[BANK0 ] unsigned char 
  7893 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7894 ;;		 -> cmdbuf(80), 
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  i               2   16[BANK0 ] int 
  7897 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7898 ;;		 -> cmdbuf(80), 
  7899 ;;  len             2   12[BANK0 ] int 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;                  1    wreg      unsigned char 
  7902 ;; Registers used:
  7903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : F/0
  7906 ;;		On exit  : F/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7909 ;;      Params:         0       5       0       0       0       0       0
  7910 ;;      Locals:         0       6       0       0       0       0       0
  7911 ;;      Temps:          0       3       0       0       0       0       0
  7912 ;;      Totals:         0      14       0       0       0       0       0
  7913 ;;Total ram usage:       14 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    4
  7916 ;; This function calls:
  7917 ;;		_strlen
  7918 ;;		_nibbleFromChar
  7919 ;; This function is called by:
  7920 ;;		_doModeSLCAN
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           	psect	text3
  7925  001C9E                     __ptext3:
  7926                           	opt stack 0
  7927  001C9E                     _hexStringToBytes:
  7928                           	opt stack 24
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;hexutils.c: 36: uint8_t *p;
  7932                           ;hexutils.c: 37: int len, i;
  7933                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;incstack = 0
  7937                           ;incstack = 0
  7938  001C9E  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7939  001CA2  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7940  001CA6  EC9E  F009         	call	_strlen	;wreg free
  7941  001CAA  90D8               	bcf	status,0,c
  7942  001CAC  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7943  001CAE  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7944  001CB0  3160               	rrcf	?_strlen& (0+255),w,b
  7945  001CB2  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;hexutils.c: 40: if (len > size) return 0;
  7949  001CB4  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7950  001CB6  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7951  001CB8  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7952  001CBA  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7953  001CBC  0A80               	xorlw	128
  7954  001CBE  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7955  001CC0  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7956  001CC2  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7957  001CC4  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7958  001CC6  0A80               	xorlw	128
  7959  001CC8  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7960  001CCA  E202               	bc	l1664
  7961                           
  7962                           ; BSR set to: 0
  7963  001CCC  0E00               	movlw	0
  7964  001CCE  D033               	goto	l1665
  7965  001CD0                     l1664:
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7969  001CD0  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7970  001CD2  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7971  001CD4  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7972  001CD8  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7973  001CDC  D022               	goto	l17228
  7974  001CDE                     l17222:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7978  001CDE  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7979  001CE0  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7980  001CE2  6ED9               	movwf	fsr2l,c
  7981  001CE4  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7982  001CE6  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7983  001CE8  6EDA               	movwf	fsr2h,c
  7984  001CEA  EE10 F001          	lfsr	1,1
  7985  001CEE  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7986  001CF0  26E1               	addwf	fsr1l,f,c
  7987  001CF2  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7988  001CF4  22E2               	addwfc	fsr1h,f,c
  7989  001CF6  50E7               	movf	indf1,w,c
  7990  001CF8  EC5F  F009         	call	_nibbleFromChar
  7991  001CFC  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7992  001CFE  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7993  001D02  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7994  001D06  50E7               	movf	indf1,w,c
  7995  001D08  EC5F  F009         	call	_nibbleFromChar
  7996  001D0C  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7997  001D0E  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7998  001D10  0BF0               	andlw	240
  7999  001D12  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  8000  001D14  6EDF               	movwf	indf2,c
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;hexutils.c: 43: p += 2;
  8004  001D16  0E02               	movlw	2
  8005  001D18  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  8006  001D1A  0E00               	movlw	0
  8007  001D1C  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  8008                           
  8009                           ; BSR set to: 0
  8010  001D1E  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  8011  001D20  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  8012  001D22                     l17228:
  8013                           
  8014                           ; BSR set to: 0
  8015  001D22  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8016  001D24  0A80               	xorlw	128
  8017  001D26  6F69               	movwf	??_hexStringToBytes& (0+255),b
  8018  001D28  516C               	movf	hexStringToBytes@len& (0+255),w,b
  8019  001D2A  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  8020  001D2C  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8021  001D2E  0A80               	xorlw	128
  8022  001D30  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  8023  001D32  E3D5               	bnc	l17222
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;hexutils.c: 44: }
  8027                           ;hexutils.c: 46: return i;
  8028  001D34  5170               	movf	hexStringToBytes@i& (0+255),w,b
  8029  001D36                     l1665:
  8030                           
  8031                           ; BSR set to: 0
  8032  001D36  0012               	return	
  8033  001D38                     __end_of_hexStringToBytes:
  8034                           	opt stack 0
  8035                           tblptru	equ	0xFF8
  8036                           tblptrh	equ	0xFF7
  8037                           tblptrl	equ	0xFF6
  8038                           tablat	equ	0xFF5
  8039                           prodh	equ	0xFF4
  8040                           prodl	equ	0xFF3
  8041                           intcon	equ	0xFF2
  8042                           indf0	equ	0xFEF
  8043                           postinc0	equ	0xFEE
  8044                           fsr0h	equ	0xFEA
  8045                           fsr0l	equ	0xFE9
  8046                           wreg	equ	0xFE8
  8047                           indf1	equ	0xFE7
  8048                           postinc1	equ	0xFE6
  8049                           postdec1	equ	0xFE5
  8050                           fsr1h	equ	0xFE2
  8051                           fsr1l	equ	0xFE1
  8052                           indf2	equ	0xFDF
  8053                           postinc2	equ	0xFDE
  8054                           postdec2	equ	0xFDD
  8055                           plusw2	equ	0xFDB
  8056                           fsr2h	equ	0xFDA
  8057                           fsr2l	equ	0xFD9
  8058                           status	equ	0xFD8
  8059                           
  8060 ;; *************** function _nibbleFromChar *****************
  8061 ;; Defined at:
  8062 ;;		line 20 in file "hexutils.c"
  8063 ;; Parameters:    Size  Location     Type
  8064 ;;  c               1    wreg     unsigned char 
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;  c               1    0[BANK0 ] unsigned char 
  8067 ;; Return value:  Size  Location     Type
  8068 ;;                  1    wreg      unsigned char 
  8069 ;; Registers used:
  8070 ;;		wreg, status,2, status,0
  8071 ;; Tracked objects:
  8072 ;;		On entry : F/0
  8073 ;;		On exit  : F/0
  8074 ;;		Unchanged: 0/0
  8075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8076 ;;      Params:         0       0       0       0       0       0       0
  8077 ;;      Locals:         0       1       0       0       0       0       0
  8078 ;;      Temps:          0       0       0       0       0       0       0
  8079 ;;      Totals:         0       1       0       0       0       0       0
  8080 ;;Total ram usage:        1 bytes
  8081 ;; Hardware stack levels used:    1
  8082 ;; Hardware stack levels required when called:    3
  8083 ;; This function calls:
  8084 ;;		Nothing
  8085 ;; This function is called by:
  8086 ;;		_hexStringToBytes
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           	psect	text4
  8091  0012BE                     __ptext4:
  8092                           	opt stack 0
  8093  0012BE                     _nibbleFromChar:
  8094                           	opt stack 24
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;incstack = 0
  8098                           ;incstack = 0
  8099                           ;nibbleFromChar@c stored from wreg
  8100  0012BE  CFE8 F060          	movff	wreg,nibbleFromChar@c
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  8104  0012C2  0E2F               	movlw	47
  8105  0012C4  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8106  0012C6  D006               	goto	l17432
  8107                           
  8108                           ; BSR set to: 0
  8109  0012C8  0E3A               	movlw	58
  8110  0012CA  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8111  0012CC  D003               	goto	l17432
  8112                           
  8113                           ; BSR set to: 0
  8114  0012CE  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8115  0012D0  0FD0               	addlw	208
  8116  0012D2  D013               	goto	l1659
  8117  0012D4                     l17432:
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  8121  0012D4  0E60               	movlw	96
  8122  0012D6  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8123  0012D8  D006               	goto	l17440
  8124                           
  8125                           ; BSR set to: 0
  8126  0012DA  0E67               	movlw	103
  8127  0012DC  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8128  0012DE  D003               	goto	l17440
  8129                           
  8130                           ; BSR set to: 0
  8131  0012E0  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8132  0012E2  0FA9               	addlw	169
  8133  0012E4  D00A               	goto	l1659
  8134  0012E6                     l17440:
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  8138  0012E6  0E40               	movlw	64
  8139  0012E8  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  8140  0012EA  D006               	goto	l17448
  8141                           
  8142                           ; BSR set to: 0
  8143  0012EC  0E47               	movlw	71
  8144  0012EE  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  8145  0012F0  D003               	goto	l17448
  8146                           
  8147                           ; BSR set to: 0
  8148  0012F2  5160               	movf	nibbleFromChar@c& (0+255),w,b
  8149  0012F4  0FC9               	addlw	201
  8150  0012F6  D001               	goto	l1659
  8151  0012F8                     l17448:
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;hexutils.c: 24: return 255;
  8155  0012F8  0EFF               	movlw	255
  8156  0012FA                     l1659:
  8157                           
  8158                           ; BSR set to: 0
  8159  0012FA  0012               	return	
  8160  0012FC                     __end_of_nibbleFromChar:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           indf0	equ	0xFEF
  8170                           postinc0	equ	0xFEE
  8171                           fsr0h	equ	0xFEA
  8172                           fsr0l	equ	0xFE9
  8173                           wreg	equ	0xFE8
  8174                           indf1	equ	0xFE7
  8175                           postinc1	equ	0xFE6
  8176                           postdec1	equ	0xFE5
  8177                           fsr1h	equ	0xFE2
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           plusw2	equ	0xFDB
  8183                           fsr2h	equ	0xFDA
  8184                           fsr2l	equ	0xFD9
  8185                           status	equ	0xFD8
  8186                           
  8187 ;; *************** function _receiveSendEventSLCAN *****************
  8188 ;; Defined at:
  8189 ;;		line 2393 in file "main.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;		None
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;  id              4   38[BANK0 ] unsigned long 
  8194 ;;  i               2   43[BANK0 ] int 
  8195 ;;  dlc             1   42[BANK0 ] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  1    wreg      enum E15660
  8198 ;; Registers used:
  8199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8200 ;; Tracked objects:
  8201 ;;		On entry : F/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8205 ;;      Params:         0       0       0       0       0       0       0
  8206 ;;      Locals:         0       7       0       0       0       0       0
  8207 ;;      Temps:          0       3       0       0       0       0       0
  8208 ;;      Totals:         0      10       0       0       0       0       0
  8209 ;;Total ram usage:       10 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    6
  8212 ;; This function calls:
  8213 ;;		_putsUSART
  8214 ;;		_WriteUSART
  8215 ;;		_strlen
  8216 ;;		_getCANFrame
  8217 ;;		_ultoa
  8218 ;;		_itoa
  8219 ;; This function is called by:
  8220 ;;		_doModeSLCAN
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text5
  8225  00352C                     __ptext5:
  8226                           	opt stack 0
  8227  00352C                     _receiveSendEventSLCAN:
  8228                           	opt stack 22
  8229                           
  8230                           ; BSR set to: 0
  8231                           ;main.c: 2394: int i;
  8232                           ;main.c: 2395: uint8_t dlc;
  8233                           ;main.c: 2396: uint32_t id;
  8234                           ;main.c: 2398: if (getCANFrame(&id, &dlc, vscpData)) {
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;incstack = 0
  8238                           ;incstack = 0
  8239  00352C  0E00               	movlw	high receiveSendEventSLCAN@dlc
  8240  00352E  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  8241  003530  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  8242  003532  6F6E               	movwf	?_getCANFrame& (0+255),b
  8243  003534  0E01               	movlw	high _vscpData
  8244  003536  0100               	movlb	0	; () banked
  8245  003538  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
  8246  00353A  0EE5               	movlw	low _vscpData
  8247  00353C  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  8248  00353E  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  8249  003540  ECE0  F00F         	call	_getCANFrame
  8250  003544  0900               	iorlw	0
  8251  003546  E101 D0B0          	bz	l1140
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;main.c: 2401: cntRxFrames++;
  8255  00354A  0101               	movlb	1	; () banked
  8256  00354C  2B0C               	incf	_cntRxFrames& (0+255),f,b
  8257  00354E  0E00               	movlw	0
  8258  003550  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  8259  003552  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  8260  003554  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  8261                           
  8262                           ;main.c: 2402: cntRxBytes += dlc;
  8263  003556  0100               	movlb	0	; () banked
  8264  003558  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8265  00355A  0101               	movlb	1	; () banked
  8266  00355C  2708               	addwf	_cntRxBytes& (0+255),f,b
  8267  00355E  0E00               	movlw	0
  8268  003560  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  8269  003562  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  8270  003564  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8271  003566                     l1113:
  8272  003566  A2AC               	btfss	4012,1,c	;volatile
  8273  003568  D7FE               	goto	l1113
  8274                           
  8275                           ;main.c: 2405: WriteUSART('T');
  8276  00356A  0E54               	movlw	84
  8277  00356C  ECF5  F007         	call	_WriteUSART
  8278                           
  8279                           ;main.c: 2407: ultoa(wrkbuf, id, 16);
  8280  003570  0E01               	movlw	high _wrkbuf
  8281  003572  0100               	movlb	0	; () banked
  8282  003574  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8283  003576  0E7D               	movlw	low _wrkbuf
  8284  003578  6F76               	movwf	?_ultoa& (0+255),b
  8285  00357A  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8286  00357E  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8287  003582  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8288  003586  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8289  00358A  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8290  00358C  0E10               	movlw	16
  8291  00358E  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8292  003590  EC4A  F013         	call	_ultoa	;wreg free
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;main.c: 2409: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8296  003594  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8297  003596  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8298  003598                     l1118:
  8299                           
  8300                           ; BSR set to: 0
  8301  003598  A2AC               	btfss	4012,1,c	;volatile
  8302  00359A  D7FE               	goto	l1118
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;main.c: 2411: WriteUSART('0');
  8306  00359C  0E30               	movlw	48
  8307  00359E  ECF5  F007         	call	_WriteUSART
  8308                           
  8309                           ; BSR set to: 0
  8310  0035A2  D884               	call	PL90	;call to abstracted procedure
  8311  0035A4  B4D8               	btfsc	status,2,c
  8312  0035A6  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8313  0035A8  E3F7               	bnc	l1118
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;main.c: 2412: }
  8317                           ;main.c: 2413: putsUSART(wrkbuf);
  8318  0035AA  0E01               	movlw	high _wrkbuf
  8319  0035AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8320  0035AE  0E7D               	movlw	low _wrkbuf
  8321  0035B0  6F61               	movwf	?_putsUSART& (0+255),b
  8322  0035B2  ECBC  F00A         	call	_putsUSART	;wreg free
  8323                           
  8324                           ;main.c: 2416: itoa(wrkbuf, dlc, 16);
  8325  0035B6  0E01               	movlw	high _wrkbuf
  8326  0035B8  0100               	movlb	0	; () banked
  8327  0035BA  6F71               	movwf	(?_itoa+1)& (0+255),b
  8328  0035BC  0E7D               	movlw	low _wrkbuf
  8329  0035BE  6F70               	movwf	?_itoa& (0+255),b
  8330  0035C0  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8331  0035C4  6B73               	clrf	(?_itoa+3)& (0+255),b
  8332  0035C6  6B75               	clrf	(?_itoa+5)& (0+255),b
  8333  0035C8  0E10               	movlw	16
  8334  0035CA  6F74               	movwf	(?_itoa+4)& (0+255),b
  8335  0035CC  ECCC  F008         	call	_itoa	;wreg free
  8336  0035D0                     l1121:
  8337                           
  8338                           ; BSR set to: 0
  8339  0035D0  A2AC               	btfss	4012,1,c	;volatile
  8340  0035D2  D7FE               	goto	l1121
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;main.c: 2418: WriteUSART(wrkbuf[0]);
  8344  0035D4  0101               	movlb	1	; () banked
  8345  0035D6  517D               	movf	_wrkbuf& (0+255),w,b
  8346  0035D8  ECF5  F007         	call	_WriteUSART
  8347                           
  8348                           ;main.c: 2421: for (i = 0; i < dlc; i++) {
  8349  0035DC  0100               	movlb	0	; () banked
  8350  0035DE  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8351  0035E0  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8352  0035E2  D02D               	goto	l17180
  8353  0035E4                     l17168:
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;main.c: 2422: itoa(wrkbuf, vscpData[i], 16);
  8357  0035E4  0E01               	movlw	high _wrkbuf
  8358  0035E6  0100               	movlb	0	; () banked
  8359  0035E8  6F71               	movwf	(?_itoa+1)& (0+255),b
  8360  0035EA  0E7D               	movlw	low _wrkbuf
  8361  0035EC  6F70               	movwf	?_itoa& (0+255),b
  8362  0035EE  0EE5               	movlw	low _vscpData
  8363  0035F0  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8364  0035F2  6ED9               	movwf	fsr2l,c
  8365  0035F4  0E01               	movlw	high _vscpData
  8366  0035F6  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8367  0035F8  6EDA               	movwf	fsr2h,c
  8368  0035FA  50DF               	movf	indf2,w,c
  8369  0035FC  6F72               	movwf	(?_itoa+2)& (0+255),b
  8370  0035FE  6B73               	clrf	(?_itoa+3)& (0+255),b
  8371  003600  6B75               	clrf	(?_itoa+5)& (0+255),b
  8372  003602  0E10               	movlw	16
  8373  003604  6F74               	movwf	(?_itoa+4)& (0+255),b
  8374  003606  ECCC  F008         	call	_itoa	;wreg free
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 2424: if (2 != strlen(wrkbuf)) {
  8378  00360A  0E01               	movlw	high _wrkbuf
  8379  00360C  0100               	movlb	0	; () banked
  8380  00360E  6F61               	movwf	(?_strlen+1)& (0+255),b
  8381  003610  0E7D               	movlw	low _wrkbuf
  8382  003612  6F60               	movwf	?_strlen& (0+255),b
  8383  003614  EC9E  F009         	call	_strlen	;wreg free
  8384  003618  5160               	movf	?_strlen& (0+255),w,b
  8385  00361A  0A02               	xorlw	2
  8386  00361C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8387  00361E  E005               	bz	l17176
  8388  003620                     l1127:
  8389                           
  8390                           ; BSR set to: 0
  8391  003620  A2AC               	btfss	4012,1,c	;volatile
  8392  003622  D7FE               	goto	l1127
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;main.c: 2426: WriteUSART('0');
  8396  003624  0E30               	movlw	48
  8397  003626  ECF5  F007         	call	_WriteUSART
  8398  00362A                     l17176:
  8399                           
  8400                           ;main.c: 2427: }
  8401                           ;main.c: 2429: putsUSART(wrkbuf);
  8402  00362A  0E01               	movlw	high _wrkbuf
  8403  00362C  0100               	movlb	0	; () banked
  8404  00362E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8405  003630  0E7D               	movlw	low _wrkbuf
  8406  003632  6F61               	movwf	?_putsUSART& (0+255),b
  8407  003634  ECBC  F00A         	call	_putsUSART	;wreg free
  8408  003638  0100               	movlb	0	; () banked
  8409  00363A  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8410  00363C  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8411  00363E                     l17180:
  8412                           
  8413                           ; BSR set to: 0
  8414  00363E  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8415  003640  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8416  003642  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8417  003644  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8418  003646  0A80               	xorlw	128
  8419  003648  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8420  00364A  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8421  00364C  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8422  00364E  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8423  003650  0A80               	xorlw	128
  8424  003652  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8425  003654  E3C7               	bnc	l17168
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;main.c: 2430: }
  8429                           ;main.c: 2433: if (nTimeStamp) {
  8430  003656  5033               	movf	_nTimeStamp,w,c
  8431  003658  E023               	bz	l1137
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;main.c: 2434: ultoa(wrkbuf, timer, 16);
  8435  00365A  0E01               	movlw	high _wrkbuf
  8436  00365C  0100               	movlb	0	; () banked
  8437  00365E  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8438  003660  0E7D               	movlw	low _wrkbuf
  8439  003662  6F76               	movwf	?_ultoa& (0+255),b
  8440  003664  C11C  F078         	movff	_timer,?_ultoa+2	;volatile
  8441  003668  C11D  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8442  00366C  C11E  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8443  003670  C11F  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8444  003674  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8445  003676  0E10               	movlw	16
  8446  003678  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8447  00367A  EC4A  F013         	call	_ultoa	;wreg free
  8448                           
  8449                           ; BSR set to: 0
  8450                           ;main.c: 2436: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8451  00367E  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8452  003680  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8453  003682                     l1134:
  8454                           
  8455                           ; BSR set to: 0
  8456  003682  A2AC               	btfss	4012,1,c	;volatile
  8457  003684  D7FE               	goto	l1134
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;main.c: 2438: WriteUSART('0');
  8461  003686  0E30               	movlw	48
  8462  003688  ECF5  F007         	call	_WriteUSART
  8463                           
  8464                           ; BSR set to: 0
  8465  00368C  D80F               	call	PL90	;call to abstracted procedure
  8466  00368E  B4D8               	btfsc	status,2,c
  8467  003690  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8468  003692  E3F7               	bnc	l1134
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;main.c: 2439: }
  8472                           ;main.c: 2440: putsUSART(wrkbuf);
  8473  003694  0E01               	movlw	high _wrkbuf
  8474  003696  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8475  003698  0E7D               	movlw	low _wrkbuf
  8476  00369A  6F61               	movwf	?_putsUSART& (0+255),b
  8477  00369C  ECBC  F00A         	call	_putsUSART	;wreg free
  8478  0036A0                     l1137:
  8479  0036A0  A2AC               	btfss	4012,1,c	;volatile
  8480  0036A2  D7FE               	goto	l1137
  8481                           
  8482                           ;main.c: 2444: WriteUSART(0x0d);
  8483  0036A4  0E0D               	movlw	13
  8484  0036A6  ECF5  F007         	call	_WriteUSART
  8485  0036AA                     l1140:
  8486  0036AA  0012               	return	
  8487  0036AC                     __end_of_receiveSendEventSLCAN:
  8488                           	opt stack 0
  8489  0036AC                     PL90:
  8490                           	opt stack 22
  8491  0036AC  0100               	movlb	0	; () banked
  8492  0036AE  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8493  0036B0  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8494  0036B2  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8495  0036B4  0A80               	xorlw	128
  8496  0036B6  0F80               	addlw	-128
  8497  0036B8  0CB8               	retlw	184
  8498  0036BA                     __end_ofPL90:
  8499                           	opt stack 0
  8500                           tblptru	equ	0xFF8
  8501                           tblptrh	equ	0xFF7
  8502                           tblptrl	equ	0xFF6
  8503                           tablat	equ	0xFF5
  8504                           prodh	equ	0xFF4
  8505                           prodl	equ	0xFF3
  8506                           intcon	equ	0xFF2
  8507                           indf0	equ	0xFEF
  8508                           postinc0	equ	0xFEE
  8509                           fsr0h	equ	0xFEA
  8510                           fsr0l	equ	0xFE9
  8511                           wreg	equ	0xFE8
  8512                           indf1	equ	0xFE7
  8513                           postinc1	equ	0xFE6
  8514                           postdec1	equ	0xFE5
  8515                           fsr1h	equ	0xFE2
  8516                           fsr1l	equ	0xFE1
  8517                           indf2	equ	0xFDF
  8518                           postinc2	equ	0xFDE
  8519                           postdec2	equ	0xFDD
  8520                           plusw2	equ	0xFDB
  8521                           fsr2h	equ	0xFDA
  8522                           fsr2l	equ	0xFD9
  8523                           status	equ	0xFD8
  8524                           
  8525 ;; *************** function _ultoa *****************
  8526 ;; Defined at:
  8527 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8528 ;; Parameters:    Size  Location     Type
  8529 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8530 ;;		 -> wrkbuf(80), 
  8531 ;;  val             4   24[BANK0 ] unsigned long 
  8532 ;;  base            2   28[BANK0 ] int 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  v               4   30[BANK0 ] unsigned long 
  8535 ;;  c               1   34[BANK0 ] unsigned char 
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  2   22[BANK0 ] PTR unsigned char 
  8538 ;; Registers used:
  8539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : F/0
  8542 ;;		On exit  : F/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8545 ;;      Params:         0       8       0       0       0       0       0
  8546 ;;      Locals:         0       5       0       0       0       0       0
  8547 ;;      Temps:          0       0       0       0       0       0       0
  8548 ;;      Totals:         0      13       0       0       0       0       0
  8549 ;;Total ram usage:       13 bytes
  8550 ;; Hardware stack levels used:    1
  8551 ;; Hardware stack levels required when called:    4
  8552 ;; This function calls:
  8553 ;;		___lldiv
  8554 ;;		___llmod
  8555 ;; This function is called by:
  8556 ;;		_receiveSendEventSLCAN
  8557 ;; This function uses a non-reentrant model
  8558 ;;
  8559                           
  8560                           	psect	text6
  8561  002694                     __ptext6:
  8562                           	opt stack 0
  8563  002694                     _ultoa:
  8564                           	opt stack 23
  8565                           
  8566                           ; BSR set to: 0
  8567                           
  8568                           ;incstack = 0
  8569                           ;incstack = 0
  8570  002694  C078  F07E         	movff	ultoa@val,ultoa@v
  8571  002698  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8572  00269C  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8573  0026A0  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8574  0026A4                     l17346:
  8575                           
  8576                           ; BSR set to: 0
  8577  0026A4  C07E  F060         	movff	ultoa@v,?___lldiv
  8578  0026A8  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8579  0026AC  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8580  0026B0  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8581  0026B4  D858               	call	PL70	;call to abstracted procedure
  8582  0026B6  EC7A  F00C         	call	___lldiv	;wreg free
  8583  0026BA  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8584  0026BE  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8585  0026C2  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8586  0026C6  C060  F07E         	movff	?___lldiv,ultoa@v
  8587                           
  8588                           ; BSR set to: 0
  8589  0026CA  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8590  0026CC  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8591                           
  8592                           ; BSR set to: 0
  8593  0026CE  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8594  0026D0  117E               	iorwf	ultoa@v& (0+255),w,b
  8595  0026D2  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8596  0026D4  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8597  0026D6  E1E6               	bnz	l17346
  8598                           
  8599                           ; BSR set to: 0
  8600  0026D8  C076  FFD9         	movff	ultoa@buf,fsr2l
  8601  0026DC  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8602  0026E0  6ADF               	clrf	indf2,c
  8603                           
  8604                           ; BSR set to: 0
  8605  0026E2  0776               	decf	ultoa@buf& (0+255),f,b
  8606  0026E4  A0D8               	btfss	status,0,c
  8607  0026E6  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8608  0026E8                     l17356:
  8609                           
  8610                           ; BSR set to: 0
  8611  0026E8  C078  F06D         	movff	ultoa@val,?___llmod
  8612  0026EC  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8613  0026F0  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8614  0026F4  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8615  0026F8  C07C  F071         	movff	ultoa@base,?___llmod+4
  8616  0026FC  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8617  002700  0E00               	movlw	0
  8618  002702  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8619  002704  0EFF               	movlw	-1
  8620  002706  6F73               	movwf	(?___llmod+6)& (0+255),b
  8621  002708  6F74               	movwf	(?___llmod+7)& (0+255),b
  8622  00270A  EC72  F00B         	call	___llmod	;wreg free
  8623  00270E  516D               	movf	?___llmod& (0+255),w,b
  8624  002710  6F82               	movwf	ultoa@c& (0+255),b
  8625                           
  8626                           ; BSR set to: 0
  8627  002712  C078  F060         	movff	ultoa@val,?___lldiv
  8628  002716  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8629  00271A  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8630  00271E  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8631  002722  D821               	call	PL70	;call to abstracted procedure
  8632  002724  EC7A  F00C         	call	___lldiv	;wreg free
  8633  002728  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8634  00272C  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8635  002730  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8636  002734  C060  F078         	movff	?___lldiv,ultoa@val
  8637                           
  8638                           ; BSR set to: 0
  8639  002738  0E09               	movlw	9
  8640  00273A  6582               	cpfsgt	ultoa@c& (0+255),b
  8641  00273C  D002               	goto	l2509
  8642                           
  8643                           ; BSR set to: 0
  8644  00273E  0E07               	movlw	7
  8645  002740  2782               	addwf	ultoa@c& (0+255),f,b
  8646  002742                     l2509:
  8647                           
  8648                           ; BSR set to: 0
  8649  002742  0E30               	movlw	48
  8650  002744  2782               	addwf	ultoa@c& (0+255),f,b
  8651                           
  8652                           ; BSR set to: 0
  8653  002746  C076  FFD9         	movff	ultoa@buf,fsr2l
  8654  00274A  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8655  00274E  C082  FFDF         	movff	ultoa@c,indf2
  8656                           
  8657                           ; BSR set to: 0
  8658  002752  0776               	decf	ultoa@buf& (0+255),f,b
  8659  002754  A0D8               	btfss	status,0,c
  8660  002756  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8661                           
  8662                           ; BSR set to: 0
  8663  002758  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8664  00275A  1178               	iorwf	ultoa@val& (0+255),w,b
  8665  00275C  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8666  00275E  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8667  002760  B4D8               	btfsc	status,2,c
  8668                           
  8669                           ; BSR set to: 0
  8670  002762  0012               	return	
  8671  002764  D7C1               	goto	l17356
  8672  002766                     __end_of_ultoa:
  8673                           	opt stack 0
  8674  002766                     PL70:
  8675                           	opt stack 23
  8676  002766  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8677  00276A  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8678  00276E  0E00               	movlw	0
  8679  002770  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8680  002772  0EFF               	movlw	-1
  8681  002774  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8682  002776  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8683  002778  0012               	return	
  8684  00277A                     __end_ofPL70:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           intcon	equ	0xFF2
  8693                           indf0	equ	0xFEF
  8694                           postinc0	equ	0xFEE
  8695                           fsr0h	equ	0xFEA
  8696                           fsr0l	equ	0xFE9
  8697                           wreg	equ	0xFE8
  8698                           indf1	equ	0xFE7
  8699                           postinc1	equ	0xFE6
  8700                           postdec1	equ	0xFE5
  8701                           fsr1h	equ	0xFE2
  8702                           fsr1l	equ	0xFE1
  8703                           indf2	equ	0xFDF
  8704                           postinc2	equ	0xFDE
  8705                           postdec2	equ	0xFDD
  8706                           plusw2	equ	0xFDB
  8707                           fsr2h	equ	0xFDA
  8708                           fsr2l	equ	0xFD9
  8709                           status	equ	0xFD8
  8710                           
  8711 ;; *************** function _doModeVscp *****************
  8712 ;; Defined at:
  8713 ;;		line 1357 in file "main.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;		None
  8716 ;; Auto vars:     Size  Location     Type
  8717 ;;  c               1   89[BANK0 ] unsigned char 
  8718 ;; Return value:  Size  Location     Type
  8719 ;;		None               void
  8720 ;; Registers used:
  8721 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8722 ;; Tracked objects:
  8723 ;;		On entry : 0/1
  8724 ;;		On exit  : 0/0
  8725 ;;		Unchanged: 0/0
  8726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8727 ;;      Params:         0       0       0       0       0       0       0
  8728 ;;      Locals:         0       1       0       0       0       0       0
  8729 ;;      Temps:          0       0       0       0       0       0       0
  8730 ;;      Totals:         0       1       0       0       0       0       0
  8731 ;;Total ram usage:        1 bytes
  8732 ;; Hardware stack levels used:    1
  8733 ;; Hardware stack levels required when called:    7
  8734 ;; This function calls:
  8735 ;;		_fifo_read
  8736 ;;		_ECANSetOperationMode
  8737 ;;		_receiveSendMultiEventCANAL
  8738 ;;		_receiveSendEventCANAL
  8739 ;;		_calcCRC
  8740 ;;		_sendVSCPDriverNack
  8741 ;;		_sendVSCPDriverAck
  8742 ;;		_receiveVSCPModeCanalMsg
  8743 ;;		_receiveVSCPModeMultiCanalMsg
  8744 ;;		_sendVSCPModeCapabilities
  8745 ;;		_sendVSCPDriverCommandReply
  8746 ;;		_sendVSCPDriverErrorFrame
  8747 ;; This function is called by:
  8748 ;;		_main
  8749 ;; This function uses a non-reentrant model
  8750 ;;
  8751                           
  8752                           	psect	text7
  8753  003A16                     __ptext7:
  8754                           	opt stack 0
  8755  003A16                     _doModeVscp:
  8756                           	opt stack 22
  8757                           
  8758                           ;main.c: 1358: uint8_t c;
  8759                           ;main.c: 1361: if ( caps.maxCanalFrames > 1 ) {
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;incstack = 0
  8763                           ;incstack = 0
  8764  003A16  0101               	movlb	1	; () banked
  8765  003A18  EE21  F0F2         	lfsr	2,_caps+1
  8766  003A1C  0E01               	movlw	1
  8767  003A1E  64DF               	cpfsgt	indf2,c
  8768  003A20  D003               	goto	l15326
  8769                           
  8770                           ; BSR set to: 1
  8771                           ;main.c: 1364: receiveSendMultiEventCANAL();
  8772  003A22  ECD2  F019         	call	_receiveSendMultiEventCANAL	;wreg free
  8773                           
  8774                           ;main.c: 1365: }
  8775  003A26  D002               	goto	l15328
  8776  003A28                     l15326:
  8777                           
  8778                           ; BSR set to: 1
  8779                           ;main.c: 1366: else {
  8780                           ;main.c: 1369: receiveSendEventCANAL();
  8781  003A28  EC79  F018         	call	_receiveSendEventCANAL	;wreg free
  8782  003A2C                     l15328:
  8783                           
  8784                           ;main.c: 1370: }
  8785                           ;main.c: 1373: (INTCONbits.GIE = 0);
  8786  003A2C  9EF2               	bcf	intcon,7,c	;volatile
  8787                           
  8788                           ;main.c: 1375: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8789  003A2E  0E01               	movlw	high _serialInputFifo
  8790  003A30  0100               	movlb	0	; () banked
  8791  003A32  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8792  003A34  0EDD               	movlw	low _serialInputFifo
  8793  003A36  6F60               	movwf	?_fifo_read& (0+255),b
  8794  003A38  0E00               	movlw	high doModeVscp@c
  8795  003A3A  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8796  003A3C  0EB9               	movlw	low doModeVscp@c
  8797  003A3E  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8798  003A40  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8799  003A42  0E01               	movlw	1
  8800  003A44  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8801  003A46  EC78  F012         	call	_fifo_read	;wreg free
  8802  003A4A  0560               	decf	?_fifo_read& (0+255),w,b
  8803  003A4C  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8804  003A4E  E001 D0BF          	bnz	l15476
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;main.c: 1378: (INTCONbits.GIE = 1);
  8808  003A52  8EF2               	bsf	intcon,7,c	;volatile
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;main.c: 1381: if ( pos >= sizeof( cmdbuf ) ) {
  8812  003A54  0E4F               	movlw	79
  8813  003A56  6434               	cpfsgt	_pos,c
  8814  003A58  D003               	goto	l738
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;main.c: 1383: pos = 0;
  8818  003A5A  6A34               	clrf	_pos,c
  8819                           
  8820                           ;main.c: 1384: bDLE = 0;
  8821  003A5C  6A2B               	clrf	_bDLE,c
  8822                           
  8823                           ;main.c: 1385: stateVscpDriver = 0;
  8824  003A5E  6A37               	clrf	_stateVscpDriver,c
  8825  003A60                     l738:
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;main.c: 1386: }
  8829                           ;main.c: 1388: if ( 0 == stateVscpDriver ) {
  8830  003A60  6637               	tstfsz	_stateVscpDriver,c
  8831  003A62  D00D               	goto	l15350
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;main.c: 1390: if ( bDLE ) {
  8835  003A64  502B               	movf	_bDLE,w,c
  8836  003A66  E008               	bz	l15346
  8837                           
  8838                           ; BSR set to: 0
  8839                           ;main.c: 1392: bDLE = 0;
  8840  003A68  6A2B               	clrf	_bDLE,c
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;main.c: 1395: if ( 0x02 == c ) {
  8844  003A6A  51B9               	movf	doModeVscp@c& (0+255),w,b
  8845  003A6C  0A02               	xorlw	2
  8846  003A6E  E12A               	bnz	l15386
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;main.c: 1396: stateVscpDriver = 1;
  8850  003A70  0E01               	movlw	1
  8851  003A72  6E37               	movwf	_stateVscpDriver,c
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;main.c: 1397: pos = 0;
  8855  003A74  6A34               	clrf	_pos,c
  8856  003A76  D026               	goto	l15386
  8857  003A78                     l15346:
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;main.c: 1400: else {
  8861                           ;main.c: 1401: bDLE = 1;
  8862  003A78  0E01               	movlw	1
  8863  003A7A  6E2B               	movwf	_bDLE,c
  8864  003A7C  D0AA               	goto	l743
  8865  003A7E                     l15350:
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;main.c: 1405: else if ( 1 == stateVscpDriver ) {
  8869  003A7E  0437               	decf	_stateVscpDriver,w,c
  8870  003A80  E121               	bnz	l15386
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;main.c: 1408: if ( bDLE ) {
  8874  003A82  502B               	movf	_bDLE,w,c
  8875  003A84  E01B               	bz	l15370
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;main.c: 1411: bDLE = 0;
  8879  003A86  6A2B               	clrf	_bDLE,c
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;main.c: 1414: if ( 0x03 == c ) {
  8883  003A88  51B9               	movf	doModeVscp@c& (0+255),w,b
  8884  003A8A  0A03               	xorlw	3
  8885  003A8C  E103               	bnz	l15360
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;main.c: 1415: stateVscpDriver = 2;
  8889  003A8E  0E02               	movlw	2
  8890  003A90  6E37               	movwf	_stateVscpDriver,c
  8891                           
  8892                           ;main.c: 1416: }
  8893  003A92  D018               	goto	l15386
  8894  003A94                     l15360:
  8895                           
  8896                           ; BSR set to: 0
  8897                           ;main.c: 1418: else if (0x10 == c) {
  8898  003A94  51B9               	movf	doModeVscp@c& (0+255),w,b
  8899  003A96  0A10               	xorlw	16
  8900  003A98  E115               	bnz	l15386
  8901  003A9A                     u20010:
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;main.c: 1420: cmdbuf[ pos++ ] = c;
  8905  003A9A  0E2D               	movlw	low _cmdbuf
  8906  003A9C  2434               	addwf	_pos,w,c
  8907  003A9E  6ED9               	movwf	fsr2l,c
  8908  003AA0  6ADA               	clrf	fsr2h,c
  8909  003AA2  0E01               	movlw	high _cmdbuf
  8910  003AA4  22DA               	addwfc	fsr2h,f,c
  8911  003AA6  0100               	movlb	0	; () banked
  8912  003AA8  C0B9  FFDF         	movff	doModeVscp@c,indf2
  8913                           
  8914                           ; BSR set to: 0
  8915  003AAC  2A34               	incf	_pos,f,c
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;main.c: 1421: if ( pos >= sizeof( cmdbuf ) ) {
  8919  003AAE  0E4F               	movlw	79
  8920  003AB0  6434               	cpfsgt	_pos,c
  8921  003AB2  D08F               	goto	l743
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;main.c: 1424: bDLE = 0;
  8925  003AB4  6A2B               	clrf	_bDLE,c
  8926                           
  8927                           ;main.c: 1425: pos = 0;
  8928  003AB6  6A34               	clrf	_pos,c
  8929                           
  8930                           ;main.c: 1426: stateVscpDriver = 0;
  8931  003AB8  6A37               	clrf	_stateVscpDriver,c
  8932  003ABA  D08B               	goto	l743
  8933  003ABC                     l15370:
  8934                           
  8935                           ; BSR set to: 0
  8936                           ;main.c: 1431: else {
  8937                           ;main.c: 1432: if (0x10 == c) {
  8938  003ABC  51B9               	movf	doModeVscp@c& (0+255),w,b
  8939  003ABE  0A10               	xorlw	16
  8940  003AC0  E0DB               	bz	l15346
  8941  003AC2  D7EB               	goto	u20010
  8942  003AC4                     l15386:
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;main.c: 1448: }
  8946                           ;main.c: 1449: }
  8947                           ;main.c: 1450: }
  8948                           ;main.c: 1452: if (2 == stateVscpDriver) {
  8949  003AC4  5037               	movf	_stateVscpDriver,w,c
  8950  003AC6  0A02               	xorlw	2
  8951  003AC8  E001 D082          	bnz	l15476
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 1455: stateVscpDriver = 0;
  8955  003ACC  6A37               	clrf	_stateVscpDriver,c
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;main.c: 1467: if (calcCRC(cmdbuf, pos)) {
  8959  003ACE  0E01               	movlw	high _cmdbuf
  8960  003AD0  0100               	movlb	0	; () banked
  8961  003AD2  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8962  003AD4  0E2D               	movlw	low _cmdbuf
  8963  003AD6  6F6C               	movwf	?_calcCRC& (0+255),b
  8964  003AD8  C034  F06E         	movff	_pos,?_calcCRC+2
  8965  003ADC  EC82  F008         	call	_calcCRC	;wreg free
  8966  003AE0  0900               	iorlw	0
  8967  003AE2  E003               	bz	l756
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;main.c: 1468: sendVSCPDriverNack();
  8971  003AE4  ECEC  F00E         	call	_sendVSCPDriverNack	;wreg free
  8972  003AE8  D074               	goto	l743
  8973  003AEA                     l756:
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;main.c: 1470: }
  8977                           ;main.c: 1473: if (0 ==
  8978                           ;main.c: 1474: cmdbuf[ 0 ]) {
  8979  003AEA  0101               	movlb	1	; () banked
  8980  003AEC  672D               	tstfsz	_cmdbuf& (0+255),b
  8981  003AEE  D003               	goto	l15398
  8982  003AF0                     l15396:
  8983                           
  8984                           ;main.c: 1475: sendVSCPDriverAck();
  8985  003AF0  EC3C  F00F         	call	_sendVSCPDriverAck	;wreg free
  8986                           
  8987                           ;main.c: 1476: }
  8988  003AF4  D06B               	goto	l15472
  8989  003AF6                     l15398:
  8990                           
  8991                           ; BSR set to: 1
  8992                           ;main.c: 1478: else if (1 ==
  8993                           ;main.c: 1479: cmdbuf[ 0 ]) {
  8994  003AF6  052D               	decf	_cmdbuf& (0+255),w,b
  8995  003AF8  E103               	bnz	l15402
  8996  003AFA                     l15400:
  8997                           
  8998                           ;main.c: 1480: sendVSCPDriverNack();
  8999  003AFA  ECEC  F00E         	call	_sendVSCPDriverNack	;wreg free
  9000                           
  9001                           ;main.c: 1481: }
  9002  003AFE  D066               	goto	l15472
  9003  003B00                     l15402:
  9004                           
  9005                           ; BSR set to: 1
  9006                           ;main.c: 1483: else if (2 ==
  9007                           ;main.c: 1484: cmdbuf[ 0 ]) {
  9008  003B00  512D               	movf	_cmdbuf& (0+255),w,b
  9009  003B02  0A02               	xorlw	2
  9010  003B04  E105               	bnz	l15410
  9011                           
  9012                           ; BSR set to: 1
  9013                           ;main.c: 1485: if ( receiveVSCPModeCanalMsg() ) {
  9014  003B06  ECBD  F013         	call	_receiveVSCPModeCanalMsg	;wreg free
  9015  003B0A  0900               	iorlw	0
  9016  003B0C  E1F1               	bnz	l15396
  9017  003B0E  D7F5               	goto	l15400
  9018  003B10                     l15410:
  9019                           
  9020                           ; BSR set to: 1
  9021                           ;main.c: 1493: else if (6 ==
  9022                           ;main.c: 1494: cmdbuf[ 0 ]) {
  9023  003B10  512D               	movf	_cmdbuf& (0+255),w,b
  9024  003B12  0A06               	xorlw	6
  9025  003B14  E103               	bnz	l15418
  9026                           
  9027                           ; BSR set to: 1
  9028                           ;main.c: 1495: if (receiveVSCPModeMultiCanalMsg()) {
  9029  003B16  ECD1  F007         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  9030  003B1A  D7F7               	goto	L4
  9031  003B1C                     l15418:
  9032                           
  9033                           ; BSR set to: 1
  9034                           ;main.c: 1503: else if (6 ==
  9035                           ;main.c: 1504: cmdbuf[ 0 ]) {
  9036  003B1C  512D               	movf	_cmdbuf& (0+255),w,b
  9037  003B1E  0A06               	xorlw	6
  9038  003B20  E0EC               	bz	l15400
  9039                           
  9040                           ; BSR set to: 1
  9041                           ;main.c: 1508: else if (3 ==
  9042                           ;main.c: 1509: cmdbuf[ 0 ]) {
  9043  003B22  512D               	movf	_cmdbuf& (0+255),w,b
  9044  003B24  0A03               	xorlw	3
  9045  003B26  E0E9               	bz	l15400
  9046                           
  9047                           ; BSR set to: 1
  9048                           ;main.c: 1513: else if (4 ==
  9049                           ;main.c: 1514: cmdbuf[ 0 ]) {
  9050  003B28  512D               	movf	_cmdbuf& (0+255),w,b
  9051  003B2A  0A04               	xorlw	4
  9052  003B2C  E0E6               	bz	l15400
  9053                           
  9054                           ; BSR set to: 1
  9055                           ;main.c: 1518: else if (8 ==
  9056                           ;main.c: 1519: cmdbuf[ 0 ]) {
  9057  003B2E  512D               	movf	_cmdbuf& (0+255),w,b
  9058  003B30  0A08               	xorlw	8
  9059  003B32  E107               	bnz	l15436
  9060                           
  9061                           ; BSR set to: 1
  9062                           ;main.c: 1520: caps.maxVscpFrames = cmdbuf[ 5 ];
  9063  003B34  C132  F1F1         	movff	_cmdbuf+5,_caps
  9064                           
  9065                           ;main.c: 1521: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  9066  003B38  C133  F1F2         	movff	_cmdbuf+6,_caps+1
  9067                           
  9068                           ; BSR set to: 1
  9069                           ;main.c: 1522: sendVSCPModeCapabilities();
  9070  003B3C  EC8F  F010         	call	_sendVSCPModeCapabilities	;wreg free
  9071                           
  9072                           ;main.c: 1523: }
  9073  003B40  D045               	goto	l15472
  9074  003B42                     l15436:
  9075                           
  9076                           ; BSR set to: 1
  9077                           ;main.c: 1525: else if (255 ==
  9078                           ;main.c: 1526: cmdbuf[ 0 ]) {
  9079  003B42  292D               	incf	_cmdbuf& (0+255),w,b
  9080  003B44  E140               	bnz	l15470
  9081                           
  9082                           ; BSR set to: 1
  9083                           ;main.c: 1528: if (cmdbuf[ 5 ] ==
  9084                           ;main.c: 1529: 0) {
  9085  003B46  6732               	tstfsz	(_cmdbuf+5)& (0+255),b
  9086  003B48  D006               	goto	l15442
  9087                           
  9088                           ; BSR set to: 1
  9089                           ;main.c: 1530: sendVSCPDriverCommandReply(0, 0);
  9090  003B4A  0E00               	movlw	0
  9091  003B4C  0100               	movlb	0	; () banked
  9092  003B4E  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9093  003B50  ECE1  F012         	call	_sendVSCPDriverCommandReply
  9094                           
  9095                           ;main.c: 1531: }
  9096  003B54  D03B               	goto	l15472
  9097  003B56                     l15442:
  9098                           
  9099                           ; BSR set to: 1
  9100                           ;main.c: 1533: else if (cmdbuf[ 5 ] ==
  9101                           ;main.c: 1534: 1) {
  9102  003B56  0532               	decf	(_cmdbuf+5)& (0+255),w,b
  9103  003B58  E109               	bnz	l15448
  9104                           
  9105                           ; BSR set to: 1
  9106                           ;main.c: 1535: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  9107  003B5A  0E00               	movlw	0
  9108  003B5C  EC0A  F008         	call	_ECANSetOperationMode
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;main.c: 1536: sendVSCPDriverCommandReply(0, 1);
  9112  003B60  0E01               	movlw	1
  9113  003B62  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9114  003B64  0E00               	movlw	0
  9115  003B66  ECE1  F012         	call	_sendVSCPDriverCommandReply
  9116                           
  9117                           ;main.c: 1537: }
  9118  003B6A  D030               	goto	l15472
  9119  003B6C                     l15448:
  9120                           
  9121                           ; BSR set to: 1
  9122                           ;main.c: 1539: else if (cmdbuf[ 5 ] ==
  9123                           ;main.c: 1540: 2) {
  9124  003B6C  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9125  003B6E  0A02               	xorlw	2
  9126  003B70  E109               	bnz	l15454
  9127                           
  9128                           ; BSR set to: 1
  9129                           ;main.c: 1541: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  9130  003B72  0E40               	movlw	64
  9131  003B74  EC0A  F008         	call	_ECANSetOperationMode
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;main.c: 1542: sendVSCPDriverCommandReply(0, 2);
  9135  003B78  0E02               	movlw	2
  9136  003B7A  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9137  003B7C  0E00               	movlw	0
  9138  003B7E  ECE1  F012         	call	_sendVSCPDriverCommandReply
  9139                           
  9140                           ;main.c: 1543: }
  9141  003B82  D024               	goto	l15472
  9142  003B84                     l15454:
  9143                           
  9144                           ; BSR set to: 1
  9145                           ;main.c: 1545: else if (cmdbuf[ 5 ] ==
  9146                           ;main.c: 1546: 3) {
  9147  003B84  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9148  003B86  0A03               	xorlw	3
  9149  003B88  E109               	bnz	l15460
  9150                           
  9151                           ; BSR set to: 1
  9152                           ;main.c: 1547: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  9153  003B8A  0E60               	movlw	96
  9154  003B8C  EC0A  F008         	call	_ECANSetOperationMode
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;main.c: 1548: sendVSCPDriverCommandReply(0, 3);
  9158  003B90  0E03               	movlw	3
  9159  003B92  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9160  003B94  0E00               	movlw	0
  9161  003B96  ECE1  F012         	call	_sendVSCPDriverCommandReply
  9162                           
  9163                           ;main.c: 1549: }
  9164  003B9A  D018               	goto	l15472
  9165  003B9C                     l15460:
  9166                           
  9167                           ; BSR set to: 1
  9168                           ;main.c: 1551: else if (cmdbuf[ 5 ] ==
  9169                           ;main.c: 1552: 4) {
  9170  003B9C  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9171  003B9E  0A04               	xorlw	4
  9172  003BA0  E109               	bnz	l15466
  9173                           
  9174                           ; BSR set to: 1
  9175                           ;main.c: 1553: ECANSetOperationMode(0x20);
  9176  003BA2  0E20               	movlw	32
  9177  003BA4  EC0A  F008         	call	_ECANSetOperationMode
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;main.c: 1554: sendVSCPDriverCommandReply(0, 4);
  9181  003BA8  0E04               	movlw	4
  9182  003BAA  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9183  003BAC  0E00               	movlw	0
  9184  003BAE  ECE1  F012         	call	_sendVSCPDriverCommandReply
  9185                           
  9186                           ;main.c: 1555: }
  9187  003BB2  D00C               	goto	l15472
  9188  003BB4                     l15466:
  9189                           
  9190                           ; BSR set to: 1
  9191                           ;main.c: 1557: else if (cmdbuf[ 5 ] ==
  9192                           ;main.c: 1558: 5) {
  9193  003BB4  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9194  003BB6  0A05               	xorlw	5
  9195  003BB8  E109               	bnz	l15472
  9196                           
  9197                           ; BSR set to: 1
  9198                           ;main.c: 1559: sendVSCPDriverCommandReply(0, 0);
  9199  003BBA  0E00               	movlw	0
  9200  003BBC  0100               	movlb	0	; () banked
  9201  003BBE  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9202  003BC0  ECE1  F012         	call	_sendVSCPDriverCommandReply
  9203  003BC4  D003               	goto	l15472
  9204  003BC6                     l15470:
  9205                           
  9206                           ; BSR set to: 1
  9207                           ;main.c: 1564: else {
  9208                           ;main.c: 1566: sendVSCPDriverErrorFrame(2);
  9209  003BC6  0E02               	movlw	2
  9210  003BC8  ECEA  F010         	call	_sendVSCPDriverErrorFrame
  9211  003BCC                     l15472:
  9212                           
  9213                           ;main.c: 1567: }
  9214                           ;main.c: 1570: pos = 0;
  9215  003BCC  6A34               	clrf	_pos,c
  9216                           
  9217                           ;main.c: 1571: stateVscpDriver = 0;
  9218  003BCE  6A37               	clrf	_stateVscpDriver,c
  9219  003BD0                     l15476:
  9220                           
  9221                           ;main.c: 1573: }
  9222                           ;main.c: 1575: }
  9223                           ;main.c: 1578: (INTCONbits.GIE = 1);
  9224  003BD0  8EF2               	bsf	intcon,7,c	;volatile
  9225  003BD2                     l743:
  9226  003BD2  0012               	return	
  9227  003BD4                     __end_of_doModeVscp:
  9228                           	opt stack 0
  9229                           tblptru	equ	0xFF8
  9230                           tblptrh	equ	0xFF7
  9231                           tblptrl	equ	0xFF6
  9232                           tablat	equ	0xFF5
  9233                           prodh	equ	0xFF4
  9234                           prodl	equ	0xFF3
  9235                           intcon	equ	0xFF2
  9236                           indf0	equ	0xFEF
  9237                           postinc0	equ	0xFEE
  9238                           fsr0h	equ	0xFEA
  9239                           fsr0l	equ	0xFE9
  9240                           wreg	equ	0xFE8
  9241                           indf1	equ	0xFE7
  9242                           postinc1	equ	0xFE6
  9243                           postdec1	equ	0xFE5
  9244                           fsr1h	equ	0xFE2
  9245                           fsr1l	equ	0xFE1
  9246                           indf2	equ	0xFDF
  9247                           postinc2	equ	0xFDE
  9248                           postdec2	equ	0xFDD
  9249                           plusw2	equ	0xFDB
  9250                           fsr2h	equ	0xFDA
  9251                           fsr2l	equ	0xFD9
  9252                           status	equ	0xFD8
  9253                           
  9254 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9255 ;; Defined at:
  9256 ;;		line 1839 in file "main.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;  errorcode       1    wreg     unsigned char 
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9261 ;;  crc             1   16[BANK0 ] unsigned char 
  9262 ;; Return value:  Size  Location     Type
  9263 ;;		None               void
  9264 ;; Registers used:
  9265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9266 ;; Tracked objects:
  9267 ;;		On entry : F/1
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9271 ;;      Params:         0       0       0       0       0       0       0
  9272 ;;      Locals:         0       2       0       0       0       0       0
  9273 ;;      Temps:          0       0       0       0       0       0       0
  9274 ;;      Totals:         0       2       0       0       0       0       0
  9275 ;;Total ram usage:        2 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    6
  9278 ;; This function calls:
  9279 ;;		_WriteUSART
  9280 ;;		_sendEscapedUartData
  9281 ;;		_crc8
  9282 ;; This function is called by:
  9283 ;;		_doModeVscp
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text8
  9288  0021D4                     __ptext8:
  9289                           	opt stack 0
  9290  0021D4                     _sendVSCPDriverErrorFrame:
  9291                           	opt stack 22
  9292                           
  9293                           ;incstack = 0
  9294                           ;incstack = 0
  9295                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9296  0021D4  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9297                           
  9298                           ; BSR set to: 1
  9299                           ;main.c: 1840: uint8_t crc = 0;
  9300  0021D8  0100               	movlb	0	; () banked
  9301  0021DA  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9302  0021DC                     l861:
  9303  0021DC  A2AC               	btfss	4012,1,c	;volatile
  9304  0021DE  D7FE               	goto	l861
  9305                           
  9306                           ;main.c: 1844: WriteUSART(0x10);
  9307  0021E0  0E10               	movlw	16
  9308  0021E2  ECF5  F007         	call	_WriteUSART
  9309  0021E6                     l864:
  9310  0021E6  A2AC               	btfss	4012,1,c	;volatile
  9311  0021E8  D7FE               	goto	l864
  9312                           
  9313                           ;main.c: 1846: WriteUSART(0x02);
  9314  0021EA  0E02               	movlw	2
  9315  0021EC  ECF5  F007         	call	_WriteUSART
  9316  0021F0                     l867:
  9317  0021F0  A2AC               	btfss	4012,1,c	;volatile
  9318  0021F2  D7FE               	goto	l867
  9319                           
  9320                           ;main.c: 1850: WriteUSART(253);
  9321  0021F4  0EFD               	movlw	253
  9322  0021F6  ECF5  F007         	call	_WriteUSART
  9323                           
  9324                           ;main.c: 1851: crc8(&crc, 253);
  9325  0021FA  0100               	movlb	0	; () banked
  9326  0021FC  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9327  0021FE  6F68               	movwf	(?_crc8+1)& (0+255),b
  9328  002200  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9329  002202  6F67               	movwf	?_crc8& (0+255),b
  9330  002204  0EFD               	movlw	253
  9331  002206  6F69               	movwf	(?_crc8+2)& (0+255),b
  9332  002208  ECE8  F008         	call	_crc8	;wreg free
  9333  00220C                     l870:
  9334  00220C  A2AC               	btfss	4012,1,c	;volatile
  9335  00220E  D7FE               	goto	l870
  9336                           
  9337                           ;main.c: 1855: WriteUSART(0);
  9338  002210  0E00               	movlw	0
  9339  002212  ECF5  F007         	call	_WriteUSART
  9340                           
  9341                           ;main.c: 1856: crc8(&crc, 0);
  9342  002216  D836               	call	PL94	;call to abstracted procedure
  9343  002218  ECE8  F008         	call	_crc8	;wreg free
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;main.c: 1859: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9347  00221C  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9348  00221E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9349  002220  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9350  002222  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9351  002224  0101               	movlb	1	; () banked
  9352  002226  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  9353  002228  EC42  F00B         	call	_sendEscapedUartData
  9354  00222C                     l873:
  9355  00222C  A2AC               	btfss	4012,1,c	;volatile
  9356  00222E  D7FE               	goto	l873
  9357                           
  9358                           ;main.c: 1863: WriteUSART(0);
  9359  002230  0E00               	movlw	0
  9360  002232  ECF5  F007         	call	_WriteUSART
  9361                           
  9362                           ;main.c: 1864: crc8(&crc, 0);
  9363  002236  D826               	call	PL94	;call to abstracted procedure
  9364  002238  ECE8  F008         	call	_crc8	;wreg free
  9365  00223C                     l876:
  9366  00223C  A2AC               	btfss	4012,1,c	;volatile
  9367  00223E  D7FE               	goto	l876
  9368                           
  9369                           ;main.c: 1866: WriteUSART(1);
  9370  002240  0E01               	movlw	1
  9371  002242  ECF5  F007         	call	_WriteUSART
  9372                           
  9373                           ;main.c: 1867: crc8(&crc, 1);
  9374  002246  0100               	movlb	0	; () banked
  9375  002248  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9376  00224A  6F68               	movwf	(?_crc8+1)& (0+255),b
  9377  00224C  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9378  00224E  6F67               	movwf	?_crc8& (0+255),b
  9379  002250  0E01               	movlw	1
  9380  002252  6F69               	movwf	(?_crc8+2)& (0+255),b
  9381  002254  ECE8  F008         	call	_crc8	;wreg free
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;main.c: 1870: sendEscapedUartData(errorcode, &crc);
  9385  002258  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9386  00225A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9387  00225C  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9388  00225E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9389  002260  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9390  002262  EC42  F00B         	call	_sendEscapedUartData
  9391                           
  9392                           ; BSR set to: 0
  9393                           ;main.c: 1873: sendEscapedUartData(crc, (0));
  9394  002266  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9395  002268  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9396  00226A  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9397  00226C  EC42  F00B         	call	_sendEscapedUartData
  9398  002270                     l879:
  9399  002270  A2AC               	btfss	4012,1,c	;volatile
  9400  002272  D7FE               	goto	l879
  9401                           
  9402                           ;main.c: 1877: WriteUSART(0x10);
  9403  002274  0E10               	movlw	16
  9404  002276  ECF5  F007         	call	_WriteUSART
  9405  00227A                     l882:
  9406  00227A  A2AC               	btfss	4012,1,c	;volatile
  9407  00227C  D7FE               	goto	l882
  9408                           
  9409                           ;main.c: 1879: WriteUSART(0x03);
  9410  00227E  0E03               	movlw	3
  9411  002280  EFF5  F007         	goto	_WriteUSART
  9412  002284                     __end_of_sendVSCPDriverErrorFrame:
  9413                           	opt stack 0
  9414  002284                     PL94:
  9415                           	opt stack 22
  9416  002284  0100               	movlb	0	; () banked
  9417  002286  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9418  002288  6F68               	movwf	(?_crc8+1)& (0+255),b
  9419  00228A  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9420  00228C  6F67               	movwf	?_crc8& (0+255),b
  9421  00228E  6B69               	clrf	(?_crc8+2)& (0+255),b
  9422  002290  0C00               	retlw	0
  9423  002292                     __end_ofPL94:
  9424                           	opt stack 0
  9425                           tblptru	equ	0xFF8
  9426                           tblptrh	equ	0xFF7
  9427                           tblptrl	equ	0xFF6
  9428                           tablat	equ	0xFF5
  9429                           prodh	equ	0xFF4
  9430                           prodl	equ	0xFF3
  9431                           intcon	equ	0xFF2
  9432                           indf0	equ	0xFEF
  9433                           postinc0	equ	0xFEE
  9434                           fsr0h	equ	0xFEA
  9435                           fsr0l	equ	0xFE9
  9436                           wreg	equ	0xFE8
  9437                           indf1	equ	0xFE7
  9438                           postinc1	equ	0xFE6
  9439                           postdec1	equ	0xFE5
  9440                           fsr1h	equ	0xFE2
  9441                           fsr1l	equ	0xFE1
  9442                           indf2	equ	0xFDF
  9443                           postinc2	equ	0xFDE
  9444                           postdec2	equ	0xFDD
  9445                           plusw2	equ	0xFDB
  9446                           fsr2h	equ	0xFDA
  9447                           fsr2l	equ	0xFD9
  9448                           status	equ	0xFD8
  9449                           
  9450 ;; *************** function _sendVSCPDriverCommandReply *****************
  9451 ;; Defined at:
  9452 ;;		line 1976 in file "main.c"
  9453 ;; Parameters:    Size  Location     Type
  9454 ;;  cmdReplyCode    1    wreg     unsigned char 
  9455 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  9456 ;; Auto vars:     Size  Location     Type
  9457 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  9458 ;;  crc             1   17[BANK0 ] unsigned char 
  9459 ;; Return value:  Size  Location     Type
  9460 ;;		None               void
  9461 ;; Registers used:
  9462 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9463 ;; Tracked objects:
  9464 ;;		On entry : F/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9468 ;;      Params:         0       1       0       0       0       0       0
  9469 ;;      Locals:         0       2       0       0       0       0       0
  9470 ;;      Temps:          0       0       0       0       0       0       0
  9471 ;;      Totals:         0       3       0       0       0       0       0
  9472 ;;Total ram usage:        3 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    6
  9475 ;; This function calls:
  9476 ;;		_WriteUSART
  9477 ;;		_sendEscapedUartData
  9478 ;;		_crc8
  9479 ;; This function is called by:
  9480 ;;		_doModeVscp
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           	psect	text9
  9485  0025C2                     __ptext9:
  9486                           	opt stack 0
  9487  0025C2                     _sendVSCPDriverCommandReply:
  9488                           	opt stack 22
  9489                           
  9490                           ;incstack = 0
  9491                           ;incstack = 0
  9492                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  9493  0025C2  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  9494                           
  9495                           ; BSR set to: 0
  9496                           ;main.c: 1977: uint8_t crc = 0;
  9497  0025C6  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  9498  0025C8                     l942:
  9499                           
  9500                           ; BSR set to: 0
  9501  0025C8  A2AC               	btfss	4012,1,c	;volatile
  9502  0025CA  D7FE               	goto	l942
  9503                           
  9504                           ; BSR set to: 0
  9505                           ;main.c: 1981: WriteUSART(0x10);
  9506  0025CC  0E10               	movlw	16
  9507  0025CE  ECF5  F007         	call	_WriteUSART
  9508  0025D2                     l945:
  9509  0025D2  A2AC               	btfss	4012,1,c	;volatile
  9510  0025D4  D7FE               	goto	l945
  9511                           
  9512                           ;main.c: 1983: WriteUSART(0x02);
  9513  0025D6  0E02               	movlw	2
  9514  0025D8  ECF5  F007         	call	_WriteUSART
  9515  0025DC                     l948:
  9516  0025DC  A2AC               	btfss	4012,1,c	;volatile
  9517  0025DE  D7FE               	goto	l948
  9518                           
  9519                           ;main.c: 1987: WriteUSART(254);
  9520  0025E0  0EFE               	movlw	254
  9521  0025E2  ECF5  F007         	call	_WriteUSART
  9522                           
  9523                           ;main.c: 1988: crc8(&crc, 254);
  9524  0025E6  0100               	movlb	0	; () banked
  9525  0025E8  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9526  0025EA  6F68               	movwf	(?_crc8+1)& (0+255),b
  9527  0025EC  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9528  0025EE  6F67               	movwf	?_crc8& (0+255),b
  9529  0025F0  0EFE               	movlw	254
  9530  0025F2  6F69               	movwf	(?_crc8+2)& (0+255),b
  9531  0025F4  ECE8  F008         	call	_crc8	;wreg free
  9532  0025F8                     l951:
  9533                           
  9534                           ; BSR set to: 0
  9535  0025F8  A2AC               	btfss	4012,1,c	;volatile
  9536  0025FA  D7FE               	goto	l951
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;main.c: 1992: WriteUSART(0);
  9540  0025FC  0E00               	movlw	0
  9541  0025FE  ECF5  F007         	call	_WriteUSART
  9542                           
  9543                           ;main.c: 1993: crc8(&crc, 0);
  9544  002602  D841               	call	PL98	;call to abstracted procedure
  9545  002604  ECE8  F008         	call	_crc8	;wreg free
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;main.c: 1996: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9549  002608  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9550  00260A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9551  00260C  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9552  00260E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9553  002610  0101               	movlb	1	; () banked
  9554  002612  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  9555  002614  EC42  F00B         	call	_sendEscapedUartData
  9556  002618                     l954:
  9557                           
  9558                           ; BSR set to: 0
  9559  002618  A2AC               	btfss	4012,1,c	;volatile
  9560  00261A  D7FE               	goto	l954
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;main.c: 2000: WriteUSART(0);
  9564  00261C  0E00               	movlw	0
  9565  00261E  ECF5  F007         	call	_WriteUSART
  9566                           
  9567                           ;main.c: 2001: crc8(&crc, 0);
  9568  002622  D831               	call	PL98	;call to abstracted procedure
  9569  002624  ECE8  F008         	call	_crc8	;wreg free
  9570  002628                     l957:
  9571                           
  9572                           ; BSR set to: 0
  9573  002628  A2AC               	btfss	4012,1,c	;volatile
  9574  00262A  D7FE               	goto	l957
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;main.c: 2003: WriteUSART(2);
  9578  00262C  0E02               	movlw	2
  9579  00262E  ECF5  F007         	call	_WriteUSART
  9580                           
  9581                           ;main.c: 2004: crc8(&crc, 2);
  9582  002632  0100               	movlb	0	; () banked
  9583  002634  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9584  002636  6F68               	movwf	(?_crc8+1)& (0+255),b
  9585  002638  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9586  00263A  6F67               	movwf	?_crc8& (0+255),b
  9587  00263C  0E02               	movlw	2
  9588  00263E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9589  002640  ECE8  F008         	call	_crc8	;wreg free
  9590  002644                     l960:
  9591                           
  9592                           ; BSR set to: 0
  9593  002644  A2AC               	btfss	4012,1,c	;volatile
  9594  002646  D7FE               	goto	l960
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;main.c: 2008: sendEscapedUartData(cmdReplyCode, &crc);
  9598  002648  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9599  00264A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9600  00264C  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9601  00264E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9602  002650  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9603  002652  EC42  F00B         	call	_sendEscapedUartData
  9604  002656                     l963:
  9605                           
  9606                           ; BSR set to: 0
  9607  002656  A2AC               	btfss	4012,1,c	;volatile
  9608  002658  D7FE               	goto	l963
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;main.c: 2012: sendEscapedUartData(cmdCode, &crc);
  9612  00265A  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9613  00265C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9614  00265E  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9615  002660  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9616  002662  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9617  002664  EC42  F00B         	call	_sendEscapedUartData
  9618                           
  9619                           ;main.c: 2015: sendEscapedUartData(crc, (0));
  9620  002668  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9621  00266A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9622  00266C  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9623  00266E  EC42  F00B         	call	_sendEscapedUartData
  9624  002672                     l966:
  9625                           
  9626                           ; BSR set to: 0
  9627  002672  A2AC               	btfss	4012,1,c	;volatile
  9628  002674  D7FE               	goto	l966
  9629                           
  9630                           ; BSR set to: 0
  9631                           ;main.c: 2019: WriteUSART(0x10);
  9632  002676  0E10               	movlw	16
  9633  002678  ECF5  F007         	call	_WriteUSART
  9634  00267C                     l969:
  9635  00267C  A2AC               	btfss	4012,1,c	;volatile
  9636  00267E  D7FE               	goto	l969
  9637                           
  9638                           ;main.c: 2021: WriteUSART(0x03);
  9639  002680  0E03               	movlw	3
  9640  002682  EFF5  F007         	goto	_WriteUSART
  9641  002686                     __end_of_sendVSCPDriverCommandReply:
  9642                           	opt stack 0
  9643  002686                     PL98:
  9644                           	opt stack 22
  9645  002686  0100               	movlb	0	; () banked
  9646  002688  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9647  00268A  6F68               	movwf	(?_crc8+1)& (0+255),b
  9648  00268C  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9649  00268E  6F67               	movwf	?_crc8& (0+255),b
  9650  002690  6B69               	clrf	(?_crc8+2)& (0+255),b
  9651  002692  0C00               	retlw	0
  9652  002694                     __end_ofPL98:
  9653                           	opt stack 0
  9654                           tblptru	equ	0xFF8
  9655                           tblptrh	equ	0xFF7
  9656                           tblptrl	equ	0xFF6
  9657                           tablat	equ	0xFF5
  9658                           prodh	equ	0xFF4
  9659                           prodl	equ	0xFF3
  9660                           intcon	equ	0xFF2
  9661                           indf0	equ	0xFEF
  9662                           postinc0	equ	0xFEE
  9663                           fsr0h	equ	0xFEA
  9664                           fsr0l	equ	0xFE9
  9665                           wreg	equ	0xFE8
  9666                           indf1	equ	0xFE7
  9667                           postinc1	equ	0xFE6
  9668                           postdec1	equ	0xFE5
  9669                           fsr1h	equ	0xFE2
  9670                           fsr1l	equ	0xFE1
  9671                           indf2	equ	0xFDF
  9672                           postinc2	equ	0xFDE
  9673                           postdec2	equ	0xFDD
  9674                           plusw2	equ	0xFDB
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function _sendVSCPModeCapabilities *****************
  9680 ;; Defined at:
  9681 ;;		line 2345 in file "main.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;		None
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;  crc             1   15[BANK0 ] unsigned char 
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      enum E15660
  9688 ;; Registers used:
  9689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : F/1
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9695 ;;      Params:         0       0       0       0       0       0       0
  9696 ;;      Locals:         0       1       0       0       0       0       0
  9697 ;;      Temps:          0       0       0       0       0       0       0
  9698 ;;      Totals:         0       1       0       0       0       0       0
  9699 ;;Total ram usage:        1 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    6
  9702 ;; This function calls:
  9703 ;;		_WriteUSART
  9704 ;;		_sendEscapedUartData
  9705 ;;		_crc8
  9706 ;; This function is called by:
  9707 ;;		_doModeVscp
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           	psect	text10
  9712  00211E                     __ptext10:
  9713                           	opt stack 0
  9714  00211E                     _sendVSCPModeCapabilities:
  9715                           	opt stack 22
  9716                           
  9717                           ; BSR set to: 1
  9718                           ;main.c: 2346: uint8_t crc = 0;
  9719                           
  9720                           ;incstack = 0
  9721                           ;incstack = 0
  9722  00211E  0100               	movlb	0	; () banked
  9723  002120  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9724  002122                     l1091:
  9725  002122  A2AC               	btfss	4012,1,c	;volatile
  9726  002124  D7FE               	goto	l1091
  9727                           
  9728                           ;main.c: 2350: WriteUSART(0x10);
  9729  002126  0E10               	movlw	16
  9730  002128  ECF5  F007         	call	_WriteUSART
  9731  00212C                     l1094:
  9732  00212C  A2AC               	btfss	4012,1,c	;volatile
  9733  00212E  D7FE               	goto	l1094
  9734                           
  9735                           ;main.c: 2352: WriteUSART(0x02);
  9736  002130  0E02               	movlw	2
  9737  002132  ECF5  F007         	call	_WriteUSART
  9738  002136                     l1097:
  9739  002136  A2AC               	btfss	4012,1,c	;volatile
  9740  002138  D7FE               	goto	l1097
  9741                           
  9742                           ;main.c: 2356: WriteUSART(9);
  9743  00213A  0E09               	movlw	9
  9744  00213C  ECF5  F007         	call	_WriteUSART
  9745                           
  9746                           ;main.c: 2357: crc8(&crc, 9);
  9747  002140  0100               	movlb	0	; () banked
  9748  002142  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9749  002144  6F68               	movwf	(?_crc8+1)& (0+255),b
  9750  002146  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9751  002148  6F67               	movwf	?_crc8& (0+255),b
  9752  00214A  0E09               	movlw	9
  9753  00214C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9754  00214E  ECE8  F008         	call	_crc8	;wreg free
  9755  002152                     l1100:
  9756  002152  A2AC               	btfss	4012,1,c	;volatile
  9757  002154  D7FE               	goto	l1100
  9758                           
  9759                           ;main.c: 2361: WriteUSART(0);
  9760  002156  0E00               	movlw	0
  9761  002158  ECF5  F007         	call	_WriteUSART
  9762                           
  9763                           ;main.c: 2362: crc8(&crc, 0);
  9764  00215C  0100               	movlb	0	; () banked
  9765  00215E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9766  002160  6F68               	movwf	(?_crc8+1)& (0+255),b
  9767  002162  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9768  002164  6F67               	movwf	?_crc8& (0+255),b
  9769  002166  0E00               	movlw	0
  9770  002168  6B69               	clrf	(?_crc8+2)& (0+255),b
  9771  00216A  ECE8  F008         	call	_crc8	;wreg free
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;main.c: 2365: sendEscapedUartData(sequencyno, &crc );
  9775  00216E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9776  002170  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9777  002172  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9778  002174  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9779  002176  5036               	movf	_sequencyno,w,c
  9780  002178  EC42  F00B         	call	_sendEscapedUartData
  9781                           
  9782                           ; BSR set to: 0
  9783                           ;main.c: 2366: sequencyno++;
  9784  00217C  2A36               	incf	_sequencyno,f,c
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;main.c: 2369: sendEscapedUartData( 0, &crc );
  9788  00217E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9789  002180  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9790  002182  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9791  002184  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9792  002186  0E00               	movlw	0
  9793  002188  EC42  F00B         	call	_sendEscapedUartData
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;main.c: 2370: sendEscapedUartData( 2, &crc );
  9797  00218C  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9798  00218E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9799  002190  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9800  002192  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9801  002194  0E02               	movlw	2
  9802  002196  EC42  F00B         	call	_sendEscapedUartData
  9803                           
  9804                           ; BSR set to: 0
  9805                           ;main.c: 2373: sendEscapedUartData( 1, &crc );
  9806  00219A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9807  00219C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9808  00219E  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9809  0021A0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9810  0021A2  0E01               	movlw	1
  9811  0021A4  EC42  F00B         	call	_sendEscapedUartData
  9812                           
  9813                           ; BSR set to: 0
  9814                           ;main.c: 2374: sendEscapedUartData( 0, &crc );
  9815  0021A8  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9816  0021AA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9817  0021AC  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9818  0021AE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9819  0021B0  0E00               	movlw	0
  9820  0021B2  EC42  F00B         	call	_sendEscapedUartData
  9821                           
  9822                           ; BSR set to: 0
  9823                           ;main.c: 2377: sendEscapedUartData(crc, (0));
  9824  0021B6  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9825  0021B8  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9826  0021BA  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9827  0021BC  EC42  F00B         	call	_sendEscapedUartData
  9828  0021C0                     l1103:
  9829  0021C0  A2AC               	btfss	4012,1,c	;volatile
  9830  0021C2  D7FE               	goto	l1103
  9831                           
  9832                           ;main.c: 2381: WriteUSART(0x10);
  9833  0021C4  0E10               	movlw	16
  9834  0021C6  ECF5  F007         	call	_WriteUSART
  9835  0021CA                     l1106:
  9836  0021CA  A2AC               	btfss	4012,1,c	;volatile
  9837  0021CC  D7FE               	goto	l1106
  9838                           
  9839                           ;main.c: 2383: WriteUSART(0x03);
  9840  0021CE  0E03               	movlw	3
  9841  0021D0  EFF5  F007         	goto	_WriteUSART
  9842  0021D4                     __end_of_sendVSCPModeCapabilities:
  9843                           	opt stack 0
  9844                           tblptru	equ	0xFF8
  9845                           tblptrh	equ	0xFF7
  9846                           tblptrl	equ	0xFF6
  9847                           tablat	equ	0xFF5
  9848                           prodh	equ	0xFF4
  9849                           prodl	equ	0xFF3
  9850                           intcon	equ	0xFF2
  9851                           indf0	equ	0xFEF
  9852                           postinc0	equ	0xFEE
  9853                           fsr0h	equ	0xFEA
  9854                           fsr0l	equ	0xFE9
  9855                           wreg	equ	0xFE8
  9856                           indf1	equ	0xFE7
  9857                           postinc1	equ	0xFE6
  9858                           postdec1	equ	0xFE5
  9859                           fsr1h	equ	0xFE2
  9860                           fsr1l	equ	0xFE1
  9861                           indf2	equ	0xFDF
  9862                           postinc2	equ	0xFDE
  9863                           postdec2	equ	0xFDD
  9864                           plusw2	equ	0xFDB
  9865                           fsr2h	equ	0xFDA
  9866                           fsr2l	equ	0xFD9
  9867                           status	equ	0xFD8
  9868                           
  9869 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9870 ;; Defined at:
  9871 ;;		line 2479 in file "main.c"
  9872 ;; Parameters:    Size  Location     Type
  9873 ;;		None
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;		None
  9876 ;; Return value:  Size  Location     Type
  9877 ;;                  1    wreg      enum E15660
  9878 ;; Registers used:
  9879 ;;		wreg
  9880 ;; Tracked objects:
  9881 ;;		On entry : F/1
  9882 ;;		On exit  : F/1
  9883 ;;		Unchanged: F/0
  9884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9885 ;;      Params:         0       0       0       0       0       0       0
  9886 ;;      Locals:         0       0       0       0       0       0       0
  9887 ;;      Temps:          0       0       0       0       0       0       0
  9888 ;;      Totals:         0       0       0       0       0       0       0
  9889 ;;Total ram usage:        0 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:    3
  9892 ;; This function calls:
  9893 ;;		Nothing
  9894 ;; This function is called by:
  9895 ;;		_doModeVscp
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text11
  9900  000FA2                     __ptext11:
  9901                           	opt stack 0
  9902  000FA2                     _receiveVSCPModeMultiCanalMsg:
  9903                           	opt stack 25
  9904                           
  9905                           ; BSR set to: 1
  9906                           
  9907                           ; BSR set to: 1
  9908                           ;main.c: 2481: return 0;
  9909                           
  9910                           ;incstack = 0
  9911                           ;incstack = 0
  9912  000FA2  0C00               	retlw	0
  9913  000FA4                     __end_of_receiveVSCPModeMultiCanalMsg:
  9914                           	opt stack 0
  9915                           tblptru	equ	0xFF8
  9916                           tblptrh	equ	0xFF7
  9917                           tblptrl	equ	0xFF6
  9918                           tablat	equ	0xFF5
  9919                           prodh	equ	0xFF4
  9920                           prodl	equ	0xFF3
  9921                           intcon	equ	0xFF2
  9922                           indf0	equ	0xFEF
  9923                           postinc0	equ	0xFEE
  9924                           fsr0h	equ	0xFEA
  9925                           fsr0l	equ	0xFE9
  9926                           wreg	equ	0xFE8
  9927                           indf1	equ	0xFE7
  9928                           postinc1	equ	0xFE6
  9929                           postdec1	equ	0xFE5
  9930                           fsr1h	equ	0xFE2
  9931                           fsr1l	equ	0xFE1
  9932                           indf2	equ	0xFDF
  9933                           postinc2	equ	0xFDE
  9934                           postdec2	equ	0xFDD
  9935                           plusw2	equ	0xFDB
  9936                           fsr2h	equ	0xFDA
  9937                           fsr2l	equ	0xFD9
  9938                           status	equ	0xFD8
  9939                           
  9940 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9941 ;; Defined at:
  9942 ;;		line 2455 in file "main.c"
  9943 ;; Parameters:    Size  Location     Type
  9944 ;;		None
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;  data            8   76[BANK0 ] unsigned char [8]
  9947 ;;  id              4   84[BANK0 ] unsigned long 
  9948 ;;  dlc             1   88[BANK0 ] unsigned char 
  9949 ;; Return value:  Size  Location     Type
  9950 ;;                  1    wreg      enum E15660
  9951 ;; Registers used:
  9952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9953 ;; Tracked objects:
  9954 ;;		On entry : F/1
  9955 ;;		On exit  : E/0
  9956 ;;		Unchanged: 0/0
  9957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9958 ;;      Params:         0       0       0       0       0       0       0
  9959 ;;      Locals:         0      13       0       0       0       0       0
  9960 ;;      Temps:          0      20       0       0       0       0       0
  9961 ;;      Totals:         0      33       0       0       0       0       0
  9962 ;;Total ram usage:       33 bytes
  9963 ;; Hardware stack levels used:    1
  9964 ;; Hardware stack levels required when called:    6
  9965 ;; This function calls:
  9966 ;;		_memcpy
  9967 ;;		_sendCANFrame
  9968 ;; This function is called by:
  9969 ;;		_doModeVscp
  9970 ;; This function uses a non-reentrant model
  9971 ;;
  9972                           
  9973                           	psect	text12
  9974  00277A                     __ptext12:
  9975                           	opt stack 0
  9976  00277A                     _receiveVSCPModeCanalMsg:
  9977                           	opt stack 22
  9978                           
  9979                           ; BSR set to: 1
  9980                           ;main.c: 2456: uint32_t id;
  9981                           ;main.c: 2457: uint8_t dlc;
  9982                           ;main.c: 2458: uint8_t data[8];
  9983                           ;main.c: 2460: id = ((uint32_t) cmdbuf[5] << 26) |
  9984                           ;main.c: 2461: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9985                           ;main.c: 2462: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9986                           ;main.c: 2463: cmdbuf[5 + 3];
  9987                           
  9988                           ; BSR set to: 1
  9989                           ;incstack = 0
  9990                           ;incstack = 0
  9991  00277A  C134  F098         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9992  00277E  0100               	movlb	0	; () banked
  9993  002780  6B99               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9994  002782  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9995  002784  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9996  002786  C09A  F09B         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9997  00278A  C099  F09A         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9998  00278E  C098  F099         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9999  002792  6B98               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
 10000  002794  C133  F09C         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
 10001  002798  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10002  00279A  6B9E               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
 10003  00279C  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
 10004  00279E  C09D  F09F         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
 10005  0027A2  C09C  F09E         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
 10006  0027A6  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10007  0027A8  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
 10008  0027AA  C132  F0A0         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
 10009  0027AE  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
 10010  0027B0  6BA2               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
 10011  0027B2  6BA3               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
 10012  0027B4  0E1A               	movlw	26
 10013  0027B6                     u22635:
 10014  0027B6  90D8               	bcf	status,0,c
 10015  0027B8  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
 10016  0027BA  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
 10017  0027BC  37A2               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
 10018  0027BE  37A3               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
 10019  0027C0  2EE8               	decfsz	wreg,f,c
 10020  0027C2  D7F9               	goto	u22635
 10021  0027C4  519C               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
 10022  0027C6  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
 10023  0027C8  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
 10024  0027CA  519D               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
 10025  0027CC  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
 10026  0027CE  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
 10027  0027D0  519E               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
 10028  0027D2  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
 10029  0027D4  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
 10030  0027D6  519F               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
 10031  0027D8  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
 10032  0027DA  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
 10033  0027DC  5198               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
 10034  0027DE  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
 10035  0027E0  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
 10036  0027E2  5199               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
 10037  0027E4  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
 10038  0027E6  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
 10039  0027E8  519A               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
 10040  0027EA  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
 10041  0027EC  6FAA               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
 10042  0027EE  519B               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
 10043  0027F0  11A7               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
 10044  0027F2  6FAB               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
 10045  0027F4  0101               	movlb	1	; () banked
 10046  0027F6  5135               	movf	(_cmdbuf+8)& (0+255),w,b
 10047  0027F8  0100               	movlb	0	; () banked
 10048  0027FA  11A8               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
 10049  0027FC  6FB4               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
 10050  0027FE  51A9               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
 10051  002800  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
 10052  002802  51AA               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
 10053  002804  6FB6               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
 10054  002806  51AB               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
 10055  002808  6FB7               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
 10056                           
 10057                           ;main.c: 2464: dlc = ( cmdbuf[4] - 4 ) & 0x07;
 10058  00280A  0101               	movlb	1	; () banked
 10059  00280C  5131               	movf	(_cmdbuf+4)& (0+255),w,b
 10060  00280E  0FFC               	addlw	252
 10061  002810  0B07               	andlw	7
 10062  002812  0100               	movlb	0	; () banked
 10063  002814  6FB8               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;main.c: 2465: if ( dlc > 8 ) {
 10067  002816  0E08               	movlw	8
 10068  002818  65B8               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10069  00281A  D002               	goto	l17032
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;main.c: 2466: return 0;
 10073  00281C  0E00               	movlw	0
 10074  00281E  D021               	goto	l1144
 10075  002820                     l17032:
 10076                           
 10077                           ; BSR set to: 0
 10078                           ;main.c: 2467: }
 10079                           ;main.c: 2468: memcpy( data, cmdbuf + 5 + 4, dlc );
 10080  002820  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10081  002822  6F61               	movwf	(?_memcpy+1)& (0+255),b
 10082  002824  0EAC               	movlw	low receiveVSCPModeCanalMsg@data
 10083  002826  6F60               	movwf	?_memcpy& (0+255),b
 10084  002828  0E36               	movlw	low (_cmdbuf+9)
 10085  00282A  6F98               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
 10086  00282C  0E01               	movlw	high (_cmdbuf+9)
 10087  00282E  6F99               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10088  002830  C098  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
 10089  002834  C099  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
 10090  002838  C0B8  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
 10091  00283C  6B65               	clrf	(?_memcpy+5)& (0+255),b
 10092  00283E  ECBE  F009         	call	_memcpy	;wreg free
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;main.c: 2470: return sendCANFrame(id, dlc, data);
 10096  002842  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
 10097  002846  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
 10098  00284A  C0B6  F093         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
 10099  00284E  C0B7  F094         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
 10100  002852  C0B8  F095         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
 10101  002856  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10102  002858  6F97               	movwf	(?_sendCANFrame+6)& (0+255),b
 10103  00285A  0EAC               	movlw	low receiveVSCPModeCanalMsg@data
 10104  00285C  6F96               	movwf	(?_sendCANFrame+5)& (0+255),b
 10105  00285E  EC04  F009         	call	_sendCANFrame	;wreg free
 10106  002862                     l1144:
 10107  002862  0012               	return	
 10108  002864                     __end_of_receiveVSCPModeCanalMsg:
 10109                           	opt stack 0
 10110                           tblptru	equ	0xFF8
 10111                           tblptrh	equ	0xFF7
 10112                           tblptrl	equ	0xFF6
 10113                           tablat	equ	0xFF5
 10114                           prodh	equ	0xFF4
 10115                           prodl	equ	0xFF3
 10116                           intcon	equ	0xFF2
 10117                           indf0	equ	0xFEF
 10118                           postinc0	equ	0xFEE
 10119                           fsr0h	equ	0xFEA
 10120                           fsr0l	equ	0xFE9
 10121                           wreg	equ	0xFE8
 10122                           indf1	equ	0xFE7
 10123                           postinc1	equ	0xFE6
 10124                           postdec1	equ	0xFE5
 10125                           fsr1h	equ	0xFE2
 10126                           fsr1l	equ	0xFE1
 10127                           indf2	equ	0xFDF
 10128                           postinc2	equ	0xFDE
 10129                           postdec2	equ	0xFDD
 10130                           plusw2	equ	0xFDB
 10131                           fsr2h	equ	0xFDA
 10132                           fsr2l	equ	0xFD9
 10133                           status	equ	0xFD8
 10134                           
 10135 ;; *************** function _memcpy *****************
 10136 ;; Defined at:
 10137 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
 10138 ;; Parameters:    Size  Location     Type
 10139 ;;  d1              2    0[BANK0 ] PTR void 
 10140 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10141 ;;  s1              2    2[BANK0 ] PTR const void 
 10142 ;;		 -> vscpData(8), cmdbuf(80), 
 10143 ;;  n               2    4[BANK0 ] unsigned int 
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;  s               2    8[BANK0 ] PTR const unsigned char 
 10146 ;;		 -> vscpData(8), cmdbuf(80), 
 10147 ;;  d               2    6[BANK0 ] PTR unsigned char 
 10148 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10149 ;; Return value:  Size  Location     Type
 10150 ;;                  2    0[BANK0 ] PTR void 
 10151 ;; Registers used:
 10152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10153 ;; Tracked objects:
 10154 ;;		On entry : F/0
 10155 ;;		On exit  : F/0
 10156 ;;		Unchanged: 0/0
 10157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10158 ;;      Params:         0       6       0       0       0       0       0
 10159 ;;      Locals:         0       4       0       0       0       0       0
 10160 ;;      Temps:          0       0       0       0       0       0       0
 10161 ;;      Totals:         0      10       0       0       0       0       0
 10162 ;;Total ram usage:       10 bytes
 10163 ;; Hardware stack levels used:    1
 10164 ;; Hardware stack levels required when called:    3
 10165 ;; This function calls:
 10166 ;;		Nothing
 10167 ;; This function is called by:
 10168 ;;		_doModeSLCAN
 10169 ;;		_receiveVSCPModeCanalMsg
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           	psect	text13
 10174  00137C                     __ptext13:
 10175                           	opt stack 0
 10176  00137C                     _memcpy:
 10177                           	opt stack 25
 10178                           
 10179                           ; BSR set to: 0
 10180                           
 10181                           ;incstack = 0
 10182                           ;incstack = 0
 10183  00137C  C062  F068         	movff	memcpy@s1,memcpy@s
 10184  001380  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
 10185  001384  C060  F066         	movff	memcpy@d1,memcpy@d
 10186  001388  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
 10187  00138C  D00E               	goto	l17242
 10188  00138E                     l17236:
 10189                           
 10190                           ; BSR set to: 0
 10191  00138E  C068  FFD9         	movff	memcpy@s,fsr2l
 10192  001392  C069  FFDA         	movff	memcpy@s+1,fsr2h
 10193  001396  C066  FFE1         	movff	memcpy@d,fsr1l
 10194  00139A  C067  FFE2         	movff	memcpy@d+1,fsr1h
 10195  00139E  CFDF FFE7          	movff	indf2,indf1
 10196                           
 10197                           ; BSR set to: 0
 10198  0013A2  4B68               	infsnz	memcpy@s& (0+255),f,b
 10199  0013A4  2B69               	incf	(memcpy@s+1)& (0+255),f,b
 10200                           
 10201                           ; BSR set to: 0
 10202  0013A6  4B66               	infsnz	memcpy@d& (0+255),f,b
 10203  0013A8  2B67               	incf	(memcpy@d+1)& (0+255),f,b
 10204  0013AA                     l17242:
 10205                           
 10206                           ; BSR set to: 0
 10207  0013AA  0764               	decf	memcpy@n& (0+255),f,b
 10208  0013AC  A0D8               	btfss	status,0,c
 10209  0013AE  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10210  0013B0  0100               	movlb	0	; () banked
 10211  0013B2  2964               	incf	memcpy@n& (0+255),w,b
 10212  0013B4  B4D8               	btfsc	status,2,c
 10213  0013B6  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10214  0013B8  B4D8               	btfsc	status,2,c
 10215                           
 10216                           ; BSR set to: 0
 10217  0013BA  0012               	return	
 10218  0013BC  D7E8               	goto	l17236
 10219  0013BE                     __end_of_memcpy:
 10220                           	opt stack 0
 10221                           tblptru	equ	0xFF8
 10222                           tblptrh	equ	0xFF7
 10223                           tblptrl	equ	0xFF6
 10224                           tablat	equ	0xFF5
 10225                           prodh	equ	0xFF4
 10226                           prodl	equ	0xFF3
 10227                           intcon	equ	0xFF2
 10228                           indf0	equ	0xFEF
 10229                           postinc0	equ	0xFEE
 10230                           fsr0h	equ	0xFEA
 10231                           fsr0l	equ	0xFE9
 10232                           wreg	equ	0xFE8
 10233                           indf1	equ	0xFE7
 10234                           postinc1	equ	0xFE6
 10235                           postdec1	equ	0xFE5
 10236                           fsr1h	equ	0xFE2
 10237                           fsr1l	equ	0xFE1
 10238                           indf2	equ	0xFDF
 10239                           postinc2	equ	0xFDE
 10240                           postdec2	equ	0xFDD
 10241                           plusw2	equ	0xFDB
 10242                           fsr2h	equ	0xFDA
 10243                           fsr2l	equ	0xFD9
 10244                           status	equ	0xFD8
 10245                           
 10246 ;; *************** function _sendVSCPDriverAck *****************
 10247 ;; Defined at:
 10248 ;;		line 1887 in file "main.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;		None
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;  crc             1   15[BANK0 ] unsigned char 
 10253 ;; Return value:  Size  Location     Type
 10254 ;;		None               void
 10255 ;; Registers used:
 10256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10257 ;; Tracked objects:
 10258 ;;		On entry : E/1
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10262 ;;      Params:         0       0       0       0       0       0       0
 10263 ;;      Locals:         0       1       0       0       0       0       0
 10264 ;;      Temps:          0       0       0       0       0       0       0
 10265 ;;      Totals:         0       1       0       0       0       0       0
 10266 ;;Total ram usage:        1 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; Hardware stack levels required when called:    6
 10269 ;; This function calls:
 10270 ;;		_WriteUSART
 10271 ;;		_sendEscapedUartData
 10272 ;;		_crc8
 10273 ;; This function is called by:
 10274 ;;		_doModeVscp
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text14
 10279  001E78                     __ptext14:
 10280                           	opt stack 0
 10281  001E78                     _sendVSCPDriverAck:
 10282                           	opt stack 22
 10283                           
 10284                           ;main.c: 1888: uint8_t crc = 0;
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;incstack = 0
 10288                           ;incstack = 0
 10289  001E78  0100               	movlb	0	; () banked
 10290  001E7A  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
 10291  001E7C                     l888:
 10292  001E7C  A2AC               	btfss	4012,1,c	;volatile
 10293  001E7E  D7FE               	goto	l888
 10294                           
 10295                           ;main.c: 1892: WriteUSART(0x10);
 10296  001E80  0E10               	movlw	16
 10297  001E82  ECF5  F007         	call	_WriteUSART
 10298  001E86                     l891:
 10299  001E86  A2AC               	btfss	4012,1,c	;volatile
 10300  001E88  D7FE               	goto	l891
 10301                           
 10302                           ;main.c: 1894: WriteUSART(0x02);
 10303  001E8A  0E02               	movlw	2
 10304  001E8C  ECF5  F007         	call	_WriteUSART
 10305  001E90                     l894:
 10306  001E90  A2AC               	btfss	4012,1,c	;volatile
 10307  001E92  D7FE               	goto	l894
 10308                           
 10309                           ;main.c: 1898: WriteUSART(251);
 10310  001E94  0EFB               	movlw	251
 10311  001E96  ECF5  F007         	call	_WriteUSART
 10312                           
 10313                           ;main.c: 1899: crc8(&crc, 251);
 10314  001E9A  0100               	movlb	0	; () banked
 10315  001E9C  0E00               	movlw	high sendVSCPDriverAck@crc
 10316  001E9E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10317  001EA0  0E6F               	movlw	low sendVSCPDriverAck@crc
 10318  001EA2  6F67               	movwf	?_crc8& (0+255),b
 10319  001EA4  0EFB               	movlw	251
 10320  001EA6  6F69               	movwf	(?_crc8+2)& (0+255),b
 10321  001EA8  ECE8  F008         	call	_crc8	;wreg free
 10322  001EAC                     l897:
 10323  001EAC  A2AC               	btfss	4012,1,c	;volatile
 10324  001EAE  D7FE               	goto	l897
 10325                           
 10326                           ;main.c: 1903: WriteUSART(0);
 10327  001EB0  0E00               	movlw	0
 10328  001EB2  ECF5  F007         	call	_WriteUSART
 10329                           
 10330                           ;main.c: 1904: crc8(&crc, 0);
 10331  001EB6  D829               	call	PL46	;call to abstracted procedure
 10332  001EB8  ECE8  F008         	call	_crc8	;wreg free
 10333                           
 10334                           ; BSR set to: 0
 10335                           ;main.c: 1907: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10336  001EBC  0E00               	movlw	high sendVSCPDriverAck@crc
 10337  001EBE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10338  001EC0  0E6F               	movlw	low sendVSCPDriverAck@crc
 10339  001EC2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10340  001EC4  0101               	movlb	1	; () banked
 10341  001EC6  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 10342  001EC8  EC42  F00B         	call	_sendEscapedUartData
 10343  001ECC                     l900:
 10344  001ECC  A2AC               	btfss	4012,1,c	;volatile
 10345  001ECE  D7FE               	goto	l900
 10346                           
 10347                           ;main.c: 1911: WriteUSART(0);
 10348  001ED0  0E00               	movlw	0
 10349  001ED2  ECF5  F007         	call	_WriteUSART
 10350                           
 10351                           ;main.c: 1912: crc8(&crc, 0);
 10352  001ED6  D819               	call	PL46	;call to abstracted procedure
 10353  001ED8  ECE8  F008         	call	_crc8	;wreg free
 10354  001EDC                     l903:
 10355  001EDC  A2AC               	btfss	4012,1,c	;volatile
 10356  001EDE  D7FE               	goto	l903
 10357                           
 10358                           ;main.c: 1914: WriteUSART(0);
 10359  001EE0  0E00               	movlw	0
 10360  001EE2  ECF5  F007         	call	_WriteUSART
 10361                           
 10362                           ;main.c: 1915: crc8(&crc, 0);
 10363  001EE6  D811               	call	PL46	;call to abstracted procedure
 10364  001EE8  ECE8  F008         	call	_crc8	;wreg free
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;main.c: 1918: sendEscapedUartData(crc, (0));
 10368  001EEC  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10369  001EEE  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10370  001EF0  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10371  001EF2  EC42  F00B         	call	_sendEscapedUartData
 10372  001EF6                     l906:
 10373  001EF6  A2AC               	btfss	4012,1,c	;volatile
 10374  001EF8  D7FE               	goto	l906
 10375                           
 10376                           ;main.c: 1922: WriteUSART(0x10);
 10377  001EFA  0E10               	movlw	16
 10378  001EFC  ECF5  F007         	call	_WriteUSART
 10379  001F00                     l909:
 10380  001F00  A2AC               	btfss	4012,1,c	;volatile
 10381  001F02  D7FE               	goto	l909
 10382                           
 10383                           ;main.c: 1924: WriteUSART(0x03);
 10384  001F04  0E03               	movlw	3
 10385  001F06  EFF5  F007         	goto	_WriteUSART
 10386  001F0A                     __end_of_sendVSCPDriverAck:
 10387                           	opt stack 0
 10388  001F0A                     PL46:
 10389                           	opt stack 22
 10390  001F0A  0100               	movlb	0	; () banked
 10391  001F0C  0E00               	movlw	high sendVSCPDriverAck@crc
 10392  001F0E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10393  001F10  0E6F               	movlw	low sendVSCPDriverAck@crc
 10394  001F12  6F67               	movwf	?_crc8& (0+255),b
 10395  001F14  6B69               	clrf	(?_crc8+2)& (0+255),b
 10396  001F16  0C00               	retlw	0
 10397  001F18                     __end_ofPL46:
 10398                           	opt stack 0
 10399                           tblptru	equ	0xFF8
 10400                           tblptrh	equ	0xFF7
 10401                           tblptrl	equ	0xFF6
 10402                           tablat	equ	0xFF5
 10403                           prodh	equ	0xFF4
 10404                           prodl	equ	0xFF3
 10405                           intcon	equ	0xFF2
 10406                           indf0	equ	0xFEF
 10407                           postinc0	equ	0xFEE
 10408                           fsr0h	equ	0xFEA
 10409                           fsr0l	equ	0xFE9
 10410                           wreg	equ	0xFE8
 10411                           indf1	equ	0xFE7
 10412                           postinc1	equ	0xFE6
 10413                           postdec1	equ	0xFE5
 10414                           fsr1h	equ	0xFE2
 10415                           fsr1l	equ	0xFE1
 10416                           indf2	equ	0xFDF
 10417                           postinc2	equ	0xFDE
 10418                           postdec2	equ	0xFDD
 10419                           plusw2	equ	0xFDB
 10420                           fsr2h	equ	0xFDA
 10421                           fsr2l	equ	0xFD9
 10422                           status	equ	0xFD8
 10423                           
 10424 ;; *************** function _sendVSCPDriverNack *****************
 10425 ;; Defined at:
 10426 ;;		line 1931 in file "main.c"
 10427 ;; Parameters:    Size  Location     Type
 10428 ;;		None
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;  crc             1   15[BANK0 ] unsigned char 
 10431 ;; Return value:  Size  Location     Type
 10432 ;;		None               void
 10433 ;; Registers used:
 10434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10435 ;; Tracked objects:
 10436 ;;		On entry : E/0
 10437 ;;		On exit  : 0/0
 10438 ;;		Unchanged: 0/0
 10439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10440 ;;      Params:         0       0       0       0       0       0       0
 10441 ;;      Locals:         0       1       0       0       0       0       0
 10442 ;;      Temps:          0       0       0       0       0       0       0
 10443 ;;      Totals:         0       1       0       0       0       0       0
 10444 ;;Total ram usage:        1 bytes
 10445 ;; Hardware stack levels used:    1
 10446 ;; Hardware stack levels required when called:    6
 10447 ;; This function calls:
 10448 ;;		_WriteUSART
 10449 ;;		_sendEscapedUartData
 10450 ;;		_crc8
 10451 ;; This function is called by:
 10452 ;;		_doModeVscp
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           	psect	text15
 10457  001DD8                     __ptext15:
 10458                           	opt stack 0
 10459  001DD8                     _sendVSCPDriverNack:
 10460                           	opt stack 22
 10461                           
 10462                           ;main.c: 1932: uint8_t crc = 0;
 10463                           
 10464                           ;incstack = 0
 10465                           ;incstack = 0
 10466  001DD8  0100               	movlb	0	; () banked
 10467  001DDA  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10468  001DDC                     l915:
 10469  001DDC  A2AC               	btfss	4012,1,c	;volatile
 10470  001DDE  D7FE               	goto	l915
 10471                           
 10472                           ;main.c: 1936: WriteUSART(0x10);
 10473  001DE0  0E10               	movlw	16
 10474  001DE2  ECF5  F007         	call	_WriteUSART
 10475  001DE6                     l918:
 10476  001DE6  A2AC               	btfss	4012,1,c	;volatile
 10477  001DE8  D7FE               	goto	l918
 10478                           
 10479                           ;main.c: 1938: WriteUSART(0x02);
 10480  001DEA  0E02               	movlw	2
 10481  001DEC  ECF5  F007         	call	_WriteUSART
 10482  001DF0                     l921:
 10483  001DF0  A2AC               	btfss	4012,1,c	;volatile
 10484  001DF2  D7FE               	goto	l921
 10485                           
 10486                           ;main.c: 1942: WriteUSART(252);
 10487  001DF4  0EFC               	movlw	252
 10488  001DF6  ECF5  F007         	call	_WriteUSART
 10489                           
 10490                           ;main.c: 1943: crc8(&crc, 252);
 10491  001DFA  0100               	movlb	0	; () banked
 10492  001DFC  0E00               	movlw	high sendVSCPDriverNack@crc
 10493  001DFE  6F68               	movwf	(?_crc8+1)& (0+255),b
 10494  001E00  0E6F               	movlw	low sendVSCPDriverNack@crc
 10495  001E02  6F67               	movwf	?_crc8& (0+255),b
 10496  001E04  0EFC               	movlw	252
 10497  001E06  6F69               	movwf	(?_crc8+2)& (0+255),b
 10498  001E08  ECE8  F008         	call	_crc8	;wreg free
 10499  001E0C                     l924:
 10500  001E0C  A2AC               	btfss	4012,1,c	;volatile
 10501  001E0E  D7FE               	goto	l924
 10502                           
 10503                           ;main.c: 1947: WriteUSART(0);
 10504  001E10  0E00               	movlw	0
 10505  001E12  ECF5  F007         	call	_WriteUSART
 10506                           
 10507                           ;main.c: 1948: crc8(&crc, 0);
 10508  001E16  D829               	call	PL50	;call to abstracted procedure
 10509  001E18  ECE8  F008         	call	_crc8	;wreg free
 10510                           
 10511                           ; BSR set to: 0
 10512                           ;main.c: 1951: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10513  001E1C  0E00               	movlw	high sendVSCPDriverNack@crc
 10514  001E1E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10515  001E20  0E6F               	movlw	low sendVSCPDriverNack@crc
 10516  001E22  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10517  001E24  0101               	movlb	1	; () banked
 10518  001E26  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 10519  001E28  EC42  F00B         	call	_sendEscapedUartData
 10520  001E2C                     l927:
 10521  001E2C  A2AC               	btfss	4012,1,c	;volatile
 10522  001E2E  D7FE               	goto	l927
 10523                           
 10524                           ;main.c: 1955: WriteUSART(0);
 10525  001E30  0E00               	movlw	0
 10526  001E32  ECF5  F007         	call	_WriteUSART
 10527                           
 10528                           ;main.c: 1956: crc8(&crc, 0);
 10529  001E36  D819               	call	PL50	;call to abstracted procedure
 10530  001E38  ECE8  F008         	call	_crc8	;wreg free
 10531  001E3C                     l930:
 10532  001E3C  A2AC               	btfss	4012,1,c	;volatile
 10533  001E3E  D7FE               	goto	l930
 10534                           
 10535                           ;main.c: 1958: WriteUSART(0);
 10536  001E40  0E00               	movlw	0
 10537  001E42  ECF5  F007         	call	_WriteUSART
 10538                           
 10539                           ;main.c: 1959: crc8(&crc, 0);
 10540  001E46  D811               	call	PL50	;call to abstracted procedure
 10541  001E48  ECE8  F008         	call	_crc8	;wreg free
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;main.c: 1962: sendEscapedUartData(crc, (0));
 10545  001E4C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10546  001E4E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10547  001E50  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10548  001E52  EC42  F00B         	call	_sendEscapedUartData
 10549  001E56                     l933:
 10550  001E56  A2AC               	btfss	4012,1,c	;volatile
 10551  001E58  D7FE               	goto	l933
 10552                           
 10553                           ;main.c: 1966: WriteUSART(0x10);
 10554  001E5A  0E10               	movlw	16
 10555  001E5C  ECF5  F007         	call	_WriteUSART
 10556  001E60                     l936:
 10557  001E60  A2AC               	btfss	4012,1,c	;volatile
 10558  001E62  D7FE               	goto	l936
 10559                           
 10560                           ;main.c: 1968: WriteUSART(0x03);
 10561  001E64  0E03               	movlw	3
 10562  001E66  EFF5  F007         	goto	_WriteUSART
 10563  001E6A                     __end_of_sendVSCPDriverNack:
 10564                           	opt stack 0
 10565  001E6A                     PL50:
 10566                           	opt stack 22
 10567  001E6A  0100               	movlb	0	; () banked
 10568  001E6C  0E00               	movlw	high sendVSCPDriverNack@crc
 10569  001E6E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10570  001E70  0E6F               	movlw	low sendVSCPDriverNack@crc
 10571  001E72  6F67               	movwf	?_crc8& (0+255),b
 10572  001E74  6B69               	clrf	(?_crc8+2)& (0+255),b
 10573  001E76  0C00               	retlw	0
 10574  001E78                     __end_ofPL50:
 10575                           	opt stack 0
 10576                           tblptru	equ	0xFF8
 10577                           tblptrh	equ	0xFF7
 10578                           tblptrl	equ	0xFF6
 10579                           tablat	equ	0xFF5
 10580                           prodh	equ	0xFF4
 10581                           prodl	equ	0xFF3
 10582                           intcon	equ	0xFF2
 10583                           indf0	equ	0xFEF
 10584                           postinc0	equ	0xFEE
 10585                           fsr0h	equ	0xFEA
 10586                           fsr0l	equ	0xFE9
 10587                           wreg	equ	0xFE8
 10588                           indf1	equ	0xFE7
 10589                           postinc1	equ	0xFE6
 10590                           postdec1	equ	0xFE5
 10591                           fsr1h	equ	0xFE2
 10592                           fsr1l	equ	0xFE1
 10593                           indf2	equ	0xFDF
 10594                           postinc2	equ	0xFDE
 10595                           postdec2	equ	0xFDD
 10596                           plusw2	equ	0xFDB
 10597                           fsr2h	equ	0xFDA
 10598                           fsr2l	equ	0xFD9
 10599                           status	equ	0xFD8
 10600                           
 10601 ;; *************** function _calcCRC *****************
 10602 ;; Defined at:
 10603 ;;		line 2695 in file "main.c"
 10604 ;; Parameters:    Size  Location     Type
 10605 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10606 ;;		 -> cmdbuf(80), 
 10607 ;;  len             1   14[BANK0 ] unsigned char 
 10608 ;; Auto vars:     Size  Location     Type
 10609 ;;  crc             1   16[BANK0 ] unsigned char 
 10610 ;;  j               1   15[BANK0 ] unsigned char 
 10611 ;; Return value:  Size  Location     Type
 10612 ;;                  1    wreg      unsigned char 
 10613 ;; Registers used:
 10614 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10615 ;; Tracked objects:
 10616 ;;		On entry : F/0
 10617 ;;		On exit  : F/0
 10618 ;;		Unchanged: 0/0
 10619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10620 ;;      Params:         0       3       0       0       0       0       0
 10621 ;;      Locals:         0       2       0       0       0       0       0
 10622 ;;      Temps:          0       0       0       0       0       0       0
 10623 ;;      Totals:         0       5       0       0       0       0       0
 10624 ;;Total ram usage:        5 bytes
 10625 ;; Hardware stack levels used:    1
 10626 ;; Hardware stack levels required when called:    5
 10627 ;; This function calls:
 10628 ;;		_crc8
 10629 ;; This function is called by:
 10630 ;;		_doModeVscp
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           	psect	text16
 10635  001104                     __ptext16:
 10636                           	opt stack 0
 10637  001104                     _calcCRC:
 10638                           	opt stack 23
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;main.c: 2696: uint8_t j;
 10642                           ;main.c: 2697: uint8_t crc = 0;
 10643                           
 10644                           ;incstack = 0
 10645                           ;incstack = 0
 10646  001104  6B70               	clrf	calcCRC@crc& (0+255),b
 10647                           
 10648                           ;main.c: 2699: for (j = 0; j < len; j++) {
 10649  001106  6B6F               	clrf	calcCRC@j& (0+255),b
 10650  001108  D00F               	goto	l16958
 10651  00110A                     l16954:
 10652                           
 10653                           ; BSR set to: 0
 10654                           ;main.c: 2700: crc8(&crc, p[j]);
 10655  00110A  0E00               	movlw	high calcCRC@crc
 10656  00110C  6F68               	movwf	(?_crc8+1)& (0+255),b
 10657  00110E  0E70               	movlw	low calcCRC@crc
 10658  001110  6F67               	movwf	?_crc8& (0+255),b
 10659  001112  516F               	movf	calcCRC@j& (0+255),w,b
 10660  001114  256C               	addwf	calcCRC@p& (0+255),w,b
 10661  001116  6ED9               	movwf	fsr2l,c
 10662  001118  0E00               	movlw	0
 10663  00111A  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10664  00111C  6EDA               	movwf	fsr2h,c
 10665  00111E  50DF               	movf	indf2,w,c
 10666  001120  6F69               	movwf	(?_crc8+2)& (0+255),b
 10667  001122  ECE8  F008         	call	_crc8	;wreg free
 10668                           
 10669                           ; BSR set to: 0
 10670  001126  2B6F               	incf	calcCRC@j& (0+255),f,b
 10671  001128                     l16958:
 10672                           
 10673                           ; BSR set to: 0
 10674  001128  516E               	movf	calcCRC@len& (0+255),w,b
 10675  00112A  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10676  00112C  E3EE               	bnc	l16954
 10677                           
 10678                           ; BSR set to: 0
 10679                           ;main.c: 2701: }
 10680                           ;main.c: 2703: return crc;
 10681  00112E  5170               	movf	calcCRC@crc& (0+255),w,b
 10682                           
 10683                           ; BSR set to: 0
 10684  001130  0012               	return	
 10685  001132                     __end_of_calcCRC:
 10686                           	opt stack 0
 10687                           tblptru	equ	0xFF8
 10688                           tblptrh	equ	0xFF7
 10689                           tblptrl	equ	0xFF6
 10690                           tablat	equ	0xFF5
 10691                           prodh	equ	0xFF4
 10692                           prodl	equ	0xFF3
 10693                           intcon	equ	0xFF2
 10694                           indf0	equ	0xFEF
 10695                           postinc0	equ	0xFEE
 10696                           fsr0h	equ	0xFEA
 10697                           fsr0l	equ	0xFE9
 10698                           wreg	equ	0xFE8
 10699                           indf1	equ	0xFE7
 10700                           postinc1	equ	0xFE6
 10701                           postdec1	equ	0xFE5
 10702                           fsr1h	equ	0xFE2
 10703                           fsr1l	equ	0xFE1
 10704                           indf2	equ	0xFDF
 10705                           postinc2	equ	0xFDE
 10706                           postdec2	equ	0xFDD
 10707                           plusw2	equ	0xFDB
 10708                           fsr2h	equ	0xFDA
 10709                           fsr2l	equ	0xFD9
 10710                           status	equ	0xFD8
 10711                           
 10712 ;; *************** function _receiveSendEventCANAL *****************
 10713 ;; Defined at:
 10714 ;;		line 2083 in file "main.c"
 10715 ;; Parameters:    Size  Location     Type
 10716 ;;		None
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;  crc             1   33[BANK0 ] unsigned char 
 10719 ;;  data            8   19[BANK0 ] unsigned char [8]
 10720 ;;  id              4   28[BANK0 ] unsigned long 
 10721 ;;  dlc             1   32[BANK0 ] unsigned char 
 10722 ;;  i               1   27[BANK0 ] unsigned char 
 10723 ;; Return value:  Size  Location     Type
 10724 ;;                  1    wreg      enum E15660
 10725 ;; Registers used:
 10726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10727 ;; Tracked objects:
 10728 ;;		On entry : F/1
 10729 ;;		On exit  : 0/0
 10730 ;;		Unchanged: 0/0
 10731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10732 ;;      Params:         0       0       0       0       0       0       0
 10733 ;;      Locals:         0      15       0       0       0       0       0
 10734 ;;      Temps:          0       0       0       0       0       0       0
 10735 ;;      Totals:         0      15       0       0       0       0       0
 10736 ;;Total ram usage:       15 bytes
 10737 ;; Hardware stack levels used:    1
 10738 ;; Hardware stack levels required when called:    6
 10739 ;; This function calls:
 10740 ;;		_WriteUSART
 10741 ;;		_sendEscapedUartData
 10742 ;;		_crc8
 10743 ;;		_getCANFrame
 10744 ;; This function is called by:
 10745 ;;		_doModeVscp
 10746 ;; This function uses a non-reentrant model
 10747 ;;
 10748                           
 10749                           	psect	text17
 10750  0030F2                     __ptext17:
 10751                           	opt stack 0
 10752  0030F2                     _receiveSendEventCANAL:
 10753                           	opt stack 22
 10754                           
 10755                           ; BSR set to: 1
 10756                           ;main.c: 2084: uint8_t i;
 10757                           ;main.c: 2085: uint32_t id;
 10758                           ;main.c: 2086: uint8_t dlc;
 10759                           ;main.c: 2087: uint8_t data[8];
 10760                           ;main.c: 2089: if ( getCANFrame( &id, &dlc, &data ) ) {
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;incstack = 0
 10764                           ;incstack = 0
 10765  0030F2  0100               	movlb	0	; () banked
 10766  0030F4  0E00               	movlw	high receiveSendEventCANAL@dlc
 10767  0030F6  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10768  0030F8  0E80               	movlw	low receiveSendEventCANAL@dlc
 10769  0030FA  6F6E               	movwf	?_getCANFrame& (0+255),b
 10770  0030FC  0E00               	movlw	high receiveSendEventCANAL@data
 10771  0030FE  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 10772  003100  0E73               	movlw	low receiveSendEventCANAL@data
 10773  003102  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10774  003104  0E7C               	movlw	receiveSendEventCANAL@id& (0+255)
 10775  003106  ECE0  F00F         	call	_getCANFrame
 10776  00310A  0900               	iorlw	0
 10777  00310C  E101 D092          	bz	l1031
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;main.c: 2091: uint8_t crc = 0;
 10781  003110  6B81               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;main.c: 2094: cntRxFrames++;
 10785  003112  0101               	movlb	1	; () banked
 10786  003114  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10787  003116  0E00               	movlw	0
 10788  003118  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10789  00311A  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10790  00311C  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10791                           
 10792                           ;main.c: 2095: cntRxBytes += dlc;
 10793  00311E  0100               	movlb	0	; () banked
 10794  003120  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10795  003122  0101               	movlb	1	; () banked
 10796  003124  2708               	addwf	_cntRxBytes& (0+255),f,b
 10797  003126  0E00               	movlw	0
 10798  003128  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10799  00312A  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10800  00312C  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10801  00312E                     l1010:
 10802                           
 10803                           ; BSR set to: 1
 10804  00312E  A2AC               	btfss	4012,1,c	;volatile
 10805  003130  D7FE               	goto	l1010
 10806                           
 10807                           ; BSR set to: 1
 10808                           ;main.c: 2099: WriteUSART(0x10);
 10809  003132  0E10               	movlw	16
 10810  003134  ECF5  F007         	call	_WriteUSART
 10811  003138                     l1013:
 10812  003138  A2AC               	btfss	4012,1,c	;volatile
 10813  00313A  D7FE               	goto	l1013
 10814                           
 10815                           ;main.c: 2101: WriteUSART(0x02);
 10816  00313C  0E02               	movlw	2
 10817  00313E  ECF5  F007         	call	_WriteUSART
 10818  003142                     l1016:
 10819  003142  A2AC               	btfss	4012,1,c	;volatile
 10820  003144  D7FE               	goto	l1016
 10821                           
 10822                           ;main.c: 2105: WriteUSART(2);
 10823  003146  0E02               	movlw	2
 10824  003148  ECF5  F007         	call	_WriteUSART
 10825                           
 10826                           ;main.c: 2106: crc8(&crc, 2);
 10827  00314C  0100               	movlb	0	; () banked
 10828  00314E  0E00               	movlw	high receiveSendEventCANAL@crc
 10829  003150  6F68               	movwf	(?_crc8+1)& (0+255),b
 10830  003152  0E81               	movlw	low receiveSendEventCANAL@crc
 10831  003154  6F67               	movwf	?_crc8& (0+255),b
 10832  003156  0E02               	movlw	2
 10833  003158  6F69               	movwf	(?_crc8+2)& (0+255),b
 10834  00315A  ECE8  F008         	call	_crc8	;wreg free
 10835  00315E                     l1019:
 10836  00315E  A2AC               	btfss	4012,1,c	;volatile
 10837  003160  D7FE               	goto	l1019
 10838                           
 10839                           ;main.c: 2110: WriteUSART(0);
 10840  003162  0E00               	movlw	0
 10841  003164  ECF5  F007         	call	_WriteUSART
 10842                           
 10843                           ;main.c: 2111: crc8(&crc, 0);
 10844  003168  0100               	movlb	0	; () banked
 10845  00316A  0E00               	movlw	high receiveSendEventCANAL@crc
 10846  00316C  6F68               	movwf	(?_crc8+1)& (0+255),b
 10847  00316E  0E81               	movlw	low receiveSendEventCANAL@crc
 10848  003170  6F67               	movwf	?_crc8& (0+255),b
 10849  003172  0E00               	movlw	0
 10850  003174  6B69               	clrf	(?_crc8+2)& (0+255),b
 10851  003176  ECE8  F008         	call	_crc8	;wreg free
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;main.c: 2114: sendEscapedUartData(sequencyno, &crc);
 10855  00317A  0E00               	movlw	high receiveSendEventCANAL@crc
 10856  00317C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10857  00317E  0E81               	movlw	low receiveSendEventCANAL@crc
 10858  003180  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10859  003182  5036               	movf	_sequencyno,w,c
 10860  003184  EC42  F00B         	call	_sendEscapedUartData
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;main.c: 2115: sequencyno++;
 10864  003188  2A36               	incf	_sequencyno,f,c
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;main.c: 2118: sendEscapedUartData(0, &crc);
 10868  00318A  0E00               	movlw	high receiveSendEventCANAL@crc
 10869  00318C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10870  00318E  0E81               	movlw	low receiveSendEventCANAL@crc
 10871  003190  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10872  003192  0E00               	movlw	0
 10873  003194  EC42  F00B         	call	_sendEscapedUartData
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;main.c: 2119: sendEscapedUartData(5 + dlc, &crc);
 10877  003198  0E00               	movlw	high receiveSendEventCANAL@crc
 10878  00319A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10879  00319C  0E81               	movlw	low receiveSendEventCANAL@crc
 10880  00319E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10881  0031A0  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10882  0031A2  0F05               	addlw	5
 10883  0031A4  EC42  F00B         	call	_sendEscapedUartData
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;main.c: 2125: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10887  0031A8  0E00               	movlw	high receiveSendEventCANAL@crc
 10888  0031AA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10889  0031AC  0E81               	movlw	low receiveSendEventCANAL@crc
 10890  0031AE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10891  0031B0  0100               	movlb	0	; () banked
 10892  0031B2  517F               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10893  0031B4  EC42  F00B         	call	_sendEscapedUartData
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;main.c: 2126: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10897  0031B8  0E00               	movlw	high receiveSendEventCANAL@crc
 10898  0031BA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10899  0031BC  0E81               	movlw	low receiveSendEventCANAL@crc
 10900  0031BE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10901  0031C0  0100               	movlb	0	; () banked
 10902  0031C2  517E               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10903  0031C4  EC42  F00B         	call	_sendEscapedUartData
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;main.c: 2127: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10907  0031C8  0E00               	movlw	high receiveSendEventCANAL@crc
 10908  0031CA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10909  0031CC  0E81               	movlw	low receiveSendEventCANAL@crc
 10910  0031CE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10911  0031D0  0100               	movlb	0	; () banked
 10912  0031D2  517D               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10913  0031D4  EC42  F00B         	call	_sendEscapedUartData
 10914                           
 10915                           ; BSR set to: 0
 10916                           ;main.c: 2128: sendEscapedUartData((id & 0xff), &crc);
 10917  0031D8  0E00               	movlw	high receiveSendEventCANAL@crc
 10918  0031DA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10919  0031DC  0E81               	movlw	low receiveSendEventCANAL@crc
 10920  0031DE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10921  0031E0  517C               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10922  0031E2  EC42  F00B         	call	_sendEscapedUartData
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;main.c: 2131: sendEscapedUartData(dlc, &crc);
 10926  0031E6  0E00               	movlw	high receiveSendEventCANAL@crc
 10927  0031E8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10928  0031EA  0E81               	movlw	low receiveSendEventCANAL@crc
 10929  0031EC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10930  0031EE  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10931  0031F0  EC42  F00B         	call	_sendEscapedUartData
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;main.c: 2134: for (i = 0; i < dlc; i++) {
 10935  0031F4  6B7B               	clrf	receiveSendEventCANAL@i& (0+255),b
 10936  0031F6  D00C               	goto	l16942
 10937  0031F8                     l16938:
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;main.c: 2135: sendEscapedUartData( data[ i ], &crc );
 10941  0031F8  0E00               	movlw	high receiveSendEventCANAL@crc
 10942  0031FA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10943  0031FC  0E81               	movlw	low receiveSendEventCANAL@crc
 10944  0031FE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10945  003200  517B               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10946  003202  0F73               	addlw	low receiveSendEventCANAL@data
 10947  003204  6ED9               	movwf	fsr2l,c
 10948  003206  6ADA               	clrf	fsr2h,c
 10949  003208  50DF               	movf	indf2,w,c
 10950  00320A  EC42  F00B         	call	_sendEscapedUartData
 10951                           
 10952                           ; BSR set to: 0
 10953  00320E  2B7B               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10954  003210                     l16942:
 10955                           
 10956                           ; BSR set to: 0
 10957  003210  5180               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10958  003212  5D7B               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10959  003214  E3F1               	bnc	l16938
 10960                           
 10961                           ; BSR set to: 0
 10962                           ;main.c: 2136: }
 10963                           ;main.c: 2141: sendEscapedUartData(crc, (0));
 10964  003216  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10965  003218  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10966  00321A  5181               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10967  00321C  EC42  F00B         	call	_sendEscapedUartData
 10968  003220                     l1025:
 10969  003220  A2AC               	btfss	4012,1,c	;volatile
 10970  003222  D7FE               	goto	l1025
 10971                           
 10972                           ;main.c: 2145: WriteUSART(0x10);
 10973  003224  0E10               	movlw	16
 10974  003226  ECF5  F007         	call	_WriteUSART
 10975  00322A                     l1028:
 10976  00322A  A2AC               	btfss	4012,1,c	;volatile
 10977  00322C  D7FE               	goto	l1028
 10978                           
 10979                           ;main.c: 2147: WriteUSART(0x03);
 10980  00322E  0E03               	movlw	3
 10981  003230  ECF5  F007         	call	_WriteUSART
 10982  003234                     l1031:
 10983  003234  0012               	return	
 10984  003236                     __end_of_receiveSendEventCANAL:
 10985                           	opt stack 0
 10986                           tblptru	equ	0xFF8
 10987                           tblptrh	equ	0xFF7
 10988                           tblptrl	equ	0xFF6
 10989                           tablat	equ	0xFF5
 10990                           prodh	equ	0xFF4
 10991                           prodl	equ	0xFF3
 10992                           intcon	equ	0xFF2
 10993                           indf0	equ	0xFEF
 10994                           postinc0	equ	0xFEE
 10995                           fsr0h	equ	0xFEA
 10996                           fsr0l	equ	0xFE9
 10997                           wreg	equ	0xFE8
 10998                           indf1	equ	0xFE7
 10999                           postinc1	equ	0xFE6
 11000                           postdec1	equ	0xFE5
 11001                           fsr1h	equ	0xFE2
 11002                           fsr1l	equ	0xFE1
 11003                           indf2	equ	0xFDF
 11004                           postinc2	equ	0xFDE
 11005                           postdec2	equ	0xFDD
 11006                           plusw2	equ	0xFDB
 11007                           fsr2h	equ	0xFDA
 11008                           fsr2l	equ	0xFD9
 11009                           status	equ	0xFD8
 11010                           
 11011 ;; *************** function _receiveSendMultiEventCANAL *****************
 11012 ;; Defined at:
 11013 ;;		line 2160 in file "main.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;		None
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  crc             1   34[BANK0 ] unsigned char 
 11018 ;;  data            8   19[BANK0 ] unsigned char [8]
 11019 ;;  id              4   29[BANK0 ] unsigned long 
 11020 ;;  pos             1   35[BANK0 ] unsigned char 
 11021 ;;  dlc             1   33[BANK0 ] unsigned char 
 11022 ;;  i               1   28[BANK0 ] unsigned char 
 11023 ;;  msgcount        1   27[BANK0 ] unsigned char 
 11024 ;; Return value:  Size  Location     Type
 11025 ;;                  1    wreg      enum E15660
 11026 ;; Registers used:
 11027 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11028 ;; Tracked objects:
 11029 ;;		On entry : F/1
 11030 ;;		On exit  : 0/0
 11031 ;;		Unchanged: 0/0
 11032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11033 ;;      Params:         0       0       0       0       0       0       0
 11034 ;;      Locals:         0      17       0       0       0       0       0
 11035 ;;      Temps:          0       0       0       0       0       0       0
 11036 ;;      Totals:         0      17       0       0       0       0       0
 11037 ;;Total ram usage:       17 bytes
 11038 ;; Hardware stack levels used:    1
 11039 ;; Hardware stack levels required when called:    6
 11040 ;; This function calls:
 11041 ;;		_WriteUSART
 11042 ;;		_sendEscapedUartData
 11043 ;;		_crc8
 11044 ;;		_getCANFrame
 11045 ;; This function is called by:
 11046 ;;		_doModeVscp
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           	psect	text18
 11051  0033A4                     __ptext18:
 11052                           	opt stack 0
 11053  0033A4                     _receiveSendMultiEventCANAL:
 11054                           	opt stack 22
 11055                           
 11056                           ; BSR set to: 1
 11057                           ;main.c: 2161: uint8_t i;
 11058                           ;main.c: 2162: uint8_t pos=0;
 11059                           
 11060                           ;incstack = 0
 11061                           ;incstack = 0
 11062  0033A4  0100               	movlb	0	; () banked
 11063  0033A6  6B83               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 11064                           
 11065                           ;main.c: 2163: uint8_t msgcount=0;
 11066  0033A8  6B7B               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11067                           
 11068                           ; BSR set to: 0
 11069                           ;main.c: 2164: uint32_t id;
 11070                           ;main.c: 2165: uint8_t dlc;
 11071                           ;main.c: 2166: uint8_t data[8];
 11072                           ;main.c: 2168: if ( getCANFrame( &id, &dlc, &data ) ) {
 11073  0033AA  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11074  0033AC  D8B6               	call	PL86	;call to abstracted procedure
 11075  0033AE  ECE0  F00F         	call	_getCANFrame
 11076  0033B2  0900               	iorlw	0
 11077  0033B4  E101 D0A8          	bz	l1063
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;main.c: 2170: uint8_t crc = 0;
 11081  0033B8  6B82               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;main.c: 2173: cntRxFrames++;
 11085  0033BA  0101               	movlb	1	; () banked
 11086  0033BC  2B0C               	incf	_cntRxFrames& (0+255),f,b
 11087  0033BE  0E00               	movlw	0
 11088  0033C0  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11089  0033C2  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11090  0033C4  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11091                           
 11092                           ;main.c: 2174: cntRxBytes += dlc;
 11093  0033C6  0100               	movlb	0	; () banked
 11094  0033C8  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11095  0033CA  0101               	movlb	1	; () banked
 11096  0033CC  2708               	addwf	_cntRxBytes& (0+255),f,b
 11097  0033CE  0E00               	movlw	0
 11098  0033D0  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11099  0033D2  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11100  0033D4  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11101  0033D6                     l1035:
 11102                           
 11103                           ; BSR set to: 1
 11104  0033D6  A2AC               	btfss	4012,1,c	;volatile
 11105  0033D8  D7FE               	goto	l1035
 11106                           
 11107                           ; BSR set to: 1
 11108                           ;main.c: 2178: WriteUSART(0x10);
 11109  0033DA  0E10               	movlw	16
 11110  0033DC  ECF5  F007         	call	_WriteUSART
 11111  0033E0                     l1038:
 11112  0033E0  A2AC               	btfss	4012,1,c	;volatile
 11113  0033E2  D7FE               	goto	l1038
 11114                           
 11115                           ;main.c: 2180: WriteUSART(0x02);
 11116  0033E4  0E02               	movlw	2
 11117  0033E6  ECF5  F007         	call	_WriteUSART
 11118  0033EA                     l1041:
 11119  0033EA  A2AC               	btfss	4012,1,c	;volatile
 11120  0033EC  D7FE               	goto	l1041
 11121                           
 11122                           ;main.c: 2184: WriteUSART(6);
 11123  0033EE  0E06               	movlw	6
 11124  0033F0  ECF5  F007         	call	_WriteUSART
 11125                           
 11126                           ;main.c: 2185: crc8(&crc, 6);
 11127  0033F4  0100               	movlb	0	; () banked
 11128  0033F6  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11129  0033F8  6F68               	movwf	(?_crc8+1)& (0+255),b
 11130  0033FA  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11131  0033FC  6F67               	movwf	?_crc8& (0+255),b
 11132  0033FE  0E06               	movlw	6
 11133  003400  6F69               	movwf	(?_crc8+2)& (0+255),b
 11134  003402  ECE8  F008         	call	_crc8	;wreg free
 11135  003406                     l1044:
 11136  003406  A2AC               	btfss	4012,1,c	;volatile
 11137  003408  D7FE               	goto	l1044
 11138                           
 11139                           ;main.c: 2189: WriteUSART(0);
 11140  00340A  0E00               	movlw	0
 11141  00340C  ECF5  F007         	call	_WriteUSART
 11142                           
 11143                           ;main.c: 2190: crc8(&crc, 0);
 11144  003410  0100               	movlb	0	; () banked
 11145  003412  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11146  003414  6F68               	movwf	(?_crc8+1)& (0+255),b
 11147  003416  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11148  003418  6F67               	movwf	?_crc8& (0+255),b
 11149  00341A  0E00               	movlw	0
 11150  00341C  6B69               	clrf	(?_crc8+2)& (0+255),b
 11151  00341E  ECE8  F008         	call	_crc8	;wreg free
 11152                           
 11153                           ; BSR set to: 0
 11154                           ;main.c: 2193: sendEscapedUartData(sequencyno, &crc);
 11155  003422  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11156  003424  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11157  003426  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11158  003428  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11159  00342A  5036               	movf	_sequencyno,w,c
 11160  00342C  EC42  F00B         	call	_sendEscapedUartData
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;main.c: 2194: sequencyno++;
 11164  003430  2A36               	incf	_sequencyno,f,c
 11165  003432                     l16844:
 11166                           
 11167                           ; BSR set to: 0
 11168                           ;main.c: 2204: wrkbuf[ pos ] = (id >> 24) & 0xff;
 11169  003432  0E7D               	movlw	low _wrkbuf
 11170  003434  0100               	movlb	0	; () banked
 11171  003436  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11172  003438  6ED9               	movwf	fsr2l,c
 11173  00343A  6ADA               	clrf	fsr2h,c
 11174  00343C  0E01               	movlw	high _wrkbuf
 11175  00343E  22DA               	addwfc	fsr2h,f,c
 11176  003440  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 11177                           
 11178                           ; BSR set to: 0
 11179                           ;main.c: 2205: pos++;
 11180                           
 11181                           ; BSR set to: 0
 11182                           ;main.c: 2206: wrkbuf[ pos ] = (id >> 16) & 0xff;
 11183  003444  D862               	call	PL26	;call to abstracted procedure
 11184  003446  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 11185                           
 11186                           ; BSR set to: 0
 11187                           ;main.c: 2207: pos++;
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;main.c: 2208: wrkbuf[ pos ] = (id >> 8) & 0xff;
 11191  00344A  D85F               	call	PL26	;call to abstracted procedure
 11192  00344C  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 11193                           
 11194                           ; BSR set to: 0
 11195                           ;main.c: 2209: pos++;
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;main.c: 2210: wrkbuf[ pos ] = id & 0xff;
 11199  003450  D85C               	call	PL26	;call to abstracted procedure
 11200  003452  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;main.c: 2211: pos++;
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;main.c: 2214: wrkbuf[ pos ] = dlc;
 11207  003456  D859               	call	PL26	;call to abstracted procedure
 11208  003458  C081  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;main.c: 2215: pos++;
 11212  00345C  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;main.c: 2218: for (i = 0; i < dlc; i++) {
 11216  00345E  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11217  003460  D00F               	goto	l16872
 11218  003462                     l16866:
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;main.c: 2219: wrkbuf[ pos ] = data[ i ];
 11222  003462  517C               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11223  003464  0F73               	addlw	low receiveSendMultiEventCANAL@data
 11224  003466  6ED9               	movwf	fsr2l,c
 11225  003468  6ADA               	clrf	fsr2h,c
 11226  00346A  0E7D               	movlw	low _wrkbuf
 11227  00346C  0100               	movlb	0	; () banked
 11228  00346E  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11229  003470  6EE1               	movwf	fsr1l,c
 11230  003472  6AE2               	clrf	fsr1h,c
 11231  003474  0E01               	movlw	high _wrkbuf
 11232  003476  22E2               	addwfc	fsr1h,f,c
 11233  003478  CFDF FFE7          	movff	indf2,indf1
 11234                           
 11235                           ; BSR set to: 1
 11236                           ;main.c: 2220: pos++;
 11237  00347C  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11238                           
 11239                           ; BSR set to: 0
 11240  00347E  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11241  003480                     l16872:
 11242                           
 11243                           ; BSR set to: 0
 11244  003480  5181               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11245  003482  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11246  003484  E3EE               	bnc	l16866
 11247                           
 11248                           ; BSR set to: 0
 11249                           ;main.c: 2221: }
 11250                           ;main.c: 2223: msgcount++;
 11251  003486  2B7B               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;main.c: 2225: } while ( ( msgcount < caps.maxCanalFrames ) &&
 11255                           ;main.c: 2226: ( msgcount < 5 ) &&
 11256                           ;main.c: 2227: getCANFrame( &id, &dlc, &data ) );
 11257  003488  0101               	movlb	1	; () banked
 11258  00348A  51F2               	movf	(_caps+1)& (0+255),w,b
 11259  00348C  0100               	movlb	0	; () banked
 11260  00348E  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11261  003490  D009               	goto	l16882
 11262                           
 11263                           ; BSR set to: 0
 11264  003492  0E05               	movlw	5
 11265  003494  617B               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11266  003496  D006               	goto	l16882
 11267                           
 11268                           ; BSR set to: 0
 11269  003498  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11270  00349A  D83F               	call	PL86	;call to abstracted procedure
 11271  00349C  ECE0  F00F         	call	_getCANFrame
 11272  0034A0  0900               	iorlw	0
 11273  0034A2  E1C7               	bnz	l16844
 11274  0034A4                     l16882:
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;main.c: 2232: sendEscapedUartData(0, &crc);
 11278  0034A4  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11279  0034A6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11280  0034A8  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11281  0034AA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11282  0034AC  0E00               	movlw	0
 11283  0034AE  EC42  F00B         	call	_sendEscapedUartData
 11284                           
 11285                           ;main.c: 2233: sendEscapedUartData(pos, &crc);
 11286  0034B2  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11287  0034B4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11288  0034B6  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11289  0034B8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11290  0034BA  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11291  0034BC  EC42  F00B         	call	_sendEscapedUartData
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;main.c: 2236: for (i = 0; i < pos; i++) {
 11295  0034C0  6B7C               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11296  0034C2  D010               	goto	l16890
 11297  0034C4                     l16886:
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;main.c: 2237: sendEscapedUartData( wrkbuf[ i ], &crc);
 11301  0034C4  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11302  0034C6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11303  0034C8  0E82               	movlw	low receiveSendMultiEventCANAL@crc
 11304  0034CA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11305  0034CC  0E7D               	movlw	low _wrkbuf
 11306  0034CE  0100               	movlb	0	; () banked
 11307  0034D0  257C               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11308  0034D2  6ED9               	movwf	fsr2l,c
 11309  0034D4  6ADA               	clrf	fsr2h,c
 11310  0034D6  0101               	movlb	1	; () banked
 11311  0034D8  0E01               	movlw	high _wrkbuf
 11312  0034DA  22DA               	addwfc	fsr2h,f,c
 11313  0034DC  50DF               	movf	indf2,w,c
 11314  0034DE  EC42  F00B         	call	_sendEscapedUartData
 11315                           
 11316                           ; BSR set to: 0
 11317  0034E2  2B7C               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11318  0034E4                     l16890:
 11319                           
 11320                           ; BSR set to: 0
 11321  0034E4  5183               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11322  0034E6  5D7C               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11323  0034E8  E3ED               	bnc	l16886
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;main.c: 2238: }
 11327                           ;main.c: 2241: sendEscapedUartData(crc, (0));
 11328  0034EA  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11329  0034EC  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11330  0034EE  5182               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11331  0034F0  EC42  F00B         	call	_sendEscapedUartData
 11332  0034F4                     l1057:
 11333  0034F4  A2AC               	btfss	4012,1,c	;volatile
 11334  0034F6  D7FE               	goto	l1057
 11335                           
 11336                           ;main.c: 2245: WriteUSART(0x10);
 11337  0034F8  0E10               	movlw	16
 11338  0034FA  ECF5  F007         	call	_WriteUSART
 11339  0034FE                     l1060:
 11340  0034FE  A2AC               	btfss	4012,1,c	;volatile
 11341  003500  D7FE               	goto	l1060
 11342                           
 11343                           ;main.c: 2247: WriteUSART(0x03);
 11344  003502  0E03               	movlw	3
 11345  003504  ECF5  F007         	call	_WriteUSART
 11346  003508                     l1063:
 11347  003508  0012               	return	
 11348  00350A                     __end_of_receiveSendMultiEventCANAL:
 11349                           	opt stack 0
 11350  00350A                     PL26:
 11351                           	opt stack 22
 11352  00350A  2B83               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11353  00350C  0E7D               	movlw	low _wrkbuf
 11354  00350E  2583               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11355  003510  6ED9               	movwf	fsr2l,c
 11356  003512  6ADA               	clrf	fsr2h,c
 11357  003514  0E01               	movlw	high _wrkbuf
 11358  003516  22DA               	addwfc	fsr2h,f,c
 11359  003518  0012               	return	
 11360  00351A                     __end_ofPL26:
 11361                           	opt stack 0
 11362  00351A                     PL86:
 11363                           	opt stack 22
 11364  00351A  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11365  00351C  0E81               	movlw	low receiveSendMultiEventCANAL@dlc
 11366  00351E  6F6E               	movwf	?_getCANFrame& (0+255),b
 11367  003520  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11368  003522  6F71               	movwf	(?_getCANFrame+3)& (0+255),b
 11369  003524  0E73               	movlw	low receiveSendMultiEventCANAL@data
 11370  003526  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11371  003528  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11372  00352A  0012               	return	
 11373  00352C                     __end_ofPL86:
 11374                           	opt stack 0
 11375                           tblptru	equ	0xFF8
 11376                           tblptrh	equ	0xFF7
 11377                           tblptrl	equ	0xFF6
 11378                           tablat	equ	0xFF5
 11379                           prodh	equ	0xFF4
 11380                           prodl	equ	0xFF3
 11381                           intcon	equ	0xFF2
 11382                           indf0	equ	0xFEF
 11383                           postinc0	equ	0xFEE
 11384                           fsr0h	equ	0xFEA
 11385                           fsr0l	equ	0xFE9
 11386                           wreg	equ	0xFE8
 11387                           indf1	equ	0xFE7
 11388                           postinc1	equ	0xFE6
 11389                           postdec1	equ	0xFE5
 11390                           fsr1h	equ	0xFE2
 11391                           fsr1l	equ	0xFE1
 11392                           indf2	equ	0xFDF
 11393                           postinc2	equ	0xFDE
 11394                           postdec2	equ	0xFDD
 11395                           plusw2	equ	0xFDB
 11396                           fsr2h	equ	0xFDA
 11397                           fsr2l	equ	0xFD9
 11398                           status	equ	0xFD8
 11399                           
 11400 ;; *************** function _sendEscapedUartData *****************
 11401 ;; Defined at:
 11402 ;;		line 1813 in file "main.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;  c               1    wreg     unsigned char 
 11405 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11406 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11407 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11408 ;;		 -> NULL(0), 
 11409 ;; Auto vars:     Size  Location     Type
 11410 ;;  c               1   14[BANK0 ] unsigned char 
 11411 ;; Return value:  Size  Location     Type
 11412 ;;		None               void
 11413 ;; Registers used:
 11414 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11415 ;; Tracked objects:
 11416 ;;		On entry : E/1
 11417 ;;		On exit  : F/0
 11418 ;;		Unchanged: 0/0
 11419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11420 ;;      Params:         0       2       0       0       0       0       0
 11421 ;;      Locals:         0       1       0       0       0       0       0
 11422 ;;      Temps:          0       0       0       0       0       0       0
 11423 ;;      Totals:         0       3       0       0       0       0       0
 11424 ;;Total ram usage:        3 bytes
 11425 ;; Hardware stack levels used:    1
 11426 ;; Hardware stack levels required when called:    5
 11427 ;; This function calls:
 11428 ;;		_WriteUSART
 11429 ;;		_crc8
 11430 ;; This function is called by:
 11431 ;;		_sendVSCPDriverErrorFrame
 11432 ;;		_sendVSCPDriverAck
 11433 ;;		_sendVSCPDriverNack
 11434 ;;		_sendVSCPDriverCommandReply
 11435 ;;		_receiveSendEventCANAL
 11436 ;;		_receiveSendMultiEventCANAL
 11437 ;;		_sendVSCPModeCapabilities
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441                           	psect	text19
 11442  001684                     __ptext19:
 11443                           	opt stack 0
 11444  001684                     _sendEscapedUartData:
 11445                           	opt stack 22
 11446                           
 11447                           ;incstack = 0
 11448                           ;incstack = 0
 11449                           ;sendEscapedUartData@c stored from wreg
 11450  001684  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11451                           
 11452                           ;main.c: 1814: if (0x10 == c) {
 11453  001688  0100               	movlb	0	; () banked
 11454  00168A  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11455  00168C  0A10               	xorlw	16
 11456  00168E  E117               	bnz	l854
 11457  001690                     l846:
 11458  001690  A2AC               	btfss	4012,1,c	;volatile
 11459  001692  D7FE               	goto	l846
 11460                           
 11461                           ;main.c: 1817: WriteUSART(0x10);
 11462  001694  0E10               	movlw	16
 11463  001696  ECF5  F007         	call	_WriteUSART
 11464  00169A                     l849:
 11465  00169A  A2AC               	btfss	4012,1,c	;volatile
 11466  00169C  D7FE               	goto	l849
 11467                           
 11468                           ;main.c: 1821: WriteUSART(0x10);
 11469  00169E  0E10               	movlw	16
 11470  0016A0  ECF5  F007         	call	_WriteUSART
 11471                           
 11472                           ;main.c: 1822: if ((0) != pcrc) crc8(pcrc, 0x10);
 11473  0016A4  0100               	movlb	0	; () banked
 11474  0016A6  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11475  0016A8  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11476  0016AA  E01B               	bz	l858
 11477                           
 11478                           ; BSR set to: 0
 11479  0016AC  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11480  0016B0  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11481  0016B4  0E10               	movlw	16
 11482  0016B6  6F69               	movwf	(?_crc8+2)& (0+255),b
 11483  0016B8  ECE8  F008         	call	_crc8	;wreg free
 11484  0016BC  D012               	goto	l858
 11485  0016BE                     l854:
 11486  0016BE  A2AC               	btfss	4012,1,c	;volatile
 11487  0016C0  D7FE               	goto	l854
 11488                           
 11489                           ;main.c: 1828: WriteUSART(c);
 11490  0016C2  0100               	movlb	0	; () banked
 11491  0016C4  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11492  0016C6  ECF5  F007         	call	_WriteUSART
 11493                           
 11494                           ;main.c: 1829: if ((0) != pcrc) crc8(pcrc, c);
 11495  0016CA  0100               	movlb	0	; () banked
 11496  0016CC  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11497  0016CE  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11498  0016D0  E008               	bz	l858
 11499                           
 11500                           ; BSR set to: 0
 11501  0016D2  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11502  0016D6  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11503  0016DA  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11504  0016DE  ECE8  F008         	call	_crc8	;wreg free
 11505  0016E2                     l858:
 11506                           
 11507                           ; BSR set to: 0
 11508  0016E2  0012               	return	
 11509  0016E4                     __end_of_sendEscapedUartData:
 11510                           	opt stack 0
 11511                           tblptru	equ	0xFF8
 11512                           tblptrh	equ	0xFF7
 11513                           tblptrl	equ	0xFF6
 11514                           tablat	equ	0xFF5
 11515                           prodh	equ	0xFF4
 11516                           prodl	equ	0xFF3
 11517                           intcon	equ	0xFF2
 11518                           indf0	equ	0xFEF
 11519                           postinc0	equ	0xFEE
 11520                           fsr0h	equ	0xFEA
 11521                           fsr0l	equ	0xFE9
 11522                           wreg	equ	0xFE8
 11523                           indf1	equ	0xFE7
 11524                           postinc1	equ	0xFE6
 11525                           postdec1	equ	0xFE5
 11526                           fsr1h	equ	0xFE2
 11527                           fsr1l	equ	0xFE1
 11528                           indf2	equ	0xFDF
 11529                           postinc2	equ	0xFDE
 11530                           postdec2	equ	0xFDD
 11531                           plusw2	equ	0xFDB
 11532                           fsr2h	equ	0xFDA
 11533                           fsr2l	equ	0xFD9
 11534                           status	equ	0xFD8
 11535                           
 11536 ;; *************** function _crc8 *****************
 11537 ;; Defined at:
 11538 ;;		line 47 in file "crc8.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11541 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11542 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11543 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11544 ;;  m               1    9[BANK0 ] unsigned char 
 11545 ;; Auto vars:     Size  Location     Type
 11546 ;;		None
 11547 ;; Return value:  Size  Location     Type
 11548 ;;		None               void
 11549 ;; Registers used:
 11550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11551 ;; Tracked objects:
 11552 ;;		On entry : F/0
 11553 ;;		On exit  : F/0
 11554 ;;		Unchanged: 0/0
 11555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11556 ;;      Params:         0       3       0       0       0       0       0
 11557 ;;      Locals:         0       0       0       0       0       0       0
 11558 ;;      Temps:          0       2       0       0       0       0       0
 11559 ;;      Totals:         0       5       0       0       0       0       0
 11560 ;;Total ram usage:        5 bytes
 11561 ;; Hardware stack levels used:    1
 11562 ;; Hardware stack levels required when called:    4
 11563 ;; This function calls:
 11564 ;;		_init_crc8
 11565 ;; This function is called by:
 11566 ;;		_sendEscapedUartData
 11567 ;;		_sendVSCPDriverErrorFrame
 11568 ;;		_sendVSCPDriverAck
 11569 ;;		_sendVSCPDriverNack
 11570 ;;		_sendVSCPDriverCommandReply
 11571 ;;		_receiveSendEventCANAL
 11572 ;;		_receiveSendMultiEventCANAL
 11573 ;;		_sendVSCPModeCapabilities
 11574 ;;		_calcCRC
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text20
 11579  0011D0                     __ptext20:
 11580                           	opt stack 0
 11581  0011D0                     _crc8:
 11582                           	opt stack 23
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;crc8.c: 48: if ( !made_table ) {
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;incstack = 0
 11589                           ;incstack = 0
 11590  0011D0  0101               	movlb	1	; () banked
 11591  0011D2  5129               	movf	(_made_table+1)& (0+255),w,b
 11592  0011D4  1128               	iorwf	_made_table& (0+255),w,b
 11593  0011D6  B4D8               	btfsc	status,2,c
 11594                           
 11595                           ; BSR set to: 1
 11596                           ;crc8.c: 49: init_crc8();
 11597  0011D8  EC07  F00C         	call	_init_crc8	;wreg free
 11598                           
 11599                           ; BSR set to: 1
 11600                           ;crc8.c: 50: }
 11601                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11602  0011DC  C067  FFD9         	movff	crc8@crc,fsr2l
 11603  0011E0  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11604  0011E4  50DF               	movf	indf2,w,c
 11605  0011E6  0100               	movlb	0	; () banked
 11606  0011E8  1969               	xorwf	crc8@m& (0+255),w,b
 11607  0011EA  6F6A               	movwf	??_crc8& (0+255),b
 11608  0011EC  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11609  0011EE  0E00               	movlw	low _crc8_table
 11610  0011F0  256A               	addwf	??_crc8& (0+255),w,b
 11611  0011F2  6ED9               	movwf	fsr2l,c
 11612  0011F4  0E03               	movlw	high _crc8_table
 11613  0011F6  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11614  0011F8  6EDA               	movwf	fsr2h,c
 11615  0011FA  C067  FFE1         	movff	crc8@crc,fsr1l
 11616  0011FE  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11617  001202  CFDF FFE7          	movff	indf2,indf1
 11618                           
 11619                           ; BSR set to: 0
 11620  001206  0012               	return	
 11621  001208                     __end_of_crc8:
 11622                           	opt stack 0
 11623                           tblptru	equ	0xFF8
 11624                           tblptrh	equ	0xFF7
 11625                           tblptrl	equ	0xFF6
 11626                           tablat	equ	0xFF5
 11627                           prodh	equ	0xFF4
 11628                           prodl	equ	0xFF3
 11629                           intcon	equ	0xFF2
 11630                           indf0	equ	0xFEF
 11631                           postinc0	equ	0xFEE
 11632                           fsr0h	equ	0xFEA
 11633                           fsr0l	equ	0xFE9
 11634                           wreg	equ	0xFE8
 11635                           indf1	equ	0xFE7
 11636                           postinc1	equ	0xFE6
 11637                           postdec1	equ	0xFE5
 11638                           fsr1h	equ	0xFE2
 11639                           fsr1l	equ	0xFE1
 11640                           indf2	equ	0xFDF
 11641                           postinc2	equ	0xFDE
 11642                           postdec2	equ	0xFDD
 11643                           plusw2	equ	0xFDB
 11644                           fsr2h	equ	0xFDA
 11645                           fsr2l	equ	0xFD9
 11646                           status	equ	0xFD8
 11647                           
 11648 ;; *************** function _init_crc8 *****************
 11649 ;; Defined at:
 11650 ;;		line 25 in file "crc8.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;		None
 11653 ;; Auto vars:     Size  Location     Type
 11654 ;;  i               2    5[BANK0 ] int 
 11655 ;;  j               2    2[BANK0 ] int 
 11656 ;;  crc             1    4[BANK0 ] unsigned char 
 11657 ;; Return value:  Size  Location     Type
 11658 ;;		None               void
 11659 ;; Registers used:
 11660 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11661 ;; Tracked objects:
 11662 ;;		On entry : E/0
 11663 ;;		On exit  : F/1
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11666 ;;      Params:         0       0       0       0       0       0       0
 11667 ;;      Locals:         0       7       0       0       0       0       0
 11668 ;;      Temps:          0       0       0       0       0       0       0
 11669 ;;      Totals:         0       7       0       0       0       0       0
 11670 ;;Total ram usage:        7 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    3
 11673 ;; This function calls:
 11674 ;;		Nothing
 11675 ;; This function is called by:
 11676 ;;		_main
 11677 ;;		_crc8
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           	psect	text21
 11682  00180E                     __ptext21:
 11683                           	opt stack 0
 11684  00180E                     _init_crc8:
 11685                           	opt stack 23
 11686                           
 11687                           ;crc8.c: 26: int i,j;
 11688                           ;crc8.c: 27: unsigned char crc;
 11689                           ;crc8.c: 29: if (!made_table) {
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;incstack = 0
 11693                           ;incstack = 0
 11694  00180E  0101               	movlb	1	; () banked
 11695  001810  5129               	movf	(_made_table+1)& (0+255),w,b
 11696  001812  1128               	iorwf	_made_table& (0+255),w,b
 11697  001814  E133               	bnz	l1645
 11698                           
 11699                           ; BSR set to: 1
 11700                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11701  001816  0100               	movlb	0	; () banked
 11702  001818  6B65               	clrf	init_crc8@i& (0+255),b
 11703  00181A  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11704  00181C                     l1637:
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;crc8.c: 31: crc = i;
 11708  00181C  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11709                           
 11710                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11711  001820  6B62               	clrf	init_crc8@j& (0+255),b
 11712  001822  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11713  001824                     l1639:
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11717  001824  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11718  001826  D003               	goto	l14356
 11719                           
 11720                           ; BSR set to: 0
 11721  001828  6B60               	clrf	_init_crc8$2073& (0+255),b
 11722  00182A  6B61               	clrf	(_init_crc8$2073+1)& (0+255),b
 11723  00182C  D003               	goto	l14358
 11724  00182E                     l14356:
 11725                           
 11726                           ; BSR set to: 0
 11727  00182E  6B61               	clrf	(_init_crc8$2073+1)& (0+255),b
 11728  001830  0E07               	movlw	7
 11729  001832  6F60               	movwf	_init_crc8$2073& (0+255),b
 11730  001834                     l14358:
 11731                           
 11732                           ; BSR set to: 0
 11733  001834  5164               	movf	init_crc8@crc& (0+255),w,b
 11734  001836  2564               	addwf	init_crc8@crc& (0+255),w,b
 11735  001838  1960               	xorwf	_init_crc8$2073& (0+255),w,b
 11736  00183A  6F64               	movwf	init_crc8@crc& (0+255),b
 11737                           
 11738                           ; BSR set to: 0
 11739  00183C  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11740  00183E  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11741                           
 11742                           ; BSR set to: 0
 11743  001840  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11744  001842  0A80               	xorlw	128
 11745  001844  0F80               	addlw	-128
 11746  001846  0E08               	movlw	8
 11747  001848  B4D8               	btfsc	status,2,c
 11748  00184A  5D62               	subwf	init_crc8@j& (0+255),w,b
 11749  00184C  E3EB               	bnc	l1639
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;crc8.c: 34: }
 11753                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11754  00184E  0E00               	movlw	low _crc8_table
 11755  001850  0100               	movlb	0	; () banked
 11756  001852  2565               	addwf	init_crc8@i& (0+255),w,b
 11757  001854  6ED9               	movwf	fsr2l,c
 11758  001856  0E03               	movlw	high _crc8_table
 11759  001858  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11760  00185A  6EDA               	movwf	fsr2h,c
 11761  00185C  C064  FFDF         	movff	init_crc8@crc,indf2
 11762                           
 11763                           ; BSR set to: 0
 11764  001860  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11765  001862  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11766                           
 11767                           ; BSR set to: 0
 11768  001864  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11769  001866  0A80               	xorlw	128
 11770  001868  0F7F               	addlw	-129
 11771  00186A  0E00               	movlw	0
 11772  00186C  B4D8               	btfsc	status,2,c
 11773  00186E  5D65               	subwf	init_crc8@i& (0+255),w,b
 11774  001870  E3D5               	bnc	l1637
 11775                           
 11776                           ; BSR set to: 0
 11777                           ;crc8.c: 37: }
 11778                           ;crc8.c: 38: made_table=1;
 11779  001872  0E00               	movlw	0
 11780  001874  0101               	movlb	1	; () banked
 11781  001876  6F29               	movwf	(_made_table+1)& (0+255),b
 11782  001878  0E01               	movlw	1
 11783  00187A  6F28               	movwf	_made_table& (0+255),b
 11784  00187C                     l1645:
 11785                           
 11786                           ; BSR set to: 1
 11787  00187C  0012               	return	
 11788  00187E                     __end_of_init_crc8:
 11789                           	opt stack 0
 11790                           tblptru	equ	0xFF8
 11791                           tblptrh	equ	0xFF7
 11792                           tblptrl	equ	0xFF6
 11793                           tablat	equ	0xFF5
 11794                           prodh	equ	0xFF4
 11795                           prodl	equ	0xFF3
 11796                           intcon	equ	0xFF2
 11797                           indf0	equ	0xFEF
 11798                           postinc0	equ	0xFEE
 11799                           fsr0h	equ	0xFEA
 11800                           fsr0l	equ	0xFE9
 11801                           wreg	equ	0xFE8
 11802                           indf1	equ	0xFE7
 11803                           postinc1	equ	0xFE6
 11804                           postdec1	equ	0xFE5
 11805                           fsr1h	equ	0xFE2
 11806                           fsr1l	equ	0xFE1
 11807                           indf2	equ	0xFDF
 11808                           postinc2	equ	0xFDE
 11809                           postdec2	equ	0xFDD
 11810                           plusw2	equ	0xFDB
 11811                           fsr2h	equ	0xFDA
 11812                           fsr2l	equ	0xFD9
 11813                           status	equ	0xFD8
 11814                           
 11815 ;; *************** function _doModeVerbose *****************
 11816 ;; Defined at:
 11817 ;;		line 614 in file "main.c"
 11818 ;; Parameters:    Size  Location     Type
 11819 ;;		None
 11820 ;; Auto vars:     Size  Location     Type
 11821 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11822 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 11823 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 11824 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 11825 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 11826 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11827 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11828 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11829 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 11830 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 11831 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 11832 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 11833 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11834 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11835 ;;  id              4   42[BANK2 ] unsigned long 
 11836 ;;  p               2   68[BANK2 ] PTR unsigned char 
 11837 ;;		 -> NULL(0), cmdbuf(80), 
 11838 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11839 ;;  maskno          1   47[BANK2 ] unsigned char 
 11840 ;;  mask_nodeid     1   17[BANK2 ] unsigned char 
 11841 ;;  mask_type       1   16[BANK2 ] unsigned char 
 11842 ;;  mask_priorit    1   15[BANK2 ] unsigned char 
 11843 ;;  id              4    0[BANK2 ] unsigned long 
 11844 ;;  p               2   66[BANK2 ] PTR unsigned char 
 11845 ;;		 -> NULL(0), cmdbuf(80), 
 11846 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11847 ;;  filterno        1   46[BANK2 ] unsigned char 
 11848 ;;  filter_nodei    1   14[BANK2 ] unsigned char 
 11849 ;;  filter_type     1   13[BANK2 ] unsigned char 
 11850 ;;  filter_prior    1   12[BANK2 ] unsigned char 
 11851 ;;  nodeid          1   56[BANK2 ] unsigned char 
 11852 ;;  value           1   41[BANK2 ] unsigned char 
 11853 ;;  p               2   61[BANK2 ] PTR unsigned char 
 11854 ;;		 -> NULL(0), cmdbuf(80), 
 11855 ;;  nodeid          1   52[BANK2 ] unsigned char 
 11856 ;;  value           1   49[BANK2 ] unsigned char 
 11857 ;;  reg             1   40[BANK2 ] unsigned char 
 11858 ;;  page            1   39[BANK2 ] unsigned char 
 11859 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11860 ;;		 -> NULL(0), cmdbuf(80), 
 11861 ;;  value           1   58[BANK2 ] unsigned char 
 11862 ;;  i               1   55[BANK2 ] unsigned char 
 11863 ;;  reg             1   54[BANK2 ] unsigned char 
 11864 ;;  page            1   53[BANK2 ] unsigned char 
 11865 ;;  nodeid          1   51[BANK2 ] unsigned char 
 11866 ;;  count           1   50[BANK2 ] unsigned char 
 11867 ;;  rv              1   38[BANK2 ] enum E15660
 11868 ;;  p               2   64[BANK2 ] PTR unsigned char 
 11869 ;;		 -> NULL(0), cmdbuf(80), 
 11870 ;;  ifmode          1   63[BANK2 ] enum E16371
 11871 ;;  c               1   57[BANK2 ] unsigned char 
 11872 ;;  i               1   48[BANK2 ] unsigned char 
 11873 ;; Return value:  Size  Location     Type
 11874 ;;		None               void
 11875 ;; Registers used:
 11876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11877 ;; Tracked objects:
 11878 ;;		On entry : F/1
 11879 ;;		On exit  : D/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11882 ;;      Params:         0       0       0       0       0       0       0
 11883 ;;      Locals:         0       0       0      70       0       0       0
 11884 ;;      Temps:          0      20       0       0       0       0       0
 11885 ;;      Totals:         0      20       0      70       0       0       0
 11886 ;;Total ram usage:       90 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:   10
 11889 ;; This function calls:
 11890 ;;		_vscp_restoreDefaults
 11891 ;;		_putsUSART
 11892 ;;		_printFirmwareVersion
 11893 ;;		_fifo_read
 11894 ;;		_ECANSetOperationMode
 11895 ;;		_setFilter
 11896 ;;		__CANIDToRegs
 11897 ;;		_Busy_eep
 11898 ;;		_Write_b_eep
 11899 ;;		_receivePrintEventVerbose
 11900 ;;		_WriteUSART
 11901 ;;		_stristr
 11902 ;;		_strtok
 11903 ;;		_atoi
 11904 ;;		_memset
 11905 ;;		_sendVSCPFrame
 11906 ;;		_printStatistics
 11907 ;;		_printErrors
 11908 ;;		_printHelp
 11909 ;;		_findNodes
 11910 ;;		_strcpy
 11911 ;;		_strchr
 11912 ;;		_readRegisterExtended
 11913 ;;		_sprintf
 11914 ;;		_printBinary
 11915 ;;		_writeRegisterExtended
 11916 ;;		_printNodeFirmwareVersion
 11917 ;;		_printGUID
 11918 ;;		_printMDF
 11919 ;; This function is called by:
 11920 ;;		_main
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           	psect	text22
 11925  0053BE                     __ptext22:
 11926                           	opt stack 0
 11927  0053BE                     _doModeVerbose:
 11928                           	opt stack 19
 11929                           
 11930                           ; BSR set to: 1
 11931                           ;main.c: 615: uint8_t c;
 11932                           ;main.c: 616: uint8_t i;
 11933                           ;main.c: 619: if (!bSilent) {
 11934                           
 11935                           ; BSR set to: 1
 11936                           ;incstack = 0
 11937                           ;incstack = 0
 11938  0053BE  6630               	tstfsz	_bSilent,c
 11939  0053C0  D002               	goto	l14488
 11940                           
 11941                           ; BSR set to: 1
 11942                           ;main.c: 620: receivePrintEventVerbose();
 11943  0053C2  ECA8  F021         	call	_receivePrintEventVerbose	;wreg free
 11944  0053C6                     l14488:
 11945                           
 11946                           ;main.c: 621: }
 11947                           ;main.c: 624: (INTCONbits.GIE = 0);
 11948  0053C6  9EF2               	bcf	intcon,7,c	;volatile
 11949                           
 11950                           ;main.c: 626: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11951  0053C8  0E01               	movlw	high _serialInputFifo
 11952  0053CA  0100               	movlb	0	; () banked
 11953  0053CC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11954  0053CE  0EDD               	movlw	low _serialInputFifo
 11955  0053D0  6F60               	movwf	?_fifo_read& (0+255),b
 11956  0053D2  0E02               	movlw	high doModeVerbose@c
 11957  0053D4  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 11958  0053D6  0EB9               	movlw	low doModeVerbose@c
 11959  0053D8  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11960  0053DA  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 11961  0053DC  0E01               	movlw	1
 11962  0053DE  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 11963  0053E0  EC78  F012         	call	_fifo_read	;wreg free
 11964  0053E4  0560               	decf	?_fifo_read& (0+255),w,b
 11965  0053E6  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11966  0053E8  E002 EF0B  F035    	bnz	l15320
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;main.c: 629: (INTCONbits.GIE = 1);
 11970  0053EE  8EF2               	bsf	intcon,7,c	;volatile
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;main.c: 632: if ( bLocalEcho ) {
 11974  0053F0  502E               	movf	_bLocalEcho,w,c
 11975  0053F2  E00F               	bz	l14502
 11976                           
 11977                           ; BSR set to: 0
 11978                           ;main.c: 633: WriteUSART( c );
 11979  0053F4  0102               	movlb	2	; () banked
 11980  0053F6  51B9               	movf	doModeVerbose@c& (0+255),w,b
 11981  0053F8  ECF5  F007         	call	_WriteUSART
 11982  0053FC                     l505:
 11983  0053FC  A2AC               	btfss	4012,1,c	;volatile
 11984  0053FE  D7FE               	goto	l505
 11985                           
 11986                           ;main.c: 635: if ( 0x0d == c ) {
 11987  005400  0102               	movlb	2	; () banked
 11988  005402  51B9               	movf	doModeVerbose@c& (0+255),w,b
 11989  005404  0A0D               	xorlw	13
 11990  005406  E105               	bnz	l14502
 11991                           
 11992                           ; BSR set to: 2
 11993                           ;main.c: 636: WriteUSART( 0x0a );
 11994  005408  0E0A               	movlw	10
 11995  00540A  ECF5  F007         	call	_WriteUSART
 11996  00540E                     l509:
 11997  00540E  A2AC               	btfss	4012,1,c	;volatile
 11998  005410  D7FE               	goto	l509
 11999  005412                     l14502:
 12000                           
 12001                           ;main.c: 638: }
 12002                           ;main.c: 639: }
 12003                           ;main.c: 642: cmdbuf[ pos++ ] = c;
 12004  005412  0E2D               	movlw	low _cmdbuf
 12005  005414  2434               	addwf	_pos,w,c
 12006  005416  6ED9               	movwf	fsr2l,c
 12007  005418  6ADA               	clrf	fsr2h,c
 12008  00541A  0E01               	movlw	high _cmdbuf
 12009  00541C  22DA               	addwfc	fsr2h,f,c
 12010  00541E  0102               	movlb	2	; () banked
 12011  005420  C2B9  FFDF         	movff	doModeVerbose@c,indf2
 12012                           
 12013                           ; BSR set to: 2
 12014  005424  2A34               	incf	_pos,f,c
 12015                           
 12016                           ; BSR set to: 2
 12017                           ;main.c: 643: if (pos >= sizeof( cmdbuf ) ) {
 12018  005426  0E4F               	movlw	79
 12019  005428  6434               	cpfsgt	_pos,c
 12020  00542A  D001               	goto	l14510
 12021                           
 12022                           ; BSR set to: 2
 12023                           ;main.c: 646: pos = 0;
 12024  00542C  6A34               	clrf	_pos,c
 12025  00542E                     l14510:
 12026                           
 12027                           ; BSR set to: 2
 12028                           ;main.c: 647: }
 12029                           ;main.c: 650: if (0x0d == c) {
 12030  00542E  51B9               	movf	doModeVerbose@c& (0+255),w,b
 12031  005430  0A0D               	xorlw	13
 12032  005432  E002 EF0B  F035    	bnz	l15320
 12033                           
 12034                           ; BSR set to: 2
 12035                           ;main.c: 652: cmdbuf[ pos ] = 0;
 12036  005438  0E2D               	movlw	low _cmdbuf
 12037  00543A  2434               	addwf	_pos,w,c
 12038  00543C  6ED9               	movwf	fsr2l,c
 12039  00543E  6ADA               	clrf	fsr2h,c
 12040  005440  0E01               	movlw	high _cmdbuf
 12041  005442  22DA               	addwfc	fsr2h,f,c
 12042  005444  6ADF               	clrf	indf2,c
 12043                           
 12044                           ; BSR set to: 1
 12045                           ;main.c: 655: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 12046  005446  0100               	movlb	0	; () banked
 12047  005448  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12048  00544A  0E2D               	movlw	low _cmdbuf
 12049  00544C  6F6D               	movwf	?_stristr& (0+255),b
 12050  00544E  0E7C               	movlw	high STR_6
 12051  005450  6F70               	movwf	(?_stristr+3)& (0+255),b
 12052  005452  0EC0               	movlw	low STR_6
 12053  005454  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12054  005456  ECB5  F00C         	call	_stristr	;wreg free
 12055  00545A  0E2D               	movlw	low _cmdbuf
 12056  00545C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12057  00545E  0E01               	movlw	high _cmdbuf
 12058  005460  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12059  005462  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12060  005464  E102               	bnz	u18845
 12061  005466  516D               	movf	?_stristr& (0+255),w,b
 12062  005468  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12063  00546A                     u18845:
 12064  00546A  E112               	bnz	l14522
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;main.c: 656: putsUSART((char *) "Will enter bootloader now...\r\n");
 12068  00546C  0E77               	movlw	high STR_7
 12069  00546E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12070  005470  0E32               	movlw	low STR_7
 12071  005472  6F61               	movwf	?_putsUSART& (0+255),b
 12072  005474  ECBC  F00A         	call	_putsUSART	;wreg free
 12073                           
 12074                           ;main.c: 657: (Busy_eep(), Write_b_eep(0x00,0xFF));
 12075  005478  ECD3  F007         	call	_Busy_eep	;wreg free
 12076  00547C  0100               	movlb	0	; () banked
 12077  00547E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 12078  005480  6B60               	clrf	?_Write_b_eep& (0+255),b
 12079  005482  0EFF               	movlw	255
 12080  005484  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 12081  005486  ECB2  F008         	call	_Write_b_eep	;wreg free
 12082  00548A  00FF               	reset		;# 
 12083                           
 12084                           ;main.c: 659: }
 12085  00548C  EF02  F035         	goto	l15316
 12086  005490                     l14522:
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;main.c: 661: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 12090  005490  ECA8  F035         	call	PL78	;call to abstracted procedure
 12091  005494  ECB5  F00C         	call	_stristr	;wreg free
 12092  005498  0E2D               	movlw	low _cmdbuf
 12093  00549A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12094  00549C  0E01               	movlw	high _cmdbuf
 12095  00549E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12096  0054A0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12097  0054A2  E102               	bnz	u18855
 12098  0054A4  516D               	movf	?_stristr& (0+255),w,b
 12099  0054A6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12100  0054A8                     u18855:
 12101  0054A8  E10C               	bnz	l14530
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;main.c: 662: bSilent = 0;
 12105  0054AA  6A30               	clrf	_bSilent,c
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;main.c: 663: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12109  0054AC  0E00               	movlw	0
 12110  0054AE  EC0A  F008         	call	_ECANSetOperationMode
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;main.c: 664: putsUSART((char *) "+OK\r\n");
 12114  0054B2  0E7C               	movlw	high STR_9
 12115  0054B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12116  0054B6  0E64               	movlw	low STR_9
 12117  0054B8  6F61               	movwf	?_putsUSART& (0+255),b
 12118  0054BA  ECBC  F00A         	call	_putsUSART	;wreg free
 12119                           
 12120                           ;main.c: 665: }
 12121  0054BE  EF02  F035         	goto	l15316
 12122  0054C2                     l14530:
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;main.c: 667: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 12126  0054C2  0E01               	movlw	high _cmdbuf
 12127  0054C4  ECB2  F035         	call	PL84	;call to abstracted procedure
 12128  0054C8  ECB5  F00C         	call	_stristr	;wreg free
 12129  0054CC  0E2D               	movlw	low _cmdbuf
 12130  0054CE  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12131  0054D0  0E01               	movlw	high _cmdbuf
 12132  0054D2  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12133  0054D4  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12134  0054D6  E102               	bnz	u18865
 12135  0054D8  516D               	movf	?_stristr& (0+255),w,b
 12136  0054DA  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12137  0054DC                     u18865:
 12138  0054DC  E10D               	bnz	l14538
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;main.c: 668: bSilent = 1;
 12142  0054DE  0E01               	movlw	1
 12143  0054E0  6E30               	movwf	_bSilent,c
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;main.c: 669: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12147  0054E2  0E00               	movlw	0
 12148  0054E4  EC0A  F008         	call	_ECANSetOperationMode
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;main.c: 670: putsUSART((char *) "+OK\r\n");
 12152  0054E8  0E7C               	movlw	high STR_9
 12153  0054EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12154  0054EC  0E64               	movlw	low STR_9
 12155  0054EE  6F61               	movwf	?_putsUSART& (0+255),b
 12156  0054F0  ECBC  F00A         	call	_putsUSART	;wreg free
 12157                           
 12158                           ;main.c: 671: }
 12159  0054F4  EF02  F035         	goto	l15316
 12160  0054F8                     l14538:
 12161                           
 12162                           ; BSR set to: 0
 12163                           ;main.c: 673: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 12164  0054F8  0E01               	movlw	high _cmdbuf
 12165  0054FA  0100               	movlb	0	; () banked
 12166  0054FC  ECCB  F035         	call	PL100	;call to abstracted procedure
 12167  005500  ECB5  F00C         	call	_stristr	;wreg free
 12168  005504  0E2D               	movlw	low _cmdbuf
 12169  005506  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12170  005508  0E01               	movlw	high _cmdbuf
 12171  00550A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12172  00550C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12173  00550E  E102               	bnz	u18875
 12174  005510  516D               	movf	?_stristr& (0+255),w,b
 12175  005512  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12176  005514                     u18875:
 12177  005514  E10D               	bnz	l14546
 12178                           
 12179                           ; BSR set to: 0
 12180                           ;main.c: 674: bSilent = 1;
 12181  005516  0E01               	movlw	1
 12182  005518  6E30               	movwf	_bSilent,c
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;main.c: 675: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 12186  00551A  0E80               	movlw	128
 12187  00551C  EC0A  F008         	call	_ECANSetOperationMode
 12188                           
 12189                           ; BSR set to: 0
 12190                           ;main.c: 676: putsUSART((char *) "+OK\r\n");
 12191  005520  0E7C               	movlw	high STR_9
 12192  005522  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12193  005524  0E64               	movlw	low STR_9
 12194  005526  6F61               	movwf	?_putsUSART& (0+255),b
 12195  005528  ECBC  F00A         	call	_putsUSART	;wreg free
 12196                           
 12197                           ;main.c: 677: }
 12198  00552C  EF02  F035         	goto	l15316
 12199  005530                     l14546:
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;main.c: 679: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 12203  005530  0E01               	movlw	high _cmdbuf
 12204  005532  0100               	movlb	0	; () banked
 12205  005534  ECC3  F035         	call	PL96	;call to abstracted procedure
 12206  005538  ECB5  F00C         	call	_stristr	;wreg free
 12207  00553C  0E2D               	movlw	low _cmdbuf
 12208  00553E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12209  005540  0E01               	movlw	high _cmdbuf
 12210  005542  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12211  005544  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12212  005546  E102               	bnz	u18885
 12213  005548  516D               	movf	?_stristr& (0+255),w,b
 12214  00554A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12215  00554C                     u18885:
 12216  00554C  E10C               	bnz	l14554
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;main.c: 680: bSilent = 0;
 12220  00554E  6A30               	clrf	_bSilent,c
 12221                           
 12222                           ; BSR set to: 0
 12223                           ;main.c: 681: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 12224  005550  0E40               	movlw	64
 12225  005552  EC0A  F008         	call	_ECANSetOperationMode
 12226                           
 12227                           ; BSR set to: 0
 12228                           ;main.c: 682: putsUSART((char *) "+OK\r\n");
 12229  005556  0E7C               	movlw	high STR_9
 12230  005558  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12231  00555A  0E64               	movlw	low STR_9
 12232  00555C  6F61               	movwf	?_putsUSART& (0+255),b
 12233  00555E  ECBC  F00A         	call	_putsUSART	;wreg free
 12234                           
 12235                           ;main.c: 683: }
 12236  005562  EF02  F035         	goto	l15316
 12237  005566                     l14554:
 12238                           
 12239                           ; BSR set to: 0
 12240                           ;main.c: 685: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 12241  005566  0E01               	movlw	high _cmdbuf
 12242  005568  0100               	movlb	0	; () banked
 12243  00556A  ECBB  F035         	call	PL92	;call to abstracted procedure
 12244  00556E  ECB5  F00C         	call	_stristr	;wreg free
 12245  005572  0E2D               	movlw	low _cmdbuf
 12246  005574  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12247  005576  0E01               	movlw	high _cmdbuf
 12248  005578  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12249  00557A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12250  00557C  E102               	bnz	u18895
 12251  00557E  516D               	movf	?_stristr& (0+255),w,b
 12252  005580  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12253  005582                     u18895:
 12254  005582  E10C               	bnz	l14562
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;main.c: 686: bSilent = 0;
 12258  005584  6A30               	clrf	_bSilent,c
 12259                           
 12260                           ; BSR set to: 0
 12261                           ;main.c: 687: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 12262  005586  0E60               	movlw	96
 12263  005588  EC0A  F008         	call	_ECANSetOperationMode
 12264                           
 12265                           ; BSR set to: 0
 12266                           ;main.c: 688: putsUSART((char *) "+OK\r\n");
 12267  00558C  0E7C               	movlw	high STR_9
 12268  00558E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12269  005590  0E64               	movlw	low STR_9
 12270  005592  6F61               	movwf	?_putsUSART& (0+255),b
 12271  005594  ECBC  F00A         	call	_putsUSART	;wreg free
 12272                           
 12273                           ;main.c: 689: }
 12274  005598  EF02  F035         	goto	l15316
 12275  00559C                     l14562:
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;main.c: 691: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 12279  00559C  0E01               	movlw	high _cmdbuf
 12280  00559E  0100               	movlb	0	; () banked
 12281  0055A0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12282  0055A2  0E2D               	movlw	low _cmdbuf
 12283  0055A4  6F6D               	movwf	?_stristr& (0+255),b
 12284  0055A6  0E7B               	movlw	high STR_18
 12285  0055A8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12286  0055AA  0EF2               	movlw	low STR_18
 12287  0055AC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12288  0055AE  ECB5  F00C         	call	_stristr	;wreg free
 12289  0055B2  0E2D               	movlw	low _cmdbuf
 12290  0055B4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12291  0055B6  0E01               	movlw	high _cmdbuf
 12292  0055B8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12293  0055BA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12294  0055BC  E102               	bnz	u18905
 12295  0055BE  516D               	movf	?_stristr& (0+255),w,b
 12296  0055C0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12297  0055C2                     u18905:
 12298  0055C2  E10B               	bnz	l14568
 12299                           
 12300                           ; BSR set to: 0
 12301                           ;main.c: 692: printFirmwareVersion();
 12302  0055C4  EC71  F00D         	call	_printFirmwareVersion	;wreg free
 12303                           
 12304                           ;main.c: 693: putsUSART((char *) "+OK\r\n");
 12305  0055C8  0E7C               	movlw	high STR_9
 12306  0055CA  0100               	movlb	0	; () banked
 12307  0055CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12308  0055CE  0E64               	movlw	low STR_9
 12309  0055D0  6F61               	movwf	?_putsUSART& (0+255),b
 12310  0055D2  ECBC  F00A         	call	_putsUSART	;wreg free
 12311                           
 12312                           ;main.c: 694: }
 12313  0055D6  EF02  F035         	goto	l15316
 12314  0055DA                     l14568:
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;main.c: 696: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 12318  0055DA  0E01               	movlw	high _cmdbuf
 12319  0055DC  0100               	movlb	0	; () banked
 12320  0055DE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12321  0055E0  0E2D               	movlw	low _cmdbuf
 12322  0055E2  6F6D               	movwf	?_stristr& (0+255),b
 12323  0055E4  0E7C               	movlw	high STR_20
 12324  0055E6  6F70               	movwf	(?_stristr+3)& (0+255),b
 12325  0055E8  0E2D               	movlw	low STR_20
 12326  0055EA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12327  0055EC  ECB5  F00C         	call	_stristr	;wreg free
 12328  0055F0  0E2D               	movlw	low _cmdbuf
 12329  0055F2  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12330  0055F4  0E01               	movlw	high _cmdbuf
 12331  0055F6  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12332  0055F8  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12333  0055FA  E102               	bnz	u18915
 12334  0055FC  516D               	movf	?_stristr& (0+255),w,b
 12335  0055FE  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12336  005600                     u18915:
 12337  005600  E165               	bnz	l14604
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;main.c: 697: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12341  005602  506F               	movf	3951,w,c	;volatile
 12342  005604  0BE0               	andlw	224
 12343  005606  0102               	movlb	2	; () banked
 12344  005608  6FBF               	movwf	doModeVerbose@ifmode& (0+255),b
 12345                           
 12346                           ; BSR set to: 2
 12347                           ;main.c: 698: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12348  00560A  67BF               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12349  00560C  D00B               	goto	l14578
 12350                           
 12351                           ; BSR set to: 2
 12352  00560E  6630               	tstfsz	_bSilent,c
 12353  005610  D009               	goto	l14578
 12354                           
 12355                           ; BSR set to: 2
 12356                           ;main.c: 699: putsUSART((char *) "+OK - Normal mode\r\n");
 12357  005612  0E7A               	movlw	high STR_21
 12358  005614  0100               	movlb	0	; () banked
 12359  005616  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12360  005618  0E2B               	movlw	low STR_21
 12361  00561A  6F61               	movwf	?_putsUSART& (0+255),b
 12362  00561C  ECBC  F00A         	call	_putsUSART	;wreg free
 12363                           
 12364                           ;main.c: 700: }
 12365  005620  EF02  F035         	goto	l15316
 12366  005624                     l14578:
 12367                           
 12368                           ; BSR set to: 2
 12369                           ;main.c: 701: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12370  005624  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12371  005626  0E01               	movlw	1
 12372  005628  A4D8               	btfss	status,2,c
 12373  00562A  0E00               	movlw	0
 12374  00562C  1430               	andwf	_bSilent,w,c
 12375  00562E  E009               	bz	l14582
 12376                           
 12377                           ; BSR set to: 2
 12378                           ;main.c: 702: putsUSART((char *) "+OK - Silent mode\r\n");
 12379  005630  0E7A               	movlw	high STR_22
 12380  005632  0100               	movlb	0	; () banked
 12381  005634  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12382  005636  0E3F               	movlw	low STR_22
 12383  005638  6F61               	movwf	?_putsUSART& (0+255),b
 12384  00563A  ECBC  F00A         	call	_putsUSART	;wreg free
 12385                           
 12386                           ;main.c: 703: }
 12387  00563E  EF02  F035         	goto	l15316
 12388  005642                     l14582:
 12389                           
 12390                           ; BSR set to: 2
 12391                           ;main.c: 704: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12392  005642  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12393  005644  0A20               	xorlw	32
 12394  005646  E109               	bnz	l14586
 12395                           
 12396                           ; BSR set to: 2
 12397                           ;main.c: 705: putsUSART((char *) "+OK - Sleep mode\r\n");
 12398  005648  0E7A               	movlw	high STR_23
 12399  00564A  0100               	movlb	0	; () banked
 12400  00564C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12401  00564E  0E7B               	movlw	low STR_23
 12402  005650  6F61               	movwf	?_putsUSART& (0+255),b
 12403  005652  ECBC  F00A         	call	_putsUSART	;wreg free
 12404                           
 12405                           ;main.c: 706: }
 12406  005656  EF02  F035         	goto	l15316
 12407  00565A                     l14586:
 12408                           
 12409                           ; BSR set to: 2
 12410                           ;main.c: 707: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12411  00565A  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12412  00565C  0A40               	xorlw	64
 12413  00565E  E109               	bnz	l14590
 12414                           
 12415                           ; BSR set to: 2
 12416                           ;main.c: 708: putsUSART((char *) "+OK - Loopback mode\r\n");
 12417  005660  0E79               	movlw	high STR_24
 12418  005662  0100               	movlb	0	; () banked
 12419  005664  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12420  005666  0E98               	movlw	low STR_24
 12421  005668  6F61               	movwf	?_putsUSART& (0+255),b
 12422  00566A  ECBC  F00A         	call	_putsUSART	;wreg free
 12423                           
 12424                           ;main.c: 709: }
 12425  00566E  EF02  F035         	goto	l15316
 12426  005672                     l14590:
 12427                           
 12428                           ; BSR set to: 2
 12429                           ;main.c: 710: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12430  005672  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12431  005674  0A60               	xorlw	96
 12432  005676  E109               	bnz	l14594
 12433                           
 12434                           ; BSR set to: 2
 12435                           ;main.c: 711: putsUSART((char *) "+OK - Listen only mode\r\n");
 12436  005678  0E78               	movlw	high STR_25
 12437  00567A  0100               	movlb	0	; () banked
 12438  00567C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12439  00567E  0E31               	movlw	low STR_25
 12440  005680  6F61               	movwf	?_putsUSART& (0+255),b
 12441  005682  ECBC  F00A         	call	_putsUSART	;wreg free
 12442                           
 12443                           ;main.c: 712: }
 12444  005686  EF02  F035         	goto	l15316
 12445  00568A                     l14594:
 12446                           
 12447                           ; BSR set to: 2
 12448                           ;main.c: 713: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12449  00568A  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12450  00568C  0A80               	xorlw	128
 12451  00568E  E109               	bnz	l14598
 12452                           
 12453                           ; BSR set to: 2
 12454                           ;main.c: 714: putsUSART((char *) "+OK - Closed mode\r\n");
 12455  005690  0E7A               	movlw	high STR_26
 12456  005692  0100               	movlb	0	; () banked
 12457  005694  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12458  005696  0E17               	movlw	low STR_26
 12459  005698  6F61               	movwf	?_putsUSART& (0+255),b
 12460  00569A  ECBC  F00A         	call	_putsUSART	;wreg free
 12461                           
 12462                           ;main.c: 715: }
 12463  00569E  EF02  F035         	goto	l15316
 12464  0056A2                     l14598:
 12465                           
 12466                           ; BSR set to: 2
 12467                           ;main.c: 716: else if (ECAN_OP_MODE_BITS == ifmode) {
 12468  0056A2  51BF               	movf	doModeVerbose@ifmode& (0+255),w,b
 12469  0056A4  0AE0               	xorlw	224
 12470  0056A6  E109               	bnz	l14602
 12471                           
 12472                           ; BSR set to: 2
 12473                           ;main.c: 717: putsUSART((char *) "+OK - Bits mode\r\n");
 12474  0056A8  0E7A               	movlw	high STR_27
 12475  0056AA  0100               	movlb	0	; () banked
 12476  0056AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12477  0056AE  0E8E               	movlw	low STR_27
 12478  0056B0  6F61               	movwf	?_putsUSART& (0+255),b
 12479  0056B2  ECBC  F00A         	call	_putsUSART	;wreg free
 12480                           
 12481                           ;main.c: 718: }
 12482  0056B6  EF02  F035         	goto	l15316
 12483  0056BA                     l14602:
 12484                           
 12485                           ; BSR set to: 2
 12486                           ;main.c: 719: else {
 12487                           ;main.c: 720: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12488  0056BA  0E78               	movlw	high STR_28
 12489  0056BC  0100               	movlb	0	; () banked
 12490  0056BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12491  0056C0  0EC4               	movlw	low STR_28
 12492  0056C2  6F61               	movwf	?_putsUSART& (0+255),b
 12493  0056C4  ECBC  F00A         	call	_putsUSART	;wreg free
 12494  0056C8  EF02  F035         	goto	l15316
 12495  0056CC                     l14604:
 12496                           
 12497                           ; BSR set to: 0
 12498                           ;main.c: 725: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12499  0056CC  0E01               	movlw	high _cmdbuf
 12500  0056CE  0100               	movlb	0	; () banked
 12501  0056D0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12502  0056D2  0E2D               	movlw	low _cmdbuf
 12503  0056D4  6F6D               	movwf	?_stristr& (0+255),b
 12504  0056D6  0E7C               	movlw	high STR_29
 12505  0056D8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12506  0056DA  0EEA               	movlw	low STR_29
 12507  0056DC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12508  0056DE  ECB5  F00C         	call	_stristr	;wreg free
 12509  0056E2  0E2D               	movlw	low _cmdbuf
 12510  0056E4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12511  0056E6  0E01               	movlw	high _cmdbuf
 12512  0056E8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12513  0056EA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12514  0056EC  E102               	bnz	u19015
 12515  0056EE  516D               	movf	?_stristr& (0+255),w,b
 12516  0056F0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12517  0056F2                     u19015:
 12518  0056F2  E001 D0CF          	bnz	l14658
 12519                           
 12520                           ; BSR set to: 0
 12521                           ;main.c: 727: char *p = strtok(cmdbuf, ",");
 12522  0056F6  EC64  F035         	call	PL30	;call to abstracted procedure
 12523  0056FA  ECBA  F00D         	call	_strtok	;wreg free
 12524  0056FE  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12525  005702  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12526                           
 12527                           ; BSR set to: 0
 12528                           ;main.c: 730: vscpPriority = 3;
 12529  005706  0E03               	movlw	3
 12530  005708  6E3D               	movwf	_vscpPriority,c
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;main.c: 731: if ((0) != p) {
 12534  00570A  0102               	movlb	2	; () banked
 12535  00570C  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12536  00570E  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12537  005710  E008               	bz	l14614
 12538                           
 12539                           ; BSR set to: 2
 12540                           ;main.c: 732: vscpPriority = atoi(p);
 12541  005712  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12542  005716  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12543  00571A  ECAA  F015         	call	_atoi	;wreg free
 12544  00571E  5166               	movf	?_atoi& (0+255),w,b
 12545  005720  6E3D               	movwf	_vscpPriority,c
 12546  005722                     l14614:
 12547                           
 12548                           ;main.c: 733: }
 12549                           ;main.c: 736: vscpClass = 0;
 12550  005722  6A38               	clrf	_vscpClass,c
 12551  005724  6A39               	clrf	_vscpClass+1,c
 12552                           
 12553                           ;main.c: 737: if ((0) != (p = strtok((0), ","))) {
 12554  005726  EC28  F035         	call	PL6	;call to abstracted procedure
 12555  00572A  ECBA  F00D         	call	_strtok	;wreg free
 12556  00572E  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12557  005732  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12558  005736  0102               	movlb	2	; () banked
 12559  005738  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12560  00573A  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12561  00573C  E00A               	bz	l14620
 12562                           
 12563                           ; BSR set to: 2
 12564                           ;main.c: 738: vscpClass = atoi(p);
 12565  00573E  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12566  005742  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12567  005746  ECAA  F015         	call	_atoi	;wreg free
 12568  00574A  C066  F038         	movff	?_atoi,_vscpClass
 12569  00574E  C067  F039         	movff	?_atoi+1,_vscpClass+1
 12570  005752                     l14620:
 12571                           
 12572                           ;main.c: 739: }
 12573                           ;main.c: 742: vscpType = 0;
 12574  005752  6A3F               	clrf	_vscpType,c
 12575                           
 12576                           ;main.c: 743: if ((0) != (p = strtok((0), ","))) {
 12577  005754  EC28  F035         	call	PL6	;call to abstracted procedure
 12578  005758  ECBA  F00D         	call	_strtok	;wreg free
 12579  00575C  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12580  005760  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12581  005764  0102               	movlb	2	; () banked
 12582  005766  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12583  005768  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12584  00576A  E008               	bz	l14626
 12585                           
 12586                           ; BSR set to: 2
 12587                           ;main.c: 744: vscpType = atoi(p);
 12588  00576C  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12589  005770  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12590  005774  ECAA  F015         	call	_atoi	;wreg free
 12591  005778  5166               	movf	?_atoi& (0+255),w,b
 12592  00577A  6E3F               	movwf	_vscpType,c
 12593  00577C                     l14626:
 12594                           
 12595                           ;main.c: 745: }
 12596                           ;main.c: 748: vscpNodeId = 0;
 12597  00577C  6A3C               	clrf	_vscpNodeId,c
 12598                           
 12599                           ;main.c: 749: if ((0) != (p = strtok((0), ","))) {
 12600  00577E  EC28  F035         	call	PL6	;call to abstracted procedure
 12601  005782  ECBA  F00D         	call	_strtok	;wreg free
 12602  005786  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12603  00578A  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12604  00578E  0102               	movlb	2	; () banked
 12605  005790  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12606  005792  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12607  005794  E008               	bz	l14632
 12608                           
 12609                           ; BSR set to: 2
 12610                           ;main.c: 750: vscpNodeId = atoi(p);
 12611  005796  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12612  00579A  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12613  00579E  ECAA  F015         	call	_atoi	;wreg free
 12614  0057A2  5166               	movf	?_atoi& (0+255),w,b
 12615  0057A4  6E3C               	movwf	_vscpNodeId,c
 12616  0057A6                     l14632:
 12617                           
 12618                           ;main.c: 751: }
 12619                           ;main.c: 754: vscpSize = 0;
 12620  0057A6  6A3E               	clrf	_vscpSize,c
 12621                           
 12622                           ;main.c: 755: if ((0) != (p = strtok((0), ","))) {
 12623  0057A8  EC28  F035         	call	PL6	;call to abstracted procedure
 12624  0057AC  ECBA  F00D         	call	_strtok	;wreg free
 12625  0057B0  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12626  0057B4  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12627  0057B8  0102               	movlb	2	; () banked
 12628  0057BA  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12629  0057BC  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12630  0057BE  E008               	bz	l14638
 12631                           
 12632                           ; BSR set to: 2
 12633                           ;main.c: 756: vscpSize = atoi(p);
 12634  0057C0  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12635  0057C4  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12636  0057C8  ECAA  F015         	call	_atoi	;wreg free
 12637  0057CC  5166               	movf	?_atoi& (0+255),w,b
 12638  0057CE  6E3E               	movwf	_vscpSize,c
 12639  0057D0                     l14638:
 12640                           
 12641                           ;main.c: 757: }
 12642                           ;main.c: 759: memset( vscpData, 0, 8 );
 12643  0057D0  0E01               	movlw	high _vscpData
 12644  0057D2  0100               	movlb	0	; () banked
 12645  0057D4  6F61               	movwf	(?_memset+1)& (0+255),b
 12646  0057D6  0EE5               	movlw	low _vscpData
 12647  0057D8  6F60               	movwf	?_memset& (0+255),b
 12648  0057DA  6B63               	clrf	(?_memset+3)& (0+255),b
 12649  0057DC  6B62               	clrf	(?_memset+2)& (0+255),b
 12650  0057DE  6B65               	clrf	(?_memset+5)& (0+255),b
 12651  0057E0  0E08               	movlw	8
 12652  0057E2  6F64               	movwf	(?_memset+4)& (0+255),b
 12653  0057E4  EC54  F008         	call	_memset	;wreg free
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;main.c: 760: for (i = 0; i < vscpSize; i++) {
 12657  0057E8  0102               	movlb	2	; () banked
 12658  0057EA  6BB0               	clrf	doModeVerbose@i& (0+255),b
 12659  0057EC  D01D               	goto	l14648
 12660  0057EE                     l14642:
 12661                           
 12662                           ; BSR set to: 2
 12663                           ;main.c: 761: if ((0) != (p = strtok((0), ","))) {
 12664  0057EE  EC28  F035         	call	PL6	;call to abstracted procedure
 12665  0057F2  ECBA  F00D         	call	_strtok	;wreg free
 12666  0057F6  C06C  F2C0         	movff	?_strtok,doModeVerbose@p
 12667  0057FA  C06D  F2C1         	movff	?_strtok+1,doModeVerbose@p+1
 12668  0057FE  0102               	movlb	2	; () banked
 12669  005800  51C1               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12670  005802  11C0               	iorwf	doModeVerbose@p& (0+255),w,b
 12671  005804  E014               	bz	l14650
 12672                           
 12673                           ; BSR set to: 2
 12674                           ;main.c: 762: vscpData[ i ] = atoi(p);
 12675  005806  0EE5               	movlw	low _vscpData
 12676  005808  25B0               	addwf	doModeVerbose@i& (0+255),w,b
 12677  00580A  6ED9               	movwf	fsr2l,c
 12678  00580C  6ADA               	clrf	fsr2h,c
 12679  00580E  0101               	movlb	1	; () banked
 12680  005810  0E01               	movlw	high _vscpData
 12681  005812  22DA               	addwfc	fsr2h,f,c
 12682  005814  C2C0  F066         	movff	doModeVerbose@p,?_atoi
 12683  005818  C2C1  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12684  00581C  ECAA  F015         	call	_atoi	;wreg free
 12685  005820  5166               	movf	?_atoi& (0+255),w,b
 12686  005822  6EDF               	movwf	indf2,c
 12687                           
 12688                           ; BSR set to: 0
 12689                           
 12690                           ;main.c: 763: }
 12691  005824  0102               	movlb	2	; () banked
 12692  005826  2BB0               	incf	doModeVerbose@i& (0+255),f,b
 12693  005828                     l14648:
 12694                           
 12695                           ; BSR set to: 2
 12696  005828  503E               	movf	_vscpSize,w,c
 12697  00582A  5DB0               	subwf	doModeVerbose@i& (0+255),w,b
 12698  00582C  E3E0               	bnc	l14642
 12699  00582E                     l14650:
 12700                           
 12701                           ; BSR set to: 2
 12702                           ;main.c: 766: }
 12703                           ;main.c: 767: }
 12704                           ;main.c: 769: if ( sendVSCPFrame(vscpClass,
 12705                           ;main.c: 770: vscpType,
 12706                           ;main.c: 771: vscpNodeId,
 12707                           ;main.c: 772: vscpPriority,
 12708                           ;main.c: 773: vscpSize,
 12709                           ;main.c: 774: vscpData ) ) {
 12710  00582E  C038  F098         	movff	_vscpClass,?_sendVSCPFrame
 12711  005832  C039  F099         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12712  005836  C03F  F09A         	movff	_vscpType,?_sendVSCPFrame+2
 12713  00583A  C03C  F09B         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12714  00583E  C03D  F09C         	movff	_vscpPriority,?_sendVSCPFrame+4
 12715  005842  C03E  F09D         	movff	_vscpSize,?_sendVSCPFrame+5
 12716  005846  0E01               	movlw	high _vscpData
 12717  005848  0100               	movlb	0	; () banked
 12718  00584A  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12719  00584C  0EE5               	movlw	low _vscpData
 12720  00584E  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12721  005850  EC34  F010         	call	_sendVSCPFrame	;wreg free
 12722  005854  0900               	iorlw	0
 12723  005856  E015               	bz	l14656
 12724                           
 12725                           ;main.c: 776: cntTxFrames++;
 12726  005858  0101               	movlb	1	; () banked
 12727  00585A  2B14               	incf	_cntTxFrames& (0+255),f,b
 12728  00585C  0E00               	movlw	0
 12729  00585E  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12730  005860  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12731  005862  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12732                           
 12733                           ;main.c: 777: cntTxBytes += vscpSize;
 12734  005864  503E               	movf	_vscpSize,w,c
 12735  005866  2710               	addwf	_cntTxBytes& (0+255),f,b
 12736  005868  0E00               	movlw	0
 12737  00586A  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12738  00586C  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12739  00586E  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12740                           
 12741                           ; BSR set to: 1
 12742                           ;main.c: 778: putsUSART((char *) "+OK\r\n");
 12743  005870  0E7C               	movlw	high STR_9
 12744  005872  0100               	movlb	0	; () banked
 12745  005874  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12746  005876  0E64               	movlw	low STR_9
 12747  005878  6F61               	movwf	?_putsUSART& (0+255),b
 12748  00587A  ECBC  F00A         	call	_putsUSART	;wreg free
 12749                           
 12750                           ;main.c: 779: }
 12751  00587E  EF02  F035         	goto	l15316
 12752  005882                     l14656:
 12753                           
 12754                           ;main.c: 780: else {
 12755                           ;main.c: 781: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12756  005882  0E76               	movlw	high STR_37
 12757  005884  0100               	movlb	0	; () banked
 12758  005886  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12759  005888  0EAF               	movlw	low STR_37
 12760  00588A  6F61               	movwf	?_putsUSART& (0+255),b
 12761  00588C  ECBC  F00A         	call	_putsUSART	;wreg free
 12762  005890  EF02  F035         	goto	l15316
 12763  005894                     l14658:
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;main.c: 785: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12767  005894  0E01               	movlw	high _cmdbuf
 12768  005896  0100               	movlb	0	; () banked
 12769  005898  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12770  00589A  0E2D               	movlw	low _cmdbuf
 12771  00589C  6F6D               	movwf	?_stristr& (0+255),b
 12772  00589E  0E7C               	movlw	high STR_38
 12773  0058A0  6F70               	movwf	(?_stristr+3)& (0+255),b
 12774  0058A2  0EE7               	movlw	low STR_38
 12775  0058A4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12776  0058A6  ECB5  F00C         	call	_stristr	;wreg free
 12777  0058AA  0E2D               	movlw	low _cmdbuf
 12778  0058AC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12779  0058AE  0E01               	movlw	high _cmdbuf
 12780  0058B0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12781  0058B2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12782  0058B4  E102               	bnz	u19105
 12783  0058B6  516D               	movf	?_stristr& (0+255),w,b
 12784  0058B8  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12785  0058BA                     u19105:
 12786  0058BA  E116               	bnz	l14666
 12787                           
 12788                           ; BSR set to: 0
 12789                           ;main.c: 786: if (receivePrintEventVerbose()) {
 12790  0058BC  ECA8  F021         	call	_receivePrintEventVerbose	;wreg free
 12791  0058C0  0900               	iorlw	0
 12792  0058C2  E009               	bz	l14664
 12793                           
 12794                           ;main.c: 787: putsUSART((char *) "+OK\r\n");
 12795  0058C4  0E7C               	movlw	high STR_9
 12796  0058C6  0100               	movlb	0	; () banked
 12797  0058C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12798  0058CA  0E64               	movlw	low STR_9
 12799  0058CC  6F61               	movwf	?_putsUSART& (0+255),b
 12800  0058CE  ECBC  F00A         	call	_putsUSART	;wreg free
 12801                           
 12802                           ;main.c: 788: }
 12803  0058D2  EF02  F035         	goto	l15316
 12804  0058D6                     l14664:
 12805                           
 12806                           ;main.c: 789: else {
 12807                           ;main.c: 790: putsUSART((char *) "+OK - no events\r\n");
 12808  0058D6  0E7A               	movlw	high STR_40
 12809  0058D8  0100               	movlb	0	; () banked
 12810  0058DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12811  0058DC  0EA0               	movlw	low STR_40
 12812  0058DE  6F61               	movwf	?_putsUSART& (0+255),b
 12813  0058E0  ECBC  F00A         	call	_putsUSART	;wreg free
 12814  0058E4  EF02  F035         	goto	l15316
 12815  0058E8                     l14666:
 12816                           
 12817                           ; BSR set to: 0
 12818                           ;main.c: 794: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12819  0058E8  0E01               	movlw	high _cmdbuf
 12820  0058EA  0100               	movlb	0	; () banked
 12821  0058EC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12822  0058EE  0E2D               	movlw	low _cmdbuf
 12823  0058F0  6F6D               	movwf	?_stristr& (0+255),b
 12824  0058F2  0E7C               	movlw	high STR_41
 12825  0058F4  6F70               	movwf	(?_stristr+3)& (0+255),b
 12826  0058F6  0EBB               	movlw	low STR_41
 12827  0058F8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12828  0058FA  ECB5  F00C         	call	_stristr	;wreg free
 12829  0058FE  0E2D               	movlw	low _cmdbuf
 12830  005900  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12831  005902  0E01               	movlw	high _cmdbuf
 12832  005904  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12833  005906  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12834  005908  E102               	bnz	u19125
 12835  00590A  516D               	movf	?_stristr& (0+255),w,b
 12836  00590C  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12837  00590E                     u19125:
 12838  00590E  E10B               	bnz	l14672
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;main.c: 795: printStatistics();
 12842  005910  EC5D  F01B         	call	_printStatistics	;wreg free
 12843                           
 12844                           ;main.c: 796: putsUSART((char *) "+OK\r\n");
 12845  005914  0E7C               	movlw	high STR_9
 12846  005916  0100               	movlb	0	; () banked
 12847  005918  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12848  00591A  0E64               	movlw	low STR_9
 12849  00591C  6F61               	movwf	?_putsUSART& (0+255),b
 12850  00591E  ECBC  F00A         	call	_putsUSART	;wreg free
 12851                           
 12852                           ;main.c: 797: }
 12853  005922  EF02  F035         	goto	l15316
 12854  005926                     l14672:
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;main.c: 799: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12858  005926  0E01               	movlw	high _cmdbuf
 12859  005928  0100               	movlb	0	; () banked
 12860  00592A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12861  00592C  0E2D               	movlw	low _cmdbuf
 12862  00592E  6F6D               	movwf	?_stristr& (0+255),b
 12863  005930  0E7C               	movlw	high STR_43
 12864  005932  6F70               	movwf	(?_stristr+3)& (0+255),b
 12865  005934  0ED5               	movlw	low STR_43
 12866  005936  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12867  005938  ECB5  F00C         	call	_stristr	;wreg free
 12868  00593C  0E2D               	movlw	low _cmdbuf
 12869  00593E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12870  005940  0E01               	movlw	high _cmdbuf
 12871  005942  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12872  005944  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12873  005946  E102               	bnz	u19135
 12874  005948  516D               	movf	?_stristr& (0+255),w,b
 12875  00594A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12876  00594C                     u19135:
 12877  00594C  E10B               	bnz	l14678
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;main.c: 800: printErrors();
 12881  00594E  ECF2  F022         	call	_printErrors	;wreg free
 12882                           
 12883                           ;main.c: 801: putsUSART((char *) "+OK\r\n");
 12884  005952  0E7C               	movlw	high STR_9
 12885  005954  0100               	movlb	0	; () banked
 12886  005956  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12887  005958  0E64               	movlw	low STR_9
 12888  00595A  6F61               	movwf	?_putsUSART& (0+255),b
 12889  00595C  ECBC  F00A         	call	_putsUSART	;wreg free
 12890                           
 12891                           ;main.c: 802: }
 12892  005960  EF02  F035         	goto	l15316
 12893  005964                     l14678:
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;main.c: 804: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12897  005964  0E01               	movlw	high _cmdbuf
 12898  005966  0100               	movlb	0	; () banked
 12899  005968  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12900  00596A  0E2D               	movlw	low _cmdbuf
 12901  00596C  6F6D               	movwf	?_stristr& (0+255),b
 12902  00596E  0E7C               	movlw	high STR_45
 12903  005970  6F70               	movwf	(?_stristr+3)& (0+255),b
 12904  005972  0EB6               	movlw	low STR_45
 12905  005974  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12906  005976  ECB5  F00C         	call	_stristr	;wreg free
 12907  00597A  0E2D               	movlw	low _cmdbuf
 12908  00597C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12909  00597E  0E01               	movlw	high _cmdbuf
 12910  005980  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12911  005982  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12912  005984  E102               	bnz	u19145
 12913  005986  516D               	movf	?_stristr& (0+255),w,b
 12914  005988  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12915  00598A                     u19145:
 12916  00598A  E10B               	bnz	l14682
 12917                           
 12918                           ; BSR set to: 0
 12919                           ;main.c: 805: printHelp();
 12920  00598C  EC2C  F01C         	call	_printHelp	;wreg free
 12921                           
 12922                           ;main.c: 806: putsUSART((char *) "+OK\r\n");
 12923  005990  0E7C               	movlw	high STR_9
 12924  005992  0100               	movlb	0	; () banked
 12925  005994  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12926  005996  0E64               	movlw	low STR_9
 12927  005998  6F61               	movwf	?_putsUSART& (0+255),b
 12928  00599A  ECBC  F00A         	call	_putsUSART	;wreg free
 12929                           
 12930                           ;main.c: 807: }
 12931  00599E  EF02  F035         	goto	l15316
 12932  0059A2                     l14682:
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;main.c: 809: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12936  0059A2  0E01               	movlw	high _cmdbuf
 12937  0059A4  0100               	movlb	0	; () banked
 12938  0059A6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12939  0059A8  0E2D               	movlw	low _cmdbuf
 12940  0059AA  6F6D               	movwf	?_stristr& (0+255),b
 12941  0059AC  0E7C               	movlw	high STR_47
 12942  0059AE  6F70               	movwf	(?_stristr+3)& (0+255),b
 12943  0059B0  0E93               	movlw	low STR_47
 12944  0059B2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12945  0059B4  ECB5  F00C         	call	_stristr	;wreg free
 12946  0059B8  0E2D               	movlw	low _cmdbuf
 12947  0059BA  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12948  0059BC  0E01               	movlw	high _cmdbuf
 12949  0059BE  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12950  0059C0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12951  0059C2  E102               	bnz	u19155
 12952  0059C4  516D               	movf	?_stristr& (0+255),w,b
 12953  0059C6  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12954  0059C8                     u19155:
 12955  0059C8  E10B               	bnz	l14688
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;main.c: 810: findNodes();
 12959  0059CA  ECB7  F016         	call	_findNodes	;wreg free
 12960                           
 12961                           ;main.c: 811: putsUSART((char *) "+OK\r\n");
 12962  0059CE  0E7C               	movlw	high STR_9
 12963  0059D0  0100               	movlb	0	; () banked
 12964  0059D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12965  0059D4  0E64               	movlw	low STR_9
 12966  0059D6  6F61               	movwf	?_putsUSART& (0+255),b
 12967  0059D8  ECBC  F00A         	call	_putsUSART	;wreg free
 12968                           
 12969                           ;main.c: 812: }
 12970  0059DC  EF02  F035         	goto	l15316
 12971  0059E0                     l14688:
 12972                           
 12973                           ; BSR set to: 0
 12974                           ;main.c: 815: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12975  0059E0  0E01               	movlw	high _cmdbuf
 12976  0059E2  0100               	movlb	0	; () banked
 12977  0059E4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12978  0059E6  0E2D               	movlw	low _cmdbuf
 12979  0059E8  6F6D               	movwf	?_stristr& (0+255),b
 12980  0059EA  0E7C               	movlw	high STR_49
 12981  0059EC  6F70               	movwf	(?_stristr+3)& (0+255),b
 12982  0059EE  0E98               	movlw	low STR_49
 12983  0059F0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12984  0059F2  ECB5  F00C         	call	_stristr	;wreg free
 12985  0059F6  0E2D               	movlw	low _cmdbuf
 12986  0059F8  6FCC               	movwf	??_doModeVerbose& (0+255),b
 12987  0059FA  0E01               	movlw	high _cmdbuf
 12988  0059FC  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 12989  0059FE  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12990  005A00  E102               	bnz	u19165
 12991  005A02  516D               	movf	?_stristr& (0+255),w,b
 12992  005A04  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 12993  005A06                     u19165:
 12994  005A06  E001 D218          	bnz	l14856
 12995                           
 12996                           ; BSR set to: 0
 12997                           ;main.c: 817: uint8_t i;
 12998                           ;main.c: 818: uint8_t nodeid;
 12999                           ;main.c: 819: uint8_t page = 0;
 13000  005A0A  0102               	movlb	2	; () banked
 13001  005A0C  6BB5               	clrf	doModeVerbose@page& (0+255),b
 13002                           
 13003                           ; BSR set to: 2
 13004                           ;main.c: 820: uint8_t reg;
 13005                           ;main.c: 821: uint8_t value;
 13006                           ;main.c: 822: uint8_t count = 1;
 13007  005A0E  0E01               	movlw	1
 13008  005A10  6FB2               	movwf	doModeVerbose@count& (0+255),b
 13009                           
 13010                           ; BSR set to: 2
 13011                           ;main.c: 824: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13012  005A12  506F               	movf	3951,w,c	;volatile
 13013  005A14  0BE0               	andlw	224
 13014  005A16  E012               	bz	l14704
 13015                           
 13016                           ; BSR set to: 2
 13017                           ;main.c: 825: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 13018  005A18  0E70               	movlw	high STR_50
 13019  005A1A  0100               	movlb	0	; () banked
 13020  005A1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13021  005A1E  0EC7               	movlw	low STR_50
 13022  005A20  6F61               	movwf	?_putsUSART& (0+255),b
 13023  005A22  ECBC  F00A         	call	_putsUSART	;wreg free
 13024  005A26                     l14698:
 13025                           
 13026                           ;main.c: 826: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 13027  005A26  0E01               	movlw	high _cmdbuf
 13028  005A28  0100               	movlb	0	; () banked
 13029  005A2A  6F61               	movwf	(?_memset+1)& (0+255),b
 13030  005A2C  0E2D               	movlw	low _cmdbuf
 13031  005A2E  EC48  F00E         	call	PL20	;call to abstracted procedure
 13032  005A32  EC54  F008         	call	_memset	;wreg free
 13033                           
 13034                           ; BSR set to: 0
 13035                           ;main.c: 827: pos = 0;
 13036  005A36  6A34               	clrf	_pos,c
 13037  005A38  EF0C  F035         	goto	l572
 13038  005A3C                     l14704:
 13039                           
 13040                           ; BSR set to: 2
 13041                           ;main.c: 829: }
 13042                           ;main.c: 831: strcpy(cmdbuf, cmdbuf + 5);
 13043  005A3C  EC0D  F035         	call	PL2	;call to abstracted procedure
 13044  005A40  EC6B  F008         	call	_strcpy	;wreg free
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;main.c: 832: char *p = strtok(cmdbuf, " ");
 13048  005A44  0E01               	movlw	high _cmdbuf
 13049  005A46  EC6E  F035         	call	PL36	;call to abstracted procedure
 13050  005A4A  ECBA  F00D         	call	_strtok	;wreg free
 13051  005A4E  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1195
 13052  005A52  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1195+1
 13053                           
 13054                           ; BSR set to: 0
 13055                           ;main.c: 833: if ((0) != p) {
 13056  005A56  0102               	movlb	2	; () banked
 13057  005A58  51BC               	movf	(doModeVerbose@p_1195+1)& (0+255),w,b
 13058  005A5A  11BB               	iorwf	doModeVerbose@p_1195& (0+255),w,b
 13059  005A5C  E00A               	bz	l14712
 13060                           
 13061                           ; BSR set to: 2
 13062                           ;main.c: 834: nodeid = atoi(p);
 13063  005A5E  C2BB  F066         	movff	doModeVerbose@p_1195,?_atoi
 13064  005A62  C2BC  F067         	movff	doModeVerbose@p_1195+1,?_atoi+1
 13065  005A66  ECAA  F015         	call	_atoi	;wreg free
 13066  005A6A  5166               	movf	?_atoi& (0+255),w,b
 13067  005A6C  0102               	movlb	2	; () banked
 13068  005A6E  6FB3               	movwf	doModeVerbose@nodeid& (0+255),b
 13069                           
 13070                           ;main.c: 835: }
 13071  005A70  D008               	goto	l14720
 13072  005A72                     l14712:
 13073                           
 13074                           ; BSR set to: 2
 13075                           ;main.c: 836: else {
 13076                           ;main.c: 837: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13077  005A72  0E78               	movlw	high STR_52
 13078  005A74  0100               	movlb	0	; () banked
 13079  005A76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13080  005A78  0EAC               	movlw	low STR_52
 13081  005A7A  6F61               	movwf	?_putsUSART& (0+255),b
 13082  005A7C  ECBC  F00A         	call	_putsUSART	;wreg free
 13083  005A80  D7D2               	goto	l14698
 13084  005A82                     l14720:
 13085                           
 13086                           ; BSR set to: 2
 13087                           ;main.c: 841: }
 13088                           ;main.c: 843: if ((0) != (p = strtok((0), " "))) {
 13089  005A82  EC5C  F035         	call	PL28	;call to abstracted procedure
 13090  005A86  ECBA  F00D         	call	_strtok	;wreg free
 13091  005A8A  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1195
 13092  005A8E  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1195+1
 13093  005A92  0102               	movlb	2	; () banked
 13094  005A94  51BC               	movf	(doModeVerbose@p_1195+1)& (0+255),w,b
 13095  005A96  11BB               	iorwf	doModeVerbose@p_1195& (0+255),w,b
 13096  005A98  E034               	bz	l14728
 13097                           
 13098                           ; BSR set to: 2
 13099                           ;main.c: 845: char *preg;
 13100                           ;main.c: 846: if (preg = strchr(p, ':')) {
 13101  005A9A  C2BB  F060         	movff	doModeVerbose@p_1195,?_strchr
 13102  005A9E  C2BC  F061         	movff	doModeVerbose@p_1195+1,?_strchr+1
 13103  005AA2  0100               	movlb	0	; () banked
 13104  005AA4  6B63               	clrf	(?_strchr+3)& (0+255),b
 13105  005AA6  0E3A               	movlw	58
 13106  005AA8  6F62               	movwf	(?_strchr+2)& (0+255),b
 13107  005AAA  ECA3  F00B         	call	_strchr	;wreg free
 13108  005AAE  C060  F284         	movff	?_strchr,doModeVerbose@preg
 13109  005AB2  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 13110  005AB6  0102               	movlb	2	; () banked
 13111  005AB8  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 13112  005ABA  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 13113  005ABC  E018               	bz	l14726
 13114                           
 13115                           ; BSR set to: 2
 13116                           ;main.c: 847: page = atoi(p);
 13117  005ABE  C2BB  F066         	movff	doModeVerbose@p_1195,?_atoi
 13118  005AC2  C2BC  F067         	movff	doModeVerbose@p_1195+1,?_atoi+1
 13119  005AC6  ECAA  F015         	call	_atoi	;wreg free
 13120  005ACA  5166               	movf	?_atoi& (0+255),w,b
 13121  005ACC  0102               	movlb	2	; () banked
 13122  005ACE  6FB5               	movwf	doModeVerbose@page& (0+255),b
 13123                           
 13124                           ;main.c: 848: reg = atoi(preg + 1);
 13125  005AD0  2984               	incf	doModeVerbose@preg& (0+255),w,b
 13126  005AD2  0100               	movlb	0	; () banked
 13127  005AD4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13128  005AD6  0E00               	movlw	0
 13129  005AD8  0102               	movlb	2	; () banked
 13130  005ADA  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 13131  005ADC  0100               	movlb	0	; () banked
 13132  005ADE  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13133  005AE0  C0CC  F066         	movff	??_doModeVerbose,?_atoi
 13134  005AE4  C0CD  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13135  005AE8  ECAA  F015         	call	_atoi	;wreg free
 13136  005AEC  D006               	goto	L5
 13137  005AEE                     l14726:
 13138                           
 13139                           ; BSR set to: 2
 13140                           ;main.c: 850: else {
 13141                           ;main.c: 851: reg = atoi(p);
 13142  005AEE  C2BB  F066         	movff	doModeVerbose@p_1195,?_atoi
 13143  005AF2  C2BC  F067         	movff	doModeVerbose@p_1195+1,?_atoi+1
 13144  005AF6  ECAA  F015         	call	_atoi	;wreg free
 13145  005AFA                     L5:
 13146  005AFA  5166               	movf	?_atoi& (0+255),w,b
 13147  005AFC  0102               	movlb	2	; () banked
 13148  005AFE  6FB6               	movwf	doModeVerbose@reg& (0+255),b
 13149  005B00  D008               	goto	l14736
 13150  005B02                     l14728:
 13151                           
 13152                           ; BSR set to: 2
 13153                           ;main.c: 855: else {
 13154                           ;main.c: 856: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13155  005B02  0E76               	movlw	high STR_54
 13156  005B04  0100               	movlb	0	; () banked
 13157  005B06  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13158  005B08  0EF1               	movlw	low STR_54
 13159  005B0A  6F61               	movwf	?_putsUSART& (0+255),b
 13160  005B0C  ECBC  F00A         	call	_putsUSART	;wreg free
 13161  005B10  D78A               	goto	l14698
 13162  005B12                     l14736:
 13163                           
 13164                           ; BSR set to: 2
 13165                           ;main.c: 860: }
 13166                           ;main.c: 863: if ((0) != (p = strtok((0), " "))) {
 13167  005B12  EC5C  F035         	call	PL28	;call to abstracted procedure
 13168  005B16  ECBA  F00D         	call	_strtok	;wreg free
 13169  005B1A  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1195
 13170  005B1E  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1195+1
 13171  005B22  0102               	movlb	2	; () banked
 13172  005B24  51BC               	movf	(doModeVerbose@p_1195+1)& (0+255),w,b
 13173  005B26  11BB               	iorwf	doModeVerbose@p_1195& (0+255),w,b
 13174  005B28  E00D               	bz	l579
 13175                           
 13176                           ; BSR set to: 2
 13177                           ;main.c: 864: count = atoi(p);
 13178  005B2A  C2BB  F066         	movff	doModeVerbose@p_1195,?_atoi
 13179  005B2E  C2BC  F067         	movff	doModeVerbose@p_1195+1,?_atoi+1
 13180  005B32  ECAA  F015         	call	_atoi	;wreg free
 13181  005B36  5166               	movf	?_atoi& (0+255),w,b
 13182  005B38  0102               	movlb	2	; () banked
 13183  005B3A  6FB2               	movwf	doModeVerbose@count& (0+255),b
 13184                           
 13185                           ; BSR set to: 2
 13186                           ;main.c: 865: if (0 == count) count = 1;
 13187  005B3C  67B2               	tstfsz	doModeVerbose@count& (0+255),b
 13188  005B3E  D002               	goto	l579
 13189                           
 13190                           ; BSR set to: 2
 13191  005B40  0E01               	movlw	1
 13192  005B42  6FB2               	movwf	doModeVerbose@count& (0+255),b
 13193  005B44                     l579:
 13194                           
 13195                           ; BSR set to: 2
 13196                           ;main.c: 866: }
 13197                           ;main.c: 868: BOOL rv = 1;
 13198  005B44  0E01               	movlw	1
 13199  005B46  6FA6               	movwf	doModeVerbose@rv& (0+255),b
 13200                           
 13201                           ; BSR set to: 2
 13202                           ;main.c: 869: for (i = 0; i < count; i++) {
 13203  005B48  6BB7               	clrf	doModeVerbose@i_1188& (0+255),b
 13204  005B4A  D15F               	goto	l14848
 13205  005B4C                     l14746:
 13206                           
 13207                           ; BSR set to: 2
 13208                           ;main.c: 871: if (readRegisterExtended(nodeid,
 13209                           ;main.c: 872: page,
 13210                           ;main.c: 873: (reg + i) & 0xff,
 13211                           ;main.c: 874: rwtimeout,
 13212                           ;main.c: 875: &value)) {
 13213  005B4C  0100               	movlb	0	; () banked
 13214  005B4E  C2B5  F0B8         	movff	doModeVerbose@page,?_readRegisterExtended
 13215  005B52  6BB9               	clrf	(?_readRegisterExtended+1)& (0+255),b
 13216  005B54  0102               	movlb	2	; () banked
 13217  005B56  51B6               	movf	doModeVerbose@reg& (0+255),w,b
 13218  005B58  25B7               	addwf	doModeVerbose@i_1188& (0+255),w,b
 13219  005B5A  0100               	movlb	0	; () banked
 13220  005B5C  6FBA               	movwf	(?_readRegisterExtended+2)& (0+255),b
 13221  005B5E  C035  F0BB         	movff	_rwtimeout,?_readRegisterExtended+3
 13222  005B62  6BBC               	clrf	(?_readRegisterExtended+4)& (0+255),b
 13223  005B64  0E02               	movlw	high doModeVerbose@value
 13224  005B66  6FBE               	movwf	(?_readRegisterExtended+6)& (0+255),b
 13225  005B68  0EBA               	movlw	low doModeVerbose@value
 13226  005B6A  6FBD               	movwf	(?_readRegisterExtended+5)& (0+255),b
 13227  005B6C  0102               	movlb	2	; () banked
 13228  005B6E  51B3               	movf	doModeVerbose@nodeid& (0+255),w,b
 13229  005B70  EC32  F014         	call	_readRegisterExtended
 13230  005B74  0900               	iorlw	0
 13231  005B76  E101 D0C8          	bz	l583
 13232                           
 13233                           ;main.c: 876: putsUSART((char *) "+OK - nodeid=");
 13234  005B7A  0E7B               	movlw	high STR_56
 13235  005B7C  0100               	movlb	0	; () banked
 13236  005B7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13237  005B80  0E36               	movlw	low STR_56
 13238  005B82  6F61               	movwf	?_putsUSART& (0+255),b
 13239  005B84  ECBC  F00A         	call	_putsUSART	;wreg free
 13240                           
 13241                           ;main.c: 877: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13242  005B88  662C               	tstfsz	_bHex,c
 13243  005B8A  D005               	goto	l14754
 13244  005B8C  0E7C               	movlw	high STR_58
 13245  005B8E  0102               	movlb	2	; () banked
 13246  005B90  6F93               	movwf	(_doModeVerbose$1207+1)& (0+255),b
 13247  005B92  0E6A               	movlw	low STR_58
 13248  005B94  D004               	goto	L6
 13249  005B96                     l14754:
 13250  005B96  0E7B               	movlw	high STR_57
 13251  005B98  0102               	movlb	2	; () banked
 13252  005B9A  6F93               	movwf	(_doModeVerbose$1207+1)& (0+255),b
 13253  005B9C  0E66               	movlw	low STR_57
 13254  005B9E                     L6:
 13255  005B9E  6F92               	movwf	_doModeVerbose$1207& (0+255),b
 13256                           
 13257                           ; BSR set to: 2
 13258  005BA0  0E01               	movlw	high _wrkbuf
 13259  005BA2  0100               	movlb	0	; () banked
 13260  005BA4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13261  005BA6  0E7D               	movlw	low _wrkbuf
 13262  005BA8  6F76               	movwf	?_sprintf& (0+255),b
 13263  005BAA  C292  F078         	movff	_doModeVerbose$1207,?_sprintf+2
 13264  005BAE  C293  F079         	movff	_doModeVerbose$1207+1,?_sprintf+3
 13265  005BB2  C2B3  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13266  005BB6  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13267  005BB8  EC3F  F026         	call	_sprintf	;wreg free
 13268                           
 13269                           ; BSR set to: 0
 13270                           ;main.c: 878: putsUSART(wrkbuf);
 13271  005BBC  0E01               	movlw	high _wrkbuf
 13272  005BBE  0100               	movlb	0	; () banked
 13273  005BC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13274  005BC2  0E7D               	movlw	low _wrkbuf
 13275  005BC4  6F61               	movwf	?_putsUSART& (0+255),b
 13276  005BC6  ECBC  F00A         	call	_putsUSART	;wreg free
 13277                           
 13278                           ;main.c: 879: putsUSART((char *) "Value for reg ");
 13279  005BCA  0E7B               	movlw	high STR_59
 13280  005BCC  0100               	movlb	0	; () banked
 13281  005BCE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13282  005BD0  0E19               	movlw	low STR_59
 13283  005BD2  6F61               	movwf	?_putsUSART& (0+255),b
 13284  005BD4  ECBC  F00A         	call	_putsUSART	;wreg free
 13285                           
 13286                           ;main.c: 880: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13287  005BD8  662C               	tstfsz	_bHex,c
 13288  005BDA  D005               	goto	l14766
 13289  005BDC  0E7C               	movlw	high STR_61
 13290  005BDE  0102               	movlb	2	; () banked
 13291  005BE0  6F95               	movwf	(_doModeVerbose$1212+1)& (0+255),b
 13292  005BE2  0EED               	movlw	low STR_61
 13293  005BE4  D004               	goto	L7
 13294  005BE6                     l14766:
 13295  005BE6  0E7C               	movlw	high STR_60
 13296  005BE8  0102               	movlb	2	; () banked
 13297  005BEA  6F95               	movwf	(_doModeVerbose$1212+1)& (0+255),b
 13298  005BEC  0E49               	movlw	low STR_60
 13299  005BEE                     L7:
 13300  005BEE  6F94               	movwf	_doModeVerbose$1212& (0+255),b
 13301                           
 13302                           ; BSR set to: 2
 13303  005BF0  0E01               	movlw	high _wrkbuf
 13304  005BF2  0100               	movlb	0	; () banked
 13305  005BF4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13306  005BF6  0E7D               	movlw	low _wrkbuf
 13307  005BF8  6F76               	movwf	?_sprintf& (0+255),b
 13308  005BFA  C294  F078         	movff	_doModeVerbose$1212,?_sprintf+2
 13309  005BFE  C295  F079         	movff	_doModeVerbose$1212+1,?_sprintf+3
 13310  005C02  C2B5  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13311  005C06  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13312  005C08  EC3F  F026         	call	_sprintf	;wreg free
 13313                           
 13314                           ; BSR set to: 0
 13315                           ;main.c: 881: putsUSART(wrkbuf);
 13316  005C0C  0E01               	movlw	high _wrkbuf
 13317  005C0E  0100               	movlb	0	; () banked
 13318  005C10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13319  005C12  0E7D               	movlw	low _wrkbuf
 13320  005C14  6F61               	movwf	?_putsUSART& (0+255),b
 13321  005C16  ECBC  F00A         	call	_putsUSART	;wreg free
 13322                           
 13323                           ;main.c: 882: WriteUSART(':');
 13324  005C1A  0E3A               	movlw	58
 13325  005C1C  ECF5  F007         	call	_WriteUSART
 13326  005C20                     l592:
 13327  005C20  A2AC               	btfss	4012,1,c	;volatile
 13328  005C22  D7FE               	goto	l592
 13329                           
 13330                           ;main.c: 884: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13331  005C24  662C               	tstfsz	_bHex,c
 13332  005C26  D005               	goto	l14776
 13333  005C28  0E7C               	movlw	high STR_61
 13334  005C2A  0102               	movlb	2	; () banked
 13335  005C2C  6F97               	movwf	(_doModeVerbose$1216+1)& (0+255),b
 13336  005C2E  0EED               	movlw	low STR_61
 13337  005C30  D004               	goto	L8
 13338  005C32                     l14776:
 13339  005C32  0E7C               	movlw	high STR_60
 13340  005C34  0102               	movlb	2	; () banked
 13341  005C36  6F97               	movwf	(_doModeVerbose$1216+1)& (0+255),b
 13342  005C38  0E49               	movlw	low STR_60
 13343  005C3A                     L8:
 13344  005C3A  6F96               	movwf	_doModeVerbose$1216& (0+255),b
 13345                           
 13346                           ; BSR set to: 2
 13347  005C3C  0E01               	movlw	high _wrkbuf
 13348  005C3E  0100               	movlb	0	; () banked
 13349  005C40  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13350  005C42  0E7D               	movlw	low _wrkbuf
 13351  005C44  6F76               	movwf	?_sprintf& (0+255),b
 13352  005C46  C296  F078         	movff	_doModeVerbose$1216,?_sprintf+2
 13353  005C4A  C297  F079         	movff	_doModeVerbose$1216+1,?_sprintf+3
 13354  005C4E  EC84  F035         	call	PL44	;call to abstracted procedure
 13355  005C52  EC3F  F026         	call	_sprintf	;wreg free
 13356                           
 13357                           ; BSR set to: 0
 13358                           ;main.c: 885: putsUSART(wrkbuf);
 13359  005C56  0E01               	movlw	high _wrkbuf
 13360  005C58  0100               	movlb	0	; () banked
 13361  005C5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13362  005C5C  0E7D               	movlw	low _wrkbuf
 13363  005C5E  6F61               	movwf	?_putsUSART& (0+255),b
 13364  005C60  ECBC  F00A         	call	_putsUSART	;wreg free
 13365                           
 13366                           ;main.c: 886: putsUSART((char *) " = ");
 13367  005C64  0E7B               	movlw	high (STR_276+4)
 13368  005C66  0100               	movlb	0	; () banked
 13369  005C68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13370  005C6A  0ECE               	movlw	low (STR_276+4)
 13371  005C6C  6F61               	movwf	?_putsUSART& (0+255),b
 13372  005C6E  ECBC  F00A         	call	_putsUSART	;wreg free
 13373                           
 13374                           ;main.c: 887: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 13375  005C72  662C               	tstfsz	_bHex,c
 13376  005C74  D005               	goto	l14788
 13377  005C76  0E7C               	movlw	high STR_61
 13378  005C78  0102               	movlb	2	; () banked
 13379  005C7A  6F99               	movwf	(_doModeVerbose$1221+1)& (0+255),b
 13380  005C7C  0EED               	movlw	low STR_61
 13381  005C7E  D004               	goto	L9
 13382  005C80                     l14788:
 13383  005C80  0E7C               	movlw	high STR_60
 13384  005C82  0102               	movlb	2	; () banked
 13385  005C84  6F99               	movwf	(_doModeVerbose$1221+1)& (0+255),b
 13386  005C86  0E49               	movlw	low STR_60
 13387  005C88                     L9:
 13388  005C88  6F98               	movwf	_doModeVerbose$1221& (0+255),b
 13389                           
 13390                           ; BSR set to: 2
 13391  005C8A  0E01               	movlw	high _wrkbuf
 13392  005C8C  0100               	movlb	0	; () banked
 13393  005C8E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13394  005C90  0E7D               	movlw	low _wrkbuf
 13395  005C92  6F76               	movwf	?_sprintf& (0+255),b
 13396  005C94  C298  F078         	movff	_doModeVerbose$1221,?_sprintf+2
 13397  005C98  C299  F079         	movff	_doModeVerbose$1221+1,?_sprintf+3
 13398  005C9C  C2BA  F07A         	movff	doModeVerbose@value,?_sprintf+4
 13399  005CA0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13400  005CA2  EC3F  F026         	call	_sprintf	;wreg free
 13401                           
 13402                           ; BSR set to: 0
 13403                           ;main.c: 888: putsUSART(wrkbuf);
 13404  005CA6  0E01               	movlw	high _wrkbuf
 13405  005CA8  0100               	movlb	0	; () banked
 13406  005CAA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13407  005CAC  0E7D               	movlw	low _wrkbuf
 13408  005CAE  6F61               	movwf	?_putsUSART& (0+255),b
 13409  005CB0  ECBC  F00A         	call	_putsUSART	;wreg free
 13410  005CB4                     l603:
 13411  005CB4  A2AC               	btfss	4012,1,c	;volatile
 13412  005CB6  D7FE               	goto	l603
 13413                           
 13414                           ;main.c: 890: putsUSART("\t\'");
 13415  005CB8  0E7C               	movlw	high STR_67
 13416  005CBA  0100               	movlb	0	; () banked
 13417  005CBC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13418  005CBE  0EE1               	movlw	low STR_67
 13419  005CC0  6F61               	movwf	?_putsUSART& (0+255),b
 13420  005CC2  ECBC  F00A         	call	_putsUSART	;wreg free
 13421                           
 13422                           ;main.c: 891: if ((value > 32) && (value < 127)) {
 13423  005CC6  0E20               	movlw	32
 13424  005CC8  0102               	movlb	2	; () banked
 13425  005CCA  65BA               	cpfsgt	doModeVerbose@value& (0+255),b
 13426  005CCC  D007               	goto	l14802
 13427                           
 13428                           ; BSR set to: 2
 13429  005CCE  0E7F               	movlw	127
 13430  005CD0  61BA               	cpfslt	doModeVerbose@value& (0+255),b
 13431  005CD2  D004               	goto	l14802
 13432                           
 13433                           ; BSR set to: 2
 13434                           ;main.c: 892: WriteUSART(value);
 13435  005CD4  51BA               	movf	doModeVerbose@value& (0+255),w,b
 13436  005CD6  ECF5  F007         	call	_WriteUSART
 13437                           
 13438                           ;main.c: 893: }
 13439  005CDA  D003               	goto	l608
 13440  005CDC                     l14802:
 13441                           
 13442                           ; BSR set to: 2
 13443                           ;main.c: 894: else {
 13444                           ;main.c: 895: WriteUSART('.');
 13445  005CDC  0E2E               	movlw	46
 13446  005CDE  ECF5  F007         	call	_WriteUSART
 13447  005CE2                     l608:
 13448  005CE2  A2AC               	btfss	4012,1,c	;volatile
 13449  005CE4  D7FE               	goto	l608
 13450                           
 13451                           ;main.c: 898: putsUSART("\' \t");
 13452  005CE6  0E7C               	movlw	high STR_68
 13453  005CE8  0100               	movlb	0	; () banked
 13454  005CEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13455  005CEC  0EC5               	movlw	low STR_68
 13456  005CEE  6F61               	movwf	?_putsUSART& (0+255),b
 13457  005CF0  ECBC  F00A         	call	_putsUSART	;wreg free
 13458                           
 13459                           ;main.c: 899: printBinary(value);
 13460  005CF4  0102               	movlb	2	; () banked
 13461  005CF6  51BA               	movf	doModeVerbose@value& (0+255),w,b
 13462  005CF8  EC6C  F00A         	call	_printBinary
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;main.c: 900: putsUSART((char *) "\r\n");
 13466  005CFC  0E70               	movlw	high (STR_228+50)
 13467  005CFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13468  005D00  0EC4               	movlw	low (STR_228+50)
 13469  005D02  6F61               	movwf	?_putsUSART& (0+255),b
 13470  005D04  ECBC  F00A         	call	_putsUSART	;wreg free
 13471                           
 13472                           ;main.c: 901: }
 13473  005D08  D07E               	goto	l14846
 13474  005D0A                     l583:
 13475                           
 13476                           ;main.c: 902: else {
 13477                           ;main.c: 903: rv = 0;
 13478  005D0A  0102               	movlb	2	; () banked
 13479  005D0C  6BA6               	clrf	doModeVerbose@rv& (0+255),b
 13480                           
 13481                           ; BSR set to: 2
 13482                           ;main.c: 904: putsUSART((char *) "-ERROR - nodeid=");
 13483  005D0E  0E7B               	movlw	high STR_70
 13484  005D10  0100               	movlb	0	; () banked
 13485  005D12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13486  005D14  0E08               	movlw	low STR_70
 13487  005D16  6F61               	movwf	?_putsUSART& (0+255),b
 13488  005D18  ECBC  F00A         	call	_putsUSART	;wreg free
 13489                           
 13490                           ;main.c: 905: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13491  005D1C  662C               	tstfsz	_bHex,c
 13492  005D1E  D005               	goto	l14816
 13493  005D20  0E7C               	movlw	high STR_58
 13494  005D22  0102               	movlb	2	; () banked
 13495  005D24  6F9B               	movwf	(_doModeVerbose$1229+1)& (0+255),b
 13496  005D26  0E6A               	movlw	low STR_58
 13497  005D28  D004               	goto	L10
 13498  005D2A                     l14816:
 13499  005D2A  0E7B               	movlw	high STR_57
 13500  005D2C  0102               	movlb	2	; () banked
 13501  005D2E  6F9B               	movwf	(_doModeVerbose$1229+1)& (0+255),b
 13502  005D30  0E66               	movlw	low STR_57
 13503  005D32                     L10:
 13504  005D32  6F9A               	movwf	_doModeVerbose$1229& (0+255),b
 13505                           
 13506                           ; BSR set to: 2
 13507  005D34  0E01               	movlw	high _wrkbuf
 13508  005D36  0100               	movlb	0	; () banked
 13509  005D38  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13510  005D3A  0E7D               	movlw	low _wrkbuf
 13511  005D3C  6F76               	movwf	?_sprintf& (0+255),b
 13512  005D3E  C29A  F078         	movff	_doModeVerbose$1229,?_sprintf+2
 13513  005D42  C29B  F079         	movff	_doModeVerbose$1229+1,?_sprintf+3
 13514  005D46  C2B3  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13515  005D4A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13516  005D4C  EC3F  F026         	call	_sprintf	;wreg free
 13517                           
 13518                           ; BSR set to: 0
 13519                           ;main.c: 906: putsUSART(wrkbuf);
 13520  005D50  0E01               	movlw	high _wrkbuf
 13521  005D52  0100               	movlb	0	; () banked
 13522  005D54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13523  005D56  0E7D               	movlw	low _wrkbuf
 13524  005D58  6F61               	movwf	?_putsUSART& (0+255),b
 13525  005D5A  ECBC  F00A         	call	_putsUSART	;wreg free
 13526                           
 13527                           ;main.c: 907: putsUSART((char *) "Unable to read register ");
 13528  005D5E  0E78               	movlw	high STR_73
 13529  005D60  0100               	movlb	0	; () banked
 13530  005D62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13531  005D64  0E63               	movlw	low STR_73
 13532  005D66  6F61               	movwf	?_putsUSART& (0+255),b
 13533  005D68  ECBC  F00A         	call	_putsUSART	;wreg free
 13534  005D6C                     l616:
 13535  005D6C  A2AC               	btfss	4012,1,c	;volatile
 13536  005D6E  D7FE               	goto	l616
 13537                           
 13538                           ;main.c: 909: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13539  005D70  662C               	tstfsz	_bHex,c
 13540  005D72  D005               	goto	l14826
 13541  005D74  0E7C               	movlw	high STR_61
 13542  005D76  0102               	movlb	2	; () banked
 13543  005D78  6F9D               	movwf	(_doModeVerbose$1234+1)& (0+255),b
 13544  005D7A  0EED               	movlw	low STR_61
 13545  005D7C  D004               	goto	L11
 13546  005D7E                     l14826:
 13547  005D7E  0E7C               	movlw	high STR_60
 13548  005D80  0102               	movlb	2	; () banked
 13549  005D82  6F9D               	movwf	(_doModeVerbose$1234+1)& (0+255),b
 13550  005D84  0E49               	movlw	low STR_60
 13551  005D86                     L11:
 13552  005D86  6F9C               	movwf	_doModeVerbose$1234& (0+255),b
 13553                           
 13554                           ; BSR set to: 2
 13555  005D88  0E01               	movlw	high _wrkbuf
 13556  005D8A  0100               	movlb	0	; () banked
 13557  005D8C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13558  005D8E  0E7D               	movlw	low _wrkbuf
 13559  005D90  6F76               	movwf	?_sprintf& (0+255),b
 13560  005D92  C29C  F078         	movff	_doModeVerbose$1234,?_sprintf+2
 13561  005D96  C29D  F079         	movff	_doModeVerbose$1234+1,?_sprintf+3
 13562  005D9A  C2B5  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13563  005D9E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13564  005DA0  EC3F  F026         	call	_sprintf	;wreg free
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;main.c: 910: putsUSART(wrkbuf);
 13568  005DA4  0E01               	movlw	high _wrkbuf
 13569  005DA6  0100               	movlb	0	; () banked
 13570  005DA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13571  005DAA  0E7D               	movlw	low _wrkbuf
 13572  005DAC  6F61               	movwf	?_putsUSART& (0+255),b
 13573  005DAE  ECBC  F00A         	call	_putsUSART	;wreg free
 13574                           
 13575                           ;main.c: 911: WriteUSART(':');
 13576  005DB2  0E3A               	movlw	58
 13577  005DB4  ECF5  F007         	call	_WriteUSART
 13578                           
 13579                           ;main.c: 912: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13580  005DB8  662C               	tstfsz	_bHex,c
 13581  005DBA  D005               	goto	l14838
 13582  005DBC  0E7C               	movlw	high STR_61
 13583  005DBE  0102               	movlb	2	; () banked
 13584  005DC0  6F9F               	movwf	(_doModeVerbose$1238+1)& (0+255),b
 13585  005DC2  0EED               	movlw	low STR_61
 13586  005DC4  D004               	goto	L12
 13587  005DC6                     l14838:
 13588  005DC6  0E7C               	movlw	high STR_60
 13589  005DC8  0102               	movlb	2	; () banked
 13590  005DCA  6F9F               	movwf	(_doModeVerbose$1238+1)& (0+255),b
 13591  005DCC  0E49               	movlw	low STR_60
 13592  005DCE                     L12:
 13593  005DCE  6F9E               	movwf	_doModeVerbose$1238& (0+255),b
 13594                           
 13595                           ; BSR set to: 2
 13596  005DD0  0E01               	movlw	high _wrkbuf
 13597  005DD2  0100               	movlb	0	; () banked
 13598  005DD4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13599  005DD6  0E7D               	movlw	low _wrkbuf
 13600  005DD8  6F76               	movwf	?_sprintf& (0+255),b
 13601  005DDA  C29E  F078         	movff	_doModeVerbose$1238,?_sprintf+2
 13602  005DDE  C29F  F079         	movff	_doModeVerbose$1238+1,?_sprintf+3
 13603  005DE2  EC84  F035         	call	PL44	;call to abstracted procedure
 13604  005DE6  EC3F  F026         	call	_sprintf	;wreg free
 13605                           
 13606                           ; BSR set to: 0
 13607                           ;main.c: 913: putsUSART(wrkbuf);
 13608  005DEA  0E01               	movlw	high _wrkbuf
 13609  005DEC  0100               	movlb	0	; () banked
 13610  005DEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13611  005DF0  0E7D               	movlw	low _wrkbuf
 13612  005DF2  6F61               	movwf	?_putsUSART& (0+255),b
 13613  005DF4  ECBC  F00A         	call	_putsUSART	;wreg free
 13614                           
 13615                           ;main.c: 915: putsUSART((char *) "\r\n");
 13616  005DF8  0E70               	movlw	high (STR_228+50)
 13617  005DFA  0100               	movlb	0	; () banked
 13618  005DFC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13619  005DFE  0EC4               	movlw	low (STR_228+50)
 13620  005E00  6F61               	movwf	?_putsUSART& (0+255),b
 13621  005E02  ECBC  F00A         	call	_putsUSART	;wreg free
 13622  005E06                     l14846:
 13623  005E06  0102               	movlb	2	; () banked
 13624  005E08  2BB7               	incf	doModeVerbose@i_1188& (0+255),f,b
 13625  005E0A                     l14848:
 13626                           
 13627                           ; BSR set to: 2
 13628  005E0A  51B2               	movf	doModeVerbose@count& (0+255),w,b
 13629  005E0C  5DB7               	subwf	doModeVerbose@i_1188& (0+255),w,b
 13630  005E0E  E201 D69D          	bnc	l14746
 13631                           
 13632                           ; BSR set to: 2
 13633                           ;main.c: 916: }
 13634                           ;main.c: 917: }
 13635                           ;main.c: 919: if (rv) {
 13636  005E12  51A6               	movf	doModeVerbose@rv& (0+255),w,b
 13637  005E14  E009               	bz	l14854
 13638                           
 13639                           ; BSR set to: 2
 13640                           ;main.c: 920: putsUSART((char *) "+OK\r\n");
 13641  005E16  0E7C               	movlw	high STR_9
 13642  005E18  0100               	movlb	0	; () banked
 13643  005E1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13644  005E1C  0E64               	movlw	low STR_9
 13645  005E1E  6F61               	movwf	?_putsUSART& (0+255),b
 13646  005E20  ECBC  F00A         	call	_putsUSART	;wreg free
 13647                           
 13648                           ;main.c: 921: }
 13649  005E24  EF02  F035         	goto	l15316
 13650  005E28                     l14854:
 13651                           
 13652                           ; BSR set to: 2
 13653                           ;main.c: 922: else {
 13654                           ;main.c: 923: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13655  005E28  0E70               	movlw	high STR_80
 13656  005E2A  0100               	movlb	0	; () banked
 13657  005E2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13658  005E2E  0E5C               	movlw	low STR_80
 13659  005E30  6F61               	movwf	?_putsUSART& (0+255),b
 13660  005E32  ECBC  F00A         	call	_putsUSART	;wreg free
 13661  005E36  EF02  F035         	goto	l15316
 13662  005E3A                     l14856:
 13663                           
 13664                           ; BSR set to: 0
 13665                           ;main.c: 929: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13666  005E3A  0E01               	movlw	high _cmdbuf
 13667  005E3C  0100               	movlb	0	; () banked
 13668  005E3E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13669  005E40  0E2D               	movlw	low _cmdbuf
 13670  005E42  6F6D               	movwf	?_stristr& (0+255),b
 13671  005E44  0E7C               	movlw	high STR_81
 13672  005E46  6F70               	movwf	(?_stristr+3)& (0+255),b
 13673  005E48  0E9D               	movlw	low STR_81
 13674  005E4A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13675  005E4C  ECB5  F00C         	call	_stristr	;wreg free
 13676  005E50  0E2D               	movlw	low _cmdbuf
 13677  005E52  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13678  005E54  0E01               	movlw	high _cmdbuf
 13679  005E56  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13680  005E58  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13681  005E5A  E102               	bnz	u19395
 13682  005E5C  516D               	movf	?_stristr& (0+255),w,b
 13683  005E5E  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 13684  005E60                     u19395:
 13685  005E60  E001 D104          	bnz	l14938
 13686                           
 13687                           ; BSR set to: 0
 13688                           ;main.c: 931: uint8_t nodeid;
 13689                           ;main.c: 932: uint8_t page = 0;
 13690  005E64  0102               	movlb	2	; () banked
 13691  005E66  6BA7               	clrf	doModeVerbose@page_1244& (0+255),b
 13692                           
 13693                           ; BSR set to: 2
 13694                           ;main.c: 933: uint8_t reg;
 13695                           ;main.c: 934: uint8_t value;
 13696                           ;main.c: 936: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13697  005E68  506F               	movf	3951,w,c	;volatile
 13698  005E6A  0BE0               	andlw	224
 13699  005E6C  E008               	bz	l14870
 13700                           
 13701                           ; BSR set to: 2
 13702                           ;main.c: 937: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 13703  005E6E  0E70               	movlw	high STR_50
 13704  005E70  0100               	movlb	0	; () banked
 13705  005E72  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13706  005E74  0EC7               	movlw	low STR_50
 13707  005E76  6F61               	movwf	?_putsUSART& (0+255),b
 13708  005E78  ECBC  F00A         	call	_putsUSART	;wreg free
 13709  005E7C  D5D4               	goto	l14698
 13710  005E7E                     l14870:
 13711                           
 13712                           ; BSR set to: 2
 13713                           ;main.c: 941: }
 13714                           ;main.c: 943: strcpy(cmdbuf, cmdbuf + 5);
 13715  005E7E  EC0D  F035         	call	PL2	;call to abstracted procedure
 13716  005E82  EC6B  F008         	call	_strcpy	;wreg free
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;main.c: 944: char *p = strtok(cmdbuf, " ");
 13720  005E86  0E01               	movlw	high _cmdbuf
 13721  005E88  EC6E  F035         	call	PL36	;call to abstracted procedure
 13722  005E8C  ECBA  F00D         	call	_strtok	;wreg free
 13723  005E90  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1248
 13724  005E94  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1248+1
 13725                           
 13726                           ; BSR set to: 0
 13727                           ;main.c: 945: if ((0) != p) {
 13728  005E98  0102               	movlb	2	; () banked
 13729  005E9A  51BE               	movf	(doModeVerbose@p_1248+1)& (0+255),w,b
 13730  005E9C  11BD               	iorwf	doModeVerbose@p_1248& (0+255),w,b
 13731  005E9E  E00A               	bz	l14878
 13732                           
 13733                           ; BSR set to: 2
 13734                           ;main.c: 946: nodeid = atoi(p);
 13735  005EA0  C2BD  F066         	movff	doModeVerbose@p_1248,?_atoi
 13736  005EA4  C2BE  F067         	movff	doModeVerbose@p_1248+1,?_atoi+1
 13737  005EA8  ECAA  F015         	call	_atoi	;wreg free
 13738  005EAC  5166               	movf	?_atoi& (0+255),w,b
 13739  005EAE  0102               	movlb	2	; () banked
 13740  005EB0  6FB4               	movwf	doModeVerbose@nodeid_1243& (0+255),b
 13741                           
 13742                           ;main.c: 947: }
 13743  005EB2  D008               	goto	l14886
 13744  005EB4                     l14878:
 13745                           
 13746                           ; BSR set to: 2
 13747                           ;main.c: 948: else {
 13748                           ;main.c: 949: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13749  005EB4  0E78               	movlw	high STR_52
 13750  005EB6  0100               	movlb	0	; () banked
 13751  005EB8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13752  005EBA  0EAC               	movlw	low STR_52
 13753  005EBC  6F61               	movwf	?_putsUSART& (0+255),b
 13754  005EBE  ECBC  F00A         	call	_putsUSART	;wreg free
 13755  005EC2  D5B1               	goto	l14698
 13756  005EC4                     l14886:
 13757                           
 13758                           ; BSR set to: 2
 13759                           ;main.c: 953: }
 13760                           ;main.c: 955: if ( (0) != ( p = strtok((0), " ") ) ) {
 13761  005EC4  EC5C  F035         	call	PL28	;call to abstracted procedure
 13762  005EC8  ECBA  F00D         	call	_strtok	;wreg free
 13763  005ECC  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1248
 13764  005ED0  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1248+1
 13765  005ED4  0102               	movlb	2	; () banked
 13766  005ED6  51BE               	movf	(doModeVerbose@p_1248+1)& (0+255),w,b
 13767  005ED8  11BD               	iorwf	doModeVerbose@p_1248& (0+255),w,b
 13768  005EDA  E034               	bz	l14894
 13769                           
 13770                           ; BSR set to: 2
 13771                           ;main.c: 957: char *preg;
 13772                           ;main.c: 958: if (preg = strchr(p, ':')) {
 13773  005EDC  C2BD  F060         	movff	doModeVerbose@p_1248,?_strchr
 13774  005EE0  C2BE  F061         	movff	doModeVerbose@p_1248+1,?_strchr+1
 13775  005EE4  0100               	movlb	0	; () banked
 13776  005EE6  6B63               	clrf	(?_strchr+3)& (0+255),b
 13777  005EE8  0E3A               	movlw	58
 13778  005EEA  6F62               	movwf	(?_strchr+2)& (0+255),b
 13779  005EEC  ECA3  F00B         	call	_strchr	;wreg free
 13780  005EF0  C060  F286         	movff	?_strchr,doModeVerbose@preg_1252
 13781  005EF4  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1252+1
 13782  005EF8  0102               	movlb	2	; () banked
 13783  005EFA  5187               	movf	(doModeVerbose@preg_1252+1)& (0+255),w,b
 13784  005EFC  1186               	iorwf	doModeVerbose@preg_1252& (0+255),w,b
 13785  005EFE  E018               	bz	l14892
 13786                           
 13787                           ; BSR set to: 2
 13788                           ;main.c: 959: page = atoi(p);
 13789  005F00  C2BD  F066         	movff	doModeVerbose@p_1248,?_atoi
 13790  005F04  C2BE  F067         	movff	doModeVerbose@p_1248+1,?_atoi+1
 13791  005F08  ECAA  F015         	call	_atoi	;wreg free
 13792  005F0C  5166               	movf	?_atoi& (0+255),w,b
 13793  005F0E  0102               	movlb	2	; () banked
 13794  005F10  6FA7               	movwf	doModeVerbose@page_1244& (0+255),b
 13795                           
 13796                           ;main.c: 960: reg = atoi(preg + 1);
 13797  005F12  2986               	incf	doModeVerbose@preg_1252& (0+255),w,b
 13798  005F14  0100               	movlb	0	; () banked
 13799  005F16  6FCC               	movwf	??_doModeVerbose& (0+255),b
 13800  005F18  0E00               	movlw	0
 13801  005F1A  0102               	movlb	2	; () banked
 13802  005F1C  2187               	addwfc	(doModeVerbose@preg_1252+1)& (0+255),w,b
 13803  005F1E  0100               	movlb	0	; () banked
 13804  005F20  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 13805  005F22  C0CC  F066         	movff	??_doModeVerbose,?_atoi
 13806  005F26  C0CD  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13807  005F2A  ECAA  F015         	call	_atoi	;wreg free
 13808  005F2E  D006               	goto	L13
 13809  005F30                     l14892:
 13810                           
 13811                           ; BSR set to: 2
 13812                           ;main.c: 962: else {
 13813                           ;main.c: 963: reg = atoi(p);
 13814  005F30  C2BD  F066         	movff	doModeVerbose@p_1248,?_atoi
 13815  005F34  C2BE  F067         	movff	doModeVerbose@p_1248+1,?_atoi+1
 13816  005F38  ECAA  F015         	call	_atoi	;wreg free
 13817  005F3C                     L13:
 13818  005F3C  5166               	movf	?_atoi& (0+255),w,b
 13819  005F3E  0102               	movlb	2	; () banked
 13820  005F40  6FA8               	movwf	doModeVerbose@reg_1245& (0+255),b
 13821  005F42  D008               	goto	l14902
 13822  005F44                     l14894:
 13823                           
 13824                           ; BSR set to: 2
 13825                           ;main.c: 967: else {
 13826                           ;main.c: 968: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13827  005F44  0E76               	movlw	high STR_54
 13828  005F46  0100               	movlb	0	; () banked
 13829  005F48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13830  005F4A  0EF1               	movlw	low STR_54
 13831  005F4C  6F61               	movwf	?_putsUSART& (0+255),b
 13832  005F4E  ECBC  F00A         	call	_putsUSART	;wreg free
 13833  005F52  D569               	goto	l14698
 13834  005F54                     l14902:
 13835                           
 13836                           ; BSR set to: 2
 13837                           ;main.c: 972: }
 13838                           ;main.c: 975: if ((0) != (p = strtok((0), " "))) {
 13839  005F54  EC5C  F035         	call	PL28	;call to abstracted procedure
 13840  005F58  ECBA  F00D         	call	_strtok	;wreg free
 13841  005F5C  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1248
 13842  005F60  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1248+1
 13843  005F64  0102               	movlb	2	; () banked
 13844  005F66  51BE               	movf	(doModeVerbose@p_1248+1)& (0+255),w,b
 13845  005F68  11BD               	iorwf	doModeVerbose@p_1248& (0+255),w,b
 13846  005F6A  E00A               	bz	l14906
 13847                           
 13848                           ; BSR set to: 2
 13849                           ;main.c: 976: value = atoi(p);
 13850  005F6C  C2BD  F066         	movff	doModeVerbose@p_1248,?_atoi
 13851  005F70  C2BE  F067         	movff	doModeVerbose@p_1248+1,?_atoi+1
 13852  005F74  ECAA  F015         	call	_atoi	;wreg free
 13853  005F78  5166               	movf	?_atoi& (0+255),w,b
 13854  005F7A  0102               	movlb	2	; () banked
 13855  005F7C  6FB1               	movwf	doModeVerbose@value_1246& (0+255),b
 13856                           
 13857                           ;main.c: 977: }
 13858  005F7E  D008               	goto	l14914
 13859  005F80                     l14906:
 13860                           
 13861                           ; BSR set to: 2
 13862                           ;main.c: 978: else {
 13863                           ;main.c: 979: putsUSART((char *) "-ERROR - Need a value\r\n");
 13864  005F80  0E78               	movlw	high STR_88
 13865  005F82  0100               	movlb	0	; () banked
 13866  005F84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13867  005F86  0EDC               	movlw	low STR_88
 13868  005F88  6F61               	movwf	?_putsUSART& (0+255),b
 13869  005F8A  ECBC  F00A         	call	_putsUSART	;wreg free
 13870  005F8E  D54B               	goto	l14698
 13871  005F90                     l14914:
 13872                           
 13873                           ; BSR set to: 2
 13874                           ;main.c: 983: }
 13875                           ;main.c: 985: if (writeRegisterExtended(nodeid,
 13876                           ;main.c: 986: page,
 13877                           ;main.c: 987: reg,
 13878                           ;main.c: 988: rwtimeout,
 13879                           ;main.c: 989: &value)) {
 13880  005F90  0100               	movlb	0	; () banked
 13881  005F92  C2A7  F0B8         	movff	doModeVerbose@page_1244,?_writeRegisterExtended
 13882  005F96  6BB9               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13883  005F98  C2A8  F0BA         	movff	doModeVerbose@reg_1245,?_writeRegisterExtended+2
 13884  005F9C  C035  F0BB         	movff	_rwtimeout,?_writeRegisterExtended+3
 13885  005FA0  6BBC               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13886  005FA2  0E02               	movlw	high doModeVerbose@value_1246
 13887  005FA4  6FBE               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13888  005FA6  0EB1               	movlw	low doModeVerbose@value_1246
 13889  005FA8  6FBD               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13890  005FAA  0102               	movlb	2	; () banked
 13891  005FAC  51B4               	movf	doModeVerbose@nodeid_1243& (0+255),w,b
 13892  005FAE  EC2A  F015         	call	_writeRegisterExtended
 13893  005FB2  0900               	iorlw	0
 13894  005FB4  E031               	bz	l14928
 13895                           
 13896                           ;main.c: 990: putsUSART((char *) "+OK - Value written successfully for ");
 13897  005FB6  0E75               	movlw	high STR_89
 13898  005FB8  0100               	movlb	0	; () banked
 13899  005FBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13900  005FBC  0E6C               	movlw	low STR_89
 13901  005FBE  6F61               	movwf	?_putsUSART& (0+255),b
 13902  005FC0  ECBC  F00A         	call	_putsUSART	;wreg free
 13903                           
 13904                           ;main.c: 991: putsUSART((char *) "nodeid=");
 13905  005FC4  0E7B               	movlw	high (STR_56+6)
 13906  005FC6  0100               	movlb	0	; () banked
 13907  005FC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13908  005FCA  0E3C               	movlw	low (STR_56+6)
 13909  005FCC  6F61               	movwf	?_putsUSART& (0+255),b
 13910  005FCE  ECBC  F00A         	call	_putsUSART	;wreg free
 13911                           
 13912                           ;main.c: 992: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13913  005FD2  662C               	tstfsz	_bHex,c
 13914  005FD4  D005               	goto	l14922
 13915  005FD6  0E7C               	movlw	high STR_92
 13916  005FD8  0102               	movlb	2	; () banked
 13917  005FDA  6FA1               	movwf	(_doModeVerbose$1261+1)& (0+255),b
 13918  005FDC  0ECD               	movlw	low STR_92
 13919  005FDE  D004               	goto	L14
 13920  005FE0                     l14922:
 13921  005FE0  0E7B               	movlw	high STR_91
 13922  005FE2  0102               	movlb	2	; () banked
 13923  005FE4  6FA1               	movwf	(_doModeVerbose$1261+1)& (0+255),b
 13924  005FE6  0EC2               	movlw	low STR_91
 13925  005FE8                     L14:
 13926  005FE8  6FA0               	movwf	_doModeVerbose$1261& (0+255),b
 13927                           
 13928                           ; BSR set to: 2
 13929  005FEA  0E01               	movlw	high _wrkbuf
 13930  005FEC  0100               	movlb	0	; () banked
 13931  005FEE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13932  005FF0  0E7D               	movlw	low _wrkbuf
 13933  005FF2  6F76               	movwf	?_sprintf& (0+255),b
 13934  005FF4  C2A0  F078         	movff	_doModeVerbose$1261,?_sprintf+2
 13935  005FF8  C2A1  F079         	movff	_doModeVerbose$1261+1,?_sprintf+3
 13936  005FFC  C2B4  F07A         	movff	doModeVerbose@nodeid_1243,?_sprintf+4
 13937  006000  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13938  006002  EC3F  F026         	call	_sprintf	;wreg free
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;main.c: 993: putsUSART(wrkbuf);
 13942  006006  0E01               	movlw	high _wrkbuf
 13943  006008  0100               	movlb	0	; () banked
 13944  00600A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13945  00600C  0E7D               	movlw	low _wrkbuf
 13946  00600E  6F61               	movwf	?_putsUSART& (0+255),b
 13947  006010  ECBC  F00A         	call	_putsUSART	;wreg free
 13948                           
 13949                           ;main.c: 994: }
 13950  006014  EF02  F035         	goto	l15316
 13951  006018                     l14928:
 13952                           
 13953                           ;main.c: 995: else {
 13954                           ;main.c: 996: putsUSART((char *) "-ERROR - Failed to write value for ");
 13955  006018  0E76               	movlw	high STR_93
 13956  00601A  0100               	movlb	0	; () banked
 13957  00601C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13958  00601E  0E25               	movlw	low STR_93
 13959  006020  6F61               	movwf	?_putsUSART& (0+255),b
 13960  006022  ECBC  F00A         	call	_putsUSART	;wreg free
 13961                           
 13962                           ;main.c: 997: putsUSART((char *) "nodeid=");
 13963  006026  0E7B               	movlw	high (STR_56+6)
 13964  006028  0100               	movlb	0	; () banked
 13965  00602A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13966  00602C  0E3C               	movlw	low (STR_56+6)
 13967  00602E  6F61               	movwf	?_putsUSART& (0+255),b
 13968  006030  ECBC  F00A         	call	_putsUSART	;wreg free
 13969                           
 13970                           ;main.c: 998: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 13971  006034  662C               	tstfsz	_bHex,c
 13972  006036  D005               	goto	l14934
 13973  006038  0E7C               	movlw	high STR_92
 13974  00603A  0102               	movlb	2	; () banked
 13975  00603C  6FA3               	movwf	(_doModeVerbose$1267+1)& (0+255),b
 13976  00603E  0ECD               	movlw	low STR_92
 13977  006040  D004               	goto	L15
 13978  006042                     l14934:
 13979  006042  0E7B               	movlw	high STR_91
 13980  006044  0102               	movlb	2	; () banked
 13981  006046  6FA3               	movwf	(_doModeVerbose$1267+1)& (0+255),b
 13982  006048  0EC2               	movlw	low STR_91
 13983  00604A                     L15:
 13984  00604A  6FA2               	movwf	_doModeVerbose$1267& (0+255),b
 13985                           
 13986                           ; BSR set to: 2
 13987  00604C  0E01               	movlw	high _wrkbuf
 13988  00604E  0100               	movlb	0	; () banked
 13989  006050  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13990  006052  0E7D               	movlw	low _wrkbuf
 13991  006054  6F76               	movwf	?_sprintf& (0+255),b
 13992  006056  C2A2  F078         	movff	_doModeVerbose$1267,?_sprintf+2
 13993  00605A  C2A3  F079         	movff	_doModeVerbose$1267+1,?_sprintf+3
 13994  00605E  C2B4  F07A         	movff	doModeVerbose@nodeid_1243,?_sprintf+4
 13995  006062  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13996  006064  EC3F  F026         	call	_sprintf	;wreg free
 13997  006068  EF02  F035         	goto	l15316
 13998  00606C                     l14938:
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;main.c: 1004: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 14002  00606C  0E01               	movlw	high _cmdbuf
 14003  00606E  0100               	movlb	0	; () banked
 14004  006070  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14005  006072  0E2D               	movlw	low _cmdbuf
 14006  006074  6F6D               	movwf	?_stristr& (0+255),b
 14007  006076  0E7C               	movlw	high STR_97
 14008  006078  6F70               	movwf	(?_stristr+3)& (0+255),b
 14009  00607A  0EAC               	movlw	low STR_97
 14010  00607C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14011  00607E  ECB5  F00C         	call	_stristr	;wreg free
 14012  006082  0E2D               	movlw	low _cmdbuf
 14013  006084  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14014  006086  0E01               	movlw	high _cmdbuf
 14015  006088  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14016  00608A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14017  00608C  E102               	bnz	u19485
 14018  00608E  516D               	movf	?_stristr& (0+255),w,b
 14019  006090  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14020  006092                     u19485:
 14021  006092  E176               	bnz	l14982
 14022                           
 14023                           ; BSR set to: 0
 14024                           ;main.c: 1006: uint8_t nodeid;
 14025                           ;main.c: 1007: uint8_t value;
 14026                           ;main.c: 1009: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14027  006094  506F               	movf	3951,w,c	;volatile
 14028  006096  0BE0               	andlw	224
 14029  006098  E007               	bz	l14950
 14030                           
 14031                           ; BSR set to: 0
 14032                           ;main.c: 1010: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 14033  00609A  0E70               	movlw	high STR_50
 14034  00609C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14035  00609E  0EC7               	movlw	low STR_50
 14036  0060A0  6F61               	movwf	?_putsUSART& (0+255),b
 14037  0060A2  ECBC  F00A         	call	_putsUSART	;wreg free
 14038  0060A6  D4BF               	goto	l14698
 14039  0060A8                     l14950:
 14040                           
 14041                           ; BSR set to: 0
 14042                           ;main.c: 1014: }
 14043                           ;main.c: 1016: strcpy(cmdbuf, cmdbuf + 5);
 14044  0060A8  EC0D  F035         	call	PL2	;call to abstracted procedure
 14045  0060AC  EC6B  F008         	call	_strcpy	;wreg free
 14046                           
 14047                           ; BSR set to: 0
 14048                           ;main.c: 1017: nodeid = atoi(cmdbuf);
 14049  0060B0  0E01               	movlw	high _cmdbuf
 14050  0060B2  0100               	movlb	0	; () banked
 14051  0060B4  6F67               	movwf	(?_atoi+1)& (0+255),b
 14052  0060B6  0E2D               	movlw	low _cmdbuf
 14053  0060B8  6F66               	movwf	?_atoi& (0+255),b
 14054  0060BA  ECAA  F015         	call	_atoi	;wreg free
 14055  0060BE  5166               	movf	?_atoi& (0+255),w,b
 14056  0060C0  0102               	movlb	2	; () banked
 14057  0060C2  6FB8               	movwf	doModeVerbose@nodeid_1269& (0+255),b
 14058                           
 14059                           ; BSR set to: 2
 14060                           ;main.c: 1019: putsUSART((char *) "Info for node id = ");
 14061  0060C4  0E7A               	movlw	high STR_99
 14062  0060C6  0100               	movlb	0	; () banked
 14063  0060C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14064  0060CA  0E53               	movlw	low STR_99
 14065  0060CC  6F61               	movwf	?_putsUSART& (0+255),b
 14066  0060CE  ECBC  F00A         	call	_putsUSART	;wreg free
 14067                           
 14068                           ;main.c: 1020: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 14069  0060D2  662C               	tstfsz	_bHex,c
 14070  0060D4  D005               	goto	l14960
 14071  0060D6  0E7C               	movlw	high STR_61
 14072  0060D8  0102               	movlb	2	; () banked
 14073  0060DA  6FA5               	movwf	(_doModeVerbose$1276+1)& (0+255),b
 14074  0060DC  0EED               	movlw	low STR_61
 14075  0060DE  D004               	goto	L16
 14076  0060E0                     l14960:
 14077  0060E0  0E7C               	movlw	high STR_60
 14078  0060E2  0102               	movlb	2	; () banked
 14079  0060E4  6FA5               	movwf	(_doModeVerbose$1276+1)& (0+255),b
 14080  0060E6  0E49               	movlw	low STR_60
 14081  0060E8                     L16:
 14082  0060E8  6FA4               	movwf	_doModeVerbose$1276& (0+255),b
 14083                           
 14084                           ; BSR set to: 2
 14085  0060EA  0E01               	movlw	high _wrkbuf
 14086  0060EC  0100               	movlb	0	; () banked
 14087  0060EE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 14088  0060F0  0E7D               	movlw	low _wrkbuf
 14089  0060F2  6F76               	movwf	?_sprintf& (0+255),b
 14090  0060F4  C2A4  F078         	movff	_doModeVerbose$1276,?_sprintf+2
 14091  0060F8  C2A5  F079         	movff	_doModeVerbose$1276+1,?_sprintf+3
 14092  0060FC  C2B8  F07A         	movff	doModeVerbose@nodeid_1269,?_sprintf+4
 14093  006100  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14094  006102  EC3F  F026         	call	_sprintf	;wreg free
 14095                           
 14096                           ; BSR set to: 0
 14097                           ;main.c: 1021: putsUSART(wrkbuf);
 14098  006106  0E01               	movlw	high _wrkbuf
 14099  006108  0100               	movlb	0	; () banked
 14100  00610A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14101  00610C  0E7D               	movlw	low _wrkbuf
 14102  00610E  6F61               	movwf	?_putsUSART& (0+255),b
 14103  006110  ECBC  F00A         	call	_putsUSART	;wreg free
 14104                           
 14105                           ;main.c: 1022: putsUSART((char *) "\r\n");
 14106  006114  0E70               	movlw	high (STR_228+50)
 14107  006116  0100               	movlb	0	; () banked
 14108  006118  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14109  00611A  0EC4               	movlw	low (STR_228+50)
 14110  00611C  6F61               	movwf	?_putsUSART& (0+255),b
 14111  00611E  ECBC  F00A         	call	_putsUSART	;wreg free
 14112                           
 14113                           ;main.c: 1024: if (!readRegisterExtended(nodeid,
 14114                           ;main.c: 1025: 0,
 14115                           ;main.c: 1026: 0xd0,
 14116                           ;main.c: 1027: rwtimeout,
 14117                           ;main.c: 1028: &value)) {
 14118  006122  0100               	movlb	0	; () banked
 14119  006124  6BB9               	clrf	(?_readRegisterExtended+1)& (0+255),b
 14120  006126  6BB8               	clrf	?_readRegisterExtended& (0+255),b
 14121  006128  0ED0               	movlw	208
 14122  00612A  6FBA               	movwf	(?_readRegisterExtended+2)& (0+255),b
 14123  00612C  C035  F0BB         	movff	_rwtimeout,?_readRegisterExtended+3
 14124  006130  6BBC               	clrf	(?_readRegisterExtended+4)& (0+255),b
 14125  006132  0E02               	movlw	high doModeVerbose@value_1270
 14126  006134  6FBE               	movwf	(?_readRegisterExtended+6)& (0+255),b
 14127  006136  0EA9               	movlw	low doModeVerbose@value_1270
 14128  006138  6FBD               	movwf	(?_readRegisterExtended+5)& (0+255),b
 14129  00613A  0102               	movlb	2	; () banked
 14130  00613C  51B8               	movf	doModeVerbose@nodeid_1269& (0+255),w,b
 14131  00613E  EC32  F014         	call	_readRegisterExtended
 14132  006142  0900               	iorlw	0
 14133  006144  E108               	bnz	l14978
 14134                           
 14135                           ;main.c: 1029: putsUSART((char *) "-ERROR - Node not found.\r\n");
 14136  006146  0E77               	movlw	high STR_103
 14137  006148  0100               	movlb	0	; () banked
 14138  00614A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14139  00614C  0EC6               	movlw	low STR_103
 14140  00614E  6F61               	movwf	?_putsUSART& (0+255),b
 14141  006150  ECBC  F00A         	call	_putsUSART	;wreg free
 14142  006154  D468               	goto	l14698
 14143  006156                     l14978:
 14144                           
 14145                           ;main.c: 1033: }
 14146                           ;main.c: 1036: printNodeFirmwareVersion(nodeid);
 14147  006156  0102               	movlb	2	; () banked
 14148  006158  51B8               	movf	doModeVerbose@nodeid_1269& (0+255),w,b
 14149  00615A  EC49  F011         	call	_printNodeFirmwareVersion
 14150                           
 14151                           ;main.c: 1037: printGUID(nodeid);
 14152  00615E  0102               	movlb	2	; () banked
 14153  006160  51B8               	movf	doModeVerbose@nodeid_1269& (0+255),w,b
 14154  006162  ECAD  F014         	call	_printGUID
 14155                           
 14156                           ;main.c: 1038: printMDF(nodeid);
 14157  006166  0102               	movlb	2	; () banked
 14158  006168  51B8               	movf	doModeVerbose@nodeid_1269& (0+255),w,b
 14159  00616A  EC03  F00E         	call	_printMDF
 14160                           
 14161                           ;main.c: 1039: putsUSART((char *) "+OK\r\n");
 14162  00616E  0E7C               	movlw	high STR_9
 14163  006170  0100               	movlb	0	; () banked
 14164  006172  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14165  006174  0E64               	movlw	low STR_9
 14166  006176  6F61               	movwf	?_putsUSART& (0+255),b
 14167  006178  ECBC  F00A         	call	_putsUSART	;wreg free
 14168                           
 14169                           ;main.c: 1040: }
 14170  00617C  EF02  F035         	goto	l15316
 14171  006180                     l14982:
 14172                           
 14173                           ; BSR set to: 0
 14174                           ;main.c: 1044: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 14175  006180  0E01               	movlw	high _cmdbuf
 14176  006182  0100               	movlb	0	; () banked
 14177  006184  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14178  006186  0E2D               	movlw	low _cmdbuf
 14179  006188  6F6D               	movwf	?_stristr& (0+255),b
 14180  00618A  0E7C               	movlw	high STR_105
 14181  00618C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14182  00618E  0E3B               	movlw	low STR_105
 14183  006190  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14184  006192  ECB5  F00C         	call	_stristr	;wreg free
 14185  006196  0E2D               	movlw	low _cmdbuf
 14186  006198  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14187  00619A  0E01               	movlw	high _cmdbuf
 14188  00619C  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14189  00619E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14190  0061A0  E102               	bnz	u19525
 14191  0061A2  516D               	movf	?_stristr& (0+255),w,b
 14192  0061A4  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14193  0061A6                     u19525:
 14194  0061A6  E001 D0DE          	bnz	l15076
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;main.c: 1046: uint8_t filterno;
 14198                           ;main.c: 1047: uint8_t filter_priority;
 14199                           ;main.c: 1048: uint16_t filter_class;
 14200                           ;main.c: 1049: uint8_t filter_type;
 14201                           ;main.c: 1050: uint8_t filter_nodeid;
 14202                           ;main.c: 1052: strcpy(cmdbuf, cmdbuf + 8);
 14203  0061AA  0E01               	movlw	high _cmdbuf
 14204  0061AC  EC1B  F035         	call	PL4	;call to abstracted procedure
 14205  0061B0  EC6B  F008         	call	_strcpy	;wreg free
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;main.c: 1053: char *p = strtok(cmdbuf, ",");
 14209  0061B4  EC64  F035         	call	PL30	;call to abstracted procedure
 14210  0061B8  ECBA  F00D         	call	_strtok	;wreg free
 14211  0061BC  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1286
 14212  0061C0  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14213                           
 14214                           ; BSR set to: 0
 14215                           ;main.c: 1054: if ((0) != p) {
 14216  0061C4  0102               	movlb	2	; () banked
 14217  0061C6  51C3               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14218  0061C8  11C2               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14219  0061CA  E014               	bz	l15002
 14220                           
 14221                           ; BSR set to: 2
 14222                           ;main.c: 1055: filterno = atoi(p);
 14223  0061CC  C2C2  F066         	movff	doModeVerbose@p_1286,?_atoi
 14224  0061D0  C2C3  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14225  0061D4  ECAA  F015         	call	_atoi	;wreg free
 14226  0061D8  5166               	movf	?_atoi& (0+255),w,b
 14227  0061DA  0102               	movlb	2	; () banked
 14228  0061DC  6FAE               	movwf	doModeVerbose@filterno& (0+255),b
 14229                           
 14230                           ; BSR set to: 2
 14231                           ;main.c: 1056: if (filterno > 15) {
 14232  0061DE  0E0F               	movlw	15
 14233  0061E0  65AE               	cpfsgt	doModeVerbose@filterno& (0+255),b
 14234  0061E2  D010               	goto	l15010
 14235                           
 14236                           ; BSR set to: 2
 14237                           ;main.c: 1057: putsUSART((char *) "-ERROR - Filter number can only be set to a value bet
      +                          ween 0-15.\r\n");
 14238  0061E4  0E6E               	movlw	high STR_107
 14239  0061E6  0100               	movlb	0	; () banked
 14240  0061E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14241  0061EA  0E1C               	movlw	low STR_107
 14242  0061EC  6F61               	movwf	?_putsUSART& (0+255),b
 14243  0061EE  ECBC  F00A         	call	_putsUSART	;wreg free
 14244  0061F2  D419               	goto	l14698
 14245  0061F4                     l15002:
 14246                           
 14247                           ; BSR set to: 2
 14248                           ;main.c: 1063: else {
 14249                           ;main.c: 1064: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 14250  0061F4  0E74               	movlw	high STR_108
 14251  0061F6  0100               	movlb	0	; () banked
 14252  0061F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14253  0061FA  0E5C               	movlw	low STR_108
 14254  0061FC  6F61               	movwf	?_putsUSART& (0+255),b
 14255  0061FE  ECBC  F00A         	call	_putsUSART	;wreg free
 14256  006202  D411               	goto	l14698
 14257  006204                     l15010:
 14258                           
 14259                           ; BSR set to: 2
 14260                           ;main.c: 1068: }
 14261                           ;main.c: 1071: p = strtok((0), ",");
 14262  006204  EC28  F035         	call	PL6	;call to abstracted procedure
 14263  006208  ECBA  F00D         	call	_strtok	;wreg free
 14264  00620C  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1286
 14265  006210  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;main.c: 1072: if ((0) != p) {
 14269  006214  0102               	movlb	2	; () banked
 14270  006216  51C3               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14271  006218  11C2               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14272  00621A  E00A               	bz	l15016
 14273                           
 14274                           ; BSR set to: 2
 14275                           ;main.c: 1073: filter_priority = atoi(p);
 14276  00621C  C2C2  F066         	movff	doModeVerbose@p_1286,?_atoi
 14277  006220  C2C3  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14278  006224  ECAA  F015         	call	_atoi	;wreg free
 14279  006228  5166               	movf	?_atoi& (0+255),w,b
 14280  00622A  0102               	movlb	2	; () banked
 14281  00622C  6F8C               	movwf	doModeVerbose@filter_priority& (0+255),b
 14282                           
 14283                           ;main.c: 1074: }
 14284  00622E  D009               	goto	l15024
 14285  006230                     l15016:
 14286                           
 14287                           ; BSR set to: 2
 14288                           ;main.c: 1075: else {
 14289                           ;main.c: 1076: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 14290  006230  0E73               	movlw	high STR_110
 14291  006232  0100               	movlb	0	; () banked
 14292  006234  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14293  006236  0E68               	movlw	low STR_110
 14294  006238  6F61               	movwf	?_putsUSART& (0+255),b
 14295  00623A  ECBC  F00A         	call	_putsUSART	;wreg free
 14296  00623E  EF13  F02D         	goto	l14698
 14297  006242                     l15024:
 14298                           
 14299                           ; BSR set to: 2
 14300                           ;main.c: 1080: }
 14301                           ;main.c: 1083: p = strtok((0), ",");
 14302  006242  EC28  F035         	call	PL6	;call to abstracted procedure
 14303  006246  ECBA  F00D         	call	_strtok	;wreg free
 14304  00624A  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1286
 14305  00624E  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;main.c: 1084: if ((0) != p) {
 14309  006252  0102               	movlb	2	; () banked
 14310  006254  51C3               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14311  006256  11C2               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14312  006258  E00B               	bz	l15030
 14313                           
 14314                           ; BSR set to: 2
 14315                           ;main.c: 1085: filter_class = atoi(p);
 14316  00625A  C2C2  F066         	movff	doModeVerbose@p_1286,?_atoi
 14317  00625E  C2C3  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14318  006262  ECAA  F015         	call	_atoi	;wreg free
 14319  006266  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 14320  00626A  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 14321                           
 14322                           ;main.c: 1086: }
 14323  00626E  D009               	goto	l15038
 14324  006270                     l15030:
 14325                           
 14326                           ; BSR set to: 2
 14327                           ;main.c: 1087: else {
 14328                           ;main.c: 1088: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 14329  006270  0E74               	movlw	high STR_112
 14330  006272  0100               	movlb	0	; () banked
 14331  006274  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14332  006276  0EF8               	movlw	low STR_112
 14333  006278  6F61               	movwf	?_putsUSART& (0+255),b
 14334  00627A  ECBC  F00A         	call	_putsUSART	;wreg free
 14335  00627E  EF13  F02D         	goto	l14698
 14336  006282                     l15038:
 14337                           
 14338                           ; BSR set to: 0
 14339                           ;main.c: 1092: }
 14340                           ;main.c: 1095: p = strtok((0), ",");
 14341  006282  DBEE               	call	PL8	;call to abstracted procedure
 14342  006284  ECBA  F00D         	call	_strtok	;wreg free
 14343  006288  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1286
 14344  00628C  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;main.c: 1096: if ((0) != p) {
 14348  006290  0102               	movlb	2	; () banked
 14349  006292  51C3               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14350  006294  11C2               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14351  006296  E00A               	bz	l15044
 14352                           
 14353                           ; BSR set to: 2
 14354                           ;main.c: 1097: filter_type = atoi(p);
 14355  006298  C2C2  F066         	movff	doModeVerbose@p_1286,?_atoi
 14356  00629C  C2C3  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14357  0062A0  ECAA  F015         	call	_atoi	;wreg free
 14358  0062A4  5166               	movf	?_atoi& (0+255),w,b
 14359  0062A6  0102               	movlb	2	; () banked
 14360  0062A8  6F8D               	movwf	doModeVerbose@filter_type& (0+255),b
 14361                           
 14362                           ;main.c: 1098: }
 14363  0062AA  D009               	goto	l15052
 14364  0062AC                     l15044:
 14365                           
 14366                           ; BSR set to: 2
 14367                           ;main.c: 1099: else {
 14368                           ;main.c: 1100: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 14369  0062AC  0E75               	movlw	high STR_114
 14370  0062AE  0100               	movlb	0	; () banked
 14371  0062B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14372  0062B2  0E46               	movlw	low STR_114
 14373  0062B4  6F61               	movwf	?_putsUSART& (0+255),b
 14374  0062B6  ECBC  F00A         	call	_putsUSART	;wreg free
 14375  0062BA  EF13  F02D         	goto	l14698
 14376  0062BE                     l15052:
 14377                           
 14378                           ; BSR set to: 2
 14379                           ;main.c: 1104: }
 14380                           ;main.c: 1107: p = strtok((0), ",");
 14381  0062BE  DBC8               	call	PL6	;call to abstracted procedure
 14382  0062C0  ECBA  F00D         	call	_strtok	;wreg free
 14383  0062C4  C06C  F2C2         	movff	?_strtok,doModeVerbose@p_1286
 14384  0062C8  C06D  F2C3         	movff	?_strtok+1,doModeVerbose@p_1286+1
 14385                           
 14386                           ; BSR set to: 0
 14387                           ;main.c: 1108: if ((0) != p) {
 14388  0062CC  0102               	movlb	2	; () banked
 14389  0062CE  51C3               	movf	(doModeVerbose@p_1286+1)& (0+255),w,b
 14390  0062D0  11C2               	iorwf	doModeVerbose@p_1286& (0+255),w,b
 14391  0062D2  E00A               	bz	l15058
 14392                           
 14393                           ; BSR set to: 2
 14394                           ;main.c: 1109: filter_nodeid = atoi(p);
 14395  0062D4  C2C2  F066         	movff	doModeVerbose@p_1286,?_atoi
 14396  0062D8  C2C3  F067         	movff	doModeVerbose@p_1286+1,?_atoi+1
 14397  0062DC  ECAA  F015         	call	_atoi	;wreg free
 14398  0062E0  5166               	movf	?_atoi& (0+255),w,b
 14399  0062E2  0102               	movlb	2	; () banked
 14400  0062E4  6F8E               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 14401                           
 14402                           ;main.c: 1110: }
 14403  0062E6  D009               	goto	l15066
 14404  0062E8                     l15058:
 14405                           
 14406                           ; BSR set to: 2
 14407                           ;main.c: 1111: else {
 14408                           ;main.c: 1112: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 14409  0062E8  0E73               	movlw	high STR_116
 14410  0062EA  0100               	movlb	0	; () banked
 14411  0062EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14412  0062EE  0EBB               	movlw	low STR_116
 14413  0062F0  6F61               	movwf	?_putsUSART& (0+255),b
 14414  0062F2  ECBC  F00A         	call	_putsUSART	;wreg free
 14415  0062F6  EF13  F02D         	goto	l14698
 14416  0062FA                     l15066:
 14417                           
 14418                           ; BSR set to: 2
 14419                           ;main.c: 1116: }
 14420                           ;main.c: 1119: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14421  0062FA  0E80               	movlw	128
 14422  0062FC  EC0A  F008         	call	_ECANSetOperationMode
 14423                           
 14424                           ; BSR set to: 0
 14425                           ;main.c: 1121: uint32_t id = ((uint32_t) filter_priority << 26) |
 14426                           ;main.c: 1122: ((uint32_t) filter_class << 16) |
 14427                           ;main.c: 1123: ((uint32_t) filter_type << 8) |
 14428                           ;main.c: 1124: filter_nodeid;
 14429  006300  C28D  F0CC         	movff	doModeVerbose@filter_type,??_doModeVerbose
 14430  006304  DBF4               	call	PL42	;call to abstracted procedure
 14431  006306  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 14432  006308  0100               	movlb	0	; () banked
 14433  00630A  6FD0               	movwf	(??_doModeVerbose+4)& (0+255),b
 14434  00630C  0102               	movlb	2	; () banked
 14435  00630E  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 14436  006310  EC9D  F035         	call	PL60	;call to abstracted procedure
 14437  006314  C28C  F0D4         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 14438  006318  DBAA               	call	PL10	;call to abstracted procedure
 14439  00631A  518E               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 14440  00631C  0100               	movlb	0	; () banked
 14441  00631E  11DC               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14442  006320  0102               	movlb	2	; () banked
 14443  006322  6F80               	movwf	doModeVerbose@id& (0+255),b
 14444  006324  0100               	movlb	0	; () banked
 14445  006326  51DD               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14446  006328  0102               	movlb	2	; () banked
 14447  00632A  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 14448  00632C  0100               	movlb	0	; () banked
 14449  00632E  51DE               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14450  006330  0102               	movlb	2	; () banked
 14451  006332  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 14452  006334  0100               	movlb	0	; () banked
 14453  006336  51DF               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14454  006338  0102               	movlb	2	; () banked
 14455  00633A  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 14456                           
 14457                           ; BSR set to: 2
 14458                           ;main.c: 1125: setFilter(filterno, id);
 14459  00633C  C280  F062         	movff	doModeVerbose@id,?_setFilter
 14460  006340  C281  F063         	movff	doModeVerbose@id+1,?_setFilter+1
 14461  006344  C282  F064         	movff	doModeVerbose@id+2,?_setFilter+2
 14462  006348  C283  F065         	movff	doModeVerbose@id+3,?_setFilter+3
 14463  00634C  51AE               	movf	doModeVerbose@filterno& (0+255),w,b
 14464  00634E  ECB3  F01F         	call	_setFilter
 14465                           
 14466                           ; BSR set to: 0
 14467                           ;main.c: 1128: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14468  006352  0E00               	movlw	0
 14469  006354  EC0A  F008         	call	_ECANSetOperationMode
 14470                           
 14471                           ; BSR set to: 0
 14472                           ;main.c: 1130: putsUSART((char *) "+OK\r\n");
 14473  006358  0E7C               	movlw	high STR_9
 14474  00635A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14475  00635C  0E64               	movlw	low STR_9
 14476  00635E  6F61               	movwf	?_putsUSART& (0+255),b
 14477  006360  ECBC  F00A         	call	_putsUSART	;wreg free
 14478                           
 14479                           ;main.c: 1131: }
 14480  006364  D34F               	goto	l15316
 14481  006366                     l15076:
 14482                           
 14483                           ; BSR set to: 0
 14484                           ;main.c: 1135: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 14485  006366  0E01               	movlw	high _cmdbuf
 14486  006368  0100               	movlb	0	; () banked
 14487  00636A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14488  00636C  0E2D               	movlw	low _cmdbuf
 14489  00636E  6F6D               	movwf	?_stristr& (0+255),b
 14490  006370  0E7C               	movlw	high STR_118
 14491  006372  6F70               	movwf	(?_stristr+3)& (0+255),b
 14492  006374  0EA2               	movlw	low STR_118
 14493  006376  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14494  006378  ECB5  F00C         	call	_stristr	;wreg free
 14495  00637C  0E2D               	movlw	low _cmdbuf
 14496  00637E  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14497  006380  0E01               	movlw	high _cmdbuf
 14498  006382  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14499  006384  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14500  006386  E102               	bnz	u19605
 14501  006388  516D               	movf	?_stristr& (0+255),w,b
 14502  00638A  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14503  00638C                     u19605:
 14504  00638C  E001 D0E2          	bnz	l15174
 14505                           
 14506                           ; BSR set to: 0
 14507                           ;main.c: 1137: uint8_t maskno;
 14508                           ;main.c: 1138: uint8_t mask_priority;
 14509                           ;main.c: 1139: uint16_t mask_class;
 14510                           ;main.c: 1140: uint8_t mask_type;
 14511                           ;main.c: 1141: uint8_t mask_nodeid;
 14512                           ;main.c: 1143: strcpy(cmdbuf, cmdbuf + 8);
 14513  006390  0E01               	movlw	high _cmdbuf
 14514  006392  DB51               	call	PL4	;call to abstracted procedure
 14515  006394  EC6B  F008         	call	_strcpy	;wreg free
 14516                           
 14517                           ; BSR set to: 0
 14518                           ;main.c: 1144: char *p = strtok(cmdbuf, ",");
 14519  006398  DB97               	call	PL30	;call to abstracted procedure
 14520  00639A  ECBA  F00D         	call	_strtok	;wreg free
 14521  00639E  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1306
 14522  0063A2  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14523                           
 14524                           ; BSR set to: 0
 14525                           ;main.c: 1145: if ((0) != p) {
 14526  0063A6  0102               	movlb	2	; () banked
 14527  0063A8  51C5               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14528  0063AA  11C4               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14529  0063AC  E015               	bz	l15096
 14530                           
 14531                           ; BSR set to: 2
 14532                           ;main.c: 1146: maskno = atoi(p);
 14533  0063AE  C2C4  F066         	movff	doModeVerbose@p_1306,?_atoi
 14534  0063B2  C2C5  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14535  0063B6  ECAA  F015         	call	_atoi	;wreg free
 14536  0063BA  5166               	movf	?_atoi& (0+255),w,b
 14537  0063BC  0102               	movlb	2	; () banked
 14538  0063BE  6FAF               	movwf	doModeVerbose@maskno& (0+255),b
 14539                           
 14540                           ; BSR set to: 2
 14541                           ;main.c: 1147: if (maskno > 1) {
 14542  0063C0  0E01               	movlw	1
 14543  0063C2  65AF               	cpfsgt	doModeVerbose@maskno& (0+255),b
 14544  0063C4  D012               	goto	l15104
 14545                           
 14546                           ; BSR set to: 2
 14547                           ;main.c: 1148: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 14548  0063C6  0E71               	movlw	high STR_120
 14549  0063C8  0100               	movlb	0	; () banked
 14550  0063CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14551  0063CC  0E62               	movlw	low STR_120
 14552  0063CE  6F61               	movwf	?_putsUSART& (0+255),b
 14553  0063D0  ECBC  F00A         	call	_putsUSART	;wreg free
 14554  0063D4  EF13  F02D         	goto	l14698
 14555  0063D8                     l15096:
 14556                           
 14557                           ; BSR set to: 2
 14558                           ;main.c: 1154: else {
 14559                           ;main.c: 1155: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 14560  0063D8  0E75               	movlw	high STR_121
 14561  0063DA  0100               	movlb	0	; () banked
 14562  0063DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14563  0063DE  0E92               	movlw	low STR_121
 14564  0063E0  6F61               	movwf	?_putsUSART& (0+255),b
 14565  0063E2  ECBC  F00A         	call	_putsUSART	;wreg free
 14566  0063E6  EF13  F02D         	goto	l14698
 14567  0063EA                     l15104:
 14568                           
 14569                           ; BSR set to: 2
 14570                           ;main.c: 1159: }
 14571                           ;main.c: 1162: p = strtok((0), ",");
 14572  0063EA  DB32               	call	PL6	;call to abstracted procedure
 14573  0063EC  ECBA  F00D         	call	_strtok	;wreg free
 14574  0063F0  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1306
 14575  0063F4  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14576                           
 14577                           ; BSR set to: 0
 14578                           ;main.c: 1163: if ((0) != p) {
 14579  0063F8  0102               	movlb	2	; () banked
 14580  0063FA  51C5               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14581  0063FC  11C4               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14582  0063FE  E00A               	bz	l15110
 14583                           
 14584                           ; BSR set to: 2
 14585                           ;main.c: 1164: mask_priority = atoi(p);
 14586  006400  C2C4  F066         	movff	doModeVerbose@p_1306,?_atoi
 14587  006404  C2C5  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14588  006408  ECAA  F015         	call	_atoi	;wreg free
 14589  00640C  5166               	movf	?_atoi& (0+255),w,b
 14590  00640E  0102               	movlb	2	; () banked
 14591  006410  6F8F               	movwf	doModeVerbose@mask_priority& (0+255),b
 14592                           
 14593                           ;main.c: 1165: }
 14594  006412  D009               	goto	l15118
 14595  006414                     l15110:
 14596                           
 14597                           ; BSR set to: 2
 14598                           ;main.c: 1166: else {
 14599                           ;main.c: 1167: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14600  006414  0E74               	movlw	high STR_123
 14601  006416  0100               	movlb	0	; () banked
 14602  006418  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14603  00641A  0E0C               	movlw	low STR_123
 14604  00641C  6F61               	movwf	?_putsUSART& (0+255),b
 14605  00641E  ECBC  F00A         	call	_putsUSART	;wreg free
 14606  006422  EF13  F02D         	goto	l14698
 14607  006426                     l15118:
 14608                           
 14609                           ; BSR set to: 2
 14610                           ;main.c: 1171: }
 14611                           ;main.c: 1174: p = strtok((0), ",");
 14612  006426  DB14               	call	PL6	;call to abstracted procedure
 14613  006428  ECBA  F00D         	call	_strtok	;wreg free
 14614  00642C  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1306
 14615  006430  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;main.c: 1175: if ((0) != p) {
 14619  006434  0102               	movlb	2	; () banked
 14620  006436  51C5               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14621  006438  11C4               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14622  00643A  E00B               	bz	l15124
 14623                           
 14624                           ; BSR set to: 2
 14625                           ;main.c: 1176: mask_class = atoi(p);
 14626  00643C  C2C4  F066         	movff	doModeVerbose@p_1306,?_atoi
 14627  006440  C2C5  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14628  006444  ECAA  F015         	call	_atoi	;wreg free
 14629  006448  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14630  00644C  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14631                           
 14632                           ;main.c: 1177: }
 14633  006450  D009               	goto	l15132
 14634  006452                     l15124:
 14635                           
 14636                           ; BSR set to: 2
 14637                           ;main.c: 1178: else {
 14638                           ;main.c: 1179: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14639  006452  0E75               	movlw	high STR_125
 14640  006454  0100               	movlb	0	; () banked
 14641  006456  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14642  006458  0EDC               	movlw	low STR_125
 14643  00645A  6F61               	movwf	?_putsUSART& (0+255),b
 14644  00645C  ECBC  F00A         	call	_putsUSART	;wreg free
 14645  006460  EF13  F02D         	goto	l14698
 14646  006464                     l15132:
 14647                           
 14648                           ; BSR set to: 0
 14649                           ;main.c: 1183: }
 14650                           ;main.c: 1186: p = strtok((0), ",");
 14651  006464  DAFD               	call	PL8	;call to abstracted procedure
 14652  006466  ECBA  F00D         	call	_strtok	;wreg free
 14653  00646A  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1306
 14654  00646E  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;main.c: 1187: if ((0) != p) {
 14658  006472  0102               	movlb	2	; () banked
 14659  006474  51C5               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14660  006476  11C4               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14661  006478  E00A               	bz	l15138
 14662                           
 14663                           ; BSR set to: 2
 14664                           ;main.c: 1188: mask_type = atoi(p);
 14665  00647A  C2C4  F066         	movff	doModeVerbose@p_1306,?_atoi
 14666  00647E  C2C5  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14667  006482  ECAA  F015         	call	_atoi	;wreg free
 14668  006486  5166               	movf	?_atoi& (0+255),w,b
 14669  006488  0102               	movlb	2	; () banked
 14670  00648A  6F90               	movwf	doModeVerbose@mask_type& (0+255),b
 14671                           
 14672                           ;main.c: 1189: }
 14673  00648C  D009               	goto	l15146
 14674  00648E                     l15138:
 14675                           
 14676                           ; BSR set to: 2
 14677                           ;main.c: 1190: else {
 14678                           ;main.c: 1191: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14679  00648E  0E76               	movlw	high STR_127
 14680  006490  0100               	movlb	0	; () banked
 14681  006492  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14682  006494  0E01               	movlw	low STR_127
 14683  006496  6F61               	movwf	?_putsUSART& (0+255),b
 14684  006498  ECBC  F00A         	call	_putsUSART	;wreg free
 14685  00649C  EF13  F02D         	goto	l14698
 14686  0064A0                     l15146:
 14687                           
 14688                           ; BSR set to: 2
 14689                           ;main.c: 1195: }
 14690                           ;main.c: 1198: p = strtok((0), ",");
 14691  0064A0  DAD7               	call	PL6	;call to abstracted procedure
 14692  0064A2  ECBA  F00D         	call	_strtok	;wreg free
 14693  0064A6  C06C  F2C4         	movff	?_strtok,doModeVerbose@p_1306
 14694  0064AA  C06D  F2C5         	movff	?_strtok+1,doModeVerbose@p_1306+1
 14695                           
 14696                           ; BSR set to: 0
 14697                           ;main.c: 1199: if ((0) != p) {
 14698  0064AE  0102               	movlb	2	; () banked
 14699  0064B0  51C5               	movf	(doModeVerbose@p_1306+1)& (0+255),w,b
 14700  0064B2  11C4               	iorwf	doModeVerbose@p_1306& (0+255),w,b
 14701  0064B4  E00A               	bz	l15152
 14702                           
 14703                           ; BSR set to: 2
 14704                           ;main.c: 1200: mask_nodeid = atoi(p);
 14705  0064B6  C2C4  F066         	movff	doModeVerbose@p_1306,?_atoi
 14706  0064BA  C2C5  F067         	movff	doModeVerbose@p_1306+1,?_atoi+1
 14707  0064BE  ECAA  F015         	call	_atoi	;wreg free
 14708  0064C2  5166               	movf	?_atoi& (0+255),w,b
 14709  0064C4  0102               	movlb	2	; () banked
 14710  0064C6  6F91               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14711                           
 14712                           ;main.c: 1201: }
 14713  0064C8  D009               	goto	l15160
 14714  0064CA                     l15152:
 14715                           
 14716                           ; BSR set to: 2
 14717                           ;main.c: 1202: else {
 14718                           ;main.c: 1203: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14719  0064CA  0E74               	movlw	high STR_129
 14720  0064CC  0100               	movlb	0	; () banked
 14721  0064CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14722  0064D0  0ED1               	movlw	low STR_129
 14723  0064D2  6F61               	movwf	?_putsUSART& (0+255),b
 14724  0064D4  ECBC  F00A         	call	_putsUSART	;wreg free
 14725  0064D8  EF13  F02D         	goto	l14698
 14726  0064DC                     l15160:
 14727                           
 14728                           ; BSR set to: 2
 14729                           ;main.c: 1207: }
 14730                           ;main.c: 1208: uint32_t id = ((uint32_t) mask_priority << 26) |
 14731                           ;main.c: 1209: ((uint32_t) mask_class << 16) |
 14732                           ;main.c: 1210: ((uint32_t) mask_type << 8) |
 14733                           ;main.c: 1211: mask_nodeid;
 14734  0064DC  C290  F0CC         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14735  0064E0  DB06               	call	PL42	;call to abstracted procedure
 14736  0064E2  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14737  0064E4  0100               	movlb	0	; () banked
 14738  0064E6  6FD0               	movwf	(??_doModeVerbose+4)& (0+255),b
 14739  0064E8  0102               	movlb	2	; () banked
 14740  0064EA  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14741  0064EC  DB26               	call	PL60	;call to abstracted procedure
 14742  0064EE  C28F  F0D4         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14743  0064F2  DABD               	call	PL10	;call to abstracted procedure
 14744  0064F4  5191               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14745  0064F6  0100               	movlb	0	; () banked
 14746  0064F8  11DC               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14747  0064FA  0102               	movlb	2	; () banked
 14748  0064FC  6FAA               	movwf	doModeVerbose@id_1318& (0+255),b
 14749  0064FE  0100               	movlb	0	; () banked
 14750  006500  51DD               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14751  006502  0102               	movlb	2	; () banked
 14752  006504  6FAB               	movwf	(doModeVerbose@id_1318+1)& (0+255),b
 14753  006506  0100               	movlb	0	; () banked
 14754  006508  51DE               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14755  00650A  0102               	movlb	2	; () banked
 14756  00650C  6FAC               	movwf	(doModeVerbose@id_1318+2)& (0+255),b
 14757  00650E  0100               	movlb	0	; () banked
 14758  006510  51DF               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14759  006512  0102               	movlb	2	; () banked
 14760  006514  6FAD               	movwf	(doModeVerbose@id_1318+3)& (0+255),b
 14761                           
 14762                           ; BSR set to: 2
 14763                           ;main.c: 1214: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14764  006516  0E80               	movlw	128
 14765  006518  EC0A  F008         	call	_ECANSetOperationMode
 14766                           
 14767                           ; BSR set to: 0
 14768                           ;main.c: 1216: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14769                           ;main.c: 1217: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14770  00651C  0102               	movlb	2	; () banked
 14771  00651E  51AF               	movf	doModeVerbose@maskno& (0+255),w,b
 14772  006520  E008               	bz	l15168
 14773                           
 14774                           ; BSR set to: 2
 14775  006522  0E0F               	movlw	15	;volatile
 14776  006524  0100               	movlb	0	; () banked
 14777  006526  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14778  006528  0E18               	movlw	24	;volatile
 14779  00652A  DAFB               	call	PL58	;call to abstracted procedure
 14780  00652C  EC2D  F016         	call	__CANIDToRegs	;wreg free
 14781  006530  D007               	goto	l15170
 14782  006532                     l15168:
 14783                           
 14784                           ; BSR set to: 2
 14785  006532  0E0F               	movlw	15	;volatile
 14786  006534  0100               	movlb	0	; () banked
 14787  006536  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14788  006538  0E1C               	movlw	28	;volatile
 14789  00653A  DAF3               	call	PL58	;call to abstracted procedure
 14790  00653C  EC2D  F016         	call	__CANIDToRegs	;wreg free
 14791  006540                     l15170:
 14792                           
 14793                           ; BSR set to: 0
 14794                           ;main.c: 1220: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14795  006540  0E00               	movlw	0
 14796  006542  EC0A  F008         	call	_ECANSetOperationMode
 14797                           
 14798                           ; BSR set to: 0
 14799                           ;main.c: 1222: putsUSART((char *) "+OK\r\n");
 14800  006546  0E7C               	movlw	high STR_9
 14801  006548  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14802  00654A  0E64               	movlw	low STR_9
 14803  00654C  6F61               	movwf	?_putsUSART& (0+255),b
 14804  00654E  ECBC  F00A         	call	_putsUSART	;wreg free
 14805                           
 14806                           ;main.c: 1224: }
 14807  006552  D258               	goto	l15316
 14808  006554                     l15174:
 14809                           
 14810                           ; BSR set to: 0
 14811                           ;main.c: 1234: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14812  006554  0E01               	movlw	high _cmdbuf
 14813  006556  0100               	movlb	0	; () banked
 14814  006558  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14815  00655A  0E2D               	movlw	low _cmdbuf
 14816  00655C  6F6D               	movwf	?_stristr& (0+255),b
 14817  00655E  0E7C               	movlw	high STR_131
 14818  006560  6F70               	movwf	(?_stristr+3)& (0+255),b
 14819  006562  0E8E               	movlw	low STR_131
 14820  006564  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14821  006566  ECB5  F00C         	call	_stristr	;wreg free
 14822  00656A  0E2D               	movlw	low _cmdbuf
 14823  00656C  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14824  00656E  0E01               	movlw	high _cmdbuf
 14825  006570  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14826  006572  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14827  006574  E102               	bnz	u19695
 14828  006576  516D               	movf	?_stristr& (0+255),w,b
 14829  006578  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14830  00657A                     u19695:
 14831  00657A  E001 D230          	bnz	l15310
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;main.c: 1237: strcpy(cmdbuf, cmdbuf + 4);
 14835  00657E  0E01               	movlw	high _cmdbuf
 14836  006580  0100               	movlb	0	; () banked
 14837  006582  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14838  006584  0E2D               	movlw	low _cmdbuf
 14839  006586  6F60               	movwf	?_strcpy& (0+255),b
 14840  006588  0E31               	movlw	low (_cmdbuf+4)
 14841  00658A  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14842  00658C  0E01               	movlw	high (_cmdbuf+4)
 14843  00658E  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14844  006590  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 14845  006594  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14846  006598  EC6B  F008         	call	_strcpy	;wreg free
 14847                           
 14848                           ; BSR set to: 0
 14849                           ;main.c: 1240: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14850  00659C  0E01               	movlw	high _cmdbuf
 14851  00659E  0100               	movlb	0	; () banked
 14852  0065A0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14853  0065A2  0E2D               	movlw	low _cmdbuf
 14854  0065A4  6F6D               	movwf	?_stristr& (0+255),b
 14855  0065A6  0E7C               	movlw	high STR_132
 14856  0065A8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14857  0065AA  0ED9               	movlw	low STR_132
 14858  0065AC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14859  0065AE  ECB5  F00C         	call	_stristr	;wreg free
 14860  0065B2  0E2D               	movlw	low _cmdbuf
 14861  0065B4  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14862  0065B6  0E01               	movlw	high _cmdbuf
 14863  0065B8  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14864  0065BA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14865  0065BC  E102               	bnz	u19705
 14866  0065BE  516D               	movf	?_stristr& (0+255),w,b
 14867  0065C0  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14868  0065C2                     u19705:
 14869  0065C2  E114               	bnz	l15186
 14870                           
 14871                           ; BSR set to: 0
 14872                           ;main.c: 1241: bHex = 1;
 14873  0065C4  0E01               	movlw	1
 14874  0065C6  6E2C               	movwf	_bHex,c
 14875                           
 14876                           ; BSR set to: 0
 14877                           ;main.c: 1242: (Busy_eep(), Write_b_eep(0x06,1));
 14878  0065C8  ECD3  F007         	call	_Busy_eep	;wreg free
 14879  0065CC  0100               	movlb	0	; () banked
 14880  0065CE  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14881  0065D0  0E06               	movlw	6
 14882  0065D2  6F60               	movwf	?_Write_b_eep& (0+255),b
 14883  0065D4  0E01               	movlw	1
 14884  0065D6  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14885  0065D8  ECB2  F008         	call	_Write_b_eep	;wreg free
 14886                           
 14887                           ;main.c: 1243: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14888  0065DC  0E73               	movlw	high STR_133
 14889  0065DE  0100               	movlb	0	; () banked
 14890  0065E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14891  0065E2  0E3C               	movlw	low STR_133
 14892  0065E4  6F61               	movwf	?_putsUSART& (0+255),b
 14893  0065E6  ECBC  F00A         	call	_putsUSART	;wreg free
 14894                           
 14895                           ;main.c: 1244: }
 14896  0065EA  D20C               	goto	l15316
 14897  0065EC                     l15186:
 14898                           
 14899                           ; BSR set to: 0
 14900                           ;main.c: 1246: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14901  0065EC  0E01               	movlw	high _cmdbuf
 14902  0065EE  0100               	movlb	0	; () banked
 14903  0065F0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14904  0065F2  0E2D               	movlw	low _cmdbuf
 14905  0065F4  6F6D               	movwf	?_stristr& (0+255),b
 14906  0065F6  0E7B               	movlw	high STR_134
 14907  0065F8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14908  0065FA  0EEA               	movlw	low STR_134
 14909  0065FC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14910  0065FE  ECB5  F00C         	call	_stristr	;wreg free
 14911  006602  0E2D               	movlw	low _cmdbuf
 14912  006604  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14913  006606  0E01               	movlw	high _cmdbuf
 14914  006608  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14915  00660A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14916  00660C  E102               	bnz	u19715
 14917  00660E  516D               	movf	?_stristr& (0+255),w,b
 14918  006610  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 14919  006612                     u19715:
 14920  006612  E113               	bnz	l15196
 14921                           
 14922                           ; BSR set to: 0
 14923                           ;main.c: 1247: bHex = 0;
 14924  006614  6A2C               	clrf	_bHex,c
 14925                           
 14926                           ; BSR set to: 0
 14927                           ;main.c: 1248: (Busy_eep(), Write_b_eep(0x06,0));
 14928  006616  ECD3  F007         	call	_Busy_eep	;wreg free
 14929  00661A  0100               	movlb	0	; () banked
 14930  00661C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14931  00661E  0E06               	movlw	6
 14932  006620  6F60               	movwf	?_Write_b_eep& (0+255),b
 14933  006622  0E00               	movlw	0
 14934  006624  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14935  006626  ECB2  F008         	call	_Write_b_eep	;wreg free
 14936                           
 14937                           ;main.c: 1249: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14938  00662A  0E74               	movlw	high STR_135
 14939  00662C  0100               	movlb	0	; () banked
 14940  00662E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14941  006630  0E34               	movlw	low STR_135
 14942  006632  6F61               	movwf	?_putsUSART& (0+255),b
 14943  006634  ECBC  F00A         	call	_putsUSART	;wreg free
 14944                           
 14945                           ;main.c: 1250: }
 14946  006638  D1E5               	goto	l15316
 14947  00663A                     l15196:
 14948                           
 14949                           ; BSR set to: 0
 14950                           ;main.c: 1251: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14951  00663A  0E01               	movlw	high _cmdbuf
 14952  00663C  0100               	movlb	0	; () banked
 14953  00663E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14954  006640  0E2D               	movlw	low _cmdbuf
 14955  006642  6F6D               	movwf	?_stristr& (0+255),b
 14956  006644  0E7B               	movlw	high STR_136
 14957  006646  6F70               	movwf	(?_stristr+3)& (0+255),b
 14958  006648  0E50               	movlw	low STR_136
 14959  00664A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14960  00664C  ECB5  F00C         	call	_stristr	;wreg free
 14961  006650  516E               	movf	(?_stristr+1)& (0+255),w,b
 14962  006652  116D               	iorwf	?_stristr& (0+255),w,b
 14963  006654  E02E               	bz	l15210
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;main.c: 1252: strcpy(cmdbuf, cmdbuf + 10);
 14967  006656  0E01               	movlw	high _cmdbuf
 14968  006658  0100               	movlb	0	; () banked
 14969  00665A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14970  00665C  0E2D               	movlw	low _cmdbuf
 14971  00665E  6F60               	movwf	?_strcpy& (0+255),b
 14972  006660  0E37               	movlw	low (_cmdbuf+10)
 14973  006662  6FCC               	movwf	??_doModeVerbose& (0+255),b
 14974  006664  0E01               	movlw	high (_cmdbuf+10)
 14975  006666  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 14976  006668  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 14977  00666C  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14978  006670  EC6B  F008         	call	_strcpy	;wreg free
 14979                           
 14980                           ; BSR set to: 0
 14981                           ;main.c: 1253: rwtimeout = atoi(cmdbuf);
 14982  006674  0E01               	movlw	high _cmdbuf
 14983  006676  0100               	movlb	0	; () banked
 14984  006678  6F67               	movwf	(?_atoi+1)& (0+255),b
 14985  00667A  0E2D               	movlw	low _cmdbuf
 14986  00667C  6F66               	movwf	?_atoi& (0+255),b
 14987  00667E  ECAA  F015         	call	_atoi	;wreg free
 14988  006682  5166               	movf	?_atoi& (0+255),w,b
 14989  006684  6E35               	movwf	_rwtimeout,c
 14990                           
 14991                           ; BSR set to: 0
 14992                           ;main.c: 1254: if (rwtimeout < 20u) {
 14993  006686  0E14               	movlw	20
 14994  006688  6035               	cpfslt	_rwtimeout,c
 14995  00668A  D001               	goto	l15206
 14996                           
 14997                           ; BSR set to: 0
 14998                           ;main.c: 1255: rwtimeout = 20u;
 14999  00668C  6E35               	movwf	_rwtimeout,c
 15000  00668E                     l15206:
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;main.c: 1256: }
 15004                           ;main.c: 1257: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 15005  00668E  ECD3  F007         	call	_Busy_eep	;wreg free
 15006  006692  0100               	movlb	0	; () banked
 15007  006694  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15008  006696  0E09               	movlw	9
 15009  006698  6F60               	movwf	?_Write_b_eep& (0+255),b
 15010  00669A  C035  F062         	movff	_rwtimeout,?_Write_b_eep+2
 15011  00669E  ECB2  F008         	call	_Write_b_eep	;wreg free
 15012                           
 15013                           ;main.c: 1258: putsUSART((char *) "+OK\r\n");
 15014  0066A2  0E7C               	movlw	high STR_9
 15015  0066A4  0100               	movlb	0	; () banked
 15016  0066A6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15017  0066A8  0E64               	movlw	low STR_9
 15018  0066AA  6F61               	movwf	?_putsUSART& (0+255),b
 15019  0066AC  ECBC  F00A         	call	_putsUSART	;wreg free
 15020                           
 15021                           ;main.c: 1259: }
 15022  0066B0  D1A9               	goto	l15316
 15023  0066B2                     l15210:
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;main.c: 1261: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 15027  0066B2  0E01               	movlw	high _cmdbuf
 15028  0066B4  0100               	movlb	0	; () banked
 15029  0066B6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15030  0066B8  0E2D               	movlw	low _cmdbuf
 15031  0066BA  6F6D               	movwf	?_stristr& (0+255),b
 15032  0066BC  0E7B               	movlw	high STR_138
 15033  0066BE  6F70               	movwf	(?_stristr+3)& (0+255),b
 15034  0066C0  0E8E               	movlw	low STR_138
 15035  0066C2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15036  0066C4  ECB5  F00C         	call	_stristr	;wreg free
 15037  0066C8  516E               	movf	(?_stristr+1)& (0+255),w,b
 15038  0066CA  116D               	iorwf	?_stristr& (0+255),w,b
 15039  0066CC  E061               	bz	l15244
 15040                           
 15041                           ; BSR set to: 0
 15042                           ;main.c: 1262: strcpy(cmdbuf, cmdbuf + 8);
 15043  0066CE  0E01               	movlw	high _cmdbuf
 15044  0066D0  D9B2               	call	PL4	;call to abstracted procedure
 15045  0066D2  EC6B  F008         	call	_strcpy	;wreg free
 15046                           
 15047                           ; BSR set to: 0
 15048                           ;main.c: 1263: if (0 != stristr(cmdbuf, "CLOSE")) {
 15049  0066D6  0E01               	movlw	high _cmdbuf
 15050  0066D8  0100               	movlb	0	; () banked
 15051  0066DA  DA5D               	call	PL100	;call to abstracted procedure
 15052  0066DC  ECB5  F00C         	call	_stristr	;wreg free
 15053  0066E0  516E               	movf	(?_stristr+1)& (0+255),w,b
 15054  0066E2  116D               	iorwf	?_stristr& (0+255),w,b
 15055  0066E4  E00B               	bz	l15220
 15056                           
 15057                           ; BSR set to: 0
 15058                           ;main.c: 1264: (Busy_eep(), Write_b_eep(0x07,0));
 15059  0066E6  ECD3  F007         	call	_Busy_eep	;wreg free
 15060  0066EA  0100               	movlb	0	; () banked
 15061  0066EC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15062  0066EE  0E07               	movlw	7
 15063  0066F0  6F60               	movwf	?_Write_b_eep& (0+255),b
 15064  0066F2  0E00               	movlw	0
 15065  0066F4  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 15066  0066F6  ECB2  F008         	call	_Write_b_eep	;wreg free
 15067                           
 15068                           ;main.c: 1265: }
 15069  0066FA  D184               	goto	l15316
 15070  0066FC                     l15220:
 15071                           
 15072                           ; BSR set to: 0
 15073                           ;main.c: 1266: else if (0 != stristr(cmdbuf, "OPEN")) {
 15074  0066FC  DA29               	call	PL78	;call to abstracted procedure
 15075  0066FE  ECB5  F00C         	call	_stristr	;wreg free
 15076  006702  516E               	movf	(?_stristr+1)& (0+255),w,b
 15077  006704  116D               	iorwf	?_stristr& (0+255),w,b
 15078  006706  E00B               	bz	l15226
 15079                           
 15080                           ; BSR set to: 0
 15081                           ;main.c: 1267: (Busy_eep(), Write_b_eep(0x07,1));
 15082  006708  ECD3  F007         	call	_Busy_eep	;wreg free
 15083  00670C  0100               	movlb	0	; () banked
 15084  00670E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15085  006710  0E07               	movlw	7
 15086  006712  6F60               	movwf	?_Write_b_eep& (0+255),b
 15087  006714  0E01               	movlw	1
 15088  006716  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15089  006718  ECB2  F008         	call	_Write_b_eep	;wreg free
 15090                           
 15091                           ;main.c: 1268: }
 15092  00671C  D173               	goto	l15316
 15093  00671E                     l15226:
 15094                           
 15095                           ; BSR set to: 0
 15096                           ;main.c: 1269: else if (0 != stristr(cmdbuf, "SILENT")) {
 15097  00671E  0E01               	movlw	high _cmdbuf
 15098  006720  DA21               	call	PL84	;call to abstracted procedure
 15099  006722  ECB5  F00C         	call	_stristr	;wreg free
 15100  006726  516E               	movf	(?_stristr+1)& (0+255),w,b
 15101  006728  116D               	iorwf	?_stristr& (0+255),w,b
 15102  00672A  E00B               	bz	l15232
 15103                           
 15104                           ; BSR set to: 0
 15105                           ;main.c: 1270: (Busy_eep(), Write_b_eep(0x07,2));
 15106  00672C  ECD3  F007         	call	_Busy_eep	;wreg free
 15107  006730  0100               	movlb	0	; () banked
 15108  006732  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15109  006734  0E07               	movlw	7
 15110  006736  6F60               	movwf	?_Write_b_eep& (0+255),b
 15111  006738  0E02               	movlw	2
 15112  00673A  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15113  00673C  ECB2  F008         	call	_Write_b_eep	;wreg free
 15114                           
 15115                           ;main.c: 1271: }
 15116  006740  D161               	goto	l15316
 15117  006742                     l15232:
 15118                           
 15119                           ; BSR set to: 0
 15120                           ;main.c: 1272: else if (0 != stristr(cmdbuf, "LISTEN")) {
 15121  006742  0E01               	movlw	high _cmdbuf
 15122  006744  0100               	movlb	0	; () banked
 15123  006746  DA17               	call	PL92	;call to abstracted procedure
 15124  006748  ECB5  F00C         	call	_stristr	;wreg free
 15125  00674C  516E               	movf	(?_stristr+1)& (0+255),w,b
 15126  00674E  116D               	iorwf	?_stristr& (0+255),w,b
 15127  006750  E00B               	bz	l15238
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;main.c: 1273: (Busy_eep(), Write_b_eep(0x07,3));
 15131  006752  ECD3  F007         	call	_Busy_eep	;wreg free
 15132  006756  0100               	movlb	0	; () banked
 15133  006758  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15134  00675A  0E07               	movlw	7
 15135  00675C  6F60               	movwf	?_Write_b_eep& (0+255),b
 15136  00675E  0E03               	movlw	3
 15137  006760  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15138  006762  ECB2  F008         	call	_Write_b_eep	;wreg free
 15139                           
 15140                           ;main.c: 1274: }
 15141  006766  D14E               	goto	l15316
 15142  006768                     l15238:
 15143                           
 15144                           ; BSR set to: 0
 15145                           ;main.c: 1275: else if (0 != stristr(cmdbuf, "LOOPBACK")) {
 15146  006768  0E01               	movlw	high _cmdbuf
 15147  00676A  0100               	movlb	0	; () banked
 15148  00676C  DA0C               	call	PL96	;call to abstracted procedure
 15149  00676E  ECB5  F00C         	call	_stristr	;wreg free
 15150  006772  516E               	movf	(?_stristr+1)& (0+255),w,b
 15151  006774  116D               	iorwf	?_stristr& (0+255),w,b
 15152  006776  E101 D145          	bz	l15316
 15153                           
 15154                           ; BSR set to: 0
 15155                           ;main.c: 1276: (Busy_eep(), Write_b_eep(0x07,4));
 15156  00677A  ECD3  F007         	call	_Busy_eep	;wreg free
 15157  00677E  0100               	movlb	0	; () banked
 15158  006780  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15159  006782  0E07               	movlw	7
 15160  006784  6F60               	movwf	?_Write_b_eep& (0+255),b
 15161  006786  0E04               	movlw	4
 15162  006788  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15163  00678A  ECB2  F008         	call	_Write_b_eep	;wreg free
 15164                           
 15165                           ; BSR set to: 0
 15166  00678E  D13A               	goto	l15316
 15167  006790                     l15244:
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;main.c: 1279: else if (0 != stristr(cmdbuf, "MODE ")) {
 15171  006790  0E01               	movlw	high _cmdbuf
 15172  006792  0100               	movlb	0	; () banked
 15173  006794  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15174  006796  0E2D               	movlw	low _cmdbuf
 15175  006798  6F6D               	movwf	?_stristr& (0+255),b
 15176  00679A  0E7C               	movlw	high STR_144
 15177  00679C  6F70               	movwf	(?_stristr+3)& (0+255),b
 15178  00679E  0E70               	movlw	low STR_144
 15179  0067A0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15180  0067A2  ECB5  F00C         	call	_stristr	;wreg free
 15181  0067A6  516E               	movf	(?_stristr+1)& (0+255),w,b
 15182  0067A8  116D               	iorwf	?_stristr& (0+255),w,b
 15183  0067AA  E06C               	bz	l15274
 15184                           
 15185                           ; BSR set to: 0
 15186                           ;main.c: 1280: strcpy(cmdbuf, cmdbuf + 5);
 15187  0067AC  D936               	call	PL2	;call to abstracted procedure
 15188  0067AE  EC6B  F008         	call	_strcpy	;wreg free
 15189                           
 15190                           ; BSR set to: 0
 15191                           ;main.c: 1281: if (0 != stristr(cmdbuf, "VERBOSE")) {
 15192  0067B2  0E01               	movlw	high _cmdbuf
 15193  0067B4  0100               	movlb	0	; () banked
 15194  0067B6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15195  0067B8  0E2D               	movlw	low _cmdbuf
 15196  0067BA  6F6D               	movwf	?_stristr& (0+255),b
 15197  0067BC  0E7B               	movlw	high STR_145
 15198  0067BE  6F70               	movwf	(?_stristr+3)& (0+255),b
 15199  0067C0  0EE2               	movlw	low STR_145
 15200  0067C2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15201  0067C4  ECB5  F00C         	call	_stristr	;wreg free
 15202  0067C8  516E               	movf	(?_stristr+1)& (0+255),w,b
 15203  0067CA  116D               	iorwf	?_stristr& (0+255),w,b
 15204  0067CC  E014               	bz	l15258
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;main.c: 1282: mode = 0;
 15208  0067CE  0101               	movlb	1	; () banked
 15209  0067D0  6B2C               	clrf	_mode& (0+255),b
 15210                           
 15211                           ; BSR set to: 1
 15212                           ;main.c: 1283: (Busy_eep(), Write_b_eep(0x03,0));
 15213  0067D2  ECD3  F007         	call	_Busy_eep	;wreg free
 15214  0067D6  0100               	movlb	0	; () banked
 15215  0067D8  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15216  0067DA  0E03               	movlw	3
 15217  0067DC  6F60               	movwf	?_Write_b_eep& (0+255),b
 15218  0067DE  0E00               	movlw	0
 15219  0067E0  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 15220  0067E2  ECB2  F008         	call	_Write_b_eep	;wreg free
 15221                           
 15222                           ;main.c: 1284: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 15223  0067E6  0E77               	movlw	high STR_146
 15224  0067E8  0100               	movlb	0	; () banked
 15225  0067EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15226  0067EC  0EAA               	movlw	low STR_146
 15227  0067EE  6F61               	movwf	?_putsUSART& (0+255),b
 15228  0067F0  ECBC  F00A         	call	_putsUSART	;wreg free
 15229                           
 15230                           ;main.c: 1285: }
 15231  0067F4  D107               	goto	l15316
 15232  0067F6                     l15258:
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;main.c: 1286: else if (0 != stristr(cmdbuf, "VSCP")) {
 15236  0067F6  0E01               	movlw	high _cmdbuf
 15237  0067F8  0100               	movlb	0	; () banked
 15238  0067FA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15239  0067FC  0E2D               	movlw	low _cmdbuf
 15240  0067FE  6F6D               	movwf	?_stristr& (0+255),b
 15241  006800  0E7C               	movlw	high STR_147
 15242  006802  6F70               	movwf	(?_stristr+3)& (0+255),b
 15243  006804  0EB1               	movlw	low STR_147
 15244  006806  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15245  006808  ECB5  F00C         	call	_stristr	;wreg free
 15246  00680C  516E               	movf	(?_stristr+1)& (0+255),w,b
 15247  00680E  116D               	iorwf	?_stristr& (0+255),w,b
 15248  006810  E015               	bz	l15266
 15249                           
 15250                           ; BSR set to: 0
 15251                           ;main.c: 1287: mode = 1;
 15252  006812  0E01               	movlw	1
 15253  006814  0101               	movlb	1	; () banked
 15254  006816  6F2C               	movwf	_mode& (0+255),b
 15255                           
 15256                           ; BSR set to: 1
 15257                           ;main.c: 1288: (Busy_eep(), Write_b_eep(0x03,1));
 15258  006818  ECD3  F007         	call	_Busy_eep	;wreg free
 15259  00681C  0100               	movlb	0	; () banked
 15260  00681E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15261  006820  0E03               	movlw	3
 15262  006822  6F60               	movwf	?_Write_b_eep& (0+255),b
 15263  006824  0E01               	movlw	1
 15264  006826  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15265  006828  ECB2  F008         	call	_Write_b_eep	;wreg free
 15266                           
 15267                           ;main.c: 1289: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 15268  00682C  0E77               	movlw	high STR_148
 15269  00682E  0100               	movlb	0	; () banked
 15270  006830  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15271  006832  0E12               	movlw	low STR_148
 15272  006834  6F61               	movwf	?_putsUSART& (0+255),b
 15273  006836  ECBC  F00A         	call	_putsUSART	;wreg free
 15274                           
 15275                           ;main.c: 1290: }
 15276  00683A  D0E4               	goto	l15316
 15277  00683C                     l15266:
 15278                           
 15279                           ; BSR set to: 0
 15280                           ;main.c: 1291: else if (0 != stristr(cmdbuf, "SLCAN")) {
 15281  00683C  0E01               	movlw	high _cmdbuf
 15282  00683E  0100               	movlb	0	; () banked
 15283  006840  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15284  006842  0E2D               	movlw	low _cmdbuf
 15285  006844  6F6D               	movwf	?_stristr& (0+255),b
 15286  006846  0E7C               	movlw	high STR_149
 15287  006848  6F70               	movwf	(?_stristr+3)& (0+255),b
 15288  00684A  0E88               	movlw	low STR_149
 15289  00684C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15290  00684E  ECB5  F00C         	call	_stristr	;wreg free
 15291  006852  516E               	movf	(?_stristr+1)& (0+255),w,b
 15292  006854  116D               	iorwf	?_stristr& (0+255),w,b
 15293  006856  E101 D0D5          	bz	l15316
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;main.c: 1292: mode = 2;
 15297  00685A  0E02               	movlw	2
 15298  00685C  0101               	movlb	1	; () banked
 15299  00685E  6F2C               	movwf	_mode& (0+255),b
 15300                           
 15301                           ; BSR set to: 1
 15302                           ;main.c: 1293: (Busy_eep(), Write_b_eep(0x03,2));
 15303  006860  ECD3  F007         	call	_Busy_eep	;wreg free
 15304  006864  0100               	movlb	0	; () banked
 15305  006866  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 15306  006868  0E03               	movlw	3
 15307  00686A  6F60               	movwf	?_Write_b_eep& (0+255),b
 15308  00686C  0E02               	movlw	2
 15309  00686E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 15310  006870  ECB2  F008         	call	_Write_b_eep	;wreg free
 15311                           
 15312                           ;main.c: 1294: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 15313  006874  0E78               	movlw	high STR_150
 15314  006876  0100               	movlb	0	; () banked
 15315  006878  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15316  00687A  0E17               	movlw	low STR_150
 15317  00687C  6F61               	movwf	?_putsUSART& (0+255),b
 15318  00687E  ECBC  F00A         	call	_putsUSART	;wreg free
 15319  006882  D0C0               	goto	l15316
 15320  006884                     l15274:
 15321                           
 15322                           ; BSR set to: 0
 15323                           ;main.c: 1298: else if (0 != stristr(cmdbuf, "FILTER ")) {
 15324  006884  0E01               	movlw	high _cmdbuf
 15325  006886  0100               	movlb	0	; () banked
 15326  006888  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15327  00688A  0E2D               	movlw	low _cmdbuf
 15328  00688C  6F6D               	movwf	?_stristr& (0+255),b
 15329  00688E  0E7B               	movlw	high STR_151
 15330  006890  6F70               	movwf	(?_stristr+3)& (0+255),b
 15331  006892  0ED2               	movlw	low STR_151
 15332  006894  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15333  006896  ECB5  F00C         	call	_stristr	;wreg free
 15334  00689A  516E               	movf	(?_stristr+1)& (0+255),w,b
 15335  00689C  116D               	iorwf	?_stristr& (0+255),w,b
 15336  00689E  E010               	bz	l15278
 15337                           
 15338                           ; BSR set to: 0
 15339                           ;main.c: 1299: strcpy(cmdbuf, cmdbuf + 7);
 15340  0068A0  0E01               	movlw	high _cmdbuf
 15341  0068A2  0100               	movlb	0	; () banked
 15342  0068A4  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15343  0068A6  0E2D               	movlw	low _cmdbuf
 15344  0068A8  6F60               	movwf	?_strcpy& (0+255),b
 15345  0068AA  0E34               	movlw	low (_cmdbuf+7)
 15346  0068AC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15347  0068AE  0E01               	movlw	high (_cmdbuf+7)
 15348  0068B0  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15349  0068B2  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15350  0068B6  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15351  0068BA  EC6B  F008         	call	_strcpy	;wreg free
 15352                           
 15353                           ;main.c: 1301: }
 15354  0068BE  D0A2               	goto	l15316
 15355  0068C0                     l15278:
 15356                           
 15357                           ; BSR set to: 0
 15358                           ;main.c: 1303: else if (0 != stristr(cmdbuf, "MASK ")) {
 15359  0068C0  0E01               	movlw	high _cmdbuf
 15360  0068C2  0100               	movlb	0	; () banked
 15361  0068C4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15362  0068C6  0E2D               	movlw	low _cmdbuf
 15363  0068C8  6F6D               	movwf	?_stristr& (0+255),b
 15364  0068CA  0E7C               	movlw	high STR_152
 15365  0068CC  6F70               	movwf	(?_stristr+3)& (0+255),b
 15366  0068CE  0E76               	movlw	low STR_152
 15367  0068D0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15368  0068D2  ECB5  F00C         	call	_stristr	;wreg free
 15369  0068D6  516E               	movf	(?_stristr+1)& (0+255),w,b
 15370  0068D8  116D               	iorwf	?_stristr& (0+255),w,b
 15371  0068DA  E004               	bz	l15282
 15372                           
 15373                           ; BSR set to: 0
 15374                           ;main.c: 1304: strcpy(cmdbuf, cmdbuf + 5);
 15375  0068DC  D89E               	call	PL2	;call to abstracted procedure
 15376  0068DE  EC6B  F008         	call	_strcpy	;wreg free
 15377                           
 15378                           ;main.c: 1305: }
 15379  0068E2  D090               	goto	l15316
 15380  0068E4                     l15282:
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;main.c: 1307: else if (cmdbuf == stristr(cmdbuf, "ECHO ")) {
 15384  0068E4  0E01               	movlw	high _cmdbuf
 15385  0068E6  0100               	movlb	0	; () banked
 15386  0068E8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15387  0068EA  0E2D               	movlw	low _cmdbuf
 15388  0068EC  6F6D               	movwf	?_stristr& (0+255),b
 15389  0068EE  0E7C               	movlw	high STR_153
 15390  0068F0  6F70               	movwf	(?_stristr+3)& (0+255),b
 15391  0068F2  0E7C               	movlw	low STR_153
 15392  0068F4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15393  0068F6  ECB5  F00C         	call	_stristr	;wreg free
 15394  0068FA  0E2D               	movlw	low _cmdbuf
 15395  0068FC  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15396  0068FE  0E01               	movlw	high _cmdbuf
 15397  006900  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15398  006902  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15399  006904  E102               	bnz	u19865
 15400  006906  516D               	movf	?_stristr& (0+255),w,b
 15401  006908  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15402  00690A                     u19865:
 15403  00690A  E137               	bnz	l15300
 15404                           
 15405                           ; BSR set to: 0
 15406                           ;main.c: 1308: strcpy(cmdbuf, cmdbuf + 5);
 15407  00690C  D886               	call	PL2	;call to abstracted procedure
 15408  00690E  EC6B  F008         	call	_strcpy	;wreg free
 15409                           
 15410                           ; BSR set to: 0
 15411                           ;main.c: 1309: if (0 != stristr(cmdbuf, "ON")) {
 15412  006912  0E01               	movlw	high _cmdbuf
 15413  006914  0100               	movlb	0	; () banked
 15414  006916  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15415  006918  0E2D               	movlw	low _cmdbuf
 15416  00691A  6F6D               	movwf	?_stristr& (0+255),b
 15417  00691C  0E7B               	movlw	high (STR_18+5)
 15418  00691E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15419  006920  0EF7               	movlw	low (STR_18+5)
 15420  006922  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15421  006924  ECB5  F00C         	call	_stristr	;wreg free
 15422  006928  516E               	movf	(?_stristr+1)& (0+255),w,b
 15423  00692A  116D               	iorwf	?_stristr& (0+255),w,b
 15424  00692C  E009               	bz	l15292
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;main.c: 1310: bLocalEcho = 1;
 15428  00692E  0E01               	movlw	1
 15429  006930  6E2E               	movwf	_bLocalEcho,c
 15430                           
 15431                           ; BSR set to: 0
 15432                           ;main.c: 1311: putsUSART((char *) "+OK - Local echo on\r\n");
 15433  006932  0E79               	movlw	high STR_155
 15434  006934  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15435  006936  0EAE               	movlw	low STR_155
 15436  006938  6F61               	movwf	?_putsUSART& (0+255),b
 15437  00693A  ECBC  F00A         	call	_putsUSART	;wreg free
 15438                           
 15439                           ;main.c: 1312: }
 15440  00693E  D062               	goto	l15316
 15441  006940                     l15292:
 15442                           
 15443                           ; BSR set to: 0
 15444                           ;main.c: 1313: else if (0 != stristr(cmdbuf, "OFF")) {
 15445  006940  0E01               	movlw	high _cmdbuf
 15446  006942  0100               	movlb	0	; () banked
 15447  006944  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15448  006946  0E2D               	movlw	low _cmdbuf
 15449  006948  6F6D               	movwf	?_stristr& (0+255),b
 15450  00694A  0E7C               	movlw	high STR_156
 15451  00694C  6F70               	movwf	(?_stristr+3)& (0+255),b
 15452  00694E  0ED1               	movlw	low STR_156
 15453  006950  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15454  006952  ECB5  F00C         	call	_stristr	;wreg free
 15455  006956  516E               	movf	(?_stristr+1)& (0+255),w,b
 15456  006958  116D               	iorwf	?_stristr& (0+255),w,b
 15457  00695A  E008               	bz	l15298
 15458                           
 15459                           ; BSR set to: 0
 15460                           ;main.c: 1314: bLocalEcho = 0;
 15461  00695C  6A2E               	clrf	_bLocalEcho,c
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;main.c: 1315: putsUSART((char *) "+OK - Local echo off\r\n");
 15465  00695E  0E79               	movlw	high STR_157
 15466  006960  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15467  006962  0E53               	movlw	low STR_157
 15468  006964  6F61               	movwf	?_putsUSART& (0+255),b
 15469  006966  ECBC  F00A         	call	_putsUSART	;wreg free
 15470                           
 15471                           ;main.c: 1316: }
 15472  00696A  D04C               	goto	l15316
 15473  00696C                     l15298:
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;main.c: 1317: else {
 15477                           ;main.c: 1318: putsUSART((char *) "+ERROR - Wrong argument to 'set echo'.\r\n");
 15478  00696C  0E73               	movlw	high STR_158
 15479  00696E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15480  006970  0E92               	movlw	low STR_158
 15481  006972  6F61               	movwf	?_putsUSART& (0+255),b
 15482  006974  ECBC  F00A         	call	_putsUSART	;wreg free
 15483  006978  D045               	goto	l15316
 15484  00697A                     l15300:
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;main.c: 1322: else if (cmdbuf == stristr(cmdbuf, "DEFAULTS")) {
 15488  00697A  0E01               	movlw	high _cmdbuf
 15489  00697C  0100               	movlb	0	; () banked
 15490  00697E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15491  006980  0E2D               	movlw	low _cmdbuf
 15492  006982  6F6D               	movwf	?_stristr& (0+255),b
 15493  006984  0E7B               	movlw	high STR_159
 15494  006986  6F70               	movwf	(?_stristr+3)& (0+255),b
 15495  006988  0EA9               	movlw	low STR_159
 15496  00698A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15497  00698C  ECB5  F00C         	call	_stristr	;wreg free
 15498  006990  0E2D               	movlw	low _cmdbuf
 15499  006992  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15500  006994  0E01               	movlw	high _cmdbuf
 15501  006996  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15502  006998  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15503  00699A  E102               	bnz	u19895
 15504  00699C  516D               	movf	?_stristr& (0+255),w,b
 15505  00699E  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15506  0069A0                     u19895:
 15507  0069A0  E103               	bnz	l15304
 15508                           
 15509                           ; BSR set to: 0
 15510                           ;main.c: 1323: vscp_restoreDefaults();
 15511  0069A2  ECD6  F007         	call	_vscp_restoreDefaults	;wreg free
 15512                           
 15513                           ;main.c: 1324: }
 15514  0069A6  D02E               	goto	l15316
 15515  0069A8                     l15304:
 15516                           
 15517                           ; BSR set to: 0
 15518                           ;main.c: 1326: else if (cmdbuf == stristr(cmdbuf, "?")) {
 15519  0069A8  0E01               	movlw	high _cmdbuf
 15520  0069AA  0100               	movlb	0	; () banked
 15521  0069AC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15522  0069AE  0E2D               	movlw	low _cmdbuf
 15523  0069B0  6F6D               	movwf	?_stristr& (0+255),b
 15524  0069B2  0E7C               	movlw	high STR_160
 15525  0069B4  6F70               	movwf	(?_stristr+3)& (0+255),b
 15526  0069B6  0EFC               	movlw	low STR_160
 15527  0069B8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15528  0069BA  ECB5  F00C         	call	_stristr	;wreg free
 15529  0069BE  0E2D               	movlw	low _cmdbuf
 15530  0069C0  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15531  0069C2  0E01               	movlw	high _cmdbuf
 15532  0069C4  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15533  0069C6  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 15534  0069C8  E102               	bnz	u19905
 15535  0069CA  516D               	movf	?_stristr& (0+255),w,b
 15536  0069CC  19CC               	xorwf	??_doModeVerbose& (0+255),w,b
 15537  0069CE                     u19905:
 15538  0069CE  E01A               	bz	l15316
 15539                           
 15540                           ; BSR set to: 0
 15541                           ;main.c: 1329: else {
 15542                           ;main.c: 1330: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 15543  0069D0  0E76               	movlw	high STR_161
 15544  0069D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15545  0069D4  0ED0               	movlw	low STR_161
 15546  0069D6  6F61               	movwf	?_putsUSART& (0+255),b
 15547  0069D8  ECBC  F00A         	call	_putsUSART	;wreg free
 15548  0069DC  D013               	goto	l15316
 15549  0069DE                     l15310:
 15550                           
 15551                           ; BSR set to: 0
 15552                           ;main.c: 1334: else {
 15553                           ;main.c: 1335: if ( 0x0d == cmdbuf[ 0 ] ) {
 15554  0069DE  0101               	movlb	1	; () banked
 15555  0069E0  512D               	movf	_cmdbuf& (0+255),w,b
 15556  0069E2  0A0D               	xorlw	13
 15557  0069E4  E108               	bnz	l15314
 15558                           
 15559                           ; BSR set to: 1
 15560                           ;main.c: 1336: putsUSART((char *) "+OK\r\n");
 15561  0069E6  0E7C               	movlw	high STR_9
 15562  0069E8  0100               	movlb	0	; () banked
 15563  0069EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15564  0069EC  0E64               	movlw	low STR_9
 15565  0069EE  6F61               	movwf	?_putsUSART& (0+255),b
 15566  0069F0  ECBC  F00A         	call	_putsUSART	;wreg free
 15567                           
 15568                           ;main.c: 1337: }
 15569  0069F4  D007               	goto	l15316
 15570  0069F6                     l15314:
 15571                           
 15572                           ; BSR set to: 1
 15573                           ;main.c: 1338: else {
 15574                           ;main.c: 1339: putsUSART((char *) "-ERROR - Unknown command\r\n");
 15575  0069F6  0E77               	movlw	high STR_163
 15576  0069F8  0100               	movlb	0	; () banked
 15577  0069FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15578  0069FC  0EFC               	movlw	low STR_163
 15579  0069FE  6F61               	movwf	?_putsUSART& (0+255),b
 15580  006A00  ECBC  F00A         	call	_putsUSART	;wreg free
 15581  006A04                     l15316:
 15582                           
 15583                           ;main.c: 1340: }
 15584                           ;main.c: 1341: }
 15585                           ;main.c: 1343: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 15586  006A04  0E01               	movlw	high _cmdbuf
 15587  006A06  0100               	movlb	0	; () banked
 15588  006A08  6F61               	movwf	(?_memset+1)& (0+255),b
 15589  006A0A  0E2D               	movlw	low _cmdbuf
 15590  006A0C  EC48  F00E         	call	PL20	;call to abstracted procedure
 15591  006A10  EC54  F008         	call	_memset	;wreg free
 15592                           
 15593                           ; BSR set to: 0
 15594                           ;main.c: 1344: pos = 0;
 15595  006A14  6A34               	clrf	_pos,c
 15596  006A16                     l15320:
 15597                           
 15598                           ;main.c: 1345: }
 15599                           ;main.c: 1346: }
 15600                           ;main.c: 1349: (INTCONbits.GIE = 1);
 15601  006A16  8EF2               	bsf	intcon,7,c	;volatile
 15602  006A18                     l572:
 15603  006A18  0012               	return	
 15604  006A1A                     __end_of_doModeVerbose:
 15605                           	opt stack 0
 15606  006A1A                     PL2:
 15607                           	opt stack 19
 15608  006A1A  0E01               	movlw	high _cmdbuf
 15609  006A1C  0100               	movlb	0	; () banked
 15610  006A1E  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15611  006A20  0E2D               	movlw	low _cmdbuf
 15612  006A22  6F60               	movwf	?_strcpy& (0+255),b
 15613  006A24  0E32               	movlw	low (_cmdbuf+5)
 15614  006A26  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15615  006A28  0E01               	movlw	high (_cmdbuf+5)
 15616  006A2A  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15617  006A2C  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15618  006A30  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15619  006A34  0012               	return	
 15620  006A36                     __end_ofPL2:
 15621                           	opt stack 0
 15622  006A36                     PL4:
 15623                           	opt stack 19
 15624  006A36  0100               	movlb	0	; () banked
 15625  006A38  6F61               	movwf	(?_strcpy+1)& (0+255),b
 15626  006A3A  0E2D               	movlw	low _cmdbuf
 15627  006A3C  6F60               	movwf	?_strcpy& (0+255),b
 15628  006A3E  0E35               	movlw	low (_cmdbuf+8)
 15629  006A40  6FCC               	movwf	??_doModeVerbose& (0+255),b
 15630  006A42  0E01               	movlw	high (_cmdbuf+8)
 15631  006A44  6FCD               	movwf	(??_doModeVerbose+1)& (0+255),b
 15632  006A46  C0CC  F062         	movff	??_doModeVerbose,?_strcpy+2
 15633  006A4A  C0CD  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 15634  006A4E  0012               	return	
 15635  006A50                     __end_ofPL4:
 15636                           	opt stack 0
 15637  006A50                     PL6:
 15638                           	opt stack 19
 15639  006A50  0100               	movlb	0	; () banked
 15640  006A52  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15641  006A54  6B6C               	clrf	?_strtok& (0+255),b
 15642  006A56  0E7C               	movlw	high STR_30
 15643  006A58  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15644  006A5A  0EF4               	movlw	low STR_30
 15645  006A5C  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15646  006A5E  0012               	return	
 15647  006A60                     __end_ofPL6:
 15648                           	opt stack 0
 15649  006A60                     PL8:
 15650                           	opt stack 19
 15651  006A60  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15652  006A62  6B6C               	clrf	?_strtok& (0+255),b
 15653  006A64  0E7C               	movlw	high STR_30
 15654  006A66  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15655  006A68  0EF4               	movlw	low STR_30
 15656  006A6A  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15657  006A6C  0012               	return	
 15658  006A6E                     __end_ofPL8:
 15659                           	opt stack 0
 15660  006A6E                     PL10:
 15661                           	opt stack 19
 15662  006A6E  6BD5               	clrf	(??_doModeVerbose+9)& (0+255),b
 15663  006A70  6BD6               	clrf	(??_doModeVerbose+10)& (0+255),b
 15664  006A72  6BD7               	clrf	(??_doModeVerbose+11)& (0+255),b
 15665  006A74  0E1A               	movlw	26
 15666  006A76                     u19595:
 15667  006A76  90D8               	bcf	status,0,c
 15668  006A78  37D4               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 15669  006A7A  37D5               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 15670  006A7C  37D6               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 15671  006A7E  37D7               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 15672  006A80  2EE8               	decfsz	wreg,f,c
 15673  006A82  D7F9               	goto	u19595
 15674  006A84  51D0               	movf	(??_doModeVerbose+4)& (0+255),w,b
 15675  006A86  11D4               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 15676  006A88  6FD8               	movwf	(??_doModeVerbose+12)& (0+255),b
 15677  006A8A  51D1               	movf	(??_doModeVerbose+5)& (0+255),w,b
 15678  006A8C  11D5               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 15679  006A8E  6FD9               	movwf	(??_doModeVerbose+13)& (0+255),b
 15680  006A90  51D2               	movf	(??_doModeVerbose+6)& (0+255),w,b
 15681  006A92  11D6               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 15682  006A94  6FDA               	movwf	(??_doModeVerbose+14)& (0+255),b
 15683  006A96  51D3               	movf	(??_doModeVerbose+7)& (0+255),w,b
 15684  006A98  11D7               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 15685  006A9A  6FDB               	movwf	(??_doModeVerbose+15)& (0+255),b
 15686  006A9C  51CC               	movf	??_doModeVerbose& (0+255),w,b
 15687  006A9E  11D8               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 15688  006AA0  6FDC               	movwf	(??_doModeVerbose+16)& (0+255),b
 15689  006AA2  51CD               	movf	(??_doModeVerbose+1)& (0+255),w,b
 15690  006AA4  11D9               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 15691  006AA6  6FDD               	movwf	(??_doModeVerbose+17)& (0+255),b
 15692  006AA8  51CE               	movf	(??_doModeVerbose+2)& (0+255),w,b
 15693  006AAA  11DA               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 15694  006AAC  6FDE               	movwf	(??_doModeVerbose+18)& (0+255),b
 15695  006AAE  51CF               	movf	(??_doModeVerbose+3)& (0+255),w,b
 15696  006AB0  11DB               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 15697  006AB2  6FDF               	movwf	(??_doModeVerbose+19)& (0+255),b
 15698  006AB4  0102               	movlb	2	; () banked
 15699  006AB6  0012               	return	
 15700  006AB8                     __end_ofPL10:
 15701                           	opt stack 0
 15702  006AB8                     PL28:
 15703                           	opt stack 19
 15704  006AB8  0100               	movlb	0	; () banked
 15705  006ABA  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15706  006ABC  6B6C               	clrf	?_strtok& (0+255),b
 15707  006ABE  0E7B               	movlw	high (STR_57+8)
 15708  006AC0  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15709  006AC2  0E6E               	movlw	low (STR_57+8)
 15710  006AC4  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15711  006AC6  0012               	return	
 15712  006AC8                     __end_ofPL28:
 15713                           	opt stack 0
 15714  006AC8                     PL30:
 15715                           	opt stack 19
 15716  006AC8  0E01               	movlw	high _cmdbuf
 15717  006ACA  0100               	movlb	0	; () banked
 15718  006ACC  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15719  006ACE  0E2D               	movlw	low _cmdbuf
 15720  006AD0  6F6C               	movwf	?_strtok& (0+255),b
 15721  006AD2  0E7C               	movlw	high STR_30
 15722  006AD4  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15723  006AD6  0EF4               	movlw	low STR_30
 15724  006AD8  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15725  006ADA  0012               	return	
 15726  006ADC                     __end_ofPL30:
 15727                           	opt stack 0
 15728  006ADC                     PL36:
 15729                           	opt stack 19
 15730  006ADC  0100               	movlb	0	; () banked
 15731  006ADE  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15732  006AE0  0E2D               	movlw	low _cmdbuf
 15733  006AE2  6F6C               	movwf	?_strtok& (0+255),b
 15734  006AE4  0E7B               	movlw	high (STR_57+8)
 15735  006AE6  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15736  006AE8  0E6E               	movlw	low (STR_57+8)
 15737  006AEA  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15738  006AEC  0012               	return	
 15739  006AEE                     __end_ofPL36:
 15740                           	opt stack 0
 15741  006AEE                     PL42:
 15742                           	opt stack 19
 15743  006AEE  0100               	movlb	0	; () banked
 15744  006AF0  6BCD               	clrf	(??_doModeVerbose+1)& (0+255),b
 15745  006AF2  6BCE               	clrf	(??_doModeVerbose+2)& (0+255),b
 15746  006AF4  6BCF               	clrf	(??_doModeVerbose+3)& (0+255),b
 15747  006AF6  C0CE  F0CF         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 15748  006AFA  C0CD  F0CE         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 15749  006AFE  C0CC  F0CD         	movff	??_doModeVerbose,??_doModeVerbose+1
 15750  006B02  6BCC               	clrf	??_doModeVerbose& (0+255),b
 15751  006B04  0102               	movlb	2	; () banked
 15752  006B06  0012               	return	
 15753  006B08                     __end_ofPL42:
 15754                           	opt stack 0
 15755  006B08                     PL44:
 15756                           	opt stack 19
 15757  006B08  0102               	movlb	2	; () banked
 15758  006B0A  51B7               	movf	doModeVerbose@i_1188& (0+255),w,b
 15759  006B0C  C2B6  F0CC         	movff	doModeVerbose@reg,??_doModeVerbose
 15760  006B10  0100               	movlb	0	; () banked
 15761  006B12  6BCD               	clrf	(??_doModeVerbose+1)& (0+255),b
 15762  006B14  27CC               	addwf	??_doModeVerbose& (0+255),f,b
 15763  006B16  0E00               	movlw	0
 15764  006B18  23CD               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 15765  006B1A  51CC               	movf	??_doModeVerbose& (0+255),w,b
 15766  006B1C  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 15767  006B1E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 15768  006B20  0012               	return	
 15769  006B22                     __end_ofPL44:
 15770                           	opt stack 0
 15771  006B22                     PL58:
 15772                           	opt stack 19
 15773  006B22  6F62               	movwf	?__CANIDToRegs& (0+255),b
 15774  006B24  C2AA  F064         	movff	doModeVerbose@id_1318,?__CANIDToRegs+2
 15775  006B28  C2AB  F065         	movff	doModeVerbose@id_1318+1,?__CANIDToRegs+3
 15776  006B2C  C2AC  F066         	movff	doModeVerbose@id_1318+2,?__CANIDToRegs+4
 15777  006B30  C2AD  F067         	movff	doModeVerbose@id_1318+3,?__CANIDToRegs+5
 15778  006B34  0E01               	movlw	1
 15779  006B36  6F68               	movwf	(?__CANIDToRegs+6)& (0+255),b
 15780  006B38  0C01               	retlw	1
 15781  006B3A                     __end_ofPL58:
 15782                           	opt stack 0
 15783  006B3A                     PL60:
 15784                           	opt stack 19
 15785  006B3A  0100               	movlb	0	; () banked
 15786  006B3C  6FD1               	movwf	(??_doModeVerbose+5)& (0+255),b
 15787  006B3E  6BD2               	clrf	(??_doModeVerbose+6)& (0+255),b
 15788  006B40  6BD3               	clrf	(??_doModeVerbose+7)& (0+255),b
 15789  006B42  C0D1  F0D3         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 15790  006B46  C0D0  F0D2         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 15791  006B4A  6BD1               	clrf	(??_doModeVerbose+5)& (0+255),b
 15792  006B4C  6BD0               	clrf	(??_doModeVerbose+4)& (0+255),b
 15793  006B4E  0012               	return	
 15794  006B50                     __end_ofPL60:
 15795                           	opt stack 0
 15796  006B50                     PL78:
 15797                           	opt stack 19
 15798  006B50  0E01               	movlw	high _cmdbuf
 15799  006B52  0100               	movlb	0	; () banked
 15800  006B54  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15801  006B56  0E2D               	movlw	low _cmdbuf
 15802  006B58  6F6D               	movwf	?_stristr& (0+255),b
 15803  006B5A  0E7C               	movlw	high STR_8
 15804  006B5C  6F70               	movwf	(?_stristr+3)& (0+255),b
 15805  006B5E  0EA7               	movlw	low STR_8
 15806  006B60  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15807  006B62  0012               	return	
 15808  006B64                     __end_ofPL78:
 15809                           	opt stack 0
 15810  006B64                     PL84:
 15811                           	opt stack 19
 15812  006B64  0100               	movlb	0	; () banked
 15813  006B66  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15814  006B68  0E2D               	movlw	low _cmdbuf
 15815  006B6A  6F6D               	movwf	?_stristr& (0+255),b
 15816  006B6C  0E7C               	movlw	high STR_10
 15817  006B6E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15818  006B70  0E42               	movlw	low STR_10
 15819  006B72  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15820  006B74  0012               	return	
 15821  006B76                     __end_ofPL84:
 15822                           	opt stack 0
 15823  006B76                     PL92:
 15824                           	opt stack 19
 15825  006B76  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15826  006B78  0E2D               	movlw	low _cmdbuf
 15827  006B7A  6F6D               	movwf	?_stristr& (0+255),b
 15828  006B7C  0E7C               	movlw	high STR_16
 15829  006B7E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15830  006B80  0E34               	movlw	low STR_16
 15831  006B82  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15832  006B84  0012               	return	
 15833  006B86                     __end_ofPL92:
 15834                           	opt stack 0
 15835  006B86                     PL96:
 15836                           	opt stack 19
 15837  006B86  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15838  006B88  0E2D               	movlw	low _cmdbuf
 15839  006B8A  6F6D               	movwf	?_stristr& (0+255),b
 15840  006B8C  0E7B               	movlw	high STR_14
 15841  006B8E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15842  006B90  0EA0               	movlw	low STR_14
 15843  006B92  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15844  006B94  0012               	return	
 15845  006B96                     __end_ofPL96:
 15846                           	opt stack 0
 15847  006B96                     PL100:
 15848                           	opt stack 19
 15849  006B96  6F6E               	movwf	(?_stristr+1)& (0+255),b
 15850  006B98  0E2D               	movlw	low _cmdbuf
 15851  006B9A  6F6D               	movwf	?_stristr& (0+255),b
 15852  006B9C  0E7C               	movlw	high STR_12
 15853  006B9E  6F70               	movwf	(?_stristr+3)& (0+255),b
 15854  006BA0  0E82               	movlw	low STR_12
 15855  006BA2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 15856  006BA4  0012               	return	
 15857  006BA6                     __end_ofPL100:
 15858                           	opt stack 0
 15859                           tblptru	equ	0xFF8
 15860                           tblptrh	equ	0xFF7
 15861                           tblptrl	equ	0xFF6
 15862                           tablat	equ	0xFF5
 15863                           prodh	equ	0xFF4
 15864                           prodl	equ	0xFF3
 15865                           intcon	equ	0xFF2
 15866                           indf0	equ	0xFEF
 15867                           postinc0	equ	0xFEE
 15868                           fsr0h	equ	0xFEA
 15869                           fsr0l	equ	0xFE9
 15870                           wreg	equ	0xFE8
 15871                           indf1	equ	0xFE7
 15872                           postinc1	equ	0xFE6
 15873                           postdec1	equ	0xFE5
 15874                           fsr1h	equ	0xFE2
 15875                           fsr1l	equ	0xFE1
 15876                           indf2	equ	0xFDF
 15877                           postinc2	equ	0xFDE
 15878                           postdec2	equ	0xFDD
 15879                           plusw2	equ	0xFDB
 15880                           fsr2h	equ	0xFDA
 15881                           fsr2l	equ	0xFD9
 15882                           status	equ	0xFD8
 15883                           
 15884 ;; *************** function _writeRegisterExtended *****************
 15885 ;; Defined at:
 15886 ;;		line 2643 in file "main.c"
 15887 ;; Parameters:    Size  Location     Type
 15888 ;;  nodeid          1    wreg     unsigned char 
 15889 ;;  page            2   88[BANK0 ] unsigned short 
 15890 ;;  reg             1   90[BANK0 ] unsigned char 
 15891 ;;  timeout         2   91[BANK0 ] unsigned short 
 15892 ;;  value           2   93[BANK0 ] PTR unsigned char 
 15893 ;;		 -> doModeVerbose@value_1246(1), 
 15894 ;; Auto vars:     Size  Location     Type
 15895 ;;  nodeid          1   99[BANK0 ] unsigned char 
 15896 ;; Return value:  Size  Location     Type
 15897 ;;                  1    wreg      enum E15660
 15898 ;; Registers used:
 15899 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15900 ;; Tracked objects:
 15901 ;;		On entry : F/2
 15902 ;;		On exit  : E/0
 15903 ;;		Unchanged: 0/0
 15904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15905 ;;      Params:         0       7       0       0       0       0       0
 15906 ;;      Locals:         0       1       0       0       0       0       0
 15907 ;;      Temps:          0       4       0       0       0       0       0
 15908 ;;      Totals:         0      12       0       0       0       0       0
 15909 ;;Total ram usage:       12 bytes
 15910 ;; Hardware stack levels used:    1
 15911 ;; Hardware stack levels required when called:    7
 15912 ;; This function calls:
 15913 ;;		_checkCANBusState
 15914 ;;		_sendVSCPFrame
 15915 ;;		_getVSCPFrame
 15916 ;; This function is called by:
 15917 ;;		_doModeVerbose
 15918 ;; This function uses a non-reentrant model
 15919 ;;
 15920                           
 15921                           	psect	text23
 15922  002A54                     __ptext23:
 15923                           	opt stack 0
 15924  002A54                     _writeRegisterExtended:
 15925                           	opt stack 21
 15926                           
 15927                           ;incstack = 0
 15928                           ;incstack = 0
 15929                           ;writeRegisterExtended@nodeid stored from wreg
 15930  002A54  CFE8 F0C3          	movff	wreg,writeRegisterExtended@nodeid
 15931                           
 15932                           ; BSR set to: 2
 15933                           ;main.c: 2644: vscpData[ 0 ] = nodeid;
 15934  002A58  C0C3  F1E5         	movff	writeRegisterExtended@nodeid,_vscpData
 15935                           
 15936                           ; BSR set to: 2
 15937                           ;main.c: 2645: vscpData[ 1 ] = page >> 8;
 15938  002A5C  0100               	movlb	0	; () banked
 15939  002A5E  51B9               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15940  002A60  0101               	movlb	1	; () banked
 15941  002A62  6FE6               	movwf	(_vscpData+1)& (0+255),b
 15942                           
 15943                           ; BSR set to: 1
 15944                           ;main.c: 2646: vscpData[ 2 ] = page & 0xff;
 15945  002A64  C0B8  F1E7         	movff	writeRegisterExtended@page,_vscpData+2
 15946                           
 15947                           ; BSR set to: 1
 15948                           ;main.c: 2647: vscpData[ 3 ] = reg;
 15949  002A68  C0BA  F1E8         	movff	writeRegisterExtended@reg,_vscpData+3
 15950                           
 15951                           ; BSR set to: 1
 15952                           ;main.c: 2648: vscpData[ 4 ] = *value;
 15953  002A6C  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15954  002A70  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15955  002A74  50DF               	movf	indf2,w,c
 15956  002A76  6FE9               	movwf	(_vscpData+4)& (0+255),b
 15957                           
 15958                           ; BSR set to: 1
 15959                           ;main.c: 2650: if (sendVSCPFrame(0,
 15960                           ;main.c: 2651: 38,
 15961                           ;main.c: 2652: 0,
 15962                           ;main.c: 2653: 0,
 15963                           ;main.c: 2654: 5,
 15964                           ;main.c: 2655: vscpData)) {
 15965  002A78  0100               	movlb	0	; () banked
 15966  002A7A  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15967  002A7C  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 15968  002A7E  0E26               	movlw	38
 15969  002A80  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15970  002A82  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15971  002A84  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15972  002A86  0E05               	movlw	5
 15973  002A88  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15974  002A8A  0E01               	movlw	high _vscpData
 15975  002A8C  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15976  002A8E  0EE5               	movlw	low _vscpData
 15977  002A90  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15978  002A92  EC34  F010         	call	_sendVSCPFrame	;wreg free
 15979  002A96  0900               	iorlw	0
 15980  002A98  E05B               	bz	l16728
 15981                           
 15982                           ;main.c: 2657: timekeeper = 0;
 15983  002A9A  0101               	movlb	1	; () banked
 15984  002A9C  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 15985  002A9E  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15986  002AA0  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15987  002AA2  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15988                           
 15989                           ;main.c: 2658: while (timekeeper < timeout) {
 15990  002AA4  D03E               	goto	l16726
 15991  002AA6                     l1179:
 15992                           
 15993                           ; BSR set to: 1
 15994  002AA6  0004               	clrwdt		;# 
 15995                           
 15996                           ;main.c: 2661: checkCANBusState();
 15997  002AA8  EC35  F008         	call	_checkCANBusState	;wreg free
 15998                           
 15999                           ;main.c: 2663: if (getVSCPFrame(&vscpClass,
 16000                           ;main.c: 2664: &vscpType,
 16001                           ;main.c: 2665: &vscpNodeId,
 16002                           ;main.c: 2666: &vscpPriority,
 16003                           ;main.c: 2667: &vscpSize,
 16004                           ;main.c: 2668: vscpData)) {
 16005  002AAC  0E3F               	movlw	low _vscpType
 16006  002AAE  0100               	movlb	0	; () banked
 16007  002AB0  6F73               	movwf	?_getVSCPFrame& (0+255),b
 16008  002AB2  0E3C               	movlw	low _vscpNodeId
 16009  002AB4  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16010  002AB6  0E3D               	movlw	low _vscpPriority
 16011  002AB8  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16012  002ABA  0E3E               	movlw	low _vscpSize
 16013  002ABC  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16014  002ABE  0E01               	movlw	high _vscpData
 16015  002AC0  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16016  002AC2  0EE5               	movlw	low _vscpData
 16017  002AC4  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16018  002AC6  0E38               	movlw	_vscpClass& (0+255)
 16019  002AC8  ECD0  F007         	call	_getVSCPFrame
 16020  002ACC  0900               	iorlw	0
 16021  002ACE  E029               	bz	l16726
 16022                           
 16023                           ; BSR set to: 0
 16024                           ;main.c: 2670: if ((nodeid == vscpNodeId) &&
 16025                           ;main.c: 2671: (5 == vscpSize) &&
 16026                           ;main.c: 2672: (0 == vscpData[ 0 ]) &&
 16027                           ;main.c: 2673: ((page >> 8) == vscpData[ 1 ]) &&
 16028                           ;main.c: 2674: ((page & 0xff) == vscpData[ 2 ]) &&
 16029                           ;main.c: 2675: (reg == vscpData[ 3 ]) &&
 16030                           ;main.c: 2676: (*value == vscpData[ 4 ])) {
 16031  002AD0  503C               	movf	_vscpNodeId,w,c
 16032  002AD2  63C3               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 16033  002AD4  D026               	goto	l16726
 16034                           
 16035                           ; BSR set to: 0
 16036  002AD6  503E               	movf	_vscpSize,w,c
 16037  002AD8  0A05               	xorlw	5
 16038  002ADA  E123               	bnz	l16726
 16039                           
 16040                           ; BSR set to: 0
 16041  002ADC  0101               	movlb	1	; () banked
 16042  002ADE  67E5               	tstfsz	_vscpData& (0+255),b
 16043  002AE0  D020               	goto	l16726
 16044                           
 16045                           ; BSR set to: 1
 16046  002AE2  0100               	movlb	0	; () banked
 16047  002AE4  51B9               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 16048  002AE6  0101               	movlb	1	; () banked
 16049  002AE8  19E6               	xorwf	(_vscpData+1)& (0+255),w,b
 16050  002AEA  E11B               	bnz	l16726
 16051                           
 16052                           ; BSR set to: 1
 16053  002AEC  0100               	movlb	0	; () banked
 16054  002AEE  51B8               	movf	writeRegisterExtended@page& (0+255),w,b
 16055  002AF0  EE21  F0E7         	lfsr	2,_vscpData+2
 16056  002AF4  62DF               	cpfseq	indf2,c
 16057  002AF6  D015               	goto	l16726
 16058                           
 16059                           ; BSR set to: 1
 16060  002AF8  51BA               	movf	writeRegisterExtended@reg& (0+255),w,b
 16061  002AFA  0101               	movlb	1	; () banked
 16062  002AFC  EE21  F0E8         	lfsr	2,_vscpData+3
 16063  002B00  62DF               	cpfseq	indf2,c
 16064  002B02  D00F               	goto	l16726
 16065                           
 16066                           ; BSR set to: 1
 16067  002B04  51E9               	movf	(_vscpData+4)& (0+255),w,b
 16068  002B06  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16069  002B0A  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16070  002B0E  62DF               	cpfseq	indf2,c
 16071  002B10  D008               	goto	l16726
 16072                           
 16073                           ; BSR set to: 1
 16074                           ;main.c: 2677: *value = vscpData[ 1 ];
 16075  002B12  C0BD  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16076  002B16  C0BE  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16077  002B1A  C1E6  FFDF         	movff	_vscpData+1,indf2
 16078                           
 16079                           ; BSR set to: 1
 16080                           ;main.c: 2678: return 1;
 16081  002B1E  0E01               	movlw	1
 16082  002B20  D018               	goto	l1182
 16083  002B22                     l16726:
 16084  002B22  0100               	movlb	0	; () banked
 16085  002B24  51BB               	movf	writeRegisterExtended@timeout& (0+255),w,b
 16086  002B26  6FBF               	movwf	??_writeRegisterExtended& (0+255),b
 16087  002B28  51BC               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 16088  002B2A  6FC0               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 16089  002B2C  6BC1               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 16090  002B2E  6BC2               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 16091  002B30  51BF               	movf	??_writeRegisterExtended& (0+255),w,b
 16092  002B32  0101               	movlb	1	; () banked
 16093  002B34  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 16094  002B36  0100               	movlb	0	; () banked
 16095  002B38  51C0               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 16096  002B3A  0101               	movlb	1	; () banked
 16097  002B3C  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16098  002B3E  0100               	movlb	0	; () banked
 16099  002B40  51C1               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 16100  002B42  0101               	movlb	1	; () banked
 16101  002B44  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16102  002B46  0100               	movlb	0	; () banked
 16103  002B48  51C2               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 16104  002B4A  0101               	movlb	1	; () banked
 16105  002B4C  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16106  002B4E  E3AB               	bnc	l1179
 16107  002B50                     l16728:
 16108                           
 16109                           ;main.c: 2679: }
 16110                           ;main.c: 2681: }
 16111                           ;main.c: 2683: }
 16112                           ;main.c: 2685: }
 16113                           ;main.c: 2687: return 0;
 16114  002B50  0E00               	movlw	0
 16115  002B52                     l1182:
 16116  002B52  0012               	return	
 16117  002B54                     __end_of_writeRegisterExtended:
 16118                           	opt stack 0
 16119                           tblptru	equ	0xFF8
 16120                           tblptrh	equ	0xFF7
 16121                           tblptrl	equ	0xFF6
 16122                           tablat	equ	0xFF5
 16123                           prodh	equ	0xFF4
 16124                           prodl	equ	0xFF3
 16125                           intcon	equ	0xFF2
 16126                           indf0	equ	0xFEF
 16127                           postinc0	equ	0xFEE
 16128                           fsr0h	equ	0xFEA
 16129                           fsr0l	equ	0xFE9
 16130                           wreg	equ	0xFE8
 16131                           indf1	equ	0xFE7
 16132                           postinc1	equ	0xFE6
 16133                           postdec1	equ	0xFE5
 16134                           fsr1h	equ	0xFE2
 16135                           fsr1l	equ	0xFE1
 16136                           indf2	equ	0xFDF
 16137                           postinc2	equ	0xFDE
 16138                           postdec2	equ	0xFDD
 16139                           plusw2	equ	0xFDB
 16140                           fsr2h	equ	0xFDA
 16141                           fsr2l	equ	0xFD9
 16142                           status	equ	0xFD8
 16143                           
 16144 ;; *************** function _printBinary *****************
 16145 ;; Defined at:
 16146 ;;		line 2731 in file "main.c"
 16147 ;; Parameters:    Size  Location     Type
 16148 ;;  value           1    wreg     unsigned char 
 16149 ;; Auto vars:     Size  Location     Type
 16150 ;;  value           1    3[BANK0 ] unsigned char 
 16151 ;;  i               2    4[BANK0 ] int 
 16152 ;; Return value:  Size  Location     Type
 16153 ;;		None               void
 16154 ;; Registers used:
 16155 ;;		wreg, status,2, status,0, cstack
 16156 ;; Tracked objects:
 16157 ;;		On entry : F/2
 16158 ;;		On exit  : F/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16161 ;;      Params:         0       0       0       0       0       0       0
 16162 ;;      Locals:         0       3       0       0       0       0       0
 16163 ;;      Temps:          0       2       0       0       0       0       0
 16164 ;;      Totals:         0       5       0       0       0       0       0
 16165 ;;Total ram usage:        5 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; Hardware stack levels required when called:    4
 16168 ;; This function calls:
 16169 ;;		_WriteUSART
 16170 ;; This function is called by:
 16171 ;;		_doModeVerbose
 16172 ;; This function uses a non-reentrant model
 16173 ;;
 16174                           
 16175                           	psect	text24
 16176  0014D8                     __ptext24:
 16177                           	opt stack 0
 16178  0014D8                     _printBinary:
 16179                           	opt stack 24
 16180                           
 16181                           ;incstack = 0
 16182                           ;incstack = 0
 16183                           ;printBinary@value stored from wreg
 16184  0014D8  CFE8 F063          	movff	wreg,printBinary@value
 16185                           
 16186                           ; BSR set to: 2
 16187                           ;main.c: 2732: int i;
 16188                           ;main.c: 2734: for (i = 7; i >= 0; i--) {
 16189  0014DC  0100               	movlb	0	; () banked
 16190  0014DE  6B65               	clrf	(printBinary@i+1)& (0+255),b
 16191  0014E0  0E07               	movlw	7
 16192  0014E2  6F64               	movwf	printBinary@i& (0+255),b
 16193  0014E4                     l16678:
 16194                           
 16195                           ; BSR set to: 0
 16196                           ;main.c: 2735: if (value & (1 << i)) {
 16197  0014E4  C064  F061         	movff	printBinary@i,??_printBinary
 16198  0014E8  0E01               	movlw	1
 16199  0014EA  6F62               	movwf	(??_printBinary+1)& (0+255),b
 16200  0014EC  2B61               	incf	??_printBinary& (0+255),f,b
 16201  0014EE  D002               	goto	u22024
 16202  0014F0                     u22025:
 16203  0014F0  90D8               	bcf	status,0,c
 16204  0014F2  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 16205  0014F4                     u22024:
 16206  0014F4  2F61               	decfsz	??_printBinary& (0+255),f,b
 16207  0014F6  D7FC               	goto	u22025
 16208  0014F8  5162               	movf	(??_printBinary+1)& (0+255),w,b
 16209  0014FA  1563               	andwf	printBinary@value& (0+255),w,b
 16210  0014FC  E006               	bz	l1202
 16211  0014FE                     l1198:
 16212  0014FE  A2AC               	btfss	4012,1,c	;volatile
 16213  001500  D7FE               	goto	l1198
 16214                           
 16215                           ;main.c: 2737: WriteUSART('1');
 16216  001502  0E31               	movlw	49
 16217  001504  ECF5  F007         	call	_WriteUSART
 16218                           
 16219                           ;main.c: 2738: } else {
 16220  001508  D005               	goto	l16686
 16221  00150A                     l1202:
 16222  00150A  A2AC               	btfss	4012,1,c	;volatile
 16223  00150C  D7FE               	goto	l1202
 16224                           
 16225                           ;main.c: 2740: WriteUSART('0');
 16226  00150E  0E30               	movlw	48
 16227  001510  ECF5  F007         	call	_WriteUSART
 16228  001514                     l16686:
 16229  001514  0100               	movlb	0	; () banked
 16230  001516  0764               	decf	printBinary@i& (0+255),f,b
 16231  001518  A0D8               	btfss	status,0,c
 16232  00151A  0765               	decf	(printBinary@i+1)& (0+255),f,b
 16233                           
 16234                           ; BSR set to: 0
 16235  00151C  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 16236                           
 16237                           ; BSR set to: 0
 16238  00151E  0012               	return	
 16239  001520  D7E1               	goto	l16678
 16240  001522                     __end_of_printBinary:
 16241                           	opt stack 0
 16242                           tblptru	equ	0xFF8
 16243                           tblptrh	equ	0xFF7
 16244                           tblptrl	equ	0xFF6
 16245                           tablat	equ	0xFF5
 16246                           prodh	equ	0xFF4
 16247                           prodl	equ	0xFF3
 16248                           intcon	equ	0xFF2
 16249                           indf0	equ	0xFEF
 16250                           postinc0	equ	0xFEE
 16251                           fsr0h	equ	0xFEA
 16252                           fsr0l	equ	0xFE9
 16253                           wreg	equ	0xFE8
 16254                           indf1	equ	0xFE7
 16255                           postinc1	equ	0xFE6
 16256                           postdec1	equ	0xFE5
 16257                           fsr1h	equ	0xFE2
 16258                           fsr1l	equ	0xFE1
 16259                           indf2	equ	0xFDF
 16260                           postinc2	equ	0xFDE
 16261                           postdec2	equ	0xFDD
 16262                           plusw2	equ	0xFDB
 16263                           fsr2h	equ	0xFDA
 16264                           fsr2l	equ	0xFD9
 16265                           status	equ	0xFD8
 16266                           
 16267 ;; *************** function _readRegisterExtended *****************
 16268 ;; Defined at:
 16269 ;;		line 2540 in file "main.c"
 16270 ;; Parameters:    Size  Location     Type
 16271 ;;  nodeid          1    wreg     unsigned char 
 16272 ;;  page            2   88[BANK0 ] unsigned short 
 16273 ;;  reg             1   90[BANK0 ] unsigned char 
 16274 ;;  timeout         2   91[BANK0 ] unsigned short 
 16275 ;;  value           2   93[BANK0 ] PTR unsigned char 
 16276 ;;		 -> doModeVerbose@value_1270(1), doModeVerbose@value(1), 
 16277 ;; Auto vars:     Size  Location     Type
 16278 ;;  nodeid          1   99[BANK0 ] unsigned char 
 16279 ;; Return value:  Size  Location     Type
 16280 ;;                  1    wreg      enum E15660
 16281 ;; Registers used:
 16282 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16283 ;; Tracked objects:
 16284 ;;		On entry : F/2
 16285 ;;		On exit  : E/0
 16286 ;;		Unchanged: 0/0
 16287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16288 ;;      Params:         0       7       0       0       0       0       0
 16289 ;;      Locals:         0       1       0       0       0       0       0
 16290 ;;      Temps:          0       4       0       0       0       0       0
 16291 ;;      Totals:         0      12       0       0       0       0       0
 16292 ;;Total ram usage:       12 bytes
 16293 ;; Hardware stack levels used:    1
 16294 ;; Hardware stack levels required when called:    7
 16295 ;; This function calls:
 16296 ;;		_checkCANBusState
 16297 ;;		_sendVSCPFrame
 16298 ;;		_getVSCPFrame
 16299 ;; This function is called by:
 16300 ;;		_doModeVerbose
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           	psect	text25
 16305  002864                     __ptext25:
 16306                           	opt stack 0
 16307  002864                     _readRegisterExtended:
 16308                           	opt stack 21
 16309                           
 16310                           ; BSR set to: 0
 16311                           ;incstack = 0
 16312                           ;incstack = 0
 16313                           ;readRegisterExtended@nodeid stored from wreg
 16314  002864  CFE8 F0C3          	movff	wreg,readRegisterExtended@nodeid
 16315                           
 16316                           ; BSR set to: 2
 16317                           ;main.c: 2541: vscpData[ 0 ] = nodeid;
 16318  002868  C0C3  F1E5         	movff	readRegisterExtended@nodeid,_vscpData
 16319                           
 16320                           ; BSR set to: 2
 16321                           ;main.c: 2542: vscpData[ 1 ] = page >> 8;
 16322  00286C  0100               	movlb	0	; () banked
 16323  00286E  51B9               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16324  002870  0101               	movlb	1	; () banked
 16325  002872  6FE6               	movwf	(_vscpData+1)& (0+255),b
 16326                           
 16327                           ; BSR set to: 1
 16328                           ;main.c: 2543: vscpData[ 2 ] = page & 0xff;
 16329  002874  C0B8  F1E7         	movff	readRegisterExtended@page,_vscpData+2
 16330                           
 16331                           ; BSR set to: 1
 16332                           ;main.c: 2544: vscpData[ 3 ] = reg;
 16333  002878  C0BA  F1E8         	movff	readRegisterExtended@reg,_vscpData+3
 16334                           
 16335                           ; BSR set to: 1
 16336                           ;main.c: 2545: vscpData[ 4 ] = 1;
 16337  00287C  0E01               	movlw	1
 16338  00287E  6FE9               	movwf	(_vscpData+4)& (0+255),b
 16339                           
 16340                           ; BSR set to: 1
 16341                           ;main.c: 2547: if (sendVSCPFrame(0,
 16342                           ;main.c: 2548: 37,
 16343                           ;main.c: 2549: 0,
 16344                           ;main.c: 2550: 0,
 16345                           ;main.c: 2551: 5,
 16346                           ;main.c: 2552: vscpData)) {
 16347  002880  0100               	movlb	0	; () banked
 16348  002882  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16349  002884  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 16350  002886  0E25               	movlw	37
 16351  002888  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16352  00288A  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16353  00288C  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16354  00288E  0E05               	movlw	5
 16355  002890  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16356  002892  0E01               	movlw	high _vscpData
 16357  002894  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16358  002896  0EE5               	movlw	low _vscpData
 16359  002898  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16360  00289A  EC34  F010         	call	_sendVSCPFrame	;wreg free
 16361  00289E  0900               	iorlw	0
 16362  0028A0  E05A               	bz	l16326
 16363                           
 16364                           ;main.c: 2554: timekeeper = 0;
 16365  0028A2  0101               	movlb	1	; () banked
 16366  0028A4  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 16367  0028A6  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16368  0028A8  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16369  0028AA  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16370                           
 16371                           ;main.c: 2555: while (timekeeper < timeout) {
 16372  0028AC  D03D               	goto	l16324
 16373  0028AE                     l1161:
 16374                           
 16375                           ; BSR set to: 1
 16376  0028AE  0004               	clrwdt		;# 
 16377                           
 16378                           ;main.c: 2558: checkCANBusState();
 16379  0028B0  EC35  F008         	call	_checkCANBusState	;wreg free
 16380                           
 16381                           ;main.c: 2560: if ( getVSCPFrame( &vscpClass,
 16382                           ;main.c: 2561: &vscpType,
 16383                           ;main.c: 2562: &vscpNodeId,
 16384                           ;main.c: 2563: &vscpPriority,
 16385                           ;main.c: 2564: &vscpSize,
 16386                           ;main.c: 2565: vscpData ) ) {
 16387  0028B4  0E3F               	movlw	low _vscpType
 16388  0028B6  0100               	movlb	0	; () banked
 16389  0028B8  6F73               	movwf	?_getVSCPFrame& (0+255),b
 16390  0028BA  0E3C               	movlw	low _vscpNodeId
 16391  0028BC  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16392  0028BE  0E3D               	movlw	low _vscpPriority
 16393  0028C0  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16394  0028C2  0E3E               	movlw	low _vscpSize
 16395  0028C4  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16396  0028C6  0E01               	movlw	high _vscpData
 16397  0028C8  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16398  0028CA  0EE5               	movlw	low _vscpData
 16399  0028CC  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16400  0028CE  0E38               	movlw	_vscpClass& (0+255)
 16401  0028D0  ECD0  F007         	call	_getVSCPFrame
 16402  0028D4  0900               	iorlw	0
 16403  0028D6  E028               	bz	l16324
 16404                           
 16405                           ; BSR set to: 0
 16406                           ;main.c: 2566: if ( ( nodeid == vscpNodeId ) &&
 16407                           ;main.c: 2567: ( 0 == vscpClass ) &&
 16408                           ;main.c: 2568: ( 39 == vscpType ) &&
 16409                           ;main.c: 2569: ( 5 == vscpSize ) &&
 16410                           ;main.c: 2570: ( 0 == vscpData[ 0 ] ) &&
 16411                           ;main.c: 2571: ( (page >> 8) == vscpData[ 1 ] ) &&
 16412                           ;main.c: 2572: ( (page & 0xff) == vscpData[ 2 ] ) &&
 16413                           ;main.c: 2573: ( reg == vscpData[ 3 ] ) ) {
 16414  0028D8  503C               	movf	_vscpNodeId,w,c
 16415  0028DA  63C3               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 16416  0028DC  D025               	goto	l16324
 16417                           
 16418                           ; BSR set to: 0
 16419  0028DE  5039               	movf	_vscpClass+1,w,c
 16420  0028E0  1038               	iorwf	_vscpClass,w,c
 16421  0028E2  E122               	bnz	l16324
 16422                           
 16423                           ; BSR set to: 0
 16424  0028E4  503F               	movf	_vscpType,w,c
 16425  0028E6  0A27               	xorlw	39
 16426  0028E8  E11F               	bnz	l16324
 16427                           
 16428                           ; BSR set to: 0
 16429  0028EA  503E               	movf	_vscpSize,w,c
 16430  0028EC  0A05               	xorlw	5
 16431  0028EE  E11C               	bnz	l16324
 16432                           
 16433                           ; BSR set to: 0
 16434  0028F0  0101               	movlb	1	; () banked
 16435  0028F2  67E5               	tstfsz	_vscpData& (0+255),b
 16436  0028F4  D019               	goto	l16324
 16437                           
 16438                           ; BSR set to: 1
 16439  0028F6  0100               	movlb	0	; () banked
 16440  0028F8  51B9               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16441  0028FA  0101               	movlb	1	; () banked
 16442  0028FC  19E6               	xorwf	(_vscpData+1)& (0+255),w,b
 16443  0028FE  E114               	bnz	l16324
 16444                           
 16445                           ; BSR set to: 1
 16446  002900  0100               	movlb	0	; () banked
 16447  002902  51B8               	movf	readRegisterExtended@page& (0+255),w,b
 16448  002904  EE21  F0E7         	lfsr	2,_vscpData+2
 16449  002908  62DF               	cpfseq	indf2,c
 16450  00290A  D00E               	goto	l16324
 16451                           
 16452                           ; BSR set to: 1
 16453  00290C  51BA               	movf	readRegisterExtended@reg& (0+255),w,b
 16454  00290E  0101               	movlb	1	; () banked
 16455  002910  EE21  F0E8         	lfsr	2,_vscpData+3
 16456  002914  62DF               	cpfseq	indf2,c
 16457  002916  D008               	goto	l16324
 16458                           
 16459                           ; BSR set to: 1
 16460                           ;main.c: 2574: *value = vscpData[ 4 ];
 16461  002918  C0BD  FFD9         	movff	readRegisterExtended@value,fsr2l
 16462  00291C  C0BE  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 16463  002920  C1E9  FFDF         	movff	_vscpData+4,indf2
 16464                           
 16465                           ; BSR set to: 1
 16466                           ;main.c: 2575: return 1;
 16467  002924  0E01               	movlw	1
 16468  002926  D018               	goto	l1164
 16469  002928                     l16324:
 16470  002928  0100               	movlb	0	; () banked
 16471  00292A  51BB               	movf	readRegisterExtended@timeout& (0+255),w,b
 16472  00292C  6FBF               	movwf	??_readRegisterExtended& (0+255),b
 16473  00292E  51BC               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 16474  002930  6FC0               	movwf	(??_readRegisterExtended+1)& (0+255),b
 16475  002932  6BC1               	clrf	(??_readRegisterExtended+2)& (0+255),b
 16476  002934  6BC2               	clrf	(??_readRegisterExtended+3)& (0+255),b
 16477  002936  51BF               	movf	??_readRegisterExtended& (0+255),w,b
 16478  002938  0101               	movlb	1	; () banked
 16479  00293A  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 16480  00293C  0100               	movlb	0	; () banked
 16481  00293E  51C0               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 16482  002940  0101               	movlb	1	; () banked
 16483  002942  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16484  002944  0100               	movlb	0	; () banked
 16485  002946  51C1               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 16486  002948  0101               	movlb	1	; () banked
 16487  00294A  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16488  00294C  0100               	movlb	0	; () banked
 16489  00294E  51C2               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 16490  002950  0101               	movlb	1	; () banked
 16491  002952  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16492  002954  E3AC               	bnc	l1161
 16493  002956                     l16326:
 16494                           
 16495                           ;main.c: 2576: }
 16496                           ;main.c: 2577: }
 16497                           ;main.c: 2578: }
 16498                           ;main.c: 2579: }
 16499                           ;main.c: 2581: return 0;
 16500  002956  0E00               	movlw	0
 16501  002958                     l1164:
 16502  002958  0012               	return	
 16503  00295A                     __end_of_readRegisterExtended:
 16504                           	opt stack 0
 16505                           tblptru	equ	0xFF8
 16506                           tblptrh	equ	0xFF7
 16507                           tblptrl	equ	0xFF6
 16508                           tablat	equ	0xFF5
 16509                           prodh	equ	0xFF4
 16510                           prodl	equ	0xFF3
 16511                           intcon	equ	0xFF2
 16512                           indf0	equ	0xFEF
 16513                           postinc0	equ	0xFEE
 16514                           fsr0h	equ	0xFEA
 16515                           fsr0l	equ	0xFE9
 16516                           wreg	equ	0xFE8
 16517                           indf1	equ	0xFE7
 16518                           postinc1	equ	0xFE6
 16519                           postdec1	equ	0xFE5
 16520                           fsr1h	equ	0xFE2
 16521                           fsr1l	equ	0xFE1
 16522                           indf2	equ	0xFDF
 16523                           postinc2	equ	0xFDE
 16524                           postdec2	equ	0xFDD
 16525                           plusw2	equ	0xFDB
 16526                           fsr2h	equ	0xFDA
 16527                           fsr2l	equ	0xFD9
 16528                           status	equ	0xFD8
 16529                           
 16530 ;; *************** function _strcpy *****************
 16531 ;; Defined at:
 16532 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16533 ;; Parameters:    Size  Location     Type
 16534 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16535 ;;		 -> cmdbuf(80), 
 16536 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16537 ;;		 -> cmdbuf(80), 
 16538 ;; Auto vars:     Size  Location     Type
 16539 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16540 ;;		 -> cmdbuf(80), 
 16541 ;; Return value:  Size  Location     Type
 16542 ;;                  2    0[BANK0 ] PTR unsigned char 
 16543 ;; Registers used:
 16544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16545 ;; Tracked objects:
 16546 ;;		On entry : F/0
 16547 ;;		On exit  : F/0
 16548 ;;		Unchanged: 0/0
 16549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16550 ;;      Params:         0       4       0       0       0       0       0
 16551 ;;      Locals:         0       2       0       0       0       0       0
 16552 ;;      Temps:          0       0       0       0       0       0       0
 16553 ;;      Totals:         0       6       0       0       0       0       0
 16554 ;;Total ram usage:        6 bytes
 16555 ;; Hardware stack levels used:    1
 16556 ;; Hardware stack levels required when called:    3
 16557 ;; This function calls:
 16558 ;;		Nothing
 16559 ;; This function is called by:
 16560 ;;		_doModeVerbose
 16561 ;; This function uses a non-reentrant model
 16562 ;;
 16563                           
 16564                           	psect	text26
 16565  0010D6                     __ptext26:
 16566                           	opt stack 0
 16567  0010D6                     _strcpy:
 16568                           	opt stack 25
 16569                           
 16570                           ; BSR set to: 0
 16571                           
 16572                           ;incstack = 0
 16573                           ;incstack = 0
 16574  0010D6  C060  F064         	movff	strcpy@to,strcpy@cp
 16575  0010DA  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16576  0010DE  D004               	goto	l16284
 16577  0010E0                     l16282:
 16578                           
 16579                           ; BSR set to: 0
 16580  0010E0  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16581  0010E2  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16582  0010E4  4B62               	infsnz	strcpy@from& (0+255),f,b
 16583  0010E6  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16584  0010E8                     l16284:
 16585                           
 16586                           ; BSR set to: 0
 16587  0010E8  C062  FFD9         	movff	strcpy@from,fsr2l
 16588  0010EC  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16589  0010F0  C064  FFE1         	movff	strcpy@cp,fsr1l
 16590  0010F4  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16591  0010F8  CFDF FFE7          	movff	indf2,indf1
 16592  0010FC  50E7               	movf	indf1,w,c
 16593  0010FE  B4D8               	btfsc	status,2,c
 16594                           
 16595                           ; BSR set to: 0
 16596  001100  0012               	return	
 16597  001102  D7EE               	goto	l16282
 16598  001104                     __end_of_strcpy:
 16599                           	opt stack 0
 16600                           tblptru	equ	0xFF8
 16601                           tblptrh	equ	0xFF7
 16602                           tblptrl	equ	0xFF6
 16603                           tablat	equ	0xFF5
 16604                           prodh	equ	0xFF4
 16605                           prodl	equ	0xFF3
 16606                           intcon	equ	0xFF2
 16607                           indf0	equ	0xFEF
 16608                           postinc0	equ	0xFEE
 16609                           fsr0h	equ	0xFEA
 16610                           fsr0l	equ	0xFE9
 16611                           wreg	equ	0xFE8
 16612                           indf1	equ	0xFE7
 16613                           postinc1	equ	0xFE6
 16614                           postdec1	equ	0xFE5
 16615                           fsr1h	equ	0xFE2
 16616                           fsr1l	equ	0xFE1
 16617                           indf2	equ	0xFDF
 16618                           postinc2	equ	0xFDE
 16619                           postdec2	equ	0xFDD
 16620                           plusw2	equ	0xFDB
 16621                           fsr2h	equ	0xFDA
 16622                           fsr2l	equ	0xFD9
 16623                           status	equ	0xFD8
 16624                           
 16625 ;; *************** function _findNodes *****************
 16626 ;; Defined at:
 16627 ;;		line 2882 in file "main.c"
 16628 ;; Parameters:    Size  Location     Type
 16629 ;;		None
 16630 ;; Auto vars:     Size  Location     Type
 16631 ;;  i               1  107[BANK0 ] unsigned char 
 16632 ;;  value           1  106[BANK0 ] unsigned char 
 16633 ;;  nFound          1  105[BANK0 ] unsigned char 
 16634 ;; Return value:  Size  Location     Type
 16635 ;;		None               void
 16636 ;; Registers used:
 16637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16638 ;; Tracked objects:
 16639 ;;		On entry : F/0
 16640 ;;		On exit  : 0/0
 16641 ;;		Unchanged: 0/0
 16642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16643 ;;      Params:         0       0       0       0       0       0       0
 16644 ;;      Locals:         0       5       0       0       0       0       0
 16645 ;;      Temps:          0       0       0       0       0       0       0
 16646 ;;      Totals:         0       5       0       0       0       0       0
 16647 ;;Total ram usage:        5 bytes
 16648 ;; Hardware stack levels used:    1
 16649 ;; Hardware stack levels required when called:    9
 16650 ;; This function calls:
 16651 ;;		_putsUSART
 16652 ;;		_WriteUSART
 16653 ;;		_printNodeFirmwareVersion
 16654 ;;		_printGUID
 16655 ;;		_printMDF
 16656 ;;		_itoa
 16657 ;;		_readRegister
 16658 ;; This function is called by:
 16659 ;;		_doModeVerbose
 16660 ;; This function uses a non-reentrant model
 16661 ;;
 16662                           
 16663                           	psect	text27
 16664  002D6E                     __ptext27:
 16665                           	opt stack 0
 16666  002D6E                     _findNodes:
 16667                           	opt stack 19
 16668                           
 16669                           ; BSR set to: 0
 16670                           ;main.c: 2883: uint8_t nFound = 0;
 16671                           
 16672                           ; BSR set to: 0
 16673                           ;incstack = 0
 16674                           ;incstack = 0
 16675  002D6E  6BC9               	clrf	findNodes@nFound& (0+255),b
 16676                           
 16677                           ; BSR set to: 0
 16678                           ;main.c: 2884: uint8_t i;
 16679                           ;main.c: 2885: uint8_t value;
 16680                           ;main.c: 2887: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 16681  002D70  506F               	movf	3951,w,c	;volatile
 16682  002D72  0BE0               	andlw	224
 16683  002D74  E007               	bz	l16230
 16684                           
 16685                           ; BSR set to: 0
 16686                           ;main.c: 2888: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 16687  002D76  0E70               	movlw	high STR_50
 16688  002D78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16689  002D7A  0EC7               	movlw	low STR_50
 16690  002D7C  6F61               	movwf	?_putsUSART& (0+255),b
 16691  002D7E  ECBC  F00A         	call	_putsUSART	;wreg free
 16692  002D82  D083               	goto	l1264
 16693  002D84                     l16230:
 16694                           
 16695                           ; BSR set to: 0
 16696                           ;main.c: 2890: }
 16697                           ;main.c: 2892: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16698  002D84  0E6D               	movlw	high STR_270
 16699  002D86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16700  002D88  0E96               	movlw	low STR_270
 16701  002D8A  6F61               	movwf	?_putsUSART& (0+255),b
 16702  002D8C  ECBC  F00A         	call	_putsUSART	;wreg free
 16703                           
 16704                           ;main.c: 2894: for (i = 1; i != 0; i++) {
 16705  002D90  0E01               	movlw	1
 16706  002D92  0100               	movlb	0	; () banked
 16707  002D94  6FCB               	movwf	findNodes@i& (0+255),b
 16708  002D96                     l1265:
 16709                           
 16710                           ; BSR set to: 0
 16711  002D96  0004               	clrwdt		;# 
 16712                           
 16713                           ;main.c: 2898: if (readRegister(i,
 16714                           ;main.c: 2899: 0xE0,
 16715                           ;main.c: 2900: rwtimeout,
 16716                           ;main.c: 2901: &value)) {
 16717  002D98  0EE0               	movlw	224
 16718  002D9A  0100               	movlb	0	; () banked
 16719  002D9C  6FB8               	movwf	?_readRegister& (0+255),b
 16720  002D9E  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 16721  002DA2  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 16722  002DA4  0ECA               	movlw	low findNodes@value
 16723  002DA6  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 16724  002DA8  51CB               	movf	findNodes@i& (0+255),w,b
 16725  002DAA  ECAC  F011         	call	_readRegister
 16726  002DAE  0900               	iorlw	0
 16727  002DB0  E043               	bz	l16264
 16728                           
 16729                           ;main.c: 2902: putsUSART((char *) "\r\nNode found with node id = ");
 16730  002DB2  0E77               	movlw	high STR_271
 16731  002DB4  0100               	movlb	0	; () banked
 16732  002DB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16733  002DB8  0E8D               	movlw	low STR_271
 16734  002DBA  6F61               	movwf	?_putsUSART& (0+255),b
 16735  002DBC  ECBC  F00A         	call	_putsUSART	;wreg free
 16736                           
 16737                           ;main.c: 2903: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16738  002DC0  662C               	tstfsz	_bHex,c
 16739  002DC2  D004               	goto	l16246
 16740  002DC4  0100               	movlb	0	; () banked
 16741  002DC6  6BC8               	clrf	(_findNodes$1583+1)& (0+255),b
 16742  002DC8  0E0A               	movlw	10
 16743  002DCA  D003               	goto	L17
 16744  002DCC                     l16246:
 16745  002DCC  0100               	movlb	0	; () banked
 16746  002DCE  6BC8               	clrf	(_findNodes$1583+1)& (0+255),b
 16747  002DD0  0E10               	movlw	16
 16748  002DD2                     L17:
 16749  002DD2  6FC7               	movwf	_findNodes$1583& (0+255),b
 16750                           
 16751                           ; BSR set to: 0
 16752  002DD4  0E01               	movlw	high _wrkbuf
 16753  002DD6  0100               	movlb	0	; () banked
 16754  002DD8  6F71               	movwf	(?_itoa+1)& (0+255),b
 16755  002DDA  0E7D               	movlw	low _wrkbuf
 16756  002DDC  6F70               	movwf	?_itoa& (0+255),b
 16757  002DDE  C03C  F072         	movff	_vscpNodeId,?_itoa+2
 16758  002DE2  6B73               	clrf	(?_itoa+3)& (0+255),b
 16759  002DE4  C0C7  F074         	movff	_findNodes$1583,?_itoa+4
 16760  002DE8  C0C8  F075         	movff	_findNodes$1583+1,?_itoa+5
 16761  002DEC  ECCC  F008         	call	_itoa	;wreg free
 16762                           
 16763                           ; BSR set to: 0
 16764                           ;main.c: 2904: putsUSART(wrkbuf);
 16765  002DF0  0E01               	movlw	high _wrkbuf
 16766  002DF2  0100               	movlb	0	; () banked
 16767  002DF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16768  002DF6  0E7D               	movlw	low _wrkbuf
 16769  002DF8  6F61               	movwf	?_putsUSART& (0+255),b
 16770  002DFA  ECBC  F00A         	call	_putsUSART	;wreg free
 16771                           
 16772                           ;main.c: 2905: putsUSART((char *) "\r\n");
 16773  002DFE  0E70               	movlw	high (STR_228+50)
 16774  002E00  0100               	movlb	0	; () banked
 16775  002E02  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16776  002E04  0EC4               	movlw	low (STR_228+50)
 16777  002E06  6F61               	movwf	?_putsUSART& (0+255),b
 16778  002E08  ECBC  F00A         	call	_putsUSART	;wreg free
 16779                           
 16780                           ;main.c: 2906: printNodeFirmwareVersion(i);
 16781  002E0C  0100               	movlb	0	; () banked
 16782  002E0E  51CB               	movf	findNodes@i& (0+255),w,b
 16783  002E10  EC49  F011         	call	_printNodeFirmwareVersion
 16784                           
 16785                           ;main.c: 2907: printGUID(i);
 16786  002E14  0100               	movlb	0	; () banked
 16787  002E16  51CB               	movf	findNodes@i& (0+255),w,b
 16788  002E18  ECAD  F014         	call	_printGUID
 16789                           
 16790                           ;main.c: 2908: printMDF(i);
 16791  002E1C  0100               	movlb	0	; () banked
 16792  002E1E  51CB               	movf	findNodes@i& (0+255),w,b
 16793  002E20  EC03  F00E         	call	_printMDF
 16794                           
 16795                           ;main.c: 2909: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16796  002E24  0E6D               	movlw	high STR_270
 16797  002E26  0100               	movlb	0	; () banked
 16798  002E28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16799  002E2A  0E96               	movlw	low STR_270
 16800  002E2C  6F61               	movwf	?_putsUSART& (0+255),b
 16801  002E2E  ECBC  F00A         	call	_putsUSART	;wreg free
 16802                           
 16803                           ;main.c: 2910: nFound++;
 16804  002E32  0100               	movlb	0	; () banked
 16805  002E34  2BC9               	incf	findNodes@nFound& (0+255),f,b
 16806                           
 16807                           ;main.c: 2911: }
 16808  002E36  D004               	goto	l16268
 16809  002E38                     l16264:
 16810                           
 16811                           ;main.c: 2912: else {
 16812                           ;main.c: 2913: WriteUSART('.');
 16813  002E38  0E2E               	movlw	46
 16814  002E3A  ECF5  F007         	call	_WriteUSART
 16815                           
 16816                           ;main.c: 2914: (!TXSTAbits.TRMT);
 16817  002E3E  50AC               	movf	4012,w,c	;volatile
 16818  002E40                     l16268:
 16819  002E40  0100               	movlb	0	; () banked
 16820  002E42  2BCB               	incf	findNodes@i& (0+255),f,b
 16821                           
 16822                           ; BSR set to: 0
 16823  002E44  67CB               	tstfsz	findNodes@i& (0+255),b
 16824  002E46  D7A7               	goto	l1265
 16825                           
 16826                           ; BSR set to: 0
 16827                           ;main.c: 2915: }
 16828                           ;main.c: 2917: }
 16829                           ;main.c: 2919: putsUSART((char *) "\r\n");
 16830  002E48  0E70               	movlw	high (STR_228+50)
 16831  002E4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16832  002E4C  0EC4               	movlw	low (STR_228+50)
 16833  002E4E  6F61               	movwf	?_putsUSART& (0+255),b
 16834  002E50  ECBC  F00A         	call	_putsUSART	;wreg free
 16835                           
 16836                           ;main.c: 2920: itoa(wrkbuf, nFound, 10);
 16837  002E54  0E01               	movlw	high _wrkbuf
 16838  002E56  0100               	movlb	0	; () banked
 16839  002E58  6F71               	movwf	(?_itoa+1)& (0+255),b
 16840  002E5A  0E7D               	movlw	low _wrkbuf
 16841  002E5C  6F70               	movwf	?_itoa& (0+255),b
 16842  002E5E  C0C9  F072         	movff	findNodes@nFound,?_itoa+2
 16843  002E62  6B73               	clrf	(?_itoa+3)& (0+255),b
 16844  002E64  6B75               	clrf	(?_itoa+5)& (0+255),b
 16845  002E66  0E0A               	movlw	10
 16846  002E68  6F74               	movwf	(?_itoa+4)& (0+255),b
 16847  002E6A  ECCC  F008         	call	_itoa	;wreg free
 16848                           
 16849                           ; BSR set to: 0
 16850                           ;main.c: 2921: putsUSART(wrkbuf);
 16851  002E6E  0E01               	movlw	high _wrkbuf
 16852  002E70  0100               	movlb	0	; () banked
 16853  002E72  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16854  002E74  0E7D               	movlw	low _wrkbuf
 16855  002E76  6F61               	movwf	?_putsUSART& (0+255),b
 16856  002E78  ECBC  F00A         	call	_putsUSART	;wreg free
 16857                           
 16858                           ;main.c: 2922: putsUSART((char *) " node(s) found\r\n");
 16859  002E7C  0E7A               	movlw	high STR_275
 16860  002E7E  0100               	movlb	0	; () banked
 16861  002E80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16862  002E82  0EE6               	movlw	low STR_275
 16863  002E84  6F61               	movwf	?_putsUSART& (0+255),b
 16864  002E86  ECBC  F00A         	call	_putsUSART	;wreg free
 16865  002E8A                     l1264:
 16866  002E8A  0012               	return	
 16867  002E8C                     __end_of_findNodes:
 16868                           	opt stack 0
 16869                           tblptru	equ	0xFF8
 16870                           tblptrh	equ	0xFF7
 16871                           tblptrl	equ	0xFF6
 16872                           tablat	equ	0xFF5
 16873                           prodh	equ	0xFF4
 16874                           prodl	equ	0xFF3
 16875                           intcon	equ	0xFF2
 16876                           indf0	equ	0xFEF
 16877                           postinc0	equ	0xFEE
 16878                           fsr0h	equ	0xFEA
 16879                           fsr0l	equ	0xFE9
 16880                           wreg	equ	0xFE8
 16881                           indf1	equ	0xFE7
 16882                           postinc1	equ	0xFE6
 16883                           postdec1	equ	0xFE5
 16884                           fsr1h	equ	0xFE2
 16885                           fsr1l	equ	0xFE1
 16886                           indf2	equ	0xFDF
 16887                           postinc2	equ	0xFDE
 16888                           postdec2	equ	0xFDD
 16889                           plusw2	equ	0xFDB
 16890                           fsr2h	equ	0xFDA
 16891                           fsr2l	equ	0xFD9
 16892                           status	equ	0xFD8
 16893                           
 16894 ;; *************** function _printMDF *****************
 16895 ;; Defined at:
 16896 ;;		line 2973 in file "main.c"
 16897 ;; Parameters:    Size  Location     Type
 16898 ;;  nodeid          1    wreg     unsigned char 
 16899 ;; Auto vars:     Size  Location     Type
 16900 ;;  nodeid          1   97[BANK0 ] unsigned char 
 16901 ;;  p               2   99[BANK0 ] PTR unsigned char 
 16902 ;;		 -> wrkbuf(80), 
 16903 ;;  i               1  101[BANK0 ] unsigned char 
 16904 ;;  value           1   98[BANK0 ] unsigned char 
 16905 ;; Return value:  Size  Location     Type
 16906 ;;		None               void
 16907 ;; Registers used:
 16908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16909 ;; Tracked objects:
 16910 ;;		On entry : D/2
 16911 ;;		On exit  : 0/0
 16912 ;;		Unchanged: 0/0
 16913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16914 ;;      Params:         0       0       0       0       0       0       0
 16915 ;;      Locals:         0       5       0       0       0       0       0
 16916 ;;      Temps:          0       0       0       0       0       0       0
 16917 ;;      Totals:         0       5       0       0       0       0       0
 16918 ;;Total ram usage:        5 bytes
 16919 ;; Hardware stack levels used:    1
 16920 ;; Hardware stack levels required when called:    8
 16921 ;; This function calls:
 16922 ;;		_putsUSART
 16923 ;;		_memset
 16924 ;;		_readRegister
 16925 ;; This function is called by:
 16926 ;;		_doModeVerbose
 16927 ;;		_findNodes
 16928 ;; This function uses a non-reentrant model
 16929 ;;
 16930                           
 16931                           	psect	text28
 16932  001C06                     __ptext28:
 16933                           	opt stack 0
 16934  001C06                     _printMDF:
 16935                           	opt stack 20
 16936                           
 16937                           ;incstack = 0
 16938                           ;incstack = 0
 16939                           ;printMDF@nodeid stored from wreg
 16940  001C06  CFE8 F0C1          	movff	wreg,printMDF@nodeid
 16941                           
 16942                           ;main.c: 2974: uint8_t i;
 16943                           ;main.c: 2975: uint8_t value;
 16944                           ;main.c: 2976: char *p = wrkbuf;
 16945  001C0A  0E01               	movlw	high _wrkbuf
 16946  001C0C  0100               	movlb	0	; () banked
 16947  001C0E  6FC4               	movwf	(printMDF@p+1)& (0+255),b
 16948  001C10  0E7D               	movlw	low _wrkbuf
 16949  001C12  6FC3               	movwf	printMDF@p& (0+255),b
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;main.c: 2977: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16953  001C14  0E01               	movlw	high _wrkbuf
 16954  001C16  6F61               	movwf	(?_memset+1)& (0+255),b
 16955  001C18  0E7D               	movlw	low _wrkbuf
 16956  001C1A  D83A               	call	PL20	;call to abstracted procedure
 16957  001C1C  EC54  F008         	call	_memset	;wreg free
 16958                           
 16959                           ; BSR set to: 0
 16960                           ;main.c: 2978: putsUSART((char *) "MDF = http://");
 16961  001C20  0E7B               	movlw	high STR_281
 16962  001C22  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16963  001C24  0E28               	movlw	low STR_281
 16964  001C26  6F61               	movwf	?_putsUSART& (0+255),b
 16965  001C28  ECBC  F00A         	call	_putsUSART	;wreg free
 16966                           
 16967                           ;main.c: 2980: for (i = 0; i < 32; i++) {
 16968  001C2C  0100               	movlb	0	; () banked
 16969  001C2E  6BC5               	clrf	printMDF@i& (0+255),b
 16970  001C30                     l16804:
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;main.c: 2981: if (readRegister(nodeid,
 16974                           ;main.c: 2982: 0xE0 + i,
 16975                           ;main.c: 2983: rwtimeout,
 16976                           ;main.c: 2984: &value)) {
 16977  001C30  51C5               	movf	printMDF@i& (0+255),w,b
 16978  001C32  0FE0               	addlw	224
 16979  001C34  6FB8               	movwf	?_readRegister& (0+255),b
 16980  001C36  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 16981  001C3A  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 16982  001C3C  0EC2               	movlw	low printMDF@value
 16983  001C3E  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 16984  001C40  51C1               	movf	printMDF@nodeid& (0+255),w,b
 16985  001C42  ECAC  F011         	call	_readRegister
 16986  001C46  0900               	iorlw	0
 16987  001C48  E00A               	bz	l16810
 16988                           
 16989                           ;main.c: 2985: *p = value;
 16990  001C4A  C0C3  FFD9         	movff	printMDF@p,fsr2l
 16991  001C4E  C0C4  FFDA         	movff	printMDF@p+1,fsr2h
 16992  001C52  C0C2  FFDF         	movff	printMDF@value,indf2
 16993  001C56                     l16808:
 16994                           
 16995                           ;main.c: 2986: p++;
 16996  001C56  0100               	movlb	0	; () banked
 16997  001C58  4BC3               	infsnz	printMDF@p& (0+255),f,b
 16998  001C5A  2BC4               	incf	(printMDF@p+1)& (0+255),f,b
 16999                           
 17000                           ;main.c: 2988: }
 17001  001C5C  D007               	goto	l16814
 17002  001C5E                     l16810:
 17003                           
 17004                           ;main.c: 2989: else {
 17005                           ;main.c: 2990: *p = '?';
 17006  001C5E  C0C3  FFD9         	movff	printMDF@p,fsr2l
 17007  001C62  C0C4  FFDA         	movff	printMDF@p+1,fsr2h
 17008  001C66  0E3F               	movlw	63
 17009  001C68  6EDF               	movwf	indf2,c
 17010  001C6A  D7F5               	goto	l16808
 17011  001C6C                     l16814:
 17012                           
 17013                           ; BSR set to: 0
 17014  001C6C  2BC5               	incf	printMDF@i& (0+255),f,b
 17015                           
 17016                           ; BSR set to: 0
 17017  001C6E  0E1F               	movlw	31
 17018  001C70  65C5               	cpfsgt	printMDF@i& (0+255),b
 17019  001C72  D7DE               	goto	l16804
 17020                           
 17021                           ; BSR set to: 0
 17022                           ;main.c: 2992: }
 17023                           ;main.c: 2993: }
 17024                           ;main.c: 2995: putsUSART(wrkbuf);
 17025  001C74  0E01               	movlw	high _wrkbuf
 17026  001C76  0100               	movlb	0	; () banked
 17027  001C78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17028  001C7A  0E7D               	movlw	low _wrkbuf
 17029  001C7C  6F61               	movwf	?_putsUSART& (0+255),b
 17030  001C7E  ECBC  F00A         	call	_putsUSART	;wreg free
 17031                           
 17032                           ;main.c: 2996: putsUSART((char *) "\r\n");
 17033  001C82  0E70               	movlw	high (STR_228+50)
 17034  001C84  0100               	movlb	0	; () banked
 17035  001C86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17036  001C88  0EC4               	movlw	low (STR_228+50)
 17037  001C8A  6F61               	movwf	?_putsUSART& (0+255),b
 17038  001C8C  EFBC  F00A         	goto	_putsUSART	;wreg free
 17039  001C90                     __end_of_printMDF:
 17040                           	opt stack 0
 17041  001C90                     PL20:
 17042                           	opt stack 19
 17043  001C90  6F60               	movwf	?_memset& (0+255),b
 17044  001C92  6B63               	clrf	(?_memset+3)& (0+255),b
 17045  001C94  6B62               	clrf	(?_memset+2)& (0+255),b
 17046  001C96  6B65               	clrf	(?_memset+5)& (0+255),b
 17047  001C98  0E50               	movlw	80
 17048  001C9A  6F64               	movwf	(?_memset+4)& (0+255),b
 17049  001C9C  0C50               	retlw	80
 17050  001C9E                     __end_ofPL20:
 17051                           	opt stack 0
 17052                           tblptru	equ	0xFF8
 17053                           tblptrh	equ	0xFF7
 17054                           tblptrl	equ	0xFF6
 17055                           tablat	equ	0xFF5
 17056                           prodh	equ	0xFF4
 17057                           prodl	equ	0xFF3
 17058                           intcon	equ	0xFF2
 17059                           indf0	equ	0xFEF
 17060                           postinc0	equ	0xFEE
 17061                           fsr0h	equ	0xFEA
 17062                           fsr0l	equ	0xFE9
 17063                           wreg	equ	0xFE8
 17064                           indf1	equ	0xFE7
 17065                           postinc1	equ	0xFE6
 17066                           postdec1	equ	0xFE5
 17067                           fsr1h	equ	0xFE2
 17068                           fsr1l	equ	0xFE1
 17069                           indf2	equ	0xFDF
 17070                           postinc2	equ	0xFDE
 17071                           postdec2	equ	0xFDD
 17072                           plusw2	equ	0xFDB
 17073                           fsr2h	equ	0xFDA
 17074                           fsr2l	equ	0xFD9
 17075                           status	equ	0xFD8
 17076                           
 17077 ;; *************** function _printGUID *****************
 17078 ;; Defined at:
 17079 ;;		line 2932 in file "main.c"
 17080 ;; Parameters:    Size  Location     Type
 17081 ;;  nodeid          1    wreg     unsigned char 
 17082 ;; Auto vars:     Size  Location     Type
 17083 ;;  nodeid          1   97[BANK0 ] unsigned char 
 17084 ;;  buf             3   98[BANK0 ] unsigned char [3]
 17085 ;;  i               1  102[BANK0 ] unsigned char 
 17086 ;;  value           1  101[BANK0 ] unsigned char 
 17087 ;; Return value:  Size  Location     Type
 17088 ;;		None               void
 17089 ;; Registers used:
 17090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17091 ;; Tracked objects:
 17092 ;;		On entry : D/2
 17093 ;;		On exit  : 0/0
 17094 ;;		Unchanged: 0/0
 17095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17096 ;;      Params:         0       0       0       0       0       0       0
 17097 ;;      Locals:         0       6       0       0       0       0       0
 17098 ;;      Temps:          0       0       0       0       0       0       0
 17099 ;;      Totals:         0       6       0       0       0       0       0
 17100 ;;Total ram usage:        6 bytes
 17101 ;; Hardware stack levels used:    1
 17102 ;; Hardware stack levels required when called:    8
 17103 ;; This function calls:
 17104 ;;		_putsUSART
 17105 ;;		_memset
 17106 ;;		_strlen
 17107 ;;		_itoa
 17108 ;;		_readRegister
 17109 ;;		_strcat
 17110 ;; This function is called by:
 17111 ;;		_doModeVerbose
 17112 ;;		_findNodes
 17113 ;; This function uses a non-reentrant model
 17114 ;;
 17115                           
 17116                           	psect	text29
 17117  00295A                     __ptext29:
 17118                           	opt stack 0
 17119  00295A                     _printGUID:
 17120                           	opt stack 20
 17121                           
 17122                           ;incstack = 0
 17123                           ;incstack = 0
 17124                           ;printGUID@nodeid stored from wreg
 17125  00295A  CFE8 F0C1          	movff	wreg,printGUID@nodeid
 17126                           
 17127                           ;main.c: 2933: uint8_t i;
 17128                           ;main.c: 2934: uint8_t value;
 17129                           ;main.c: 2935: char buf[3];
 17130                           ;main.c: 2937: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 17131  00295E  0E01               	movlw	high _wrkbuf
 17132  002960  0100               	movlb	0	; () banked
 17133  002962  6F61               	movwf	(?_memset+1)& (0+255),b
 17134  002964  0E7D               	movlw	low _wrkbuf
 17135  002966  EC48  F00E         	call	PL20	;call to abstracted procedure
 17136  00296A  EC54  F008         	call	_memset	;wreg free
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;main.c: 2938: putsUSART((char *) "GUID = ");
 17140  00296E  0E7B               	movlw	high STR_276
 17141  002970  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17142  002972  0ECA               	movlw	low STR_276
 17143  002974  6F61               	movwf	?_putsUSART& (0+255),b
 17144  002976  ECBC  F00A         	call	_putsUSART	;wreg free
 17145                           
 17146                           ;main.c: 2940: for (i = 0; i < 16; i++) {
 17147  00297A  0100               	movlb	0	; () banked
 17148  00297C  6BC6               	clrf	printGUID@i& (0+255),b
 17149  00297E                     l16770:
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;main.c: 2941: if (readRegister(nodeid,
 17153                           ;main.c: 2942: 0xD0 + i,
 17154                           ;main.c: 2943: rwtimeout,
 17155                           ;main.c: 2944: &value)) {
 17156  00297E  51C6               	movf	printGUID@i& (0+255),w,b
 17157  002980  0FD0               	addlw	208
 17158  002982  6FB8               	movwf	?_readRegister& (0+255),b
 17159  002984  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 17160  002988  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 17161  00298A  0EC5               	movlw	low printGUID@value
 17162  00298C  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 17163  00298E  51C1               	movf	printGUID@nodeid& (0+255),w,b
 17164  002990  ECAC  F011         	call	_readRegister
 17165  002994  0900               	iorlw	0
 17166  002996  E029               	bz	l16780
 17167                           
 17168                           ;main.c: 2945: itoa(buf, value, 16);
 17169  002998  0100               	movlb	0	; () banked
 17170  00299A  0E00               	movlw	high printGUID@buf
 17171  00299C  6F71               	movwf	(?_itoa+1)& (0+255),b
 17172  00299E  0EC2               	movlw	low printGUID@buf
 17173  0029A0  6F70               	movwf	?_itoa& (0+255),b
 17174  0029A2  C0C5  F072         	movff	printGUID@value,?_itoa+2
 17175  0029A6  6B73               	clrf	(?_itoa+3)& (0+255),b
 17176  0029A8  6B75               	clrf	(?_itoa+5)& (0+255),b
 17177  0029AA  0E10               	movlw	16
 17178  0029AC  6F74               	movwf	(?_itoa+4)& (0+255),b
 17179  0029AE  ECCC  F008         	call	_itoa	;wreg free
 17180                           
 17181                           ; BSR set to: 0
 17182                           ;main.c: 2946: if (1 == strlen(buf)) {
 17183  0029B2  0E00               	movlw	high printGUID@buf
 17184  0029B4  6F61               	movwf	(?_strlen+1)& (0+255),b
 17185  0029B6  0EC2               	movlw	low printGUID@buf
 17186  0029B8  6F60               	movwf	?_strlen& (0+255),b
 17187  0029BA  EC9E  F009         	call	_strlen	;wreg free
 17188  0029BE  0560               	decf	?_strlen& (0+255),w,b
 17189  0029C0  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 17190  0029C2  E10F               	bnz	l16778
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;main.c: 2947: strcat(wrkbuf, "0");
 17194  0029C4  0E01               	movlw	high _wrkbuf
 17195  0029C6  0100               	movlb	0	; () banked
 17196  0029C8  6F61               	movwf	(?_strcat+1)& (0+255),b
 17197  0029CA  0E7D               	movlw	low _wrkbuf
 17198  0029CC  6F60               	movwf	?_strcat& (0+255),b
 17199  0029CE  0E7C               	movlw	high STR_277
 17200  0029D0  6F63               	movwf	(?_strcat+3)& (0+255),b
 17201  0029D2  0EF8               	movlw	low STR_277
 17202  0029D4  6F62               	movwf	(?_strcat+2)& (0+255),b
 17203  0029D6  ECE8  F00A         	call	_strcat	;wreg free
 17204                           
 17205                           ;main.c: 2948: strcat(wrkbuf, buf);
 17206  0029DA  D832               	call	PL72	;call to abstracted procedure
 17207  0029DC  ECE8  F00A         	call	_strcat	;wreg free
 17208                           
 17209                           ;main.c: 2949: } else {
 17210  0029E0  D00F               	goto	l16782
 17211  0029E2                     l16778:
 17212                           
 17213                           ; BSR set to: 0
 17214                           ;main.c: 2950: strcat(wrkbuf, buf);
 17215  0029E2  D82E               	call	PL72	;call to abstracted procedure
 17216  0029E4  ECE8  F00A         	call	_strcat	;wreg free
 17217  0029E8  D00B               	goto	l16782
 17218  0029EA                     l16780:
 17219                           
 17220                           ;main.c: 2954: strcat(wrkbuf, "--");
 17221  0029EA  0E01               	movlw	high _wrkbuf
 17222  0029EC  0100               	movlb	0	; () banked
 17223  0029EE  6F61               	movwf	(?_strcat+1)& (0+255),b
 17224  0029F0  0E7D               	movlw	low _wrkbuf
 17225  0029F2  6F60               	movwf	?_strcat& (0+255),b
 17226  0029F4  0E7C               	movlw	high STR_278
 17227  0029F6  6F63               	movwf	(?_strcat+3)& (0+255),b
 17228  0029F8  0EE4               	movlw	low STR_278
 17229  0029FA  6F62               	movwf	(?_strcat+2)& (0+255),b
 17230  0029FC  ECE8  F00A         	call	_strcat	;wreg free
 17231  002A00                     l16782:
 17232                           
 17233                           ;main.c: 2955: }
 17234                           ;main.c: 2957: if (i < 15) {
 17235  002A00  0E0F               	movlw	15
 17236  002A02  0100               	movlb	0	; () banked
 17237  002A04  61C6               	cpfslt	printGUID@i& (0+255),b
 17238  002A06  D00A               	goto	l16786
 17239                           
 17240                           ; BSR set to: 0
 17241                           ;main.c: 2958: strcat(wrkbuf, ":");
 17242  002A08  0E01               	movlw	high _wrkbuf
 17243  002A0A  6F61               	movwf	(?_strcat+1)& (0+255),b
 17244  002A0C  0E7D               	movlw	low _wrkbuf
 17245  002A0E  6F60               	movwf	?_strcat& (0+255),b
 17246  002A10  0E7C               	movlw	high STR_279
 17247  002A12  6F63               	movwf	(?_strcat+3)& (0+255),b
 17248  002A14  0EFA               	movlw	low STR_279
 17249  002A16  6F62               	movwf	(?_strcat+2)& (0+255),b
 17250  002A18  ECE8  F00A         	call	_strcat	;wreg free
 17251  002A1C                     l16786:
 17252  002A1C  0100               	movlb	0	; () banked
 17253  002A1E  2BC6               	incf	printGUID@i& (0+255),f,b
 17254                           
 17255                           ; BSR set to: 0
 17256  002A20  0E0F               	movlw	15
 17257  002A22  65C6               	cpfsgt	printGUID@i& (0+255),b
 17258  002A24  D7AC               	goto	l16770
 17259                           
 17260                           ; BSR set to: 0
 17261                           ;main.c: 2959: }
 17262                           ;main.c: 2961: }
 17263                           ;main.c: 2963: putsUSART(wrkbuf);
 17264  002A26  0E01               	movlw	high _wrkbuf
 17265  002A28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17266  002A2A  0E7D               	movlw	low _wrkbuf
 17267  002A2C  6F61               	movwf	?_putsUSART& (0+255),b
 17268  002A2E  ECBC  F00A         	call	_putsUSART	;wreg free
 17269                           
 17270                           ;main.c: 2964: putsUSART((char *) "\r\n");
 17271  002A32  0E70               	movlw	high (STR_228+50)
 17272  002A34  0100               	movlb	0	; () banked
 17273  002A36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17274  002A38  0EC4               	movlw	low (STR_228+50)
 17275  002A3A  6F61               	movwf	?_putsUSART& (0+255),b
 17276  002A3C  EFBC  F00A         	goto	_putsUSART	;wreg free
 17277  002A40                     __end_of_printGUID:
 17278                           	opt stack 0
 17279  002A40                     PL72:
 17280                           	opt stack 20
 17281  002A40  0E01               	movlw	high _wrkbuf
 17282  002A42  0100               	movlb	0	; () banked
 17283  002A44  6F61               	movwf	(?_strcat+1)& (0+255),b
 17284  002A46  0E7D               	movlw	low _wrkbuf
 17285  002A48  6F60               	movwf	?_strcat& (0+255),b
 17286  002A4A  0E00               	movlw	high printGUID@buf
 17287  002A4C  6F63               	movwf	(?_strcat+3)& (0+255),b
 17288  002A4E  0EC2               	movlw	low printGUID@buf
 17289  002A50  6F62               	movwf	(?_strcat+2)& (0+255),b
 17290  002A52  0012               	return	
 17291  002A54                     __end_ofPL72:
 17292                           	opt stack 0
 17293                           tblptru	equ	0xFF8
 17294                           tblptrh	equ	0xFF7
 17295                           tblptrl	equ	0xFF6
 17296                           tablat	equ	0xFF5
 17297                           prodh	equ	0xFF4
 17298                           prodl	equ	0xFF3
 17299                           intcon	equ	0xFF2
 17300                           indf0	equ	0xFEF
 17301                           postinc0	equ	0xFEE
 17302                           fsr0h	equ	0xFEA
 17303                           fsr0l	equ	0xFE9
 17304                           wreg	equ	0xFE8
 17305                           indf1	equ	0xFE7
 17306                           postinc1	equ	0xFE6
 17307                           postdec1	equ	0xFE5
 17308                           fsr1h	equ	0xFE2
 17309                           fsr1l	equ	0xFE1
 17310                           indf2	equ	0xFDF
 17311                           postinc2	equ	0xFDE
 17312                           postdec2	equ	0xFDD
 17313                           plusw2	equ	0xFDB
 17314                           fsr2h	equ	0xFDA
 17315                           fsr2l	equ	0xFD9
 17316                           status	equ	0xFD8
 17317                           
 17318 ;; *************** function _printNodeFirmwareVersion *****************
 17319 ;; Defined at:
 17320 ;;		line 3004 in file "main.c"
 17321 ;; Parameters:    Size  Location     Type
 17322 ;;  nodeid          1    wreg     unsigned char 
 17323 ;; Auto vars:     Size  Location     Type
 17324 ;;  nodeid          1   97[BANK0 ] unsigned char 
 17325 ;;  buf             3   98[BANK0 ] unsigned char [3]
 17326 ;;  i               1  102[BANK0 ] unsigned char 
 17327 ;;  value           1  101[BANK0 ] unsigned char 
 17328 ;; Return value:  Size  Location     Type
 17329 ;;		None               void
 17330 ;; Registers used:
 17331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17332 ;; Tracked objects:
 17333 ;;		On entry : D/2
 17334 ;;		On exit  : 0/0
 17335 ;;		Unchanged: 0/0
 17336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17337 ;;      Params:         0       0       0       0       0       0       0
 17338 ;;      Locals:         0       6       0       0       0       0       0
 17339 ;;      Temps:          0       0       0       0       0       0       0
 17340 ;;      Totals:         0       6       0       0       0       0       0
 17341 ;;Total ram usage:        6 bytes
 17342 ;; Hardware stack levels used:    1
 17343 ;; Hardware stack levels required when called:    8
 17344 ;; This function calls:
 17345 ;;		_putsUSART
 17346 ;;		_memset
 17347 ;;		_itoa
 17348 ;;		_readRegister
 17349 ;;		_strcat
 17350 ;; This function is called by:
 17351 ;;		_doModeVerbose
 17352 ;;		_findNodes
 17353 ;; This function uses a non-reentrant model
 17354 ;;
 17355                           
 17356                           	psect	text30
 17357  002292                     __ptext30:
 17358                           	opt stack 0
 17359  002292                     _printNodeFirmwareVersion:
 17360                           	opt stack 20
 17361                           
 17362                           ;incstack = 0
 17363                           ;incstack = 0
 17364                           ;printNodeFirmwareVersion@nodeid stored from wreg
 17365  002292  CFE8 F0C1          	movff	wreg,printNodeFirmwareVersion@nodeid
 17366                           
 17367                           ;main.c: 3005: uint8_t i;
 17368                           ;main.c: 3006: uint8_t value;
 17369                           ;main.c: 3007: char buf[3];
 17370                           ;main.c: 3009: memset( wrkbuf, 0, sizeof(wrkbuf) );
 17371  002296  0E01               	movlw	high _wrkbuf
 17372  002298  0100               	movlb	0	; () banked
 17373  00229A  6F61               	movwf	(?_memset+1)& (0+255),b
 17374  00229C  0E7D               	movlw	low _wrkbuf
 17375  00229E  EC48  F00E         	call	PL20	;call to abstracted procedure
 17376  0022A2  EC54  F008         	call	_memset	;wreg free
 17377                           
 17378                           ; BSR set to: 0
 17379                           ;main.c: 3010: putsUSART((char *) "Firmware version = ");
 17380  0022A6  0E7A               	movlw	high STR_283
 17381  0022A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17382  0022AA  0E67               	movlw	low STR_283
 17383  0022AC  6F61               	movwf	?_putsUSART& (0+255),b
 17384  0022AE  ECBC  F00A         	call	_putsUSART	;wreg free
 17385                           
 17386                           ;main.c: 3012: for (i = 0; i < 3; i++) {
 17387  0022B2  0100               	movlb	0	; () banked
 17388  0022B4  6BC6               	clrf	printNodeFirmwareVersion@i& (0+255),b
 17389  0022B6                     l16742:
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;main.c: 3013: if (readRegister(nodeid,
 17393                           ;main.c: 3014: 0x94 + i,
 17394                           ;main.c: 3015: rwtimeout,
 17395                           ;main.c: 3016: &value)) {
 17396  0022B6  51C6               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 17397  0022B8  0F94               	addlw	148
 17398  0022BA  6FB8               	movwf	?_readRegister& (0+255),b
 17399  0022BC  C035  F0B9         	movff	_rwtimeout,?_readRegister+1
 17400  0022C0  6BBA               	clrf	(?_readRegister+2)& (0+255),b
 17401  0022C2  0EC5               	movlw	low printNodeFirmwareVersion@value
 17402  0022C4  6FBB               	movwf	(?_readRegister+3)& (0+255),b
 17403  0022C6  51C1               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 17404  0022C8  ECAC  F011         	call	_readRegister
 17405  0022CC  0900               	iorlw	0
 17406  0022CE  E019               	bz	l16748
 17407                           
 17408                           ;main.c: 3017: itoa(buf, value, 16);
 17409  0022D0  0100               	movlb	0	; () banked
 17410  0022D2  0E00               	movlw	high printNodeFirmwareVersion@buf
 17411  0022D4  6F71               	movwf	(?_itoa+1)& (0+255),b
 17412  0022D6  0EC2               	movlw	low printNodeFirmwareVersion@buf
 17413  0022D8  6F70               	movwf	?_itoa& (0+255),b
 17414  0022DA  C0C5  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 17415  0022DE  6B73               	clrf	(?_itoa+3)& (0+255),b
 17416  0022E0  6B75               	clrf	(?_itoa+5)& (0+255),b
 17417  0022E2  0E10               	movlw	16
 17418  0022E4  6F74               	movwf	(?_itoa+4)& (0+255),b
 17419  0022E6  ECCC  F008         	call	_itoa	;wreg free
 17420                           
 17421                           ; BSR set to: 0
 17422                           ;main.c: 3018: strcat(wrkbuf, buf);
 17423  0022EA  0E01               	movlw	high _wrkbuf
 17424  0022EC  0100               	movlb	0	; () banked
 17425  0022EE  6F61               	movwf	(?_strcat+1)& (0+255),b
 17426  0022F0  0E7D               	movlw	low _wrkbuf
 17427  0022F2  6F60               	movwf	?_strcat& (0+255),b
 17428  0022F4  0E00               	movlw	high printNodeFirmwareVersion@buf
 17429  0022F6  6F63               	movwf	(?_strcat+3)& (0+255),b
 17430  0022F8  0EC2               	movlw	low printNodeFirmwareVersion@buf
 17431  0022FA  6F62               	movwf	(?_strcat+2)& (0+255),b
 17432  0022FC  ECE8  F00A         	call	_strcat	;wreg free
 17433                           
 17434                           ;main.c: 3019: }
 17435  002300  D00B               	goto	l16750
 17436  002302                     l16748:
 17437                           
 17438                           ;main.c: 3020: else {
 17439                           ;main.c: 3021: strcat(wrkbuf, "?");
 17440  002302  0E01               	movlw	high _wrkbuf
 17441  002304  0100               	movlb	0	; () banked
 17442  002306  6F61               	movwf	(?_strcat+1)& (0+255),b
 17443  002308  0E7D               	movlw	low _wrkbuf
 17444  00230A  6F60               	movwf	?_strcat& (0+255),b
 17445  00230C  0E7C               	movlw	high STR_160
 17446  00230E  6F63               	movwf	(?_strcat+3)& (0+255),b
 17447  002310  0EFC               	movlw	low STR_160
 17448  002312  6F62               	movwf	(?_strcat+2)& (0+255),b
 17449  002314  ECE8  F00A         	call	_strcat	;wreg free
 17450  002318                     l16750:
 17451                           
 17452                           ;main.c: 3022: }
 17453                           ;main.c: 3024: if (i < 2) {
 17454  002318  0E02               	movlw	2
 17455  00231A  0100               	movlb	0	; () banked
 17456  00231C  61C6               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 17457  00231E  D00A               	goto	l16754
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;main.c: 3025: strcat(wrkbuf, ".");
 17461  002320  0E01               	movlw	high _wrkbuf
 17462  002322  6F61               	movwf	(?_strcat+1)& (0+255),b
 17463  002324  0E7D               	movlw	low _wrkbuf
 17464  002326  6F60               	movwf	?_strcat& (0+255),b
 17465  002328  0E7C               	movlw	high STR_285
 17466  00232A  6F63               	movwf	(?_strcat+3)& (0+255),b
 17467  00232C  0EF6               	movlw	low STR_285
 17468  00232E  6F62               	movwf	(?_strcat+2)& (0+255),b
 17469  002330  ECE8  F00A         	call	_strcat	;wreg free
 17470  002334                     l16754:
 17471  002334  0100               	movlb	0	; () banked
 17472  002336  2BC6               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 17473                           
 17474                           ; BSR set to: 0
 17475  002338  0E02               	movlw	2
 17476  00233A  65C6               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 17477  00233C  D7BC               	goto	l16742
 17478                           
 17479                           ; BSR set to: 0
 17480                           ;main.c: 3026: }
 17481                           ;main.c: 3028: }
 17482                           ;main.c: 3030: putsUSART(wrkbuf);
 17483  00233E  0E01               	movlw	high _wrkbuf
 17484  002340  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17485  002342  0E7D               	movlw	low _wrkbuf
 17486  002344  6F61               	movwf	?_putsUSART& (0+255),b
 17487  002346  ECBC  F00A         	call	_putsUSART	;wreg free
 17488                           
 17489                           ;main.c: 3031: putsUSART((char *) "\r\n");
 17490  00234A  0E70               	movlw	high (STR_228+50)
 17491  00234C  0100               	movlb	0	; () banked
 17492  00234E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17493  002350  0EC4               	movlw	low (STR_228+50)
 17494  002352  6F61               	movwf	?_putsUSART& (0+255),b
 17495  002354  EFBC  F00A         	goto	_putsUSART	;wreg free
 17496  002358                     __end_of_printNodeFirmwareVersion:
 17497                           	opt stack 0
 17498                           tblptru	equ	0xFF8
 17499                           tblptrh	equ	0xFF7
 17500                           tblptrl	equ	0xFF6
 17501                           tablat	equ	0xFF5
 17502                           prodh	equ	0xFF4
 17503                           prodl	equ	0xFF3
 17504                           intcon	equ	0xFF2
 17505                           indf0	equ	0xFEF
 17506                           postinc0	equ	0xFEE
 17507                           fsr0h	equ	0xFEA
 17508                           fsr0l	equ	0xFE9
 17509                           wreg	equ	0xFE8
 17510                           indf1	equ	0xFE7
 17511                           postinc1	equ	0xFE6
 17512                           postdec1	equ	0xFE5
 17513                           fsr1h	equ	0xFE2
 17514                           fsr1l	equ	0xFE1
 17515                           indf2	equ	0xFDF
 17516                           postinc2	equ	0xFDE
 17517                           postdec2	equ	0xFDD
 17518                           plusw2	equ	0xFDB
 17519                           fsr2h	equ	0xFDA
 17520                           fsr2l	equ	0xFD9
 17521                           status	equ	0xFD8
 17522                           
 17523 ;; *************** function _strcat *****************
 17524 ;; Defined at:
 17525 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 17526 ;; Parameters:    Size  Location     Type
 17527 ;;  to              2    0[BANK0 ] PTR unsigned char 
 17528 ;;		 -> wrkbuf(80), 
 17529 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 17530 ;;		 -> STR_285(2), STR_284(2), printNodeFirmwareVersion@buf(3), STR_279(2), 
 17531 ;;		 -> STR_278(3), STR_277(2), printGUID@buf(3), 
 17532 ;; Auto vars:     Size  Location     Type
 17533 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 17534 ;;		 -> wrkbuf(80), 
 17535 ;; Return value:  Size  Location     Type
 17536 ;;                  2    0[BANK0 ] PTR unsigned char 
 17537 ;; Registers used:
 17538 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17539 ;; Tracked objects:
 17540 ;;		On entry : F/0
 17541 ;;		On exit  : 0/0
 17542 ;;		Unchanged: 0/0
 17543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17544 ;;      Params:         0       4       0       0       0       0       0
 17545 ;;      Locals:         0       2       0       0       0       0       0
 17546 ;;      Temps:          0       0       0       0       0       0       0
 17547 ;;      Totals:         0       6       0       0       0       0       0
 17548 ;;Total ram usage:        6 bytes
 17549 ;; Hardware stack levels used:    1
 17550 ;; Hardware stack levels required when called:    3
 17551 ;; This function calls:
 17552 ;;		Nothing
 17553 ;; This function is called by:
 17554 ;;		_printGUID
 17555 ;;		_printNodeFirmwareVersion
 17556 ;; This function uses a non-reentrant model
 17557 ;;
 17558                           
 17559                           	psect	text31
 17560  0015D0                     __ptext31:
 17561                           	opt stack 0
 17562  0015D0                     _strcat:
 17563                           	opt stack 24
 17564                           
 17565                           ; BSR set to: 0
 17566                           
 17567                           ;incstack = 0
 17568                           ;incstack = 0
 17569  0015D0  C060  F064         	movff	strcat@to,strcat@cp
 17570  0015D4  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17571  0015D8  D002               	goto	l17418
 17572  0015DA                     l17416:
 17573                           
 17574                           ; BSR set to: 0
 17575  0015DA  4B64               	infsnz	strcat@cp& (0+255),f,b
 17576  0015DC  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17577  0015DE                     l17418:
 17578                           
 17579                           ; BSR set to: 0
 17580  0015DE  C064  FFD9         	movff	strcat@cp,fsr2l
 17581  0015E2  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17582  0015E6  50DF               	movf	indf2,w,c
 17583  0015E8  E006               	bz	l17422
 17584  0015EA  D7F7               	goto	l17416
 17585  0015EC                     l17420:
 17586  0015EC  0100               	movlb	0	; () banked
 17587  0015EE  4B64               	infsnz	strcat@cp& (0+255),f,b
 17588  0015F0  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17589  0015F2  4B62               	infsnz	strcat@from& (0+255),f,b
 17590  0015F4  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17591  0015F6                     l17422:
 17592                           
 17593                           ; BSR set to: 0
 17594  0015F6  C062  FFF6         	movff	strcat@from,tblptrl
 17595  0015FA  C063  FFF7         	movff	strcat@from+1,tblptrh
 17596  0015FE  6AF8               	clrf	tblptru,c
 17597  001600  C064  FFD9         	movff	strcat@cp,fsr2l
 17598  001604  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17599  001608  0E05               	movlw	(high __ramtop+-1)
 17600  00160A  64F7               	cpfsgt	tblptrh,c
 17601  00160C  D003               	bra	u23327
 17602  00160E  0008               	tblrd		*
 17603  001610  50F5               	movf	tablat,w,c
 17604  001612  D005               	bra	u23320
 17605  001614                     u23327:
 17606  001614  CFF6 FFE9          	movff	tblptrl,fsr0l
 17607  001618  CFF7 FFEA          	movff	tblptrh,fsr0h
 17608  00161C  50EF               	movf	indf0,w,c
 17609  00161E                     u23320:
 17610  00161E  6EDF               	movwf	indf2,c
 17611  001620  50DF               	movf	indf2,w,c
 17612  001622  B4D8               	btfsc	status,2,c
 17613  001624  0012               	return	
 17614  001626  D7E2               	goto	l17420
 17615  001628                     __end_of_strcat:
 17616                           	opt stack 0
 17617                           tblptru	equ	0xFF8
 17618                           tblptrh	equ	0xFF7
 17619                           tblptrl	equ	0xFF6
 17620                           tablat	equ	0xFF5
 17621                           prodh	equ	0xFF4
 17622                           prodl	equ	0xFF3
 17623                           intcon	equ	0xFF2
 17624                           indf0	equ	0xFEF
 17625                           postinc0	equ	0xFEE
 17626                           fsr0h	equ	0xFEA
 17627                           fsr0l	equ	0xFE9
 17628                           wreg	equ	0xFE8
 17629                           indf1	equ	0xFE7
 17630                           postinc1	equ	0xFE6
 17631                           postdec1	equ	0xFE5
 17632                           fsr1h	equ	0xFE2
 17633                           fsr1l	equ	0xFE1
 17634                           indf2	equ	0xFDF
 17635                           postinc2	equ	0xFDE
 17636                           postdec2	equ	0xFDD
 17637                           plusw2	equ	0xFDB
 17638                           fsr2h	equ	0xFDA
 17639                           fsr2l	equ	0xFD9
 17640                           status	equ	0xFD8
 17641                           
 17642 ;; *************** function _readRegister *****************
 17643 ;; Defined at:
 17644 ;;		line 2493 in file "main.c"
 17645 ;; Parameters:    Size  Location     Type
 17646 ;;  nodeid          1    wreg     unsigned char 
 17647 ;;  reg             1   88[BANK0 ] unsigned char 
 17648 ;;  timeout         2   89[BANK0 ] unsigned short 
 17649 ;;  value           1   91[BANK0 ] PTR unsigned char 
 17650 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17651 ;; Auto vars:     Size  Location     Type
 17652 ;;  nodeid          1   96[BANK0 ] unsigned char 
 17653 ;; Return value:  Size  Location     Type
 17654 ;;                  1    wreg      enum E15660
 17655 ;; Registers used:
 17656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17657 ;; Tracked objects:
 17658 ;;		On entry : F/0
 17659 ;;		On exit  : E/0
 17660 ;;		Unchanged: 0/0
 17661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17662 ;;      Params:         0       4       0       0       0       0       0
 17663 ;;      Locals:         0       1       0       0       0       0       0
 17664 ;;      Temps:          0       4       0       0       0       0       0
 17665 ;;      Totals:         0       9       0       0       0       0       0
 17666 ;;Total ram usage:        9 bytes
 17667 ;; Hardware stack levels used:    1
 17668 ;; Hardware stack levels required when called:    7
 17669 ;; This function calls:
 17670 ;;		_checkCANBusState
 17671 ;;		_sendVSCPFrame
 17672 ;;		_getVSCPFrame
 17673 ;; This function is called by:
 17674 ;;		_findNodes
 17675 ;;		_printGUID
 17676 ;;		_printMDF
 17677 ;;		_printNodeFirmwareVersion
 17678 ;; This function uses a non-reentrant model
 17679 ;;
 17680                           
 17681                           	psect	text32
 17682  002358                     __ptext32:
 17683                           	opt stack 0
 17684  002358                     _readRegister:
 17685                           	opt stack 20
 17686                           
 17687                           ;incstack = 0
 17688                           ;incstack = 0
 17689                           ;readRegister@nodeid stored from wreg
 17690  002358  CFE8 F0C0          	movff	wreg,readRegister@nodeid
 17691                           
 17692                           ; BSR set to: 0
 17693                           ;main.c: 2494: vscpData[ 0 ] = nodeid;
 17694  00235C  C0C0  F1E5         	movff	readRegister@nodeid,_vscpData
 17695                           
 17696                           ; BSR set to: 0
 17697                           ;main.c: 2495: vscpData[ 1 ] = reg;
 17698  002360  C0B8  F1E6         	movff	readRegister@reg,_vscpData+1
 17699                           
 17700                           ; BSR set to: 0
 17701                           ;main.c: 2497: if (sendVSCPFrame(0,
 17702                           ;main.c: 2498: 9,
 17703                           ;main.c: 2499: 0,
 17704                           ;main.c: 2500: 0,
 17705                           ;main.c: 2501: 2,
 17706                           ;main.c: 2502: vscpData)) {
 17707  002364  6B99               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17708  002366  6B98               	clrf	?_sendVSCPFrame& (0+255),b
 17709  002368  0E09               	movlw	9
 17710  00236A  6F9A               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17711  00236C  6B9B               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17712  00236E  6B9C               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17713  002370  0E02               	movlw	2
 17714  002372  6F9D               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17715  002374  0E01               	movlw	high _vscpData
 17716  002376  0100               	movlb	0	; () banked
 17717  002378  6F9F               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17718  00237A  0EE5               	movlw	low _vscpData
 17719  00237C  6F9E               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17720  00237E  EC34  F010         	call	_sendVSCPFrame	;wreg free
 17721  002382  0900               	iorlw	0
 17722  002384  E04B               	bz	l17410
 17723                           
 17724                           ;main.c: 2504: timekeeper = 0;
 17725  002386  0101               	movlb	1	; () banked
 17726  002388  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 17727  00238A  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17728  00238C  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17729  00238E  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17730                           
 17731                           ;main.c: 2505: while (timekeeper < timeout) {
 17732  002390  D02E               	goto	l17408
 17733  002392                     l1152:
 17734                           
 17735                           ; BSR set to: 1
 17736  002392  0004               	clrwdt		;# 
 17737                           
 17738                           ;main.c: 2508: checkCANBusState();
 17739  002394  EC35  F008         	call	_checkCANBusState	;wreg free
 17740                           
 17741                           ;main.c: 2510: if (getVSCPFrame(&vscpClass,
 17742                           ;main.c: 2511: &vscpType,
 17743                           ;main.c: 2512: &vscpNodeId,
 17744                           ;main.c: 2513: &vscpPriority,
 17745                           ;main.c: 2514: &vscpSize,
 17746                           ;main.c: 2515: vscpData)) {
 17747  002398  0E3F               	movlw	low _vscpType
 17748  00239A  0100               	movlb	0	; () banked
 17749  00239C  6F73               	movwf	?_getVSCPFrame& (0+255),b
 17750  00239E  0E3C               	movlw	low _vscpNodeId
 17751  0023A0  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17752  0023A2  0E3D               	movlw	low _vscpPriority
 17753  0023A4  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17754  0023A6  0E3E               	movlw	low _vscpSize
 17755  0023A8  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17756  0023AA  0E01               	movlw	high _vscpData
 17757  0023AC  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17758  0023AE  0EE5               	movlw	low _vscpData
 17759  0023B0  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17760  0023B2  0E38               	movlw	_vscpClass& (0+255)
 17761  0023B4  ECD0  F007         	call	_getVSCPFrame
 17762  0023B8  0900               	iorlw	0
 17763  0023BA  E019               	bz	l17408
 17764                           
 17765                           ; BSR set to: 0
 17766                           ;main.c: 2516: if ((nodeid == vscpNodeId) &&
 17767                           ;main.c: 2517: (0 == vscpClass) &&
 17768                           ;main.c: 2518: (10 == vscpType) &&
 17769                           ;main.c: 2519: (2 == vscpSize) &&
 17770                           ;main.c: 2520: (reg == vscpData[ 0 ])) {
 17771  0023BC  503C               	movf	_vscpNodeId,w,c
 17772  0023BE  63C0               	cpfseq	readRegister@nodeid& (0+255),b
 17773  0023C0  D016               	goto	l17408
 17774                           
 17775                           ; BSR set to: 0
 17776  0023C2  5039               	movf	_vscpClass+1,w,c
 17777  0023C4  1038               	iorwf	_vscpClass,w,c
 17778  0023C6  E113               	bnz	l17408
 17779                           
 17780                           ; BSR set to: 0
 17781  0023C8  503F               	movf	_vscpType,w,c
 17782  0023CA  0A0A               	xorlw	10
 17783  0023CC  E110               	bnz	l17408
 17784                           
 17785                           ; BSR set to: 0
 17786  0023CE  503E               	movf	_vscpSize,w,c
 17787  0023D0  0A02               	xorlw	2
 17788  0023D2  E10D               	bnz	l17408
 17789                           
 17790                           ; BSR set to: 0
 17791  0023D4  0101               	movlb	1	; () banked
 17792  0023D6  51E5               	movf	_vscpData& (0+255),w,b
 17793  0023D8  0100               	movlb	0	; () banked
 17794  0023DA  63B8               	cpfseq	readRegister@reg& (0+255),b
 17795  0023DC  D008               	goto	l17408
 17796                           
 17797                           ; BSR set to: 0
 17798                           ;main.c: 2521: *value = vscpData[ 1 ];
 17799  0023DE  51BB               	movf	readRegister@value& (0+255),w,b
 17800  0023E0  6ED9               	movwf	fsr2l,c
 17801  0023E2  6ADA               	clrf	fsr2h,c
 17802  0023E4  0101               	movlb	1	; () banked
 17803  0023E6  C1E6  FFDF         	movff	_vscpData+1,indf2
 17804                           
 17805                           ; BSR set to: 1
 17806                           ;main.c: 2522: return 1;
 17807  0023EA  0E01               	movlw	1
 17808  0023EC  D018               	goto	l1155
 17809  0023EE                     l17408:
 17810  0023EE  0100               	movlb	0	; () banked
 17811  0023F0  51B9               	movf	readRegister@timeout& (0+255),w,b
 17812  0023F2  6FBC               	movwf	??_readRegister& (0+255),b
 17813  0023F4  51BA               	movf	(readRegister@timeout+1)& (0+255),w,b
 17814  0023F6  6FBD               	movwf	(??_readRegister+1)& (0+255),b
 17815  0023F8  6BBE               	clrf	(??_readRegister+2)& (0+255),b
 17816  0023FA  6BBF               	clrf	(??_readRegister+3)& (0+255),b
 17817  0023FC  51BC               	movf	??_readRegister& (0+255),w,b
 17818  0023FE  0101               	movlb	1	; () banked
 17819  002400  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 17820  002402  0100               	movlb	0	; () banked
 17821  002404  51BD               	movf	(??_readRegister+1)& (0+255),w,b
 17822  002406  0101               	movlb	1	; () banked
 17823  002408  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17824  00240A  0100               	movlb	0	; () banked
 17825  00240C  51BE               	movf	(??_readRegister+2)& (0+255),w,b
 17826  00240E  0101               	movlb	1	; () banked
 17827  002410  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17828  002412  0100               	movlb	0	; () banked
 17829  002414  51BF               	movf	(??_readRegister+3)& (0+255),w,b
 17830  002416  0101               	movlb	1	; () banked
 17831  002418  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17832  00241A  E3BB               	bnc	l1152
 17833  00241C                     l17410:
 17834                           
 17835                           ;main.c: 2523: }
 17836                           ;main.c: 2524: }
 17837                           ;main.c: 2525: }
 17838                           ;main.c: 2526: }
 17839                           ;main.c: 2528: return 0;
 17840  00241C  0E00               	movlw	0
 17841  00241E                     l1155:
 17842  00241E  0012               	return	
 17843  002420                     __end_of_readRegister:
 17844                           	opt stack 0
 17845                           tblptru	equ	0xFF8
 17846                           tblptrh	equ	0xFF7
 17847                           tblptrl	equ	0xFF6
 17848                           tablat	equ	0xFF5
 17849                           prodh	equ	0xFF4
 17850                           prodl	equ	0xFF3
 17851                           intcon	equ	0xFF2
 17852                           indf0	equ	0xFEF
 17853                           postinc0	equ	0xFEE
 17854                           fsr0h	equ	0xFEA
 17855                           fsr0l	equ	0xFE9
 17856                           wreg	equ	0xFE8
 17857                           indf1	equ	0xFE7
 17858                           postinc1	equ	0xFE6
 17859                           postdec1	equ	0xFE5
 17860                           fsr1h	equ	0xFE2
 17861                           fsr1l	equ	0xFE1
 17862                           indf2	equ	0xFDF
 17863                           postinc2	equ	0xFDE
 17864                           postdec2	equ	0xFDD
 17865                           plusw2	equ	0xFDB
 17866                           fsr2h	equ	0xFDA
 17867                           fsr2l	equ	0xFD9
 17868                           status	equ	0xFD8
 17869                           
 17870 ;; *************** function _sendVSCPFrame *****************
 17871 ;; Defined at:
 17872 ;;		line 3228 in file "main.c"
 17873 ;; Parameters:    Size  Location     Type
 17874 ;;  vscpclass       2   56[BANK0 ] unsigned short 
 17875 ;;  vscptype        1   58[BANK0 ] unsigned char 
 17876 ;;  nodeid          1   59[BANK0 ] unsigned char 
 17877 ;;  priority        1   60[BANK0 ] unsigned char 
 17878 ;;  size            1   61[BANK0 ] unsigned char 
 17879 ;;  pData           2   62[BANK0 ] PTR unsigned char 
 17880 ;;		 -> vscpData(8), 
 17881 ;; Auto vars:     Size  Location     Type
 17882 ;;  id              4   84[BANK0 ] unsigned long 
 17883 ;; Return value:  Size  Location     Type
 17884 ;;                  1    wreg      unsigned char 
 17885 ;; Registers used:
 17886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17887 ;; Tracked objects:
 17888 ;;		On entry : F/0
 17889 ;;		On exit  : E/0
 17890 ;;		Unchanged: 0/0
 17891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17892 ;;      Params:         0       8       0       0       0       0       0
 17893 ;;      Locals:         0       4       0       0       0       0       0
 17894 ;;      Temps:          0      20       0       0       0       0       0
 17895 ;;      Totals:         0      32       0       0       0       0       0
 17896 ;;Total ram usage:       32 bytes
 17897 ;; Hardware stack levels used:    1
 17898 ;; Hardware stack levels required when called:    6
 17899 ;; This function calls:
 17900 ;;		_sendCANFrame
 17901 ;; This function is called by:
 17902 ;;		_doModeVerbose
 17903 ;;		_readRegister
 17904 ;;		_readRegisterExtended
 17905 ;;		_writeRegisterExtended
 17906 ;; This function uses a non-reentrant model
 17907 ;;
 17908                           
 17909                           	psect	text33
 17910  002068                     __ptext33:
 17911                           	opt stack 0
 17912  002068                     _sendVSCPFrame:
 17913                           	opt stack 20
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;main.c: 3229: uint32_t id = ((uint32_t) priority << 26) |
 17917                           ;main.c: 3230: ((uint32_t) vscpclass << 16) |
 17918                           ;main.c: 3231: ((uint32_t) vscptype << 8) |
 17919                           ;main.c: 3232: nodeid;
 17920                           
 17921                           ;incstack = 0
 17922                           ;incstack = 0
 17923  002068  C09A  F0A0         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17924  00206C  6BA1               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17925  00206E  6BA2               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17926  002070  6BA3               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17927  002072  C0A2  F0A3         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17928  002076  C0A1  F0A2         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17929  00207A  C0A0  F0A1         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17930  00207E  6BA0               	clrf	??_sendVSCPFrame& (0+255),b
 17931  002080  5198               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17932  002082  6FA4               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17933  002084  5199               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17934  002086  6FA5               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17935  002088  6BA6               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17936  00208A  6BA7               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17937  00208C  C0A5  F0A7         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17938  002090  C0A4  F0A6         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17939  002094  6BA5               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17940  002096  6BA4               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17941  002098  C09C  F0A8         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17942  00209C  6BA9               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17943  00209E  6BAA               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17944  0020A0  6BAB               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17945  0020A2  0E1A               	movlw	26
 17946  0020A4                     u21085:
 17947  0020A4  90D8               	bcf	status,0,c
 17948  0020A6  37A8               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17949  0020A8  37A9               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17950  0020AA  37AA               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17951  0020AC  37AB               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17952  0020AE  2EE8               	decfsz	wreg,f,c
 17953  0020B0  D7F9               	goto	u21085
 17954  0020B2  51A4               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17955  0020B4  11A8               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17956  0020B6  6FAC               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17957  0020B8  51A5               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17958  0020BA  11A9               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17959  0020BC  6FAD               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17960  0020BE  51A6               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17961  0020C0  11AA               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17962  0020C2  6FAE               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17963  0020C4  51A7               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17964  0020C6  11AB               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17965  0020C8  6FAF               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17966  0020CA  51A0               	movf	??_sendVSCPFrame& (0+255),w,b
 17967  0020CC  11AC               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17968  0020CE  6FB0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17969  0020D0  51A1               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17970  0020D2  11AD               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17971  0020D4  6FB1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17972  0020D6  51A2               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17973  0020D8  11AE               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17974  0020DA  6FB2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17975  0020DC  51A3               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17976  0020DE  11AF               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17977  0020E0  6FB3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17978  0020E2  519B               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17979  0020E4  11B0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17980  0020E6  6FB4               	movwf	sendVSCPFrame@id& (0+255),b
 17981  0020E8  51B1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17982  0020EA  6FB5               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17983  0020EC  51B2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17984  0020EE  6FB6               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17985  0020F0  51B3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17986  0020F2  6FB7               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17987                           
 17988                           ; BSR set to: 0
 17989                           ;main.c: 3234: if (!sendCANFrame(id, size, pData)) {
 17990  0020F4  C0B4  F091         	movff	sendVSCPFrame@id,?_sendCANFrame
 17991  0020F8  C0B5  F092         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17992  0020FC  C0B6  F093         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17993  002100  C0B7  F094         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17994  002104  C09D  F095         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17995  002108  C09E  F096         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17996  00210C  C09F  F097         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17997  002110  EC04  F009         	call	_sendCANFrame	;wreg free
 17998  002114  0900               	iorlw	0
 17999                           
 18000                           ;main.c: 3236: return 0;
 18001  002116  0E00               	movlw	0
 18002  002118  A4D8               	btfss	status,2,c
 18003                           
 18004                           ;main.c: 3237: }
 18005                           ;main.c: 3239: return 1;
 18006  00211A  0E01               	movlw	1
 18007  00211C  0012               	return	
 18008  00211E                     __end_of_sendVSCPFrame:
 18009                           	opt stack 0
 18010                           tblptru	equ	0xFF8
 18011                           tblptrh	equ	0xFF7
 18012                           tblptrl	equ	0xFF6
 18013                           tablat	equ	0xFF5
 18014                           prodh	equ	0xFF4
 18015                           prodl	equ	0xFF3
 18016                           intcon	equ	0xFF2
 18017                           indf0	equ	0xFEF
 18018                           postinc0	equ	0xFEE
 18019                           fsr0h	equ	0xFEA
 18020                           fsr0l	equ	0xFE9
 18021                           wreg	equ	0xFE8
 18022                           indf1	equ	0xFE7
 18023                           postinc1	equ	0xFE6
 18024                           postdec1	equ	0xFE5
 18025                           fsr1h	equ	0xFE2
 18026                           fsr1l	equ	0xFE1
 18027                           indf2	equ	0xFDF
 18028                           postinc2	equ	0xFDE
 18029                           postdec2	equ	0xFDD
 18030                           plusw2	equ	0xFDB
 18031                           fsr2h	equ	0xFDA
 18032                           fsr2l	equ	0xFD9
 18033                           status	equ	0xFD8
 18034                           
 18035 ;; *************** function _sendCANFrame *****************
 18036 ;; Defined at:
 18037 ;;		line 3275 in file "main.c"
 18038 ;; Parameters:    Size  Location     Type
 18039 ;;  id              4   49[BANK0 ] unsigned long 
 18040 ;;  dlc             1   53[BANK0 ] unsigned char 
 18041 ;;  pdata           2   54[BANK0 ] PTR unsigned char 
 18042 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 18043 ;; Auto vars:     Size  Location     Type
 18044 ;;		None
 18045 ;; Return value:  Size  Location     Type
 18046 ;;                  1    wreg      unsigned char 
 18047 ;; Registers used:
 18048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18049 ;; Tracked objects:
 18050 ;;		On entry : F/0
 18051 ;;		On exit  : E/0
 18052 ;;		Unchanged: 0/0
 18053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18054 ;;      Params:         0       7       0       0       0       0       0
 18055 ;;      Locals:         0       0       0       0       0       0       0
 18056 ;;      Temps:          0       0       0       0       0       0       0
 18057 ;;      Totals:         0       7       0       0       0       0       0
 18058 ;;Total ram usage:        7 bytes
 18059 ;; Hardware stack levels used:    1
 18060 ;; Hardware stack levels required when called:    5
 18061 ;; This function calls:
 18062 ;;		_ECANSendMessage
 18063 ;; This function is called by:
 18064 ;;		_doModeSLCAN
 18065 ;;		_receiveVSCPModeCanalMsg
 18066 ;;		_sendVSCPFrame
 18067 ;; This function uses a non-reentrant model
 18068 ;;
 18069                           
 18070                           	psect	text34
 18071  001208                     __ptext34:
 18072                           	opt stack 0
 18073  001208                     _sendCANFrame:
 18074                           	opt stack 23
 18075                           
 18076                           ; BSR set to: 0
 18077                           ;main.c: 3276: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 18078                           
 18079                           ;incstack = 0
 18080                           ;incstack = 0
 18081  001208  C091  F06C         	movff	sendCANFrame@id,?_ECANSendMessage
 18082  00120C  C092  F06D         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 18083  001210  C093  F06E         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 18084  001214  C094  F06F         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 18085  001218  C096  F070         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 18086  00121C  C097  F071         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 18087  001220  C095  F072         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 18088  001224  0E20               	movlw	32
 18089  001226  6F73               	movwf	(?_ECANSendMessage+7)& (0+255),b
 18090  001228  EC1B  F019         	call	_ECANSendMessage	;wreg free
 18091  00122C  0900               	iorlw	0
 18092  00122E  E107               	bnz	l17252
 18093                           
 18094                           ; BSR set to: 0
 18095                           ;main.c: 3278: can_transmitOverruns++;
 18096  001230  0101               	movlb	1	; () banked
 18097  001232  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 18098  001234  0E00               	movlw	0
 18099  001236  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 18100  001238  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 18101  00123A  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 18102                           
 18103                           ; BSR set to: 1
 18104                           ;main.c: 3279: return 0;
 18105  00123C  D001               	goto	l1353
 18106  00123E                     l17252:
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;main.c: 3280: }
 18110                           ;main.c: 3282: return 1;
 18111  00123E  0E01               	movlw	1
 18112  001240                     l1353:
 18113  001240  0012               	return	
 18114  001242                     __end_of_sendCANFrame:
 18115                           	opt stack 0
 18116                           tblptru	equ	0xFF8
 18117                           tblptrh	equ	0xFF7
 18118                           tblptrl	equ	0xFF6
 18119                           tablat	equ	0xFF5
 18120                           prodh	equ	0xFF4
 18121                           prodl	equ	0xFF3
 18122                           intcon	equ	0xFF2
 18123                           indf0	equ	0xFEF
 18124                           postinc0	equ	0xFEE
 18125                           fsr0h	equ	0xFEA
 18126                           fsr0l	equ	0xFE9
 18127                           wreg	equ	0xFE8
 18128                           indf1	equ	0xFE7
 18129                           postinc1	equ	0xFE6
 18130                           postdec1	equ	0xFE5
 18131                           fsr1h	equ	0xFE2
 18132                           fsr1l	equ	0xFE1
 18133                           indf2	equ	0xFDF
 18134                           postinc2	equ	0xFDE
 18135                           postdec2	equ	0xFDD
 18136                           plusw2	equ	0xFDB
 18137                           fsr2h	equ	0xFDA
 18138                           fsr2l	equ	0xFD9
 18139                           status	equ	0xFD8
 18140                           
 18141 ;; *************** function _ECANSendMessage *****************
 18142 ;; Defined at:
 18143 ;;		line 617 in file "ECAN.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;  id              4   12[BANK0 ] unsigned long 
 18146 ;;  data            2   16[BANK0 ] PTR unsigned char 
 18147 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 18148 ;;  dataLen         1   18[BANK0 ] unsigned char 
 18149 ;;  msgFlags        1   19[BANK0 ] enum E16315
 18150 ;; Auto vars:     Size  Location     Type
 18151 ;;  pb             18   21[BANK0 ] PTR unsigned char [9]
 18152 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18153 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18154 ;;		 -> B0CON(1), 
 18155 ;;  ptr             2   47[BANK0 ] PTR unsigned char 
 18156 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18157 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18158 ;;		 -> B0CON(1), 
 18159 ;;  tempPtr         2   43[BANK0 ] PTR unsigned char 
 18160 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18161 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18162 ;;		 -> B0CON(1), 
 18163 ;;  i               1   46[BANK0 ] unsigned char 
 18164 ;;  temp            1   45[BANK0 ] unsigned char 
 18165 ;;  tempBSEL0       1   42[BANK0 ] struct .
 18166 ;;  j               1   41[BANK0 ] unsigned char 
 18167 ;;  buffers         1   40[BANK0 ] unsigned char 
 18168 ;;  mode            1   39[BANK0 ] unsigned char 
 18169 ;; Return value:  Size  Location     Type
 18170 ;;                  1    wreg      enum E15660
 18171 ;; Registers used:
 18172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18173 ;; Tracked objects:
 18174 ;;		On entry : F/0
 18175 ;;		On exit  : F/0
 18176 ;;		Unchanged: 0/0
 18177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18178 ;;      Params:         0       8       0       0       0       0       0
 18179 ;;      Locals:         0      28       0       0       0       0       0
 18180 ;;      Temps:          0       1       0       0       0       0       0
 18181 ;;      Totals:         0      37       0       0       0       0       0
 18182 ;;Total ram usage:       37 bytes
 18183 ;; Hardware stack levels used:    1
 18184 ;; Hardware stack levels required when called:    4
 18185 ;; This function calls:
 18186 ;;		__CANIDToRegs
 18187 ;; This function is called by:
 18188 ;;		_sendCANFrame
 18189 ;; This function uses a non-reentrant model
 18190 ;;
 18191                           
 18192                           	psect	text35
 18193  003236                     __ptext35:
 18194                           	opt stack 0
 18195  003236                     _ECANSendMessage:
 18196                           	opt stack 23
 18197                           
 18198                           ; BSR set to: 0
 18199                           ;ECAN.c: 619: BYTE mode;
 18200                           ;ECAN.c: 620: BYTE buffers;
 18201                           ;ECAN.c: 628: BYTE i,j;
 18202                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 18203                           ;ECAN.c: 630: BYTE* pb[9];
 18204                           ;ECAN.c: 631: BYTE temp;
 18205                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 18206                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 18207                           
 18208                           ;incstack = 0
 18209                           ;incstack = 0
 18210  003236  0E0F               	movlw	15	;volatile
 18211  003238  0100               	movlb	0	; () banked
 18212  00323A  6F76               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 18213  00323C  0E40               	movlw	64	;volatile
 18214  00323E  6F75               	movwf	ECANSendMessage@pb& (0+255),b
 18215                           
 18216                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 18217  003240  0E0F               	movlw	15	;volatile
 18218  003242  6F78               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 18219  003244  0E30               	movlw	48	;volatile
 18220  003246  6F77               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 18221                           
 18222                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 18223  003248  0E0F               	movlw	15	;volatile
 18224  00324A  6F7A               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 18225  00324C  0E20               	movlw	32	;volatile
 18226  00324E  6F79               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 18227                           
 18228                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 18229  003250  0E0E               	movlw	14	;volatile
 18230  003252  6F7C               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 18231  003254  0E20               	movlw	32	;volatile
 18232  003256  6F7B               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 18233                           
 18234                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 18235  003258  0E0E               	movlw	14	;volatile
 18236  00325A  6F7E               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 18237  00325C  0E30               	movlw	48	;volatile
 18238  00325E  6F7D               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 18239                           
 18240                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 18241  003260  0E0E               	movlw	14	;volatile
 18242  003262  6F80               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 18243  003264  0E40               	movlw	64	;volatile
 18244  003266  6F7F               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 18245                           
 18246                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 18247  003268  0E0E               	movlw	14	;volatile
 18248  00326A  6F82               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 18249  00326C  0E50               	movlw	80	;volatile
 18250  00326E  6F81               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 18251                           
 18252                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 18253  003270  0E0E               	movlw	14	;volatile
 18254  003272  6F84               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 18255  003274  0E60               	movlw	96	;volatile
 18256  003276  6F83               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 18257                           
 18258                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 18259  003278  0E0E               	movlw	14	;volatile
 18260  00327A  6F86               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 18261  00327C  0E70               	movlw	112	;volatile
 18262  00327E  6F85               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 18263                           
 18264                           ; BSR set to: 0
 18265                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 18266  003280  5077               	movf	3959,w,c	;volatile
 18267  003282  0BC0               	andlw	192
 18268  003284  6F87               	movwf	ECANSendMessage@mode& (0+255),b
 18269                           
 18270                           ; BSR set to: 0
 18271                           ;ECAN.c: 660: if ( mode == 0x00 )
 18272  003286  6787               	tstfsz	ECANSendMessage@mode& (0+255),b
 18273  003288  D002               	goto	l13842
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;ECAN.c: 661: buffers = 2;
 18277  00328A  0E02               	movlw	2
 18278  00328C  D001               	goto	L18
 18279  00328E                     l13842:
 18280                           
 18281                           ; BSR set to: 0
 18282                           ;ECAN.c: 662: else
 18283                           ;ECAN.c: 663: buffers = 8;
 18284  00328E  0E08               	movlw	8
 18285  003290                     L18:
 18286  003290  6F88               	movwf	ECANSendMessage@buffers& (0+255),b
 18287                           
 18288                           ; BSR set to: 0
 18289                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 18290  003292  010D               	movlb	13	; () banked
 18291  003294  90D8               	bcf	status,0,c
 18292  003296  31F8               	rrcf	248,w,b	;volatile
 18293  003298  0100               	movlb	0	; () banked
 18294  00329A  6F8A               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 18295                           
 18296                           ; BSR set to: 0
 18297                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 18298  00329C  6B8E               	clrf	ECANSendMessage@i& (0+255),b
 18299  00329E  D07D               	goto	l13902
 18300  0032A0                     l13848:
 18301                           
 18302                           ; BSR set to: 0
 18303                           ;ECAN.c: 688: {
 18304                           ;ECAN.c: 693: ptr = pb[i];
 18305  0032A0  518E               	movf	ECANSendMessage@i& (0+255),w,b
 18306  0032A2  0D02               	mullw	2
 18307  0032A4  50F3               	movf	prodl,w,c
 18308  0032A6  0F75               	addlw	low ECANSendMessage@pb
 18309  0032A8  6ED9               	movwf	fsr2l,c
 18310  0032AA  6ADA               	clrf	fsr2h,c
 18311  0032AC  CFDE F08F          	movff	postinc2,ECANSendMessage@ptr
 18312  0032B0  CFDD F090          	movff	postdec2,ECANSendMessage@ptr+1
 18313                           
 18314                           ; BSR set to: 0
 18315                           ;ECAN.c: 694: tempPtr = ptr;
 18316  0032B4  C08F  F08B         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 18317  0032B8  C090  F08C         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 18318                           
 18319                           ; BSR set to: 0
 18320                           ;ECAN.c: 702: if ( i > 2 )
 18321  0032BC  0E02               	movlw	2
 18322  0032BE  658E               	cpfsgt	ECANSendMessage@i& (0+255),b
 18323  0032C0  D004               	goto	l13860
 18324                           
 18325                           ; BSR set to: 0
 18326                           ;ECAN.c: 703: {
 18327                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 18328  0032C2  90D8               	bcf	status,0,c
 18329  0032C4  338A               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 18330                           
 18331                           ; BSR set to: 0
 18332                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 18333  0032C6  A18A               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 18334  0032C8  D067               	goto	l13900
 18335  0032CA                     l13860:
 18336                           
 18337                           ; BSR set to: 0
 18338                           ;ECAN.c: 714: }
 18339                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 18340  0032CA  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18341  0032CE  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18342  0032D2  50DF               	movf	indf2,w,c
 18343  0032D4  6F74               	movwf	??_ECANSendMessage& (0+255),b
 18344  0032D6  B774               	btfsc	??_ECANSendMessage& (0+255),3,b
 18345  0032D8  D05F               	goto	l13900
 18346                           
 18347                           ; BSR set to: 0
 18348                           ;ECAN.c: 721: {
 18349                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 18350  0032DA  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18351  0032DE  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18352  0032E2  0EFC               	movlw	252
 18353  0032E4  16DF               	andwf	indf2,f,c
 18354                           
 18355                           ; BSR set to: 0
 18356                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 18357  0032E6  C073  F074         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 18358  0032EA  0E03               	movlw	3
 18359  0032EC  1774               	andwf	??_ECANSendMessage& (0+255),f,b
 18360  0032EE  C08F  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18361  0032F2  C090  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18362  0032F6  5174               	movf	??_ECANSendMessage& (0+255),w,b
 18363  0032F8  12DF               	iorwf	indf2,f,c
 18364                           
 18365                           ; BSR set to: 0
 18366                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 18367  0032FA  AD73               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 18368  0032FC  D004               	goto	l1521
 18369                           
 18370                           ; BSR set to: 0
 18371                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 18372  0032FE  5172               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18373  003300  0940               	iorlw	64
 18374  003302  6F8D               	movwf	ECANSendMessage@temp& (0+255),b
 18375  003304  D002               	goto	l13870
 18376  003306                     l1521:
 18377                           
 18378                           ; BSR set to: 0
 18379                           ;ECAN.c: 729: else
 18380                           ;ECAN.c: 730: temp = dataLen;
 18381  003306  C072  F08D         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 18382  00330A                     l13870:
 18383                           
 18384                           ; BSR set to: 0
 18385                           ;ECAN.c: 732: *(ptr+5) = temp;
 18386  00330A  EE20 F005          	lfsr	2,5
 18387  00330E  518F               	movf	ECANSendMessage@ptr& (0+255),w,b
 18388  003310  26D9               	addwf	fsr2l,f,c
 18389  003312  5190               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 18390  003314  22DA               	addwfc	fsr2h,f,c
 18391  003316  C08D  FFDF         	movff	ECANSendMessage@temp,indf2
 18392                           
 18393                           ; BSR set to: 0
 18394                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 18395  00331A  AB73               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 18396  00331C  D003               	goto	l1523
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;ECAN.c: 736: temp = 1;
 18400  00331E  0E01               	movlw	1
 18401  003320  6F8D               	movwf	ECANSendMessage@temp& (0+255),b
 18402  003322  D001               	goto	l13876
 18403  003324                     l1523:
 18404                           
 18405                           ; BSR set to: 0
 18406                           ;ECAN.c: 738: else
 18407                           ;ECAN.c: 739: temp = 0;
 18408  003324  6B8D               	clrf	ECANSendMessage@temp& (0+255),b
 18409  003326                     l13876:
 18410                           
 18411                           ; BSR set to: 0
 18412                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 18413  003326  298F               	incf	ECANSendMessage@ptr& (0+255),w,b
 18414  003328  6F62               	movwf	?__CANIDToRegs& (0+255),b
 18415  00332A  0E00               	movlw	0
 18416  00332C  2190               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 18417  00332E  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 18418  003330  C06C  F064         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 18419  003334  C06D  F065         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 18420  003338  C06E  F066         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 18421  00333C  C06F  F067         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 18422  003340  C08D  F068         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 18423  003344  EC2D  F016         	call	__CANIDToRegs	;wreg free
 18424                           
 18425                           ; BSR set to: 0
 18426                           ;ECAN.c: 745: ptr += 6;
 18427  003348  0E06               	movlw	6
 18428  00334A  278F               	addwf	ECANSendMessage@ptr& (0+255),f,b
 18429  00334C  0E00               	movlw	0
 18430  00334E  2390               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 18431                           
 18432                           ; BSR set to: 0
 18433                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 18434  003350  6B89               	clrf	ECANSendMessage@j& (0+255),b
 18435  003352  D00F               	goto	l13890
 18436  003354                     l13882:
 18437                           
 18438                           ; BSR set to: 0
 18439                           ;ECAN.c: 748: *ptr++ = *data++;
 18440  003354  C070  FFD9         	movff	ECANSendMessage@data,fsr2l
 18441  003358  C071  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 18442  00335C  C08F  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 18443  003360  C090  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 18444  003364  CFDF FFE7          	movff	indf2,indf1
 18445                           
 18446                           ; BSR set to: 0
 18447  003368  4B70               	infsnz	ECANSendMessage@data& (0+255),f,b
 18448  00336A  2B71               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 18449                           
 18450                           ; BSR set to: 0
 18451  00336C  4B8F               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 18452  00336E  2B90               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 18453                           
 18454                           ; BSR set to: 0
 18455  003370  2B89               	incf	ECANSendMessage@j& (0+255),f,b
 18456  003372                     l13890:
 18457                           
 18458                           ; BSR set to: 0
 18459  003372  5172               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18460  003374  5D89               	subwf	ECANSendMessage@j& (0+255),w,b
 18461  003376  E3EE               	bnc	l13882
 18462                           
 18463                           ; BSR set to: 0
 18464                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 18465  003378  C08B  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18466  00337C  C08C  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18467  003380  50DF               	movf	indf2,w,c
 18468  003382  6F74               	movwf	??_ECANSendMessage& (0+255),b
 18469  003384  B574               	btfsc	??_ECANSendMessage& (0+255),2,b
 18470  003386  D006               	goto	l13896
 18471                           
 18472                           ; BSR set to: 0
 18473                           ;ECAN.c: 753: *tempPtr |= 0x08;
 18474  003388  C08B  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18475  00338C  C08C  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18476  003390  0E00               	movlw	0
 18477  003392  86DB               	bsf	plusw2,3,c
 18478  003394                     l13896:
 18479                           
 18480                           ; BSR set to: 0
 18481                           ;ECAN.c: 755: return TRUE;
 18482  003394  0E01               	movlw	1
 18483  003396  D005               	goto	l1529
 18484  003398                     l13900:
 18485                           
 18486                           ; BSR set to: 0
 18487  003398  2B8E               	incf	ECANSendMessage@i& (0+255),f,b
 18488  00339A                     l13902:
 18489                           
 18490                           ; BSR set to: 0
 18491  00339A  5188               	movf	ECANSendMessage@buffers& (0+255),w,b
 18492  00339C  5D8E               	subwf	ECANSendMessage@i& (0+255),w,b
 18493  00339E  E380               	bnc	l13848
 18494                           
 18495                           ; BSR set to: 0
 18496                           ;ECAN.c: 756: }
 18497                           ;ECAN.c: 757: }
 18498                           ;ECAN.c: 760: return FALSE;
 18499  0033A0  0E00               	movlw	0
 18500  0033A2                     l1529:
 18501                           
 18502                           ; BSR set to: 0
 18503  0033A2  0012               	return	
 18504  0033A4                     __end_of_ECANSendMessage:
 18505                           	opt stack 0
 18506                           tblptru	equ	0xFF8
 18507                           tblptrh	equ	0xFF7
 18508                           tblptrl	equ	0xFF6
 18509                           tablat	equ	0xFF5
 18510                           prodh	equ	0xFF4
 18511                           prodl	equ	0xFF3
 18512                           intcon	equ	0xFF2
 18513                           indf0	equ	0xFEF
 18514                           postinc0	equ	0xFEE
 18515                           fsr0h	equ	0xFEA
 18516                           fsr0l	equ	0xFE9
 18517                           wreg	equ	0xFE8
 18518                           indf1	equ	0xFE7
 18519                           postinc1	equ	0xFE6
 18520                           postdec1	equ	0xFE5
 18521                           fsr1h	equ	0xFE2
 18522                           fsr1l	equ	0xFE1
 18523                           indf2	equ	0xFDF
 18524                           postinc2	equ	0xFDE
 18525                           postdec2	equ	0xFDD
 18526                           plusw2	equ	0xFDB
 18527                           fsr2h	equ	0xFDA
 18528                           fsr2l	equ	0xFD9
 18529                           status	equ	0xFD8
 18530                           
 18531 ;; *************** function _checkCANBusState *****************
 18532 ;; Defined at:
 18533 ;;		line 588 in file "main.c"
 18534 ;; Parameters:    Size  Location     Type
 18535 ;;		None
 18536 ;; Auto vars:     Size  Location     Type
 18537 ;;		None
 18538 ;; Return value:  Size  Location     Type
 18539 ;;		None               void
 18540 ;; Registers used:
 18541 ;;		wreg, status,2
 18542 ;; Tracked objects:
 18543 ;;		On entry : 0/0
 18544 ;;		On exit  : 0/0
 18545 ;;		Unchanged: 0/0
 18546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18547 ;;      Params:         0       0       0       0       0       0       0
 18548 ;;      Locals:         0       0       0       0       0       0       0
 18549 ;;      Temps:          0       0       0       0       0       0       0
 18550 ;;      Totals:         0       0       0       0       0       0       0
 18551 ;;Total ram usage:        0 bytes
 18552 ;; Hardware stack levels used:    1
 18553 ;; Hardware stack levels required when called:    3
 18554 ;; This function calls:
 18555 ;;		Nothing
 18556 ;; This function is called by:
 18557 ;;		_main
 18558 ;;		_readRegister
 18559 ;;		_readRegisterExtended
 18560 ;;		_writeRegisterExtended
 18561 ;; This function uses a non-reentrant model
 18562 ;;
 18563                           
 18564                           	psect	text36
 18565  00106A                     __ptext36:
 18566                           	opt stack 0
 18567  00106A                     _checkCANBusState:
 18568                           	opt stack 23
 18569                           
 18570                           ;main.c: 590: if ( COMSTATbits.TXBO ) {
 18571                           
 18572                           ; BSR set to: 0
 18573                           ;incstack = 0
 18574                           ;incstack = 0
 18575  00106A  AA74               	btfss	3956,5,c	;volatile
 18576  00106C  D002               	goto	l491
 18577                           
 18578                           ;main.c: 592: ledFunctionality = 6;
 18579  00106E  0E06               	movlw	6
 18580  001070  D009               	goto	L19
 18581  001072                     l491:
 18582                           
 18583                           ;main.c: 594: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
 18584  001072  B874               	btfsc	3956,4,c	;volatile
 18585  001074  D002               	goto	l14478
 18586  001076  A674               	btfss	3956,3,c	;volatile
 18587  001078  D002               	goto	l493
 18588  00107A                     l14478:
 18589                           
 18590                           ;main.c: 596: ledFunctionality = 5;
 18591  00107A  0E05               	movlw	5
 18592  00107C  D003               	goto	L19
 18593  00107E                     l493:
 18594                           
 18595                           ;main.c: 600: ledFunctionality = 4;
 18596  00107E  0E04               	movlw	4
 18597                           
 18598                           ;main.c: 598: else if ( COMSTATbits.EWARN ) {
 18599  001080  A074               	btfss	3956,0,c	;volatile
 18600                           
 18601                           ;main.c: 602: else {
 18602                           ;main.c: 604: ledFunctionality = 1;
 18603                           
 18604                           ;main.c: 601: }
 18605  001082  0E01               	movlw	1
 18606  001084                     L19:
 18607  001084  6E32               	movwf	_ledFunctionality,c	;volatile
 18608  001086  0012               	return	
 18609  001088                     __end_of_checkCANBusState:
 18610                           	opt stack 0
 18611                           tblptru	equ	0xFF8
 18612                           tblptrh	equ	0xFF7
 18613                           tblptrl	equ	0xFF6
 18614                           tablat	equ	0xFF5
 18615                           prodh	equ	0xFF4
 18616                           prodl	equ	0xFF3
 18617                           intcon	equ	0xFF2
 18618                           indf0	equ	0xFEF
 18619                           postinc0	equ	0xFEE
 18620                           fsr0h	equ	0xFEA
 18621                           fsr0l	equ	0xFE9
 18622                           wreg	equ	0xFE8
 18623                           indf1	equ	0xFE7
 18624                           postinc1	equ	0xFE6
 18625                           postdec1	equ	0xFE5
 18626                           fsr1h	equ	0xFE2
 18627                           fsr1l	equ	0xFE1
 18628                           indf2	equ	0xFDF
 18629                           postinc2	equ	0xFDE
 18630                           postdec2	equ	0xFDD
 18631                           plusw2	equ	0xFDB
 18632                           fsr2h	equ	0xFDA
 18633                           fsr2l	equ	0xFD9
 18634                           status	equ	0xFD8
 18635                           
 18636 ;; *************** function _memset *****************
 18637 ;; Defined at:
 18638 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18639 ;; Parameters:    Size  Location     Type
 18640 ;;  p1              2    0[BANK0 ] PTR void 
 18641 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18642 ;;  c               2    2[BANK0 ] int 
 18643 ;;  n               2    4[BANK0 ] unsigned int 
 18644 ;; Auto vars:     Size  Location     Type
 18645 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18646 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18647 ;; Return value:  Size  Location     Type
 18648 ;;                  2    0[BANK0 ] PTR void 
 18649 ;; Registers used:
 18650 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18651 ;; Tracked objects:
 18652 ;;		On entry : F/0
 18653 ;;		On exit  : F/0
 18654 ;;		Unchanged: 0/0
 18655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18656 ;;      Params:         0       6       0       0       0       0       0
 18657 ;;      Locals:         0       2       0       0       0       0       0
 18658 ;;      Temps:          0       0       0       0       0       0       0
 18659 ;;      Totals:         0       8       0       0       0       0       0
 18660 ;;Total ram usage:        8 bytes
 18661 ;; Hardware stack levels used:    1
 18662 ;; Hardware stack levels required when called:    3
 18663 ;; This function calls:
 18664 ;;		Nothing
 18665 ;; This function is called by:
 18666 ;;		_doModeVerbose
 18667 ;;		_doModeSLCAN
 18668 ;;		_printGUID
 18669 ;;		_printMDF
 18670 ;;		_printNodeFirmwareVersion
 18671 ;; This function uses a non-reentrant model
 18672 ;;
 18673                           
 18674                           	psect	text37
 18675  0010A8                     __ptext37:
 18676                           	opt stack 0
 18677  0010A8                     _memset:
 18678                           	opt stack 25
 18679                           
 18680                           ; BSR set to: 0
 18681                           
 18682                           ;incstack = 0
 18683                           ;incstack = 0
 18684  0010A8  C060  F066         	movff	memset@p1,memset@p
 18685  0010AC  C061  F067         	movff	memset@p1+1,memset@p+1
 18686  0010B0  D008               	goto	l16044
 18687  0010B2                     l16040:
 18688                           
 18689                           ; BSR set to: 0
 18690  0010B2  C066  FFD9         	movff	memset@p,fsr2l
 18691  0010B6  C067  FFDA         	movff	memset@p+1,fsr2h
 18692  0010BA  C062  FFDF         	movff	memset@c,indf2
 18693                           
 18694                           ; BSR set to: 0
 18695  0010BE  4B66               	infsnz	memset@p& (0+255),f,b
 18696  0010C0  2B67               	incf	(memset@p+1)& (0+255),f,b
 18697  0010C2                     l16044:
 18698                           
 18699                           ; BSR set to: 0
 18700  0010C2  0764               	decf	memset@n& (0+255),f,b
 18701  0010C4  A0D8               	btfss	status,0,c
 18702  0010C6  0765               	decf	(memset@n+1)& (0+255),f,b
 18703  0010C8  0100               	movlb	0	; () banked
 18704  0010CA  2964               	incf	memset@n& (0+255),w,b
 18705  0010CC  B4D8               	btfsc	status,2,c
 18706  0010CE  2965               	incf	(memset@n+1)& (0+255),w,b
 18707  0010D0  B4D8               	btfsc	status,2,c
 18708                           
 18709                           ; BSR set to: 0
 18710  0010D2  0012               	return	
 18711  0010D4  D7EE               	goto	l16040
 18712  0010D6                     __end_of_memset:
 18713                           	opt stack 0
 18714                           tblptru	equ	0xFF8
 18715                           tblptrh	equ	0xFF7
 18716                           tblptrl	equ	0xFF6
 18717                           tablat	equ	0xFF5
 18718                           prodh	equ	0xFF4
 18719                           prodl	equ	0xFF3
 18720                           intcon	equ	0xFF2
 18721                           indf0	equ	0xFEF
 18722                           postinc0	equ	0xFEE
 18723                           fsr0h	equ	0xFEA
 18724                           fsr0l	equ	0xFE9
 18725                           wreg	equ	0xFE8
 18726                           indf1	equ	0xFE7
 18727                           postinc1	equ	0xFE6
 18728                           postdec1	equ	0xFE5
 18729                           fsr1h	equ	0xFE2
 18730                           fsr1l	equ	0xFE1
 18731                           indf2	equ	0xFDF
 18732                           postinc2	equ	0xFDE
 18733                           postdec2	equ	0xFDD
 18734                           plusw2	equ	0xFDB
 18735                           fsr2h	equ	0xFDA
 18736                           fsr2l	equ	0xFD9
 18737                           status	equ	0xFD8
 18738                           
 18739 ;; *************** function _printHelp *****************
 18740 ;; Defined at:
 18741 ;;		line 2841 in file "main.c"
 18742 ;; Parameters:    Size  Location     Type
 18743 ;;		None
 18744 ;; Auto vars:     Size  Location     Type
 18745 ;;		None
 18746 ;; Return value:  Size  Location     Type
 18747 ;;		None               void
 18748 ;; Registers used:
 18749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18750 ;; Tracked objects:
 18751 ;;		On entry : F/0
 18752 ;;		On exit  : 0/0
 18753 ;;		Unchanged: 0/0
 18754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18755 ;;      Params:         0       0       0       0       0       0       0
 18756 ;;      Locals:         0       0       0       0       0       0       0
 18757 ;;      Temps:          0       0       0       0       0       0       0
 18758 ;;      Totals:         0       0       0       0       0       0       0
 18759 ;;Total ram usage:        0 bytes
 18760 ;; Hardware stack levels used:    1
 18761 ;; Hardware stack levels required when called:    5
 18762 ;; This function calls:
 18763 ;;		_putsUSART
 18764 ;; This function is called by:
 18765 ;;		_doModeVerbose
 18766 ;; This function uses a non-reentrant model
 18767 ;;
 18768                           
 18769                           	psect	text38
 18770  003858                     __ptext38:
 18771                           	opt stack 0
 18772  003858                     _printHelp:
 18773                           	opt stack 23
 18774                           
 18775                           ; BSR set to: 0
 18776                           ;main.c: 2842: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18777                           
 18778                           ; BSR set to: 0
 18779                           ;incstack = 0
 18780                           ;incstack = 0
 18781  003858  0E74               	movlw	high STR_237
 18782  00385A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18783  00385C  0EAA               	movlw	low STR_237
 18784  00385E  6F61               	movwf	?_putsUSART& (0+255),b
 18785  003860  ECBC  F00A         	call	_putsUSART	;wreg free
 18786                           
 18787                           ;main.c: 2843: putsUSART((char *) "------------------------------------\r\n");
 18788  003864  0E6D               	movlw	high (STR_270+28)
 18789  003866  0100               	movlb	0	; () banked
 18790  003868  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18791  00386A  0EB2               	movlw	low (STR_270+28)
 18792  00386C  6F61               	movwf	?_putsUSART& (0+255),b
 18793  00386E  ECBC  F00A         	call	_putsUSART	;wreg free
 18794                           
 18795                           ;main.c: 2844: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18796  003872  0E77               	movlw	high STR_239
 18797  003874  0100               	movlb	0	; () banked
 18798  003876  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18799  003878  0EE1               	movlw	low STR_239
 18800  00387A  6F61               	movwf	?_putsUSART& (0+255),b
 18801  00387C  ECBC  F00A         	call	_putsUSART	;wreg free
 18802                           
 18803                           ;main.c: 2845: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18804  003880  0E73               	movlw	high STR_240
 18805  003882  0100               	movlb	0	; () banked
 18806  003884  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18807  003886  0E10               	movlw	low STR_240
 18808  003888  6F61               	movwf	?_putsUSART& (0+255),b
 18809  00388A  ECBC  F00A         	call	_putsUSART	;wreg free
 18810                           
 18811                           ;main.c: 2846: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18812  00388E  0E72               	movlw	high STR_241
 18813  003890  0100               	movlb	0	; () banked
 18814  003892  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18815  003894  0EB6               	movlw	low STR_241
 18816  003896  6F61               	movwf	?_putsUSART& (0+255),b
 18817  003898  ECBC  F00A         	call	_putsUSART	;wreg free
 18818                           
 18819                           ;main.c: 2847: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18820  00389C  0E71               	movlw	high STR_242
 18821  00389E  0100               	movlb	0	; () banked
 18822  0038A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18823  0038A2  0E2F               	movlw	low STR_242
 18824  0038A4  6F61               	movwf	?_putsUSART& (0+255),b
 18825  0038A6  ECBC  F00A         	call	_putsUSART	;wreg free
 18826                           
 18827                           ;main.c: 2848: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18828  0038AA  0E71               	movlw	high STR_243
 18829  0038AC  0100               	movlb	0	; () banked
 18830  0038AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18831  0038B0  0E94               	movlw	low STR_243
 18832  0038B2  6F61               	movwf	?_putsUSART& (0+255),b
 18833  0038B4  ECBC  F00A         	call	_putsUSART	;wreg free
 18834                           
 18835                           ;main.c: 2849: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18836  0038B8  0E77               	movlw	high STR_244
 18837  0038BA  0100               	movlb	0	; () banked
 18838  0038BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18839  0038BE  0E51               	movlw	low STR_244
 18840  0038C0  6F61               	movwf	?_putsUSART& (0+255),b
 18841  0038C2  ECBC  F00A         	call	_putsUSART	;wreg free
 18842                           
 18843                           ;main.c: 2850: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18844  0038C6  0E71               	movlw	high STR_245
 18845  0038C8  0100               	movlb	0	; () banked
 18846  0038CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18847  0038CC  0EC6               	movlw	low STR_245
 18848  0038CE  6F61               	movwf	?_putsUSART& (0+255),b
 18849  0038D0  ECBC  F00A         	call	_putsUSART	;wreg free
 18850                           
 18851                           ;main.c: 2851: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18852  0038D4  0E72               	movlw	high STR_246
 18853  0038D6  0100               	movlb	0	; () banked
 18854  0038D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18855  0038DA  0EE4               	movlw	low STR_246
 18856  0038DC  6F61               	movwf	?_putsUSART& (0+255),b
 18857  0038DE  ECBC  F00A         	call	_putsUSART	;wreg free
 18858                           
 18859                           ;main.c: 2852: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18860  0038E2  0E78               	movlw	high STR_247
 18861  0038E4  0100               	movlb	0	; () banked
 18862  0038E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18863  0038E8  0E7C               	movlw	low STR_247
 18864  0038EA  6F61               	movwf	?_putsUSART& (0+255),b
 18865  0038EC  ECBC  F00A         	call	_putsUSART	;wreg free
 18866                           
 18867                           ;main.c: 2853: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18868  0038F0  0E6F               	movlw	high STR_248
 18869  0038F2  0100               	movlb	0	; () banked
 18870  0038F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18871  0038F6  0E49               	movlw	low STR_248
 18872  0038F8  6F61               	movwf	?_putsUSART& (0+255),b
 18873  0038FA  ECBC  F00A         	call	_putsUSART	;wreg free
 18874                           
 18875                           ;main.c: 2854: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18876  0038FE  0E79               	movlw	high STR_249
 18877  003900  0100               	movlb	0	; () banked
 18878  003902  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18879  003904  0E3C               	movlw	low STR_249
 18880  003906  6F61               	movwf	?_putsUSART& (0+255),b
 18881  003908  ECBC  F00A         	call	_putsUSART	;wreg free
 18882                           
 18883                           ;main.c: 2855: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18884  00390C  0E76               	movlw	high STR_250
 18885  00390E  0100               	movlb	0	; () banked
 18886  003910  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18887  003912  0E8E               	movlw	low STR_250
 18888  003914  6F61               	movwf	?_putsUSART& (0+255),b
 18889  003916  ECBC  F00A         	call	_putsUSART	;wreg free
 18890                           
 18891                           ;main.c: 2856: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18892  00391A  0E74               	movlw	high STR_251
 18893  00391C  0100               	movlb	0	; () banked
 18894  00391E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18895  003920  0E83               	movlw	low STR_251
 18896  003922  6F61               	movwf	?_putsUSART& (0+255),b
 18897  003924  ECBC  F00A         	call	_putsUSART	;wreg free
 18898                           
 18899                           ;main.c: 2857: putsUSART((char *) "HELP - Display this help information.\r\n");
 18900  003928  0E73               	movlw	high STR_252
 18901  00392A  0100               	movlb	0	; () banked
 18902  00392C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18903  00392E  0EE4               	movlw	low STR_252
 18904  003930  6F61               	movwf	?_putsUSART& (0+255),b
 18905  003932  ECBC  F00A         	call	_putsUSART	;wreg free
 18906                           
 18907                           ;main.c: 2858: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18908  003936  0E72               	movlw	high STR_253
 18909  003938  0100               	movlb	0	; () banked
 18910  00393A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18911  00393C  0E87               	movlw	low STR_253
 18912  00393E  6F61               	movwf	?_putsUSART& (0+255),b
 18913  003940  ECBC  F00A         	call	_putsUSART	;wreg free
 18914                           
 18915                           ;main.c: 2859: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 18916  003944  0E6C               	movlw	high STR_254
 18917  003946  0100               	movlb	0	; () banked
 18918  003948  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18919  00394A  0EB9               	movlw	low STR_254
 18920  00394C  6F61               	movwf	?_putsUSART& (0+255),b
 18921  00394E  ECBC  F00A         	call	_putsUSART	;wreg free
 18922                           
 18923                           ;main.c: 2860: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 18924  003952  0E6D               	movlw	high STR_255
 18925  003954  0100               	movlb	0	; () banked
 18926  003956  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18927  003958  0E05               	movlw	low STR_255
 18928  00395A  6F61               	movwf	?_putsUSART& (0+255),b
 18929  00395C  ECBC  F00A         	call	_putsUSART	;wreg free
 18930                           
 18931                           ;main.c: 2861: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18932  003960  0E6C               	movlw	high STR_256
 18933  003962  0100               	movlb	0	; () banked
 18934  003964  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18935  003966  0E6C               	movlw	low STR_256
 18936  003968  6F61               	movwf	?_putsUSART& (0+255),b
 18937  00396A  ECBC  F00A         	call	_putsUSART	;wreg free
 18938                           
 18939                           ;main.c: 2862: putsUSART((char *) "FILTER - Set filter .\r\n");
 18940  00396E  0E78               	movlw	high STR_257
 18941  003970  0100               	movlb	0	; () banked
 18942  003972  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18943  003974  0E94               	movlw	low STR_257
 18944  003976  6F61               	movwf	?_putsUSART& (0+255),b
 18945  003978  ECBC  F00A         	call	_putsUSART	;wreg free
 18946                           
 18947                           ;main.c: 2863: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18948  00397C  0E6C               	movlw	high STR_258
 18949  00397E  0100               	movlb	0	; () banked
 18950  003980  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18951  003982  0E1E               	movlw	low STR_258
 18952  003984  6F61               	movwf	?_putsUSART& (0+255),b
 18953  003986  ECBC  F00A         	call	_putsUSART	;wreg free
 18954                           
 18955                           ;main.c: 2864: putsUSART((char *) "MASK - Set mask .\r\n");
 18956  00398A  0E79               	movlw	high STR_259
 18957  00398C  0100               	movlb	0	; () banked
 18958  00398E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18959  003990  0EEF               	movlw	low STR_259
 18960  003992  6F61               	movwf	?_putsUSART& (0+255),b
 18961  003994  ECBC  F00A         	call	_putsUSART	;wreg free
 18962                           
 18963                           ;main.c: 2865: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18964  003998  0E6D               	movlw	high STR_260
 18965  00399A  0100               	movlb	0	; () banked
 18966  00399C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18967  00399E  0E4F               	movlw	low STR_260
 18968  0039A0  6F61               	movwf	?_putsUSART& (0+255),b
 18969  0039A2  ECBC  F00A         	call	_putsUSART	;wreg free
 18970                           
 18971                           ;main.c: 2866: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18972  0039A6  0E76               	movlw	high STR_261
 18973  0039A8  0100               	movlb	0	; () banked
 18974  0039AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18975  0039AC  0E6C               	movlw	low STR_261
 18976  0039AE  6F61               	movwf	?_putsUSART& (0+255),b
 18977  0039B0  ECBC  F00A         	call	_putsUSART	;wreg free
 18978                           
 18979                           ;main.c: 2867: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18980  0039B4  0E72               	movlw	high STR_262
 18981  0039B6  0100               	movlb	0	; () banked
 18982  0039B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18983  0039BA  0E58               	movlw	low STR_262
 18984  0039BC  6F61               	movwf	?_putsUSART& (0+255),b
 18985  0039BE  ECBC  F00A         	call	_putsUSART	;wreg free
 18986                           
 18987                           ;main.c: 2868: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18988  0039C2  0E72               	movlw	high STR_263
 18989  0039C4  0100               	movlb	0	; () banked
 18990  0039C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18991  0039C8  0E29               	movlw	low STR_263
 18992  0039CA  6F61               	movwf	?_putsUSART& (0+255),b
 18993  0039CC  ECBC  F00A         	call	_putsUSART	;wreg free
 18994                           
 18995                           ;main.c: 2869: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=20 ms .\r\n");
 18996  0039D0  0E6D               	movlw	high STR_264
 18997  0039D2  0100               	movlb	0	; () banked
 18998  0039D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18999  0039D6  0ED9               	movlw	low STR_264
 19000  0039D8  6F61               	movwf	?_putsUSART& (0+255),b
 19001  0039DA  ECBC  F00A         	call	_putsUSART	;wreg free
 19002                           
 19003                           ;main.c: 2870: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 19004  0039DE  0E71               	movlw	high STR_265
 19005  0039E0  0100               	movlb	0	; () banked
 19006  0039E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19007  0039E4  0EF8               	movlw	low STR_265
 19008  0039E6  6F61               	movwf	?_putsUSART& (0+255),b
 19009  0039E8  ECBC  F00A         	call	_putsUSART	;wreg free
 19010                           
 19011                           ;main.c: 2871: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 19012  0039EC  0E6F               	movlw	high STR_266
 19013  0039EE  0100               	movlb	0	; () banked
 19014  0039F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19015  0039F2  0EB8               	movlw	low STR_266
 19016  0039F4  6F61               	movwf	?_putsUSART& (0+255),b
 19017  0039F6  ECBC  F00A         	call	_putsUSART	;wreg free
 19018                           
 19019                           ;main.c: 2872: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 19020  0039FA  0E6E               	movlw	high STR_267
 19021  0039FC  0100               	movlb	0	; () banked
 19022  0039FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19023  003A00  0E5E               	movlw	low STR_267
 19024  003A02  6F61               	movwf	?_putsUSART& (0+255),b
 19025  003A04  ECBC  F00A         	call	_putsUSART	;wreg free
 19026                           
 19027                           ;main.c: 2873: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 19028  003A08  0E75               	movlw	high STR_268
 19029  003A0A  0100               	movlb	0	; () banked
 19030  003A0C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19031  003A0E  0E1F               	movlw	low STR_268
 19032  003A10  6F61               	movwf	?_putsUSART& (0+255),b
 19033  003A12  EFBC  F00A         	goto	_putsUSART	;wreg free
 19034  003A16                     __end_of_printHelp:
 19035                           	opt stack 0
 19036                           tblptru	equ	0xFF8
 19037                           tblptrh	equ	0xFF7
 19038                           tblptrl	equ	0xFF6
 19039                           tablat	equ	0xFF5
 19040                           prodh	equ	0xFF4
 19041                           prodl	equ	0xFF3
 19042                           intcon	equ	0xFF2
 19043                           indf0	equ	0xFEF
 19044                           postinc0	equ	0xFEE
 19045                           fsr0h	equ	0xFEA
 19046                           fsr0l	equ	0xFE9
 19047                           wreg	equ	0xFE8
 19048                           indf1	equ	0xFE7
 19049                           postinc1	equ	0xFE6
 19050                           postdec1	equ	0xFE5
 19051                           fsr1h	equ	0xFE2
 19052                           fsr1l	equ	0xFE1
 19053                           indf2	equ	0xFDF
 19054                           postinc2	equ	0xFDE
 19055                           postdec2	equ	0xFDD
 19056                           plusw2	equ	0xFDB
 19057                           fsr2h	equ	0xFDA
 19058                           fsr2l	equ	0xFD9
 19059                           status	equ	0xFD8
 19060                           
 19061 ;; *************** function _printErrors *****************
 19062 ;; Defined at:
 19063 ;;		line 2777 in file "main.c"
 19064 ;; Parameters:    Size  Location     Type
 19065 ;;		None
 19066 ;; Auto vars:     Size  Location     Type
 19067 ;;		None
 19068 ;; Return value:  Size  Location     Type
 19069 ;;		None               void
 19070 ;; Registers used:
 19071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19072 ;; Tracked objects:
 19073 ;;		On entry : F/0
 19074 ;;		On exit  : 0/0
 19075 ;;		Unchanged: 0/0
 19076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19077 ;;      Params:         0       0       0       0       0       0       0
 19078 ;;      Locals:         0      12       0       0       0       0       0
 19079 ;;      Temps:          0       0       0       0       0       0       0
 19080 ;;      Totals:         0      12       0       0       0       0       0
 19081 ;;Total ram usage:       12 bytes
 19082 ;; Hardware stack levels used:    1
 19083 ;; Hardware stack levels required when called:    5
 19084 ;; This function calls:
 19085 ;;		_putsUSART
 19086 ;;		_sprintf
 19087 ;; This function is called by:
 19088 ;;		_doModeVerbose
 19089 ;; This function uses a non-reentrant model
 19090 ;;
 19091                           
 19092                           	psect	text39
 19093  0045E4                     __ptext39:
 19094                           	opt stack 0
 19095  0045E4                     _printErrors:
 19096                           	opt stack 23
 19097                           
 19098                           ; BSR set to: 0
 19099                           ;main.c: 2778: putsUSART((char *) "CAN Receive overruns: ");
 19100                           
 19101                           ;incstack = 0
 19102                           ;incstack = 0
 19103  0045E4  0E79               	movlw	high STR_207
 19104  0045E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19105  0045E8  0E6A               	movlw	low STR_207
 19106  0045EA  6F61               	movwf	?_putsUSART& (0+255),b
 19107  0045EC  ECBC  F00A         	call	_putsUSART	;wreg free
 19108                           
 19109                           ;main.c: 2779: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 19110  0045F0  662C               	tstfsz	_bHex,c
 19111  0045F2  D005               	goto	l16120
 19112  0045F4  0E7C               	movlw	high STR_193
 19113  0045F6  0100               	movlb	0	; () banked
 19114  0045F8  6F95               	movwf	(_printErrors$1505+1)& (0+255),b
 19115  0045FA  0EDD               	movlw	low STR_193
 19116  0045FC  D004               	goto	L20
 19117  0045FE                     l16120:
 19118  0045FE  0E7B               	movlw	high STR_208
 19119  004600  0100               	movlb	0	; () banked
 19120  004602  6F95               	movwf	(_printErrors$1505+1)& (0+255),b
 19121  004604  0EFA               	movlw	low STR_208
 19122  004606                     L20:
 19123  004606  6F94               	movwf	_printErrors$1505& (0+255),b
 19124                           
 19125                           ; BSR set to: 0
 19126  004608  0E01               	movlw	high _wrkbuf
 19127  00460A  0100               	movlb	0	; () banked
 19128  00460C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19129  00460E  0E7D               	movlw	low _wrkbuf
 19130  004610  6F76               	movwf	?_sprintf& (0+255),b
 19131  004612  C094  F078         	movff	_printErrors$1505,?_sprintf+2
 19132  004616  C095  F079         	movff	_printErrors$1505+1,?_sprintf+3
 19133  00461A  C100  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 19134  00461E  C101  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 19135  004622  C102  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 19136  004626  C103  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 19137  00462A  EC3F  F026         	call	_sprintf	;wreg free
 19138                           
 19139                           ; BSR set to: 0
 19140                           ;main.c: 2780: putsUSART(wrkbuf);
 19141  00462E  0E01               	movlw	high _wrkbuf
 19142  004630  0100               	movlb	0	; () banked
 19143  004632  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19144  004634  0E7D               	movlw	low _wrkbuf
 19145  004636  6F61               	movwf	?_putsUSART& (0+255),b
 19146  004638  ECBC  F00A         	call	_putsUSART	;wreg free
 19147                           
 19148                           ;main.c: 2781: putsUSART((char *) "\r\n");
 19149  00463C  0E70               	movlw	high (STR_228+50)
 19150  00463E  0100               	movlb	0	; () banked
 19151  004640  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19152  004642  0EC4               	movlw	low (STR_228+50)
 19153  004644  6F61               	movwf	?_putsUSART& (0+255),b
 19154  004646  ECBC  F00A         	call	_putsUSART	;wreg free
 19155                           
 19156                           ;main.c: 2783: putsUSART((char *) "CAN Transmit overruns: ");
 19157  00464A  0E79               	movlw	high STR_211
 19158  00464C  0100               	movlb	0	; () banked
 19159  00464E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19160  004650  0E24               	movlw	low STR_211
 19161  004652  6F61               	movwf	?_putsUSART& (0+255),b
 19162  004654  ECBC  F00A         	call	_putsUSART	;wreg free
 19163                           
 19164                           ;main.c: 2784: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 19165  004658  662C               	tstfsz	_bHex,c
 19166  00465A  D005               	goto	l16134
 19167  00465C  0E7C               	movlw	high STR_193
 19168  00465E  0100               	movlb	0	; () banked
 19169  004660  6F97               	movwf	(_printErrors$1511+1)& (0+255),b
 19170  004662  0EDD               	movlw	low STR_193
 19171  004664  D004               	goto	L21
 19172  004666                     l16134:
 19173  004666  0E7B               	movlw	high STR_208
 19174  004668  0100               	movlb	0	; () banked
 19175  00466A  6F97               	movwf	(_printErrors$1511+1)& (0+255),b
 19176  00466C  0EFA               	movlw	low STR_208
 19177  00466E                     L21:
 19178  00466E  6F96               	movwf	_printErrors$1511& (0+255),b
 19179                           
 19180                           ; BSR set to: 0
 19181  004670  0E01               	movlw	high _wrkbuf
 19182  004672  0100               	movlb	0	; () banked
 19183  004674  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19184  004676  0E7D               	movlw	low _wrkbuf
 19185  004678  6F76               	movwf	?_sprintf& (0+255),b
 19186  00467A  C096  F078         	movff	_printErrors$1511,?_sprintf+2
 19187  00467E  C097  F079         	movff	_printErrors$1511+1,?_sprintf+3
 19188  004682  C104  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 19189  004686  C105  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 19190  00468A  C106  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 19191  00468E  C107  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 19192  004692  EC3F  F026         	call	_sprintf	;wreg free
 19193                           
 19194                           ; BSR set to: 0
 19195                           ;main.c: 2785: putsUSART(wrkbuf);
 19196  004696  0E01               	movlw	high _wrkbuf
 19197  004698  0100               	movlb	0	; () banked
 19198  00469A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19199  00469C  0E7D               	movlw	low _wrkbuf
 19200  00469E  6F61               	movwf	?_putsUSART& (0+255),b
 19201  0046A0  ECBC  F00A         	call	_putsUSART	;wreg free
 19202                           
 19203                           ;main.c: 2786: putsUSART((char *) "\r\n");
 19204  0046A4  0E70               	movlw	high (STR_228+50)
 19205  0046A6  0100               	movlb	0	; () banked
 19206  0046A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19207  0046AA  0EC4               	movlw	low (STR_228+50)
 19208  0046AC  6F61               	movwf	?_putsUSART& (0+255),b
 19209  0046AE  ECBC  F00A         	call	_putsUSART	;wreg free
 19210                           
 19211                           ;main.c: 2788: putsUSART((char *) "UART Receive overruns: ");
 19212  0046B2  0E79               	movlw	high STR_215
 19213  0046B4  0100               	movlb	0	; () banked
 19214  0046B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19215  0046B8  0E0C               	movlw	low STR_215
 19216  0046BA  6F61               	movwf	?_putsUSART& (0+255),b
 19217  0046BC  ECBC  F00A         	call	_putsUSART	;wreg free
 19218                           
 19219                           ;main.c: 2789: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 19220  0046C0  662C               	tstfsz	_bHex,c
 19221  0046C2  D005               	goto	l16148
 19222  0046C4  0E7C               	movlw	high STR_193
 19223  0046C6  0100               	movlb	0	; () banked
 19224  0046C8  6F99               	movwf	(_printErrors$1517+1)& (0+255),b
 19225  0046CA  0EDD               	movlw	low STR_193
 19226  0046CC  D004               	goto	L22
 19227  0046CE                     l16148:
 19228  0046CE  0E7B               	movlw	high STR_208
 19229  0046D0  0100               	movlb	0	; () banked
 19230  0046D2  6F99               	movwf	(_printErrors$1517+1)& (0+255),b
 19231  0046D4  0EFA               	movlw	low STR_208
 19232  0046D6                     L22:
 19233  0046D6  6F98               	movwf	_printErrors$1517& (0+255),b
 19234                           
 19235                           ; BSR set to: 0
 19236  0046D8  0E01               	movlw	high _wrkbuf
 19237  0046DA  0100               	movlb	0	; () banked
 19238  0046DC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19239  0046DE  0E7D               	movlw	low _wrkbuf
 19240  0046E0  6F76               	movwf	?_sprintf& (0+255),b
 19241  0046E2  C098  F078         	movff	_printErrors$1517,?_sprintf+2
 19242  0046E6  C099  F079         	movff	_printErrors$1517+1,?_sprintf+3
 19243  0046EA  C120  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 19244  0046EE  C121  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 19245  0046F2  C122  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 19246  0046F6  C123  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 19247  0046FA  EC3F  F026         	call	_sprintf	;wreg free
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;main.c: 2790: putsUSART(wrkbuf);
 19251  0046FE  0E01               	movlw	high _wrkbuf
 19252  004700  0100               	movlb	0	; () banked
 19253  004702  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19254  004704  0E7D               	movlw	low _wrkbuf
 19255  004706  6F61               	movwf	?_putsUSART& (0+255),b
 19256  004708  ECBC  F00A         	call	_putsUSART	;wreg free
 19257                           
 19258                           ;main.c: 2791: putsUSART((char *) "\r\n");
 19259  00470C  0E70               	movlw	high (STR_228+50)
 19260  00470E  0100               	movlb	0	; () banked
 19261  004710  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19262  004712  0EC4               	movlw	low (STR_228+50)
 19263  004714  6F61               	movwf	?_putsUSART& (0+255),b
 19264  004716  ECBC  F00A         	call	_putsUSART	;wreg free
 19265                           
 19266                           ;main.c: 2793: putsUSART((char *) "UART Receive overruns: ");
 19267  00471A  0E79               	movlw	high STR_215
 19268  00471C  0100               	movlb	0	; () banked
 19269  00471E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19270  004720  0E0C               	movlw	low STR_215
 19271  004722  6F61               	movwf	?_putsUSART& (0+255),b
 19272  004724  ECBC  F00A         	call	_putsUSART	;wreg free
 19273                           
 19274                           ;main.c: 2794: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 19275  004728  662C               	tstfsz	_bHex,c
 19276  00472A  D005               	goto	l16162
 19277  00472C  0E7C               	movlw	high STR_193
 19278  00472E  0100               	movlb	0	; () banked
 19279  004730  6F9B               	movwf	(_printErrors$1523+1)& (0+255),b
 19280  004732  0EDD               	movlw	low STR_193
 19281  004734  D004               	goto	L23
 19282  004736                     l16162:
 19283  004736  0E7B               	movlw	high STR_208
 19284  004738  0100               	movlb	0	; () banked
 19285  00473A  6F9B               	movwf	(_printErrors$1523+1)& (0+255),b
 19286  00473C  0EFA               	movlw	low STR_208
 19287  00473E                     L23:
 19288  00473E  6F9A               	movwf	_printErrors$1523& (0+255),b
 19289                           
 19290                           ; BSR set to: 0
 19291  004740  0E01               	movlw	high _wrkbuf
 19292  004742  0100               	movlb	0	; () banked
 19293  004744  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19294  004746  0E7D               	movlw	low _wrkbuf
 19295  004748  6F76               	movwf	?_sprintf& (0+255),b
 19296  00474A  C09A  F078         	movff	_printErrors$1523,?_sprintf+2
 19297  00474E  C09B  F079         	movff	_printErrors$1523+1,?_sprintf+3
 19298  004752  C124  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 19299  004756  C125  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 19300  00475A  C126  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 19301  00475E  C127  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 19302  004762  EC3F  F026         	call	_sprintf	;wreg free
 19303                           
 19304                           ; BSR set to: 0
 19305                           ;main.c: 2795: putsUSART(wrkbuf);
 19306  004766  0E01               	movlw	high _wrkbuf
 19307  004768  0100               	movlb	0	; () banked
 19308  00476A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19309  00476C  0E7D               	movlw	low _wrkbuf
 19310  00476E  6F61               	movwf	?_putsUSART& (0+255),b
 19311  004770  ECBC  F00A         	call	_putsUSART	;wreg free
 19312                           
 19313                           ;main.c: 2796: putsUSART((char *) "\r\n");
 19314  004774  0E70               	movlw	high (STR_228+50)
 19315  004776  0100               	movlb	0	; () banked
 19316  004778  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19317  00477A  0EC4               	movlw	low (STR_228+50)
 19318  00477C  6F61               	movwf	?_putsUSART& (0+255),b
 19319  00477E  ECBC  F00A         	call	_putsUSART	;wreg free
 19320                           
 19321                           ;main.c: 2798: putsUSART((char *) "Transmit Error Counter: ");
 19322  004782  0E78               	movlw	high STR_223
 19323  004784  0100               	movlb	0	; () banked
 19324  004786  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19325  004788  0E4A               	movlw	low STR_223
 19326  00478A  6F61               	movwf	?_putsUSART& (0+255),b
 19327  00478C  ECBC  F00A         	call	_putsUSART	;wreg free
 19328                           
 19329                           ;main.c: 2799: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 19330  004790  662C               	tstfsz	_bHex,c
 19331  004792  D005               	goto	l16176
 19332  004794  0E7C               	movlw	high STR_61
 19333  004796  0100               	movlb	0	; () banked
 19334  004798  6F9D               	movwf	(_printErrors$1529+1)& (0+255),b
 19335  00479A  0EED               	movlw	low STR_61
 19336  00479C  D004               	goto	L24
 19337  00479E                     l16176:
 19338  00479E  0E7C               	movlw	high STR_60
 19339  0047A0  0100               	movlb	0	; () banked
 19340  0047A2  6F9D               	movwf	(_printErrors$1529+1)& (0+255),b
 19341  0047A4  0E49               	movlw	low STR_60
 19342  0047A6                     L24:
 19343  0047A6  6F9C               	movwf	_printErrors$1529& (0+255),b
 19344                           
 19345                           ; BSR set to: 0
 19346  0047A8  0E01               	movlw	high _wrkbuf
 19347  0047AA  0100               	movlb	0	; () banked
 19348  0047AC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19349  0047AE  0E7D               	movlw	low _wrkbuf
 19350  0047B0  6F76               	movwf	?_sprintf& (0+255),b
 19351  0047B2  C09C  F078         	movff	_printErrors$1529,?_sprintf+2
 19352  0047B6  C09D  F079         	movff	_printErrors$1529+1,?_sprintf+3
 19353  0047BA  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 19354  0047BE  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19355  0047C0  EC3F  F026         	call	_sprintf	;wreg free
 19356                           
 19357                           ; BSR set to: 0
 19358                           ;main.c: 2800: putsUSART(wrkbuf);
 19359  0047C4  0E01               	movlw	high _wrkbuf
 19360  0047C6  0100               	movlb	0	; () banked
 19361  0047C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19362  0047CA  0E7D               	movlw	low _wrkbuf
 19363  0047CC  6F61               	movwf	?_putsUSART& (0+255),b
 19364  0047CE  ECBC  F00A         	call	_putsUSART	;wreg free
 19365                           
 19366                           ;main.c: 2801: putsUSART((char *) "\r\n");
 19367  0047D2  0E70               	movlw	high (STR_228+50)
 19368  0047D4  0100               	movlb	0	; () banked
 19369  0047D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19370  0047D8  0EC4               	movlw	low (STR_228+50)
 19371  0047DA  6F61               	movwf	?_putsUSART& (0+255),b
 19372  0047DC  ECBC  F00A         	call	_putsUSART	;wreg free
 19373                           
 19374                           ;main.c: 2803: if (COMSTATbits.TXWARN) {
 19375  0047E0  A474               	btfss	3956,2,c	;volatile
 19376  0047E2  D007               	goto	l16188
 19377                           
 19378                           ;main.c: 2804: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19379  0047E4  0E6E               	movlw	high STR_227
 19380  0047E6  0100               	movlb	0	; () banked
 19381  0047E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19382  0047EA  0E9C               	movlw	low STR_227
 19383  0047EC  6F61               	movwf	?_putsUSART& (0+255),b
 19384  0047EE  ECBC  F00A         	call	_putsUSART	;wreg free
 19385  0047F2                     l16188:
 19386                           
 19387                           ;main.c: 2805: }
 19388                           ;main.c: 2807: if (COMSTATbits.TXBO) {
 19389  0047F2  AA74               	btfss	3956,5,c	;volatile
 19390  0047F4  D007               	goto	l16192
 19391                           
 19392                           ;main.c: 2808: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19393  0047F6  0E70               	movlw	high STR_228
 19394  0047F8  0100               	movlb	0	; () banked
 19395  0047FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19396  0047FC  0E92               	movlw	low STR_228
 19397  0047FE  6F61               	movwf	?_putsUSART& (0+255),b
 19398  004800  ECBC  F00A         	call	_putsUSART	;wreg free
 19399  004804                     l16192:
 19400                           
 19401                           ;main.c: 2809: }
 19402                           ;main.c: 2811: if (COMSTATbits.TXBP) {
 19403  004804  A874               	btfss	3956,4,c	;volatile
 19404  004806  D007               	goto	l1249
 19405                           
 19406                           ;main.c: 2812: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19407  004808  0E6F               	movlw	high STR_229
 19408  00480A  0100               	movlb	0	; () banked
 19409  00480C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19410  00480E  0E10               	movlw	low STR_229
 19411  004810  6F61               	movwf	?_putsUSART& (0+255),b
 19412  004812  ECBC  F00A         	call	_putsUSART	;wreg free
 19413  004816                     l1249:
 19414                           
 19415                           ;main.c: 2813: }
 19416                           ;main.c: 2816: putsUSART((char *) "Receive Error Counter: ");
 19417  004816  0E78               	movlw	high STR_230
 19418  004818  0100               	movlb	0	; () banked
 19419  00481A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19420  00481C  0EF4               	movlw	low STR_230
 19421  00481E  6F61               	movwf	?_putsUSART& (0+255),b
 19422  004820  ECBC  F00A         	call	_putsUSART	;wreg free
 19423                           
 19424                           ;main.c: 2817: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19425  004824  662C               	tstfsz	_bHex,c
 19426  004826  D005               	goto	l16200
 19427  004828  0E7C               	movlw	high STR_61
 19428  00482A  0100               	movlb	0	; () banked
 19429  00482C  6F9F               	movwf	(_printErrors$1538+1)& (0+255),b
 19430  00482E  0EED               	movlw	low STR_61
 19431  004830  D004               	goto	L25
 19432  004832                     l16200:
 19433  004832  0E7C               	movlw	high STR_60
 19434  004834  0100               	movlb	0	; () banked
 19435  004836  6F9F               	movwf	(_printErrors$1538+1)& (0+255),b
 19436  004838  0E49               	movlw	low STR_60
 19437  00483A                     L25:
 19438  00483A  6F9E               	movwf	_printErrors$1538& (0+255),b
 19439                           
 19440                           ; BSR set to: 0
 19441  00483C  0E01               	movlw	high _wrkbuf
 19442  00483E  0100               	movlb	0	; () banked
 19443  004840  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19444  004842  0E7D               	movlw	low _wrkbuf
 19445  004844  6F76               	movwf	?_sprintf& (0+255),b
 19446  004846  C09E  F078         	movff	_printErrors$1538,?_sprintf+2
 19447  00484A  C09F  F079         	movff	_printErrors$1538+1,?_sprintf+3
 19448  00484E  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19449  004852  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19450  004854  EC3F  F026         	call	_sprintf	;wreg free
 19451                           
 19452                           ; BSR set to: 0
 19453                           ;main.c: 2818: putsUSART(wrkbuf);
 19454  004858  0E01               	movlw	high _wrkbuf
 19455  00485A  0100               	movlb	0	; () banked
 19456  00485C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19457  00485E  0E7D               	movlw	low _wrkbuf
 19458  004860  6F61               	movwf	?_putsUSART& (0+255),b
 19459  004862  ECBC  F00A         	call	_putsUSART	;wreg free
 19460                           
 19461                           ;main.c: 2819: putsUSART((char *) "\r\n");
 19462  004866  0E70               	movlw	high (STR_228+50)
 19463  004868  0100               	movlb	0	; () banked
 19464  00486A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19465  00486C  0EC4               	movlw	low (STR_228+50)
 19466  00486E  6F61               	movwf	?_putsUSART& (0+255),b
 19467  004870  ECBC  F00A         	call	_putsUSART	;wreg free
 19468                           
 19469                           ;main.c: 2821: if (COMSTATbits.RXWARN) {
 19470  004874  A274               	btfss	3956,1,c	;volatile
 19471  004876  D007               	goto	l16212
 19472                           
 19473                           ;main.c: 2822: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19474  004878  0E6F               	movlw	high STR_234
 19475  00487A  0100               	movlb	0	; () banked
 19476  00487C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19477  00487E  0E81               	movlw	low STR_234
 19478  004880  6F61               	movwf	?_putsUSART& (0+255),b
 19479  004882  ECBC  F00A         	call	_putsUSART	;wreg free
 19480  004886                     l16212:
 19481                           
 19482                           ;main.c: 2823: }
 19483                           ;main.c: 2825: if (COMSTATbits.RXBP) {
 19484  004886  A674               	btfss	3956,3,c	;volatile
 19485  004888  D007               	goto	l16216
 19486                           
 19487                           ;main.c: 2826: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19488  00488A  0E70               	movlw	high STR_235
 19489  00488C  0100               	movlb	0	; () banked
 19490  00488E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19491  004890  0E26               	movlw	low STR_235
 19492  004892  6F61               	movwf	?_putsUSART& (0+255),b
 19493  004894  ECBC  F00A         	call	_putsUSART	;wreg free
 19494  004898                     l16216:
 19495                           
 19496                           ;main.c: 2827: }
 19497                           ;main.c: 2829: if (COMSTATbits.EWARN) {
 19498  004898  A074               	btfss	3956,0,c	;volatile
 19499  00489A  D007               	goto	l1257
 19500                           
 19501                           ;main.c: 2830: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19502  00489C  0E70               	movlw	high STR_236
 19503  00489E  0100               	movlb	0	; () banked
 19504  0048A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19505  0048A2  0EFB               	movlw	low STR_236
 19506  0048A4  6F61               	movwf	?_putsUSART& (0+255),b
 19507  0048A6  ECBC  F00A         	call	_putsUSART	;wreg free
 19508  0048AA                     l1257:
 19509  0048AA  0012               	return	
 19510  0048AC                     __end_of_printErrors:
 19511                           	opt stack 0
 19512                           tblptru	equ	0xFF8
 19513                           tblptrh	equ	0xFF7
 19514                           tblptrl	equ	0xFF6
 19515                           tablat	equ	0xFF5
 19516                           prodh	equ	0xFF4
 19517                           prodl	equ	0xFF3
 19518                           intcon	equ	0xFF2
 19519                           indf0	equ	0xFEF
 19520                           postinc0	equ	0xFEE
 19521                           fsr0h	equ	0xFEA
 19522                           fsr0l	equ	0xFE9
 19523                           wreg	equ	0xFE8
 19524                           indf1	equ	0xFE7
 19525                           postinc1	equ	0xFE6
 19526                           postdec1	equ	0xFE5
 19527                           fsr1h	equ	0xFE2
 19528                           fsr1l	equ	0xFE1
 19529                           indf2	equ	0xFDF
 19530                           postinc2	equ	0xFDE
 19531                           postdec2	equ	0xFDD
 19532                           plusw2	equ	0xFDB
 19533                           fsr2h	equ	0xFDA
 19534                           fsr2l	equ	0xFD9
 19535                           status	equ	0xFD8
 19536                           
 19537 ;; *************** function _printStatistics *****************
 19538 ;; Defined at:
 19539 ;;		line 2750 in file "main.c"
 19540 ;; Parameters:    Size  Location     Type
 19541 ;;		None
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;		None
 19544 ;; Return value:  Size  Location     Type
 19545 ;;		None               void
 19546 ;; Registers used:
 19547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19548 ;; Tracked objects:
 19549 ;;		On entry : F/0
 19550 ;;		On exit  : 0/0
 19551 ;;		Unchanged: 0/0
 19552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19553 ;;      Params:         0       0       0       0       0       0       0
 19554 ;;      Locals:         0       8       0       0       0       0       0
 19555 ;;      Temps:          0       0       0       0       0       0       0
 19556 ;;      Totals:         0       8       0       0       0       0       0
 19557 ;;Total ram usage:        8 bytes
 19558 ;; Hardware stack levels used:    1
 19559 ;; Hardware stack levels required when called:    5
 19560 ;; This function calls:
 19561 ;;		_putsUSART
 19562 ;;		_sprintf
 19563 ;; This function is called by:
 19564 ;;		_doModeVerbose
 19565 ;; This function uses a non-reentrant model
 19566 ;;
 19567                           
 19568                           	psect	text40
 19569  0036BA                     __ptext40:
 19570                           	opt stack 0
 19571  0036BA                     _printStatistics:
 19572                           	opt stack 23
 19573                           
 19574                           ; BSR set to: 0
 19575                           ;main.c: 2751: putsUSART((char *) "Sent CAN frames: ");
 19576                           
 19577                           ;incstack = 0
 19578                           ;incstack = 0
 19579  0036BA  0E7A               	movlw	high STR_191
 19580  0036BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19581  0036BE  0EB2               	movlw	low STR_191
 19582  0036C0  6F61               	movwf	?_putsUSART& (0+255),b
 19583  0036C2  ECBC  F00A         	call	_putsUSART	;wreg free
 19584                           
 19585                           ;main.c: 2752: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19586  0036C6  662C               	tstfsz	_bHex,c
 19587  0036C8  D005               	goto	l16064
 19588  0036CA  0E7C               	movlw	high STR_193
 19589  0036CC  0100               	movlb	0	; () banked
 19590  0036CE  6F95               	movwf	(_printStatistics$1480+1)& (0+255),b
 19591  0036D0  0EDD               	movlw	low STR_193
 19592  0036D2  D004               	goto	L26
 19593  0036D4                     l16064:
 19594  0036D4  0E7C               	movlw	high STR_192
 19595  0036D6  0100               	movlb	0	; () banked
 19596  0036D8  6F95               	movwf	(_printStatistics$1480+1)& (0+255),b
 19597  0036DA  0E57               	movlw	low STR_192
 19598  0036DC                     L26:
 19599  0036DC  6F94               	movwf	_printStatistics$1480& (0+255),b
 19600                           
 19601                           ; BSR set to: 0
 19602  0036DE  0E01               	movlw	high _wrkbuf
 19603  0036E0  0100               	movlb	0	; () banked
 19604  0036E2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19605  0036E4  0E7D               	movlw	low _wrkbuf
 19606  0036E6  6F76               	movwf	?_sprintf& (0+255),b
 19607  0036E8  C094  F078         	movff	_printStatistics$1480,?_sprintf+2
 19608  0036EC  C095  F079         	movff	_printStatistics$1480+1,?_sprintf+3
 19609  0036F0  C114  F07A         	movff	_cntTxFrames,?_sprintf+4
 19610  0036F4  C115  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19611  0036F8  C116  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19612  0036FC  C117  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19613  003700  EC3F  F026         	call	_sprintf	;wreg free
 19614                           
 19615                           ; BSR set to: 0
 19616                           ;main.c: 2753: putsUSART(wrkbuf);
 19617  003704  0E01               	movlw	high _wrkbuf
 19618  003706  0100               	movlb	0	; () banked
 19619  003708  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19620  00370A  0E7D               	movlw	low _wrkbuf
 19621  00370C  6F61               	movwf	?_putsUSART& (0+255),b
 19622  00370E  ECBC  F00A         	call	_putsUSART	;wreg free
 19623                           
 19624                           ;main.c: 2754: putsUSART((char *) "\r\n");
 19625  003712  0E70               	movlw	high (STR_228+50)
 19626  003714  0100               	movlb	0	; () banked
 19627  003716  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19628  003718  0EC4               	movlw	low (STR_228+50)
 19629  00371A  6F61               	movwf	?_putsUSART& (0+255),b
 19630  00371C  ECBC  F00A         	call	_putsUSART	;wreg free
 19631                           
 19632                           ;main.c: 2756: putsUSART((char *) "Sent CAN bytes: ");
 19633  003720  0E7A               	movlw	high STR_195
 19634  003722  0100               	movlb	0	; () banked
 19635  003724  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19636  003726  0EF7               	movlw	low STR_195
 19637  003728  6F61               	movwf	?_putsUSART& (0+255),b
 19638  00372A  ECBC  F00A         	call	_putsUSART	;wreg free
 19639                           
 19640                           ;main.c: 2757: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19641  00372E  662C               	tstfsz	_bHex,c
 19642  003730  D005               	goto	l16078
 19643  003732  0E7C               	movlw	high STR_193
 19644  003734  0100               	movlb	0	; () banked
 19645  003736  6F97               	movwf	(_printStatistics$1486+1)& (0+255),b
 19646  003738  0EDD               	movlw	low STR_193
 19647  00373A  D004               	goto	L27
 19648  00373C                     l16078:
 19649  00373C  0E7C               	movlw	high STR_192
 19650  00373E  0100               	movlb	0	; () banked
 19651  003740  6F97               	movwf	(_printStatistics$1486+1)& (0+255),b
 19652  003742  0E57               	movlw	low STR_192
 19653  003744                     L27:
 19654  003744  6F96               	movwf	_printStatistics$1486& (0+255),b
 19655                           
 19656                           ; BSR set to: 0
 19657  003746  0E01               	movlw	high _wrkbuf
 19658  003748  0100               	movlb	0	; () banked
 19659  00374A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19660  00374C  0E7D               	movlw	low _wrkbuf
 19661  00374E  6F76               	movwf	?_sprintf& (0+255),b
 19662  003750  C096  F078         	movff	_printStatistics$1486,?_sprintf+2
 19663  003754  C097  F079         	movff	_printStatistics$1486+1,?_sprintf+3
 19664  003758  C110  F07A         	movff	_cntTxBytes,?_sprintf+4
 19665  00375C  C111  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19666  003760  C112  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19667  003764  C113  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19668  003768  EC3F  F026         	call	_sprintf	;wreg free
 19669                           
 19670                           ; BSR set to: 0
 19671                           ;main.c: 2758: putsUSART(wrkbuf);
 19672  00376C  0E01               	movlw	high _wrkbuf
 19673  00376E  0100               	movlb	0	; () banked
 19674  003770  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19675  003772  0E7D               	movlw	low _wrkbuf
 19676  003774  6F61               	movwf	?_putsUSART& (0+255),b
 19677  003776  ECBC  F00A         	call	_putsUSART	;wreg free
 19678                           
 19679                           ;main.c: 2759: putsUSART((char *) "\r\n");
 19680  00377A  0E70               	movlw	high (STR_228+50)
 19681  00377C  0100               	movlb	0	; () banked
 19682  00377E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19683  003780  0EC4               	movlw	low (STR_228+50)
 19684  003782  6F61               	movwf	?_putsUSART& (0+255),b
 19685  003784  ECBC  F00A         	call	_putsUSART	;wreg free
 19686                           
 19687                           ;main.c: 2761: putsUSART((char *) "Received CAN frames: ");
 19688  003788  0E79               	movlw	high STR_199
 19689  00378A  0100               	movlb	0	; () banked
 19690  00378C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19691  00378E  0EC4               	movlw	low STR_199
 19692  003790  6F61               	movwf	?_putsUSART& (0+255),b
 19693  003792  ECBC  F00A         	call	_putsUSART	;wreg free
 19694                           
 19695                           ;main.c: 2762: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19696  003796  662C               	tstfsz	_bHex,c
 19697  003798  D005               	goto	l16092
 19698  00379A  0E7C               	movlw	high STR_193
 19699  00379C  0100               	movlb	0	; () banked
 19700  00379E  6F99               	movwf	(_printStatistics$1492+1)& (0+255),b
 19701  0037A0  0EDD               	movlw	low STR_193
 19702  0037A2  D004               	goto	L28
 19703  0037A4                     l16092:
 19704  0037A4  0E7C               	movlw	high STR_192
 19705  0037A6  0100               	movlb	0	; () banked
 19706  0037A8  6F99               	movwf	(_printStatistics$1492+1)& (0+255),b
 19707  0037AA  0E57               	movlw	low STR_192
 19708  0037AC                     L28:
 19709  0037AC  6F98               	movwf	_printStatistics$1492& (0+255),b
 19710                           
 19711                           ; BSR set to: 0
 19712  0037AE  0E01               	movlw	high _wrkbuf
 19713  0037B0  0100               	movlb	0	; () banked
 19714  0037B2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19715  0037B4  0E7D               	movlw	low _wrkbuf
 19716  0037B6  6F76               	movwf	?_sprintf& (0+255),b
 19717  0037B8  C098  F078         	movff	_printStatistics$1492,?_sprintf+2
 19718  0037BC  C099  F079         	movff	_printStatistics$1492+1,?_sprintf+3
 19719  0037C0  C10C  F07A         	movff	_cntRxFrames,?_sprintf+4
 19720  0037C4  C10D  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19721  0037C8  C10E  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19722  0037CC  C10F  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19723  0037D0  EC3F  F026         	call	_sprintf	;wreg free
 19724                           
 19725                           ; BSR set to: 0
 19726                           ;main.c: 2763: putsUSART(wrkbuf);
 19727  0037D4  0E01               	movlw	high _wrkbuf
 19728  0037D6  0100               	movlb	0	; () banked
 19729  0037D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19730  0037DA  0E7D               	movlw	low _wrkbuf
 19731  0037DC  6F61               	movwf	?_putsUSART& (0+255),b
 19732  0037DE  ECBC  F00A         	call	_putsUSART	;wreg free
 19733                           
 19734                           ;main.c: 2764: putsUSART((char *) "\r\n");
 19735  0037E2  0E70               	movlw	high (STR_228+50)
 19736  0037E4  0100               	movlb	0	; () banked
 19737  0037E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19738  0037E8  0EC4               	movlw	low (STR_228+50)
 19739  0037EA  6F61               	movwf	?_putsUSART& (0+255),b
 19740  0037EC  ECBC  F00A         	call	_putsUSART	;wreg free
 19741                           
 19742                           ;main.c: 2766: putsUSART((char *) "Received CAN bytes: ");
 19743  0037F0  0E79               	movlw	high STR_203
 19744  0037F2  0100               	movlb	0	; () banked
 19745  0037F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19746  0037F6  0EDA               	movlw	low STR_203
 19747  0037F8  6F61               	movwf	?_putsUSART& (0+255),b
 19748  0037FA  ECBC  F00A         	call	_putsUSART	;wreg free
 19749                           
 19750                           ;main.c: 2767: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19751  0037FE  662C               	tstfsz	_bHex,c
 19752  003800  D005               	goto	l16106
 19753  003802  0E7C               	movlw	high STR_193
 19754  003804  0100               	movlb	0	; () banked
 19755  003806  6F9B               	movwf	(_printStatistics$1498+1)& (0+255),b
 19756  003808  0EDD               	movlw	low STR_193
 19757  00380A  D004               	goto	L29
 19758  00380C                     l16106:
 19759  00380C  0E7C               	movlw	high STR_192
 19760  00380E  0100               	movlb	0	; () banked
 19761  003810  6F9B               	movwf	(_printStatistics$1498+1)& (0+255),b
 19762  003812  0E57               	movlw	low STR_192
 19763  003814                     L29:
 19764  003814  6F9A               	movwf	_printStatistics$1498& (0+255),b
 19765                           
 19766                           ; BSR set to: 0
 19767  003816  0E01               	movlw	high _wrkbuf
 19768  003818  0100               	movlb	0	; () banked
 19769  00381A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19770  00381C  0E7D               	movlw	low _wrkbuf
 19771  00381E  6F76               	movwf	?_sprintf& (0+255),b
 19772  003820  C09A  F078         	movff	_printStatistics$1498,?_sprintf+2
 19773  003824  C09B  F079         	movff	_printStatistics$1498+1,?_sprintf+3
 19774  003828  C108  F07A         	movff	_cntRxBytes,?_sprintf+4
 19775  00382C  C109  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19776  003830  C10A  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19777  003834  C10B  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19778  003838  EC3F  F026         	call	_sprintf	;wreg free
 19779                           
 19780                           ; BSR set to: 0
 19781                           ;main.c: 2768: putsUSART(wrkbuf);
 19782  00383C  0E01               	movlw	high _wrkbuf
 19783  00383E  0100               	movlb	0	; () banked
 19784  003840  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19785  003842  0E7D               	movlw	low _wrkbuf
 19786  003844  6F61               	movwf	?_putsUSART& (0+255),b
 19787  003846  ECBC  F00A         	call	_putsUSART	;wreg free
 19788                           
 19789                           ;main.c: 2769: putsUSART((char *) "\r\n");
 19790  00384A  0E70               	movlw	high (STR_228+50)
 19791  00384C  0100               	movlb	0	; () banked
 19792  00384E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19793  003850  0EC4               	movlw	low (STR_228+50)
 19794  003852  6F61               	movwf	?_putsUSART& (0+255),b
 19795  003854  EFBC  F00A         	goto	_putsUSART	;wreg free
 19796  003858                     __end_of_printStatistics:
 19797                           	opt stack 0
 19798                           tblptru	equ	0xFF8
 19799                           tblptrh	equ	0xFF7
 19800                           tblptrl	equ	0xFF6
 19801                           tablat	equ	0xFF5
 19802                           prodh	equ	0xFF4
 19803                           prodl	equ	0xFF3
 19804                           intcon	equ	0xFF2
 19805                           indf0	equ	0xFEF
 19806                           postinc0	equ	0xFEE
 19807                           fsr0h	equ	0xFEA
 19808                           fsr0l	equ	0xFE9
 19809                           wreg	equ	0xFE8
 19810                           indf1	equ	0xFE7
 19811                           postinc1	equ	0xFE6
 19812                           postdec1	equ	0xFE5
 19813                           fsr1h	equ	0xFE2
 19814                           fsr1l	equ	0xFE1
 19815                           indf2	equ	0xFDF
 19816                           postinc2	equ	0xFDE
 19817                           postdec2	equ	0xFDD
 19818                           plusw2	equ	0xFDB
 19819                           fsr2h	equ	0xFDA
 19820                           fsr2l	equ	0xFD9
 19821                           status	equ	0xFD8
 19822                           
 19823 ;; *************** function _atoi *****************
 19824 ;; Defined at:
 19825 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19826 ;; Parameters:    Size  Location     Type
 19827 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19828 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 19829 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 19830 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 19831 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 19832 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19833 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19834 ;; Auto vars:     Size  Location     Type
 19835 ;;  a               2   11[BANK0 ] int 
 19836 ;;  sign            1   10[BANK0 ] unsigned char 
 19837 ;; Return value:  Size  Location     Type
 19838 ;;                  2    6[BANK0 ] int 
 19839 ;; Registers used:
 19840 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19841 ;; Tracked objects:
 19842 ;;		On entry : C/2
 19843 ;;		On exit  : F/0
 19844 ;;		Unchanged: 0/0
 19845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19846 ;;      Params:         0       2       0       0       0       0       0
 19847 ;;      Locals:         0       3       0       0       0       0       0
 19848 ;;      Temps:          0       2       0       0       0       0       0
 19849 ;;      Totals:         0       7       0       0       0       0       0
 19850 ;;Total ram usage:        7 bytes
 19851 ;; Hardware stack levels used:    1
 19852 ;; Hardware stack levels required when called:    4
 19853 ;; This function calls:
 19854 ;;		_isdigit
 19855 ;;		___wmul
 19856 ;; This function is called by:
 19857 ;;		_doModeVerbose
 19858 ;; This function uses a non-reentrant model
 19859 ;;
 19860                           
 19861                           	psect	text41
 19862  002B54                     __ptext41:
 19863                           	opt stack 0
 19864  002B54                     _atoi:
 19865                           	opt stack 24
 19866                           
 19867                           ;incstack = 0
 19868                           ;incstack = 0
 19869  002B54  D003               	goto	l16016
 19870  002B56                     l16014:
 19871  002B56  0100               	movlb	0	; () banked
 19872  002B58  4B66               	infsnz	atoi@s& (0+255),f,b
 19873  002B5A  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19874  002B5C                     l16016:
 19875  002B5C  0100               	movlb	0	; () banked
 19876  002B5E  D876               	call	PL18	;call to abstracted procedure
 19877  002B60  64EA               	cpfsgt	fsr0h,c
 19878  002B62  D003               	bra	u20957
 19879  002B64  6EEA               	movwf	fsr0h,c
 19880  002B66  50EF               	movf	indf0,w,c
 19881  002B68  D003               	bra	u20950
 19882  002B6A                     u20957:
 19883  002B6A  6EF7               	movwf	tblptrh,c
 19884  002B6C  0008               	tblrd		*
 19885  002B6E  50F5               	movf	tablat,w,c
 19886  002B70                     u20950:
 19887  002B70  0A20               	xorlw	32
 19888  002B72  E0F1               	bz	l16014
 19889  002B74  0100               	movlb	0	; () banked
 19890  002B76  D86A               	call	PL18	;call to abstracted procedure
 19891  002B78  64EA               	cpfsgt	fsr0h,c
 19892  002B7A  D003               	bra	u20977
 19893  002B7C  6EEA               	movwf	fsr0h,c
 19894  002B7E  50EF               	movf	indf0,w,c
 19895  002B80  D003               	bra	u20970
 19896  002B82                     u20977:
 19897  002B82  6EF7               	movwf	tblptrh,c
 19898  002B84  0008               	tblrd		*
 19899  002B86  50F5               	movf	tablat,w,c
 19900  002B88                     u20970:
 19901  002B88  0A09               	xorlw	9
 19902  002B8A  E0E5               	bz	l16014
 19903  002B8C  0100               	movlb	0	; () banked
 19904  002B8E  6B6B               	clrf	atoi@a& (0+255),b
 19905  002B90  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19906  002B92  6B6A               	clrf	atoi@sign& (0+255),b
 19907                           
 19908                           ; BSR set to: 0
 19909  002B94  D85B               	call	PL18	;call to abstracted procedure
 19910  002B96  64EA               	cpfsgt	fsr0h,c
 19911  002B98  D003               	bra	u20997
 19912  002B9A  6EEA               	movwf	fsr0h,c
 19913  002B9C  50EF               	movf	indf0,w,c
 19914  002B9E  D003               	bra	u20990
 19915  002BA0                     u20997:
 19916  002BA0  6EF7               	movwf	tblptrh,c
 19917  002BA2  0008               	tblrd		*
 19918  002BA4  50F5               	movf	tablat,w,c
 19919  002BA6                     u20990:
 19920  002BA6  0A2D               	xorlw	45
 19921  002BA8  E103               	bnz	l16024
 19922  002BAA  0100               	movlb	0	; () banked
 19923  002BAC  2B6A               	incf	atoi@sign& (0+255),f,b
 19924  002BAE  D00D               	goto	L30
 19925  002BB0                     l16024:
 19926  002BB0  0100               	movlb	0	; () banked
 19927  002BB2  D84C               	call	PL18	;call to abstracted procedure
 19928  002BB4  64EA               	cpfsgt	fsr0h,c
 19929  002BB6  D003               	bra	u21017
 19930  002BB8  6EEA               	movwf	fsr0h,c
 19931  002BBA  50EF               	movf	indf0,w,c
 19932  002BBC  D003               	bra	u21010
 19933  002BBE                     u21017:
 19934  002BBE  6EF7               	movwf	tblptrh,c
 19935  002BC0  0008               	tblrd		*
 19936  002BC2  50F5               	movf	tablat,w,c
 19937  002BC4                     u21010:
 19938  002BC4  0A2B               	xorlw	43
 19939  002BC6  E121               	bnz	l16032
 19940  002BC8                     l16026:
 19941  002BC8  0100               	movlb	0	; () banked
 19942  002BCA                     L30:
 19943  002BCA  4B66               	infsnz	atoi@s& (0+255),f,b
 19944  002BCC  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19945  002BCE  D01D               	goto	l16032
 19946  002BD0                     l16028:
 19947                           
 19948                           ; BSR set to: 0
 19949  002BD0  C06B  F060         	movff	atoi@a,?___wmul
 19950  002BD4  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19951  002BD8  6B63               	clrf	(?___wmul+3)& (0+255),b
 19952  002BDA  0E0A               	movlw	10
 19953  002BDC  6F62               	movwf	(?___wmul+2)& (0+255),b
 19954  002BDE  EC99  F008         	call	___wmul	;wreg free
 19955  002BE2  D834               	call	PL18	;call to abstracted procedure
 19956  002BE4  64EA               	cpfsgt	fsr0h,c
 19957  002BE6  D003               	bra	u21037
 19958  002BE8  6EEA               	movwf	fsr0h,c
 19959  002BEA  50EF               	movf	indf0,w,c
 19960  002BEC  D003               	bra	u21030
 19961  002BEE                     u21037:
 19962  002BEE  6EF7               	movwf	tblptrh,c
 19963  002BF0  0008               	tblrd		*
 19964  002BF2  50F5               	movf	tablat,w,c
 19965  002BF4                     u21030:
 19966  002BF4  0100               	movlb	0	; () banked
 19967  002BF6  2760               	addwf	?___wmul& (0+255),f,b
 19968  002BF8  0E00               	movlw	0
 19969  002BFA  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19970  002BFC  0ED0               	movlw	208
 19971  002BFE  2560               	addwf	?___wmul& (0+255),w,b
 19972  002C00  6F6B               	movwf	atoi@a& (0+255),b
 19973  002C02  0EFF               	movlw	255
 19974  002C04  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19975  002C06  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19976  002C08  D7DF               	goto	l16026
 19977  002C0A                     l16032:
 19978  002C0A  0100               	movlb	0	; () banked
 19979  002C0C  D81F               	call	PL18	;call to abstracted procedure
 19980  002C0E  64EA               	cpfsgt	fsr0h,c
 19981  002C10  D003               	bra	u21047
 19982  002C12  6EEA               	movwf	fsr0h,c
 19983  002C14  50EF               	movf	indf0,w,c
 19984  002C16  D003               	bra	u21040
 19985  002C18                     u21047:
 19986  002C18  6EF7               	movwf	tblptrh,c
 19987  002C1A  0008               	tblrd		*
 19988  002C1C  50F5               	movf	tablat,w,c
 19989  002C1E                     u21040:
 19990  002C1E  EC44  F008         	call	_isdigit
 19991  002C22  E2D6               	bc	l16028
 19992                           
 19993                           ; BSR set to: 0
 19994  002C24  516A               	movf	atoi@sign& (0+255),w,b
 19995  002C26  E00D               	bz	l2134
 19996                           
 19997                           ; BSR set to: 0
 19998  002C28  C06B  F068         	movff	atoi@a,??_atoi
 19999  002C2C  C06C  F069         	movff	atoi@a+1,??_atoi+1
 20000  002C30  1F68               	comf	??_atoi& (0+255),f,b
 20001  002C32  1F69               	comf	(??_atoi+1)& (0+255),f,b
 20002  002C34  4B68               	infsnz	??_atoi& (0+255),f,b
 20003  002C36  2B69               	incf	(??_atoi+1)& (0+255),f,b
 20004  002C38  C068  F066         	movff	??_atoi,?_atoi
 20005  002C3C  C069  F067         	movff	??_atoi+1,?_atoi+1
 20006  002C40  D004               	goto	l2135
 20007  002C42                     l2134:
 20008                           
 20009                           ; BSR set to: 0
 20010  002C42  C06B  F066         	movff	atoi@a,?_atoi
 20011  002C46  C06C  F067         	movff	atoi@a+1,?_atoi+1
 20012  002C4A                     l2135:
 20013                           
 20014                           ; BSR set to: 0
 20015  002C4A  0012               	return	
 20016  002C4C                     __end_of_atoi:
 20017                           	opt stack 0
 20018  002C4C                     PL18:
 20019                           	opt stack 24
 20020  002C4C  5166               	movf	atoi@s& (0+255),w,b
 20021  002C4E  6EF6               	movwf	tblptrl,c
 20022  002C50  6EE9               	movwf	fsr0l,c
 20023  002C52  0E05               	movlw	(high __ramtop+-1)
 20024  002C54  6EEA               	movwf	fsr0h,c
 20025  002C56  5167               	movf	(atoi@s+1)& (0+255),w,b
 20026  002C58  0012               	return	
 20027  002C5A                     __end_ofPL18:
 20028                           	opt stack 0
 20029                           tblptru	equ	0xFF8
 20030                           tblptrh	equ	0xFF7
 20031                           tblptrl	equ	0xFF6
 20032                           tablat	equ	0xFF5
 20033                           prodh	equ	0xFF4
 20034                           prodl	equ	0xFF3
 20035                           intcon	equ	0xFF2
 20036                           indf0	equ	0xFEF
 20037                           postinc0	equ	0xFEE
 20038                           fsr0h	equ	0xFEA
 20039                           fsr0l	equ	0xFE9
 20040                           wreg	equ	0xFE8
 20041                           indf1	equ	0xFE7
 20042                           postinc1	equ	0xFE6
 20043                           postdec1	equ	0xFE5
 20044                           fsr1h	equ	0xFE2
 20045                           fsr1l	equ	0xFE1
 20046                           indf2	equ	0xFDF
 20047                           postinc2	equ	0xFDE
 20048                           postdec2	equ	0xFDD
 20049                           plusw2	equ	0xFDB
 20050                           fsr2h	equ	0xFDA
 20051                           fsr2l	equ	0xFD9
 20052                           status	equ	0xFD8
 20053                           
 20054 ;; *************** function _strtok *****************
 20055 ;; Defined at:
 20056 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 20057 ;; Parameters:    Size  Location     Type
 20058 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 20059 ;;		 -> NULL(0), cmdbuf(80), 
 20060 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 20061 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 20062 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 20063 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 20064 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20065 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20066 ;;		 -> STR_31(2), STR_30(2), 
 20067 ;; Auto vars:     Size  Location     Type
 20068 ;;		None
 20069 ;; Return value:  Size  Location     Type
 20070 ;;                  2   12[BANK0 ] PTR unsigned char 
 20071 ;; Registers used:
 20072 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20073 ;; Tracked objects:
 20074 ;;		On entry : F/0
 20075 ;;		On exit  : F/0
 20076 ;;		Unchanged: 0/0
 20077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20078 ;;      Params:         0       4       0       0       0       0       0
 20079 ;;      Locals:         0       0       0       0       0       0       0
 20080 ;;      Temps:          0       0       0       0       0       0       0
 20081 ;;      Totals:         0       4       0       0       0       0       0
 20082 ;;Total ram usage:        4 bytes
 20083 ;; Hardware stack levels used:    1
 20084 ;; Hardware stack levels required when called:    5
 20085 ;; This function calls:
 20086 ;;		_strspn
 20087 ;;		_strcspn
 20088 ;; This function is called by:
 20089 ;;		_doModeVerbose
 20090 ;; This function uses a non-reentrant model
 20091 ;;
 20092                           
 20093                           	psect	text42
 20094  001B74                     __ptext42:
 20095                           	opt stack 0
 20096  001B74                     _strtok:
 20097                           	opt stack 23
 20098                           
 20099                           ; BSR set to: 0
 20100                           
 20101                           ; BSR set to: 0
 20102                           ;incstack = 0
 20103                           ;incstack = 0
 20104  001B74  516D               	movf	(strtok@s1+1)& (0+255),w,b
 20105  001B76  116C               	iorwf	strtok@s1& (0+255),w,b
 20106  001B78  E104               	bnz	l15994
 20107                           
 20108                           ; BSR set to: 0
 20109  001B7A  C024  F06C         	movff	strtok@sp,strtok@s1
 20110  001B7E  C025  F06D         	movff	strtok@sp+1,strtok@s1+1
 20111  001B82                     l15994:
 20112                           
 20113                           ; BSR set to: 0
 20114  001B82  516D               	movf	(strtok@s1+1)& (0+255),w,b
 20115  001B84  116C               	iorwf	strtok@s1& (0+255),w,b
 20116  001B86  E016               	bz	L31
 20117                           
 20118                           ; BSR set to: 0
 20119                           
 20120                           ; BSR set to: 0
 20121  001B88  C06C  F066         	movff	strtok@s1,?_strspn
 20122  001B8C  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 20123  001B90  C06E  F068         	movff	strtok@s2,?_strspn+2
 20124  001B94  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 20125  001B98  ECDF  F009         	call	_strspn	;wreg free
 20126  001B9C  5166               	movf	?_strspn& (0+255),w,b
 20127  001B9E  276C               	addwf	strtok@s1& (0+255),f,b
 20128  001BA0  5167               	movf	(?_strspn+1)& (0+255),w,b
 20129  001BA2  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 20130                           
 20131                           ; BSR set to: 0
 20132  001BA4  C06C  FFD9         	movff	strtok@s1,fsr2l
 20133  001BA8  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 20134  001BAC  50DF               	movf	indf2,w,c
 20135  001BAE  E105               	bnz	l16004
 20136                           
 20137                           ; BSR set to: 0
 20138  001BB0  6A24               	clrf	strtok@sp,c
 20139  001BB2  6A25               	clrf	strtok@sp+1,c
 20140  001BB4                     L31:
 20141  001BB4  6B6C               	clrf	?_strtok& (0+255),b
 20142  001BB6  6B6D               	clrf	(?_strtok+1)& (0+255),b
 20143  001BB8  D025               	goto	l2627
 20144  001BBA                     l16004:
 20145                           
 20146                           ; BSR set to: 0
 20147  001BBA  C06C  F066         	movff	strtok@s1,?_strcspn
 20148  001BBE  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 20149  001BC2  C06E  F068         	movff	strtok@s2,?_strcspn+2
 20150  001BC6  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 20151  001BCA  EC01  F00A         	call	_strcspn	;wreg free
 20152  001BCE  5166               	movf	?_strcspn& (0+255),w,b
 20153  001BD0  256C               	addwf	strtok@s1& (0+255),w,b
 20154  001BD2  6E24               	movwf	strtok@sp,c
 20155  001BD4  5167               	movf	(?_strcspn+1)& (0+255),w,b
 20156  001BD6  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 20157  001BD8  6E25               	movwf	strtok@sp+1,c
 20158                           
 20159                           ; BSR set to: 0
 20160  001BDA  C024  FFD9         	movff	strtok@sp,fsr2l
 20161  001BDE  C025  FFDA         	movff	strtok@sp+1,fsr2h
 20162  001BE2  50DF               	movf	indf2,w,c
 20163  001BE4  E009               	bz	l2629
 20164                           
 20165                           ; BSR set to: 0
 20166  001BE6  C024  FFD9         	movff	strtok@sp,fsr2l
 20167  001BEA  C025  FFDA         	movff	strtok@sp+1,fsr2h
 20168  001BEE  0E00               	movlw	0
 20169  001BF0  6EDF               	movwf	indf2,c
 20170                           
 20171                           ; BSR set to: 0
 20172  001BF2  4A24               	infsnz	strtok@sp,f,c
 20173  001BF4  2A25               	incf	strtok@sp+1,f,c
 20174  001BF6  D002               	goto	l2630
 20175  001BF8                     l2629:
 20176                           
 20177                           ; BSR set to: 0
 20178  001BF8  6A24               	clrf	strtok@sp,c
 20179  001BFA  6A25               	clrf	strtok@sp+1,c
 20180  001BFC                     l2630:
 20181                           
 20182                           ; BSR set to: 0
 20183  001BFC  C06C  F06C         	movff	strtok@s1,?_strtok
 20184  001C00  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 20185  001C04                     l2627:
 20186                           
 20187                           ; BSR set to: 0
 20188  001C04  0012               	return	
 20189  001C06                     __end_of_strtok:
 20190                           	opt stack 0
 20191                           tblptru	equ	0xFF8
 20192                           tblptrh	equ	0xFF7
 20193                           tblptrl	equ	0xFF6
 20194                           tablat	equ	0xFF5
 20195                           prodh	equ	0xFF4
 20196                           prodl	equ	0xFF3
 20197                           intcon	equ	0xFF2
 20198                           indf0	equ	0xFEF
 20199                           postinc0	equ	0xFEE
 20200                           fsr0h	equ	0xFEA
 20201                           fsr0l	equ	0xFE9
 20202                           wreg	equ	0xFE8
 20203                           indf1	equ	0xFE7
 20204                           postinc1	equ	0xFE6
 20205                           postdec1	equ	0xFE5
 20206                           fsr1h	equ	0xFE2
 20207                           fsr1l	equ	0xFE1
 20208                           indf2	equ	0xFDF
 20209                           postinc2	equ	0xFDE
 20210                           postdec2	equ	0xFDD
 20211                           plusw2	equ	0xFDB
 20212                           fsr2h	equ	0xFDA
 20213                           fsr2l	equ	0xFD9
 20214                           status	equ	0xFD8
 20215                           
 20216 ;; *************** function _strcspn *****************
 20217 ;; Defined at:
 20218 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 20219 ;; Parameters:    Size  Location     Type
 20220 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20221 ;;		 -> NULL(0), cmdbuf(80), 
 20222 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20223 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 20224 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 20225 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 20226 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20227 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20228 ;;		 -> STR_31(2), STR_30(2), 
 20229 ;; Auto vars:     Size  Location     Type
 20230 ;;  i               2   10[BANK0 ] unsigned int 
 20231 ;; Return value:  Size  Location     Type
 20232 ;;                  2    6[BANK0 ] unsigned int 
 20233 ;; Registers used:
 20234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20235 ;; Tracked objects:
 20236 ;;		On entry : F/0
 20237 ;;		On exit  : F/0
 20238 ;;		Unchanged: 0/0
 20239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20240 ;;      Params:         0       4       0       0       0       0       0
 20241 ;;      Locals:         0       2       0       0       0       0       0
 20242 ;;      Temps:          0       0       0       0       0       0       0
 20243 ;;      Totals:         0       6       0       0       0       0       0
 20244 ;;Total ram usage:        6 bytes
 20245 ;; Hardware stack levels used:    1
 20246 ;; Hardware stack levels required when called:    4
 20247 ;; This function calls:
 20248 ;;		_strchr
 20249 ;; This function is called by:
 20250 ;;		_strtok
 20251 ;; This function uses a non-reentrant model
 20252 ;;
 20253                           
 20254                           	psect	text43
 20255  001402                     __ptext43:
 20256                           	opt stack 0
 20257  001402                     _strcspn:
 20258                           	opt stack 23
 20259                           
 20260                           ; BSR set to: 0
 20261                           
 20262                           ; BSR set to: 0
 20263                           ;incstack = 0
 20264                           ;incstack = 0
 20265  001402  6B6A               	clrf	strcspn@i& (0+255),b
 20266  001404  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 20267  001406  D004               	goto	l17604
 20268  001408                     l17602:
 20269                           
 20270                           ; BSR set to: 0
 20271  001408  4B66               	infsnz	strcspn@s1& (0+255),f,b
 20272  00140A  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 20273  00140C  4B6A               	infsnz	strcspn@i& (0+255),f,b
 20274  00140E  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 20275  001410                     l17604:
 20276                           
 20277                           ; BSR set to: 0
 20278  001410  C066  FFD9         	movff	strcspn@s1,fsr2l
 20279  001414  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20280  001418  50DF               	movf	indf2,w,c
 20281  00141A  E010               	bz	l2654
 20282                           
 20283                           ; BSR set to: 0
 20284  00141C  C068  F060         	movff	strcspn@s2,?_strchr
 20285  001420  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 20286  001424  C066  FFD9         	movff	strcspn@s1,fsr2l
 20287  001428  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20288  00142C  50DF               	movf	indf2,w,c
 20289  00142E  6F62               	movwf	(?_strchr+2)& (0+255),b
 20290  001430  6B63               	clrf	(?_strchr+3)& (0+255),b
 20291  001432  ECA3  F00B         	call	_strchr	;wreg free
 20292  001436  5161               	movf	(?_strchr+1)& (0+255),w,b
 20293  001438  1160               	iorwf	?_strchr& (0+255),w,b
 20294  00143A  E0E6               	bz	l17602
 20295  00143C                     l2654:
 20296                           
 20297                           ; BSR set to: 0
 20298  00143C  C06A  F066         	movff	strcspn@i,?_strcspn
 20299  001440  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 20300                           
 20301                           ; BSR set to: 0
 20302  001444  0012               	return	
 20303  001446                     __end_of_strcspn:
 20304                           	opt stack 0
 20305                           tblptru	equ	0xFF8
 20306                           tblptrh	equ	0xFF7
 20307                           tblptrl	equ	0xFF6
 20308                           tablat	equ	0xFF5
 20309                           prodh	equ	0xFF4
 20310                           prodl	equ	0xFF3
 20311                           intcon	equ	0xFF2
 20312                           indf0	equ	0xFEF
 20313                           postinc0	equ	0xFEE
 20314                           fsr0h	equ	0xFEA
 20315                           fsr0l	equ	0xFE9
 20316                           wreg	equ	0xFE8
 20317                           indf1	equ	0xFE7
 20318                           postinc1	equ	0xFE6
 20319                           postdec1	equ	0xFE5
 20320                           fsr1h	equ	0xFE2
 20321                           fsr1l	equ	0xFE1
 20322                           indf2	equ	0xFDF
 20323                           postinc2	equ	0xFDE
 20324                           postdec2	equ	0xFDD
 20325                           plusw2	equ	0xFDB
 20326                           fsr2h	equ	0xFDA
 20327                           fsr2l	equ	0xFD9
 20328                           status	equ	0xFD8
 20329                           
 20330 ;; *************** function _strspn *****************
 20331 ;; Defined at:
 20332 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 20333 ;; Parameters:    Size  Location     Type
 20334 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20335 ;;		 -> NULL(0), cmdbuf(80), 
 20336 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20337 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 20338 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 20339 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 20340 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20341 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20342 ;;		 -> STR_31(2), STR_30(2), 
 20343 ;; Auto vars:     Size  Location     Type
 20344 ;;  i               2   10[BANK0 ] unsigned int 
 20345 ;; Return value:  Size  Location     Type
 20346 ;;                  2    6[BANK0 ] unsigned int 
 20347 ;; Registers used:
 20348 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20349 ;; Tracked objects:
 20350 ;;		On entry : F/0
 20351 ;;		On exit  : F/0
 20352 ;;		Unchanged: 0/0
 20353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20354 ;;      Params:         0       4       0       0       0       0       0
 20355 ;;      Locals:         0       2       0       0       0       0       0
 20356 ;;      Temps:          0       0       0       0       0       0       0
 20357 ;;      Totals:         0       6       0       0       0       0       0
 20358 ;;Total ram usage:        6 bytes
 20359 ;; Hardware stack levels used:    1
 20360 ;; Hardware stack levels required when called:    4
 20361 ;; This function calls:
 20362 ;;		_strchr
 20363 ;; This function is called by:
 20364 ;;		_strtok
 20365 ;; This function uses a non-reentrant model
 20366 ;;
 20367                           
 20368                           	psect	text44
 20369  0013BE                     __ptext44:
 20370                           	opt stack 0
 20371  0013BE                     _strspn:
 20372                           	opt stack 23
 20373                           
 20374                           ; BSR set to: 0
 20375                           
 20376                           ; BSR set to: 0
 20377                           ;incstack = 0
 20378                           ;incstack = 0
 20379  0013BE  6B6A               	clrf	strspn@i& (0+255),b
 20380  0013C0  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20381  0013C2  D004               	goto	l17596
 20382  0013C4                     l17594:
 20383                           
 20384                           ; BSR set to: 0
 20385  0013C4  4B66               	infsnz	strspn@s1& (0+255),f,b
 20386  0013C6  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20387  0013C8  4B6A               	infsnz	strspn@i& (0+255),f,b
 20388  0013CA  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20389  0013CC                     l17596:
 20390                           
 20391                           ; BSR set to: 0
 20392  0013CC  C066  FFD9         	movff	strspn@s1,fsr2l
 20393  0013D0  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20394  0013D4  50DF               	movf	indf2,w,c
 20395  0013D6  E010               	bz	l2673
 20396                           
 20397                           ; BSR set to: 0
 20398  0013D8  C068  F060         	movff	strspn@s2,?_strchr
 20399  0013DC  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20400  0013E0  C066  FFD9         	movff	strspn@s1,fsr2l
 20401  0013E4  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20402  0013E8  50DF               	movf	indf2,w,c
 20403  0013EA  6F62               	movwf	(?_strchr+2)& (0+255),b
 20404  0013EC  6B63               	clrf	(?_strchr+3)& (0+255),b
 20405  0013EE  ECA3  F00B         	call	_strchr	;wreg free
 20406  0013F2  5161               	movf	(?_strchr+1)& (0+255),w,b
 20407  0013F4  1160               	iorwf	?_strchr& (0+255),w,b
 20408  0013F6  E1E6               	bnz	l17594
 20409  0013F8                     l2673:
 20410                           
 20411                           ; BSR set to: 0
 20412  0013F8  C06A  F066         	movff	strspn@i,?_strspn
 20413  0013FC  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20414                           
 20415                           ; BSR set to: 0
 20416  001400  0012               	return	
 20417  001402                     __end_of_strspn:
 20418                           	opt stack 0
 20419                           tblptru	equ	0xFF8
 20420                           tblptrh	equ	0xFF7
 20421                           tblptrl	equ	0xFF6
 20422                           tablat	equ	0xFF5
 20423                           prodh	equ	0xFF4
 20424                           prodl	equ	0xFF3
 20425                           intcon	equ	0xFF2
 20426                           indf0	equ	0xFEF
 20427                           postinc0	equ	0xFEE
 20428                           fsr0h	equ	0xFEA
 20429                           fsr0l	equ	0xFE9
 20430                           wreg	equ	0xFE8
 20431                           indf1	equ	0xFE7
 20432                           postinc1	equ	0xFE6
 20433                           postdec1	equ	0xFE5
 20434                           fsr1h	equ	0xFE2
 20435                           fsr1l	equ	0xFE1
 20436                           indf2	equ	0xFDF
 20437                           postinc2	equ	0xFDE
 20438                           postdec2	equ	0xFDD
 20439                           plusw2	equ	0xFDB
 20440                           fsr2h	equ	0xFDA
 20441                           fsr2l	equ	0xFD9
 20442                           status	equ	0xFD8
 20443                           
 20444 ;; *************** function _strchr *****************
 20445 ;; Defined at:
 20446 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20447 ;; Parameters:    Size  Location     Type
 20448 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20449 ;;		 -> STR_128(2), STR_126(2), STR_124(2), STR_122(2), 
 20450 ;;		 -> STR_119(2), STR_115(2), STR_113(2), STR_111(2), 
 20451 ;;		 -> STR_109(2), STR_106(2), STR_87(2), STR_85(2), 
 20452 ;;		 -> STR_83(2), STR_55(2), STR_53(2), STR_51(2), 
 20453 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20454 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20455 ;;  chr             2    2[BANK0 ] int 
 20456 ;; Auto vars:     Size  Location     Type
 20457 ;;		None
 20458 ;; Return value:  Size  Location     Type
 20459 ;;                  2    0[BANK0 ] PTR unsigned char 
 20460 ;; Registers used:
 20461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20462 ;; Tracked objects:
 20463 ;;		On entry : F/0
 20464 ;;		On exit  : F/0
 20465 ;;		Unchanged: 0/0
 20466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20467 ;;      Params:         0       4       0       0       0       0       0
 20468 ;;      Locals:         0       0       0       0       0       0       0
 20469 ;;      Temps:          0       2       0       0       0       0       0
 20470 ;;      Totals:         0       6       0       0       0       0       0
 20471 ;;Total ram usage:        6 bytes
 20472 ;; Hardware stack levels used:    1
 20473 ;; Hardware stack levels required when called:    3
 20474 ;; This function calls:
 20475 ;;		Nothing
 20476 ;; This function is called by:
 20477 ;;		_doModeVerbose
 20478 ;;		_strcspn
 20479 ;;		_strspn
 20480 ;; This function uses a non-reentrant model
 20481 ;;
 20482                           
 20483                           	psect	text45
 20484  001746                     __ptext45:
 20485                           	opt stack 0
 20486  001746                     _strchr:
 20487                           	opt stack 25
 20488  001746                     l2575:
 20489                           
 20490                           ; BSR set to: 0
 20491  001746  0100               	movlb	0	; () banked
 20492  001748  5160               	movf	strchr@ptr& (0+255),w,b
 20493  00174A  6EF6               	movwf	tblptrl,c
 20494  00174C  6EE9               	movwf	fsr0l,c
 20495  00174E  0E05               	movlw	(high __ramtop+-1)
 20496  001750  6EEA               	movwf	fsr0h,c
 20497  001752  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20498  001754  64EA               	cpfsgt	fsr0h,c
 20499  001756  D003               	bra	u15647
 20500  001758  6EEA               	movwf	fsr0h,c
 20501  00175A  50EF               	movf	indf0,w,c
 20502  00175C  D003               	bra	u15640
 20503  00175E                     u15647:
 20504  00175E  6EF7               	movwf	tblptrh,c
 20505  001760  0008               	tblrd		*
 20506  001762  50F5               	movf	tablat,w,c
 20507  001764                     u15640:
 20508  001764  0100               	movlb	0	; () banked
 20509  001766  1962               	xorwf	strchr@chr& (0+255),w,b
 20510  001768  E105               	bnz	l12694
 20511                           
 20512                           ; BSR set to: 0
 20513  00176A  C060  F060         	movff	strchr@ptr,?_strchr
 20514  00176E  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20515  001772  D019               	goto	l2577
 20516  001774                     l12694:
 20517                           
 20518                           ; BSR set to: 0
 20519  001774  5160               	movf	strchr@ptr& (0+255),w,b
 20520  001776  6F64               	movwf	??_strchr& (0+255),b
 20521  001778  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20522  00177A  6F65               	movwf	(??_strchr+1)& (0+255),b
 20523  00177C  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20524  00177E  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20525  001780  5164               	movf	??_strchr& (0+255),w,b
 20526  001782  6EF6               	movwf	tblptrl,c
 20527  001784  6EE9               	movwf	fsr0l,c
 20528  001786  0E05               	movlw	(high __ramtop+-1)
 20529  001788  6EEA               	movwf	fsr0h,c
 20530  00178A  5165               	movf	(??_strchr+1)& (0+255),w,b
 20531  00178C  64EA               	cpfsgt	fsr0h,c
 20532  00178E  D003               	bra	u15667
 20533  001790  6EEA               	movwf	fsr0h,c
 20534  001792  50EF               	movf	indf0,w,c
 20535  001794  D003               	bra	u15660
 20536  001796                     u15667:
 20537  001796  6EF7               	movwf	tblptrh,c
 20538  001798  0008               	tblrd		*
 20539  00179A  50F5               	movf	tablat,w,c
 20540  00179C                     u15660:
 20541  00179C  0900               	iorlw	0
 20542  00179E  E1D3               	bnz	l2575
 20543  0017A0  0100               	movlb	0	; () banked
 20544  0017A2  6B60               	clrf	?_strchr& (0+255),b
 20545  0017A4  6B61               	clrf	(?_strchr+1)& (0+255),b
 20546  0017A6                     l2577:
 20547                           
 20548                           ; BSR set to: 0
 20549  0017A6  0012               	return	
 20550  0017A8                     __end_of_strchr:
 20551                           	opt stack 0
 20552                           tblptru	equ	0xFF8
 20553                           tblptrh	equ	0xFF7
 20554                           tblptrl	equ	0xFF6
 20555                           tablat	equ	0xFF5
 20556                           prodh	equ	0xFF4
 20557                           prodl	equ	0xFF3
 20558                           intcon	equ	0xFF2
 20559                           indf0	equ	0xFEF
 20560                           postinc0	equ	0xFEE
 20561                           fsr0h	equ	0xFEA
 20562                           fsr0l	equ	0xFE9
 20563                           wreg	equ	0xFE8
 20564                           indf1	equ	0xFE7
 20565                           postinc1	equ	0xFE6
 20566                           postdec1	equ	0xFE5
 20567                           fsr1h	equ	0xFE2
 20568                           fsr1l	equ	0xFE1
 20569                           indf2	equ	0xFDF
 20570                           postinc2	equ	0xFDE
 20571                           postdec2	equ	0xFDD
 20572                           plusw2	equ	0xFDB
 20573                           fsr2h	equ	0xFDA
 20574                           fsr2l	equ	0xFD9
 20575                           status	equ	0xFD8
 20576                           
 20577 ;; *************** function _stristr *****************
 20578 ;; Defined at:
 20579 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20580 ;; Parameters:    Size  Location     Type
 20581 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20582 ;;		 -> NULL(0), cmdbuf(80), 
 20583 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20584 ;;		 -> STR_160(2), STR_159(9), STR_156(4), STR_154(3), 
 20585 ;;		 -> STR_153(6), STR_152(6), STR_151(8), STR_149(6), 
 20586 ;;		 -> STR_147(5), STR_145(8), STR_144(6), STR_143(9), 
 20587 ;;		 -> STR_142(7), STR_141(7), STR_140(5), STR_139(6), 
 20588 ;;		 -> STR_138(9), STR_136(11), STR_134(8), STR_132(4), 
 20589 ;;		 -> STR_131(5), STR_118(5), STR_105(7), STR_97(5), 
 20590 ;;		 -> STR_81(5), STR_49(5), STR_47(5), STR_45(5), 
 20591 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20592 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20593 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20594 ;; Auto vars:     Size  Location     Type
 20595 ;;		None
 20596 ;; Return value:  Size  Location     Type
 20597 ;;                  2   13[BANK0 ] PTR unsigned char 
 20598 ;; Registers used:
 20599 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20600 ;; Tracked objects:
 20601 ;;		On entry : F/0
 20602 ;;		On exit  : F/0
 20603 ;;		Unchanged: 0/0
 20604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20605 ;;      Params:         0       4       0       0       0       0       0
 20606 ;;      Locals:         0       0       0       0       0       0       0
 20607 ;;      Temps:          0       0       0       0       0       0       0
 20608 ;;      Totals:         0       4       0       0       0       0       0
 20609 ;;Total ram usage:        4 bytes
 20610 ;; Hardware stack levels used:    1
 20611 ;; Hardware stack levels required when called:    5
 20612 ;; This function calls:
 20613 ;;		_strlen
 20614 ;;		_strnicmp
 20615 ;;		_strichr
 20616 ;; This function is called by:
 20617 ;;		_doModeVerbose
 20618 ;; This function uses a non-reentrant model
 20619 ;;
 20620                           
 20621                           	psect	text46
 20622  00196A                     __ptext46:
 20623                           	opt stack 0
 20624  00196A                     _stristr:
 20625                           	opt stack 23
 20626                           
 20627                           ; BSR set to: 0
 20628                           
 20629                           ; BSR set to: 0
 20630                           ;incstack = 0
 20631                           ;incstack = 0
 20632  00196A  D02F               	goto	l15986
 20633  00196C                     l15980:
 20634                           
 20635                           ; BSR set to: 0
 20636  00196C  C06D  F064         	movff	stristr@s1,?_strnicmp
 20637  001970  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20638  001974  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20639  001978  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20640  00197C  C06F  F060         	movff	stristr@s2,?_strlen
 20641  001980  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20642  001984  EC9E  F009         	call	_strlen	;wreg free
 20643  001988  C060  F068         	movff	?_strlen,?_strnicmp+4
 20644  00198C  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20645  001990  ECD4  F00B         	call	_strnicmp	;wreg free
 20646  001994  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20647  001996  1164               	iorwf	?_strnicmp& (0+255),w,b
 20648  001998  E105               	bnz	l15984
 20649                           
 20650                           ; BSR set to: 0
 20651  00199A  C06D  F06D         	movff	stristr@s1,?_stristr
 20652  00199E  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20653  0019A2  D01E               	goto	l2596
 20654  0019A4                     l15984:
 20655                           
 20656                           ; BSR set to: 0
 20657  0019A4  296D               	incf	stristr@s1& (0+255),w,b
 20658  0019A6  6F61               	movwf	?_strichr& (0+255),b
 20659  0019A8  0E00               	movlw	0
 20660  0019AA  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20661  0019AC  6F62               	movwf	(?_strichr+1)& (0+255),b
 20662  0019AE  C06F  FFF6         	movff	stristr@s2,tblptrl
 20663  0019B2  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20664  0019B6  0008               	tblrd		*
 20665  0019B8  50F5               	movf	tablat,w,c
 20666  0019BA  6F63               	movwf	(?_strichr+2)& (0+255),b
 20667  0019BC  6B64               	clrf	(?_strichr+3)& (0+255),b
 20668  0019BE  EC40  F009         	call	_strichr	;wreg free
 20669  0019C2  C061  F06D         	movff	?_strichr,stristr@s1
 20670  0019C6  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20671  0019CA                     l15986:
 20672                           
 20673                           ; BSR set to: 0
 20674  0019CA  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20675  0019CC  116D               	iorwf	stristr@s1& (0+255),w,b
 20676  0019CE  E006               	bz	l2599
 20677                           
 20678                           ; BSR set to: 0
 20679  0019D0  C06D  FFD9         	movff	stristr@s1,fsr2l
 20680  0019D4  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20681  0019D8  50DF               	movf	indf2,w,c
 20682  0019DA  E1C8               	bnz	l15980
 20683  0019DC                     l2599:
 20684                           
 20685                           ; BSR set to: 0
 20686  0019DC  6B6D               	clrf	?_stristr& (0+255),b
 20687  0019DE  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20688  0019E0                     l2596:
 20689                           
 20690                           ; BSR set to: 0
 20691  0019E0  0012               	return	
 20692  0019E2                     __end_of_stristr:
 20693                           	opt stack 0
 20694                           tblptru	equ	0xFF8
 20695                           tblptrh	equ	0xFF7
 20696                           tblptrl	equ	0xFF6
 20697                           tablat	equ	0xFF5
 20698                           prodh	equ	0xFF4
 20699                           prodl	equ	0xFF3
 20700                           intcon	equ	0xFF2
 20701                           indf0	equ	0xFEF
 20702                           postinc0	equ	0xFEE
 20703                           fsr0h	equ	0xFEA
 20704                           fsr0l	equ	0xFE9
 20705                           wreg	equ	0xFE8
 20706                           indf1	equ	0xFE7
 20707                           postinc1	equ	0xFE6
 20708                           postdec1	equ	0xFE5
 20709                           fsr1h	equ	0xFE2
 20710                           fsr1l	equ	0xFE1
 20711                           indf2	equ	0xFDF
 20712                           postinc2	equ	0xFDE
 20713                           postdec2	equ	0xFDD
 20714                           plusw2	equ	0xFDB
 20715                           fsr2h	equ	0xFDA
 20716                           fsr2l	equ	0xFD9
 20717                           status	equ	0xFD8
 20718                           
 20719 ;; *************** function _strichr *****************
 20720 ;; Defined at:
 20721 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20722 ;; Parameters:    Size  Location     Type
 20723 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20724 ;;		 -> NULL(0), cmdbuf(80), 
 20725 ;;  chr             2    3[BANK0 ] int 
 20726 ;; Auto vars:     Size  Location     Type
 20727 ;;		None
 20728 ;; Return value:  Size  Location     Type
 20729 ;;                  2    1[BANK0 ] PTR unsigned char 
 20730 ;; Registers used:
 20731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20732 ;; Tracked objects:
 20733 ;;		On entry : F/0
 20734 ;;		On exit  : F/0
 20735 ;;		Unchanged: 0/0
 20736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20737 ;;      Params:         0       4       0       0       0       0       0
 20738 ;;      Locals:         0       0       0       0       0       0       0
 20739 ;;      Temps:          0       0       0       0       0       0       0
 20740 ;;      Totals:         0       4       0       0       0       0       0
 20741 ;;Total ram usage:        4 bytes
 20742 ;; Hardware stack levels used:    1
 20743 ;; Hardware stack levels required when called:    4
 20744 ;; This function calls:
 20745 ;;		_toupper
 20746 ;; This function is called by:
 20747 ;;		_stristr
 20748 ;; This function uses a non-reentrant model
 20749 ;;
 20750                           
 20751                           	psect	text47
 20752  001280                     __ptext47:
 20753                           	opt stack 0
 20754  001280                     _strichr:
 20755                           	opt stack 23
 20756                           
 20757                           ; BSR set to: 0
 20758                           
 20759                           ; BSR set to: 0
 20760                           ;incstack = 0
 20761                           ;incstack = 0
 20762  001280  5163               	movf	strichr@chr& (0+255),w,b
 20763  001282  ECFF  F007         	call	_toupper
 20764  001286  6F63               	movwf	strichr@chr& (0+255),b
 20765  001288  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20766  00128A  D010               	goto	l17580
 20767  00128C                     l17574:
 20768                           
 20769                           ; BSR set to: 0
 20770  00128C  C061  FFD9         	movff	strichr@ptr,fsr2l
 20771  001290  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20772  001294  50DF               	movf	indf2,w,c
 20773  001296  ECFF  F007         	call	_toupper
 20774  00129A  1963               	xorwf	strichr@chr& (0+255),w,b
 20775  00129C  E105               	bnz	l17578
 20776                           
 20777                           ; BSR set to: 0
 20778  00129E  C061  F061         	movff	strichr@ptr,?_strichr
 20779  0012A2  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20780  0012A6  D00A               	goto	l2663
 20781  0012A8                     l17578:
 20782                           
 20783                           ; BSR set to: 0
 20784  0012A8  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20785  0012AA  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20786  0012AC                     l17580:
 20787                           
 20788                           ; BSR set to: 0
 20789  0012AC  C061  FFD9         	movff	strichr@ptr,fsr2l
 20790  0012B0  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20791  0012B4  50DF               	movf	indf2,w,c
 20792  0012B6  E1EA               	bnz	l17574
 20793                           
 20794                           ; BSR set to: 0
 20795  0012B8  6B61               	clrf	?_strichr& (0+255),b
 20796  0012BA  6B62               	clrf	(?_strichr+1)& (0+255),b
 20797  0012BC                     l2663:
 20798                           
 20799                           ; BSR set to: 0
 20800  0012BC  0012               	return	
 20801  0012BE                     __end_of_strichr:
 20802                           	opt stack 0
 20803                           tblptru	equ	0xFF8
 20804                           tblptrh	equ	0xFF7
 20805                           tblptrl	equ	0xFF6
 20806                           tablat	equ	0xFF5
 20807                           prodh	equ	0xFF4
 20808                           prodl	equ	0xFF3
 20809                           intcon	equ	0xFF2
 20810                           indf0	equ	0xFEF
 20811                           postinc0	equ	0xFEE
 20812                           fsr0h	equ	0xFEA
 20813                           fsr0l	equ	0xFE9
 20814                           wreg	equ	0xFE8
 20815                           indf1	equ	0xFE7
 20816                           postinc1	equ	0xFE6
 20817                           postdec1	equ	0xFE5
 20818                           fsr1h	equ	0xFE2
 20819                           fsr1l	equ	0xFE1
 20820                           indf2	equ	0xFDF
 20821                           postinc2	equ	0xFDE
 20822                           postdec2	equ	0xFDD
 20823                           plusw2	equ	0xFDB
 20824                           fsr2h	equ	0xFDA
 20825                           fsr2l	equ	0xFD9
 20826                           status	equ	0xFD8
 20827                           
 20828 ;; *************** function _strnicmp *****************
 20829 ;; Defined at:
 20830 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20831 ;; Parameters:    Size  Location     Type
 20832 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20833 ;;		 -> NULL(0), cmdbuf(80), 
 20834 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20835 ;;		 -> STR_160(2), STR_159(9), STR_156(4), STR_154(3), 
 20836 ;;		 -> STR_153(6), STR_152(6), STR_151(8), STR_149(6), 
 20837 ;;		 -> STR_147(5), STR_145(8), STR_144(6), STR_143(9), 
 20838 ;;		 -> STR_142(7), STR_141(7), STR_140(5), STR_139(6), 
 20839 ;;		 -> STR_138(9), STR_136(11), STR_134(8), STR_132(4), 
 20840 ;;		 -> STR_131(5), STR_118(5), STR_105(7), STR_97(5), 
 20841 ;;		 -> STR_81(5), STR_49(5), STR_47(5), STR_45(5), 
 20842 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20843 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20844 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20845 ;;  len             2    8[BANK0 ] unsigned int 
 20846 ;; Auto vars:     Size  Location     Type
 20847 ;;  r               1   12[BANK0 ] char 
 20848 ;; Return value:  Size  Location     Type
 20849 ;;                  2    4[BANK0 ] int 
 20850 ;; Registers used:
 20851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20852 ;; Tracked objects:
 20853 ;;		On entry : F/0
 20854 ;;		On exit  : F/0
 20855 ;;		Unchanged: 0/0
 20856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20857 ;;      Params:         0       6       0       0       0       0       0
 20858 ;;      Locals:         0       1       0       0       0       0       0
 20859 ;;      Temps:          0       2       0       0       0       0       0
 20860 ;;      Totals:         0       9       0       0       0       0       0
 20861 ;;Total ram usage:        9 bytes
 20862 ;; Hardware stack levels used:    1
 20863 ;; Hardware stack levels required when called:    4
 20864 ;; This function calls:
 20865 ;;		_toupper
 20866 ;; This function is called by:
 20867 ;;		_stristr
 20868 ;; This function uses a non-reentrant model
 20869 ;;
 20870                           
 20871                           	psect	text48
 20872  0017A8                     __ptext48:
 20873                           	opt stack 0
 20874  0017A8                     _strnicmp:
 20875                           	opt stack 23
 20876                           
 20877                           ; BSR set to: 0
 20878                           
 20879                           ; BSR set to: 0
 20880                           ;incstack = 0
 20881                           ;incstack = 0
 20882  0017A8  D027               	goto	l17570
 20883  0017AA                     l17560:
 20884                           
 20885                           ; BSR set to: 0
 20886  0017AA  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20887  0017AE  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20888  0017B2  0008               	tblrd		*
 20889  0017B4  50F5               	movf	tablat,w,c
 20890  0017B6  ECFF  F007         	call	_toupper
 20891  0017BA  6F6A               	movwf	??_strnicmp& (0+255),b
 20892  0017BC  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20893  0017C0  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20894  0017C4  50DF               	movf	indf2,w,c
 20895  0017C6  ECFF  F007         	call	_toupper
 20896  0017CA  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20897  0017CC  516A               	movf	??_strnicmp& (0+255),w,b
 20898  0017CE  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20899  0017D0  6F6C               	movwf	strnicmp@r& (0+255),b
 20900  0017D2  0100               	movlb	0	; () banked
 20901  0017D4  676C               	tstfsz	strnicmp@r& (0+255),b
 20902  0017D6  D006               	goto	l17564
 20903                           
 20904                           ; BSR set to: 0
 20905  0017D8  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20906  0017DC  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20907  0017E0  50DF               	movf	indf2,w,c
 20908  0017E2  E106               	bnz	l17568
 20909  0017E4                     l17564:
 20910                           
 20911                           ; BSR set to: 0
 20912  0017E4  516C               	movf	strnicmp@r& (0+255),w,b
 20913  0017E6  6F64               	movwf	?_strnicmp& (0+255),b
 20914  0017E8  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20915  0017EA  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20916  0017EC  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20917  0017EE  D00E               	goto	l2615
 20918  0017F0                     l17568:
 20919                           
 20920                           ; BSR set to: 0
 20921  0017F0  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20922  0017F2  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20923  0017F4  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20924  0017F6  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20925  0017F8                     l17570:
 20926                           
 20927                           ; BSR set to: 0
 20928  0017F8  0768               	decf	strnicmp@len& (0+255),f,b
 20929  0017FA  A0D8               	btfss	status,0,c
 20930  0017FC  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20931  0017FE  0100               	movlb	0	; () banked
 20932  001800  2968               	incf	strnicmp@len& (0+255),w,b
 20933  001802  B4D8               	btfsc	status,2,c
 20934  001804  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20935  001806  E1D1               	bnz	l17560
 20936                           
 20937                           ; BSR set to: 0
 20938  001808  6B64               	clrf	?_strnicmp& (0+255),b
 20939  00180A  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20940  00180C                     l2615:
 20941                           
 20942                           ; BSR set to: 0
 20943  00180C  0012               	return	
 20944  00180E                     __end_of_strnicmp:
 20945                           	opt stack 0
 20946                           tblptru	equ	0xFF8
 20947                           tblptrh	equ	0xFF7
 20948                           tblptrl	equ	0xFF6
 20949                           tablat	equ	0xFF5
 20950                           prodh	equ	0xFF4
 20951                           prodl	equ	0xFF3
 20952                           intcon	equ	0xFF2
 20953                           indf0	equ	0xFEF
 20954                           postinc0	equ	0xFEE
 20955                           fsr0h	equ	0xFEA
 20956                           fsr0l	equ	0xFE9
 20957                           wreg	equ	0xFE8
 20958                           indf1	equ	0xFE7
 20959                           postinc1	equ	0xFE6
 20960                           postdec1	equ	0xFE5
 20961                           fsr1h	equ	0xFE2
 20962                           fsr1l	equ	0xFE1
 20963                           indf2	equ	0xFDF
 20964                           postinc2	equ	0xFDE
 20965                           postdec2	equ	0xFDD
 20966                           plusw2	equ	0xFDB
 20967                           fsr2h	equ	0xFDA
 20968                           fsr2l	equ	0xFD9
 20969                           status	equ	0xFD8
 20970                           
 20971 ;; *************** function _toupper *****************
 20972 ;; Defined at:
 20973 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20974 ;; Parameters:    Size  Location     Type
 20975 ;;  c               1    wreg     unsigned char 
 20976 ;; Auto vars:     Size  Location     Type
 20977 ;;  c               1    0[BANK0 ] unsigned char 
 20978 ;; Return value:  Size  Location     Type
 20979 ;;                  1    wreg      unsigned char 
 20980 ;; Registers used:
 20981 ;;		wreg, status,2, status,0
 20982 ;; Tracked objects:
 20983 ;;		On entry : F/0
 20984 ;;		On exit  : F/0
 20985 ;;		Unchanged: 0/0
 20986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20987 ;;      Params:         0       0       0       0       0       0       0
 20988 ;;      Locals:         0       1       0       0       0       0       0
 20989 ;;      Temps:          0       0       0       0       0       0       0
 20990 ;;      Totals:         0       1       0       0       0       0       0
 20991 ;;Total ram usage:        1 bytes
 20992 ;; Hardware stack levels used:    1
 20993 ;; Hardware stack levels required when called:    3
 20994 ;; This function calls:
 20995 ;;		Nothing
 20996 ;; This function is called by:
 20997 ;;		_strnicmp
 20998 ;;		_strichr
 20999 ;; This function uses a non-reentrant model
 21000 ;;
 21001                           
 21002                           	psect	text49
 21003  000FFE                     __ptext49:
 21004                           	opt stack 0
 21005  000FFE                     _toupper:
 21006                           	opt stack 23
 21007                           
 21008                           ; BSR set to: 0
 21009                           ;incstack = 0
 21010                           ;incstack = 0
 21011                           ;toupper@c stored from wreg
 21012  000FFE  CFE8 F060          	movff	wreg,toupper@c
 21013                           
 21014                           ; BSR set to: 0
 21015  001002  0E7B               	movlw	123
 21016  001004  6160               	cpfslt	toupper@c& (0+255),b
 21017  001006  D004               	goto	l17588
 21018                           
 21019                           ; BSR set to: 0
 21020  001008  0E60               	movlw	96
 21021  00100A  6560               	cpfsgt	toupper@c& (0+255),b
 21022  00100C  D001               	goto	l17588
 21023                           
 21024                           ; BSR set to: 0
 21025  00100E  9B60               	bcf	toupper@c& (0+255),5,b
 21026  001010                     l17588:
 21027                           
 21028                           ; BSR set to: 0
 21029  001010  5160               	movf	toupper@c& (0+255),w,b
 21030                           
 21031                           ; BSR set to: 0
 21032  001012  0012               	return	
 21033  001014                     __end_of_toupper:
 21034                           	opt stack 0
 21035                           tblptru	equ	0xFF8
 21036                           tblptrh	equ	0xFF7
 21037                           tblptrl	equ	0xFF6
 21038                           tablat	equ	0xFF5
 21039                           prodh	equ	0xFF4
 21040                           prodl	equ	0xFF3
 21041                           intcon	equ	0xFF2
 21042                           indf0	equ	0xFEF
 21043                           postinc0	equ	0xFEE
 21044                           fsr0h	equ	0xFEA
 21045                           fsr0l	equ	0xFE9
 21046                           wreg	equ	0xFE8
 21047                           indf1	equ	0xFE7
 21048                           postinc1	equ	0xFE6
 21049                           postdec1	equ	0xFE5
 21050                           fsr1h	equ	0xFE2
 21051                           fsr1l	equ	0xFE1
 21052                           indf2	equ	0xFDF
 21053                           postinc2	equ	0xFDE
 21054                           postdec2	equ	0xFDD
 21055                           plusw2	equ	0xFDB
 21056                           fsr2h	equ	0xFDA
 21057                           fsr2l	equ	0xFD9
 21058                           status	equ	0xFD8
 21059                           
 21060 ;; *************** function _strlen *****************
 21061 ;; Defined at:
 21062 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 21063 ;; Parameters:    Size  Location     Type
 21064 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 21065 ;;		 -> printGUID@buf(3), STR_160(2), STR_159(9), STR_156(4), 
 21066 ;;		 -> STR_154(3), STR_153(6), STR_152(6), STR_151(8), 
 21067 ;;		 -> STR_149(6), STR_147(5), STR_145(8), STR_144(6), 
 21068 ;;		 -> STR_143(9), STR_142(7), STR_141(7), STR_140(5), 
 21069 ;;		 -> STR_139(6), STR_138(9), STR_136(11), STR_134(8), 
 21070 ;;		 -> STR_132(4), STR_131(5), STR_118(5), STR_105(7), 
 21071 ;;		 -> STR_97(5), STR_81(5), wrkbuf(80), STR_49(5), 
 21072 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 21073 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 21074 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 21075 ;;		 -> STR_8(5), STR_6(5), cmdbuf(80), 
 21076 ;; Auto vars:     Size  Location     Type
 21077 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 21078 ;;		 -> printGUID@buf(3), STR_160(2), STR_159(9), STR_156(4), 
 21079 ;;		 -> STR_154(3), STR_153(6), STR_152(6), STR_151(8), 
 21080 ;;		 -> STR_149(6), STR_147(5), STR_145(8), STR_144(6), 
 21081 ;;		 -> STR_143(9), STR_142(7), STR_141(7), STR_140(5), 
 21082 ;;		 -> STR_139(6), STR_138(9), STR_136(11), STR_134(8), 
 21083 ;;		 -> STR_132(4), STR_131(5), STR_118(5), STR_105(7), 
 21084 ;;		 -> STR_97(5), STR_81(5), wrkbuf(80), STR_49(5), 
 21085 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 21086 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 21087 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 21088 ;;		 -> STR_8(5), STR_6(5), cmdbuf(80), 
 21089 ;; Return value:  Size  Location     Type
 21090 ;;                  2    0[BANK0 ] unsigned int 
 21091 ;; Registers used:
 21092 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 21093 ;; Tracked objects:
 21094 ;;		On entry : F/0
 21095 ;;		On exit  : F/0
 21096 ;;		Unchanged: 0/0
 21097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21098 ;;      Params:         0       2       0       0       0       0       0
 21099 ;;      Locals:         0       2       0       0       0       0       0
 21100 ;;      Temps:          0       0       0       0       0       0       0
 21101 ;;      Totals:         0       4       0       0       0       0       0
 21102 ;;Total ram usage:        4 bytes
 21103 ;; Hardware stack levels used:    1
 21104 ;; Hardware stack levels required when called:    3
 21105 ;; This function calls:
 21106 ;;		Nothing
 21107 ;; This function is called by:
 21108 ;;		_doModeSLCAN
 21109 ;;		_receiveSendEventSLCAN
 21110 ;;		_printGUID
 21111 ;;		_hexStringToBytes
 21112 ;;		_stristr
 21113 ;; This function uses a non-reentrant model
 21114 ;;
 21115                           
 21116                           	psect	text50
 21117  00133C                     __ptext50:
 21118                           	opt stack 0
 21119  00133C                     _strlen:
 21120                           	opt stack 24
 21121                           
 21122                           ; BSR set to: 0
 21123                           
 21124                           ; BSR set to: 0
 21125                           ;incstack = 0
 21126                           ;incstack = 0
 21127  00133C  C060  F062         	movff	strlen@s,strlen@cp
 21128  001340  C061  F063         	movff	strlen@s+1,strlen@cp+1
 21129  001344  D003               	goto	l17208
 21130  001346                     l17206:
 21131  001346  0100               	movlb	0	; () banked
 21132  001348  4B62               	infsnz	strlen@cp& (0+255),f,b
 21133  00134A  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 21134  00134C                     l17208:
 21135                           
 21136                           ; BSR set to: 0
 21137  00134C  5162               	movf	strlen@cp& (0+255),w,b
 21138  00134E  6EF6               	movwf	tblptrl,c
 21139  001350  6EE9               	movwf	fsr0l,c
 21140  001352  0E05               	movlw	(high __ramtop+-1)
 21141  001354  6EEA               	movwf	fsr0h,c
 21142  001356  5163               	movf	(strlen@cp+1)& (0+255),w,b
 21143  001358  64EA               	cpfsgt	fsr0h,c
 21144  00135A  D003               	bra	u23017
 21145  00135C  6EEA               	movwf	fsr0h,c
 21146  00135E  50EF               	movf	indf0,w,c
 21147  001360  D003               	bra	u23010
 21148  001362                     u23017:
 21149  001362  6EF7               	movwf	tblptrh,c
 21150  001364  0008               	tblrd		*
 21151  001366  50F5               	movf	tablat,w,c
 21152  001368                     u23010:
 21153  001368  0900               	iorlw	0
 21154  00136A  E1ED               	bnz	l17206
 21155  00136C  0100               	movlb	0	; () banked
 21156  00136E  5160               	movf	strlen@s& (0+255),w,b
 21157  001370  5D62               	subwf	strlen@cp& (0+255),w,b
 21158  001372  6F60               	movwf	?_strlen& (0+255),b
 21159  001374  5161               	movf	(strlen@s+1)& (0+255),w,b
 21160  001376  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 21161  001378  6F61               	movwf	(?_strlen+1)& (0+255),b
 21162                           
 21163                           ; BSR set to: 0
 21164  00137A  0012               	return	
 21165  00137C                     __end_of_strlen:
 21166                           	opt stack 0
 21167                           tblptru	equ	0xFF8
 21168                           tblptrh	equ	0xFF7
 21169                           tblptrl	equ	0xFF6
 21170                           tablat	equ	0xFF5
 21171                           prodh	equ	0xFF4
 21172                           prodl	equ	0xFF3
 21173                           intcon	equ	0xFF2
 21174                           indf0	equ	0xFEF
 21175                           postinc0	equ	0xFEE
 21176                           fsr0h	equ	0xFEA
 21177                           fsr0l	equ	0xFE9
 21178                           wreg	equ	0xFE8
 21179                           indf1	equ	0xFE7
 21180                           postinc1	equ	0xFE6
 21181                           postdec1	equ	0xFE5
 21182                           fsr1h	equ	0xFE2
 21183                           fsr1l	equ	0xFE1
 21184                           indf2	equ	0xFDF
 21185                           postinc2	equ	0xFDE
 21186                           postdec2	equ	0xFDD
 21187                           plusw2	equ	0xFDB
 21188                           fsr2h	equ	0xFDA
 21189                           fsr2l	equ	0xFD9
 21190                           status	equ	0xFD8
 21191                           
 21192 ;; *************** function _receivePrintEventVerbose *****************
 21193 ;; Defined at:
 21194 ;;		line 2029 in file "main.c"
 21195 ;; Parameters:    Size  Location     Type
 21196 ;;		None
 21197 ;; Auto vars:     Size  Location     Type
 21198 ;;  i               1   69[BANK0 ] unsigned char 
 21199 ;; Return value:  Size  Location     Type
 21200 ;;                  1    wreg      enum E15660
 21201 ;; Registers used:
 21202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21203 ;; Tracked objects:
 21204 ;;		On entry : E/1
 21205 ;;		On exit  : 0/0
 21206 ;;		Unchanged: 0/0
 21207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21208 ;;      Params:         0       0       0       0       0       0       0
 21209 ;;      Locals:         0      13       0       0       0       0       0
 21210 ;;      Temps:          0       5       0       0       0       0       0
 21211 ;;      Totals:         0      18       0       0       0       0       0
 21212 ;;Total ram usage:       18 bytes
 21213 ;; Hardware stack levels used:    1
 21214 ;; Hardware stack levels required when called:    6
 21215 ;; This function calls:
 21216 ;;		_putsUSART
 21217 ;;		_sprintf
 21218 ;;		_getVSCPFrame
 21219 ;; This function is called by:
 21220 ;;		_doModeVerbose
 21221 ;; This function uses a non-reentrant model
 21222 ;;
 21223                           
 21224                           	psect	text51
 21225  004350                     __ptext51:
 21226                           	opt stack 0
 21227  004350                     _receivePrintEventVerbose:
 21228                           	opt stack 22
 21229                           
 21230                           ;main.c: 2030: uint8_t i;
 21231                           ;main.c: 2032: if (getVSCPFrame(&vscpClass,
 21232                           ;main.c: 2033: &vscpType,
 21233                           ;main.c: 2034: &vscpNodeId,
 21234                           ;main.c: 2035: &vscpPriority,
 21235                           ;main.c: 2036: &vscpSize,
 21236                           ;main.c: 2037: vscpData)) {
 21237                           
 21238                           ; BSR set to: 0
 21239                           ;incstack = 0
 21240                           ;incstack = 0
 21241  004350  0E3F               	movlw	low _vscpType
 21242  004352  0100               	movlb	0	; () banked
 21243  004354  6F73               	movwf	?_getVSCPFrame& (0+255),b
 21244  004356  0E3C               	movlw	low _vscpNodeId
 21245  004358  6F74               	movwf	(?_getVSCPFrame+1)& (0+255),b
 21246  00435A  0E3D               	movlw	low _vscpPriority
 21247  00435C  6F75               	movwf	(?_getVSCPFrame+2)& (0+255),b
 21248  00435E  0E3E               	movlw	low _vscpSize
 21249  004360  6F76               	movwf	(?_getVSCPFrame+3)& (0+255),b
 21250  004362  0E01               	movlw	high _vscpData
 21251  004364  6F78               	movwf	(?_getVSCPFrame+5)& (0+255),b
 21252  004366  0EE5               	movlw	low _vscpData
 21253  004368  6F77               	movwf	(?_getVSCPFrame+4)& (0+255),b
 21254  00436A  0E38               	movlw	_vscpClass& (0+255)
 21255  00436C  ECD0  F007         	call	_getVSCPFrame
 21256  004370  0900               	iorlw	0
 21257  004372  E101 D135          	bz	l15966
 21258                           
 21259                           ; BSR set to: 0
 21260                           ;main.c: 2040: cntRxFrames++;
 21261  004376  0101               	movlb	1	; () banked
 21262  004378  2B0C               	incf	_cntRxFrames& (0+255),f,b
 21263  00437A  0E00               	movlw	0
 21264  00437C  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 21265  00437E  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 21266  004380  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 21267                           
 21268                           ;main.c: 2041: cntRxBytes += vscpSize;
 21269  004382  503E               	movf	_vscpSize,w,c
 21270  004384  2708               	addwf	_cntRxBytes& (0+255),f,b
 21271  004386  0E00               	movlw	0
 21272  004388  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 21273  00438A  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 21274  00438C  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 21275                           
 21276                           ; BSR set to: 1
 21277                           ;main.c: 2043: putsUSART((char *) "<Prio=");
 21278  00438E  0E7C               	movlw	high STR_170
 21279  004390  0100               	movlb	0	; () banked
 21280  004392  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21281  004394  0E26               	movlw	low STR_170
 21282  004396  6F61               	movwf	?_putsUSART& (0+255),b
 21283  004398  ECBC  F00A         	call	_putsUSART	;wreg free
 21284                           
 21285                           ;main.c: 2044: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 21286  00439C  662C               	tstfsz	_bHex,c
 21287  00439E  D005               	goto	l15884
 21288  0043A0  0E7C               	movlw	high STR_61
 21289  0043A2  0100               	movlb	0	; () banked
 21290  0043A4  6F9A               	movwf	(_receivePrintEventVerbose$1387+1)& (0+255),b
 21291  0043A6  0EED               	movlw	low STR_61
 21292  0043A8  D004               	goto	L32
 21293  0043AA                     l15884:
 21294  0043AA  0E7C               	movlw	high STR_60
 21295  0043AC  0100               	movlb	0	; () banked
 21296  0043AE  6F9A               	movwf	(_receivePrintEventVerbose$1387+1)& (0+255),b
 21297  0043B0  0E49               	movlw	low STR_60
 21298  0043B2                     L32:
 21299  0043B2  6F99               	movwf	_receivePrintEventVerbose$1387& (0+255),b
 21300                           
 21301                           ; BSR set to: 0
 21302  0043B4  0E01               	movlw	high _wrkbuf
 21303  0043B6  0100               	movlb	0	; () banked
 21304  0043B8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21305  0043BA  0E7D               	movlw	low _wrkbuf
 21306  0043BC  6F76               	movwf	?_sprintf& (0+255),b
 21307  0043BE  C099  F078         	movff	_receivePrintEventVerbose$1387,?_sprintf+2
 21308  0043C2  C09A  F079         	movff	_receivePrintEventVerbose$1387+1,?_sprintf+3
 21309  0043C6  C03D  F07A         	movff	_vscpPriority,?_sprintf+4
 21310  0043CA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21311  0043CC  EC3F  F026         	call	_sprintf	;wreg free
 21312                           
 21313                           ; BSR set to: 0
 21314                           ;main.c: 2045: putsUSART(wrkbuf);
 21315  0043D0  0E01               	movlw	high _wrkbuf
 21316  0043D2  0100               	movlb	0	; () banked
 21317  0043D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21318  0043D6  0E7D               	movlw	low _wrkbuf
 21319  0043D8  6F61               	movwf	?_putsUSART& (0+255),b
 21320  0043DA  ECBC  F00A         	call	_putsUSART	;wreg free
 21321                           
 21322                           ;main.c: 2046: putsUSART((char *) ",class=");
 21323  0043DE  0E7B               	movlw	high STR_173
 21324  0043E0  0100               	movlb	0	; () banked
 21325  0043E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21326  0043E4  0EDA               	movlw	low STR_173
 21327  0043E6  6F61               	movwf	?_putsUSART& (0+255),b
 21328  0043E8  ECBC  F00A         	call	_putsUSART	;wreg free
 21329                           
 21330                           ;main.c: 2047: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 21331  0043EC  662C               	tstfsz	_bHex,c
 21332  0043EE  D005               	goto	l15896
 21333  0043F0  0E7C               	movlw	high STR_61
 21334  0043F2  0100               	movlb	0	; () banked
 21335  0043F4  6F9C               	movwf	(_receivePrintEventVerbose$1392+1)& (0+255),b
 21336  0043F6  0EED               	movlw	low STR_61
 21337  0043F8  D004               	goto	L33
 21338  0043FA                     l15896:
 21339  0043FA  0E7C               	movlw	high STR_174
 21340  0043FC  0100               	movlb	0	; () banked
 21341  0043FE  6F9C               	movwf	(_receivePrintEventVerbose$1392+1)& (0+255),b
 21342  004400  0E50               	movlw	low STR_174
 21343  004402                     L33:
 21344  004402  6F9B               	movwf	_receivePrintEventVerbose$1392& (0+255),b
 21345                           
 21346                           ; BSR set to: 0
 21347  004404  0E01               	movlw	high _wrkbuf
 21348  004406  0100               	movlb	0	; () banked
 21349  004408  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21350  00440A  0E7D               	movlw	low _wrkbuf
 21351  00440C  6F76               	movwf	?_sprintf& (0+255),b
 21352  00440E  C09B  F078         	movff	_receivePrintEventVerbose$1392,?_sprintf+2
 21353  004412  C09C  F079         	movff	_receivePrintEventVerbose$1392+1,?_sprintf+3
 21354  004416  C038  F07A         	movff	_vscpClass,?_sprintf+4
 21355  00441A  C039  F07B         	movff	_vscpClass+1,?_sprintf+5
 21356  00441E  EC3F  F026         	call	_sprintf	;wreg free
 21357                           
 21358                           ; BSR set to: 0
 21359                           ;main.c: 2048: putsUSART(wrkbuf);
 21360  004422  0E01               	movlw	high _wrkbuf
 21361  004424  0100               	movlb	0	; () banked
 21362  004426  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21363  004428  0E7D               	movlw	low _wrkbuf
 21364  00442A  6F61               	movwf	?_putsUSART& (0+255),b
 21365  00442C  ECBC  F00A         	call	_putsUSART	;wreg free
 21366                           
 21367                           ;main.c: 2049: putsUSART((char *) ",type=");
 21368  004430  0E7C               	movlw	high STR_176
 21369  004432  0100               	movlb	0	; () banked
 21370  004434  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21371  004436  0E18               	movlw	low STR_176
 21372  004438  6F61               	movwf	?_putsUSART& (0+255),b
 21373  00443A  ECBC  F00A         	call	_putsUSART	;wreg free
 21374                           
 21375                           ;main.c: 2050: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21376  00443E  662C               	tstfsz	_bHex,c
 21377  004440  D005               	goto	l15908
 21378  004442  0E7C               	movlw	high STR_61
 21379  004444  0100               	movlb	0	; () banked
 21380  004446  6F9E               	movwf	(_receivePrintEventVerbose$1397+1)& (0+255),b
 21381  004448  0EED               	movlw	low STR_61
 21382  00444A  D004               	goto	L34
 21383  00444C                     l15908:
 21384  00444C  0E7C               	movlw	high STR_60
 21385  00444E  0100               	movlb	0	; () banked
 21386  004450  6F9E               	movwf	(_receivePrintEventVerbose$1397+1)& (0+255),b
 21387  004452  0E49               	movlw	low STR_60
 21388  004454                     L34:
 21389  004454  6F9D               	movwf	_receivePrintEventVerbose$1397& (0+255),b
 21390                           
 21391                           ; BSR set to: 0
 21392  004456  0E01               	movlw	high _wrkbuf
 21393  004458  0100               	movlb	0	; () banked
 21394  00445A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21395  00445C  0E7D               	movlw	low _wrkbuf
 21396  00445E  6F76               	movwf	?_sprintf& (0+255),b
 21397  004460  C09D  F078         	movff	_receivePrintEventVerbose$1397,?_sprintf+2
 21398  004464  C09E  F079         	movff	_receivePrintEventVerbose$1397+1,?_sprintf+3
 21399  004468  C03F  F07A         	movff	_vscpType,?_sprintf+4
 21400  00446C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21401  00446E  EC3F  F026         	call	_sprintf	;wreg free
 21402                           
 21403                           ; BSR set to: 0
 21404                           ;main.c: 2051: putsUSART(wrkbuf);
 21405  004472  0E01               	movlw	high _wrkbuf
 21406  004474  0100               	movlb	0	; () banked
 21407  004476  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21408  004478  0E7D               	movlw	low _wrkbuf
 21409  00447A  6F61               	movwf	?_putsUSART& (0+255),b
 21410  00447C  ECBC  F00A         	call	_putsUSART	;wreg free
 21411                           
 21412                           ;main.c: 2052: putsUSART((char *) ",nodeid=");
 21413  004480  0E7B               	movlw	high STR_179
 21414  004482  0100               	movlb	0	; () banked
 21415  004484  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21416  004486  0E97               	movlw	low STR_179
 21417  004488  6F61               	movwf	?_putsUSART& (0+255),b
 21418  00448A  ECBC  F00A         	call	_putsUSART	;wreg free
 21419                           
 21420                           ;main.c: 2053: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21421  00448E  662C               	tstfsz	_bHex,c
 21422  004490  D005               	goto	l15920
 21423  004492  0E7C               	movlw	high STR_61
 21424  004494  0100               	movlb	0	; () banked
 21425  004496  6FA0               	movwf	(_receivePrintEventVerbose$1402+1)& (0+255),b
 21426  004498  0EED               	movlw	low STR_61
 21427  00449A  D004               	goto	L35
 21428  00449C                     l15920:
 21429  00449C  0E7C               	movlw	high STR_60
 21430  00449E  0100               	movlb	0	; () banked
 21431  0044A0  6FA0               	movwf	(_receivePrintEventVerbose$1402+1)& (0+255),b
 21432  0044A2  0E49               	movlw	low STR_60
 21433  0044A4                     L35:
 21434  0044A4  6F9F               	movwf	_receivePrintEventVerbose$1402& (0+255),b
 21435                           
 21436                           ; BSR set to: 0
 21437  0044A6  0E01               	movlw	high _wrkbuf
 21438  0044A8  0100               	movlb	0	; () banked
 21439  0044AA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21440  0044AC  0E7D               	movlw	low _wrkbuf
 21441  0044AE  6F76               	movwf	?_sprintf& (0+255),b
 21442  0044B0  C09F  F078         	movff	_receivePrintEventVerbose$1402,?_sprintf+2
 21443  0044B4  C0A0  F079         	movff	_receivePrintEventVerbose$1402+1,?_sprintf+3
 21444  0044B8  C03C  F07A         	movff	_vscpNodeId,?_sprintf+4
 21445  0044BC  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21446  0044BE  EC3F  F026         	call	_sprintf	;wreg free
 21447                           
 21448                           ; BSR set to: 0
 21449                           ;main.c: 2054: putsUSART(wrkbuf);
 21450  0044C2  0E01               	movlw	high _wrkbuf
 21451  0044C4  0100               	movlb	0	; () banked
 21452  0044C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21453  0044C8  0E7D               	movlw	low _wrkbuf
 21454  0044CA  6F61               	movwf	?_putsUSART& (0+255),b
 21455  0044CC  ECBC  F00A         	call	_putsUSART	;wreg free
 21456                           
 21457                           ;main.c: 2055: putsUSART((char *) ",size=");
 21458  0044D0  0E7C               	movlw	high STR_182
 21459  0044D2  0100               	movlb	0	; () banked
 21460  0044D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21461  0044D6  0E1F               	movlw	low STR_182
 21462  0044D8  6F61               	movwf	?_putsUSART& (0+255),b
 21463  0044DA  ECBC  F00A         	call	_putsUSART	;wreg free
 21464                           
 21465                           ;main.c: 2056: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21466  0044DE  662C               	tstfsz	_bHex,c
 21467  0044E0  D005               	goto	l15932
 21468  0044E2  0E7C               	movlw	high STR_61
 21469  0044E4  0100               	movlb	0	; () banked
 21470  0044E6  6FA2               	movwf	(_receivePrintEventVerbose$1407+1)& (0+255),b
 21471  0044E8  0EED               	movlw	low STR_61
 21472  0044EA  D004               	goto	L36
 21473  0044EC                     l15932:
 21474  0044EC  0E7C               	movlw	high STR_60
 21475  0044EE  0100               	movlb	0	; () banked
 21476  0044F0  6FA2               	movwf	(_receivePrintEventVerbose$1407+1)& (0+255),b
 21477  0044F2  0E49               	movlw	low STR_60
 21478  0044F4                     L36:
 21479  0044F4  6FA1               	movwf	_receivePrintEventVerbose$1407& (0+255),b
 21480                           
 21481                           ; BSR set to: 0
 21482  0044F6  0E01               	movlw	high _wrkbuf
 21483  0044F8  0100               	movlb	0	; () banked
 21484  0044FA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21485  0044FC  0E7D               	movlw	low _wrkbuf
 21486  0044FE  6F76               	movwf	?_sprintf& (0+255),b
 21487  004500  C0A1  F078         	movff	_receivePrintEventVerbose$1407,?_sprintf+2
 21488  004504  C0A2  F079         	movff	_receivePrintEventVerbose$1407+1,?_sprintf+3
 21489  004508  C03E  F07A         	movff	_vscpSize,?_sprintf+4
 21490  00450C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21491  00450E  EC3F  F026         	call	_sprintf	;wreg free
 21492                           
 21493                           ; BSR set to: 0
 21494                           ;main.c: 2057: putsUSART(wrkbuf);
 21495  004512  0E01               	movlw	high _wrkbuf
 21496  004514  0100               	movlb	0	; () banked
 21497  004516  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21498  004518  0E7D               	movlw	low _wrkbuf
 21499  00451A  6F61               	movwf	?_putsUSART& (0+255),b
 21500  00451C  ECBC  F00A         	call	_putsUSART	;wreg free
 21501                           
 21502                           ;main.c: 2058: if (vscpSize > 0) {
 21503  004520  503E               	movf	_vscpSize,w,c
 21504  004522  E04E               	bz	l15960
 21505                           
 21506                           ;main.c: 2059: putsUSART((char *) ",Data=");
 21507  004524  0E7C               	movlw	high STR_185
 21508  004526  0100               	movlb	0	; () banked
 21509  004528  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21510  00452A  0E11               	movlw	low STR_185
 21511  00452C  6F61               	movwf	?_putsUSART& (0+255),b
 21512  00452E  ECBC  F00A         	call	_putsUSART	;wreg free
 21513                           
 21514                           ;main.c: 2060: for (i = 0; i < vscpSize; i++) {
 21515  004532  0100               	movlb	0	; () banked
 21516  004534  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21517  004536  D040               	goto	l15958
 21518  004538                     l998:
 21519                           
 21520                           ; BSR set to: 0
 21521                           ;main.c: 2062: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21522  004538  662C               	tstfsz	_bHex,c
 21523  00453A  D004               	goto	l15946
 21524                           
 21525                           ; BSR set to: 0
 21526  00453C  0E7C               	movlw	high STR_61
 21527  00453E  6FA4               	movwf	(_receivePrintEventVerbose$1412+1)& (0+255),b
 21528  004540  0EED               	movlw	low STR_61
 21529  004542  D003               	goto	L37
 21530  004544                     l15946:
 21531                           
 21532                           ; BSR set to: 0
 21533  004544  0E7C               	movlw	high STR_60
 21534  004546  6FA4               	movwf	(_receivePrintEventVerbose$1412+1)& (0+255),b
 21535  004548  0E49               	movlw	low STR_60
 21536  00454A                     L37:
 21537  00454A  6FA3               	movwf	_receivePrintEventVerbose$1412& (0+255),b
 21538                           
 21539                           ; BSR set to: 0
 21540  00454C  0E01               	movlw	high _wrkbuf
 21541  00454E  0100               	movlb	0	; () banked
 21542  004550  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21543  004552  0E7D               	movlw	low _wrkbuf
 21544  004554  6F76               	movwf	?_sprintf& (0+255),b
 21545  004556  C0A3  F078         	movff	_receivePrintEventVerbose$1412,?_sprintf+2
 21546  00455A  C0A4  F079         	movff	_receivePrintEventVerbose$1412+1,?_sprintf+3
 21547  00455E  0EE5               	movlw	low _vscpData
 21548  004560  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21549  004562  6ED9               	movwf	fsr2l,c
 21550  004564  6ADA               	clrf	fsr2h,c
 21551  004566  0E01               	movlw	high _vscpData
 21552  004568  22DA               	addwfc	fsr2h,f,c
 21553  00456A  50DF               	movf	indf2,w,c
 21554  00456C  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21555  00456E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21556  004570  EC3F  F026         	call	_sprintf	;wreg free
 21557                           
 21558                           ; BSR set to: 0
 21559                           ;main.c: 2063: putsUSART(wrkbuf);
 21560  004574  0E01               	movlw	high _wrkbuf
 21561  004576  0100               	movlb	0	; () banked
 21562  004578  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21563  00457A  0E7D               	movlw	low _wrkbuf
 21564  00457C  6F61               	movwf	?_putsUSART& (0+255),b
 21565  00457E  ECBC  F00A         	call	_putsUSART	;wreg free
 21566                           
 21567                           ;main.c: 2064: if (i < (vscpSize - 1)) {
 21568  004582  0EFF               	movlw	255
 21569  004584  243E               	addwf	_vscpSize,w,c
 21570  004586  0100               	movlb	0	; () banked
 21571  004588  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21572  00458A  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21573  00458C  0EFF               	movlw	255
 21574  00458E  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21575  004590  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21576  004592  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21577  004594  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21578  004596  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21579  004598  0A80               	xorlw	128
 21580  00459A  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21581  00459C  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21582  00459E  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21583  0045A0  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21584  0045A2  0A80               	xorlw	128
 21585  0045A4  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21586  0045A6  E206               	bc	l15956
 21587                           
 21588                           ; BSR set to: 0
 21589                           ;main.c: 2065: putsUSART((char *) ",");
 21590  0045A8  0E7C               	movlw	high STR_30
 21591  0045AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21592  0045AC  0EF4               	movlw	low STR_30
 21593  0045AE  6F61               	movwf	?_putsUSART& (0+255),b
 21594  0045B0  ECBC  F00A         	call	_putsUSART	;wreg free
 21595  0045B4                     l15956:
 21596  0045B4  0100               	movlb	0	; () banked
 21597  0045B6  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21598  0045B8                     l15958:
 21599                           
 21600                           ; BSR set to: 0
 21601  0045B8  503E               	movf	_vscpSize,w,c
 21602  0045BA  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21603  0045BC  E208               	bc	l1005
 21604  0045BE  D7BC               	goto	l998
 21605  0045C0                     l15960:
 21606                           
 21607                           ;main.c: 2069: putsUSART((char *) ",Data=none");
 21608  0045C0  0E7B               	movlw	high STR_189
 21609  0045C2  0100               	movlb	0	; () banked
 21610  0045C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21611  0045C6  0E5B               	movlw	low STR_189
 21612  0045C8  6F61               	movwf	?_putsUSART& (0+255),b
 21613  0045CA  ECBC  F00A         	call	_putsUSART	;wreg free
 21614  0045CE                     l1005:
 21615                           
 21616                           ;main.c: 2070: }
 21617                           ;main.c: 2071: putsUSART((char *) ">\r\n");
 21618  0045CE  0E7C               	movlw	high STR_190
 21619  0045D0  0100               	movlb	0	; () banked
 21620  0045D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21621  0045D4  0EC9               	movlw	low STR_190
 21622  0045D6  6F61               	movwf	?_putsUSART& (0+255),b
 21623  0045D8  ECBC  F00A         	call	_putsUSART	;wreg free
 21624                           
 21625                           ;main.c: 2072: return 1;
 21626  0045DC  0E01               	movlw	1
 21627  0045DE  D001               	goto	l1006
 21628  0045E0                     l15966:
 21629                           
 21630                           ; BSR set to: 0
 21631                           ;main.c: 2073: }
 21632                           ;main.c: 2075: return 0;
 21633  0045E0  0E00               	movlw	0
 21634  0045E2                     l1006:
 21635  0045E2  0012               	return	
 21636  0045E4                     __end_of_receivePrintEventVerbose:
 21637                           	opt stack 0
 21638                           tblptru	equ	0xFF8
 21639                           tblptrh	equ	0xFF7
 21640                           tblptrl	equ	0xFF6
 21641                           tablat	equ	0xFF5
 21642                           prodh	equ	0xFF4
 21643                           prodl	equ	0xFF3
 21644                           intcon	equ	0xFF2
 21645                           indf0	equ	0xFEF
 21646                           postinc0	equ	0xFEE
 21647                           fsr0h	equ	0xFEA
 21648                           fsr0l	equ	0xFE9
 21649                           wreg	equ	0xFE8
 21650                           indf1	equ	0xFE7
 21651                           postinc1	equ	0xFE6
 21652                           postdec1	equ	0xFE5
 21653                           fsr1h	equ	0xFE2
 21654                           fsr1l	equ	0xFE1
 21655                           indf2	equ	0xFDF
 21656                           postinc2	equ	0xFDE
 21657                           postdec2	equ	0xFDD
 21658                           plusw2	equ	0xFDB
 21659                           fsr2h	equ	0xFDA
 21660                           fsr2l	equ	0xFD9
 21661                           status	equ	0xFD8
 21662                           
 21663 ;; *************** function _getVSCPFrame *****************
 21664 ;; Defined at:
 21665 ;;		line 3253 in file "main.c"
 21666 ;; Parameters:    Size  Location     Type
 21667 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21668 ;;		 -> vscpClass(2), 
 21669 ;;  pvscptype       1   19[BANK0 ] PTR unsigned char 
 21670 ;;		 -> vscpType(1), 
 21671 ;;  pNodeId         1   20[BANK0 ] PTR unsigned char 
 21672 ;;		 -> vscpNodeId(1), 
 21673 ;;  pPriority       1   21[BANK0 ] PTR unsigned char 
 21674 ;;		 -> vscpPriority(1), 
 21675 ;;  pSize           1   22[BANK0 ] PTR unsigned char 
 21676 ;;		 -> vscpSize(1), 
 21677 ;;  pData           2   23[BANK0 ] PTR unsigned char 
 21678 ;;		 -> vscpData(8), 
 21679 ;; Auto vars:     Size  Location     Type
 21680 ;;  pvscpclass      1   25[BANK0 ] PTR unsigned short 
 21681 ;;		 -> vscpClass(2), 
 21682 ;;  id              4   26[BANK0 ] unsigned long 
 21683 ;; Return value:  Size  Location     Type
 21684 ;;                  1    wreg      unsigned char 
 21685 ;; Registers used:
 21686 ;;		wreg
 21687 ;; Tracked objects:
 21688 ;;		On entry : F/0
 21689 ;;		On exit  : F/0
 21690 ;;		Unchanged: F/0
 21691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21692 ;;      Params:         0       6       0       0       0       0       0
 21693 ;;      Locals:         0       5       0       0       0       0       0
 21694 ;;      Temps:          0       0       0       0       0       0       0
 21695 ;;      Totals:         0      11       0       0       0       0       0
 21696 ;;Total ram usage:       11 bytes
 21697 ;; Hardware stack levels used:    1
 21698 ;; Hardware stack levels required when called:    5
 21699 ;; This function calls:
 21700 ;;		_getCANFrame
 21701 ;; This function is called by:
 21702 ;;		_receivePrintEventVerbose
 21703 ;;		_readRegister
 21704 ;;		_readRegisterExtended
 21705 ;;		_writeRegisterExtended
 21706 ;; This function uses a non-reentrant model
 21707 ;;
 21708                           
 21709                           	psect	text52
 21710  000FA0                     __ptext52:
 21711                           	opt stack 0
 21712  000FA0                     _getVSCPFrame:
 21713                           	opt stack 21
 21714                           
 21715                           ; BSR set to: 0
 21716                           
 21717                           ; BSR set to: 0
 21718                           ;main.c: 3254: uint32_t id;
 21719                           ;main.c: 3256: return 0;
 21720                           
 21721                           ;incstack = 0
 21722                           ;incstack = 0
 21723  000FA0  0C00               	retlw	0
 21724  000FA2                     __end_of_getVSCPFrame:
 21725                           	opt stack 0
 21726                           tblptru	equ	0xFF8
 21727                           tblptrh	equ	0xFF7
 21728                           tblptrl	equ	0xFF6
 21729                           tablat	equ	0xFF5
 21730                           prodh	equ	0xFF4
 21731                           prodl	equ	0xFF3
 21732                           intcon	equ	0xFF2
 21733                           indf0	equ	0xFEF
 21734                           postinc0	equ	0xFEE
 21735                           fsr0h	equ	0xFEA
 21736                           fsr0l	equ	0xFE9
 21737                           wreg	equ	0xFE8
 21738                           indf1	equ	0xFE7
 21739                           postinc1	equ	0xFE6
 21740                           postdec1	equ	0xFE5
 21741                           fsr1h	equ	0xFE2
 21742                           fsr1l	equ	0xFE1
 21743                           indf2	equ	0xFDF
 21744                           postinc2	equ	0xFDE
 21745                           postdec2	equ	0xFDD
 21746                           plusw2	equ	0xFDB
 21747                           fsr2h	equ	0xFDA
 21748                           fsr2l	equ	0xFD9
 21749                           status	equ	0xFD8
 21750                           
 21751 ;; *************** function _getCANFrame *****************
 21752 ;; Defined at:
 21753 ;;		line 3290 in file "main.c"
 21754 ;; Parameters:    Size  Location     Type
 21755 ;;  pid             1    wreg     PTR unsigned long 
 21756 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21757 ;;  pdlc            2   14[BANK0 ] PTR unsigned char 
 21758 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21759 ;;  pdata           2   16[BANK0 ] PTR unsigned char 
 21760 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21761 ;; Auto vars:     Size  Location     Type
 21762 ;;  pid             1   18[BANK0 ] PTR unsigned long 
 21763 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21764 ;; Return value:  Size  Location     Type
 21765 ;;                  1    wreg      unsigned char 
 21766 ;; Registers used:
 21767 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21768 ;; Tracked objects:
 21769 ;;		On entry : F/0
 21770 ;;		On exit  : F/0
 21771 ;;		Unchanged: 0/0
 21772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21773 ;;      Params:         0       4       0       0       0       0       0
 21774 ;;      Locals:         0       1       0       0       0       0       0
 21775 ;;      Temps:          0       0       0       0       0       0       0
 21776 ;;      Totals:         0       5       0       0       0       0       0
 21777 ;;Total ram usage:        5 bytes
 21778 ;; Hardware stack levels used:    1
 21779 ;; Hardware stack levels required when called:    4
 21780 ;; This function calls:
 21781 ;;		_fifo_read
 21782 ;; This function is called by:
 21783 ;;		_receiveSendEventCANAL
 21784 ;;		_receiveSendMultiEventCANAL
 21785 ;;		_receiveSendEventSLCAN
 21786 ;;		_getVSCPFrame
 21787 ;; This function uses a non-reentrant model
 21788 ;;
 21789                           
 21790                           	psect	text53
 21791  001FC0                     __ptext53:
 21792                           	opt stack 0
 21793  001FC0                     _getCANFrame:
 21794                           	opt stack 23
 21795                           
 21796                           ; BSR set to: 0
 21797                           ;incstack = 0
 21798                           ;incstack = 0
 21799                           ;getCANFrame@pid stored from wreg
 21800  001FC0  CFE8 F072          	movff	wreg,getCANFrame@pid
 21801                           
 21802                           ; BSR set to: 0
 21803                           ;main.c: 3311: if ( fifo_canrxcount ) {
 21804  001FC4  5031               	movf	_fifo_canrxcount,w,c	;volatile
 21805  001FC6  E013               	bz	l17308
 21806                           
 21807                           ; BSR set to: 0
 21808                           ;main.c: 3314: (INTCONbits.GIE = 0);
 21809  001FC8  9EF2               	bcf	intcon,7,c	;volatile
 21810                           
 21811                           ; BSR set to: 0
 21812                           ;main.c: 3315: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21813  001FCA  0E01               	movlw	high _canInputFifo
 21814  001FCC  0100               	movlb	0	; () banked
 21815  001FCE  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21816  001FD0  0ECD               	movlw	low _canInputFifo
 21817  001FD2  6F60               	movwf	?_fifo_read& (0+255),b
 21818  001FD4  C072  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21819  001FD8  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21820  001FDA  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21821  001FDC  0E04               	movlw	4
 21822  001FDE  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21823  001FE0  EC78  F012         	call	_fifo_read	;wreg free
 21824  001FE4  5160               	movf	?_fifo_read& (0+255),w,b
 21825  001FE6  0A04               	xorlw	4
 21826  001FE8  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21827  001FEA  E003               	bz	l17312
 21828  001FEC                     l17306:
 21829                           
 21830                           ; BSR set to: 0
 21831                           ;main.c: 3316: (INTCONbits.GIE = 1);
 21832  001FEC  8EF2               	bsf	intcon,7,c	;volatile
 21833  001FEE                     l17308:
 21834                           
 21835                           ; BSR set to: 0
 21836                           ;main.c: 3317: return 0;
 21837  001FEE  0E00               	movlw	0
 21838  001FF0  D03A               	goto	l1358
 21839  001FF2                     l17312:
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;main.c: 3318: }
 21843                           ;main.c: 3321: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21844  001FF2  0E01               	movlw	high _canInputFifo
 21845  001FF4  0100               	movlb	0	; () banked
 21846  001FF6  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21847  001FF8  0ECD               	movlw	low _canInputFifo
 21848  001FFA  6F60               	movwf	?_fifo_read& (0+255),b
 21849  001FFC  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21850  002000  C06F  F063         	movff	getCANFrame@pdlc+1,?_fifo_read+3
 21851  002004  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21852  002006  0E01               	movlw	1
 21853  002008  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21854  00200A  EC78  F012         	call	_fifo_read	;wreg free
 21855  00200E  0560               	decf	?_fifo_read& (0+255),w,b
 21856  002010  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21857  002012  E1EC               	bnz	l17306
 21858                           
 21859                           ; BSR set to: 0
 21860                           ;main.c: 3324: }
 21861                           ;main.c: 3327: if ( *pdlc > 8 ) {
 21862  002014  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21863  002018  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21864  00201C  0E08               	movlw	8
 21865  00201E  64DF               	cpfsgt	indf2,c
 21866  002020  D005               	goto	l17324
 21867                           
 21868                           ; BSR set to: 0
 21869                           ;main.c: 3328: *pdlc = 0;
 21870  002022  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21871  002026  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21872  00202A  6ADF               	clrf	indf2,c
 21873  00202C                     l17324:
 21874                           
 21875                           ; BSR set to: 0
 21876                           ;main.c: 3329: }
 21877                           ;main.c: 3332: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21878  00202C  0E01               	movlw	high _canInputFifo
 21879  00202E  0100               	movlb	0	; () banked
 21880  002030  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21881  002032  0ECD               	movlw	low _canInputFifo
 21882  002034  6F60               	movwf	?_fifo_read& (0+255),b
 21883  002036  C070  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21884  00203A  C071  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21885  00203E  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21886  002042  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21887  002046  50DF               	movf	indf2,w,c
 21888  002048  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21889  00204A  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21890  00204C  EC78  F012         	call	_fifo_read	;wreg free
 21891  002050  C06E  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21892  002054  C06F  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21893  002058  50DF               	movf	indf2,w,c
 21894  00205A  1960               	xorwf	?_fifo_read& (0+255),w,b
 21895  00205C  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21896  00205E  E1C6               	bnz	l17306
 21897                           
 21898                           ; BSR set to: 0
 21899                           ;main.c: 3335: }
 21900                           ;main.c: 3337: fifo_canrxcount--;
 21901  002060  0631               	decf	_fifo_canrxcount,f,c	;volatile
 21902                           
 21903                           ; BSR set to: 0
 21904                           ;main.c: 3339: (INTCONbits.GIE = 1);
 21905  002062  8EF2               	bsf	intcon,7,c	;volatile
 21906                           
 21907                           ; BSR set to: 0
 21908                           ;main.c: 3341: return 1;
 21909  002064  0E01               	movlw	1
 21910  002066                     l1358:
 21911                           
 21912                           ; BSR set to: 0
 21913  002066  0012               	return	
 21914  002068                     __end_of_getCANFrame:
 21915                           	opt stack 0
 21916                           tblptru	equ	0xFF8
 21917                           tblptrh	equ	0xFF7
 21918                           tblptrl	equ	0xFF6
 21919                           tablat	equ	0xFF5
 21920                           prodh	equ	0xFF4
 21921                           prodl	equ	0xFF3
 21922                           intcon	equ	0xFF2
 21923                           indf0	equ	0xFEF
 21924                           postinc0	equ	0xFEE
 21925                           fsr0h	equ	0xFEA
 21926                           fsr0l	equ	0xFE9
 21927                           wreg	equ	0xFE8
 21928                           indf1	equ	0xFE7
 21929                           postinc1	equ	0xFE6
 21930                           postdec1	equ	0xFE5
 21931                           fsr1h	equ	0xFE2
 21932                           fsr1l	equ	0xFE1
 21933                           indf2	equ	0xFDF
 21934                           postinc2	equ	0xFDE
 21935                           postdec2	equ	0xFDD
 21936                           plusw2	equ	0xFDB
 21937                           fsr2h	equ	0xFDA
 21938                           fsr2l	equ	0xFD9
 21939                           status	equ	0xFD8
 21940                           
 21941 ;; *************** function _fifo_read *****************
 21942 ;; Defined at:
 21943 ;;		line 29 in file "fifo.c"
 21944 ;; Parameters:    Size  Location     Type
 21945 ;;  f               2    0[BANK0 ] PTR struct .
 21946 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21947 ;;  buf             2    2[BANK0 ] PTR const void 
 21948 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21949 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21950 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21951 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21952 ;;  nbytes          2    4[BANK0 ] unsigned short 
 21953 ;; Auto vars:     Size  Location     Type
 21954 ;;  i               2   12[BANK0 ] unsigned short 
 21955 ;;  p               2   10[BANK0 ] PTR unsigned char 
 21956 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21957 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21958 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21959 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21960 ;; Return value:  Size  Location     Type
 21961 ;;                  2    0[BANK0 ] unsigned short 
 21962 ;; Registers used:
 21963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21964 ;; Tracked objects:
 21965 ;;		On entry : F/0
 21966 ;;		On exit  : F/0
 21967 ;;		Unchanged: 0/0
 21968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21969 ;;      Params:         0       6       0       0       0       0       0
 21970 ;;      Locals:         0       4       0       0       0       0       0
 21971 ;;      Temps:          0       4       0       0       0       0       0
 21972 ;;      Totals:         0      14       0       0       0       0       0
 21973 ;;Total ram usage:       14 bytes
 21974 ;; Hardware stack levels used:    1
 21975 ;; Hardware stack levels required when called:    3
 21976 ;; This function calls:
 21977 ;;		Nothing
 21978 ;; This function is called by:
 21979 ;;		_main
 21980 ;;		_doModeVerbose
 21981 ;;		_doModeVscp
 21982 ;;		_doModeSLCAN
 21983 ;;		_getCANFrame
 21984 ;; This function uses a non-reentrant model
 21985 ;;
 21986                           
 21987                           	psect	text54
 21988  0024F0                     __ptext54:
 21989                           	opt stack 0
 21990  0024F0                     _fifo_read:
 21991                           	opt stack 23
 21992                           
 21993                           ; BSR set to: 0
 21994                           ;fifo.c: 30: uint16_t i;
 21995                           ;fifo.c: 31: uint8_t *p;
 21996                           ;fifo.c: 32: p = buf;
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;incstack = 0
 22000                           ;incstack = 0
 22001  0024F0  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 22002  0024F4  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 22003                           
 22004                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 22005  0024F8  6B6C               	clrf	fifo_read@i& (0+255),b
 22006  0024FA  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 22007  0024FC  D04A               	goto	l10832
 22008  0024FE                     l10818:
 22009                           
 22010                           ; BSR set to: 0
 22011                           ;fifo.c: 36: if ( f->tail != f->head ) {
 22012  0024FE  EE20 F002          	lfsr	2,2
 22013  002502  D851               	call	PL38	;call to abstracted procedure
 22014  002504  18E5               	xorwf	postdec1,w,c
 22015  002506  CFDF FFE8          	movff	indf2,wreg
 22016  00250A  B4D8               	btfsc	status,2,c
 22017  00250C  18E7               	xorwf	indf1,w,c
 22018  00250E  E03A               	bz	l1609
 22019                           
 22020                           ; BSR set to: 0
 22021                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 22022  002510  EE20 F004          	lfsr	2,4
 22023  002514  5160               	movf	fifo_read@f& (0+255),w,b
 22024  002516  26D9               	addwf	fsr2l,f,c
 22025  002518  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22026  00251A  22DA               	addwfc	fsr2h,f,c
 22027  00251C  CFDE F066          	movff	postinc2,??_fifo_read
 22028  002520  CFDD F067          	movff	postdec2,??_fifo_read+1
 22029  002524  C060  FFD9         	movff	fifo_read@f,fsr2l
 22030  002528  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 22031  00252C  CFDE F068          	movff	postinc2,??_fifo_read+2
 22032  002530  CFDD F069          	movff	postdec2,??_fifo_read+3
 22033  002534  5166               	movf	??_fifo_read& (0+255),w,b
 22034  002536  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 22035  002538  6ED9               	movwf	fsr2l,c
 22036  00253A  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 22037  00253C  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 22038  00253E  6EDA               	movwf	fsr2h,c
 22039  002540  C06A  FFE1         	movff	fifo_read@p,fsr1l
 22040  002544  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 22041  002548  CFDF FFE7          	movff	indf2,indf1
 22042                           
 22043                           ; BSR set to: 0
 22044  00254C  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 22045  00254E  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 22046                           
 22047                           ; BSR set to: 0
 22048                           ;fifo.c: 38: f->tail++;
 22049  002550  EE20 F004          	lfsr	2,4
 22050  002554  5160               	movf	fifo_read@f& (0+255),w,b
 22051  002556  26D9               	addwf	fsr2l,f,c
 22052  002558  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22053  00255A  22DA               	addwfc	fsr2h,f,c
 22054  00255C  2ADE               	incf	postinc2,f,c
 22055  00255E  0E00               	movlw	0
 22056  002560  22DD               	addwfc	postdec2,f,c
 22057                           
 22058                           ; BSR set to: 0
 22059                           ;fifo.c: 39: if (f->tail >= f->size) {
 22060  002562  EE20 F006          	lfsr	2,6
 22061  002566  D81F               	call	PL38	;call to abstracted procedure
 22062  002568  5CE5               	subwf	postdec1,w,c
 22063  00256A  E102               	bnz	u12965
 22064  00256C  50DF               	movf	indf2,w,c
 22065  00256E  5CE7               	subwf	indf1,w,c
 22066  002570                     u12965:
 22067  002570  E30E               	bnc	l10830
 22068                           
 22069                           ; BSR set to: 0
 22070                           ;fifo.c: 40: f->tail = 0;
 22071  002572  EE20 F004          	lfsr	2,4
 22072  002576  5160               	movf	fifo_read@f& (0+255),w,b
 22073  002578  26D9               	addwf	fsr2l,f,c
 22074  00257A  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22075  00257C  22DA               	addwfc	fsr2h,f,c
 22076  00257E  6ADE               	clrf	postinc2,c
 22077  002580  6ADD               	clrf	postdec2,c
 22078  002582  D005               	goto	l10830
 22079  002584                     l1609:
 22080                           
 22081                           ; BSR set to: 0
 22082                           ;fifo.c: 43: else {
 22083                           ;fifo.c: 44: return i;
 22084  002584  C06C  F060         	movff	fifo_read@i,?_fifo_read
 22085  002588  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 22086  00258C  D00B               	goto	l1612
 22087  00258E                     l10830:
 22088                           
 22089                           ; BSR set to: 0
 22090  00258E  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 22091  002590  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 22092  002592                     l10832:
 22093                           
 22094                           ; BSR set to: 0
 22095  002592  5164               	movf	fifo_read@nbytes& (0+255),w,b
 22096  002594  5D6C               	subwf	fifo_read@i& (0+255),w,b
 22097  002596  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 22098  002598  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 22099  00259A  E3B1               	bnc	l10818
 22100                           
 22101                           ; BSR set to: 0
 22102                           ;fifo.c: 45: }
 22103                           ;fifo.c: 47: }
 22104                           ;fifo.c: 49: return nbytes;
 22105  00259C  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 22106  0025A0  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 22107  0025A4                     l1612:
 22108                           
 22109                           ; BSR set to: 0
 22110  0025A4  0012               	return	
 22111  0025A6                     __end_of_fifo_read:
 22112                           	opt stack 0
 22113  0025A6                     PL38:
 22114                           	opt stack 23
 22115  0025A6  5160               	movf	fifo_read@f& (0+255),w,b
 22116  0025A8  26D9               	addwf	fsr2l,f,c
 22117  0025AA  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22118  0025AC  22DA               	addwfc	fsr2h,f,c
 22119  0025AE  EE10 F004          	lfsr	1,4
 22120  0025B2  5160               	movf	fifo_read@f& (0+255),w,b
 22121  0025B4  26E1               	addwf	fsr1l,f,c
 22122  0025B6  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22123  0025B8  22E2               	addwfc	fsr1h,f,c
 22124  0025BA  52E6               	movf	postinc1,f,c
 22125  0025BC  52DE               	movf	postinc2,f,c
 22126  0025BE  50DD               	movf	postdec2,w,c
 22127  0025C0  0012               	return	
 22128  0025C2                     __end_ofPL38:
 22129                           	opt stack 0
 22130                           tblptru	equ	0xFF8
 22131                           tblptrh	equ	0xFF7
 22132                           tblptrl	equ	0xFF6
 22133                           tablat	equ	0xFF5
 22134                           prodh	equ	0xFF4
 22135                           prodl	equ	0xFF3
 22136                           intcon	equ	0xFF2
 22137                           indf0	equ	0xFEF
 22138                           postinc0	equ	0xFEE
 22139                           fsr0h	equ	0xFEA
 22140                           fsr0l	equ	0xFE9
 22141                           wreg	equ	0xFE8
 22142                           indf1	equ	0xFE7
 22143                           postinc1	equ	0xFE6
 22144                           postdec1	equ	0xFE5
 22145                           fsr1h	equ	0xFE2
 22146                           fsr1l	equ	0xFE1
 22147                           indf2	equ	0xFDF
 22148                           postinc2	equ	0xFDE
 22149                           postdec2	equ	0xFDD
 22150                           plusw2	equ	0xFDB
 22151                           fsr2h	equ	0xFDA
 22152                           fsr2l	equ	0xFD9
 22153                           status	equ	0xFD8
 22154                           
 22155 ;; *************** function _sprintf *****************
 22156 ;; Defined at:
 22157 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 22158 ;; Parameters:    Size  Location     Type
 22159 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 22160 ;;		 -> wrkbuf(80), 
 22161 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 22162 ;;		 -> STR_232(3), STR_231(7), STR_225(3), STR_224(7), 
 22163 ;;		 -> STR_221(4), STR_220(8), STR_217(4), STR_216(8), 
 22164 ;;		 -> STR_213(4), STR_212(8), STR_209(4), STR_208(8), 
 22165 ;;		 -> STR_205(4), STR_204(7), STR_201(4), STR_200(7), 
 22166 ;;		 -> STR_197(4), STR_196(7), STR_193(4), STR_192(7), 
 22167 ;;		 -> STR_187(3), STR_186(7), STR_184(3), STR_183(7), 
 22168 ;;		 -> STR_181(3), STR_180(7), STR_178(3), STR_177(7), 
 22169 ;;		 -> STR_175(3), STR_174(7), STR_172(3), STR_171(7), 
 22170 ;;		 -> STR_101(3), STR_100(7), STR_96(4), STR_95(8), 
 22171 ;;		 -> STR_92(4), STR_91(8), STR_77(3), STR_76(7), 
 22172 ;;		 -> STR_75(3), STR_74(7), STR_72(6), STR_71(10), 
 22173 ;;		 -> STR_66(3), STR_65(7), STR_63(3), STR_62(7), 
 22174 ;;		 -> STR_61(3), STR_60(7), STR_58(6), STR_57(10), 
 22175 ;; Auto vars:     Size  Location     Type
 22176 ;;  idx             1   33[BANK0 ] unsigned char 
 22177 ;;  _val            4   45[BANK0 ] struct .
 22178 ;;  flag            2   50[BANK0 ] unsigned short 
 22179 ;;  width           2   43[BANK0 ] int 
 22180 ;;  prec            2   41[BANK0 ] int 
 22181 ;;  c               1   49[BANK0 ] char 
 22182 ;;  ap              1   40[BANK0 ] PTR void [1]
 22183 ;;		 -> ?_sprintf(2), 
 22184 ;; Return value:  Size  Location     Type
 22185 ;;                  2   22[BANK0 ] int 
 22186 ;; Registers used:
 22187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22188 ;; Tracked objects:
 22189 ;;		On entry : F/0
 22190 ;;		On exit  : F/0
 22191 ;;		Unchanged: 0/0
 22192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22193 ;;      Params:         0       8       0       0       0       0       0
 22194 ;;      Locals:         0      19       0       0       0       0       0
 22195 ;;      Temps:          0       3       0       0       0       0       0
 22196 ;;      Totals:         0      30       0       0       0       0       0
 22197 ;;Total ram usage:       30 bytes
 22198 ;; Hardware stack levels used:    1
 22199 ;; Hardware stack levels required when called:    4
 22200 ;; This function calls:
 22201 ;;		_isdigit
 22202 ;;		___lldiv
 22203 ;;		___llmod
 22204 ;;		___wmul
 22205 ;; This function is called by:
 22206 ;;		_doModeVerbose
 22207 ;;		_receivePrintEventVerbose
 22208 ;;		_printStatistics
 22209 ;;		_printErrors
 22210 ;; This function uses a non-reentrant model
 22211 ;;
 22212                           
 22213                           	psect	text55
 22214  004C7E                     __ptext55:
 22215                           	opt stack 0
 22216  004C7E                     _sprintf:
 22217                           	opt stack 24
 22218                           
 22219                           ; BSR set to: 0
 22220                           ;doprnt.c: 494: va_list ap;
 22221                           ;doprnt.c: 499: signed char c;
 22222                           ;doprnt.c: 501: int width;
 22223                           ;doprnt.c: 504: int prec;
 22224                           ;doprnt.c: 508: unsigned short flag;
 22225                           ;doprnt.c: 527: union {
 22226                           ;doprnt.c: 528: unsigned long _val;
 22227                           ;doprnt.c: 529: struct {
 22228                           ;doprnt.c: 530: const char * _cp;
 22229                           ;doprnt.c: 531: unsigned _len;
 22230                           ;doprnt.c: 532: } _str;
 22231                           ;doprnt.c: 533: } _val;
 22232                           ;doprnt.c: 542: *ap = __va_start();
 22233                           
 22234                           ; BSR set to: 0
 22235                           ;incstack = 0
 22236                           ;incstack = 0
 22237  004C7E  0E7A               	movlw	low (?_sprintf+4)
 22238  004C80  6F88               	movwf	sprintf@ap& (0+255),b
 22239                           
 22240                           ;doprnt.c: 545: while(c = *f++) {
 22241  004C82  D32C               	goto	l16666
 22242  004C84                     l16332:
 22243                           
 22244                           ; BSR set to: 0
 22245                           ;doprnt.c: 547: if(c != '%')
 22246  004C84  5191               	movf	sprintf@c& (0+255),w,b
 22247  004C86  0A25               	xorlw	37
 22248  004C88  E009               	bz	l1696
 22249                           
 22250                           ; BSR set to: 0
 22251                           ;doprnt.c: 549: {
 22252                           ;doprnt.c: 550: ((*sp++ = (c)));
 22253  004C8A  C076  FFD9         	movff	sprintf@sp,fsr2l
 22254  004C8E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22255  004C92  C091  FFDF         	movff	sprintf@c,indf2
 22256                           
 22257                           ; BSR set to: 0
 22258  004C96  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22259  004C98  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22260                           
 22261                           ;doprnt.c: 551: continue;
 22262  004C9A  D320               	goto	l16666
 22263  004C9C                     l1696:
 22264                           
 22265                           ; BSR set to: 0
 22266                           ;doprnt.c: 552: }
 22267                           ;doprnt.c: 555: width = 0;
 22268  004C9C  6B8B               	clrf	sprintf@width& (0+255),b
 22269  004C9E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22270                           
 22271                           ;doprnt.c: 557: flag = 0;
 22272  004CA0  6B92               	clrf	sprintf@flag& (0+255),b
 22273  004CA2  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22274  004CA4  D009               	goto	l16348
 22275  004CA6                     l16338:
 22276                           
 22277                           ; BSR set to: 0
 22278                           ;doprnt.c: 563: flag |= 0x08;
 22279  004CA6  8792               	bsf	sprintf@flag& (0+255),3,b
 22280  004CA8  D005               	goto	L38
 22281  004CAA                     l16340:
 22282                           
 22283                           ; BSR set to: 0
 22284                           ;doprnt.c: 570: flag |= 0x01;
 22285  004CAA  8192               	bsf	sprintf@flag& (0+255),0,b
 22286  004CAC  D003               	goto	L38
 22287  004CAE                     l16342:
 22288                           
 22289                           ; BSR set to: 0
 22290                           ;doprnt.c: 583: flag |= 0x800;
 22291  004CAE  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22292  004CB0  D001               	goto	L38
 22293  004CB2                     l16344:
 22294                           
 22295                           ; BSR set to: 0
 22296                           ;doprnt.c: 589: flag |= 0x04;
 22297  004CB2  8592               	bsf	sprintf@flag& (0+255),2,b
 22298  004CB4                     L38:
 22299                           
 22300                           ;doprnt.c: 590: f++;
 22301  004CB4  4B78               	infsnz	sprintf@f& (0+255),f,b
 22302  004CB6  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22303  004CB8                     l16348:
 22304                           
 22305                           ; BSR set to: 0
 22306  004CB8  C078  FFF6         	movff	sprintf@f,tblptrl
 22307  004CBC  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22308  004CC0  0008               	tblrd		*
 22309  004CC2  50F5               	movf	tablat,w,c
 22310                           
 22311                           ; Switch size 1, requested type "space"
 22312                           ; Number of cases is 4, Range of values is 32 to 48
 22313                           ; switch strategies available:
 22314                           ; Name         Instructions Cycles
 22315                           ; simple_byte           13     7 (average)
 22316                           ;	Chosen strategy is simple_byte
 22317  004CC4  0A20               	xorlw	32	; case 32
 22318  004CC6  E0F1               	bz	l16340
 22319  004CC8  0A03               	xorlw	3	; case 35
 22320  004CCA  E0F1               	bz	l16342
 22321  004CCC  0A0E               	xorlw	14	; case 45
 22322  004CCE  E0EB               	bz	l16338
 22323  004CD0  0A1D               	xorlw	29	; case 48
 22324  004CD2  E0EF               	bz	l16344
 22325                           
 22326                           ; BSR set to: 0
 22327                           ;doprnt.c: 602: if(flag & 0x08)
 22328  004CD4  B792               	btfsc	sprintf@flag& (0+255),3,b
 22329                           
 22330                           ; BSR set to: 0
 22331                           ;doprnt.c: 603: flag &= ~0x04;
 22332  004CD6  9592               	bcf	sprintf@flag& (0+255),2,b
 22333                           
 22334                           ; BSR set to: 0
 22335                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22336  004CD8  C078  FFF6         	movff	sprintf@f,tblptrl
 22337  004CDC  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22338  004CE0  0008               	tblrd		*
 22339  004CE2  50F5               	movf	tablat,w,c
 22340  004CE4  EC44  F008         	call	_isdigit
 22341  004CE8  E325               	bnc	l16364
 22342                           
 22343                           ; BSR set to: 0
 22344                           ;doprnt.c: 607: width = 0;
 22345  004CEA  6B8B               	clrf	sprintf@width& (0+255),b
 22346  004CEC  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22347  004CEE                     l16356:
 22348                           
 22349                           ; BSR set to: 0
 22350                           ;doprnt.c: 609: width *= 10;
 22351  004CEE  C08B  F060         	movff	sprintf@width,?___wmul
 22352  004CF2  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22353  004CF6  6B63               	clrf	(?___wmul+3)& (0+255),b
 22354  004CF8  0E0A               	movlw	10
 22355  004CFA  6F62               	movwf	(?___wmul+2)& (0+255),b
 22356  004CFC  EC99  F008         	call	___wmul	;wreg free
 22357  004D00  C060  F08B         	movff	?___wmul,sprintf@width
 22358  004D04  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22359                           
 22360                           ; BSR set to: 0
 22361                           ;doprnt.c: 610: width += *f++ - '0';
 22362  004D08  C078  FFF6         	movff	sprintf@f,tblptrl
 22363  004D0C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22364  004D10  0008               	tblrd		*
 22365  004D12  CFF5 F07E          	movff	tablat,??_sprintf
 22366  004D16  0ED0               	movlw	208
 22367  004D18  257E               	addwf	??_sprintf& (0+255),w,b
 22368  004D1A  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22369  004D1C  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22370  004D1E  0EFF               	movlw	255
 22371  004D20  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22372  004D22  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22373  004D24  278B               	addwf	sprintf@width& (0+255),f,b
 22374  004D26  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22375  004D28  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22376                           
 22377                           ; BSR set to: 0
 22378                           
 22379                           ; BSR set to: 0
 22380                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22381  004D2A  DB36               	call	PL82	;call to abstracted procedure
 22382  004D2C  EC44  F008         	call	_isdigit
 22383  004D30  E314               	bnc	l16372
 22384  004D32  D7DD               	goto	l16356
 22385  004D34                     l16364:
 22386                           
 22387                           ; BSR set to: 0
 22388  004D34  C078  FFF6         	movff	sprintf@f,tblptrl
 22389  004D38  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22390  004D3C  0008               	tblrd		*
 22391  004D3E  50F5               	movf	tablat,w,c
 22392  004D40  0A2A               	xorlw	42
 22393  004D42  E10B               	bnz	l16372
 22394                           
 22395                           ; BSR set to: 0
 22396                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22397  004D44  5188               	movf	sprintf@ap& (0+255),w,b
 22398  004D46  6ED9               	movwf	fsr2l,c
 22399  004D48  6ADA               	clrf	fsr2h,c
 22400  004D4A  CFDE F08B          	movff	postinc2,sprintf@width
 22401  004D4E  CFDD F08C          	movff	postdec2,sprintf@width+1
 22402                           
 22403                           ; BSR set to: 0
 22404  004D52  0E02               	movlw	2
 22405  004D54  2788               	addwf	sprintf@ap& (0+255),f,b
 22406                           
 22407                           ; BSR set to: 0
 22408                           ;doprnt.c: 615: f++;
 22409  004D56  4B78               	infsnz	sprintf@f& (0+255),f,b
 22410  004D58  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22411  004D5A                     l16372:
 22412                           
 22413                           ; BSR set to: 0
 22414                           ;doprnt.c: 617: }
 22415                           ;doprnt.c: 620: if(*f == '.') {
 22416  004D5A  C078  FFF6         	movff	sprintf@f,tblptrl
 22417  004D5E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22418  004D62  0008               	tblrd		*
 22419  004D64  50F5               	movf	tablat,w,c
 22420  004D66  0A2E               	xorlw	46
 22421  004D68  E137               	bnz	l1712
 22422                           
 22423                           ; BSR set to: 0
 22424                           ;doprnt.c: 621: flag |= 0x4000;
 22425  004D6A  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22426                           
 22427                           ;doprnt.c: 622: f++;
 22428                           
 22429                           ; BSR set to: 0
 22430                           ;doprnt.c: 624: if(*f == '*') {
 22431  004D6C  DB15               	call	PL82	;call to abstracted procedure
 22432  004D6E  0A2A               	xorlw	42
 22433  004D70  E10C               	bnz	l1713
 22434                           
 22435                           ; BSR set to: 0
 22436                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22437  004D72  5188               	movf	sprintf@ap& (0+255),w,b
 22438  004D74  6ED9               	movwf	fsr2l,c
 22439  004D76  6ADA               	clrf	fsr2h,c
 22440  004D78  CFDE F089          	movff	postinc2,sprintf@prec
 22441  004D7C  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22442                           
 22443                           ; BSR set to: 0
 22444  004D80  0E02               	movlw	2
 22445  004D82  2788               	addwf	sprintf@ap& (0+255),f,b
 22446                           
 22447                           ; BSR set to: 0
 22448                           ;doprnt.c: 626: f++;
 22449  004D84  4B78               	infsnz	sprintf@f& (0+255),f,b
 22450  004D86  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22451                           
 22452                           ;doprnt.c: 627: } else
 22453  004D88  D088               	goto	l16442
 22454  004D8A                     l1713:
 22455                           
 22456                           ; BSR set to: 0
 22457                           ;doprnt.c: 629: {
 22458                           ;doprnt.c: 630: prec = 0;
 22459  004D8A  6B89               	clrf	sprintf@prec& (0+255),b
 22460  004D8C  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22461                           
 22462                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22463  004D8E  D01A               	goto	l16388
 22464  004D90                     l16384:
 22465                           
 22466                           ; BSR set to: 0
 22467                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22468  004D90  C089  F060         	movff	sprintf@prec,?___wmul
 22469  004D94  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22470  004D98  6B63               	clrf	(?___wmul+3)& (0+255),b
 22471  004D9A  0E0A               	movlw	10
 22472  004D9C  6F62               	movwf	(?___wmul+2)& (0+255),b
 22473  004D9E  EC99  F008         	call	___wmul	;wreg free
 22474  004DA2  C078  FFF6         	movff	sprintf@f,tblptrl
 22475  004DA6  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22476  004DAA  0008               	tblrd		*
 22477  004DAC  50F5               	movf	tablat,w,c
 22478  004DAE  2760               	addwf	?___wmul& (0+255),f,b
 22479  004DB0  0E00               	movlw	0
 22480  004DB2  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22481  004DB4  0ED0               	movlw	208
 22482  004DB6  2560               	addwf	?___wmul& (0+255),w,b
 22483  004DB8  6F89               	movwf	sprintf@prec& (0+255),b
 22484  004DBA  0EFF               	movlw	255
 22485  004DBC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22486  004DBE  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22487                           
 22488                           ; BSR set to: 0
 22489  004DC0  4B78               	infsnz	sprintf@f& (0+255),f,b
 22490  004DC2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22491  004DC4                     l16388:
 22492                           
 22493                           ; BSR set to: 0
 22494  004DC4  C078  FFF6         	movff	sprintf@f,tblptrl
 22495  004DC8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22496  004DCC  0008               	tblrd		*
 22497  004DCE  50F5               	movf	tablat,w,c
 22498  004DD0  EC44  F008         	call	_isdigit
 22499  004DD4  E362               	bnc	l16442
 22500  004DD6  D7DC               	goto	l16384
 22501  004DD8                     l1712:
 22502                           
 22503                           ; BSR set to: 0
 22504                           ;doprnt.c: 635: prec = 0;
 22505  004DD8  6B89               	clrf	sprintf@prec& (0+255),b
 22506  004DDA  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22507  004DDC  D05E               	goto	l16442
 22508  004DDE                     l16390:
 22509                           
 22510                           ; BSR set to: 0
 22511                           ;doprnt.c: 652: flag |= 0x10;
 22512  004DDE  8992               	bsf	sprintf@flag& (0+255),4,b
 22513                           
 22514                           ;doprnt.c: 653: goto loop;
 22515  004DE0  D05C               	goto	l16442
 22516  004DE2                     l16392:
 22517                           
 22518                           ; BSR set to: 0
 22519                           ;doprnt.c: 700: flag |= 0x40;
 22520  004DE2  8D92               	bsf	sprintf@flag& (0+255),6,b
 22521                           
 22522                           ;doprnt.c: 702: break;
 22523  004DE4  D06F               	goto	l16444
 22524  004DE6                     l16394:
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;doprnt.c: 723: flag |= 0x20;
 22528  004DE6  8B92               	bsf	sprintf@flag& (0+255),5,b
 22529  004DE8                     l1729:
 22530                           
 22531                           ; BSR set to: 0
 22532                           ;doprnt.c: 730: flag |= 0x80;
 22533  004DE8  8F92               	bsf	sprintf@flag& (0+255),7,b
 22534                           
 22535                           ;doprnt.c: 732: break;
 22536  004DEA  D06C               	goto	l16444
 22537  004DEC                     l16396:
 22538                           
 22539                           ; BSR set to: 0
 22540                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22541  004DEC  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22542  004DEE  1189               	iorwf	sprintf@prec& (0+255),w,b
 22543  004DF0  E009               	bz	l16402
 22544                           
 22545                           ; BSR set to: 0
 22546  004DF2  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22547  004DF4  5D89               	subwf	sprintf@prec& (0+255),w,b
 22548  004DF6  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22549  004DF8  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22550  004DFA  E204               	bc	l16402
 22551                           
 22552                           ; BSR set to: 0
 22553                           ;doprnt.c: 763: _val._str._len = prec;
 22554  004DFC  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22555  004E00  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22556  004E04                     l16402:
 22557                           
 22558                           ; BSR set to: 0
 22559                           ;doprnt.c: 766: if(width > _val._str._len)
 22560  004E04  518B               	movf	sprintf@width& (0+255),w,b
 22561  004E06  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22562  004E08  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22563  004E0A  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22564  004E0C  E207               	bc	l1732
 22565                           
 22566                           ; BSR set to: 0
 22567                           ;doprnt.c: 767: width -= _val._str._len;
 22568  004E0E  EE20  F08E         	lfsr	2,sprintf@_val+1
 22569  004E12  50DE               	movf	postinc2,w,c
 22570  004E14  5F8B               	subwf	sprintf@width& (0+255),f,b
 22571  004E16  50DD               	movf	postdec2,w,c
 22572  004E18  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22573  004E1A  D002               	goto	l1733
 22574  004E1C                     l1732:
 22575                           
 22576                           ; BSR set to: 0
 22577                           ;doprnt.c: 768: else
 22578                           ;doprnt.c: 769: width = 0;
 22579  004E1C  6B8B               	clrf	sprintf@width& (0+255),b
 22580  004E1E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22581  004E20                     l1733:
 22582                           
 22583                           ; BSR set to: 0
 22584                           ;doprnt.c: 771: if(!(flag & 0x08))
 22585  004E20  A792               	btfss	sprintf@flag& (0+255),3,b
 22586  004E22  D004               	goto	l16412
 22587  004E24  D015               	goto	l16420
 22588  004E26                     l16408:
 22589                           
 22590                           ; BSR set to: 0
 22591                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22592  004E26  DAB1               	call	PL66	;call to abstracted procedure
 22593                           
 22594                           ; BSR set to: 0
 22595  004E28  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22596  004E2A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22597  004E2C                     l16412:
 22598                           
 22599                           ; BSR set to: 0
 22600  004E2C  078B               	decf	sprintf@width& (0+255),f,b
 22601  004E2E  DAC2               	call	PL112	;call to abstracted procedure
 22602  004E30  B4D8               	btfsc	status,2,c
 22603  004E32  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22604  004E34  E00D               	bz	l16420
 22605  004E36  D7F7               	goto	l16408
 22606  004E38                     l16414:
 22607                           
 22608                           ; BSR set to: 0
 22609                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22610  004E38  518D               	movf	sprintf@_val& (0+255),w,b
 22611  004E3A  6ED9               	movwf	fsr2l,c
 22612  004E3C  6ADA               	clrf	fsr2h,c
 22613  004E3E  C076  FFE1         	movff	sprintf@sp,fsr1l
 22614  004E42  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22615  004E46  CFDF FFE7          	movff	indf2,indf1
 22616                           
 22617                           ; BSR set to: 0
 22618  004E4A  2B8D               	incf	sprintf@_val& (0+255),f,b
 22619                           
 22620                           ; BSR set to: 0
 22621  004E4C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22622  004E4E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22623  004E50                     l16420:
 22624                           
 22625                           ; BSR set to: 0
 22626  004E50  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22627  004E52  A0D8               	btfss	status,0,c
 22628  004E54  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22629  004E56  0100               	movlb	0	; () banked
 22630  004E58  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22631  004E5A  B4D8               	btfsc	status,2,c
 22632  004E5C  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22633  004E5E  E1EC               	bnz	l16414
 22634                           
 22635                           ; BSR set to: 0
 22636                           ;doprnt.c: 779: if(flag & 0x08)
 22637  004E60  B792               	btfsc	sprintf@flag& (0+255),3,b
 22638  004E62  D004               	goto	l16428
 22639  004E64  D23B               	goto	l16666
 22640  004E66                     l16424:
 22641                           
 22642                           ; BSR set to: 0
 22643                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22644  004E66  DA91               	call	PL66	;call to abstracted procedure
 22645                           
 22646                           ; BSR set to: 0
 22647  004E68  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22648  004E6A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22649  004E6C                     l16428:
 22650                           
 22651                           ; BSR set to: 0
 22652  004E6C  078B               	decf	sprintf@width& (0+255),f,b
 22653  004E6E  DAA2               	call	PL112	;call to abstracted procedure
 22654  004E70  B4D8               	btfsc	status,2,c
 22655  004E72  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22656  004E74  E101 D232          	bz	l16666
 22657  004E78  D7F6               	goto	l16424
 22658  004E7A                     l16430:
 22659                           
 22660                           ; BSR set to: 0
 22661                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22662  004E7A  5188               	movf	sprintf@ap& (0+255),w,b
 22663  004E7C  6ED9               	movwf	fsr2l,c
 22664  004E7E  6ADA               	clrf	fsr2h,c
 22665  004E80  50DF               	movf	indf2,w,c
 22666  004E82  6F91               	movwf	sprintf@c& (0+255),b
 22667                           
 22668                           ; BSR set to: 0
 22669  004E84  0E02               	movlw	2
 22670  004E86  2788               	addwf	sprintf@ap& (0+255),f,b
 22671  004E88                     l16434:
 22672                           
 22673                           ; BSR set to: 0
 22674                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22675  004E88  0E91               	movlw	low sprintf@c
 22676  004E8A  6F8D               	movwf	sprintf@_val& (0+255),b
 22677                           
 22678                           ; BSR set to: 0
 22679                           ;doprnt.c: 815: _val._str._len = 1;
 22680  004E8C  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22681  004E8E  0E01               	movlw	1
 22682  004E90  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22683                           
 22684                           ;doprnt.c: 816: goto dostring;
 22685  004E92  D7AC               	goto	l16396
 22686  004E94                     l16438:
 22687                           
 22688                           ; BSR set to: 0
 22689                           ;doprnt.c: 827: flag |= 0xC0;
 22690  004E94  0EC0               	movlw	192
 22691  004E96  1392               	iorwf	sprintf@flag& (0+255),f,b
 22692                           
 22693                           ;doprnt.c: 828: break;
 22694  004E98  D015               	goto	l16444
 22695  004E9A                     l16442:
 22696                           
 22697                           ; BSR set to: 0
 22698  004E9A  DA6C               	call	PL64	;call to abstracted procedure
 22699  004E9C  5191               	movf	sprintf@c& (0+255),w,b
 22700                           
 22701                           ; Switch size 1, requested type "space"
 22702                           ; Number of cases is 9, Range of values is 0 to 120
 22703                           ; switch strategies available:
 22704                           ; Name         Instructions Cycles
 22705                           ; simple_byte           28    15 (average)
 22706                           ;	Chosen strategy is simple_byte
 22707  004E9E  E101 D220          	bz	l16668
 22708  004EA2  0A58               	xorlw	88	; case 88
 22709  004EA4  E0A0               	bz	l16394
 22710  004EA6  0A3B               	xorlw	59	; case 99
 22711  004EA8  E0E8               	bz	l16430
 22712  004EAA  0A07               	xorlw	7	; case 100
 22713  004EAC  E00B               	bz	l16444
 22714  004EAE  0A0D               	xorlw	13	; case 105
 22715  004EB0  E009               	bz	l16444
 22716  004EB2  0A05               	xorlw	5	; case 108
 22717  004EB4  E094               	bz	l16390
 22718  004EB6  0A03               	xorlw	3	; case 111
 22719  004EB8  E094               	bz	l16392
 22720  004EBA  0A1A               	xorlw	26	; case 117
 22721  004EBC  E0EB               	bz	l16438
 22722  004EBE  0A0D               	xorlw	13	; case 120
 22723  004EC0  E093               	bz	l1729
 22724  004EC2  D7E2               	goto	l16434
 22725  004EC4                     l16444:
 22726                           
 22727                           ; BSR set to: 0
 22728                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22729  004EC4  5192               	movf	sprintf@flag& (0+255),w,b
 22730  004EC6  0BC0               	andlw	192
 22731  004EC8  E120               	bnz	l1748
 22732                           
 22733                           ; BSR set to: 0
 22734                           ;doprnt.c: 1260: {
 22735                           ;doprnt.c: 1262: if(flag & 0x10)
 22736  004ECA  A992               	btfss	sprintf@flag& (0+255),4,b
 22737  004ECC  D003               	goto	l16452
 22738                           
 22739                           ; BSR set to: 0
 22740                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22741  004ECE  5188               	movf	sprintf@ap& (0+255),w,b
 22742                           
 22743                           ; BSR set to: 0
 22744  004ED0  DA46               	call	PL56	;call to abstracted procedure
 22745  004ED2  D00D               	goto	L39
 22746  004ED4                     l16452:
 22747                           
 22748                           ; BSR set to: 0
 22749                           ;doprnt.c: 1264: else
 22750                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22751  004ED4  5188               	movf	sprintf@ap& (0+255),w,b
 22752  004ED6  6ED9               	movwf	fsr2l,c
 22753  004ED8  6ADA               	clrf	fsr2h,c
 22754  004EDA  CFDE F08D          	movff	postinc2,sprintf@_val
 22755  004EDE  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22756  004EE2  0E00               	movlw	0
 22757  004EE4  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22758  004EE6  0EFF               	movlw	-1
 22759  004EE8  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22760  004EEA  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22761                           
 22762                           ; BSR set to: 0
 22763  004EEC  0E02               	movlw	2
 22764  004EEE                     L39:
 22765  004EEE  2788               	addwf	sprintf@ap& (0+255),f,b
 22766                           
 22767                           ; BSR set to: 0
 22768                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22769  004EF0  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22770  004EF2  D01F               	goto	l16470
 22771                           
 22772                           ; BSR set to: 0
 22773                           ;doprnt.c: 1269: flag |= 0x03;
 22774  004EF4  0E03               	movlw	3
 22775  004EF6  1392               	iorwf	sprintf@flag& (0+255),f,b
 22776                           
 22777                           ; BSR set to: 0
 22778                           ;doprnt.c: 1270: _val._val = -_val._val;
 22779  004EF8  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22780  004EFA  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22781  004EFC  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22782  004EFE  6D8D               	negf	sprintf@_val& (0+255),b
 22783  004F00  0E00               	movlw	0
 22784  004F02  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22785  004F04  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22786  004F06  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22787  004F08  D014               	goto	l16470
 22788  004F0A                     l1748:
 22789                           
 22790                           ; BSR set to: 0
 22791                           ;doprnt.c: 1275: else
 22792                           ;doprnt.c: 1280: {
 22793                           ;doprnt.c: 1288: if(flag & 0x10)
 22794  004F0A  A992               	btfss	sprintf@flag& (0+255),4,b
 22795  004F0C  D003               	goto	l16466
 22796                           
 22797                           ; BSR set to: 0
 22798                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22799  004F0E  5188               	movf	sprintf@ap& (0+255),w,b
 22800                           
 22801                           ; BSR set to: 0
 22802  004F10  DA26               	call	PL56	;call to abstracted procedure
 22803  004F12  D00E               	goto	L40
 22804  004F14                     l16466:
 22805                           
 22806                           ; BSR set to: 0
 22807                           ;doprnt.c: 1290: else
 22808                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22809  004F14  5188               	movf	sprintf@ap& (0+255),w,b
 22810  004F16  6ED9               	movwf	fsr2l,c
 22811  004F18  6ADA               	clrf	fsr2h,c
 22812  004F1A  CFDE F07E          	movff	postinc2,??_sprintf
 22813  004F1E  CFDD F07F          	movff	postdec2,??_sprintf+1
 22814  004F22  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22815  004F26  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22816  004F2A  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22817  004F2C  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22818                           
 22819                           ; BSR set to: 0
 22820  004F2E  0E02               	movlw	2
 22821  004F30                     L40:
 22822  004F30  2788               	addwf	sprintf@ap& (0+255),f,b
 22823  004F32                     l16470:
 22824                           
 22825                           ; BSR set to: 0
 22826                           ;doprnt.c: 1294: }
 22827                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22828  004F32  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22829  004F34  1189               	iorwf	sprintf@prec& (0+255),w,b
 22830  004F36  E15C               	bnz	l16520
 22831                           
 22832                           ; BSR set to: 0
 22833  004F38  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22834  004F3A  118D               	iorwf	sprintf@_val& (0+255),w,b
 22835  004F3C  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22836  004F3E  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22837  004F40  E157               	bnz	l16520
 22838                           
 22839                           ; BSR set to: 0
 22840                           ;doprnt.c: 1298: prec++;
 22841  004F42  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22842  004F44  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22843  004F46  D054               	goto	l16520
 22844  004F48                     l16476:
 22845                           
 22846                           ; BSR set to: 0
 22847                           ;doprnt.c: 1309: case 0xC0:
 22848                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22849  004F48  0E01               	movlw	1
 22850  004F4A  6F91               	movwf	sprintf@c& (0+255),b
 22851  004F4C                     l16478:
 22852                           
 22853                           ; BSR set to: 0
 22854  004F4C  5191               	movf	sprintf@c& (0+255),w,b
 22855  004F4E  0A0A               	xorlw	10
 22856  004F50  E058               	bz	l16522
 22857                           
 22858                           ; BSR set to: 0
 22859                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22860  004F52  5191               	movf	sprintf@c& (0+255),w,b
 22861  004F54  0D04               	mullw	4
 22862  004F56  0ED6               	movlw	low _dpowers
 22863  004F58  24F3               	addwf	prodl,w,c
 22864  004F5A  6EF6               	movwf	tblptrl,c
 22865  004F5C  0E6B               	movlw	high _dpowers
 22866  004F5E  20F4               	addwfc	prodh,w,c
 22867  004F60  6EF7               	movwf	tblptrh,c
 22868  004F62  0009               	tblrd		*+
 22869  004F64  50F5               	movf	tablat,w,c
 22870  004F66  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22871  004F68  0009               	tblrd		*+
 22872  004F6A  50F5               	movf	tablat,w,c
 22873  004F6C  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22874  004F6E  0009               	tblrd		*+
 22875  004F70  50F5               	movf	tablat,w,c
 22876  004F72  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22877  004F74  0009               	tblrd		*+
 22878  004F76  50F5               	movf	tablat,w,c
 22879  004F78  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22880  004F7A  E343               	bnc	l16522
 22881                           
 22882                           ; BSR set to: 0
 22883  004F7C  2B91               	incf	sprintf@c& (0+255),f,b
 22884  004F7E  D7E6               	goto	l16478
 22885  004F80                     l16490:
 22886                           
 22887                           ; BSR set to: 0
 22888                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22889  004F80  0E01               	movlw	1
 22890  004F82  6F91               	movwf	sprintf@c& (0+255),b
 22891  004F84                     l16492:
 22892                           
 22893                           ; BSR set to: 0
 22894  004F84  5191               	movf	sprintf@c& (0+255),w,b
 22895  004F86  0A08               	xorlw	8
 22896  004F88  E03C               	bz	l16522
 22897                           
 22898                           ; BSR set to: 0
 22899                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22900  004F8A  5191               	movf	sprintf@c& (0+255),w,b
 22901  004F8C  0D04               	mullw	4
 22902  004F8E  0EFE               	movlw	low _hexpowers
 22903  004F90  24F3               	addwf	prodl,w,c
 22904  004F92  6EF6               	movwf	tblptrl,c
 22905  004F94  0E6B               	movlw	high _hexpowers
 22906  004F96  20F4               	addwfc	prodh,w,c
 22907  004F98  6EF7               	movwf	tblptrh,c
 22908  004F9A  0009               	tblrd		*+
 22909  004F9C  50F5               	movf	tablat,w,c
 22910  004F9E  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22911  004FA0  0009               	tblrd		*+
 22912  004FA2  50F5               	movf	tablat,w,c
 22913  004FA4  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22914  004FA6  0009               	tblrd		*+
 22915  004FA8  50F5               	movf	tablat,w,c
 22916  004FAA  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22917  004FAC  0009               	tblrd		*+
 22918  004FAE  50F5               	movf	tablat,w,c
 22919  004FB0  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22920  004FB2  E327               	bnc	l16522
 22921                           
 22922                           ; BSR set to: 0
 22923  004FB4  2B91               	incf	sprintf@c& (0+255),f,b
 22924  004FB6  D7E6               	goto	l16492
 22925  004FB8                     l16504:
 22926                           
 22927                           ; BSR set to: 0
 22928                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22929  004FB8  0E01               	movlw	1
 22930  004FBA  6F91               	movwf	sprintf@c& (0+255),b
 22931  004FBC                     l16506:
 22932                           
 22933                           ; BSR set to: 0
 22934  004FBC  5191               	movf	sprintf@c& (0+255),w,b
 22935  004FBE  0A0C               	xorlw	12
 22936  004FC0  E020               	bz	l16522
 22937                           
 22938                           ; BSR set to: 0
 22939                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22940  004FC2  5191               	movf	sprintf@c& (0+255),w,b
 22941  004FC4  0D04               	mullw	4
 22942  004FC6  0EA6               	movlw	low _octpowers
 22943  004FC8  24F3               	addwf	prodl,w,c
 22944  004FCA  6EF6               	movwf	tblptrl,c
 22945  004FCC  0E6B               	movlw	high _octpowers
 22946  004FCE  20F4               	addwfc	prodh,w,c
 22947  004FD0  6EF7               	movwf	tblptrh,c
 22948  004FD2  0009               	tblrd		*+
 22949  004FD4  50F5               	movf	tablat,w,c
 22950  004FD6  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22951  004FD8  0009               	tblrd		*+
 22952  004FDA  50F5               	movf	tablat,w,c
 22953  004FDC  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22954  004FDE  0009               	tblrd		*+
 22955  004FE0  50F5               	movf	tablat,w,c
 22956  004FE2  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22957  004FE4  0009               	tblrd		*+
 22958  004FE6  50F5               	movf	tablat,w,c
 22959  004FE8  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22960  004FEA  E30B               	bnc	l16522
 22961                           
 22962                           ; BSR set to: 0
 22963  004FEC  2B91               	incf	sprintf@c& (0+255),f,b
 22964  004FEE  D7E6               	goto	l16506
 22965  004FF0                     l16520:
 22966                           
 22967                           ; BSR set to: 0
 22968  004FF0  5192               	movf	sprintf@flag& (0+255),w,b
 22969  004FF2  0BC0               	andlw	192
 22970                           
 22971                           ; Switch size 1, requested type "space"
 22972                           ; Number of cases is 4, Range of values is 0 to 192
 22973                           ; switch strategies available:
 22974                           ; Name         Instructions Cycles
 22975                           ; simple_byte           13     7 (average)
 22976                           ;	Chosen strategy is simple_byte
 22977  004FF4  E0A9               	bz	l16476
 22978  004FF6  0A40               	xorlw	64	; case 64
 22979  004FF8  E0DF               	bz	l16504
 22980  004FFA  0AC0               	xorlw	192	; case 128
 22981  004FFC  E0C1               	bz	l16490
 22982  004FFE  0A40               	xorlw	64	; case 192
 22983  005000  E0A3               	bz	l16476
 22984  005002                     l16522:
 22985                           
 22986                           ; BSR set to: 0
 22987                           ;doprnt.c: 1346: if(c < prec)
 22988  005002  0E80               	movlw	128
 22989  005004  BF91               	btfsc	sprintf@c& (0+255),7,b
 22990  005006  0E7F               	movlw	127
 22991  005008  6F7E               	movwf	??_sprintf& (0+255),b
 22992  00500A  5189               	movf	sprintf@prec& (0+255),w,b
 22993  00500C  5D91               	subwf	sprintf@c& (0+255),w,b
 22994  00500E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22995  005010  0A80               	xorlw	128
 22996  005012  597E               	subwfb	??_sprintf& (0+255),w,b
 22997  005014  E203               	bc	l16526
 22998                           
 22999                           ; BSR set to: 0
 23000                           ;doprnt.c: 1347: c = prec;
 23001  005016  C089  F091         	movff	sprintf@prec,sprintf@c
 23002  00501A  D00F               	goto	l16530
 23003  00501C                     l16526:
 23004                           
 23005                           ; BSR set to: 0
 23006                           ;doprnt.c: 1348: else if(prec < c)
 23007  00501C  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23008  00501E  0A80               	xorlw	128
 23009  005020  6F7E               	movwf	??_sprintf& (0+255),b
 23010  005022  5191               	movf	sprintf@c& (0+255),w,b
 23011  005024  5D89               	subwf	sprintf@prec& (0+255),w,b
 23012  005026  0E80               	movlw	128
 23013  005028  BF91               	btfsc	sprintf@c& (0+255),7,b
 23014  00502A  0E7F               	movlw	127
 23015  00502C  597E               	subwfb	??_sprintf& (0+255),w,b
 23016  00502E  E205               	bc	l16530
 23017                           
 23018                           ; BSR set to: 0
 23019                           ;doprnt.c: 1349: prec = c;
 23020  005030  5191               	movf	sprintf@c& (0+255),w,b
 23021  005032  6F89               	movwf	sprintf@prec& (0+255),b
 23022  005034  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 23023  005036  BF89               	btfsc	sprintf@prec& (0+255),7,b
 23024  005038  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23025  00503A                     l16530:
 23026                           
 23027                           ; BSR set to: 0
 23028                           ;doprnt.c: 1352: if(width && flag & 0x03)
 23029  00503A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23030  00503C  118B               	iorwf	sprintf@width& (0+255),w,b
 23031  00503E  E006               	bz	l16536
 23032                           
 23033                           ; BSR set to: 0
 23034  005040  5192               	movf	sprintf@flag& (0+255),w,b
 23035  005042  0B03               	andlw	3
 23036  005044  E003               	bz	l16536
 23037                           
 23038                           ; BSR set to: 0
 23039                           ;doprnt.c: 1353: width--;
 23040  005046  078B               	decf	sprintf@width& (0+255),f,b
 23041  005048  A0D8               	btfss	status,0,c
 23042  00504A  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23043  00504C                     l16536:
 23044                           
 23045                           ; BSR set to: 0
 23046                           ;doprnt.c: 1355: if(flag & 0x4000) {
 23047  00504C  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 23048  00504E  D010               	goto	l16542
 23049                           
 23050                           ; BSR set to: 0
 23051                           ;doprnt.c: 1356: if(width > prec)
 23052  005050  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23053  005052  0A80               	xorlw	128
 23054  005054  6F7E               	movwf	??_sprintf& (0+255),b
 23055  005056  518B               	movf	sprintf@width& (0+255),w,b
 23056  005058  5D89               	subwf	sprintf@prec& (0+255),w,b
 23057  00505A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23058  00505C  0A80               	xorlw	128
 23059  00505E  597E               	subwfb	??_sprintf& (0+255),w,b
 23060  005060  E205               	bc	l1776
 23061                           
 23062                           ; BSR set to: 0
 23063                           ;doprnt.c: 1357: width -= prec;
 23064  005062  5189               	movf	sprintf@prec& (0+255),w,b
 23065  005064  5F8B               	subwf	sprintf@width& (0+255),f,b
 23066  005066  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 23067  005068  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23068  00506A  D002               	goto	l16542
 23069  00506C                     l1776:
 23070                           
 23071                           ; BSR set to: 0
 23072                           ;doprnt.c: 1358: else
 23073                           ;doprnt.c: 1359: width = 0;
 23074  00506C  6B8B               	clrf	sprintf@width& (0+255),b
 23075  00506E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23076  005070                     l16542:
 23077                           
 23078                           ; BSR set to: 0
 23079                           ;doprnt.c: 1360: }
 23080                           ;doprnt.c: 1364: if((flag & (
 23081                           ;doprnt.c: 1366: 0x04|
 23082                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 23083  005070  0EC4               	movlw	196
 23084  005072  D94D               	call	PL16	;call to abstracted procedure
 23085  005074  0E40               	movlw	64
 23086  005076  B4D8               	btfsc	status,2,c
 23087  005078  197E               	xorwf	??_sprintf& (0+255),w,b
 23088  00507A  E107               	bnz	l16548
 23089                           
 23090                           ; BSR set to: 0
 23091                           ;doprnt.c: 1369: if(width)
 23092  00507C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23093  00507E  118B               	iorwf	sprintf@width& (0+255),w,b
 23094  005080  E018               	bz	l16554
 23095                           
 23096                           ; BSR set to: 0
 23097                           ;doprnt.c: 1370: width--;
 23098  005082  078B               	decf	sprintf@width& (0+255),f,b
 23099  005084  A0D8               	btfss	status,0,c
 23100  005086  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23101  005088  D014               	goto	l16554
 23102  00508A                     l16548:
 23103                           
 23104                           ; BSR set to: 0
 23105                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23106  00508A  0EC0               	movlw	192
 23107  00508C  D940               	call	PL16	;call to abstracted procedure
 23108  00508E  0E80               	movlw	128
 23109  005090  B4D8               	btfsc	status,2,c
 23110  005092  197E               	xorwf	??_sprintf& (0+255),w,b
 23111  005094  E10E               	bnz	l16554
 23112                           
 23113                           ; BSR set to: 0
 23114                           ;doprnt.c: 1379: if(width > 2)
 23115  005096  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23116  005098  0A80               	xorlw	128
 23117  00509A  0F80               	addlw	-128
 23118  00509C  0E03               	movlw	3
 23119  00509E  B4D8               	btfsc	status,2,c
 23120  0050A0  5D8B               	subwf	sprintf@width& (0+255),w,b
 23121  0050A2  E305               	bnc	l1782
 23122                           
 23123                           ; BSR set to: 0
 23124                           ;doprnt.c: 1380: width -= 2;
 23125  0050A4  0EFE               	movlw	254
 23126  0050A6  278B               	addwf	sprintf@width& (0+255),f,b
 23127  0050A8  0EFF               	movlw	255
 23128  0050AA  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 23129  0050AC  D002               	goto	l16554
 23130  0050AE                     l1782:
 23131                           
 23132                           ; BSR set to: 0
 23133                           ;doprnt.c: 1381: else
 23134                           ;doprnt.c: 1382: width = 0;
 23135  0050AE  6B8B               	clrf	sprintf@width& (0+255),b
 23136  0050B0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23137  0050B2                     l16554:
 23138                           
 23139                           ; BSR set to: 0
 23140                           ;doprnt.c: 1383: }
 23141                           ;doprnt.c: 1388: if(width > c)
 23142  0050B2  0E80               	movlw	128
 23143  0050B4  BF91               	btfsc	sprintf@c& (0+255),7,b
 23144  0050B6  0E7F               	movlw	127
 23145  0050B8  6F7E               	movwf	??_sprintf& (0+255),b
 23146  0050BA  518B               	movf	sprintf@width& (0+255),w,b
 23147  0050BC  5D91               	subwf	sprintf@c& (0+255),w,b
 23148  0050BE  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23149  0050C0  0A80               	xorlw	128
 23150  0050C2  597E               	subwfb	??_sprintf& (0+255),w,b
 23151  0050C4  E207               	bc	l1784
 23152                           
 23153                           ; BSR set to: 0
 23154                           ;doprnt.c: 1389: width -= c;
 23155  0050C6  5191               	movf	sprintf@c& (0+255),w,b
 23156  0050C8  5F8B               	subwf	sprintf@width& (0+255),f,b
 23157  0050CA  0E00               	movlw	0
 23158  0050CC  BF91               	btfsc	sprintf@c& (0+255),7,b
 23159  0050CE  0EFF               	movlw	255
 23160  0050D0  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23161  0050D2  D002               	goto	l1785
 23162  0050D4                     l1784:
 23163                           
 23164                           ; BSR set to: 0
 23165                           ;doprnt.c: 1390: else
 23166                           ;doprnt.c: 1391: width = 0;
 23167  0050D4  6B8B               	clrf	sprintf@width& (0+255),b
 23168  0050D6  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23169  0050D8                     l1785:
 23170                           
 23171                           ; BSR set to: 0
 23172                           ;doprnt.c: 1394: if(flag & 0x04) {
 23173  0050D8  A592               	btfss	sprintf@flag& (0+255),2,b
 23174  0050DA  D03C               	goto	l16592
 23175                           
 23176                           ; BSR set to: 0
 23177                           ;doprnt.c: 1399: if(flag & 0x03)
 23178  0050DC  5192               	movf	sprintf@flag& (0+255),w,b
 23179  0050DE  0B03               	andlw	3
 23180  0050E0  E009               	bz	l1787
 23181                           
 23182                           ; BSR set to: 0
 23183                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 23184  0050E2  C076  FFD9         	movff	sprintf@sp,fsr2l
 23185  0050E6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23186  0050EA  0E2D               	movlw	45
 23187  0050EC  6EDF               	movwf	indf2,c
 23188  0050EE                     l16562:
 23189                           
 23190                           ; BSR set to: 0
 23191  0050EE  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23192  0050F0  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23193  0050F2  D022               	goto	l16584
 23194  0050F4                     l1787:
 23195                           
 23196                           ; BSR set to: 0
 23197                           ;doprnt.c: 1403: else
 23198                           ;doprnt.c: 1406: if(flag & 0x01)
 23199  0050F4  A192               	btfss	sprintf@flag& (0+255),0,b
 23200  0050F6  D006               	goto	l16568
 23201                           
 23202                           ; BSR set to: 0
 23203                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 23204  0050F8  C076  FFD9         	movff	sprintf@sp,fsr2l
 23205  0050FC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23206  005100  0E20               	movlw	32
 23207  005102  D7F4               	goto	L41
 23208  005104                     l16568:
 23209                           
 23210                           ; BSR set to: 0
 23211                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23212  005104  0EC0               	movlw	192
 23213  005106  D903               	call	PL16	;call to abstracted procedure
 23214  005108  0E80               	movlw	128
 23215  00510A  B4D8               	btfsc	status,2,c
 23216  00510C  197E               	xorwf	??_sprintf& (0+255),w,b
 23217  00510E  E114               	bnz	l16584
 23218                           
 23219                           ; BSR set to: 0
 23220                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 23221  005110  C076  FFD9         	movff	sprintf@sp,fsr2l
 23222  005114  D94A               	call	PL102	;call to abstracted procedure
 23223                           
 23224                           ; BSR set to: 0
 23225  005116  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23226  005118  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23227                           
 23228                           ; BSR set to: 0
 23229                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23230  00511A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23231  00511C  D003               	goto	l16578
 23232                           
 23233                           ; BSR set to: 0
 23234  00511E  6B83               	clrf	(_sprintf$2135+1)& (0+255),b
 23235  005120  0E78               	movlw	120
 23236  005122  D002               	goto	L42
 23237  005124                     l16578:
 23238                           
 23239                           ; BSR set to: 0
 23240  005124  6B83               	clrf	(_sprintf$2135+1)& (0+255),b
 23241  005126  0E58               	movlw	88
 23242  005128                     L42:
 23243  005128  6F82               	movwf	_sprintf$2135& (0+255),b
 23244                           
 23245                           ; BSR set to: 0
 23246  00512A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23247  00512E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23248  005132  C082  FFDF         	movff	_sprintf$2135,indf2
 23249  005136  D7DB               	goto	l16562
 23250  005138                     l16584:
 23251                           
 23252                           ; BSR set to: 0
 23253                           ;doprnt.c: 1419: }
 23254                           ;doprnt.c: 1422: if(width)
 23255  005138  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23256  00513A  118B               	iorwf	sprintf@width& (0+255),w,b
 23257  00513C  E101 D0B9          	bz	l16656
 23258                           
 23259                           ; BSR set to: 0
 23260                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 23261  005140  C076  FFD9         	movff	sprintf@sp,fsr2l
 23262  005144  D932               	call	PL102	;call to abstracted procedure
 23263                           
 23264                           ; BSR set to: 0
 23265  005146  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23266  005148  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23267                           
 23268                           ; BSR set to: 0
 23269                           ;doprnt.c: 1425: while(--width);
 23270  00514A  078B               	decf	sprintf@width& (0+255),f,b
 23271  00514C  A0D8               	btfss	status,0,c
 23272  00514E  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23273  005150  0100               	movlb	0	; () banked
 23274  005152  D7F2               	goto	l16584
 23275  005154                     l16592:
 23276                           
 23277                           ; BSR set to: 0
 23278                           ;doprnt.c: 1429: {
 23279                           ;doprnt.c: 1431: if(width
 23280                           ;doprnt.c: 1433: && !(flag & 0x08)
 23281                           ;doprnt.c: 1435: )
 23282  005154  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23283  005156  118B               	iorwf	sprintf@width& (0+255),w,b
 23284  005158  A4D8               	btfss	status,2,c
 23285                           
 23286                           ; BSR set to: 0
 23287  00515A  B792               	btfsc	sprintf@flag& (0+255),3,b
 23288  00515C  D004               	goto	l16602
 23289  00515E                     l16596:
 23290                           
 23291                           ; BSR set to: 0
 23292                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23293  00515E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23294                           
 23295                           ; BSR set to: 0
 23296                           
 23297                           ; BSR set to: 0
 23298                           ;doprnt.c: 1438: while(--width);
 23299  005162  D8F0               	call	PL40	;call to abstracted procedure
 23300  005164  E1FC               	bnz	l16596
 23301  005166                     l16602:
 23302                           
 23303                           ; BSR set to: 0
 23304                           ;doprnt.c: 1445: if(flag & 0x03)
 23305  005166  5192               	movf	sprintf@flag& (0+255),w,b
 23306  005168  0B03               	andlw	3
 23307  00516A  E009               	bz	l1803
 23308                           
 23309                           ; BSR set to: 0
 23310                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23311  00516C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23312  005170  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23313  005174  0E2D               	movlw	45
 23314  005176  6EDF               	movwf	indf2,c
 23315                           
 23316                           ; BSR set to: 0
 23317  005178  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23318  00517A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23319  00517C  D008               	goto	l16612
 23320  00517E                     l1803:
 23321                           
 23322                           ; BSR set to: 0
 23323                           ;doprnt.c: 1450: else if(flag & 0x01)
 23324  00517E  A192               	btfss	sprintf@flag& (0+255),0,b
 23325  005180  D006               	goto	l16612
 23326                           
 23327                           ; BSR set to: 0
 23328                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23329  005182  C076  FFD9         	movff	sprintf@sp,fsr2l
 23330  005186  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23331  00518A  0E20               	movlw	32
 23332  00518C  D7F4               	goto	L43
 23333  00518E                     l16612:
 23334                           
 23335                           ; BSR set to: 0
 23336                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23337  00518E  0EC0               	movlw	192
 23338  005190  D8BE               	call	PL16	;call to abstracted procedure
 23339  005192  0E40               	movlw	64
 23340  005194  B4D8               	btfsc	status,2,c
 23341  005196  197E               	xorwf	??_sprintf& (0+255),w,b
 23342  005198  E106               	bnz	l16618
 23343                           
 23344                           ; BSR set to: 0
 23345                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23346  00519A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23347  00519E  D905               	call	PL102	;call to abstracted procedure
 23348  0051A0                     l16616:
 23349                           
 23350                           ; BSR set to: 0
 23351  0051A0  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23352  0051A2  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23353  0051A4  D086               	goto	l16656
 23354  0051A6                     l16618:
 23355                           
 23356                           ; BSR set to: 0
 23357                           ;doprnt.c: 1457: else
 23358                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23359  0051A6  0EC0               	movlw	192
 23360  0051A8  D8B2               	call	PL16	;call to abstracted procedure
 23361  0051AA  0E80               	movlw	128
 23362  0051AC  B4D8               	btfsc	status,2,c
 23363  0051AE  197E               	xorwf	??_sprintf& (0+255),w,b
 23364  0051B0  E001 D07F          	bnz	l16656
 23365                           
 23366                           ; BSR set to: 0
 23367                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23368  0051B4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23369  0051B8  D8F8               	call	PL102	;call to abstracted procedure
 23370                           
 23371                           ; BSR set to: 0
 23372  0051BA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23373  0051BC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23374                           
 23375                           ; BSR set to: 0
 23376                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23377  0051BE  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23378  0051C0  D003               	goto	l16628
 23379                           
 23380                           ; BSR set to: 0
 23381  0051C2  6B85               	clrf	(_sprintf$2136+1)& (0+255),b
 23382  0051C4  0E78               	movlw	120
 23383  0051C6  D002               	goto	L44
 23384  0051C8                     l16628:
 23385                           
 23386                           ; BSR set to: 0
 23387  0051C8  6B85               	clrf	(_sprintf$2136+1)& (0+255),b
 23388  0051CA  0E58               	movlw	88
 23389  0051CC                     L44:
 23390  0051CC  6F84               	movwf	_sprintf$2136& (0+255),b
 23391                           
 23392                           ; BSR set to: 0
 23393  0051CE  C076  FFD9         	movff	sprintf@sp,fsr2l
 23394  0051D2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23395  0051D6  C084  FFDF         	movff	_sprintf$2136,indf2
 23396  0051DA  D7E2               	goto	l16616
 23397  0051DC                     l16634:
 23398                           
 23399                           ; BSR set to: 0
 23400                           ;doprnt.c: 1493: case 0xC0:
 23401                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23402  0051DC  C089  F07E         	movff	sprintf@prec,??_sprintf
 23403  0051E0  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23404  0051E4  90D8               	bcf	status,0,c
 23405  0051E6  377E               	rlcf	??_sprintf& (0+255),f,b
 23406  0051E8  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23407  0051EA  90D8               	bcf	status,0,c
 23408  0051EC  377E               	rlcf	??_sprintf& (0+255),f,b
 23409  0051EE  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23410  0051F0  0ED6               	movlw	low _dpowers
 23411  0051F2  257E               	addwf	??_sprintf& (0+255),w,b
 23412  0051F4  6EF6               	movwf	tblptrl,c
 23413  0051F6  0E6B               	movlw	high _dpowers
 23414  0051F8  D87B               	call	PL12	;call to abstracted procedure
 23415  0051FA  C08D  F060         	movff	sprintf@_val,?___lldiv
 23416  0051FE  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23417  005202  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23418  005206  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23419  00520A  EC7A  F00C         	call	___lldiv	;wreg free
 23420  00520E  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23421  005212  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23422  005216  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23423  00521A  C060  F06D         	movff	?___lldiv,?___llmod
 23424  00521E  0E0A               	movlw	10
 23425  005220  6F71               	movwf	(?___llmod+4)& (0+255),b
 23426  005222  0E00               	movlw	0
 23427  005224  6B72               	clrf	(?___llmod+5)& (0+255),b
 23428  005226  6B73               	clrf	(?___llmod+6)& (0+255),b
 23429  005228  6B74               	clrf	(?___llmod+7)& (0+255),b
 23430  00522A  EC72  F00B         	call	___llmod	;wreg free
 23431  00522E  516D               	movf	?___llmod& (0+255),w,b
 23432  005230  D02D               	goto	L45
 23433  005232                     l16636:
 23434                           
 23435                           ; BSR set to: 0
 23436                           ;doprnt.c: 1506: {
 23437                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23438  005232  D875               	call	PL22	;call to abstracted procedure
 23439  005234  0EFE               	movlw	low _hexpowers
 23440  005236  257E               	addwf	??_sprintf& (0+255),w,b
 23441  005238  6EF6               	movwf	tblptrl,c
 23442  00523A  0E6B               	movlw	high _hexpowers
 23443  00523C  D859               	call	PL12	;call to abstracted procedure
 23444  00523E  EC7A  F00C         	call	___lldiv	;wreg free
 23445  005242  5160               	movf	?___lldiv& (0+255),w,b
 23446  005244  0B0F               	andlw	15
 23447  005246  6F81               	movwf	sprintf@idx& (0+255),b
 23448                           
 23449                           ; BSR set to: 0
 23450                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23451  005248  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23452  00524A  D004               	goto	l16642
 23453                           
 23454                           ; BSR set to: 0
 23455  00524C  0E7A               	movlw	high STR_297
 23456  00524E  6F87               	movwf	(_sprintf$2142+1)& (0+255),b
 23457  005250  0ED5               	movlw	low STR_297
 23458  005252  D003               	goto	L46
 23459  005254                     l16642:
 23460                           
 23461                           ; BSR set to: 0
 23462  005254  0E7A               	movlw	high STR_296
 23463  005256  6F87               	movwf	(_sprintf$2142+1)& (0+255),b
 23464  005258  0EC4               	movlw	low STR_296
 23465  00525A                     L46:
 23466  00525A  6F86               	movwf	_sprintf$2142& (0+255),b
 23467                           
 23468                           ; BSR set to: 0
 23469  00525C  5181               	movf	sprintf@idx& (0+255),w,b
 23470  00525E  2586               	addwf	_sprintf$2142& (0+255),w,b
 23471  005260  6F7E               	movwf	??_sprintf& (0+255),b
 23472  005262  0E00               	movlw	0
 23473  005264  2187               	addwfc	(_sprintf$2142+1)& (0+255),w,b
 23474  005266  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23475  005268  C07E  FFF6         	movff	??_sprintf,tblptrl
 23476  00526C  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23477  005270  0008               	tblrd		*
 23478  005272  CFF5 F091          	movff	tablat,sprintf@c
 23479                           
 23480                           ;doprnt.c: 1515: }
 23481                           ;doprnt.c: 1517: break;
 23482  005276  D016               	goto	l16652
 23483  005278                     l16646:
 23484                           
 23485                           ; BSR set to: 0
 23486                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23487  005278  D852               	call	PL22	;call to abstracted procedure
 23488  00527A  0EA6               	movlw	low _octpowers
 23489  00527C  257E               	addwf	??_sprintf& (0+255),w,b
 23490  00527E  6EF6               	movwf	tblptrl,c
 23491  005280  0E6B               	movlw	high _octpowers
 23492  005282  D836               	call	PL12	;call to abstracted procedure
 23493  005284  EC7A  F00C         	call	___lldiv	;wreg free
 23494  005288  5160               	movf	?___lldiv& (0+255),w,b
 23495  00528A  0B07               	andlw	7
 23496  00528C                     L45:
 23497  00528C  0F30               	addlw	48
 23498  00528E  6F91               	movwf	sprintf@c& (0+255),b
 23499                           
 23500                           ;doprnt.c: 1527: break;
 23501  005290  D009               	goto	l16652
 23502  005292                     l16650:
 23503                           
 23504                           ; BSR set to: 0
 23505  005292  5192               	movf	sprintf@flag& (0+255),w,b
 23506  005294  0BC0               	andlw	192
 23507                           
 23508                           ; Switch size 1, requested type "space"
 23509                           ; Number of cases is 4, Range of values is 0 to 192
 23510                           ; switch strategies available:
 23511                           ; Name         Instructions Cycles
 23512                           ; simple_byte           13     7 (average)
 23513                           ;	Chosen strategy is simple_byte
 23514  005296  E0A2               	bz	l16634
 23515  005298  0A40               	xorlw	64	; case 64
 23516  00529A  E0EE               	bz	l16646
 23517  00529C  0AC0               	xorlw	192	; case 128
 23518  00529E  E0C9               	bz	l16636
 23519  0052A0  0A40               	xorlw	64	; case 192
 23520  0052A2  E09C               	bz	l16634
 23521  0052A4                     l16652:
 23522                           
 23523                           ; BSR set to: 0
 23524                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23525  0052A4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23526  0052A8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23527  0052AC  C091  FFDF         	movff	sprintf@c,indf2
 23528  0052B0  D777               	goto	l16616
 23529  0052B2                     l16656:
 23530                           
 23531                           ; BSR set to: 0
 23532  0052B2  0789               	decf	sprintf@prec& (0+255),f,b
 23533  0052B4  A0D8               	btfss	status,0,c
 23534  0052B6  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23535  0052B8  0100               	movlb	0	; () banked
 23536  0052BA  2989               	incf	sprintf@prec& (0+255),w,b
 23537  0052BC  B4D8               	btfsc	status,2,c
 23538  0052BE  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23539  0052C0  E1E8               	bnz	l16650
 23540                           
 23541                           ; BSR set to: 0
 23542                           ;doprnt.c: 1532: }
 23543                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23544  0052C2  A792               	btfss	sprintf@flag& (0+255),3,b
 23545  0052C4  D00B               	goto	l16666
 23546                           
 23547                           ; BSR set to: 0
 23548  0052C6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23549  0052C8  0A80               	xorlw	128
 23550  0052CA  0F80               	addlw	-128
 23551  0052CC  0E01               	movlw	1
 23552  0052CE  B4D8               	btfsc	status,2,c
 23553  0052D0  5D8B               	subwf	sprintf@width& (0+255),w,b
 23554  0052D2  E304               	bnc	l16666
 23555  0052D4                     l16660:
 23556                           
 23557                           ; BSR set to: 0
 23558                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23559  0052D4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23560                           
 23561                           ; BSR set to: 0
 23562                           
 23563                           ; BSR set to: 0
 23564                           ;doprnt.c: 1538: while(--width);
 23565  0052D8  D835               	call	PL40	;call to abstracted procedure
 23566  0052DA  E1FC               	bnz	l16660
 23567  0052DC                     l16666:
 23568                           
 23569                           ; BSR set to: 0
 23570  0052DC  D84B               	call	PL64	;call to abstracted procedure
 23571  0052DE  6791               	tstfsz	sprintf@c& (0+255),b
 23572  0052E0  D4D1               	goto	l16332
 23573  0052E2                     l16668:
 23574                           
 23575                           ; BSR set to: 0
 23576                           ;doprnt.c: 1545: *sp = 0;
 23577  0052E2  C076  FFD9         	movff	sprintf@sp,fsr2l
 23578  0052E6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23579  0052EA  0E00               	movlw	0
 23580  0052EC  6EDF               	movwf	indf2,c
 23581                           
 23582                           ; BSR set to: 0
 23583  0052EE  0C00               	retlw	0
 23584  0052F0                     __end_of_sprintf:
 23585                           	opt stack 0
 23586  0052F0                     PL12:
 23587                           	opt stack 24
 23588  0052F0  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23589  0052F2  6EF7               	movwf	tblptrh,c
 23590  0052F4  0009               	tblrd		*+
 23591  0052F6  CFF5 F064          	movff	tablat,?___lldiv+4
 23592  0052FA  0009               	tblrd		*+
 23593  0052FC  CFF5 F065          	movff	tablat,?___lldiv+5
 23594  005300  0009               	tblrd		*+
 23595  005302  CFF5 F066          	movff	tablat,?___lldiv+6
 23596  005306  000A               	tblrd		*-
 23597  005308  CFF5 F067          	movff	tablat,?___lldiv+7
 23598  00530C  0012               	return	
 23599  00530E                     __end_ofPL12:
 23600                           	opt stack 0
 23601  00530E                     PL16:
 23602                           	opt stack 24
 23603  00530E  1592               	andwf	sprintf@flag& (0+255),w,b
 23604  005310  6F7E               	movwf	??_sprintf& (0+255),b
 23605  005312  0E08               	movlw	8
 23606  005314  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23607  005316  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23608  005318  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23609  00531A  0A08               	xorlw	8
 23610  00531C  0012               	return	
 23611  00531E                     __end_ofPL16:
 23612                           	opt stack 0
 23613  00531E                     PL22:
 23614                           	opt stack 24
 23615  00531E  C08D  F060         	movff	sprintf@_val,?___lldiv
 23616  005322  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23617  005326  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23618  00532A  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23619  00532E  C089  F07E         	movff	sprintf@prec,??_sprintf
 23620  005332  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23621  005336  90D8               	bcf	status,0,c
 23622  005338  377E               	rlcf	??_sprintf& (0+255),f,b
 23623  00533A  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23624  00533C  90D8               	bcf	status,0,c
 23625  00533E  377E               	rlcf	??_sprintf& (0+255),f,b
 23626  005340  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23627  005342  0012               	return	
 23628  005344                     __end_ofPL22:
 23629                           	opt stack 0
 23630  005344                     PL40:
 23631                           	opt stack 24
 23632  005344  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23633  005348  0E20               	movlw	32
 23634  00534A  6EDF               	movwf	indf2,c
 23635  00534C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23636  00534E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23637  005350  078B               	decf	sprintf@width& (0+255),f,b
 23638  005352  A0D8               	btfss	status,0,c
 23639  005354  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23640  005356  0100               	movlb	0	; () banked
 23641  005358  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23642  00535A  118B               	iorwf	sprintf@width& (0+255),w,b
 23643  00535C  0012               	return	
 23644  00535E                     __end_ofPL40:
 23645                           	opt stack 0
 23646  00535E                     PL56:
 23647                           	opt stack 24
 23648  00535E  6ED9               	movwf	fsr2l,c
 23649  005360  6ADA               	clrf	fsr2h,c
 23650  005362  CFDE F08D          	movff	postinc2,sprintf@_val
 23651  005366  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23652  00536A  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23653  00536E  CFDE F090          	movff	postinc2,sprintf@_val+3
 23654  005372  0C04               	retlw	4
 23655  005374                     __end_ofPL56:
 23656                           	opt stack 0
 23657  005374                     PL64:
 23658                           	opt stack 24
 23659  005374  C078  FFF6         	movff	sprintf@f,tblptrl
 23660  005378  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23661  00537C  4B78               	infsnz	sprintf@f& (0+255),f,b
 23662  00537E  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23663  005380  0008               	tblrd		*
 23664  005382  CFF5 F091          	movff	tablat,sprintf@c
 23665  005386  0100               	movlb	0	; () banked
 23666  005388  0012               	return	
 23667  00538A                     __end_ofPL64:
 23668                           	opt stack 0
 23669  00538A                     PL66:
 23670                           	opt stack 24
 23671  00538A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23672  00538E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23673  005392  0E20               	movlw	32
 23674  005394  6EDF               	movwf	indf2,c
 23675  005396  0C20               	retlw	32
 23676  005398                     __end_ofPL66:
 23677                           	opt stack 0
 23678  005398                     PL82:
 23679                           	opt stack 24
 23680  005398  4B78               	infsnz	sprintf@f& (0+255),f,b
 23681  00539A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23682  00539C  C078  FFF6         	movff	sprintf@f,tblptrl
 23683  0053A0  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23684  0053A4  0008               	tblrd		*
 23685  0053A6  50F5               	movf	tablat,w,c
 23686  0053A8  0012               	return	
 23687  0053AA                     __end_ofPL82:
 23688                           	opt stack 0
 23689  0053AA                     PL102:
 23690                           	opt stack 24
 23691  0053AA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23692  0053AE  0E30               	movlw	48
 23693  0053B0  6EDF               	movwf	indf2,c
 23694  0053B2  0C30               	retlw	48
 23695  0053B4                     __end_ofPL102:
 23696                           	opt stack 0
 23697  0053B4                     PL112:
 23698                           	opt stack 24
 23699  0053B4  A0D8               	btfss	status,0,c
 23700  0053B6  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23701  0053B8  0100               	movlb	0	; () banked
 23702  0053BA  298B               	incf	sprintf@width& (0+255),w,b
 23703  0053BC  0012               	return	
 23704  0053BE                     __end_ofPL112:
 23705                           	opt stack 0
 23706                           tblptru	equ	0xFF8
 23707                           tblptrh	equ	0xFF7
 23708                           tblptrl	equ	0xFF6
 23709                           tablat	equ	0xFF5
 23710                           prodh	equ	0xFF4
 23711                           prodl	equ	0xFF3
 23712                           intcon	equ	0xFF2
 23713                           indf0	equ	0xFEF
 23714                           postinc0	equ	0xFEE
 23715                           fsr0h	equ	0xFEA
 23716                           fsr0l	equ	0xFE9
 23717                           wreg	equ	0xFE8
 23718                           indf1	equ	0xFE7
 23719                           postinc1	equ	0xFE6
 23720                           postdec1	equ	0xFE5
 23721                           fsr1h	equ	0xFE2
 23722                           fsr1l	equ	0xFE1
 23723                           indf2	equ	0xFDF
 23724                           postinc2	equ	0xFDE
 23725                           postdec2	equ	0xFDD
 23726                           plusw2	equ	0xFDB
 23727                           fsr2h	equ	0xFDA
 23728                           fsr2l	equ	0xFD9
 23729                           status	equ	0xFD8
 23730                           
 23731 ;; *************** function ___wmul *****************
 23732 ;; Defined at:
 23733 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23734 ;; Parameters:    Size  Location     Type
 23735 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23736 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23737 ;; Auto vars:     Size  Location     Type
 23738 ;;  product         2    4[BANK0 ] unsigned int 
 23739 ;; Return value:  Size  Location     Type
 23740 ;;                  2    0[BANK0 ] unsigned int 
 23741 ;; Registers used:
 23742 ;;		wreg, status,2, status,0, prodl, prodh
 23743 ;; Tracked objects:
 23744 ;;		On entry : F/0
 23745 ;;		On exit  : F/0
 23746 ;;		Unchanged: 0/0
 23747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23748 ;;      Params:         0       4       0       0       0       0       0
 23749 ;;      Locals:         0       2       0       0       0       0       0
 23750 ;;      Temps:          0       0       0       0       0       0       0
 23751 ;;      Totals:         0       6       0       0       0       0       0
 23752 ;;Total ram usage:        6 bytes
 23753 ;; Hardware stack levels used:    1
 23754 ;; Hardware stack levels required when called:    3
 23755 ;; This function calls:
 23756 ;;		Nothing
 23757 ;; This function is called by:
 23758 ;;		_sprintf
 23759 ;;		_atoi
 23760 ;; This function uses a non-reentrant model
 23761 ;;
 23762                           
 23763                           	psect	text56
 23764  001132                     __ptext56:
 23765                           	opt stack 0
 23766  001132                     ___wmul:
 23767                           	opt stack 24
 23768                           
 23769                           ; BSR set to: 0
 23770                           
 23771                           ; BSR set to: 0
 23772                           ;incstack = 0
 23773                           ;incstack = 0
 23774  001132  5160               	movf	___wmul@multiplier& (0+255),w,b
 23775  001134  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23776  001136  CFF3 F064          	movff	prodl,___wmul@product
 23777  00113A  CFF4 F065          	movff	prodh,___wmul@product+1
 23778  00113E  5160               	movf	___wmul@multiplier& (0+255),w,b
 23779  001140  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23780  001142  D808               	call	PL104	;call to abstracted procedure
 23781  001144  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23782  001146  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23783  001148  D805               	call	PL104	;call to abstracted procedure
 23784                           
 23785                           ; BSR set to: 0
 23786  00114A  C064  F060         	movff	___wmul@product,?___wmul
 23787  00114E  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23788                           
 23789                           ; BSR set to: 0
 23790  001152  0012               	return	
 23791  001154                     __end_of___wmul:
 23792                           	opt stack 0
 23793  001154                     PL104:
 23794                           	opt stack 24
 23795  001154  CFF3 FFF4          	movff	prodl,prodh
 23796  001158  6AF3               	clrf	prodl,c
 23797  00115A  50F3               	movf	prodl,w,c
 23798  00115C  2764               	addwf	___wmul@product& (0+255),f,b
 23799  00115E  50F4               	movf	prodh,w,c
 23800  001160  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23801  001162  0012               	return	
 23802  001164                     __end_ofPL104:
 23803                           	opt stack 0
 23804                           tblptru	equ	0xFF8
 23805                           tblptrh	equ	0xFF7
 23806                           tblptrl	equ	0xFF6
 23807                           tablat	equ	0xFF5
 23808                           prodh	equ	0xFF4
 23809                           prodl	equ	0xFF3
 23810                           intcon	equ	0xFF2
 23811                           indf0	equ	0xFEF
 23812                           postinc0	equ	0xFEE
 23813                           fsr0h	equ	0xFEA
 23814                           fsr0l	equ	0xFE9
 23815                           wreg	equ	0xFE8
 23816                           indf1	equ	0xFE7
 23817                           postinc1	equ	0xFE6
 23818                           postdec1	equ	0xFE5
 23819                           fsr1h	equ	0xFE2
 23820                           fsr1l	equ	0xFE1
 23821                           indf2	equ	0xFDF
 23822                           postinc2	equ	0xFDE
 23823                           postdec2	equ	0xFDD
 23824                           plusw2	equ	0xFDB
 23825                           fsr2h	equ	0xFDA
 23826                           fsr2l	equ	0xFD9
 23827                           status	equ	0xFD8
 23828                           
 23829 ;; *************** function ___llmod *****************
 23830 ;; Defined at:
 23831 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23832 ;; Parameters:    Size  Location     Type
 23833 ;;  dividend        4   13[BANK0 ] unsigned long 
 23834 ;;  divisor         4   17[BANK0 ] unsigned long 
 23835 ;; Auto vars:     Size  Location     Type
 23836 ;;  counter         1   21[BANK0 ] unsigned char 
 23837 ;; Return value:  Size  Location     Type
 23838 ;;                  4   13[BANK0 ] unsigned long 
 23839 ;; Registers used:
 23840 ;;		wreg, status,2, status,0
 23841 ;; Tracked objects:
 23842 ;;		On entry : F/0
 23843 ;;		On exit  : F/0
 23844 ;;		Unchanged: 0/0
 23845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23846 ;;      Params:         0       8       0       0       0       0       0
 23847 ;;      Locals:         0       1       0       0       0       0       0
 23848 ;;      Temps:          0       0       0       0       0       0       0
 23849 ;;      Totals:         0       9       0       0       0       0       0
 23850 ;;Total ram usage:        9 bytes
 23851 ;; Hardware stack levels used:    1
 23852 ;; Hardware stack levels required when called:    3
 23853 ;; This function calls:
 23854 ;;		Nothing
 23855 ;; This function is called by:
 23856 ;;		_sprintf
 23857 ;;		_ultoa
 23858 ;; This function uses a non-reentrant model
 23859 ;;
 23860                           
 23861                           	psect	text57
 23862  0016E4                     __ptext57:
 23863                           	opt stack 0
 23864  0016E4                     ___llmod:
 23865                           	opt stack 23
 23866                           
 23867                           ; BSR set to: 0
 23868                           
 23869                           ; BSR set to: 0
 23870                           ;incstack = 0
 23871                           ;incstack = 0
 23872  0016E4  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23873  0016E6  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23874  0016E8  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23875  0016EA  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23876  0016EC  E023               	bz	l2451
 23877                           
 23878                           ; BSR set to: 0
 23879  0016EE  0E01               	movlw	1
 23880  0016F0  6F75               	movwf	___llmod@counter& (0+255),b
 23881  0016F2  D006               	goto	l17510
 23882  0016F4                     l17508:
 23883                           
 23884                           ; BSR set to: 0
 23885  0016F4  90D8               	bcf	status,0,c
 23886  0016F6  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23887  0016F8  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23888  0016FA  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23889  0016FC  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23890  0016FE  2B75               	incf	___llmod@counter& (0+255),f,b
 23891  001700                     l17510:
 23892                           
 23893                           ; BSR set to: 0
 23894  001700  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23895  001702  D7F8               	goto	l17508
 23896  001704                     l17512:
 23897                           
 23898                           ; BSR set to: 0
 23899  001704  5171               	movf	___llmod@divisor& (0+255),w,b
 23900  001706  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23901  001708  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23902  00170A  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23903  00170C  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23904  00170E  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23905  001710  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23906  001712  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23907  001714  E308               	bnc	l17516
 23908                           
 23909                           ; BSR set to: 0
 23910  001716  5171               	movf	___llmod@divisor& (0+255),w,b
 23911  001718  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23912  00171A  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23913  00171C  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23914  00171E  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23915  001720  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23916  001722  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23917  001724  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23918  001726                     l17516:
 23919                           
 23920                           ; BSR set to: 0
 23921  001726  90D8               	bcf	status,0,c
 23922  001728  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23923  00172A  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23924  00172C  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23925  00172E  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23926                           
 23927                           ; BSR set to: 0
 23928  001730  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23929  001732  D7E8               	goto	l17512
 23930  001734                     l2451:
 23931                           
 23932                           ; BSR set to: 0
 23933  001734  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23934  001738  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23935  00173C  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23936  001740  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23937                           
 23938                           ; BSR set to: 0
 23939  001744  0012               	return	
 23940  001746                     __end_of___llmod:
 23941                           	opt stack 0
 23942                           tblptru	equ	0xFF8
 23943                           tblptrh	equ	0xFF7
 23944                           tblptrl	equ	0xFF6
 23945                           tablat	equ	0xFF5
 23946                           prodh	equ	0xFF4
 23947                           prodl	equ	0xFF3
 23948                           intcon	equ	0xFF2
 23949                           indf0	equ	0xFEF
 23950                           postinc0	equ	0xFEE
 23951                           fsr0h	equ	0xFEA
 23952                           fsr0l	equ	0xFE9
 23953                           wreg	equ	0xFE8
 23954                           indf1	equ	0xFE7
 23955                           postinc1	equ	0xFE6
 23956                           postdec1	equ	0xFE5
 23957                           fsr1h	equ	0xFE2
 23958                           fsr1l	equ	0xFE1
 23959                           indf2	equ	0xFDF
 23960                           postinc2	equ	0xFDE
 23961                           postdec2	equ	0xFDD
 23962                           plusw2	equ	0xFDB
 23963                           fsr2h	equ	0xFDA
 23964                           fsr2l	equ	0xFD9
 23965                           status	equ	0xFD8
 23966                           
 23967 ;; *************** function ___lldiv *****************
 23968 ;; Defined at:
 23969 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23970 ;; Parameters:    Size  Location     Type
 23971 ;;  dividend        4    0[BANK0 ] unsigned long 
 23972 ;;  divisor         4    4[BANK0 ] unsigned long 
 23973 ;; Auto vars:     Size  Location     Type
 23974 ;;  quotient        4    9[BANK0 ] unsigned long 
 23975 ;;  counter         1    8[BANK0 ] unsigned char 
 23976 ;; Return value:  Size  Location     Type
 23977 ;;                  4    0[BANK0 ] unsigned long 
 23978 ;; Registers used:
 23979 ;;		wreg, status,2, status,0
 23980 ;; Tracked objects:
 23981 ;;		On entry : F/0
 23982 ;;		On exit  : F/0
 23983 ;;		Unchanged: 0/0
 23984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23985 ;;      Params:         0       8       0       0       0       0       0
 23986 ;;      Locals:         0       5       0       0       0       0       0
 23987 ;;      Temps:          0       0       0       0       0       0       0
 23988 ;;      Totals:         0      13       0       0       0       0       0
 23989 ;;Total ram usage:       13 bytes
 23990 ;; Hardware stack levels used:    1
 23991 ;; Hardware stack levels required when called:    3
 23992 ;; This function calls:
 23993 ;;		Nothing
 23994 ;; This function is called by:
 23995 ;;		_sprintf
 23996 ;;		_ultoa
 23997 ;; This function uses a non-reentrant model
 23998 ;;
 23999                           
 24000                           	psect	text58
 24001  0018F4                     __ptext58:
 24002                           	opt stack 0
 24003  0018F4                     ___lldiv:
 24004                           	opt stack 23
 24005                           
 24006                           ; BSR set to: 0
 24007                           
 24008                           ; BSR set to: 0
 24009                           ;incstack = 0
 24010                           ;incstack = 0
 24011  0018F4  6B69               	clrf	___lldiv@quotient& (0+255),b
 24012  0018F6  6B6A               	clrf	(___lldiv@quotient+1)& (0+255),b
 24013  0018F8  6B6B               	clrf	(___lldiv@quotient+2)& (0+255),b
 24014  0018FA  6B6C               	clrf	(___lldiv@quotient+3)& (0+255),b
 24015                           
 24016                           ; BSR set to: 0
 24017  0018FC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24018  0018FE  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 24019  001900  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 24020  001902  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 24021  001904  E029               	bz	l2441
 24022                           
 24023                           ; BSR set to: 0
 24024  001906  0E01               	movlw	1
 24025  001908  6F68               	movwf	___lldiv@counter& (0+255),b
 24026  00190A  D006               	goto	l17490
 24027  00190C                     l17488:
 24028                           
 24029                           ; BSR set to: 0
 24030  00190C  90D8               	bcf	status,0,c
 24031  00190E  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 24032  001910  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 24033  001912  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 24034  001914  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 24035  001916  2B68               	incf	___lldiv@counter& (0+255),f,b
 24036  001918                     l17490:
 24037                           
 24038                           ; BSR set to: 0
 24039  001918  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 24040  00191A  D7F8               	goto	l17488
 24041  00191C                     l17492:
 24042                           
 24043                           ; BSR set to: 0
 24044  00191C  90D8               	bcf	status,0,c
 24045  00191E  3769               	rlcf	___lldiv@quotient& (0+255),f,b
 24046  001920  376A               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 24047  001922  376B               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 24048  001924  376C               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 24049                           
 24050                           ; BSR set to: 0
 24051  001926  5164               	movf	___lldiv@divisor& (0+255),w,b
 24052  001928  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 24053  00192A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24054  00192C  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 24055  00192E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24056  001930  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 24057  001932  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24058  001934  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 24059  001936  E309               	bnc	l17500
 24060                           
 24061                           ; BSR set to: 0
 24062  001938  5164               	movf	___lldiv@divisor& (0+255),w,b
 24063  00193A  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 24064  00193C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24065  00193E  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 24066  001940  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24067  001942  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 24068  001944  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24069  001946  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 24070                           
 24071                           ; BSR set to: 0
 24072  001948  8169               	bsf	___lldiv@quotient& (0+255),0,b
 24073  00194A                     l17500:
 24074                           
 24075                           ; BSR set to: 0
 24076  00194A  90D8               	bcf	status,0,c
 24077  00194C  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 24078  00194E  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 24079  001950  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 24080  001952  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 24081                           
 24082                           ; BSR set to: 0
 24083  001954  2F68               	decfsz	___lldiv@counter& (0+255),f,b
 24084  001956  D7E2               	goto	l17492
 24085  001958                     l2441:
 24086                           
 24087                           ; BSR set to: 0
 24088  001958  C069  F060         	movff	___lldiv@quotient,?___lldiv
 24089  00195C  C06A  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 24090  001960  C06B  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 24091  001964  C06C  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 24092                           
 24093                           ; BSR set to: 0
 24094  001968  0012               	return	
 24095  00196A                     __end_of___lldiv:
 24096                           	opt stack 0
 24097                           tblptru	equ	0xFF8
 24098                           tblptrh	equ	0xFF7
 24099                           tblptrl	equ	0xFF6
 24100                           tablat	equ	0xFF5
 24101                           prodh	equ	0xFF4
 24102                           prodl	equ	0xFF3
 24103                           intcon	equ	0xFF2
 24104                           indf0	equ	0xFEF
 24105                           postinc0	equ	0xFEE
 24106                           fsr0h	equ	0xFEA
 24107                           fsr0l	equ	0xFE9
 24108                           wreg	equ	0xFE8
 24109                           indf1	equ	0xFE7
 24110                           postinc1	equ	0xFE6
 24111                           postdec1	equ	0xFE5
 24112                           fsr1h	equ	0xFE2
 24113                           fsr1l	equ	0xFE1
 24114                           indf2	equ	0xFDF
 24115                           postinc2	equ	0xFDE
 24116                           postdec2	equ	0xFDD
 24117                           plusw2	equ	0xFDB
 24118                           fsr2h	equ	0xFDA
 24119                           fsr2l	equ	0xFD9
 24120                           status	equ	0xFD8
 24121                           
 24122 ;; *************** function _isdigit *****************
 24123 ;; Defined at:
 24124 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 24125 ;; Parameters:    Size  Location     Type
 24126 ;;  c               1    wreg     unsigned char 
 24127 ;; Auto vars:     Size  Location     Type
 24128 ;;  c               1    2[BANK0 ] unsigned char 
 24129 ;; Return value:  Size  Location     Type
 24130 ;;		None               void
 24131 ;; Registers used:
 24132 ;;		wreg, status,2, status,0
 24133 ;; Tracked objects:
 24134 ;;		On entry : 0/0
 24135 ;;		On exit  : F/0
 24136 ;;		Unchanged: 0/0
 24137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24138 ;;      Params:         0       0       0       0       0       0       0
 24139 ;;      Locals:         0       2       0       0       0       0       0
 24140 ;;      Temps:          0       1       0       0       0       0       0
 24141 ;;      Totals:         0       3       0       0       0       0       0
 24142 ;;Total ram usage:        3 bytes
 24143 ;; Hardware stack levels used:    1
 24144 ;; Hardware stack levels required when called:    3
 24145 ;; This function calls:
 24146 ;;		Nothing
 24147 ;; This function is called by:
 24148 ;;		_sprintf
 24149 ;;		_atoi
 24150 ;; This function uses a non-reentrant model
 24151 ;;
 24152                           
 24153                           	psect	text59
 24154  001088                     __ptext59:
 24155                           	opt stack 0
 24156  001088                     _isdigit:
 24157                           	opt stack 24
 24158                           
 24159                           ; BSR set to: 0
 24160                           ;incstack = 0
 24161                           ;incstack = 0
 24162                           ;isdigit@c stored from wreg
 24163  001088  CFE8 F062          	movff	wreg,isdigit@c
 24164  00108C  0100               	movlb	0	; () banked
 24165  00108E  6B61               	clrf	_isdigit$2990& (0+255),b
 24166                           
 24167                           ; BSR set to: 0
 24168  001090  0E3A               	movlw	58
 24169  001092  6162               	cpfslt	isdigit@c& (0+255),b
 24170  001094  D005               	goto	l13944
 24171                           
 24172                           ; BSR set to: 0
 24173  001096  0E2F               	movlw	47
 24174  001098  6562               	cpfsgt	isdigit@c& (0+255),b
 24175  00109A  D002               	goto	l13944
 24176                           
 24177                           ; BSR set to: 0
 24178  00109C  0E01               	movlw	1
 24179  00109E  6F61               	movwf	_isdigit$2990& (0+255),b
 24180  0010A0                     l13944:
 24181                           
 24182                           ; BSR set to: 0
 24183  0010A0  C061  F060         	movff	_isdigit$2990,??_isdigit
 24184  0010A4  3160               	rrcf	??_isdigit& (0+255),w,b
 24185                           
 24186                           ; BSR set to: 0
 24187  0010A6  0012               	return	
 24188  0010A8                     __end_of_isdigit:
 24189                           	opt stack 0
 24190                           tblptru	equ	0xFF8
 24191                           tblptrh	equ	0xFF7
 24192                           tblptrl	equ	0xFF6
 24193                           tablat	equ	0xFF5
 24194                           prodh	equ	0xFF4
 24195                           prodl	equ	0xFF3
 24196                           intcon	equ	0xFF2
 24197                           indf0	equ	0xFEF
 24198                           postinc0	equ	0xFEE
 24199                           fsr0h	equ	0xFEA
 24200                           fsr0l	equ	0xFE9
 24201                           wreg	equ	0xFE8
 24202                           indf1	equ	0xFE7
 24203                           postinc1	equ	0xFE6
 24204                           postdec1	equ	0xFE5
 24205                           fsr1h	equ	0xFE2
 24206                           fsr1l	equ	0xFE1
 24207                           indf2	equ	0xFDF
 24208                           postinc2	equ	0xFDE
 24209                           postdec2	equ	0xFDD
 24210                           plusw2	equ	0xFDB
 24211                           fsr2h	equ	0xFDA
 24212                           fsr2l	equ	0xFD9
 24213                           status	equ	0xFD8
 24214                           
 24215 ;; *************** function _printFirmwareVersion *****************
 24216 ;; Defined at:
 24217 ;;		line 3049 in file "main.c"
 24218 ;; Parameters:    Size  Location     Type
 24219 ;;		None
 24220 ;; Auto vars:     Size  Location     Type
 24221 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 24222 ;; Return value:  Size  Location     Type
 24223 ;;		None               void
 24224 ;; Registers used:
 24225 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24226 ;; Tracked objects:
 24227 ;;		On entry : 0/0
 24228 ;;		On exit  : 0/0
 24229 ;;		Unchanged: 0/0
 24230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24231 ;;      Params:         0       0       0       0       0       0       0
 24232 ;;      Locals:         0      20       0       0       0       0       0
 24233 ;;      Temps:          0       0       0       0       0       0       0
 24234 ;;      Totals:         0      20       0       0       0       0       0
 24235 ;;Total ram usage:       20 bytes
 24236 ;; Hardware stack levels used:    1
 24237 ;; Hardware stack levels required when called:    6
 24238 ;; This function calls:
 24239 ;;		_putsUSART
 24240 ;;		_WriteUSART
 24241 ;;		_itoa
 24242 ;; This function is called by:
 24243 ;;		_main
 24244 ;;		_doModeVerbose
 24245 ;; This function uses a non-reentrant model
 24246 ;;
 24247                           
 24248                           	psect	text60
 24249  001AE2                     __ptext60:
 24250                           	opt stack 0
 24251  001AE2                     _printFirmwareVersion:
 24252                           	opt stack 22
 24253                           
 24254                           ;main.c: 3050: char wrkbuf[20];
 24255                           ;main.c: 3051: putsUSART((char *) "Version: ");
 24256                           
 24257                           ; BSR set to: 0
 24258                           ;incstack = 0
 24259                           ;incstack = 0
 24260  001AE2  0E7B               	movlw	high STR_287
 24261  001AE4  0100               	movlb	0	; () banked
 24262  001AE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24263  001AE8  0E70               	movlw	low STR_287
 24264  001AEA  6F61               	movwf	?_putsUSART& (0+255),b
 24265  001AEC  ECBC  F00A         	call	_putsUSART	;wreg free
 24266                           
 24267                           ;main.c: 3052: itoa(wrkbuf, 1, 10);
 24268  001AF0  0100               	movlb	0	; () banked
 24269  001AF2  D835               	call	PL62	;call to abstracted procedure
 24270  001AF4  ECCC  F008         	call	_itoa	;wreg free
 24271                           
 24272                           ; BSR set to: 0
 24273                           ;main.c: 3053: putsUSART(wrkbuf);
 24274  001AF8  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24275  001AFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24276  001AFC  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24277  001AFE  6F61               	movwf	?_putsUSART& (0+255),b
 24278  001B00  ECBC  F00A         	call	_putsUSART	;wreg free
 24279  001B04                     l1303:
 24280  001B04  A2AC               	btfss	4012,1,c	;volatile
 24281  001B06  D7FE               	goto	l1303
 24282                           
 24283                           ;main.c: 3055: WriteUSART('.');
 24284  001B08  0E2E               	movlw	46
 24285  001B0A  ECF5  F007         	call	_WriteUSART
 24286                           
 24287                           ;main.c: 3056: itoa(wrkbuf, 1, 10);
 24288  001B0E  0100               	movlb	0	; () banked
 24289  001B10  D826               	call	PL62	;call to abstracted procedure
 24290  001B12  ECCC  F008         	call	_itoa	;wreg free
 24291                           
 24292                           ; BSR set to: 0
 24293                           ;main.c: 3057: putsUSART(wrkbuf);
 24294  001B16  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24295  001B18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24296  001B1A  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24297  001B1C  6F61               	movwf	?_putsUSART& (0+255),b
 24298  001B1E  ECBC  F00A         	call	_putsUSART	;wreg free
 24299  001B22                     l1306:
 24300  001B22  A2AC               	btfss	4012,1,c	;volatile
 24301  001B24  D7FE               	goto	l1306
 24302                           
 24303                           ;main.c: 3059: WriteUSART('.');
 24304  001B26  0E2E               	movlw	46
 24305  001B28  ECF5  F007         	call	_WriteUSART
 24306                           
 24307                           ;main.c: 3060: itoa(wrkbuf, 0, 10);
 24308  001B2C  0100               	movlb	0	; () banked
 24309  001B2E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24310  001B30  6F71               	movwf	(?_itoa+1)& (0+255),b
 24311  001B32  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24312  001B34  6F70               	movwf	?_itoa& (0+255),b
 24313  001B36  6B73               	clrf	(?_itoa+3)& (0+255),b
 24314  001B38  6B72               	clrf	(?_itoa+2)& (0+255),b
 24315  001B3A  6B75               	clrf	(?_itoa+5)& (0+255),b
 24316  001B3C  0E0A               	movlw	10
 24317  001B3E  6F74               	movwf	(?_itoa+4)& (0+255),b
 24318  001B40  ECCC  F008         	call	_itoa	;wreg free
 24319                           
 24320                           ; BSR set to: 0
 24321                           ;main.c: 3061: putsUSART(wrkbuf);
 24322  001B44  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24323  001B46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24324  001B48  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24325  001B4A  6F61               	movwf	?_putsUSART& (0+255),b
 24326  001B4C  ECBC  F00A         	call	_putsUSART	;wreg free
 24327                           
 24328                           ;main.c: 3062: putsUSART((char *) "\r\n");
 24329  001B50  0E70               	movlw	high (STR_228+50)
 24330  001B52  0100               	movlb	0	; () banked
 24331  001B54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24332  001B56  0EC4               	movlw	low (STR_228+50)
 24333  001B58  6F61               	movwf	?_putsUSART& (0+255),b
 24334  001B5A  EFBC  F00A         	goto	_putsUSART	;wreg free
 24335  001B5E                     __end_of_printFirmwareVersion:
 24336                           	opt stack 0
 24337  001B5E                     PL62:
 24338                           	opt stack 22
 24339  001B5E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24340  001B60  6F71               	movwf	(?_itoa+1)& (0+255),b
 24341  001B62  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24342  001B64  6F70               	movwf	?_itoa& (0+255),b
 24343  001B66  6B73               	clrf	(?_itoa+3)& (0+255),b
 24344  001B68  0E01               	movlw	1
 24345  001B6A  6F72               	movwf	(?_itoa+2)& (0+255),b
 24346  001B6C  6B75               	clrf	(?_itoa+5)& (0+255),b
 24347  001B6E  0E0A               	movlw	10
 24348  001B70  6F74               	movwf	(?_itoa+4)& (0+255),b
 24349  001B72  0C0A               	retlw	10
 24350  001B74                     __end_ofPL62:
 24351                           	opt stack 0
 24352                           tblptru	equ	0xFF8
 24353                           tblptrh	equ	0xFF7
 24354                           tblptrl	equ	0xFF6
 24355                           tablat	equ	0xFF5
 24356                           prodh	equ	0xFF4
 24357                           prodl	equ	0xFF3
 24358                           intcon	equ	0xFF2
 24359                           indf0	equ	0xFEF
 24360                           postinc0	equ	0xFEE
 24361                           fsr0h	equ	0xFEA
 24362                           fsr0l	equ	0xFE9
 24363                           wreg	equ	0xFE8
 24364                           indf1	equ	0xFE7
 24365                           postinc1	equ	0xFE6
 24366                           postdec1	equ	0xFE5
 24367                           fsr1h	equ	0xFE2
 24368                           fsr1l	equ	0xFE1
 24369                           indf2	equ	0xFDF
 24370                           postinc2	equ	0xFDE
 24371                           postdec2	equ	0xFDD
 24372                           plusw2	equ	0xFDB
 24373                           fsr2h	equ	0xFDA
 24374                           fsr2l	equ	0xFD9
 24375                           status	equ	0xFD8
 24376                           
 24377 ;; *************** function _itoa *****************
 24378 ;; Defined at:
 24379 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24380 ;; Parameters:    Size  Location     Type
 24381 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24382 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24383 ;;  val             2   18[BANK0 ] int 
 24384 ;;  base            2   20[BANK0 ] int 
 24385 ;; Auto vars:     Size  Location     Type
 24386 ;;  cp              2    0        PTR unsigned char 
 24387 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24388 ;; Return value:  Size  Location     Type
 24389 ;;                  2   16[BANK0 ] PTR unsigned char 
 24390 ;; Registers used:
 24391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24392 ;; Tracked objects:
 24393 ;;		On entry : F/0
 24394 ;;		On exit  : F/0
 24395 ;;		Unchanged: 0/0
 24396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24397 ;;      Params:         0       6       0       0       0       0       0
 24398 ;;      Locals:         0       2       0       0       0       0       0
 24399 ;;      Temps:          0       0       0       0       0       0       0
 24400 ;;      Totals:         0       8       0       0       0       0       0
 24401 ;;Total ram usage:        8 bytes
 24402 ;; Hardware stack levels used:    1
 24403 ;; Hardware stack levels required when called:    5
 24404 ;; This function calls:
 24405 ;;		_utoa
 24406 ;; This function is called by:
 24407 ;;		_receiveSendEventSLCAN
 24408 ;;		_findNodes
 24409 ;;		_printGUID
 24410 ;;		_printNodeFirmwareVersion
 24411 ;;		_printFirmwareVersion
 24412 ;; This function uses a non-reentrant model
 24413 ;;
 24414                           
 24415                           	psect	text61
 24416  001198                     __ptext61:
 24417                           	opt stack 0
 24418  001198                     _itoa:
 24419                           	opt stack 22
 24420                           
 24421                           ; BSR set to: 0
 24422                           
 24423                           ;incstack = 0
 24424                           ;incstack = 0
 24425  001198  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24426  00119A  D00C               	goto	l17378
 24427                           
 24428                           ; BSR set to: 0
 24429  00119C  C070  FFD9         	movff	itoa@buf,fsr2l
 24430  0011A0  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24431  0011A4  0E2D               	movlw	45
 24432  0011A6  6EDF               	movwf	indf2,c
 24433                           
 24434                           ; BSR set to: 0
 24435  0011A8  4B70               	infsnz	itoa@buf& (0+255),f,b
 24436  0011AA  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24437                           
 24438                           ; BSR set to: 0
 24439  0011AC  6D72               	negf	itoa@val& (0+255),b
 24440  0011AE  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24441  0011B0  B0D8               	btfsc	status,0,c
 24442  0011B2  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24443  0011B4                     l17378:
 24444                           
 24445                           ; BSR set to: 0
 24446  0011B4  C070  F067         	movff	itoa@buf,?_utoa
 24447  0011B8  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24448  0011BC  C072  F069         	movff	itoa@val,?_utoa+2
 24449  0011C0  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24450  0011C4  C074  F06B         	movff	itoa@base,?_utoa+4
 24451  0011C8  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24452  0011CC  EF9C  F00E         	goto	_utoa	;wreg free
 24453  0011D0                     __end_of_itoa:
 24454                           	opt stack 0
 24455                           tblptru	equ	0xFF8
 24456                           tblptrh	equ	0xFF7
 24457                           tblptrl	equ	0xFF6
 24458                           tablat	equ	0xFF5
 24459                           prodh	equ	0xFF4
 24460                           prodl	equ	0xFF3
 24461                           intcon	equ	0xFF2
 24462                           indf0	equ	0xFEF
 24463                           postinc0	equ	0xFEE
 24464                           fsr0h	equ	0xFEA
 24465                           fsr0l	equ	0xFE9
 24466                           wreg	equ	0xFE8
 24467                           indf1	equ	0xFE7
 24468                           postinc1	equ	0xFE6
 24469                           postdec1	equ	0xFE5
 24470                           fsr1h	equ	0xFE2
 24471                           fsr1l	equ	0xFE1
 24472                           indf2	equ	0xFDF
 24473                           postinc2	equ	0xFDE
 24474                           postdec2	equ	0xFDD
 24475                           plusw2	equ	0xFDB
 24476                           fsr2h	equ	0xFDA
 24477                           fsr2l	equ	0xFD9
 24478                           status	equ	0xFD8
 24479                           
 24480 ;; *************** function _utoa *****************
 24481 ;; Defined at:
 24482 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24483 ;; Parameters:    Size  Location     Type
 24484 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24485 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24486 ;;  val             2    9[BANK0 ] unsigned int 
 24487 ;;  base            2   11[BANK0 ] int 
 24488 ;; Auto vars:     Size  Location     Type
 24489 ;;  v               2   13[BANK0 ] unsigned int 
 24490 ;;  c               1   15[BANK0 ] unsigned char 
 24491 ;; Return value:  Size  Location     Type
 24492 ;;                  2    7[BANK0 ] PTR unsigned char 
 24493 ;; Registers used:
 24494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24495 ;; Tracked objects:
 24496 ;;		On entry : F/0
 24497 ;;		On exit  : F/0
 24498 ;;		Unchanged: 0/0
 24499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24500 ;;      Params:         0       6       0       0       0       0       0
 24501 ;;      Locals:         0       3       0       0       0       0       0
 24502 ;;      Temps:          0       0       0       0       0       0       0
 24503 ;;      Totals:         0       9       0       0       0       0       0
 24504 ;;Total ram usage:        9 bytes
 24505 ;; Hardware stack levels used:    1
 24506 ;; Hardware stack levels required when called:    4
 24507 ;; This function calls:
 24508 ;;		___lwdiv
 24509 ;;		___lwmod
 24510 ;; This function is called by:
 24511 ;;		_itoa
 24512 ;; This function uses a non-reentrant model
 24513 ;;
 24514                           
 24515                           	psect	text62
 24516  001D38                     __ptext62:
 24517                           	opt stack 0
 24518  001D38                     _utoa:
 24519                           	opt stack 22
 24520                           
 24521                           ; BSR set to: 0
 24522                           
 24523                           ; BSR set to: 0
 24524                           ;incstack = 0
 24525                           ;incstack = 0
 24526  001D38  C069  F06D         	movff	utoa@val,utoa@v
 24527  001D3C  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24528  001D40                     l17454:
 24529                           
 24530                           ; BSR set to: 0
 24531  001D40  C06D  F060         	movff	utoa@v,?___lwdiv
 24532  001D44  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24533  001D48  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24534  001D4C  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24535  001D50  EC47  F00A         	call	___lwdiv	;wreg free
 24536  001D54  C060  F06D         	movff	?___lwdiv,utoa@v
 24537  001D58  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24538                           
 24539                           ; BSR set to: 0
 24540  001D5C  4B67               	infsnz	utoa@buf& (0+255),f,b
 24541  001D5E  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24542                           
 24543                           ; BSR set to: 0
 24544  001D60  516E               	movf	(utoa@v+1)& (0+255),w,b
 24545  001D62  116D               	iorwf	utoa@v& (0+255),w,b
 24546  001D64  E1ED               	bnz	l17454
 24547                           
 24548                           ; BSR set to: 0
 24549  001D66  C067  FFD9         	movff	utoa@buf,fsr2l
 24550  001D6A  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24551  001D6E  0E00               	movlw	0
 24552  001D70  6ADF               	clrf	indf2,c
 24553                           
 24554                           ; BSR set to: 0
 24555  001D72  0767               	decf	utoa@buf& (0+255),f,b
 24556  001D74  A0D8               	btfss	status,0,c
 24557  001D76  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24558  001D78                     l17464:
 24559                           
 24560                           ; BSR set to: 0
 24561  001D78  C069  F060         	movff	utoa@val,?___lwmod
 24562  001D7C  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24563  001D80  C06B  F062         	movff	utoa@base,?___lwmod+2
 24564  001D84  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24565  001D88  EC21  F009         	call	___lwmod	;wreg free
 24566  001D8C  5160               	movf	?___lwmod& (0+255),w,b
 24567  001D8E  6F6F               	movwf	utoa@c& (0+255),b
 24568                           
 24569                           ; BSR set to: 0
 24570  001D90  C069  F060         	movff	utoa@val,?___lwdiv
 24571  001D94  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24572  001D98  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24573  001D9C  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24574  001DA0  EC47  F00A         	call	___lwdiv	;wreg free
 24575  001DA4  C060  F069         	movff	?___lwdiv,utoa@val
 24576  001DA8  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24577                           
 24578                           ; BSR set to: 0
 24579  001DAC  0E09               	movlw	9
 24580  001DAE  656F               	cpfsgt	utoa@c& (0+255),b
 24581  001DB0  D002               	goto	l2410
 24582                           
 24583                           ; BSR set to: 0
 24584  001DB2  0E07               	movlw	7
 24585  001DB4  276F               	addwf	utoa@c& (0+255),f,b
 24586  001DB6                     l2410:
 24587                           
 24588                           ; BSR set to: 0
 24589  001DB6  0E30               	movlw	48
 24590  001DB8  276F               	addwf	utoa@c& (0+255),f,b
 24591                           
 24592                           ; BSR set to: 0
 24593  001DBA  C067  FFD9         	movff	utoa@buf,fsr2l
 24594  001DBE  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24595  001DC2  C06F  FFDF         	movff	utoa@c,indf2
 24596                           
 24597                           ; BSR set to: 0
 24598  001DC6  0767               	decf	utoa@buf& (0+255),f,b
 24599  001DC8  A0D8               	btfss	status,0,c
 24600  001DCA  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24601                           
 24602                           ; BSR set to: 0
 24603  001DCC  516A               	movf	(utoa@val+1)& (0+255),w,b
 24604  001DCE  1169               	iorwf	utoa@val& (0+255),w,b
 24605  001DD0  E1D3               	bnz	l17464
 24606                           
 24607                           ; BSR set to: 0
 24608                           ;	Return value of _utoa is never used
 24609  001DD2  4B67               	infsnz	utoa@buf& (0+255),f,b
 24610  001DD4  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24611                           
 24612                           ; BSR set to: 0
 24613  001DD6  0012               	return	
 24614  001DD8                     __end_of_utoa:
 24615                           	opt stack 0
 24616                           tblptru	equ	0xFF8
 24617                           tblptrh	equ	0xFF7
 24618                           tblptrl	equ	0xFF6
 24619                           tablat	equ	0xFF5
 24620                           prodh	equ	0xFF4
 24621                           prodl	equ	0xFF3
 24622                           intcon	equ	0xFF2
 24623                           indf0	equ	0xFEF
 24624                           postinc0	equ	0xFEE
 24625                           fsr0h	equ	0xFEA
 24626                           fsr0l	equ	0xFE9
 24627                           wreg	equ	0xFE8
 24628                           indf1	equ	0xFE7
 24629                           postinc1	equ	0xFE6
 24630                           postdec1	equ	0xFE5
 24631                           fsr1h	equ	0xFE2
 24632                           fsr1l	equ	0xFE1
 24633                           indf2	equ	0xFDF
 24634                           postinc2	equ	0xFDE
 24635                           postdec2	equ	0xFDD
 24636                           plusw2	equ	0xFDB
 24637                           fsr2h	equ	0xFDA
 24638                           fsr2l	equ	0xFD9
 24639                           status	equ	0xFD8
 24640                           
 24641 ;; *************** function ___lwmod *****************
 24642 ;; Defined at:
 24643 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24644 ;; Parameters:    Size  Location     Type
 24645 ;;  dividend        2    0[BANK0 ] unsigned int 
 24646 ;;  divisor         2    2[BANK0 ] unsigned int 
 24647 ;; Auto vars:     Size  Location     Type
 24648 ;;  counter         1    4[BANK0 ] unsigned char 
 24649 ;; Return value:  Size  Location     Type
 24650 ;;                  2    0[BANK0 ] unsigned int 
 24651 ;; Registers used:
 24652 ;;		wreg, status,2, status,0
 24653 ;; Tracked objects:
 24654 ;;		On entry : F/0
 24655 ;;		On exit  : F/0
 24656 ;;		Unchanged: 0/0
 24657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24658 ;;      Params:         0       4       0       0       0       0       0
 24659 ;;      Locals:         0       1       0       0       0       0       0
 24660 ;;      Temps:          0       0       0       0       0       0       0
 24661 ;;      Totals:         0       5       0       0       0       0       0
 24662 ;;Total ram usage:        5 bytes
 24663 ;; Hardware stack levels used:    1
 24664 ;; Hardware stack levels required when called:    3
 24665 ;; This function calls:
 24666 ;;		Nothing
 24667 ;; This function is called by:
 24668 ;;		_utoa
 24669 ;; This function uses a non-reentrant model
 24670 ;;
 24671                           
 24672                           	psect	text63
 24673  001242                     __ptext63:
 24674                           	opt stack 0
 24675  001242                     ___lwmod:
 24676                           	opt stack 22
 24677                           
 24678                           ; BSR set to: 0
 24679                           
 24680                           ; BSR set to: 0
 24681                           ;incstack = 0
 24682                           ;incstack = 0
 24683  001242  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24684  001244  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24685  001246  E017               	bz	l2534
 24686                           
 24687                           ; BSR set to: 0
 24688  001248  0E01               	movlw	1
 24689  00124A  6F64               	movwf	___lwmod@counter& (0+255),b
 24690  00124C  D004               	goto	l17548
 24691  00124E                     l17546:
 24692                           
 24693                           ; BSR set to: 0
 24694  00124E  90D8               	bcf	status,0,c
 24695  001250  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24696  001252  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24697  001254  2B64               	incf	___lwmod@counter& (0+255),f,b
 24698  001256                     l17548:
 24699                           
 24700                           ; BSR set to: 0
 24701  001256  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24702  001258  D7FA               	goto	l17546
 24703  00125A                     l17550:
 24704                           
 24705                           ; BSR set to: 0
 24706  00125A  5162               	movf	___lwmod@divisor& (0+255),w,b
 24707  00125C  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24708  00125E  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24709  001260  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24710  001262  E304               	bnc	l17554
 24711                           
 24712                           ; BSR set to: 0
 24713  001264  5162               	movf	___lwmod@divisor& (0+255),w,b
 24714  001266  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24715  001268  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24716  00126A  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24717  00126C                     l17554:
 24718                           
 24719                           ; BSR set to: 0
 24720  00126C  90D8               	bcf	status,0,c
 24721  00126E  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24722  001270  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24723                           
 24724                           ; BSR set to: 0
 24725  001272  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24726  001274  D7F2               	goto	l17550
 24727  001276                     l2534:
 24728                           
 24729                           ; BSR set to: 0
 24730  001276  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24731  00127A  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24732                           
 24733                           ; BSR set to: 0
 24734  00127E  0012               	return	
 24735  001280                     __end_of___lwmod:
 24736                           	opt stack 0
 24737                           tblptru	equ	0xFF8
 24738                           tblptrh	equ	0xFF7
 24739                           tblptrl	equ	0xFF6
 24740                           tablat	equ	0xFF5
 24741                           prodh	equ	0xFF4
 24742                           prodl	equ	0xFF3
 24743                           intcon	equ	0xFF2
 24744                           indf0	equ	0xFEF
 24745                           postinc0	equ	0xFEE
 24746                           fsr0h	equ	0xFEA
 24747                           fsr0l	equ	0xFE9
 24748                           wreg	equ	0xFE8
 24749                           indf1	equ	0xFE7
 24750                           postinc1	equ	0xFE6
 24751                           postdec1	equ	0xFE5
 24752                           fsr1h	equ	0xFE2
 24753                           fsr1l	equ	0xFE1
 24754                           indf2	equ	0xFDF
 24755                           postinc2	equ	0xFDE
 24756                           postdec2	equ	0xFDD
 24757                           plusw2	equ	0xFDB
 24758                           fsr2h	equ	0xFDA
 24759                           fsr2l	equ	0xFD9
 24760                           status	equ	0xFD8
 24761                           
 24762 ;; *************** function ___lwdiv *****************
 24763 ;; Defined at:
 24764 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24765 ;; Parameters:    Size  Location     Type
 24766 ;;  dividend        2    0[BANK0 ] unsigned int 
 24767 ;;  divisor         2    2[BANK0 ] unsigned int 
 24768 ;; Auto vars:     Size  Location     Type
 24769 ;;  quotient        2    5[BANK0 ] unsigned int 
 24770 ;;  counter         1    4[BANK0 ] unsigned char 
 24771 ;; Return value:  Size  Location     Type
 24772 ;;                  2    0[BANK0 ] unsigned int 
 24773 ;; Registers used:
 24774 ;;		wreg, status,2, status,0
 24775 ;; Tracked objects:
 24776 ;;		On entry : F/0
 24777 ;;		On exit  : F/0
 24778 ;;		Unchanged: 0/0
 24779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24780 ;;      Params:         0       4       0       0       0       0       0
 24781 ;;      Locals:         0       3       0       0       0       0       0
 24782 ;;      Temps:          0       0       0       0       0       0       0
 24783 ;;      Totals:         0       7       0       0       0       0       0
 24784 ;;Total ram usage:        7 bytes
 24785 ;; Hardware stack levels used:    1
 24786 ;; Hardware stack levels required when called:    3
 24787 ;; This function calls:
 24788 ;;		Nothing
 24789 ;; This function is called by:
 24790 ;;		_utoa
 24791 ;; This function uses a non-reentrant model
 24792 ;;
 24793                           
 24794                           	psect	text64
 24795  00148E                     __ptext64:
 24796                           	opt stack 0
 24797  00148E                     ___lwdiv:
 24798                           	opt stack 22
 24799                           
 24800                           ; BSR set to: 0
 24801                           
 24802                           ; BSR set to: 0
 24803                           ;incstack = 0
 24804                           ;incstack = 0
 24805  00148E  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24806  001490  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24807                           
 24808                           ; BSR set to: 0
 24809  001492  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24810  001494  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24811  001496  E01B               	bz	l2524
 24812                           
 24813                           ; BSR set to: 0
 24814  001498  0E01               	movlw	1
 24815  00149A  6F64               	movwf	___lwdiv@counter& (0+255),b
 24816  00149C  D004               	goto	l17528
 24817  00149E                     l17526:
 24818                           
 24819                           ; BSR set to: 0
 24820  00149E  90D8               	bcf	status,0,c
 24821  0014A0  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24822  0014A2  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24823  0014A4  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24824  0014A6                     l17528:
 24825                           
 24826                           ; BSR set to: 0
 24827  0014A6  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24828  0014A8  D7FA               	goto	l17526
 24829  0014AA                     l17530:
 24830                           
 24831                           ; BSR set to: 0
 24832  0014AA  90D8               	bcf	status,0,c
 24833  0014AC  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24834  0014AE  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24835                           
 24836                           ; BSR set to: 0
 24837  0014B0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24838  0014B2  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24839  0014B4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24840  0014B6  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24841  0014B8  E305               	bnc	l17538
 24842                           
 24843                           ; BSR set to: 0
 24844  0014BA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24845  0014BC  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24846  0014BE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24847  0014C0  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24848                           
 24849                           ; BSR set to: 0
 24850  0014C2  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24851  0014C4                     l17538:
 24852                           
 24853                           ; BSR set to: 0
 24854  0014C4  90D8               	bcf	status,0,c
 24855  0014C6  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24856  0014C8  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24857                           
 24858                           ; BSR set to: 0
 24859  0014CA  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24860  0014CC  D7EE               	goto	l17530
 24861  0014CE                     l2524:
 24862                           
 24863                           ; BSR set to: 0
 24864  0014CE  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24865  0014D2  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24866                           
 24867                           ; BSR set to: 0
 24868  0014D6  0012               	return	
 24869  0014D8                     __end_of___lwdiv:
 24870                           	opt stack 0
 24871                           tblptru	equ	0xFF8
 24872                           tblptrh	equ	0xFF7
 24873                           tblptrl	equ	0xFF6
 24874                           tablat	equ	0xFF5
 24875                           prodh	equ	0xFF4
 24876                           prodl	equ	0xFF3
 24877                           intcon	equ	0xFF2
 24878                           indf0	equ	0xFEF
 24879                           postinc0	equ	0xFEE
 24880                           fsr0h	equ	0xFEA
 24881                           fsr0l	equ	0xFE9
 24882                           wreg	equ	0xFE8
 24883                           indf1	equ	0xFE7
 24884                           postinc1	equ	0xFE6
 24885                           postdec1	equ	0xFE5
 24886                           fsr1h	equ	0xFE2
 24887                           fsr1l	equ	0xFE1
 24888                           indf2	equ	0xFDF
 24889                           postinc2	equ	0xFDE
 24890                           postdec2	equ	0xFDD
 24891                           plusw2	equ	0xFDB
 24892                           fsr2h	equ	0xFDA
 24893                           fsr2l	equ	0xFD9
 24894                           status	equ	0xFD8
 24895                           
 24896 ;; *************** function _vscp_restoreDefaults *****************
 24897 ;; Defined at:
 24898 ;;		line 3039 in file "main.c"
 24899 ;; Parameters:    Size  Location     Type
 24900 ;;		None
 24901 ;; Auto vars:     Size  Location     Type
 24902 ;;		None
 24903 ;; Return value:  Size  Location     Type
 24904 ;;		None               void
 24905 ;; Registers used:
 24906 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24907 ;; Tracked objects:
 24908 ;;		On entry : 0/1
 24909 ;;		On exit  : F/0
 24910 ;;		Unchanged: 0/0
 24911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24912 ;;      Params:         0       0       0       0       0       0       0
 24913 ;;      Locals:         0       0       0       0       0       0       0
 24914 ;;      Temps:          0       0       0       0       0       0       0
 24915 ;;      Totals:         0       0       0       0       0       0       0
 24916 ;;Total ram usage:        0 bytes
 24917 ;; Hardware stack levels used:    1
 24918 ;; Hardware stack levels required when called:    5
 24919 ;; This function calls:
 24920 ;;		_init_app_ram
 24921 ;;		_init_app_eeprom
 24922 ;; This function is called by:
 24923 ;;		_main
 24924 ;;		_doModeVerbose
 24925 ;; This function uses a non-reentrant model
 24926 ;;
 24927                           
 24928                           	psect	text65
 24929  000FAC                     __ptext65:
 24930                           	opt stack 0
 24931  000FAC                     _vscp_restoreDefaults:
 24932                           	opt stack 23
 24933                           
 24934                           ;main.c: 3040: init_app_eeprom();
 24935                           
 24936                           ; BSR set to: 0
 24937                           ;incstack = 0
 24938                           ;incstack = 0
 24939  000FAC  EC10  F012         	call	_init_app_eeprom	;wreg free
 24940                           
 24941                           ;main.c: 3041: init_app_ram();
 24942  000FB0  EFC9  F01E         	goto	_init_app_ram	;wreg free
 24943  000FB4                     __end_of_vscp_restoreDefaults:
 24944                           	opt stack 0
 24945                           tblptru	equ	0xFF8
 24946                           tblptrh	equ	0xFF7
 24947                           tblptrl	equ	0xFF6
 24948                           tablat	equ	0xFF5
 24949                           prodh	equ	0xFF4
 24950                           prodl	equ	0xFF3
 24951                           intcon	equ	0xFF2
 24952                           indf0	equ	0xFEF
 24953                           postinc0	equ	0xFEE
 24954                           fsr0h	equ	0xFEA
 24955                           fsr0l	equ	0xFE9
 24956                           wreg	equ	0xFE8
 24957                           indf1	equ	0xFE7
 24958                           postinc1	equ	0xFE6
 24959                           postdec1	equ	0xFE5
 24960                           fsr1h	equ	0xFE2
 24961                           fsr1l	equ	0xFE1
 24962                           indf2	equ	0xFDF
 24963                           postinc2	equ	0xFDE
 24964                           postdec2	equ	0xFDD
 24965                           plusw2	equ	0xFDB
 24966                           fsr2h	equ	0xFDA
 24967                           fsr2l	equ	0xFD9
 24968                           status	equ	0xFD8
 24969                           
 24970 ;; *************** function _init_app_eeprom *****************
 24971 ;; Defined at:
 24972 ;;		line 557 in file "main.c"
 24973 ;; Parameters:    Size  Location     Type
 24974 ;;		None
 24975 ;; Auto vars:     Size  Location     Type
 24976 ;;  i               1    4[BANK0 ] unsigned char 
 24977 ;; Return value:  Size  Location     Type
 24978 ;;		None               void
 24979 ;; Registers used:
 24980 ;;		wreg, status,2, status,0, cstack
 24981 ;; Tracked objects:
 24982 ;;		On entry : 0/1
 24983 ;;		On exit  : 0/0
 24984 ;;		Unchanged: 0/0
 24985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24986 ;;      Params:         0       0       0       0       0       0       0
 24987 ;;      Locals:         0       1       0       0       0       0       0
 24988 ;;      Temps:          0       0       0       0       0       0       0
 24989 ;;      Totals:         0       1       0       0       0       0       0
 24990 ;;Total ram usage:        1 bytes
 24991 ;; Hardware stack levels used:    1
 24992 ;; Hardware stack levels required when called:    4
 24993 ;; This function calls:
 24994 ;;		_Busy_eep
 24995 ;;		_Write_b_eep
 24996 ;; This function is called by:
 24997 ;;		_vscp_restoreDefaults
 24998 ;; This function uses a non-reentrant model
 24999 ;;
 25000                           
 25001                           	psect	text66
 25002  002420                     __ptext66:
 25003                           	opt stack 0
 25004  002420                     _init_app_eeprom:
 25005                           	opt stack 23
 25006                           
 25007                           ;main.c: 558: uint8_t i;
 25008                           ;main.c: 560: (Busy_eep(), Write_b_eep(0x01,0x55));
 25009                           
 25010                           ; BSR set to: 0
 25011                           ;incstack = 0
 25012                           ;incstack = 0
 25013  002420  ECD3  F007         	call	_Busy_eep	;wreg free
 25014  002424  0100               	movlb	0	; () banked
 25015  002426  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25016  002428  0E01               	movlw	1
 25017  00242A  6F60               	movwf	?_Write_b_eep& (0+255),b
 25018  00242C  0E55               	movlw	85
 25019  00242E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 25020  002430  ECB2  F008         	call	_Write_b_eep	;wreg free
 25021                           
 25022                           ;main.c: 561: (Busy_eep(), Write_b_eep(0x02,0xAA));
 25023  002434  ECD3  F007         	call	_Busy_eep	;wreg free
 25024  002438  0100               	movlb	0	; () banked
 25025  00243A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25026  00243C  0E02               	movlw	2
 25027  00243E  6F60               	movwf	?_Write_b_eep& (0+255),b
 25028  002440  0EAA               	movlw	170
 25029  002442  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 25030  002444  ECB2  F008         	call	_Write_b_eep	;wreg free
 25031                           
 25032                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x03,0));
 25033  002448  ECD3  F007         	call	_Busy_eep	;wreg free
 25034  00244C  0100               	movlb	0	; () banked
 25035  00244E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25036  002450  0E03               	movlw	3
 25037  002452  6F60               	movwf	?_Write_b_eep& (0+255),b
 25038  002454  0E00               	movlw	0
 25039  002456  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25040  002458  ECB2  F008         	call	_Write_b_eep	;wreg free
 25041                           
 25042                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x05,0));
 25043  00245C  ECD3  F007         	call	_Busy_eep	;wreg free
 25044  002460  0100               	movlb	0	; () banked
 25045  002462  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25046  002464  0E05               	movlw	5
 25047  002466  6F60               	movwf	?_Write_b_eep& (0+255),b
 25048  002468  0E00               	movlw	0
 25049  00246A  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25050  00246C  ECB2  F008         	call	_Write_b_eep	;wreg free
 25051                           
 25052                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x06,0));
 25053  002470  ECD3  F007         	call	_Busy_eep	;wreg free
 25054  002474  0100               	movlb	0	; () banked
 25055  002476  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25056  002478  0E06               	movlw	6
 25057  00247A  6F60               	movwf	?_Write_b_eep& (0+255),b
 25058  00247C  0E00               	movlw	0
 25059  00247E  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25060  002480  ECB2  F008         	call	_Write_b_eep	;wreg free
 25061                           
 25062                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x09,20u));
 25063  002484  ECD3  F007         	call	_Busy_eep	;wreg free
 25064  002488  0100               	movlb	0	; () banked
 25065  00248A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25066  00248C  0E09               	movlw	9
 25067  00248E  6F60               	movwf	?_Write_b_eep& (0+255),b
 25068  002490  0E14               	movlw	20
 25069  002492  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 25070  002494  ECB2  F008         	call	_Write_b_eep	;wreg free
 25071                           
 25072                           ;main.c: 568: for (i = 0x20; i < (0x5C + 4); i++) {
 25073  002498  0E20               	movlw	32
 25074  00249A  0100               	movlb	0	; () banked
 25075  00249C  6F64               	movwf	init_app_eeprom@i& (0+255),b
 25076  00249E                     l15834:
 25077                           
 25078                           ; BSR set to: 0
 25079                           ;main.c: 569: (Busy_eep(), Write_b_eep(0x20,0xFF));
 25080  00249E  ECD3  F007         	call	_Busy_eep	;wreg free
 25081  0024A2  0100               	movlb	0	; () banked
 25082  0024A4  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25083  0024A6  0E20               	movlw	32
 25084  0024A8  6F60               	movwf	?_Write_b_eep& (0+255),b
 25085  0024AA  0EFF               	movlw	255
 25086  0024AC  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 25087  0024AE  ECB2  F008         	call	_Write_b_eep	;wreg free
 25088  0024B2  0100               	movlb	0	; () banked
 25089  0024B4  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 25090                           
 25091                           ; BSR set to: 0
 25092  0024B6  0E5F               	movlw	95
 25093  0024B8  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 25094  0024BA  D7F1               	goto	l15834
 25095                           
 25096                           ; BSR set to: 0
 25097                           ;main.c: 570: }
 25098                           ;main.c: 573: for (i = 0x60; i < (0x64 + 4); i++) {
 25099  0024BC  0E60               	movlw	96
 25100  0024BE  6F64               	movwf	init_app_eeprom@i& (0+255),b
 25101  0024C0                     l15848:
 25102                           
 25103                           ; BSR set to: 0
 25104                           ;main.c: 574: (Busy_eep(), Write_b_eep(0x60,0x00));
 25105  0024C0  ECD3  F007         	call	_Busy_eep	;wreg free
 25106  0024C4  0100               	movlb	0	; () banked
 25107  0024C6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25108  0024C8  0E60               	movlw	96
 25109  0024CA  6F60               	movwf	?_Write_b_eep& (0+255),b
 25110  0024CC  0E00               	movlw	0
 25111  0024CE  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25112  0024D0  ECB2  F008         	call	_Write_b_eep	;wreg free
 25113  0024D4  0100               	movlb	0	; () banked
 25114  0024D6  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 25115                           
 25116                           ; BSR set to: 0
 25117  0024D8  0E67               	movlw	103
 25118  0024DA  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 25119  0024DC  D7F1               	goto	l15848
 25120                           
 25121                           ; BSR set to: 0
 25122                           ;main.c: 575: }
 25123                           ;main.c: 577: (Busy_eep(), Write_b_eep(0x65,0));
 25124  0024DE  ECD3  F007         	call	_Busy_eep	;wreg free
 25125  0024E2  0100               	movlb	0	; () banked
 25126  0024E4  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 25127  0024E6  0E65               	movlw	101
 25128  0024E8  6F60               	movwf	?_Write_b_eep& (0+255),b
 25129  0024EA  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 25130  0024EC  EFB2  F008         	goto	_Write_b_eep	;wreg free
 25131  0024F0                     __end_of_init_app_eeprom:
 25132                           	opt stack 0
 25133                           tblptru	equ	0xFF8
 25134                           tblptrh	equ	0xFF7
 25135                           tblptrl	equ	0xFF6
 25136                           tablat	equ	0xFF5
 25137                           prodh	equ	0xFF4
 25138                           prodl	equ	0xFF3
 25139                           intcon	equ	0xFF2
 25140                           indf0	equ	0xFEF
 25141                           postinc0	equ	0xFEE
 25142                           fsr0h	equ	0xFEA
 25143                           fsr0l	equ	0xFE9
 25144                           wreg	equ	0xFE8
 25145                           indf1	equ	0xFE7
 25146                           postinc1	equ	0xFE6
 25147                           postdec1	equ	0xFE5
 25148                           fsr1h	equ	0xFE2
 25149                           fsr1l	equ	0xFE1
 25150                           indf2	equ	0xFDF
 25151                           postinc2	equ	0xFDE
 25152                           postdec2	equ	0xFDD
 25153                           plusw2	equ	0xFDB
 25154                           fsr2h	equ	0xFDA
 25155                           fsr2l	equ	0xFD9
 25156                           status	equ	0xFD8
 25157                           
 25158 ;; *************** function _Write_b_eep *****************
 25159 ;; Defined at:
 25160 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 25161 ;; Parameters:    Size  Location     Type
 25162 ;;  badd            2    0[BANK0 ] unsigned int 
 25163 ;;  bdat            1    2[BANK0 ] unsigned char 
 25164 ;; Auto vars:     Size  Location     Type
 25165 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 25166 ;; Return value:  Size  Location     Type
 25167 ;;		None               void
 25168 ;; Registers used:
 25169 ;;		wreg, status,2
 25170 ;; Tracked objects:
 25171 ;;		On entry : F/0
 25172 ;;		On exit  : 0/0
 25173 ;;		Unchanged: 0/0
 25174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25175 ;;      Params:         0       3       0       0       0       0       0
 25176 ;;      Locals:         0       1       0       0       0       0       0
 25177 ;;      Temps:          0       0       0       0       0       0       0
 25178 ;;      Totals:         0       4       0       0       0       0       0
 25179 ;;Total ram usage:        4 bytes
 25180 ;; Hardware stack levels used:    1
 25181 ;; Hardware stack levels required when called:    3
 25182 ;; This function calls:
 25183 ;;		Nothing
 25184 ;; This function is called by:
 25185 ;;		_init_app_eeprom
 25186 ;;		_doModeVerbose
 25187 ;;		_doModeSLCAN
 25188 ;; This function uses a non-reentrant model
 25189 ;;
 25190                           
 25191                           	psect	text67
 25192  001164                     __ptext67:
 25193                           	opt stack 0
 25194  001164                     _Write_b_eep:
 25195                           	opt stack 25
 25196                           
 25197                           ; BSR set to: 0
 25198                           
 25199                           ;incstack = 0
 25200                           ;incstack = 0
 25201  001164  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 25202  001168  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 25203  00116C  9EA6               	bcf	4006,7,c	;volatile
 25204  00116E  9CA6               	bcf	4006,6,c	;volatile
 25205  001170  84A6               	bsf	4006,2,c	;volatile
 25206                           
 25207                           ; BSR set to: 0
 25208  001172  0E00               	movlw	0
 25209  001174  BEF2               	btfsc	intcon,7,c	;volatile
 25210  001176  0E01               	movlw	1
 25211  001178  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 25212                           
 25213                           ; BSR set to: 0
 25214  00117A  9EF2               	bcf	intcon,7,c	;volatile
 25215                           
 25216                           ; BSR set to: 0
 25217  00117C  0E55               	movlw	85
 25218  00117E  6EA7               	movwf	4007,c	;volatile
 25219                           
 25220                           ; BSR set to: 0
 25221  001180  0EAA               	movlw	170
 25222  001182  6EA7               	movwf	4007,c	;volatile
 25223                           
 25224                           ; BSR set to: 0
 25225  001184  82A6               	bsf	4006,1,c	;volatile
 25226  001186                     l1860:
 25227                           
 25228                           ; BSR set to: 0
 25229  001186  B2A6               	btfsc	4006,1,c	;volatile
 25230  001188  D7FE               	goto	l1860
 25231                           
 25232                           ; BSR set to: 0
 25233  00118A  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 25234  00118C  D002               	bra	u20755
 25235  00118E  9EF2               	bcf	intcon,7,c	;volatile
 25236  001190  D001               	bra	u20756
 25237  001192                     u20755:
 25238  001192  8EF2               	bsf	intcon,7,c	;volatile
 25239  001194                     u20756:
 25240  001194  94A6               	bcf	4006,2,c	;volatile
 25241  001196  0012               	return	
 25242  001198                     __end_of_Write_b_eep:
 25243                           	opt stack 0
 25244                           tblptru	equ	0xFF8
 25245                           tblptrh	equ	0xFF7
 25246                           tblptrl	equ	0xFF6
 25247                           tablat	equ	0xFF5
 25248                           prodh	equ	0xFF4
 25249                           prodl	equ	0xFF3
 25250                           intcon	equ	0xFF2
 25251                           indf0	equ	0xFEF
 25252                           postinc0	equ	0xFEE
 25253                           fsr0h	equ	0xFEA
 25254                           fsr0l	equ	0xFE9
 25255                           wreg	equ	0xFE8
 25256                           indf1	equ	0xFE7
 25257                           postinc1	equ	0xFE6
 25258                           postdec1	equ	0xFE5
 25259                           fsr1h	equ	0xFE2
 25260                           fsr1l	equ	0xFE1
 25261                           indf2	equ	0xFDF
 25262                           postinc2	equ	0xFDE
 25263                           postdec2	equ	0xFDD
 25264                           plusw2	equ	0xFDB
 25265                           fsr2h	equ	0xFDA
 25266                           fsr2l	equ	0xFD9
 25267                           status	equ	0xFD8
 25268                           
 25269 ;; *************** function _Busy_eep *****************
 25270 ;; Defined at:
 25271 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 25272 ;; Parameters:    Size  Location     Type
 25273 ;;		None
 25274 ;; Auto vars:     Size  Location     Type
 25275 ;;		None
 25276 ;; Return value:  Size  Location     Type
 25277 ;;		None               void
 25278 ;; Registers used:
 25279 ;;		None
 25280 ;; Tracked objects:
 25281 ;;		On entry : 0/1
 25282 ;;		On exit  : 0/0
 25283 ;;		Unchanged: 0/0
 25284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25285 ;;      Params:         0       0       0       0       0       0       0
 25286 ;;      Locals:         0       0       0       0       0       0       0
 25287 ;;      Temps:          0       0       0       0       0       0       0
 25288 ;;      Totals:         0       0       0       0       0       0       0
 25289 ;;Total ram usage:        0 bytes
 25290 ;; Hardware stack levels used:    1
 25291 ;; Hardware stack levels required when called:    3
 25292 ;; This function calls:
 25293 ;;		Nothing
 25294 ;; This function is called by:
 25295 ;;		_init_app_eeprom
 25296 ;;		_doModeVerbose
 25297 ;;		_doModeSLCAN
 25298 ;; This function uses a non-reentrant model
 25299 ;;
 25300                           
 25301                           	psect	text68
 25302  000FA6                     __ptext68:
 25303                           	opt stack 0
 25304  000FA6                     _Busy_eep:
 25305                           	opt stack 25
 25306  000FA6                     l1835:
 25307  000FA6  A2A6               	btfss	4006,1,c	;volatile
 25308  000FA8  0012               	return	
 25309  000FAA  D7FD               	goto	l1835
 25310  000FAC                     __end_of_Busy_eep:
 25311                           	opt stack 0
 25312                           tblptru	equ	0xFF8
 25313                           tblptrh	equ	0xFF7
 25314                           tblptrl	equ	0xFF6
 25315                           tablat	equ	0xFF5
 25316                           prodh	equ	0xFF4
 25317                           prodl	equ	0xFF3
 25318                           intcon	equ	0xFF2
 25319                           indf0	equ	0xFEF
 25320                           postinc0	equ	0xFEE
 25321                           fsr0h	equ	0xFEA
 25322                           fsr0l	equ	0xFE9
 25323                           wreg	equ	0xFE8
 25324                           indf1	equ	0xFE7
 25325                           postinc1	equ	0xFE6
 25326                           postdec1	equ	0xFE5
 25327                           fsr1h	equ	0xFE2
 25328                           fsr1l	equ	0xFE1
 25329                           indf2	equ	0xFDF
 25330                           postinc2	equ	0xFDE
 25331                           postdec2	equ	0xFDD
 25332                           plusw2	equ	0xFDB
 25333                           fsr2h	equ	0xFDA
 25334                           fsr2l	equ	0xFD9
 25335                           status	equ	0xFD8
 25336                           
 25337 ;; *************** function _printMode *****************
 25338 ;; Defined at:
 25339 ;;		line 3070 in file "main.c"
 25340 ;; Parameters:    Size  Location     Type
 25341 ;;		None
 25342 ;; Auto vars:     Size  Location     Type
 25343 ;;		None
 25344 ;; Return value:  Size  Location     Type
 25345 ;;		None               void
 25346 ;; Registers used:
 25347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25348 ;; Tracked objects:
 25349 ;;		On entry : 0/0
 25350 ;;		On exit  : 0/0
 25351 ;;		Unchanged: 0/0
 25352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25353 ;;      Params:         0       0       0       0       0       0       0
 25354 ;;      Locals:         0       0       0       0       0       0       0
 25355 ;;      Temps:          0       0       0       0       0       0       0
 25356 ;;      Totals:         0       0       0       0       0       0       0
 25357 ;;Total ram usage:        0 bytes
 25358 ;; Hardware stack levels used:    1
 25359 ;; Hardware stack levels required when called:    5
 25360 ;; This function calls:
 25361 ;;		_putsUSART
 25362 ;; This function is called by:
 25363 ;;		_main
 25364 ;; This function uses a non-reentrant model
 25365 ;;
 25366                           
 25367                           	psect	text69
 25368  001A62                     __ptext69:
 25369                           	opt stack 0
 25370  001A62                     _printMode:
 25371                           	opt stack 24
 25372                           
 25373                           ;main.c: 3071: putsUSART((char *) "Mode: ");
 25374                           
 25375                           ;incstack = 0
 25376                           ;incstack = 0
 25377  001A62  0E7C               	movlw	high STR_289
 25378  001A64  0100               	movlb	0	; () banked
 25379  001A66  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25380  001A68  0E0A               	movlw	low STR_289
 25381  001A6A  6F61               	movwf	?_putsUSART& (0+255),b
 25382  001A6C  ECBC  F00A         	call	_putsUSART	;wreg free
 25383                           
 25384                           ;main.c: 3072: if (0 == mode) {
 25385  001A70  0101               	movlb	1	; () banked
 25386  001A72  672C               	tstfsz	_mode& (0+255),b
 25387  001A74  D008               	goto	l14454
 25388                           
 25389                           ; BSR set to: 1
 25390                           ;main.c: 3073: putsUSART((char *) "Verbose");
 25391  001A76  0E7C               	movlw	high STR_290
 25392  001A78  0100               	movlb	0	; () banked
 25393  001A7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25394  001A7C  0E02               	movlw	low STR_290
 25395  001A7E  6F61               	movwf	?_putsUSART& (0+255),b
 25396  001A80  ECBC  F00A         	call	_putsUSART	;wreg free
 25397                           
 25398                           ;main.c: 3074: } else if (1 == mode) {
 25399  001A84  D027               	goto	l1313
 25400  001A86                     l14454:
 25401                           
 25402                           ; BSR set to: 1
 25403  001A86  052C               	decf	_mode& (0+255),w,b
 25404  001A88  E108               	bnz	l14458
 25405                           
 25406                           ; BSR set to: 1
 25407                           ;main.c: 3075: putsUSART((char *) "VSCP Driver");
 25408  001A8A  0E7B               	movlw	high STR_291
 25409  001A8C  0100               	movlb	0	; () banked
 25410  001A8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25411  001A90  0E44               	movlw	low STR_291
 25412  001A92  6F61               	movwf	?_putsUSART& (0+255),b
 25413  001A94  ECBC  F00A         	call	_putsUSART	;wreg free
 25414                           
 25415                           ;main.c: 3076: } else if (2 == mode) {
 25416  001A98  D01D               	goto	l1313
 25417  001A9A                     l14458:
 25418                           
 25419                           ; BSR set to: 1
 25420  001A9A  512C               	movf	_mode& (0+255),w,b
 25421  001A9C  0A02               	xorlw	2
 25422  001A9E  E108               	bnz	l14462
 25423                           
 25424                           ; BSR set to: 1
 25425                           ;main.c: 3077: putsUSART((char *) "SL Driver");
 25426  001AA0  0E7B               	movlw	high STR_292
 25427  001AA2  0100               	movlb	0	; () banked
 25428  001AA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25429  001AA6  0E84               	movlw	low STR_292
 25430  001AA8  6F61               	movwf	?_putsUSART& (0+255),b
 25431  001AAA  ECBC  F00A         	call	_putsUSART	;wreg free
 25432                           
 25433                           ;main.c: 3078: } else if (3 == mode) {
 25434  001AAE  D012               	goto	l1313
 25435  001AB0                     l14462:
 25436                           
 25437                           ; BSR set to: 1
 25438  001AB0  512C               	movf	_mode& (0+255),w,b
 25439  001AB2  0A03               	xorlw	3
 25440  001AB4  E108               	bnz	l14466
 25441                           
 25442                           ; BSR set to: 1
 25443                           ;main.c: 3079: putsUSART((char *) "VSCP Node");
 25444  001AB6  0E7B               	movlw	high STR_293
 25445  001AB8  0100               	movlb	0	; () banked
 25446  001ABA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25447  001ABC  0E7A               	movlw	low STR_293
 25448  001ABE  6F61               	movwf	?_putsUSART& (0+255),b
 25449  001AC0  ECBC  F00A         	call	_putsUSART	;wreg free
 25450                           
 25451                           ;main.c: 3080: } else {
 25452  001AC4  D007               	goto	l1313
 25453  001AC6                     l14466:
 25454                           
 25455                           ; BSR set to: 1
 25456                           ;main.c: 3081: putsUSART((char *) "Unknown (Verbose used)");
 25457  001AC6  0E79               	movlw	high STR_294
 25458  001AC8  0100               	movlb	0	; () banked
 25459  001ACA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25460  001ACC  0E81               	movlw	low STR_294
 25461  001ACE  6F61               	movwf	?_putsUSART& (0+255),b
 25462  001AD0  ECBC  F00A         	call	_putsUSART	;wreg free
 25463  001AD4                     l1313:
 25464                           
 25465                           ;main.c: 3082: }
 25466                           ;main.c: 3083: putsUSART((char *) "\r\n");
 25467  001AD4  0E70               	movlw	high (STR_228+50)
 25468  001AD6  0100               	movlb	0	; () banked
 25469  001AD8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 25470  001ADA  0EC4               	movlw	low (STR_228+50)
 25471  001ADC  6F61               	movwf	?_putsUSART& (0+255),b
 25472  001ADE  EFBC  F00A         	goto	_putsUSART	;wreg free
 25473  001AE2                     __end_of_printMode:
 25474                           	opt stack 0
 25475                           tblptru	equ	0xFF8
 25476                           tblptrh	equ	0xFF7
 25477                           tblptrl	equ	0xFF6
 25478                           tablat	equ	0xFF5
 25479                           prodh	equ	0xFF4
 25480                           prodl	equ	0xFF3
 25481                           intcon	equ	0xFF2
 25482                           indf0	equ	0xFEF
 25483                           postinc0	equ	0xFEE
 25484                           fsr0h	equ	0xFEA
 25485                           fsr0l	equ	0xFE9
 25486                           wreg	equ	0xFE8
 25487                           indf1	equ	0xFE7
 25488                           postinc1	equ	0xFE6
 25489                           postdec1	equ	0xFE5
 25490                           fsr1h	equ	0xFE2
 25491                           fsr1l	equ	0xFE1
 25492                           indf2	equ	0xFDF
 25493                           postinc2	equ	0xFDE
 25494                           postdec2	equ	0xFDD
 25495                           plusw2	equ	0xFDB
 25496                           fsr2h	equ	0xFDA
 25497                           fsr2l	equ	0xFD9
 25498                           status	equ	0xFD8
 25499                           
 25500 ;; *************** function _putsUSART *****************
 25501 ;; Defined at:
 25502 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 25503 ;; Parameters:    Size  Location     Type
 25504 ;;  data            2    1[BANK0 ] PTR unsigned char 
 25505 ;;		 -> STR_295(3), STR_294(23), STR_293(10), STR_292(10), 
 25506 ;;		 -> STR_291(12), STR_290(8), STR_289(7), STR_288(3), 
 25507 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_287(10), STR_286(3), STR_283(20), 
 25508 ;;		 -> STR_282(3), STR_281(14), STR_280(3), STR_276(8), 
 25509 ;;		 -> STR_275(17), STR_274(3), STR_273(67), STR_272(3), 
 25510 ;;		 -> STR_271(29), STR_270(67), STR_269(52), STR_268(39), 
 25511 ;;		 -> STR_267(62), STR_266(55), STR_265(49), STR_264(67), 
 25512 ;;		 -> STR_263(47), STR_262(47), STR_261(34), STR_260(71), 
 25513 ;;		 -> STR_259(20), STR_258(78), STR_257(24), STR_256(77), 
 25514 ;;		 -> STR_255(74), STR_254(76), STR_253(47), STR_252(40), 
 25515 ;;		 -> STR_251(39), STR_250(33), STR_249(23), STR_248(56), 
 25516 ;;		 -> STR_247(24), STR_246(44), STR_245(50), STR_244(31), 
 25517 ;;		 -> STR_243(50), STR_242(51), STR_241(46), STR_240(44), 
 25518 ;;		 -> STR_239(27), STR_238(39), STR_237(39), STR_236(52), 
 25519 ;;		 -> STR_235(54), STR_234(55), STR_233(3), STR_230(24), 
 25520 ;;		 -> STR_229(57), STR_228(53), STR_227(58), STR_226(3), 
 25521 ;;		 -> STR_223(25), STR_222(3), STR_219(24), STR_218(3), 
 25522 ;;		 -> STR_215(24), STR_214(3), STR_211(24), STR_210(3), 
 25523 ;;		 -> STR_207(23), STR_206(3), STR_203(21), STR_202(3), 
 25524 ;;		 -> STR_199(22), STR_198(3), STR_195(17), STR_194(3), 
 25525 ;;		 -> STR_191(18), STR_190(4), STR_189(11), STR_188(2), 
 25526 ;;		 -> STR_185(7), STR_182(7), STR_179(9), STR_176(7), 
 25527 ;;		 -> STR_173(8), STR_170(7), STR_169(2), STR_168(2), 
 25528 ;;		 -> STR_167(6), STR_166(8), STR_165(8), STR_164(20), 
 25529 ;;		 -> STR_163(27), STR_162(6), STR_161(33), STR_158(41), 
 25530 ;;		 -> STR_157(23), STR_155(22), STR_150(26), STR_148(32), 
 25531 ;;		 -> STR_146(28), STR_137(6), STR_135(40), STR_133(44), 
 25532 ;;		 -> STR_130(6), STR_129(39), STR_127(36), STR_125(37), 
 25533 ;;		 -> STR_123(40), STR_121(37), STR_120(50), STR_117(6), 
 25534 ;;		 -> STR_116(41), STR_114(38), STR_112(39), STR_110(42), 
 25535 ;;		 -> STR_108(39), STR_107(66), STR_104(6), STR_103(27), 
 25536 ;;		 -> STR_102(3), STR_99(20), STR_98(52), STR_94(8), 
 25537 ;;		 -> STR_93(36), STR_90(8), STR_89(38), STR_88(24), 
 25538 ;;		 -> STR_86(33), STR_84(24), STR_82(52), STR_80(54), 
 25539 ;;		 -> STR_79(6), STR_78(3), STR_73(25), STR_70(17), 
 25540 ;;		 -> STR_69(3), STR_68(4), STR_67(3), STR_64(4), 
 25541 ;;		 -> STR_59(15), wrkbuf(80), STR_56(14), STR_54(33), 
 25542 ;;		 -> STR_52(24), STR_50(52), STR_48(6), STR_46(6), 
 25543 ;;		 -> STR_44(6), STR_42(6), STR_40(18), STR_39(6), 
 25544 ;;		 -> STR_37(33), STR_36(6), STR_28(24), STR_27(18), 
 25545 ;;		 -> STR_26(20), STR_25(25), STR_24(22), STR_23(19), 
 25546 ;;		 -> STR_22(20), STR_21(20), STR_19(6), STR_17(6), 
 25547 ;;		 -> STR_15(6), STR_13(6), STR_11(6), STR_9(6), 
 25548 ;;		 -> STR_7(31), STR_5(29), STR_4(55), STR_3(35), 
 25549 ;;		 -> STR_2(58), STR_1(37), 
 25550 ;; Auto vars:     Size  Location     Type
 25551 ;;		None
 25552 ;; Return value:  Size  Location     Type
 25553 ;;		None               void
 25554 ;; Registers used:
 25555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25556 ;; Tracked objects:
 25557 ;;		On entry : F/0
 25558 ;;		On exit  : 0/0
 25559 ;;		Unchanged: 0/0
 25560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25561 ;;      Params:         0       2       0       0       0       0       0
 25562 ;;      Locals:         0       0       0       0       0       0       0
 25563 ;;      Temps:          0       2       0       0       0       0       0
 25564 ;;      Totals:         0       4       0       0       0       0       0
 25565 ;;Total ram usage:        4 bytes
 25566 ;; Hardware stack levels used:    1
 25567 ;; Hardware stack levels required when called:    4
 25568 ;; This function calls:
 25569 ;;		_WriteUSART
 25570 ;; This function is called by:
 25571 ;;		_main
 25572 ;;		_doModeVerbose
 25573 ;;		_doModeSLCAN
 25574 ;;		_receivePrintEventVerbose
 25575 ;;		_receiveSendEventSLCAN
 25576 ;;		_printStatistics
 25577 ;;		_printErrors
 25578 ;;		_printHelp
 25579 ;;		_findNodes
 25580 ;;		_printGUID
 25581 ;;		_printMDF
 25582 ;;		_printNodeFirmwareVersion
 25583 ;;		_printFirmwareVersion
 25584 ;;		_printMode
 25585 ;; This function uses a non-reentrant model
 25586 ;;
 25587                           
 25588                           	psect	text70
 25589  001578                     __ptext70:
 25590                           	opt stack 0
 25591  001578                     _putsUSART:
 25592                           	opt stack 23
 25593  001578                     l1926:
 25594  001578  A2AC               	btfss	4012,1,c	;volatile
 25595  00157A  D7FE               	goto	l1926
 25596  00157C  0100               	movlb	0	; () banked
 25597  00157E  5161               	movf	putsUSART@data& (0+255),w,b
 25598  001580  6EF6               	movwf	tblptrl,c
 25599  001582  6EE9               	movwf	fsr0l,c
 25600  001584  0E05               	movlw	(high __ramtop+-1)
 25601  001586  6EEA               	movwf	fsr0h,c
 25602  001588  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25603  00158A  64EA               	cpfsgt	fsr0h,c
 25604  00158C  D003               	bra	u18627
 25605  00158E  6EEA               	movwf	fsr0h,c
 25606  001590  50EF               	movf	indf0,w,c
 25607  001592  D003               	bra	u18620
 25608  001594                     u18627:
 25609  001594  6EF7               	movwf	tblptrh,c
 25610  001596  0008               	tblrd		*
 25611  001598  50F5               	movf	tablat,w,c
 25612  00159A                     u18620:
 25613  00159A  ECF5  F007         	call	_WriteUSART
 25614  00159E  0100               	movlb	0	; () banked
 25615  0015A0  5161               	movf	putsUSART@data& (0+255),w,b
 25616  0015A2  6F63               	movwf	??_putsUSART& (0+255),b
 25617  0015A4  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25618  0015A6  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 25619  0015A8  4B61               	infsnz	putsUSART@data& (0+255),f,b
 25620  0015AA  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 25621  0015AC  5163               	movf	??_putsUSART& (0+255),w,b
 25622  0015AE  6EF6               	movwf	tblptrl,c
 25623  0015B0  6EE9               	movwf	fsr0l,c
 25624  0015B2  0E05               	movlw	(high __ramtop+-1)
 25625  0015B4  6EEA               	movwf	fsr0h,c
 25626  0015B6  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 25627  0015B8  64EA               	cpfsgt	fsr0h,c
 25628  0015BA  D003               	bra	u18637
 25629  0015BC  6EEA               	movwf	fsr0h,c
 25630  0015BE  50EF               	movf	indf0,w,c
 25631  0015C0  D003               	bra	u18630
 25632  0015C2                     u18637:
 25633  0015C2  6EF7               	movwf	tblptrh,c
 25634  0015C4  0008               	tblrd		*
 25635  0015C6  50F5               	movf	tablat,w,c
 25636  0015C8                     u18630:
 25637  0015C8  0900               	iorlw	0
 25638  0015CA  B4D8               	btfsc	status,2,c
 25639  0015CC  0012               	return	
 25640  0015CE  D7D4               	goto	l1926
 25641  0015D0                     __end_of_putsUSART:
 25642                           	opt stack 0
 25643                           tblptru	equ	0xFF8
 25644                           tblptrh	equ	0xFF7
 25645                           tblptrl	equ	0xFF6
 25646                           tablat	equ	0xFF5
 25647                           prodh	equ	0xFF4
 25648                           prodl	equ	0xFF3
 25649                           intcon	equ	0xFF2
 25650                           indf0	equ	0xFEF
 25651                           postinc0	equ	0xFEE
 25652                           fsr0h	equ	0xFEA
 25653                           fsr0l	equ	0xFE9
 25654                           wreg	equ	0xFE8
 25655                           indf1	equ	0xFE7
 25656                           postinc1	equ	0xFE6
 25657                           postdec1	equ	0xFE5
 25658                           fsr1h	equ	0xFE2
 25659                           fsr1l	equ	0xFE1
 25660                           indf2	equ	0xFDF
 25661                           postinc2	equ	0xFDE
 25662                           postdec2	equ	0xFDD
 25663                           plusw2	equ	0xFDB
 25664                           fsr2h	equ	0xFDA
 25665                           fsr2l	equ	0xFD9
 25666                           status	equ	0xFD8
 25667                           
 25668 ;; *************** function _WriteUSART *****************
 25669 ;; Defined at:
 25670 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 25671 ;; Parameters:    Size  Location     Type
 25672 ;;  data            1    wreg     unsigned char 
 25673 ;; Auto vars:     Size  Location     Type
 25674 ;;  data            1    0[BANK0 ] unsigned char 
 25675 ;; Return value:  Size  Location     Type
 25676 ;;		None               void
 25677 ;; Registers used:
 25678 ;;		wreg
 25679 ;; Tracked objects:
 25680 ;;		On entry : 0/1
 25681 ;;		On exit  : 0/0
 25682 ;;		Unchanged: 0/0
 25683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25684 ;;      Params:         0       0       0       0       0       0       0
 25685 ;;      Locals:         0       1       0       0       0       0       0
 25686 ;;      Temps:          0       0       0       0       0       0       0
 25687 ;;      Totals:         0       1       0       0       0       0       0
 25688 ;;Total ram usage:        1 bytes
 25689 ;; Hardware stack levels used:    1
 25690 ;; Hardware stack levels required when called:    3
 25691 ;; This function calls:
 25692 ;;		Nothing
 25693 ;; This function is called by:
 25694 ;;		_doModeVerbose
 25695 ;;		_sendEscapedUartData
 25696 ;;		_sendVSCPDriverErrorFrame
 25697 ;;		_sendVSCPDriverAck
 25698 ;;		_sendVSCPDriverNack
 25699 ;;		_sendVSCPDriverCommandReply
 25700 ;;		_receiveSendEventCANAL
 25701 ;;		_receiveSendMultiEventCANAL
 25702 ;;		_sendVSCPModeCapabilities
 25703 ;;		_receiveSendEventSLCAN
 25704 ;;		_printBinary
 25705 ;;		_findNodes
 25706 ;;		_printFirmwareVersion
 25707 ;;		_putsUSART
 25708 ;; This function uses a non-reentrant model
 25709 ;;
 25710                           
 25711                           	psect	text71
 25712  000FEA                     __ptext71:
 25713                           	opt stack 0
 25714  000FEA                     _WriteUSART:
 25715                           	opt stack 24
 25716                           
 25717                           ;incstack = 0
 25718                           ;incstack = 0
 25719                           ;WriteUSART@data stored from wreg
 25720  000FEA  CFE8 F060          	movff	wreg,WriteUSART@data
 25721  000FEE  ACAC               	btfss	4012,6,c	;volatile
 25722  000FF0  D003               	goto	l15976
 25723  000FF2  90AC               	bcf	4012,0,c	;volatile
 25724  000FF4  B226               	btfsc	_USART_Status,1,c
 25725  000FF6  80AC               	bsf	4012,0,c	;volatile
 25726  000FF8                     l15976:
 25727  000FF8  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25728  000FFC  0012               	return	
 25729  000FFE                     __end_of_WriteUSART:
 25730                           	opt stack 0
 25731                           tblptru	equ	0xFF8
 25732                           tblptrh	equ	0xFF7
 25733                           tblptrl	equ	0xFF6
 25734                           tablat	equ	0xFF5
 25735                           prodh	equ	0xFF4
 25736                           prodl	equ	0xFF3
 25737                           intcon	equ	0xFF2
 25738                           indf0	equ	0xFEF
 25739                           postinc0	equ	0xFEE
 25740                           fsr0h	equ	0xFEA
 25741                           fsr0l	equ	0xFE9
 25742                           wreg	equ	0xFE8
 25743                           indf1	equ	0xFE7
 25744                           postinc1	equ	0xFE6
 25745                           postdec1	equ	0xFE5
 25746                           fsr1h	equ	0xFE2
 25747                           fsr1l	equ	0xFE1
 25748                           indf2	equ	0xFDF
 25749                           postinc2	equ	0xFDE
 25750                           postdec2	equ	0xFDD
 25751                           plusw2	equ	0xFDB
 25752                           fsr2h	equ	0xFDA
 25753                           fsr2l	equ	0xFD9
 25754                           status	equ	0xFD8
 25755                           
 25756 ;; *************** function _init *****************
 25757 ;; Defined at:
 25758 ;;		line 434 in file "main.c"
 25759 ;; Parameters:    Size  Location     Type
 25760 ;;		None
 25761 ;; Auto vars:     Size  Location     Type
 25762 ;;		None
 25763 ;; Return value:  Size  Location     Type
 25764 ;;		None               void
 25765 ;; Registers used:
 25766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25767 ;; Tracked objects:
 25768 ;;		On entry : 0/1
 25769 ;;		On exit  : F/0
 25770 ;;		Unchanged: 0/0
 25771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25772 ;;      Params:         0       0       0       0       0       0       0
 25773 ;;      Locals:         0       0       0       0       0       0       0
 25774 ;;      Temps:          0       0       0       0       0       0       0
 25775 ;;      Totals:         0       0       0       0       0       0       0
 25776 ;;Total ram usage:        0 bytes
 25777 ;; Hardware stack levels used:    1
 25778 ;; Hardware stack levels required when called:    5
 25779 ;; This function calls:
 25780 ;;		_WriteTimer0
 25781 ;;		_init_app_ram
 25782 ;;		_OpenUSART
 25783 ;;		_OpenTimer0
 25784 ;;		_ECANInitialize
 25785 ;; This function is called by:
 25786 ;;		_main
 25787 ;; This function uses a non-reentrant model
 25788 ;;
 25789                           
 25790                           	psect	text72
 25791  001446                     __ptext72:
 25792                           	opt stack 0
 25793  001446                     _init:
 25794                           	opt stack 24
 25795                           
 25796                           ;main.c: 436: init_app_ram();
 25797                           
 25798                           ;incstack = 0
 25799                           ;incstack = 0
 25800  001446  ECC9  F01E         	call	_init_app_ram	;wreg free
 25801                           
 25802                           ; BSR set to: 0
 25803                           ;main.c: 439: OSCCONbits.IRCF0 = 1;
 25804  00144A  88D3               	bsf	4051,4,c	;volatile
 25805                           
 25806                           ; BSR set to: 0
 25807                           ;main.c: 440: OSCCONbits.IRCF1 = 1;
 25808  00144C  8AD3               	bsf	4051,5,c	;volatile
 25809                           
 25810                           ; BSR set to: 0
 25811                           ;main.c: 441: OSCCONbits.IRCF2 = 1;
 25812  00144E  8CD3               	bsf	4051,6,c	;volatile
 25813                           
 25814                           ; BSR set to: 0
 25815                           ;main.c: 442: OSCTUNEbits.PLLEN = 1;
 25816  001450  8C9B               	bsf	3995,6,c	;volatile
 25817                           
 25818                           ; BSR set to: 0
 25819                           ;main.c: 444: TRISBbits.RB2 = 0;
 25820  001452  9493               	bcf	3987,2,c	;volatile
 25821                           
 25822                           ; BSR set to: 0
 25823                           ;main.c: 445: TRISBbits.RB3 = 1;
 25824  001454  8693               	bsf	3987,3,c	;volatile
 25825                           
 25826                           ; BSR set to: 0
 25827                           ;main.c: 447: TRISCbits.RC1 = 0;
 25828  001456  9294               	bcf	3988,1,c	;volatile
 25829                           
 25830                           ; BSR set to: 0
 25831                           ;main.c: 448: TRISCbits.RC6 = 0;
 25832  001458  9C94               	bcf	3988,6,c	;volatile
 25833                           
 25834                           ; BSR set to: 0
 25835                           ;main.c: 449: TRISCbits.RC7 = 1;
 25836  00145A  8E94               	bsf	3988,7,c	;volatile
 25837                           
 25838                           ; BSR set to: 0
 25839                           ;main.c: 453: OpenUSART( 0b01111111 &
 25840                           ;main.c: 454: 0b11111111 &
 25841                           ;main.c: 455: 0b11111110 &
 25842                           ;main.c: 456: 0b11111101 &
 25843                           ;main.c: 457: 0b11111111,
 25844                           ;main.c: 458: 21 );
 25845  00145C  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25846  00145E  0E15               	movlw	21
 25847  001460  6F60               	movwf	?_OpenUSART& (0+255),b
 25848  001462  0E7C               	movlw	124
 25849  001464  EC14  F00B         	call	_OpenUSART
 25850                           
 25851                           ; BSR set to: 0
 25852                           ;main.c: 460: RCIF = 0;
 25853  001468  9A9E               	bcf	3998,5,c	;volatile
 25854                           
 25855                           ; BSR set to: 0
 25856                           ;main.c: 461: RCIP = 0;
 25857  00146A  9A9F               	bcf	3999,5,c	;volatile
 25858                           
 25859                           ; BSR set to: 0
 25860                           ;main.c: 462: RCIE = 1;
 25861  00146C  8A9D               	bsf	3997,5,c	;volatile
 25862                           
 25863                           ; BSR set to: 0
 25864                           ;main.c: 463: PEIE = 1;
 25865  00146E  8CF2               	bsf	intcon,6,c	;volatile
 25866                           
 25867                           ; BSR set to: 0
 25868                           ;main.c: 466: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25869  001470  0E92               	movlw	146
 25870  001472  EC26  F008         	call	_OpenTimer0
 25871                           
 25872                           ; BSR set to: 0
 25873                           ;main.c: 467: WriteTimer0(0xfb1d);
 25874  001476  0EFB               	movlw	251
 25875  001478  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25876  00147A  0E1D               	movlw	29
 25877  00147C  6F60               	movwf	?_WriteTimer0& (0+255),b
 25878  00147E  ECE3  F007         	call	_WriteTimer0	;wreg free
 25879                           
 25880                           ; BSR set to: 0
 25881                           ;main.c: 474: ECANInitialize();
 25882  001482  ECF1  F00C         	call	_ECANInitialize	;wreg free
 25883                           
 25884                           ; BSR set to: 0
 25885                           ;main.c: 498: RXBnIE = 1;
 25886  001486  82A3               	bsf	4003,1,c	;volatile
 25887                           
 25888                           ; BSR set to: 0
 25889                           ;main.c: 499: ERRIE = 1;
 25890  001488  8AA3               	bsf	4003,5,c	;volatile
 25891                           
 25892                           ; BSR set to: 0
 25893                           ;main.c: 501: (INTCONbits.GIE = 1);
 25894  00148A  8EF2               	bsf	intcon,7,c	;volatile
 25895                           
 25896                           ; BSR set to: 0
 25897  00148C  0012               	return	
 25898  00148E                     __end_of_init:
 25899                           	opt stack 0
 25900                           tblptru	equ	0xFF8
 25901                           tblptrh	equ	0xFF7
 25902                           tblptrl	equ	0xFF6
 25903                           tablat	equ	0xFF5
 25904                           prodh	equ	0xFF4
 25905                           prodl	equ	0xFF3
 25906                           intcon	equ	0xFF2
 25907                           indf0	equ	0xFEF
 25908                           postinc0	equ	0xFEE
 25909                           fsr0h	equ	0xFEA
 25910                           fsr0l	equ	0xFE9
 25911                           wreg	equ	0xFE8
 25912                           indf1	equ	0xFE7
 25913                           postinc1	equ	0xFE6
 25914                           postdec1	equ	0xFE5
 25915                           fsr1h	equ	0xFE2
 25916                           fsr1l	equ	0xFE1
 25917                           indf2	equ	0xFDF
 25918                           postinc2	equ	0xFDE
 25919                           postdec2	equ	0xFDD
 25920                           plusw2	equ	0xFDB
 25921                           fsr2h	equ	0xFDA
 25922                           fsr2l	equ	0xFD9
 25923                           status	equ	0xFD8
 25924                           
 25925 ;; *************** function _ECANInitialize *****************
 25926 ;; Defined at:
 25927 ;;		line 168 in file "ECAN.c"
 25928 ;; Parameters:    Size  Location     Type
 25929 ;;		None
 25930 ;; Auto vars:     Size  Location     Type
 25931 ;;		None
 25932 ;; Return value:  Size  Location     Type
 25933 ;;		None               void
 25934 ;; Registers used:
 25935 ;;		wreg, status,2, status,0, cstack
 25936 ;; Tracked objects:
 25937 ;;		On entry : F/0
 25938 ;;		On exit  : F/0
 25939 ;;		Unchanged: 0/0
 25940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25941 ;;      Params:         0       0       0       0       0       0       0
 25942 ;;      Locals:         0       0       0       0       0       0       0
 25943 ;;      Temps:          0       0       0       0       0       0       0
 25944 ;;      Totals:         0       0       0       0       0       0       0
 25945 ;;Total ram usage:        0 bytes
 25946 ;; Hardware stack levels used:    1
 25947 ;; Hardware stack levels required when called:    4
 25948 ;; This function calls:
 25949 ;;		_ECANSetOperationMode
 25950 ;; This function is called by:
 25951 ;;		_init
 25952 ;; This function uses a non-reentrant model
 25953 ;;
 25954                           
 25955                           	psect	text73
 25956  0019E2                     __ptext73:
 25957                           	opt stack 0
 25958  0019E2                     _ECANInitialize:
 25959                           	opt stack 24
 25960                           
 25961                           ; BSR set to: 0
 25962                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25963                           
 25964                           ; BSR set to: 0
 25965                           ;incstack = 0
 25966                           ;incstack = 0
 25967  0019E2  0E80               	movlw	128
 25968  0019E4  EC0A  F008         	call	_ECANSetOperationMode
 25969                           
 25970                           ; BSR set to: 0
 25971                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25972  0019E8  0E09               	movlw	9
 25973  0019EA  6E70               	movwf	3952,c	;volatile
 25974                           
 25975                           ; BSR set to: 0
 25976                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25977  0019EC  0EFC               	movlw	252
 25978  0019EE  6E71               	movwf	3953,c	;volatile
 25979                           
 25980                           ; BSR set to: 0
 25981                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25982                           ;ECAN.c: 181: (0 << 6) |
 25983                           ;ECAN.c: 182: (2-1);
 25984  0019F0  0E01               	movlw	1
 25985  0019F2  6E72               	movwf	3954,c	;volatile
 25986                           
 25987                           ; BSR set to: 0
 25988                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25989  0019F4  0E20               	movlw	32
 25990  0019F6  6E73               	movwf	3955,c	;volatile
 25991                           
 25992                           ; BSR set to: 0
 25993                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25994  0019F8  8E77               	bsf	3959,7,c	;volatile
 25995                           
 25996                           ; BSR set to: 0
 25997                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25998  0019FA  9C77               	bcf	3959,6,c	;volatile
 25999                           
 26000                           ; BSR set to: 0
 26001                           ;ECAN.c: 205: RXB0CON = 0;
 26002  0019FC  6A60               	clrf	3936,c	;volatile
 26003                           
 26004                           ; BSR set to: 0
 26005                           ;ECAN.c: 211: RXB1CON = 0;
 26006  0019FE  010F               	movlb	15	; () banked
 26007  001A00  6B50               	clrf	80,b	;volatile
 26008                           
 26009                           ; BSR set to: 15
 26010                           ;ECAN.c: 221: B0CON = 0;
 26011  001A02  010E               	movlb	14	; () banked
 26012  001A04  6B20               	clrf	32,b	;volatile
 26013                           
 26014                           ; BSR set to: 14
 26015                           ;ECAN.c: 231: B1CON = 0;
 26016  001A06  6B30               	clrf	48,b	;volatile
 26017                           
 26018                           ; BSR set to: 14
 26019                           ;ECAN.c: 241: B2CON = 0;
 26020  001A08  6B40               	clrf	64,b	;volatile
 26021                           
 26022                           ; BSR set to: 14
 26023                           ;ECAN.c: 251: B3CON = 0;
 26024  001A0A  6B50               	clrf	80,b	;volatile
 26025                           
 26026                           ; BSR set to: 14
 26027                           ;ECAN.c: 261: B4CON = 0;
 26028  001A0C  6B60               	clrf	96,b	;volatile
 26029                           
 26030                           ; BSR set to: 14
 26031                           ;ECAN.c: 271: B5CON = 0;
 26032  001A0E  6B70               	clrf	112,b	;volatile
 26033                           
 26034                           ; BSR set to: 14
 26035                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 26036  001A10  010D               	movlb	13	; () banked
 26037  001A12  6BF8               	clrf	248,b	;volatile
 26038                           
 26039                           ; BSR set to: 13
 26040                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 26041  001A14  010F               	movlb	15	; () banked
 26042  001A16  6B00               	clrf	0,b	;volatile
 26043                           
 26044                           ; BSR set to: 15
 26045  001A18  0E08               	movlw	8
 26046  001A1A  6F01               	movwf	1,b	;volatile
 26047                           
 26048                           ; BSR set to: 15
 26049  001A1C  6B02               	clrf	2,b	;volatile
 26050                           
 26051                           ; BSR set to: 15
 26052  001A1E  6B03               	clrf	3,b	;volatile
 26053                           
 26054                           ; BSR set to: 15
 26055                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 26056  001A20  0E01               	movlw	1
 26057  001A22  010D               	movlb	13	; () banked
 26058  001A24  6FD4               	movwf	212,b	;volatile
 26059                           
 26060                           ; BSR set to: 13
 26061                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 26062  001A26  6BD5               	clrf	213,b	;volatile
 26063                           
 26064                           ; BSR set to: 13
 26065                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 26066  001A28  6BE0               	clrf	224,b	;volatile
 26067                           
 26068                           ; BSR set to: 13
 26069                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 26070  001A2A  0E11               	movlw	17
 26071  001A2C  6FE1               	movwf	225,b	;volatile
 26072                           
 26073                           ; BSR set to: 13
 26074                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 26075  001A2E  6FE2               	movwf	226,b	;volatile
 26076                           
 26077                           ; BSR set to: 13
 26078                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 26079  001A30  6BE3               	clrf	227,b	;volatile
 26080                           
 26081                           ; BSR set to: 13
 26082                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 26083  001A32  6BE4               	clrf	228,b	;volatile
 26084                           
 26085                           ; BSR set to: 13
 26086                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 26087  001A34  6BE5               	clrf	229,b	;volatile
 26088                           
 26089                           ; BSR set to: 13
 26090                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 26091  001A36  6BE6               	clrf	230,b	;volatile
 26092                           
 26093                           ; BSR set to: 13
 26094                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 26095  001A38  6BE7               	clrf	231,b	;volatile
 26096                           
 26097                           ; BSR set to: 13
 26098                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 26099  001A3A  0E54               	movlw	84
 26100  001A3C  6FF0               	movwf	240,b	;volatile
 26101                           
 26102                           ; BSR set to: 13
 26103                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 26104  001A3E  0E05               	movlw	5
 26105  001A40  6FF1               	movwf	241,b	;volatile
 26106                           
 26107                           ; BSR set to: 13
 26108                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 26109  001A42  6BF2               	clrf	242,b	;volatile
 26110                           
 26111                           ; BSR set to: 13
 26112                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 26113  001A44  6BF2               	clrf	242,b	;volatile
 26114                           
 26115                           ; BSR set to: 13
 26116                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 26117  001A46  010F               	movlb	15	; () banked
 26118  001A48  6B18               	clrf	24,b	;volatile
 26119                           
 26120                           ; BSR set to: 15
 26121  001A4A  6B19               	clrf	25,b	;volatile
 26122                           
 26123                           ; BSR set to: 15
 26124  001A4C  6B1A               	clrf	26,b	;volatile
 26125                           
 26126                           ; BSR set to: 15
 26127  001A4E  6B1B               	clrf	27,b	;volatile
 26128                           
 26129                           ; BSR set to: 15
 26130                           ;ECAN.c: 482: RXM0EXIDM = 1;
 26131  001A50  8719               	bsf	25,3,b	;volatile
 26132                           
 26133                           ; BSR set to: 15
 26134                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 26135  001A52  6B1C               	clrf	28,b	;volatile
 26136                           
 26137                           ; BSR set to: 15
 26138  001A54  6B1D               	clrf	29,b	;volatile
 26139                           
 26140                           ; BSR set to: 15
 26141  001A56  6B1E               	clrf	30,b	;volatile
 26142                           
 26143                           ; BSR set to: 15
 26144  001A58  6B1F               	clrf	31,b	;volatile
 26145                           
 26146                           ; BSR set to: 15
 26147                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 26148  001A5A  871D               	bsf	29,3,b	;volatile
 26149                           
 26150                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 26151  001A5C  0E20               	movlw	32
 26152  001A5E  EF0A  F008         	goto	_ECANSetOperationMode
 26153  001A62                     __end_of_ECANInitialize:
 26154                           	opt stack 0
 26155                           tblptru	equ	0xFF8
 26156                           tblptrh	equ	0xFF7
 26157                           tblptrl	equ	0xFF6
 26158                           tablat	equ	0xFF5
 26159                           prodh	equ	0xFF4
 26160                           prodl	equ	0xFF3
 26161                           intcon	equ	0xFF2
 26162                           indf0	equ	0xFEF
 26163                           postinc0	equ	0xFEE
 26164                           fsr0h	equ	0xFEA
 26165                           fsr0l	equ	0xFE9
 26166                           wreg	equ	0xFE8
 26167                           indf1	equ	0xFE7
 26168                           postinc1	equ	0xFE6
 26169                           postdec1	equ	0xFE5
 26170                           fsr1h	equ	0xFE2
 26171                           fsr1l	equ	0xFE1
 26172                           indf2	equ	0xFDF
 26173                           postinc2	equ	0xFDE
 26174                           postdec2	equ	0xFDD
 26175                           plusw2	equ	0xFDB
 26176                           fsr2h	equ	0xFDA
 26177                           fsr2l	equ	0xFD9
 26178                           status	equ	0xFD8
 26179                           
 26180 ;; *************** function _OpenTimer0 *****************
 26181 ;; Defined at:
 26182 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 26183 ;; Parameters:    Size  Location     Type
 26184 ;;  config          1    wreg     unsigned char 
 26185 ;; Auto vars:     Size  Location     Type
 26186 ;;  config          1    0[BANK0 ] unsigned char 
 26187 ;; Return value:  Size  Location     Type
 26188 ;;		None               void
 26189 ;; Registers used:
 26190 ;;		wreg, status,2, status,0
 26191 ;; Tracked objects:
 26192 ;;		On entry : F/0
 26193 ;;		On exit  : F/0
 26194 ;;		Unchanged: 0/0
 26195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26196 ;;      Params:         0       0       0       0       0       0       0
 26197 ;;      Locals:         0       1       0       0       0       0       0
 26198 ;;      Temps:          0       0       0       0       0       0       0
 26199 ;;      Totals:         0       1       0       0       0       0       0
 26200 ;;Total ram usage:        1 bytes
 26201 ;; Hardware stack levels used:    1
 26202 ;; Hardware stack levels required when called:    3
 26203 ;; This function calls:
 26204 ;;		Nothing
 26205 ;; This function is called by:
 26206 ;;		_init
 26207 ;; This function uses a non-reentrant model
 26208 ;;
 26209                           
 26210                           	psect	text74
 26211  00104C                     __ptext74:
 26212                           	opt stack 0
 26213  00104C                     _OpenTimer0:
 26214                           	opt stack 25
 26215                           
 26216                           ; BSR set to: 0
 26217                           ;incstack = 0
 26218                           ;incstack = 0
 26219                           ;OpenTimer0@config stored from wreg
 26220  00104C  CFE8 F060          	movff	wreg,OpenTimer0@config
 26221                           
 26222                           ; BSR set to: 0
 26223  001050  5160               	movf	OpenTimer0@config& (0+255),w,b
 26224  001052  0B7F               	andlw	127
 26225  001054  6ED5               	movwf	4053,c	;volatile
 26226                           
 26227                           ; BSR set to: 0
 26228  001056  6AD7               	clrf	4055,c	;volatile
 26229                           
 26230                           ; BSR set to: 0
 26231  001058  6AD6               	clrf	4054,c	;volatile
 26232                           
 26233                           ; BSR set to: 0
 26234  00105A  94F2               	bcf	intcon,2,c	;volatile
 26235                           
 26236                           ; BSR set to: 0
 26237  00105C  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 26238  00105E  D002               	goto	l1876
 26239                           
 26240                           ; BSR set to: 0
 26241  001060  8AF2               	bsf	intcon,5,c	;volatile
 26242  001062  D001               	goto	l1877
 26243  001064                     l1876:
 26244                           
 26245                           ; BSR set to: 0
 26246  001064  9AF2               	bcf	intcon,5,c	;volatile
 26247  001066                     l1877:
 26248                           
 26249                           ; BSR set to: 0
 26250  001066  8ED5               	bsf	4053,7,c	;volatile
 26251                           
 26252                           ; BSR set to: 0
 26253  001068  0012               	return	
 26254  00106A                     __end_of_OpenTimer0:
 26255                           	opt stack 0
 26256                           tblptru	equ	0xFF8
 26257                           tblptrh	equ	0xFF7
 26258                           tblptrl	equ	0xFF6
 26259                           tablat	equ	0xFF5
 26260                           prodh	equ	0xFF4
 26261                           prodl	equ	0xFF3
 26262                           intcon	equ	0xFF2
 26263                           indf0	equ	0xFEF
 26264                           postinc0	equ	0xFEE
 26265                           fsr0h	equ	0xFEA
 26266                           fsr0l	equ	0xFE9
 26267                           wreg	equ	0xFE8
 26268                           indf1	equ	0xFE7
 26269                           postinc1	equ	0xFE6
 26270                           postdec1	equ	0xFE5
 26271                           fsr1h	equ	0xFE2
 26272                           fsr1l	equ	0xFE1
 26273                           indf2	equ	0xFDF
 26274                           postinc2	equ	0xFDE
 26275                           postdec2	equ	0xFDD
 26276                           plusw2	equ	0xFDB
 26277                           fsr2h	equ	0xFDA
 26278                           fsr2l	equ	0xFD9
 26279                           status	equ	0xFD8
 26280                           
 26281 ;; *************** function _OpenUSART *****************
 26282 ;; Defined at:
 26283 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 26284 ;; Parameters:    Size  Location     Type
 26285 ;;  config          1    wreg     unsigned char 
 26286 ;;  spbrg           2    0[BANK0 ] unsigned int 
 26287 ;; Auto vars:     Size  Location     Type
 26288 ;;  config          1    2[BANK0 ] unsigned char 
 26289 ;; Return value:  Size  Location     Type
 26290 ;;		None               void
 26291 ;; Registers used:
 26292 ;;		wreg, status,2
 26293 ;; Tracked objects:
 26294 ;;		On entry : F/0
 26295 ;;		On exit  : F/0
 26296 ;;		Unchanged: 0/0
 26297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26298 ;;      Params:         0       2       0       0       0       0       0
 26299 ;;      Locals:         0       1       0       0       0       0       0
 26300 ;;      Temps:          0       0       0       0       0       0       0
 26301 ;;      Totals:         0       3       0       0       0       0       0
 26302 ;;Total ram usage:        3 bytes
 26303 ;; Hardware stack levels used:    1
 26304 ;; Hardware stack levels required when called:    3
 26305 ;; This function calls:
 26306 ;;		Nothing
 26307 ;; This function is called by:
 26308 ;;		_init
 26309 ;; This function uses a non-reentrant model
 26310 ;;
 26311                           
 26312                           	psect	text75
 26313  001628                     __ptext75:
 26314                           	opt stack 0
 26315  001628                     _OpenUSART:
 26316                           	opt stack 25
 26317                           
 26318                           ; BSR set to: 0
 26319                           ;incstack = 0
 26320                           ;incstack = 0
 26321                           ;OpenUSART@config stored from wreg
 26322  001628  CFE8 F062          	movff	wreg,OpenUSART@config
 26323                           
 26324                           ; BSR set to: 0
 26325  00162C  6AAC               	clrf	4012,c	;volatile
 26326  00162E  6AAB               	clrf	4011,c	;volatile
 26327                           
 26328                           ; BSR set to: 0
 26329  001630  B162               	btfsc	OpenUSART@config& (0+255),0,b
 26330                           
 26331                           ; BSR set to: 0
 26332  001632  88AC               	bsf	4012,4,c	;volatile
 26333                           
 26334                           ; BSR set to: 0
 26335  001634  A362               	btfss	OpenUSART@config& (0+255),1,b
 26336  001636  D002               	goto	l15670
 26337                           
 26338                           ; BSR set to: 0
 26339  001638  8CAC               	bsf	4012,6,c	;volatile
 26340  00163A  8CAB               	bsf	4011,6,c	;volatile
 26341  00163C                     l15670:
 26342                           
 26343                           ; BSR set to: 0
 26344  00163C  B562               	btfsc	OpenUSART@config& (0+255),2,b
 26345                           
 26346                           ; BSR set to: 0
 26347  00163E  8EAC               	bsf	4012,7,c	;volatile
 26348                           
 26349                           ; BSR set to: 0
 26350  001640  A762               	btfss	OpenUSART@config& (0+255),3,b
 26351  001642  D002               	goto	l1909
 26352                           
 26353                           ; BSR set to: 0
 26354  001644  88AB               	bsf	4011,4,c	;volatile
 26355  001646  D001               	goto	l15678
 26356  001648                     l1909:
 26357                           
 26358                           ; BSR set to: 0
 26359  001648  8AAB               	bsf	4011,5,c	;volatile
 26360  00164A                     l15678:
 26361                           
 26362                           ; BSR set to: 0
 26363  00164A  B962               	btfsc	OpenUSART@config& (0+255),4,b
 26364                           
 26365                           ; BSR set to: 0
 26366  00164C  84AC               	bsf	4012,2,c	;volatile
 26367                           
 26368                           ; BSR set to: 0
 26369  00164E  989E               	bcf	3998,4,c	;volatile
 26370                           
 26371                           ; BSR set to: 0
 26372  001650  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 26373                           
 26374                           ; BSR set to: 0
 26375  001652  86AB               	bsf	4011,3,c	;volatile
 26376                           
 26377                           ; BSR set to: 0
 26378  001654  AD62               	btfss	OpenUSART@config& (0+255),6,b
 26379  001656  D002               	goto	l1913
 26380                           
 26381                           ; BSR set to: 0
 26382  001658  8A9D               	bsf	3997,5,c	;volatile
 26383  00165A  D001               	goto	l1914
 26384  00165C                     l1913:
 26385                           
 26386                           ; BSR set to: 0
 26387  00165C  9A9D               	bcf	3997,5,c	;volatile
 26388  00165E                     l1914:
 26389                           
 26390                           ; BSR set to: 0
 26391  00165E  9A9E               	bcf	3998,5,c	;volatile
 26392                           
 26393                           ; BSR set to: 0
 26394  001660  AF62               	btfss	OpenUSART@config& (0+255),7,b
 26395  001662  D002               	goto	l1915
 26396                           
 26397                           ; BSR set to: 0
 26398  001664  889D               	bsf	3997,4,c	;volatile
 26399  001666  D001               	goto	l1916
 26400  001668                     l1915:
 26401                           
 26402                           ; BSR set to: 0
 26403  001668  989D               	bcf	3997,4,c	;volatile
 26404  00166A                     l1916:
 26405                           
 26406                           ; BSR set to: 0
 26407  00166A  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 26408                           
 26409                           ; BSR set to: 0
 26410  00166E  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 26411  001670  6EB0               	movwf	4016,c	;volatile
 26412                           
 26413                           ; BSR set to: 0
 26414  001672  8AAC               	bsf	4012,5,c	;volatile
 26415                           
 26416                           ; BSR set to: 0
 26417  001674  8EAB               	bsf	4011,7,c	;volatile
 26418                           
 26419                           ; BSR set to: 0
 26420  001676  9C94               	bcf	3988,6,c	;volatile
 26421                           
 26422                           ; BSR set to: 0
 26423  001678  8E94               	bsf	3988,7,c	;volatile
 26424                           
 26425                           ; BSR set to: 0
 26426  00167A  B8AC               	btfsc	4012,4,c	;volatile
 26427                           
 26428                           ; BSR set to: 0
 26429  00167C  BEAC               	btfsc	4012,7,c	;volatile
 26430  00167E  D001               	goto	l1918
 26431                           
 26432                           ; BSR set to: 0
 26433  001680  8C94               	bsf	3988,6,c	;volatile
 26434  001682                     l1918:
 26435                           
 26436                           ; BSR set to: 0
 26437  001682  0012               	return	
 26438  001684                     __end_of_OpenUSART:
 26439                           	opt stack 0
 26440                           tblptru	equ	0xFF8
 26441                           tblptrh	equ	0xFF7
 26442                           tblptrl	equ	0xFF6
 26443                           tablat	equ	0xFF5
 26444                           prodh	equ	0xFF4
 26445                           prodl	equ	0xFF3
 26446                           intcon	equ	0xFF2
 26447                           indf0	equ	0xFEF
 26448                           postinc0	equ	0xFEE
 26449                           fsr0h	equ	0xFEA
 26450                           fsr0l	equ	0xFE9
 26451                           wreg	equ	0xFE8
 26452                           indf1	equ	0xFE7
 26453                           postinc1	equ	0xFE6
 26454                           postdec1	equ	0xFE5
 26455                           fsr1h	equ	0xFE2
 26456                           fsr1l	equ	0xFE1
 26457                           indf2	equ	0xFDF
 26458                           postinc2	equ	0xFDE
 26459                           postdec2	equ	0xFDD
 26460                           plusw2	equ	0xFDB
 26461                           fsr2h	equ	0xFDA
 26462                           fsr2l	equ	0xFD9
 26463                           status	equ	0xFD8
 26464                           
 26465 ;; *************** function _init_app_ram *****************
 26466 ;; Defined at:
 26467 ;;		line 510 in file "main.c"
 26468 ;; Parameters:    Size  Location     Type
 26469 ;;		None
 26470 ;; Auto vars:     Size  Location     Type
 26471 ;;  i               1   25[BANK0 ] unsigned char 
 26472 ;; Return value:  Size  Location     Type
 26473 ;;		None               void
 26474 ;; Registers used:
 26475 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26476 ;; Tracked objects:
 26477 ;;		On entry : 0/1
 26478 ;;		On exit  : F/0
 26479 ;;		Unchanged: 0/0
 26480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26481 ;;      Params:         0       0       0       0       0       0       0
 26482 ;;      Locals:         0       1       0       0       0       0       0
 26483 ;;      Temps:          0       8       0       0       0       0       0
 26484 ;;      Totals:         0       9       0       0       0       0       0
 26485 ;;Total ram usage:        9 bytes
 26486 ;; Hardware stack levels used:    1
 26487 ;; Hardware stack levels required when called:    4
 26488 ;; This function calls:
 26489 ;;		_Read_b_eep
 26490 ;;		_ECANSetOperationMode
 26491 ;;		_setFilter
 26492 ;;		__CANIDToRegs
 26493 ;; This function is called by:
 26494 ;;		_init
 26495 ;;		_vscp_restoreDefaults
 26496 ;; This function uses a non-reentrant model
 26497 ;;
 26498                           
 26499                           	psect	text76
 26500  003D92                     __ptext76:
 26501                           	opt stack 0
 26502  003D92                     _init_app_ram:
 26503                           	opt stack 23
 26504                           
 26505                           ;main.c: 512: can_receiveOverruns = 0;
 26506                           
 26507                           ; BSR set to: 0
 26508                           ;incstack = 0
 26509                           ;incstack = 0
 26510  003D92  0101               	movlb	1	; () banked
 26511  003D94  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26512  003D96  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26513  003D98  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26514  003D9A  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26515                           
 26516                           ;main.c: 513: can_transmitOverruns = 0;
 26517  003D9C  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26518  003D9E  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26519  003DA0  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26520  003DA2  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26521                           
 26522                           ;main.c: 514: uart_receiveOverruns = 0;
 26523  003DA4  6B20               	clrf	_uart_receiveOverruns& (0+255),b
 26524  003DA6  6B21               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26525  003DA8  6B22               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26526  003DAA  6B23               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26527                           
 26528                           ;main.c: 515: uart_transmitOverruns = 0;
 26529  003DAC  6B24               	clrf	_uart_transmitOverruns& (0+255),b
 26530  003DAE  6B25               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26531  003DB0  6B26               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26532  003DB2  6B27               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26533                           
 26534                           ;main.c: 516: timer = 0;
 26535  003DB4  6B1C               	clrf	_timer& (0+255),b	;volatile
 26536  003DB6  6B1D               	clrf	(_timer+1)& (0+255),b	;volatile
 26537  003DB8  6B1E               	clrf	(_timer+2)& (0+255),b	;volatile
 26538  003DBA  6B1F               	clrf	(_timer+3)& (0+255),b	;volatile
 26539                           
 26540                           ; BSR set to: 1
 26541                           ;main.c: 518: bHex = Read_b_eep(0x06);
 26542  003DBC  0100               	movlb	0	; () banked
 26543  003DBE  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26544  003DC0  0E06               	movlw	6
 26545  003DC2  6F60               	movwf	?_Read_b_eep& (0+255),b
 26546  003DC4  ECEC  F007         	call	_Read_b_eep	;wreg free
 26547  003DC8  6E2C               	movwf	_bHex,c
 26548                           
 26549                           ;main.c: 519: mode = Read_b_eep(0x03);
 26550  003DCA  0100               	movlb	0	; () banked
 26551  003DCC  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26552  003DCE  0E03               	movlw	3
 26553  003DD0  6F60               	movwf	?_Read_b_eep& (0+255),b
 26554  003DD2  ECEC  F007         	call	_Read_b_eep	;wreg free
 26555  003DD6  0101               	movlb	1	; () banked
 26556  003DD8  6F2C               	movwf	_mode& (0+255),b
 26557                           
 26558                           ;main.c: 520: bLocalEcho = Read_b_eep(0x65);
 26559  003DDA  0100               	movlb	0	; () banked
 26560  003DDC  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26561  003DDE  0E65               	movlw	101
 26562  003DE0  6F60               	movwf	?_Read_b_eep& (0+255),b
 26563  003DE2  ECEC  F007         	call	_Read_b_eep	;wreg free
 26564  003DE6  6E2E               	movwf	_bLocalEcho,c
 26565                           
 26566                           ;main.c: 522: rwtimeout = Read_b_eep(0x09);
 26567  003DE8  0100               	movlb	0	; () banked
 26568  003DEA  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26569  003DEC  0E09               	movlw	9
 26570  003DEE  6F60               	movwf	?_Read_b_eep& (0+255),b
 26571  003DF0  ECEC  F007         	call	_Read_b_eep	;wreg free
 26572  003DF4  6E35               	movwf	_rwtimeout,c
 26573                           
 26574                           ;main.c: 527: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 26575  003DF6  0E80               	movlw	128
 26576  003DF8  EC0A  F008         	call	_ECANSetOperationMode
 26577                           
 26578                           ; BSR set to: 0
 26579                           ;main.c: 529: for (uint8_t i=0; i<15; i++ ) {
 26580  003DFC  6B79               	clrf	init_app_ram@i& (0+255),b
 26581  003DFE                     l15650:
 26582                           
 26583                           ; BSR set to: 0
 26584                           ;main.c: 530: setFilter( i,
 26585                           ;main.c: 531: ( Read_b_eep(0x20 + i*4) << 24 ) +
 26586                           ;main.c: 532: ( Read_b_eep(0x20 + 1 + i*4) << 16 ) +
 26587                           ;main.c: 533: ( Read_b_eep(0x20 + 2 + i*4) << 8 ) +
 26588                           ;main.c: 534: ( Read_b_eep(0x20 + 3 + i*4) ) );
 26589  003DFE  5179               	movf	init_app_ram@i& (0+255),w,b
 26590  003E00  6F71               	movwf	??_init_app_ram& (0+255),b
 26591  003E02  6B72               	clrf	(??_init_app_ram+1)& (0+255),b
 26592  003E04  90D8               	bcf	status,0,c
 26593  003E06  3771               	rlcf	??_init_app_ram& (0+255),f,b
 26594  003E08  3772               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 26595  003E0A  90D8               	bcf	status,0,c
 26596  003E0C  3771               	rlcf	??_init_app_ram& (0+255),f,b
 26597  003E0E  3772               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 26598  003E10  0E22               	movlw	34
 26599  003E12  2571               	addwf	??_init_app_ram& (0+255),w,b
 26600  003E14  6F60               	movwf	?_Read_b_eep& (0+255),b
 26601  003E16  0E00               	movlw	0
 26602  003E18  2172               	addwfc	(??_init_app_ram+1)& (0+255),w,b
 26603  003E1A  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26604  003E1C  ECEC  F007         	call	_Read_b_eep	;wreg free
 26605  003E20  0100               	movlb	0	; () banked
 26606  003E22  6F74               	movwf	(??_init_app_ram+3)& (0+255),b
 26607  003E24  6B73               	clrf	(??_init_app_ram+2)& (0+255),b
 26608  003E26  5179               	movf	init_app_ram@i& (0+255),w,b
 26609  003E28  0D04               	mullw	4
 26610  003E2A  0E20               	movlw	32
 26611  003E2C  24F3               	addwf	prodl,w,c
 26612  003E2E  6F60               	movwf	?_Read_b_eep& (0+255),b
 26613  003E30  0E00               	movlw	0
 26614  003E32  20F4               	addwfc	prodh,w,c
 26615  003E34  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26616  003E36  ECEC  F007         	call	_Read_b_eep	;wreg free
 26617  003E3A  0100               	movlb	0	; () banked
 26618  003E3C  6F75               	movwf	(??_init_app_ram+4)& (0+255),b
 26619  003E3E  6B76               	clrf	(??_init_app_ram+5)& (0+255),b
 26620  003E40  5179               	movf	init_app_ram@i& (0+255),w,b
 26621  003E42  0D04               	mullw	4
 26622  003E44  0E21               	movlw	33
 26623  003E46  24F3               	addwf	prodl,w,c
 26624  003E48  6F60               	movwf	?_Read_b_eep& (0+255),b
 26625  003E4A  0E00               	movlw	0
 26626  003E4C  20F4               	addwfc	prodh,w,c
 26627  003E4E  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26628  003E50  ECEC  F007         	call	_Read_b_eep	;wreg free
 26629  003E54  0100               	movlb	0	; () banked
 26630  003E56  2775               	addwf	(??_init_app_ram+4)& (0+255),f,b
 26631  003E58  0E00               	movlw	0
 26632  003E5A  2376               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 26633  003E5C  5173               	movf	(??_init_app_ram+2)& (0+255),w,b
 26634  003E5E  2575               	addwf	(??_init_app_ram+4)& (0+255),w,b
 26635  003E60  6F77               	movwf	(??_init_app_ram+6)& (0+255),b
 26636  003E62  5174               	movf	(??_init_app_ram+3)& (0+255),w,b
 26637  003E64  2176               	addwfc	(??_init_app_ram+5)& (0+255),w,b
 26638  003E66  6F78               	movwf	(??_init_app_ram+7)& (0+255),b
 26639  003E68  5179               	movf	init_app_ram@i& (0+255),w,b
 26640  003E6A  0D04               	mullw	4
 26641  003E6C  0E23               	movlw	35
 26642  003E6E  24F3               	addwf	prodl,w,c
 26643  003E70  6F60               	movwf	?_Read_b_eep& (0+255),b
 26644  003E72  0E00               	movlw	0
 26645  003E74  20F4               	addwfc	prodh,w,c
 26646  003E76  6F61               	movwf	(?_Read_b_eep+1)& (0+255),b
 26647  003E78  ECEC  F007         	call	_Read_b_eep	;wreg free
 26648  003E7C  0100               	movlb	0	; () banked
 26649  003E7E  2777               	addwf	(??_init_app_ram+6)& (0+255),f,b
 26650  003E80  0E00               	movlw	0
 26651  003E82  2378               	addwfc	(??_init_app_ram+7)& (0+255),f,b
 26652  003E84  C077  F062         	movff	??_init_app_ram+6,?_setFilter
 26653  003E88  C078  F063         	movff	??_init_app_ram+7,?_setFilter+1
 26654  003E8C  BF63               	btfsc	(?_setFilter+1)& (0+255),7,b
 26655  003E8E  0EFF               	movlw	-1
 26656  003E90  6F64               	movwf	(?_setFilter+2)& (0+255),b
 26657  003E92  6F65               	movwf	(?_setFilter+3)& (0+255),b
 26658  003E94  5179               	movf	init_app_ram@i& (0+255),w,b
 26659  003E96  ECB3  F01F         	call	_setFilter
 26660                           
 26661                           ; BSR set to: 0
 26662  003E9A  2B79               	incf	init_app_ram@i& (0+255),f,b
 26663                           
 26664                           ; BSR set to: 0
 26665  003E9C  0E0E               	movlw	14
 26666  003E9E  6579               	cpfsgt	init_app_ram@i& (0+255),b
 26667  003EA0  D7AE               	goto	l15650
 26668                           
 26669                           ; BSR set to: 0
 26670                           ;main.c: 535: }
 26671                           ;main.c: 537: _CANIDToRegs((BYTE*)&RXM0SIDH, ( Read_b_eep(0x60) << 24 ) + ( Read_b_eep(0
      +                          x60 + 1) << 16 ) + ( Read_b_eep(0x60 + 2) << 8 ) + ( Read_b_eep(0x60 + 3) ), 1);
 26672  003EA2  0E0F               	movlw	15	;volatile
 26673  003EA4  0100               	movlb	0	; () banked
 26674  003EA6  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 26675  003EA8  0E18               	movlw	24	;volatile
 26676  003EAA  6F62               	movwf	?__CANIDToRegs& (0+255),b
 26677  003EAC  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26678  003EAE  0E62               	movlw	98
 26679  003EB0  6F60               	movwf	?_Read_b_eep& (0+255),b
 26680  003EB2  ECEC  F007         	call	_Read_b_eep	;wreg free
 26681  003EB6  0100               	movlb	0	; () banked
 26682  003EB8  6F72               	movwf	(??_init_app_ram+1)& (0+255),b
 26683  003EBA  6B71               	clrf	??_init_app_ram& (0+255),b
 26684  003EBC  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26685  003EBE  0E60               	movlw	96
 26686  003EC0  6F60               	movwf	?_Read_b_eep& (0+255),b
 26687  003EC2  ECEC  F007         	call	_Read_b_eep	;wreg free
 26688  003EC6  0100               	movlb	0	; () banked
 26689  003EC8  6F73               	movwf	(??_init_app_ram+2)& (0+255),b
 26690  003ECA  6B74               	clrf	(??_init_app_ram+3)& (0+255),b
 26691  003ECC  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26692  003ECE  0E61               	movlw	97
 26693  003ED0  6F60               	movwf	?_Read_b_eep& (0+255),b
 26694  003ED2  ECEC  F007         	call	_Read_b_eep	;wreg free
 26695  003ED6  D83B               	call	PL54	;call to abstracted procedure
 26696  003ED8  0E63               	movlw	99
 26697  003EDA  6F60               	movwf	?_Read_b_eep& (0+255),b
 26698  003EDC  ECEC  F007         	call	_Read_b_eep	;wreg free
 26699  003EE0  D827               	call	PL34	;call to abstracted procedure
 26700  003EE2  EC2D  F016         	call	__CANIDToRegs	;wreg free
 26701                           
 26702                           ;main.c: 543: _CANIDToRegs((BYTE*)&RXM1SIDH, ( Read_b_eep(0x64) << 24 ) + ( Read_b_eep(0
      +                          x64 + 1) << 16 ) + ( Read_b_eep(0x64 + 2) << 8 ) + ( Read_b_eep(0x64 + 3) ), 1);
 26703  003EE6  0E0F               	movlw	15	;volatile
 26704  003EE8  0100               	movlb	0	; () banked
 26705  003EEA  6F63               	movwf	(?__CANIDToRegs+1)& (0+255),b
 26706  003EEC  0E1C               	movlw	28	;volatile
 26707  003EEE  6F62               	movwf	?__CANIDToRegs& (0+255),b
 26708  003EF0  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26709  003EF2  0E66               	movlw	102
 26710  003EF4  6F60               	movwf	?_Read_b_eep& (0+255),b
 26711  003EF6  ECEC  F007         	call	_Read_b_eep	;wreg free
 26712  003EFA  0100               	movlb	0	; () banked
 26713  003EFC  6F72               	movwf	(??_init_app_ram+1)& (0+255),b
 26714  003EFE  6B71               	clrf	??_init_app_ram& (0+255),b
 26715  003F00  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26716  003F02  0E64               	movlw	100
 26717  003F04  6F60               	movwf	?_Read_b_eep& (0+255),b
 26718  003F06  ECEC  F007         	call	_Read_b_eep	;wreg free
 26719  003F0A  0100               	movlb	0	; () banked
 26720  003F0C  6F73               	movwf	(??_init_app_ram+2)& (0+255),b
 26721  003F0E  6B74               	clrf	(??_init_app_ram+3)& (0+255),b
 26722  003F10  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26723  003F12  0E65               	movlw	101
 26724  003F14  6F60               	movwf	?_Read_b_eep& (0+255),b
 26725  003F16  ECEC  F007         	call	_Read_b_eep	;wreg free
 26726  003F1A  D819               	call	PL54	;call to abstracted procedure
 26727  003F1C  0E67               	movlw	103
 26728  003F1E  6F60               	movwf	?_Read_b_eep& (0+255),b
 26729  003F20  ECEC  F007         	call	_Read_b_eep	;wreg free
 26730  003F24  D805               	call	PL34	;call to abstracted procedure
 26731  003F26  EC2D  F016         	call	__CANIDToRegs	;wreg free
 26732                           
 26733                           ; BSR set to: 0
 26734                           ;main.c: 549: ECANSetOperationMode(0x20);
 26735  003F2A  0E20               	movlw	32
 26736  003F2C  EF0A  F008         	goto	_ECANSetOperationMode
 26737  003F30                     __end_of_init_app_ram:
 26738                           	opt stack 0
 26739  003F30                     PL34:
 26740                           	opt stack 23
 26741  003F30  0100               	movlb	0	; () banked
 26742  003F32  2775               	addwf	(??_init_app_ram+4)& (0+255),f,b
 26743  003F34  0E00               	movlw	0
 26744  003F36  2376               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 26745  003F38  C075  F064         	movff	??_init_app_ram+4,?__CANIDToRegs+2
 26746  003F3C  C076  F065         	movff	??_init_app_ram+5,?__CANIDToRegs+3
 26747  003F40  BF65               	btfsc	(?__CANIDToRegs+3)& (0+255),7,b
 26748  003F42  0EFF               	movlw	-1
 26749  003F44  6F66               	movwf	(?__CANIDToRegs+4)& (0+255),b
 26750  003F46  6F67               	movwf	(?__CANIDToRegs+5)& (0+255),b
 26751  003F48  0E01               	movlw	1
 26752  003F4A  6F68               	movwf	(?__CANIDToRegs+6)& (0+255),b
 26753  003F4C  0C01               	retlw	1
 26754  003F4E                     __end_ofPL34:
 26755                           	opt stack 0
 26756  003F4E                     PL54:
 26757                           	opt stack 23
 26758  003F4E  0100               	movlb	0	; () banked
 26759  003F50  2773               	addwf	(??_init_app_ram+2)& (0+255),f,b
 26760  003F52  0E00               	movlw	0
 26761  003F54  2374               	addwfc	(??_init_app_ram+3)& (0+255),f,b
 26762  003F56  5171               	movf	??_init_app_ram& (0+255),w,b
 26763  003F58  2573               	addwf	(??_init_app_ram+2)& (0+255),w,b
 26764  003F5A  6F75               	movwf	(??_init_app_ram+4)& (0+255),b
 26765  003F5C  5172               	movf	(??_init_app_ram+1)& (0+255),w,b
 26766  003F5E  2174               	addwfc	(??_init_app_ram+3)& (0+255),w,b
 26767  003F60  6F76               	movwf	(??_init_app_ram+5)& (0+255),b
 26768  003F62  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26769  003F64  0012               	return	
 26770  003F66                     __end_ofPL54:
 26771                           	opt stack 0
 26772                           tblptru	equ	0xFF8
 26773                           tblptrh	equ	0xFF7
 26774                           tblptrl	equ	0xFF6
 26775                           tablat	equ	0xFF5
 26776                           prodh	equ	0xFF4
 26777                           prodl	equ	0xFF3
 26778                           intcon	equ	0xFF2
 26779                           indf0	equ	0xFEF
 26780                           postinc0	equ	0xFEE
 26781                           fsr0h	equ	0xFEA
 26782                           fsr0l	equ	0xFE9
 26783                           wreg	equ	0xFE8
 26784                           indf1	equ	0xFE7
 26785                           postinc1	equ	0xFE6
 26786                           postdec1	equ	0xFE5
 26787                           fsr1h	equ	0xFE2
 26788                           fsr1l	equ	0xFE1
 26789                           indf2	equ	0xFDF
 26790                           postinc2	equ	0xFDE
 26791                           postdec2	equ	0xFDD
 26792                           plusw2	equ	0xFDB
 26793                           fsr2h	equ	0xFDA
 26794                           fsr2l	equ	0xFD9
 26795                           status	equ	0xFD8
 26796                           
 26797 ;; *************** function __CANIDToRegs *****************
 26798 ;; Defined at:
 26799 ;;		line 1101 in file "ECAN.c"
 26800 ;; Parameters:    Size  Location     Type
 26801 ;;  ptr             2    2[BANK0 ] PTR unsigned char 
 26802 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 26803 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 26804 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 26805 ;;  val             4    4[BANK0 ] unsigned long 
 26806 ;;  type            1    8[BANK0 ] unsigned char 
 26807 ;; Auto vars:     Size  Location     Type
 26808 ;;  Value           1   11[BANK0 ] PTR struct _CAN_MESSAGE_
 26809 ;;		 -> _CANIDToRegs@val(4), 
 26810 ;; Return value:  Size  Location     Type
 26811 ;;		None               void
 26812 ;; Registers used:
 26813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26814 ;; Tracked objects:
 26815 ;;		On entry : F/0
 26816 ;;		On exit  : F/0
 26817 ;;		Unchanged: 0/0
 26818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26819 ;;      Params:         0       7       0       0       0       0       0
 26820 ;;      Locals:         0       1       0       0       0       0       0
 26821 ;;      Temps:          0       2       0       0       0       0       0
 26822 ;;      Totals:         0      10       0       0       0       0       0
 26823 ;;Total ram usage:       10 bytes
 26824 ;; Hardware stack levels used:    1
 26825 ;; Hardware stack levels required when called:    3
 26826 ;; This function calls:
 26827 ;;		Nothing
 26828 ;; This function is called by:
 26829 ;;		_init_app_ram
 26830 ;;		_doModeVerbose
 26831 ;;		_ECANSendMessage
 26832 ;; This function uses a non-reentrant model
 26833 ;;
 26834                           
 26835                           	psect	text77
 26836  002C5A                     __ptext77:
 26837                           	opt stack 0
 26838  002C5A                     __CANIDToRegs:
 26839                           	opt stack 23
 26840                           
 26841                           ; BSR set to: 0
 26842                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 26843                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 26844                           
 26845                           ; BSR set to: 0
 26846                           ;incstack = 0
 26847                           ;incstack = 0
 26848  002C5A  0E64               	movlw	low __CANIDToRegs@val
 26849  002C5C  6F6B               	movwf	__CANIDToRegs@Value& (0+255),b
 26850                           
 26851                           ; BSR set to: 0
 26852                           ;ECAN.c: 1106: if ( type == 0 )
 26853  002C5E  6768               	tstfsz	__CANIDToRegs@type& (0+255),b
 26854  002C60  D022               	goto	l12198
 26855                           
 26856                           ; BSR set to: 0
 26857                           ;ECAN.c: 1107: {
 26858                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 26859  002C62  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26860  002C64  6ED9               	movwf	fsr2l,c
 26861  002C66  6ADA               	clrf	fsr2h,c
 26862  002C68  50DF               	movf	indf2,w,c
 26863  002C6A  6F69               	movwf	??__CANIDToRegs& (0+255),b
 26864  002C6C  90D8               	bcf	status,0,c
 26865  002C6E  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26866  002C70  90D8               	bcf	status,0,c
 26867  002C72  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26868  002C74  90D8               	bcf	status,0,c
 26869  002C76  3169               	rrcf	??__CANIDToRegs& (0+255),w,b
 26870                           
 26871                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 26872  002C78  D862               	call	PL52	;call to abstracted procedure
 26873  002C7A  2AD9               	incf	fsr2l,f,c
 26874  002C7C  6ADA               	clrf	fsr2h,c
 26875  002C7E  D872               	call	PL110	;call to abstracted procedure
 26876  002C80                     u15015:
 26877  002C80  90D8               	bcf	status,0,c
 26878  002C82  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26879  002C84  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26880  002C86  D7FC               	goto	u15015
 26881  002C88  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26882                           
 26883                           ; BSR set to: 0
 26884                           ;ECAN.c: 1111: ptr++;
 26885                           
 26886                           ; BSR set to: 0
 26887                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 26888  002C8C  D846               	call	PL32	;call to abstracted procedure
 26889  002C8E  D86A               	call	PL110	;call to abstracted procedure
 26890  002C90                     u15025:
 26891  002C90  90D8               	bcf	status,0,c
 26892  002C92  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26893  002C94  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26894  002C96  D7FC               	goto	u15025
 26895  002C98  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26896  002C9A  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26897  002C9E  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26898  002CA2  6EDF               	movwf	indf2,c
 26899                           
 26900                           ;ECAN.c: 1113: }
 26901  002CA4  D039               	goto	l1583
 26902  002CA6                     l12198:
 26903                           
 26904                           ; BSR set to: 0
 26905                           ;ECAN.c: 1114: else
 26906                           ;ECAN.c: 1115: {
 26907                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 26908  002CA6  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26909  002CA8  D842               	call	PL48	;call to abstracted procedure
 26910  002CAA  0E05               	movlw	5
 26911  002CAC  6F6A               	movwf	(??__CANIDToRegs+1)& (0+255),b
 26912  002CAE                     u15035:
 26913  002CAE  90D8               	bcf	status,0,c
 26914  002CB0  3369               	rrcf	??__CANIDToRegs& (0+255),f,b
 26915  002CB2  2F6A               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 26916  002CB4  D7FC               	goto	u15035
 26917  002CB6  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26918                           
 26919                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 26920  002CB8  D842               	call	PL52	;call to abstracted procedure
 26921  002CBA  0E03               	movlw	3
 26922  002CBC  D849               	call	PL74	;call to abstracted procedure
 26923  002CBE  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 26924  002CC0  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26925                           
 26926                           ; BSR set to: 0
 26927                           ;ECAN.c: 1119: ptr++;
 26928                           
 26929                           ; BSR set to: 0
 26930                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 26931  002CC4  D82A               	call	PL32	;call to abstracted procedure
 26932  002CC6  0E02               	movlw	2
 26933  002CC8  D843               	call	PL74	;call to abstracted procedure
 26934  002CCA  3569               	rlcf	??__CANIDToRegs& (0+255),w,b
 26935  002CCC  0BE0               	andlw	224
 26936  002CCE  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26937  002CD2  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26938  002CD6  6EDF               	movwf	indf2,c
 26939                           
 26940                           ; BSR set to: 0
 26941                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 26942  002CD8  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26943  002CDC  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26944  002CE0  0E00               	movlw	0
 26945  002CE2  86DB               	bsf	plusw2,3,c
 26946                           
 26947                           ; BSR set to: 0
 26948                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 26949  002CE4  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26950  002CE6  D823               	call	PL48	;call to abstracted procedure
 26951  002CE8  0E03               	movlw	3
 26952  002CEA  1769               	andwf	??__CANIDToRegs& (0+255),f,b
 26953  002CEC  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 26954                           
 26955                           ;ECAN.c: 1124: ptr++;
 26956                           
 26957                           ; BSR set to: 0
 26958                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 26959  002CF0  D814               	call	PL32	;call to abstracted procedure
 26960  002CF2  2AD9               	incf	fsr2l,f,c
 26961  002CF4  6ADA               	clrf	fsr2h,c
 26962  002CF6  C062  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 26963  002CFA  C063  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 26964  002CFE  CFDF FFE7          	movff	indf2,indf1
 26965                           
 26966                           ; BSR set to: 0
 26967                           ;ECAN.c: 1126: ptr++;
 26968  002D02  4B62               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 26969  002D04  2B63               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 26970                           
 26971                           ; BSR set to: 0
 26972                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 26973  002D06  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26974  002D08  6ED9               	movwf	fsr2l,c
 26975  002D0A  6ADA               	clrf	fsr2h,c
 26976  002D0C  C062  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 26977  002D10  C063  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 26978  002D14  CFDF FFE7          	movff	indf2,indf1
 26979  002D18                     l1583:
 26980                           
 26981                           ; BSR set to: 0
 26982  002D18  0012               	return	
 26983  002D1A                     __end_of__CANIDToRegs:
 26984                           	opt stack 0
 26985  002D1A                     PL32:
 26986                           	opt stack 23
 26987  002D1A  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 26988  002D1E  5169               	movf	??__CANIDToRegs& (0+255),w,b
 26989  002D20  12DF               	iorwf	indf2,f,c
 26990  002D22  4B62               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 26991  002D24  2B63               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 26992  002D26  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 26993  002D28  6ED9               	movwf	fsr2l,c
 26994  002D2A  6ADA               	clrf	fsr2h,c
 26995  002D2C  0012               	return	
 26996  002D2E                     __end_ofPL32:
 26997                           	opt stack 0
 26998  002D2E                     PL48:
 26999                           	opt stack 23
 27000  002D2E  6ED9               	movwf	fsr2l,c
 27001  002D30  6ADA               	clrf	fsr2h,c
 27002  002D32  0E02               	movlw	2
 27003  002D34  26D9               	addwf	fsr2l,f,c
 27004  002D36  6ADA               	clrf	fsr2h,c
 27005  002D38  50DF               	movf	indf2,w,c
 27006  002D3A  6F69               	movwf	??__CANIDToRegs& (0+255),b
 27007  002D3C  0012               	return	
 27008  002D3E                     __end_ofPL48:
 27009                           	opt stack 0
 27010  002D3E                     PL52:
 27011                           	opt stack 23
 27012  002D3E  C062  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27013  002D42  C063  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 27014  002D46  6EDF               	movwf	indf2,c
 27015  002D48  516B               	movf	__CANIDToRegs@Value& (0+255),w,b
 27016  002D4A  6ED9               	movwf	fsr2l,c
 27017  002D4C  6ADA               	clrf	fsr2h,c
 27018  002D4E  0012               	return	
 27019  002D50                     __end_ofPL52:
 27020                           	opt stack 0
 27021  002D50                     PL74:
 27022                           	opt stack 23
 27023  002D50  26D9               	addwf	fsr2l,f,c
 27024  002D52  6ADA               	clrf	fsr2h,c
 27025  002D54  50DF               	movf	indf2,w,c
 27026  002D56  6F69               	movwf	??__CANIDToRegs& (0+255),b
 27027  002D58  90D8               	bcf	status,0,c
 27028  002D5A  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 27029  002D5C  90D8               	bcf	status,0,c
 27030  002D5E  3769               	rlcf	??__CANIDToRegs& (0+255),f,b
 27031  002D60  90D8               	bcf	status,0,c
 27032  002D62  0012               	return	
 27033  002D64                     __end_ofPL74:
 27034                           	opt stack 0
 27035  002D64                     PL110:
 27036                           	opt stack 23
 27037  002D64  50DF               	movf	indf2,w,c
 27038  002D66  6F69               	movwf	??__CANIDToRegs& (0+255),b
 27039  002D68  0E05               	movlw	5
 27040  002D6A  6F6A               	movwf	(??__CANIDToRegs+1)& (0+255),b
 27041  002D6C  0C05               	retlw	5
 27042  002D6E                     __end_ofPL110:
 27043                           	opt stack 0
 27044                           tblptru	equ	0xFF8
 27045                           tblptrh	equ	0xFF7
 27046                           tblptrl	equ	0xFF6
 27047                           tablat	equ	0xFF5
 27048                           prodh	equ	0xFF4
 27049                           prodl	equ	0xFF3
 27050                           intcon	equ	0xFF2
 27051                           indf0	equ	0xFEF
 27052                           postinc0	equ	0xFEE
 27053                           fsr0h	equ	0xFEA
 27054                           fsr0l	equ	0xFE9
 27055                           wreg	equ	0xFE8
 27056                           indf1	equ	0xFE7
 27057                           postinc1	equ	0xFE6
 27058                           postdec1	equ	0xFE5
 27059                           fsr1h	equ	0xFE2
 27060                           fsr1l	equ	0xFE1
 27061                           indf2	equ	0xFDF
 27062                           postinc2	equ	0xFDE
 27063                           postdec2	equ	0xFDD
 27064                           plusw2	equ	0xFDB
 27065                           fsr2h	equ	0xFDA
 27066                           fsr2l	equ	0xFD9
 27067                           status	equ	0xFD8
 27068                           
 27069 ;; *************** function _setFilter *****************
 27070 ;; Defined at:
 27071 ;;		line 3091 in file "main.c"
 27072 ;; Parameters:    Size  Location     Type
 27073 ;;  filter          1    wreg     unsigned char 
 27074 ;;  val             4    2[BANK0 ] unsigned long 
 27075 ;; Auto vars:     Size  Location     Type
 27076 ;;  filter          1   12[BANK0 ] unsigned char 
 27077 ;;  eidl            1   16[BANK0 ] unsigned char 
 27078 ;;  eidh            1   15[BANK0 ] unsigned char 
 27079 ;;  sidl            1   14[BANK0 ] unsigned char 
 27080 ;;  sidh            1   13[BANK0 ] unsigned char 
 27081 ;; Return value:  Size  Location     Type
 27082 ;;		None               void
 27083 ;; Registers used:
 27084 ;;		wreg, status,2, status,0
 27085 ;; Tracked objects:
 27086 ;;		On entry : D/2
 27087 ;;		On exit  : F/0
 27088 ;;		Unchanged: 0/0
 27089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27090 ;;      Params:         0       4       0       0       0       0       0
 27091 ;;      Locals:         0       5       0       0       0       0       0
 27092 ;;      Temps:          0       6       0       0       0       0       0
 27093 ;;      Totals:         0      15       0       0       0       0       0
 27094 ;;Total ram usage:       15 bytes
 27095 ;; Hardware stack levels used:    1
 27096 ;; Hardware stack levels required when called:    3
 27097 ;; This function calls:
 27098 ;;		Nothing
 27099 ;; This function is called by:
 27100 ;;		_init_app_ram
 27101 ;;		_doModeVerbose
 27102 ;; This function uses a non-reentrant model
 27103 ;;
 27104                           
 27105                           	psect	text78
 27106  003F66                     __ptext78:
 27107                           	opt stack 0
 27108  003F66                     _setFilter:
 27109                           	opt stack 25
 27110                           
 27111                           ; BSR set to: 0
 27112                           ;incstack = 0
 27113                           ;incstack = 0
 27114                           ;setFilter@filter stored from wreg
 27115  003F66  CFE8 F06C          	movff	wreg,setFilter@filter
 27116                           
 27117                           ;main.c: 3092: uint8_t sidh = (long) val >> 21L;
 27118  003F6A  0E15               	movlw	21
 27119  003F6C  0100               	movlb	0	; () banked
 27120  003F6E  6F66               	movwf	??_setFilter& (0+255),b
 27121  003F70  C062  F067         	movff	setFilter@val,??_setFilter+1
 27122  003F74  C063  F068         	movff	setFilter@val+1,??_setFilter+2
 27123  003F78  C064  F069         	movff	setFilter@val+2,??_setFilter+3
 27124  003F7C  C065  F06A         	movff	setFilter@val+3,??_setFilter+4
 27125  003F80                     u14985:
 27126  003F80  6766               	tstfsz	??_setFilter& (0+255),b
 27127  003F82  D001               	goto	u14986
 27128  003F84  D007               	goto	u14987
 27129  003F86                     u14986:
 27130  003F86  356A               	rlcf	(??_setFilter+4)& (0+255),w,b
 27131  003F88  336A               	rrcf	(??_setFilter+4)& (0+255),f,b
 27132  003F8A  3369               	rrcf	(??_setFilter+3)& (0+255),f,b
 27133  003F8C  3368               	rrcf	(??_setFilter+2)& (0+255),f,b
 27134  003F8E  3367               	rrcf	(??_setFilter+1)& (0+255),f,b
 27135  003F90  2F66               	decfsz	??_setFilter& (0+255),f,b
 27136  003F92  D7F6               	goto	u14985
 27137  003F94                     u14987:
 27138  003F94  5167               	movf	(??_setFilter+1)& (0+255),w,b
 27139  003F96  6F6D               	movwf	setFilter@sidh& (0+255),b
 27140                           
 27141                           ;main.c: 3093: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 27142                           ;main.c: 3094: ((long) (val) & 0x03L) |
 27143                           ;main.c: 3095: 0x08;
 27144  003F98  C062  F066         	movff	setFilter@val,??_setFilter
 27145  003F9C  0E03               	movlw	3
 27146  003F9E  1766               	andwf	??_setFilter& (0+255),f,b
 27147  003FA0  0E0D               	movlw	13
 27148  003FA2  6F67               	movwf	(??_setFilter+1)& (0+255),b
 27149  003FA4  C062  F068         	movff	setFilter@val,??_setFilter+2
 27150  003FA8  C063  F069         	movff	setFilter@val+1,??_setFilter+3
 27151  003FAC  C064  F06A         	movff	setFilter@val+2,??_setFilter+4
 27152  003FB0  C065  F06B         	movff	setFilter@val+3,??_setFilter+5
 27153  003FB4                     u14995:
 27154  003FB4  6767               	tstfsz	(??_setFilter+1)& (0+255),b
 27155  003FB6  D001               	goto	u14996
 27156  003FB8  D007               	goto	u14997
 27157  003FBA                     u14996:
 27158  003FBA  356B               	rlcf	(??_setFilter+5)& (0+255),w,b
 27159  003FBC  336B               	rrcf	(??_setFilter+5)& (0+255),f,b
 27160  003FBE  336A               	rrcf	(??_setFilter+4)& (0+255),f,b
 27161  003FC0  3369               	rrcf	(??_setFilter+3)& (0+255),f,b
 27162  003FC2  3368               	rrcf	(??_setFilter+2)& (0+255),f,b
 27163  003FC4  2F67               	decfsz	(??_setFilter+1)& (0+255),f,b
 27164  003FC6  D7F6               	goto	u14995
 27165  003FC8                     u14997:
 27166  003FC8  5168               	movf	(??_setFilter+2)& (0+255),w,b
 27167  003FCA  0BE0               	andlw	224
 27168  003FCC  1166               	iorwf	??_setFilter& (0+255),w,b
 27169  003FCE  0908               	iorlw	8
 27170  003FD0  6F6E               	movwf	setFilter@sidl& (0+255),b
 27171                           
 27172                           ; BSR set to: 0
 27173                           ;main.c: 3096: uint8_t eidh = (long) val >> 8L;
 27174  003FD2  C063  F06F         	movff	setFilter@val+1,setFilter@eidh
 27175                           
 27176                           ; BSR set to: 0
 27177                           ;main.c: 3097: uint8_t eidl = val;
 27178  003FD6  C062  F070         	movff	setFilter@val,setFilter@eidl
 27179                           
 27180                           ;main.c: 3099: switch (filter) {
 27181  003FDA  D090               	goto	l12186
 27182  003FDC                     l1324:
 27183                           
 27184                           ; BSR set to: 0
 27185                           ;main.c: 3102: RXF0SIDH = sidh;
 27186  003FDC  C06D  FF00         	movff	setFilter@sidh,3840	;volatile
 27187                           
 27188                           ;main.c: 3103: RXF0SIDL = sidl;
 27189  003FE0  C06E  FF01         	movff	setFilter@sidl,3841	;volatile
 27190                           
 27191                           ;main.c: 3104: RXF0EIDH = eidh;
 27192  003FE4  C06F  FF02         	movff	setFilter@eidh,3842	;volatile
 27193                           
 27194                           ;main.c: 3105: RXF0EIDL = eidl;
 27195  003FE8  C070  FF03         	movff	setFilter@eidl,3843	;volatile
 27196                           
 27197                           ;main.c: 3106: break;
 27198  003FEC  D0AA               	goto	l1341
 27199  003FEE                     l1326:
 27200                           
 27201                           ; BSR set to: 0
 27202                           ;main.c: 3109: RXF1SIDH = sidh;
 27203  003FEE  C06D  FF04         	movff	setFilter@sidh,3844	;volatile
 27204                           
 27205                           ;main.c: 3110: RXF1SIDL = sidl;
 27206  003FF2  C06E  FF05         	movff	setFilter@sidl,3845	;volatile
 27207                           
 27208                           ;main.c: 3111: RXF1EIDH = eidh;
 27209  003FF6  C06F  FF06         	movff	setFilter@eidh,3846	;volatile
 27210                           
 27211                           ;main.c: 3112: RXF1EIDL = eidl;
 27212  003FFA  C070  FF07         	movff	setFilter@eidl,3847	;volatile
 27213                           
 27214                           ;main.c: 3113: break;
 27215  003FFE  D0A1               	goto	l1341
 27216  004000                     l1327:
 27217                           
 27218                           ; BSR set to: 0
 27219                           ;main.c: 3116: RXF2SIDH = sidh;
 27220  004000  C06D  FF08         	movff	setFilter@sidh,3848	;volatile
 27221                           
 27222                           ;main.c: 3117: RXF2SIDL = sidl;
 27223  004004  C06E  FF09         	movff	setFilter@sidl,3849	;volatile
 27224                           
 27225                           ;main.c: 3118: RXF2EIDH = eidh;
 27226  004008  C06F  FF0A         	movff	setFilter@eidh,3850	;volatile
 27227                           
 27228                           ;main.c: 3119: RXF2EIDL = eidl;
 27229  00400C  C070  FF0B         	movff	setFilter@eidl,3851	;volatile
 27230                           
 27231                           ;main.c: 3120: break;
 27232  004010  D098               	goto	l1341
 27233  004012                     l1328:
 27234                           
 27235                           ; BSR set to: 0
 27236                           ;main.c: 3123: RXF3SIDH = sidh;
 27237  004012  C06D  FF0C         	movff	setFilter@sidh,3852	;volatile
 27238                           
 27239                           ;main.c: 3124: RXF3SIDL = sidl;
 27240  004016  C06E  FF0D         	movff	setFilter@sidl,3853	;volatile
 27241                           
 27242                           ;main.c: 3125: RXF3EIDH = eidh;
 27243  00401A  C06F  FF0E         	movff	setFilter@eidh,3854	;volatile
 27244                           
 27245                           ;main.c: 3126: RXF3EIDL = eidl;
 27246  00401E  C070  FF0F         	movff	setFilter@eidl,3855	;volatile
 27247                           
 27248                           ;main.c: 3127: break;
 27249  004022  D08F               	goto	l1341
 27250  004024                     l1329:
 27251                           
 27252                           ; BSR set to: 0
 27253                           ;main.c: 3130: RXF4SIDH = sidh;
 27254  004024  C06D  FF10         	movff	setFilter@sidh,3856	;volatile
 27255                           
 27256                           ;main.c: 3131: RXF4SIDL = sidl;
 27257  004028  C06E  FF11         	movff	setFilter@sidl,3857	;volatile
 27258                           
 27259                           ;main.c: 3132: RXF4EIDH = eidh;
 27260  00402C  C06F  FF12         	movff	setFilter@eidh,3858	;volatile
 27261                           
 27262                           ;main.c: 3133: RXF4EIDL = eidl;
 27263  004030  C070  FF13         	movff	setFilter@eidl,3859	;volatile
 27264                           
 27265                           ;main.c: 3134: break;
 27266  004034  D086               	goto	l1341
 27267  004036                     l1330:
 27268                           
 27269                           ; BSR set to: 0
 27270                           ;main.c: 3137: RXF5SIDH = sidh;
 27271  004036  C06D  FF14         	movff	setFilter@sidh,3860	;volatile
 27272                           
 27273                           ;main.c: 3138: RXF5SIDL = sidl;
 27274  00403A  C06E  FF15         	movff	setFilter@sidl,3861	;volatile
 27275                           
 27276                           ;main.c: 3139: RXF5EIDH = eidh;
 27277  00403E  C06F  FF16         	movff	setFilter@eidh,3862	;volatile
 27278                           
 27279                           ;main.c: 3140: RXF5EIDL = eidl;
 27280  004042  C070  FF17         	movff	setFilter@eidl,3863	;volatile
 27281                           
 27282                           ;main.c: 3141: break;
 27283  004046  D07D               	goto	l1341
 27284  004048                     l1331:
 27285                           
 27286                           ; BSR set to: 0
 27287                           ;main.c: 3144: RXF6SIDH = sidh;
 27288  004048  C06D  FD60         	movff	setFilter@sidh,3424	;volatile
 27289                           
 27290                           ;main.c: 3145: RXF6SIDL = sidl;
 27291  00404C  C06E  FD61         	movff	setFilter@sidl,3425	;volatile
 27292                           
 27293                           ;main.c: 3146: RXF6EIDH = eidh;
 27294  004050  C06F  FD62         	movff	setFilter@eidh,3426	;volatile
 27295                           
 27296                           ;main.c: 3147: RXF6EIDL = eidl;
 27297  004054  C070  FD63         	movff	setFilter@eidl,3427	;volatile
 27298                           
 27299                           ;main.c: 3148: break;
 27300  004058  D074               	goto	l1341
 27301  00405A                     l1332:
 27302                           
 27303                           ; BSR set to: 0
 27304                           ;main.c: 3151: RXF7SIDH = sidh;
 27305  00405A  C06D  FD64         	movff	setFilter@sidh,3428	;volatile
 27306                           
 27307                           ;main.c: 3152: RXF7SIDL = sidl;
 27308  00405E  C06E  FD65         	movff	setFilter@sidl,3429	;volatile
 27309                           
 27310                           ;main.c: 3153: RXF7EIDH = eidh;
 27311  004062  C06F  FD66         	movff	setFilter@eidh,3430	;volatile
 27312                           
 27313                           ;main.c: 3154: RXF7EIDL = eidl;
 27314  004066  C070  FD67         	movff	setFilter@eidl,3431	;volatile
 27315                           
 27316                           ;main.c: 3155: break;
 27317  00406A  D06B               	goto	l1341
 27318  00406C                     l1333:
 27319                           
 27320                           ; BSR set to: 0
 27321                           ;main.c: 3158: RXF8SIDH = sidh;
 27322  00406C  C06D  FD68         	movff	setFilter@sidh,3432	;volatile
 27323                           
 27324                           ;main.c: 3159: RXF8SIDL = sidl;
 27325  004070  C06E  FD69         	movff	setFilter@sidl,3433	;volatile
 27326                           
 27327                           ;main.c: 3160: RXF8EIDH = eidh;
 27328  004074  C06F  FD6A         	movff	setFilter@eidh,3434	;volatile
 27329                           
 27330                           ;main.c: 3161: RXF8EIDL = eidl;
 27331  004078  C070  FD6B         	movff	setFilter@eidl,3435	;volatile
 27332                           
 27333                           ;main.c: 3162: break;
 27334  00407C  D062               	goto	l1341
 27335  00407E                     l1334:
 27336                           
 27337                           ; BSR set to: 0
 27338                           ;main.c: 3165: RXF9SIDH = sidh;
 27339  00407E  C06D  FD70         	movff	setFilter@sidh,3440	;volatile
 27340                           
 27341                           ;main.c: 3166: RXF9SIDL = sidl;
 27342  004082  C06E  FD71         	movff	setFilter@sidl,3441	;volatile
 27343                           
 27344                           ;main.c: 3167: RXF9EIDH = eidh;
 27345  004086  C06F  FD72         	movff	setFilter@eidh,3442	;volatile
 27346                           
 27347                           ;main.c: 3168: RXF9EIDL = eidl;
 27348  00408A  C070  FD73         	movff	setFilter@eidl,3443	;volatile
 27349                           
 27350                           ;main.c: 3169: break;
 27351  00408E  D059               	goto	l1341
 27352  004090                     l1335:
 27353                           
 27354                           ; BSR set to: 0
 27355                           ;main.c: 3172: RXF10SIDH = sidh;
 27356  004090  C06D  FD74         	movff	setFilter@sidh,3444	;volatile
 27357                           
 27358                           ;main.c: 3173: RXF10SIDL = sidl;
 27359  004094  C06E  FD75         	movff	setFilter@sidl,3445	;volatile
 27360                           
 27361                           ;main.c: 3174: RXF10EIDH = eidh;
 27362  004098  C06F  FD76         	movff	setFilter@eidh,3446	;volatile
 27363                           
 27364                           ;main.c: 3175: RXF10EIDL = eidl;
 27365  00409C  C070  FD77         	movff	setFilter@eidl,3447	;volatile
 27366                           
 27367                           ;main.c: 3176: break;
 27368  0040A0  D050               	goto	l1341
 27369  0040A2                     l1336:
 27370                           
 27371                           ; BSR set to: 0
 27372                           ;main.c: 3179: RXF11SIDH = sidh;
 27373  0040A2  C06D  FD78         	movff	setFilter@sidh,3448	;volatile
 27374                           
 27375                           ;main.c: 3180: RXF11SIDL = sidl;
 27376  0040A6  C06E  FD79         	movff	setFilter@sidl,3449	;volatile
 27377                           
 27378                           ;main.c: 3181: RXF11EIDH = eidh;
 27379  0040AA  C06F  FD7A         	movff	setFilter@eidh,3450	;volatile
 27380                           
 27381                           ;main.c: 3182: RXF11EIDL = eidl;
 27382  0040AE  C070  FD7B         	movff	setFilter@eidl,3451	;volatile
 27383                           
 27384                           ;main.c: 3183: break;
 27385  0040B2  D047               	goto	l1341
 27386  0040B4                     l1337:
 27387                           
 27388                           ; BSR set to: 0
 27389                           ;main.c: 3186: RXF12SIDH = sidh;
 27390  0040B4  C06D  FD80         	movff	setFilter@sidh,3456	;volatile
 27391                           
 27392                           ;main.c: 3187: RXF12SIDL = sidl;
 27393  0040B8  C06E  FD81         	movff	setFilter@sidl,3457	;volatile
 27394                           
 27395                           ;main.c: 3188: RXF12EIDH = eidh;
 27396  0040BC  C06F  FD82         	movff	setFilter@eidh,3458	;volatile
 27397                           
 27398                           ;main.c: 3189: RXF12EIDL = eidl;
 27399  0040C0  C070  FD83         	movff	setFilter@eidl,3459	;volatile
 27400                           
 27401                           ;main.c: 3190: break;
 27402  0040C4  D03E               	goto	l1341
 27403  0040C6                     l1338:
 27404                           
 27405                           ; BSR set to: 0
 27406                           ;main.c: 3193: RXF13SIDH = sidh;
 27407  0040C6  C06D  FD84         	movff	setFilter@sidh,3460	;volatile
 27408                           
 27409                           ;main.c: 3194: RXF13SIDL = sidl;
 27410  0040CA  C06E  FD85         	movff	setFilter@sidl,3461	;volatile
 27411                           
 27412                           ;main.c: 3195: RXF13EIDH = eidh;
 27413  0040CE  C06F  FD86         	movff	setFilter@eidh,3462	;volatile
 27414                           
 27415                           ;main.c: 3196: RXF13EIDL = eidl;
 27416  0040D2  C070  FD87         	movff	setFilter@eidl,3463	;volatile
 27417                           
 27418                           ;main.c: 3197: break;
 27419  0040D6  D035               	goto	l1341
 27420  0040D8                     l1339:
 27421                           
 27422                           ; BSR set to: 0
 27423                           ;main.c: 3200: RXF14SIDH = sidh;
 27424  0040D8  C06D  FD88         	movff	setFilter@sidh,3464	;volatile
 27425                           
 27426                           ;main.c: 3201: RXF14SIDL = sidl;
 27427  0040DC  C06E  FD89         	movff	setFilter@sidl,3465	;volatile
 27428                           
 27429                           ;main.c: 3202: RXF14EIDH = eidh;
 27430  0040E0  C06F  FD8A         	movff	setFilter@eidh,3466	;volatile
 27431                           
 27432                           ;main.c: 3203: RXF14EIDL = eidl;
 27433  0040E4  C070  FD8B         	movff	setFilter@eidl,3467	;volatile
 27434                           
 27435                           ;main.c: 3204: break;
 27436  0040E8  D02C               	goto	l1341
 27437  0040EA                     l1340:
 27438                           
 27439                           ; BSR set to: 0
 27440                           ;main.c: 3207: RXF15SIDH = sidh;
 27441  0040EA  C06D  FD90         	movff	setFilter@sidh,3472	;volatile
 27442                           
 27443                           ;main.c: 3208: RXF15SIDL = sidl;
 27444  0040EE  C06E  FD91         	movff	setFilter@sidl,3473	;volatile
 27445                           
 27446                           ;main.c: 3209: RXF15EIDH = eidh;
 27447  0040F2  C06F  FD92         	movff	setFilter@eidh,3474	;volatile
 27448                           
 27449                           ;main.c: 3210: RXF15EIDL = eidl;
 27450  0040F6  C070  FD93         	movff	setFilter@eidl,3475	;volatile
 27451                           
 27452                           ;main.c: 3211: break;
 27453  0040FA  D023               	goto	l1341
 27454  0040FC                     l12186:
 27455                           
 27456                           ; BSR set to: 0
 27457  0040FC  516C               	movf	setFilter@filter& (0+255),w,b
 27458                           
 27459                           ; Switch size 1, requested type "space"
 27460                           ; Number of cases is 16, Range of values is 0 to 15
 27461                           ; switch strategies available:
 27462                           ; Name         Instructions Cycles
 27463                           ; simple_byte           49    25 (average)
 27464                           ;	Chosen strategy is simple_byte
 27465  0040FE  E101 D76D          	bz	l1324
 27466  004102  0A01               	xorlw	1	; case 1
 27467  004104  E101 D773          	bz	l1326
 27468  004108  0A03               	xorlw	3	; case 2
 27469  00410A  E101 D779          	bz	l1327
 27470  00410E  0A01               	xorlw	1	; case 3
 27471  004110  E080               	bz	l1328
 27472  004112  0A07               	xorlw	7	; case 4
 27473  004114  E087               	bz	l1329
 27474  004116  0A01               	xorlw	1	; case 5
 27475  004118  E08E               	bz	l1330
 27476  00411A  0A03               	xorlw	3	; case 6
 27477  00411C  E095               	bz	l1331
 27478  00411E  0A01               	xorlw	1	; case 7
 27479  004120  E09C               	bz	l1332
 27480  004122  0A0F               	xorlw	15	; case 8
 27481  004124  E0A3               	bz	l1333
 27482  004126  0A01               	xorlw	1	; case 9
 27483  004128  E0AA               	bz	l1334
 27484  00412A  0A03               	xorlw	3	; case 10
 27485  00412C  E0B1               	bz	l1335
 27486  00412E  0A01               	xorlw	1	; case 11
 27487  004130  E0B8               	bz	l1336
 27488  004132  0A07               	xorlw	7	; case 12
 27489  004134  E0BF               	bz	l1337
 27490  004136  0A01               	xorlw	1	; case 13
 27491  004138  E0C6               	bz	l1338
 27492  00413A  0A03               	xorlw	3	; case 14
 27493  00413C  E0CD               	bz	l1339
 27494  00413E  0A01               	xorlw	1	; case 15
 27495  004140  E0D4               	bz	l1340
 27496  004142                     l1341:
 27497                           
 27498                           ; BSR set to: 0
 27499  004142  0012               	return	
 27500  004144                     __end_of_setFilter:
 27501                           	opt stack 0
 27502                           tblptru	equ	0xFF8
 27503                           tblptrh	equ	0xFF7
 27504                           tblptrl	equ	0xFF6
 27505                           tablat	equ	0xFF5
 27506                           prodh	equ	0xFF4
 27507                           prodl	equ	0xFF3
 27508                           intcon	equ	0xFF2
 27509                           indf0	equ	0xFEF
 27510                           postinc0	equ	0xFEE
 27511                           fsr0h	equ	0xFEA
 27512                           fsr0l	equ	0xFE9
 27513                           wreg	equ	0xFE8
 27514                           indf1	equ	0xFE7
 27515                           postinc1	equ	0xFE6
 27516                           postdec1	equ	0xFE5
 27517                           fsr1h	equ	0xFE2
 27518                           fsr1l	equ	0xFE1
 27519                           indf2	equ	0xFDF
 27520                           postinc2	equ	0xFDE
 27521                           postdec2	equ	0xFDD
 27522                           plusw2	equ	0xFDB
 27523                           fsr2h	equ	0xFDA
 27524                           fsr2l	equ	0xFD9
 27525                           status	equ	0xFD8
 27526                           
 27527 ;; *************** function _ECANSetOperationMode *****************
 27528 ;; Defined at:
 27529 ;;		line 1014 in file "ECAN.c"
 27530 ;; Parameters:    Size  Location     Type
 27531 ;;  mode            1    wreg     enum E16346
 27532 ;; Auto vars:     Size  Location     Type
 27533 ;;  mode            1    0[BANK0 ] enum E16346
 27534 ;; Return value:  Size  Location     Type
 27535 ;;		None               void
 27536 ;; Registers used:
 27537 ;;		wreg, status,2, status,0
 27538 ;; Tracked objects:
 27539 ;;		On entry : 0/1
 27540 ;;		On exit  : F/0
 27541 ;;		Unchanged: 0/0
 27542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27543 ;;      Params:         0       0       0       0       0       0       0
 27544 ;;      Locals:         0       1       0       0       0       0       0
 27545 ;;      Temps:          0       0       0       0       0       0       0
 27546 ;;      Totals:         0       1       0       0       0       0       0
 27547 ;;Total ram usage:        1 bytes
 27548 ;; Hardware stack levels used:    1
 27549 ;; Hardware stack levels required when called:    3
 27550 ;; This function calls:
 27551 ;;		Nothing
 27552 ;; This function is called by:
 27553 ;;		_main
 27554 ;;		_init_app_ram
 27555 ;;		_doModeVerbose
 27556 ;;		_doModeVscp
 27557 ;;		_doModeSLCAN
 27558 ;;		_ECANInitialize
 27559 ;; This function uses a non-reentrant model
 27560 ;;
 27561                           
 27562                           	psect	text79
 27563  001014                     __ptext79:
 27564                           	opt stack 0
 27565  001014                     _ECANSetOperationMode:
 27566                           	opt stack 25
 27567                           
 27568                           ; BSR set to: 0
 27569                           ;incstack = 0
 27570                           ;incstack = 0
 27571                           ;ECANSetOperationMode@mode stored from wreg
 27572  001014  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 27573                           
 27574                           ;ECAN.c: 1015: CANCON &= 0x1F;
 27575  001018  0E1F               	movlw	31
 27576  00101A  166F               	andwf	3951,f,c	;volatile
 27577                           
 27578                           ;ECAN.c: 1016: CANCON |= mode;
 27579  00101C  0100               	movlb	0	; () banked
 27580  00101E  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 27581  001020  126F               	iorwf	3951,f,c	;volatile
 27582  001022                     l14470:
 27583                           
 27584                           ; BSR set to: 0
 27585  001022  506F               	movf	3951,w,c	;volatile
 27586  001024  0BE0               	andlw	224
 27587  001026  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 27588  001028  B4D8               	btfsc	status,2,c
 27589                           
 27590                           ; BSR set to: 0
 27591  00102A  0012               	return	
 27592  00102C  D7FA               	goto	l14470
 27593  00102E                     __end_of_ECANSetOperationMode:
 27594                           	opt stack 0
 27595                           tblptru	equ	0xFF8
 27596                           tblptrh	equ	0xFF7
 27597                           tblptrl	equ	0xFF6
 27598                           tablat	equ	0xFF5
 27599                           prodh	equ	0xFF4
 27600                           prodl	equ	0xFF3
 27601                           intcon	equ	0xFF2
 27602                           indf0	equ	0xFEF
 27603                           postinc0	equ	0xFEE
 27604                           fsr0h	equ	0xFEA
 27605                           fsr0l	equ	0xFE9
 27606                           wreg	equ	0xFE8
 27607                           indf1	equ	0xFE7
 27608                           postinc1	equ	0xFE6
 27609                           postdec1	equ	0xFE5
 27610                           fsr1h	equ	0xFE2
 27611                           fsr1l	equ	0xFE1
 27612                           indf2	equ	0xFDF
 27613                           postinc2	equ	0xFDE
 27614                           postdec2	equ	0xFDD
 27615                           plusw2	equ	0xFDB
 27616                           fsr2h	equ	0xFDA
 27617                           fsr2l	equ	0xFD9
 27618                           status	equ	0xFD8
 27619                           
 27620 ;; *************** function _Read_b_eep *****************
 27621 ;; Defined at:
 27622 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 27623 ;; Parameters:    Size  Location     Type
 27624 ;;  badd            2    0[BANK0 ] unsigned int 
 27625 ;; Auto vars:     Size  Location     Type
 27626 ;;		None
 27627 ;; Return value:  Size  Location     Type
 27628 ;;                  1    wreg      unsigned char 
 27629 ;; Registers used:
 27630 ;;		wreg, status,2
 27631 ;; Tracked objects:
 27632 ;;		On entry : F/0
 27633 ;;		On exit  : 0/0
 27634 ;;		Unchanged: 0/0
 27635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27636 ;;      Params:         0       2       0       0       0       0       0
 27637 ;;      Locals:         0       0       0       0       0       0       0
 27638 ;;      Temps:          0       0       0       0       0       0       0
 27639 ;;      Totals:         0       2       0       0       0       0       0
 27640 ;;Total ram usage:        2 bytes
 27641 ;; Hardware stack levels used:    1
 27642 ;; Hardware stack levels required when called:    3
 27643 ;; This function calls:
 27644 ;;		Nothing
 27645 ;; This function is called by:
 27646 ;;		_main
 27647 ;;		_init_app_ram
 27648 ;; This function uses a non-reentrant model
 27649 ;;
 27650                           
 27651                           	psect	text80
 27652  000FD8                     __ptext80:
 27653                           	opt stack 0
 27654  000FD8                     _Read_b_eep:
 27655                           	opt stack 23
 27656                           
 27657                           ; BSR set to: 0
 27658                           
 27659                           ; BSR set to: 0
 27660                           ;incstack = 0
 27661                           ;incstack = 0
 27662  000FD8  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 27663  000FDC  9CA6               	bcf	4006,6,c	;volatile
 27664  000FDE  9EA6               	bcf	4006,7,c	;volatile
 27665  000FE0  80A6               	bsf	4006,0,c	;volatile
 27666  000FE2  F000               	nop		;# 
 27667  000FE4  F000               	nop		;# 
 27668  000FE6  50A8               	movf	4008,w,c	;volatile
 27669  000FE8  0012               	return	
 27670  000FEA                     __end_of_Read_b_eep:
 27671                           	opt stack 0
 27672                           tblptru	equ	0xFF8
 27673                           tblptrh	equ	0xFF7
 27674                           tblptrl	equ	0xFF6
 27675                           tablat	equ	0xFF5
 27676                           prodh	equ	0xFF4
 27677                           prodl	equ	0xFF3
 27678                           intcon	equ	0xFF2
 27679                           indf0	equ	0xFEF
 27680                           postinc0	equ	0xFEE
 27681                           fsr0h	equ	0xFEA
 27682                           fsr0l	equ	0xFE9
 27683                           wreg	equ	0xFE8
 27684                           indf1	equ	0xFE7
 27685                           postinc1	equ	0xFE6
 27686                           postdec1	equ	0xFE5
 27687                           fsr1h	equ	0xFE2
 27688                           fsr1l	equ	0xFE1
 27689                           indf2	equ	0xFDF
 27690                           postinc2	equ	0xFDE
 27691                           postdec2	equ	0xFDD
 27692                           plusw2	equ	0xFDB
 27693                           fsr2h	equ	0xFDA
 27694                           fsr2l	equ	0xFD9
 27695                           status	equ	0xFD8
 27696                           
 27697 ;; *************** function _WriteTimer0 *****************
 27698 ;; Defined at:
 27699 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27700 ;; Parameters:    Size  Location     Type
 27701 ;;  timer0          2    0[BANK0 ] unsigned int 
 27702 ;; Auto vars:     Size  Location     Type
 27703 ;;  timer           2    2[BANK0 ] struct Timers
 27704 ;; Return value:  Size  Location     Type
 27705 ;;		None               void
 27706 ;; Registers used:
 27707 ;;		None
 27708 ;; Tracked objects:
 27709 ;;		On entry : F/0
 27710 ;;		On exit  : F/0
 27711 ;;		Unchanged: F/0
 27712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27713 ;;      Params:         0       2       0       0       0       0       0
 27714 ;;      Locals:         0       2       0       0       0       0       0
 27715 ;;      Temps:          0       0       0       0       0       0       0
 27716 ;;      Totals:         0       4       0       0       0       0       0
 27717 ;;Total ram usage:        4 bytes
 27718 ;; Hardware stack levels used:    1
 27719 ;; Hardware stack levels required when called:    3
 27720 ;; This function calls:
 27721 ;;		Nothing
 27722 ;; This function is called by:
 27723 ;;		_init
 27724 ;; This function uses a non-reentrant model
 27725 ;;
 27726                           
 27727                           	psect	text81
 27728  000FC6                     __ptext81:
 27729                           	opt stack 0
 27730  000FC6                     _WriteTimer0:
 27731                           	opt stack 25
 27732                           
 27733                           ; BSR set to: 0
 27734                           
 27735                           ;incstack = 0
 27736                           ;incstack = 0
 27737  000FC6  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 27738  000FCA  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 27739  000FCE  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 27740  000FD2  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 27741                           
 27742                           ; BSR set to: 0
 27743  000FD6  0012               	return	
 27744  000FD8                     __end_of_WriteTimer0:
 27745                           	opt stack 0
 27746                           tblptru	equ	0xFF8
 27747                           tblptrh	equ	0xFF7
 27748                           tblptrl	equ	0xFF6
 27749                           tablat	equ	0xFF5
 27750                           prodh	equ	0xFF4
 27751                           prodl	equ	0xFF3
 27752                           intcon	equ	0xFF2
 27753                           indf0	equ	0xFEF
 27754                           postinc0	equ	0xFEE
 27755                           fsr0h	equ	0xFEA
 27756                           fsr0l	equ	0xFE9
 27757                           wreg	equ	0xFE8
 27758                           indf1	equ	0xFE7
 27759                           postinc1	equ	0xFE6
 27760                           postdec1	equ	0xFE5
 27761                           fsr1h	equ	0xFE2
 27762                           fsr1l	equ	0xFE1
 27763                           indf2	equ	0xFDF
 27764                           postinc2	equ	0xFDE
 27765                           postdec2	equ	0xFDD
 27766                           plusw2	equ	0xFDB
 27767                           fsr2h	equ	0xFDA
 27768                           fsr2l	equ	0xFD9
 27769                           status	equ	0xFD8
 27770                           
 27771 ;; *************** function _fifo_init *****************
 27772 ;; Defined at:
 27773 ;;		line 14 in file "fifo.c"
 27774 ;; Parameters:    Size  Location     Type
 27775 ;;  f               2    0[BANK0 ] PTR struct .
 27776 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 27777 ;;  buf             2    2[BANK0 ] PTR const void 
 27778 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 27779 ;;  size            2    4[BANK0 ] unsigned short 
 27780 ;; Auto vars:     Size  Location     Type
 27781 ;;		None
 27782 ;; Return value:  Size  Location     Type
 27783 ;;		None               void
 27784 ;; Registers used:
 27785 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 27786 ;; Tracked objects:
 27787 ;;		On entry : F/0
 27788 ;;		On exit  : F/0
 27789 ;;		Unchanged: 0/0
 27790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27791 ;;      Params:         0       6       0       0       0       0       0
 27792 ;;      Locals:         0       0       0       0       0       0       0
 27793 ;;      Temps:          0       0       0       0       0       0       0
 27794 ;;      Totals:         0       6       0       0       0       0       0
 27795 ;;Total ram usage:        6 bytes
 27796 ;; Hardware stack levels used:    1
 27797 ;; Hardware stack levels required when called:    3
 27798 ;; This function calls:
 27799 ;;		Nothing
 27800 ;; This function is called by:
 27801 ;;		_main
 27802 ;; This function uses a non-reentrant model
 27803 ;;
 27804                           
 27805                           	psect	text82
 27806  0012FC                     __ptext82:
 27807                           	opt stack 0
 27808  0012FC                     _fifo_init:
 27809                           	opt stack 26
 27810                           
 27811                           ; BSR set to: 0
 27812                           ;fifo.c: 15: f->head = 0;
 27813                           
 27814                           ; BSR set to: 0
 27815                           ;incstack = 0
 27816                           ;incstack = 0
 27817  0012FC  EE20 F002          	lfsr	2,2
 27818  001300  D816               	call	PL108	;call to abstracted procedure
 27819                           
 27820                           ;fifo.c: 16: f->tail = 0;
 27821  001302  EE20 F004          	lfsr	2,4
 27822  001306  D813               	call	PL108	;call to abstracted procedure
 27823                           
 27824                           ;fifo.c: 17: f->size = size;
 27825  001308  EE20 F006          	lfsr	2,6
 27826  00130C  5160               	movf	fifo_init@f& (0+255),w,b
 27827  00130E  26D9               	addwf	fsr2l,f,c
 27828  001310  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 27829  001312  22DA               	addwfc	fsr2h,f,c
 27830  001314  C064  FFDE         	movff	fifo_init@size,postinc2
 27831  001318  C065  FFDD         	movff	fifo_init@size+1,postdec2
 27832                           
 27833                           ; BSR set to: 0
 27834                           ;fifo.c: 18: f->buf = buf;
 27835  00131C  C060  FFD9         	movff	fifo_init@f,fsr2l
 27836  001320  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 27837  001324  C062  FFDE         	movff	fifo_init@buf,postinc2
 27838  001328  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 27839                           
 27840                           ; BSR set to: 0
 27841  00132C  0012               	return	
 27842  00132E                     __end_of_fifo_init:
 27843                           	opt stack 0
 27844  00132E                     PL108:
 27845                           	opt stack 26
 27846  00132E  5160               	movf	fifo_init@f& (0+255),w,b
 27847  001330  26D9               	addwf	fsr2l,f,c
 27848  001332  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 27849  001334  22DA               	addwfc	fsr2h,f,c
 27850  001336  6ADE               	clrf	postinc2,c
 27851  001338  6ADD               	clrf	postdec2,c
 27852  00133A  0012               	return	
 27853  00133C                     __end_ofPL108:
 27854                           	opt stack 0
 27855                           tblptru	equ	0xFF8
 27856                           tblptrh	equ	0xFF7
 27857                           tblptrl	equ	0xFF6
 27858                           tablat	equ	0xFF5
 27859                           prodh	equ	0xFF4
 27860                           prodl	equ	0xFF3
 27861                           intcon	equ	0xFF2
 27862                           indf0	equ	0xFEF
 27863                           postinc0	equ	0xFEE
 27864                           fsr0h	equ	0xFEA
 27865                           fsr0l	equ	0xFE9
 27866                           wreg	equ	0xFE8
 27867                           indf1	equ	0xFE7
 27868                           postinc1	equ	0xFE6
 27869                           postdec1	equ	0xFE5
 27870                           fsr1h	equ	0xFE2
 27871                           fsr1l	equ	0xFE1
 27872                           indf2	equ	0xFDF
 27873                           postinc2	equ	0xFDE
 27874                           postdec2	equ	0xFDD
 27875                           plusw2	equ	0xFDB
 27876                           fsr2h	equ	0xFDA
 27877                           fsr2l	equ	0xFD9
 27878                           status	equ	0xFD8
 27879                           
 27880 ;; *************** function _Interrupt *****************
 27881 ;; Defined at:
 27882 ;;		line 145 in file "main.c"
 27883 ;; Parameters:    Size  Location     Type
 27884 ;;		None
 27885 ;; Auto vars:     Size  Location     Type
 27886 ;;  fail            1   32[COMRAM] unsigned char 
 27887 ;;  c               1   31[COMRAM] unsigned char 
 27888 ;; Return value:  Size  Location     Type
 27889 ;;		None               void
 27890 ;; Registers used:
 27891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27892 ;; Tracked objects:
 27893 ;;		On entry : 0/0
 27894 ;;		On exit  : 0/0
 27895 ;;		Unchanged: 0/0
 27896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27897 ;;      Params:         0       0       0       0       0       0       0
 27898 ;;      Locals:         2       0       0       0       0       0       0
 27899 ;;      Temps:          9       0       0       0       0       0       0
 27900 ;;      Totals:        11       0       0       0       0       0       0
 27901 ;;Total ram usage:       11 bytes
 27902 ;; Hardware stack levels used:    1
 27903 ;; Hardware stack levels required when called:    2
 27904 ;; This function calls:
 27905 ;;		_ReadUSART
 27906 ;;		_fifo_write
 27907 ;;		_ECANReceiveMessage
 27908 ;;		_fifo_getFree
 27909 ;;		i1_WriteTimer0
 27910 ;; This function is called by:
 27911 ;;		Interrupt level 1
 27912 ;; This function uses a non-reentrant model
 27913 ;;
 27914                           
 27915                           	psect	intcodelo
 27916  000018                     __pintcodelo:
 27917                           	opt stack 0
 27918  000018                     _Interrupt:
 27919                           	opt stack 19
 27920                           
 27921                           ; BSR set to: 0
 27922                           ;incstack = 0
 27923  000018  CFD8 F019          	movff	status,??_Interrupt+2
 27924  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 27925  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 27926  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 27927  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 27928  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 27929  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 27930  000034                     
 27931                           ;main.c: 146: uint8_t c;
 27932                           ;main.c: 149: if ( 1 == PIR1bits.RCIF ) {
 27933  000034  AA9E               	btfss	3998,5,c	;volatile
 27934  000036  D001               	goto	i1u1814_21
 27935  000038  D001               	goto	i1u1814_20
 27936  00003A                     i1u1814_21:
 27937  00003A  D02B               	goto	i1l403
 27938  00003C                     i1u1814_20:
 27939  00003C                     
 27940                           ;main.c: 151: c = ReadUSART();
 27941  00003C  EC17  F008         	call	_ReadUSART	;wreg free
 27942  000040  6E20               	movwf	Interrupt@c,c
 27943  000042                     
 27944                           ;main.c: 153: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 27945  000042  0101               	movlb	1	; () banked
 27946  000044  0E01               	movlw	high _serialInputFifo
 27947  000046  6E02               	movwf	?_fifo_write+1,c
 27948  000048  0EDD               	movlw	low _serialInputFifo
 27949  00004A  6E01               	movwf	?_fifo_write,c
 27950  00004C  0E20               	movlw	low Interrupt@c
 27951  00004E  6E03               	movwf	?_fifo_write+2,c
 27952  000050  0E00               	movlw	high Interrupt@c
 27953  000052  6E04               	movwf	?_fifo_write+3,c
 27954  000054  0E0F               	movlw	15
 27955  000056  6E04               	movwf	?_fifo_write+3,c
 27956  000058  0E5F               	movlw	__accesstop+-1
 27957  00005A  6403               	cpfsgt	?_fifo_write+2,c
 27958  00005C  6A04               	clrf	?_fifo_write+3,c
 27959  00005E  0E01               	movlw	1
 27960  000060  6E05               	movwf	?_fifo_write+4,c
 27961  000062  0E00               	movlw	0
 27962  000064  6E06               	movwf	?_fifo_write+5,c
 27963  000066  0E00               	movlw	0
 27964  000068  6E07               	movwf	?_fifo_write+6,c
 27965  00006A  0E00               	movlw	0
 27966  00006C  6E08               	movwf	?_fifo_write+7,c
 27967  00006E  EC46  F017         	call	_fifo_write	;wreg free
 27968  000072  0401               	decf	?_fifo_write,w,c
 27969  000074  1002               	iorwf	?_fifo_write+1,w,c
 27970  000076  B4D8               	btfsc	status,2,c
 27971  000078  D001               	goto	i1u1815_21
 27972  00007A  D001               	goto	i1u1815_20
 27973  00007C                     i1u1815_21:
 27974  00007C  D008               	goto	i1l14120
 27975  00007E                     i1u1815_20:
 27976  00007E                     
 27977                           ; BSR set to: 1
 27978                           ;main.c: 155: uart_receiveOverruns++;
 27979  00007E  0E01               	movlw	1
 27980  000080  2720               	addwf	_uart_receiveOverruns& (0+255),f,b
 27981  000082  0E00               	movlw	0
 27982  000084  2321               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 27983  000086  0E00               	movlw	0
 27984  000088  2322               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 27985  00008A  0E00               	movlw	0
 27986  00008C  2323               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 27987  00008E                     i1l14120:
 27988                           
 27989                           ; BSR set to: 1
 27990                           ;main.c: 156: }
 27991                           ;main.c: 159: PIR1bits.RCIF = 0;
 27992  00008E  9A9E               	bcf	3998,5,c	;volatile
 27993                           
 27994                           ;main.c: 161: }
 27995  000090  D07D               	goto	i1l405
 27996  000092                     i1l403:
 27997                           
 27998                           ;main.c: 163: else if (1 == INTCONbits.TMR0IF) {
 27999  000092  A4F2               	btfss	intcon,2,c	;volatile
 28000  000094  D001               	goto	i1u1816_21
 28001  000096  D001               	goto	i1u1816_20
 28002  000098                     i1u1816_21:
 28003  000098  D079               	goto	i1l405
 28004  00009A                     i1u1816_20:
 28005  00009A                     
 28006                           ;main.c: 165: WriteTimer0(0xfb1d);
 28007  00009A  0EFB               	movlw	251
 28008  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 28009  00009E  0E1D               	movlw	29
 28010  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 28011  0000A2  ECDA  F007         	call	i1_WriteTimer0	;wreg free
 28012  0000A6                     
 28013                           ;main.c: 167: timer++;
 28014  0000A6  0E01               	movlw	1
 28015  0000A8  0101               	movlb	1	; () banked
 28016  0000AA  271C               	addwf	_timer& (0+255),f,b	;volatile
 28017  0000AC  0E00               	movlw	0
 28018  0000AE  231D               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 28019  0000B0  0E00               	movlw	0
 28020  0000B2  231E               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 28021  0000B4  0E00               	movlw	0
 28022  0000B6  231F               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 28023  0000B8                     
 28024                           ; BSR set to: 1
 28025                           ;main.c: 168: timekeeper++;
 28026  0000B8  0E01               	movlw	1
 28027  0000BA  2718               	addwf	_timekeeper& (0+255),f,b	;volatile
 28028  0000BC  0E00               	movlw	0
 28029  0000BE  2319               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 28030  0000C0  0E00               	movlw	0
 28031  0000C2  231A               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 28032  0000C4  0E00               	movlw	0
 28033  0000C6  231B               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 28034  0000C8                     
 28035                           ; BSR set to: 1
 28036                           ;main.c: 171: status_led_cnt++;
 28037  0000C8  4A22               	infsnz	_status_led_cnt,f,c	;volatile
 28038  0000CA  2A23               	incf	_status_led_cnt+1,f,c	;volatile
 28039  0000CC                     
 28040                           ; BSR set to: 1
 28041                           ;main.c: 172: if ( ( 2 == ledFunctionality ) &&
 28042                           ;main.c: 173: ( status_led_cnt > 1000 ) ) {
 28043  0000CC  5032               	movf	_ledFunctionality,w,c	;volatile
 28044  0000CE  0A02               	xorlw	2
 28045  0000D0  A4D8               	btfss	status,2,c
 28046  0000D2  D001               	goto	i1u1817_21
 28047  0000D4  D001               	goto	i1u1817_20
 28048  0000D6                     i1u1817_21:
 28049  0000D6  D00C               	goto	i1l14136
 28050  0000D8                     i1u1817_20:
 28051  0000D8                     
 28052                           ; BSR set to: 1
 28053  0000D8  0EE9               	movlw	233
 28054  0000DA  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28055  0000DC  0E03               	movlw	3
 28056  0000DE  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28057  0000E0  A0D8               	btfss	status,0,c
 28058  0000E2  D001               	goto	i1u1818_21
 28059  0000E4  D001               	goto	i1u1818_20
 28060  0000E6                     i1u1818_21:
 28061  0000E6  D004               	goto	i1l14136
 28062  0000E8                     i1u1818_20:
 28063  0000E8                     i1l14134:
 28064                           
 28065                           ; BSR set to: 1
 28066                           ;main.c: 174: LATC1 = ~LATC1;
 28067  0000E8  728B               	btg	3979,1,c	;volatile
 28068                           
 28069                           ;main.c: 175: status_led_cnt = 0;
 28070  0000EA  6A22               	clrf	_status_led_cnt,c	;volatile
 28071  0000EC  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28072                           
 28073                           ;main.c: 176: }
 28074  0000EE  D04D               	goto	i1l408
 28075  0000F0                     i1l14136:
 28076                           
 28077                           ; BSR set to: 1
 28078                           ;main.c: 177: else if ( ( 3 == ledFunctionality ) &&
 28079                           ;main.c: 178: ( status_led_cnt > 400 ) ) {
 28080  0000F0  5032               	movf	_ledFunctionality,w,c	;volatile
 28081  0000F2  0A03               	xorlw	3
 28082  0000F4  A4D8               	btfss	status,2,c
 28083  0000F6  D001               	goto	i1u1819_21
 28084  0000F8  D001               	goto	i1u1819_20
 28085  0000FA                     i1u1819_21:
 28086  0000FA  D009               	goto	i1l14142
 28087  0000FC                     i1u1819_20:
 28088  0000FC                     
 28089                           ; BSR set to: 1
 28090  0000FC  0E91               	movlw	145
 28091  0000FE  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28092  000100  0E01               	movlw	1
 28093  000102  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28094  000104  A0D8               	btfss	status,0,c
 28095  000106  D001               	goto	i1u1820_21
 28096  000108  D001               	goto	i1u1820_20
 28097  00010A                     i1u1820_21:
 28098  00010A  D001               	goto	i1l14142
 28099  00010C                     i1u1820_20:
 28100  00010C  D7ED               	goto	i1l14134
 28101  00010E                     i1l14142:
 28102                           
 28103                           ; BSR set to: 1
 28104                           ;main.c: 182: else if ( ( 4 == ledFunctionality ) &&
 28105                           ;main.c: 183: ( status_led_cnt > 100 ) ) {
 28106  00010E  5032               	movf	_ledFunctionality,w,c	;volatile
 28107  000110  0A04               	xorlw	4
 28108  000112  A4D8               	btfss	status,2,c
 28109  000114  D001               	goto	i1u1821_21
 28110  000116  D001               	goto	i1u1821_20
 28111  000118                     i1u1821_21:
 28112  000118  D009               	goto	i1l14148
 28113  00011A                     i1u1821_20:
 28114  00011A                     
 28115                           ; BSR set to: 1
 28116  00011A  0E65               	movlw	101
 28117  00011C  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28118  00011E  0E00               	movlw	0
 28119  000120  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28120  000122  A0D8               	btfss	status,0,c
 28121  000124  D001               	goto	i1u1822_21
 28122  000126  D001               	goto	i1u1822_20
 28123  000128                     i1u1822_21:
 28124  000128  D001               	goto	i1l14148
 28125  00012A                     i1u1822_20:
 28126  00012A  D7DE               	goto	i1l14134
 28127  00012C                     i1l14148:
 28128                           
 28129                           ; BSR set to: 1
 28130                           ;main.c: 187: else if ( ( 5 == ledFunctionality ) &&
 28131                           ;main.c: 188: (status_led_cnt > 70)) {
 28132  00012C  5032               	movf	_ledFunctionality,w,c	;volatile
 28133  00012E  0A05               	xorlw	5
 28134  000130  A4D8               	btfss	status,2,c
 28135  000132  D001               	goto	i1u1823_21
 28136  000134  D001               	goto	i1u1823_20
 28137  000136                     i1u1823_21:
 28138  000136  D009               	goto	i1l14154
 28139  000138                     i1u1823_20:
 28140  000138                     
 28141                           ; BSR set to: 1
 28142  000138  0E47               	movlw	71
 28143  00013A  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28144  00013C  0E00               	movlw	0
 28145  00013E  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28146  000140  A0D8               	btfss	status,0,c
 28147  000142  D001               	goto	i1u1824_21
 28148  000144  D001               	goto	i1u1824_20
 28149  000146                     i1u1824_21:
 28150  000146  D001               	goto	i1l14154
 28151  000148                     i1u1824_20:
 28152  000148  D7CF               	goto	i1l14134
 28153  00014A                     i1l14154:
 28154                           
 28155                           ; BSR set to: 1
 28156                           ;main.c: 192: else if ( ( 6 == ledFunctionality ) &&
 28157                           ;main.c: 193: ( status_led_cnt > 40 ) ) {
 28158  00014A  5032               	movf	_ledFunctionality,w,c	;volatile
 28159  00014C  0A06               	xorlw	6
 28160  00014E  A4D8               	btfss	status,2,c
 28161  000150  D001               	goto	i1u1825_21
 28162  000152  D001               	goto	i1u1825_20
 28163  000154                     i1u1825_21:
 28164  000154  D009               	goto	i1l14160
 28165  000156                     i1u1825_20:
 28166  000156                     
 28167                           ; BSR set to: 1
 28168  000156  0E29               	movlw	41
 28169  000158  5C22               	subwf	_status_led_cnt,w,c	;volatile
 28170  00015A  0E00               	movlw	0
 28171  00015C  5823               	subwfb	_status_led_cnt+1,w,c	;volatile
 28172  00015E  A0D8               	btfss	status,0,c
 28173  000160  D001               	goto	i1u1826_21
 28174  000162  D001               	goto	i1u1826_20
 28175  000164                     i1u1826_21:
 28176  000164  D001               	goto	i1l14160
 28177  000166                     i1u1826_20:
 28178  000166  D7C0               	goto	i1l14134
 28179  000168                     i1l14160:
 28180                           
 28181                           ; BSR set to: 1
 28182                           ;main.c: 197: else if ( 1 == ledFunctionality ) {
 28183  000168  0432               	decf	_ledFunctionality,w,c	;volatile
 28184  00016A  A4D8               	btfss	status,2,c
 28185  00016C  D001               	goto	i1u1827_21
 28186  00016E  D001               	goto	i1u1827_20
 28187  000170                     i1u1827_21:
 28188  000170  D004               	goto	i1l417
 28189  000172                     i1u1827_20:
 28190  000172                     
 28191                           ; BSR set to: 1
 28192                           ;main.c: 198: LATC1 = 1;
 28193  000172  828B               	bsf	3979,1,c	;volatile
 28194                           
 28195                           ;main.c: 199: status_led_cnt = 0;
 28196  000174  6A22               	clrf	_status_led_cnt,c	;volatile
 28197  000176  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28198                           
 28199                           ;main.c: 200: }
 28200  000178  D008               	goto	i1l408
 28201  00017A                     i1l417:
 28202                           
 28203                           ; BSR set to: 1
 28204                           ;main.c: 201: else if ( 0 == ledFunctionality ) {
 28205  00017A  6632               	tstfsz	_ledFunctionality,c	;volatile
 28206  00017C  D001               	goto	i1u1828_21
 28207  00017E  D001               	goto	i1u1828_20
 28208  000180                     i1u1828_21:
 28209  000180  D004               	goto	i1l414
 28210  000182                     i1u1828_20:
 28211  000182                     
 28212                           ; BSR set to: 1
 28213                           ;main.c: 202: LATC1 = 0;
 28214  000182  928B               	bcf	3979,1,c	;volatile
 28215                           
 28216                           ;main.c: 203: status_led_cnt = 0;
 28217  000184  6A22               	clrf	_status_led_cnt,c	;volatile
 28218  000186  6A23               	clrf	_status_led_cnt+1,c	;volatile
 28219  000188  D000               	goto	i1l408
 28220  00018A                     i1l414:
 28221  00018A                     i1l408:
 28222                           
 28223                           ; BSR set to: 1
 28224                           ;main.c: 204: }
 28225                           ;main.c: 206: INTCONbits.TMR0IF = 0;
 28226  00018A  94F2               	bcf	intcon,2,c	;volatile
 28227  00018C                     i1l405:
 28228                           
 28229                           ;main.c: 207: }
 28230                           ;main.c: 210: if ( 1 == ERRIF ) {
 28231  00018C  AAA4               	btfss	4004,5,c	;volatile
 28232  00018E  D001               	goto	i1u1829_21
 28233  000190  D001               	goto	i1u1829_20
 28234  000192                     i1u1829_21:
 28235  000192  D02A               	goto	i1l14186
 28236  000194                     i1u1829_20:
 28237  000194                     
 28238                           ;main.c: 213: if ( COMSTATbits.RXBnOVFL ) {
 28239  000194  AC74               	btfss	3956,6,c	;volatile
 28240  000196  D001               	goto	i1u1830_21
 28241  000198  D001               	goto	i1u1830_20
 28242  00019A                     i1u1830_21:
 28243  00019A  D00A               	goto	i1l14172
 28244  00019C                     i1u1830_20:
 28245  00019C                     
 28246                           ;main.c: 214: can_receiveOverruns++;
 28247  00019C  0E01               	movlw	1
 28248  00019E  0101               	movlb	1	; () banked
 28249  0001A0  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 28250  0001A2  0E00               	movlw	0
 28251  0001A4  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 28252  0001A6  0E00               	movlw	0
 28253  0001A8  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 28254  0001AA  0E00               	movlw	0
 28255  0001AC  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 28256  0001AE                     
 28257                           ; BSR set to: 1
 28258                           ;main.c: 215: COMSTATbits.RXBnOVFL = 0;
 28259  0001AE  9C74               	bcf	3956,6,c	;volatile
 28260  0001B0                     i1l14172:
 28261                           
 28262                           ;main.c: 216: }
 28263                           ;main.c: 219: if ( COMSTATbits.TXBO ) {
 28264  0001B0  AA74               	btfss	3956,5,c	;volatile
 28265  0001B2  D001               	goto	i1u1831_21
 28266  0001B4  D001               	goto	i1u1831_20
 28267  0001B6                     i1u1831_21:
 28268  0001B6  D003               	goto	i1l422
 28269  0001B8                     i1u1831_20:
 28270  0001B8                     
 28271                           ;main.c: 221: ledFunctionality = 6;
 28272  0001B8  0E06               	movlw	6
 28273  0001BA  6E32               	movwf	_ledFunctionality,c	;volatile
 28274                           
 28275                           ;main.c: 222: }
 28276  0001BC  D014               	goto	i1l14184
 28277  0001BE                     i1l422:
 28278                           
 28279                           ;main.c: 223: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
 28280  0001BE  B874               	btfsc	3956,4,c	;volatile
 28281  0001C0  D001               	goto	i1u1832_21
 28282  0001C2  D001               	goto	i1u1832_20
 28283  0001C4                     i1u1832_21:
 28284  0001C4  D004               	goto	i1l14178
 28285  0001C6                     i1u1832_20:
 28286  0001C6  A674               	btfss	3956,3,c	;volatile
 28287  0001C8  D001               	goto	i1u1833_21
 28288  0001CA  D001               	goto	i1u1833_20
 28289  0001CC                     i1u1833_21:
 28290  0001CC  D003               	goto	i1l424
 28291  0001CE                     i1u1833_20:
 28292  0001CE                     i1l14178:
 28293                           
 28294                           ;main.c: 225: ledFunctionality = 5;
 28295  0001CE  0E05               	movlw	5
 28296  0001D0  6E32               	movwf	_ledFunctionality,c	;volatile
 28297                           
 28298                           ;main.c: 226: }
 28299  0001D2  D009               	goto	i1l14184
 28300  0001D4                     i1l424:
 28301                           
 28302                           ;main.c: 227: else if ( COMSTATbits.EWARN ) {
 28303  0001D4  A074               	btfss	3956,0,c	;volatile
 28304  0001D6  D001               	goto	i1u1834_21
 28305  0001D8  D001               	goto	i1u1834_20
 28306  0001DA                     i1u1834_21:
 28307  0001DA  D003               	goto	i1l14182
 28308  0001DC                     i1u1834_20:
 28309  0001DC                     
 28310                           ;main.c: 229: ledFunctionality = 4;
 28311  0001DC  0E04               	movlw	4
 28312  0001DE  6E32               	movwf	_ledFunctionality,c	;volatile
 28313                           
 28314                           ;main.c: 230: }
 28315  0001E0  D002               	goto	i1l14184
 28316  0001E2                     i1l14182:
 28317                           
 28318                           ;main.c: 231: else {
 28319                           ;main.c: 233: ledFunctionality = 1;
 28320  0001E2  0E01               	movlw	1
 28321  0001E4  6E32               	movwf	_ledFunctionality,c	;volatile
 28322  0001E6                     i1l14184:
 28323                           
 28324                           ;main.c: 234: }
 28325                           ;main.c: 236: ERRIF = 0;
 28326  0001E6  9AA4               	bcf	4004,5,c	;volatile
 28327  0001E8                     i1l14186:
 28328                           
 28329                           ;main.c: 237: }
 28330                           ;main.c: 240: if ( RXBnIF ) {
 28331  0001E8  A2A4               	btfss	4004,1,c	;volatile
 28332  0001EA  D001               	goto	i1u1835_21
 28333  0001EC  D001               	goto	i1u1835_20
 28334  0001EE                     i1u1835_21:
 28335  0001EE  D09F               	goto	i1l442
 28336  0001F0                     i1u1835_20:
 28337  0001F0                     
 28338                           ;main.c: 242: if ( ECANReceiveMessage((unsigned long *)&id,
 28339                           ;main.c: 243: (BYTE*)&data,
 28340                           ;main.c: 244: (BYTE*)&dlc,
 28341                           ;main.c: 245: &flags) ) {
 28342  0001F0  0101               	movlb	1	; () banked
 28343  0001F2  0E01               	movlw	high _id
 28344  0001F4  6E0B               	movwf	?_ECANReceiveMessage+1,c
 28345  0001F6  0EED               	movlw	low _id
 28346  0001F8  6E0A               	movwf	?_ECANReceiveMessage,c
 28347  0001FA  0E01               	movlw	high _data
 28348  0001FC  6E0D               	movwf	?_ECANReceiveMessage+3,c
 28349  0001FE  0ED5               	movlw	low _data
 28350  000200  6E0C               	movwf	?_ECANReceiveMessage+2,c
 28351  000202  0E3A               	movlw	low _dlc
 28352  000204  6E0E               	movwf	?_ECANReceiveMessage+4,c
 28353  000206  0E3B               	movlw	low _flags
 28354  000208  6E0F               	movwf	?_ECANReceiveMessage+5,c
 28355  00020A  ECA2  F020         	call	_ECANReceiveMessage	;wreg free
 28356  00020E  0900               	iorlw	0
 28357  000210  B4D8               	btfsc	status,2,c
 28358  000212  D001               	goto	i1u1836_21
 28359  000214  D001               	goto	i1u1836_20
 28360  000216                     i1u1836_21:
 28361  000216  D08A               	goto	i1l14222
 28362  000218                     i1u1836_20:
 28363  000218                     
 28364                           ;main.c: 248: if ( flags & ECAN_RX_OVERFLOW ) {
 28365  000218  A63B               	btfss	_flags,3,c
 28366  00021A  D001               	goto	i1u1837_21
 28367  00021C  D001               	goto	i1u1837_20
 28368  00021E                     i1u1837_21:
 28369  00021E  D00E               	goto	i1l432
 28370  000220                     i1u1837_20:
 28371  000220                     
 28372                           ;main.c: 249: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 28373  000220  AA3B               	btfss	_flags,5,c
 28374  000222  D001               	goto	i1u1838_21
 28375  000224  D001               	goto	i1u1838_20
 28376  000226                     i1u1838_21:
 28377  000226  D082               	goto	i1l14222
 28378  000228                     i1u1838_20:
 28379  000228                     i1l14194:
 28380  000228  0E01               	movlw	1
 28381  00022A  0101               	movlb	1	; () banked
 28382  00022C  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 28383  00022E  0E00               	movlw	0
 28384  000230  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 28385  000232  0E00               	movlw	0
 28386  000234  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 28387  000236  0E00               	movlw	0
 28388  000238  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 28389  00023A  D078               	goto	i1l14222
 28390  00023C                     i1l432:
 28391                           
 28392                           ;main.c: 251: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 28393                           ;main.c: 252: ( flags & ECAN_RX_XTD_FRAME ) ) {
 28394  00023C  BC3B               	btfsc	_flags,6,c
 28395  00023E  D001               	goto	i1u1839_21
 28396  000240  D001               	goto	i1u1839_20
 28397  000242                     i1u1839_21:
 28398  000242  D074               	goto	i1l14222
 28399  000244                     i1u1839_20:
 28400  000244  AA3B               	btfss	_flags,5,c
 28401  000246  D001               	goto	i1u1840_21
 28402  000248  D001               	goto	i1u1840_20
 28403  00024A                     i1u1840_21:
 28404  00024A  D070               	goto	i1l14222
 28405  00024C                     i1u1840_20:
 28406  00024C                     
 28407                           ;main.c: 254: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 28408  00024C  503A               	movf	_dlc,w,c
 28409  00024E  6E17               	movwf	??_Interrupt& (0+255),c
 28410  000250  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 28411  000252  0E05               	movlw	5
 28412  000254  2617               	addwf	??_Interrupt,f,c
 28413  000256  0E00               	movlw	0
 28414  000258  2218               	addwfc	??_Interrupt+1,f,c
 28415  00025A  0101               	movlb	1	; () banked
 28416  00025C  0E01               	movlw	high _canInputFifo
 28417  00025E  6E02               	movwf	?_fifo_getFree+1,c
 28418  000260  0ECD               	movlw	low _canInputFifo
 28419  000262  6E01               	movwf	?_fifo_getFree,c
 28420  000264  EC8C  F00F         	call	_fifo_getFree	;wreg free
 28421  000268  5017               	movf	??_Interrupt,w,c
 28422  00026A  5C01               	subwf	?_fifo_getFree,w,c
 28423  00026C  5018               	movf	??_Interrupt+1,w,c
 28424  00026E  5802               	subwfb	?_fifo_getFree+1,w,c
 28425  000270  A0D8               	btfss	status,0,c
 28426  000272  D001               	goto	i1u1841_21
 28427  000274  D001               	goto	i1u1841_20
 28428  000276                     i1u1841_21:
 28429  000276  D7D8               	goto	i1l14194
 28430  000278                     i1u1841_20:
 28431  000278                     
 28432                           ; BSR set to: 1
 28433                           ;main.c: 255: uint8_t fail = 0;
 28434  000278  6A21               	clrf	Interrupt@fail,c
 28435  00027A                     
 28436                           ; BSR set to: 1
 28437                           ;main.c: 256: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 28438  00027A  0E01               	movlw	high _canInputFifo
 28439  00027C  6E02               	movwf	?_fifo_write+1,c
 28440  00027E  0ECD               	movlw	low _canInputFifo
 28441  000280  6E01               	movwf	?_fifo_write,c
 28442  000282  0E01               	movlw	high _id
 28443  000284  6E04               	movwf	?_fifo_write+3,c
 28444  000286  0EED               	movlw	low _id
 28445  000288  6E03               	movwf	?_fifo_write+2,c
 28446  00028A  0E04               	movlw	4
 28447  00028C  6E05               	movwf	?_fifo_write+4,c
 28448  00028E  0E00               	movlw	0
 28449  000290  6E06               	movwf	?_fifo_write+5,c
 28450  000292  0E00               	movlw	0
 28451  000294  6E07               	movwf	?_fifo_write+6,c
 28452  000296  0E00               	movlw	0
 28453  000298  6E08               	movwf	?_fifo_write+7,c
 28454  00029A  EC46  F017         	call	_fifo_write	;wreg free
 28455  00029E  5001               	movf	?_fifo_write,w,c
 28456  0002A0  0A04               	xorlw	4
 28457  0002A2  1002               	iorwf	?_fifo_write+1,w,c
 28458  0002A4  B4D8               	btfsc	status,2,c
 28459  0002A6  D001               	goto	i1u1842_21
 28460  0002A8  D001               	goto	i1u1842_20
 28461  0002AA                     i1u1842_21:
 28462  0002AA  D002               	goto	i1l14206
 28463  0002AC                     i1u1842_20:
 28464  0002AC                     
 28465                           ; BSR set to: 1
 28466                           ;main.c: 257: fail = 1;
 28467  0002AC  0E01               	movlw	1
 28468  0002AE  6E21               	movwf	Interrupt@fail,c
 28469  0002B0                     i1l14206:
 28470                           
 28471                           ; BSR set to: 1
 28472                           ;main.c: 258: }
 28473                           ;main.c: 259: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 28474  0002B0  0E01               	movlw	high _canInputFifo
 28475  0002B2  6E02               	movwf	?_fifo_write+1,c
 28476  0002B4  0ECD               	movlw	low _canInputFifo
 28477  0002B6  6E01               	movwf	?_fifo_write,c
 28478  0002B8  0E3A               	movlw	low _dlc
 28479  0002BA  6E03               	movwf	?_fifo_write+2,c
 28480  0002BC  0E00               	movlw	high _dlc
 28481  0002BE  6E04               	movwf	?_fifo_write+3,c
 28482  0002C0  0E0F               	movlw	15
 28483  0002C2  6E04               	movwf	?_fifo_write+3,c
 28484  0002C4  0E5F               	movlw	__accesstop+-1
 28485  0002C6  6403               	cpfsgt	?_fifo_write+2,c
 28486  0002C8  6A04               	clrf	?_fifo_write+3,c
 28487  0002CA  0E01               	movlw	1
 28488  0002CC  6E05               	movwf	?_fifo_write+4,c
 28489  0002CE  0E00               	movlw	0
 28490  0002D0  6E06               	movwf	?_fifo_write+5,c
 28491  0002D2  0E00               	movlw	0
 28492  0002D4  6E07               	movwf	?_fifo_write+6,c
 28493  0002D6  0E00               	movlw	0
 28494  0002D8  6E08               	movwf	?_fifo_write+7,c
 28495  0002DA  EC46  F017         	call	_fifo_write	;wreg free
 28496  0002DE  0401               	decf	?_fifo_write,w,c
 28497  0002E0  1002               	iorwf	?_fifo_write+1,w,c
 28498  0002E2  B4D8               	btfsc	status,2,c
 28499  0002E4  D001               	goto	i1u1843_21
 28500  0002E6  D001               	goto	i1u1843_20
 28501  0002E8                     i1u1843_21:
 28502  0002E8  D002               	goto	i1l14210
 28503  0002EA                     i1u1843_20:
 28504  0002EA                     
 28505                           ; BSR set to: 1
 28506                           ;main.c: 260: fail = 1;
 28507  0002EA  0E01               	movlw	1
 28508  0002EC  6E21               	movwf	Interrupt@fail,c
 28509  0002EE                     i1l14210:
 28510                           
 28511                           ; BSR set to: 1
 28512                           ;main.c: 261: }
 28513                           ;main.c: 262: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 28514  0002EE  0E01               	movlw	high _canInputFifo
 28515  0002F0  6E02               	movwf	?_fifo_write+1,c
 28516  0002F2  0ECD               	movlw	low _canInputFifo
 28517  0002F4  6E01               	movwf	?_fifo_write,c
 28518  0002F6  0E01               	movlw	high _data
 28519  0002F8  6E04               	movwf	?_fifo_write+3,c
 28520  0002FA  0ED5               	movlw	low _data
 28521  0002FC  6E03               	movwf	?_fifo_write+2,c
 28522  0002FE  503A               	movf	_dlc,w,c
 28523  000300  6E05               	movwf	?_fifo_write+4,c
 28524  000302  6A06               	clrf	?_fifo_write+5,c
 28525  000304  6A07               	clrf	?_fifo_write+6,c
 28526  000306  6A08               	clrf	?_fifo_write+7,c
 28527  000308  EC46  F017         	call	_fifo_write	;wreg free
 28528  00030C  503A               	movf	_dlc,w,c
 28529  00030E  1801               	xorwf	?_fifo_write,w,c
 28530  000310  1002               	iorwf	?_fifo_write+1,w,c
 28531  000312  B4D8               	btfsc	status,2,c
 28532  000314  D001               	goto	i1u1844_21
 28533  000316  D001               	goto	i1u1844_20
 28534  000318                     i1u1844_21:
 28535  000318  D002               	goto	i1l14214
 28536  00031A                     i1u1844_20:
 28537  00031A                     
 28538                           ; BSR set to: 1
 28539                           ;main.c: 263: fail = 1;
 28540  00031A  0E01               	movlw	1
 28541  00031C  6E21               	movwf	Interrupt@fail,c
 28542  00031E                     i1l14214:
 28543                           
 28544                           ; BSR set to: 1
 28545                           ;main.c: 264: }
 28546                           ;main.c: 266: fifo_canrxcount++;
 28547  00031E  2A31               	incf	_fifo_canrxcount,f,c	;volatile
 28548  000320                     
 28549                           ; BSR set to: 1
 28550                           ;main.c: 268: if ( fail ) {
 28551  000320  5021               	movf	Interrupt@fail,w,c
 28552  000322  B4D8               	btfsc	status,2,c
 28553  000324  D001               	goto	i1u1845_21
 28554  000326  D001               	goto	i1u1845_20
 28555  000328                     i1u1845_21:
 28556  000328  D001               	goto	i1l14222
 28557  00032A                     i1u1845_20:
 28558  00032A  D77E               	goto	i1l14194
 28559  00032C                     i1l14222:
 28560                           
 28561                           ;main.c: 275: }
 28562                           ;main.c: 277: }
 28563                           ;main.c: 279: }
 28564                           ;main.c: 282: RXBnIF = 0;
 28565  00032C  92A4               	bcf	4004,1,c	;volatile
 28566  00032E                     i1l442:
 28567  00032E  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 28568  000332  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 28569  000336  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 28570  00033A  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 28571  00033E  C01B  FFE0         	movff	??_Interrupt+4,bsr
 28572  000342  C01A  FFE8         	movff	??_Interrupt+3,wreg
 28573  000346  C019  FFD8         	movff	??_Interrupt+2,status
 28574  00034A  0010               	retfie	
 28575  00034C                     __end_of_Interrupt:
 28576                           	opt stack 0
 28577                           tblptru	equ	0xFF8
 28578                           tblptrh	equ	0xFF7
 28579                           tblptrl	equ	0xFF6
 28580                           tablat	equ	0xFF5
 28581                           prodh	equ	0xFF4
 28582                           prodl	equ	0xFF3
 28583                           intcon	equ	0xFF2
 28584                           indf0	equ	0xFEF
 28585                           postinc0	equ	0xFEE
 28586                           fsr0h	equ	0xFEA
 28587                           fsr0l	equ	0xFE9
 28588                           wreg	equ	0xFE8
 28589                           indf1	equ	0xFE7
 28590                           postinc1	equ	0xFE6
 28591                           postdec1	equ	0xFE5
 28592                           fsr1h	equ	0xFE2
 28593                           fsr1l	equ	0xFE1
 28594                           bsr	equ	0xFE0
 28595                           indf2	equ	0xFDF
 28596                           postinc2	equ	0xFDE
 28597                           postdec2	equ	0xFDD
 28598                           plusw2	equ	0xFDB
 28599                           fsr2h	equ	0xFDA
 28600                           fsr2l	equ	0xFD9
 28601                           status	equ	0xFD8
 28602                           
 28603 ;; *************** function i1_WriteTimer0 *****************
 28604 ;; Defined at:
 28605 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 28606 ;; Parameters:    Size  Location     Type
 28607 ;;  timer0          2    0[COMRAM] unsigned int 
 28608 ;; Auto vars:     Size  Location     Type
 28609 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 28610 ;; Return value:  Size  Location     Type
 28611 ;;		None               void
 28612 ;; Registers used:
 28613 ;;		None
 28614 ;; Tracked objects:
 28615 ;;		On entry : 0/0
 28616 ;;		On exit  : 0/0
 28617 ;;		Unchanged: 0/0
 28618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28619 ;;      Params:         2       0       0       0       0       0       0
 28620 ;;      Locals:         2       0       0       0       0       0       0
 28621 ;;      Temps:          0       0       0       0       0       0       0
 28622 ;;      Totals:         4       0       0       0       0       0       0
 28623 ;;Total ram usage:        4 bytes
 28624 ;; Hardware stack levels used:    1
 28625 ;; This function calls:
 28626 ;;		Nothing
 28627 ;; This function is called by:
 28628 ;;		_Interrupt
 28629 ;; This function uses a non-reentrant model
 28630 ;;
 28631                           
 28632                           	psect	text84
 28633  000FB4                     __ptext84:
 28634                           	opt stack 0
 28635  000FB4                     i1_WriteTimer0:
 28636                           	opt stack 20
 28637                           
 28638                           ;incstack = 0
 28639                           ;incstack = 0
 28640  000FB4  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 28641  000FB8  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 28642  000FBC  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 28643  000FC0  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 28644  000FC4  0012               	return	
 28645  000FC6                     __end_ofi1_WriteTimer0:
 28646                           	opt stack 0
 28647                           tblptru	equ	0xFF8
 28648                           tblptrh	equ	0xFF7
 28649                           tblptrl	equ	0xFF6
 28650                           tablat	equ	0xFF5
 28651                           prodh	equ	0xFF4
 28652                           prodl	equ	0xFF3
 28653                           intcon	equ	0xFF2
 28654                           indf0	equ	0xFEF
 28655                           postinc0	equ	0xFEE
 28656                           fsr0h	equ	0xFEA
 28657                           fsr0l	equ	0xFE9
 28658                           wreg	equ	0xFE8
 28659                           indf1	equ	0xFE7
 28660                           postinc1	equ	0xFE6
 28661                           postdec1	equ	0xFE5
 28662                           fsr1h	equ	0xFE2
 28663                           fsr1l	equ	0xFE1
 28664                           bsr	equ	0xFE0
 28665                           indf2	equ	0xFDF
 28666                           postinc2	equ	0xFDE
 28667                           postdec2	equ	0xFDD
 28668                           plusw2	equ	0xFDB
 28669                           fsr2h	equ	0xFDA
 28670                           fsr2l	equ	0xFD9
 28671                           status	equ	0xFD8
 28672                           
 28673 ;; *************** function _fifo_getFree *****************
 28674 ;; Defined at:
 28675 ;;		line 97 in file "fifo.c"
 28676 ;; Parameters:    Size  Location     Type
 28677 ;;  f               2    0[COMRAM] PTR struct .
 28678 ;;		 -> canInputFifo(8), 
 28679 ;; Auto vars:     Size  Location     Type
 28680 ;;		None
 28681 ;; Return value:  Size  Location     Type
 28682 ;;                  2    0[COMRAM] unsigned short 
 28683 ;; Registers used:
 28684 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28685 ;; Tracked objects:
 28686 ;;		On entry : F/1
 28687 ;;		On exit  : F/1
 28688 ;;		Unchanged: F/0
 28689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28690 ;;      Params:         2       0       0       0       0       0       0
 28691 ;;      Locals:         0       0       0       0       0       0       0
 28692 ;;      Temps:          8       0       0       0       0       0       0
 28693 ;;      Totals:        10       0       0       0       0       0       0
 28694 ;;Total ram usage:       10 bytes
 28695 ;; Hardware stack levels used:    1
 28696 ;; This function calls:
 28697 ;;		Nothing
 28698 ;; This function is called by:
 28699 ;;		_Interrupt
 28700 ;; This function uses a non-reentrant model
 28701 ;;
 28702                           
 28703                           	psect	text85
 28704  001F18                     __ptext85:
 28705                           	opt stack 0
 28706  001F18                     _fifo_getFree:
 28707                           	opt stack 20
 28708                           
 28709                           ; BSR set to: 1
 28710                           ;fifo.c: 98: if (f->head < f->tail) {
 28711                           
 28712                           ;incstack = 0
 28713                           ;incstack = 0
 28714  001F18  EE20 F004          	lfsr	2,4
 28715  001F1C  5001               	movf	fifo_getFree@f,w,c
 28716  001F1E  26D9               	addwf	fsr2l,f,c
 28717  001F20  5002               	movf	fifo_getFree@f+1,w,c
 28718  001F22  22DA               	addwfc	fsr2h,f,c
 28719  001F24  EE10 F002          	lfsr	1,2
 28720  001F28  5001               	movf	fifo_getFree@f,w,c
 28721  001F2A  26E1               	addwf	fsr1l,f,c
 28722  001F2C  5002               	movf	fifo_getFree@f+1,w,c
 28723  001F2E  22E2               	addwfc	fsr1h,f,c
 28724  001F30  52E6               	movf	postinc1,f,c
 28725  001F32  52DE               	movf	postinc2,f,c
 28726  001F34  50DD               	movf	postdec2,w,c
 28727  001F36  5CE5               	subwf	postdec1,w,c
 28728  001F38  E102               	bnz	i1u660_25
 28729  001F3A  50DF               	movf	indf2,w,c
 28730  001F3C  5CE7               	subwf	indf1,w,c
 28731  001F3E                     i1u660_25:
 28732  001F3E  E213               	bc	i1l6760
 28733                           
 28734                           ; BSR set to: 1
 28735                           ;fifo.c: 99: return (f->tail - f->head);
 28736  001F40  EE20 F002          	lfsr	2,2
 28737  001F44  D834               	call	PL80	;call to abstracted procedure
 28738  001F46  EE20 F004          	lfsr	2,4
 28739  001F4A  5001               	movf	fifo_getFree@f,w,c
 28740  001F4C  26D9               	addwf	fsr2l,f,c
 28741  001F4E  5002               	movf	fifo_getFree@f+1,w,c
 28742  001F50  22DA               	addwfc	fsr2h,f,c
 28743  001F52  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 28744  001F56  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 28745  001F5A  5003               	movf	??_fifo_getFree,w,c
 28746  001F5C  5C05               	subwf	??_fifo_getFree+2,w,c
 28747  001F5E  6E01               	movwf	?_fifo_getFree,c
 28748  001F60  5004               	movf	??_fifo_getFree+1,w,c
 28749  001F62  5806               	subwfb	??_fifo_getFree+3,w,c
 28750  001F64  D022               	goto	L47
 28751  001F66                     i1l6760:
 28752                           
 28753                           ; BSR set to: 1
 28754                           ;fifo.c: 101: else {
 28755                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 28756  001F66  EE20 F004          	lfsr	2,4
 28757  001F6A  D821               	call	PL80	;call to abstracted procedure
 28758  001F6C  EE20 F002          	lfsr	2,2
 28759  001F70  5001               	movf	fifo_getFree@f,w,c
 28760  001F72  26D9               	addwf	fsr2l,f,c
 28761  001F74  5002               	movf	fifo_getFree@f+1,w,c
 28762  001F76  22DA               	addwfc	fsr2h,f,c
 28763  001F78  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 28764  001F7C  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 28765  001F80  EE20 F006          	lfsr	2,6
 28766  001F84  5001               	movf	fifo_getFree@f,w,c
 28767  001F86  26D9               	addwf	fsr2l,f,c
 28768  001F88  5002               	movf	fifo_getFree@f+1,w,c
 28769  001F8A  22DA               	addwfc	fsr2h,f,c
 28770  001F8C  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 28771  001F90  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 28772  001F94  5005               	movf	??_fifo_getFree+2,w,c
 28773  001F96  5C07               	subwf	??_fifo_getFree+4,w,c
 28774  001F98  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 28775  001F9A  5006               	movf	??_fifo_getFree+3,w,c
 28776  001F9C  5808               	subwfb	??_fifo_getFree+5,w,c
 28777  001F9E  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 28778  001FA0  5003               	movf	??_fifo_getFree,w,c
 28779  001FA2  2409               	addwf	??_fifo_getFree+6,w,c
 28780  001FA4  6E01               	movwf	?_fifo_getFree,c
 28781  001FA6  5004               	movf	??_fifo_getFree+1,w,c
 28782  001FA8  200A               	addwfc	??_fifo_getFree+7,w,c
 28783  001FAA                     L47:
 28784  001FAA  6E02               	movwf	?_fifo_getFree+1,c
 28785                           
 28786                           ; BSR set to: 1
 28787  001FAC  0012               	return	
 28788  001FAE                     __end_of_fifo_getFree:
 28789                           	opt stack 0
 28790  001FAE                     PL80:
 28791                           	opt stack 20
 28792  001FAE  5001               	movf	fifo_getFree@f,w,c
 28793  001FB0  26D9               	addwf	fsr2l,f,c
 28794  001FB2  5002               	movf	fifo_getFree@f+1,w,c
 28795  001FB4  22DA               	addwfc	fsr2h,f,c
 28796  001FB6  CFDE F003          	movff	postinc2,??_fifo_getFree
 28797  001FBA  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 28798  001FBE  0012               	return	
 28799  001FC0                     __end_ofPL80:
 28800                           	opt stack 0
 28801                           tblptru	equ	0xFF8
 28802                           tblptrh	equ	0xFF7
 28803                           tblptrl	equ	0xFF6
 28804                           tablat	equ	0xFF5
 28805                           prodh	equ	0xFF4
 28806                           prodl	equ	0xFF3
 28807                           intcon	equ	0xFF2
 28808                           indf0	equ	0xFEF
 28809                           postinc0	equ	0xFEE
 28810                           fsr0h	equ	0xFEA
 28811                           fsr0l	equ	0xFE9
 28812                           wreg	equ	0xFE8
 28813                           indf1	equ	0xFE7
 28814                           postinc1	equ	0xFE6
 28815                           postdec1	equ	0xFE5
 28816                           fsr1h	equ	0xFE2
 28817                           fsr1l	equ	0xFE1
 28818                           bsr	equ	0xFE0
 28819                           indf2	equ	0xFDF
 28820                           postinc2	equ	0xFDE
 28821                           postdec2	equ	0xFDD
 28822                           plusw2	equ	0xFDB
 28823                           fsr2h	equ	0xFDA
 28824                           fsr2l	equ	0xFD9
 28825                           status	equ	0xFD8
 28826                           
 28827 ;; *************** function _ECANReceiveMessage *****************
 28828 ;; Defined at:
 28829 ;;		line 803 in file "ECAN.c"
 28830 ;; Parameters:    Size  Location     Type
 28831 ;;  id              2    9[COMRAM] PTR unsigned long 
 28832 ;;		 -> id(4), 
 28833 ;;  data            2   11[COMRAM] PTR unsigned char 
 28834 ;;		 -> data(8), 
 28835 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 28836 ;;		 -> dlc(1), 
 28837 ;;  msgFlags        1   14[COMRAM] PTR enum E16333
 28838 ;;		 -> flags(1), 
 28839 ;; Auto vars:     Size  Location     Type
 28840 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 28841 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28842 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28843 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 28844 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28845 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28846 ;;  temp            1   19[COMRAM] struct .
 28847 ;;  mode            1   18[COMRAM] unsigned char 
 28848 ;;  i               1   17[COMRAM] unsigned char 
 28849 ;; Return value:  Size  Location     Type
 28850 ;;                  1    wreg      enum E15660
 28851 ;; Registers used:
 28852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28853 ;; Tracked objects:
 28854 ;;		On entry : F/1
 28855 ;;		On exit  : 0/0
 28856 ;;		Unchanged: 0/0
 28857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28858 ;;      Params:         6       0       0       0       0       0       0
 28859 ;;      Locals:         7       0       0       0       0       0       0
 28860 ;;      Temps:          0       0       0       0       0       0       0
 28861 ;;      Totals:        13       0       0       0       0       0       0
 28862 ;;Total ram usage:       13 bytes
 28863 ;; Hardware stack levels used:    1
 28864 ;; Hardware stack levels required when called:    1
 28865 ;; This function calls:
 28866 ;;		__ECANPointBuffer
 28867 ;;		__RegsToCANID
 28868 ;; This function is called by:
 28869 ;;		_Interrupt
 28870 ;; This function uses a non-reentrant model
 28871 ;;
 28872                           
 28873                           	psect	text86
 28874  004144                     __ptext86:
 28875                           	opt stack 0
 28876  004144                     _ECANReceiveMessage:
 28877                           	opt stack 19
 28878                           
 28879                           ; BSR set to: 1
 28880                           ;ECAN.c: 805: BYTE mode;
 28881                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 28882                           ;ECAN.c: 809: char i;
 28883                           ;ECAN.c: 810: BYTE_VAL temp;
 28884                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 28885                           
 28886                           ; BSR set to: 1
 28887                           ;incstack = 0
 28888                           ;incstack = 0
 28889  004144  6A27               	clrf	__ECANRxFilterHitInfo,c
 28890                           
 28891                           ; BSR set to: 1
 28892                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 28893  004146  5077               	movf	3959,w,c	;volatile
 28894  004148  0BC0               	andlw	192
 28895  00414A  6E13               	movwf	ECANReceiveMessage@mode,c
 28896                           
 28897                           ; BSR set to: 1
 28898                           ;ECAN.c: 816: if ( mode == 0x00 )
 28899  00414C  6613               	tstfsz	ECANReceiveMessage@mode,c
 28900  00414E  D032               	goto	i1l10356
 28901                           
 28902                           ; BSR set to: 1
 28903                           ;ECAN.c: 822: {
 28904                           ;ECAN.c: 824: if ( RXB0FUL )
 28905  004150  AE60               	btfss	3936,7,c	;volatile
 28906  004152  D012               	goto	i1l1534
 28907                           
 28908                           ; BSR set to: 1
 28909                           ;ECAN.c: 825: {
 28910                           ;ECAN.c: 827: RXB0IF = 0;
 28911  004154  90A4               	bcf	4004,0,c	;volatile
 28912                           
 28913                           ;ECAN.c: 830: if ( RXB0OVFL )
 28914  004156  AE74               	btfss	3956,7,c	;volatile
 28915  004158  D006               	goto	i1l10332
 28916                           
 28917                           ; BSR set to: 1
 28918                           ;ECAN.c: 831: {
 28919                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 28920  00415A  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28921  00415C  6ED9               	movwf	fsr2l,c
 28922  00415E  6ADA               	clrf	fsr2h,c
 28923  004160  0E00               	movlw	0
 28924  004162  86DB               	bsf	plusw2,3,c
 28925                           
 28926                           ; BSR set to: 1
 28927                           ;ECAN.c: 833: RXB0OVFL = 0;
 28928  004164  9E74               	bcf	3956,7,c	;volatile
 28929  004166                     i1l10332:
 28930                           
 28931                           ; BSR set to: 1
 28932                           ;ECAN.c: 834: }
 28933                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 28934  004166  A060               	btfss	3936,0,c	;volatile
 28935  004168  D002               	bra	i1u1212_25
 28936  00416A  8027               	bsf	__ECANRxFilterHitInfo,0,c
 28937  00416C  D001               	bra	i1u1212_27
 28938  00416E                     i1u1212_25:
 28939  00416E  9027               	bcf	__ECANRxFilterHitInfo,0,c
 28940  004170                     i1u1212_27:
 28941                           
 28942                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 28943  004170  0E0F               	movlw	15	;volatile
 28944  004172  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 28945  004174  0E60               	movlw	96	;volatile
 28946  004176  D01A               	goto	L48
 28947  004178                     i1l1534:
 28948                           
 28949                           ; BSR set to: 1
 28950                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 28951  004178  010F               	movlb	15	; () banked
 28952  00417A  AF50               	btfss	80,7,b	;volatile
 28953  00417C  D019               	goto	i1l10350
 28954                           
 28955                           ; BSR set to: 15
 28956                           ;ECAN.c: 842: {
 28957                           ;ECAN.c: 844: RXB1IF = 0;
 28958  00417E  92A4               	bcf	4004,1,c	;volatile
 28959                           
 28960                           ;ECAN.c: 847: if ( RXB1OVFL )
 28961  004180  AC74               	btfss	3956,6,c	;volatile
 28962  004182  D006               	goto	i1l10342
 28963                           
 28964                           ; BSR set to: 15
 28965                           ;ECAN.c: 848: {
 28966                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 28967  004184  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28968  004186  6ED9               	movwf	fsr2l,c
 28969  004188  6ADA               	clrf	fsr2h,c
 28970  00418A  0E00               	movlw	0
 28971  00418C  86DB               	bsf	plusw2,3,c
 28972                           
 28973                           ; BSR set to: 15
 28974                           ;ECAN.c: 850: RXB1OVFL = 0;
 28975  00418E  9C74               	bcf	3956,6,c	;volatile
 28976  004190                     i1l10342:
 28977                           
 28978                           ; BSR set to: 15
 28979                           ;ECAN.c: 851: }
 28980                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 28981  004190  5150               	movf	80,w,b	;volatile
 28982  004192  0B07               	andlw	7
 28983  004194  6E27               	movwf	__ECANRxFilterHitInfo,c
 28984                           
 28985                           ; BSR set to: 15
 28986                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 28987  004196  0E02               	movlw	2
 28988  004198  6027               	cpfslt	__ECANRxFilterHitInfo,c
 28989  00419A  D005               	goto	i1l10348
 28990                           
 28991                           ; BSR set to: 15
 28992                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 28993  00419C  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28994  00419E  6ED9               	movwf	fsr2l,c
 28995  0041A0  6ADA               	clrf	fsr2h,c
 28996  0041A2  0E00               	movlw	0
 28997  0041A4  8EDB               	bsf	plusw2,7,c
 28998  0041A6                     i1l10348:
 28999                           
 29000                           ; BSR set to: 15
 29001                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 29002  0041A6  0E0F               	movlw	15	;volatile
 29003  0041A8  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29004  0041AA  0E50               	movlw	80	;volatile
 29005  0041AC                     L48:
 29006  0041AC  6E15               	movwf	ECANReceiveMessage@ptr,c
 29007                           
 29008                           ;ECAN.c: 860: }
 29009  0041AE  D065               	goto	i1l10410
 29010  0041B0                     i1l10350:
 29011                           
 29012                           ;ECAN.c: 861: else
 29013                           ;ECAN.c: 862: return FALSE;
 29014  0041B0  0E00               	movlw	0
 29015  0041B2  D0C6               	goto	i1l1541
 29016  0041B4                     i1l10356:
 29017                           
 29018                           ; BSR set to: 1
 29019                           ;ECAN.c: 869: else if ( mode == 0x40 )
 29020  0041B4  5013               	movf	ECANReceiveMessage@mode,w,c
 29021  0041B6  0A40               	xorlw	64
 29022  0041B8  E146               	bnz	i1l1544
 29023                           
 29024                           ; BSR set to: 1
 29025                           ;ECAN.c: 875: {
 29026                           ;ECAN.c: 876: if ( RXB0FUL )
 29027  0041BA  AE60               	btfss	3936,7,c	;volatile
 29028  0041BC  D004               	goto	i1l1545
 29029                           
 29030                           ; BSR set to: 1
 29031                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 29032  0041BE  0E0F               	movlw	15	;volatile
 29033  0041C0  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29034  0041C2  0E60               	movlw	96	;volatile
 29035  0041C4  D03E               	goto	L55
 29036  0041C6                     i1l1545:
 29037                           
 29038                           ; BSR set to: 1
 29039                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 29040  0041C6  010F               	movlb	15	; () banked
 29041  0041C8  AF50               	btfss	80,7,b	;volatile
 29042  0041CA  D004               	goto	i1l1547
 29043                           
 29044                           ; BSR set to: 15
 29045                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 29046  0041CC  0E0F               	movlw	15	;volatile
 29047  0041CE  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29048  0041D0  0E50               	movlw	80	;volatile
 29049  0041D2  D037               	goto	L55
 29050  0041D4                     i1l1547:
 29051                           
 29052                           ; BSR set to: 15
 29053                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 29054  0041D4  010D               	movlb	13
 29055  0041D6  B5F8               	btfsc	248,2,b	;volatile
 29056  0041D8  D007               	goto	i1l1549
 29057  0041DA  010E               	movlb	14
 29058  0041DC  AF20               	btfss	32,7,b	;volatile
 29059  0041DE  D004               	goto	i1l1549
 29060                           
 29061                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 29062  0041E0  0E0E               	movlw	14	;volatile
 29063  0041E2  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29064  0041E4  0E20               	movlw	32	;volatile
 29065  0041E6  D02D               	goto	L55
 29066  0041E8                     i1l1549:
 29067                           
 29068                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 29069  0041E8  010D               	movlb	13
 29070  0041EA  B7F8               	btfsc	248,3,b	;volatile
 29071  0041EC  D007               	goto	i1l1551
 29072  0041EE  010E               	movlb	14
 29073  0041F0  AF30               	btfss	48,7,b	;volatile
 29074  0041F2  D004               	goto	i1l1551
 29075                           
 29076                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 29077  0041F4  0E0E               	movlw	14	;volatile
 29078  0041F6  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29079  0041F8  0E30               	movlw	48	;volatile
 29080  0041FA  D023               	goto	L55
 29081  0041FC                     i1l1551:
 29082                           
 29083                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 29084  0041FC  010D               	movlb	13
 29085  0041FE  B9F8               	btfsc	248,4,b	;volatile
 29086  004200  D007               	goto	i1l1553
 29087  004202  010E               	movlb	14
 29088  004204  AF40               	btfss	64,7,b	;volatile
 29089  004206  D004               	goto	i1l1553
 29090                           
 29091                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 29092  004208  0E0E               	movlw	14	;volatile
 29093  00420A  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29094  00420C  0E40               	movlw	64	;volatile
 29095  00420E  D019               	goto	L55
 29096  004210                     i1l1553:
 29097                           
 29098                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 29099  004210  010D               	movlb	13
 29100  004212  BBF8               	btfsc	248,5,b	;volatile
 29101  004214  D005               	goto	i1l1555
 29102  004216  010E               	movlb	14
 29103  004218  AF50               	btfss	80,7,b	;volatile
 29104  00421A  D002               	goto	i1l1555
 29105                           
 29106                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 29107  00421C  0E0E               	movlw	14	;volatile
 29108  00421E  D7D7               	goto	L56
 29109  004220                     i1l1555:
 29110                           
 29111                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 29112  004220  010D               	movlb	13
 29113  004222  BDF8               	btfsc	248,6,b	;volatile
 29114  004224  D005               	goto	i1l1557
 29115  004226  010E               	movlb	14
 29116  004228  AF60               	btfss	96,7,b	;volatile
 29117  00422A  D002               	goto	i1l1557
 29118                           
 29119                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 29120  00422C  0E0E               	movlw	14	;volatile
 29121  00422E  D7C8               	goto	L57
 29122  004230                     i1l1557:
 29123                           
 29124                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 29125  004230  010D               	movlb	13
 29126  004232  BFF8               	btfsc	248,7,b	;volatile
 29127  004234  D7BD               	goto	i1l10350
 29128  004236  010E               	movlb	14
 29129  004238  AF70               	btfss	112,7,b	;volatile
 29130  00423A  D7BA               	goto	i1l10350
 29131                           
 29132                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 29133  00423C  0E0E               	movlw	14	;volatile
 29134  00423E  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 29135  004240  0E70               	movlw	112	;volatile
 29136  004242                     L55:
 29137  004242  6E15               	movwf	ECANReceiveMessage@ptr,c
 29138  004244  D00A               	goto	i1l10400
 29139  004246                     i1l1544:
 29140                           
 29141                           ; BSR set to: 1
 29142                           ;ECAN.c: 910: else
 29143                           ;ECAN.c: 915: {
 29144                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 29145  004246  AE74               	btfss	3956,7,c	;volatile
 29146  004248  D7B3               	goto	i1l10350
 29147                           
 29148                           ; BSR set to: 1
 29149                           ;ECAN.c: 919: {
 29150                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 29151  00424A  506F               	movf	3951,w,c	;volatile
 29152  00424C  0B07               	andlw	7
 29153  00424E  EC3F  F00C         	call	__ECANPointBuffer
 29154  004252  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 29155  004256  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 29156  00425A                     i1l10400:
 29157                           
 29158                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 29159  00425A  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 29160  00425E  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 29161  004262  50DF               	movf	indf2,w,c
 29162  004264  0B1F               	andlw	31
 29163  004266  6E27               	movwf	__ECANRxFilterHitInfo,c
 29164                           
 29165                           ;ECAN.c: 934: RXB1IF = 0;
 29166  004268  92A4               	bcf	4004,1,c	;volatile
 29167                           
 29168                           ;ECAN.c: 936: if ( RXB1OVFL )
 29169  00426A  AC74               	btfss	3956,6,c	;volatile
 29170  00426C  D006               	goto	i1l10410
 29171                           
 29172                           ;ECAN.c: 937: {
 29173                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 29174  00426E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29175  004270  6ED9               	movwf	fsr2l,c
 29176  004272  6ADA               	clrf	fsr2h,c
 29177  004274  0E00               	movlw	0
 29178  004276  86DB               	bsf	plusw2,3,c
 29179                           
 29180                           ;ECAN.c: 939: RXB1OVFL = 0;
 29181  004278  9C74               	bcf	3956,6,c	;volatile
 29182  00427A                     i1l10410:
 29183                           
 29184                           ;ECAN.c: 944: savedPtr = ptr;
 29185  00427A  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 29186  00427E  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 29187                           
 29188                           ;ECAN.c: 945: *msgFlags = 0;
 29189  004282  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29190  004284  6ED9               	movwf	fsr2l,c
 29191  004286  6ADA               	clrf	fsr2h,c
 29192  004288  6ADF               	clrf	indf2,c
 29193                           
 29194                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 29195  00428A  EE20 F005          	lfsr	2,5
 29196  00428E  D859               	call	PL106	;call to abstracted procedure
 29197                           
 29198                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 29199  004290  500E               	movf	ECANReceiveMessage@dataLen,w,c
 29200  004292  6ED9               	movwf	fsr2l,c
 29201  004294  6ADA               	clrf	fsr2h,c
 29202  004296  5014               	movf	ECANReceiveMessage@temp,w,c
 29203  004298  0B0F               	andlw	15
 29204  00429A  6EDF               	movwf	indf2,c
 29205                           
 29206                           ;ECAN.c: 952: if ( temp.bits.b6 )
 29207  00429C  AC14               	btfss	ECANReceiveMessage@temp,6,c
 29208  00429E  D005               	goto	i1l1565
 29209                           
 29210                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 29211  0042A0  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29212  0042A2  6ED9               	movwf	fsr2l,c
 29213  0042A4  6ADA               	clrf	fsr2h,c
 29214  0042A6  0E00               	movlw	0
 29215  0042A8  8CDB               	bsf	plusw2,6,c
 29216  0042AA                     i1l1565:
 29217                           
 29218                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 29219  0042AA  EE20 F002          	lfsr	2,2
 29220  0042AE  D849               	call	PL106	;call to abstracted procedure
 29221                           
 29222                           ;ECAN.c: 957: if ( temp.bits.b3 )
 29223  0042B0  A614               	btfss	ECANReceiveMessage@temp,3,c
 29224  0042B2  D008               	goto	i1l1566
 29225                           
 29226                           ;ECAN.c: 958: {
 29227                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 29228  0042B4  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29229  0042B6  6ED9               	movwf	fsr2l,c
 29230  0042B8  6ADA               	clrf	fsr2h,c
 29231  0042BA  0E00               	movlw	0
 29232  0042BC  8ADB               	bsf	plusw2,5,c
 29233                           
 29234                           ;ECAN.c: 960: temp.Val = 1;
 29235  0042BE  0E01               	movlw	1
 29236  0042C0  6E14               	movwf	ECANReceiveMessage@temp,c
 29237                           
 29238                           ;ECAN.c: 961: }
 29239  0042C2  D001               	goto	i1l10428
 29240  0042C4                     i1l1566:
 29241                           
 29242                           ;ECAN.c: 962: else
 29243                           ;ECAN.c: 963: temp.Val = 0;
 29244  0042C4  6A14               	clrf	ECANReceiveMessage@temp,c
 29245  0042C6                     i1l10428:
 29246                           
 29247                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 29248  0042C6  2815               	incf	ECANReceiveMessage@ptr,w,c
 29249  0042C8  6E01               	movwf	?__RegsToCANID,c
 29250  0042CA  0E00               	movlw	0
 29251  0042CC  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 29252  0042CE  6E02               	movwf	?__RegsToCANID+1,c
 29253  0042D0  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 29254  0042D4  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 29255  0042D8  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 29256  0042DC  ECDC  F017         	call	__RegsToCANID	;wreg free
 29257                           
 29258                           ;ECAN.c: 968: ptr += 6;
 29259  0042E0  0E06               	movlw	6
 29260  0042E2  2615               	addwf	ECANReceiveMessage@ptr,f,c
 29261  0042E4  0E00               	movlw	0
 29262  0042E6  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 29263                           
 29264                           ;ECAN.c: 969: temp.Val = *dataLen;
 29265  0042E8  500E               	movf	ECANReceiveMessage@dataLen,w,c
 29266  0042EA  6ED9               	movwf	fsr2l,c
 29267  0042EC  6ADA               	clrf	fsr2h,c
 29268  0042EE  50DF               	movf	indf2,w,c
 29269  0042F0  6E14               	movwf	ECANReceiveMessage@temp,c
 29270                           
 29271                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 29272  0042F2  6A12               	clrf	ECANReceiveMessage@i,c
 29273  0042F4  D00F               	goto	i1l10444
 29274  0042F6                     i1l10436:
 29275                           
 29276                           ;ECAN.c: 971: *data++ = *ptr++;
 29277  0042F6  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 29278  0042FA  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 29279  0042FE  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 29280  004302  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 29281  004306  CFDF FFE7          	movff	indf2,indf1
 29282  00430A  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 29283  00430C  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 29284  00430E  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 29285  004310  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 29286  004312  2A12               	incf	ECANReceiveMessage@i,f,c
 29287  004314                     i1l10444:
 29288  004314  5014               	movf	ECANReceiveMessage@temp,w,c
 29289  004316  5C12               	subwf	ECANReceiveMessage@i,w,c
 29290  004318  E3EE               	bnc	i1l10436
 29291                           
 29292                           ;ECAN.c: 974: if ( IRXIF )
 29293  00431A  AEA4               	btfss	4004,7,c	;volatile
 29294  00431C  D006               	goto	i1l10450
 29295                           
 29296                           ;ECAN.c: 975: {
 29297                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 29298  00431E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 29299  004320  6ED9               	movwf	fsr2l,c
 29300  004322  6ADA               	clrf	fsr2h,c
 29301  004324  0E00               	movlw	0
 29302  004326  88DB               	bsf	plusw2,4,c
 29303                           
 29304                           ;ECAN.c: 977: IRXIF = 0;
 29305  004328  9EA4               	bcf	4004,7,c	;volatile
 29306  00432A                     i1l10450:
 29307                           
 29308                           ;ECAN.c: 978: }
 29309                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 29310  00432A  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 29311  00432E  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 29312  004332  0E7F               	movlw	127
 29313  004334  16DF               	andwf	indf2,f,c
 29314                           
 29315                           ;ECAN.c: 985: if ( mode == 0x80 )
 29316  004336  5013               	movf	ECANReceiveMessage@mode,w,c
 29317  004338  0A80               	xorlw	128
 29318  00433A  B4D8               	btfsc	status,2,c
 29319                           
 29320                           ;ECAN.c: 986: FIFOEMPTY = 0;
 29321  00433C  9E74               	bcf	3956,7,c	;volatile
 29322                           
 29323                           ;ECAN.c: 992: return TRUE;
 29324  00433E  0E01               	movlw	1
 29325  004340                     i1l1541:
 29326  004340  0012               	return	
 29327  004342                     __end_of_ECANReceiveMessage:
 29328                           	opt stack 0
 29329  004342                     PL106:
 29330                           	opt stack 19
 29331  004342  5015               	movf	ECANReceiveMessage@ptr,w,c
 29332  004344  26D9               	addwf	fsr2l,f,c
 29333  004346  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 29334  004348  22DA               	addwfc	fsr2h,f,c
 29335  00434A  50DF               	movf	indf2,w,c
 29336  00434C  6E14               	movwf	ECANReceiveMessage@temp,c
 29337  00434E  0012               	return	
 29338  004350                     __end_ofPL106:
 29339                           	opt stack 0
 29340                           tblptru	equ	0xFF8
 29341                           tblptrh	equ	0xFF7
 29342                           tblptrl	equ	0xFF6
 29343                           tablat	equ	0xFF5
 29344                           prodh	equ	0xFF4
 29345                           prodl	equ	0xFF3
 29346                           intcon	equ	0xFF2
 29347                           indf0	equ	0xFEF
 29348                           postinc0	equ	0xFEE
 29349                           fsr0h	equ	0xFEA
 29350                           fsr0l	equ	0xFE9
 29351                           wreg	equ	0xFE8
 29352                           indf1	equ	0xFE7
 29353                           postinc1	equ	0xFE6
 29354                           postdec1	equ	0xFE5
 29355                           fsr1h	equ	0xFE2
 29356                           fsr1l	equ	0xFE1
 29357                           bsr	equ	0xFE0
 29358                           indf2	equ	0xFDF
 29359                           postinc2	equ	0xFDE
 29360                           postdec2	equ	0xFDD
 29361                           plusw2	equ	0xFDB
 29362                           fsr2h	equ	0xFDA
 29363                           fsr2l	equ	0xFD9
 29364                           status	equ	0xFD8
 29365                           
 29366 ;; *************** function __RegsToCANID *****************
 29367 ;; Defined at:
 29368 ;;		line 1158 in file "ECAN.c"
 29369 ;; Parameters:    Size  Location     Type
 29370 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 29371 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29372 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29373 ;;  val             2    2[COMRAM] PTR unsigned long 
 29374 ;;		 -> id(4), 
 29375 ;;  type            1    4[COMRAM] unsigned char 
 29376 ;; Auto vars:     Size  Location     Type
 29377 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 29378 ;;		 -> id(4), 
 29379 ;; Return value:  Size  Location     Type
 29380 ;;		None               void
 29381 ;; Registers used:
 29382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29383 ;; Tracked objects:
 29384 ;;		On entry : 0/1
 29385 ;;		On exit  : 0/0
 29386 ;;		Unchanged: 0/0
 29387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29388 ;;      Params:         5       0       0       0       0       0       0
 29389 ;;      Locals:         2       0       0       0       0       0       0
 29390 ;;      Temps:          2       0       0       0       0       0       0
 29391 ;;      Totals:         9       0       0       0       0       0       0
 29392 ;;Total ram usage:        9 bytes
 29393 ;; Hardware stack levels used:    1
 29394 ;; This function calls:
 29395 ;;		Nothing
 29396 ;; This function is called by:
 29397 ;;		_ECANReceiveMessage
 29398 ;; This function uses a non-reentrant model
 29399 ;;
 29400                           
 29401                           	psect	text87
 29402  002FB8                     __ptext87:
 29403                           	opt stack 0
 29404  002FB8                     __RegsToCANID:
 29405                           	opt stack 19
 29406                           
 29407                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 29408                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 29409                           
 29410                           ;incstack = 0
 29411                           ;incstack = 0
 29412  002FB8  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 29413  002FBC  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 29414                           
 29415                           ;ECAN.c: 1163: if ( type == 0 )
 29416  002FC0  6605               	tstfsz	__RegsToCANID@type,c
 29417  002FC2  D038               	goto	i1l10100
 29418                           
 29419                           ;ECAN.c: 1164: {
 29420                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 29421  002FC4  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29422  002FC8  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29423  002FCC  50DF               	movf	indf2,w,c
 29424  002FCE  6E06               	movwf	??__RegsToCANID& (0+255),c
 29425  002FD0  90D8               	bcf	status,0,c
 29426  002FD2  3606               	rlcf	??__RegsToCANID,f,c
 29427  002FD4  90D8               	bcf	status,0,c
 29428  002FD6  3606               	rlcf	??__RegsToCANID,f,c
 29429  002FD8  90D8               	bcf	status,0,c
 29430  002FDA  3406               	rlcf	??__RegsToCANID,w,c
 29431  002FDC  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 29432  002FE0  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 29433  002FE4  6EDF               	movwf	indf2,c
 29434                           
 29435                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 29436  002FE6  EE20 F001          	lfsr	2,1
 29437  002FEA  D864               	call	PL24	;call to abstracted procedure
 29438  002FEC  0E05               	movlw	5
 29439  002FEE  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29440  002FF0                     i1u1172_25:
 29441  002FF0  90D8               	bcf	status,0,c
 29442  002FF2  3206               	rrcf	??__RegsToCANID,f,c
 29443  002FF4  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29444  002FF6  D7FC               	goto	i1u1172_25
 29445  002FF8  5006               	movf	??__RegsToCANID,w,c
 29446                           
 29447                           ;ECAN.c: 1168: ptr++;
 29448                           
 29449                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 29450  002FFA  D867               	call	PL68	;call to abstracted procedure
 29451  002FFC  0E05               	movlw	5
 29452  002FFE  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29453  003000                     i1u1173_25:
 29454  003000  90D8               	bcf	status,0,c
 29455  003002  3206               	rrcf	??__RegsToCANID,f,c
 29456  003004  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29457  003006  D7FC               	goto	i1u1173_25
 29458  003008  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 29459  00300C  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 29460  003010  5006               	movf	??__RegsToCANID,w,c
 29461  003012  12DF               	iorwf	indf2,f,c
 29462                           
 29463                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 29464  003014  EE20 F002          	lfsr	2,2
 29465  003018  5008               	movf	__RegsToCANID@Value,w,c
 29466  00301A  26D9               	addwf	fsr2l,f,c
 29467  00301C  5009               	movf	__RegsToCANID@Value+1,w,c
 29468  00301E  22DA               	addwfc	fsr2h,f,c
 29469  003020  6ADF               	clrf	indf2,c
 29470                           
 29471                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 29472  003022  EE20 F003          	lfsr	2,3
 29473  003026  5008               	movf	__RegsToCANID@Value,w,c
 29474  003028  26D9               	addwf	fsr2l,f,c
 29475  00302A  5009               	movf	__RegsToCANID@Value+1,w,c
 29476  00302C  22DA               	addwfc	fsr2h,f,c
 29477  00302E  0E00               	movlw	0
 29478  003030  6EDF               	movwf	indf2,c
 29479                           
 29480                           ;ECAN.c: 1172: }
 29481  003032  D03F               	goto	i1l1588
 29482  003034                     i1l10100:
 29483                           
 29484                           ;ECAN.c: 1173: else
 29485                           ;ECAN.c: 1174: {
 29486                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 29487  003034  EE20 F002          	lfsr	2,2
 29488  003038  D83D               	call	PL24	;call to abstracted procedure
 29489  00303A  0E05               	movlw	5
 29490  00303C  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 29491  00303E                     i1u1174_25:
 29492  00303E  90D8               	bcf	status,0,c
 29493  003040  3606               	rlcf	??__RegsToCANID,f,c
 29494  003042  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 29495  003044  D7FC               	goto	i1u1174_25
 29496  003046  5006               	movf	??__RegsToCANID,w,c
 29497  003048  6EDF               	movwf	indf2,c
 29498                           
 29499                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 29500  00304A  EE20 F003          	lfsr	2,3
 29501  00304E  D832               	call	PL24	;call to abstracted procedure
 29502  003050  90D8               	bcf	status,0,c
 29503  003052  3206               	rrcf	??__RegsToCANID,f,c
 29504  003054  90D8               	bcf	status,0,c
 29505  003056  3206               	rrcf	??__RegsToCANID,f,c
 29506  003058  90D8               	bcf	status,0,c
 29507  00305A  3006               	rrcf	??__RegsToCANID,w,c
 29508                           
 29509                           ;ECAN.c: 1178: ptr++;
 29510                           
 29511                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 29512  00305C  D836               	call	PL68	;call to abstracted procedure
 29513  00305E  0E03               	movlw	3
 29514  003060  D83E               	call	PL76	;call to abstracted procedure
 29515                           
 29516                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 29517  003062  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29518  003066  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29519  00306A  50DF               	movf	indf2,w,c
 29520  00306C  6E06               	movwf	??__RegsToCANID& (0+255),c
 29521  00306E  90D8               	bcf	status,0,c
 29522  003070  3206               	rrcf	??__RegsToCANID,f,c
 29523  003072  90D8               	bcf	status,0,c
 29524  003074  3206               	rrcf	??__RegsToCANID,f,c
 29525  003076  90D8               	bcf	status,0,c
 29526  003078  3206               	rrcf	??__RegsToCANID,f,c
 29527  00307A  0E1C               	movlw	28
 29528  00307C  D830               	call	PL76	;call to abstracted procedure
 29529                           
 29530                           ;ECAN.c: 1182: ptr++;
 29531  00307E  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29532  003080  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29533                           
 29534                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 29535  003082  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29536  003086  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29537  00308A  EE10 F001          	lfsr	1,1
 29538  00308E  5008               	movf	__RegsToCANID@Value,w,c
 29539  003090  26E1               	addwf	fsr1l,f,c
 29540  003092  5009               	movf	__RegsToCANID@Value+1,w,c
 29541  003094  22E2               	addwfc	fsr1h,f,c
 29542  003096  CFDF FFE7          	movff	indf2,indf1
 29543                           
 29544                           ;ECAN.c: 1184: ptr++;
 29545  00309A  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29546  00309C  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29547                           
 29548                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 29549  00309E  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29550  0030A2  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29551  0030A6  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 29552  0030AA  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 29553  0030AE  CFDF FFE7          	movff	indf2,indf1
 29554  0030B2                     i1l1588:
 29555  0030B2  0012               	return	
 29556  0030B4                     __end_of__RegsToCANID:
 29557                           	opt stack 0
 29558  0030B4                     PL24:
 29559                           	opt stack 19
 29560  0030B4  5008               	movf	__RegsToCANID@Value,w,c
 29561  0030B6  26D9               	addwf	fsr2l,f,c
 29562  0030B8  5009               	movf	__RegsToCANID@Value+1,w,c
 29563  0030BA  22DA               	addwfc	fsr2h,f,c
 29564  0030BC  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 29565  0030C0  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 29566  0030C4  50E7               	movf	indf1,w,c
 29567  0030C6  6E06               	movwf	??__RegsToCANID& (0+255),c
 29568  0030C8  0012               	return	
 29569  0030CA                     __end_ofPL24:
 29570                           	opt stack 0
 29571  0030CA                     PL68:
 29572                           	opt stack 19
 29573  0030CA  6EDF               	movwf	indf2,c
 29574  0030CC  4A01               	infsnz	__RegsToCANID@ptr,f,c
 29575  0030CE  2A02               	incf	__RegsToCANID@ptr+1,f,c
 29576  0030D0  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 29577  0030D4  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 29578  0030D8  50DF               	movf	indf2,w,c
 29579  0030DA  6E06               	movwf	??__RegsToCANID& (0+255),c
 29580  0030DC  0012               	return	
 29581  0030DE                     __end_ofPL68:
 29582                           	opt stack 0
 29583  0030DE                     PL76:
 29584                           	opt stack 19
 29585  0030DE  1606               	andwf	??__RegsToCANID,f,c
 29586  0030E0  EE20 F002          	lfsr	2,2
 29587  0030E4  5008               	movf	__RegsToCANID@Value,w,c
 29588  0030E6  26D9               	addwf	fsr2l,f,c
 29589  0030E8  5009               	movf	__RegsToCANID@Value+1,w,c
 29590  0030EA  22DA               	addwfc	fsr2h,f,c
 29591  0030EC  5006               	movf	??__RegsToCANID,w,c
 29592  0030EE  12DF               	iorwf	indf2,f,c
 29593  0030F0  0012               	return	
 29594  0030F2                     __end_ofPL76:
 29595                           	opt stack 0
 29596                           tblptru	equ	0xFF8
 29597                           tblptrh	equ	0xFF7
 29598                           tblptrl	equ	0xFF6
 29599                           tablat	equ	0xFF5
 29600                           prodh	equ	0xFF4
 29601                           prodl	equ	0xFF3
 29602                           intcon	equ	0xFF2
 29603                           indf0	equ	0xFEF
 29604                           postinc0	equ	0xFEE
 29605                           fsr0h	equ	0xFEA
 29606                           fsr0l	equ	0xFE9
 29607                           wreg	equ	0xFE8
 29608                           indf1	equ	0xFE7
 29609                           postinc1	equ	0xFE6
 29610                           postdec1	equ	0xFE5
 29611                           fsr1h	equ	0xFE2
 29612                           fsr1l	equ	0xFE1
 29613                           bsr	equ	0xFE0
 29614                           indf2	equ	0xFDF
 29615                           postinc2	equ	0xFDE
 29616                           postdec2	equ	0xFDD
 29617                           plusw2	equ	0xFDB
 29618                           fsr2h	equ	0xFDA
 29619                           fsr2l	equ	0xFD9
 29620                           status	equ	0xFD8
 29621                           
 29622 ;; *************** function __ECANPointBuffer *****************
 29623 ;; Defined at:
 29624 ;;		line 1209 in file "ECAN.c"
 29625 ;; Parameters:    Size  Location     Type
 29626 ;;  b               1    wreg     unsigned char 
 29627 ;; Auto vars:     Size  Location     Type
 29628 ;;  b               1    3[COMRAM] unsigned char 
 29629 ;;  pt              2    4[COMRAM] PTR unsigned char 
 29630 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29631 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29632 ;; Return value:  Size  Location     Type
 29633 ;;                  2    0[COMRAM] PTR unsigned char 
 29634 ;; Registers used:
 29635 ;;		wreg, status,2, status,0
 29636 ;; Tracked objects:
 29637 ;;		On entry : F/1
 29638 ;;		On exit  : 0/0
 29639 ;;		Unchanged: 0/0
 29640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29641 ;;      Params:         3       0       0       0       0       0       0
 29642 ;;      Locals:         3       0       0       0       0       0       0
 29643 ;;      Temps:          0       0       0       0       0       0       0
 29644 ;;      Totals:         6       0       0       0       0       0       0
 29645 ;;Total ram usage:        6 bytes
 29646 ;; Hardware stack levels used:    1
 29647 ;; This function calls:
 29648 ;;		Nothing
 29649 ;; This function is called by:
 29650 ;;		_ECANReceiveMessage
 29651 ;; This function uses a non-reentrant model
 29652 ;;
 29653                           
 29654                           	psect	text88
 29655  00187E                     __ptext88:
 29656                           	opt stack 0
 29657  00187E                     __ECANPointBuffer:
 29658                           	opt stack 19
 29659                           
 29660                           ;incstack = 0
 29661                           ;incstack = 0
 29662                           ;__ECANPointBuffer@b stored from wreg
 29663  00187E  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 29664                           
 29665                           ; BSR set to: 1
 29666                           ;ECAN.c: 1210: BYTE* pt;
 29667                           ;ECAN.c: 1212: switch(b)
 29668  001882  D024               	goto	i1l10084
 29669  001884                     i1l10066:
 29670                           
 29671                           ; BSR set to: 1
 29672                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 29673  001884  0E0F               	movlw	15	;volatile
 29674  001886  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29675  001888  0E60               	movlw	96	;volatile
 29676  00188A  D01E               	goto	L64
 29677  00188C                     i1l10068:
 29678                           
 29679                           ; BSR set to: 1
 29680                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 29681  00188C  010F               	movlb	15	; () banked
 29682  00188E  0E0F               	movlw	15	;volatile
 29683  001890  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29684  001892  0E50               	movlw	80	;volatile
 29685  001894  D019               	goto	L64
 29686  001896                     i1l10070:
 29687                           
 29688                           ; BSR set to: 1
 29689                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 29690  001896  010E               	movlb	14	; () banked
 29691  001898  0E0E               	movlw	14	;volatile
 29692  00189A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29693  00189C  0E20               	movlw	32	;volatile
 29694  00189E  D014               	goto	L64
 29695  0018A0                     i1l10072:
 29696                           
 29697                           ; BSR set to: 1
 29698                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 29699  0018A0  010E               	movlb	14	; () banked
 29700  0018A2  0E0E               	movlw	14	;volatile
 29701  0018A4  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29702  0018A6  0E30               	movlw	48	;volatile
 29703  0018A8  D00F               	goto	L64
 29704  0018AA                     i1l10074:
 29705                           
 29706                           ; BSR set to: 1
 29707                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 29708  0018AA  010E               	movlb	14	; () banked
 29709  0018AC  0E0E               	movlw	14	;volatile
 29710  0018AE  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29711  0018B0  0E40               	movlw	64	;volatile
 29712  0018B2  D00A               	goto	L64
 29713  0018B4                     i1l10076:
 29714                           
 29715                           ; BSR set to: 1
 29716                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 29717  0018B4  010E               	movlb	14	; () banked
 29718  0018B6  0E0E               	movlw	14	;volatile
 29719  0018B8  D7EB               	goto	L65
 29720  0018BA                     i1l10078:
 29721                           
 29722                           ; BSR set to: 1
 29723                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 29724  0018BA  010E               	movlb	14	; () banked
 29725  0018BC  0E0E               	movlw	14	;volatile
 29726  0018BE  D7E3               	goto	L66
 29727  0018C0                     i1l10080:
 29728                           
 29729                           ; BSR set to: 1
 29730                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 29731  0018C0  010E               	movlb	14	; () banked
 29732  0018C2  0E0E               	movlw	14	;volatile
 29733  0018C4  6E06               	movwf	__ECANPointBuffer@pt+1,c
 29734  0018C6  0E70               	movlw	112	;volatile
 29735  0018C8                     L64:
 29736  0018C8  6E05               	movwf	__ECANPointBuffer@pt,c
 29737                           
 29738                           ;ECAN.c: 1237: break;
 29739  0018CA  D00F               	goto	i1l1593
 29740  0018CC                     i1l10084:
 29741                           
 29742                           ; BSR set to: 1
 29743  0018CC  5004               	movf	__ECANPointBuffer@b,w,c
 29744                           
 29745                           ; Switch size 1, requested type "space"
 29746                           ; Number of cases is 7, Range of values is 0 to 6
 29747                           ; switch strategies available:
 29748                           ; Name         Instructions Cycles
 29749                           ; simple_byte           22    12 (average)
 29750                           ;	Chosen strategy is simple_byte
 29751  0018CE  E0DA               	bz	i1l10066
 29752  0018D0  0A01               	xorlw	1	; case 1
 29753  0018D2  E0DC               	bz	i1l10068
 29754  0018D4  0A03               	xorlw	3	; case 2
 29755  0018D6  E0DF               	bz	i1l10070
 29756  0018D8  0A01               	xorlw	1	; case 3
 29757  0018DA  E0E2               	bz	i1l10072
 29758  0018DC  0A07               	xorlw	7	; case 4
 29759  0018DE  E0E5               	bz	i1l10074
 29760  0018E0  0A01               	xorlw	1	; case 5
 29761  0018E2  E0E8               	bz	i1l10076
 29762  0018E4  0A03               	xorlw	3	; case 6
 29763  0018E6  E0E9               	bz	i1l10078
 29764  0018E8  D7EB               	goto	i1l10080
 29765  0018EA                     i1l1593:
 29766                           
 29767                           ;ECAN.c: 1239: return (pt);
 29768  0018EA  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 29769  0018EE  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 29770  0018F2  0012               	return	
 29771  0018F4                     __end_of__ECANPointBuffer:
 29772                           	opt stack 0
 29773                           tblptru	equ	0xFF8
 29774                           tblptrh	equ	0xFF7
 29775                           tblptrl	equ	0xFF6
 29776                           tablat	equ	0xFF5
 29777                           prodh	equ	0xFF4
 29778                           prodl	equ	0xFF3
 29779                           intcon	equ	0xFF2
 29780                           indf0	equ	0xFEF
 29781                           postinc0	equ	0xFEE
 29782                           fsr0h	equ	0xFEA
 29783                           fsr0l	equ	0xFE9
 29784                           wreg	equ	0xFE8
 29785                           indf1	equ	0xFE7
 29786                           postinc1	equ	0xFE6
 29787                           postdec1	equ	0xFE5
 29788                           fsr1h	equ	0xFE2
 29789                           fsr1l	equ	0xFE1
 29790                           bsr	equ	0xFE0
 29791                           indf2	equ	0xFDF
 29792                           postinc2	equ	0xFDE
 29793                           postdec2	equ	0xFDD
 29794                           plusw2	equ	0xFDB
 29795                           fsr2h	equ	0xFDA
 29796                           fsr2l	equ	0xFD9
 29797                           status	equ	0xFD8
 29798                           
 29799 ;; *************** function _fifo_write *****************
 29800 ;; Defined at:
 29801 ;;		line 61 in file "fifo.c"
 29802 ;; Parameters:    Size  Location     Type
 29803 ;;  f               2    0[COMRAM] PTR struct .
 29804 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 29805 ;;  buf             2    2[COMRAM] PTR const void 
 29806 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 29807 ;;  nbytes          4    4[COMRAM] unsigned long 
 29808 ;; Auto vars:     Size  Location     Type
 29809 ;;  i               4   14[COMRAM] unsigned long 
 29810 ;;  p               2   12[COMRAM] PTR const unsigned char 
 29811 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 29812 ;; Return value:  Size  Location     Type
 29813 ;;                  2    0[COMRAM] unsigned short 
 29814 ;; Registers used:
 29815 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29816 ;; Tracked objects:
 29817 ;;		On entry : F/1
 29818 ;;		On exit  : F/1
 29819 ;;		Unchanged: F/0
 29820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29821 ;;      Params:         8       0       0       0       0       0       0
 29822 ;;      Locals:         6       0       0       0       0       0       0
 29823 ;;      Temps:          4       0       0       0       0       0       0
 29824 ;;      Totals:        18       0       0       0       0       0       0
 29825 ;;Total ram usage:       18 bytes
 29826 ;; Hardware stack levels used:    1
 29827 ;; This function calls:
 29828 ;;		Nothing
 29829 ;; This function is called by:
 29830 ;;		_Interrupt
 29831 ;; This function uses a non-reentrant model
 29832 ;;
 29833                           
 29834                           	psect	text89
 29835  002E8C                     __ptext89:
 29836                           	opt stack 0
 29837  002E8C                     _fifo_write:
 29838                           	opt stack 20
 29839                           
 29840                           ; BSR set to: 1
 29841                           ;fifo.c: 62: uint32_t i;
 29842                           ;fifo.c: 63: const uint8_t *p;
 29843                           ;fifo.c: 64: p = buf;
 29844                           
 29845                           ;incstack = 0
 29846                           ;incstack = 0
 29847  002E8C  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 29848  002E90  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 29849                           
 29850                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 29851  002E94  6A0F               	clrf	fifo_write@i,c
 29852  002E96  6A10               	clrf	fifo_write@i+1,c
 29853  002E98  6A11               	clrf	fifo_write@i+2,c
 29854  002E9A  6A12               	clrf	fifo_write@i+3,c
 29855  002E9C  D068               	goto	i1l6748
 29856  002E9E                     i1l6728:
 29857                           
 29858                           ; BSR set to: 1
 29859                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 29860                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 29861  002E9E  EE20 F004          	lfsr	2,4
 29862  002EA2  5001               	movf	fifo_write@f,w,c
 29863  002EA4  D872               	call	PL14	;call to abstracted procedure
 29864  002EA6  E102               	bnz	i1u655_25
 29865  002EA8  5009               	movf	??_fifo_write,w,c
 29866  002EAA  180B               	xorwf	??_fifo_write+2,w,c
 29867  002EAC                     i1u655_25:
 29868  002EAC  E011               	bz	i1l1620
 29869                           
 29870                           ; BSR set to: 1
 29871  002EAE  EE20 F006          	lfsr	2,6
 29872  002EB2  5001               	movf	fifo_write@f,w,c
 29873  002EB4  D86A               	call	PL14	;call to abstracted procedure
 29874  002EB6  E102               	bnz	i1u656_25
 29875  002EB8  5009               	movf	??_fifo_write,w,c
 29876  002EBA  180B               	xorwf	??_fifo_write+2,w,c
 29877  002EBC                     i1u656_25:
 29878  002EBC  E10E               	bnz	i1l6736
 29879                           
 29880                           ; BSR set to: 1
 29881  002EBE  EE20 F004          	lfsr	2,4
 29882  002EC2  5001               	movf	fifo_write@f,w,c
 29883  002EC4  26D9               	addwf	fsr2l,f,c
 29884  002EC6  5002               	movf	fifo_write@f+1,w,c
 29885  002EC8  22DA               	addwfc	fsr2h,f,c
 29886  002ECA  50DE               	movf	postinc2,w,c
 29887  002ECC  10DD               	iorwf	postdec2,w,c
 29888  002ECE  E105               	bnz	i1l6736
 29889  002ED0                     i1l1620:
 29890                           
 29891                           ; BSR set to: 1
 29892                           ;fifo.c: 71: return i;
 29893  002ED0  C00F  F001         	movff	fifo_write@i,?_fifo_write
 29894  002ED4  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 29895  002ED8  D057               	goto	i1l1621
 29896  002EDA                     i1l6736:
 29897                           
 29898                           ; BSR set to: 1
 29899                           ;fifo.c: 73: else {
 29900                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 29901  002EDA  C00D  FFD9         	movff	fifo_write@p,fsr2l
 29902  002EDE  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 29903  002EE2  EE10 F002          	lfsr	1,2
 29904  002EE6  5001               	movf	fifo_write@f,w,c
 29905  002EE8  26E1               	addwf	fsr1l,f,c
 29906  002EEA  5002               	movf	fifo_write@f+1,w,c
 29907  002EEC  22E2               	addwfc	fsr1h,f,c
 29908  002EEE  CFE6 F009          	movff	postinc1,??_fifo_write
 29909  002EF2  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 29910  002EF6  C001  FFE1         	movff	fifo_write@f,fsr1l
 29911  002EFA  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 29912  002EFE  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 29913  002F02  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 29914  002F06  5009               	movf	??_fifo_write,w,c
 29915  002F08  240B               	addwf	??_fifo_write+2,w,c
 29916  002F0A  6EE1               	movwf	fsr1l,c
 29917  002F0C  500A               	movf	??_fifo_write+1,w,c
 29918  002F0E  200C               	addwfc	??_fifo_write+3,w,c
 29919  002F10  6EE2               	movwf	fsr1h,c
 29920  002F12  CFDF FFE7          	movff	indf2,indf1
 29921                           
 29922                           ; BSR set to: 1
 29923  002F16  4A0D               	infsnz	fifo_write@p,f,c
 29924  002F18  2A0E               	incf	fifo_write@p+1,f,c
 29925                           
 29926                           ; BSR set to: 1
 29927                           ;fifo.c: 75: f->head++;
 29928  002F1A  EE20 F002          	lfsr	2,2
 29929  002F1E  5001               	movf	fifo_write@f,w,c
 29930  002F20  26D9               	addwf	fsr2l,f,c
 29931  002F22  5002               	movf	fifo_write@f+1,w,c
 29932  002F24  22DA               	addwfc	fsr2h,f,c
 29933  002F26  2ADE               	incf	postinc2,f,c
 29934  002F28  0E00               	movlw	0
 29935  002F2A  22DD               	addwfc	postdec2,f,c
 29936                           
 29937                           ; BSR set to: 1
 29938                           ;fifo.c: 77: if (f->head >= f->size) {
 29939  002F2C  EE20 F006          	lfsr	2,6
 29940  002F30  5001               	movf	fifo_write@f,w,c
 29941  002F32  26D9               	addwf	fsr2l,f,c
 29942  002F34  5002               	movf	fifo_write@f+1,w,c
 29943  002F36  22DA               	addwfc	fsr2h,f,c
 29944  002F38  EE10 F002          	lfsr	1,2
 29945  002F3C  5001               	movf	fifo_write@f,w,c
 29946  002F3E  26E1               	addwf	fsr1l,f,c
 29947  002F40  5002               	movf	fifo_write@f+1,w,c
 29948  002F42  22E2               	addwfc	fsr1h,f,c
 29949  002F44  52E6               	movf	postinc1,f,c
 29950  002F46  52DE               	movf	postinc2,f,c
 29951  002F48  50DD               	movf	postdec2,w,c
 29952  002F4A  5CE5               	subwf	postdec1,w,c
 29953  002F4C  E102               	bnz	i1u658_25
 29954  002F4E  50DF               	movf	indf2,w,c
 29955  002F50  5CE7               	subwf	indf1,w,c
 29956  002F52                     i1u658_25:
 29957  002F52  E308               	bnc	i1l6746
 29958                           
 29959                           ; BSR set to: 1
 29960                           ;fifo.c: 78: f->head = 0;
 29961  002F54  EE20 F002          	lfsr	2,2
 29962  002F58  5001               	movf	fifo_write@f,w,c
 29963  002F5A  26D9               	addwf	fsr2l,f,c
 29964  002F5C  5002               	movf	fifo_write@f+1,w,c
 29965  002F5E  22DA               	addwfc	fsr2h,f,c
 29966  002F60  6ADE               	clrf	postinc2,c
 29967  002F62  6ADD               	clrf	postdec2,c
 29968  002F64                     i1l6746:
 29969                           
 29970                           ; BSR set to: 1
 29971  002F64  2A0F               	incf	fifo_write@i,f,c
 29972  002F66  0E00               	movlw	0
 29973  002F68  2210               	addwfc	fifo_write@i+1,f,c
 29974  002F6A  2211               	addwfc	fifo_write@i+2,f,c
 29975  002F6C  2212               	addwfc	fifo_write@i+3,f,c
 29976  002F6E                     i1l6748:
 29977                           
 29978                           ; BSR set to: 1
 29979  002F6E  5005               	movf	fifo_write@nbytes,w,c
 29980  002F70  5C0F               	subwf	fifo_write@i,w,c
 29981  002F72  5006               	movf	fifo_write@nbytes+1,w,c
 29982  002F74  5810               	subwfb	fifo_write@i+1,w,c
 29983  002F76  5007               	movf	fifo_write@nbytes+2,w,c
 29984  002F78  5811               	subwfb	fifo_write@i+2,w,c
 29985  002F7A  5008               	movf	fifo_write@nbytes+3,w,c
 29986  002F7C  5812               	subwfb	fifo_write@i+3,w,c
 29987  002F7E  E38F               	bnc	i1l6728
 29988                           
 29989                           ; BSR set to: 1
 29990                           ;fifo.c: 79: }
 29991                           ;fifo.c: 80: }
 29992                           ;fifo.c: 82: }
 29993                           ;fifo.c: 84: return nbytes;
 29994  002F80  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 29995  002F84  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 29996  002F88                     i1l1621:
 29997                           
 29998                           ; BSR set to: 1
 29999  002F88  0012               	return	
 30000  002F8A                     __end_of_fifo_write:
 30001                           	opt stack 0
 30002  002F8A                     PL14:
 30003                           	opt stack 20
 30004  002F8A  26D9               	addwf	fsr2l,f,c
 30005  002F8C  5002               	movf	fifo_write@f+1,w,c
 30006  002F8E  22DA               	addwfc	fsr2h,f,c
 30007  002F90  CFDE F009          	movff	postinc2,??_fifo_write
 30008  002F94  CFDD F00A          	movff	postdec2,??_fifo_write+1
 30009  002F98  EE20 F002          	lfsr	2,2
 30010  002F9C  5001               	movf	fifo_write@f,w,c
 30011  002F9E  26D9               	addwf	fsr2l,f,c
 30012  002FA0  5002               	movf	fifo_write@f+1,w,c
 30013  002FA2  22DA               	addwfc	fsr2h,f,c
 30014  002FA4  CFDE F00B          	movff	postinc2,??_fifo_write+2
 30015  002FA8  CFDD F00C          	movff	postdec2,??_fifo_write+3
 30016  002FAC  2A0B               	incf	??_fifo_write+2,f,c
 30017  002FAE  0E00               	movlw	0
 30018  002FB0  220C               	addwfc	??_fifo_write+3,f,c
 30019  002FB2  500A               	movf	??_fifo_write+1,w,c
 30020  002FB4  180C               	xorwf	??_fifo_write+3,w,c
 30021  002FB6  0012               	return	
 30022  002FB8                     __end_ofPL14:
 30023                           	opt stack 0
 30024                           tblptru	equ	0xFF8
 30025                           tblptrh	equ	0xFF7
 30026                           tblptrl	equ	0xFF6
 30027                           tablat	equ	0xFF5
 30028                           prodh	equ	0xFF4
 30029                           prodl	equ	0xFF3
 30030                           intcon	equ	0xFF2
 30031                           indf0	equ	0xFEF
 30032                           postinc0	equ	0xFEE
 30033                           fsr0h	equ	0xFEA
 30034                           fsr0l	equ	0xFE9
 30035                           wreg	equ	0xFE8
 30036                           indf1	equ	0xFE7
 30037                           postinc1	equ	0xFE6
 30038                           postdec1	equ	0xFE5
 30039                           fsr1h	equ	0xFE2
 30040                           fsr1l	equ	0xFE1
 30041                           bsr	equ	0xFE0
 30042                           indf2	equ	0xFDF
 30043                           postinc2	equ	0xFDE
 30044                           postdec2	equ	0xFDD
 30045                           plusw2	equ	0xFDB
 30046                           fsr2h	equ	0xFDA
 30047                           fsr2l	equ	0xFD9
 30048                           status	equ	0xFD8
 30049                           
 30050 ;; *************** function _ReadUSART *****************
 30051 ;; Defined at:
 30052 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 30053 ;; Parameters:    Size  Location     Type
 30054 ;;		None
 30055 ;; Auto vars:     Size  Location     Type
 30056 ;;  data            1    0[COMRAM] unsigned char 
 30057 ;; Return value:  Size  Location     Type
 30058 ;;                  1    wreg      unsigned char 
 30059 ;; Registers used:
 30060 ;;		wreg, status,2, status,0
 30061 ;; Tracked objects:
 30062 ;;		On entry : 0/0
 30063 ;;		On exit  : 0/0
 30064 ;;		Unchanged: 0/0
 30065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30066 ;;      Params:         0       0       0       0       0       0       0
 30067 ;;      Locals:         1       0       0       0       0       0       0
 30068 ;;      Temps:          0       0       0       0       0       0       0
 30069 ;;      Totals:         1       0       0       0       0       0       0
 30070 ;;Total ram usage:        1 bytes
 30071 ;; Hardware stack levels used:    1
 30072 ;; This function calls:
 30073 ;;		Nothing
 30074 ;; This function is called by:
 30075 ;;		_Interrupt
 30076 ;; This function uses a non-reentrant model
 30077 ;;
 30078                           
 30079                           	psect	text90
 30080  00102E                     __ptext90:
 30081                           	opt stack 0
 30082  00102E                     _ReadUSART:
 30083                           	opt stack 20
 30084                           
 30085                           ; BSR set to: 1
 30086                           ;incstack = 0
 30087                           ;incstack = 0
 30088  00102E  0EF2               	movlw	242
 30089  001030  1626               	andwf	_USART_Status,f,c
 30090  001032  ACAB               	btfss	4011,6,c	;volatile
 30091  001034  D003               	goto	i1l1939
 30092  001036  9026               	bcf	_USART_Status,0,c
 30093  001038  B0AB               	btfsc	4011,0,c	;volatile
 30094  00103A  8026               	bsf	_USART_Status,0,c
 30095  00103C                     i1l1939:
 30096  00103C  B4AB               	btfsc	4011,2,c	;volatile
 30097  00103E  8426               	bsf	_USART_Status,2,c
 30098  001040  B2AB               	btfsc	4011,1,c	;volatile
 30099  001042  8626               	bsf	_USART_Status,3,c
 30100  001044  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 30101  001048  5001               	movf	ReadUSART@data,w,c
 30102  00104A  0012               	return	
 30103  00104C                     __end_of_ReadUSART:
 30104                           	opt stack 0
 30105                           tblptru	equ	0xFF8
 30106                           tblptrh	equ	0xFF7
 30107                           tblptrl	equ	0xFF6
 30108                           tablat	equ	0xFF5
 30109                           prodh	equ	0xFF4
 30110                           prodl	equ	0xFF3
 30111                           intcon	equ	0xFF2
 30112                           indf0	equ	0xFEF
 30113                           postinc0	equ	0xFEE
 30114                           fsr0h	equ	0xFEA
 30115                           fsr0l	equ	0xFE9
 30116                           wreg	equ	0xFE8
 30117                           indf1	equ	0xFE7
 30118                           postinc1	equ	0xFE6
 30119                           postdec1	equ	0xFE5
 30120                           fsr1h	equ	0xFE2
 30121                           fsr1l	equ	0xFE1
 30122                           bsr	equ	0xFE0
 30123                           indf2	equ	0xFDF
 30124                           postinc2	equ	0xFDE
 30125                           postdec2	equ	0xFDD
 30126                           plusw2	equ	0xFDB
 30127                           fsr2h	equ	0xFDA
 30128                           fsr2l	equ	0xFD9
 30129                           status	equ	0xFD8
 30130                           tblptru	equ	0xFF8
 30131                           tblptrh	equ	0xFF7
 30132                           tblptrl	equ	0xFF6
 30133                           tablat	equ	0xFF5
 30134                           prodh	equ	0xFF4
 30135                           prodl	equ	0xFF3
 30136                           intcon	equ	0xFF2
 30137                           indf0	equ	0xFEF
 30138                           postinc0	equ	0xFEE
 30139                           fsr0h	equ	0xFEA
 30140                           fsr0l	equ	0xFE9
 30141                           wreg	equ	0xFE8
 30142                           indf1	equ	0xFE7
 30143                           postinc1	equ	0xFE6
 30144                           postdec1	equ	0xFE5
 30145                           fsr1h	equ	0xFE2
 30146                           fsr1l	equ	0xFE1
 30147                           bsr	equ	0xFE0
 30148                           indf2	equ	0xFDF
 30149                           postinc2	equ	0xFDE
 30150                           postdec2	equ	0xFDD
 30151                           plusw2	equ	0xFDB
 30152                           fsr2h	equ	0xFDA
 30153                           fsr2l	equ	0xFD9
 30154                           status	equ	0xFD8
 30155                           
 30156                           	psect	rparam
 30157  0000                     tblptru	equ	0xFF8
 30158                           tblptrh	equ	0xFF7
 30159                           tblptrl	equ	0xFF6
 30160                           tablat	equ	0xFF5
 30161                           prodh	equ	0xFF4
 30162                           prodl	equ	0xFF3
 30163                           intcon	equ	0xFF2
 30164                           indf0	equ	0xFEF
 30165                           postinc0	equ	0xFEE
 30166                           fsr0h	equ	0xFEA
 30167                           fsr0l	equ	0xFE9
 30168                           wreg	equ	0xFE8
 30169                           indf1	equ	0xFE7
 30170                           postinc1	equ	0xFE6
 30171                           postdec1	equ	0xFE5
 30172                           fsr1h	equ	0xFE2
 30173                           fsr1l	equ	0xFE1
 30174                           bsr	equ	0xFE0
 30175                           indf2	equ	0xFDF
 30176                           postinc2	equ	0xFDE
 30177                           postdec2	equ	0xFDD
 30178                           plusw2	equ	0xFDB
 30179                           fsr2h	equ	0xFDA
 30180                           fsr2l	equ	0xFD9
 30181                           status	equ	0xFD8
 30182                           tblptru	equ	0xFF8
 30183                           tblptrh	equ	0xFF7
 30184                           tblptrl	equ	0xFF6
 30185                           tablat	equ	0xFF5
 30186                           prodh	equ	0xFF4
 30187                           prodl	equ	0xFF3
 30188                           intcon	equ	0xFF2
 30189                           indf0	equ	0xFEF
 30190                           postinc0	equ	0xFEE
 30191                           fsr0h	equ	0xFEA
 30192                           fsr0l	equ	0xFE9
 30193                           wreg	equ	0xFE8
 30194                           indf1	equ	0xFE7
 30195                           postinc1	equ	0xFE6
 30196                           postdec1	equ	0xFE5
 30197                           fsr1h	equ	0xFE2
 30198                           fsr1l	equ	0xFE1
 30199                           bsr	equ	0xFE0
 30200                           indf2	equ	0xFDF
 30201                           postinc2	equ	0xFDE
 30202                           postdec2	equ	0xFDD
 30203                           plusw2	equ	0xFDB
 30204                           fsr2h	equ	0xFDA
 30205                           fsr2l	equ	0xFD9
 30206                           status	equ	0xFD8


Data Sizes:
    Strings     4320
    Constant    120
    Data        0
    BSS         1149
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      63
    BANK0           160    135     135
    BANK1           256      0     244
    BANK2           256     70     198
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), 
		 -> STR_149(CODE[6]), STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), 
		 -> STR_143(CODE[9]), STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), 
		 -> STR_139(CODE[6]), STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), 
		 -> STR_132(CODE[4]), STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), STR_149(CODE[6]), 
		 -> STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), STR_143(CODE[9]), 
		 -> STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), STR_139(CODE[6]), 
		 -> STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), STR_132(CODE[4]), 
		 -> STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), 
		 -> STR_149(CODE[6]), STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), 
		 -> STR_143(CODE[9]), STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), 
		 -> STR_139(CODE[6]), STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), 
		 -> STR_132(CODE[4]), STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), 
		 -> STR_149(CODE[6]), STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), 
		 -> STR_143(CODE[9]), STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), 
		 -> STR_139(CODE[6]), STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), 
		 -> STR_132(CODE[4]), STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), 
		 -> STR_97(CODE[5]), STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_160(CODE[2]), STR_159(CODE[9]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_152(CODE[6]), STR_151(CODE[8]), STR_149(CODE[6]), 
		 -> STR_147(CODE[5]), STR_145(CODE[8]), STR_144(CODE[6]), STR_143(CODE[9]), 
		 -> STR_142(CODE[7]), STR_141(CODE[7]), STR_140(CODE[5]), STR_139(CODE[6]), 
		 -> STR_138(CODE[9]), STR_136(CODE[11]), STR_134(CODE[8]), STR_132(CODE[4]), 
		 -> STR_131(CODE[5]), STR_118(CODE[5]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_285(CODE[2]), STR_284(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_279(CODE[2]), 
		 -> STR_278(CODE[3]), STR_277(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_295(CODE[3]), STR_294(CODE[23]), STR_293(CODE[10]), STR_292(CODE[10]), 
		 -> STR_291(CODE[12]), STR_290(CODE[8]), STR_289(CODE[7]), STR_288(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_287(CODE[10]), STR_286(CODE[3]), STR_283(CODE[20]), 
		 -> STR_282(CODE[3]), STR_281(CODE[14]), STR_280(CODE[3]), STR_276(CODE[8]), 
		 -> STR_275(CODE[17]), STR_274(CODE[3]), STR_273(CODE[67]), STR_272(CODE[3]), 
		 -> STR_271(CODE[29]), STR_270(CODE[67]), STR_269(CODE[52]), STR_268(CODE[39]), 
		 -> STR_267(CODE[62]), STR_266(CODE[55]), STR_265(CODE[49]), STR_264(CODE[67]), 
		 -> STR_263(CODE[47]), STR_262(CODE[47]), STR_261(CODE[34]), STR_260(CODE[71]), 
		 -> STR_259(CODE[20]), STR_258(CODE[78]), STR_257(CODE[24]), STR_256(CODE[77]), 
		 -> STR_255(CODE[74]), STR_254(CODE[76]), STR_253(CODE[47]), STR_252(CODE[40]), 
		 -> STR_251(CODE[39]), STR_250(CODE[33]), STR_249(CODE[23]), STR_248(CODE[56]), 
		 -> STR_247(CODE[24]), STR_246(CODE[44]), STR_245(CODE[50]), STR_244(CODE[31]), 
		 -> STR_243(CODE[50]), STR_242(CODE[51]), STR_241(CODE[46]), STR_240(CODE[44]), 
		 -> STR_239(CODE[27]), STR_238(CODE[39]), STR_237(CODE[39]), STR_236(CODE[52]), 
		 -> STR_235(CODE[54]), STR_234(CODE[55]), STR_233(CODE[3]), STR_230(CODE[24]), 
		 -> STR_229(CODE[57]), STR_228(CODE[53]), STR_227(CODE[58]), STR_226(CODE[3]), 
		 -> STR_223(CODE[25]), STR_222(CODE[3]), STR_219(CODE[24]), STR_218(CODE[3]), 
		 -> STR_215(CODE[24]), STR_214(CODE[3]), STR_211(CODE[24]), STR_210(CODE[3]), 
		 -> STR_207(CODE[23]), STR_206(CODE[3]), STR_203(CODE[21]), STR_202(CODE[3]), 
		 -> STR_199(CODE[22]), STR_198(CODE[3]), STR_195(CODE[17]), STR_194(CODE[3]), 
		 -> STR_191(CODE[18]), STR_190(CODE[4]), STR_189(CODE[11]), STR_188(CODE[2]), 
		 -> STR_185(CODE[7]), STR_182(CODE[7]), STR_179(CODE[9]), STR_176(CODE[7]), 
		 -> STR_173(CODE[8]), STR_170(CODE[7]), STR_169(CODE[2]), STR_168(CODE[2]), 
		 -> STR_167(CODE[6]), STR_166(CODE[8]), STR_165(CODE[8]), STR_164(CODE[20]), 
		 -> STR_163(CODE[27]), STR_162(CODE[6]), STR_161(CODE[33]), STR_158(CODE[41]), 
		 -> STR_157(CODE[23]), STR_155(CODE[22]), STR_150(CODE[26]), STR_148(CODE[32]), 
		 -> STR_146(CODE[28]), STR_137(CODE[6]), STR_135(CODE[40]), STR_133(CODE[44]), 
		 -> STR_130(CODE[6]), STR_129(CODE[39]), STR_127(CODE[36]), STR_125(CODE[37]), 
		 -> STR_123(CODE[40]), STR_121(CODE[37]), STR_120(CODE[50]), STR_117(CODE[6]), 
		 -> STR_116(CODE[41]), STR_114(CODE[38]), STR_112(CODE[39]), STR_110(CODE[42]), 
		 -> STR_108(CODE[39]), STR_107(CODE[66]), STR_104(CODE[6]), STR_103(CODE[27]), 
		 -> STR_102(CODE[3]), STR_99(CODE[20]), STR_98(CODE[52]), STR_94(CODE[8]), 
		 -> STR_93(CODE[36]), STR_90(CODE[8]), STR_89(CODE[38]), STR_88(CODE[24]), 
		 -> STR_86(CODE[33]), STR_84(CODE[24]), STR_82(CODE[52]), STR_80(CODE[54]), 
		 -> STR_79(CODE[6]), STR_78(CODE[3]), STR_73(CODE[25]), STR_70(CODE[17]), 
		 -> STR_69(CODE[3]), STR_68(CODE[4]), STR_67(CODE[3]), STR_64(CODE[4]), 
		 -> STR_59(CODE[15]), wrkbuf(BANK1[80]), STR_56(CODE[14]), STR_54(CODE[33]), 
		 -> STR_52(CODE[24]), STR_50(CODE[52]), STR_48(CODE[6]), STR_46(CODE[6]), 
		 -> STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), STR_39(CODE[6]), 
		 -> STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), STR_27(CODE[18]), 
		 -> STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), STR_23(CODE[19]), 
		 -> STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), STR_17(CODE[6]), 
		 -> STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), STR_9(CODE[6]), 
		 -> STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), STR_3(CODE[35]), 
		 -> STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2142	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_297(CODE[17]), STR_296(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_232(CODE[3]), STR_231(CODE[7]), STR_225(CODE[3]), STR_224(CODE[7]), 
		 -> STR_221(CODE[4]), STR_220(CODE[8]), STR_217(CODE[4]), STR_216(CODE[8]), 
		 -> STR_213(CODE[4]), STR_212(CODE[8]), STR_209(CODE[4]), STR_208(CODE[8]), 
		 -> STR_205(CODE[4]), STR_204(CODE[7]), STR_201(CODE[4]), STR_200(CODE[7]), 
		 -> STR_197(CODE[4]), STR_196(CODE[7]), STR_193(CODE[4]), STR_192(CODE[7]), 
		 -> STR_187(CODE[3]), STR_186(CODE[7]), STR_184(CODE[3]), STR_183(CODE[7]), 
		 -> STR_181(CODE[3]), STR_180(CODE[7]), STR_178(CODE[3]), STR_177(CODE[7]), 
		 -> STR_175(CODE[3]), STR_174(CODE[7]), STR_172(CODE[3]), STR_171(CODE[7]), 
		 -> STR_101(CODE[3]), STR_100(CODE[7]), STR_96(CODE[4]), STR_95(CODE[8]), 
		 -> STR_92(CODE[4]), STR_91(CODE[8]), STR_77(CODE[3]), STR_76(CODE[7]), 
		 -> STR_75(CODE[3]), STR_74(CODE[7]), STR_72(CODE[6]), STR_71(CODE[10]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_63(CODE[3]), STR_62(CODE[7]), 
		 -> STR_61(CODE[3]), STR_60(CODE[7]), STR_58(CODE[6]), STR_57(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2122$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(COMRAM[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(COMRAM[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(COMRAM[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(COMRAM[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(COMRAM[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1538	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_232(CODE[3]), STR_231(CODE[7]), 

    printErrors$1529	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_225(CODE[3]), STR_224(CODE[7]), 

    printErrors$1523	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_221(CODE[4]), STR_220(CODE[8]), 

    printErrors$1517	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_217(CODE[4]), STR_216(CODE[8]), 

    printErrors$1511	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_213(CODE[4]), STR_212(CODE[8]), 

    printErrors$1505	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_209(CODE[4]), STR_208(CODE[8]), 

    printStatistics$1498	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_205(CODE[4]), STR_204(CODE[7]), 

    printStatistics$1492	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[4]), STR_200(CODE[7]), 

    printStatistics$1486	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_197(CODE[4]), STR_196(CODE[7]), 

    printStatistics$1480	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_193(CODE[4]), STR_192(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1246(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1270(BANK2[1]), doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1412	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_187(CODE[3]), STR_186(CODE[7]), 

    receivePrintEventVerbose$1407	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_184(CODE[3]), STR_183(CODE[7]), 

    receivePrintEventVerbose$1402	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_181(CODE[3]), STR_180(CODE[7]), 

    receivePrintEventVerbose$1397	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_178(CODE[3]), STR_177(CODE[7]), 

    receivePrintEventVerbose$1392	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_175(CODE[3]), STR_174(CODE[7]), 

    receivePrintEventVerbose$1387	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_172(CODE[3]), STR_171(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1306	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1286	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1276	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_101(CODE[3]), STR_100(CODE[7]), 

    doModeVerbose$1267	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_96(CODE[4]), STR_95(CODE[8]), 

    doModeVerbose$1261	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_92(CODE[4]), STR_91(CODE[8]), 

    doModeVerbose@preg_1252	PTR unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1248	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1238	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_77(CODE[3]), STR_76(CODE[7]), 

    doModeVerbose$1234	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_75(CODE[3]), STR_74(CODE[7]), 

    doModeVerbose$1229	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_72(CODE[6]), STR_71(CODE[10]), 

    doModeVerbose$1221	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1216	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_63(CODE[3]), STR_62(CODE[7]), 

    doModeVerbose$1212	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_61(CODE[3]), STR_60(CODE[7]), 

    doModeVerbose$1207	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), STR_122(CODE[2]), 
		 -> STR_119(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), STR_111(CODE[2]), 
		 -> STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), STR_85(CODE[2]), 
		 -> STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), STR_51(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1195	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _vscp_restoreDefaults->_init_app_ram
    _init_app_eeprom->_Write_b_eep
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_setFilter
    __CANIDToRegs->_Read_b_eep
    _setFilter->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  142938
                                            128 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
               _ECANSetOperationMode
                   _checkCANBusState
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9556
                                             56 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
               _ECANSetOperationMode
                           _Busy_eep
                        _Write_b_eep
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1050
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4556
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   21256
                                             89 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2536
                                             56 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3506
                                             19 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3950
                                             19 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       90    90      0  100739
                                            108 BANK0     20    20      0
                                              0 BANK2     70    70      0
               _vscp_restoreDefaults
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                         _WriteUSART
                            _stristr
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4030
                                             88 BANK0     12     5      7
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3946
                                             88 BANK0     12     5      7
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   23384
                                            103 BANK0      5     5      0
                          _putsUSART
                         _WriteUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    4470
                                             97 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6606
                                             97 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6336
                                             97 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3778
                                             88 BANK0      9     5      4
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2312
                                             56 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2012
                                             49 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             12 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) _checkCANBusState                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7545
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7437
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1010
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1236
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     180
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8897
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        11     5      6    1214
                                             19 BANK0     11     5      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     740
                                             14 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     446
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7095
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _vscp_restoreDefaults                                 0     0      0    3637
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (3) _init_app_eeprom                                      1     1      0     330
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    4042
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     420
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _init_app_ram                                         9     9      0    3307
                                             17 BANK0      9     9      0
                         _Read_b_eep
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              2 BANK0     10     3      7
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              2 BANK0     15    11      4
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     147
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     252
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2084
                                             22 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _ECANSetOperationMode
   _checkCANBusState
   _doModeVerbose
     _vscp_restoreDefaults
       _init_app_ram
         _Read_b_eep
         _ECANSetOperationMode
         _setFilter
           _Read_b_eep (ARG)
         __CANIDToRegs
           _Read_b_eep (ARG)
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _ECANSetOperationMode
     _setFilter
       _Read_b_eep (ARG)
     __CANIDToRegs
       _Read_b_eep (ARG)
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _WriteUSART
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _checkCANBusState
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _checkCANBusState
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _ECANSetOperationMode
     _Busy_eep
     _Write_b_eep
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
           _Read_b_eep (ARG)
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     46      C6       8       77.3%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F4       6       95.3%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     87      87       4       84.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      3F       1       66.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     380      15        0.0%
DATA                 0      0     57C      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Oct 07 16:22:02 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 6A1A  
                          printBinary@i 0064                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 211E  
            doModeVerbose@filter_nodeid 028E                                      PL2 6A1A  
                                    PL4 6A36                                      PL6 6A50  
                                    PL8 6A60                                      _id 01ED  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 0FA6  
                                   PL10 6A6E                                     PL20 1C90  
                                   PL12 52F0                                     PL30 6AC8  
                                   PL22 531E                                     PL14 2F8A  
                                   PL40 5344                                     PL32 2D1A  
                                   PL24 30B4                                     PL16 530E  
                                   PL50 1E6A                                     PL42 6AEE  
                                   PL34 3F30                                     PL26 350A  
                                   PL18 2C4C                                     PL60 6B3A  
                                   PL52 2D3E                                     PL44 6B08  
                                   PL36 6ADC                                     PL28 6AB8  
                                   PL70 2766                                     PL62 1B5E  
                                   PL54 3F4E                                     PL46 1F0A  
                                   PL38 25A6                                     PL80 1FAE  
                                   PL72 2A40                                     PL64 5374  
                                   PL56 535E                                     PL48 2D2E  
                                   PL90 36AC                                     PL82 5398  
                                   PL74 2D50                                     PL66 538A  
                                   PL58 6B22                                     PL92 6B76  
                                   PL84 6B64                                     PL76 30DE  
                                   PL68 30CA                                     PL94 2284  
                                   PL86 351A                                     PL78 6B50  
                                   PL96 6B86                                     PL88 4C72  
                                   PL98 2686                 sendEscapedUartData@pcrc 006C  
                                   l505 53FC                                     l450 3CA8  
                                   l603 5CB4                                     l451 3CEA  
                                   l509 540E                                     l461 3D56  
                                   l462 3D64                                     l455 3D06  
                                   l616 5D6C                                     l608 5CE2  
                                   l458 3D1C                                     l491 1072  
                                   l459 3D26                                     l572 6A18  
                                   l900 1ECC                                     l804 496E  
                                   l493 107E                                     l583 5D0A  
                                   l903 1EDC                                     l743 3BD2  
                                   l592 5C20                                     l921 1DF0  
                                   l930 1E3C                                     l906 1EF6  
                                   l738 3A60                                     l579 5B44  
                                   l915 1DDC                                     l924 1E0C  
                                   l756 3AEA                                     l933 1E56  
                                   l909 1F00                                     l861 21DC  
                                   l829 4B6C                                     l846 1690  
                                   l854 16BE                                     l918 1DE6  
                                   l942 25C8                                     l870 220C  
                                   l927 1E2C                                     l951 25F8  
                                   l936 1E60                                     l960 2644  
                                   l864 21E6                                     l849 169A  
                                   l945 25D2                                     l873 222C  
                                   l858 16E2                                     l954 2618  
                                   l882 227A                                     l794 4C70  
                                   l891 1E86                                     l963 2656  
                                   l867 21F0                                     l948 25DC  
                                   l876 223C                                     l957 2628  
                                   l894 1E90                                     l966 2672  
                                   l879 2270                                     l888 1E7C  
                                   l897 1EAC                                     l969 267C  
                                   l998 4538                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 007A                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _dlc 003A                                     _pos 0034  
                  __size_of_Write_b_eep 0034          __size_of_writeRegisterExtended 0100  
                                   wreg 000FE8           __end_of_writeRegisterExtended 2B54  
                                  PL100 6B96                                    PL110 2D64  
                                  PL102 53AA                                    PL112 53B4  
                                  PL104 1154                                    PL106 4342  
                                  PL108 132E                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1010 312E  
                                  l1100 2152                                    l1005 45CE  
                                  l1013 3138                                    l1006 45E2  
                                  l1031 3234                                    l1103 21C0  
                                  l1016 3142                                    l1041 33EA  
                                  l1025 3220                                    l1121 35D0  
                                  l1113 3566                                    l1202 150A  
                                  l1106 21CA                                    l1035 33D6  
                                  l1019 315E                                    l1060 34FE  
                                  l1044 3406                                    l1028 322A  
                                  l1140 36AA                                    l1038 33E0  
                                  l1134 3682                                    l1118 3598  
                                  l1303 1B04                                    l1063 3508  
                                  l1127 3620                                    l1152 2392  
                                  l1144 2862                                    l1313 1AD4  
                                  l1161 28AE                                    l1057 34F4  
                                  l1137 36A0                                    l1330 4036  
                                  l1306 1B22                                    l1331 4048  
                                  l1155 241E                                    l1091 2122  
                                  l1340 40EA                                    l1332 405A  
                                  l1324 3FDC                                    l1164 2958  
                                  l1333 406C                                    l1341 4142  
                                  l1334 407E                                    l1326 3FEE  
                                  l2134 2C42                                    l1182 2B52  
                                  l1094 212C                                    l1335 4090  
                                  l1327 4000                                    l2135 2C4A  
                                  l1336 40A2                                    l1328 4012  
                                  l1264 2E8A                                    l1337 40B4  
                                  l1329 4024                                    l1257 48AA  
                                  l1249 4816                                    l1521 3306  
                                  l1353 1240                                    l1265 2D96  
                                  l1097 2136                                    l1338 40C6  
                                  l2410 1DB6                                    l1339 40D8  
                                  l1523 3324                                    l1179 2AA6  
                                  l1612 25A4                                    l1358 2066  
                                  l1198 14FE                                    l1712 4DD8  
                                  l2441 1958                                    l1713 4D8A  
                                  l1609 2584                                    l1529 33A2  
                                  l2451 1734                                    l1803 517E  
                                  l2524 14CE                                    l1732 4E1C  
                                  l1733 4E20                                    l1637 181C  
                                  l1645 187C                                    l2509 2742  
                                  l2534 1276                                    l2630 1BFC  
                                  l1583 2D18                                    l2615 180C  
                                  l1639 1824                                    l1664 1CD0  
                                  l1913 165C                                    l1729 4DE8  
                                  l1665 1D36                                    l1914 165E  
                                  l1915 1668                                    l1835 0FA6  
                                  l2627 1C04                                    l1659 12FA  
                                  l1916 166A                                    l1860 1186  
                                  l1748 4F0A                                    l1909 1648  
                                  l2629 1BF8                                    l1918 1682  
                                  l1926 1578                                    l1782 50AE  
                                  l2654 143C                                    l2663 12BC  
                                  l2575 1746                                    l1784 50D4  
                                  l1776 506C                                    l1696 4C9C  
                                  l1785 50D8                                    l2577 17A6  
                                  l2673 13F8                                    l1787 50F4  
                                  l1876 1064                                    l2596 19E0  
                                  l1877 1066                                    l2599 19DC  
                                  STR_1 75B7                                    STR_2 6ED6  
                                  STR_3 7649                                    STR_4 6FEF  
                                  STR_5 7770                                    STR_6 7CC0  
                                  STR_7 7732                                    STR_8 7CA7  
                                  STR_9 7C64                                    _PEIE 007F96  
                        sendCANFrame@id 0091                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0061                                    _bDLE 002B  
                          __CFG_PWRT$ON 000000                                    ___IT 000101  
            __end_of_sendVSCPDriverNack 1E6A                                    _bHex 002C  
          doModeVerbose@filter_priority 028C                                    _crc8 11D0  
                                  _data 01D5                                    _caps 01F1  
                                  _atoi 2B54                                    _main 3BD4  
                                  _init 1446                                    _mode 012C  
                                  _itoa 1198                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 1D38                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 034C                            _sprintf$2142 0086  
                          _sprintf$2135 0082                            _sprintf$2136 0084  
          receiveSendMultiEventCANAL@id 007D               ECANReceiveMessage@dataLen 000E  
    __end_of_receiveSendMultiEventCANAL 350A              _receiveSendMultiEventCANAL 33A4  
                    doModeVerbose@count 02B2                   getVSCPFrame@pPriority 0075  
                    doModeVerbose@value 02BA                    __end_of_getVSCPFrame 0FA2  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 00A8                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   _B0CON 000E20  
                                 _B1CON 000E30                                   l10830 258E  
                                 l10832 2592                                   _B2CON 000E40  
                                 l12186 40FC                                   l10818 24FE  
                                 l15010 6204                                   l15002 61F4  
                                 l12198 2CA6                                   l15110 6414  
                                 l15030 6270                                   l14310 3D30  
                                 l14302 3D10                                   l15104 63EA  
                                 l15024 6242                                   l15016 6230  
                                 _B3CON 000E50                                   l15210 66B2  
                                 l14314 3D38                                   l16004 1BBA  
                                 l15300 697A                                   l15220 66FC  
                                 l15132 6464                                   l15124 6452  
                                 l15052 62BE                                   l15044 62AC  
                                 l14332 3D86                                   l14324 3D70  
                                 l16014 2B56                                   l15206 668E  
                                 l15310 69DE                                   l15118 6426  
                                 l15038 6282                                   l14510 542E  
                                 l14502 5412                                   l14326 3D74  
                                 l16032 2C0A                                   l16024 2BB0  
                                 l16016 2B5C                                   l16200 4832  
                                 l16120 45FE                                   l16040 10B2  
                                 l15304 69A8                                   l15232 6742  
                                 l15160 64DC                                   l15152 64CA  
                                 l15320 6A16                                   l15400 3AFA  
                                 l14328 3D7A                                   l14264 3C3A  
                                 _B4CON 000E60                                   l16026 2BC8  
                                 l16106 380C                                   l15314 69F6  
                                 l15226 671E                                   l15170 6540  
                                 l15146 64A0                                   l15138 648E  
                                 l15066 62FA                                   l15058 62E8  
                                 l14602 56BA                                   l14530 54C2  
                                 l14522 5490                                   l15410 3B10  
                                 l15402 3B00                                   l16028 2BD0  
                                 l16212 4886                                   l16044 10C2  
                                 l13900 3398                                   l15244 6790  
                                 l15076 6366                                   l14620 5752  
                                 l14604 56CC                                   l15316 6A04  
                                 l14356 182E                                   l15500 491C  
                                 l14470 1022                                   l14462 1AB0  
                                 l14454 1A86                                   l12694 1774  
                                 l16134 4666                                   l13902 339A  
                                 l16230 2D84                                   l15238 6768  
                                 l15174 6554                                   l14614 5722  
                                 l14358 1834                                   l15350 3A7E  
                                 l15326 3A28                                   l15502 4920  
                                 l16064 36D4                                   l16216 4898  
                                 l15168 6532                                   l15096 63D8  
                                 l14720 5A82                                   l14712 5A72  
                                 l14704 5A3C                                   l14632 57A6  
                                 l17032 2820                                   l15360 3A94  
                                 l15328 3A2C                                   l14296 3CEC  
                                 _B5CON 000E70                                   l14466 1AC6  
                                 l14458 1A9A                                   l16402 4E04  
                                 l16162 4736                                   l13842 328E  
                                 l15282 68E4                                   l15266 683C  
                                 l15258 67F6                                   l15274 6884  
                                 l15186 65EC                                   l14802 5CDC  
                                 l14650 582E                                   l14642 57EE  
                                 l14626 577C                                   l14562 559C  
                                 l14554 5566                                   l14546 5530  
                                 l14538 54F8                                   l15442 3B56  
                                 l15418 3B1C                                   l15370 3ABC  
                                 l15346 3A78                                   l15530 49A4  
                                 l15514 4968                                   l14298 3D00  
                                 l16412 4E2C                                   l16420 4E50  
                                 l16340 4CAA                                   l16332 4C84  
                                 l16092 37A4                                   l16148 46CE  
                                 l13860 32CA                                   l16324 2928  
                                 l15292 6940                                   l15196 663A  
                                 l15460 3B9C                                   l15436 3B42  
                                 l15540 49C8                                   l15508 4944  
                                 l16430 4E7A                                   l16414 4E38  
                                 l16342 4CAE                                   l17206 1346  
                                 l16078 373C                                   l14478 107A  
                                 l13870 330A                                   l16246 2DCC  
                                 l16326 2956                                   l15278 68C0  
                                 l14902 5F54                                   l14726 5AEE  
                                 l14638 57D0                                   l14590 5672  
                                 l14582 5642                                   l15454 3B84  
                                 l15470 3BC6                                   l17222 1CDE  
                                 l15630 4C50                                   l15518 4978  
                                 l13944 10A0                                   l16504 4FB8  
                                 l16520 4FF0                                   l16424 4E66  
                                 l16408 4E26                                   l16344 4CB2  
                                 l17312 1FF2                                   l17208 134C  
                                 l16192 4804                                   l16176 479E  
                                 l13848 32A0                                   l16264 2E38  
                                 l14816 5D2A                                   l14736 5B12  
                                 l14728 5B02                                   l14672 5926  
                                 l14664 58D6                                   l14656 5882  
                                 l14648 5828                                   l14568 55DA  
                                 l14488 53C6                                   l15448 3B6C  
                                 l15472 3BCC                                   l15632 4C5C  
                                 l15608 4BAA                                   l15624 4BDE  
                                 l15650 3DFE                                   l16602 5166  
                                 l16530 503A                                   l16506 4FBC  
                                 l16522 5002                                   l16434 4E88  
                                 l16442 4E9A                                   l16338 4CA6  
                                 l17306 1FEC                                   l13882 3354  
                                 l13890 3372                                   l17410 241C  
                                 l16282 10E0                                   l15298 696C  
                                 l14922 5FE0                                   l14914 5F90  
                                 l14906 5F80                                   l14826 5D7E  
                                 l14754 5B96                                   l14746 5B4C  
                                 l14682 59A2                                   l14666 58E8  
                                 l14658 5894                                   l14594 568A  
                                 l14586 565A                                   l14578 5624  
                                 l17242 13AA                                   l15466 3BB4  
                                 l15386 3AC4                                   l15618 4BC6  
                                 l15626 4C3C                                   l17500 194A  
                                 l16612 518E                                   l16452 4ED4  
                                 l16428 4E6C                                   l16444 4EC4  
                                 l16372 4D5A                                   l16356 4CEE  
                                 l16364 4D34                                   l16348 4CB8  
                                 l17324 202C                                   l17308 1FEE  
                                 l16188 47F2                                   l13876 3326  
                                 l17252 123E                                   l17420 15EC  
                                 l16268 2E40                                   l16284 10E8  
                                 l17236 138E                                   l15396 3AF0  
                                 l15476 3BD0                                   l17180 363E  
                                 l17228 1D22                                   l15564 4AE2  
                                 l15556 4A6A                                   l15636 4C6E  
                                 l15670 163C                                   l17510 1700  
                                 l16542 5070                                   l16526 501C  
                                 l16470 4F32                                   l16438 4E94  
                                 l16390 4DDE                                   l17422 15F6  
                                 l14950 60A8                                   l14934 6042  
                                 l14870 5E7E                                   l14854 5E28  
                                 l14838 5DC6                                   l14846 5E06  
                                 l14766 5BE6                                   l14678 5964  
                                 l14598 56A2                                   l15398 3AF6  
                                 l15574 4B0C                                   ?_crc8 0067  
                                 l17512 1704                                   l16616 51A0  
                                 l16536 504C                                   l16392 4DE2  
                                 l16384 4D90                                   l15920 449C  
                                 l13896 3394                                   l17408 23EE  
                                 l17416 15DA                                   l14960 60E0  
                                 l14928 6018                                   l14776 5C32  
                                 l14848 5E0A                                   l14856 5E3A  
                                 l14688 59E0                                   l17176 362A  
                                 l17168 35E4                                   l17440 12E6  
                                 l17432 12D4                                   l15496 48FA  
                                 l15834 249E                                   l17530 14AA  
                                 l16650 5292                                   l16642 5254  
                                 l16634 51DC                                   l16618 51A6  
                                 l16562 50EE                                   l16554 50B2  
                                 l16490 4F80                                   l16466 4F14  
                                 l16394 4DE6                                   l17602 1408  
                                 l17418 15DE                                   l16810 1C5E  
                                 l14938 606C                                   l14698 5A26  
                                 l17346 26A4                                   l15594 4B72  
                                 l15586 4B4C                                   l17516 1726  
                                 l17508 16F4                                   l16660 52D4  
                                 l16636 5232                                   l16652 52A4  
                                 l16628 51C8                                   l16548 508A  
                                 l16492 4F84                                   l16476 4F48  
                                 l16396 4DEC                                   l16388 4DC4  
                                 l15932 44EC                                   l15908 444C  
                                 l17604 1410                                   l16804 1C30  
                                 l14892 5F30                                   l14788 5C80  
                                 l17356 26E8                                   l15678 164A  
                                 l17526 149E                                   l17550 125A  
                                 l17454 1D40                                   l16646 5278  
                                 l16478 4F4C                                   l16750 2318  
                                 l16742 22B6                                   l16814 1C6C  
                                 l16726 2B22                                   l14982 6180  
                                 l14894 5F44                                   l14886 5EC4  
                                 l14878 5EB4                                   l15598 4B8A  
                                 l15848 24C0                                   l17528 14A6  
                                 l17464 1D78                                   l16656 52B2  
                                 l16568 5104                                   l16584 5138  
                                 l16592 5154                                   l15960 45C0  
                                 l17560 17AA                                   l16808 1C56  
                                 l16728 2B50                                   l17448 12F8  
                                 l17538 14C4                                   l17554 126C  
                                 l17546 124E                                   l17378 11B4  
                                 l17490 1918                                   l16578 5124  
                                 l16666 52DC                                   l15946 4544  
                                 l17570 17F8                                   l16754 2334  
                                 l16770 297E                                   l14978 6156  
                                 l17548 1256                                   l17492 191C  
                                 l16596 515E                                   l16668 52E2  
                                 l15956 45B4                                   l15884 43AA  
                                 l17564 17E4                                   l17580 12AC  
                                 l15980 196C                                   l16748 2302  
                                 l16780 29EA                                   l16844 3432  
                                 l15958 45B8                                   l15966 45E0  
                                 l17574 128C                                   l16782 2A00  
                                 l16686 1514                                   l16678 14E4  
                                 l16942 3210                                   l15976 0FF8  
                                 l17488 190C                                   l15896 43FA  
                                 l17568 17F0                                   l15984 19A4  
                                 l16872 3480                                   l17578 12A8  
                                 l15986 19CA                                   l17594 13C4  
                                 l15994 1B82                                   l16786 2A1C  
                                 l16778 29E2                                   l16890 34E4  
                                 l16882 34A4                                   l16866 3462  
                                 l16938 31F8                                   l16954 110A  
                  __size_of_doModeSLCAN 03C6                                   l17588 1010  
                                 l17596 13CC                                   l16886 34C4  
                                 l16958 1128                                   ?_atoi 0066  
                                 ?_main 00E0                                   ?_init 0001  
                                 ?_itoa 0070                           i1_WriteTimer0 0FB4  
                                 _EEADR 000FA9                                   STR_10 7C42  
                                 STR_11 7C64                                   STR_12 7C82  
                                 STR_20 7C2D                                   STR_13 7C64  
                                 STR_21 7A2B                                   STR_30 7CF4  
                                 STR_14 7BA0                                   STR_22 7A3F  
                                 STR_15 7C64                                   STR_31 7CF4  
                                 STR_23 7A7B                                   STR_32 7CF4  
                                 STR_16 7C34                                   STR_40 7AA0  
                                 STR_24 7998                                   STR_17 7C64  
                                 STR_33 7CF4                                   STR_41 7CBB  
                                 STR_25 7831                                   STR_42 7C64  
                                 STR_34 7CF4                                   STR_18 7BF2  
                                 STR_26 7A17                                   STR_50 70C7  
                                 STR_19 7C64                                   STR_51 7B6E  
                                 STR_35 7CF4                                   STR_43 7CD5  
                                 STR_27 7A8E                                   STR_44 7C64  
                                 STR_36 7C64                                   STR_60 7C49  
                                 STR_28 78C4                                   STR_52 78AC  
                                 STR_53 7B6E                                   STR_61 7CED  
                                 STR_29 7CEA                                   STR_45 7CB6  
                                 STR_37 76AF                                   STR_46 7C64  
                                 STR_62 7C49                                   STR_38 7CE7  
                                 STR_70 7B08                                   STR_54 76F1  
                                 STR_39 7C64                                   STR_55 7B6E  
                                 STR_71 7B66                                   STR_63 7CED  
                                 STR_47 7C93                                   STR_48 7C64  
                                 STR_72 7C6A                                   STR_64 7BCE  
                                 STR_56 7B36                                   STR_80 705C  
                                 STR_65 7C49                                   STR_81 7C9D  
                                 STR_49 7C98                                   STR_57 7B66  
                                 STR_73 7863                                   STR_82 70C7  
                                 STR_90 7B3C                                   STR_74 7C49  
                                 STR_66 7CED                                   STR_58 7C6A  
                                 STR_83 7B6E                                   STR_75 7CED  
                                 STR_67 7CE1                                   STR_91 7BC2  
                                 STR_59 7B19                                   STR_84 78AC  
                                 STR_76 7C49                                   STR_92 7CCD  
                                 STR_68 7CC5                                   STR_69 70C4  
                                 STR_85 7B6E                                   STR_77 7CED  
                                 STR_93 7625                                   STR_78 70C4  
                                 STR_86 76F1                                   STR_94 7B3C  
                                 STR_79 7C64                                   STR_95 7BC2  
                                 STR_87 7B6E                                   STR_96 7CCD  
                                 STR_88 78DC                                   STR_97 7CAC  
                                 STR_89 756C                                   STR_98 70C7  
                                 STR_99 7A53            __end_of_printFirmwareVersion 1B5E  
                                 _BSEL0 000DF8                         __end_of___lldiv 196A  
                                 ?_utoa 0067                                   u20010 3A9A  
                       __end_of_calcCRC 1132                                   _T0CON 000FD5  
                                 u21010 2BC4                                   u21030 2BF4  
                                 u21040 2C1E                                   u20400 4A4A  
                       __end_of___llmod 1746                                   u21017 2BBE  
                                 u21037 2BEE                                   u20405 4A48  
                                 u21047 2C18                                   u22024 14F4  
                                 u22025 14F0                                   u23010 1368  
                                 u20380 4A36                                   u21085 20A4  
                                 u20390 4A40                                   u15015 2C80  
                                 _LATC1 007C59                                   u15025 2C90  
                                 u23017 1362                                   u20385 4A34  
                                 u15035 2CAE                                   u20395 4A3E  
                                 u23320 161E                                   u20755 1192  
                                 u20756 1194                                   u20950 2B70  
                                 u23327 1614                                   u20970 2B88  
                                 u22635 27B6                                   u12965 2570  
                                 u20957 2B6A                                   u20990 2BA6  
                                 u15640 1764                                   u20977 2B82  
                                 u15660 179C                                   u20997 2BA0  
                                 u15647 175E                                   u19015 56F2  
                                 u19105 58BA                                   u15667 1796  
                                 u23667 3C48                                   u19125 590E  
                                 u19135 594C                                   u14985 3F80  
                                 u19145 598A                                   u14986 3F86  
                                 u14995 3FB4                                   u14987 3F94  
                       __end_of___lwdiv 14D8                                   u19155 59C8  
                                 u14996 3FBA                                   u18620 159A  
                                 u14997 3FC8                                   u19165 5A06  
                                 u18630 15C8                                   _ERRIE 007D1D  
                                 _ERRIF 007D25                                   u18627 1594  
                                 u18637 15C2                                   u19605 638C  
                                 u19525 61A6                                   u19705 65C2  
                                 u18905 55C2                                   u19715 6612  
                                 u19395 5E60                                   u18915 5600  
                                 u19485 6092                                   u18845 546A  
                                 u18855 54A8                            _vscpPriority 003D  
                                 u19905 69CE                                   u18865 54DC  
                                 i1l403 0092                                   u19595 6A76  
                                 u18875 5514                                   i1l405 018C  
                                 u18885 554C                                   i1l422 01BE  
                                 i1l414 018A                                   u19695 657A  
                                 u18895 5582                                   i1l432 023C  
                                 i1l424 01D4                                   i1l408 018A  
                                 i1l417 017A                         __end_of___lwmod 1280  
                                 u19865 690A                                   i1l442 032E  
                                 u19895 69A0                         sendCANFrame@dlc 0095  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0063                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00BA                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 002F  
               readRegisterExtended@reg 00BA                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 0060                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 1C9E                                   crc8@m 0069  
                                 _flags 003B                         __end_of_dpowers 6BFE  
                Write_b_eep@GIE_BIT_VAL 0063                        _checkCANBusState 106A  
                       __end_of_isdigit 10A8                                   _timer 011C  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00E6                                   _ultoa 2694  
                            Interrupt@c 0020              ??_printNodeFirmwareVersion 00C1  
                      _printErrors$1511 0096                        _printErrors$1505 0094  
                      _printErrors$1523 009A                        _printErrors$1517 0098  
                      _printErrors$1529 009C                                   tablat 000FF5  
                      _printErrors$1538 009E                 ??_receiveSendEventCANAL 0073  
           __end_of_sendEscapedUartData 16E4                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 52F0  
               ??_receiveSendEventSLCAN 0083                         __end_of_strichr 12BE  
                       __end_of_strcspn 1446                         __end_of_toupper 1014  
                       __end_of_stristr 19E2                            __end_ofPL100 6BA6  
                          __end_ofPL110 2D6E                            __end_ofPL102 53B4  
                          __end_ofPL112 53BE                            __end_ofPL104 1164  
                          __end_ofPL106 4350                            __end_ofPL108 133C  
     __size_of_receivePrintEventVerbose 0294                     doModeVerbose@i_1188 02B7  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1306 02C4  
                   doModeVerbose@p_1248 02BD                     doModeVerbose@p_1195 02BB  
                   doModeVerbose@p_1286 02C2                          WriteUSART@data 0060  
                  _ECANSetOperationMode 1014                            _canInputFifo 01CD  
                       __initialization 1522                  doModeVerbose@page_1244 02A7  
         receiveSendMultiEventCANAL@dlc 0081                            __end_of_crc8 1208  
         receiveSendMultiEventCANAL@crc 0082                            __end_of_atoi 2C4C  
         receiveSendMultiEventCANAL@pos 0083                            __end_of_main 3D92  
                          __end_of_init 148E                            __end_of_itoa 11D0  
                          __end_of_utoa 1DD8                     doModeVerbose@ifmode 02BF  
                            _Read_b_eep 0FD8                     doModeVerbose@maskno 02AF  
                      __end_of_Busy_eep 0FAC                     doModeVerbose@nodeid 02B3  
                         doModeSLCAN@id 009F                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 00A5                       ??_ECANSendMessage 0074  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00BD  
                                ??_crc8 006A                   getVSCPFrame@pvscptype 0073  
                                ??_atoi 0068                  ??_vscp_restoreDefaults 007A  
                                ??_main 00E5                       readRegister@value 00BB  
                                ??_init 007A                                  ??_itoa 0076  
                                ??_utoa 006D                  doModeVerbose@mask_type 0290  
                         __activetblptr 000002                         _stateVscpDriver 0037  
                     __RegsToCANID@type 0005                    _can_transmitOverruns 0104  
            ECANReceiveMessage@msgFlags 000F                           ?_readRegister 00B8  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1252 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00BB              ECANReceiveMessage@savedPtr 0010  
                                _CANCON 000F6F                        ___llmod@dividend 006D  
                                STR_100 7C49                                  STR_101 7CED  
                                STR_102 70C4                                  STR_110 7368  
                                STR_111 7CF4                                  STR_103 77C6  
                                STR_104 7C64                                  STR_200 7C57  
                                STR_112 74F8                                  STR_120 7162  
                                STR_113 7CF4                                  STR_201 7CDD  
                                STR_105 7C3B                                  STR_121 7592  
                                STR_210 70C4                                  STR_202 70C4  
                                STR_130 7C64                                  STR_122 7CF4  
                                STR_106 7CF4                                  STR_114 7546  
                                STR_115 7CF4                                  STR_131 7C8E  
                                STR_203 79DA                                  STR_211 7924  
                                STR_123 740C                                  STR_107 6E1C  
                                STR_124 7CF4                                  STR_140 7CA7  
                                STR_204 7C57                                  STR_220 7BFA  
                                STR_212 7BFA                                  STR_132 7CD9  
                                STR_108 745C                                  STR_116 73BB  
                                STR_117 7C64                                  STR_109 7CF4  
                                STR_141 7C42                                  STR_221 7CDD  
                                STR_213 7CDD                                  STR_205 7CDD  
                                STR_125 75DC                                  STR_133 733C  
                                STR_222 70C4                                  STR_214 70C4  
                                STR_206 70C4                                  STR_126 7CF4  
                                STR_142 7C34                                  STR_118 7CA2  
                                STR_134 7BEA                                  STR_230 78F4  
                                STR_150 7817                                  STR_119 7CF4  
                                STR_143 7BA0                                  STR_231 7C49  
                                STR_151 7BD2                                  STR_207 796A  
                                STR_215 790C                                  STR_223 784A  
                                STR_127 7601                                  STR_135 7434  
                                STR_128 7CF4                                  STR_224 7C49  
                                STR_216 7BFA                                  STR_232 7CED  
                                STR_160 7CFC                                  STR_152 7C76  
                                STR_144 7C70                                  STR_208 7BFA  
                                STR_136 7B50                                  STR_240 7310  
                                STR_233 70C4                                  STR_137 7C64  
                                STR_225 7CED                                  STR_217 7CDD  
                                STR_209 7CDD                                  STR_153 7C7C  
                                STR_145 7BE2                                  STR_161 76D0  
                                STR_129 74D1                                  STR_241 72B6  
                                STR_226 70C4                                  STR_218 70C4  
                                STR_162 7C64                                  STR_154 7BF7  
                                STR_170 7C26                                  STR_138 7B8E  
                                STR_146 77AA                                  STR_250 768E  
                                STR_242 712F                                  STR_234 6F81  
                                STR_219 790C                                  STR_139 7C82  
                                STR_171 7C49                                  STR_147 7CB1  
                                STR_155 79AE                                  STR_163 77FC  
                                STR_251 7483                                  STR_243 7194  
                                STR_235 7026                                  STR_227 6E9C  
                                STR_180 7C49                                  STR_172 7CED  
                                STR_156 7CD1                                  STR_164 7A03  
                                STR_244 7751                                  STR_148 7712  
                                STR_252 73E4                                  STR_236 70FB  
                                STR_228 7092                                  STR_260 6D4F  
                                STR_181 7CED                                  STR_149 7C88  
                                STR_173 7BDA                                  STR_165 7BB2  
                                STR_157 7953                                  STR_261 766C  
                                STR_237 74AA                                  STR_253 7287  
                                STR_245 71C6                                  STR_229 6F10  
                                _EEDATA 000FA8                                  STR_238 6DB2  
                                STR_190 7CC9                                  STR_174 7C50  
                                STR_182 7C1F                                  STR_166 7BBA  
                                STR_158 7392                                  STR_246 72E4  
                                STR_262 7258                                  STR_270 6D96  
                                STR_254 6CB9                                  STR_183 7C49  
                                STR_175 7CED                                  STR_167 7C5E  
                                STR_159 7BA9                                  STR_191 7AB2  
                                STR_247 787C                                  STR_239 77E1  
                                STR_271 778D                                  STR_263 7229  
                                STR_255 6D05                                  STR_280 70C4  
                                STR_272 70C4                                  STR_184 7CED  
                                STR_168 7CF2                                  STR_192 7C57  
                                STR_176 7C18                                  STR_248 6F49  
                                STR_264 6DD9                                  STR_256 6C6C  
                                STR_273 6D96                                  STR_177 7C49  
                                STR_169 7CF0                                  STR_193 7CDD  
                                STR_185 7C11                                  STR_281 7B28  
                                STR_249 793C                                  STR_257 7894  
                                STR_265 71F8                                  STR_282 70C4  
                                STR_274 70C4                                  STR_194 70C4  
                                STR_186 7C49                                  STR_178 7CED  
                                STR_290 7C02                                  STR_266 6FB8  
                                STR_258 6C1E                                  STR_187 7CED  
                                STR_179 7B97                                  STR_291 7B44  
                                STR_195 7AF7                                  STR_275 7AE6  
                                STR_283 7A67                                  STR_259 79EF  
                                STR_267 6E5E                                  STR_188 7CF4  
                                STR_284 7CFC                                  STR_196 7C57  
                                STR_276 7BCA                                  STR_292 7B84  
                                STR_268 751F                                  STR_269 70C7  
                                STR_197 7CDD                                  STR_277 7CF8  
                                STR_285 7CF6                                  STR_293 7B7A  
                                STR_189 7B5B                                  STR_286 70C4  
                                STR_198 70C4                                  STR_278 7CE4  
                                STR_294 7981                                  STR_295 70C4  
                                STR_279 7CFA                                  STR_287 7B70  
                                STR_199 79C4                                  STR_288 70C4  
                                STR_296 7AC4                                  STR_289 7C0A  
                                STR_297 7AD5                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 295A                                  _CIOCON 000F73  
                                ?_ultoa 0076            ??_sendVSCPDriverCommandReply 0070  
                  __end_of_fifo_getFree 1FAE                           ?_init_app_ram 0001  
                                i1l1620 2ED0                                  _MDSEL0 007BBE  
                                i1l1621 2F88                                  i1l1541 4340  
                                _MDSEL1 007BBF                                  i1l1534 4178  
                                i1l1551 41FC                                  i1l1544 4246  
                                i1l1553 4210                                  i1l1545 41C6  
                                i1l1555 4220                                  i1l1547 41D4  
                                i1l1565 42AA                                  i1l1557 4230  
                                i1l1549 41E8                                  i1l1566 42C4  
                                i1l1593 18EA                                  i1l1588 30B2  
                                i1l1939 103C                              _OpenTimer0 104C  
                                i1l6736 2EDA                                  i1l6728 2E9E  
                                i1l6760 1F66                                  i1l6746 2F64  
                                i1l6748 2F6E                         _init_app_eeprom 2420  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 000C                  ECANReceiveMessage@mode 0013  
                ECANReceiveMessage@temp 0014                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 0077  
            ??_sendVSCPDriverErrorFrame 006F                       getVSCPFrame@pSize 0076  
                    _doModeVerbose$1212 0294                      _doModeVerbose$1221 0298  
                    _doModeVerbose$1207 0292                      _doModeVerbose$1216 0296  
                    _doModeVerbose$1234 029C                      _doModeVerbose$1261 02A0  
                    _doModeVerbose$1229 029A                      _doModeVerbose$1238 029E  
                    _doModeVerbose$1267 02A2                      _doModeVerbose$1276 02A4  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 006B  
                    __size_of_Interrupt 0334                              _bLocalEcho 002E  
              readRegisterExtended@page 00B8                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0072  
                                ___wmul 1132                              _bInitiated 002D  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0068  
                             ??_calcCRC 006F                                  _cmdbuf 012D  
                             ??___llmod 0075                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007B                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1402 009F  
         _receivePrintEventVerbose$1412 00A3           _receivePrintEventVerbose$1407 00A1  
         _receivePrintEventVerbose$1392 009B           _receivePrintEventVerbose$1387 0099  
         _receivePrintEventVerbose$1397 009D                                  _memcpy 137C  
                                _memset 10A8                                  clear_0 152A  
                                clear_1 153E                                  clear_2 1550  
                                clear_3 155C                                  clear_4 1568  
                         ?_sendCANFrame 0091                                  _strcat 15D0  
                                _strchr 1746                                  _strcpy 10D6  
                                _strlen 133C                                  _wrkbuf 017D  
                                _strtok 1B74                                  _strspn 13BE  
   __size_of_sendVSCPDriverCommandReply 00C4                               ??_isdigit 0060  
                receiveSendEventSLCAN@i 008B                        __end_of_printMDF 1C90  
                          __mediumconst 6BA6                          ??_readRegister 00BC  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 0082  
                                ultoa@v 007E                            ?_printErrors 0001  
                             ??_sprintf 007E                               ??_strichr 0065  
                             ??_strcspn 006A                               ??_toupper 0060  
                        ??_init_app_ram 0071                               ??_stristr 0071  
            ??_sendVSCPModeCapabilities 006F              doModeVerbose@mask_priority 028F  
                      __end_of_strnicmp 180E                              __accesstop 0060  
               __end_of__initialization 156E                    _printFirmwareVersion 1AE2  
                 __size_of_getVSCPFrame 0002               receiveSendEventCANAL@data 0073  
                  doModeVerbose@id_1318 02AA                              _WriteUSART 0FEA  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 019E  
                  _printStatistics$1480 0094                    _printStatistics$1492 0098  
                  _printStatistics$1486 0096                    _printStatistics$1498 009A  
                 _uart_transmitOverruns 0124                             ?_Read_b_eep 0060  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 2766  
                            __end_ofPL2 6A36                              __end_ofPL4 6A50  
                            __end_ofPL6 6A60                              __end_ofPL8 6A6E  
                        ??_sendCANFrame 0098                       __end_of_ReadUSART 104C  
                         ?__RegsToCANID 0001             __size_of_ECANReceiveMessage 01FE  
                    sendVSCPFrame@pData 009E                         readRegister@reg 00B8  
                  sendVSCPDriverAck@crc 006F                      __size_of_findNodes 011E  
                        doModeSLCAN@dlc 00A3                      __size_of_fifo_init 0032  
                    __size_of_fifo_read 00B6                  getVSCPFrame@pvscpclass 0079  
                       _fifo_canrxcount 0031                 __end_of_init_app_eeprom 24F0  
                     __end_of_Interrupt 034C                           ReadUSART@data 0001  
                    readRegister@nodeid 00C0                          _status_led_cnt 0022  
                    __RegsToCANID@Value 0008                              _crc8_table 0300  
                     __end_of_OpenUSART 1684                 doModeVerbose@mask_class 028A  
             printNodeFirmwareVersion@i 00C6                         setFilter@filter 006C  
                          sprintf@width 008B        __end_of_printNodeFirmwareVersion 2358  
                            _doModeVscp 3A16                                 ??_ultoa 007E  
                          _getVSCPFrame 0FA0                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                             ?_Busy_eep 0001                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 0070                            __IT_INT_MASK 0028  
                         setFilter@eidh 006F                           setFilter@eidl 0070  
                          __IT_SAVE_BSR 0029                           setFilter@sidh 006D  
                         setFilter@sidl 006E                        ??_doModeVscpNode 0060  
                            _nTimeStamp 0033             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 1D38                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 0027                __end_of_checkCANBusState 1088  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 1DD8  
                               _B5RXFUL 007387                        WriteTimer0@timer 0062  
                         putsUSART@data 0061                    _readRegisterExtended 2864  
                               ?_memcpy 0060                                 _ECANCON 000F77  
                               ?_memset 0060                           ??_WriteTimer0 0062  
                        ??__RegsToCANID 0006                           ??_Write_b_eep 0063  
                 sendVSCPFrame@priority 009C                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 0060                                 ?_strchr 0060  
                               ?_strcpy 0060                                 ?_strlen 0060  
                               ?_strtok 006C                                 ?_strspn 0066  
                            _cntRxBytes 0108                              _cntTxBytes 0110  
                               i1l10100 3034                                 i1l10070 1896  
                               i1l10080 18C0                                 i1l10072 18A0  
                               i1l10400 425A                                 i1l10074 18AA  
                               i1l10066 1884                                 i1l10410 427A  
                               i1l10076 18B4                                 i1l10068 188C  
                               i1l10084 18CC                                 i1l10332 4166  
                               i1l10078 18BA                                 i1l10342 4190  
                               i1l10350 41B0                                 i1l10450 432A  
                               i1l10436 42F6                                 i1l10444 4314  
                               i1l10428 42C6                                 i1l10348 41A6  
                               i1l10356 41B4                      __size_of_printGUID 00E6  
                               i1l14200 0278                                 i1l14120 008E  
                               i1l14112 0034                     ?_sendVSCPDriverNack 0001  
                               i1l14210 02EE                                 i1l14202 027A  
                               i1l14130 00CC                                 i1l14122 009A  
                               i1l14114 003C                                 i1l14212 031A  
                               i1l14204 02AC                                 i1l14132 00D8  
                               i1l14124 00A6                                 i1l14116 0042  
                               i1l14214 031E                                 i1l14206 02B0  
                               i1l14222 032C                                 i1l14150 0138  
                               i1l14142 010E                                 i1l14134 00E8  
                               i1l14126 00B8                                 i1l14118 007E  
                               i1l14216 0320                                 i1l14208 02EA  
                               i1l14160 0168                                 i1l14144 011A  
                               i1l14136 00F0                                 i1l14128 00C8  
                               i1l14170 01AE                                 i1l14162 0172  
                               i1l14154 014A                                 i1l14138 00FC  
                               i1l14180 01DC                                 i1l14172 01B0  
                               i1l14164 0182                                 i1l14156 0156  
                               i1l14148 012C                                 i1l14190 0218  
                               i1l14182 01E2                                 i1l14174 01B8  
                               i1l14166 0194                                 i1l14192 0220  
                               i1l14176 01C6                                 i1l14184 01E6  
                               i1l14168 019C                                 i1l14194 0228  
                               i1l14178 01CE                                 i1l14186 01E8  
                               i1l14196 0244                                 i1l14188 01F0  
                               i1l14198 024C                              _fifo_write 2E8C  
                    __size_of_printHelp 01BE                      __size_of_printMode 0080  
                 sendVSCPFrame@vscptype 009A                   __size_of_fifo_getFree 0096  
               doModeVerbose@value_1246 02B1                 doModeVerbose@value_1270 02A9  
                     sendCANFrame@pdata 0096                              _made_table 0128  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 187E  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0058  
    __end_of_sendVSCPDriverCommandReply 2686              _sendVSCPDriverCommandReply 25C2  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 2A54        __size_of_receiveVSCPModeCanalMsg 00EA  
                __size_of_doModeVerbose 165C                    sendEscapedUartData@c 006E  
                __size_of_sendVSCPFrame 00B6                     __size_of_Read_b_eep 0012  
                            ??_Busy_eep 0060        __end_of_sendVSCPDriverErrorFrame 2284  
        __size_of_receiveSendEventCANAL 0144           __end_of_receiveSendEventCANAL 3236  
                  ??_sendVSCPDriverNack 006F              printFirmwareVersion@wrkbuf 0078  
        __size_of_receiveSendEventSLCAN 0180                         _ECANSendMessage 3236  
         __end_of_receiveSendEventSLCAN 36AC                                 __Hparam 0000  
                     __end_of_findNodes 2E8C                                 __Lparam 0000  
                     __end_of_fifo_init 132E                       __end_of_fifo_read 25A6  
                         ??_getCANFrame 0072                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00B8                    __end_of_readRegister 2420  
                             ?_printMDF 0001                                 _bSilent 0030  
             receiveVSCPModeCanalMsg@id 00B4                           ??_doModeSLCAN 0098  
                               ___lldiv 18F4                         __size_of___wmul 0022  
                               _calcCRC 1104                         getCANFrame@pdlc 006E  
                               ___llmod 16E4                                 ___lwdiv 148E  
                             _FIFOEMPTY 007BA7                                 ___lwmod 1242  
                 ?_readRegisterExtended 00B8             printNodeFirmwareVersion@buf 00C2  
                  __end_of_init_app_ram 3F30                            _fifo_getFree 1F18  
                          init_crc8@crc 0064                                 __pcinit 1522  
                       __size_of_memcpy 0042                         __size_of_memset 002E  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                             ?_strnicmp 0064                                 __ptext0 3BD4  
                               __ptext1 0FA4                                 __ptext2 48AC  
                               __ptext3 1C9E                                 __ptext4 12BE  
               receiveSendEventCANAL@id 007C                                 __ptext5 352C  
                               __ptext6 2694                                 __ptext7 3A16  
                               __ptext8 21D4                                 __ptext9 25C2  
                               crc8@crc 0067           printNodeFirmwareVersion@value 00C5  
                     ??_printStatistics 0094                               _T0CONbits 000FD5  
                       __size_of_strcat 0058                         __size_of_strchr 0062  
                       __size_of_strcpy 002E                         __size_of_strlen 0040  
                     __end_of_hexpowers 6C1E                         __size_of_strtok 0092  
                       __size_of_strspn 0044                                 _dpowers 6BD6  
                     __end_of_init_crc8 187E                                 _isdigit 1088  
        printNodeFirmwareVersion@nodeid 00C1                     __end_of_WriteTimer0 0FD8  
                        _nibbleFromChar 12BE                        ?_init_app_eeprom 0001  
                   __end_of_Write_b_eep 1198                                 _sprintf 4C7E  
      __end_of_sendVSCPModeCapabilities 21D4                       __end_of_setFilter 4144  
                               _strichr 1280                          doModeVerbose@c 02B9  
                        doModeVerbose@i 02B0                          doModeVerbose@p 02C0  
                               _strcspn 1402                                 _toupper 0FFE  
                           ?_doModeVscp 0001                                 _stristr 196A  
                  __size_of_printBinary 004A                    end_of_initialization 156E  
                     __end_of_octpowers 6BD6                    __size_of_printErrors 02C8  
                               memcpy@d 0066                                 memcpy@n 0064  
                               memcpy@s 0068                  ??_printFirmwareVersion 0078  
                               itoa@buf 0070                               i1u1212_25 416E  
                             i1u1212_27 4170                                 memset@c 0062  
                               itoa@val 0072                                 memset@n 0064  
                               memset@p 0066                           __Lmediumconst 6BA6  
                             i1u1172_25 2FF0                    __end_of_sendCANFrame 1242  
                             i1u1173_25 3000                               i1u1174_25 303E  
                             i1u1820_20 010C                               i1u1820_21 010A  
                             i1u1821_20 011A                               i1u1821_21 0118  
                             i1u1830_20 019C                               i1u1822_20 012A  
                             i1u1814_20 003C                               i1u1830_21 019A  
                             i1u1822_21 0128                               i1u1814_21 003A  
                             i1u1831_20 01B8                               i1u1823_20 0138  
                             i1u1815_20 007E                               i1u1831_21 01B6  
                             i1u1823_21 0136                               i1u1815_21 007C  
                             i1u1840_20 024C                               i1u1832_20 01C6  
                             i1u1824_20 0148                               i1u1816_20 009A  
                             i1u1840_21 024A                               i1u1832_21 01C4  
                             i1u1824_21 0146                               i1u1816_21 0098  
                             i1u1841_20 0278                               i1u1833_20 01CE  
                             i1u1825_20 0156                               i1u1817_20 00D8  
                             i1u1841_21 0276                               i1u1833_21 01CC  
                             i1u1825_21 0154                               i1u1817_21 00D6  
                             i1u1842_20 02AC                               i1u1834_20 01DC  
                             i1u1826_20 0166                               i1u1818_20 00E8  
                             i1u1842_21 02AA                               i1u1834_21 01DA  
                             i1u1826_21 0164                               i1u1818_21 00E6  
                             i1u1843_20 02EA                               i1u1835_20 01F0  
                             i1u1827_20 0172                               i1u1819_20 00FC  
                             i1u1843_21 02E8                               i1u1835_21 01EE  
                             i1u1827_21 0170                               i1u1819_21 00FA  
                             i1u1844_20 031A                               i1u1836_20 0218  
                             i1u1828_20 0182                               i1u1844_21 0318  
                             i1u1836_21 0216                               i1u1828_21 0180  
                             i1u1845_20 032A                               i1u1837_20 0220  
                             i1u1829_20 0194                               i1u1845_21 0328  
                             i1u1837_21 021E                               i1u1829_21 0192  
                             i1u1838_20 0228                               i1u1838_21 0226  
                             i1u1839_20 0244                               i1u1839_21 0242  
                   _can_receiveOverruns 0100                 receiveSendEventSLCAN@id 0086  
                     __end_of_printGUID 2A40                         ___lldiv@divisor 0064  
                     __end_of_printHelp 3A16                         ___lldiv@counter 0068  
                     __end_of_printMode 1AE2                       ECANSendMessage@id 006C  
                     ECANSendMessage@pb 0075            __size_of_sendEscapedUartData 0060  
                             _RXF10EIDH 000D76                               _RXF10EIDL 000D77  
                             _RXF11EIDH 000D7A                               _RXF11EIDL 000D7B  
                            ??_printMDF 00C1                               _RXF12EIDH 000D82  
                             _RCSTAbits 000FAB                               _RXF12EIDL 000D83  
                             _RXF13EIDH 000D86                               _RXF13EIDL 000D87  
                             _RXF14EIDH 000D8A                               _RXF14EIDL 000D8B  
                             _RXF15EIDH 000D92                               _RXF15EIDL 000D93  
                             _RXF10SIDH 000D74                               _RXF10SIDL 000D75  
                             _RXF11SIDH 000D78                               _RXF11SIDL 000D79  
                             _RXF12SIDH 000D80                               _RXF12SIDL 000D81  
                               postdec1 000FE5                                 postdec2 000FDD  
                             _RXF13SIDH 000D84                               _RXF13SIDL 000D85  
                             _RXF14SIDH 000D88                               _RXF14SIDL 000D89  
               __size_of_ECANInitialize 0080                               _RXF15SIDH 000D90  
                             _RXF15SIDL 000D91                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                     __end_of_putsUSART 15D0                      __ECANPointBuffer@b 0004  
                         _doModeVerbose 53BE                                 utoa@buf 0067  
     __size_of_printNodeFirmwareVersion 00C6                                 utoa@val 0069  
             ?_printNodeFirmwareVersion 0001                           _sendVSCPFrame 2068  
                               strlen@s 0060                              _sequencyno 0036  
                            _timekeeper 0118                               _RXM0EXIDM 0078CB  
                               strspn@i 006A                              ??_strnicmp 006A  
                   __end_of_getCANFrame 2068                              findNodes@i 00CB  
                __end_of_nibbleFromChar 12FC                     __end_of_doModeSLCAN 4C72  
                           ?_fifo_write 0001                              fifo_init@f 0060  
         __size_of_vscp_restoreDefaults 0008                              fifo_read@f 0060  
                            fifo_read@i 006C                              fifo_read@p 006A  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                ?_writeRegisterExtended 00B8       sendVSCPDriverCommandReply@cmdCode 006F  
                   __size_of_WriteUSART 0014             sendVSCPModeCapabilities@crc 006F  
               __end_of_ECANSendMessage 33A4                    _uart_receiveOverruns 0120  
              _receivePrintEventVerbose 4350                              _vscpNodeId 003C  
                         ?__CANIDToRegs 0062                    __end_of__RegsToCANID 30B4  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 0003  
                     doModeVerbose@page 02B5                       doModeVerbose@preg 0284  
                        _init_crc8$2073 0060                  ??_readRegisterExtended 00BF  
                        ?_doModeVerbose 0001                            ??_Read_b_eep 0062  
                        ?_sendVSCPFrame 0098                          __end_of___wmul 1154  
                   __size_of_doModeVscp 01BE                             _WriteTimer0 0FC6  
                           _Write_b_eep 1164                          __end_of_memcpy 13BE  
                        __end_of_memset 10D6       __size_of_sendVSCPDriverErrorFrame 00B0  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                             ___DCDelay 01F3                          __end_of_strcat 1628  
                        __end_of_strchr 17A8                          __end_of_strcpy 1104  
                        __end_of_strlen 137C                doModeVerbose@filter_type 028D  
                        __end_of_strtok 1C06                          __end_of_strspn 1402  
                           __end_ofPL10 6AB8                             __end_ofPL20 1C9E  
                           __end_ofPL12 530E                             __end_ofPL30 6ADC  
                           __end_ofPL22 5344                             __end_ofPL14 2FB8  
                           __end_ofPL40 535E                             __end_ofPL32 2D2E  
                           __end_ofPL24 30CA                             __end_ofPL16 531E  
                           __end_ofPL50 1E78                             __end_ofPL42 6B08  
                           __end_ofPL34 3F4E                             __end_ofPL26 351A  
                           __end_ofPL18 2C5A                             __end_ofPL60 6B50  
                           __end_ofPL52 2D50                             __end_ofPL44 6B22  
                           __end_ofPL36 6AEE                             __end_ofPL28 6AC8  
                           __end_ofPL70 277A                             __end_ofPL62 1B74  
                           __end_ofPL54 3F66                             __end_ofPL46 1F18  
                           __end_ofPL38 25C2                             __end_ofPL80 1FC0  
                           __end_ofPL72 2A54                             __end_ofPL64 538A  
                           __end_ofPL56 5374                             __end_ofPL48 2D3E  
                           __end_ofPL90 36BA                             __end_ofPL82 53AA  
                           __end_ofPL74 2D64                             __end_ofPL66 5398  
                           __end_ofPL58 6B3A                             __end_ofPL92 6B86  
                           __end_ofPL84 6B76                             __end_ofPL76 30F2  
                           __end_ofPL68 30DE                             __end_ofPL94 2292  
                           __end_ofPL86 352C                             __end_ofPL78 6B64  
                           __end_ofPL96 6B96                             __end_ofPL88 4C7E  
                           __end_ofPL98 2694                     start_initialization 1522  
                             _ReadUSART 102E                         findNodes@nFound 00C9  
                 doModeVerbose@reg_1245 02A8                   doModeVerbose@filterno 02AE  
               _receiveVSCPModeCanalMsg 277A                     __CFG_BOREN$BOACTIVE 000000  
                          doModeSLCAN@c 00A4                            ??_OpenTimer0 0060  
sendVSCPDriverCommandReply@cmdReplyCode 0070                               _Interrupt 0018  
                        ??__CANIDToRegs 0069              readRegisterExtended@nodeid 00C3  
                             _OpenUSART 1628                      __end_of_Read_b_eep 0FEA  
                   sendVSCPFrame@nodeid 009B                         ___llmod@divisor 0071  
                 __size_of_readRegister 00C8                         ___llmod@counter 0075  
                     __size_of_Busy_eep 0006                   ECANReceiveMessage@ptr 0015  
                   __size_of_fifo_write 00FE                   __size_of_init_app_ram 019E  
                        _findNodes$1583 00C7                __end_of__ECANPointBuffer 18F4  
                     __CANIDToRegs@type 0068                              init_crc8@i 0065  
                            init_crc8@j 0062                             _getCANFrame 1FC0  
                              ??___wmul 0064       __size_of_sendVSCPModeCapabilities 00B6  
                     ?_hexStringToBytes 0064                             _doModeSLCAN 48AC  
             ?_sendVSCPModeCapabilities 0001                       ?_checkCANBusState 0001  
            __end_of_ECANReceiveMessage 4342                                ??_memcpy 0066  
                   readRegister@timeout 00B9                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0291  
                 __end_ofi1_WriteTimer0 0FC6                      ??_hexStringToBytes 0069  
                    ??_checkCANBusState 0060                                ??_strcat 0064  
                              ??_strchr 0064                                ??_strcpy 0064  
                              ??_strlen 0062                      __end_of_OpenTimer0 106A  
                              ??_strtok 0070                                ??_strspn 006A  
                           __pbssBIGRAM 0400                             __pbssCOMRAM 0022  
                            ?_ReadUSART 0001                         __IT_SAVE_STATUS 012A  
                         __pcstackBANK0 0060                           __pcstackBANK2 0280  
                   __end_of__stringdata 7CFE                            _readRegister 2358  
                 __size_of_sendCANFrame 003A                            _isdigit$2990 0061  
           ?_sendVSCPDriverCommandReply 006F             sendVSCPDriverErrorFrame@crc 0070  
                      ?_ECANSendMessage 006C                       sendVSCPFrame@size 009D  
                          _init_app_ram 3D92                              ?_Interrupt 0001  
                            ?_OpenUSART 0060                             sprintf@_val 008D  
                           sprintf@flag 0092                             sprintf@prec 0089  
                             __pnvBANK1 01F1                           __IT_SAVE_WREG 012B  
                      _ledFunctionality 0032                doModeVerbose@nodeid_1243 02B4  
              doModeVerbose@nodeid_1269 02B8                            setFilter@val 0062  
                      ___lwdiv@dividend 0060                         ??_doModeVerbose 00CC  
         __size_of_ECANSetOperationMode 001A                         _printStatistics 36BA  
                          ??_WriteUSART 0060                         ??_sendVSCPFrame 00A0  
                        _ECANInitialize 19E2                       _sendVSCPDriverAck 1E78  
                         __pmediumconst 6BA6                                ?___lldiv 0060  
                              ?_calcCRC 006C                                ?___llmod 006D  
                             _findNodes 2D6E                                ?___lwdiv 0060  
                              ?___lwmod 0060                               _fifo_init 12FC  
                             _fifo_read 24F0                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 008A                             __pintcodelo 0018  
                          _sendCANFrame 1208                       WriteTimer0@timer0 0060  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0098                     ??_sendVSCPDriverAck 006F  
                     __size_of_strnicmp 0066                         printGUID@nodeid 00C1  
                   _sendEscapedUartData 1684                               _hexpowers 6BFE  
                      ___lwdiv@quotient 0065                               _init_crc8 180E  
                 __size_of__RegsToCANID 00FC               doModeVerbose@filter_class 0288  
                              ?_sprintf 0076                                ?_strichr 0061  
                           _cntRxFrames 010C                            ??_doModeVscp 00B9  
                              ?_strcspn 0066                                ?_toupper 0001  
                              ?_stristr 006D                      __end_of_WriteUSART 0FFE  
                        __size_of_ultoa 00D2                             _cntTxFrames 0114  
                       _can_inputBuffer 0400                          ___wmul@product 0064  
                sendVSCPFrame@vscpclass 0098                               _setFilter 3F66  
                           strnicmp@len 0068                               _octpowers 6BA6  
                              _PIE1bits 000F9D             __size_of_sendVSCPDriverNack 0092  
                __end_of_ECANInitialize 1A62               __end_of_sendVSCPDriverAck 1F0A  
                              i1u660_25 1F3E                                i1u655_25 2EAC  
                              i1u656_25 2EBC                                _PIR1bits 000F9E  
                              i1u658_25 2F52                   _receiveSendEventCANAL 30F2  
                      ECANSendMessage@i 008E                        ECANSendMessage@j 0089  
                  ?_sendEscapedUartData 006C                   _receiveSendEventSLCAN 352C  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62             receiveSendMultiEventCANAL@i 007C  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0070  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 006E                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 295A  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00C6                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 3858                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 1A62  
                            ?_fifo_init 0060                              ?_fifo_read 0060  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 3BD4  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 2D1A  
                             _putsUSART 1578                             __stringdata 6C1E  
                     ___wmul@multiplier 0060                            __RegsToCANID 2FB8  
                             _vscpClass 0038                 ??_writeRegisterExtended 00BF  
                       Write_b_eep@badd 0060                         Write_b_eep@bdat 0062  
                          ??_fifo_write 0009                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 0094                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0074                           ??_printBinary 0061  
                      doModeVerbose@reg 02B6                           ??_printErrors 0094  
                            ?_init_crc8 0001                      _serial_inputBuffer 0200  
                             _rwtimeout 0035               writeRegisterExtended@page 00B8  
                              ___DCByte 002A    __end_of_receiveVSCPModeMultiCanalMsg 0FA4  
 __size_of_receiveVSCPModeMultiCanalMsg 0002            _receiveVSCPModeMultiCanalMsg 0FA2  
                           ??_Interrupt 0017                 __end_of_printStatistics 3858  
                           ??_OpenUSART 0062            writeRegisterExtended@timeout 00BB  
                              _Busy_eep 0FA6                __size_of_init_app_eeprom 00D0  
                            ?_setFilter 0062                         OpenUSART@config 0062  
                        findNodes@value 00CA            __end_of_vscp_restoreDefaults 0FB4  
                            _EECON1bits 000FA6           __size_of_printFirmwareVersion 007C  
       __end_of_receiveVSCPModeCanalMsg 2864                         ?_ECANInitialize 0001  
                              __Hrparam 0000                    ECANReceiveMessage@id 000A  
                 ??_sendEscapedUartData 006E                                __Lrparam 0000  
                      __CANIDToRegs@val 0064                      __end_of_fifo_write 2F8A  
                      __CANIDToRegs@ptr 0062             receiveVSCPModeCanalMsg@data 00AC  
                            ?_printGUID 0001                             doModeVscp@c 00B9  
                            ?_printHelp 0001                              ?_printMode 0001  
                       nibbleFromChar@c 0060                        ??_nibbleFromChar 0060  
                      __size_of___lldiv 0076                        __size_of_calcCRC 002E  
                      __size_of___llmod 0062                        __size_of___lwdiv 004A  
                      __size_of___lwmod 003E                            ?_WriteTimer0 0060  
                      getCANFrame@pdata 0070                            ?_Write_b_eep 0060  
                            ?_putsUSART 0061                         fifo_read@nbytes 0064  
                            sprintf@idx 0081                   hexStringToBytes@inhex 0067  
                              calcCRC@j 006F                                calcCRC@p 006C  
                            strcat@from 0062                        __size_of_isdigit 0020  
                       ___lwdiv@divisor 0062                         ___lwdiv@counter 0064  
                              __ptext10 211E                                __ptext11 0FA2  
                              __ptext20 11D0                                __ptext12 277A  
                              __ptext21 180E                                __ptext13 137C  
                              __ptext30 2292                                __ptext22 53BE  
                              __ptext14 1E78                                __ptext31 15D0  
                              __ptext23 2A54                                __ptext15 1DD8  
                              __ptext40 36BA                                __ptext32 2358  
                              __ptext24 14D8                                __ptext16 1104  
                              __ptext41 2B54                                __ptext33 2068  
                              __ptext25 2864                                __ptext17 30F2  
                              __ptext50 133C                                __ptext42 1B74  
                              __ptext34 1208                                __ptext26 10D6  
                              __ptext18 33A4                                __ptext51 4350  
                              __ptext43 1402                                __ptext35 3236  
                              __ptext27 2D6E                                __ptext19 1684  
                              __ptext60 1AE2                                __ptext52 0FA0  
                              __ptext44 13BE                                __ptext36 106A  
                              __ptext28 1C06                                __ptext61 1198  
                              __ptext53 1FC0                                __ptext45 1746  
                              __ptext37 10A8                                __ptext29 295A  
                              __ptext70 1578                                __ptext62 1D38  
                              __ptext54 24F0                                __ptext46 196A  
                              __ptext38 3858                                __ptext71 0FEA  
                              __ptext63 1242                                __ptext55 4C7E  
                              __ptext47 1280                                __ptext39 45E4  
                              __ptext80 0FD8                                __ptext72 1446  
                              __ptext64 148E                                __ptext56 1132  
                              __ptext48 17A8                                __ptext81 0FC6  
                              __ptext73 19E2                                __ptext65 0FAC  
                              __ptext57 16E4                                __ptext49 0FFE  
                              __ptext90 102E                                __ptext82 12FC  
                              __ptext74 104C                                __ptext66 2420  
                              __ptext58 18F4                                __ptext75 1628  
                              __ptext67 1164                                __ptext59 1088  
                              __ptext84 0FB4                                __ptext76 3D92  
                              __ptext68 0FA6                                __ptext85 1F18  
                              __ptext77 2C5A                                __ptext69 1A62  
                              __ptext86 4144                                __ptext78 3F66  
                              __ptext87 2FB8                                __ptext79 1014  
                              __ptext88 187E                                __ptext89 2E8C  
              receiveSendEventCANAL@dlc 0080                receiveSendEventCANAL@crc 0081  
                        printMDF@nodeid 00C1                           ?_getVSCPFrame 0073  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C5                     __end_of_printBinary 1522  
                         __size_of_crc8 0038                           __size_of_atoi 00F8  
                         __size_of_main 01BE                           __size_of_init 0048  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 48AC                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066                           init_app_ram@i 0079  
            __size_of_sendVSCPDriverAck 0092          receiveSendMultiEventCANAL@data 0073  
                ?_receiveSendEventSLCAN 0001                _printNodeFirmwareVersion 2292  
                   ECANSendMessage@data 0070                ECANSendMessage@tempBSEL0 008A  
                              _printMDF 1C06                               printMDF@i 00C5  
                             printMDF@p 00C3                            ?_getCANFrame 006E  
                   ECANSendMessage@mode 0087                     ECANSendMessage@temp 008D  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 0073  
                              atoi@sign 006A                             ??_findNodes 00C7  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0066  
                           ??_fifo_read 0066                                _vscpData 01E5  
         __size_of_readRegisterExtended 00F6                                main@argc 00E0  
                              main@argv 00E2                                _vscpSize 003E  
                    ??__ECANPointBuffer 0004                                _vscpType 003F  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A6  
                              _strnicmp 17A8                        init_app_eeprom@i 0064  
           writeRegisterExtended@nodeid 00C3                           Interrupt@fail 0021  
                       _serialInputFifo 01DD                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 0012  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 4144  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 0079  
             __size_of_hexStringToBytes 009A               __size_of_checkCANBusState 001E  
                       sendVSCPFrame@id 00B4                                intlevel1 0000  
                             sprintf@ap 0088                               sprintf@sp 0076  
                  hexStringToBytes@size 0066                               strchr@chr 0062  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 008A  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 000A                        ___lldiv@dividend 0060  
                           ??_setFilter 0066                           printMDF@value 00C2  
   __size_of_receiveSendMultiEventCANAL 0166                           fifo_getFree@f 0001  
                             strcspn@s1 0066                               strcspn@s2 0068  
    receiveSendMultiEventCANAL@msgcount 007B                 ECANSendMessage@msgFlags 0073  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008F                       ??_init_app_eeprom 0064  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 00C1  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 21D4                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0072                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 0010                             ??_putsUSART 0063  
                              utoa@base 006B                                ultoa@buf 0076  
                              ultoa@val 0078                           fifo_init@size 0064  
                              sprintf@c 0091                                sprintf@f 0078  
                   hexStringToBytes@buf 0064                                strcat@cp 0064  
                   hexStringToBytes@len 006C                          _doModeVscpNode 0FA4  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 45E4  
                ECANSendMessage@buffers 0088                        ___lldiv@quotient 0069  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 102E  
                  _vscp_restoreDefaults 0FAC                            printGUID@buf 00C2  
                              strcpy@cp 0064                                strlen@cp 0062  
                              strcpy@to 0060                         ___lwmod@counter 0064  
                              strcspn@i 006A                                toupper@c 0060  
                           _printBinary 14D8                                strtok@s1 006C  
                              strtok@s2 006E                                strspn@s1 0066  
                              strspn@s2 0068                              _RXM1EXIDEN 0078EB  
                              strtok@sp 0024                  ECANSendMessage@tempPtr 008B  
                           _printErrors 45E4                            fifo_init@buf 0062  
                          fifo_read@buf 0062           sendVSCPDriverCommandReply@crc 0071  
                          __CANIDToRegs 2C5A                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 0026               readRegisterExtended@value 00BD  
              _sendVSCPModeCapabilities 211E                __size_of_ECANSendMessage 016E  
