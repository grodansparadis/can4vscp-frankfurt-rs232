

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Wed Oct 07 23:19:56 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   113                           	psect	pa_nodes,global,class=CODE,delta=1
   114  0000                     tblptru	equ	0xFF8
   115                           tblptrh	equ	0xFF7
   116                           tblptrl	equ	0xFF6
   117                           tablat	equ	0xFF5
   118                           prodh	equ	0xFF4
   119                           prodl	equ	0xFF3
   120                           intcon	equ	0xFF2
   121                           indf0	equ	0xFEF
   122                           fsr0h	equ	0xFEA
   123                           fsr0l	equ	0xFE9
   124                           wreg	equ	0xFE8
   125                           indf1	equ	0xFE7
   126                           postinc1	equ	0xFE6
   127                           postdec1	equ	0xFE5
   128                           fsr1h	equ	0xFE2
   129                           fsr1l	equ	0xFE1
   130                           indf2	equ	0xFDF
   131                           postinc2	equ	0xFDE
   132                           postdec2	equ	0xFDD
   133                           plusw2	equ	0xFDB
   134                           fsr2h	equ	0xFDA
   135                           fsr2l	equ	0xFD9
   136                           status	equ	0xFD8
   137                           
   138                           	psect	mediumconst
   139  006B3C                     __pmediumconst:
   140                           	opt stack 0
   141  006B3C                     _octpowers:
   142                           	opt stack 0
   143  006B3C  0001               	dw	1
   144  006B3E  0000               	dw	0
   145  006B40  0008               	dw	8
   146  006B42  0000               	dw	0
   147  006B44  0040               	dw	64
   148  006B46  0000               	dw	0
   149  006B48  0200               	dw	512
   150  006B4A  0000               	dw	0
   151  006B4C  1000               	dw	4096
   152  006B4E  0000               	dw	0
   153  006B50  8000               	dw	32768
   154  006B52  0000               	dw	0
   155  006B54  0000               	dw	0
   156  006B56  0004               	dw	4
   157  006B58  0000               	dw	0
   158  006B5A  0020               	dw	32
   159  006B5C  0000               	dw	0
   160  006B5E  0100               	dw	256
   161  006B60  0000               	dw	0
   162  006B62  0800               	dw	2048
   163  006B64  0000               	dw	0
   164  006B66  4000               	dw	16384
   165  006B68  0000               	dw	0
   166  006B6A  0000               	dw	0
   167  006B6C                     __end_of_octpowers:
   168                           	opt stack 0
   169  006B6C                     _dpowers:
   170                           	opt stack 0
   171  006B6C  0001               	dw	1
   172  006B6E  0000               	dw	0
   173  006B70  000A               	dw	10
   174  006B72  0000               	dw	0
   175  006B74  0064               	dw	100
   176  006B76  0000               	dw	0
   177  006B78  03E8               	dw	1000
   178  006B7A  0000               	dw	0
   179  006B7C  2710               	dw	10000
   180  006B7E  0000               	dw	0
   181  006B80  86A0               	dw	34464
   182  006B82  0001               	dw	1
   183  006B84  4240               	dw	16960
   184  006B86  000F               	dw	15
   185  006B88  9680               	dw	38528
   186  006B8A  0098               	dw	152
   187  006B8C  E100               	dw	57600
   188  006B8E  05F5               	dw	1525
   189  006B90  CA00               	dw	51712
   190  006B92  3B9A               	dw	15258
   191  006B94                     __end_of_dpowers:
   192                           	opt stack 0
   193  006B94                     _hexpowers:
   194                           	opt stack 0
   195  006B94  0001               	dw	1
   196  006B96  0000               	dw	0
   197  006B98  0010               	dw	16
   198  006B9A  0000               	dw	0
   199  006B9C  0100               	dw	256
   200  006B9E  0000               	dw	0
   201  006BA0  1000               	dw	4096
   202  006BA2  0000               	dw	0
   203  006BA4  0000               	dw	0
   204  006BA6  0001               	dw	1
   205  006BA8  0000               	dw	0
   206  006BAA  0010               	dw	16
   207  006BAC  0000               	dw	0
   208  006BAE  0100               	dw	256
   209  006BB0  0000               	dw	0
   210  006BB2  1000               	dw	4096
   211  006BB4                     __end_of_hexpowers:
   212                           	opt stack 0
   213  0000                     _BRGCON1	set	3952
   214  0000                     _BRGCON2	set	3953
   215  0000                     _BRGCON3	set	3954
   216  0000                     _BSEL0	set	3576
   217  0000                     _CANCON	set	3951
   218  0000                     _CIOCON	set	3955
   219  0000                     _COMSTATbits	set	3956
   220  0000                     _ECANCON	set	3959
   221  0000                     _EEADR	set	4009
   222  0000                     _EECON1bits	set	4006
   223  0000                     _EECON2	set	4007
   224  0000                     _EEDATA	set	4008
   225  0000                     _INTCONbits	set	4082
   226  0000                     _MSEL0	set	3568
   227  0000                     _MSEL1	set	3569
   228  0000                     _MSEL2	set	3570
   229  0000                     _OSCCONbits	set	4051
   230  0000                     _OSCTUNEbits	set	3995
   231  0000                     _PIE1bits	set	3997
   232  0000                     _PIE2bits	set	4000
   233  0000                     _PIR1bits	set	3998
   234  0000                     _PIR2bits	set	4001
   235  0000                     _RCREG	set	4014
   236  0000                     _RCSTA	set	4011
   237  0000                     _RCSTAbits	set	4011
   238  0000                     _RXB1CONbits	set	3920
   239  0000                     _RXERRCNT	set	3957
   240  0000                     _RXF0EIDH	set	3842
   241  0000                     _RXF0EIDL	set	3843
   242  0000                     _RXF0SIDH	set	3840
   243  0000                     _RXF0SIDL	set	3841
   244  0000                     _RXF10EIDH	set	3446
   245  0000                     _RXF10EIDL	set	3447
   246  0000                     _RXF10SIDH	set	3444
   247  0000                     _RXF10SIDL	set	3445
   248  0000                     _RXF11EIDH	set	3450
   249  0000                     _RXF11EIDL	set	3451
   250  0000                     _RXF11SIDH	set	3448
   251  0000                     _RXF11SIDL	set	3449
   252  0000                     _RXF12EIDH	set	3458
   253  0000                     _RXF12EIDL	set	3459
   254  0000                     _RXF12SIDH	set	3456
   255  0000                     _RXF12SIDL	set	3457
   256  0000                     _RXF13EIDH	set	3462
   257  0000                     _RXF13EIDL	set	3463
   258  0000                     _RXF13SIDH	set	3460
   259  0000                     _RXF13SIDL	set	3461
   260  0000                     _RXF14EIDH	set	3466
   261  0000                     _RXF14EIDL	set	3467
   262  0000                     _RXF14SIDH	set	3464
   263  0000                     _RXF14SIDL	set	3465
   264  0000                     _RXF15EIDH	set	3474
   265  0000                     _RXF15EIDL	set	3475
   266  0000                     _RXF15SIDH	set	3472
   267  0000                     _RXF15SIDL	set	3473
   268  0000                     _RXF1EIDH	set	3846
   269  0000                     _RXF1EIDL	set	3847
   270  0000                     _RXF1SIDH	set	3844
   271  0000                     _RXF1SIDL	set	3845
   272  0000                     _RXF2EIDH	set	3850
   273  0000                     _RXF2EIDL	set	3851
   274  0000                     _RXF2SIDH	set	3848
   275  0000                     _RXF2SIDL	set	3849
   276  0000                     _RXF3EIDH	set	3854
   277  0000                     _RXF3EIDL	set	3855
   278  0000                     _RXF3SIDH	set	3852
   279  0000                     _RXF3SIDL	set	3853
   280  0000                     _RXF4EIDH	set	3858
   281  0000                     _RXF4EIDL	set	3859
   282  0000                     _RXF4SIDH	set	3856
   283  0000                     _RXF4SIDL	set	3857
   284  0000                     _RXF5EIDH	set	3862
   285  0000                     _RXF5EIDL	set	3863
   286  0000                     _RXF5SIDH	set	3860
   287  0000                     _RXF5SIDL	set	3861
   288  0000                     _RXF6EIDH	set	3426
   289  0000                     _RXF6EIDL	set	3427
   290  0000                     _RXF6SIDH	set	3424
   291  0000                     _RXF6SIDL	set	3425
   292  0000                     _RXF7EIDH	set	3430
   293  0000                     _RXF7EIDL	set	3431
   294  0000                     _RXF7SIDH	set	3428
   295  0000                     _RXF7SIDL	set	3429
   296  0000                     _RXF8EIDH	set	3434
   297  0000                     _RXF8EIDL	set	3435
   298  0000                     _RXF8SIDH	set	3432
   299  0000                     _RXF8SIDL	set	3433
   300  0000                     _RXF9EIDH	set	3442
   301  0000                     _RXF9EIDL	set	3443
   302  0000                     _RXF9SIDH	set	3440
   303  0000                     _RXF9SIDL	set	3441
   304  0000                     _RXFBCON0	set	3552
   305  0000                     _RXFBCON1	set	3553
   306  0000                     _RXFBCON2	set	3554
   307  0000                     _RXFBCON3	set	3555
   308  0000                     _RXFBCON4	set	3556
   309  0000                     _RXFBCON5	set	3557
   310  0000                     _RXFBCON6	set	3558
   311  0000                     _RXFBCON7	set	3559
   312  0000                     _RXFCON0	set	3540
   313  0000                     _RXFCON1	set	3541
   314  0000                     _RXM0EIDH	set	3866
   315  0000                     _RXM0EIDL	set	3867
   316  0000                     _RXM0SIDL	set	3865
   317  0000                     _RXM1EIDH	set	3870
   318  0000                     _RXM1EIDL	set	3871
   319  0000                     _RXM1SIDL	set	3869
   320  0000                     _SPBRG	set	4015
   321  0000                     _SPBRGH	set	4016
   322  0000                     _T0CON	set	4053
   323  0000                     _T0CONbits	set	4053
   324  0000                     _T3CON	set	4017
   325  0000                     _T3CONbits	set	4017
   326  0000                     _TMR0H	set	4055
   327  0000                     _TMR0L	set	4054
   328  0000                     _TMR3H	set	4019
   329  0000                     _TMR3L	set	4018
   330  0000                     _TRISBbits	set	3987
   331  0000                     _TRISCbits	set	3988
   332  0000                     _TXERRCNT	set	3958
   333  0000                     _TXREG	set	4013
   334  0000                     _TXSTA	set	4012
   335  0000                     _TXSTAbits	set	4012
   336  0000                     _B0RXFUL	set	28935
   337  0000                     _B0TXEN	set	28610
   338  0000                     _B1RXFUL	set	29063
   339  0000                     _B1TXEN	set	28611
   340  0000                     _B2RXFUL	set	29191
   341  0000                     _B2TXEN	set	28612
   342  0000                     _B3RXFUL	set	29319
   343  0000                     _B3TXEN	set	28613
   344  0000                     _B4RXFUL	set	29447
   345  0000                     _B4TXEN	set	28614
   346  0000                     _B5RXFUL	set	29575
   347  0000                     _B5TXEN	set	28615
   348  0000                     _ERRIE	set	32029
   349  0000                     _ERRIF	set	32037
   350  0000                     _FIFOEMPTY	set	31655
   351  0000                     _IRXIF	set	32039
   352  0000                     _LATC1	set	31833
   353  0000                     _MDSEL0	set	31678
   354  0000                     _MDSEL1	set	31679
   355  0000                     _PEIE	set	32662
   356  0000                     _RCIE	set	31981
   357  0000                     _RCIF	set	31989
   358  0000                     _RCIP	set	31997
   359  0000                     _RXB0FILHIT0	set	31488
   360  0000                     _RXB0FUL	set	31495
   361  0000                     _RXB0IF	set	32032
   362  0000                     _RXB0OVFL	set	31655
   363  0000                     _RXB1IF	set	32033
   364  0000                     _RXB1OVFL	set	31654
   365  0000                     _RXBnIE	set	32025
   366  0000                     _RXBnIF	set	32033
   367  0000                     _RXM0EXIDM	set	30923
   368  0000                     _RXM1EXIDEN	set	30955
   369  0000                     _B0CON	set	3616
   370  0000                     _B1CON	set	3632
   371  0000                     _B2CON	set	3648
   372  0000                     _B3CON	set	3664
   373  0000                     _B4CON	set	3680
   374  0000                     _B5CON	set	3696
   375  0000                     _RXB0CON	set	3936
   376  0000                     _RXB1CON	set	3920
   377  0000                     _RXM0SIDH	set	3864
   378  0000                     _RXM1SIDH	set	3868
   379  0000                     _TXB0CON	set	3904
   380  0000                     _TXB1CON	set	3888
   381  0000                     _TXB2CON	set	3872
   382  006BB4                     __stringdata:
   383                           	opt stack 0
   384  006BB4                     STR_267:
   385                           
   386                           ; BSR set to: 1
   387  006BB4  20                 	db	32
   388  006BB5  20                 	db	32
   389  006BB6  20                 	db	32
   390  006BB7  20                 	db	32
   391  006BB8  20                 	db	32
   392  006BB9  20                 	db	32
   393  006BBA  20                 	db	32
   394  006BBB  20                 	db	32
   395  006BBC  20                 	db	32
   396  006BBD  46                 	db	70	;'F'
   397  006BBE  6F                 	db	111	;'o'
   398  006BBF  72                 	db	114	;'r'
   399  006BC0  6D                 	db	109	;'m'
   400  006BC1  61                 	db	97	;'a'
   401  006BC2  74                 	db	116	;'t'
   402  006BC3  3A                 	db	58	;':'
   403  006BC4  20                 	db	32
   404  006BC5  66                 	db	102	;'f'
   405  006BC6  69                 	db	105	;'i'
   406  006BC7  6C                 	db	108	;'l'
   407  006BC8  74                 	db	116	;'t'
   408  006BC9  65                 	db	101	;'e'
   409  006BCA  72                 	db	114	;'r'
   410  006BCB  20                 	db	32
   411  006BCC  66                 	db	102	;'f'
   412  006BCD  69                 	db	105	;'i'
   413  006BCE  6C                 	db	108	;'l'
   414  006BCF  74                 	db	116	;'t'
   415  006BD0  65                 	db	101	;'e'
   416  006BD1  72                 	db	114	;'r'
   417  006BD2  6E                 	db	110	;'n'
   418  006BD3  6F                 	db	111	;'o'
   419  006BD4  2C                 	db	44
   420  006BD5  70                 	db	112	;'p'
   421  006BD6  72                 	db	114	;'r'
   422  006BD7  69                 	db	105	;'i'
   423  006BD8  6F                 	db	111	;'o'
   424  006BD9  2C                 	db	44
   425  006BDA  63                 	db	99	;'c'
   426  006BDB  6C                 	db	108	;'l'
   427  006BDC  61                 	db	97	;'a'
   428  006BDD  73                 	db	115	;'s'
   429  006BDE  73                 	db	115	;'s'
   430  006BDF  2C                 	db	44
   431  006BE0  74                 	db	116	;'t'
   432  006BE1  79                 	db	121	;'y'
   433  006BE2  70                 	db	112	;'p'
   434  006BE3  65                 	db	101	;'e'
   435  006BE4  2C                 	db	44
   436  006BE5  6E                 	db	110	;'n'
   437  006BE6  6F                 	db	111	;'o'
   438  006BE7  64                 	db	100	;'d'
   439  006BE8  65                 	db	101	;'e'
   440  006BE9  69                 	db	105	;'i'
   441  006BEA  64                 	db	100	;'d'
   442  006BEB  20                 	db	32
   443  006BEC  20                 	db	32
   444  006BED  28                 	db	40
   445  006BEE  66                 	db	102	;'f'
   446  006BEF  69                 	db	105	;'i'
   447  006BF0  6C                 	db	108	;'l'
   448  006BF1  74                 	db	116	;'t'
   449  006BF2  65                 	db	101	;'e'
   450  006BF3  72                 	db	114	;'r'
   451  006BF4  6E                 	db	110	;'n'
   452  006BF5  6F                 	db	111	;'o'
   453  006BF6  20                 	db	32
   454  006BF7  3D                 	db	61	;'='
   455  006BF8  20                 	db	32
   456  006BF9  30                 	db	48	;'0'
   457  006BFA  2D                 	db	45
   458  006BFB  31                 	db	49	;'1'
   459  006BFC  35                 	db	53	;'5'
   460  006BFD  29                 	db	41
   461  006BFE  2E                 	db	46
   462  006BFF  0D                 	db	13
   463  006C00  0A                 	db	10
   464  006C01  00                 	db	0
   465  006C02                     STR_265:
   466                           
   467                           ; BSR set to: 1
   468  006C02  49                 	db	73	;'I'
   469  006C03  4E                 	db	78	;'N'
   470  006C04  46                 	db	70	;'F'
   471  006C05  4F                 	db	79	;'O'
   472  006C06  20                 	db	32
   473  006C07  2D                 	db	45
   474  006C08  20                 	db	32
   475  006C09  47                 	db	71	;'G'
   476  006C0A  65                 	db	101	;'e'
   477  006C0B  74                 	db	116	;'t'
   478  006C0C  20                 	db	32
   479  006C0D  69                 	db	105	;'i'
   480  006C0E  6E                 	db	110	;'n'
   481  006C0F  66                 	db	102	;'f'
   482  006C10  6F                 	db	111	;'o'
   483  006C11  20                 	db	32
   484  006C12  61                 	db	97	;'a'
   485  006C13  62                 	db	98	;'b'
   486  006C14  6F                 	db	111	;'o'
   487  006C15  75                 	db	117	;'u'
   488  006C16  74                 	db	116	;'t'
   489  006C17  20                 	db	32
   490  006C18  61                 	db	97	;'a'
   491  006C19  6E                 	db	110	;'n'
   492  006C1A  20                 	db	32
   493  006C1B  65                 	db	101	;'e'
   494  006C1C  78                 	db	120	;'x'
   495  006C1D  69                 	db	105	;'i'
   496  006C1E  73                 	db	115	;'s'
   497  006C1F  74                 	db	116	;'t'
   498  006C20  65                 	db	101	;'e'
   499  006C21  6E                 	db	110	;'n'
   500  006C22  74                 	db	116	;'t'
   501  006C23  20                 	db	32
   502  006C24  6E                 	db	110	;'n'
   503  006C25  6F                 	db	111	;'o'
   504  006C26  64                 	db	100	;'d'
   505  006C27  65                 	db	101	;'e'
   506  006C28  20                 	db	32
   507  006C29  6F                 	db	111	;'o'
   508  006C2A  6E                 	db	110	;'n'
   509  006C2B  20                 	db	32
   510  006C2C  74                 	db	116	;'t'
   511  006C2D  68                 	db	104	;'h'
   512  006C2E  65                 	db	101	;'e'
   513  006C2F  20                 	db	32
   514  006C30  62                 	db	98	;'b'
   515  006C31  75                 	db	117	;'u'
   516  006C32  73                 	db	115	;'s'
   517  006C33  20                 	db	32
   518  006C34  28                 	db	40
   519  006C35  46                 	db	70	;'F'
   520  006C36  6F                 	db	111	;'o'
   521  006C37  72                 	db	114	;'r'
   522  006C38  6D                 	db	109	;'m'
   523  006C39  61                 	db	97	;'a'
   524  006C3A  74                 	db	116	;'t'
   525  006C3B  3A                 	db	58	;':'
   526  006C3C  20                 	db	32
   527  006C3D  69                 	db	105	;'i'
   528  006C3E  6E                 	db	110	;'n'
   529  006C3F  66                 	db	102	;'f'
   530  006C40  6F                 	db	111	;'o'
   531  006C41  20                 	db	32
   532  006C42  6E                 	db	110	;'n'
   533  006C43  69                 	db	105	;'i'
   534  006C44  63                 	db	99	;'c'
   535  006C45  6B                 	db	107	;'k'
   536  006C46  6E                 	db	110	;'n'
   537  006C47  61                 	db	97	;'a'
   538  006C48  6D                 	db	109	;'m'
   539  006C49  65                 	db	101	;'e'
   540  006C4A  29                 	db	41
   541  006C4B  2E                 	db	46
   542  006C4C  0D                 	db	13
   543  006C4D  0A                 	db	10
   544  006C4E  00                 	db	0
   545  006C4F                     STR_263:
   546                           
   547                           ; BSR set to: 1
   548  006C4F  52                 	db	82	;'R'
   549  006C50  52                 	db	82	;'R'
   550  006C51  45                 	db	69	;'E'
   551  006C52  47                 	db	71	;'G'
   552  006C53  20                 	db	32
   553  006C54  2D                 	db	45
   554  006C55  20                 	db	32
   555  006C56  52                 	db	82	;'R'
   556  006C57  65                 	db	101	;'e'
   557  006C58  61                 	db	97	;'a'
   558  006C59  64                 	db	100	;'d'
   559  006C5A  20                 	db	32
   560  006C5B  72                 	db	114	;'r'
   561  006C5C  65                 	db	101	;'e'
   562  006C5D  67                 	db	103	;'g'
   563  006C5E  69                 	db	105	;'i'
   564  006C5F  73                 	db	115	;'s'
   565  006C60  74                 	db	116	;'t'
   566  006C61  65                 	db	101	;'e'
   567  006C62  72                 	db	114	;'r'
   568  006C63  28                 	db	40
   569  006C64  73                 	db	115	;'s'
   570  006C65  29                 	db	41
   571  006C66  20                 	db	32
   572  006C67  6F                 	db	111	;'o'
   573  006C68  66                 	db	102	;'f'
   574  006C69  20                 	db	32
   575  006C6A  6E                 	db	110	;'n'
   576  006C6B  6F                 	db	111	;'o'
   577  006C6C  64                 	db	100	;'d'
   578  006C6D  65                 	db	101	;'e'
   579  006C6E  20                 	db	32
   580  006C6F  28                 	db	40
   581  006C70  46                 	db	70	;'F'
   582  006C71  6F                 	db	111	;'o'
   583  006C72  72                 	db	114	;'r'
   584  006C73  6D                 	db	109	;'m'
   585  006C74  61                 	db	97	;'a'
   586  006C75  74                 	db	116	;'t'
   587  006C76  3A                 	db	58	;':'
   588  006C77  20                 	db	32
   589  006C78  72                 	db	114	;'r'
   590  006C79  72                 	db	114	;'r'
   591  006C7A  65                 	db	101	;'e'
   592  006C7B  67                 	db	103	;'g'
   593  006C7C  20                 	db	32
   594  006C7D  6E                 	db	110	;'n'
   595  006C7E  6F                 	db	111	;'o'
   596  006C7F  64                 	db	100	;'d'
   597  006C80  65                 	db	101	;'e'
   598  006C81  69                 	db	105	;'i'
   599  006C82  64                 	db	100	;'d'
   600  006C83  20                 	db	32
   601  006C84  5B                 	db	91	;'['
   602  006C85  70                 	db	112	;'p'
   603  006C86  61                 	db	97	;'a'
   604  006C87  67                 	db	103	;'g'
   605  006C88  65                 	db	101	;'e'
   606  006C89  3A                 	db	58	;':'
   607  006C8A  5D                 	db	93	;']'
   608  006C8B  72                 	db	114	;'r'
   609  006C8C  65                 	db	101	;'e'
   610  006C8D  67                 	db	103	;'g'
   611  006C8E  20                 	db	32
   612  006C8F  5B                 	db	91	;'['
   613  006C90  63                 	db	99	;'c'
   614  006C91  6F                 	db	111	;'o'
   615  006C92  75                 	db	117	;'u'
   616  006C93  6E                 	db	110	;'n'
   617  006C94  74                 	db	116	;'t'
   618  006C95  5D                 	db	93	;']'
   619  006C96  29                 	db	41
   620  006C97  2E                 	db	46
   621  006C98  0D                 	db	13
   622  006C99  0A                 	db	10
   623  006C9A  00                 	db	0
   624  006C9B                     STR_264:
   625                           
   626                           ; BSR set to: 1
   627  006C9B  57                 	db	87	;'W'
   628  006C9C  52                 	db	82	;'R'
   629  006C9D  45                 	db	69	;'E'
   630  006C9E  47                 	db	71	;'G'
   631  006C9F  20                 	db	32
   632  006CA0  2D                 	db	45
   633  006CA1  20                 	db	32
   634  006CA2  57                 	db	87	;'W'
   635  006CA3  72                 	db	114	;'r'
   636  006CA4  69                 	db	105	;'i'
   637  006CA5  74                 	db	116	;'t'
   638  006CA6  65                 	db	101	;'e'
   639  006CA7  20                 	db	32
   640  006CA8  72                 	db	114	;'r'
   641  006CA9  65                 	db	101	;'e'
   642  006CAA  67                 	db	103	;'g'
   643  006CAB  69                 	db	105	;'i'
   644  006CAC  73                 	db	115	;'s'
   645  006CAD  74                 	db	116	;'t'
   646  006CAE  65                 	db	101	;'e'
   647  006CAF  72                 	db	114	;'r'
   648  006CB0  20                 	db	32
   649  006CB1  6F                 	db	111	;'o'
   650  006CB2  66                 	db	102	;'f'
   651  006CB3  20                 	db	32
   652  006CB4  6E                 	db	110	;'n'
   653  006CB5  6F                 	db	111	;'o'
   654  006CB6  64                 	db	100	;'d'
   655  006CB7  65                 	db	101	;'e'
   656  006CB8  20                 	db	32
   657  006CB9  28                 	db	40
   658  006CBA  46                 	db	70	;'F'
   659  006CBB  6F                 	db	111	;'o'
   660  006CBC  72                 	db	114	;'r'
   661  006CBD  6D                 	db	109	;'m'
   662  006CBE  61                 	db	97	;'a'
   663  006CBF  74                 	db	116	;'t'
   664  006CC0  3A                 	db	58	;':'
   665  006CC1  20                 	db	32
   666  006CC2  77                 	db	119	;'w'
   667  006CC3  72                 	db	114	;'r'
   668  006CC4  65                 	db	101	;'e'
   669  006CC5  67                 	db	103	;'g'
   670  006CC6  20                 	db	32
   671  006CC7  6E                 	db	110	;'n'
   672  006CC8  6F                 	db	111	;'o'
   673  006CC9  64                 	db	100	;'d'
   674  006CCA  65                 	db	101	;'e'
   675  006CCB  69                 	db	105	;'i'
   676  006CCC  64                 	db	100	;'d'
   677  006CCD  20                 	db	32
   678  006CCE  5B                 	db	91	;'['
   679  006CCF  70                 	db	112	;'p'
   680  006CD0  61                 	db	97	;'a'
   681  006CD1  67                 	db	103	;'g'
   682  006CD2  65                 	db	101	;'e'
   683  006CD3  3A                 	db	58	;':'
   684  006CD4  5D                 	db	93	;']'
   685  006CD5  72                 	db	114	;'r'
   686  006CD6  65                 	db	101	;'e'
   687  006CD7  67                 	db	103	;'g'
   688  006CD8  20                 	db	32
   689  006CD9  63                 	db	99	;'c'
   690  006CDA  6F                 	db	111	;'o'
   691  006CDB  6E                 	db	110	;'n'
   692  006CDC  74                 	db	116	;'t'
   693  006CDD  65                 	db	101	;'e'
   694  006CDE  6E                 	db	110	;'n'
   695  006CDF  74                 	db	116	;'t'
   696  006CE0  29                 	db	41
   697  006CE1  2E                 	db	46
   698  006CE2  0D                 	db	13
   699  006CE3  0A                 	db	10
   700  006CE4  00                 	db	0
   701  006CE5                     STR_269:
   702                           
   703                           ; BSR set to: 1
   704  006CE5  20                 	db	32
   705  006CE6  20                 	db	32
   706  006CE7  20                 	db	32
   707  006CE8  20                 	db	32
   708  006CE9  20                 	db	32
   709  006CEA  20                 	db	32
   710  006CEB  20                 	db	32
   711  006CEC  46                 	db	70	;'F'
   712  006CED  6F                 	db	111	;'o'
   713  006CEE  72                 	db	114	;'r'
   714  006CEF  6D                 	db	109	;'m'
   715  006CF0  61                 	db	97	;'a'
   716  006CF1  74                 	db	116	;'t'
   717  006CF2  3A                 	db	58	;':'
   718  006CF3  20                 	db	32
   719  006CF4  6D                 	db	109	;'m'
   720  006CF5  61                 	db	97	;'a'
   721  006CF6  73                 	db	115	;'s'
   722  006CF7  6B                 	db	107	;'k'
   723  006CF8  20                 	db	32
   724  006CF9  6D                 	db	109	;'m'
   725  006CFA  61                 	db	97	;'a'
   726  006CFB  73                 	db	115	;'s'
   727  006CFC  6B                 	db	107	;'k'
   728  006CFD  6E                 	db	110	;'n'
   729  006CFE  6F                 	db	111	;'o'
   730  006CFF  2C                 	db	44
   731  006D00  70                 	db	112	;'p'
   732  006D01  72                 	db	114	;'r'
   733  006D02  69                 	db	105	;'i'
   734  006D03  6F                 	db	111	;'o'
   735  006D04  2C                 	db	44
   736  006D05  63                 	db	99	;'c'
   737  006D06  6C                 	db	108	;'l'
   738  006D07  61                 	db	97	;'a'
   739  006D08  73                 	db	115	;'s'
   740  006D09  73                 	db	115	;'s'
   741  006D0A  2C                 	db	44
   742  006D0B  74                 	db	116	;'t'
   743  006D0C  79                 	db	121	;'y'
   744  006D0D  70                 	db	112	;'p'
   745  006D0E  65                 	db	101	;'e'
   746  006D0F  2C                 	db	44
   747  006D10  6E                 	db	110	;'n'
   748  006D11  6F                 	db	111	;'o'
   749  006D12  64                 	db	100	;'d'
   750  006D13  65                 	db	101	;'e'
   751  006D14  69                 	db	105	;'i'
   752  006D15  64                 	db	100	;'d'
   753  006D16  20                 	db	32
   754  006D17  28                 	db	40
   755  006D18  6D                 	db	109	;'m'
   756  006D19  61                 	db	97	;'a'
   757  006D1A  73                 	db	115	;'s'
   758  006D1B  6B                 	db	107	;'k'
   759  006D1C  6E                 	db	110	;'n'
   760  006D1D  6F                 	db	111	;'o'
   761  006D1E  20                 	db	32
   762  006D1F  3D                 	db	61	;'='
   763  006D20  20                 	db	32
   764  006D21  30                 	db	48	;'0'
   765  006D22  20                 	db	32
   766  006D23  6F                 	db	111	;'o'
   767  006D24  72                 	db	114	;'r'
   768  006D25  20                 	db	32
   769  006D26  31                 	db	49	;'1'
   770  006D27  29                 	db	41
   771  006D28  2E                 	db	46
   772  006D29  0D                 	db	13
   773  006D2A  0A                 	db	10
   774  006D2B  00                 	db	0
   775  006D2C                     STR_279:
   776                           
   777                           ; BSR set to: 1
   778  006D2C  2D                 	db	45
   779  006D2D  2D                 	db	45
   780  006D2E  2D                 	db	45
   781  006D2F  2D                 	db	45
   782  006D30  2D                 	db	45
   783  006D31  2D                 	db	45
   784  006D32  2D                 	db	45
   785  006D33  2D                 	db	45
   786  006D34  2D                 	db	45
   787  006D35  2D                 	db	45
   788  006D36  2D                 	db	45
   789  006D37  2D                 	db	45
   790  006D38  2D                 	db	45
   791  006D39  2D                 	db	45
   792  006D3A  2D                 	db	45
   793  006D3B  2D                 	db	45
   794  006D3C  2D                 	db	45
   795  006D3D  2D                 	db	45
   796  006D3E  2D                 	db	45
   797  006D3F  2D                 	db	45
   798  006D40  2D                 	db	45
   799  006D41  2D                 	db	45
   800  006D42  2D                 	db	45
   801  006D43  2D                 	db	45
   802  006D44  2D                 	db	45
   803  006D45  2D                 	db	45
   804  006D46  2D                 	db	45
   805  006D47  2D                 	db	45
   806  006D48  2D                 	db	45
   807  006D49  2D                 	db	45
   808  006D4A  2D                 	db	45
   809  006D4B  2D                 	db	45
   810  006D4C  2D                 	db	45
   811  006D4D  2D                 	db	45
   812  006D4E  2D                 	db	45
   813  006D4F  2D                 	db	45
   814  006D50  2D                 	db	45
   815  006D51  2D                 	db	45
   816  006D52  2D                 	db	45
   817  006D53  2D                 	db	45
   818  006D54  2D                 	db	45
   819  006D55  2D                 	db	45
   820  006D56  2D                 	db	45
   821  006D57  2D                 	db	45
   822  006D58  2D                 	db	45
   823  006D59  2D                 	db	45
   824  006D5A  2D                 	db	45
   825  006D5B  2D                 	db	45
   826  006D5C  2D                 	db	45
   827  006D5D  2D                 	db	45
   828  006D5E  2D                 	db	45
   829  006D5F  2D                 	db	45
   830  006D60  2D                 	db	45
   831  006D61  2D                 	db	45
   832  006D62  2D                 	db	45
   833  006D63  2D                 	db	45
   834  006D64  2D                 	db	45
   835  006D65  2D                 	db	45
   836  006D66  2D                 	db	45
   837  006D67  2D                 	db	45
   838  006D68  2D                 	db	45
   839  006D69  2D                 	db	45
   840  006D6A  2D                 	db	45
   841  006D6B  2D                 	db	45
   842  006D6C  0D                 	db	13
   843  006D6D  0A                 	db	10
   844  006D6E  00                 	db	0
   845  006D6F                     STR_273:
   846                           
   847                           ; BSR set to: 1
   848  006D6F  20                 	db	32
   849  006D70  20                 	db	32
   850  006D71  20                 	db	32
   851  006D72  20                 	db	32
   852  006D73  52                 	db	82	;'R'
   853  006D74  57                 	db	87	;'W'
   854  006D75  54                 	db	84	;'T'
   855  006D76  49                 	db	73	;'I'
   856  006D77  4D                 	db	77	;'M'
   857  006D78  45                 	db	69	;'E'
   858  006D79  4F                 	db	79	;'O'
   859  006D7A  55                 	db	85	;'U'
   860  006D7B  54                 	db	84	;'T'
   861  006D7C  20                 	db	32
   862  006D7D  2D                 	db	45
   863  006D7E  20                 	db	32
   864  006D7F  53                 	db	83	;'S'
   865  006D80  65                 	db	101	;'e'
   866  006D81  74                 	db	116	;'t'
   867  006D82  20                 	db	32
   868  006D83  72                 	db	114	;'r'
   869  006D84  65                 	db	101	;'e'
   870  006D85  67                 	db	103	;'g'
   871  006D86  69                 	db	105	;'i'
   872  006D87  73                 	db	115	;'s'
   873  006D88  74                 	db	116	;'t'
   874  006D89  65                 	db	101	;'e'
   875  006D8A  72                 	db	114	;'r'
   876  006D8B  20                 	db	32
   877  006D8C  72                 	db	114	;'r'
   878  006D8D  65                 	db	101	;'e'
   879  006D8E  61                 	db	97	;'a'
   880  006D8F  64                 	db	100	;'d'
   881  006D90  2F                 	db	47
   882  006D91  77                 	db	119	;'w'
   883  006D92  72                 	db	114	;'r'
   884  006D93  69                 	db	105	;'i'
   885  006D94  74                 	db	116	;'t'
   886  006D95  65                 	db	101	;'e'
   887  006D96  20                 	db	32
   888  006D97  74                 	db	116	;'t'
   889  006D98  69                 	db	105	;'i'
   890  006D99  6D                 	db	109	;'m'
   891  006D9A  65                 	db	101	;'e'
   892  006D9B  6F                 	db	111	;'o'
   893  006D9C  75                 	db	117	;'u'
   894  006D9D  74                 	db	116	;'t'
   895  006D9E  2E                 	db	46
   896  006D9F  20                 	db	32
   897  006DA0  44                 	db	68	;'D'
   898  006DA1  65                 	db	101	;'e'
   899  006DA2  66                 	db	102	;'f'
   900  006DA3  61                 	db	97	;'a'
   901  006DA4  75                 	db	117	;'u'
   902  006DA5  6C                 	db	108	;'l'
   903  006DA6  74                 	db	116	;'t'
   904  006DA7  3D                 	db	61	;'='
   905  006DA8  32                 	db	50	;'2'
   906  006DA9  30                 	db	48	;'0'
   907  006DAA  20                 	db	32
   908  006DAB  6D                 	db	109	;'m'
   909  006DAC  73                 	db	115	;'s'
   910  006DAD  20                 	db	32
   911  006DAE  2E                 	db	46
   912  006DAF  0D                 	db	13
   913  006DB0  0A                 	db	10
   914  006DB1  00                 	db	0
   915  006DB2                     STR_107:
   916                           
   917                           ; BSR set to: 1
   918  006DB2  2D                 	db	45
   919  006DB3  45                 	db	69	;'E'
   920  006DB4  52                 	db	82	;'R'
   921  006DB5  52                 	db	82	;'R'
   922  006DB6  4F                 	db	79	;'O'
   923  006DB7  52                 	db	82	;'R'
   924  006DB8  20                 	db	32
   925  006DB9  2D                 	db	45
   926  006DBA  20                 	db	32
   927  006DBB  46                 	db	70	;'F'
   928  006DBC  69                 	db	105	;'i'
   929  006DBD  6C                 	db	108	;'l'
   930  006DBE  74                 	db	116	;'t'
   931  006DBF  65                 	db	101	;'e'
   932  006DC0  72                 	db	114	;'r'
   933  006DC1  20                 	db	32
   934  006DC2  6E                 	db	110	;'n'
   935  006DC3  75                 	db	117	;'u'
   936  006DC4  6D                 	db	109	;'m'
   937  006DC5  62                 	db	98	;'b'
   938  006DC6  65                 	db	101	;'e'
   939  006DC7  72                 	db	114	;'r'
   940  006DC8  20                 	db	32
   941  006DC9  63                 	db	99	;'c'
   942  006DCA  61                 	db	97	;'a'
   943  006DCB  6E                 	db	110	;'n'
   944  006DCC  20                 	db	32
   945  006DCD  6F                 	db	111	;'o'
   946  006DCE  6E                 	db	110	;'n'
   947  006DCF  6C                 	db	108	;'l'
   948  006DD0  79                 	db	121	;'y'
   949  006DD1  20                 	db	32
   950  006DD2  62                 	db	98	;'b'
   951  006DD3  65                 	db	101	;'e'
   952  006DD4  20                 	db	32
   953  006DD5  73                 	db	115	;'s'
   954  006DD6  65                 	db	101	;'e'
   955  006DD7  74                 	db	116	;'t'
   956  006DD8  20                 	db	32
   957  006DD9  74                 	db	116	;'t'
   958  006DDA  6F                 	db	111	;'o'
   959  006DDB  20                 	db	32
   960  006DDC  61                 	db	97	;'a'
   961  006DDD  20                 	db	32
   962  006DDE  76                 	db	118	;'v'
   963  006DDF  61                 	db	97	;'a'
   964  006DE0  6C                 	db	108	;'l'
   965  006DE1  75                 	db	117	;'u'
   966  006DE2  65                 	db	101	;'e'
   967  006DE3  20                 	db	32
   968  006DE4  62                 	db	98	;'b'
   969  006DE5  65                 	db	101	;'e'
   970  006DE6  74                 	db	116	;'t'
   971  006DE7  77                 	db	119	;'w'
   972  006DE8  65                 	db	101	;'e'
   973  006DE9  65                 	db	101	;'e'
   974  006DEA  6E                 	db	110	;'n'
   975  006DEB  20                 	db	32
   976  006DEC  30                 	db	48	;'0'
   977  006DED  2D                 	db	45
   978  006DEE  31                 	db	49	;'1'
   979  006DEF  35                 	db	53	;'5'
   980  006DF0  2E                 	db	46
   981  006DF1  0D                 	db	13
   982  006DF2  0A                 	db	10
   983  006DF3  00                 	db	0
   984  006DF4                     STR_276:
   985                           
   986                           ; BSR set to: 1
   987  006DF4  20                 	db	32
   988  006DF5  20                 	db	32
   989  006DF6  20                 	db	32
   990  006DF7  20                 	db	32
   991  006DF8  4D                 	db	77	;'M'
   992  006DF9  4F                 	db	79	;'O'
   993  006DFA  44                 	db	68	;'D'
   994  006DFB  45                 	db	69	;'E'
   995  006DFC  20                 	db	32
   996  006DFD  2D                 	db	45
   997  006DFE  20                 	db	32
   998  006DFF  53                 	db	83	;'S'
   999  006E00  65                 	db	101	;'e'
  1000  006E01  74                 	db	116	;'t'
  1001  006E02  20                 	db	32
  1002  006E03  61                 	db	97	;'a'
  1003  006E04  64                 	db	100	;'d'
  1004  006E05  61                 	db	97	;'a'
  1005  006E06  70                 	db	112	;'p'
  1006  006E07  74                 	db	116	;'t'
  1007  006E08  65                 	db	101	;'e'
  1008  006E09  72                 	db	114	;'r'
  1009  006E0A  20                 	db	32
  1010  006E0B  6D                 	db	109	;'m'
  1011  006E0C  6F                 	db	111	;'o'
  1012  006E0D  64                 	db	100	;'d'
  1013  006E0E  65                 	db	101	;'e'
  1014  006E0F  20                 	db	32
  1015  006E10  74                 	db	116	;'t'
  1016  006E11  68                 	db	104	;'h'
  1017  006E12  61                 	db	97	;'a'
  1018  006E13  74                 	db	116	;'t'
  1019  006E14  20                 	db	32
  1020  006E15  73                 	db	115	;'s'
  1021  006E16  68                 	db	104	;'h'
  1022  006E17  6F                 	db	111	;'o'
  1023  006E18  75                 	db	117	;'u'
  1024  006E19  6C                 	db	108	;'l'
  1025  006E1A  64                 	db	100	;'d'
  1026  006E1B  20                 	db	32
  1027  006E1C  62                 	db	98	;'b'
  1028  006E1D  65                 	db	101	;'e'
  1029  006E1E  20                 	db	32
  1030  006E1F  75                 	db	117	;'u'
  1031  006E20  73                 	db	115	;'s'
  1032  006E21  65                 	db	101	;'e'
  1033  006E22  64                 	db	100	;'d'
  1034  006E23  20                 	db	32
  1035  006E24  6F                 	db	111	;'o'
  1036  006E25  6E                 	db	110	;'n'
  1037  006E26  20                 	db	32
  1038  006E27  73                 	db	115	;'s'
  1039  006E28  74                 	db	116	;'t'
  1040  006E29  61                 	db	97	;'a'
  1041  006E2A  72                 	db	114	;'r'
  1042  006E2B  74                 	db	116	;'t'
  1043  006E2C  75                 	db	117	;'u'
  1044  006E2D  70                 	db	112	;'p'
  1045  006E2E  2E                 	db	46
  1046  006E2F  0D                 	db	13
  1047  006E30  0A                 	db	10
  1048  006E31  00                 	db	0
  1049  006E32                     STR_236:
  1050                           
  1051                           ; BSR set to: 1
  1052  006E32  54                 	db	84	;'T'
  1053  006E33  72                 	db	114	;'r'
  1054  006E34  61                 	db	97	;'a'
  1055  006E35  6E                 	db	110	;'n'
  1056  006E36  73                 	db	115	;'s'
  1057  006E37  6D                 	db	109	;'m'
  1058  006E38  69                 	db	105	;'i'
  1059  006E39  74                 	db	116	;'t'
  1060  006E3A  74                 	db	116	;'t'
  1061  006E3B  65                 	db	101	;'e'
  1062  006E3C  72                 	db	114	;'r'
  1063  006E3D  20                 	db	32
  1064  006E3E  69                 	db	105	;'i'
  1065  006E3F  6E                 	db	110	;'n'
  1066  006E40  20                 	db	32
  1067  006E41  45                 	db	69	;'E'
  1068  006E42  72                 	db	114	;'r'
  1069  006E43  72                 	db	114	;'r'
  1070  006E44  6F                 	db	111	;'o'
  1071  006E45  72                 	db	114	;'r'
  1072  006E46  20                 	db	32
  1073  006E47  53                 	db	83	;'S'
  1074  006E48  74                 	db	116	;'t'
  1075  006E49  61                 	db	97	;'a'
  1076  006E4A  74                 	db	116	;'t'
  1077  006E4B  65                 	db	101	;'e'
  1078  006E4C  20                 	db	32
  1079  006E4D  57                 	db	87	;'W'
  1080  006E4E  61                 	db	97	;'a'
  1081  006E4F  72                 	db	114	;'r'
  1082  006E50  6E                 	db	110	;'n'
  1083  006E51  69                 	db	105	;'i'
  1084  006E52  6E                 	db	110	;'n'
  1085  006E53  67                 	db	103	;'g'
  1086  006E54  20                 	db	32
  1087  006E55  28                 	db	40
  1088  006E56  31                 	db	49	;'1'
  1089  006E57  32                 	db	50	;'2'
  1090  006E58  38                 	db	56	;'8'
  1091  006E59  20                 	db	32
  1092  006E5A  3E                 	db	62	;'>'
  1093  006E5B  20                 	db	32
  1094  006E5C  54                 	db	84	;'T'
  1095  006E5D  45                 	db	69	;'E'
  1096  006E5E  52                 	db	82	;'R'
  1097  006E5F  52                 	db	82	;'R'
  1098  006E60  43                 	db	67	;'C'
  1099  006E61  4E                 	db	78	;'N'
  1100  006E62  54                 	db	84	;'T'
  1101  006E63  20                 	db	32
  1102  006E64  3F                 	db	63	;'?'
  1103  006E65  20                 	db	32
  1104  006E66  39                 	db	57	;'9'
  1105  006E67  36                 	db	54	;'6'
  1106  006E68  29                 	db	41
  1107  006E69  0D                 	db	13
  1108  006E6A  0A                 	db	10
  1109  006E6B  00                 	db	0
  1110  006E6C                     STR_2:
  1111                           
  1112                           ; BSR set to: 1
  1113  006E6C  43                 	db	67	;'C'
  1114  006E6D  6F                 	db	111	;'o'
  1115  006E6E  70                 	db	112	;'p'
  1116  006E6F  79                 	db	121	;'y'
  1117  006E70  72                 	db	114	;'r'
  1118  006E71  69                 	db	105	;'i'
  1119  006E72  67                 	db	103	;'g'
  1120  006E73  68                 	db	104	;'h'
  1121  006E74  74                 	db	116	;'t'
  1122  006E75  20                 	db	32
  1123  006E76  28                 	db	40
  1124  006E77  43                 	db	67	;'C'
  1125  006E78  29                 	db	41
  1126  006E79  20                 	db	32
  1127  006E7A  32                 	db	50	;'2'
  1128  006E7B  30                 	db	48	;'0'
  1129  006E7C  31                 	db	49	;'1'
  1130  006E7D  34                 	db	52	;'4'
  1131  006E7E  2D                 	db	45
  1132  006E7F  32                 	db	50	;'2'
  1133  006E80  30                 	db	48	;'0'
  1134  006E81  31                 	db	49	;'1'
  1135  006E82  35                 	db	53	;'5'
  1136  006E83  20                 	db	32
  1137  006E84  50                 	db	80	;'P'
  1138  006E85  61                 	db	97	;'a'
  1139  006E86  72                 	db	114	;'r'
  1140  006E87  61                 	db	97	;'a'
  1141  006E88  64                 	db	100	;'d'
  1142  006E89  69                 	db	105	;'i'
  1143  006E8A  73                 	db	115	;'s'
  1144  006E8B  65                 	db	101	;'e'
  1145  006E8C  20                 	db	32
  1146  006E8D  6F                 	db	111	;'o'
  1147  006E8E  66                 	db	102	;'f'
  1148  006E8F  20                 	db	32
  1149  006E90  74                 	db	116	;'t'
  1150  006E91  68                 	db	104	;'h'
  1151  006E92  65                 	db	101	;'e'
  1152  006E93  20                 	db	32
  1153  006E94  46                 	db	70	;'F'
  1154  006E95  72                 	db	114	;'r'
  1155  006E96  6F                 	db	111	;'o'
  1156  006E97  67                 	db	103	;'g'
  1157  006E98  20                 	db	32
  1158  006E99  41                 	db	65	;'A'
  1159  006E9A  42                 	db	66	;'B'
  1160  006E9B  2C                 	db	44
  1161  006E9C  20                 	db	32
  1162  006E9D  53                 	db	83	;'S'
  1163  006E9E  77                 	db	119	;'w'
  1164  006E9F  65                 	db	101	;'e'
  1165  006EA0  64                 	db	100	;'d'
  1166  006EA1  65                 	db	101	;'e'
  1167  006EA2  6E                 	db	110	;'n'
  1168  006EA3  0D                 	db	13
  1169  006EA4  0A                 	db	10
  1170  006EA5  00                 	db	0
  1171  006EA6                     STR_238:
  1172                           
  1173                           ; BSR set to: 1
  1174  006EA6  54                 	db	84	;'T'
  1175  006EA7  72                 	db	114	;'r'
  1176  006EA8  61                 	db	97	;'a'
  1177  006EA9  6E                 	db	110	;'n'
  1178  006EAA  73                 	db	115	;'s'
  1179  006EAB  6D                 	db	109	;'m'
  1180  006EAC  69                 	db	105	;'i'
  1181  006EAD  74                 	db	116	;'t'
  1182  006EAE  74                 	db	116	;'t'
  1183  006EAF  65                 	db	101	;'e'
  1184  006EB0  72                 	db	114	;'r'
  1185  006EB1  20                 	db	32
  1186  006EB2  69                 	db	105	;'i'
  1187  006EB3  6E                 	db	110	;'n'
  1188  006EB4  20                 	db	32
  1189  006EB5  45                 	db	69	;'E'
  1190  006EB6  72                 	db	114	;'r'
  1191  006EB7  72                 	db	114	;'r'
  1192  006EB8  6F                 	db	111	;'o'
  1193  006EB9  72                 	db	114	;'r'
  1194  006EBA  20                 	db	32
  1195  006EBB  53                 	db	83	;'S'
  1196  006EBC  74                 	db	116	;'t'
  1197  006EBD  61                 	db	97	;'a'
  1198  006EBE  74                 	db	116	;'t'
  1199  006EBF  65                 	db	101	;'e'
  1200  006EC0  20                 	db	32
  1201  006EC1  42                 	db	66	;'B'
  1202  006EC2  75                 	db	117	;'u'
  1203  006EC3  73                 	db	115	;'s'
  1204  006EC4  20                 	db	32
  1205  006EC5  50                 	db	80	;'P'
  1206  006EC6  61                 	db	97	;'a'
  1207  006EC7  73                 	db	115	;'s'
  1208  006EC8  73                 	db	115	;'s'
  1209  006EC9  69                 	db	105	;'i'
  1210  006ECA  76                 	db	118	;'v'
  1211  006ECB  65                 	db	101	;'e'
  1212  006ECC  20                 	db	32
  1213  006ECD  28                 	db	40
  1214  006ECE  54                 	db	84	;'T'
  1215  006ECF  45                 	db	69	;'E'
  1216  006ED0  52                 	db	82	;'R'
  1217  006ED1  52                 	db	82	;'R'
  1218  006ED2  43                 	db	67	;'C'
  1219  006ED3  4E                 	db	78	;'N'
  1220  006ED4  54                 	db	84	;'T'
  1221  006ED5  20                 	db	32
  1222  006ED6  3F                 	db	63	;'?'
  1223  006ED7  20                 	db	32
  1224  006ED8  31                 	db	49	;'1'
  1225  006ED9  32                 	db	50	;'2'
  1226  006EDA  38                 	db	56	;'8'
  1227  006EDB  29                 	db	41
  1228  006EDC  0D                 	db	13
  1229  006EDD  0A                 	db	10
  1230  006EDE  00                 	db	0
  1231  006EDF                     STR_257:
  1232                           
  1233                           ; BSR set to: 1
  1234  006EDF  20                 	db	32
  1235  006EE0  20                 	db	32
  1236  006EE1  20                 	db	32
  1237  006EE2  20                 	db	32
  1238  006EE3  20                 	db	32
  1239  006EE4  46                 	db	70	;'F'
  1240  006EE5  6F                 	db	111	;'o'
  1241  006EE6  72                 	db	114	;'r'
  1242  006EE7  6D                 	db	109	;'m'
  1243  006EE8  61                 	db	97	;'a'
  1244  006EE9  74                 	db	116	;'t'
  1245  006EEA  3A                 	db	58	;':'
  1246  006EEB  20                 	db	32
  1247  006EEC  70                 	db	112	;'p'
  1248  006EED  72                 	db	114	;'r'
  1249  006EEE  69                 	db	105	;'i'
  1250  006EEF  6F                 	db	111	;'o'
  1251  006EF0  72                 	db	114	;'r'
  1252  006EF1  69                 	db	105	;'i'
  1253  006EF2  74                 	db	116	;'t'
  1254  006EF3  79                 	db	121	;'y'
  1255  006EF4  2C                 	db	44
  1256  006EF5  63                 	db	99	;'c'
  1257  006EF6  6C                 	db	108	;'l'
  1258  006EF7  61                 	db	97	;'a'
  1259  006EF8  73                 	db	115	;'s'
  1260  006EF9  73                 	db	115	;'s'
  1261  006EFA  2C                 	db	44
  1262  006EFB  74                 	db	116	;'t'
  1263  006EFC  79                 	db	121	;'y'
  1264  006EFD  70                 	db	112	;'p'
  1265  006EFE  65                 	db	101	;'e'
  1266  006EFF  2C                 	db	44
  1267  006F00  6E                 	db	110	;'n'
  1268  006F01  6F                 	db	111	;'o'
  1269  006F02  64                 	db	100	;'d'
  1270  006F03  65                 	db	101	;'e'
  1271  006F04  69                 	db	105	;'i'
  1272  006F05  64                 	db	100	;'d'
  1273  006F06  2C                 	db	44
  1274  006F07  63                 	db	99	;'c'
  1275  006F08  6F                 	db	111	;'o'
  1276  006F09  75                 	db	117	;'u'
  1277  006F0A  6E                 	db	110	;'n'
  1278  006F0B  74                 	db	116	;'t'
  1279  006F0C  2C                 	db	44
  1280  006F0D  64                 	db	100	;'d'
  1281  006F0E  61                 	db	97	;'a'
  1282  006F0F  74                 	db	116	;'t'
  1283  006F10  61                 	db	97	;'a'
  1284  006F11  2C                 	db	44
  1285  006F12  2C                 	db	44
  1286  006F13  2C                 	db	44
  1287  006F14  0D                 	db	13
  1288  006F15  0A                 	db	10
  1289  006F16  00                 	db	0
  1290  006F17                     STR_243:
  1291                           
  1292                           ; BSR set to: 1
  1293  006F17  52                 	db	82	;'R'
  1294  006F18  65                 	db	101	;'e'
  1295  006F19  63                 	db	99	;'c'
  1296  006F1A  65                 	db	101	;'e'
  1297  006F1B  69                 	db	105	;'i'
  1298  006F1C  76                 	db	118	;'v'
  1299  006F1D  65                 	db	101	;'e'
  1300  006F1E  72                 	db	114	;'r'
  1301  006F1F  20                 	db	32
  1302  006F20  69                 	db	105	;'i'
  1303  006F21  6E                 	db	110	;'n'
  1304  006F22  20                 	db	32
  1305  006F23  45                 	db	69	;'E'
  1306  006F24  72                 	db	114	;'r'
  1307  006F25  72                 	db	114	;'r'
  1308  006F26  6F                 	db	111	;'o'
  1309  006F27  72                 	db	114	;'r'
  1310  006F28  20                 	db	32
  1311  006F29  53                 	db	83	;'S'
  1312  006F2A  74                 	db	116	;'t'
  1313  006F2B  61                 	db	97	;'a'
  1314  006F2C  74                 	db	116	;'t'
  1315  006F2D  65                 	db	101	;'e'
  1316  006F2E  20                 	db	32
  1317  006F2F  57                 	db	87	;'W'
  1318  006F30  61                 	db	97	;'a'
  1319  006F31  72                 	db	114	;'r'
  1320  006F32  6E                 	db	110	;'n'
  1321  006F33  69                 	db	105	;'i'
  1322  006F34  6E                 	db	110	;'n'
  1323  006F35  67                 	db	103	;'g'
  1324  006F36  20                 	db	32
  1325  006F37  28                 	db	40
  1326  006F38  31                 	db	49	;'1'
  1327  006F39  32                 	db	50	;'2'
  1328  006F3A  38                 	db	56	;'8'
  1329  006F3B  20                 	db	32
  1330  006F3C  3E                 	db	62	;'>'
  1331  006F3D  20                 	db	32
  1332  006F3E  52                 	db	82	;'R'
  1333  006F3F  45                 	db	69	;'E'
  1334  006F40  52                 	db	82	;'R'
  1335  006F41  52                 	db	82	;'R'
  1336  006F42  43                 	db	67	;'C'
  1337  006F43  4E                 	db	78	;'N'
  1338  006F44  54                 	db	84	;'T'
  1339  006F45  20                 	db	32
  1340  006F46  3F                 	db	63	;'?'
  1341  006F47  20                 	db	32
  1342  006F48  39                 	db	57	;'9'
  1343  006F49  36                 	db	54	;'6'
  1344  006F4A  29                 	db	41
  1345  006F4B  0D                 	db	13
  1346  006F4C  0A                 	db	10
  1347  006F4D  00                 	db	0
  1348  006F4E                     STR_275:
  1349                           
  1350                           ; BSR set to: 1
  1351  006F4E  20                 	db	32
  1352  006F4F  20                 	db	32
  1353  006F50  20                 	db	32
  1354  006F51  20                 	db	32
  1355  006F52  53                 	db	83	;'S'
  1356  006F53  54                 	db	84	;'T'
  1357  006F54  41                 	db	65	;'A'
  1358  006F55  52                 	db	82	;'R'
  1359  006F56  54                 	db	84	;'T'
  1360  006F57  49                 	db	73	;'I'
  1361  006F58  46                 	db	70	;'F'
  1362  006F59  20                 	db	32
  1363  006F5A  2D                 	db	45
  1364  006F5B  20                 	db	32
  1365  006F5C  53                 	db	83	;'S'
  1366  006F5D  65                 	db	101	;'e'
  1367  006F5E  74                 	db	116	;'t'
  1368  006F5F  20                 	db	32
  1369  006F60  69                 	db	105	;'i'
  1370  006F61  6E                 	db	110	;'n'
  1371  006F62  74                 	db	116	;'t'
  1372  006F63  65                 	db	101	;'e'
  1373  006F64  72                 	db	114	;'r'
  1374  006F65  66                 	db	102	;'f'
  1375  006F66  61                 	db	97	;'a'
  1376  006F67  63                 	db	99	;'c'
  1377  006F68  65                 	db	101	;'e'
  1378  006F69  20                 	db	32
  1379  006F6A  73                 	db	115	;'s'
  1380  006F6B  74                 	db	116	;'t'
  1381  006F6C  61                 	db	97	;'a'
  1382  006F6D  74                 	db	116	;'t'
  1383  006F6E  65                 	db	101	;'e'
  1384  006F6F  20                 	db	32
  1385  006F70  74                 	db	116	;'t'
  1386  006F71  6F                 	db	111	;'o'
  1387  006F72  20                 	db	32
  1388  006F73  75                 	db	117	;'u'
  1389  006F74  73                 	db	115	;'s'
  1390  006F75  65                 	db	101	;'e'
  1391  006F76  20                 	db	32
  1392  006F77  6F                 	db	111	;'o'
  1393  006F78  6E                 	db	110	;'n'
  1394  006F79  20                 	db	32
  1395  006F7A  73                 	db	115	;'s'
  1396  006F7B  74                 	db	116	;'t'
  1397  006F7C  61                 	db	97	;'a'
  1398  006F7D  72                 	db	114	;'r'
  1399  006F7E  74                 	db	116	;'t'
  1400  006F7F  75                 	db	117	;'u'
  1401  006F80  70                 	db	112	;'p'
  1402  006F81  2E                 	db	46
  1403  006F82  0D                 	db	13
  1404  006F83  0A                 	db	10
  1405  006F84  00                 	db	0
  1406  006F85                     STR_4:
  1407                           
  1408                           ; BSR set to: 1
  1409  006F85  50                 	db	80	;'P'
  1410  006F86  72                 	db	114	;'r'
  1411  006F87  65                 	db	101	;'e'
  1412  006F88  73                 	db	115	;'s'
  1413  006F89  73                 	db	115	;'s'
  1414  006F8A  20                 	db	32
  1415  006F8B  27                 	db	39
  1416  006F8C  76                 	db	118	;'v'
  1417  006F8D  27                 	db	39
  1418  006F8E  20                 	db	32
  1419  006F8F  77                 	db	119	;'w'
  1420  006F90  69                 	db	105	;'i'
  1421  006F91  74                 	db	116	;'t'
  1422  006F92  68                 	db	104	;'h'
  1423  006F93  69                 	db	105	;'i'
  1424  006F94  6E                 	db	110	;'n'
  1425  006F95  20                 	db	32
  1426  006F96  74                 	db	116	;'t'
  1427  006F97  68                 	db	104	;'h'
  1428  006F98  72                 	db	114	;'r'
  1429  006F99  65                 	db	101	;'e'
  1430  006F9A  65                 	db	101	;'e'
  1431  006F9B  20                 	db	32
  1432  006F9C  73                 	db	115	;'s'
  1433  006F9D  65                 	db	101	;'e'
  1434  006F9E  63                 	db	99	;'c'
  1435  006F9F  6F                 	db	111	;'o'
  1436  006FA0  6E                 	db	110	;'n'
  1437  006FA1  64                 	db	100	;'d'
  1438  006FA2  73                 	db	115	;'s'
  1439  006FA3  20                 	db	32
  1440  006FA4  74                 	db	116	;'t'
  1441  006FA5  6F                 	db	111	;'o'
  1442  006FA6  20                 	db	32
  1443  006FA7  65                 	db	101	;'e'
  1444  006FA8  6E                 	db	110	;'n'
  1445  006FA9  74                 	db	116	;'t'
  1446  006FAA  65                 	db	101	;'e'
  1447  006FAB  72                 	db	114	;'r'
  1448  006FAC  20                 	db	32
  1449  006FAD  76                 	db	118	;'v'
  1450  006FAE  65                 	db	101	;'e'
  1451  006FAF  72                 	db	114	;'r'
  1452  006FB0  62                 	db	98	;'b'
  1453  006FB1  6F                 	db	111	;'o'
  1454  006FB2  73                 	db	115	;'s'
  1455  006FB3  65                 	db	101	;'e'
  1456  006FB4  20                 	db	32
  1457  006FB5  6D                 	db	109	;'m'
  1458  006FB6  6F                 	db	111	;'o'
  1459  006FB7  64                 	db	100	;'d'
  1460  006FB8  65                 	db	101	;'e'
  1461  006FB9  0D                 	db	13
  1462  006FBA  0A                 	db	10
  1463  006FBB  00                 	db	0
  1464  006FBC                     STR_244:
  1465                           
  1466                           ; BSR set to: 1
  1467  006FBC  52                 	db	82	;'R'
  1468  006FBD  65                 	db	101	;'e'
  1469  006FBE  63                 	db	99	;'c'
  1470  006FBF  65                 	db	101	;'e'
  1471  006FC0  69                 	db	105	;'i'
  1472  006FC1  76                 	db	118	;'v'
  1473  006FC2  65                 	db	101	;'e'
  1474  006FC3  72                 	db	114	;'r'
  1475  006FC4  20                 	db	32
  1476  006FC5  69                 	db	105	;'i'
  1477  006FC6  6E                 	db	110	;'n'
  1478  006FC7  20                 	db	32
  1479  006FC8  45                 	db	69	;'E'
  1480  006FC9  72                 	db	114	;'r'
  1481  006FCA  72                 	db	114	;'r'
  1482  006FCB  6F                 	db	111	;'o'
  1483  006FCC  72                 	db	114	;'r'
  1484  006FCD  20                 	db	32
  1485  006FCE  53                 	db	83	;'S'
  1486  006FCF  74                 	db	116	;'t'
  1487  006FD0  61                 	db	97	;'a'
  1488  006FD1  74                 	db	116	;'t'
  1489  006FD2  65                 	db	101	;'e'
  1490  006FD3  20                 	db	32
  1491  006FD4  42                 	db	66	;'B'
  1492  006FD5  75                 	db	117	;'u'
  1493  006FD6  73                 	db	115	;'s'
  1494  006FD7  20                 	db	32
  1495  006FD8  50                 	db	80	;'P'
  1496  006FD9  61                 	db	97	;'a'
  1497  006FDA  73                 	db	115	;'s'
  1498  006FDB  73                 	db	115	;'s'
  1499  006FDC  69                 	db	105	;'i'
  1500  006FDD  76                 	db	118	;'v'
  1501  006FDE  65                 	db	101	;'e'
  1502  006FDF  20                 	db	32
  1503  006FE0  28                 	db	40
  1504  006FE1  52                 	db	82	;'R'
  1505  006FE2  45                 	db	69	;'E'
  1506  006FE3  52                 	db	82	;'R'
  1507  006FE4  52                 	db	82	;'R'
  1508  006FE5  43                 	db	67	;'C'
  1509  006FE6  4E                 	db	78	;'N'
  1510  006FE7  54                 	db	84	;'T'
  1511  006FE8  20                 	db	32
  1512  006FE9  3F                 	db	63	;'?'
  1513  006FEA  20                 	db	32
  1514  006FEB  31                 	db	49	;'1'
  1515  006FEC  32                 	db	50	;'2'
  1516  006FED  38                 	db	56	;'8'
  1517  006FEE  29                 	db	41
  1518  006FEF  0D                 	db	13
  1519  006FF0  0A                 	db	10
  1520  006FF1  00                 	db	0
  1521  006FF2                     STR_80:
  1522                           
  1523                           ; BSR set to: 1
  1524  006FF2  2D                 	db	45
  1525  006FF3  45                 	db	69	;'E'
  1526  006FF4  52                 	db	82	;'R'
  1527  006FF5  52                 	db	82	;'R'
  1528  006FF6  4F                 	db	79	;'O'
  1529  006FF7  52                 	db	82	;'R'
  1530  006FF8  20                 	db	32
  1531  006FF9  2D                 	db	45
  1532  006FFA  20                 	db	32
  1533  006FFB  4F                 	db	79	;'O'
  1534  006FFC  6E                 	db	110	;'n'
  1535  006FFD  65                 	db	101	;'e'
  1536  006FFE  20                 	db	32
  1537  006FFF  6F                 	db	111	;'o'
  1538  007000  72                 	db	114	;'r'
  1539  007001  20                 	db	32
  1540  007002  6D                 	db	109	;'m'
  1541  007003  6F                 	db	111	;'o'
  1542  007004  72                 	db	114	;'r'
  1543  007005  65                 	db	101	;'e'
  1544  007006  20                 	db	32
  1545  007007  72                 	db	114	;'r'
  1546  007008  65                 	db	101	;'e'
  1547  007009  67                 	db	103	;'g'
  1548  00700A  69                 	db	105	;'i'
  1549  00700B  73                 	db	115	;'s'
  1550  00700C  74                 	db	116	;'t'
  1551  00700D  65                 	db	101	;'e'
  1552  00700E  72                 	db	114	;'r'
  1553  00700F  28                 	db	40
  1554  007010  73                 	db	115	;'s'
  1555  007011  29                 	db	41
  1556  007012  20                 	db	32
  1557  007013  63                 	db	99	;'c'
  1558  007014  6F                 	db	111	;'o'
  1559  007015  75                 	db	117	;'u'
  1560  007016  6C                 	db	108	;'l'
  1561  007017  64                 	db	100	;'d'
  1562  007018  20                 	db	32
  1563  007019  6E                 	db	110	;'n'
  1564  00701A  6F                 	db	111	;'o'
  1565  00701B  74                 	db	116	;'t'
  1566  00701C  20                 	db	32
  1567  00701D  62                 	db	98	;'b'
  1568  00701E  65                 	db	101	;'e'
  1569  00701F  20                 	db	32
  1570  007020  72                 	db	114	;'r'
  1571  007021  65                 	db	101	;'e'
  1572  007022  61                 	db	97	;'a'
  1573  007023  64                 	db	100	;'d'
  1574  007024  2E                 	db	46
  1575  007025  0D                 	db	13
  1576  007026  0A                 	db	10
  1577  007027  00                 	db	0
  1578  007028                     STR_237:
  1579                           
  1580                           ; BSR set to: 1
  1581  007028  54                 	db	84	;'T'
  1582  007029  72                 	db	114	;'r'
  1583  00702A  61                 	db	97	;'a'
  1584  00702B  6E                 	db	110	;'n'
  1585  00702C  73                 	db	115	;'s'
  1586  00702D  6D                 	db	109	;'m'
  1587  00702E  69                 	db	105	;'i'
  1588  00702F  74                 	db	116	;'t'
  1589  007030  74                 	db	116	;'t'
  1590  007031  65                 	db	101	;'e'
  1591  007032  72                 	db	114	;'r'
  1592  007033  20                 	db	32
  1593  007034  69                 	db	105	;'i'
  1594  007035  6E                 	db	110	;'n'
  1595  007036  20                 	db	32
  1596  007037  45                 	db	69	;'E'
  1597  007038  72                 	db	114	;'r'
  1598  007039  72                 	db	114	;'r'
  1599  00703A  6F                 	db	111	;'o'
  1600  00703B  72                 	db	114	;'r'
  1601  00703C  20                 	db	32
  1602  00703D  53                 	db	83	;'S'
  1603  00703E  74                 	db	116	;'t'
  1604  00703F  61                 	db	97	;'a'
  1605  007040  74                 	db	116	;'t'
  1606  007041  65                 	db	101	;'e'
  1607  007042  20                 	db	32
  1608  007043  42                 	db	66	;'B'
  1609  007044  75                 	db	117	;'u'
  1610  007045  73                 	db	115	;'s'
  1611  007046  20                 	db	32
  1612  007047  4F                 	db	79	;'O'
  1613  007048  46                 	db	70	;'F'
  1614  007049  46                 	db	70	;'F'
  1615  00704A  20                 	db	32
  1616  00704B  28                 	db	40
  1617  00704C  54                 	db	84	;'T'
  1618  00704D  45                 	db	69	;'E'
  1619  00704E  52                 	db	82	;'R'
  1620  00704F  52                 	db	82	;'R'
  1621  007050  43                 	db	67	;'C'
  1622  007051  4E                 	db	78	;'N'
  1623  007052  54                 	db	84	;'T'
  1624  007053  20                 	db	32
  1625  007054  3F                 	db	63	;'?'
  1626  007055  20                 	db	32
  1627  007056  32                 	db	50	;'2'
  1628  007057  35                 	db	53	;'5'
  1629  007058  36                 	db	54	;'6'
  1630  007059  29                 	db	41
  1631  00705A  0D                 	db	13
  1632  00705B  0A                 	db	10
  1633  00705C  00                 	db	0
  1634  00705D                     STR_50:
  1635                           
  1636                           ; BSR set to: 1
  1637  00705D  2D                 	db	45
  1638  00705E  45                 	db	69	;'E'
  1639  00705F  52                 	db	82	;'R'
  1640  007060  52                 	db	82	;'R'
  1641  007061  4F                 	db	79	;'O'
  1642  007062  52                 	db	82	;'R'
  1643  007063  20                 	db	32
  1644  007064  2D                 	db	45
  1645  007065  20                 	db	32
  1646  007066  43                 	db	67	;'C'
  1647  007067  6F                 	db	111	;'o'
  1648  007068  6D                 	db	109	;'m'
  1649  007069  6D                 	db	109	;'m'
  1650  00706A  61                 	db	97	;'a'
  1651  00706B  6E                 	db	110	;'n'
  1652  00706C  64                 	db	100	;'d'
  1653  00706D  20                 	db	32
  1654  00706E  6F                 	db	111	;'o'
  1655  00706F  6E                 	db	110	;'n'
  1656  007070  6C                 	db	108	;'l'
  1657  007071  79                 	db	121	;'y'
  1658  007072  20                 	db	32
  1659  007073  77                 	db	119	;'w'
  1660  007074  6F                 	db	111	;'o'
  1661  007075  72                 	db	114	;'r'
  1662  007076  6B                 	db	107	;'k'
  1663  007077  73                 	db	115	;'s'
  1664  007078  20                 	db	32
  1665  007079  69                 	db	105	;'i'
  1666  00707A  66                 	db	102	;'f'
  1667  00707B  20                 	db	32
  1668  00707C  69                 	db	105	;'i'
  1669  00707D  6E                 	db	110	;'n'
  1670  00707E  74                 	db	116	;'t'
  1671  00707F  65                 	db	101	;'e'
  1672  007080  72                 	db	114	;'r'
  1673  007081  66                 	db	102	;'f'
  1674  007082  61                 	db	97	;'a'
  1675  007083  63                 	db	99	;'c'
  1676  007084  65                 	db	101	;'e'
  1677  007085  20                 	db	32
  1678  007086  69                 	db	105	;'i'
  1679  007087  73                 	db	115	;'s'
  1680  007088  20                 	db	32
  1681  007089  6F                 	db	111	;'o'
  1682  00708A  70                 	db	112	;'p'
  1683  00708B  65                 	db	101	;'e'
  1684  00708C  6E                 	db	110	;'n'
  1685  00708D  2E                 	db	46
  1686  00708E  0D                 	db	13
  1687  00708F  0A                 	db	10
  1688  007090  00                 	db	0
  1689  007091                     STR_245:
  1690                           
  1691                           ; BSR set to: 1
  1692  007091  54                 	db	84	;'T'
  1693  007092  72                 	db	114	;'r'
  1694  007093  61                 	db	97	;'a'
  1695  007094  6E                 	db	110	;'n'
  1696  007095  73                 	db	115	;'s'
  1697  007096  6D                 	db	109	;'m'
  1698  007097  69                 	db	105	;'i'
  1699  007098  74                 	db	116	;'t'
  1700  007099  74                 	db	116	;'t'
  1701  00709A  65                 	db	101	;'e'
  1702  00709B  72                 	db	114	;'r'
  1703  00709C  20                 	db	32
  1704  00709D  6F                 	db	111	;'o'
  1705  00709E  72                 	db	114	;'r'
  1706  00709F  20                 	db	32
  1707  0070A0  52                 	db	82	;'R'
  1708  0070A1  65                 	db	101	;'e'
  1709  0070A2  63                 	db	99	;'c'
  1710  0070A3  65                 	db	101	;'e'
  1711  0070A4  69                 	db	105	;'i'
  1712  0070A5  76                 	db	118	;'v'
  1713  0070A6  65                 	db	101	;'e'
  1714  0070A7  72                 	db	114	;'r'
  1715  0070A8  20                 	db	32
  1716  0070A9  69                 	db	105	;'i'
  1717  0070AA  73                 	db	115	;'s'
  1718  0070AB  20                 	db	32
  1719  0070AC  69                 	db	105	;'i'
  1720  0070AD  6E                 	db	110	;'n'
  1721  0070AE  20                 	db	32
  1722  0070AF  45                 	db	69	;'E'
  1723  0070B0  72                 	db	114	;'r'
  1724  0070B1  72                 	db	114	;'r'
  1725  0070B2  6F                 	db	111	;'o'
  1726  0070B3  72                 	db	114	;'r'
  1727  0070B4  20                 	db	32
  1728  0070B5  53                 	db	83	;'S'
  1729  0070B6  74                 	db	116	;'t'
  1730  0070B7  61                 	db	97	;'a'
  1731  0070B8  74                 	db	116	;'t'
  1732  0070B9  65                 	db	101	;'e'
  1733  0070BA  20                 	db	32
  1734  0070BB  57                 	db	87	;'W'
  1735  0070BC  61                 	db	97	;'a'
  1736  0070BD  72                 	db	114	;'r'
  1737  0070BE  6E                 	db	110	;'n'
  1738  0070BF  69                 	db	105	;'i'
  1739  0070C0  6E                 	db	110	;'n'
  1740  0070C1  67                 	db	103	;'g'
  1741  0070C2  0D                 	db	13
  1742  0070C3  0A                 	db	10
  1743  0070C4  00                 	db	0
  1744  0070C5                     STR_251:
  1745                           
  1746                           ; BSR set to: 1
  1747  0070C5  4C                 	db	76	;'L'
  1748  0070C6  49                 	db	73	;'I'
  1749  0070C7  53                 	db	83	;'S'
  1750  0070C8  54                 	db	84	;'T'
  1751  0070C9  45                 	db	69	;'E'
  1752  0070CA  4E                 	db	78	;'N'
  1753  0070CB  20                 	db	32
  1754  0070CC  2D                 	db	45
  1755  0070CD  20                 	db	32
  1756  0070CE  4F                 	db	79	;'O'
  1757  0070CF  70                 	db	112	;'p'
  1758  0070D0  65                 	db	101	;'e'
  1759  0070D1  6E                 	db	110	;'n'
  1760  0070D2  20                 	db	32
  1761  0070D3  43                 	db	67	;'C'
  1762  0070D4  41                 	db	65	;'A'
  1763  0070D5  4E                 	db	78	;'N'
  1764  0070D6  20                 	db	32
  1765  0070D7  69                 	db	105	;'i'
  1766  0070D8  6E                 	db	110	;'n'
  1767  0070D9  74                 	db	116	;'t'
  1768  0070DA  65                 	db	101	;'e'
  1769  0070DB  72                 	db	114	;'r'
  1770  0070DC  66                 	db	102	;'f'
  1771  0070DD  61                 	db	97	;'a'
  1772  0070DE  63                 	db	99	;'c'
  1773  0070DF  65                 	db	101	;'e'
  1774  0070E0  20                 	db	32
  1775  0070E1  69                 	db	105	;'i'
  1776  0070E2  6E                 	db	110	;'n'
  1777  0070E3  20                 	db	32
  1778  0070E4  6C                 	db	108	;'l'
  1779  0070E5  69                 	db	105	;'i'
  1780  0070E6  73                 	db	115	;'s'
  1781  0070E7  74                 	db	116	;'t'
  1782  0070E8  65                 	db	101	;'e'
  1783  0070E9  6E                 	db	110	;'n'
  1784  0070EA  20                 	db	32
  1785  0070EB  6F                 	db	111	;'o'
  1786  0070EC  6E                 	db	110	;'n'
  1787  0070ED  6C                 	db	108	;'l'
  1788  0070EE  79                 	db	121	;'y'
  1789  0070EF  20                 	db	32
  1790  0070F0  6D                 	db	109	;'m'
  1791  0070F1  6F                 	db	111	;'o'
  1792  0070F2  64                 	db	100	;'d'
  1793  0070F3  65                 	db	101	;'e'
  1794  0070F4  2E                 	db	46
  1795  0070F5  0D                 	db	13
  1796  0070F6  0A                 	db	10
  1797  0070F7  00                 	db	0
  1798  0070F8                     STR_122:
  1799                           
  1800                           ; BSR set to: 1
  1801  0070F8  2D                 	db	45
  1802  0070F9  45                 	db	69	;'E'
  1803  0070FA  52                 	db	82	;'R'
  1804  0070FB  52                 	db	82	;'R'
  1805  0070FC  4F                 	db	79	;'O'
  1806  0070FD  52                 	db	82	;'R'
  1807  0070FE  20                 	db	32
  1808  0070FF  2D                 	db	45
  1809  007100  20                 	db	32
  1810  007101  4D                 	db	77	;'M'
  1811  007102  61                 	db	97	;'a'
  1812  007103  73                 	db	115	;'s'
  1813  007104  6B                 	db	107	;'k'
  1814  007105  20                 	db	32
  1815  007106  6E                 	db	110	;'n'
  1816  007107  75                 	db	117	;'u'
  1817  007108  6D                 	db	109	;'m'
  1818  007109  62                 	db	98	;'b'
  1819  00710A  65                 	db	101	;'e'
  1820  00710B  72                 	db	114	;'r'
  1821  00710C  20                 	db	32
  1822  00710D  63                 	db	99	;'c'
  1823  00710E  61                 	db	97	;'a'
  1824  00710F  6E                 	db	110	;'n'
  1825  007110  20                 	db	32
  1826  007111  6F                 	db	111	;'o'
  1827  007112  6E                 	db	110	;'n'
  1828  007113  6C                 	db	108	;'l'
  1829  007114  79                 	db	121	;'y'
  1830  007115  20                 	db	32
  1831  007116  62                 	db	98	;'b'
  1832  007117  65                 	db	101	;'e'
  1833  007118  20                 	db	32
  1834  007119  73                 	db	115	;'s'
  1835  00711A  65                 	db	101	;'e'
  1836  00711B  74                 	db	116	;'t'
  1837  00711C  20                 	db	32
  1838  00711D  61                 	db	97	;'a'
  1839  00711E  73                 	db	115	;'s'
  1840  00711F  20                 	db	32
  1841  007120  30                 	db	48	;'0'
  1842  007121  20                 	db	32
  1843  007122  6F                 	db	111	;'o'
  1844  007123  72                 	db	114	;'r'
  1845  007124  20                 	db	32
  1846  007125  31                 	db	49	;'1'
  1847  007126  2E                 	db	46
  1848  007127  0D                 	db	13
  1849  007128  0A                 	db	10
  1850  007129  00                 	db	0
  1851  00712A                     STR_252:
  1852                           
  1853                           ; BSR set to: 1
  1854  00712A  4C                 	db	76	;'L'
  1855  00712B  4F                 	db	79	;'O'
  1856  00712C  4F                 	db	79	;'O'
  1857  00712D  50                 	db	80	;'P'
  1858  00712E  42                 	db	66	;'B'
  1859  00712F  41                 	db	65	;'A'
  1860  007130  43                 	db	67	;'C'
  1861  007131  4B                 	db	75	;'K'
  1862  007132  20                 	db	32
  1863  007133  2D                 	db	45
  1864  007134  20                 	db	32
  1865  007135  4F                 	db	79	;'O'
  1866  007136  70                 	db	112	;'p'
  1867  007137  65                 	db	101	;'e'
  1868  007138  6E                 	db	110	;'n'
  1869  007139  20                 	db	32
  1870  00713A  43                 	db	67	;'C'
  1871  00713B  41                 	db	65	;'A'
  1872  00713C  4E                 	db	78	;'N'
  1873  00713D  20                 	db	32
  1874  00713E  69                 	db	105	;'i'
  1875  00713F  6E                 	db	110	;'n'
  1876  007140  74                 	db	116	;'t'
  1877  007141  65                 	db	101	;'e'
  1878  007142  72                 	db	114	;'r'
  1879  007143  66                 	db	102	;'f'
  1880  007144  61                 	db	97	;'a'
  1881  007145  63                 	db	99	;'c'
  1882  007146  65                 	db	101	;'e'
  1883  007147  20                 	db	32
  1884  007148  69                 	db	105	;'i'
  1885  007149  6E                 	db	110	;'n'
  1886  00714A  20                 	db	32
  1887  00714B  6C                 	db	108	;'l'
  1888  00714C  6F                 	db	111	;'o'
  1889  00714D  6F                 	db	111	;'o'
  1890  00714E  70                 	db	112	;'p'
  1891  00714F  62                 	db	98	;'b'
  1892  007150  61                 	db	97	;'a'
  1893  007151  63                 	db	99	;'c'
  1894  007152  6B                 	db	107	;'k'
  1895  007153  20                 	db	32
  1896  007154  6D                 	db	109	;'m'
  1897  007155  6F                 	db	111	;'o'
  1898  007156  64                 	db	100	;'d'
  1899  007157  65                 	db	101	;'e'
  1900  007158  2E                 	db	46
  1901  007159  0D                 	db	13
  1902  00715A  0A                 	db	10
  1903  00715B  00                 	db	0
  1904  00715C                     STR_254:
  1905                           
  1906                           ; BSR set to: 1
  1907  00715C  56                 	db	86	;'V'
  1908  00715D  45                 	db	69	;'E'
  1909  00715E  52                 	db	82	;'R'
  1910  00715F  53                 	db	83	;'S'
  1911  007160  49                 	db	73	;'I'
  1912  007161  4F                 	db	79	;'O'
  1913  007162  4E                 	db	78	;'N'
  1914  007163  20                 	db	32
  1915  007164  2D                 	db	45
  1916  007165  20                 	db	32
  1917  007166  44                 	db	68	;'D'
  1918  007167  69                 	db	105	;'i'
  1919  007168  73                 	db	115	;'s'
  1920  007169  70                 	db	112	;'p'
  1921  00716A  6C                 	db	108	;'l'
  1922  00716B  61                 	db	97	;'a'
  1923  00716C  79                 	db	121	;'y'
  1924  00716D  20                 	db	32
  1925  00716E  66                 	db	102	;'f'
  1926  00716F  69                 	db	105	;'i'
  1927  007170  72                 	db	114	;'r'
  1928  007171  6D                 	db	109	;'m'
  1929  007172  77                 	db	119	;'w'
  1930  007173  61                 	db	97	;'a'
  1931  007174  72                 	db	114	;'r'
  1932  007175  65                 	db	101	;'e'
  1933  007176  20                 	db	32
  1934  007177  76                 	db	118	;'v'
  1935  007178  65                 	db	101	;'e'
  1936  007179  72                 	db	114	;'r'
  1937  00717A  73                 	db	115	;'s'
  1938  00717B  69                 	db	105	;'i'
  1939  00717C  6F                 	db	111	;'o'
  1940  00717D  6E                 	db	110	;'n'
  1941  00717E  20                 	db	32
  1942  00717F  69                 	db	105	;'i'
  1943  007180  6E                 	db	110	;'n'
  1944  007181  66                 	db	102	;'f'
  1945  007182  6F                 	db	111	;'o'
  1946  007183  72                 	db	114	;'r'
  1947  007184  6D                 	db	109	;'m'
  1948  007185  61                 	db	97	;'a'
  1949  007186  74                 	db	116	;'t'
  1950  007187  69                 	db	105	;'i'
  1951  007188  6F                 	db	111	;'o'
  1952  007189  6E                 	db	110	;'n'
  1953  00718A  2E                 	db	46
  1954  00718B  0D                 	db	13
  1955  00718C  0A                 	db	10
  1956  00718D  00                 	db	0
  1957  00718E                     STR_274:
  1958                           
  1959                           ; BSR set to: 1
  1960  00718E  20                 	db	32
  1961  00718F  20                 	db	32
  1962  007190  20                 	db	32
  1963  007191  20                 	db	32
  1964  007192  20                 	db	32
  1965  007193  20                 	db	32
  1966  007194  20                 	db	32
  1967  007195  20                 	db	32
  1968  007196  20                 	db	32
  1969  007197  20                 	db	32
  1970  007198  20                 	db	32
  1971  007199  20                 	db	32
  1972  00719A  20                 	db	32
  1973  00719B  20                 	db	32
  1974  00719C  20                 	db	32
  1975  00719D  20                 	db	32
  1976  00719E  46                 	db	70	;'F'
  1977  00719F  6F                 	db	111	;'o'
  1978  0071A0  72                 	db	114	;'r'
  1979  0071A1  6D                 	db	109	;'m'
  1980  0071A2  61                 	db	97	;'a'
  1981  0071A3  74                 	db	116	;'t'
  1982  0071A4  3A                 	db	58	;':'
  1983  0071A5  20                 	db	32
  1984  0071A6  73                 	db	115	;'s'
  1985  0071A7  65                 	db	101	;'e'
  1986  0071A8  74                 	db	116	;'t'
  1987  0071A9  20                 	db	32
  1988  0071AA  72                 	db	114	;'r'
  1989  0071AB  77                 	db	119	;'w'
  1990  0071AC  74                 	db	116	;'t'
  1991  0071AD  69                 	db	105	;'i'
  1992  0071AE  6D                 	db	109	;'m'
  1993  0071AF  65                 	db	101	;'e'
  1994  0071B0  6F                 	db	111	;'o'
  1995  0071B1  75                 	db	117	;'u'
  1996  0071B2  74                 	db	116	;'t'
  1997  0071B3  20                 	db	32
  1998  0071B4  74                 	db	116	;'t'
  1999  0071B5  69                 	db	105	;'i'
  2000  0071B6  6D                 	db	109	;'m'
  2001  0071B7  65                 	db	101	;'e'
  2002  0071B8  6F                 	db	111	;'o'
  2003  0071B9  75                 	db	117	;'u'
  2004  0071BA  74                 	db	116	;'t'
  2005  0071BB  2E                 	db	46
  2006  0071BC  0D                 	db	13
  2007  0071BD  0A                 	db	10
  2008  0071BE  00                 	db	0
  2009  0071BF                     STR_272:
  2010                           
  2011                           ; BSR set to: 1
  2012  0071BF  20                 	db	32
  2013  0071C0  20                 	db	32
  2014  0071C1  20                 	db	32
  2015  0071C2  20                 	db	32
  2016  0071C3  44                 	db	68	;'D'
  2017  0071C4  45                 	db	69	;'E'
  2018  0071C5  43                 	db	67	;'C'
  2019  0071C6  49                 	db	73	;'I'
  2020  0071C7  4D                 	db	77	;'M'
  2021  0071C8  41                 	db	65	;'A'
  2022  0071C9  4C                 	db	76	;'L'
  2023  0071CA  20                 	db	32
  2024  0071CB  2D                 	db	45
  2025  0071CC  20                 	db	32
  2026  0071CD  44                 	db	68	;'D'
  2027  0071CE  69                 	db	105	;'i'
  2028  0071CF  73                 	db	115	;'s'
  2029  0071D0  70                 	db	112	;'p'
  2030  0071D1  6C                 	db	108	;'l'
  2031  0071D2  61                 	db	97	;'a'
  2032  0071D3  79                 	db	121	;'y'
  2033  0071D4  20                 	db	32
  2034  0071D5  6E                 	db	110	;'n'
  2035  0071D6  75                 	db	117	;'u'
  2036  0071D7  6D                 	db	109	;'m'
  2037  0071D8  65                 	db	101	;'e'
  2038  0071D9  72                 	db	114	;'r'
  2039  0071DA  69                 	db	105	;'i'
  2040  0071DB  63                 	db	99	;'c'
  2041  0071DC  61                 	db	97	;'a'
  2042  0071DD  6C                 	db	108	;'l'
  2043  0071DE  73                 	db	115	;'s'
  2044  0071DF  20                 	db	32
  2045  0071E0  69                 	db	105	;'i'
  2046  0071E1  6E                 	db	110	;'n'
  2047  0071E2  20                 	db	32
  2048  0071E3  64                 	db	100	;'d'
  2049  0071E4  65                 	db	101	;'e'
  2050  0071E5  63                 	db	99	;'c'
  2051  0071E6  69                 	db	105	;'i'
  2052  0071E7  6D                 	db	109	;'m'
  2053  0071E8  61                 	db	97	;'a'
  2054  0071E9  6C                 	db	108	;'l'
  2055  0071EA  2E                 	db	46
  2056  0071EB  0D                 	db	13
  2057  0071EC  0A                 	db	10
  2058  0071ED  00                 	db	0
  2059  0071EE                     STR_271:
  2060                           
  2061                           ; BSR set to: 1
  2062  0071EE  20                 	db	32
  2063  0071EF  20                 	db	32
  2064  0071F0  20                 	db	32
  2065  0071F1  20                 	db	32
  2066  0071F2  48                 	db	72	;'H'
  2067  0071F3  45                 	db	69	;'E'
  2068  0071F4  58                 	db	88	;'X'
  2069  0071F5  20                 	db	32
  2070  0071F6  2D                 	db	45
  2071  0071F7  20                 	db	32
  2072  0071F8  44                 	db	68	;'D'
  2073  0071F9  69                 	db	105	;'i'
  2074  0071FA  73                 	db	115	;'s'
  2075  0071FB  70                 	db	112	;'p'
  2076  0071FC  6C                 	db	108	;'l'
  2077  0071FD  61                 	db	97	;'a'
  2078  0071FE  79                 	db	121	;'y'
  2079  0071FF  20                 	db	32
  2080  007200  6E                 	db	110	;'n'
  2081  007201  75                 	db	117	;'u'
  2082  007202  6D                 	db	109	;'m'
  2083  007203  65                 	db	101	;'e'
  2084  007204  72                 	db	114	;'r'
  2085  007205  69                 	db	105	;'i'
  2086  007206  63                 	db	99	;'c'
  2087  007207  61                 	db	97	;'a'
  2088  007208  6C                 	db	108	;'l'
  2089  007209  73                 	db	115	;'s'
  2090  00720A  20                 	db	32
  2091  00720B  69                 	db	105	;'i'
  2092  00720C  6E                 	db	110	;'n'
  2093  00720D  20                 	db	32
  2094  00720E  68                 	db	104	;'h'
  2095  00720F  65                 	db	101	;'e'
  2096  007210  78                 	db	120	;'x'
  2097  007211  61                 	db	97	;'a'
  2098  007212  64                 	db	100	;'d'
  2099  007213  65                 	db	101	;'e'
  2100  007214  63                 	db	99	;'c'
  2101  007215  69                 	db	105	;'i'
  2102  007216  6D                 	db	109	;'m'
  2103  007217  61                 	db	97	;'a'
  2104  007218  6C                 	db	108	;'l'
  2105  007219  2E                 	db	46
  2106  00721A  0D                 	db	13
  2107  00721B  0A                 	db	10
  2108  00721C  00                 	db	0
  2109  00721D                     STR_262:
  2110                           
  2111                           ; BSR set to: 1
  2112  00721D  46                 	db	70	;'F'
  2113  00721E  49                 	db	73	;'I'
  2114  00721F  4E                 	db	78	;'N'
  2115  007220  44                 	db	68	;'D'
  2116  007221  20                 	db	32
  2117  007222  2D                 	db	45
  2118  007223  20                 	db	32
  2119  007224  46                 	db	70	;'F'
  2120  007225  69                 	db	105	;'i'
  2121  007226  6E                 	db	110	;'n'
  2122  007227  64                 	db	100	;'d'
  2123  007228  20                 	db	32
  2124  007229  61                 	db	97	;'a'
  2125  00722A  76                 	db	118	;'v'
  2126  00722B  61                 	db	97	;'a'
  2127  00722C  69                 	db	105	;'i'
  2128  00722D  6C                 	db	108	;'l'
  2129  00722E  61                 	db	97	;'a'
  2130  00722F  62                 	db	98	;'b'
  2131  007230  6C                 	db	108	;'l'
  2132  007231  65                 	db	101	;'e'
  2133  007232  20                 	db	32
  2134  007233  43                 	db	67	;'C'
  2135  007234  41                 	db	65	;'A'
  2136  007235  4E                 	db	78	;'N'
  2137  007236  34                 	db	52	;'4'
  2138  007237  56                 	db	86	;'V'
  2139  007238  53                 	db	83	;'S'
  2140  007239  43                 	db	67	;'C'
  2141  00723A  50                 	db	80	;'P'
  2142  00723B  20                 	db	32
  2143  00723C  6E                 	db	110	;'n'
  2144  00723D  6F                 	db	111	;'o'
  2145  00723E  64                 	db	100	;'d'
  2146  00723F  65                 	db	101	;'e'
  2147  007240  73                 	db	115	;'s'
  2148  007241  20                 	db	32
  2149  007242  6F                 	db	111	;'o'
  2150  007243  6E                 	db	110	;'n'
  2151  007244  20                 	db	32
  2152  007245  62                 	db	98	;'b'
  2153  007246  75                 	db	117	;'u'
  2154  007247  73                 	db	115	;'s'
  2155  007248  2E                 	db	46
  2156  007249  0D                 	db	13
  2157  00724A  0A                 	db	10
  2158  00724B  00                 	db	0
  2159  00724C                     STR_164:
  2160                           
  2161                           ; BSR set to: 1
  2162  00724C  2B                 	db	43
  2163  00724D  45                 	db	69	;'E'
  2164  00724E  52                 	db	82	;'R'
  2165  00724F  52                 	db	82	;'R'
  2166  007250  4F                 	db	79	;'O'
  2167  007251  52                 	db	82	;'R'
  2168  007252  20                 	db	32
  2169  007253  2D                 	db	45
  2170  007254  20                 	db	32
  2171  007255  57                 	db	87	;'W'
  2172  007256  72                 	db	114	;'r'
  2173  007257  6F                 	db	111	;'o'
  2174  007258  6E                 	db	110	;'n'
  2175  007259  67                 	db	103	;'g'
  2176  00725A  20                 	db	32
  2177  00725B  61                 	db	97	;'a'
  2178  00725C  72                 	db	114	;'r'
  2179  00725D  67                 	db	103	;'g'
  2180  00725E  75                 	db	117	;'u'
  2181  00725F  6D                 	db	109	;'m'
  2182  007260  65                 	db	101	;'e'
  2183  007261  6E                 	db	110	;'n'
  2184  007262  74                 	db	116	;'t'
  2185  007263  20                 	db	32
  2186  007264  74                 	db	116	;'t'
  2187  007265  6F                 	db	111	;'o'
  2188  007266  20                 	db	32
  2189  007267  27                 	db	39
  2190  007268  73                 	db	115	;'s'
  2191  007269  65                 	db	101	;'e'
  2192  00726A  74                 	db	116	;'t'
  2193  00726B  20                 	db	32
  2194  00726C  74                 	db	116	;'t'
  2195  00726D  69                 	db	105	;'i'
  2196  00726E  6D                 	db	109	;'m'
  2197  00726F  65                 	db	101	;'e'
  2198  007270  73                 	db	115	;'s'
  2199  007271  74                 	db	116	;'t'
  2200  007272  61                 	db	97	;'a'
  2201  007273  6D                 	db	109	;'m'
  2202  007274  70                 	db	112	;'p'
  2203  007275  27                 	db	39
  2204  007276  2E                 	db	46
  2205  007277  0D                 	db	13
  2206  007278  0A                 	db	10
  2207  007279  00                 	db	0
  2208  00727A                     STR_250:
  2209                           
  2210                           ; BSR set to: 1
  2211  00727A  53                 	db	83	;'S'
  2212  00727B  49                 	db	73	;'I'
  2213  00727C  4C                 	db	76	;'L'
  2214  00727D  45                 	db	69	;'E'
  2215  00727E  4E                 	db	78	;'N'
  2216  00727F  54                 	db	84	;'T'
  2217  007280  20                 	db	32
  2218  007281  2D                 	db	45
  2219  007282  20                 	db	32
  2220  007283  4F                 	db	79	;'O'
  2221  007284  70                 	db	112	;'p'
  2222  007285  65                 	db	101	;'e'
  2223  007286  6E                 	db	110	;'n'
  2224  007287  20                 	db	32
  2225  007288  43                 	db	67	;'C'
  2226  007289  41                 	db	65	;'A'
  2227  00728A  4E                 	db	78	;'N'
  2228  00728B  20                 	db	32
  2229  00728C  69                 	db	105	;'i'
  2230  00728D  6E                 	db	110	;'n'
  2231  00728E  74                 	db	116	;'t'
  2232  00728F  65                 	db	101	;'e'
  2233  007290  72                 	db	114	;'r'
  2234  007291  66                 	db	102	;'f'
  2235  007292  61                 	db	97	;'a'
  2236  007293  63                 	db	99	;'c'
  2237  007294  65                 	db	101	;'e'
  2238  007295  20                 	db	32
  2239  007296  69                 	db	105	;'i'
  2240  007297  6E                 	db	110	;'n'
  2241  007298  20                 	db	32
  2242  007299  73                 	db	115	;'s'
  2243  00729A  69                 	db	105	;'i'
  2244  00729B  6C                 	db	108	;'l'
  2245  00729C  65                 	db	101	;'e'
  2246  00729D  6E                 	db	110	;'n'
  2247  00729E  74                 	db	116	;'t'
  2248  00729F  20                 	db	32
  2249  0072A0  6D                 	db	109	;'m'
  2250  0072A1  6F                 	db	111	;'o'
  2251  0072A2  64                 	db	100	;'d'
  2252  0072A3  65                 	db	101	;'e'
  2253  0072A4  2E                 	db	46
  2254  0072A5  0D                 	db	13
  2255  0072A6  0A                 	db	10
  2256  0072A7  00                 	db	0
  2257  0072A8                     STR_255:
  2258                           
  2259                           ; BSR set to: 1
  2260  0072A8  49                 	db	73	;'I'
  2261  0072A9  46                 	db	70	;'F'
  2262  0072AA  4D                 	db	77	;'M'
  2263  0072AB  4F                 	db	79	;'O'
  2264  0072AC  44                 	db	68	;'D'
  2265  0072AD  45                 	db	69	;'E'
  2266  0072AE  20                 	db	32
  2267  0072AF  2D                 	db	45
  2268  0072B0  20                 	db	32
  2269  0072B1  44                 	db	68	;'D'
  2270  0072B2  69                 	db	105	;'i'
  2271  0072B3  73                 	db	115	;'s'
  2272  0072B4  70                 	db	112	;'p'
  2273  0072B5  6C                 	db	108	;'l'
  2274  0072B6  61                 	db	97	;'a'
  2275  0072B7  79                 	db	121	;'y'
  2276  0072B8  20                 	db	32
  2277  0072B9  73                 	db	115	;'s'
  2278  0072BA  65                 	db	101	;'e'
  2279  0072BB  6C                 	db	108	;'l'
  2280  0072BC  65                 	db	101	;'e'
  2281  0072BD  63                 	db	99	;'c'
  2282  0072BE  74                 	db	116	;'t'
  2283  0072BF  65                 	db	101	;'e'
  2284  0072C0  64                 	db	100	;'d'
  2285  0072C1  20                 	db	32
  2286  0072C2  69                 	db	105	;'i'
  2287  0072C3  6E                 	db	110	;'n'
  2288  0072C4  74                 	db	116	;'t'
  2289  0072C5  65                 	db	101	;'e'
  2290  0072C6  72                 	db	114	;'r'
  2291  0072C7  66                 	db	102	;'f'
  2292  0072C8  61                 	db	97	;'a'
  2293  0072C9  63                 	db	99	;'c'
  2294  0072CA  65                 	db	101	;'e'
  2295  0072CB  20                 	db	32
  2296  0072CC  6D                 	db	109	;'m'
  2297  0072CD  6F                 	db	111	;'o'
  2298  0072CE  64                 	db	100	;'d'
  2299  0072CF  65                 	db	101	;'e'
  2300  0072D0  2E                 	db	46
  2301  0072D1  0D                 	db	13
  2302  0072D2  0A                 	db	10
  2303  0072D3  00                 	db	0
  2304  0072D4                     STR_249:
  2305                           
  2306                           ; BSR set to: 1
  2307  0072D4  4F                 	db	79	;'O'
  2308  0072D5  50                 	db	80	;'P'
  2309  0072D6  45                 	db	69	;'E'
  2310  0072D7  4E                 	db	78	;'N'
  2311  0072D8  20                 	db	32
  2312  0072D9  2D                 	db	45
  2313  0072DA  20                 	db	32
  2314  0072DB  4F                 	db	79	;'O'
  2315  0072DC  70                 	db	112	;'p'
  2316  0072DD  65                 	db	101	;'e'
  2317  0072DE  6E                 	db	110	;'n'
  2318  0072DF  20                 	db	32
  2319  0072E0  43                 	db	67	;'C'
  2320  0072E1  41                 	db	65	;'A'
  2321  0072E2  4E                 	db	78	;'N'
  2322  0072E3  20                 	db	32
  2323  0072E4  69                 	db	105	;'i'
  2324  0072E5  6E                 	db	110	;'n'
  2325  0072E6  74                 	db	116	;'t'
  2326  0072E7  65                 	db	101	;'e'
  2327  0072E8  72                 	db	114	;'r'
  2328  0072E9  66                 	db	102	;'f'
  2329  0072EA  61                 	db	97	;'a'
  2330  0072EB  63                 	db	99	;'c'
  2331  0072EC  65                 	db	101	;'e'
  2332  0072ED  20                 	db	32
  2333  0072EE  69                 	db	105	;'i'
  2334  0072EF  6E                 	db	110	;'n'
  2335  0072F0  20                 	db	32
  2336  0072F1  6E                 	db	110	;'n'
  2337  0072F2  6F                 	db	111	;'o'
  2338  0072F3  72                 	db	114	;'r'
  2339  0072F4  6D                 	db	109	;'m'
  2340  0072F5  61                 	db	97	;'a'
  2341  0072F6  6C                 	db	108	;'l'
  2342  0072F7  20                 	db	32
  2343  0072F8  6D                 	db	109	;'m'
  2344  0072F9  6F                 	db	111	;'o'
  2345  0072FA  64                 	db	100	;'d'
  2346  0072FB  65                 	db	101	;'e'
  2347  0072FC  2E                 	db	46
  2348  0072FD  0D                 	db	13
  2349  0072FE  0A                 	db	10
  2350  0072FF  00                 	db	0
  2351  007300                     STR_135:
  2352                           
  2353                           ; BSR set to: 1
  2354  007300  2B                 	db	43
  2355  007301  4F                 	db	79	;'O'
  2356  007302  4B                 	db	75	;'K'
  2357  007303  20                 	db	32
  2358  007304  2D                 	db	45
  2359  007305  20                 	db	32
  2360  007306  4E                 	db	78	;'N'
  2361  007307  75                 	db	117	;'u'
  2362  007308  6D                 	db	109	;'m'
  2363  007309  65                 	db	101	;'e'
  2364  00730A  72                 	db	114	;'r'
  2365  00730B  69                 	db	105	;'i'
  2366  00730C  63                 	db	99	;'c'
  2367  00730D  61                 	db	97	;'a'
  2368  00730E  6C                 	db	108	;'l'
  2369  00730F  20                 	db	32
  2370  007310  6F                 	db	111	;'o'
  2371  007311  75                 	db	117	;'u'
  2372  007312  74                 	db	116	;'t'
  2373  007313  70                 	db	112	;'p'
  2374  007314  75                 	db	117	;'u'
  2375  007315  74                 	db	116	;'t'
  2376  007316  20                 	db	32
  2377  007317  6E                 	db	110	;'n'
  2378  007318  6F                 	db	111	;'o'
  2379  007319  77                 	db	119	;'w'
  2380  00731A  20                 	db	32
  2381  00731B  69                 	db	105	;'i'
  2382  00731C  6E                 	db	110	;'n'
  2383  00731D  20                 	db	32
  2384  00731E  68                 	db	104	;'h'
  2385  00731F  65                 	db	101	;'e'
  2386  007320  78                 	db	120	;'x'
  2387  007321  61                 	db	97	;'a'
  2388  007322  64                 	db	100	;'d'
  2389  007323  65                 	db	101	;'e'
  2390  007324  63                 	db	99	;'c'
  2391  007325  69                 	db	105	;'i'
  2392  007326  6D                 	db	109	;'m'
  2393  007327  61                 	db	97	;'a'
  2394  007328  6C                 	db	108	;'l'
  2395  007329  0D                 	db	13
  2396  00732A  0A                 	db	10
  2397  00732B  00                 	db	0
  2398  00732C                     STR_110:
  2399                           
  2400                           ; BSR set to: 1
  2401  00732C  2D                 	db	45
  2402  00732D  45                 	db	69	;'E'
  2403  00732E  52                 	db	82	;'R'
  2404  00732F  52                 	db	82	;'R'
  2405  007330  4F                 	db	79	;'O'
  2406  007331  52                 	db	82	;'R'
  2407  007332  20                 	db	32
  2408  007333  2D                 	db	45
  2409  007334  20                 	db	32
  2410  007335  66                 	db	102	;'f'
  2411  007336  69                 	db	105	;'i'
  2412  007337  6C                 	db	108	;'l'
  2413  007338  74                 	db	116	;'t'
  2414  007339  65                 	db	101	;'e'
  2415  00733A  72                 	db	114	;'r'
  2416  00733B  20                 	db	32
  2417  00733C  66                 	db	102	;'f'
  2418  00733D  6F                 	db	111	;'o'
  2419  00733E  72                 	db	114	;'r'
  2420  00733F  20                 	db	32
  2421  007340  70                 	db	112	;'p'
  2422  007341  72                 	db	114	;'r'
  2423  007342  69                 	db	105	;'i'
  2424  007343  6F                 	db	111	;'o'
  2425  007344  72                 	db	114	;'r'
  2426  007345  69                 	db	105	;'i'
  2427  007346  74                 	db	116	;'t'
  2428  007347  79                 	db	121	;'y'
  2429  007348  20                 	db	32
  2430  007349  69                 	db	105	;'i'
  2431  00734A  73                 	db	115	;'s'
  2432  00734B  20                 	db	32
  2433  00734C  6D                 	db	109	;'m'
  2434  00734D  69                 	db	105	;'i'
  2435  00734E  73                 	db	115	;'s'
  2436  00734F  73                 	db	115	;'s'
  2437  007350  69                 	db	105	;'i'
  2438  007351  6E                 	db	110	;'n'
  2439  007352  67                 	db	103	;'g'
  2440  007353  0D                 	db	13
  2441  007354  0A                 	db	10
  2442  007355  00                 	db	0
  2443  007356                     STR_158:
  2444                           
  2445                           ; BSR set to: 1
  2446  007356  2B                 	db	43
  2447  007357  45                 	db	69	;'E'
  2448  007358  52                 	db	82	;'R'
  2449  007359  52                 	db	82	;'R'
  2450  00735A  4F                 	db	79	;'O'
  2451  00735B  52                 	db	82	;'R'
  2452  00735C  20                 	db	32
  2453  00735D  2D                 	db	45
  2454  00735E  20                 	db	32
  2455  00735F  57                 	db	87	;'W'
  2456  007360  72                 	db	114	;'r'
  2457  007361  6F                 	db	111	;'o'
  2458  007362  6E                 	db	110	;'n'
  2459  007363  67                 	db	103	;'g'
  2460  007364  20                 	db	32
  2461  007365  61                 	db	97	;'a'
  2462  007366  72                 	db	114	;'r'
  2463  007367  67                 	db	103	;'g'
  2464  007368  75                 	db	117	;'u'
  2465  007369  6D                 	db	109	;'m'
  2466  00736A  65                 	db	101	;'e'
  2467  00736B  6E                 	db	110	;'n'
  2468  00736C  74                 	db	116	;'t'
  2469  00736D  20                 	db	32
  2470  00736E  74                 	db	116	;'t'
  2471  00736F  6F                 	db	111	;'o'
  2472  007370  20                 	db	32
  2473  007371  27                 	db	39
  2474  007372  73                 	db	115	;'s'
  2475  007373  65                 	db	101	;'e'
  2476  007374  74                 	db	116	;'t'
  2477  007375  20                 	db	32
  2478  007376  65                 	db	101	;'e'
  2479  007377  63                 	db	99	;'c'
  2480  007378  68                 	db	104	;'h'
  2481  007379  6F                 	db	111	;'o'
  2482  00737A  27                 	db	39
  2483  00737B  2E                 	db	46
  2484  00737C  0D                 	db	13
  2485  00737D  0A                 	db	10
  2486  00737E  00                 	db	0
  2487  00737F                     STR_116:
  2488                           
  2489                           ; BSR set to: 1
  2490  00737F  2D                 	db	45
  2491  007380  45                 	db	69	;'E'
  2492  007381  52                 	db	82	;'R'
  2493  007382  52                 	db	82	;'R'
  2494  007383  4F                 	db	79	;'O'
  2495  007384  52                 	db	82	;'R'
  2496  007385  20                 	db	32
  2497  007386  2D                 	db	45
  2498  007387  20                 	db	32
  2499  007388  66                 	db	102	;'f'
  2500  007389  69                 	db	105	;'i'
  2501  00738A  6C                 	db	108	;'l'
  2502  00738B  74                 	db	116	;'t'
  2503  00738C  65                 	db	101	;'e'
  2504  00738D  72                 	db	114	;'r'
  2505  00738E  20                 	db	32
  2506  00738F  66                 	db	102	;'f'
  2507  007390  6F                 	db	111	;'o'
  2508  007391  72                 	db	114	;'r'
  2509  007392  20                 	db	32
  2510  007393  6E                 	db	110	;'n'
  2511  007394  69                 	db	105	;'i'
  2512  007395  64                 	db	100	;'d'
  2513  007396  65                 	db	101	;'e'
  2514  007397  20                 	db	32
  2515  007398  69                 	db	105	;'i'
  2516  007399  64                 	db	100	;'d'
  2517  00739A  20                 	db	32
  2518  00739B  69                 	db	105	;'i'
  2519  00739C  73                 	db	115	;'s'
  2520  00739D  20                 	db	32
  2521  00739E  6D                 	db	109	;'m'
  2522  00739F  69                 	db	105	;'i'
  2523  0073A0  73                 	db	115	;'s'
  2524  0073A1  73                 	db	115	;'s'
  2525  0073A2  69                 	db	105	;'i'
  2526  0073A3  6E                 	db	110	;'n'
  2527  0073A4  67                 	db	103	;'g'
  2528  0073A5  0D                 	db	13
  2529  0073A6  0A                 	db	10
  2530  0073A7  00                 	db	0
  2531  0073A8                     STR_261:
  2532                           
  2533                           ; BSR set to: 1
  2534  0073A8  48                 	db	72	;'H'
  2535  0073A9  45                 	db	69	;'E'
  2536  0073AA  4C                 	db	76	;'L'
  2537  0073AB  50                 	db	80	;'P'
  2538  0073AC  20                 	db	32
  2539  0073AD  2D                 	db	45
  2540  0073AE  20                 	db	32
  2541  0073AF  44                 	db	68	;'D'
  2542  0073B0  69                 	db	105	;'i'
  2543  0073B1  73                 	db	115	;'s'
  2544  0073B2  70                 	db	112	;'p'
  2545  0073B3  6C                 	db	108	;'l'
  2546  0073B4  61                 	db	97	;'a'
  2547  0073B5  79                 	db	121	;'y'
  2548  0073B6  20                 	db	32
  2549  0073B7  74                 	db	116	;'t'
  2550  0073B8  68                 	db	104	;'h'
  2551  0073B9  69                 	db	105	;'i'
  2552  0073BA  73                 	db	115	;'s'
  2553  0073BB  20                 	db	32
  2554  0073BC  68                 	db	104	;'h'
  2555  0073BD  65                 	db	101	;'e'
  2556  0073BE  6C                 	db	108	;'l'
  2557  0073BF  70                 	db	112	;'p'
  2558  0073C0  20                 	db	32
  2559  0073C1  69                 	db	105	;'i'
  2560  0073C2  6E                 	db	110	;'n'
  2561  0073C3  66                 	db	102	;'f'
  2562  0073C4  6F                 	db	111	;'o'
  2563  0073C5  72                 	db	114	;'r'
  2564  0073C6  6D                 	db	109	;'m'
  2565  0073C7  61                 	db	97	;'a'
  2566  0073C8  74                 	db	116	;'t'
  2567  0073C9  69                 	db	105	;'i'
  2568  0073CA  6F                 	db	111	;'o'
  2569  0073CB  6E                 	db	110	;'n'
  2570  0073CC  2E                 	db	46
  2571  0073CD  0D                 	db	13
  2572  0073CE  0A                 	db	10
  2573  0073CF  00                 	db	0
  2574  0073D0                     STR_125:
  2575                           
  2576                           ; BSR set to: 1
  2577  0073D0  2D                 	db	45
  2578  0073D1  45                 	db	69	;'E'
  2579  0073D2  52                 	db	82	;'R'
  2580  0073D3  52                 	db	82	;'R'
  2581  0073D4  4F                 	db	79	;'O'
  2582  0073D5  52                 	db	82	;'R'
  2583  0073D6  20                 	db	32
  2584  0073D7  2D                 	db	45
  2585  0073D8  20                 	db	32
  2586  0073D9  6D                 	db	109	;'m'
  2587  0073DA  61                 	db	97	;'a'
  2588  0073DB  73                 	db	115	;'s'
  2589  0073DC  6B                 	db	107	;'k'
  2590  0073DD  20                 	db	32
  2591  0073DE  66                 	db	102	;'f'
  2592  0073DF  6F                 	db	111	;'o'
  2593  0073E0  72                 	db	114	;'r'
  2594  0073E1  20                 	db	32
  2595  0073E2  70                 	db	112	;'p'
  2596  0073E3  72                 	db	114	;'r'
  2597  0073E4  69                 	db	105	;'i'
  2598  0073E5  6F                 	db	111	;'o'
  2599  0073E6  72                 	db	114	;'r'
  2600  0073E7  69                 	db	105	;'i'
  2601  0073E8  74                 	db	116	;'t'
  2602  0073E9  79                 	db	121	;'y'
  2603  0073EA  20                 	db	32
  2604  0073EB  69                 	db	105	;'i'
  2605  0073EC  73                 	db	115	;'s'
  2606  0073ED  20                 	db	32
  2607  0073EE  6D                 	db	109	;'m'
  2608  0073EF  69                 	db	105	;'i'
  2609  0073F0  73                 	db	115	;'s'
  2610  0073F1  73                 	db	115	;'s'
  2611  0073F2  69                 	db	105	;'i'
  2612  0073F3  6E                 	db	110	;'n'
  2613  0073F4  67                 	db	103	;'g'
  2614  0073F5  0D                 	db	13
  2615  0073F6  0A                 	db	10
  2616  0073F7  00                 	db	0
  2617  0073F8                     STR_137:
  2618                           
  2619                           ; BSR set to: 1
  2620  0073F8  2B                 	db	43
  2621  0073F9  4F                 	db	79	;'O'
  2622  0073FA  4B                 	db	75	;'K'
  2623  0073FB  20                 	db	32
  2624  0073FC  2D                 	db	45
  2625  0073FD  20                 	db	32
  2626  0073FE  4E                 	db	78	;'N'
  2627  0073FF  75                 	db	117	;'u'
  2628  007400  6D                 	db	109	;'m'
  2629  007401  65                 	db	101	;'e'
  2630  007402  72                 	db	114	;'r'
  2631  007403  69                 	db	105	;'i'
  2632  007404  63                 	db	99	;'c'
  2633  007405  61                 	db	97	;'a'
  2634  007406  6C                 	db	108	;'l'
  2635  007407  20                 	db	32
  2636  007408  6F                 	db	111	;'o'
  2637  007409  75                 	db	117	;'u'
  2638  00740A  74                 	db	116	;'t'
  2639  00740B  70                 	db	112	;'p'
  2640  00740C  75                 	db	117	;'u'
  2641  00740D  74                 	db	116	;'t'
  2642  00740E  20                 	db	32
  2643  00740F  6E                 	db	110	;'n'
  2644  007410  6F                 	db	111	;'o'
  2645  007411  77                 	db	119	;'w'
  2646  007412  20                 	db	32
  2647  007413  69                 	db	105	;'i'
  2648  007414  6E                 	db	110	;'n'
  2649  007415  20                 	db	32
  2650  007416  64                 	db	100	;'d'
  2651  007417  65                 	db	101	;'e'
  2652  007418  63                 	db	99	;'c'
  2653  007419  69                 	db	105	;'i'
  2654  00741A  6D                 	db	109	;'m'
  2655  00741B  61                 	db	97	;'a'
  2656  00741C  6C                 	db	108	;'l'
  2657  00741D  0D                 	db	13
  2658  00741E  0A                 	db	10
  2659  00741F  00                 	db	0
  2660  007420                     STR_108:
  2661                           
  2662                           ; BSR set to: 1
  2663  007420  2D                 	db	45
  2664  007421  45                 	db	69	;'E'
  2665  007422  52                 	db	82	;'R'
  2666  007423  52                 	db	82	;'R'
  2667  007424  4F                 	db	79	;'O'
  2668  007425  52                 	db	82	;'R'
  2669  007426  20                 	db	32
  2670  007427  2D                 	db	45
  2671  007428  20                 	db	32
  2672  007429  4E                 	db	78	;'N'
  2673  00742A  6F                 	db	111	;'o'
  2674  00742B  20                 	db	32
  2675  00742C  66                 	db	102	;'f'
  2676  00742D  69                 	db	105	;'i'
  2677  00742E  6C                 	db	108	;'l'
  2678  00742F  74                 	db	116	;'t'
  2679  007430  65                 	db	101	;'e'
  2680  007431  72                 	db	114	;'r'
  2681  007432  20                 	db	32
  2682  007433  6E                 	db	110	;'n'
  2683  007434  75                 	db	117	;'u'
  2684  007435  6D                 	db	109	;'m'
  2685  007436  62                 	db	98	;'b'
  2686  007437  65                 	db	101	;'e'
  2687  007438  72                 	db	114	;'r'
  2688  007439  20                 	db	32
  2689  00743A  73                 	db	115	;'s'
  2690  00743B  70                 	db	112	;'p'
  2691  00743C  65                 	db	101	;'e'
  2692  00743D  63                 	db	99	;'c'
  2693  00743E  69                 	db	105	;'i'
  2694  00743F  66                 	db	102	;'f'
  2695  007440  69                 	db	105	;'i'
  2696  007441  65                 	db	101	;'e'
  2697  007442  64                 	db	100	;'d'
  2698  007443  2E                 	db	46
  2699  007444  0D                 	db	13
  2700  007445  0A                 	db	10
  2701  007446  00                 	db	0
  2702  007447                     STR_260:
  2703                           
  2704                           ; BSR set to: 1
  2705  007447  45                 	db	69	;'E'
  2706  007448  52                 	db	82	;'R'
  2707  007449  52                 	db	82	;'R'
  2708  00744A  20                 	db	32
  2709  00744B  2D                 	db	45
  2710  00744C  20                 	db	32
  2711  00744D  44                 	db	68	;'D'
  2712  00744E  69                 	db	105	;'i'
  2713  00744F  73                 	db	115	;'s'
  2714  007450  70                 	db	112	;'p'
  2715  007451  6C                 	db	108	;'l'
  2716  007452  61                 	db	97	;'a'
  2717  007453  79                 	db	121	;'y'
  2718  007454  20                 	db	32
  2719  007455  43                 	db	67	;'C'
  2720  007456  41                 	db	65	;'A'
  2721  007457  4E                 	db	78	;'N'
  2722  007458  20                 	db	32
  2723  007459  65                 	db	101	;'e'
  2724  00745A  72                 	db	114	;'r'
  2725  00745B  72                 	db	114	;'r'
  2726  00745C  6F                 	db	111	;'o'
  2727  00745D  72                 	db	114	;'r'
  2728  00745E  20                 	db	32
  2729  00745F  69                 	db	105	;'i'
  2730  007460  6E                 	db	110	;'n'
  2731  007461  66                 	db	102	;'f'
  2732  007462  6F                 	db	111	;'o'
  2733  007463  72                 	db	114	;'r'
  2734  007464  6D                 	db	109	;'m'
  2735  007465  61                 	db	97	;'a'
  2736  007466  74                 	db	116	;'t'
  2737  007467  69                 	db	105	;'i'
  2738  007468  6F                 	db	111	;'o'
  2739  007469  6E                 	db	110	;'n'
  2740  00746A  2E                 	db	46
  2741  00746B  0D                 	db	13
  2742  00746C  0A                 	db	10
  2743  00746D  00                 	db	0
  2744  00746E                     STR_246:
  2745                           
  2746                           ; BSR set to: 1
  2747  00746E  48                 	db	72	;'H'
  2748  00746F  65                 	db	101	;'e'
  2749  007470  6C                 	db	108	;'l'
  2750  007471  70                 	db	112	;'p'
  2751  007472  20                 	db	32
  2752  007473  66                 	db	102	;'f'
  2753  007474  6F                 	db	111	;'o'
  2754  007475  72                 	db	114	;'r'
  2755  007476  20                 	db	32
  2756  007477  74                 	db	116	;'t'
  2757  007478  68                 	db	104	;'h'
  2758  007479  65                 	db	101	;'e'
  2759  00747A  20                 	db	32
  2760  00747B  46                 	db	70	;'F'
  2761  00747C  72                 	db	114	;'r'
  2762  00747D  61                 	db	97	;'a'
  2763  00747E  6E                 	db	110	;'n'
  2764  00747F  6B                 	db	107	;'k'
  2765  007480  66                 	db	102	;'f'
  2766  007481  75                 	db	117	;'u'
  2767  007482  72                 	db	114	;'r'
  2768  007483  74                 	db	116	;'t'
  2769  007484  20                 	db	32
  2770  007485  52                 	db	82	;'R'
  2771  007486  53                 	db	83	;'S'
  2772  007487  2D                 	db	45
  2773  007488  32                 	db	50	;'2'
  2774  007489  33                 	db	51	;'3'
  2775  00748A  32                 	db	50	;'2'
  2776  00748B  20                 	db	32
  2777  00748C  6D                 	db	109	;'m'
  2778  00748D  6F                 	db	111	;'o'
  2779  00748E  64                 	db	100	;'d'
  2780  00748F  75                 	db	117	;'u'
  2781  007490  6C                 	db	108	;'l'
  2782  007491  65                 	db	101	;'e'
  2783  007492  0D                 	db	13
  2784  007493  0A                 	db	10
  2785  007494  00                 	db	0
  2786  007495                     STR_131:
  2787                           
  2788                           ; BSR set to: 1
  2789  007495  2D                 	db	45
  2790  007496  45                 	db	69	;'E'
  2791  007497  52                 	db	82	;'R'
  2792  007498  52                 	db	82	;'R'
  2793  007499  4F                 	db	79	;'O'
  2794  00749A  52                 	db	82	;'R'
  2795  00749B  20                 	db	32
  2796  00749C  2D                 	db	45
  2797  00749D  20                 	db	32
  2798  00749E  6D                 	db	109	;'m'
  2799  00749F  61                 	db	97	;'a'
  2800  0074A0  73                 	db	115	;'s'
  2801  0074A1  6B                 	db	107	;'k'
  2802  0074A2  20                 	db	32
  2803  0074A3  66                 	db	102	;'f'
  2804  0074A4  6F                 	db	111	;'o'
  2805  0074A5  72                 	db	114	;'r'
  2806  0074A6  20                 	db	32
  2807  0074A7  6E                 	db	110	;'n'
  2808  0074A8  69                 	db	105	;'i'
  2809  0074A9  64                 	db	100	;'d'
  2810  0074AA  65                 	db	101	;'e'
  2811  0074AB  20                 	db	32
  2812  0074AC  69                 	db	105	;'i'
  2813  0074AD  64                 	db	100	;'d'
  2814  0074AE  20                 	db	32
  2815  0074AF  69                 	db	105	;'i'
  2816  0074B0  73                 	db	115	;'s'
  2817  0074B1  20                 	db	32
  2818  0074B2  6D                 	db	109	;'m'
  2819  0074B3  69                 	db	105	;'i'
  2820  0074B4  73                 	db	115	;'s'
  2821  0074B5  73                 	db	115	;'s'
  2822  0074B6  69                 	db	105	;'i'
  2823  0074B7  6E                 	db	110	;'n'
  2824  0074B8  67                 	db	103	;'g'
  2825  0074B9  0D                 	db	13
  2826  0074BA  0A                 	db	10
  2827  0074BB  00                 	db	0
  2828  0074BC                     STR_112:
  2829                           
  2830                           ; BSR set to: 1
  2831  0074BC  2D                 	db	45
  2832  0074BD  45                 	db	69	;'E'
  2833  0074BE  52                 	db	82	;'R'
  2834  0074BF  52                 	db	82	;'R'
  2835  0074C0  4F                 	db	79	;'O'
  2836  0074C1  52                 	db	82	;'R'
  2837  0074C2  20                 	db	32
  2838  0074C3  2D                 	db	45
  2839  0074C4  20                 	db	32
  2840  0074C5  66                 	db	102	;'f'
  2841  0074C6  69                 	db	105	;'i'
  2842  0074C7  6C                 	db	108	;'l'
  2843  0074C8  74                 	db	116	;'t'
  2844  0074C9  65                 	db	101	;'e'
  2845  0074CA  72                 	db	114	;'r'
  2846  0074CB  20                 	db	32
  2847  0074CC  66                 	db	102	;'f'
  2848  0074CD  6F                 	db	111	;'o'
  2849  0074CE  72                 	db	114	;'r'
  2850  0074CF  20                 	db	32
  2851  0074D0  63                 	db	99	;'c'
  2852  0074D1  6C                 	db	108	;'l'
  2853  0074D2  61                 	db	97	;'a'
  2854  0074D3  73                 	db	115	;'s'
  2855  0074D4  73                 	db	115	;'s'
  2856  0074D5  20                 	db	32
  2857  0074D6  69                 	db	105	;'i'
  2858  0074D7  73                 	db	115	;'s'
  2859  0074D8  20                 	db	32
  2860  0074D9  6D                 	db	109	;'m'
  2861  0074DA  69                 	db	105	;'i'
  2862  0074DB  73                 	db	115	;'s'
  2863  0074DC  73                 	db	115	;'s'
  2864  0074DD  69                 	db	105	;'i'
  2865  0074DE  6E                 	db	110	;'n'
  2866  0074DF  67                 	db	103	;'g'
  2867  0074E0  0D                 	db	13
  2868  0074E1  0A                 	db	10
  2869  0074E2  00                 	db	0
  2870  0074E3                     STR_277:
  2871                           
  2872                           ; BSR set to: 1
  2873  0074E3  20                 	db	32
  2874  0074E4  20                 	db	32
  2875  0074E5  20                 	db	32
  2876  0074E6  20                 	db	32
  2877  0074E7  20                 	db	32
  2878  0074E8  20                 	db	32
  2879  0074E9  20                 	db	32
  2880  0074EA  20                 	db	32
  2881  0074EB  20                 	db	32
  2882  0074EC  20                 	db	32
  2883  0074ED  20                 	db	32
  2884  0074EE  4D                 	db	77	;'M'
  2885  0074EF  6F                 	db	111	;'o'
  2886  0074F0  64                 	db	100	;'d'
  2887  0074F1  65                 	db	101	;'e'
  2888  0074F2  73                 	db	115	;'s'
  2889  0074F3  3A                 	db	58	;':'
  2890  0074F4  20                 	db	32
  2891  0074F5  76                 	db	118	;'v'
  2892  0074F6  65                 	db	101	;'e'
  2893  0074F7  72                 	db	114	;'r'
  2894  0074F8  62                 	db	98	;'b'
  2895  0074F9  6F                 	db	111	;'o'
  2896  0074FA  73                 	db	115	;'s'
  2897  0074FB  65                 	db	101	;'e'
  2898  0074FC  7C                 	db	124
  2899  0074FD  76                 	db	118	;'v'
  2900  0074FE  73                 	db	115	;'s'
  2901  0074FF  63                 	db	99	;'c'
  2902  007500  70                 	db	112	;'p'
  2903  007501  7C                 	db	124
  2904  007502  73                 	db	115	;'s'
  2905  007503  6C                 	db	108	;'l'
  2906  007504  63                 	db	99	;'c'
  2907  007505  61                 	db	97	;'a'
  2908  007506  6E                 	db	110	;'n'
  2909  007507  0D                 	db	13
  2910  007508  0A                 	db	10
  2911  007509  00                 	db	0
  2912  00750A                     STR_114:
  2913                           
  2914                           ; BSR set to: 1
  2915  00750A  2D                 	db	45
  2916  00750B  45                 	db	69	;'E'
  2917  00750C  52                 	db	82	;'R'
  2918  00750D  52                 	db	82	;'R'
  2919  00750E  4F                 	db	79	;'O'
  2920  00750F  52                 	db	82	;'R'
  2921  007510  20                 	db	32
  2922  007511  2D                 	db	45
  2923  007512  20                 	db	32
  2924  007513  66                 	db	102	;'f'
  2925  007514  69                 	db	105	;'i'
  2926  007515  6C                 	db	108	;'l'
  2927  007516  74                 	db	116	;'t'
  2928  007517  65                 	db	101	;'e'
  2929  007518  72                 	db	114	;'r'
  2930  007519  20                 	db	32
  2931  00751A  66                 	db	102	;'f'
  2932  00751B  6F                 	db	111	;'o'
  2933  00751C  72                 	db	114	;'r'
  2934  00751D  20                 	db	32
  2935  00751E  74                 	db	116	;'t'
  2936  00751F  79                 	db	121	;'y'
  2937  007520  70                 	db	112	;'p'
  2938  007521  65                 	db	101	;'e'
  2939  007522  20                 	db	32
  2940  007523  69                 	db	105	;'i'
  2941  007524  73                 	db	115	;'s'
  2942  007525  20                 	db	32
  2943  007526  6D                 	db	109	;'m'
  2944  007527  69                 	db	105	;'i'
  2945  007528  73                 	db	115	;'s'
  2946  007529  73                 	db	115	;'s'
  2947  00752A  69                 	db	105	;'i'
  2948  00752B  6E                 	db	110	;'n'
  2949  00752C  67                 	db	103	;'g'
  2950  00752D  0D                 	db	13
  2951  00752E  0A                 	db	10
  2952  00752F  00                 	db	0
  2953  007530                     STR_89:
  2954                           
  2955                           ; BSR set to: 1
  2956  007530  2B                 	db	43
  2957  007531  4F                 	db	79	;'O'
  2958  007532  4B                 	db	75	;'K'
  2959  007533  20                 	db	32
  2960  007534  2D                 	db	45
  2961  007535  20                 	db	32
  2962  007536  56                 	db	86	;'V'
  2963  007537  61                 	db	97	;'a'
  2964  007538  6C                 	db	108	;'l'
  2965  007539  75                 	db	117	;'u'
  2966  00753A  65                 	db	101	;'e'
  2967  00753B  20                 	db	32
  2968  00753C  77                 	db	119	;'w'
  2969  00753D  72                 	db	114	;'r'
  2970  00753E  69                 	db	105	;'i'
  2971  00753F  74                 	db	116	;'t'
  2972  007540  74                 	db	116	;'t'
  2973  007541  65                 	db	101	;'e'
  2974  007542  6E                 	db	110	;'n'
  2975  007543  20                 	db	32
  2976  007544  73                 	db	115	;'s'
  2977  007545  75                 	db	117	;'u'
  2978  007546  63                 	db	99	;'c'
  2979  007547  63                 	db	99	;'c'
  2980  007548  65                 	db	101	;'e'
  2981  007549  73                 	db	115	;'s'
  2982  00754A  73                 	db	115	;'s'
  2983  00754B  66                 	db	102	;'f'
  2984  00754C  75                 	db	117	;'u'
  2985  00754D  6C                 	db	108	;'l'
  2986  00754E  6C                 	db	108	;'l'
  2987  00754F  79                 	db	121	;'y'
  2988  007550  20                 	db	32
  2989  007551  66                 	db	102	;'f'
  2990  007552  6F                 	db	111	;'o'
  2991  007553  72                 	db	114	;'r'
  2992  007554  20                 	db	32
  2993  007555  00                 	db	0
  2994  007556                     STR_123:
  2995                           
  2996                           ; BSR set to: 1
  2997  007556  2D                 	db	45
  2998  007557  45                 	db	69	;'E'
  2999  007558  52                 	db	82	;'R'
  3000  007559  52                 	db	82	;'R'
  3001  00755A  4F                 	db	79	;'O'
  3002  00755B  52                 	db	82	;'R'
  3003  00755C  20                 	db	32
  3004  00755D  2D                 	db	45
  3005  00755E  20                 	db	32
  3006  00755F  4E                 	db	78	;'N'
  3007  007560  6F                 	db	111	;'o'
  3008  007561  20                 	db	32
  3009  007562  6D                 	db	109	;'m'
  3010  007563  61                 	db	97	;'a'
  3011  007564  73                 	db	115	;'s'
  3012  007565  6B                 	db	107	;'k'
  3013  007566  20                 	db	32
  3014  007567  6E                 	db	110	;'n'
  3015  007568  75                 	db	117	;'u'
  3016  007569  6D                 	db	109	;'m'
  3017  00756A  62                 	db	98	;'b'
  3018  00756B  65                 	db	101	;'e'
  3019  00756C  72                 	db	114	;'r'
  3020  00756D  20                 	db	32
  3021  00756E  73                 	db	115	;'s'
  3022  00756F  70                 	db	112	;'p'
  3023  007570  65                 	db	101	;'e'
  3024  007571  63                 	db	99	;'c'
  3025  007572  69                 	db	105	;'i'
  3026  007573  66                 	db	102	;'f'
  3027  007574  69                 	db	105	;'i'
  3028  007575  65                 	db	101	;'e'
  3029  007576  64                 	db	100	;'d'
  3030  007577  2E                 	db	46
  3031  007578  0D                 	db	13
  3032  007579  0A                 	db	10
  3033  00757A  00                 	db	0
  3034  00757B                     STR_1:
  3035                           
  3036                           ; BSR set to: 1
  3037  00757B  0D                 	db	13
  3038  00757C  0A                 	db	10
  3039  00757D  46                 	db	70	;'F'
  3040  00757E  72                 	db	114	;'r'
  3041  00757F  61                 	db	97	;'a'
  3042  007580  6E                 	db	110	;'n'
  3043  007581  6B                 	db	107	;'k'
  3044  007582  66                 	db	102	;'f'
  3045  007583  75                 	db	117	;'u'
  3046  007584  72                 	db	114	;'r'
  3047  007585  74                 	db	116	;'t'
  3048  007586  20                 	db	32
  3049  007587  52                 	db	82	;'R'
  3050  007588  53                 	db	83	;'S'
  3051  007589  2D                 	db	45
  3052  00758A  32                 	db	50	;'2'
  3053  00758B  33                 	db	51	;'3'
  3054  00758C  32                 	db	50	;'2'
  3055  00758D  20                 	db	32
  3056  00758E  43                 	db	67	;'C'
  3057  00758F  41                 	db	65	;'A'
  3058  007590  4E                 	db	78	;'N'
  3059  007591  34                 	db	52	;'4'
  3060  007592  56                 	db	86	;'V'
  3061  007593  53                 	db	83	;'S'
  3062  007594  43                 	db	67	;'C'
  3063  007595  50                 	db	80	;'P'
  3064  007596  20                 	db	32
  3065  007597  6D                 	db	109	;'m'
  3066  007598  6F                 	db	111	;'o'
  3067  007599  64                 	db	100	;'d'
  3068  00759A  75                 	db	117	;'u'
  3069  00759B  6C                 	db	108	;'l'
  3070  00759C  65                 	db	101	;'e'
  3071  00759D  0D                 	db	13
  3072  00759E  0A                 	db	10
  3073  00759F  00                 	db	0
  3074  0075A0                     STR_127:
  3075                           
  3076                           ; BSR set to: 1
  3077  0075A0  2D                 	db	45
  3078  0075A1  45                 	db	69	;'E'
  3079  0075A2  52                 	db	82	;'R'
  3080  0075A3  52                 	db	82	;'R'
  3081  0075A4  4F                 	db	79	;'O'
  3082  0075A5  52                 	db	82	;'R'
  3083  0075A6  20                 	db	32
  3084  0075A7  2D                 	db	45
  3085  0075A8  20                 	db	32
  3086  0075A9  6D                 	db	109	;'m'
  3087  0075AA  61                 	db	97	;'a'
  3088  0075AB  73                 	db	115	;'s'
  3089  0075AC  6B                 	db	107	;'k'
  3090  0075AD  20                 	db	32
  3091  0075AE  66                 	db	102	;'f'
  3092  0075AF  6F                 	db	111	;'o'
  3093  0075B0  72                 	db	114	;'r'
  3094  0075B1  20                 	db	32
  3095  0075B2  63                 	db	99	;'c'
  3096  0075B3  6C                 	db	108	;'l'
  3097  0075B4  61                 	db	97	;'a'
  3098  0075B5  73                 	db	115	;'s'
  3099  0075B6  73                 	db	115	;'s'
  3100  0075B7  20                 	db	32
  3101  0075B8  69                 	db	105	;'i'
  3102  0075B9  73                 	db	115	;'s'
  3103  0075BA  20                 	db	32
  3104  0075BB  6D                 	db	109	;'m'
  3105  0075BC  69                 	db	105	;'i'
  3106  0075BD  73                 	db	115	;'s'
  3107  0075BE  73                 	db	115	;'s'
  3108  0075BF  69                 	db	105	;'i'
  3109  0075C0  6E                 	db	110	;'n'
  3110  0075C1  67                 	db	103	;'g'
  3111  0075C2  0D                 	db	13
  3112  0075C3  0A                 	db	10
  3113  0075C4  00                 	db	0
  3114  0075C5                     STR_129:
  3115                           
  3116                           ; BSR set to: 1
  3117  0075C5  2D                 	db	45
  3118  0075C6  45                 	db	69	;'E'
  3119  0075C7  52                 	db	82	;'R'
  3120  0075C8  52                 	db	82	;'R'
  3121  0075C9  4F                 	db	79	;'O'
  3122  0075CA  52                 	db	82	;'R'
  3123  0075CB  20                 	db	32
  3124  0075CC  2D                 	db	45
  3125  0075CD  20                 	db	32
  3126  0075CE  6D                 	db	109	;'m'
  3127  0075CF  61                 	db	97	;'a'
  3128  0075D0  73                 	db	115	;'s'
  3129  0075D1  6B                 	db	107	;'k'
  3130  0075D2  20                 	db	32
  3131  0075D3  66                 	db	102	;'f'
  3132  0075D4  6F                 	db	111	;'o'
  3133  0075D5  72                 	db	114	;'r'
  3134  0075D6  20                 	db	32
  3135  0075D7  74                 	db	116	;'t'
  3136  0075D8  79                 	db	121	;'y'
  3137  0075D9  70                 	db	112	;'p'
  3138  0075DA  65                 	db	101	;'e'
  3139  0075DB  20                 	db	32
  3140  0075DC  69                 	db	105	;'i'
  3141  0075DD  73                 	db	115	;'s'
  3142  0075DE  20                 	db	32
  3143  0075DF  6D                 	db	109	;'m'
  3144  0075E0  69                 	db	105	;'i'
  3145  0075E1  73                 	db	115	;'s'
  3146  0075E2  73                 	db	115	;'s'
  3147  0075E3  69                 	db	105	;'i'
  3148  0075E4  6E                 	db	110	;'n'
  3149  0075E5  67                 	db	103	;'g'
  3150  0075E6  0D                 	db	13
  3151  0075E7  0A                 	db	10
  3152  0075E8  00                 	db	0
  3153  0075E9                     STR_93:
  3154                           
  3155                           ; BSR set to: 1
  3156  0075E9  2D                 	db	45
  3157  0075EA  45                 	db	69	;'E'
  3158  0075EB  52                 	db	82	;'R'
  3159  0075EC  52                 	db	82	;'R'
  3160  0075ED  4F                 	db	79	;'O'
  3161  0075EE  52                 	db	82	;'R'
  3162  0075EF  20                 	db	32
  3163  0075F0  2D                 	db	45
  3164  0075F1  20                 	db	32
  3165  0075F2  46                 	db	70	;'F'
  3166  0075F3  61                 	db	97	;'a'
  3167  0075F4  69                 	db	105	;'i'
  3168  0075F5  6C                 	db	108	;'l'
  3169  0075F6  65                 	db	101	;'e'
  3170  0075F7  64                 	db	100	;'d'
  3171  0075F8  20                 	db	32
  3172  0075F9  74                 	db	116	;'t'
  3173  0075FA  6F                 	db	111	;'o'
  3174  0075FB  20                 	db	32
  3175  0075FC  77                 	db	119	;'w'
  3176  0075FD  72                 	db	114	;'r'
  3177  0075FE  69                 	db	105	;'i'
  3178  0075FF  74                 	db	116	;'t'
  3179  007600  65                 	db	101	;'e'
  3180  007601  20                 	db	32
  3181  007602  76                 	db	118	;'v'
  3182  007603  61                 	db	97	;'a'
  3183  007604  6C                 	db	108	;'l'
  3184  007605  75                 	db	117	;'u'
  3185  007606  65                 	db	101	;'e'
  3186  007607  20                 	db	32
  3187  007608  66                 	db	102	;'f'
  3188  007609  6F                 	db	111	;'o'
  3189  00760A  72                 	db	114	;'r'
  3190  00760B  20                 	db	32
  3191  00760C  00                 	db	0
  3192  00760D                     STR_3:
  3193                           
  3194                           ; BSR set to: 1
  3195  00760D  68                 	db	104	;'h'
  3196  00760E  74                 	db	116	;'t'
  3197  00760F  74                 	db	116	;'t'
  3198  007610  70                 	db	112	;'p'
  3199  007611  3A                 	db	58	;':'
  3200  007612  2F                 	db	47
  3201  007613  2F                 	db	47
  3202  007614  77                 	db	119	;'w'
  3203  007615  77                 	db	119	;'w'
  3204  007616  77                 	db	119	;'w'
  3205  007617  2E                 	db	46
  3206  007618  70                 	db	112	;'p'
  3207  007619  61                 	db	97	;'a'
  3208  00761A  72                 	db	114	;'r'
  3209  00761B  61                 	db	97	;'a'
  3210  00761C  64                 	db	100	;'d'
  3211  00761D  69                 	db	105	;'i'
  3212  00761E  73                 	db	115	;'s'
  3213  00761F  65                 	db	101	;'e'
  3214  007620  6F                 	db	111	;'o'
  3215  007621  66                 	db	102	;'f'
  3216  007622  74                 	db	116	;'t'
  3217  007623  68                 	db	104	;'h'
  3218  007624  65                 	db	101	;'e'
  3219  007625  66                 	db	102	;'f'
  3220  007626  72                 	db	114	;'r'
  3221  007627  6F                 	db	111	;'o'
  3222  007628  67                 	db	103	;'g'
  3223  007629  2E                 	db	46
  3224  00762A  63                 	db	99	;'c'
  3225  00762B  6F                 	db	111	;'o'
  3226  00762C  6D                 	db	109	;'m'
  3227  00762D  0D                 	db	13
  3228  00762E  0A                 	db	10
  3229  00762F  00                 	db	0
  3230  007630                     STR_270:
  3231                           
  3232                           ; BSR set to: 1
  3233  007630  53                 	db	83	;'S'
  3234  007631  45                 	db	69	;'E'
  3235  007632  54                 	db	84	;'T'
  3236  007633  20                 	db	32
  3237  007634  2D                 	db	45
  3238  007635  20                 	db	32
  3239  007636  50                 	db	80	;'P'
  3240  007637  65                 	db	101	;'e'
  3241  007638  72                 	db	114	;'r'
  3242  007639  73                 	db	115	;'s'
  3243  00763A  69                 	db	105	;'i'
  3244  00763B  73                 	db	115	;'s'
  3245  00763C  74                 	db	116	;'t'
  3246  00763D  65                 	db	101	;'e'
  3247  00763E  6E                 	db	110	;'n'
  3248  00763F  74                 	db	116	;'t'
  3249  007640  20                 	db	32
  3250  007641  66                 	db	102	;'f'
  3251  007642  75                 	db	117	;'u'
  3252  007643  6E                 	db	110	;'n'
  3253  007644  63                 	db	99	;'c'
  3254  007645  74                 	db	116	;'t'
  3255  007646  69                 	db	105	;'i'
  3256  007647  6F                 	db	111	;'o'
  3257  007648  6E                 	db	110	;'n'
  3258  007649  61                 	db	97	;'a'
  3259  00764A  6C                 	db	108	;'l'
  3260  00764B  69                 	db	105	;'i'
  3261  00764C  74                 	db	116	;'t'
  3262  00764D  79                 	db	121	;'y'
  3263  00764E  2E                 	db	46
  3264  00764F  0D                 	db	13
  3265  007650  0A                 	db	10
  3266  007651  00                 	db	0
  3267  007652                     STR_259:
  3268                           
  3269                           ; BSR set to: 1
  3270  007652  53                 	db	83	;'S'
  3271  007653  54                 	db	84	;'T'
  3272  007654  41                 	db	65	;'A'
  3273  007655  54                 	db	84	;'T'
  3274  007656  20                 	db	32
  3275  007657  2D                 	db	45
  3276  007658  20                 	db	32
  3277  007659  44                 	db	68	;'D'
  3278  00765A  69                 	db	105	;'i'
  3279  00765B  73                 	db	115	;'s'
  3280  00765C  70                 	db	112	;'p'
  3281  00765D  6C                 	db	108	;'l'
  3282  00765E  61                 	db	97	;'a'
  3283  00765F  79                 	db	121	;'y'
  3284  007660  20                 	db	32
  3285  007661  43                 	db	67	;'C'
  3286  007662  41                 	db	65	;'A'
  3287  007663  4E                 	db	78	;'N'
  3288  007664  20                 	db	32
  3289  007665  73                 	db	115	;'s'
  3290  007666  74                 	db	116	;'t'
  3291  007667  61                 	db	97	;'a'
  3292  007668  74                 	db	116	;'t'
  3293  007669  69                 	db	105	;'i'
  3294  00766A  73                 	db	115	;'s'
  3295  00766B  74                 	db	116	;'t'
  3296  00766C  69                 	db	105	;'i'
  3297  00766D  63                 	db	99	;'c'
  3298  00766E  73                 	db	115	;'s'
  3299  00766F  2E                 	db	46
  3300  007670  0D                 	db	13
  3301  007671  0A                 	db	10
  3302  007672  00                 	db	0
  3303  007673                     STR_37:
  3304                           
  3305                           ; BSR set to: 1
  3306  007673  2D                 	db	45
  3307  007674  45                 	db	69	;'E'
  3308  007675  52                 	db	82	;'R'
  3309  007676  52                 	db	82	;'R'
  3310  007677  4F                 	db	79	;'O'
  3311  007678  52                 	db	82	;'R'
  3312  007679  20                 	db	32
  3313  00767A  2D                 	db	45
  3314  00767B  20                 	db	32
  3315  00767C  46                 	db	70	;'F'
  3316  00767D  61                 	db	97	;'a'
  3317  00767E  69                 	db	105	;'i'
  3318  00767F  6C                 	db	108	;'l'
  3319  007680  65                 	db	101	;'e'
  3320  007681  64                 	db	100	;'d'
  3321  007682  20                 	db	32
  3322  007683  74                 	db	116	;'t'
  3323  007684  6F                 	db	111	;'o'
  3324  007685  20                 	db	32
  3325  007686  73                 	db	115	;'s'
  3326  007687  65                 	db	101	;'e'
  3327  007688  6E                 	db	110	;'n'
  3328  007689  64                 	db	100	;'d'
  3329  00768A  20                 	db	32
  3330  00768B  65                 	db	101	;'e'
  3331  00768C  76                 	db	118	;'v'
  3332  00768D  65                 	db	101	;'e'
  3333  00768E  6E                 	db	110	;'n'
  3334  00768F  74                 	db	116	;'t'
  3335  007690  2E                 	db	46
  3336  007691  0D                 	db	13
  3337  007692  0A                 	db	10
  3338  007693  00                 	db	0
  3339  007694                     STR_167:
  3340                           
  3341                           ; BSR set to: 1
  3342  007694  2D                 	db	45
  3343  007695  45                 	db	69	;'E'
  3344  007696  52                 	db	82	;'R'
  3345  007697  52                 	db	82	;'R'
  3346  007698  4F                 	db	79	;'O'
  3347  007699  52                 	db	82	;'R'
  3348  00769A  20                 	db	32
  3349  00769B  2D                 	db	45
  3350  00769C  20                 	db	32
  3351  00769D  55                 	db	85	;'U'
  3352  00769E  6E                 	db	110	;'n'
  3353  00769F  6B                 	db	107	;'k'
  3354  0076A0  6E                 	db	110	;'n'
  3355  0076A1  6F                 	db	111	;'o'
  3356  0076A2  77                 	db	119	;'w'
  3357  0076A3  6E                 	db	110	;'n'
  3358  0076A4  20                 	db	32
  3359  0076A5  27                 	db	39
  3360  0076A6  53                 	db	83	;'S'
  3361  0076A7  45                 	db	69	;'E'
  3362  0076A8  54                 	db	84	;'T'
  3363  0076A9  27                 	db	39
  3364  0076AA  20                 	db	32
  3365  0076AB  63                 	db	99	;'c'
  3366  0076AC  6F                 	db	111	;'o'
  3367  0076AD  6D                 	db	109	;'m'
  3368  0076AE  6D                 	db	109	;'m'
  3369  0076AF  61                 	db	97	;'a'
  3370  0076B0  6E                 	db	110	;'n'
  3371  0076B1  64                 	db	100	;'d'
  3372  0076B2  0D                 	db	13
  3373  0076B3  0A                 	db	10
  3374  0076B4  00                 	db	0
  3375  0076B5                     STR_54:
  3376                           
  3377                           ; BSR set to: 1
  3378  0076B5  2D                 	db	45
  3379  0076B6  45                 	db	69	;'E'
  3380  0076B7  52                 	db	82	;'R'
  3381  0076B8  52                 	db	82	;'R'
  3382  0076B9  4F                 	db	79	;'O'
  3383  0076BA  52                 	db	82	;'R'
  3384  0076BB  20                 	db	32
  3385  0076BC  2D                 	db	45
  3386  0076BD  20                 	db	32
  3387  0076BE  4E                 	db	78	;'N'
  3388  0076BF  65                 	db	101	;'e'
  3389  0076C0  65                 	db	101	;'e'
  3390  0076C1  64                 	db	100	;'d'
  3391  0076C2  73                 	db	115	;'s'
  3392  0076C3  20                 	db	32
  3393  0076C4  5B                 	db	91	;'['
  3394  0076C5  70                 	db	112	;'p'
  3395  0076C6  61                 	db	97	;'a'
  3396  0076C7  67                 	db	103	;'g'
  3397  0076C8  65                 	db	101	;'e'
  3398  0076C9  3A                 	db	58	;':'
  3399  0076CA  5D                 	db	93	;']'
  3400  0076CB  72                 	db	114	;'r'
  3401  0076CC  65                 	db	101	;'e'
  3402  0076CD  67                 	db	103	;'g'
  3403  0076CE  69                 	db	105	;'i'
  3404  0076CF  73                 	db	115	;'s'
  3405  0076D0  74                 	db	116	;'t'
  3406  0076D1  65                 	db	101	;'e'
  3407  0076D2  72                 	db	114	;'r'
  3408  0076D3  0D                 	db	13
  3409  0076D4  0A                 	db	10
  3410  0076D5  00                 	db	0
  3411  0076D6                     STR_150:
  3412                           
  3413                           ; BSR set to: 1
  3414  0076D6  2B                 	db	43
  3415  0076D7  4F                 	db	79	;'O'
  3416  0076D8  4B                 	db	75	;'K'
  3417  0076D9  20                 	db	32
  3418  0076DA  2D                 	db	45
  3419  0076DB  20                 	db	32
  3420  0076DC  4D                 	db	77	;'M'
  3421  0076DD  6F                 	db	111	;'o'
  3422  0076DE  64                 	db	100	;'d'
  3423  0076DF  65                 	db	101	;'e'
  3424  0076E0  20                 	db	32
  3425  0076E1  69                 	db	105	;'i'
  3426  0076E2  73                 	db	115	;'s'
  3427  0076E3  20                 	db	32
  3428  0076E4  6E                 	db	110	;'n'
  3429  0076E5  6F                 	db	111	;'o'
  3430  0076E6  77                 	db	119	;'w'
  3431  0076E7  20                 	db	32
  3432  0076E8  56                 	db	86	;'V'
  3433  0076E9  53                 	db	83	;'S'
  3434  0076EA  43                 	db	67	;'C'
  3435  0076EB  50                 	db	80	;'P'
  3436  0076EC  20                 	db	32
  3437  0076ED  44                 	db	68	;'D'
  3438  0076EE  72                 	db	114	;'r'
  3439  0076EF  69                 	db	105	;'i'
  3440  0076F0  76                 	db	118	;'v'
  3441  0076F1  65                 	db	101	;'e'
  3442  0076F2  72                 	db	114	;'r'
  3443  0076F3  0D                 	db	13
  3444  0076F4  0A                 	db	10
  3445  0076F5  00                 	db	0
  3446  0076F6                     STR_7:
  3447                           
  3448                           ; BSR set to: 1
  3449  0076F6  57                 	db	87	;'W'
  3450  0076F7  69                 	db	105	;'i'
  3451  0076F8  6C                 	db	108	;'l'
  3452  0076F9  6C                 	db	108	;'l'
  3453  0076FA  20                 	db	32
  3454  0076FB  65                 	db	101	;'e'
  3455  0076FC  6E                 	db	110	;'n'
  3456  0076FD  74                 	db	116	;'t'
  3457  0076FE  65                 	db	101	;'e'
  3458  0076FF  72                 	db	114	;'r'
  3459  007700  20                 	db	32
  3460  007701  62                 	db	98	;'b'
  3461  007702  6F                 	db	111	;'o'
  3462  007703  6F                 	db	111	;'o'
  3463  007704  74                 	db	116	;'t'
  3464  007705  6C                 	db	108	;'l'
  3465  007706  6F                 	db	111	;'o'
  3466  007707  61                 	db	97	;'a'
  3467  007708  64                 	db	100	;'d'
  3468  007709  65                 	db	101	;'e'
  3469  00770A  72                 	db	114	;'r'
  3470  00770B  20                 	db	32
  3471  00770C  6E                 	db	110	;'n'
  3472  00770D  6F                 	db	111	;'o'
  3473  00770E  77                 	db	119	;'w'
  3474  00770F  2E                 	db	46
  3475  007710  2E                 	db	46
  3476  007711  2E                 	db	46
  3477  007712  0D                 	db	13
  3478  007713  0A                 	db	10
  3479  007714  00                 	db	0
  3480  007715                     STR_253:
  3481                           
  3482                           ; BSR set to: 1
  3483  007715  43                 	db	67	;'C'
  3484  007716  4C                 	db	76	;'L'
  3485  007717  4F                 	db	79	;'O'
  3486  007718  53                 	db	83	;'S'
  3487  007719  45                 	db	69	;'E'
  3488  00771A  20                 	db	32
  3489  00771B  2D                 	db	45
  3490  00771C  20                 	db	32
  3491  00771D  43                 	db	67	;'C'
  3492  00771E  6C                 	db	108	;'l'
  3493  00771F  6F                 	db	111	;'o'
  3494  007720  73                 	db	115	;'s'
  3495  007721  65                 	db	101	;'e'
  3496  007722  20                 	db	32
  3497  007723  43                 	db	67	;'C'
  3498  007724  41                 	db	65	;'A'
  3499  007725  4E                 	db	78	;'N'
  3500  007726  20                 	db	32
  3501  007727  69                 	db	105	;'i'
  3502  007728  6E                 	db	110	;'n'
  3503  007729  74                 	db	116	;'t'
  3504  00772A  65                 	db	101	;'e'
  3505  00772B  72                 	db	114	;'r'
  3506  00772C  66                 	db	102	;'f'
  3507  00772D  61                 	db	97	;'a'
  3508  00772E  63                 	db	99	;'c'
  3509  00772F  65                 	db	101	;'e'
  3510  007730  2E                 	db	46
  3511  007731  0D                 	db	13
  3512  007732  0A                 	db	10
  3513  007733  00                 	db	0
  3514  007734                     STR_5:
  3515                           
  3516                           ; BSR set to: 1
  3517  007734  54                 	db	84	;'T'
  3518  007735  65                 	db	101	;'e'
  3519  007736  6D                 	db	109	;'m'
  3520  007737  70                 	db	112	;'p'
  3521  007738  6F                 	db	111	;'o'
  3522  007739  72                 	db	114	;'r'
  3523  00773A  61                 	db	97	;'a'
  3524  00773B  72                 	db	114	;'r'
  3525  00773C  79                 	db	121	;'y'
  3526  00773D  20                 	db	32
  3527  00773E  76                 	db	118	;'v'
  3528  00773F  65                 	db	101	;'e'
  3529  007740  72                 	db	114	;'r'
  3530  007741  62                 	db	98	;'b'
  3531  007742  6F                 	db	111	;'o'
  3532  007743  73                 	db	115	;'s'
  3533  007744  65                 	db	101	;'e'
  3534  007745  20                 	db	32
  3535  007746  6D                 	db	109	;'m'
  3536  007747  6F                 	db	111	;'o'
  3537  007748  64                 	db	100	;'d'
  3538  007749  65                 	db	101	;'e'
  3539  00774A  20                 	db	32
  3540  00774B  73                 	db	115	;'s'
  3541  00774C  65                 	db	101	;'e'
  3542  00774D  74                 	db	116	;'t'
  3543  00774E  0D                 	db	13
  3544  00774F  0A                 	db	10
  3545  007750  00                 	db	0
  3546  007751                     STR_148:
  3547                           
  3548                           ; BSR set to: 1
  3549  007751  2B                 	db	43
  3550  007752  4F                 	db	79	;'O'
  3551  007753  4B                 	db	75	;'K'
  3552  007754  20                 	db	32
  3553  007755  2D                 	db	45
  3554  007756  20                 	db	32
  3555  007757  4D                 	db	77	;'M'
  3556  007758  6F                 	db	111	;'o'
  3557  007759  64                 	db	100	;'d'
  3558  00775A  65                 	db	101	;'e'
  3559  00775B  20                 	db	32
  3560  00775C  69                 	db	105	;'i'
  3561  00775D  73                 	db	115	;'s'
  3562  00775E  20                 	db	32
  3563  00775F  6E                 	db	110	;'n'
  3564  007760  6F                 	db	111	;'o'
  3565  007761  77                 	db	119	;'w'
  3566  007762  20                 	db	32
  3567  007763  76                 	db	118	;'v'
  3568  007764  65                 	db	101	;'e'
  3569  007765  72                 	db	114	;'r'
  3570  007766  62                 	db	98	;'b'
  3571  007767  6F                 	db	111	;'o'
  3572  007768  73                 	db	115	;'s'
  3573  007769  65                 	db	101	;'e'
  3574  00776A  0D                 	db	13
  3575  00776B  0A                 	db	10
  3576  00776C  00                 	db	0
  3577  00776D                     STR_103:
  3578                           
  3579                           ; BSR set to: 1
  3580  00776D  2D                 	db	45
  3581  00776E  45                 	db	69	;'E'
  3582  00776F  52                 	db	82	;'R'
  3583  007770  52                 	db	82	;'R'
  3584  007771  4F                 	db	79	;'O'
  3585  007772  52                 	db	82	;'R'
  3586  007773  20                 	db	32
  3587  007774  2D                 	db	45
  3588  007775  20                 	db	32
  3589  007776  4E                 	db	78	;'N'
  3590  007777  6F                 	db	111	;'o'
  3591  007778  64                 	db	100	;'d'
  3592  007779  65                 	db	101	;'e'
  3593  00777A  20                 	db	32
  3594  00777B  6E                 	db	110	;'n'
  3595  00777C  6F                 	db	111	;'o'
  3596  00777D  74                 	db	116	;'t'
  3597  00777E  20                 	db	32
  3598  00777F  66                 	db	102	;'f'
  3599  007780  6F                 	db	111	;'o'
  3600  007781  75                 	db	117	;'u'
  3601  007782  6E                 	db	110	;'n'
  3602  007783  64                 	db	100	;'d'
  3603  007784  2E                 	db	46
  3604  007785  0D                 	db	13
  3605  007786  0A                 	db	10
  3606  007787  00                 	db	0
  3607  007788                     STR_248:
  3608                           
  3609                           ; BSR set to: 1
  3610  007788  42                 	db	66	;'B'
  3611  007789  4F                 	db	79	;'O'
  3612  00778A  4F                 	db	79	;'O'
  3613  00778B  54                 	db	84	;'T'
  3614  00778C  20                 	db	32
  3615  00778D  2D                 	db	45
  3616  00778E  20                 	db	32
  3617  00778F  45                 	db	69	;'E'
  3618  007790  6E                 	db	110	;'n'
  3619  007791  74                 	db	116	;'t'
  3620  007792  65                 	db	101	;'e'
  3621  007793  72                 	db	114	;'r'
  3622  007794  20                 	db	32
  3623  007795  62                 	db	98	;'b'
  3624  007796  6F                 	db	111	;'o'
  3625  007797  6F                 	db	111	;'o'
  3626  007798  74                 	db	116	;'t'
  3627  007799  6C                 	db	108	;'l'
  3628  00779A  6F                 	db	111	;'o'
  3629  00779B  61                 	db	97	;'a'
  3630  00779C  64                 	db	100	;'d'
  3631  00779D  65                 	db	101	;'e'
  3632  00779E  72                 	db	114	;'r'
  3633  00779F  2E                 	db	46
  3634  0077A0  0D                 	db	13
  3635  0077A1  0A                 	db	10
  3636  0077A2  00                 	db	0
  3637  0077A3                     STR_169:
  3638                           
  3639                           ; BSR set to: 1
  3640  0077A3  2D                 	db	45
  3641  0077A4  45                 	db	69	;'E'
  3642  0077A5  52                 	db	82	;'R'
  3643  0077A6  52                 	db	82	;'R'
  3644  0077A7  4F                 	db	79	;'O'
  3645  0077A8  52                 	db	82	;'R'
  3646  0077A9  20                 	db	32
  3647  0077AA  2D                 	db	45
  3648  0077AB  20                 	db	32
  3649  0077AC  55                 	db	85	;'U'
  3650  0077AD  6E                 	db	110	;'n'
  3651  0077AE  6B                 	db	107	;'k'
  3652  0077AF  6E                 	db	110	;'n'
  3653  0077B0  6F                 	db	111	;'o'
  3654  0077B1  77                 	db	119	;'w'
  3655  0077B2  6E                 	db	110	;'n'
  3656  0077B3  20                 	db	32
  3657  0077B4  63                 	db	99	;'c'
  3658  0077B5  6F                 	db	111	;'o'
  3659  0077B6  6D                 	db	109	;'m'
  3660  0077B7  6D                 	db	109	;'m'
  3661  0077B8  61                 	db	97	;'a'
  3662  0077B9  6E                 	db	110	;'n'
  3663  0077BA  64                 	db	100	;'d'
  3664  0077BB  0D                 	db	13
  3665  0077BC  0A                 	db	10
  3666  0077BD  00                 	db	0
  3667  0077BE                     STR_281:
  3668                           
  3669                           ; BSR set to: 1
  3670  0077BE  4E                 	db	78	;'N'
  3671  0077BF  6F                 	db	111	;'o'
  3672  0077C0  64                 	db	100	;'d'
  3673  0077C1  65                 	db	101	;'e'
  3674  0077C2  20                 	db	32
  3675  0077C3  66                 	db	102	;'f'
  3676  0077C4  6F                 	db	111	;'o'
  3677  0077C5  75                 	db	117	;'u'
  3678  0077C6  6E                 	db	110	;'n'
  3679  0077C7  64                 	db	100	;'d'
  3680  0077C8  20                 	db	32
  3681  0077C9  77                 	db	119	;'w'
  3682  0077CA  69                 	db	105	;'i'
  3683  0077CB  74                 	db	116	;'t'
  3684  0077CC  68                 	db	104	;'h'
  3685  0077CD  20                 	db	32
  3686  0077CE  6E                 	db	110	;'n'
  3687  0077CF  6F                 	db	111	;'o'
  3688  0077D0  64                 	db	100	;'d'
  3689  0077D1  65                 	db	101	;'e'
  3690  0077D2  20                 	db	32
  3691  0077D3  69                 	db	105	;'i'
  3692  0077D4  64                 	db	100	;'d'
  3693  0077D5  20                 	db	32
  3694  0077D6  3D                 	db	61	;'='
  3695  0077D7  20                 	db	32
  3696  0077D8  00                 	db	0
  3697  0077D9                     STR_152:
  3698                           
  3699                           ; BSR set to: 1
  3700  0077D9  2B                 	db	43
  3701  0077DA  4F                 	db	79	;'O'
  3702  0077DB  4B                 	db	75	;'K'
  3703  0077DC  20                 	db	32
  3704  0077DD  2D                 	db	45
  3705  0077DE  20                 	db	32
  3706  0077DF  4D                 	db	77	;'M'
  3707  0077E0  6F                 	db	111	;'o'
  3708  0077E1  64                 	db	100	;'d'
  3709  0077E2  65                 	db	101	;'e'
  3710  0077E3  20                 	db	32
  3711  0077E4  69                 	db	105	;'i'
  3712  0077E5  73                 	db	115	;'s'
  3713  0077E6  20                 	db	32
  3714  0077E7  6E                 	db	110	;'n'
  3715  0077E8  6F                 	db	111	;'o'
  3716  0077E9  77                 	db	119	;'w'
  3717  0077EA  20                 	db	32
  3718  0077EB  53                 	db	83	;'S'
  3719  0077EC  4C                 	db	76	;'L'
  3720  0077ED  43                 	db	67	;'C'
  3721  0077EE  41                 	db	65	;'A'
  3722  0077EF  4E                 	db	78	;'N'
  3723  0077F0  0D                 	db	13
  3724  0077F1  0A                 	db	10
  3725  0077F2  00                 	db	0
  3726  0077F3                     STR_25:
  3727                           
  3728                           ; BSR set to: 1
  3729  0077F3  2B                 	db	43
  3730  0077F4  4F                 	db	79	;'O'
  3731  0077F5  4B                 	db	75	;'K'
  3732  0077F6  20                 	db	32
  3733  0077F7  2D                 	db	45
  3734  0077F8  20                 	db	32
  3735  0077F9  4C                 	db	76	;'L'
  3736  0077FA  69                 	db	105	;'i'
  3737  0077FB  73                 	db	115	;'s'
  3738  0077FC  74                 	db	116	;'t'
  3739  0077FD  65                 	db	101	;'e'
  3740  0077FE  6E                 	db	110	;'n'
  3741  0077FF  20                 	db	32
  3742  007800  6F                 	db	111	;'o'
  3743  007801  6E                 	db	110	;'n'
  3744  007802  6C                 	db	108	;'l'
  3745  007803  79                 	db	121	;'y'
  3746  007804  20                 	db	32
  3747  007805  6D                 	db	109	;'m'
  3748  007806  6F                 	db	111	;'o'
  3749  007807  64                 	db	100	;'d'
  3750  007808  65                 	db	101	;'e'
  3751  007809  0D                 	db	13
  3752  00780A  0A                 	db	10
  3753  00780B  00                 	db	0
  3754  00780C                     STR_232:
  3755                           
  3756                           ; BSR set to: 1
  3757  00780C  54                 	db	84	;'T'
  3758  00780D  72                 	db	114	;'r'
  3759  00780E  61                 	db	97	;'a'
  3760  00780F  6E                 	db	110	;'n'
  3761  007810  73                 	db	115	;'s'
  3762  007811  6D                 	db	109	;'m'
  3763  007812  69                 	db	105	;'i'
  3764  007813  74                 	db	116	;'t'
  3765  007814  20                 	db	32
  3766  007815  45                 	db	69	;'E'
  3767  007816  72                 	db	114	;'r'
  3768  007817  72                 	db	114	;'r'
  3769  007818  6F                 	db	111	;'o'
  3770  007819  72                 	db	114	;'r'
  3771  00781A  20                 	db	32
  3772  00781B  43                 	db	67	;'C'
  3773  00781C  6F                 	db	111	;'o'
  3774  00781D  75                 	db	117	;'u'
  3775  00781E  6E                 	db	110	;'n'
  3776  00781F  74                 	db	116	;'t'
  3777  007820  65                 	db	101	;'e'
  3778  007821  72                 	db	114	;'r'
  3779  007822  3A                 	db	58	;':'
  3780  007823  20                 	db	32
  3781  007824  00                 	db	0
  3782  007825                     STR_73:
  3783                           
  3784                           ; BSR set to: 1
  3785  007825  55                 	db	85	;'U'
  3786  007826  6E                 	db	110	;'n'
  3787  007827  61                 	db	97	;'a'
  3788  007828  62                 	db	98	;'b'
  3789  007829  6C                 	db	108	;'l'
  3790  00782A  65                 	db	101	;'e'
  3791  00782B  20                 	db	32
  3792  00782C  74                 	db	116	;'t'
  3793  00782D  6F                 	db	111	;'o'
  3794  00782E  20                 	db	32
  3795  00782F  72                 	db	114	;'r'
  3796  007830  65                 	db	101	;'e'
  3797  007831  61                 	db	97	;'a'
  3798  007832  64                 	db	100	;'d'
  3799  007833  20                 	db	32
  3800  007834  72                 	db	114	;'r'
  3801  007835  65                 	db	101	;'e'
  3802  007836  67                 	db	103	;'g'
  3803  007837  69                 	db	105	;'i'
  3804  007838  73                 	db	115	;'s'
  3805  007839  74                 	db	116	;'t'
  3806  00783A  65                 	db	101	;'e'
  3807  00783B  72                 	db	114	;'r'
  3808  00783C  20                 	db	32
  3809  00783D  00                 	db	0
  3810  00783E                     STR_256:
  3811                           
  3812                           ; BSR set to: 1
  3813  00783E  54                 	db	84	;'T'
  3814  00783F  58                 	db	88	;'X'
  3815  007840  20                 	db	32
  3816  007841  2D                 	db	45
  3817  007842  20                 	db	32
  3818  007843  53                 	db	83	;'S'
  3819  007844  65                 	db	101	;'e'
  3820  007845  6E                 	db	110	;'n'
  3821  007846  64                 	db	100	;'d'
  3822  007847  20                 	db	32
  3823  007848  43                 	db	67	;'C'
  3824  007849  41                 	db	65	;'A'
  3825  00784A  4E                 	db	78	;'N'
  3826  00784B  20                 	db	32
  3827  00784C  66                 	db	102	;'f'
  3828  00784D  72                 	db	114	;'r'
  3829  00784E  61                 	db	97	;'a'
  3830  00784F  6D                 	db	109	;'m'
  3831  007850  65                 	db	101	;'e'
  3832  007851  20                 	db	32
  3833  007852  2E                 	db	46
  3834  007853  0D                 	db	13
  3835  007854  0A                 	db	10
  3836  007855  00                 	db	0
  3837  007856                     STR_266:
  3838                           
  3839                           ; BSR set to: 1
  3840  007856  46                 	db	70	;'F'
  3841  007857  49                 	db	73	;'I'
  3842  007858  4C                 	db	76	;'L'
  3843  007859  54                 	db	84	;'T'
  3844  00785A  45                 	db	69	;'E'
  3845  00785B  52                 	db	82	;'R'
  3846  00785C  20                 	db	32
  3847  00785D  2D                 	db	45
  3848  00785E  20                 	db	32
  3849  00785F  53                 	db	83	;'S'
  3850  007860  65                 	db	101	;'e'
  3851  007861  74                 	db	116	;'t'
  3852  007862  20                 	db	32
  3853  007863  66                 	db	102	;'f'
  3854  007864  69                 	db	105	;'i'
  3855  007865  6C                 	db	108	;'l'
  3856  007866  74                 	db	116	;'t'
  3857  007867  65                 	db	101	;'e'
  3858  007868  72                 	db	114	;'r'
  3859  007869  20                 	db	32
  3860  00786A  2E                 	db	46
  3861  00786B  0D                 	db	13
  3862  00786C  0A                 	db	10
  3863  00786D  00                 	db	0
  3864  00786E                     STR_52:
  3865                           
  3866                           ; BSR set to: 1
  3867  00786E  2D                 	db	45
  3868  00786F  45                 	db	69	;'E'
  3869  007870  52                 	db	82	;'R'
  3870  007871  52                 	db	82	;'R'
  3871  007872  4F                 	db	79	;'O'
  3872  007873  52                 	db	82	;'R'
  3873  007874  20                 	db	32
  3874  007875  2D                 	db	45
  3875  007876  20                 	db	32
  3876  007877  4E                 	db	78	;'N'
  3877  007878  65                 	db	101	;'e'
  3878  007879  65                 	db	101	;'e'
  3879  00787A  64                 	db	100	;'d'
  3880  00787B  73                 	db	115	;'s'
  3881  00787C  20                 	db	32
  3882  00787D  6E                 	db	110	;'n'
  3883  00787E  6F                 	db	111	;'o'
  3884  00787F  64                 	db	100	;'d'
  3885  007880  65                 	db	101	;'e'
  3886  007881  69                 	db	105	;'i'
  3887  007882  64                 	db	100	;'d'
  3888  007883  0D                 	db	13
  3889  007884  0A                 	db	10
  3890  007885  00                 	db	0
  3891  007886                     STR_28:
  3892                           
  3893                           ; BSR set to: 1
  3894  007886  2D                 	db	45
  3895  007887  45                 	db	69	;'E'
  3896  007888  52                 	db	82	;'R'
  3897  007889  52                 	db	82	;'R'
  3898  00788A  4F                 	db	79	;'O'
  3899  00788B  52                 	db	82	;'R'
  3900  00788C  20                 	db	32
  3901  00788D  2D                 	db	45
  3902  00788E  20                 	db	32
  3903  00788F  55                 	db	85	;'U'
  3904  007890  6E                 	db	110	;'n'
  3905  007891  6B                 	db	107	;'k'
  3906  007892  6E                 	db	110	;'n'
  3907  007893  6F                 	db	111	;'o'
  3908  007894  77                 	db	119	;'w'
  3909  007895  6E                 	db	110	;'n'
  3910  007896  20                 	db	32
  3911  007897  6D                 	db	109	;'m'
  3912  007898  6F                 	db	111	;'o'
  3913  007899  64                 	db	100	;'d'
  3914  00789A  65                 	db	101	;'e'
  3915  00789B  0D                 	db	13
  3916  00789C  0A                 	db	10
  3917  00789D  00                 	db	0
  3918  00789E                     STR_88:
  3919                           
  3920                           ; BSR set to: 1
  3921  00789E  2D                 	db	45
  3922  00789F  45                 	db	69	;'E'
  3923  0078A0  52                 	db	82	;'R'
  3924  0078A1  52                 	db	82	;'R'
  3925  0078A2  4F                 	db	79	;'O'
  3926  0078A3  52                 	db	82	;'R'
  3927  0078A4  20                 	db	32
  3928  0078A5  2D                 	db	45
  3929  0078A6  20                 	db	32
  3930  0078A7  4E                 	db	78	;'N'
  3931  0078A8  65                 	db	101	;'e'
  3932  0078A9  65                 	db	101	;'e'
  3933  0078AA  64                 	db	100	;'d'
  3934  0078AB  20                 	db	32
  3935  0078AC  61                 	db	97	;'a'
  3936  0078AD  20                 	db	32
  3937  0078AE  76                 	db	118	;'v'
  3938  0078AF  61                 	db	97	;'a'
  3939  0078B0  6C                 	db	108	;'l'
  3940  0078B1  75                 	db	117	;'u'
  3941  0078B2  65                 	db	101	;'e'
  3942  0078B3  0D                 	db	13
  3943  0078B4  0A                 	db	10
  3944  0078B5  00                 	db	0
  3945  0078B6                     STR_239:
  3946                           
  3947                           ; BSR set to: 1
  3948  0078B6  52                 	db	82	;'R'
  3949  0078B7  65                 	db	101	;'e'
  3950  0078B8  63                 	db	99	;'c'
  3951  0078B9  65                 	db	101	;'e'
  3952  0078BA  69                 	db	105	;'i'
  3953  0078BB  76                 	db	118	;'v'
  3954  0078BC  65                 	db	101	;'e'
  3955  0078BD  20                 	db	32
  3956  0078BE  45                 	db	69	;'E'
  3957  0078BF  72                 	db	114	;'r'
  3958  0078C0  72                 	db	114	;'r'
  3959  0078C1  6F                 	db	111	;'o'
  3960  0078C2  72                 	db	114	;'r'
  3961  0078C3  20                 	db	32
  3962  0078C4  43                 	db	67	;'C'
  3963  0078C5  6F                 	db	111	;'o'
  3964  0078C6  75                 	db	117	;'u'
  3965  0078C7  6E                 	db	110	;'n'
  3966  0078C8  74                 	db	116	;'t'
  3967  0078C9  65                 	db	101	;'e'
  3968  0078CA  72                 	db	114	;'r'
  3969  0078CB  3A                 	db	58	;':'
  3970  0078CC  20                 	db	32
  3971  0078CD  00                 	db	0
  3972  0078CE                     STR_224:
  3973                           
  3974                           ; BSR set to: 1
  3975  0078CE  55                 	db	85	;'U'
  3976  0078CF  41                 	db	65	;'A'
  3977  0078D0  52                 	db	82	;'R'
  3978  0078D1  54                 	db	84	;'T'
  3979  0078D2  20                 	db	32
  3980  0078D3  52                 	db	82	;'R'
  3981  0078D4  65                 	db	101	;'e'
  3982  0078D5  63                 	db	99	;'c'
  3983  0078D6  65                 	db	101	;'e'
  3984  0078D7  69                 	db	105	;'i'
  3985  0078D8  76                 	db	118	;'v'
  3986  0078D9  65                 	db	101	;'e'
  3987  0078DA  20                 	db	32
  3988  0078DB  6F                 	db	111	;'o'
  3989  0078DC  76                 	db	118	;'v'
  3990  0078DD  65                 	db	101	;'e'
  3991  0078DE  72                 	db	114	;'r'
  3992  0078DF  72                 	db	114	;'r'
  3993  0078E0  75                 	db	117	;'u'
  3994  0078E1  6E                 	db	110	;'n'
  3995  0078E2  73                 	db	115	;'s'
  3996  0078E3  3A                 	db	58	;':'
  3997  0078E4  20                 	db	32
  3998  0078E5  00                 	db	0
  3999  0078E6                     STR_220:
  4000                           
  4001                           ; BSR set to: 1
  4002  0078E6  43                 	db	67	;'C'
  4003  0078E7  41                 	db	65	;'A'
  4004  0078E8  4E                 	db	78	;'N'
  4005  0078E9  20                 	db	32
  4006  0078EA  54                 	db	84	;'T'
  4007  0078EB  72                 	db	114	;'r'
  4008  0078EC  61                 	db	97	;'a'
  4009  0078ED  6E                 	db	110	;'n'
  4010  0078EE  73                 	db	115	;'s'
  4011  0078EF  6D                 	db	109	;'m'
  4012  0078F0  69                 	db	105	;'i'
  4013  0078F1  74                 	db	116	;'t'
  4014  0078F2  20                 	db	32
  4015  0078F3  6F                 	db	111	;'o'
  4016  0078F4  76                 	db	118	;'v'
  4017  0078F5  65                 	db	101	;'e'
  4018  0078F6  72                 	db	114	;'r'
  4019  0078F7  72                 	db	114	;'r'
  4020  0078F8  75                 	db	117	;'u'
  4021  0078F9  6E                 	db	110	;'n'
  4022  0078FA  73                 	db	115	;'s'
  4023  0078FB  3A                 	db	58	;':'
  4024  0078FC  20                 	db	32
  4025  0078FD  00                 	db	0
  4026  0078FE                     STR_258:
  4027                           
  4028                           ; BSR set to: 1
  4029  0078FE  52                 	db	82	;'R'
  4030  0078FF  58                 	db	88	;'X'
  4031  007900  20                 	db	32
  4032  007901  2D                 	db	45
  4033  007902  20                 	db	32
  4034  007903  52                 	db	82	;'R'
  4035  007904  65                 	db	101	;'e'
  4036  007905  61                 	db	97	;'a'
  4037  007906  64                 	db	100	;'d'
  4038  007907  20                 	db	32
  4039  007908  43                 	db	67	;'C'
  4040  007909  41                 	db	65	;'A'
  4041  00790A  4E                 	db	78	;'N'
  4042  00790B  20                 	db	32
  4043  00790C  66                 	db	102	;'f'
  4044  00790D  72                 	db	114	;'r'
  4045  00790E  61                 	db	97	;'a'
  4046  00790F  6D                 	db	109	;'m'
  4047  007910  65                 	db	101	;'e'
  4048  007911  2E                 	db	46
  4049  007912  0D                 	db	13
  4050  007913  0A                 	db	10
  4051  007914  00                 	db	0
  4052  007915                     STR_157:
  4053                           
  4054                           ; BSR set to: 1
  4055  007915  2B                 	db	43
  4056  007916  4F                 	db	79	;'O'
  4057  007917  4B                 	db	75	;'K'
  4058  007918  20                 	db	32
  4059  007919  2D                 	db	45
  4060  00791A  20                 	db	32
  4061  00791B  4C                 	db	76	;'L'
  4062  00791C  6F                 	db	111	;'o'
  4063  00791D  63                 	db	99	;'c'
  4064  00791E  61                 	db	97	;'a'
  4065  00791F  6C                 	db	108	;'l'
  4066  007920  20                 	db	32
  4067  007921  65                 	db	101	;'e'
  4068  007922  63                 	db	99	;'c'
  4069  007923  68                 	db	104	;'h'
  4070  007924  6F                 	db	111	;'o'
  4071  007925  20                 	db	32
  4072  007926  6F                 	db	111	;'o'
  4073  007927  66                 	db	102	;'f'
  4074  007928  66                 	db	102	;'f'
  4075  007929  0D                 	db	13
  4076  00792A  0A                 	db	10
  4077  00792B  00                 	db	0
  4078  00792C                     STR_216:
  4079                           
  4080                           ; BSR set to: 1
  4081  00792C  43                 	db	67	;'C'
  4082  00792D  41                 	db	65	;'A'
  4083  00792E  4E                 	db	78	;'N'
  4084  00792F  20                 	db	32
  4085  007930  52                 	db	82	;'R'
  4086  007931  65                 	db	101	;'e'
  4087  007932  63                 	db	99	;'c'
  4088  007933  65                 	db	101	;'e'
  4089  007934  69                 	db	105	;'i'
  4090  007935  76                 	db	118	;'v'
  4091  007936  65                 	db	101	;'e'
  4092  007937  20                 	db	32
  4093  007938  6F                 	db	111	;'o'
  4094  007939  76                 	db	118	;'v'
  4095  00793A  65                 	db	101	;'e'
  4096  00793B  72                 	db	114	;'r'
  4097  00793C  72                 	db	114	;'r'
  4098  00793D  75                 	db	117	;'u'
  4099  00793E  6E                 	db	110	;'n'
  4100  00793F  73                 	db	115	;'s'
  4101  007940  3A                 	db	58	;':'
  4102  007941  20                 	db	32
  4103  007942  00                 	db	0
  4104  007943                     STR_304:
  4105                           
  4106                           ; BSR set to: 1
  4107  007943  55                 	db	85	;'U'
  4108  007944  6E                 	db	110	;'n'
  4109  007945  6B                 	db	107	;'k'
  4110  007946  6E                 	db	110	;'n'
  4111  007947  6F                 	db	111	;'o'
  4112  007948  77                 	db	119	;'w'
  4113  007949  6E                 	db	110	;'n'
  4114  00794A  20                 	db	32
  4115  00794B  28                 	db	40
  4116  00794C  56                 	db	86	;'V'
  4117  00794D  65                 	db	101	;'e'
  4118  00794E  72                 	db	114	;'r'
  4119  00794F  62                 	db	98	;'b'
  4120  007950  6F                 	db	111	;'o'
  4121  007951  73                 	db	115	;'s'
  4122  007952  65                 	db	101	;'e'
  4123  007953  20                 	db	32
  4124  007954  75                 	db	117	;'u'
  4125  007955  73                 	db	115	;'s'
  4126  007956  65                 	db	101	;'e'
  4127  007957  64                 	db	100	;'d'
  4128  007958  29                 	db	41
  4129  007959  00                 	db	0
  4130  00795A                     STR_24:
  4131                           
  4132                           ; BSR set to: 1
  4133  00795A  2B                 	db	43
  4134  00795B  4F                 	db	79	;'O'
  4135  00795C  4B                 	db	75	;'K'
  4136  00795D  20                 	db	32
  4137  00795E  2D                 	db	45
  4138  00795F  20                 	db	32
  4139  007960  4C                 	db	76	;'L'
  4140  007961  6F                 	db	111	;'o'
  4141  007962  6F                 	db	111	;'o'
  4142  007963  70                 	db	112	;'p'
  4143  007964  62                 	db	98	;'b'
  4144  007965  61                 	db	97	;'a'
  4145  007966  63                 	db	99	;'c'
  4146  007967  6B                 	db	107	;'k'
  4147  007968  20                 	db	32
  4148  007969  6D                 	db	109	;'m'
  4149  00796A  6F                 	db	111	;'o'
  4150  00796B  64                 	db	100	;'d'
  4151  00796C  65                 	db	101	;'e'
  4152  00796D  0D                 	db	13
  4153  00796E  0A                 	db	10
  4154  00796F  00                 	db	0
  4155  007970                     STR_163:
  4156                           
  4157                           ; BSR set to: 1
  4158  007970  2B                 	db	43
  4159  007971  4F                 	db	79	;'O'
  4160  007972  4B                 	db	75	;'K'
  4161  007973  20                 	db	32
  4162  007974  2D                 	db	45
  4163  007975  20                 	db	32
  4164  007976  54                 	db	84	;'T'
  4165  007977  69                 	db	105	;'i'
  4166  007978  6D                 	db	109	;'m'
  4167  007979  65                 	db	101	;'e'
  4168  00797A  73                 	db	115	;'s'
  4169  00797B  74                 	db	116	;'t'
  4170  00797C  61                 	db	97	;'a'
  4171  00797D  6D                 	db	109	;'m'
  4172  00797E  70                 	db	112	;'p'
  4173  00797F  20                 	db	32
  4174  007980  6F                 	db	111	;'o'
  4175  007981  66                 	db	102	;'f'
  4176  007982  66                 	db	102	;'f'
  4177  007983  0D                 	db	13
  4178  007984  0A                 	db	10
  4179  007985  00                 	db	0
  4180  007986                     STR_155:
  4181                           
  4182                           ; BSR set to: 1
  4183  007986  2B                 	db	43
  4184  007987  4F                 	db	79	;'O'
  4185  007988  4B                 	db	75	;'K'
  4186  007989  20                 	db	32
  4187  00798A  2D                 	db	45
  4188  00798B  20                 	db	32
  4189  00798C  4C                 	db	76	;'L'
  4190  00798D  6F                 	db	111	;'o'
  4191  00798E  63                 	db	99	;'c'
  4192  00798F  61                 	db	97	;'a'
  4193  007990  6C                 	db	108	;'l'
  4194  007991  20                 	db	32
  4195  007992  65                 	db	101	;'e'
  4196  007993  63                 	db	99	;'c'
  4197  007994  68                 	db	104	;'h'
  4198  007995  6F                 	db	111	;'o'
  4199  007996  20                 	db	32
  4200  007997  6F                 	db	111	;'o'
  4201  007998  6E                 	db	110	;'n'
  4202  007999  0D                 	db	13
  4203  00799A  0A                 	db	10
  4204  00799B  00                 	db	0
  4205  00799C                     STR_208:
  4206                           
  4207                           ; BSR set to: 1
  4208  00799C  52                 	db	82	;'R'
  4209  00799D  65                 	db	101	;'e'
  4210  00799E  63                 	db	99	;'c'
  4211  00799F  65                 	db	101	;'e'
  4212  0079A0  69                 	db	105	;'i'
  4213  0079A1  76                 	db	118	;'v'
  4214  0079A2  65                 	db	101	;'e'
  4215  0079A3  64                 	db	100	;'d'
  4216  0079A4  20                 	db	32
  4217  0079A5  43                 	db	67	;'C'
  4218  0079A6  41                 	db	65	;'A'
  4219  0079A7  4E                 	db	78	;'N'
  4220  0079A8  20                 	db	32
  4221  0079A9  66                 	db	102	;'f'
  4222  0079AA  72                 	db	114	;'r'
  4223  0079AB  61                 	db	97	;'a'
  4224  0079AC  6D                 	db	109	;'m'
  4225  0079AD  65                 	db	101	;'e'
  4226  0079AE  73                 	db	115	;'s'
  4227  0079AF  3A                 	db	58	;':'
  4228  0079B0  20                 	db	32
  4229  0079B1  00                 	db	0
  4230  0079B2                     STR_161:
  4231                           
  4232                           ; BSR set to: 1
  4233  0079B2  2B                 	db	43
  4234  0079B3  4F                 	db	79	;'O'
  4235  0079B4  4B                 	db	75	;'K'
  4236  0079B5  20                 	db	32
  4237  0079B6  2D                 	db	45
  4238  0079B7  20                 	db	32
  4239  0079B8  54                 	db	84	;'T'
  4240  0079B9  69                 	db	105	;'i'
  4241  0079BA  6D                 	db	109	;'m'
  4242  0079BB  65                 	db	101	;'e'
  4243  0079BC  73                 	db	115	;'s'
  4244  0079BD  74                 	db	116	;'t'
  4245  0079BE  61                 	db	97	;'a'
  4246  0079BF  6D                 	db	109	;'m'
  4247  0079C0  70                 	db	112	;'p'
  4248  0079C1  20                 	db	32
  4249  0079C2  6F                 	db	111	;'o'
  4250  0079C3  6E                 	db	110	;'n'
  4251  0079C4  0D                 	db	13
  4252  0079C5  0A                 	db	10
  4253  0079C6  00                 	db	0
  4254  0079C7                     STR_212:
  4255                           
  4256                           ; BSR set to: 1
  4257  0079C7  52                 	db	82	;'R'
  4258  0079C8  65                 	db	101	;'e'
  4259  0079C9  63                 	db	99	;'c'
  4260  0079CA  65                 	db	101	;'e'
  4261  0079CB  69                 	db	105	;'i'
  4262  0079CC  76                 	db	118	;'v'
  4263  0079CD  65                 	db	101	;'e'
  4264  0079CE  64                 	db	100	;'d'
  4265  0079CF  20                 	db	32
  4266  0079D0  43                 	db	67	;'C'
  4267  0079D1  41                 	db	65	;'A'
  4268  0079D2  4E                 	db	78	;'N'
  4269  0079D3  20                 	db	32
  4270  0079D4  62                 	db	98	;'b'
  4271  0079D5  79                 	db	121	;'y'
  4272  0079D6  74                 	db	116	;'t'
  4273  0079D7  65                 	db	101	;'e'
  4274  0079D8  73                 	db	115	;'s'
  4275  0079D9  3A                 	db	58	;':'
  4276  0079DA  20                 	db	32
  4277  0079DB  00                 	db	0
  4278  0079DC                     STR_268:
  4279                           
  4280                           ; BSR set to: 1
  4281  0079DC  4D                 	db	77	;'M'
  4282  0079DD  41                 	db	65	;'A'
  4283  0079DE  53                 	db	83	;'S'
  4284  0079DF  4B                 	db	75	;'K'
  4285  0079E0  20                 	db	32
  4286  0079E1  2D                 	db	45
  4287  0079E2  20                 	db	32
  4288  0079E3  53                 	db	83	;'S'
  4289  0079E4  65                 	db	101	;'e'
  4290  0079E5  74                 	db	116	;'t'
  4291  0079E6  20                 	db	32
  4292  0079E7  6D                 	db	109	;'m'
  4293  0079E8  61                 	db	97	;'a'
  4294  0079E9  73                 	db	115	;'s'
  4295  0079EA  6B                 	db	107	;'k'
  4296  0079EB  20                 	db	32
  4297  0079EC  2E                 	db	46
  4298  0079ED  0D                 	db	13
  4299  0079EE  0A                 	db	10
  4300  0079EF  00                 	db	0
  4301  0079F0                     STR_170:
  4302                           
  4303                           ; BSR set to: 1
  4304  0079F0  4A                 	db	74	;'J'
  4305  0079F1  46                 	db	70	;'F'
  4306  0079F2  72                 	db	114	;'r'
  4307  0079F3  61                 	db	97	;'a'
  4308  0079F4  6E                 	db	110	;'n'
  4309  0079F5  6B                 	db	107	;'k'
  4310  0079F6  66                 	db	102	;'f'
  4311  0079F7  75                 	db	117	;'u'
  4312  0079F8  72                 	db	114	;'r'
  4313  0079F9  74                 	db	116	;'t'
  4314  0079FA  20                 	db	32
  4315  0079FB  52                 	db	82	;'R'
  4316  0079FC  53                 	db	83	;'S'
  4317  0079FD  2D                 	db	45
  4318  0079FE  32                 	db	50	;'2'
  4319  0079FF  33                 	db	51	;'3'
  4320  007A00  32                 	db	50	;'2'
  4321  007A01  0D                 	db	13
  4322  007A02  0A                 	db	10
  4323  007A03  00                 	db	0
  4324  007A04                     STR_26:
  4325                           
  4326                           ; BSR set to: 1
  4327  007A04  2B                 	db	43
  4328  007A05  4F                 	db	79	;'O'
  4329  007A06  4B                 	db	75	;'K'
  4330  007A07  20                 	db	32
  4331  007A08  2D                 	db	45
  4332  007A09  20                 	db	32
  4333  007A0A  43                 	db	67	;'C'
  4334  007A0B  6C                 	db	108	;'l'
  4335  007A0C  6F                 	db	111	;'o'
  4336  007A0D  73                 	db	115	;'s'
  4337  007A0E  65                 	db	101	;'e'
  4338  007A0F  64                 	db	100	;'d'
  4339  007A10  20                 	db	32
  4340  007A11  6D                 	db	109	;'m'
  4341  007A12  6F                 	db	111	;'o'
  4342  007A13  64                 	db	100	;'d'
  4343  007A14  65                 	db	101	;'e'
  4344  007A15  0D                 	db	13
  4345  007A16  0A                 	db	10
  4346  007A17  00                 	db	0
  4347  007A18                     STR_21:
  4348                           
  4349                           ; BSR set to: 1
  4350  007A18  2B                 	db	43
  4351  007A19  4F                 	db	79	;'O'
  4352  007A1A  4B                 	db	75	;'K'
  4353  007A1B  20                 	db	32
  4354  007A1C  2D                 	db	45
  4355  007A1D  20                 	db	32
  4356  007A1E  4E                 	db	78	;'N'
  4357  007A1F  6F                 	db	111	;'o'
  4358  007A20  72                 	db	114	;'r'
  4359  007A21  6D                 	db	109	;'m'
  4360  007A22  61                 	db	97	;'a'
  4361  007A23  6C                 	db	108	;'l'
  4362  007A24  20                 	db	32
  4363  007A25  6D                 	db	109	;'m'
  4364  007A26  6F                 	db	111	;'o'
  4365  007A27  64                 	db	100	;'d'
  4366  007A28  65                 	db	101	;'e'
  4367  007A29  0D                 	db	13
  4368  007A2A  0A                 	db	10
  4369  007A2B  00                 	db	0
  4370  007A2C                     STR_22:
  4371                           
  4372                           ; BSR set to: 1
  4373  007A2C  2B                 	db	43
  4374  007A2D  4F                 	db	79	;'O'
  4375  007A2E  4B                 	db	75	;'K'
  4376  007A2F  20                 	db	32
  4377  007A30  2D                 	db	45
  4378  007A31  20                 	db	32
  4379  007A32  53                 	db	83	;'S'
  4380  007A33  69                 	db	105	;'i'
  4381  007A34  6C                 	db	108	;'l'
  4382  007A35  65                 	db	101	;'e'
  4383  007A36  6E                 	db	110	;'n'
  4384  007A37  74                 	db	116	;'t'
  4385  007A38  20                 	db	32
  4386  007A39  6D                 	db	109	;'m'
  4387  007A3A  6F                 	db	111	;'o'
  4388  007A3B  64                 	db	100	;'d'
  4389  007A3C  65                 	db	101	;'e'
  4390  007A3D  0D                 	db	13
  4391  007A3E  0A                 	db	10
  4392  007A3F  00                 	db	0
  4393  007A40                     STR_99:
  4394                           
  4395                           ; BSR set to: 1
  4396  007A40  49                 	db	73	;'I'
  4397  007A41  6E                 	db	110	;'n'
  4398  007A42  66                 	db	102	;'f'
  4399  007A43  6F                 	db	111	;'o'
  4400  007A44  20                 	db	32
  4401  007A45  66                 	db	102	;'f'
  4402  007A46  6F                 	db	111	;'o'
  4403  007A47  72                 	db	114	;'r'
  4404  007A48  20                 	db	32
  4405  007A49  6E                 	db	110	;'n'
  4406  007A4A  6F                 	db	111	;'o'
  4407  007A4B  64                 	db	100	;'d'
  4408  007A4C  65                 	db	101	;'e'
  4409  007A4D  20                 	db	32
  4410  007A4E  69                 	db	105	;'i'
  4411  007A4F  64                 	db	100	;'d'
  4412  007A50  20                 	db	32
  4413  007A51  3D                 	db	61	;'='
  4414  007A52  20                 	db	32
  4415  007A53  00                 	db	0
  4416  007A54                     STR_293:
  4417                           
  4418                           ; BSR set to: 1
  4419  007A54  46                 	db	70	;'F'
  4420  007A55  69                 	db	105	;'i'
  4421  007A56  72                 	db	114	;'r'
  4422  007A57  6D                 	db	109	;'m'
  4423  007A58  77                 	db	119	;'w'
  4424  007A59  61                 	db	97	;'a'
  4425  007A5A  72                 	db	114	;'r'
  4426  007A5B  65                 	db	101	;'e'
  4427  007A5C  20                 	db	32
  4428  007A5D  76                 	db	118	;'v'
  4429  007A5E  65                 	db	101	;'e'
  4430  007A5F  72                 	db	114	;'r'
  4431  007A60  73                 	db	115	;'s'
  4432  007A61  69                 	db	105	;'i'
  4433  007A62  6F                 	db	111	;'o'
  4434  007A63  6E                 	db	110	;'n'
  4435  007A64  20                 	db	32
  4436  007A65  3D                 	db	61	;'='
  4437  007A66  20                 	db	32
  4438  007A67  00                 	db	0
  4439  007A68                     STR_23:
  4440                           
  4441                           ; BSR set to: 1
  4442  007A68  2B                 	db	43
  4443  007A69  4F                 	db	79	;'O'
  4444  007A6A  4B                 	db	75	;'K'
  4445  007A6B  20                 	db	32
  4446  007A6C  2D                 	db	45
  4447  007A6D  20                 	db	32
  4448  007A6E  53                 	db	83	;'S'
  4449  007A6F  6C                 	db	108	;'l'
  4450  007A70  65                 	db	101	;'e'
  4451  007A71  65                 	db	101	;'e'
  4452  007A72  70                 	db	112	;'p'
  4453  007A73  20                 	db	32
  4454  007A74  6D                 	db	109	;'m'
  4455  007A75  6F                 	db	111	;'o'
  4456  007A76  64                 	db	100	;'d'
  4457  007A77  65                 	db	101	;'e'
  4458  007A78  0D                 	db	13
  4459  007A79  0A                 	db	10
  4460  007A7A  00                 	db	0
  4461  007A7B                     STR_27:
  4462                           
  4463                           ; BSR set to: 1
  4464  007A7B  2B                 	db	43
  4465  007A7C  4F                 	db	79	;'O'
  4466  007A7D  4B                 	db	75	;'K'
  4467  007A7E  20                 	db	32
  4468  007A7F  2D                 	db	45
  4469  007A80  20                 	db	32
  4470  007A81  42                 	db	66	;'B'
  4471  007A82  69                 	db	105	;'i'
  4472  007A83  74                 	db	116	;'t'
  4473  007A84  73                 	db	115	;'s'
  4474  007A85  20                 	db	32
  4475  007A86  6D                 	db	109	;'m'
  4476  007A87  6F                 	db	111	;'o'
  4477  007A88  64                 	db	100	;'d'
  4478  007A89  65                 	db	101	;'e'
  4479  007A8A  0D                 	db	13
  4480  007A8B  0A                 	db	10
  4481  007A8C  00                 	db	0
  4482  007A8D                     STR_40:
  4483                           
  4484                           ; BSR set to: 1
  4485  007A8D  2B                 	db	43
  4486  007A8E  4F                 	db	79	;'O'
  4487  007A8F  4B                 	db	75	;'K'
  4488  007A90  20                 	db	32
  4489  007A91  2D                 	db	45
  4490  007A92  20                 	db	32
  4491  007A93  6E                 	db	110	;'n'
  4492  007A94  6F                 	db	111	;'o'
  4493  007A95  20                 	db	32
  4494  007A96  65                 	db	101	;'e'
  4495  007A97  76                 	db	118	;'v'
  4496  007A98  65                 	db	101	;'e'
  4497  007A99  6E                 	db	110	;'n'
  4498  007A9A  74                 	db	116	;'t'
  4499  007A9B  73                 	db	115	;'s'
  4500  007A9C  0D                 	db	13
  4501  007A9D  0A                 	db	10
  4502  007A9E  00                 	db	0
  4503  007A9F                     STR_200:
  4504                           
  4505                           ; BSR set to: 1
  4506  007A9F  53                 	db	83	;'S'
  4507  007AA0  65                 	db	101	;'e'
  4508  007AA1  6E                 	db	110	;'n'
  4509  007AA2  74                 	db	116	;'t'
  4510  007AA3  20                 	db	32
  4511  007AA4  43                 	db	67	;'C'
  4512  007AA5  41                 	db	65	;'A'
  4513  007AA6  4E                 	db	78	;'N'
  4514  007AA7  20                 	db	32
  4515  007AA8  66                 	db	102	;'f'
  4516  007AA9  72                 	db	114	;'r'
  4517  007AAA  61                 	db	97	;'a'
  4518  007AAB  6D                 	db	109	;'m'
  4519  007AAC  65                 	db	101	;'e'
  4520  007AAD  73                 	db	115	;'s'
  4521  007AAE  3A                 	db	58	;':'
  4522  007AAF  20                 	db	32
  4523  007AB0  00                 	db	0
  4524  007AB1                     STR_306:
  4525                           
  4526                           ; BSR set to: 1
  4527  007AB1  30                 	db	48	;'0'
  4528  007AB2  31                 	db	49	;'1'
  4529  007AB3  32                 	db	50	;'2'
  4530  007AB4  33                 	db	51	;'3'
  4531  007AB5  34                 	db	52	;'4'
  4532  007AB6  35                 	db	53	;'5'
  4533  007AB7  36                 	db	54	;'6'
  4534  007AB8  37                 	db	55	;'7'
  4535  007AB9  38                 	db	56	;'8'
  4536  007ABA  39                 	db	57	;'9'
  4537  007ABB  41                 	db	65	;'A'
  4538  007ABC  42                 	db	66	;'B'
  4539  007ABD  43                 	db	67	;'C'
  4540  007ABE  44                 	db	68	;'D'
  4541  007ABF  45                 	db	69	;'E'
  4542  007AC0  46                 	db	70	;'F'
  4543  007AC1  00                 	db	0
  4544  007AC2                     STR_307:
  4545                           
  4546                           ; BSR set to: 1
  4547  007AC2  30                 	db	48	;'0'
  4548  007AC3  31                 	db	49	;'1'
  4549  007AC4  32                 	db	50	;'2'
  4550  007AC5  33                 	db	51	;'3'
  4551  007AC6  34                 	db	52	;'4'
  4552  007AC7  35                 	db	53	;'5'
  4553  007AC8  36                 	db	54	;'6'
  4554  007AC9  37                 	db	55	;'7'
  4555  007ACA  38                 	db	56	;'8'
  4556  007ACB  39                 	db	57	;'9'
  4557  007ACC  61                 	db	97	;'a'
  4558  007ACD  62                 	db	98	;'b'
  4559  007ACE  63                 	db	99	;'c'
  4560  007ACF  64                 	db	100	;'d'
  4561  007AD0  65                 	db	101	;'e'
  4562  007AD1  66                 	db	102	;'f'
  4563  007AD2  00                 	db	0
  4564  007AD3                     STR_285:
  4565                           
  4566                           ; BSR set to: 1
  4567  007AD3  20                 	db	32
  4568  007AD4  6E                 	db	110	;'n'
  4569  007AD5  6F                 	db	111	;'o'
  4570  007AD6  64                 	db	100	;'d'
  4571  007AD7  65                 	db	101	;'e'
  4572  007AD8  28                 	db	40
  4573  007AD9  73                 	db	115	;'s'
  4574  007ADA  29                 	db	41
  4575  007ADB  20                 	db	32
  4576  007ADC  66                 	db	102	;'f'
  4577  007ADD  6F                 	db	111	;'o'
  4578  007ADE  75                 	db	117	;'u'
  4579  007ADF  6E                 	db	110	;'n'
  4580  007AE0  64                 	db	100	;'d'
  4581  007AE1  0D                 	db	13
  4582  007AE2  0A                 	db	10
  4583  007AE3  00                 	db	0
  4584  007AE4                     STR_204:
  4585                           
  4586                           ; BSR set to: 1
  4587  007AE4  53                 	db	83	;'S'
  4588  007AE5  65                 	db	101	;'e'
  4589  007AE6  6E                 	db	110	;'n'
  4590  007AE7  74                 	db	116	;'t'
  4591  007AE8  20                 	db	32
  4592  007AE9  43                 	db	67	;'C'
  4593  007AEA  41                 	db	65	;'A'
  4594  007AEB  4E                 	db	78	;'N'
  4595  007AEC  20                 	db	32
  4596  007AED  62                 	db	98	;'b'
  4597  007AEE  79                 	db	121	;'y'
  4598  007AEF  74                 	db	116	;'t'
  4599  007AF0  65                 	db	101	;'e'
  4600  007AF1  73                 	db	115	;'s'
  4601  007AF2  3A                 	db	58	;':'
  4602  007AF3  20                 	db	32
  4603  007AF4  00                 	db	0
  4604  007AF5                     STR_70:
  4605                           
  4606                           ; BSR set to: 1
  4607  007AF5  2D                 	db	45
  4608  007AF6  45                 	db	69	;'E'
  4609  007AF7  52                 	db	82	;'R'
  4610  007AF8  52                 	db	82	;'R'
  4611  007AF9  4F                 	db	79	;'O'
  4612  007AFA  52                 	db	82	;'R'
  4613  007AFB  20                 	db	32
  4614  007AFC  2D                 	db	45
  4615  007AFD  20                 	db	32
  4616  007AFE  6E                 	db	110	;'n'
  4617  007AFF  6F                 	db	111	;'o'
  4618  007B00  64                 	db	100	;'d'
  4619  007B01  65                 	db	101	;'e'
  4620  007B02  69                 	db	105	;'i'
  4621  007B03  64                 	db	100	;'d'
  4622  007B04  3D                 	db	61	;'='
  4623  007B05  00                 	db	0
  4624  007B06                     STR_59:
  4625                           
  4626                           ; BSR set to: 1
  4627  007B06  56                 	db	86	;'V'
  4628  007B07  61                 	db	97	;'a'
  4629  007B08  6C                 	db	108	;'l'
  4630  007B09  75                 	db	117	;'u'
  4631  007B0A  65                 	db	101	;'e'
  4632  007B0B  20                 	db	32
  4633  007B0C  66                 	db	102	;'f'
  4634  007B0D  6F                 	db	111	;'o'
  4635  007B0E  72                 	db	114	;'r'
  4636  007B0F  20                 	db	32
  4637  007B10  72                 	db	114	;'r'
  4638  007B11  65                 	db	101	;'e'
  4639  007B12  67                 	db	103	;'g'
  4640  007B13  20                 	db	32
  4641  007B14  00                 	db	0
  4642  007B15                     STR_291:
  4643                           
  4644                           ; BSR set to: 1
  4645  007B15  4D                 	db	77	;'M'
  4646  007B16  44                 	db	68	;'D'
  4647  007B17  46                 	db	70	;'F'
  4648  007B18  20                 	db	32
  4649  007B19  3D                 	db	61	;'='
  4650  007B1A  20                 	db	32
  4651  007B1B  68                 	db	104	;'h'
  4652  007B1C  74                 	db	116	;'t'
  4653  007B1D  74                 	db	116	;'t'
  4654  007B1E  70                 	db	112	;'p'
  4655  007B1F  3A                 	db	58	;':'
  4656  007B20  2F                 	db	47
  4657  007B21  2F                 	db	47
  4658  007B22  00                 	db	0
  4659  007B23                     STR_56:
  4660                           
  4661                           ; BSR set to: 1
  4662  007B23  2B                 	db	43
  4663  007B24  4F                 	db	79	;'O'
  4664  007B25  4B                 	db	75	;'K'
  4665  007B26  20                 	db	32
  4666  007B27  2D                 	db	45
  4667  007B28  20                 	db	32
  4668  007B29  6E                 	db	110	;'n'
  4669  007B2A  6F                 	db	111	;'o'
  4670  007B2B  64                 	db	100	;'d'
  4671  007B2C  65                 	db	101	;'e'
  4672  007B2D  69                 	db	105	;'i'
  4673  007B2E  64                 	db	100	;'d'
  4674  007B2F  3D                 	db	61	;'='
  4675  007B30  00                 	db	0
  4676  007B31                     STR_179:
  4677                           
  4678                           ; BSR set to: 1
  4679  007B31  2C                 	db	44
  4680  007B32  74                 	db	116	;'t'
  4681  007B33  69                 	db	105	;'i'
  4682  007B34  6D                 	db	109	;'m'
  4683  007B35  65                 	db	101	;'e'
  4684  007B36  73                 	db	115	;'s'
  4685  007B37  74                 	db	116	;'t'
  4686  007B38  61                 	db	97	;'a'
  4687  007B39  6D                 	db	109	;'m'
  4688  007B3A  70                 	db	112	;'p'
  4689  007B3B  3D                 	db	61	;'='
  4690  007B3C  00                 	db	0
  4691  007B3D                     STR_301:
  4692                           
  4693                           ; BSR set to: 1
  4694  007B3D  56                 	db	86	;'V'
  4695  007B3E  53                 	db	83	;'S'
  4696  007B3F  43                 	db	67	;'C'
  4697  007B40  50                 	db	80	;'P'
  4698  007B41  20                 	db	32
  4699  007B42  44                 	db	68	;'D'
  4700  007B43  72                 	db	114	;'r'
  4701  007B44  69                 	db	105	;'i'
  4702  007B45  76                 	db	118	;'v'
  4703  007B46  65                 	db	101	;'e'
  4704  007B47  72                 	db	114	;'r'
  4705  007B48  00                 	db	0
  4706  007B49                     STR_159:
  4707                           
  4708                           ; BSR set to: 1
  4709  007B49  54                 	db	84	;'T'
  4710  007B4A  49                 	db	73	;'I'
  4711  007B4B  4D                 	db	77	;'M'
  4712  007B4C  45                 	db	69	;'E'
  4713  007B4D  53                 	db	83	;'S'
  4714  007B4E  54                 	db	84	;'T'
  4715  007B4F  41                 	db	65	;'A'
  4716  007B50  4D                 	db	77	;'M'
  4717  007B51  50                 	db	80	;'P'
  4718  007B52  20                 	db	32
  4719  007B53  00                 	db	0
  4720  007B54                     STR_138:
  4721                           
  4722                           ; BSR set to: 1
  4723  007B54  52                 	db	82	;'R'
  4724  007B55  57                 	db	87	;'W'
  4725  007B56  54                 	db	84	;'T'
  4726  007B57  49                 	db	73	;'I'
  4727  007B58  4D                 	db	77	;'M'
  4728  007B59  45                 	db	69	;'E'
  4729  007B5A  4F                 	db	79	;'O'
  4730  007B5B  55                 	db	85	;'U'
  4731  007B5C  54                 	db	84	;'T'
  4732  007B5D  20                 	db	32
  4733  007B5E  00                 	db	0
  4734  007B5F                     STR_118:
  4735                           
  4736                           ; BSR set to: 1
  4737  007B5F  50                 	db	80	;'P'
  4738  007B60  45                 	db	69	;'E'
  4739  007B61  52                 	db	82	;'R'
  4740  007B62  53                 	db	83	;'S'
  4741  007B63  49                 	db	73	;'I'
  4742  007B64  53                 	db	83	;'S'
  4743  007B65  54                 	db	84	;'T'
  4744  007B66  45                 	db	69	;'E'
  4745  007B67  4E                 	db	78	;'N'
  4746  007B68  54                 	db	84	;'T'
  4747  007B69  00                 	db	0
  4748  007B6A                     STR_198:
  4749                           
  4750                           ; BSR set to: 1
  4751  007B6A  2C                 	db	44
  4752  007B6B  44                 	db	68	;'D'
  4753  007B6C  61                 	db	97	;'a'
  4754  007B6D  74                 	db	116	;'t'
  4755  007B6E  61                 	db	97	;'a'
  4756  007B6F  3D                 	db	61	;'='
  4757  007B70  6E                 	db	110	;'n'
  4758  007B71  6F                 	db	111	;'o'
  4759  007B72  6E                 	db	110	;'n'
  4760  007B73  65                 	db	101	;'e'
  4761  007B74  00                 	db	0
  4762  007B75                     STR_57:
  4763                           
  4764                           ; BSR set to: 1
  4765  007B75  30                 	db	48	;'0'
  4766  007B76  78                 	db	120	;'x'
  4767  007B77  25                 	db	37
  4768  007B78  30                 	db	48	;'0'
  4769  007B79  32                 	db	50	;'2'
  4770  007B7A  58                 	db	88	;'X'
  4771  007B7B  20                 	db	32
  4772  007B7C  2D                 	db	45
  4773  007B7D  20                 	db	32
  4774  007B7E  00                 	db	0
  4775  007B7F                     STR_297:
  4776                           
  4777                           ; BSR set to: 1
  4778  007B7F  56                 	db	86	;'V'
  4779  007B80  65                 	db	101	;'e'
  4780  007B81  72                 	db	114	;'r'
  4781  007B82  73                 	db	115	;'s'
  4782  007B83  69                 	db	105	;'i'
  4783  007B84  6F                 	db	111	;'o'
  4784  007B85  6E                 	db	110	;'n'
  4785  007B86  3A                 	db	58	;':'
  4786  007B87  20                 	db	32
  4787  007B88  00                 	db	0
  4788  007B89                     STR_303:
  4789                           
  4790                           ; BSR set to: 1
  4791  007B89  56                 	db	86	;'V'
  4792  007B8A  53                 	db	83	;'S'
  4793  007B8B  43                 	db	67	;'C'
  4794  007B8C  50                 	db	80	;'P'
  4795  007B8D  20                 	db	32
  4796  007B8E  4E                 	db	78	;'N'
  4797  007B8F  6F                 	db	111	;'o'
  4798  007B90  64                 	db	100	;'d'
  4799  007B91  65                 	db	101	;'e'
  4800  007B92  00                 	db	0
  4801  007B93                     STR_302:
  4802                           
  4803                           ; BSR set to: 1
  4804  007B93  53                 	db	83	;'S'
  4805  007B94  4C                 	db	76	;'L'
  4806  007B95  20                 	db	32
  4807  007B96  44                 	db	68	;'D'
  4808  007B97  72                 	db	114	;'r'
  4809  007B98  69                 	db	105	;'i'
  4810  007B99  76                 	db	118	;'v'
  4811  007B9A  65                 	db	101	;'e'
  4812  007B9B  72                 	db	114	;'r'
  4813  007B9C  00                 	db	0
  4814  007B9D                     STR_140:
  4815                           
  4816                           ; BSR set to: 1
  4817  007B9D  53                 	db	83	;'S'
  4818  007B9E  54                 	db	84	;'T'
  4819  007B9F  41                 	db	65	;'A'
  4820  007BA0  52                 	db	82	;'R'
  4821  007BA1  54                 	db	84	;'T'
  4822  007BA2  49                 	db	73	;'I'
  4823  007BA3  46                 	db	70	;'F'
  4824  007BA4  20                 	db	32
  4825  007BA5  00                 	db	0
  4826  007BA6                     STR_188:
  4827                           
  4828                           ; BSR set to: 1
  4829  007BA6  2C                 	db	44
  4830  007BA7  6E                 	db	110	;'n'
  4831  007BA8  6F                 	db	111	;'o'
  4832  007BA9  64                 	db	100	;'d'
  4833  007BAA  65                 	db	101	;'e'
  4834  007BAB  69                 	db	105	;'i'
  4835  007BAC  64                 	db	100	;'d'
  4836  007BAD  3D                 	db	61	;'='
  4837  007BAE  00                 	db	0
  4838  007BAF                     STR_14:
  4839                           
  4840                           ; BSR set to: 1
  4841  007BAF  4C                 	db	76	;'L'
  4842  007BB0  4F                 	db	79	;'O'
  4843  007BB1  4F                 	db	79	;'O'
  4844  007BB2  50                 	db	80	;'P'
  4845  007BB3  42                 	db	66	;'B'
  4846  007BB4  41                 	db	65	;'A'
  4847  007BB5  43                 	db	67	;'C'
  4848  007BB6  4B                 	db	75	;'K'
  4849  007BB7  00                 	db	0
  4850  007BB8                     STR_165:
  4851                           
  4852                           ; BSR set to: 1
  4853  007BB8  44                 	db	68	;'D'
  4854  007BB9  45                 	db	69	;'E'
  4855  007BBA  46                 	db	70	;'F'
  4856  007BBB  41                 	db	65	;'A'
  4857  007BBC  55                 	db	85	;'U'
  4858  007BBD  4C                 	db	76	;'L'
  4859  007BBE  54                 	db	84	;'T'
  4860  007BBF  53                 	db	83	;'S'
  4861  007BC0  00                 	db	0
  4862  007BC1                     STR_171:
  4863                           
  4864                           ; BSR set to: 1
  4865  007BC1  56                 	db	86	;'V'
  4866  007BC2  31                 	db	49	;'1'
  4867  007BC3  30                 	db	48	;'0'
  4868  007BC4  31                 	db	49	;'1'
  4869  007BC5  31                 	db	49	;'1'
  4870  007BC6  0D                 	db	13
  4871  007BC7  0A                 	db	10
  4872  007BC8  00                 	db	0
  4873  007BC9                     STR_172:
  4874                           
  4875                           ; BSR set to: 1
  4876  007BC9  4E                 	db	78	;'N'
  4877  007BCA  31                 	db	49	;'1'
  4878  007BCB  39                 	db	57	;'9'
  4879  007BCC  37                 	db	55	;'7'
  4880  007BCD  37                 	db	55	;'7'
  4881  007BCE  0D                 	db	13
  4882  007BCF  0A                 	db	10
  4883  007BD0  00                 	db	0
  4884  007BD1                     STR_91:
  4885                           
  4886                           ; BSR set to: 1
  4887  007BD1  30                 	db	48	;'0'
  4888  007BD2  78                 	db	120	;'x'
  4889  007BD3  25                 	db	37
  4890  007BD4  30                 	db	48	;'0'
  4891  007BD5  32                 	db	50	;'2'
  4892  007BD6  58                 	db	88	;'X'
  4893  007BD7  0A                 	db	10
  4894  007BD8  00                 	db	0
  4895  007BD9                     STR_286:
  4896                           
  4897                           ; BSR set to: 1
  4898  007BD9  47                 	db	71	;'G'
  4899  007BDA  55                 	db	85	;'U'
  4900  007BDB  49                 	db	73	;'I'
  4901  007BDC  44                 	db	68	;'D'
  4902  007BDD  20                 	db	32
  4903  007BDE  3D                 	db	61	;'='
  4904  007BDF  20                 	db	32
  4905  007BE0  00                 	db	0
  4906  007BE1                     STR_182:
  4907                           
  4908                           ; BSR set to: 1
  4909  007BE1  2C                 	db	44
  4910  007BE2  63                 	db	99	;'c'
  4911  007BE3  6C                 	db	108	;'l'
  4912  007BE4  61                 	db	97	;'a'
  4913  007BE5  73                 	db	115	;'s'
  4914  007BE6  73                 	db	115	;'s'
  4915  007BE7  3D                 	db	61	;'='
  4916  007BE8  00                 	db	0
  4917  007BE9                     STR_147:
  4918                           
  4919                           ; BSR set to: 1
  4920  007BE9  56                 	db	86	;'V'
  4921  007BEA  45                 	db	69	;'E'
  4922  007BEB  52                 	db	82	;'R'
  4923  007BEC  42                 	db	66	;'B'
  4924  007BED  4F                 	db	79	;'O'
  4925  007BEE  53                 	db	83	;'S'
  4926  007BEF  45                 	db	69	;'E'
  4927  007BF0  00                 	db	0
  4928  007BF1                     STR_136:
  4929                           
  4930                           ; BSR set to: 1
  4931  007BF1  44                 	db	68	;'D'
  4932  007BF2  45                 	db	69	;'E'
  4933  007BF3  43                 	db	67	;'C'
  4934  007BF4  49                 	db	73	;'I'
  4935  007BF5  4D                 	db	77	;'M'
  4936  007BF6  41                 	db	65	;'A'
  4937  007BF7  4C                 	db	76	;'L'
  4938  007BF8  00                 	db	0
  4939  007BF9                     STR_18:
  4940                           
  4941                           ; BSR set to: 1
  4942  007BF9  56                 	db	86	;'V'
  4943  007BFA  45                 	db	69	;'E'
  4944  007BFB  52                 	db	82	;'R'
  4945  007BFC  53                 	db	83	;'S'
  4946  007BFD  49                 	db	73	;'I'
  4947  007BFE  4F                 	db	79	;'O'
  4948  007BFF  4E                 	db	78	;'N'
  4949  007C00  00                 	db	0
  4950  007C01                     STR_180:
  4951                           
  4952                           ; BSR set to: 1
  4953  007C01  30                 	db	48	;'0'
  4954  007C02  78                 	db	120	;'x'
  4955  007C03  25                 	db	37
  4956  007C04  30                 	db	48	;'0'
  4957  007C05  38                 	db	56	;'8'
  4958  007C06  6C                 	db	108	;'l'
  4959  007C07  58                 	db	88	;'X'
  4960  007C08  00                 	db	0
  4961  007C09                     STR_300:
  4962                           
  4963                           ; BSR set to: 1
  4964  007C09  56                 	db	86	;'V'
  4965  007C0A  65                 	db	101	;'e'
  4966  007C0B  72                 	db	114	;'r'
  4967  007C0C  62                 	db	98	;'b'
  4968  007C0D  6F                 	db	111	;'o'
  4969  007C0E  73                 	db	115	;'s'
  4970  007C0F  65                 	db	101	;'e'
  4971  007C10  00                 	db	0
  4972  007C11                     STR_299:
  4973                           
  4974                           ; BSR set to: 1
  4975  007C11  4D                 	db	77	;'M'
  4976  007C12  6F                 	db	111	;'o'
  4977  007C13  64                 	db	100	;'d'
  4978  007C14  65                 	db	101	;'e'
  4979  007C15  3A                 	db	58	;':'
  4980  007C16  20                 	db	32
  4981  007C17  00                 	db	0
  4982  007C18                     STR_194:
  4983                           
  4984                           ; BSR set to: 1
  4985  007C18  2C                 	db	44
  4986  007C19  44                 	db	68	;'D'
  4987  007C1A  61                 	db	97	;'a'
  4988  007C1B  74                 	db	116	;'t'
  4989  007C1C  61                 	db	97	;'a'
  4990  007C1D  3D                 	db	61	;'='
  4991  007C1E  00                 	db	0
  4992  007C1F                     STR_185:
  4993                           
  4994                           ; BSR set to: 1
  4995  007C1F  2C                 	db	44
  4996  007C20  74                 	db	116	;'t'
  4997  007C21  79                 	db	121	;'y'
  4998  007C22  70                 	db	112	;'p'
  4999  007C23  65                 	db	101	;'e'
  5000  007C24  3D                 	db	61	;'='
  5001  007C25  00                 	db	0
  5002  007C26                     STR_191:
  5003                           
  5004                           ; BSR set to: 1
  5005  007C26  2C                 	db	44
  5006  007C27  73                 	db	115	;'s'
  5007  007C28  69                 	db	105	;'i'
  5008  007C29  7A                 	db	122	;'z'
  5009  007C2A  65                 	db	101	;'e'
  5010  007C2B  3D                 	db	61	;'='
  5011  007C2C  00                 	db	0
  5012  007C2D                     STR_176:
  5013                           
  5014                           ; BSR set to: 1
  5015  007C2D  3C                 	db	60	;'<'
  5016  007C2E  50                 	db	80	;'P'
  5017  007C2F  72                 	db	114	;'r'
  5018  007C30  69                 	db	105	;'i'
  5019  007C31  6F                 	db	111	;'o'
  5020  007C32  3D                 	db	61	;'='
  5021  007C33  00                 	db	0
  5022  007C34                     STR_20:
  5023                           
  5024                           ; BSR set to: 1
  5025  007C34  49                 	db	73	;'I'
  5026  007C35  46                 	db	70	;'F'
  5027  007C36  4D                 	db	77	;'M'
  5028  007C37  4F                 	db	79	;'O'
  5029  007C38  44                 	db	68	;'D'
  5030  007C39  45                 	db	69	;'E'
  5031  007C3A  00                 	db	0
  5032  007C3B                     STR_16:
  5033                           
  5034                           ; BSR set to: 1
  5035  007C3B  4C                 	db	76	;'L'
  5036  007C3C  49                 	db	73	;'I'
  5037  007C3D  53                 	db	83	;'S'
  5038  007C3E  54                 	db	84	;'T'
  5039  007C3F  45                 	db	69	;'E'
  5040  007C40  4E                 	db	78	;'N'
  5041  007C41  00                 	db	0
  5042  007C42                     STR_105:
  5043                           
  5044                           ; BSR set to: 1
  5045  007C42  46                 	db	70	;'F'
  5046  007C43  49                 	db	73	;'I'
  5047  007C44  4C                 	db	76	;'L'
  5048  007C45  54                 	db	84	;'T'
  5049  007C46  45                 	db	69	;'E'
  5050  007C47  52                 	db	82	;'R'
  5051  007C48  00                 	db	0
  5052  007C49                     STR_10:
  5053                           
  5054                           ; BSR set to: 1
  5055  007C49  53                 	db	83	;'S'
  5056  007C4A  49                 	db	73	;'I'
  5057  007C4B  4C                 	db	76	;'L'
  5058  007C4C  45                 	db	69	;'E'
  5059  007C4D  4E                 	db	78	;'N'
  5060  007C4E  54                 	db	84	;'T'
  5061  007C4F  00                 	db	0
  5062  007C50                     STR_60:
  5063                           
  5064                           ; BSR set to: 1
  5065  007C50  30                 	db	48	;'0'
  5066  007C51  78                 	db	120	;'x'
  5067  007C52  25                 	db	37
  5068  007C53  30                 	db	48	;'0'
  5069  007C54  32                 	db	50	;'2'
  5070  007C55  58                 	db	88	;'X'
  5071  007C56  00                 	db	0
  5072  007C57                     STR_183:
  5073                           
  5074                           ; BSR set to: 1
  5075  007C57  30                 	db	48	;'0'
  5076  007C58  78                 	db	120	;'x'
  5077  007C59  25                 	db	37
  5078  007C5A  30                 	db	48	;'0'
  5079  007C5B  34                 	db	52	;'4'
  5080  007C5C  58                 	db	88	;'X'
  5081  007C5D  00                 	db	0
  5082  007C5E                     STR_201:
  5083                           
  5084                           ; BSR set to: 1
  5085  007C5E  30                 	db	48	;'0'
  5086  007C5F  78                 	db	120	;'x'
  5087  007C60  25                 	db	37
  5088  007C61  30                 	db	48	;'0'
  5089  007C62  38                 	db	56	;'8'
  5090  007C63  58                 	db	88	;'X'
  5091  007C64  00                 	db	0
  5092  007C65                     STR_173:
  5093                           
  5094                           ; BSR set to: 1
  5095  007C65  46                 	db	70	;'F'
  5096  007C66  30                 	db	48	;'0'
  5097  007C67  30                 	db	48	;'0'
  5098  007C68  0D                 	db	13
  5099  007C69  0A                 	db	10
  5100  007C6A  00                 	db	0
  5101  007C6B                     STR_9:
  5102                           
  5103                           ; BSR set to: 1
  5104  007C6B  2B                 	db	43
  5105  007C6C  4F                 	db	79	;'O'
  5106  007C6D  4B                 	db	75	;'K'
  5107  007C6E  0D                 	db	13
  5108  007C6F  0A                 	db	10
  5109  007C70  00                 	db	0
  5110  007C71                     STR_58:
  5111                           
  5112                           ; BSR set to: 1
  5113  007C71  25                 	db	37
  5114  007C72  64                 	db	100	;'d'
  5115  007C73  20                 	db	32
  5116  007C74  2D                 	db	45
  5117  007C75  20                 	db	32
  5118  007C76  00                 	db	0
  5119  007C77                     STR_146:
  5120                           
  5121                           ; BSR set to: 1
  5122  007C77  4D                 	db	77	;'M'
  5123  007C78  4F                 	db	79	;'O'
  5124  007C79  44                 	db	68	;'D'
  5125  007C7A  45                 	db	69	;'E'
  5126  007C7B  20                 	db	32
  5127  007C7C  00                 	db	0
  5128  007C7D                     STR_153:
  5129                           
  5130                           ; BSR set to: 1
  5131  007C7D  45                 	db	69	;'E'
  5132  007C7E  43                 	db	67	;'C'
  5133  007C7F  48                 	db	72	;'H'
  5134  007C80  4F                 	db	79	;'O'
  5135  007C81  20                 	db	32
  5136  007C82  00                 	db	0
  5137  007C83                     STR_12:
  5138                           
  5139                           ; BSR set to: 1
  5140  007C83  43                 	db	67	;'C'
  5141  007C84  4C                 	db	76	;'L'
  5142  007C85  4F                 	db	79	;'O'
  5143  007C86  53                 	db	83	;'S'
  5144  007C87  45                 	db	69	;'E'
  5145  007C88  00                 	db	0
  5146  007C89                     STR_151:
  5147                           
  5148                           ; BSR set to: 1
  5149  007C89  53                 	db	83	;'S'
  5150  007C8A  4C                 	db	76	;'L'
  5151  007C8B  43                 	db	67	;'C'
  5152  007C8C  41                 	db	65	;'A'
  5153  007C8D  4E                 	db	78	;'N'
  5154  007C8E  00                 	db	0
  5155  007C8F                     STR_133:
  5156                           
  5157                           ; BSR set to: 1
  5158  007C8F  53                 	db	83	;'S'
  5159  007C90  45                 	db	69	;'E'
  5160  007C91  54                 	db	84	;'T'
  5161  007C92  20                 	db	32
  5162  007C93  00                 	db	0
  5163  007C94                     STR_47:
  5164                           
  5165                           ; BSR set to: 1
  5166  007C94  46                 	db	70	;'F'
  5167  007C95  49                 	db	73	;'I'
  5168  007C96  4E                 	db	78	;'N'
  5169  007C97  44                 	db	68	;'D'
  5170  007C98  00                 	db	0
  5171  007C99                     STR_49:
  5172                           
  5173                           ; BSR set to: 1
  5174  007C99  52                 	db	82	;'R'
  5175  007C9A  52                 	db	82	;'R'
  5176  007C9B  45                 	db	69	;'E'
  5177  007C9C  47                 	db	71	;'G'
  5178  007C9D  00                 	db	0
  5179  007C9E                     STR_81:
  5180                           
  5181                           ; BSR set to: 1
  5182  007C9E  57                 	db	87	;'W'
  5183  007C9F  52                 	db	82	;'R'
  5184  007CA0  45                 	db	69	;'E'
  5185  007CA1  47                 	db	71	;'G'
  5186  007CA2  00                 	db	0
  5187  007CA3                     STR_120:
  5188                           
  5189                           ; BSR set to: 1
  5190  007CA3  4D                 	db	77	;'M'
  5191  007CA4  41                 	db	65	;'A'
  5192  007CA5  53                 	db	83	;'S'
  5193  007CA6  4B                 	db	75	;'K'
  5194  007CA7  00                 	db	0
  5195  007CA8                     STR_8:
  5196                           
  5197                           ; BSR set to: 1
  5198  007CA8  4F                 	db	79	;'O'
  5199  007CA9  50                 	db	80	;'P'
  5200  007CAA  45                 	db	69	;'E'
  5201  007CAB  4E                 	db	78	;'N'
  5202  007CAC  00                 	db	0
  5203  007CAD                     STR_97:
  5204                           
  5205                           ; BSR set to: 1
  5206  007CAD  49                 	db	73	;'I'
  5207  007CAE  4E                 	db	78	;'N'
  5208  007CAF  46                 	db	70	;'F'
  5209  007CB0  4F                 	db	79	;'O'
  5210  007CB1  00                 	db	0
  5211  007CB2                     STR_149:
  5212                           
  5213                           ; BSR set to: 1
  5214  007CB2  56                 	db	86	;'V'
  5215  007CB3  53                 	db	83	;'S'
  5216  007CB4  43                 	db	67	;'C'
  5217  007CB5  50                 	db	80	;'P'
  5218  007CB6  00                 	db	0
  5219  007CB7                     STR_45:
  5220                           
  5221                           ; BSR set to: 1
  5222  007CB7  48                 	db	72	;'H'
  5223  007CB8  45                 	db	69	;'E'
  5224  007CB9  4C                 	db	76	;'L'
  5225  007CBA  50                 	db	80	;'P'
  5226  007CBB  00                 	db	0
  5227  007CBC                     STR_41:
  5228                           
  5229                           ; BSR set to: 1
  5230  007CBC  53                 	db	83	;'S'
  5231  007CBD  54                 	db	84	;'T'
  5232  007CBE  41                 	db	65	;'A'
  5233  007CBF  54                 	db	84	;'T'
  5234  007CC0  00                 	db	0
  5235  007CC1                     STR_6:
  5236                           
  5237                           ; BSR set to: 1
  5238  007CC1  42                 	db	66	;'B'
  5239  007CC2  4F                 	db	79	;'O'
  5240  007CC3  4F                 	db	79	;'O'
  5241  007CC4  54                 	db	84	;'T'
  5242  007CC5  00                 	db	0
  5243  007CC6                     STR_68:
  5244                           
  5245                           ; BSR set to: 1
  5246  007CC6  27                 	db	39
  5247  007CC7  20                 	db	32
  5248  007CC8  09                 	db	9
  5249  007CC9  00                 	db	0
  5250  007CCA                     STR_199:
  5251                           
  5252                           ; BSR set to: 1
  5253  007CCA  3E                 	db	62	;'>'
  5254  007CCB  0D                 	db	13
  5255  007CCC  0A                 	db	10
  5256  007CCD  00                 	db	0
  5257  007CCE                     STR_92:
  5258                           
  5259                           ; BSR set to: 1
  5260  007CCE  25                 	db	37
  5261  007CCF  64                 	db	100	;'d'
  5262  007CD0  0A                 	db	10
  5263  007CD1  00                 	db	0
  5264  007CD2                     STR_156:
  5265                           
  5266                           ; BSR set to: 1
  5267  007CD2  4F                 	db	79	;'O'
  5268  007CD3  46                 	db	70	;'F'
  5269  007CD4  46                 	db	70	;'F'
  5270  007CD5  00                 	db	0
  5271  007CD6                     STR_43:
  5272                           
  5273                           ; BSR set to: 1
  5274  007CD6  45                 	db	69	;'E'
  5275  007CD7  52                 	db	82	;'R'
  5276  007CD8  52                 	db	82	;'R'
  5277  007CD9  00                 	db	0
  5278  007CDA                     STR_134:
  5279                           
  5280                           ; BSR set to: 1
  5281  007CDA  48                 	db	72	;'H'
  5282  007CDB  45                 	db	69	;'E'
  5283  007CDC  58                 	db	88	;'X'
  5284  007CDD  00                 	db	0
  5285  007CDE                     STR_181:
  5286                           
  5287                           ; BSR set to: 1
  5288  007CDE  25                 	db	37
  5289  007CDF  6C                 	db	108	;'l'
  5290  007CE0  75                 	db	117	;'u'
  5291  007CE1  00                 	db	0
  5292  007CE2                     STR_67:
  5293                           
  5294                           ; BSR set to: 1
  5295  007CE2  09                 	db	9
  5296  007CE3  27                 	db	39
  5297  007CE4  00                 	db	0
  5298  007CE5                     STR_288:
  5299                           
  5300                           ; BSR set to: 1
  5301  007CE5  2D                 	db	45
  5302  007CE6  2D                 	db	45
  5303  007CE7  00                 	db	0
  5304  007CE8                     STR_38:
  5305                           
  5306                           ; BSR set to: 1
  5307  007CE8  52                 	db	82	;'R'
  5308  007CE9  58                 	db	88	;'X'
  5309  007CEA  00                 	db	0
  5310  007CEB                     STR_29:
  5311                           
  5312                           ; BSR set to: 1
  5313  007CEB  54                 	db	84	;'T'
  5314  007CEC  58                 	db	88	;'X'
  5315  007CED  00                 	db	0
  5316  007CEE                     STR_61:
  5317                           
  5318                           ; BSR set to: 1
  5319  007CEE  25                 	db	37
  5320  007CEF  64                 	db	100	;'d'
  5321  007CF0  00                 	db	0
  5322  007CF1                     STR_175:
  5323                           
  5324                           ; BSR set to: 1
  5325  007CF1  07                 	db	7
  5326  007CF2  00                 	db	0
  5327  007CF3                     STR_174:
  5328                           
  5329                           ; BSR set to: 1
  5330  007CF3  0D                 	db	13
  5331  007CF4  00                 	db	0
  5332  007CF5                     STR_30:
  5333                           
  5334                           ; BSR set to: 1
  5335  007CF5  2C                 	db	44
  5336  007CF6  00                 	db	0
  5337  007CF7                     STR_295:
  5338                           
  5339                           ; BSR set to: 1
  5340  007CF7  2E                 	db	46
  5341  007CF8  00                 	db	0
  5342  007CF9                     STR_287:
  5343                           
  5344                           ; BSR set to: 1
  5345  007CF9  30                 	db	48	;'0'
  5346  007CFA  00                 	db	0
  5347  007CFB                     STR_289:
  5348                           
  5349                           ; BSR set to: 1
  5350  007CFB  3A                 	db	58	;':'
  5351  007CFC  00                 	db	0
  5352  007CFD                     STR_166:
  5353                           
  5354                           ; BSR set to: 1
  5355  007CFD  3F                 	db	63	;'?'
  5356  007CFE  00                 	db	0
  5357  007CFF                     __end_of__stringdata:
  5358                           	opt stack 0
  5359                           
  5360                           ; #config settings
  5361  007CFF  00                 	db	0	; dummy byte at the end
  5362  0000                     tblptru	equ	0xFF8
  5363                           tblptrh	equ	0xFF7
  5364                           tblptrl	equ	0xFF6
  5365                           tablat	equ	0xFF5
  5366                           prodh	equ	0xFF4
  5367                           prodl	equ	0xFF3
  5368                           intcon	equ	0xFF2
  5369                           indf0	equ	0xFEF
  5370                           fsr0h	equ	0xFEA
  5371                           fsr0l	equ	0xFE9
  5372                           wreg	equ	0xFE8
  5373                           indf1	equ	0xFE7
  5374                           postinc1	equ	0xFE6
  5375                           postdec1	equ	0xFE5
  5376                           fsr1h	equ	0xFE2
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           postinc2	equ	0xFDE
  5380                           postdec2	equ	0xFDD
  5381                           plusw2	equ	0xFDB
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386                           	psect	nvBANK1
  5387  0001F7                     __pnvBANK1:
  5388                           	opt stack 0
  5389  0001F7                     _caps:
  5390                           	opt stack 0
  5391  0001F7                     	ds	2
  5392  0001F9                     ___DCDelay:
  5393                           	opt stack 0
  5394  0001F9                     	ds	1
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           indf0	equ	0xFEF
  5403                           fsr0h	equ	0xFEA
  5404                           fsr0l	equ	0xFE9
  5405                           wreg	equ	0xFE8
  5406                           indf1	equ	0xFE7
  5407                           postinc1	equ	0xFE6
  5408                           postdec1	equ	0xFE5
  5409                           fsr1h	equ	0xFE2
  5410                           fsr1l	equ	0xFE1
  5411                           indf2	equ	0xFDF
  5412                           postinc2	equ	0xFDE
  5413                           postdec2	equ	0xFDD
  5414                           plusw2	equ	0xFDB
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419                           	psect	cinit
  5420  00133C                     __pcinit:
  5421                           	opt stack 0
  5422  00133C                     start_initialization:
  5423                           	opt stack 0
  5424  00133C                     __initialization:
  5425                           	opt stack 0
  5426                           
  5427                           ; Clear objects allocated to BIGRAM (494 bytes)
  5428  00133C  EE04  F000         	lfsr	0,__pbssBIGRAM
  5429  001340  EE11 F0EE          	lfsr	1,494
  5430  001344                     clear_0:
  5431  001344  6AEE               	clrf	postinc0,c
  5432  001346  50E5               	movf	postdec1,w,c
  5433  001348  50E1               	movf	fsr1l,w,c
  5434  00134A  E1FC               	bnz	clear_0
  5435  00134C  50E2               	movf	fsr1h,w,c
  5436  00134E  E1FA               	bnz	clear_0
  5437                           
  5438                           ; Clear objects allocated to BANK3 (256 bytes)
  5439  001350  EE03  F000         	lfsr	0,__pbssBANK3
  5440  001354  EE11 F000          	lfsr	1,256
  5441  001358                     clear_1:
  5442  001358  6AEE               	clrf	postinc0,c
  5443  00135A  50E5               	movf	postdec1,w,c
  5444  00135C  50E1               	movf	fsr1l,w,c
  5445  00135E  E1FC               	bnz	clear_1
  5446  001360  50E2               	movf	fsr1h,w,c
  5447  001362  E1FA               	bnz	clear_1
  5448                           
  5449                           ; Clear objects allocated to BANK2 (128 bytes)
  5450  001364  EE02  F000         	lfsr	0,__pbssBANK2
  5451  001368  0E80               	movlw	128
  5452  00136A                     clear_2:
  5453  00136A  6AEE               	clrf	postinc0,c
  5454  00136C  06E8               	decf	wreg,f,c
  5455  00136E  E1FD               	bnz	clear_2
  5456                           
  5457                           ; Clear objects allocated to BANK1 (242 bytes)
  5458  001370  EE01  F000         	lfsr	0,__pbssBANK1
  5459  001374  0EF2               	movlw	242
  5460  001376                     clear_3:
  5461  001376  6AEE               	clrf	postinc0,c
  5462  001378  06E8               	decf	wreg,f,c
  5463  00137A  E1FD               	bnz	clear_3
  5464                           
  5465                           ; Clear objects allocated to COMRAM (30 bytes)
  5466  00137C  EE00  F024         	lfsr	0,__pbssCOMRAM
  5467  001380  0E1E               	movlw	30
  5468  001382                     clear_4:
  5469  001382  6AEE               	clrf	postinc0,c
  5470  001384  06E8               	decf	wreg,f,c
  5471  001386  E1FD               	bnz	clear_4
  5472  001388                     end_of_initialization:
  5473                           	opt stack 0
  5474  001388                     __end_of__initialization:
  5475                           	opt stack 0
  5476  001388  0E00               	movlw	low (__Lmediumconst shr (0+16))
  5477  00138A  6EF8               	movwf	tblptru,c
  5478  00138C  0100               	movlb	0
  5479  00138E  EF44  F01C         	goto	_main	;jump to C main() function
  5480                           tblptru	equ	0xFF8
  5481                           tblptrh	equ	0xFF7
  5482                           tblptrl	equ	0xFF6
  5483                           tablat	equ	0xFF5
  5484                           prodh	equ	0xFF4
  5485                           prodl	equ	0xFF3
  5486                           intcon	equ	0xFF2
  5487                           indf0	equ	0xFEF
  5488                           postinc0	equ	0xFEE
  5489                           fsr0h	equ	0xFEA
  5490                           fsr0l	equ	0xFE9
  5491                           wreg	equ	0xFE8
  5492                           indf1	equ	0xFE7
  5493                           postinc1	equ	0xFE6
  5494                           postdec1	equ	0xFE5
  5495                           fsr1h	equ	0xFE2
  5496                           fsr1l	equ	0xFE1
  5497                           indf2	equ	0xFDF
  5498                           postinc2	equ	0xFDE
  5499                           postdec2	equ	0xFDD
  5500                           plusw2	equ	0xFDB
  5501                           fsr2h	equ	0xFDA
  5502                           fsr2l	equ	0xFD9
  5503                           status	equ	0xFD8
  5504                           
  5505                           	psect	bssCOMRAM
  5506  000024                     __pbssCOMRAM:
  5507                           	opt stack 0
  5508  000024                     _status_led_cnt:
  5509                           	opt stack 0
  5510  000024                     	ds	2
  5511  000026                     strtok@sp:
  5512                           	opt stack 0
  5513  000026                     	ds	2
  5514  000028                     _bDLE:
  5515                           	opt stack 0
  5516  000028                     	ds	1
  5517  000029                     _bHex:
  5518                           	opt stack 0
  5519  000029                     	ds	1
  5520  00002A                     _bInitiated:
  5521                           	opt stack 0
  5522  00002A                     	ds	1
  5523  00002B                     _bLocalEcho:
  5524                           	opt stack 0
  5525  00002B                     	ds	1
  5526  00002C                     _bOpen:
  5527                           	opt stack 0
  5528  00002C                     	ds	1
  5529  00002D                     _bSilent:
  5530                           	opt stack 0
  5531  00002D                     	ds	1
  5532  00002E                     _bTimestamp:
  5533                           	opt stack 0
  5534  00002E                     	ds	1
  5535  00002F                     _fifo_canrxcount:
  5536                           	opt stack 0
  5537  00002F                     	ds	1
  5538  000030                     _ledFunctionality:
  5539                           	opt stack 0
  5540  000030                     	ds	1
  5541  000031                     _nTimeStamp:
  5542                           	opt stack 0
  5543  000031                     	ds	1
  5544  000032                     _pos:
  5545                           	opt stack 0
  5546  000032                     	ds	1
  5547  000033                     _rwtimeout:
  5548                           	opt stack 0
  5549  000033                     	ds	1
  5550  000034                     _sequencyno:
  5551                           	opt stack 0
  5552  000034                     	ds	1
  5553  000035                     _stateVscpDriver:
  5554                           	opt stack 0
  5555  000035                     	ds	1
  5556  000036                     _id:
  5557                           	opt stack 0
  5558  000036                     	ds	4
  5559  00003A                     _vscpClass:
  5560                           	opt stack 0
  5561  00003A                     	ds	2
  5562  00003C                     _dlc:
  5563                           	opt stack 0
  5564  00003C                     	ds	1
  5565  00003D                     _flags:
  5566                           	opt stack 0
  5567  00003D                     	ds	1
  5568  00003E                     _vscpNodeId:
  5569                           	opt stack 0
  5570  00003E                     	ds	1
  5571  00003F                     _vscpPriority:
  5572                           	opt stack 0
  5573  00003F                     	ds	1
  5574  000040                     _vscpSize:
  5575                           	opt stack 0
  5576  000040                     	ds	1
  5577  000041                     _vscpType:
  5578                           	opt stack 0
  5579  000041                     	ds	1
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           indf0	equ	0xFEF
  5588                           postinc0	equ	0xFEE
  5589                           fsr0h	equ	0xFEA
  5590                           fsr0l	equ	0xFE9
  5591                           wreg	equ	0xFE8
  5592                           indf1	equ	0xFE7
  5593                           postinc1	equ	0xFE6
  5594                           postdec1	equ	0xFE5
  5595                           fsr1h	equ	0xFE2
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           postdec2	equ	0xFDD
  5600                           plusw2	equ	0xFDB
  5601                           fsr2h	equ	0xFDA
  5602                           fsr2l	equ	0xFD9
  5603                           status	equ	0xFD8
  5604                           
  5605                           	psect	bssBANK1
  5606  000100                     __pbssBANK1:
  5607                           	opt stack 0
  5608  000100                     _can_receiveOverruns:
  5609                           	opt stack 0
  5610  000100                     	ds	4
  5611  000104                     _can_transmitOverruns:
  5612                           	opt stack 0
  5613  000104                     	ds	4
  5614  000108                     _cntRxBytes:
  5615                           	opt stack 0
  5616  000108                     	ds	4
  5617  00010C                     _cntRxFrames:
  5618                           	opt stack 0
  5619  00010C                     	ds	4
  5620  000110                     _cntTxBytes:
  5621                           	opt stack 0
  5622  000110                     	ds	4
  5623  000114                     _cntTxFrames:
  5624                           	opt stack 0
  5625  000114                     	ds	4
  5626  000118                     _timekeeper:
  5627                           	opt stack 0
  5628  000118                     	ds	4
  5629  00011C                     _timer:
  5630                           	opt stack 0
  5631  00011C                     	ds	4
  5632  000120                     _uart_receiveOverruns:
  5633                           	opt stack 0
  5634  000120                     	ds	4
  5635  000124                     _uart_transmitOverruns:
  5636                           	opt stack 0
  5637  000124                     	ds	4
  5638  000128                     _made_table:
  5639                           	opt stack 0
  5640  000128                     	ds	2
  5641  00012A                     _USART_Status:
  5642                           	opt stack 0
  5643  00012A                     	ds	1
  5644  00012B                     __ECANRxFilterHitInfo:
  5645                           	opt stack 0
  5646  00012B                     	ds	1
  5647  00012C                     __IT_INT_MASK:
  5648                           	opt stack 0
  5649  00012C                     	ds	1
  5650  00012D                     __IT_SAVE_BSR:
  5651                           	opt stack 0
  5652  00012D                     	ds	1
  5653  00012E                     __IT_SAVE_STATUS:
  5654                           	opt stack 0
  5655  00012E                     	ds	1
  5656  00012F                     __IT_SAVE_WREG:
  5657                           	opt stack 0
  5658  00012F                     	ds	1
  5659  000130                     ___DCByte:
  5660                           	opt stack 0
  5661  000130                     	ds	1
  5662  000131                     _mode:
  5663                           	opt stack 0
  5664  000131                     	ds	1
  5665  000132                     _cmdbuf:
  5666                           	opt stack 0
  5667  000132                     	ds	80
  5668  000182                     _wrkbuf:
  5669                           	opt stack 0
  5670  000182                     	ds	80
  5671  0001D2                     _canInputFifo:
  5672                           	opt stack 0
  5673  0001D2                     	ds	8
  5674  0001DA                     _data:
  5675                           	opt stack 0
  5676  0001DA                     	ds	8
  5677  0001E2                     _serialInputFifo:
  5678                           	opt stack 0
  5679  0001E2                     	ds	8
  5680  0001EA                     _vscpData:
  5681                           	opt stack 0
  5682  0001EA                     	ds	8
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           intcon	equ	0xFF2
  5690                           indf0	equ	0xFEF
  5691                           postinc0	equ	0xFEE
  5692                           fsr0h	equ	0xFEA
  5693                           fsr0l	equ	0xFE9
  5694                           wreg	equ	0xFE8
  5695                           indf1	equ	0xFE7
  5696                           postinc1	equ	0xFE6
  5697                           postdec1	equ	0xFE5
  5698                           fsr1h	equ	0xFE2
  5699                           fsr1l	equ	0xFE1
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           plusw2	equ	0xFDB
  5704                           fsr2h	equ	0xFDA
  5705                           fsr2l	equ	0xFD9
  5706                           status	equ	0xFD8
  5707                           
  5708                           	psect	bssBANK2
  5709  000200                     __pbssBANK2:
  5710                           	opt stack 0
  5711  000200                     _serial_inputBuffer:
  5712                           	opt stack 0
  5713  000200                     	ds	128
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           prodh	equ	0xFF4
  5719                           prodl	equ	0xFF3
  5720                           intcon	equ	0xFF2
  5721                           indf0	equ	0xFEF
  5722                           postinc0	equ	0xFEE
  5723                           fsr0h	equ	0xFEA
  5724                           fsr0l	equ	0xFE9
  5725                           wreg	equ	0xFE8
  5726                           indf1	equ	0xFE7
  5727                           postinc1	equ	0xFE6
  5728                           postdec1	equ	0xFE5
  5729                           fsr1h	equ	0xFE2
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           plusw2	equ	0xFDB
  5735                           fsr2h	equ	0xFDA
  5736                           fsr2l	equ	0xFD9
  5737                           status	equ	0xFD8
  5738                           
  5739                           	psect	bssBANK3
  5740  000300                     __pbssBANK3:
  5741                           	opt stack 0
  5742  000300                     _crc8_table:
  5743                           	opt stack 0
  5744  000300                     	ds	256
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           prodh	equ	0xFF4
  5750                           prodl	equ	0xFF3
  5751                           intcon	equ	0xFF2
  5752                           indf0	equ	0xFEF
  5753                           postinc0	equ	0xFEE
  5754                           fsr0h	equ	0xFEA
  5755                           fsr0l	equ	0xFE9
  5756                           wreg	equ	0xFE8
  5757                           indf1	equ	0xFE7
  5758                           postinc1	equ	0xFE6
  5759                           postdec1	equ	0xFE5
  5760                           fsr1h	equ	0xFE2
  5761                           fsr1l	equ	0xFE1
  5762                           indf2	equ	0xFDF
  5763                           postinc2	equ	0xFDE
  5764                           postdec2	equ	0xFDD
  5765                           plusw2	equ	0xFDB
  5766                           fsr2h	equ	0xFDA
  5767                           fsr2l	equ	0xFD9
  5768                           status	equ	0xFD8
  5769                           
  5770                           	psect	bssBIGRAM
  5771  000400                     __pbssBIGRAM:
  5772                           	opt stack 0
  5773  000400                     _can_inputBuffer:
  5774                           	opt stack 0
  5775  000400                     	ds	494
  5776                           tblptru	equ	0xFF8
  5777                           tblptrh	equ	0xFF7
  5778                           tblptrl	equ	0xFF6
  5779                           tablat	equ	0xFF5
  5780                           prodh	equ	0xFF4
  5781                           prodl	equ	0xFF3
  5782                           intcon	equ	0xFF2
  5783                           indf0	equ	0xFEF
  5784                           postinc0	equ	0xFEE
  5785                           fsr0h	equ	0xFEA
  5786                           fsr0l	equ	0xFE9
  5787                           wreg	equ	0xFE8
  5788                           indf1	equ	0xFE7
  5789                           postinc1	equ	0xFE6
  5790                           postdec1	equ	0xFE5
  5791                           fsr1h	equ	0xFE2
  5792                           fsr1l	equ	0xFE1
  5793                           indf2	equ	0xFDF
  5794                           postinc2	equ	0xFDE
  5795                           postdec2	equ	0xFDD
  5796                           plusw2	equ	0xFDB
  5797                           fsr2h	equ	0xFDA
  5798                           fsr2l	equ	0xFD9
  5799                           status	equ	0xFD8
  5800                           
  5801                           	psect	cstackBANK2
  5802  000280                     __pcstackBANK2:
  5803                           	opt stack 0
  5804  000280                     doModeVerbose@id:
  5805                           	opt stack 0
  5806                           
  5807                           ; 4 bytes @ 0x0
  5808  000280                     	ds	4
  5809  000284                     doModeVerbose@preg:
  5810                           	opt stack 0
  5811                           
  5812                           ; 2 bytes @ 0x4
  5813  000284                     	ds	2
  5814  000286                     doModeVerbose@preg_1268:
  5815                           	opt stack 0
  5816                           
  5817                           ; 2 bytes @ 0x6
  5818  000286                     	ds	2
  5819  000288                     doModeVerbose@filter_class:
  5820                           	opt stack 0
  5821                           
  5822                           ; 2 bytes @ 0x8
  5823  000288                     	ds	2
  5824  00028A                     doModeVerbose@mask_class:
  5825                           	opt stack 0
  5826                           
  5827                           ; 2 bytes @ 0xA
  5828  00028A                     	ds	2
  5829  00028C                     doModeVerbose@filter_priority:
  5830                           	opt stack 0
  5831                           
  5832                           ; 1 bytes @ 0xC
  5833  00028C                     	ds	1
  5834  00028D                     doModeVerbose@filter_type:
  5835                           	opt stack 0
  5836                           
  5837                           ; 1 bytes @ 0xD
  5838  00028D                     	ds	1
  5839  00028E                     doModeVerbose@filter_nodeid:
  5840                           	opt stack 0
  5841                           
  5842                           ; 1 bytes @ 0xE
  5843  00028E                     	ds	1
  5844  00028F                     doModeVerbose@mask_priority:
  5845                           	opt stack 0
  5846                           
  5847                           ; 1 bytes @ 0xF
  5848  00028F                     	ds	1
  5849  000290                     doModeVerbose@mask_type:
  5850                           	opt stack 0
  5851                           
  5852                           ; 1 bytes @ 0x10
  5853  000290                     	ds	1
  5854  000291                     doModeVerbose@mask_nodeid:
  5855                           	opt stack 0
  5856                           
  5857                           ; 1 bytes @ 0x11
  5858  000291                     	ds	2
  5859  000293                     _doModeVerbose$1223:
  5860                           	opt stack 0
  5861                           
  5862                           ; 2 bytes @ 0x13
  5863  000293                     	ds	2
  5864  000295                     _doModeVerbose$1228:
  5865                           	opt stack 0
  5866                           
  5867                           ; 2 bytes @ 0x15
  5868  000295                     	ds	2
  5869  000297                     _doModeVerbose$1232:
  5870                           	opt stack 0
  5871                           
  5872                           ; 2 bytes @ 0x17
  5873  000297                     	ds	2
  5874  000299                     _doModeVerbose$1237:
  5875                           	opt stack 0
  5876                           
  5877                           ; 2 bytes @ 0x19
  5878  000299                     	ds	2
  5879  00029B                     _doModeVerbose$1245:
  5880                           	opt stack 0
  5881                           
  5882                           ; 2 bytes @ 0x1B
  5883  00029B                     	ds	2
  5884  00029D                     _doModeVerbose$1250:
  5885                           	opt stack 0
  5886                           
  5887                           ; 2 bytes @ 0x1D
  5888  00029D                     	ds	2
  5889  00029F                     _doModeVerbose$1254:
  5890                           	opt stack 0
  5891                           
  5892                           ; 2 bytes @ 0x1F
  5893  00029F                     	ds	2
  5894  0002A1                     _doModeVerbose$1277:
  5895                           	opt stack 0
  5896                           
  5897                           ; 2 bytes @ 0x21
  5898  0002A1                     	ds	2
  5899  0002A3                     _doModeVerbose$1283:
  5900                           	opt stack 0
  5901                           
  5902                           ; 2 bytes @ 0x23
  5903  0002A3                     	ds	2
  5904  0002A5                     _doModeVerbose$1292:
  5905                           	opt stack 0
  5906                           
  5907                           ; 2 bytes @ 0x25
  5908  0002A5                     	ds	2
  5909  0002A7                     doModeVerbose@rv:
  5910                           	opt stack 0
  5911                           
  5912                           ; 1 bytes @ 0x27
  5913  0002A7                     	ds	1
  5914  0002A8                     doModeVerbose@page_1260:
  5915                           	opt stack 0
  5916                           
  5917                           ; 1 bytes @ 0x28
  5918  0002A8                     	ds	1
  5919  0002A9                     doModeVerbose@reg_1261:
  5920                           	opt stack 0
  5921                           
  5922                           ; 1 bytes @ 0x29
  5923  0002A9                     	ds	1
  5924  0002AA                     doModeVerbose@value_1286:
  5925                           	opt stack 0
  5926                           
  5927                           ; 1 bytes @ 0x2A
  5928  0002AA                     	ds	1
  5929  0002AB                     doModeVerbose@bPersistent:
  5930                           	opt stack 0
  5931                           
  5932                           ; 1 bytes @ 0x2B
  5933  0002AB                     	ds	1
  5934  0002AC                     doModeVerbose@filterno:
  5935                           	opt stack 0
  5936                           
  5937                           ; 1 bytes @ 0x2C
  5938  0002AC                     	ds	1
  5939  0002AD                     doModeVerbose@i:
  5940                           	opt stack 0
  5941                           
  5942                           ; 1 bytes @ 0x2D
  5943  0002AD                     	ds	1
  5944  0002AE                     doModeVerbose@value_1262:
  5945                           	opt stack 0
  5946                           
  5947                           ; 1 bytes @ 0x2E
  5948  0002AE                     	ds	1
  5949  0002AF                     doModeVerbose@count:
  5950                           	opt stack 0
  5951                           
  5952                           ; 1 bytes @ 0x2F
  5953  0002AF                     	ds	1
  5954  0002B0                     doModeVerbose@nodeid:
  5955                           	opt stack 0
  5956                           
  5957                           ; 1 bytes @ 0x30
  5958  0002B0                     	ds	1
  5959  0002B1                     doModeVerbose@nodeid_1259:
  5960                           	opt stack 0
  5961                           
  5962                           ; 1 bytes @ 0x31
  5963  0002B1                     	ds	1
  5964  0002B2                     doModeVerbose@maskno:
  5965                           	opt stack 0
  5966                           
  5967                           ; 1 bytes @ 0x32
  5968  0002B2                     	ds	1
  5969  0002B3                     doModeVerbose@page:
  5970                           	opt stack 0
  5971                           
  5972                           ; 1 bytes @ 0x33
  5973  0002B3                     	ds	1
  5974  0002B4                     doModeVerbose@reg:
  5975                           	opt stack 0
  5976                           
  5977                           ; 1 bytes @ 0x34
  5978  0002B4                     	ds	1
  5979  0002B5                     doModeVerbose@i_1204:
  5980                           	opt stack 0
  5981                           
  5982                           ; 1 bytes @ 0x35
  5983  0002B5                     	ds	1
  5984  0002B6                     doModeVerbose@nodeid_1285:
  5985                           	opt stack 0
  5986                           
  5987                           ; 1 bytes @ 0x36
  5988  0002B6                     	ds	1
  5989  0002B7                     doModeVerbose@c:
  5990                           	opt stack 0
  5991                           
  5992                           ; 1 bytes @ 0x37
  5993  0002B7                     	ds	1
  5994  0002B8                     doModeVerbose@value:
  5995                           	opt stack 0
  5996                           
  5997                           ; 1 bytes @ 0x38
  5998  0002B8                     	ds	1
  5999  0002B9                     doModeVerbose@p_1211:
  6000                           	opt stack 0
  6001                           
  6002                           ; 2 bytes @ 0x39
  6003  0002B9                     	ds	2
  6004  0002BB                     doModeVerbose@p_1264:
  6005                           	opt stack 0
  6006                           
  6007                           ; 2 bytes @ 0x3B
  6008  0002BB                     	ds	2
  6009  0002BD                     doModeVerbose@ifmode:
  6010                           	opt stack 0
  6011                           
  6012                           ; 1 bytes @ 0x3D
  6013  0002BD                     	ds	1
  6014  0002BE                     doModeVerbose@p:
  6015                           	opt stack 0
  6016                           
  6017                           ; 2 bytes @ 0x3E
  6018  0002BE                     	ds	2
  6019  0002C0                     doModeVerbose@id_1338:
  6020                           	opt stack 0
  6021                           
  6022                           ; 4 bytes @ 0x40
  6023  0002C0                     	ds	4
  6024  0002C4                     doModeVerbose@p_1326:
  6025                           	opt stack 0
  6026                           
  6027                           ; 2 bytes @ 0x44
  6028  0002C4                     	ds	2
  6029  0002C6                     doModeVerbose@p_1303:
  6030                           	opt stack 0
  6031                           
  6032                           ; 2 bytes @ 0x46
  6033  0002C6                     	ds	2
  6034                           tblptru	equ	0xFF8
  6035                           tblptrh	equ	0xFF7
  6036                           tblptrl	equ	0xFF6
  6037                           tablat	equ	0xFF5
  6038                           prodh	equ	0xFF4
  6039                           prodl	equ	0xFF3
  6040                           intcon	equ	0xFF2
  6041                           indf0	equ	0xFEF
  6042                           postinc0	equ	0xFEE
  6043                           fsr0h	equ	0xFEA
  6044                           fsr0l	equ	0xFE9
  6045                           wreg	equ	0xFE8
  6046                           indf1	equ	0xFE7
  6047                           postinc1	equ	0xFE6
  6048                           postdec1	equ	0xFE5
  6049                           fsr1h	equ	0xFE2
  6050                           fsr1l	equ	0xFE1
  6051                           indf2	equ	0xFDF
  6052                           postinc2	equ	0xFDE
  6053                           postdec2	equ	0xFDD
  6054                           plusw2	equ	0xFDB
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059                           	psect	cstackBANK1
  6060  0001F2                     __pcstackBANK1:
  6061                           	opt stack 0
  6062  0001F2                     
  6063                           ; 2 bytes @ 0x0
  6064  0001F2                     	ds	2
  6065  0001F4                     
  6066                           ; 3 bytes @ 0x2
  6067  0001F4                     	ds	3
  6068                           tblptru	equ	0xFF8
  6069                           tblptrh	equ	0xFF7
  6070                           tblptrl	equ	0xFF6
  6071                           tablat	equ	0xFF5
  6072                           prodh	equ	0xFF4
  6073                           prodl	equ	0xFF3
  6074                           intcon	equ	0xFF2
  6075                           indf0	equ	0xFEF
  6076                           postinc0	equ	0xFEE
  6077                           fsr0h	equ	0xFEA
  6078                           fsr0l	equ	0xFE9
  6079                           wreg	equ	0xFE8
  6080                           indf1	equ	0xFE7
  6081                           postinc1	equ	0xFE6
  6082                           postdec1	equ	0xFE5
  6083                           fsr1h	equ	0xFE2
  6084                           fsr1l	equ	0xFE1
  6085                           indf2	equ	0xFDF
  6086                           postinc2	equ	0xFDE
  6087                           postdec2	equ	0xFDD
  6088                           plusw2	equ	0xFDB
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093                           	psect	cstackBANK0
  6094  000060                     __pcstackBANK0:
  6095                           	opt stack 0
  6096  000060                     ?_fifo_init:
  6097                           	opt stack 0
  6098  000060                     ?_setFilter:
  6099                           	opt stack 0
  6100  000060                     ?__CANIDToRegs:
  6101                           	opt stack 0
  6102  000060                     ??_strchr:
  6103  000060                     ?_hexStringToBytes:
  6104                           	opt stack 0
  6105  000060                     ?_fifo_read:
  6106                           	opt stack 0
  6107  000060                     ?_memset:
  6108                           	opt stack 0
  6109  000060                     ?_memcpy:
  6110                           	opt stack 0
  6111  000060                     ?_strnicmp:
  6112                           	opt stack 0
  6113  000060                     ?___wmul:
  6114                           	opt stack 0
  6115  000060                     ?___lldiv:
  6116                           	opt stack 0
  6117  000060                     printBinary@value:
  6118                           	opt stack 0
  6119  000060                     ___lwdiv@counter:
  6120                           	opt stack 0
  6121  000060                     __CANIDToRegs@ptr:
  6122                           	opt stack 0
  6123  000060                     fifo_init@f:
  6124                           	opt stack 0
  6125  000060                     fifo_read@f:
  6126                           	opt stack 0
  6127  000060                     _init_crc8$2106:
  6128                           	opt stack 0
  6129  000060                     hexStringToBytes@buf:
  6130                           	opt stack 0
  6131  000060                     memcpy@d1:
  6132                           	opt stack 0
  6133  000060                     memset@p1:
  6134                           	opt stack 0
  6135  000060                     strcat@cp:
  6136                           	opt stack 0
  6137  000060                     strcpy@cp:
  6138                           	opt stack 0
  6139  000060                     strnicmp@s1:
  6140                           	opt stack 0
  6141  000060                     ___wmul@multiplier:
  6142                           	opt stack 0
  6143  000060                     setFilter@val:
  6144                           	opt stack 0
  6145  000060                     ___lldiv@dividend:
  6146                           	opt stack 0
  6147                           
  6148                           ; 4 bytes @ 0x0
  6149  000060                     	ds	1
  6150  000061                     printBinary@i:
  6151                           	opt stack 0
  6152  000061                     ___lwdiv@quotient:
  6153                           	opt stack 0
  6154                           
  6155                           ; 2 bytes @ 0x1
  6156  000061                     	ds	1
  6157  000062                     ?_strspn:
  6158                           	opt stack 0
  6159  000062                     ?_strcspn:
  6160                           	opt stack 0
  6161  000062                     hexStringToBytes@size:
  6162                           	opt stack 0
  6163  000062                     fifo_init@buf:
  6164                           	opt stack 0
  6165  000062                     fifo_read@buf:
  6166                           	opt stack 0
  6167  000062                     init_crc8@j:
  6168                           	opt stack 0
  6169  000062                     memcpy@s1:
  6170                           	opt stack 0
  6171  000062                     memset@c:
  6172                           	opt stack 0
  6173  000062                     strnicmp@s2:
  6174                           	opt stack 0
  6175  000062                     ___wmul@multiplicand:
  6176                           	opt stack 0
  6177  000062                     strcspn@s1:
  6178                           	opt stack 0
  6179  000062                     strspn@s1:
  6180                           	opt stack 0
  6181  000062                     __CANIDToRegs@val:
  6182                           	opt stack 0
  6183                           
  6184                           ; 4 bytes @ 0x2
  6185  000062                     	ds	1
  6186  000063                     ?_utoa:
  6187                           	opt stack 0
  6188  000063                     hexStringToBytes@inhex:
  6189                           	opt stack 0
  6190  000063                     utoa@buf:
  6191                           	opt stack 0
  6192                           
  6193                           ; 2 bytes @ 0x3
  6194  000063                     	ds	1
  6195  000064                     setFilter@bPersistent:
  6196                           	opt stack 0
  6197  000064                     init_crc8@crc:
  6198                           	opt stack 0
  6199  000064                     fifo_init@size:
  6200                           	opt stack 0
  6201  000064                     fifo_read@nbytes:
  6202                           	opt stack 0
  6203  000064                     memcpy@n:
  6204                           	opt stack 0
  6205  000064                     memset@n:
  6206                           	opt stack 0
  6207  000064                     strnicmp@len:
  6208                           	opt stack 0
  6209  000064                     ___wmul@product:
  6210                           	opt stack 0
  6211  000064                     strcspn@s2:
  6212                           	opt stack 0
  6213  000064                     strspn@s2:
  6214                           	opt stack 0
  6215  000064                     ___lldiv@divisor:
  6216                           	opt stack 0
  6217                           
  6218                           ; 4 bytes @ 0x4
  6219  000064                     	ds	1
  6220  000065                     ??_setFilter:
  6221  000065                     ??_hexStringToBytes:
  6222  000065                     init_crc8@i:
  6223                           	opt stack 0
  6224  000065                     utoa@val:
  6225                           	opt stack 0
  6226                           
  6227                           ; 2 bytes @ 0x5
  6228  000065                     	ds	1
  6229  000066                     ??_strnicmp:
  6230  000066                     ?_atoi:
  6231                           	opt stack 0
  6232  000066                     __CANIDToRegs@type:
  6233                           	opt stack 0
  6234  000066                     fifo_read@p:
  6235                           	opt stack 0
  6236  000066                     atoi@s:
  6237                           	opt stack 0
  6238  000066                     strcspn@i:
  6239                           	opt stack 0
  6240  000066                     strspn@i:
  6241                           	opt stack 0
  6242                           
  6243                           ; 2 bytes @ 0x6
  6244  000066                     	ds	1
  6245  000067                     ?_sendEscapedUartData:
  6246                           	opt stack 0
  6247  000067                     ?_calcCRC:
  6248                           	opt stack 0
  6249  000067                     ?_ECANSendMessage:
  6250                           	opt stack 0
  6251  000067                     sendEscapedUartData@pcrc:
  6252                           	opt stack 0
  6253  000067                     calcCRC@p:
  6254                           	opt stack 0
  6255  000067                     utoa@base:
  6256                           	opt stack 0
  6257  000067                     ECANSendMessage@id:
  6258                           	opt stack 0
  6259                           
  6260                           ; 4 bytes @ 0x7
  6261  000067                     	ds	1
  6262  000068                     ??_atoi:
  6263  000068                     ?_stristr:
  6264                           	opt stack 0
  6265  000068                     ?_strtok:
  6266                           	opt stack 0
  6267  000068                     ?___llmod:
  6268                           	opt stack 0
  6269  000068                     fifo_read@i:
  6270                           	opt stack 0
  6271  000068                     hexStringToBytes@len:
  6272                           	opt stack 0
  6273  000068                     stristr@s1:
  6274                           	opt stack 0
  6275  000068                     strtok@s1:
  6276                           	opt stack 0
  6277  000068                     ___llmod@dividend:
  6278                           	opt stack 0
  6279                           
  6280                           ; 4 bytes @ 0x8
  6281  000068                     	ds	1
  6282  000069                     sendEscapedUartData@c:
  6283                           	opt stack 0
  6284  000069                     calcCRC@len:
  6285                           	opt stack 0
  6286  000069                     utoa@v:
  6287                           	opt stack 0
  6288                           
  6289                           ; 2 bytes @ 0x9
  6290  000069                     	ds	1
  6291  00006A                     ?_sendVSCPDriverCommandReply:
  6292                           	opt stack 0
  6293  00006A                     ?_getCANFrame:
  6294                           	opt stack 0
  6295  00006A                     sendVSCPDriverErrorFrame@errorcode:
  6296                           	opt stack 0
  6297  00006A                     sendVSCPDriverAck@crc:
  6298                           	opt stack 0
  6299  00006A                     sendVSCPDriverNack@crc:
  6300                           	opt stack 0
  6301  00006A                     sendVSCPDriverCommandReply@cmdCode:
  6302                           	opt stack 0
  6303  00006A                     sendVSCPModeCapabilities@crc:
  6304                           	opt stack 0
  6305  00006A                     calcCRC@j:
  6306                           	opt stack 0
  6307  00006A                     atoi@sign:
  6308                           	opt stack 0
  6309  00006A                     getCANFrame@pdlc:
  6310                           	opt stack 0
  6311  00006A                     hexStringToBytes@p:
  6312                           	opt stack 0
  6313  00006A                     stristr@s2:
  6314                           	opt stack 0
  6315  00006A                     strtok@s2:
  6316                           	opt stack 0
  6317                           
  6318                           ; 2 bytes @ 0xA
  6319  00006A                     	ds	1
  6320  00006B                     sendVSCPDriverErrorFrame@crc:
  6321                           	opt stack 0
  6322  00006B                     sendVSCPDriverCommandReply@cmdReplyCode:
  6323                           	opt stack 0
  6324  00006B                     calcCRC@crc:
  6325                           	opt stack 0
  6326  00006B                     setFilter@filter:
  6327                           	opt stack 0
  6328  00006B                     utoa@c:
  6329                           	opt stack 0
  6330  00006B                     ECANSendMessage@data:
  6331                           	opt stack 0
  6332  00006B                     atoi@a:
  6333                           	opt stack 0
  6334                           
  6335                           ; 2 bytes @ 0xB
  6336  00006B                     	ds	1
  6337  00006C                     ?_itoa:
  6338                           	opt stack 0
  6339  00006C                     sendVSCPDriverCommandReply@crc:
  6340                           	opt stack 0
  6341  00006C                     setFilter@sidh:
  6342                           	opt stack 0
  6343  00006C                     getCANFrame@pdata:
  6344                           	opt stack 0
  6345  00006C                     hexStringToBytes@i:
  6346                           	opt stack 0
  6347  00006C                     itoa@buf:
  6348                           	opt stack 0
  6349  00006C                     ___llmod@divisor:
  6350                           	opt stack 0
  6351                           
  6352                           ; 4 bytes @ 0xC
  6353  00006C                     	ds	1
  6354  00006D                     setFilter@sidl:
  6355                           	opt stack 0
  6356  00006D                     ECANSendMessage@dataLen:
  6357                           	opt stack 0
  6358                           
  6359                           ; 1 bytes @ 0xD
  6360  00006D                     	ds	1
  6361  00006E                     ?_getVSCPFrame:
  6362                           	opt stack 0
  6363  00006E                     setFilter@eidh:
  6364                           	opt stack 0
  6365  00006E                     getVSCPFrame@pvscptype:
  6366                           	opt stack 0
  6367  00006E                     ECANSendMessage@msgFlags:
  6368                           	opt stack 0
  6369  00006E                     itoa@val:
  6370                           	opt stack 0
  6371  00006E                     receiveSendEventCANAL@data:
  6372                           	opt stack 0
  6373  00006E                     receiveSendMultiEventCANAL@data:
  6374                           	opt stack 0
  6375                           
  6376                           ; 8 bytes @ 0xE
  6377  00006E                     	ds	1
  6378  00006F                     ??_ECANSendMessage:
  6379  00006F                     setFilter@eidl:
  6380                           	opt stack 0
  6381  00006F                     getVSCPFrame@pNodeId:
  6382                           	opt stack 0
  6383                           
  6384                           ; 1 bytes @ 0xF
  6385  00006F                     	ds	1
  6386  000070                     ??_init_app_ram:
  6387  000070                     getVSCPFrame@pPriority:
  6388                           	opt stack 0
  6389  000070                     ___llmod@counter:
  6390                           	opt stack 0
  6391  000070                     itoa@base:
  6392                           	opt stack 0
  6393  000070                     ECANSendMessage@pb:
  6394                           	opt stack 0
  6395                           
  6396                           ; 18 bytes @ 0x10
  6397  000070                     	ds	1
  6398  000071                     ?_sprintf:
  6399                           	opt stack 0
  6400  000071                     ?_ultoa:
  6401                           	opt stack 0
  6402  000071                     getVSCPFrame@pSize:
  6403                           	opt stack 0
  6404  000071                     sprintf@sp:
  6405                           	opt stack 0
  6406  000071                     ultoa@buf:
  6407                           	opt stack 0
  6408                           
  6409                           ; 2 bytes @ 0x11
  6410  000071                     	ds	1
  6411  000072                     getVSCPFrame@pData:
  6412                           	opt stack 0
  6413                           
  6414                           ; 2 bytes @ 0x12
  6415  000072                     	ds	1
  6416  000073                     sprintf@f:
  6417                           	opt stack 0
  6418  000073                     ultoa@val:
  6419                           	opt stack 0
  6420                           
  6421                           ; 4 bytes @ 0x13
  6422  000073                     	ds	1
  6423  000074                     ??_getVSCPFrame:
  6424  000074                     printFirmwareVersion@wrkbuf:
  6425                           	opt stack 0
  6426                           
  6427                           ; 20 bytes @ 0x14
  6428  000074                     	ds	2
  6429  000076                     receiveSendEventCANAL@i:
  6430                           	opt stack 0
  6431  000076                     receiveSendMultiEventCANAL@msgcount:
  6432                           	opt stack 0
  6433                           
  6434                           ; 1 bytes @ 0x16
  6435  000076                     	ds	1
  6436  000077                     receiveSendMultiEventCANAL@i:
  6437                           	opt stack 0
  6438  000077                     ultoa@base:
  6439                           	opt stack 0
  6440  000077                     receiveSendEventCANAL@id:
  6441                           	opt stack 0
  6442                           
  6443                           ; 4 bytes @ 0x17
  6444  000077                     	ds	1
  6445  000078                     init_app_ram@i:
  6446                           	opt stack 0
  6447  000078                     getVSCPFrame@pvscpclass:
  6448                           	opt stack 0
  6449  000078                     receiveSendMultiEventCANAL@id:
  6450                           	opt stack 0
  6451                           
  6452                           ; 4 bytes @ 0x18
  6453  000078                     	ds	1
  6454  000079                     ??_sprintf:
  6455  000079                     getVSCPFrame@id:
  6456                           	opt stack 0
  6457  000079                     ultoa@v:
  6458                           	opt stack 0
  6459                           
  6460                           ; 4 bytes @ 0x19
  6461  000079                     	ds	2
  6462  00007B                     receiveSendEventCANAL@dlc:
  6463                           	opt stack 0
  6464                           
  6465                           ; 1 bytes @ 0x1B
  6466  00007B                     	ds	1
  6467  00007C                     receiveSendEventCANAL@crc:
  6468                           	opt stack 0
  6469  00007C                     receiveSendMultiEventCANAL@dlc:
  6470                           	opt stack 0
  6471  00007C                     sprintf@idx:
  6472                           	opt stack 0
  6473                           
  6474                           ; 1 bytes @ 0x1C
  6475  00007C                     	ds	1
  6476  00007D                     receiveSendMultiEventCANAL@crc:
  6477                           	opt stack 0
  6478  00007D                     ultoa@c:
  6479                           	opt stack 0
  6480  00007D                     _sprintf$2168:
  6481                           	opt stack 0
  6482                           
  6483                           ; 2 bytes @ 0x1D
  6484  00007D                     	ds	1
  6485  00007E                     ??_receiveSendEventSLCAN:
  6486  00007E                     receiveSendMultiEventCANAL@pos:
  6487                           	opt stack 0
  6488                           
  6489                           ; 1 bytes @ 0x1E
  6490  00007E                     	ds	1
  6491  00007F                     _sprintf$2169:
  6492                           	opt stack 0
  6493                           
  6494                           ; 2 bytes @ 0x1F
  6495  00007F                     	ds	2
  6496  000081                     _sprintf$2175:
  6497                           	opt stack 0
  6498  000081                     receiveSendEventSLCAN@id:
  6499                           	opt stack 0
  6500                           
  6501                           ; 4 bytes @ 0x21
  6502  000081                     	ds	1
  6503  000082                     ECANSendMessage@mode:
  6504                           	opt stack 0
  6505                           
  6506                           ; 1 bytes @ 0x22
  6507  000082                     	ds	1
  6508  000083                     ECANSendMessage@buffers:
  6509                           	opt stack 0
  6510  000083                     sprintf@ap:
  6511                           	opt stack 0
  6512                           
  6513                           ; 1 bytes @ 0x23
  6514  000083                     	ds	1
  6515  000084                     ECANSendMessage@j:
  6516                           	opt stack 0
  6517  000084                     sprintf@prec:
  6518                           	opt stack 0
  6519                           
  6520                           ; 2 bytes @ 0x24
  6521  000084                     	ds	1
  6522  000085                     receiveSendEventSLCAN@dlc:
  6523                           	opt stack 0
  6524  000085                     ECANSendMessage@tempBSEL0:
  6525                           	opt stack 0
  6526                           
  6527                           ; 1 bytes @ 0x25
  6528  000085                     	ds	1
  6529  000086                     receiveSendEventSLCAN@i:
  6530                           	opt stack 0
  6531  000086                     ECANSendMessage@tempPtr:
  6532                           	opt stack 0
  6533  000086                     sprintf@width:
  6534                           	opt stack 0
  6535                           
  6536                           ; 2 bytes @ 0x26
  6537  000086                     	ds	2
  6538  000088                     ECANSendMessage@temp:
  6539                           	opt stack 0
  6540  000088                     sprintf@_val:
  6541                           	opt stack 0
  6542                           
  6543                           ; 4 bytes @ 0x28
  6544  000088                     	ds	1
  6545  000089                     ECANSendMessage@i:
  6546                           	opt stack 0
  6547                           
  6548                           ; 1 bytes @ 0x29
  6549  000089                     	ds	1
  6550  00008A                     ECANSendMessage@ptr:
  6551                           	opt stack 0
  6552                           
  6553                           ; 2 bytes @ 0x2A
  6554  00008A                     	ds	2
  6555  00008C                     ?_sendCANFrame:
  6556                           	opt stack 0
  6557  00008C                     sprintf@c:
  6558                           	opt stack 0
  6559  00008C                     sendCANFrame@id:
  6560                           	opt stack 0
  6561                           
  6562                           ; 4 bytes @ 0x2C
  6563  00008C                     	ds	1
  6564  00008D                     sprintf@flag:
  6565                           	opt stack 0
  6566                           
  6567                           ; 2 bytes @ 0x2D
  6568  00008D                     	ds	2
  6569  00008F                     ??_receivePrintEventVerbose:
  6570  00008F                     _printStatistics$1510:
  6571                           	opt stack 0
  6572  00008F                     _printErrors$1535:
  6573                           	opt stack 0
  6574                           
  6575                           ; 2 bytes @ 0x2F
  6576  00008F                     	ds	1
  6577  000090                     sendCANFrame@dlc:
  6578                           	opt stack 0
  6579                           
  6580                           ; 1 bytes @ 0x30
  6581  000090                     	ds	1
  6582  000091                     _printStatistics$1516:
  6583                           	opt stack 0
  6584  000091                     _printErrors$1541:
  6585                           	opt stack 0
  6586  000091                     sendCANFrame@pdata:
  6587                           	opt stack 0
  6588                           
  6589                           ; 2 bytes @ 0x31
  6590  000091                     	ds	2
  6591  000093                     ??_doModeSLCAN:
  6592  000093                     ??_receiveVSCPModeCanalMsg:
  6593  000093                     ?_sendVSCPFrame:
  6594                           	opt stack 0
  6595  000093                     _printStatistics$1522:
  6596                           	opt stack 0
  6597  000093                     _printErrors$1547:
  6598                           	opt stack 0
  6599  000093                     sendVSCPFrame@vscpclass:
  6600                           	opt stack 0
  6601                           
  6602                           ; 2 bytes @ 0x33
  6603  000093                     	ds	1
  6604  000094                     _receivePrintEventVerbose$3590:
  6605                           	opt stack 0
  6606                           
  6607                           ; 4 bytes @ 0x34
  6608  000094                     	ds	1
  6609  000095                     sendVSCPFrame@vscptype:
  6610                           	opt stack 0
  6611  000095                     _printStatistics$1528:
  6612                           	opt stack 0
  6613  000095                     _printErrors$1553:
  6614                           	opt stack 0
  6615                           
  6616                           ; 2 bytes @ 0x35
  6617  000095                     	ds	1
  6618  000096                     sendVSCPFrame@nodeid:
  6619                           	opt stack 0
  6620                           
  6621                           ; 1 bytes @ 0x36
  6622  000096                     	ds	1
  6623  000097                     sendVSCPFrame@priority:
  6624                           	opt stack 0
  6625  000097                     _printErrors$1559:
  6626                           	opt stack 0
  6627                           
  6628                           ; 2 bytes @ 0x37
  6629  000097                     	ds	1
  6630  000098                     sendVSCPFrame@size:
  6631                           	opt stack 0
  6632  000098                     _receivePrintEventVerbose$1411:
  6633                           	opt stack 0
  6634                           
  6635                           ; 2 bytes @ 0x38
  6636  000098                     	ds	1
  6637  000099                     _printErrors$1568:
  6638                           	opt stack 0
  6639  000099                     sendVSCPFrame@pData:
  6640                           	opt stack 0
  6641                           
  6642                           ; 2 bytes @ 0x39
  6643  000099                     	ds	1
  6644  00009A                     _receivePrintEventVerbose$1417:
  6645                           	opt stack 0
  6646  00009A                     doModeSLCAN@id:
  6647                           	opt stack 0
  6648                           
  6649                           ; 4 bytes @ 0x3A
  6650  00009A                     	ds	1
  6651  00009B                     ??_sendVSCPFrame:
  6652                           
  6653                           ; 0 bytes @ 0x3B
  6654  00009B                     	ds	1
  6655  00009C                     _receivePrintEventVerbose$1422:
  6656                           	opt stack 0
  6657                           
  6658                           ; 2 bytes @ 0x3C
  6659  00009C                     	ds	2
  6660  00009E                     doModeSLCAN@dlc:
  6661                           	opt stack 0
  6662  00009E                     _receivePrintEventVerbose$1427:
  6663                           	opt stack 0
  6664                           
  6665                           ; 2 bytes @ 0x3E
  6666  00009E                     	ds	1
  6667  00009F                     doModeSLCAN@c:
  6668                           	opt stack 0
  6669                           
  6670                           ; 1 bytes @ 0x3F
  6671  00009F                     	ds	1
  6672  0000A0                     doModeSLCAN@rv:
  6673                           	opt stack 0
  6674  0000A0                     _receivePrintEventVerbose$1432:
  6675                           	opt stack 0
  6676                           
  6677                           ; 2 bytes @ 0x40
  6678  0000A0                     	ds	2
  6679  0000A2                     _receivePrintEventVerbose$1437:
  6680                           	opt stack 0
  6681                           
  6682                           ; 2 bytes @ 0x42
  6683  0000A2                     	ds	2
  6684  0000A4                     _receivePrintEventVerbose$1442:
  6685                           	opt stack 0
  6686                           
  6687                           ; 2 bytes @ 0x44
  6688  0000A4                     	ds	2
  6689  0000A6                     receivePrintEventVerbose@i:
  6690                           	opt stack 0
  6691                           
  6692                           ; 1 bytes @ 0x46
  6693  0000A6                     	ds	1
  6694  0000A7                     receiveVSCPModeCanalMsg@data:
  6695                           	opt stack 0
  6696                           
  6697                           ; 8 bytes @ 0x47
  6698  0000A7                     	ds	8
  6699  0000AF                     receiveVSCPModeCanalMsg@id:
  6700                           	opt stack 0
  6701  0000AF                     sendVSCPFrame@id:
  6702                           	opt stack 0
  6703                           
  6704                           ; 4 bytes @ 0x4F
  6705  0000AF                     	ds	4
  6706  0000B3                     ?_readRegisterExtended:
  6707                           	opt stack 0
  6708  0000B3                     ?_writeRegisterExtended:
  6709                           	opt stack 0
  6710  0000B3                     ?_readRegister:
  6711                           	opt stack 0
  6712  0000B3                     receiveVSCPModeCanalMsg@dlc:
  6713                           	opt stack 0
  6714  0000B3                     readRegister@reg:
  6715                           	opt stack 0
  6716  0000B3                     readRegisterExtended@page:
  6717                           	opt stack 0
  6718  0000B3                     writeRegisterExtended@page:
  6719                           	opt stack 0
  6720                           
  6721                           ; 2 bytes @ 0x53
  6722  0000B3                     	ds	1
  6723  0000B4                     doModeVscp@c:
  6724                           	opt stack 0
  6725  0000B4                     readRegister@timeout:
  6726                           	opt stack 0
  6727                           
  6728                           ; 2 bytes @ 0x54
  6729  0000B4                     	ds	1
  6730  0000B5                     readRegisterExtended@reg:
  6731                           	opt stack 0
  6732  0000B5                     writeRegisterExtended@reg:
  6733                           	opt stack 0
  6734                           
  6735                           ; 1 bytes @ 0x55
  6736  0000B5                     	ds	1
  6737  0000B6                     readRegister@value:
  6738                           	opt stack 0
  6739  0000B6                     readRegisterExtended@timeout:
  6740                           	opt stack 0
  6741  0000B6                     writeRegisterExtended@timeout:
  6742                           	opt stack 0
  6743                           
  6744                           ; 2 bytes @ 0x56
  6745  0000B6                     	ds	1
  6746  0000B7                     ??_readRegister:
  6747                           
  6748                           ; 0 bytes @ 0x57
  6749  0000B7                     	ds	1
  6750  0000B8                     readRegisterExtended@value:
  6751                           	opt stack 0
  6752  0000B8                     writeRegisterExtended@value:
  6753                           	opt stack 0
  6754                           
  6755                           ; 2 bytes @ 0x58
  6756  0000B8                     	ds	2
  6757  0000BA                     ??_readRegisterExtended:
  6758  0000BA                     ??_writeRegisterExtended:
  6759                           
  6760                           ; 0 bytes @ 0x5A
  6761  0000BA                     	ds	1
  6762  0000BB                     readRegister@nodeid:
  6763                           	opt stack 0
  6764                           
  6765                           ; 1 bytes @ 0x5B
  6766  0000BB                     	ds	1
  6767  0000BC                     printGUID@nodeid:
  6768                           	opt stack 0
  6769  0000BC                     printMDF@nodeid:
  6770                           	opt stack 0
  6771  0000BC                     printNodeFirmwareVersion@nodeid:
  6772                           	opt stack 0
  6773                           
  6774                           ; 1 bytes @ 0x5C
  6775  0000BC                     	ds	1
  6776  0000BD                     printMDF@value:
  6777                           	opt stack 0
  6778  0000BD                     printGUID@buf:
  6779                           	opt stack 0
  6780  0000BD                     printNodeFirmwareVersion@buf:
  6781                           	opt stack 0
  6782                           
  6783                           ; 3 bytes @ 0x5D
  6784  0000BD                     	ds	1
  6785  0000BE                     readRegisterExtended@nodeid:
  6786                           	opt stack 0
  6787  0000BE                     writeRegisterExtended@nodeid:
  6788                           	opt stack 0
  6789  0000BE                     printMDF@p:
  6790                           	opt stack 0
  6791                           
  6792                           ; 2 bytes @ 0x5E
  6793  0000BE                     	ds	2
  6794  0000C0                     printGUID@value:
  6795                           	opt stack 0
  6796  0000C0                     printMDF@i:
  6797                           	opt stack 0
  6798  0000C0                     printNodeFirmwareVersion@value:
  6799                           	opt stack 0
  6800                           
  6801                           ; 1 bytes @ 0x60
  6802  0000C0                     	ds	1
  6803  0000C1                     printGUID@i:
  6804                           	opt stack 0
  6805  0000C1                     printNodeFirmwareVersion@i:
  6806                           	opt stack 0
  6807                           
  6808                           ; 1 bytes @ 0x61
  6809  0000C1                     	ds	1
  6810  0000C2                     _findNodes$1615:
  6811                           	opt stack 0
  6812                           
  6813                           ; 2 bytes @ 0x62
  6814  0000C2                     	ds	2
  6815  0000C4                     findNodes@nFound:
  6816                           	opt stack 0
  6817                           
  6818                           ; 1 bytes @ 0x64
  6819  0000C4                     	ds	1
  6820  0000C5                     findNodes@value:
  6821                           	opt stack 0
  6822                           
  6823                           ; 1 bytes @ 0x65
  6824  0000C5                     	ds	1
  6825  0000C6                     findNodes@bDot:
  6826                           	opt stack 0
  6827                           
  6828                           ; 1 bytes @ 0x66
  6829  0000C6                     	ds	1
  6830  0000C7                     findNodes@i:
  6831                           	opt stack 0
  6832                           
  6833                           ; 1 bytes @ 0x67
  6834  0000C7                     	ds	1
  6835  0000C8                     ??_doModeVerbose:
  6836                           
  6837                           ; 0 bytes @ 0x68
  6838  0000C8                     	ds	20
  6839  0000DC                     ??_main:
  6840                           
  6841                           ; 0 bytes @ 0x7C
  6842  0000DC                     	ds	1
  6843  0000DD                     main@c:
  6844                           	opt stack 0
  6845                           
  6846                           ; 1 bytes @ 0x7D
  6847  0000DD                     	ds	1
  6848                           tblptru	equ	0xFF8
  6849                           tblptrh	equ	0xFF7
  6850                           tblptrl	equ	0xFF6
  6851                           tablat	equ	0xFF5
  6852                           prodh	equ	0xFF4
  6853                           prodl	equ	0xFF3
  6854                           intcon	equ	0xFF2
  6855                           indf0	equ	0xFEF
  6856                           postinc0	equ	0xFEE
  6857                           fsr0h	equ	0xFEA
  6858                           fsr0l	equ	0xFE9
  6859                           wreg	equ	0xFE8
  6860                           indf1	equ	0xFE7
  6861                           postinc1	equ	0xFE6
  6862                           postdec1	equ	0xFE5
  6863                           fsr1h	equ	0xFE2
  6864                           fsr1l	equ	0xFE1
  6865                           indf2	equ	0xFDF
  6866                           postinc2	equ	0xFDE
  6867                           postdec2	equ	0xFDD
  6868                           plusw2	equ	0xFDB
  6869                           fsr2h	equ	0xFDA
  6870                           fsr2l	equ	0xFD9
  6871                           status	equ	0xFD8
  6872                           
  6873                           	psect	cstackCOMRAM
  6874  000001                     __pcstackCOMRAM:
  6875                           	opt stack 0
  6876  000001                     ?__RegsToCANID:
  6877                           	opt stack 0
  6878  000001                     ?i1_WriteTimer0:
  6879                           	opt stack 0
  6880  000001                     ?_fifo_write:
  6881                           	opt stack 0
  6882  000001                     ?_fifo_getFree:
  6883                           	opt stack 0
  6884  000001                     ?__ECANPointBuffer:
  6885                           	opt stack 0
  6886  000001                     ReadUSART@data:
  6887                           	opt stack 0
  6888  000001                     __RegsToCANID@ptr:
  6889                           	opt stack 0
  6890  000001                     fifo_write@f:
  6891                           	opt stack 0
  6892  000001                     fifo_getFree@f:
  6893                           	opt stack 0
  6894  000001                     i1WriteTimer0@timer0:
  6895                           	opt stack 0
  6896                           
  6897                           ; 2 bytes @ 0x0
  6898  000001                     	ds	2
  6899  000003                     ??_fifo_getFree:
  6900  000003                     __RegsToCANID@val:
  6901                           	opt stack 0
  6902  000003                     fifo_write@buf:
  6903                           	opt stack 0
  6904  000003                     i1WriteTimer0@timer:
  6905                           	opt stack 0
  6906                           
  6907                           ; 2 bytes @ 0x2
  6908  000003                     	ds	1
  6909  000004                     __RegsToCANID@type:
  6910                           	opt stack 0
  6911  000004                     __ECANPointBuffer@b:
  6912                           	opt stack 0
  6913                           
  6914                           ; 1 bytes @ 0x3
  6915  000004                     	ds	1
  6916  000005                     ??__RegsToCANID:
  6917  000005                     __ECANPointBuffer@pt:
  6918                           	opt stack 0
  6919  000005                     fifo_write@nbytes:
  6920                           	opt stack 0
  6921                           
  6922                           ; 4 bytes @ 0x4
  6923  000005                     	ds	2
  6924  000007                     __RegsToCANID@Value:
  6925                           	opt stack 0
  6926                           
  6927                           ; 1 bytes @ 0x6
  6928  000007                     	ds	1
  6929  000008                     ?_ECANReceiveMessage:
  6930                           	opt stack 0
  6931  000008                     ECANReceiveMessage@data:
  6932                           	opt stack 0
  6933                           
  6934                           ; 2 bytes @ 0x7
  6935  000008                     	ds	1
  6936  000009                     ??_fifo_write:
  6937                           
  6938                           ; 0 bytes @ 0x8
  6939  000009                     	ds	1
  6940  00000A                     ECANReceiveMessage@dataLen:
  6941                           	opt stack 0
  6942                           
  6943                           ; 1 bytes @ 0x9
  6944  00000A                     	ds	1
  6945  00000B                     ECANReceiveMessage@msgFlags:
  6946                           	opt stack 0
  6947                           
  6948                           ; 1 bytes @ 0xA
  6949  00000B                     	ds	1
  6950  00000C                     ECANReceiveMessage@savedPtr:
  6951                           	opt stack 0
  6952                           
  6953                           ; 2 bytes @ 0xB
  6954  00000C                     	ds	1
  6955  00000D                     fifo_write@p:
  6956                           	opt stack 0
  6957                           
  6958                           ; 2 bytes @ 0xC
  6959  00000D                     	ds	1
  6960  00000E                     ECANReceiveMessage@id:
  6961                           	opt stack 0
  6962                           
  6963                           ; 1 bytes @ 0xD
  6964  00000E                     	ds	1
  6965  00000F                     ECANReceiveMessage@i:
  6966                           	opt stack 0
  6967  00000F                     fifo_write@i:
  6968                           	opt stack 0
  6969                           
  6970                           ; 4 bytes @ 0xE
  6971  00000F                     	ds	1
  6972  000010                     ECANReceiveMessage@mode:
  6973                           	opt stack 0
  6974                           
  6975                           ; 1 bytes @ 0xF
  6976  000010                     	ds	1
  6977  000011                     ECANReceiveMessage@temp:
  6978                           	opt stack 0
  6979                           
  6980                           ; 1 bytes @ 0x10
  6981  000011                     	ds	1
  6982  000012                     ECANReceiveMessage@ptr:
  6983                           	opt stack 0
  6984                           
  6985                           ; 2 bytes @ 0x11
  6986  000012                     	ds	2
  6987  000014                     ??_Interrupt:
  6988                           
  6989                           ; 0 bytes @ 0x13
  6990  000014                     	ds	9
  6991  00001D                     Interrupt@c:
  6992                           	opt stack 0
  6993                           
  6994                           ; 1 bytes @ 0x1C
  6995  00001D                     	ds	1
  6996  00001E                     Interrupt@fail:
  6997                           	opt stack 0
  6998                           
  6999                           ; 1 bytes @ 0x1D
  7000  00001E                     	ds	1
  7001  00001F                     ?_WriteTimer0:
  7002                           	opt stack 0
  7003  00001F                     ??_fifo_read:
  7004  00001F                     ?_OpenUSART:
  7005                           	opt stack 0
  7006  00001F                     ?_WriteTimer3:
  7007                           	opt stack 0
  7008  00001F                     ?_Write_b_eep:
  7009                           	opt stack 0
  7010  00001F                     ?_crc8:
  7011                           	opt stack 0
  7012  00001F                     ??_isdigit:
  7013  00001F                     ?_Read_b_eep:
  7014                           	opt stack 0
  7015  00001F                     ?_strcpy:
  7016                           	opt stack 0
  7017  00001F                     ?_strchr:
  7018                           	opt stack 0
  7019  00001F                     ?_strlen:
  7020                           	opt stack 0
  7021  00001F                     ?_ReadTimer3:
  7022                           	opt stack 0
  7023  00001F                     ?_strcat:
  7024                           	opt stack 0
  7025  00001F                     ?___lwdiv:
  7026                           	opt stack 0
  7027  00001F                     ?___lwmod:
  7028                           	opt stack 0
  7029  00001F                     ECANSetOperationMode@mode:
  7030                           	opt stack 0
  7031  00001F                     nibbleFromChar@c:
  7032                           	opt stack 0
  7033  00001F                     OpenTimer0@config:
  7034                           	opt stack 0
  7035  00001F                     OpenTimer3@config:
  7036                           	opt stack 0
  7037  00001F                     WriteUSART@data:
  7038                           	opt stack 0
  7039  00001F                     toupper@c:
  7040                           	opt stack 0
  7041  00001F                     crc8@crc:
  7042                           	opt stack 0
  7043  00001F                     Read_b_eep@badd:
  7044                           	opt stack 0
  7045  00001F                     Write_b_eep@badd:
  7046                           	opt stack 0
  7047  00001F                     WriteTimer0@timer0:
  7048                           	opt stack 0
  7049  00001F                     WriteTimer3@timer3:
  7050                           	opt stack 0
  7051  00001F                     OpenUSART@spbrg:
  7052                           	opt stack 0
  7053  00001F                     ___lwdiv@dividend:
  7054                           	opt stack 0
  7055  00001F                     ___lwmod@dividend:
  7056                           	opt stack 0
  7057  00001F                     memcpy@d:
  7058                           	opt stack 0
  7059  00001F                     memset@p:
  7060                           	opt stack 0
  7061  00001F                     strcat@to:
  7062                           	opt stack 0
  7063  00001F                     strchr@ptr:
  7064                           	opt stack 0
  7065  00001F                     strcpy@to:
  7066                           	opt stack 0
  7067  00001F                     strlen@s:
  7068                           	opt stack 0
  7069  00001F                     ___lldiv@quotient:
  7070                           	opt stack 0
  7071                           
  7072                           ; 4 bytes @ 0x1E
  7073  00001F                     	ds	1
  7074  000020                     ?_putsUSART:
  7075                           	opt stack 0
  7076  000020                     ??_printBinary:
  7077  000020                     ?_strichr:
  7078                           	opt stack 0
  7079  000020                     _isdigit$3189:
  7080                           	opt stack 0
  7081  000020                     putsUSART@data:
  7082                           	opt stack 0
  7083  000020                     strichr@ptr:
  7084                           	opt stack 0
  7085                           
  7086                           ; 2 bytes @ 0x1F
  7087  000020                     	ds	1
  7088  000021                     ??__CANIDToRegs:
  7089  000021                     crc8@m:
  7090                           	opt stack 0
  7091  000021                     Write_b_eep@bdat:
  7092                           	opt stack 0
  7093  000021                     OpenUSART@config:
  7094                           	opt stack 0
  7095  000021                     isdigit@c:
  7096                           	opt stack 0
  7097  000021                     WriteTimer0@timer:
  7098                           	opt stack 0
  7099  000021                     ReadTimer3@timer:
  7100                           	opt stack 0
  7101  000021                     WriteTimer3@timer:
  7102                           	opt stack 0
  7103  000021                     ___lwdiv@divisor:
  7104                           	opt stack 0
  7105  000021                     ___lwmod@divisor:
  7106                           	opt stack 0
  7107  000021                     memcpy@s:
  7108                           	opt stack 0
  7109  000021                     strcat@from:
  7110                           	opt stack 0
  7111  000021                     strchr@chr:
  7112                           	opt stack 0
  7113  000021                     strcpy@from:
  7114                           	opt stack 0
  7115  000021                     strlen@cp:
  7116                           	opt stack 0
  7117                           
  7118                           ; 2 bytes @ 0x20
  7119  000021                     	ds	1
  7120  000022                     ??_putsUSART:
  7121  000022                     ??_crc8:
  7122  000022                     Write_b_eep@GIE_BIT_VAL:
  7123                           	opt stack 0
  7124  000022                     strichr@chr:
  7125                           	opt stack 0
  7126                           
  7127                           ; 2 bytes @ 0x21
  7128  000022                     	ds	1
  7129  000023                     init_app_eeprom@i:
  7130                           	opt stack 0
  7131  000023                     getCANFrame@pid:
  7132                           	opt stack 0
  7133  000023                     __CANIDToRegs@Value:
  7134                           	opt stack 0
  7135  000023                     ___lldiv@counter:
  7136                           	opt stack 0
  7137  000023                     ___lwmod@counter:
  7138                           	opt stack 0
  7139  000023                     strnicmp@r:
  7140                           	opt stack 0
  7141                           
  7142                           ; 1 bytes @ 0x22
  7143  000023                     	ds	1
  7144  000024                     tblptru	equ	0xFF8
  7145                           tblptrh	equ	0xFF7
  7146                           tblptrl	equ	0xFF6
  7147                           tablat	equ	0xFF5
  7148                           prodh	equ	0xFF4
  7149                           prodl	equ	0xFF3
  7150                           intcon	equ	0xFF2
  7151                           indf0	equ	0xFEF
  7152                           postinc0	equ	0xFEE
  7153                           fsr0h	equ	0xFEA
  7154                           fsr0l	equ	0xFE9
  7155                           wreg	equ	0xFE8
  7156                           indf1	equ	0xFE7
  7157                           postinc1	equ	0xFE6
  7158                           postdec1	equ	0xFE5
  7159                           fsr1h	equ	0xFE2
  7160                           fsr1l	equ	0xFE1
  7161                           indf2	equ	0xFDF
  7162                           postinc2	equ	0xFDE
  7163                           postdec2	equ	0xFDD
  7164                           plusw2	equ	0xFDB
  7165                           fsr2h	equ	0xFDA
  7166                           fsr2l	equ	0xFD9
  7167                           status	equ	0xFD8
  7168                           
  7169                           ; 0 bytes @ 0x23
  7170 ;;
  7171 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7172 ;;
  7173 ;; *************** function _main *****************
  7174 ;; Defined at:
  7175 ;;		line 296 in file "main.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;  argc            2    0[BANK1 ] int 
  7178 ;;  argv            3    2[BANK1 ] PTR PTR unsigned char 
  7179 ;; Auto vars:     Size  Location     Type
  7180 ;;  c               1  125[BANK0 ] unsigned char 
  7181 ;; Return value:  Size  Location     Type
  7182 ;;                  2    0[BANK1 ] int 
  7183 ;; Registers used:
  7184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7185 ;; Tracked objects:
  7186 ;;		On entry : 0/0
  7187 ;;		On exit  : F/1
  7188 ;;		Unchanged: 0/0
  7189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7190 ;;      Params:         0       0       5       0       0       0       0
  7191 ;;      Locals:         0       1       0       0       0       0       0
  7192 ;;      Temps:          0       1       0       0       0       0       0
  7193 ;;      Totals:         0       2       5       0       0       0       0
  7194 ;;Total ram usage:        7 bytes
  7195 ;; Hardware stack levels required when called:   11
  7196 ;; This function calls:
  7197 ;;		_fifo_init
  7198 ;;		_init_crc8
  7199 ;;		_Read_b_eep
  7200 ;;		_vscp_restoreDefaults
  7201 ;;		_init
  7202 ;;		_putsUSART
  7203 ;;		_printFirmwareVersion
  7204 ;;		_printMode
  7205 ;;		_fifo_read
  7206 ;;		_ECANSetOperationMode
  7207 ;;		_checkCANBusState
  7208 ;;		_doModeVerbose
  7209 ;;		_doModeVscp
  7210 ;;		_doModeSLCAN
  7211 ;;		_doModeVscpNode
  7212 ;; This function is called by:
  7213 ;;		Startup code after reset
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           	psect	text0
  7218  003888                     __ptext0:
  7219                           	opt stack 0
  7220  003888                     _main:
  7221                           	opt stack 19
  7222                           
  7223                           ;main.c: 298: caps.maxVscpFrames = 1;
  7224                           
  7225                           ; BSR set to: 1
  7226                           ;incstack = 0
  7227                           ;incstack = 0
  7228  003888  0E01               	movlw	1
  7229  00388A  0101               	movlb	1	; () banked
  7230  00388C  6FF7               	movwf	_caps& (0+255),b
  7231                           
  7232                           ;main.c: 299: caps.maxCanalFrames = 1;
  7233  00388E  6FF8               	movwf	(_caps+1)& (0+255),b
  7234                           
  7235                           ; BSR set to: 1
  7236                           ;main.c: 304: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  7237  003890  0E01               	movlw	high _serialInputFifo
  7238  003892  0100               	movlb	0	; () banked
  7239  003894  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  7240  003896  0EE2               	movlw	low _serialInputFifo
  7241  003898  6F60               	movwf	?_fifo_init& (0+255),b
  7242  00389A  0E02               	movlw	high _serial_inputBuffer
  7243  00389C  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  7244  00389E  0E00               	movlw	low _serial_inputBuffer
  7245  0038A0  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  7246  0038A2  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  7247  0038A4  0E80               	movlw	128
  7248  0038A6  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  7249  0038A8  ECA3  F008         	call	_fifo_init	;wreg free
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;main.c: 305: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  7253  0038AC  0E01               	movlw	high _canInputFifo
  7254  0038AE  0100               	movlb	0	; () banked
  7255  0038B0  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  7256  0038B2  0ED2               	movlw	low _canInputFifo
  7257  0038B4  6F60               	movwf	?_fifo_init& (0+255),b
  7258  0038B6  0E04               	movlw	high _can_inputBuffer
  7259  0038B8  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  7260  0038BA  0E00               	movlw	low _can_inputBuffer
  7261  0038BC  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  7262  0038BE  0E01               	movlw	1
  7263  0038C0  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  7264  0038C2  0EEE               	movlw	238
  7265  0038C4  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  7266  0038C6  ECA3  F008         	call	_fifo_init	;wreg free
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;main.c: 308: init_crc8();
  7270  0038CA  EC16  F00B         	call	_init_crc8	;wreg free
  7271                           
  7272                           ; BSR set to: 1
  7273                           ;main.c: 312: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  7274                           ;main.c: 313: ( 0xaa != Read_b_eep(0x02) ) ) {
  7275  0038CE  6A20               	clrf	?_Read_b_eep+1,c
  7276  0038D0  0E01               	movlw	1
  7277  0038D2  6E1F               	movwf	?_Read_b_eep,c
  7278  0038D4  ECCC  F006         	call	_Read_b_eep	;wreg free
  7279  0038D8  0A55               	xorlw	85
  7280  0038DA  E107               	bnz	l14472
  7281  0038DC  6A20               	clrf	?_Read_b_eep+1,c
  7282  0038DE  0E02               	movlw	2
  7283  0038E0  6E1F               	movwf	?_Read_b_eep,c
  7284  0038E2  ECCC  F006         	call	_Read_b_eep	;wreg free
  7285  0038E6  0AAA               	xorlw	170
  7286  0038E8  A4D8               	btfss	status,2,c
  7287  0038EA                     l14472:
  7288                           
  7289                           ;main.c: 314: vscp_restoreDefaults();
  7290  0038EA  ECB6  F006         	call	_vscp_restoreDefaults	;wreg free
  7291                           
  7292                           ;main.c: 315: }
  7293                           ;main.c: 318: init();
  7294  0038EE  ECC9  F009         	call	_init	;wreg free
  7295                           
  7296                           ;main.c: 322: _delay((unsigned long)((10)*(40000000/4000.0)));
  7297  0038F2  0E82               	movlw	130
  7298  0038F4  0100               	movlb	0	; () banked
  7299  0038F6  6FDC               	movwf	??_main& (0+255),b
  7300  0038F8  0EDD               	movlw	221
  7301  0038FA                     u23467:
  7302  0038FA  2EE8               	decfsz	wreg,f,c
  7303  0038FC  D7FE               	goto	u23467
  7304  0038FE  2FDC               	decfsz	??_main& (0+255),f,b
  7305  003900  D7FC               	goto	u23467
  7306  003902  D000               	nop2	
  7307                           
  7308                           ;main.c: 326: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  7309  003904  0E75               	movlw	high STR_1
  7310  003906  6E21               	movwf	?_putsUSART+1,c
  7311  003908  0E7B               	movlw	low STR_1
  7312  00390A  6E20               	movwf	?_putsUSART,c
  7313  00390C  EC74  F009         	call	_putsUSART	;wreg free
  7314                           
  7315                           ;main.c: 327: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  7316  003910  0E6E               	movlw	high STR_2
  7317  003912  6E21               	movwf	?_putsUSART+1,c
  7318  003914  0E6C               	movlw	low STR_2
  7319  003916  6E20               	movwf	?_putsUSART,c
  7320  003918  EC74  F009         	call	_putsUSART	;wreg free
  7321                           
  7322                           ;main.c: 328: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  7323  00391C  0E76               	movlw	high STR_3
  7324  00391E  6E21               	movwf	?_putsUSART+1,c
  7325  003920  0E0D               	movlw	low STR_3
  7326  003922  6E20               	movwf	?_putsUSART,c
  7327  003924  EC74  F009         	call	_putsUSART	;wreg free
  7328                           
  7329                           ;main.c: 329: printFirmwareVersion();
  7330  003928  ECBE  F00C         	call	_printFirmwareVersion	;wreg free
  7331                           
  7332                           ;main.c: 330: printMode();
  7333  00392C  EC4E  F00B         	call	_printMode	;wreg free
  7334                           
  7335                           ;main.c: 334: if ( 0 != mode ) {
  7336  003930  0101               	movlb	1	; () banked
  7337  003932  5131               	movf	_mode& (0+255),w,b
  7338  003934  E039               	bz	l14506
  7339                           
  7340                           ; BSR set to: 1
  7341                           ;main.c: 336: uint8_t c;
  7342                           ;main.c: 338: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  7343  003936  0E6F               	movlw	high STR_4
  7344  003938  6E21               	movwf	?_putsUSART+1,c
  7345  00393A  0E85               	movlw	low STR_4
  7346  00393C  6E20               	movwf	?_putsUSART,c
  7347  00393E  EC74  F009         	call	_putsUSART	;wreg free
  7348                           
  7349                           ;main.c: 340: timekeeper = 0;
  7350  003942  0101               	movlb	1	; () banked
  7351  003944  6B18               	clrf	_timekeeper& (0+255),b	;volatile
  7352  003946  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  7353  003948  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  7354  00394A  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  7355                           
  7356                           ; BSR set to: 1
  7357                           ;main.c: 341: ledFunctionality = 6;
  7358  00394C  0E06               	movlw	6
  7359  00394E  6E30               	movwf	_ledFunctionality,c	;volatile
  7360                           
  7361                           ;main.c: 342: while (timekeeper < 3000) {
  7362  003950  D021               	goto	l14504
  7363  003952                     l458:
  7364                           
  7365                           ; BSR set to: 1
  7366  003952  0004               	clrwdt		;# 
  7367                           
  7368                           ;main.c: 344: (INTCONbits.GIE = 0);
  7369  003954  9EF2               	bcf	intcon,7,c	;volatile
  7370                           
  7371                           ;main.c: 345: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  7372  003956  0E01               	movlw	high _serialInputFifo
  7373  003958  0100               	movlb	0	; () banked
  7374  00395A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  7375  00395C  0EE2               	movlw	low _serialInputFifo
  7376  00395E  6F60               	movwf	?_fifo_read& (0+255),b
  7377  003960  0E00               	movlw	high main@c
  7378  003962  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  7379  003964  0EDD               	movlw	low main@c
  7380  003966  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  7381  003968  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  7382  00396A  0E01               	movlw	1
  7383  00396C  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  7384  00396E  ECCC  F011         	call	_fifo_read	;wreg free
  7385  003972  0560               	decf	?_fifo_read& (0+255),w,b
  7386  003974  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  7387  003976  E10D               	bnz	l459
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;main.c: 346: (INTCONbits.GIE = 1);
  7391  003978  8EF2               	bsf	intcon,7,c	;volatile
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;main.c: 347: if ('v' == c) {
  7395  00397A  51DD               	movf	main@c& (0+255),w,b
  7396  00397C  0A76               	xorlw	118
  7397  00397E  E109               	bnz	l459
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;main.c: 348: mode = 0;
  7401  003980  0101               	movlb	1	; () banked
  7402  003982  6B31               	clrf	_mode& (0+255),b
  7403                           
  7404                           ; BSR set to: 1
  7405                           ;main.c: 349: putsUSART((char *) "Temporary verbose mode set\r\n");
  7406  003984  0E77               	movlw	high STR_5
  7407  003986  6E21               	movwf	?_putsUSART+1,c
  7408  003988  0E34               	movlw	low STR_5
  7409  00398A  6E20               	movwf	?_putsUSART,c
  7410  00398C  EC74  F009         	call	_putsUSART	;wreg free
  7411                           
  7412                           ;main.c: 350: break;
  7413  003990  D00B               	goto	l14506
  7414  003992                     l459:
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;main.c: 351: }
  7418                           ;main.c: 352: }
  7419                           ;main.c: 353: (INTCONbits.GIE = 1);
  7420  003992  8EF2               	bsf	intcon,7,c	;volatile
  7421  003994                     l14504:
  7422  003994  0EB8               	movlw	184
  7423  003996  0101               	movlb	1	; () banked
  7424  003998  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
  7425  00399A  0E0B               	movlw	11
  7426  00399C  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  7427  00399E  0E00               	movlw	0
  7428  0039A0  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  7429  0039A2  0E00               	movlw	0
  7430  0039A4  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  7431  0039A6  E3D5               	bnc	l458
  7432  0039A8                     l14506:
  7433                           
  7434                           ;main.c: 354: }
  7435                           ;main.c: 355: }
  7436                           ;main.c: 357: ledFunctionality = 1;
  7437  0039A8  0E01               	movlw	1
  7438  0039AA  6E30               	movwf	_ledFunctionality,c	;volatile
  7439                           
  7440                           ;main.c: 362: switch ( Read_b_eep(0x07) ) {
  7441  0039AC  D019               	goto	l14522
  7442  0039AE                     l463:
  7443                           
  7444                           ;main.c: 365: bSilent = 0;
  7445  0039AE  6A2D               	clrf	_bSilent,c
  7446                           
  7447                           ;main.c: 366: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  7448  0039B0  0E00               	movlw	0
  7449  0039B2  ECFD  F006         	call	_ECANSetOperationMode
  7450                           
  7451                           ;main.c: 367: break;
  7452  0039B6  D022               	goto	l469
  7453  0039B8                     l14510:
  7454                           
  7455                           ;main.c: 370: bSilent = 1;
  7456  0039B8  0E01               	movlw	1
  7457  0039BA  6E2D               	movwf	_bSilent,c
  7458                           
  7459                           ;main.c: 371: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  7460  0039BC  0E00               	movlw	0
  7461  0039BE  ECFD  F006         	call	_ECANSetOperationMode
  7462                           
  7463                           ;main.c: 372: break;
  7464  0039C2  D01C               	goto	l469
  7465  0039C4                     l466:
  7466                           
  7467                           ;main.c: 375: bSilent = 0;
  7468  0039C4  6A2D               	clrf	_bSilent,c
  7469                           
  7470                           ;main.c: 376: ECANSetOperationMode( ECAN_OP_MODE_LISTEN );
  7471  0039C6  0E60               	movlw	96
  7472  0039C8  ECFD  F006         	call	_ECANSetOperationMode
  7473                           
  7474                           ;main.c: 377: break;
  7475  0039CC  D017               	goto	l469
  7476  0039CE                     l467:
  7477                           
  7478                           ;main.c: 380: bSilent = 0;
  7479  0039CE  6A2D               	clrf	_bSilent,c
  7480                           
  7481                           ;main.c: 381: ECANSetOperationMode( ECAN_OP_MODE_LOOP );
  7482  0039D0  0E40               	movlw	64
  7483  0039D2  ECFD  F006         	call	_ECANSetOperationMode
  7484                           
  7485                           ;main.c: 382: break;
  7486  0039D6  D012               	goto	l469
  7487  0039D8                     l14518:
  7488                           
  7489                           ;main.c: 385: ECANSetOperationMode( 0x20 );
  7490  0039D8  0E20               	movlw	32
  7491  0039DA  ECFD  F006         	call	_ECANSetOperationMode
  7492                           
  7493                           ;main.c: 386: break;
  7494  0039DE  D00E               	goto	l469
  7495  0039E0                     l14522:
  7496  0039E0  6A20               	clrf	?_Read_b_eep+1,c
  7497  0039E2  0E07               	movlw	7
  7498  0039E4  6E1F               	movwf	?_Read_b_eep,c
  7499  0039E6  ECCC  F006         	call	_Read_b_eep	;wreg free
  7500                           
  7501                           ; Switch size 1, requested type "space"
  7502                           ; Number of cases is 4, Range of values is 1 to 4
  7503                           ; switch strategies available:
  7504                           ; Name         Instructions Cycles
  7505                           ; simple_byte           13     7 (average)
  7506                           ;	Chosen strategy is simple_byte
  7507  0039EA  0A01               	xorlw	1	; case 1
  7508  0039EC  E0E0               	bz	l463
  7509  0039EE  0A03               	xorlw	3	; case 2
  7510  0039F0  E0E3               	bz	l14510
  7511  0039F2  0A01               	xorlw	1	; case 3
  7512  0039F4  E0E7               	bz	l466
  7513  0039F6  0A07               	xorlw	7	; case 4
  7514  0039F8  E0EA               	bz	l467
  7515  0039FA  D7EE               	goto	l14518
  7516  0039FC                     l469:
  7517  0039FC  0004               	clrwdt		;# 
  7518                           
  7519                           ;main.c: 398: checkCANBusState();
  7520  0039FE  EC27  F007         	call	_checkCANBusState	;wreg free
  7521                           
  7522                           ;main.c: 402: if ( RCSTAbits.OERR ) {
  7523  003A02  A2AB               	btfss	4011,1,c	;volatile
  7524  003A04  D002               	goto	l470
  7525                           
  7526                           ;main.c: 403: RCSTAbits.CREN = 0;
  7527  003A06  98AB               	bcf	4011,4,c	;volatile
  7528                           
  7529                           ;main.c: 404: RCSTAbits.CREN = 1;
  7530  003A08  88AB               	bsf	4011,4,c	;volatile
  7531  003A0A                     l470:
  7532                           
  7533                           ;main.c: 405: }
  7534                           ;main.c: 407: if (0 == mode) {
  7535  003A0A  0101               	movlb	1	; () banked
  7536  003A0C  6731               	tstfsz	_mode& (0+255),b
  7537  003A0E  D003               	goto	l14532
  7538                           
  7539                           ; BSR set to: 1
  7540                           ;main.c: 408: doModeVerbose();
  7541  003A10  ECA1  F029         	call	_doModeVerbose	;wreg free
  7542                           
  7543                           ;main.c: 409: }
  7544  003A14  D7F3               	goto	l469
  7545  003A16                     l14532:
  7546                           
  7547                           ; BSR set to: 1
  7548                           ;main.c: 410: else if (1 == mode) {
  7549  003A16  0531               	decf	_mode& (0+255),w,b
  7550  003A18  E103               	bnz	l14536
  7551  003A1A                     l14534:
  7552                           
  7553                           ; BSR set to: 1
  7554                           ;main.c: 411: doModeVscp();
  7555  003A1A  EC1C  F01D         	call	_doModeVscp	;wreg free
  7556                           
  7557                           ;main.c: 412: }
  7558  003A1E  D7EE               	goto	l469
  7559  003A20                     l14536:
  7560                           
  7561                           ; BSR set to: 1
  7562                           ;main.c: 413: else if (2 == mode) {
  7563  003A20  5131               	movf	_mode& (0+255),w,b
  7564  003A22  0A02               	xorlw	2
  7565  003A24  E103               	bnz	l14540
  7566                           
  7567                           ; BSR set to: 1
  7568                           ;main.c: 414: doModeSLCAN();
  7569  003A26  EC15  F024         	call	_doModeSLCAN	;wreg free
  7570                           
  7571                           ;main.c: 415: }
  7572  003A2A  D7E8               	goto	l469
  7573  003A2C                     l14540:
  7574                           
  7575                           ; BSR set to: 1
  7576                           ;main.c: 416: else if (3 == mode) {
  7577  003A2C  5131               	movf	_mode& (0+255),w,b
  7578  003A2E  0A03               	xorlw	3
  7579  003A30  E1F4               	bnz	l14534
  7580                           
  7581                           ; BSR set to: 1
  7582                           ;main.c: 417: doModeVscpNode();
  7583  003A32  ECB2  F006         	call	_doModeVscpNode	;wreg free
  7584                           
  7585                           ;main.c: 418: }
  7586  003A36  D7E2               	goto	l469
  7587  003A38                     __end_of_main:
  7588                           	opt stack 0
  7589                           tblptru	equ	0xFF8
  7590                           tblptrh	equ	0xFF7
  7591                           tblptrl	equ	0xFF6
  7592                           tablat	equ	0xFF5
  7593                           prodh	equ	0xFF4
  7594                           prodl	equ	0xFF3
  7595                           intcon	equ	0xFF2
  7596                           indf0	equ	0xFEF
  7597                           postinc0	equ	0xFEE
  7598                           fsr0h	equ	0xFEA
  7599                           fsr0l	equ	0xFE9
  7600                           wreg	equ	0xFE8
  7601                           indf1	equ	0xFE7
  7602                           postinc1	equ	0xFE6
  7603                           postdec1	equ	0xFE5
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           plusw2	equ	0xFDB
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _doModeVscpNode *****************
  7615 ;; Defined at:
  7616 ;;		line 1842 in file "main.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;		None
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		None
  7625 ;; Tracked objects:
  7626 ;;		On entry : F/1
  7627 ;;		On exit  : F/1
  7628 ;;		Unchanged: F/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7630 ;;      Params:         0       0       0       0       0       0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0
  7633 ;;      Totals:         0       0       0       0       0       0       0
  7634 ;;Total ram usage:        0 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    3
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_main
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text1
  7645  000D64                     __ptext1:
  7646                           	opt stack 0
  7647  000D64                     _doModeVscpNode:
  7648                           	opt stack 26
  7649                           
  7650                           ; BSR set to: 1
  7651                           
  7652                           ; BSR set to: 1
  7653                           ;incstack = 0
  7654                           ;incstack = 0
  7655  000D64  0012               	return	
  7656  000D66                     __end_of_doModeVscpNode:
  7657                           	opt stack 0
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           intcon	equ	0xFF2
  7665                           indf0	equ	0xFEF
  7666                           postinc0	equ	0xFEE
  7667                           fsr0h	equ	0xFEA
  7668                           fsr0l	equ	0xFE9
  7669                           wreg	equ	0xFE8
  7670                           indf1	equ	0xFE7
  7671                           postinc1	equ	0xFE6
  7672                           postdec1	equ	0xFE5
  7673                           fsr1h	equ	0xFE2
  7674                           fsr1l	equ	0xFE1
  7675                           indf2	equ	0xFDF
  7676                           postinc2	equ	0xFDE
  7677                           postdec2	equ	0xFDD
  7678                           plusw2	equ	0xFDB
  7679                           fsr2h	equ	0xFDA
  7680                           fsr2l	equ	0xFD9
  7681                           status	equ	0xFD8
  7682                           
  7683 ;; *************** function _doModeSLCAN *****************
  7684 ;; Defined at:
  7685 ;;		line 1624 in file "main.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;		None
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  id              4   58[BANK0 ] unsigned long 
  7690 ;;  dlc             1   62[BANK0 ] unsigned char 
  7691 ;;  rv              1   64[BANK0 ] enum E15660
  7692 ;;  c               1   63[BANK0 ] unsigned char 
  7693 ;; Return value:  Size  Location     Type
  7694 ;;		None               void
  7695 ;; Registers used:
  7696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : F/1
  7699 ;;		On exit  : F/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7702 ;;      Params:         0       0       0       0       0       0       0
  7703 ;;      Locals:         0       7       0       0       0       0       0
  7704 ;;      Temps:          0       7       0       0       0       0       0
  7705 ;;      Totals:         0      14       0       0       0       0       0
  7706 ;;Total ram usage:       14 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    7
  7709 ;; This function calls:
  7710 ;;		_putsUSART
  7711 ;;		_fifo_read
  7712 ;;		_ECANSetOperationMode
  7713 ;;		_Busy_eep
  7714 ;;		_Write_b_eep
  7715 ;;		_memset
  7716 ;;		_receiveSendEventSLCAN
  7717 ;;		_strlen
  7718 ;;		_hexStringToBytes
  7719 ;;		_memcpy
  7720 ;;		_sendCANFrame
  7721 ;; This function is called by:
  7722 ;;		_main
  7723 ;; This function uses a non-reentrant model
  7724 ;;
  7725                           
  7726                           	psect	text2
  7727  00482A                     __ptext2:
  7728                           	opt stack 0
  7729  00482A                     _doModeSLCAN:
  7730                           	opt stack 22
  7731                           
  7732                           ; BSR set to: 1
  7733                           ;main.c: 1625: uint8_t c;
  7734                           ;main.c: 1626: BOOL rv = 0;
  7735                           
  7736                           ; BSR set to: 1
  7737                           ;incstack = 0
  7738                           ;incstack = 0
  7739  00482A  0100               	movlb	0	; () banked
  7740  00482C  6BA0               	clrf	doModeSLCAN@rv& (0+255),b
  7741                           
  7742                           ; BSR set to: 0
  7743                           ;main.c: 1629: receiveSendEventSLCAN();
  7744  00482E  EC7B  F01B         	call	_receiveSendEventSLCAN	;wreg free
  7745                           
  7746                           ;main.c: 1632: (INTCONbits.GIE = 0);
  7747  004832  9EF2               	bcf	intcon,7,c	;volatile
  7748                           
  7749                           ;main.c: 1634: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  7750  004834  0E01               	movlw	high _serialInputFifo
  7751  004836  0100               	movlb	0	; () banked
  7752  004838  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  7753  00483A  0EE2               	movlw	low _serialInputFifo
  7754  00483C  6F60               	movwf	?_fifo_read& (0+255),b
  7755  00483E  0E00               	movlw	high doModeSLCAN@c
  7756  004840  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  7757  004842  0E9F               	movlw	low doModeSLCAN@c
  7758  004844  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  7759  004846  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  7760  004848  0E01               	movlw	1
  7761  00484A  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  7762  00484C  ECCC  F011         	call	_fifo_read	;wreg free
  7763  004850  0560               	decf	?_fifo_read& (0+255),w,b
  7764  004852  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  7765  004854  E001 D1C7          	bnz	l15912
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;main.c: 1637: (INTCONbits.GIE = 1);
  7769  004858  8EF2               	bsf	intcon,7,c	;volatile
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;main.c: 1639: if (0x0d != c) {
  7773  00485A  519F               	movf	doModeSLCAN@c& (0+255),w,b
  7774  00485C  0A0D               	xorlw	13
  7775  00485E  E101 D17A          	bz	l15900
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;main.c: 1640: cmdbuf[ pos ] = c;
  7779  004862  0E32               	movlw	low _cmdbuf
  7780  004864  2432               	addwf	_pos,w,c
  7781  004866  6ED9               	movwf	fsr2l,c
  7782  004868  6ADA               	clrf	fsr2h,c
  7783  00486A  0E01               	movlw	high _cmdbuf
  7784  00486C  22DA               	addwfc	fsr2h,f,c
  7785  00486E  0100               	movlb	0	; () banked
  7786  004870  C09F  FFDF         	movff	doModeSLCAN@c,indf2
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;main.c: 1641: pos++;
  7790  004874  2A32               	incf	_pos,f,c
  7791  004876  D1B8               	goto	l808
  7792  004878                     l15772:
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;main.c: 1649: if (1 == strlen(cmdbuf)) {
  7796  004878  0101               	movlb	1	; () banked
  7797  00487A  0E01               	movlw	high _cmdbuf
  7798  00487C  6E20               	movwf	?_strlen+1,c
  7799  00487E  0E32               	movlw	low _cmdbuf
  7800  004880  6E1F               	movwf	?_strlen,c
  7801  004882  EC28  F008         	call	_strlen	;wreg free
  7802  004886  041F               	decf	?_strlen,w,c
  7803  004888  1020               	iorwf	?_strlen+1,w,c
  7804  00488A  E001 D193          	bnz	l15902
  7805                           
  7806                           ;main.c: 1650: putsUSART((char *) "JFrankfurt RS-232\r\n");
  7807  00488E  0E79               	movlw	high STR_170
  7808  004890  6E21               	movwf	?_putsUSART+1,c
  7809  004892  0EF0               	movlw	low STR_170
  7810  004894  6E20               	movwf	?_putsUSART,c
  7811  004896  EC74  F009         	call	_putsUSART	;wreg free
  7812  00489A                     l15776:
  7813                           
  7814                           ;main.c: 1651: rv = 1;
  7815  00489A  0E01               	movlw	1
  7816  00489C  D113               	goto	L3
  7817  00489E                     l15778:
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;main.c: 1657: if (1 == strlen(cmdbuf)) {
  7821  00489E  0101               	movlb	1	; () banked
  7822  0048A0  0E01               	movlw	high _cmdbuf
  7823  0048A2  6E20               	movwf	?_strlen+1,c
  7824  0048A4  0E32               	movlw	low _cmdbuf
  7825  0048A6  6E1F               	movwf	?_strlen,c
  7826  0048A8  EC28  F008         	call	_strlen	;wreg free
  7827  0048AC  041F               	decf	?_strlen,w,c
  7828  0048AE  1020               	iorwf	?_strlen+1,w,c
  7829  0048B0  E001 D180          	bnz	l15902
  7830                           
  7831                           ;main.c: 1658: putsUSART((char *) "V1011\r\n");
  7832  0048B4  0E7B               	movlw	high STR_171
  7833  0048B6  6E21               	movwf	?_putsUSART+1,c
  7834  0048B8  0EC1               	movlw	low STR_171
  7835  0048BA  6E20               	movwf	?_putsUSART,c
  7836  0048BC  EC74  F009         	call	_putsUSART	;wreg free
  7837  0048C0  D7EC               	goto	l15776
  7838  0048C2                     l15784:
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;main.c: 1665: if (1 == strlen(cmdbuf)) {
  7842  0048C2  0101               	movlb	1	; () banked
  7843  0048C4  0E01               	movlw	high _cmdbuf
  7844  0048C6  6E20               	movwf	?_strlen+1,c
  7845  0048C8  0E32               	movlw	low _cmdbuf
  7846  0048CA  6E1F               	movwf	?_strlen,c
  7847  0048CC  EC28  F008         	call	_strlen	;wreg free
  7848  0048D0  041F               	decf	?_strlen,w,c
  7849  0048D2  1020               	iorwf	?_strlen+1,w,c
  7850  0048D4  E001 D16E          	bnz	l15902
  7851                           
  7852                           ;main.c: 1666: putsUSART((char *) "N1977\r\n");
  7853  0048D8  0E7B               	movlw	high STR_172
  7854  0048DA  6E21               	movwf	?_putsUSART+1,c
  7855  0048DC  0EC9               	movlw	low STR_172
  7856  0048DE  6E20               	movwf	?_putsUSART,c
  7857  0048E0  EC74  F009         	call	_putsUSART	;wreg free
  7858  0048E4  D7DA               	goto	l15776
  7859  0048E6                     l15790:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;main.c: 1675: bInitiated = 1;
  7863  0048E6  0E01               	movlw	1
  7864  0048E8  6E2A               	movwf	_bInitiated,c
  7865                           
  7866                           ;main.c: 1676: rv = 1;
  7867  0048EA  D0B8               	goto	L2
  7868  0048EC                     l818:
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;main.c: 1681: if (!bOpen) {
  7872  0048EC  662C               	tstfsz	_bOpen,c
  7873  0048EE  D003               	goto	l15794
  7874                           
  7875                           ; BSR set to: 0
  7876                           ;main.c: 1682: bInitiated = 1;
  7877  0048F0  0E01               	movlw	1
  7878  0048F2  6E2A               	movwf	_bInitiated,c
  7879                           
  7880                           ;main.c: 1683: rv = 1;
  7881  0048F4  6FA0               	movwf	doModeSLCAN@rv& (0+255),b
  7882  0048F6                     l15794:
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;main.c: 1688: if (1 == strlen(cmdbuf)) {
  7886  0048F6  0101               	movlb	1	; () banked
  7887  0048F8  0E01               	movlw	high _cmdbuf
  7888  0048FA  6E20               	movwf	?_strlen+1,c
  7889  0048FC  0E32               	movlw	low _cmdbuf
  7890  0048FE  6E1F               	movwf	?_strlen,c
  7891  004900  EC28  F008         	call	_strlen	;wreg free
  7892  004904  041F               	decf	?_strlen,w,c
  7893  004906  1020               	iorwf	?_strlen+1,w,c
  7894  004908  E001 D154          	bnz	l15902
  7895                           
  7896                           ;main.c: 1689: if (!bOpen && bInitiated) {
  7897  00490C  662C               	tstfsz	_bOpen,c
  7898  00490E  D152               	goto	l15902
  7899  004910  502A               	movf	_bInitiated,w,c
  7900  004912  E101 D14F          	bz	l15902
  7901                           
  7902                           ;main.c: 1690: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7903  004916  0E00               	movlw	0
  7904  004918  ECFD  F006         	call	_ECANSetOperationMode
  7905                           
  7906                           ;main.c: 1691: bOpen = 1;
  7907  00491C  0E01               	movlw	1
  7908  00491E  6E2C               	movwf	_bOpen,c
  7909  004920  D7BC               	goto	l15776
  7910  004922                     l15806:
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;main.c: 1699: if (1 == strlen(cmdbuf)) {
  7914  004922  0101               	movlb	1	; () banked
  7915  004924  0E01               	movlw	high _cmdbuf
  7916  004926  6E20               	movwf	?_strlen+1,c
  7917  004928  0E32               	movlw	low _cmdbuf
  7918  00492A  6E1F               	movwf	?_strlen,c
  7919  00492C  EC28  F008         	call	_strlen	;wreg free
  7920  004930  041F               	decf	?_strlen,w,c
  7921  004932  1020               	iorwf	?_strlen+1,w,c
  7922  004934  E001 D13E          	bnz	l15902
  7923                           
  7924                           ;main.c: 1700: if (bOpen) {
  7925  004938  502C               	movf	_bOpen,w,c
  7926  00493A  E0AF               	bz	l15776
  7927                           
  7928                           ;main.c: 1701: ECANSetOperationMode(0x20);
  7929  00493C  0E20               	movlw	32
  7930  00493E  ECFD  F006         	call	_ECANSetOperationMode
  7931                           
  7932                           ;main.c: 1702: bOpen = 0;
  7933  004942  6A2C               	clrf	_bOpen,c
  7934  004944  D7AA               	goto	l15776
  7935  004946                     l15816:
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;main.c: 1715: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7939  004946  502C               	movf	_bOpen,w,c
  7940  004948  E101 D134          	bz	l15902
  7941                           
  7942                           ; BSR set to: 0
  7943  00494C  0101               	movlb	1	; () banked
  7944  00494E  0E01               	movlw	high _cmdbuf
  7945  004950  6E20               	movwf	?_strlen+1,c
  7946  004952  0E32               	movlw	low _cmdbuf
  7947  004954  6E1F               	movwf	?_strlen,c
  7948  004956  EC28  F008         	call	_strlen	;wreg free
  7949  00495A  0E0A               	movlw	10
  7950  00495C  5C1F               	subwf	?_strlen,w,c
  7951  00495E  0E00               	movlw	0
  7952  004960  5820               	subwfb	?_strlen+1,w,c
  7953  004962  E201 D127          	bnc	l15902
  7954                           
  7955                           ;main.c: 1717: uint32_t id;
  7956                           ;main.c: 1718: uint8_t dlc;
  7957                           ;main.c: 1720: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7958  004966  0E01               	movlw	high _wrkbuf
  7959  004968  0100               	movlb	0	; () banked
  7960  00496A  6F61               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7961  00496C  0E82               	movlw	low _wrkbuf
  7962  00496E  6F60               	movwf	?_hexStringToBytes& (0+255),b
  7963  004970  0E50               	movlw	80
  7964  004972  6F62               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7965  004974  0E01               	movlw	high _cmdbuf
  7966  004976  6F64               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7967  004978  0E32               	movlw	low _cmdbuf
  7968  00497A  6F63               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7969  00497C  EC9B  F00D         	call	_hexStringToBytes	;wreg free
  7970  004980  6F93               	movwf	??_doModeSLCAN& (0+255),b
  7971  004982  0E05               	movlw	5
  7972  004984  5D93               	subwf	??_doModeSLCAN& (0+255),w,b
  7973  004986  E201 D115          	bnc	l15902
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;main.c: 1722: }
  7977                           ;main.c: 1724: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7978  00498A  C185  F093         	movff	_wrkbuf+3,??_doModeSLCAN
  7979  00498E  0E08               	movlw	8
  7980  004990  2793               	addwf	??_doModeSLCAN& (0+255),f,b
  7981  004992  C184  F094         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7982  004996  0E10               	movlw	16
  7983  004998  2794               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7984  00499A  C183  F095         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7985  00499E  0E18               	movlw	24
  7986  0049A0  2795               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7987  0049A2  C182  F096         	movff	_wrkbuf,??_doModeSLCAN+3
  7988  0049A6  0100               	movlb	0	; () banked
  7989  0049A8  6B97               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7990  0049AA  6B98               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7991  0049AC  6B99               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7992  0049AE  2B95               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7993  0049B0  D001               	goto	u20260
  7994  0049B2                     u20265:
  7995  0049B2  D91B               	call	PL98	;call to abstracted procedure
  7996  0049B4                     u20260:
  7997  0049B4  2F95               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7998  0049B6  D7FD               	goto	u20265
  7999  0049B8  2B94               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  8000  0049BA  D001               	goto	u20270
  8001  0049BC                     u20275:
  8002  0049BC  D916               	call	PL98	;call to abstracted procedure
  8003  0049BE                     u20270:
  8004  0049BE  2F94               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  8005  0049C0  D7FD               	goto	u20275
  8006  0049C2  2B93               	incf	??_doModeSLCAN& (0+255),f,b
  8007  0049C4  D001               	goto	u20280
  8008  0049C6                     u20285:
  8009  0049C6  D911               	call	PL98	;call to abstracted procedure
  8010  0049C8                     u20280:
  8011  0049C8  2F93               	decfsz	??_doModeSLCAN& (0+255),f,b
  8012  0049CA  D7FD               	goto	u20285
  8013  0049CC  C099  F09D         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  8014  0049D0  C098  F09C         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  8015  0049D4  C097  F09B         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  8016  0049D8  C096  F09A         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;main.c: 1725: dlc = vscpData[4];
  8020  0049DC  C1EE  F09E         	movff	_vscpData+4,doModeSLCAN@dlc
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;main.c: 1728: if (dlc > 8) break;
  8024  0049E0  0E08               	movlw	8
  8025  0049E2  659E               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  8026  0049E4  D001               	goto	l15832
  8027  0049E6  D0E6               	goto	l15902
  8028  0049E8                     l15832:
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;main.c: 1729: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  8032  0049E8  90D8               	bcf	status,0,c
  8033  0049EA  359E               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  8034  0049EC  6F93               	movwf	??_doModeSLCAN& (0+255),b
  8035  0049EE  6B94               	clrf	(??_doModeSLCAN+1)& (0+255),b
  8036  0049F0  3794               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  8037  0049F2  0E0A               	movlw	10
  8038  0049F4  2793               	addwf	??_doModeSLCAN& (0+255),f,b
  8039  0049F6  0E00               	movlw	0
  8040  0049F8  2394               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  8041  0049FA  0101               	movlb	1	; () banked
  8042  0049FC  0E01               	movlw	high _cmdbuf
  8043  0049FE  6E20               	movwf	?_strlen+1,c
  8044  004A00  0E32               	movlw	low _cmdbuf
  8045  004A02  6E1F               	movwf	?_strlen,c
  8046  004A04  EC28  F008         	call	_strlen	;wreg free
  8047  004A08  0100               	movlb	0	; () banked
  8048  004A0A  5193               	movf	??_doModeSLCAN& (0+255),w,b
  8049  004A0C  5C1F               	subwf	?_strlen,w,c
  8050  004A0E  5194               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  8051  004A10  5820               	subwfb	?_strlen+1,w,c
  8052  004A12  E201 D0CF          	bnc	l15902
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;main.c: 1731: memcpy(vscpData, vscpData + 5, dlc);
  8056  004A16  0E01               	movlw	high _vscpData
  8057  004A18  6F61               	movwf	(?_memcpy+1)& (0+255),b
  8058  004A1A  0EEA               	movlw	low _vscpData
  8059  004A1C  6F60               	movwf	?_memcpy& (0+255),b
  8060  004A1E  0EEF               	movlw	low (_vscpData+5)
  8061  004A20  6F93               	movwf	??_doModeSLCAN& (0+255),b
  8062  004A22  0E01               	movlw	high (_vscpData+5)
  8063  004A24  6F94               	movwf	(??_doModeSLCAN+1)& (0+255),b
  8064  004A26  C093  F062         	movff	??_doModeSLCAN,?_memcpy+2
  8065  004A2A  C094  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  8066  004A2E  C09E  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  8067  004A32  6B65               	clrf	(?_memcpy+5)& (0+255),b
  8068  004A34  ECC3  F008         	call	_memcpy	;wreg free
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;main.c: 1733: rv = sendCANFrame(id, dlc, vscpData);
  8072  004A38  C09A  F08C         	movff	doModeSLCAN@id,?_sendCANFrame
  8073  004A3C  C09B  F08D         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  8074  004A40  C09C  F08E         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  8075  004A44  C09D  F08F         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  8076  004A48  C09E  F090         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  8077  004A4C  0E01               	movlw	high _vscpData
  8078  004A4E  0100               	movlb	0	; () banked
  8079  004A50  6F92               	movwf	(?_sendCANFrame+6)& (0+255),b
  8080  004A52  0EEA               	movlw	low _vscpData
  8081  004A54  6F91               	movwf	(?_sendCANFrame+5)& (0+255),b
  8082  004A56  EC0B  F008         	call	_sendCANFrame	;wreg free
  8083  004A5A  D034               	goto	L3
  8084  004A5C                     L2:
  8085  004A5C  6FA0               	movwf	doModeSLCAN@rv& (0+255),b
  8086  004A5E  D0AA               	goto	l15902
  8087  004A60                     l15840:
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;main.c: 1748: if (bOpen && (strlen(cmdbuf) == 1)) {
  8091  004A60  502C               	movf	_bOpen,w,c
  8092  004A62  E101 D0A7          	bz	l15902
  8093                           
  8094                           ; BSR set to: 0
  8095  004A66  0101               	movlb	1	; () banked
  8096  004A68  0E01               	movlw	high _cmdbuf
  8097  004A6A  6E20               	movwf	?_strlen+1,c
  8098  004A6C  0E32               	movlw	low _cmdbuf
  8099  004A6E  6E1F               	movwf	?_strlen,c
  8100  004A70  EC28  F008         	call	_strlen	;wreg free
  8101  004A74  041F               	decf	?_strlen,w,c
  8102  004A76  1020               	iorwf	?_strlen+1,w,c
  8103  004A78  E001 D09C          	bnz	l15902
  8104                           
  8105                           ;main.c: 1749: putsUSART((char *) "F00\r\n");
  8106  004A7C  0E7C               	movlw	high STR_173
  8107  004A7E  6E21               	movwf	?_putsUSART+1,c
  8108  004A80  0E65               	movlw	low STR_173
  8109  004A82  6E20               	movwf	?_putsUSART,c
  8110  004A84  EC74  F009         	call	_putsUSART	;wreg free
  8111  004A88  D095               	goto	l15902
  8112  004A8A                     l15850:
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;main.c: 1765: if (2 == strlen(cmdbuf)) {
  8116  004A8A  0101               	movlb	1	; () banked
  8117  004A8C  0E01               	movlw	high _cmdbuf
  8118  004A8E  6E20               	movwf	?_strlen+1,c
  8119  004A90  0E32               	movlw	low _cmdbuf
  8120  004A92  6E1F               	movwf	?_strlen,c
  8121  004A94  EC28  F008         	call	_strlen	;wreg free
  8122  004A98  501F               	movf	?_strlen,w,c
  8123  004A9A  0A02               	xorlw	2
  8124  004A9C  1020               	iorwf	?_strlen+1,w,c
  8125  004A9E  E001 D089          	bnz	l15902
  8126                           
  8127                           ;main.c: 1766: if (!bOpen) {
  8128  004AA2  662C               	tstfsz	_bOpen,c
  8129  004AA4  D087               	goto	l15902
  8130                           
  8131                           ;main.c: 1767: if ('0' == cmdbuf[1]) {
  8132  004AA6  0101               	movlb	1	; () banked
  8133  004AA8  5133               	movf	(_cmdbuf+1)& (0+255),w,b
  8134  004AAA  0A30               	xorlw	48
  8135  004AAC  E10D               	bnz	l15862
  8136                           
  8137                           ; BSR set to: 1
  8138                           ;main.c: 1768: nTimeStamp = 0;
  8139  004AAE  6A31               	clrf	_nTimeStamp,c
  8140                           
  8141                           ; BSR set to: 1
  8142                           ;main.c: 1770: (Busy_eep(), Write_b_eep(0x05,0));
  8143  004AB0  ECB3  F006         	call	_Busy_eep	;wreg free
  8144  004AB4  6A20               	clrf	?_Write_b_eep+1,c
  8145  004AB6  0E05               	movlw	5
  8146  004AB8  6E1F               	movwf	?_Write_b_eep,c
  8147  004ABA  0E00               	movlw	0
  8148  004ABC  6A21               	clrf	?_Write_b_eep+2,c
  8149  004ABE  ECB9  F007         	call	_Write_b_eep	;wreg free
  8150  004AC2  D6EB               	goto	l15776
  8151  004AC4                     L3:
  8152  004AC4  0100               	movlb	0	; () banked
  8153  004AC6  D7CA               	goto	L2
  8154  004AC8                     l15862:
  8155                           
  8156                           ; BSR set to: 1
  8157  004AC8  5133               	movf	(_cmdbuf+1)& (0+255),w,b
  8158  004ACA  0A31               	xorlw	49
  8159  004ACC  E10C               	bnz	l843
  8160                           
  8161                           ; BSR set to: 1
  8162                           ;main.c: 1773: nTimeStamp = 1;
  8163  004ACE  0E01               	movlw	1
  8164  004AD0  6E31               	movwf	_nTimeStamp,c
  8165                           
  8166                           ; BSR set to: 1
  8167                           ;main.c: 1775: (Busy_eep(), Write_b_eep(0x05,1));
  8168  004AD2  ECB3  F006         	call	_Busy_eep	;wreg free
  8169  004AD6  6A20               	clrf	?_Write_b_eep+1,c
  8170  004AD8  0E05               	movlw	5
  8171  004ADA  6E1F               	movwf	?_Write_b_eep,c
  8172  004ADC  0E01               	movlw	1
  8173  004ADE  6E21               	movwf	?_Write_b_eep+2,c
  8174  004AE0  ECB9  F007         	call	_Write_b_eep	;wreg free
  8175  004AE4  D6DA               	goto	l15776
  8176  004AE6                     l843:
  8177                           
  8178                           ; BSR set to: 1
  8179                           ;main.c: 1779: rv = 0;
  8180  004AE6  0100               	movlb	0	; () banked
  8181  004AE8  6BA0               	clrf	doModeSLCAN@rv& (0+255),b
  8182  004AEA  D064               	goto	l15902
  8183  004AEC                     l15870:
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;main.c: 1787: (Busy_eep(), Write_b_eep(0x01,0xFF));
  8187  004AEC  ECB3  F006         	call	_Busy_eep	;wreg free
  8188  004AF0  6A20               	clrf	?_Write_b_eep+1,c
  8189  004AF2  0E01               	movlw	1
  8190  004AF4  6E1F               	movwf	?_Write_b_eep,c
  8191  004AF6  0EFF               	movlw	255
  8192  004AF8  6821               	setf	?_Write_b_eep+2,c
  8193  004AFA  ECB9  F007         	call	_Write_b_eep	;wreg free
  8194  004AFE  00FF               	reset		;# 
  8195                           
  8196                           ;main.c: 1789: break;
  8197  004B00  D059               	goto	l15902
  8198  004B02                     l15874:
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;main.c: 1793: if ( 'v' == cmdbuf[1] &&
  8202                           ;main.c: 1794: 's' == cmdbuf[2] &&
  8203                           ;main.c: 1795: 'c' == cmdbuf[3] &&
  8204                           ;main.c: 1796: 'p' == cmdbuf[4] ) {
  8205  004B02  0101               	movlb	1	; () banked
  8206  004B04  5133               	movf	(_cmdbuf+1)& (0+255),w,b
  8207  004B06  0A76               	xorlw	118
  8208  004B08  E10C               	bnz	l15884
  8209                           
  8210                           ; BSR set to: 1
  8211  004B0A  5134               	movf	(_cmdbuf+2)& (0+255),w,b
  8212  004B0C  0A73               	xorlw	115
  8213  004B0E  E109               	bnz	l15884
  8214                           
  8215                           ; BSR set to: 1
  8216  004B10  5135               	movf	(_cmdbuf+3)& (0+255),w,b
  8217  004B12  0A63               	xorlw	99
  8218  004B14  E106               	bnz	l15884
  8219                           
  8220                           ; BSR set to: 1
  8221  004B16  5136               	movf	(_cmdbuf+4)& (0+255),w,b
  8222  004B18  0A70               	xorlw	112
  8223  004B1A  E103               	bnz	l15884
  8224                           
  8225                           ; BSR set to: 1
  8226                           ;main.c: 1797: mode = 1;
  8227  004B1C  0E01               	movlw	1
  8228  004B1E  6F31               	movwf	_mode& (0+255),b
  8229                           
  8230                           ;main.c: 1798: }
  8231  004B20  D049               	goto	l15902
  8232  004B22                     l15884:
  8233                           
  8234                           ; BSR set to: 1
  8235                           ;main.c: 1799: else if ( 'v' == cmdbuf[1] &&
  8236                           ;main.c: 1800: 'e' == cmdbuf[2] &&
  8237                           ;main.c: 1801: 'r' == cmdbuf[3] &&
  8238                           ;main.c: 1802: 'b' == cmdbuf[4] ) {
  8239  004B22  5133               	movf	(_cmdbuf+1)& (0+255),w,b
  8240  004B24  0A76               	xorlw	118
  8241  004B26  E146               	bnz	l15902
  8242                           
  8243                           ; BSR set to: 1
  8244  004B28  5134               	movf	(_cmdbuf+2)& (0+255),w,b
  8245  004B2A  0A65               	xorlw	101
  8246  004B2C  E143               	bnz	l15902
  8247                           
  8248                           ; BSR set to: 1
  8249  004B2E  5135               	movf	(_cmdbuf+3)& (0+255),w,b
  8250  004B30  0A72               	xorlw	114
  8251  004B32  E140               	bnz	l15902
  8252                           
  8253                           ; BSR set to: 1
  8254  004B34  5136               	movf	(_cmdbuf+4)& (0+255),w,b
  8255  004B36  0A62               	xorlw	98
  8256  004B38  E13D               	bnz	l15902
  8257                           
  8258                           ; BSR set to: 1
  8259                           ;main.c: 1803: mode = 0;
  8260  004B3A  6B31               	clrf	_mode& (0+255),b
  8261  004B3C  D03B               	goto	l15902
  8262  004B3E                     l15894:
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;main.c: 1808: {
  8266                           ;main.c: 1810: if (0 == strlen(cmdbuf)) {
  8267  004B3E  0101               	movlb	1	; () banked
  8268  004B40  0E01               	movlw	high _cmdbuf
  8269  004B42  6E20               	movwf	?_strlen+1,c
  8270  004B44  0E32               	movlw	low _cmdbuf
  8271  004B46  6E1F               	movwf	?_strlen,c
  8272  004B48  EC28  F008         	call	_strlen	;wreg free
  8273  004B4C  5020               	movf	?_strlen+1,w,c
  8274  004B4E  101F               	iorwf	?_strlen,w,c
  8275  004B50  E101 D6A3          	bz	l15776
  8276  004B54  D02F               	goto	l15902
  8277  004B56                     l15900:
  8278                           
  8279                           ; BSR set to: 0
  8280  004B56  519F               	movf	doModeSLCAN@c& (0+255),w,b
  8281                           
  8282                           ; Switch size 1, requested type "space"
  8283                           ; Number of cases is 17, Range of values is 64 to 116
  8284                           ; switch strategies available:
  8285                           ; Name         Instructions Cycles
  8286                           ; simple_byte           52    27 (average)
  8287                           ;	Chosen strategy is simple_byte
  8288  004B58  0A40               	xorlw	64	; case 64
  8289  004B5A  E0D3               	bz	l15874
  8290  004B5C  0A02               	xorlw	2	; case 66
  8291  004B5E  E0C6               	bz	l15870
  8292  004B60  0A01               	xorlw	1	; case 67
  8293  004B62  E101 D6DE          	bz	l15806
  8294  004B66  0A05               	xorlw	5	; case 70
  8295  004B68  E101 D77A          	bz	l15840
  8296  004B6C  0A0C               	xorlw	12	; case 74
  8297  004B6E  E101 D683          	bz	l15772
  8298  004B72  0A07               	xorlw	7	; case 77
  8299  004B74  E101 D691          	bz	l15776
  8300  004B78  0A03               	xorlw	3	; case 78
  8301  004B7A  E101 D6A2          	bz	l15784
  8302  004B7E  0A01               	xorlw	1	; case 79
  8303  004B80  E101 D6B9          	bz	l15794
  8304  004B84  0A1D               	xorlw	29	; case 82
  8305  004B86  E016               	bz	l15902
  8306  004B88  0A01               	xorlw	1	; case 83
  8307  004B8A  E101 D6AC          	bz	l15790
  8308  004B8E  0A07               	xorlw	7	; case 84
  8309  004B90  E101 D6D9          	bz	l15816
  8310  004B94  0A02               	xorlw	2	; case 86
  8311  004B96  E101 D682          	bz	l15778
  8312  004B9A  0A0C               	xorlw	12	; case 90
  8313  004B9C  E101 D775          	bz	l15850
  8314  004BA0  0A37               	xorlw	55	; case 109
  8315  004BA2  E101 D67A          	bz	l15776
  8316  004BA6  0A1F               	xorlw	31	; case 114
  8317  004BA8  E005               	bz	l15902
  8318  004BAA  0A01               	xorlw	1	; case 115
  8319  004BAC  E101 D69E          	bz	l818
  8320  004BB0  0A07               	xorlw	7	; case 116
  8321  004BB2  E1C5               	bnz	l15894
  8322  004BB4                     l15902:
  8323                           
  8324                           ;main.c: 1818: if (rv) {
  8325  004BB4  0100               	movlb	0	; () banked
  8326  004BB6  51A0               	movf	doModeSLCAN@rv& (0+255),w,b
  8327  004BB8  E007               	bz	l15906
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;main.c: 1820: putsUSART((char *) "\r");
  8331  004BBA  0E7C               	movlw	high STR_174
  8332  004BBC  6E21               	movwf	?_putsUSART+1,c
  8333  004BBE  0EF3               	movlw	low STR_174
  8334  004BC0  6E20               	movwf	?_putsUSART,c
  8335  004BC2  EC74  F009         	call	_putsUSART	;wreg free
  8336                           
  8337                           ;main.c: 1821: }
  8338  004BC6  D006               	goto	l15908
  8339  004BC8                     l15906:
  8340                           
  8341                           ; BSR set to: 0
  8342                           ;main.c: 1822: else {
  8343                           ;main.c: 1824: putsUSART((char *) "\a");
  8344  004BC8  0E7C               	movlw	high STR_175
  8345  004BCA  6E21               	movwf	?_putsUSART+1,c
  8346  004BCC  0EF1               	movlw	low STR_175
  8347  004BCE  6E20               	movwf	?_putsUSART,c
  8348  004BD0  EC74  F009         	call	_putsUSART	;wreg free
  8349  004BD4                     l15908:
  8350                           
  8351                           ;main.c: 1825: }
  8352                           ;main.c: 1828: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  8353  004BD4  0E01               	movlw	high _cmdbuf
  8354  004BD6  0100               	movlb	0	; () banked
  8355  004BD8  6F61               	movwf	(?_memset+1)& (0+255),b
  8356  004BDA  0E32               	movlw	low _cmdbuf
  8357  004BDC  EC94  F00D         	call	PL20	;call to abstracted procedure
  8358  004BE0  EC5A  F007         	call	_memset	;wreg free
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;main.c: 1829: pos = 0;
  8362  004BE4  6A32               	clrf	_pos,c
  8363  004BE6                     l15912:
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;main.c: 1831: }
  8367                           ;main.c: 1834: (INTCONbits.GIE = 1);
  8368  004BE6  8EF2               	bsf	intcon,7,c	;volatile
  8369  004BE8                     l808:
  8370                           
  8371                           ; BSR set to: 0
  8372  004BE8  0012               	return	
  8373  004BEA                     __end_of_doModeSLCAN:
  8374                           	opt stack 0
  8375  004BEA                     PL98:
  8376                           	opt stack 22
  8377  004BEA  90D8               	bcf	status,0,c
  8378  004BEC  3796               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  8379  004BEE  3797               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  8380  004BF0  3798               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  8381  004BF2  3799               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  8382  004BF4  0012               	return	
  8383  004BF6                     __end_ofPL98:
  8384                           	opt stack 0
  8385                           tblptru	equ	0xFF8
  8386                           tblptrh	equ	0xFF7
  8387                           tblptrl	equ	0xFF6
  8388                           tablat	equ	0xFF5
  8389                           prodh	equ	0xFF4
  8390                           prodl	equ	0xFF3
  8391                           intcon	equ	0xFF2
  8392                           indf0	equ	0xFEF
  8393                           postinc0	equ	0xFEE
  8394                           fsr0h	equ	0xFEA
  8395                           fsr0l	equ	0xFE9
  8396                           wreg	equ	0xFE8
  8397                           indf1	equ	0xFE7
  8398                           postinc1	equ	0xFE6
  8399                           postdec1	equ	0xFE5
  8400                           fsr1h	equ	0xFE2
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           plusw2	equ	0xFDB
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function _hexStringToBytes *****************
  8411 ;; Defined at:
  8412 ;;		line 35 in file "hexutils.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  buf             2    0[BANK0 ] PTR unsigned char 
  8415 ;;		 -> wrkbuf(80), 
  8416 ;;  size            1    2[BANK0 ] unsigned char 
  8417 ;;  inhex           2    3[BANK0 ] PTR unsigned char 
  8418 ;;		 -> cmdbuf(80), 
  8419 ;; Auto vars:     Size  Location     Type
  8420 ;;  i               2   12[BANK0 ] int 
  8421 ;;  p               2   10[BANK0 ] PTR unsigned char 
  8422 ;;		 -> cmdbuf(80), 
  8423 ;;  len             2    8[BANK0 ] int 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      unsigned char 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : F/0
  8430 ;;		On exit  : F/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8433 ;;      Params:         0       5       0       0       0       0       0
  8434 ;;      Locals:         0       6       0       0       0       0       0
  8435 ;;      Temps:          0       3       0       0       0       0       0
  8436 ;;      Totals:         0      14       0       0       0       0       0
  8437 ;;Total ram usage:       14 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    4
  8440 ;; This function calls:
  8441 ;;		_strlen
  8442 ;;		_nibbleFromChar
  8443 ;; This function is called by:
  8444 ;;		_doModeSLCAN
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text3
  8449  001B36                     __ptext3:
  8450                           	opt stack 0
  8451  001B36                     _hexStringToBytes:
  8452                           	opt stack 24
  8453                           
  8454                           ; BSR set to: 0
  8455                           ;hexutils.c: 36: uint8_t *p;
  8456                           ;hexutils.c: 37: int len, i;
  8457                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;incstack = 0
  8461                           ;incstack = 0
  8462  001B36  C063  F01F         	movff	hexStringToBytes@inhex,?_strlen
  8463  001B3A  C064  F020         	movff	hexStringToBytes@inhex+1,?_strlen+1
  8464  001B3E  EC28  F008         	call	_strlen	;wreg free
  8465  001B42  90D8               	bcf	status,0,c
  8466  001B44  3020               	rrcf	?_strlen+1,w,c
  8467  001B46  0100               	movlb	0	; () banked
  8468  001B48  6F69               	movwf	(hexStringToBytes@len+1)& (0+255),b
  8469  001B4A  301F               	rrcf	?_strlen,w,c
  8470  001B4C  6F68               	movwf	hexStringToBytes@len& (0+255),b
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;hexutils.c: 40: if (len > size) return 0;
  8474  001B4E  5162               	movf	hexStringToBytes@size& (0+255),w,b
  8475  001B50  6F65               	movwf	??_hexStringToBytes& (0+255),b
  8476  001B52  6B66               	clrf	(??_hexStringToBytes+1)& (0+255),b
  8477  001B54  5166               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  8478  001B56  0A80               	xorlw	128
  8479  001B58  6F67               	movwf	(??_hexStringToBytes+2)& (0+255),b
  8480  001B5A  5168               	movf	hexStringToBytes@len& (0+255),w,b
  8481  001B5C  5D65               	subwf	??_hexStringToBytes& (0+255),w,b
  8482  001B5E  5169               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8483  001B60  0A80               	xorlw	128
  8484  001B62  5967               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  8485  001B64  E202               	bc	l1685
  8486                           
  8487                           ; BSR set to: 0
  8488  001B66  0E00               	movlw	0
  8489  001B68  D033               	goto	l1686
  8490  001B6A                     l1685:
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  8494  001B6A  6B6C               	clrf	hexStringToBytes@i& (0+255),b
  8495  001B6C  6B6D               	clrf	(hexStringToBytes@i+1)& (0+255),b
  8496  001B6E  C063  F06A         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  8497  001B72  C064  F06B         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  8498  001B76  D022               	goto	l13964
  8499  001B78                     l13958:
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  8503  001B78  516C               	movf	hexStringToBytes@i& (0+255),w,b
  8504  001B7A  2560               	addwf	hexStringToBytes@buf& (0+255),w,b
  8505  001B7C  6ED9               	movwf	fsr2l,c
  8506  001B7E  516D               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8507  001B80  2161               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  8508  001B82  6EDA               	movwf	fsr2h,c
  8509  001B84  EE10 F001          	lfsr	1,1
  8510  001B88  516A               	movf	hexStringToBytes@p& (0+255),w,b
  8511  001B8A  26E1               	addwf	fsr1l,f,c
  8512  001B8C  516B               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  8513  001B8E  22E2               	addwfc	fsr1h,f,c
  8514  001B90  50E7               	movf	indf1,w,c
  8515  001B92  EC84  F008         	call	_nibbleFromChar
  8516  001B96  6F65               	movwf	??_hexStringToBytes& (0+255),b
  8517  001B98  C06A  FFE1         	movff	hexStringToBytes@p,fsr1l
  8518  001B9C  C06B  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  8519  001BA0  50E7               	movf	indf1,w,c
  8520  001BA2  EC84  F008         	call	_nibbleFromChar
  8521  001BA6  6F66               	movwf	(??_hexStringToBytes+1)& (0+255),b
  8522  001BA8  3966               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  8523  001BAA  0BF0               	andlw	240
  8524  001BAC  1165               	iorwf	??_hexStringToBytes& (0+255),w,b
  8525  001BAE  6EDF               	movwf	indf2,c
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;hexutils.c: 43: p += 2;
  8529  001BB0  0E02               	movlw	2
  8530  001BB2  276A               	addwf	hexStringToBytes@p& (0+255),f,b
  8531  001BB4  0E00               	movlw	0
  8532  001BB6  236B               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  8533                           
  8534                           ; BSR set to: 0
  8535  001BB8  4B6C               	infsnz	hexStringToBytes@i& (0+255),f,b
  8536  001BBA  2B6D               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  8537  001BBC                     l13964:
  8538                           
  8539                           ; BSR set to: 0
  8540  001BBC  516D               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8541  001BBE  0A80               	xorlw	128
  8542  001BC0  6F65               	movwf	??_hexStringToBytes& (0+255),b
  8543  001BC2  5168               	movf	hexStringToBytes@len& (0+255),w,b
  8544  001BC4  5D6C               	subwf	hexStringToBytes@i& (0+255),w,b
  8545  001BC6  5169               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8546  001BC8  0A80               	xorlw	128
  8547  001BCA  5965               	subwfb	??_hexStringToBytes& (0+255),w,b
  8548  001BCC  E3D5               	bnc	l13958
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;hexutils.c: 44: }
  8552                           ;hexutils.c: 46: return i;
  8553  001BCE  516C               	movf	hexStringToBytes@i& (0+255),w,b
  8554  001BD0                     l1686:
  8555                           
  8556                           ; BSR set to: 0
  8557  001BD0  0012               	return	
  8558  001BD2                     __end_of_hexStringToBytes:
  8559                           	opt stack 0
  8560                           tblptru	equ	0xFF8
  8561                           tblptrh	equ	0xFF7
  8562                           tblptrl	equ	0xFF6
  8563                           tablat	equ	0xFF5
  8564                           prodh	equ	0xFF4
  8565                           prodl	equ	0xFF3
  8566                           intcon	equ	0xFF2
  8567                           indf0	equ	0xFEF
  8568                           postinc0	equ	0xFEE
  8569                           fsr0h	equ	0xFEA
  8570                           fsr0l	equ	0xFE9
  8571                           wreg	equ	0xFE8
  8572                           indf1	equ	0xFE7
  8573                           postinc1	equ	0xFE6
  8574                           postdec1	equ	0xFE5
  8575                           fsr1h	equ	0xFE2
  8576                           fsr1l	equ	0xFE1
  8577                           indf2	equ	0xFDF
  8578                           postinc2	equ	0xFDE
  8579                           postdec2	equ	0xFDD
  8580                           plusw2	equ	0xFDB
  8581                           fsr2h	equ	0xFDA
  8582                           fsr2l	equ	0xFD9
  8583                           status	equ	0xFD8
  8584                           
  8585 ;; *************** function _nibbleFromChar *****************
  8586 ;; Defined at:
  8587 ;;		line 20 in file "hexutils.c"
  8588 ;; Parameters:    Size  Location     Type
  8589 ;;  c               1    wreg     unsigned char 
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;  c               1   30[COMRAM] unsigned char 
  8592 ;; Return value:  Size  Location     Type
  8593 ;;                  1    wreg      unsigned char 
  8594 ;; Registers used:
  8595 ;;		wreg, status,2, status,0
  8596 ;; Tracked objects:
  8597 ;;		On entry : F/0
  8598 ;;		On exit  : F/0
  8599 ;;		Unchanged: F/0
  8600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8601 ;;      Params:         0       0       0       0       0       0       0
  8602 ;;      Locals:         1       0       0       0       0       0       0
  8603 ;;      Temps:          0       0       0       0       0       0       0
  8604 ;;      Totals:         1       0       0       0       0       0       0
  8605 ;;Total ram usage:        1 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    3
  8608 ;; This function calls:
  8609 ;;		Nothing
  8610 ;; This function is called by:
  8611 ;;		_hexStringToBytes
  8612 ;; This function uses a non-reentrant model
  8613 ;;
  8614                           
  8615                           	psect	text4
  8616  001108                     __ptext4:
  8617                           	opt stack 0
  8618  001108                     _nibbleFromChar:
  8619                           	opt stack 24
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;incstack = 0
  8623                           ;incstack = 0
  8624                           ;nibbleFromChar@c stored from wreg
  8625  001108  CFE8 F01F          	movff	wreg,nibbleFromChar@c
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  8629  00110C  0E2F               	movlw	47
  8630  00110E  641F               	cpfsgt	nibbleFromChar@c,c
  8631  001110  D006               	goto	l14242
  8632                           
  8633                           ; BSR set to: 0
  8634  001112  0E3A               	movlw	58
  8635  001114  601F               	cpfslt	nibbleFromChar@c,c
  8636  001116  D003               	goto	l14242
  8637                           
  8638                           ; BSR set to: 0
  8639  001118  501F               	movf	nibbleFromChar@c,w,c
  8640  00111A  0FD0               	addlw	208
  8641  00111C  D013               	goto	l1680
  8642  00111E                     l14242:
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  8646  00111E  0E60               	movlw	96
  8647  001120  641F               	cpfsgt	nibbleFromChar@c,c
  8648  001122  D006               	goto	l14250
  8649                           
  8650                           ; BSR set to: 0
  8651  001124  0E67               	movlw	103
  8652  001126  601F               	cpfslt	nibbleFromChar@c,c
  8653  001128  D003               	goto	l14250
  8654                           
  8655                           ; BSR set to: 0
  8656  00112A  501F               	movf	nibbleFromChar@c,w,c
  8657  00112C  0FA9               	addlw	169
  8658  00112E  D00A               	goto	l1680
  8659  001130                     l14250:
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  8663  001130  0E40               	movlw	64
  8664  001132  641F               	cpfsgt	nibbleFromChar@c,c
  8665  001134  D006               	goto	l14258
  8666                           
  8667                           ; BSR set to: 0
  8668  001136  0E47               	movlw	71
  8669  001138  601F               	cpfslt	nibbleFromChar@c,c
  8670  00113A  D003               	goto	l14258
  8671                           
  8672                           ; BSR set to: 0
  8673  00113C  501F               	movf	nibbleFromChar@c,w,c
  8674  00113E  0FC9               	addlw	201
  8675  001140  D001               	goto	l1680
  8676  001142                     l14258:
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;hexutils.c: 24: return 255;
  8680  001142  0EFF               	movlw	255
  8681  001144                     l1680:
  8682                           
  8683                           ; BSR set to: 0
  8684  001144  0012               	return	
  8685  001146                     __end_of_nibbleFromChar:
  8686                           	opt stack 0
  8687                           tblptru	equ	0xFF8
  8688                           tblptrh	equ	0xFF7
  8689                           tblptrl	equ	0xFF6
  8690                           tablat	equ	0xFF5
  8691                           prodh	equ	0xFF4
  8692                           prodl	equ	0xFF3
  8693                           intcon	equ	0xFF2
  8694                           indf0	equ	0xFEF
  8695                           postinc0	equ	0xFEE
  8696                           fsr0h	equ	0xFEA
  8697                           fsr0l	equ	0xFE9
  8698                           wreg	equ	0xFE8
  8699                           indf1	equ	0xFE7
  8700                           postinc1	equ	0xFE6
  8701                           postdec1	equ	0xFE5
  8702                           fsr1h	equ	0xFE2
  8703                           fsr1l	equ	0xFE1
  8704                           indf2	equ	0xFDF
  8705                           postinc2	equ	0xFDE
  8706                           postdec2	equ	0xFDD
  8707                           plusw2	equ	0xFDB
  8708                           fsr2h	equ	0xFDA
  8709                           fsr2l	equ	0xFD9
  8710                           status	equ	0xFD8
  8711                           
  8712 ;; *************** function _receiveSendEventSLCAN *****************
  8713 ;; Defined at:
  8714 ;;		line 2438 in file "main.c"
  8715 ;; Parameters:    Size  Location     Type
  8716 ;;		None
  8717 ;; Auto vars:     Size  Location     Type
  8718 ;;  id              4   33[BANK0 ] unsigned long 
  8719 ;;  i               2   38[BANK0 ] int 
  8720 ;;  dlc             1   37[BANK0 ] unsigned char 
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  1    wreg      enum E15660
  8723 ;; Registers used:
  8724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8725 ;; Tracked objects:
  8726 ;;		On entry : F/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8730 ;;      Params:         0       0       0       0       0       0       0
  8731 ;;      Locals:         0       7       0       0       0       0       0
  8732 ;;      Temps:          0       3       0       0       0       0       0
  8733 ;;      Totals:         0      10       0       0       0       0       0
  8734 ;;Total ram usage:       10 bytes
  8735 ;; Hardware stack levels used:    1
  8736 ;; Hardware stack levels required when called:    6
  8737 ;; This function calls:
  8738 ;;		_putsUSART
  8739 ;;		_WriteUSART
  8740 ;;		_strlen
  8741 ;;		_getCANFrame
  8742 ;;		_ultoa
  8743 ;;		_itoa
  8744 ;; This function is called by:
  8745 ;;		_doModeSLCAN
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text5
  8750  0036F6                     __ptext5:
  8751                           	opt stack 0
  8752  0036F6                     _receiveSendEventSLCAN:
  8753                           	opt stack 22
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;main.c: 2439: int i;
  8757                           ;main.c: 2440: uint8_t dlc;
  8758                           ;main.c: 2441: uint32_t id;
  8759                           ;main.c: 2443: if (getCANFrame(&id, &dlc, vscpData)) {
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;incstack = 0
  8763                           ;incstack = 0
  8764  0036F6  0E00               	movlw	high receiveSendEventSLCAN@dlc
  8765  0036F8  6F6B               	movwf	(?_getCANFrame+1)& (0+255),b
  8766  0036FA  0E85               	movlw	low receiveSendEventSLCAN@dlc
  8767  0036FC  6F6A               	movwf	?_getCANFrame& (0+255),b
  8768  0036FE  0E01               	movlw	high _vscpData
  8769  003700  0100               	movlb	0	; () banked
  8770  003702  6F6D               	movwf	(?_getCANFrame+3)& (0+255),b
  8771  003704  0EEA               	movlw	low _vscpData
  8772  003706  6F6C               	movwf	(?_getCANFrame+2)& (0+255),b
  8773  003708  0E81               	movlw	receiveSendEventSLCAN@id& (0+255)
  8774  00370A  EC31  F00F         	call	_getCANFrame
  8775  00370E  0900               	iorlw	0
  8776  003710  E101 D0B2          	bz	l1159
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;main.c: 2446: cntRxFrames++;
  8780  003714  0101               	movlb	1	; () banked
  8781  003716  2B0C               	incf	_cntRxFrames& (0+255),f,b
  8782  003718  0E00               	movlw	0
  8783  00371A  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  8784  00371C  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  8785  00371E  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  8786                           
  8787                           ;main.c: 2447: cntRxBytes += dlc;
  8788  003720  0100               	movlb	0	; () banked
  8789  003722  5185               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8790  003724  0101               	movlb	1	; () banked
  8791  003726  2708               	addwf	_cntRxBytes& (0+255),f,b
  8792  003728  0E00               	movlw	0
  8793  00372A  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  8794  00372C  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  8795  00372E  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8796  003730                     l1132:
  8797  003730  A2AC               	btfss	4012,1,c	;volatile
  8798  003732  D7FE               	goto	l1132
  8799                           
  8800                           ;main.c: 2450: WriteUSART('T');
  8801  003734  0E54               	movlw	84
  8802  003736  ECE7  F006         	call	_WriteUSART
  8803                           
  8804                           ;main.c: 2452: ultoa(wrkbuf, id, 16);
  8805  00373A  0E01               	movlw	high _wrkbuf
  8806  00373C  0100               	movlb	0	; () banked
  8807  00373E  6F72               	movwf	(?_ultoa+1)& (0+255),b
  8808  003740  0E82               	movlw	low _wrkbuf
  8809  003742  6F71               	movwf	?_ultoa& (0+255),b
  8810  003744  C081  F073         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8811  003748  C082  F074         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8812  00374C  C083  F075         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8813  003750  C084  F076         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8814  003754  6B78               	clrf	(?_ultoa+7)& (0+255),b
  8815  003756  0E10               	movlw	16
  8816  003758  6F77               	movwf	(?_ultoa+6)& (0+255),b
  8817  00375A  ECA2  F012         	call	_ultoa	;wreg free
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;main.c: 2454: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8821  00375E  6B86               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8822  003760  6B87               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8823  003762                     l1137:
  8824                           
  8825                           ; BSR set to: 0
  8826  003762  A2AC               	btfss	4012,1,c	;volatile
  8827  003764  D7FE               	goto	l1137
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;main.c: 2456: WriteUSART('0');
  8831  003766  0E30               	movlw	48
  8832  003768  ECE7  F006         	call	_WriteUSART
  8833                           
  8834                           ; BSR set to: 0
  8835  00376C  D886               	call	PL114	;call to abstracted procedure
  8836  00376E  B4D8               	btfsc	status,2,c
  8837  003770  5D86               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8838  003772  E3F7               	bnc	l1137
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;main.c: 2457: }
  8842                           ;main.c: 2458: putsUSART(wrkbuf);
  8843  003774  0101               	movlb	1	; () banked
  8844  003776  0E01               	movlw	high _wrkbuf
  8845  003778  6E21               	movwf	?_putsUSART+1,c
  8846  00377A  0E82               	movlw	low _wrkbuf
  8847  00377C  6E20               	movwf	?_putsUSART,c
  8848  00377E  EC74  F009         	call	_putsUSART	;wreg free
  8849                           
  8850                           ;main.c: 2461: itoa(wrkbuf, dlc, 16);
  8851  003782  0E01               	movlw	high _wrkbuf
  8852  003784  0100               	movlb	0	; () banked
  8853  003786  6F6D               	movwf	(?_itoa+1)& (0+255),b
  8854  003788  0E82               	movlw	low _wrkbuf
  8855  00378A  6F6C               	movwf	?_itoa& (0+255),b
  8856  00378C  C085  F06E         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8857  003790  6B6F               	clrf	(?_itoa+3)& (0+255),b
  8858  003792  6B71               	clrf	(?_itoa+5)& (0+255),b
  8859  003794  0E10               	movlw	16
  8860  003796  6F70               	movwf	(?_itoa+4)& (0+255),b
  8861  003798  ECD3  F007         	call	_itoa	;wreg free
  8862  00379C                     l1140:
  8863                           
  8864                           ; BSR set to: 0
  8865  00379C  A2AC               	btfss	4012,1,c	;volatile
  8866  00379E  D7FE               	goto	l1140
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;main.c: 2463: WriteUSART(wrkbuf[0]);
  8870  0037A0  0101               	movlb	1	; () banked
  8871  0037A2  5182               	movf	_wrkbuf& (0+255),w,b
  8872  0037A4  ECE7  F006         	call	_WriteUSART
  8873                           
  8874                           ;main.c: 2466: for (i = 0; i < dlc; i++) {
  8875  0037A8  0100               	movlb	0	; () banked
  8876  0037AA  6B86               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8877  0037AC  6B87               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8878  0037AE  D02D               	goto	l17474
  8879  0037B0                     l17462:
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;main.c: 2467: itoa(wrkbuf, vscpData[i], 16);
  8883  0037B0  0E01               	movlw	high _wrkbuf
  8884  0037B2  0100               	movlb	0	; () banked
  8885  0037B4  6F6D               	movwf	(?_itoa+1)& (0+255),b
  8886  0037B6  0E82               	movlw	low _wrkbuf
  8887  0037B8  6F6C               	movwf	?_itoa& (0+255),b
  8888  0037BA  0EEA               	movlw	low _vscpData
  8889  0037BC  2586               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8890  0037BE  6ED9               	movwf	fsr2l,c
  8891  0037C0  0E01               	movlw	high _vscpData
  8892  0037C2  2187               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8893  0037C4  6EDA               	movwf	fsr2h,c
  8894  0037C6  50DF               	movf	indf2,w,c
  8895  0037C8  6F6E               	movwf	(?_itoa+2)& (0+255),b
  8896  0037CA  6B6F               	clrf	(?_itoa+3)& (0+255),b
  8897  0037CC  6B71               	clrf	(?_itoa+5)& (0+255),b
  8898  0037CE  0E10               	movlw	16
  8899  0037D0  6F70               	movwf	(?_itoa+4)& (0+255),b
  8900  0037D2  ECD3  F007         	call	_itoa	;wreg free
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;main.c: 2469: if (2 != strlen(wrkbuf)) {
  8904  0037D6  0101               	movlb	1	; () banked
  8905  0037D8  0E01               	movlw	high _wrkbuf
  8906  0037DA  6E20               	movwf	?_strlen+1,c
  8907  0037DC  0E82               	movlw	low _wrkbuf
  8908  0037DE  6E1F               	movwf	?_strlen,c
  8909  0037E0  EC28  F008         	call	_strlen	;wreg free
  8910  0037E4  501F               	movf	?_strlen,w,c
  8911  0037E6  0A02               	xorlw	2
  8912  0037E8  1020               	iorwf	?_strlen+1,w,c
  8913  0037EA  E005               	bz	l17470
  8914  0037EC                     l1146:
  8915  0037EC  A2AC               	btfss	4012,1,c	;volatile
  8916  0037EE  D7FE               	goto	l1146
  8917                           
  8918                           ;main.c: 2471: WriteUSART('0');
  8919  0037F0  0E30               	movlw	48
  8920  0037F2  ECE7  F006         	call	_WriteUSART
  8921  0037F6                     l17470:
  8922                           
  8923                           ;main.c: 2472: }
  8924                           ;main.c: 2474: putsUSART(wrkbuf);
  8925  0037F6  0101               	movlb	1	; () banked
  8926  0037F8  0E01               	movlw	high _wrkbuf
  8927  0037FA  6E21               	movwf	?_putsUSART+1,c
  8928  0037FC  0E82               	movlw	low _wrkbuf
  8929  0037FE  6E20               	movwf	?_putsUSART,c
  8930  003800  EC74  F009         	call	_putsUSART	;wreg free
  8931  003804  0100               	movlb	0	; () banked
  8932  003806  4B86               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8933  003808  2B87               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8934  00380A                     l17474:
  8935                           
  8936                           ; BSR set to: 0
  8937  00380A  5185               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8938  00380C  6F7E               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8939  00380E  6B7F               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8940  003810  5187               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8941  003812  0A80               	xorlw	128
  8942  003814  6F80               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8943  003816  517E               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8944  003818  5D86               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8945  00381A  517F               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8946  00381C  0A80               	xorlw	128
  8947  00381E  5980               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8948  003820  E3C7               	bnc	l17462
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;main.c: 2475: }
  8952                           ;main.c: 2478: if (nTimeStamp) {
  8953  003822  5031               	movf	_nTimeStamp,w,c
  8954  003824  E024               	bz	l1156
  8955                           
  8956                           ; BSR set to: 0
  8957                           ;main.c: 2479: ultoa(wrkbuf, timer, 16);
  8958  003826  0E01               	movlw	high _wrkbuf
  8959  003828  0100               	movlb	0	; () banked
  8960  00382A  6F72               	movwf	(?_ultoa+1)& (0+255),b
  8961  00382C  0E82               	movlw	low _wrkbuf
  8962  00382E  6F71               	movwf	?_ultoa& (0+255),b
  8963  003830  C11C  F073         	movff	_timer,?_ultoa+2	;volatile
  8964  003834  C11D  F074         	movff	_timer+1,?_ultoa+3	;volatile
  8965  003838  C11E  F075         	movff	_timer+2,?_ultoa+4	;volatile
  8966  00383C  C11F  F076         	movff	_timer+3,?_ultoa+5	;volatile
  8967  003840  6B78               	clrf	(?_ultoa+7)& (0+255),b
  8968  003842  0E10               	movlw	16
  8969  003844  6F77               	movwf	(?_ultoa+6)& (0+255),b
  8970  003846  ECA2  F012         	call	_ultoa	;wreg free
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;main.c: 2481: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8974  00384A  6B86               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8975  00384C  6B87               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8976  00384E                     l1153:
  8977                           
  8978                           ; BSR set to: 0
  8979  00384E  A2AC               	btfss	4012,1,c	;volatile
  8980  003850  D7FE               	goto	l1153
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;main.c: 2483: WriteUSART('0');
  8984  003852  0E30               	movlw	48
  8985  003854  ECE7  F006         	call	_WriteUSART
  8986                           
  8987                           ; BSR set to: 0
  8988  003858  D810               	call	PL114	;call to abstracted procedure
  8989  00385A  B4D8               	btfsc	status,2,c
  8990  00385C  5D86               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8991  00385E  E3F7               	bnc	l1153
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;main.c: 2484: }
  8995                           ;main.c: 2485: putsUSART(wrkbuf);
  8996  003860  0101               	movlb	1	; () banked
  8997  003862  0E01               	movlw	high _wrkbuf
  8998  003864  6E21               	movwf	?_putsUSART+1,c
  8999  003866  0E82               	movlw	low _wrkbuf
  9000  003868  6E20               	movwf	?_putsUSART,c
  9001  00386A  EC74  F009         	call	_putsUSART	;wreg free
  9002  00386E                     l1156:
  9003  00386E  A2AC               	btfss	4012,1,c	;volatile
  9004  003870  D7FE               	goto	l1156
  9005                           
  9006                           ;main.c: 2489: WriteUSART(0x0d);
  9007  003872  0E0D               	movlw	13
  9008  003874  ECE7  F006         	call	_WriteUSART
  9009  003878                     l1159:
  9010  003878  0012               	return	
  9011  00387A                     __end_of_receiveSendEventSLCAN:
  9012                           	opt stack 0
  9013  00387A                     PL114:
  9014                           	opt stack 22
  9015  00387A  0100               	movlb	0	; () banked
  9016  00387C  4B86               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  9017  00387E  2B87               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  9018  003880  5187               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  9019  003882  0A80               	xorlw	128
  9020  003884  0F80               	addlw	-128
  9021  003886  0CB8               	retlw	184
  9022  003888                     __end_ofPL114:
  9023                           	opt stack 0
  9024                           tblptru	equ	0xFF8
  9025                           tblptrh	equ	0xFF7
  9026                           tblptrl	equ	0xFF6
  9027                           tablat	equ	0xFF5
  9028                           prodh	equ	0xFF4
  9029                           prodl	equ	0xFF3
  9030                           intcon	equ	0xFF2
  9031                           indf0	equ	0xFEF
  9032                           postinc0	equ	0xFEE
  9033                           fsr0h	equ	0xFEA
  9034                           fsr0l	equ	0xFE9
  9035                           wreg	equ	0xFE8
  9036                           indf1	equ	0xFE7
  9037                           postinc1	equ	0xFE6
  9038                           postdec1	equ	0xFE5
  9039                           fsr1h	equ	0xFE2
  9040                           fsr1l	equ	0xFE1
  9041                           indf2	equ	0xFDF
  9042                           postinc2	equ	0xFDE
  9043                           postdec2	equ	0xFDD
  9044                           plusw2	equ	0xFDB
  9045                           fsr2h	equ	0xFDA
  9046                           fsr2l	equ	0xFD9
  9047                           status	equ	0xFD8
  9048                           
  9049 ;; *************** function _ultoa *****************
  9050 ;; Defined at:
  9051 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  9052 ;; Parameters:    Size  Location     Type
  9053 ;;  buf             2   17[BANK0 ] PTR unsigned char 
  9054 ;;		 -> wrkbuf(80), 
  9055 ;;  val             4   19[BANK0 ] unsigned long 
  9056 ;;  base            2   23[BANK0 ] int 
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  v               4   25[BANK0 ] unsigned long 
  9059 ;;  c               1   29[BANK0 ] unsigned char 
  9060 ;; Return value:  Size  Location     Type
  9061 ;;                  2   17[BANK0 ] PTR unsigned char 
  9062 ;; Registers used:
  9063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9064 ;; Tracked objects:
  9065 ;;		On entry : F/0
  9066 ;;		On exit  : F/0
  9067 ;;		Unchanged: 0/0
  9068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9069 ;;      Params:         0       8       0       0       0       0       0
  9070 ;;      Locals:         0       5       0       0       0       0       0
  9071 ;;      Temps:          0       0       0       0       0       0       0
  9072 ;;      Totals:         0      13       0       0       0       0       0
  9073 ;;Total ram usage:       13 bytes
  9074 ;; Hardware stack levels used:    1
  9075 ;; Hardware stack levels required when called:    4
  9076 ;; This function calls:
  9077 ;;		___lldiv
  9078 ;;		___llmod
  9079 ;; This function is called by:
  9080 ;;		_receiveSendEventSLCAN
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           	psect	text6
  9085  002544                     __ptext6:
  9086                           	opt stack 0
  9087  002544                     _ultoa:
  9088                           	opt stack 23
  9089                           
  9090                           ; BSR set to: 0
  9091                           
  9092                           ;incstack = 0
  9093                           ;incstack = 0
  9094  002544  C073  F079         	movff	ultoa@val,ultoa@v
  9095  002548  C074  F07A         	movff	ultoa@val+1,ultoa@v+1
  9096  00254C  C075  F07B         	movff	ultoa@val+2,ultoa@v+2
  9097  002550  C076  F07C         	movff	ultoa@val+3,ultoa@v+3
  9098  002554                     l17606:
  9099                           
  9100                           ; BSR set to: 0
  9101  002554  C079  F060         	movff	ultoa@v,?___lldiv
  9102  002558  C07A  F061         	movff	ultoa@v+1,?___lldiv+1
  9103  00255C  C07B  F062         	movff	ultoa@v+2,?___lldiv+2
  9104  002560  C07C  F063         	movff	ultoa@v+3,?___lldiv+3
  9105  002564  D858               	call	PL78	;call to abstracted procedure
  9106  002566  ECC2  F00B         	call	___lldiv	;wreg free
  9107  00256A  C063  F07C         	movff	?___lldiv+3,ultoa@v+3
  9108  00256E  C062  F07B         	movff	?___lldiv+2,ultoa@v+2
  9109  002572  C061  F07A         	movff	?___lldiv+1,ultoa@v+1
  9110  002576  C060  F079         	movff	?___lldiv,ultoa@v
  9111                           
  9112                           ; BSR set to: 0
  9113  00257A  4B71               	infsnz	ultoa@buf& (0+255),f,b
  9114  00257C  2B72               	incf	(ultoa@buf+1)& (0+255),f,b
  9115                           
  9116                           ; BSR set to: 0
  9117  00257E  517C               	movf	(ultoa@v+3)& (0+255),w,b
  9118  002580  1179               	iorwf	ultoa@v& (0+255),w,b
  9119  002582  117A               	iorwf	(ultoa@v+1)& (0+255),w,b
  9120  002584  117B               	iorwf	(ultoa@v+2)& (0+255),w,b
  9121  002586  E1E6               	bnz	l17606
  9122                           
  9123                           ; BSR set to: 0
  9124  002588  C071  FFD9         	movff	ultoa@buf,fsr2l
  9125  00258C  C072  FFDA         	movff	ultoa@buf+1,fsr2h
  9126  002590  6ADF               	clrf	indf2,c
  9127                           
  9128                           ; BSR set to: 0
  9129  002592  0771               	decf	ultoa@buf& (0+255),f,b
  9130  002594  A0D8               	btfss	status,0,c
  9131  002596  0772               	decf	(ultoa@buf+1)& (0+255),f,b
  9132  002598                     l17616:
  9133                           
  9134                           ; BSR set to: 0
  9135  002598  C073  F068         	movff	ultoa@val,?___llmod
  9136  00259C  C074  F069         	movff	ultoa@val+1,?___llmod+1
  9137  0025A0  C075  F06A         	movff	ultoa@val+2,?___llmod+2
  9138  0025A4  C076  F06B         	movff	ultoa@val+3,?___llmod+3
  9139  0025A8  C077  F06C         	movff	ultoa@base,?___llmod+4
  9140  0025AC  C078  F06D         	movff	ultoa@base+1,?___llmod+5
  9141  0025B0  0E00               	movlw	0
  9142  0025B2  BF6D               	btfsc	(?___llmod+5)& (0+255),7,b
  9143  0025B4  0EFF               	movlw	-1
  9144  0025B6  6F6E               	movwf	(?___llmod+6)& (0+255),b
  9145  0025B8  6F6F               	movwf	(?___llmod+7)& (0+255),b
  9146  0025BA  ECAF  F00A         	call	___llmod	;wreg free
  9147  0025BE  5168               	movf	?___llmod& (0+255),w,b
  9148  0025C0  6F7D               	movwf	ultoa@c& (0+255),b
  9149                           
  9150                           ; BSR set to: 0
  9151  0025C2  C073  F060         	movff	ultoa@val,?___lldiv
  9152  0025C6  C074  F061         	movff	ultoa@val+1,?___lldiv+1
  9153  0025CA  C075  F062         	movff	ultoa@val+2,?___lldiv+2
  9154  0025CE  C076  F063         	movff	ultoa@val+3,?___lldiv+3
  9155  0025D2  D821               	call	PL78	;call to abstracted procedure
  9156  0025D4  ECC2  F00B         	call	___lldiv	;wreg free
  9157  0025D8  C063  F076         	movff	?___lldiv+3,ultoa@val+3
  9158  0025DC  C062  F075         	movff	?___lldiv+2,ultoa@val+2
  9159  0025E0  C061  F074         	movff	?___lldiv+1,ultoa@val+1
  9160  0025E4  C060  F073         	movff	?___lldiv,ultoa@val
  9161                           
  9162                           ; BSR set to: 0
  9163  0025E8  0E09               	movlw	9
  9164  0025EA  657D               	cpfsgt	ultoa@c& (0+255),b
  9165  0025EC  D002               	goto	l2563
  9166                           
  9167                           ; BSR set to: 0
  9168  0025EE  0E07               	movlw	7
  9169  0025F0  277D               	addwf	ultoa@c& (0+255),f,b
  9170  0025F2                     l2563:
  9171                           
  9172                           ; BSR set to: 0
  9173  0025F2  0E30               	movlw	48
  9174  0025F4  277D               	addwf	ultoa@c& (0+255),f,b
  9175                           
  9176                           ; BSR set to: 0
  9177  0025F6  C071  FFD9         	movff	ultoa@buf,fsr2l
  9178  0025FA  C072  FFDA         	movff	ultoa@buf+1,fsr2h
  9179  0025FE  C07D  FFDF         	movff	ultoa@c,indf2
  9180                           
  9181                           ; BSR set to: 0
  9182  002602  0771               	decf	ultoa@buf& (0+255),f,b
  9183  002604  A0D8               	btfss	status,0,c
  9184  002606  0772               	decf	(ultoa@buf+1)& (0+255),f,b
  9185                           
  9186                           ; BSR set to: 0
  9187  002608  5176               	movf	(ultoa@val+3)& (0+255),w,b
  9188  00260A  1173               	iorwf	ultoa@val& (0+255),w,b
  9189  00260C  1174               	iorwf	(ultoa@val+1)& (0+255),w,b
  9190  00260E  1175               	iorwf	(ultoa@val+2)& (0+255),w,b
  9191  002610  B4D8               	btfsc	status,2,c
  9192                           
  9193                           ; BSR set to: 0
  9194  002612  0012               	return	
  9195  002614  D7C1               	goto	l17616
  9196  002616                     __end_of_ultoa:
  9197                           	opt stack 0
  9198  002616                     PL78:
  9199                           	opt stack 23
  9200  002616  C077  F064         	movff	ultoa@base,?___lldiv+4
  9201  00261A  C078  F065         	movff	ultoa@base+1,?___lldiv+5
  9202  00261E  0E00               	movlw	0
  9203  002620  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  9204  002622  0EFF               	movlw	-1
  9205  002624  6F66               	movwf	(?___lldiv+6)& (0+255),b
  9206  002626  6F67               	movwf	(?___lldiv+7)& (0+255),b
  9207  002628  0012               	return	
  9208  00262A                     __end_ofPL78:
  9209                           	opt stack 0
  9210                           tblptru	equ	0xFF8
  9211                           tblptrh	equ	0xFF7
  9212                           tblptrl	equ	0xFF6
  9213                           tablat	equ	0xFF5
  9214                           prodh	equ	0xFF4
  9215                           prodl	equ	0xFF3
  9216                           intcon	equ	0xFF2
  9217                           indf0	equ	0xFEF
  9218                           postinc0	equ	0xFEE
  9219                           fsr0h	equ	0xFEA
  9220                           fsr0l	equ	0xFE9
  9221                           wreg	equ	0xFE8
  9222                           indf1	equ	0xFE7
  9223                           postinc1	equ	0xFE6
  9224                           postdec1	equ	0xFE5
  9225                           fsr1h	equ	0xFE2
  9226                           fsr1l	equ	0xFE1
  9227                           indf2	equ	0xFDF
  9228                           postinc2	equ	0xFDE
  9229                           postdec2	equ	0xFDD
  9230                           plusw2	equ	0xFDB
  9231                           fsr2h	equ	0xFDA
  9232                           fsr2l	equ	0xFD9
  9233                           status	equ	0xFD8
  9234                           
  9235 ;; *************** function _doModeVscp *****************
  9236 ;; Defined at:
  9237 ;;		line 1395 in file "main.c"
  9238 ;; Parameters:    Size  Location     Type
  9239 ;;		None
  9240 ;; Auto vars:     Size  Location     Type
  9241 ;;  c               1   84[BANK0 ] unsigned char 
  9242 ;; Return value:  Size  Location     Type
  9243 ;;		None               void
  9244 ;; Registers used:
  9245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9246 ;; Tracked objects:
  9247 ;;		On entry : 0/1
  9248 ;;		On exit  : 0/0
  9249 ;;		Unchanged: 0/0
  9250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9251 ;;      Params:         0       0       0       0       0       0       0
  9252 ;;      Locals:         0       1       0       0       0       0       0
  9253 ;;      Temps:          0       0       0       0       0       0       0
  9254 ;;      Totals:         0       1       0       0       0       0       0
  9255 ;;Total ram usage:        1 bytes
  9256 ;; Hardware stack levels used:    1
  9257 ;; Hardware stack levels required when called:    7
  9258 ;; This function calls:
  9259 ;;		_fifo_read
  9260 ;;		_ECANSetOperationMode
  9261 ;;		_receiveSendMultiEventCANAL
  9262 ;;		_receiveSendEventCANAL
  9263 ;;		_calcCRC
  9264 ;;		_sendVSCPDriverNack
  9265 ;;		_sendVSCPDriverAck
  9266 ;;		_receiveVSCPModeCanalMsg
  9267 ;;		_receiveVSCPModeMultiCanalMsg
  9268 ;;		_sendVSCPModeCapabilities
  9269 ;;		_sendVSCPDriverCommandReply
  9270 ;;		_sendVSCPDriverErrorFrame
  9271 ;; This function is called by:
  9272 ;;		_main
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text7
  9277  003A38                     __ptext7:
  9278                           	opt stack 0
  9279  003A38                     _doModeVscp:
  9280                           	opt stack 22
  9281                           
  9282                           ;main.c: 1396: uint8_t c;
  9283                           ;main.c: 1399: if ( caps.maxCanalFrames > 1 ) {
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;incstack = 0
  9287                           ;incstack = 0
  9288  003A38  0101               	movlb	1	; () banked
  9289  003A3A  EE21  F0F8         	lfsr	2,_caps+1
  9290  003A3E  0E01               	movlw	1
  9291  003A40  64DF               	cpfsgt	indf2,c
  9292  003A42  D003               	goto	l15602
  9293                           
  9294                           ; BSR set to: 1
  9295                           ;main.c: 1402: receiveSendMultiEventCANAL();
  9296  003A44  ECB3  F01A         	call	_receiveSendMultiEventCANAL	;wreg free
  9297                           
  9298                           ;main.c: 1403: }
  9299  003A48  D002               	goto	l15604
  9300  003A4A                     l15602:
  9301                           
  9302                           ; BSR set to: 1
  9303                           ;main.c: 1404: else {
  9304                           ;main.c: 1407: receiveSendEventCANAL();
  9305  003A4A  ECCE  F017         	call	_receiveSendEventCANAL	;wreg free
  9306  003A4E                     l15604:
  9307                           
  9308                           ;main.c: 1408: }
  9309                           ;main.c: 1411: (INTCONbits.GIE = 0);
  9310  003A4E  9EF2               	bcf	intcon,7,c	;volatile
  9311                           
  9312                           ;main.c: 1413: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  9313  003A50  0E01               	movlw	high _serialInputFifo
  9314  003A52  0100               	movlb	0	; () banked
  9315  003A54  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  9316  003A56  0EE2               	movlw	low _serialInputFifo
  9317  003A58  6F60               	movwf	?_fifo_read& (0+255),b
  9318  003A5A  0E00               	movlw	high doModeVscp@c
  9319  003A5C  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  9320  003A5E  0EB4               	movlw	low doModeVscp@c
  9321  003A60  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  9322  003A62  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  9323  003A64  0E01               	movlw	1
  9324  003A66  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  9325  003A68  ECCC  F011         	call	_fifo_read	;wreg free
  9326  003A6C  0560               	decf	?_fifo_read& (0+255),w,b
  9327  003A6E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  9328  003A70  E001 D0C3          	bnz	l15752
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;main.c: 1416: (INTCONbits.GIE = 1);
  9332  003A74  8EF2               	bsf	intcon,7,c	;volatile
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;main.c: 1419: if ( pos >= sizeof( cmdbuf ) ) {
  9336  003A76  0E4F               	movlw	79
  9337  003A78  6432               	cpfsgt	_pos,c
  9338  003A7A  D003               	goto	l752
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;main.c: 1421: pos = 0;
  9342  003A7C  6A32               	clrf	_pos,c
  9343                           
  9344                           ;main.c: 1422: bDLE = 0;
  9345  003A7E  6A28               	clrf	_bDLE,c
  9346                           
  9347                           ;main.c: 1423: stateVscpDriver = 0;
  9348  003A80  6A35               	clrf	_stateVscpDriver,c
  9349  003A82                     l752:
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;main.c: 1424: }
  9353                           ;main.c: 1426: if ( 0 == stateVscpDriver ) {
  9354  003A82  6635               	tstfsz	_stateVscpDriver,c
  9355  003A84  D00D               	goto	l15626
  9356                           
  9357                           ; BSR set to: 0
  9358                           ;main.c: 1428: if ( bDLE ) {
  9359  003A86  5028               	movf	_bDLE,w,c
  9360  003A88  E008               	bz	l15622
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;main.c: 1430: bDLE = 0;
  9364  003A8A  6A28               	clrf	_bDLE,c
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;main.c: 1433: if ( 0x02 == c ) {
  9368  003A8C  51B4               	movf	doModeVscp@c& (0+255),w,b
  9369  003A8E  0A02               	xorlw	2
  9370  003A90  E12A               	bnz	l15662
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;main.c: 1434: stateVscpDriver = 1;
  9374  003A92  0E01               	movlw	1
  9375  003A94  6E35               	movwf	_stateVscpDriver,c
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;main.c: 1435: pos = 0;
  9379  003A96  6A32               	clrf	_pos,c
  9380  003A98  D026               	goto	l15662
  9381  003A9A                     l15622:
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;main.c: 1438: else {
  9385                           ;main.c: 1439: bDLE = 1;
  9386  003A9A  0E01               	movlw	1
  9387  003A9C  6E28               	movwf	_bDLE,c
  9388  003A9E  D0AE               	goto	l757
  9389  003AA0                     l15626:
  9390                           
  9391                           ; BSR set to: 0
  9392                           ;main.c: 1443: else if ( 1 == stateVscpDriver ) {
  9393  003AA0  0435               	decf	_stateVscpDriver,w,c
  9394  003AA2  E121               	bnz	l15662
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;main.c: 1446: if ( bDLE ) {
  9398  003AA4  5028               	movf	_bDLE,w,c
  9399  003AA6  E01B               	bz	l15646
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;main.c: 1449: bDLE = 0;
  9403  003AA8  6A28               	clrf	_bDLE,c
  9404                           
  9405                           ; BSR set to: 0
  9406                           ;main.c: 1452: if ( 0x03 == c ) {
  9407  003AAA  51B4               	movf	doModeVscp@c& (0+255),w,b
  9408  003AAC  0A03               	xorlw	3
  9409  003AAE  E103               	bnz	l15636
  9410                           
  9411                           ; BSR set to: 0
  9412                           ;main.c: 1453: stateVscpDriver = 2;
  9413  003AB0  0E02               	movlw	2
  9414  003AB2  6E35               	movwf	_stateVscpDriver,c
  9415                           
  9416                           ;main.c: 1454: }
  9417  003AB4  D018               	goto	l15662
  9418  003AB6                     l15636:
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;main.c: 1456: else if (0x10 == c) {
  9422  003AB6  51B4               	movf	doModeVscp@c& (0+255),w,b
  9423  003AB8  0A10               	xorlw	16
  9424  003ABA  E115               	bnz	l15662
  9425  003ABC                     u19890:
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;main.c: 1458: cmdbuf[ pos++ ] = c;
  9429  003ABC  0E32               	movlw	low _cmdbuf
  9430  003ABE  2432               	addwf	_pos,w,c
  9431  003AC0  6ED9               	movwf	fsr2l,c
  9432  003AC2  6ADA               	clrf	fsr2h,c
  9433  003AC4  0E01               	movlw	high _cmdbuf
  9434  003AC6  22DA               	addwfc	fsr2h,f,c
  9435  003AC8  0100               	movlb	0	; () banked
  9436  003ACA  C0B4  FFDF         	movff	doModeVscp@c,indf2
  9437                           
  9438                           ; BSR set to: 0
  9439  003ACE  2A32               	incf	_pos,f,c
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;main.c: 1459: if ( pos >= sizeof( cmdbuf ) ) {
  9443  003AD0  0E4F               	movlw	79
  9444  003AD2  6432               	cpfsgt	_pos,c
  9445  003AD4  D093               	goto	l757
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;main.c: 1462: bDLE = 0;
  9449  003AD6  6A28               	clrf	_bDLE,c
  9450                           
  9451                           ;main.c: 1463: pos = 0;
  9452  003AD8  6A32               	clrf	_pos,c
  9453                           
  9454                           ;main.c: 1464: stateVscpDriver = 0;
  9455  003ADA  6A35               	clrf	_stateVscpDriver,c
  9456  003ADC  D08F               	goto	l757
  9457  003ADE                     l15646:
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;main.c: 1469: else {
  9461                           ;main.c: 1470: if (0x10 == c) {
  9462  003ADE  51B4               	movf	doModeVscp@c& (0+255),w,b
  9463  003AE0  0A10               	xorlw	16
  9464  003AE2  E0DB               	bz	l15622
  9465  003AE4  D7EB               	goto	u19890
  9466  003AE6                     l15662:
  9467                           
  9468                           ; BSR set to: 0
  9469                           ;main.c: 1486: }
  9470                           ;main.c: 1487: }
  9471                           ;main.c: 1488: }
  9472                           ;main.c: 1490: if (2 == stateVscpDriver) {
  9473  003AE6  5035               	movf	_stateVscpDriver,w,c
  9474  003AE8  0A02               	xorlw	2
  9475  003AEA  E001 D086          	bnz	l15752
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;main.c: 1493: stateVscpDriver = 0;
  9479  003AEE  6A35               	clrf	_stateVscpDriver,c
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;main.c: 1505: if (calcCRC(cmdbuf, pos)) {
  9483  003AF0  0E01               	movlw	high _cmdbuf
  9484  003AF2  0100               	movlb	0	; () banked
  9485  003AF4  6F68               	movwf	(?_calcCRC+1)& (0+255),b
  9486  003AF6  0E32               	movlw	low _cmdbuf
  9487  003AF8  6F67               	movwf	?_calcCRC& (0+255),b
  9488  003AFA  C032  F069         	movff	_pos,?_calcCRC+2
  9489  003AFE  EC88  F007         	call	_calcCRC	;wreg free
  9490  003B02  0900               	iorlw	0
  9491  003B04  E003               	bz	l770
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;main.c: 1506: sendVSCPDriverNack();
  9495  003B06  EC39  F00E         	call	_sendVSCPDriverNack	;wreg free
  9496  003B0A  D078               	goto	l757
  9497  003B0C                     l770:
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;main.c: 1508: }
  9501                           ;main.c: 1511: if (0 ==
  9502                           ;main.c: 1512: cmdbuf[ 0 ]) {
  9503  003B0C  0101               	movlb	1	; () banked
  9504  003B0E  6732               	tstfsz	_cmdbuf& (0+255),b
  9505  003B10  D003               	goto	l15674
  9506  003B12                     l15672:
  9507                           
  9508                           ;main.c: 1513: sendVSCPDriverAck();
  9509  003B12  EC8B  F00E         	call	_sendVSCPDriverAck	;wreg free
  9510                           
  9511                           ;main.c: 1514: }
  9512  003B16  D06F               	goto	l15748
  9513  003B18                     l15674:
  9514                           
  9515                           ; BSR set to: 1
  9516                           ;main.c: 1516: else if (1 ==
  9517                           ;main.c: 1517: cmdbuf[ 0 ]) {
  9518  003B18  0532               	decf	_cmdbuf& (0+255),w,b
  9519  003B1A  E103               	bnz	l15678
  9520  003B1C                     l15676:
  9521                           
  9522                           ;main.c: 1518: sendVSCPDriverNack();
  9523  003B1C  EC39  F00E         	call	_sendVSCPDriverNack	;wreg free
  9524                           
  9525                           ;main.c: 1519: }
  9526  003B20  D06A               	goto	l15748
  9527  003B22                     l15678:
  9528                           
  9529                           ; BSR set to: 1
  9530                           ;main.c: 1521: else if (2 ==
  9531                           ;main.c: 1522: cmdbuf[ 0 ]) {
  9532  003B22  5132               	movf	_cmdbuf& (0+255),w,b
  9533  003B24  0A02               	xorlw	2
  9534  003B26  E105               	bnz	l15686
  9535                           
  9536                           ; BSR set to: 1
  9537                           ;main.c: 1523: if ( receiveVSCPModeCanalMsg() ) {
  9538  003B28  EC15  F013         	call	_receiveVSCPModeCanalMsg	;wreg free
  9539  003B2C  0900               	iorlw	0
  9540  003B2E  E1F1               	bnz	l15672
  9541  003B30  D7F5               	goto	l15676
  9542  003B32                     l15686:
  9543                           
  9544                           ; BSR set to: 1
  9545                           ;main.c: 1531: else if (6 ==
  9546                           ;main.c: 1532: cmdbuf[ 0 ]) {
  9547  003B32  5132               	movf	_cmdbuf& (0+255),w,b
  9548  003B34  0A06               	xorlw	6
  9549  003B36  E103               	bnz	l15694
  9550                           
  9551                           ; BSR set to: 1
  9552                           ;main.c: 1533: if (receiveVSCPModeMultiCanalMsg()) {
  9553  003B38  ECB1  F006         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  9554  003B3C  D7F7               	goto	L4
  9555  003B3E                     l15694:
  9556                           
  9557                           ; BSR set to: 1
  9558                           ;main.c: 1541: else if (6 ==
  9559                           ;main.c: 1542: cmdbuf[ 0 ]) {
  9560  003B3E  5132               	movf	_cmdbuf& (0+255),w,b
  9561  003B40  0A06               	xorlw	6
  9562  003B42  E0EC               	bz	l15676
  9563                           
  9564                           ; BSR set to: 1
  9565                           ;main.c: 1546: else if (3 ==
  9566                           ;main.c: 1547: cmdbuf[ 0 ]) {
  9567  003B44  5132               	movf	_cmdbuf& (0+255),w,b
  9568  003B46  0A03               	xorlw	3
  9569  003B48  E0E9               	bz	l15676
  9570                           
  9571                           ; BSR set to: 1
  9572                           ;main.c: 1551: else if (4 ==
  9573                           ;main.c: 1552: cmdbuf[ 0 ]) {
  9574  003B4A  5132               	movf	_cmdbuf& (0+255),w,b
  9575  003B4C  0A04               	xorlw	4
  9576  003B4E  E0E6               	bz	l15676
  9577                           
  9578                           ; BSR set to: 1
  9579                           ;main.c: 1556: else if (8 ==
  9580                           ;main.c: 1557: cmdbuf[ 0 ]) {
  9581  003B50  5132               	movf	_cmdbuf& (0+255),w,b
  9582  003B52  0A08               	xorlw	8
  9583  003B54  E107               	bnz	l15712
  9584                           
  9585                           ; BSR set to: 1
  9586                           ;main.c: 1558: caps.maxVscpFrames = cmdbuf[ 5 ];
  9587  003B56  C137  F1F7         	movff	_cmdbuf+5,_caps
  9588                           
  9589                           ;main.c: 1559: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  9590  003B5A  C138  F1F8         	movff	_cmdbuf+6,_caps+1
  9591                           
  9592                           ; BSR set to: 1
  9593                           ;main.c: 1560: sendVSCPModeCapabilities();
  9594  003B5E  ECE0  F00F         	call	_sendVSCPModeCapabilities	;wreg free
  9595                           
  9596                           ;main.c: 1561: }
  9597  003B62  D049               	goto	l15748
  9598  003B64                     l15712:
  9599                           
  9600                           ; BSR set to: 1
  9601                           ;main.c: 1563: else if (255 ==
  9602                           ;main.c: 1564: cmdbuf[ 0 ]) {
  9603  003B64  2932               	incf	_cmdbuf& (0+255),w,b
  9604  003B66  E144               	bnz	l15746
  9605                           
  9606                           ; BSR set to: 1
  9607                           ;main.c: 1566: if (cmdbuf[ 5 ] ==
  9608                           ;main.c: 1567: 0) {
  9609  003B68  6737               	tstfsz	(_cmdbuf+5)& (0+255),b
  9610  003B6A  D006               	goto	l15718
  9611                           
  9612                           ; BSR set to: 1
  9613                           ;main.c: 1568: sendVSCPDriverCommandReply(0, 0);
  9614  003B6C  0E00               	movlw	0
  9615  003B6E  0100               	movlb	0	; () banked
  9616  003B70  6B6A               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9617  003B72  EC35  F012         	call	_sendVSCPDriverCommandReply
  9618                           
  9619                           ;main.c: 1569: }
  9620  003B76  D03F               	goto	l15748
  9621  003B78                     l15718:
  9622                           
  9623                           ; BSR set to: 1
  9624                           ;main.c: 1571: else if (cmdbuf[ 5 ] ==
  9625                           ;main.c: 1572: 1) {
  9626  003B78  0537               	decf	(_cmdbuf+5)& (0+255),w,b
  9627  003B7A  E10A               	bnz	l15724
  9628                           
  9629                           ; BSR set to: 1
  9630                           ;main.c: 1573: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  9631  003B7C  0E00               	movlw	0
  9632  003B7E  ECFD  F006         	call	_ECANSetOperationMode
  9633                           
  9634                           ;main.c: 1574: sendVSCPDriverCommandReply(0, 1);
  9635  003B82  0E01               	movlw	1
  9636  003B84  0100               	movlb	0	; () banked
  9637  003B86  6F6A               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9638  003B88  0E00               	movlw	0
  9639  003B8A  EC35  F012         	call	_sendVSCPDriverCommandReply
  9640                           
  9641                           ;main.c: 1575: }
  9642  003B8E  D033               	goto	l15748
  9643  003B90                     l15724:
  9644                           
  9645                           ; BSR set to: 1
  9646                           ;main.c: 1577: else if (cmdbuf[ 5 ] ==
  9647                           ;main.c: 1578: 2) {
  9648  003B90  5137               	movf	(_cmdbuf+5)& (0+255),w,b
  9649  003B92  0A02               	xorlw	2
  9650  003B94  E10A               	bnz	l15730
  9651                           
  9652                           ; BSR set to: 1
  9653                           ;main.c: 1579: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  9654  003B96  0E40               	movlw	64
  9655  003B98  ECFD  F006         	call	_ECANSetOperationMode
  9656                           
  9657                           ;main.c: 1580: sendVSCPDriverCommandReply(0, 2);
  9658  003B9C  0E02               	movlw	2
  9659  003B9E  0100               	movlb	0	; () banked
  9660  003BA0  6F6A               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9661  003BA2  0E00               	movlw	0
  9662  003BA4  EC35  F012         	call	_sendVSCPDriverCommandReply
  9663                           
  9664                           ;main.c: 1581: }
  9665  003BA8  D026               	goto	l15748
  9666  003BAA                     l15730:
  9667                           
  9668                           ; BSR set to: 1
  9669                           ;main.c: 1583: else if (cmdbuf[ 5 ] ==
  9670                           ;main.c: 1584: 3) {
  9671  003BAA  5137               	movf	(_cmdbuf+5)& (0+255),w,b
  9672  003BAC  0A03               	xorlw	3
  9673  003BAE  E10A               	bnz	l15736
  9674                           
  9675                           ; BSR set to: 1
  9676                           ;main.c: 1585: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  9677  003BB0  0E60               	movlw	96
  9678  003BB2  ECFD  F006         	call	_ECANSetOperationMode
  9679                           
  9680                           ;main.c: 1586: sendVSCPDriverCommandReply(0, 3);
  9681  003BB6  0E03               	movlw	3
  9682  003BB8  0100               	movlb	0	; () banked
  9683  003BBA  6F6A               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9684  003BBC  0E00               	movlw	0
  9685  003BBE  EC35  F012         	call	_sendVSCPDriverCommandReply
  9686                           
  9687                           ;main.c: 1587: }
  9688  003BC2  D019               	goto	l15748
  9689  003BC4                     l15736:
  9690                           
  9691                           ; BSR set to: 1
  9692                           ;main.c: 1589: else if (cmdbuf[ 5 ] ==
  9693                           ;main.c: 1590: 4) {
  9694  003BC4  5137               	movf	(_cmdbuf+5)& (0+255),w,b
  9695  003BC6  0A04               	xorlw	4
  9696  003BC8  E10A               	bnz	l15742
  9697                           
  9698                           ; BSR set to: 1
  9699                           ;main.c: 1591: ECANSetOperationMode(0x20);
  9700  003BCA  0E20               	movlw	32
  9701  003BCC  ECFD  F006         	call	_ECANSetOperationMode
  9702                           
  9703                           ;main.c: 1592: sendVSCPDriverCommandReply(0, 4);
  9704  003BD0  0E04               	movlw	4
  9705  003BD2  0100               	movlb	0	; () banked
  9706  003BD4  6F6A               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9707  003BD6  0E00               	movlw	0
  9708  003BD8  EC35  F012         	call	_sendVSCPDriverCommandReply
  9709                           
  9710                           ;main.c: 1593: }
  9711  003BDC  D00C               	goto	l15748
  9712  003BDE                     l15742:
  9713                           
  9714                           ; BSR set to: 1
  9715                           ;main.c: 1595: else if (cmdbuf[ 5 ] ==
  9716                           ;main.c: 1596: 5) {
  9717  003BDE  5137               	movf	(_cmdbuf+5)& (0+255),w,b
  9718  003BE0  0A05               	xorlw	5
  9719  003BE2  E109               	bnz	l15748
  9720                           
  9721                           ; BSR set to: 1
  9722                           ;main.c: 1597: sendVSCPDriverCommandReply(0, 0);
  9723  003BE4  0E00               	movlw	0
  9724  003BE6  0100               	movlb	0	; () banked
  9725  003BE8  6B6A               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9726  003BEA  EC35  F012         	call	_sendVSCPDriverCommandReply
  9727  003BEE  D003               	goto	l15748
  9728  003BF0                     l15746:
  9729                           
  9730                           ; BSR set to: 1
  9731                           ;main.c: 1602: else {
  9732                           ;main.c: 1604: sendVSCPDriverErrorFrame(2);
  9733  003BF0  0E02               	movlw	2
  9734  003BF2  EC3D  F010         	call	_sendVSCPDriverErrorFrame
  9735  003BF6                     l15748:
  9736                           
  9737                           ;main.c: 1605: }
  9738                           ;main.c: 1608: pos = 0;
  9739  003BF6  6A32               	clrf	_pos,c
  9740                           
  9741                           ;main.c: 1609: stateVscpDriver = 0;
  9742  003BF8  6A35               	clrf	_stateVscpDriver,c
  9743  003BFA                     l15752:
  9744                           
  9745                           ;main.c: 1611: }
  9746                           ;main.c: 1613: }
  9747                           ;main.c: 1616: (INTCONbits.GIE = 1);
  9748  003BFA  8EF2               	bsf	intcon,7,c	;volatile
  9749  003BFC                     l757:
  9750  003BFC  0012               	return	
  9751  003BFE                     __end_of_doModeVscp:
  9752                           	opt stack 0
  9753                           tblptru	equ	0xFF8
  9754                           tblptrh	equ	0xFF7
  9755                           tblptrl	equ	0xFF6
  9756                           tablat	equ	0xFF5
  9757                           prodh	equ	0xFF4
  9758                           prodl	equ	0xFF3
  9759                           intcon	equ	0xFF2
  9760                           indf0	equ	0xFEF
  9761                           postinc0	equ	0xFEE
  9762                           fsr0h	equ	0xFEA
  9763                           fsr0l	equ	0xFE9
  9764                           wreg	equ	0xFE8
  9765                           indf1	equ	0xFE7
  9766                           postinc1	equ	0xFE6
  9767                           postdec1	equ	0xFE5
  9768                           fsr1h	equ	0xFE2
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           postdec2	equ	0xFDD
  9773                           plusw2	equ	0xFDB
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9779 ;; Defined at:
  9780 ;;		line 1877 in file "main.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  errorcode       1    wreg     unsigned char 
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;  errorcode       1   10[BANK0 ] unsigned char 
  9785 ;;  crc             1   11[BANK0 ] unsigned char 
  9786 ;; Return value:  Size  Location     Type
  9787 ;;		None               void
  9788 ;; Registers used:
  9789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : F/1
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9795 ;;      Params:         0       0       0       0       0       0       0
  9796 ;;      Locals:         0       2       0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0
  9798 ;;      Totals:         0       2       0       0       0       0       0
  9799 ;;Total ram usage:        2 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    6
  9802 ;; This function calls:
  9803 ;;		_WriteUSART
  9804 ;;		_sendEscapedUartData
  9805 ;;		_crc8
  9806 ;; This function is called by:
  9807 ;;		_doModeVscp
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           	psect	text8
  9812  00207A                     __ptext8:
  9813                           	opt stack 0
  9814  00207A                     _sendVSCPDriverErrorFrame:
  9815                           	opt stack 22
  9816                           
  9817                           ;incstack = 0
  9818                           ;incstack = 0
  9819                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9820  00207A  CFE8 F06A          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9821                           
  9822                           ; BSR set to: 1
  9823                           ;main.c: 1878: uint8_t crc = 0;
  9824  00207E  0100               	movlb	0	; () banked
  9825  002080  6B6B               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9826  002082                     l875:
  9827  002082  A2AC               	btfss	4012,1,c	;volatile
  9828  002084  D7FE               	goto	l875
  9829                           
  9830                           ;main.c: 1882: WriteUSART(0x10);
  9831  002086  0E10               	movlw	16
  9832  002088  ECE7  F006         	call	_WriteUSART
  9833  00208C                     l878:
  9834  00208C  A2AC               	btfss	4012,1,c	;volatile
  9835  00208E  D7FE               	goto	l878
  9836                           
  9837                           ;main.c: 1884: WriteUSART(0x02);
  9838  002090  0E02               	movlw	2
  9839  002092  ECE7  F006         	call	_WriteUSART
  9840  002096                     l881:
  9841  002096  A2AC               	btfss	4012,1,c	;volatile
  9842  002098  D7FE               	goto	l881
  9843                           
  9844                           ;main.c: 1888: WriteUSART(253);
  9845  00209A  0EFD               	movlw	253
  9846  00209C  ECE7  F006         	call	_WriteUSART
  9847                           
  9848                           ;main.c: 1889: crc8(&crc, 253);
  9849  0020A0  0100               	movlb	0	; () banked
  9850  0020A2  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9851  0020A4  6E20               	movwf	?_crc8+1,c
  9852  0020A6  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
  9853  0020A8  6E1F               	movwf	?_crc8,c
  9854  0020AA  0EFD               	movlw	253
  9855  0020AC  6E21               	movwf	?_crc8+2,c
  9856  0020AE  ECEF  F007         	call	_crc8	;wreg free
  9857  0020B2                     l884:
  9858  0020B2  A2AC               	btfss	4012,1,c	;volatile
  9859  0020B4  D7FE               	goto	l884
  9860                           
  9861                           ;main.c: 1893: WriteUSART(0);
  9862  0020B6  0E00               	movlw	0
  9863  0020B8  ECE7  F006         	call	_WriteUSART
  9864                           
  9865                           ;main.c: 1894: crc8(&crc, 0);
  9866  0020BC  D839               	call	PL104	;call to abstracted procedure
  9867  0020BE  ECEF  F007         	call	_crc8	;wreg free
  9868                           
  9869                           ; BSR set to: 3
  9870                           ;main.c: 1897: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9871  0020C2  0100               	movlb	0	; () banked
  9872  0020C4  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9873  0020C6  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9874  0020C8  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
  9875  0020CA  6F67               	movwf	?_sendEscapedUartData& (0+255),b
  9876  0020CC  0101               	movlb	1	; () banked
  9877  0020CE  5134               	movf	(_cmdbuf+2)& (0+255),w,b
  9878  0020D0  EC7F  F00A         	call	_sendEscapedUartData
  9879  0020D4                     l887:
  9880  0020D4  A2AC               	btfss	4012,1,c	;volatile
  9881  0020D6  D7FE               	goto	l887
  9882                           
  9883                           ;main.c: 1901: WriteUSART(0);
  9884  0020D8  0E00               	movlw	0
  9885  0020DA  ECE7  F006         	call	_WriteUSART
  9886                           
  9887                           ;main.c: 1902: crc8(&crc, 0);
  9888  0020DE  D828               	call	PL104	;call to abstracted procedure
  9889  0020E0  ECEF  F007         	call	_crc8	;wreg free
  9890  0020E4                     l890:
  9891  0020E4  A2AC               	btfss	4012,1,c	;volatile
  9892  0020E6  D7FE               	goto	l890
  9893                           
  9894                           ;main.c: 1904: WriteUSART(1);
  9895  0020E8  0E01               	movlw	1
  9896  0020EA  ECE7  F006         	call	_WriteUSART
  9897                           
  9898                           ;main.c: 1905: crc8(&crc, 1);
  9899  0020EE  0100               	movlb	0	; () banked
  9900  0020F0  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9901  0020F2  6E20               	movwf	?_crc8+1,c
  9902  0020F4  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
  9903  0020F6  6E1F               	movwf	?_crc8,c
  9904  0020F8  0E01               	movlw	1
  9905  0020FA  6E21               	movwf	?_crc8+2,c
  9906  0020FC  ECEF  F007         	call	_crc8	;wreg free
  9907                           
  9908                           ; BSR set to: 3
  9909                           ;main.c: 1908: sendEscapedUartData(errorcode, &crc);
  9910  002100  0100               	movlb	0	; () banked
  9911  002102  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9912  002104  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9913  002106  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
  9914  002108  6F67               	movwf	?_sendEscapedUartData& (0+255),b
  9915  00210A  516A               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9916  00210C  EC7F  F00A         	call	_sendEscapedUartData
  9917                           
  9918                           ;main.c: 1911: sendEscapedUartData(crc, (0));
  9919  002110  0100               	movlb	0	; () banked
  9920  002112  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9921  002114  6B67               	clrf	?_sendEscapedUartData& (0+255),b
  9922  002116  516B               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9923  002118  EC7F  F00A         	call	_sendEscapedUartData
  9924  00211C                     l893:
  9925  00211C  A2AC               	btfss	4012,1,c	;volatile
  9926  00211E  D7FE               	goto	l893
  9927                           
  9928                           ;main.c: 1915: WriteUSART(0x10);
  9929  002120  0E10               	movlw	16
  9930  002122  ECE7  F006         	call	_WriteUSART
  9931  002126                     l896:
  9932  002126  A2AC               	btfss	4012,1,c	;volatile
  9933  002128  D7FE               	goto	l896
  9934                           
  9935                           ;main.c: 1917: WriteUSART(0x03);
  9936  00212A  0E03               	movlw	3
  9937  00212C  EFE7  F006         	goto	_WriteUSART
  9938  002130                     __end_of_sendVSCPDriverErrorFrame:
  9939                           	opt stack 0
  9940  002130                     PL104:
  9941                           	opt stack 22
  9942  002130  0100               	movlb	0	; () banked
  9943  002132  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9944  002134  6E20               	movwf	?_crc8+1,c
  9945  002136  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
  9946  002138  6E1F               	movwf	?_crc8,c
  9947  00213A  6A21               	clrf	?_crc8+2,c
  9948  00213C  0C00               	retlw	0
  9949  00213E                     __end_ofPL104:
  9950                           	opt stack 0
  9951                           tblptru	equ	0xFF8
  9952                           tblptrh	equ	0xFF7
  9953                           tblptrl	equ	0xFF6
  9954                           tablat	equ	0xFF5
  9955                           prodh	equ	0xFF4
  9956                           prodl	equ	0xFF3
  9957                           intcon	equ	0xFF2
  9958                           indf0	equ	0xFEF
  9959                           postinc0	equ	0xFEE
  9960                           fsr0h	equ	0xFEA
  9961                           fsr0l	equ	0xFE9
  9962                           wreg	equ	0xFE8
  9963                           indf1	equ	0xFE7
  9964                           postinc1	equ	0xFE6
  9965                           postdec1	equ	0xFE5
  9966                           fsr1h	equ	0xFE2
  9967                           fsr1l	equ	0xFE1
  9968                           indf2	equ	0xFDF
  9969                           postinc2	equ	0xFDE
  9970                           postdec2	equ	0xFDD
  9971                           plusw2	equ	0xFDB
  9972                           fsr2h	equ	0xFDA
  9973                           fsr2l	equ	0xFD9
  9974                           status	equ	0xFD8
  9975                           
  9976 ;; *************** function _sendVSCPDriverCommandReply *****************
  9977 ;; Defined at:
  9978 ;;		line 2014 in file "main.c"
  9979 ;; Parameters:    Size  Location     Type
  9980 ;;  cmdReplyCode    1    wreg     unsigned char 
  9981 ;;  cmdCode         1   10[BANK0 ] unsigned char 
  9982 ;; Auto vars:     Size  Location     Type
  9983 ;;  cmdReplyCode    1   11[BANK0 ] unsigned char 
  9984 ;;  crc             1   12[BANK0 ] unsigned char 
  9985 ;; Return value:  Size  Location     Type
  9986 ;;		None               void
  9987 ;; Registers used:
  9988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9989 ;; Tracked objects:
  9990 ;;		On entry : F/0
  9991 ;;		On exit  : 0/0
  9992 ;;		Unchanged: 0/0
  9993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9994 ;;      Params:         0       1       0       0       0       0       0
  9995 ;;      Locals:         0       2       0       0       0       0       0
  9996 ;;      Temps:          0       0       0       0       0       0       0
  9997 ;;      Totals:         0       3       0       0       0       0       0
  9998 ;;Total ram usage:        3 bytes
  9999 ;; Hardware stack levels used:    1
 10000 ;; Hardware stack levels required when called:    6
 10001 ;; This function calls:
 10002 ;;		_WriteUSART
 10003 ;;		_sendEscapedUartData
 10004 ;;		_crc8
 10005 ;; This function is called by:
 10006 ;;		_doModeVscp
 10007 ;; This function uses a non-reentrant model
 10008 ;;
 10009                           
 10010                           	psect	text9
 10011  00246A                     __ptext9:
 10012                           	opt stack 0
 10013  00246A                     _sendVSCPDriverCommandReply:
 10014                           	opt stack 22
 10015                           
 10016                           ;incstack = 0
 10017                           ;incstack = 0
 10018                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
 10019  00246A  CFE8 F06B          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;main.c: 2015: uint8_t crc = 0;
 10023  00246E  6B6C               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
 10024  002470                     l956:
 10025                           
 10026                           ; BSR set to: 0
 10027  002470  A2AC               	btfss	4012,1,c	;volatile
 10028  002472  D7FE               	goto	l956
 10029                           
 10030                           ; BSR set to: 0
 10031                           ;main.c: 2019: WriteUSART(0x10);
 10032  002474  0E10               	movlw	16
 10033  002476  ECE7  F006         	call	_WriteUSART
 10034  00247A                     l959:
 10035  00247A  A2AC               	btfss	4012,1,c	;volatile
 10036  00247C  D7FE               	goto	l959
 10037                           
 10038                           ;main.c: 2021: WriteUSART(0x02);
 10039  00247E  0E02               	movlw	2
 10040  002480  ECE7  F006         	call	_WriteUSART
 10041  002484                     l962:
 10042  002484  A2AC               	btfss	4012,1,c	;volatile
 10043  002486  D7FE               	goto	l962
 10044                           
 10045                           ;main.c: 2025: WriteUSART(254);
 10046  002488  0EFE               	movlw	254
 10047  00248A  ECE7  F006         	call	_WriteUSART
 10048                           
 10049                           ;main.c: 2026: crc8(&crc, 254);
 10050  00248E  0100               	movlb	0	; () banked
 10051  002490  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10052  002492  6E20               	movwf	?_crc8+1,c
 10053  002494  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10054  002496  6E1F               	movwf	?_crc8,c
 10055  002498  0EFE               	movlw	254
 10056  00249A  6E21               	movwf	?_crc8+2,c
 10057  00249C  ECEF  F007         	call	_crc8	;wreg free
 10058  0024A0                     l965:
 10059  0024A0  A2AC               	btfss	4012,1,c	;volatile
 10060  0024A2  D7FE               	goto	l965
 10061                           
 10062                           ;main.c: 2030: WriteUSART(0);
 10063  0024A4  0E00               	movlw	0
 10064  0024A6  ECE7  F006         	call	_WriteUSART
 10065                           
 10066                           ;main.c: 2031: crc8(&crc, 0);
 10067  0024AA  D845               	call	PL108	;call to abstracted procedure
 10068  0024AC  ECEF  F007         	call	_crc8	;wreg free
 10069                           
 10070                           ; BSR set to: 3
 10071                           ;main.c: 2034: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10072  0024B0  0100               	movlb	0	; () banked
 10073  0024B2  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10074  0024B4  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10075  0024B6  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10076  0024B8  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10077  0024BA  0101               	movlb	1	; () banked
 10078  0024BC  5134               	movf	(_cmdbuf+2)& (0+255),w,b
 10079  0024BE  EC7F  F00A         	call	_sendEscapedUartData
 10080  0024C2                     l968:
 10081  0024C2  A2AC               	btfss	4012,1,c	;volatile
 10082  0024C4  D7FE               	goto	l968
 10083                           
 10084                           ;main.c: 2038: WriteUSART(0);
 10085  0024C6  0E00               	movlw	0
 10086  0024C8  ECE7  F006         	call	_WriteUSART
 10087                           
 10088                           ;main.c: 2039: crc8(&crc, 0);
 10089  0024CC  D834               	call	PL108	;call to abstracted procedure
 10090  0024CE  ECEF  F007         	call	_crc8	;wreg free
 10091  0024D2                     l971:
 10092  0024D2  A2AC               	btfss	4012,1,c	;volatile
 10093  0024D4  D7FE               	goto	l971
 10094                           
 10095                           ;main.c: 2041: WriteUSART(2);
 10096  0024D6  0E02               	movlw	2
 10097  0024D8  ECE7  F006         	call	_WriteUSART
 10098                           
 10099                           ;main.c: 2042: crc8(&crc, 2);
 10100  0024DC  0100               	movlb	0	; () banked
 10101  0024DE  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10102  0024E0  6E20               	movwf	?_crc8+1,c
 10103  0024E2  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10104  0024E4  6E1F               	movwf	?_crc8,c
 10105  0024E6  0E02               	movlw	2
 10106  0024E8  6E21               	movwf	?_crc8+2,c
 10107  0024EA  ECEF  F007         	call	_crc8	;wreg free
 10108  0024EE                     l974:
 10109  0024EE  A2AC               	btfss	4012,1,c	;volatile
 10110  0024F0  D7FE               	goto	l974
 10111                           
 10112                           ;main.c: 2046: sendEscapedUartData(cmdReplyCode, &crc);
 10113  0024F2  0100               	movlb	0	; () banked
 10114  0024F4  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10115  0024F6  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10116  0024F8  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10117  0024FA  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10118  0024FC  516B               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
 10119  0024FE  EC7F  F00A         	call	_sendEscapedUartData
 10120  002502                     l977:
 10121  002502  A2AC               	btfss	4012,1,c	;volatile
 10122  002504  D7FE               	goto	l977
 10123                           
 10124                           ;main.c: 2050: sendEscapedUartData(cmdCode, &crc);
 10125  002506  0100               	movlb	0	; () banked
 10126  002508  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10127  00250A  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10128  00250C  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10129  00250E  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10130  002510  516A               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
 10131  002512  EC7F  F00A         	call	_sendEscapedUartData
 10132                           
 10133                           ;main.c: 2053: sendEscapedUartData(crc, (0));
 10134  002516  0100               	movlb	0	; () banked
 10135  002518  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10136  00251A  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 10137  00251C  516C               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
 10138  00251E  EC7F  F00A         	call	_sendEscapedUartData
 10139  002522                     l980:
 10140  002522  A2AC               	btfss	4012,1,c	;volatile
 10141  002524  D7FE               	goto	l980
 10142                           
 10143                           ;main.c: 2057: WriteUSART(0x10);
 10144  002526  0E10               	movlw	16
 10145  002528  ECE7  F006         	call	_WriteUSART
 10146  00252C                     l983:
 10147  00252C  A2AC               	btfss	4012,1,c	;volatile
 10148  00252E  D7FE               	goto	l983
 10149                           
 10150                           ;main.c: 2059: WriteUSART(0x03);
 10151  002530  0E03               	movlw	3
 10152  002532  EFE7  F006         	goto	_WriteUSART
 10153  002536                     __end_of_sendVSCPDriverCommandReply:
 10154                           	opt stack 0
 10155  002536                     PL108:
 10156                           	opt stack 22
 10157  002536  0100               	movlb	0	; () banked
 10158  002538  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10159  00253A  6E20               	movwf	?_crc8+1,c
 10160  00253C  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10161  00253E  6E1F               	movwf	?_crc8,c
 10162  002540  6A21               	clrf	?_crc8+2,c
 10163  002542  0C00               	retlw	0
 10164  002544                     __end_ofPL108:
 10165                           	opt stack 0
 10166                           tblptru	equ	0xFF8
 10167                           tblptrh	equ	0xFF7
 10168                           tblptrl	equ	0xFF6
 10169                           tablat	equ	0xFF5
 10170                           prodh	equ	0xFF4
 10171                           prodl	equ	0xFF3
 10172                           intcon	equ	0xFF2
 10173                           indf0	equ	0xFEF
 10174                           postinc0	equ	0xFEE
 10175                           fsr0h	equ	0xFEA
 10176                           fsr0l	equ	0xFE9
 10177                           wreg	equ	0xFE8
 10178                           indf1	equ	0xFE7
 10179                           postinc1	equ	0xFE6
 10180                           postdec1	equ	0xFE5
 10181                           fsr1h	equ	0xFE2
 10182                           fsr1l	equ	0xFE1
 10183                           indf2	equ	0xFDF
 10184                           postinc2	equ	0xFDE
 10185                           postdec2	equ	0xFDD
 10186                           plusw2	equ	0xFDB
 10187                           fsr2h	equ	0xFDA
 10188                           fsr2l	equ	0xFD9
 10189                           status	equ	0xFD8
 10190                           
 10191 ;; *************** function _sendVSCPModeCapabilities *****************
 10192 ;; Defined at:
 10193 ;;		line 2390 in file "main.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;		None
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;  crc             1   10[BANK0 ] unsigned char 
 10198 ;; Return value:  Size  Location     Type
 10199 ;;                  1    wreg      enum E15660
 10200 ;; Registers used:
 10201 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10202 ;; Tracked objects:
 10203 ;;		On entry : F/1
 10204 ;;		On exit  : 0/0
 10205 ;;		Unchanged: 0/0
 10206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10207 ;;      Params:         0       0       0       0       0       0       0
 10208 ;;      Locals:         0       1       0       0       0       0       0
 10209 ;;      Temps:          0       0       0       0       0       0       0
 10210 ;;      Totals:         0       1       0       0       0       0       0
 10211 ;;Total ram usage:        1 bytes
 10212 ;; Hardware stack levels used:    1
 10213 ;; Hardware stack levels required when called:    6
 10214 ;; This function calls:
 10215 ;;		_WriteUSART
 10216 ;;		_sendEscapedUartData
 10217 ;;		_crc8
 10218 ;; This function is called by:
 10219 ;;		_doModeVscp
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           	psect	text10
 10224  001FC0                     __ptext10:
 10225                           	opt stack 0
 10226  001FC0                     _sendVSCPModeCapabilities:
 10227                           	opt stack 22
 10228                           
 10229                           ; BSR set to: 1
 10230                           ;main.c: 2391: uint8_t crc = 0;
 10231                           
 10232                           ;incstack = 0
 10233                           ;incstack = 0
 10234  001FC0  0100               	movlb	0	; () banked
 10235  001FC2  6B6A               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
 10236  001FC4                     l1110:
 10237  001FC4  A2AC               	btfss	4012,1,c	;volatile
 10238  001FC6  D7FE               	goto	l1110
 10239                           
 10240                           ;main.c: 2395: WriteUSART(0x10);
 10241  001FC8  0E10               	movlw	16
 10242  001FCA  ECE7  F006         	call	_WriteUSART
 10243  001FCE                     l1113:
 10244  001FCE  A2AC               	btfss	4012,1,c	;volatile
 10245  001FD0  D7FE               	goto	l1113
 10246                           
 10247                           ;main.c: 2397: WriteUSART(0x02);
 10248  001FD2  0E02               	movlw	2
 10249  001FD4  ECE7  F006         	call	_WriteUSART
 10250  001FD8                     l1116:
 10251  001FD8  A2AC               	btfss	4012,1,c	;volatile
 10252  001FDA  D7FE               	goto	l1116
 10253                           
 10254                           ;main.c: 2401: WriteUSART(9);
 10255  001FDC  0E09               	movlw	9
 10256  001FDE  ECE7  F006         	call	_WriteUSART
 10257                           
 10258                           ;main.c: 2402: crc8(&crc, 9);
 10259  001FE2  0100               	movlb	0	; () banked
 10260  001FE4  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10261  001FE6  6E20               	movwf	?_crc8+1,c
 10262  001FE8  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10263  001FEA  6E1F               	movwf	?_crc8,c
 10264  001FEC  0E09               	movlw	9
 10265  001FEE  6E21               	movwf	?_crc8+2,c
 10266  001FF0  ECEF  F007         	call	_crc8	;wreg free
 10267  001FF4                     l1119:
 10268  001FF4  A2AC               	btfss	4012,1,c	;volatile
 10269  001FF6  D7FE               	goto	l1119
 10270                           
 10271                           ;main.c: 2406: WriteUSART(0);
 10272  001FF8  0E00               	movlw	0
 10273  001FFA  ECE7  F006         	call	_WriteUSART
 10274                           
 10275                           ;main.c: 2407: crc8(&crc, 0);
 10276  001FFE  0100               	movlb	0	; () banked
 10277  002000  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10278  002002  6E20               	movwf	?_crc8+1,c
 10279  002004  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10280  002006  6E1F               	movwf	?_crc8,c
 10281  002008  0E00               	movlw	0
 10282  00200A  6A21               	clrf	?_crc8+2,c
 10283  00200C  ECEF  F007         	call	_crc8	;wreg free
 10284                           
 10285                           ; BSR set to: 3
 10286                           ;main.c: 2410: sendEscapedUartData(sequencyno, &crc );
 10287  002010  0100               	movlb	0	; () banked
 10288  002012  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10289  002014  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10290  002016  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10291  002018  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10292  00201A  5034               	movf	_sequencyno,w,c
 10293  00201C  EC7F  F00A         	call	_sendEscapedUartData
 10294                           
 10295                           ;main.c: 2411: sequencyno++;
 10296  002020  2A34               	incf	_sequencyno,f,c
 10297                           
 10298                           ;main.c: 2414: sendEscapedUartData( 0, &crc );
 10299  002022  D825               	call	PL122	;call to abstracted procedure
 10300  002024  EC7F  F00A         	call	_sendEscapedUartData
 10301                           
 10302                           ;main.c: 2415: sendEscapedUartData( 2, &crc );
 10303  002028  0100               	movlb	0	; () banked
 10304  00202A  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10305  00202C  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10306  00202E  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10307  002030  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10308  002032  0E02               	movlw	2
 10309  002034  EC7F  F00A         	call	_sendEscapedUartData
 10310                           
 10311                           ;main.c: 2418: sendEscapedUartData( 1, &crc );
 10312  002038  0100               	movlb	0	; () banked
 10313  00203A  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10314  00203C  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10315  00203E  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10316  002040  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10317  002042  0E01               	movlw	1
 10318  002044  EC7F  F00A         	call	_sendEscapedUartData
 10319                           
 10320                           ;main.c: 2419: sendEscapedUartData( 0, &crc );
 10321  002048  D812               	call	PL122	;call to abstracted procedure
 10322  00204A  EC7F  F00A         	call	_sendEscapedUartData
 10323                           
 10324                           ;main.c: 2422: sendEscapedUartData(crc, (0));
 10325  00204E  0100               	movlb	0	; () banked
 10326  002050  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10327  002052  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 10328  002054  516A               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
 10329  002056  EC7F  F00A         	call	_sendEscapedUartData
 10330  00205A                     l1122:
 10331  00205A  A2AC               	btfss	4012,1,c	;volatile
 10332  00205C  D7FE               	goto	l1122
 10333                           
 10334                           ;main.c: 2426: WriteUSART(0x10);
 10335  00205E  0E10               	movlw	16
 10336  002060  ECE7  F006         	call	_WriteUSART
 10337  002064                     l1125:
 10338  002064  A2AC               	btfss	4012,1,c	;volatile
 10339  002066  D7FE               	goto	l1125
 10340                           
 10341                           ;main.c: 2428: WriteUSART(0x03);
 10342  002068  0E03               	movlw	3
 10343  00206A  EFE7  F006         	goto	_WriteUSART
 10344  00206E                     __end_of_sendVSCPModeCapabilities:
 10345                           	opt stack 0
 10346  00206E                     PL122:
 10347                           	opt stack 22
 10348  00206E  0100               	movlb	0	; () banked
 10349  002070  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10350  002072  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10351  002074  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10352  002076  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10353  002078  0C00               	retlw	0
 10354  00207A                     __end_ofPL122:
 10355                           	opt stack 0
 10356                           tblptru	equ	0xFF8
 10357                           tblptrh	equ	0xFF7
 10358                           tblptrl	equ	0xFF6
 10359                           tablat	equ	0xFF5
 10360                           prodh	equ	0xFF4
 10361                           prodl	equ	0xFF3
 10362                           intcon	equ	0xFF2
 10363                           indf0	equ	0xFEF
 10364                           postinc0	equ	0xFEE
 10365                           fsr0h	equ	0xFEA
 10366                           fsr0l	equ	0xFE9
 10367                           wreg	equ	0xFE8
 10368                           indf1	equ	0xFE7
 10369                           postinc1	equ	0xFE6
 10370                           postdec1	equ	0xFE5
 10371                           fsr1h	equ	0xFE2
 10372                           fsr1l	equ	0xFE1
 10373                           indf2	equ	0xFDF
 10374                           postinc2	equ	0xFDE
 10375                           postdec2	equ	0xFDD
 10376                           plusw2	equ	0xFDB
 10377                           fsr2h	equ	0xFDA
 10378                           fsr2l	equ	0xFD9
 10379                           status	equ	0xFD8
 10380                           
 10381 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
 10382 ;; Defined at:
 10383 ;;		line 2524 in file "main.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;		None
 10386 ;; Auto vars:     Size  Location     Type
 10387 ;;		None
 10388 ;; Return value:  Size  Location     Type
 10389 ;;                  1    wreg      enum E15660
 10390 ;; Registers used:
 10391 ;;		wreg
 10392 ;; Tracked objects:
 10393 ;;		On entry : F/1
 10394 ;;		On exit  : F/1
 10395 ;;		Unchanged: F/0
 10396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10397 ;;      Params:         0       0       0       0       0       0       0
 10398 ;;      Locals:         0       0       0       0       0       0       0
 10399 ;;      Temps:          0       0       0       0       0       0       0
 10400 ;;      Totals:         0       0       0       0       0       0       0
 10401 ;;Total ram usage:        0 bytes
 10402 ;; Hardware stack levels used:    1
 10403 ;; Hardware stack levels required when called:    3
 10404 ;; This function calls:
 10405 ;;		Nothing
 10406 ;; This function is called by:
 10407 ;;		_doModeVscp
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           	psect	text11
 10412  000D62                     __ptext11:
 10413                           	opt stack 0
 10414  000D62                     _receiveVSCPModeMultiCanalMsg:
 10415                           	opt stack 25
 10416                           
 10417                           ; BSR set to: 1
 10418                           
 10419                           ; BSR set to: 1
 10420                           ;main.c: 2526: return 0;
 10421                           
 10422                           ;incstack = 0
 10423                           ;incstack = 0
 10424  000D62  0C00               	retlw	0
 10425  000D64                     __end_of_receiveVSCPModeMultiCanalMsg:
 10426                           	opt stack 0
 10427                           tblptru	equ	0xFF8
 10428                           tblptrh	equ	0xFF7
 10429                           tblptrl	equ	0xFF6
 10430                           tablat	equ	0xFF5
 10431                           prodh	equ	0xFF4
 10432                           prodl	equ	0xFF3
 10433                           intcon	equ	0xFF2
 10434                           indf0	equ	0xFEF
 10435                           postinc0	equ	0xFEE
 10436                           fsr0h	equ	0xFEA
 10437                           fsr0l	equ	0xFE9
 10438                           wreg	equ	0xFE8
 10439                           indf1	equ	0xFE7
 10440                           postinc1	equ	0xFE6
 10441                           postdec1	equ	0xFE5
 10442                           fsr1h	equ	0xFE2
 10443                           fsr1l	equ	0xFE1
 10444                           indf2	equ	0xFDF
 10445                           postinc2	equ	0xFDE
 10446                           postdec2	equ	0xFDD
 10447                           plusw2	equ	0xFDB
 10448                           fsr2h	equ	0xFDA
 10449                           fsr2l	equ	0xFD9
 10450                           status	equ	0xFD8
 10451                           
 10452 ;; *************** function _receiveVSCPModeCanalMsg *****************
 10453 ;; Defined at:
 10454 ;;		line 2500 in file "main.c"
 10455 ;; Parameters:    Size  Location     Type
 10456 ;;		None
 10457 ;; Auto vars:     Size  Location     Type
 10458 ;;  data            8   71[BANK0 ] unsigned char [8]
 10459 ;;  id              4   79[BANK0 ] unsigned long 
 10460 ;;  dlc             1   83[BANK0 ] unsigned char 
 10461 ;; Return value:  Size  Location     Type
 10462 ;;                  1    wreg      enum E15660
 10463 ;; Registers used:
 10464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10465 ;; Tracked objects:
 10466 ;;		On entry : F/1
 10467 ;;		On exit  : E/0
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10470 ;;      Params:         0       0       0       0       0       0       0
 10471 ;;      Locals:         0      13       0       0       0       0       0
 10472 ;;      Temps:          0      20       0       0       0       0       0
 10473 ;;      Totals:         0      33       0       0       0       0       0
 10474 ;;Total ram usage:       33 bytes
 10475 ;; Hardware stack levels used:    1
 10476 ;; Hardware stack levels required when called:    6
 10477 ;; This function calls:
 10478 ;;		_memcpy
 10479 ;;		_sendCANFrame
 10480 ;; This function is called by:
 10481 ;;		_doModeVscp
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           	psect	text12
 10486  00262A                     __ptext12:
 10487                           	opt stack 0
 10488  00262A                     _receiveVSCPModeCanalMsg:
 10489                           	opt stack 22
 10490                           
 10491                           ; BSR set to: 1
 10492                           ;main.c: 2501: uint32_t id;
 10493                           ;main.c: 2502: uint8_t dlc;
 10494                           ;main.c: 2503: uint8_t data[8];
 10495                           ;main.c: 2505: id = ((uint32_t) cmdbuf[5] << 26) |
 10496                           ;main.c: 2506: ((uint32_t) cmdbuf[5 + 1] << 16) |
 10497                           ;main.c: 2507: ((uint32_t) cmdbuf[5 + 2] << 8) |
 10498                           ;main.c: 2508: cmdbuf[5 + 3];
 10499                           
 10500                           ; BSR set to: 1
 10501                           ;incstack = 0
 10502                           ;incstack = 0
 10503  00262A  C139  F093         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
 10504  00262E  0100               	movlb	0	; () banked
 10505  002630  6B94               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10506  002632  6B95               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
 10507  002634  6B96               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
 10508  002636  C095  F096         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
 10509  00263A  C094  F095         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
 10510  00263E  C093  F094         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
 10511  002642  6B93               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
 10512  002644  C138  F097         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
 10513  002648  6B98               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10514  00264A  6B99               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
 10515  00264C  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
 10516  00264E  C098  F09A         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
 10517  002652  C097  F099         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
 10518  002656  6B98               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10519  002658  6B97               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
 10520  00265A  C137  F09B         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
 10521  00265E  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
 10522  002660  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
 10523  002662  6B9E               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
 10524  002664  0E1A               	movlw	26
 10525  002666                     u22545:
 10526  002666  90D8               	bcf	status,0,c
 10527  002668  379B               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
 10528  00266A  379C               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
 10529  00266C  379D               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
 10530  00266E  379E               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
 10531  002670  2EE8               	decfsz	wreg,f,c
 10532  002672  D7F9               	goto	u22545
 10533  002674  5197               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
 10534  002676  119B               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
 10535  002678  6F9F               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
 10536  00267A  5198               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
 10537  00267C  119C               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
 10538  00267E  6FA0               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
 10539  002680  5199               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
 10540  002682  119D               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
 10541  002684  6FA1               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
 10542  002686  519A               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
 10543  002688  119E               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
 10544  00268A  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
 10545  00268C  5193               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
 10546  00268E  119F               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
 10547  002690  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
 10548  002692  5194               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
 10549  002694  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
 10550  002696  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
 10551  002698  5195               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
 10552  00269A  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
 10553  00269C  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
 10554  00269E  5196               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
 10555  0026A0  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
 10556  0026A2  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
 10557  0026A4  0101               	movlb	1	; () banked
 10558  0026A6  513A               	movf	(_cmdbuf+8)& (0+255),w,b
 10559  0026A8  0100               	movlb	0	; () banked
 10560  0026AA  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
 10561  0026AC  6FAF               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
 10562  0026AE  51A4               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
 10563  0026B0  6FB0               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
 10564  0026B2  51A5               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
 10565  0026B4  6FB1               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
 10566  0026B6  51A6               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
 10567  0026B8  6FB2               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
 10568                           
 10569                           ;main.c: 2509: dlc = ( cmdbuf[4] - 4 ) & 0x07;
 10570  0026BA  0101               	movlb	1	; () banked
 10571  0026BC  5136               	movf	(_cmdbuf+4)& (0+255),w,b
 10572  0026BE  0FFC               	addlw	252
 10573  0026C0  0B07               	andlw	7
 10574  0026C2  0100               	movlb	0	; () banked
 10575  0026C4  6FB3               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;main.c: 2510: if ( dlc > 8 ) {
 10579  0026C6  0E08               	movlw	8
 10580  0026C8  65B3               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10581  0026CA  D002               	goto	l17330
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;main.c: 2511: return 0;
 10585  0026CC  0E00               	movlw	0
 10586  0026CE  D021               	goto	l1163
 10587  0026D0                     l17330:
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;main.c: 2512: }
 10591                           ;main.c: 2513: memcpy( data, cmdbuf + 5 + 4, dlc );
 10592  0026D0  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10593  0026D2  6F61               	movwf	(?_memcpy+1)& (0+255),b
 10594  0026D4  0EA7               	movlw	low receiveVSCPModeCanalMsg@data
 10595  0026D6  6F60               	movwf	?_memcpy& (0+255),b
 10596  0026D8  0E3B               	movlw	low (_cmdbuf+9)
 10597  0026DA  6F93               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
 10598  0026DC  0E01               	movlw	high (_cmdbuf+9)
 10599  0026DE  6F94               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10600  0026E0  C093  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
 10601  0026E4  C094  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
 10602  0026E8  C0B3  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
 10603  0026EC  6B65               	clrf	(?_memcpy+5)& (0+255),b
 10604  0026EE  ECC3  F008         	call	_memcpy	;wreg free
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;main.c: 2515: return sendCANFrame(id, dlc, data);
 10608  0026F2  C0AF  F08C         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
 10609  0026F6  C0B0  F08D         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
 10610  0026FA  C0B1  F08E         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
 10611  0026FE  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
 10612  002702  C0B3  F090         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
 10613  002706  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10614  002708  6F92               	movwf	(?_sendCANFrame+6)& (0+255),b
 10615  00270A  0EA7               	movlw	low receiveVSCPModeCanalMsg@data
 10616  00270C  6F91               	movwf	(?_sendCANFrame+5)& (0+255),b
 10617  00270E  EC0B  F008         	call	_sendCANFrame	;wreg free
 10618  002712                     l1163:
 10619  002712  0012               	return	
 10620  002714                     __end_of_receiveVSCPModeCanalMsg:
 10621                           	opt stack 0
 10622                           tblptru	equ	0xFF8
 10623                           tblptrh	equ	0xFF7
 10624                           tblptrl	equ	0xFF6
 10625                           tablat	equ	0xFF5
 10626                           prodh	equ	0xFF4
 10627                           prodl	equ	0xFF3
 10628                           intcon	equ	0xFF2
 10629                           indf0	equ	0xFEF
 10630                           postinc0	equ	0xFEE
 10631                           fsr0h	equ	0xFEA
 10632                           fsr0l	equ	0xFE9
 10633                           wreg	equ	0xFE8
 10634                           indf1	equ	0xFE7
 10635                           postinc1	equ	0xFE6
 10636                           postdec1	equ	0xFE5
 10637                           fsr1h	equ	0xFE2
 10638                           fsr1l	equ	0xFE1
 10639                           indf2	equ	0xFDF
 10640                           postinc2	equ	0xFDE
 10641                           postdec2	equ	0xFDD
 10642                           plusw2	equ	0xFDB
 10643                           fsr2h	equ	0xFDA
 10644                           fsr2l	equ	0xFD9
 10645                           status	equ	0xFD8
 10646                           
 10647 ;; *************** function _memcpy *****************
 10648 ;; Defined at:
 10649 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;  d1              2    0[BANK0 ] PTR void 
 10652 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10653 ;;  s1              2    2[BANK0 ] PTR const void 
 10654 ;;		 -> vscpData(8), cmdbuf(80), 
 10655 ;;  n               2    4[BANK0 ] unsigned int 
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;  s               2   32[COMRAM] PTR const unsigned char 
 10658 ;;		 -> vscpData(8), cmdbuf(80), 
 10659 ;;  d               2   30[COMRAM] PTR unsigned char 
 10660 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  2    0[BANK0 ] PTR void 
 10663 ;; Registers used:
 10664 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10665 ;; Tracked objects:
 10666 ;;		On entry : F/0
 10667 ;;		On exit  : F/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10670 ;;      Params:         0       6       0       0       0       0       0
 10671 ;;      Locals:         4       0       0       0       0       0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0
 10673 ;;      Totals:         4       6       0       0       0       0       0
 10674 ;;Total ram usage:       10 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    3
 10677 ;; This function calls:
 10678 ;;		Nothing
 10679 ;; This function is called by:
 10680 ;;		_doModeSLCAN
 10681 ;;		_receiveVSCPModeCanalMsg
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           	psect	text13
 10686  001186                     __ptext13:
 10687                           	opt stack 0
 10688  001186                     _memcpy:
 10689                           	opt stack 25
 10690                           
 10691                           ; BSR set to: 0
 10692                           
 10693                           ;incstack = 0
 10694                           ;incstack = 0
 10695  001186  C062  F021         	movff	memcpy@s1,memcpy@s
 10696  00118A  C063  F022         	movff	memcpy@s1+1,memcpy@s+1
 10697  00118E  C060  F01F         	movff	memcpy@d1,memcpy@d
 10698  001192  C061  F020         	movff	memcpy@d1+1,memcpy@d+1
 10699  001196  D00E               	goto	l17506
 10700  001198                     l17500:
 10701                           
 10702                           ; BSR set to: 0
 10703  001198  C021  FFD9         	movff	memcpy@s,fsr2l
 10704  00119C  C022  FFDA         	movff	memcpy@s+1,fsr2h
 10705  0011A0  C01F  FFE1         	movff	memcpy@d,fsr1l
 10706  0011A4  C020  FFE2         	movff	memcpy@d+1,fsr1h
 10707  0011A8  CFDF FFE7          	movff	indf2,indf1
 10708                           
 10709                           ; BSR set to: 0
 10710  0011AC  4A21               	infsnz	memcpy@s,f,c
 10711  0011AE  2A22               	incf	memcpy@s+1,f,c
 10712                           
 10713                           ; BSR set to: 0
 10714  0011B0  4A1F               	infsnz	memcpy@d,f,c
 10715  0011B2  2A20               	incf	memcpy@d+1,f,c
 10716  0011B4                     l17506:
 10717                           
 10718                           ; BSR set to: 0
 10719  0011B4  0764               	decf	memcpy@n& (0+255),f,b
 10720  0011B6  A0D8               	btfss	status,0,c
 10721  0011B8  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10722  0011BA  0100               	movlb	0	; () banked
 10723  0011BC  2964               	incf	memcpy@n& (0+255),w,b
 10724  0011BE  B4D8               	btfsc	status,2,c
 10725  0011C0  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10726  0011C2  B4D8               	btfsc	status,2,c
 10727                           
 10728                           ; BSR set to: 0
 10729  0011C4  0012               	return	
 10730  0011C6  D7E8               	goto	l17500
 10731  0011C8                     __end_of_memcpy:
 10732                           	opt stack 0
 10733                           tblptru	equ	0xFF8
 10734                           tblptrh	equ	0xFF7
 10735                           tblptrl	equ	0xFF6
 10736                           tablat	equ	0xFF5
 10737                           prodh	equ	0xFF4
 10738                           prodl	equ	0xFF3
 10739                           intcon	equ	0xFF2
 10740                           indf0	equ	0xFEF
 10741                           postinc0	equ	0xFEE
 10742                           fsr0h	equ	0xFEA
 10743                           fsr0l	equ	0xFE9
 10744                           wreg	equ	0xFE8
 10745                           indf1	equ	0xFE7
 10746                           postinc1	equ	0xFE6
 10747                           postdec1	equ	0xFE5
 10748                           fsr1h	equ	0xFE2
 10749                           fsr1l	equ	0xFE1
 10750                           indf2	equ	0xFDF
 10751                           postinc2	equ	0xFDE
 10752                           postdec2	equ	0xFDD
 10753                           plusw2	equ	0xFDB
 10754                           fsr2h	equ	0xFDA
 10755                           fsr2l	equ	0xFD9
 10756                           status	equ	0xFD8
 10757                           
 10758 ;; *************** function _sendVSCPDriverAck *****************
 10759 ;; Defined at:
 10760 ;;		line 1925 in file "main.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;  crc             1   10[BANK0 ] unsigned char 
 10765 ;; Return value:  Size  Location     Type
 10766 ;;		None               void
 10767 ;; Registers used:
 10768 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10769 ;; Tracked objects:
 10770 ;;		On entry : E/1
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10774 ;;      Params:         0       0       0       0       0       0       0
 10775 ;;      Locals:         0       1       0       0       0       0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0
 10777 ;;      Totals:         0       1       0       0       0       0       0
 10778 ;;Total ram usage:        1 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    6
 10781 ;; This function calls:
 10782 ;;		_WriteUSART
 10783 ;;		_sendEscapedUartData
 10784 ;;		_crc8
 10785 ;; This function is called by:
 10786 ;;		_doModeVscp
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           	psect	text14
 10791  001D16                     __ptext14:
 10792                           	opt stack 0
 10793  001D16                     _sendVSCPDriverAck:
 10794                           	opt stack 22
 10795                           
 10796                           ;main.c: 1926: uint8_t crc = 0;
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;incstack = 0
 10800                           ;incstack = 0
 10801  001D16  0100               	movlb	0	; () banked
 10802  001D18  6B6A               	clrf	sendVSCPDriverAck@crc& (0+255),b
 10803  001D1A                     l902:
 10804  001D1A  A2AC               	btfss	4012,1,c	;volatile
 10805  001D1C  D7FE               	goto	l902
 10806                           
 10807                           ;main.c: 1930: WriteUSART(0x10);
 10808  001D1E  0E10               	movlw	16
 10809  001D20  ECE7  F006         	call	_WriteUSART
 10810  001D24                     l905:
 10811  001D24  A2AC               	btfss	4012,1,c	;volatile
 10812  001D26  D7FE               	goto	l905
 10813                           
 10814                           ;main.c: 1932: WriteUSART(0x02);
 10815  001D28  0E02               	movlw	2
 10816  001D2A  ECE7  F006         	call	_WriteUSART
 10817  001D2E                     l908:
 10818  001D2E  A2AC               	btfss	4012,1,c	;volatile
 10819  001D30  D7FE               	goto	l908
 10820                           
 10821                           ;main.c: 1936: WriteUSART(251);
 10822  001D32  0EFB               	movlw	251
 10823  001D34  ECE7  F006         	call	_WriteUSART
 10824                           
 10825                           ;main.c: 1937: crc8(&crc, 251);
 10826  001D38  0100               	movlb	0	; () banked
 10827  001D3A  0E00               	movlw	high sendVSCPDriverAck@crc
 10828  001D3C  6E20               	movwf	?_crc8+1,c
 10829  001D3E  0E6A               	movlw	low sendVSCPDriverAck@crc
 10830  001D40  6E1F               	movwf	?_crc8,c
 10831  001D42  0EFB               	movlw	251
 10832  001D44  6E21               	movwf	?_crc8+2,c
 10833  001D46  ECEF  F007         	call	_crc8	;wreg free
 10834  001D4A                     l911:
 10835  001D4A  A2AC               	btfss	4012,1,c	;volatile
 10836  001D4C  D7FE               	goto	l911
 10837                           
 10838                           ;main.c: 1941: WriteUSART(0);
 10839  001D4E  0E00               	movlw	0
 10840  001D50  ECE7  F006         	call	_WriteUSART
 10841                           
 10842                           ;main.c: 1942: crc8(&crc, 0);
 10843  001D54  D82B               	call	PL50	;call to abstracted procedure
 10844  001D56  ECEF  F007         	call	_crc8	;wreg free
 10845                           
 10846                           ; BSR set to: 3
 10847                           ;main.c: 1945: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10848  001D5A  0100               	movlb	0	; () banked
 10849  001D5C  0E00               	movlw	high sendVSCPDriverAck@crc
 10850  001D5E  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10851  001D60  0E6A               	movlw	low sendVSCPDriverAck@crc
 10852  001D62  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10853  001D64  0101               	movlb	1	; () banked
 10854  001D66  5134               	movf	(_cmdbuf+2)& (0+255),w,b
 10855  001D68  EC7F  F00A         	call	_sendEscapedUartData
 10856  001D6C                     l914:
 10857  001D6C  A2AC               	btfss	4012,1,c	;volatile
 10858  001D6E  D7FE               	goto	l914
 10859                           
 10860                           ;main.c: 1949: WriteUSART(0);
 10861  001D70  0E00               	movlw	0
 10862  001D72  ECE7  F006         	call	_WriteUSART
 10863                           
 10864                           ;main.c: 1950: crc8(&crc, 0);
 10865  001D76  D81A               	call	PL50	;call to abstracted procedure
 10866  001D78  ECEF  F007         	call	_crc8	;wreg free
 10867  001D7C                     l917:
 10868  001D7C  A2AC               	btfss	4012,1,c	;volatile
 10869  001D7E  D7FE               	goto	l917
 10870                           
 10871                           ;main.c: 1952: WriteUSART(0);
 10872  001D80  0E00               	movlw	0
 10873  001D82  ECE7  F006         	call	_WriteUSART
 10874                           
 10875                           ;main.c: 1953: crc8(&crc, 0);
 10876  001D86  D812               	call	PL50	;call to abstracted procedure
 10877  001D88  ECEF  F007         	call	_crc8	;wreg free
 10878                           
 10879                           ; BSR set to: 3
 10880                           ;main.c: 1956: sendEscapedUartData(crc, (0));
 10881  001D8C  0100               	movlb	0	; () banked
 10882  001D8E  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10883  001D90  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 10884  001D92  516A               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10885  001D94  EC7F  F00A         	call	_sendEscapedUartData
 10886  001D98                     l920:
 10887  001D98  A2AC               	btfss	4012,1,c	;volatile
 10888  001D9A  D7FE               	goto	l920
 10889                           
 10890                           ;main.c: 1960: WriteUSART(0x10);
 10891  001D9C  0E10               	movlw	16
 10892  001D9E  ECE7  F006         	call	_WriteUSART
 10893  001DA2                     l923:
 10894  001DA2  A2AC               	btfss	4012,1,c	;volatile
 10895  001DA4  D7FE               	goto	l923
 10896                           
 10897                           ;main.c: 1962: WriteUSART(0x03);
 10898  001DA6  0E03               	movlw	3
 10899  001DA8  EFE7  F006         	goto	_WriteUSART
 10900  001DAC                     __end_of_sendVSCPDriverAck:
 10901                           	opt stack 0
 10902  001DAC                     PL50:
 10903                           	opt stack 22
 10904  001DAC  0100               	movlb	0	; () banked
 10905  001DAE  0E00               	movlw	high sendVSCPDriverAck@crc
 10906  001DB0  6E20               	movwf	?_crc8+1,c
 10907  001DB2  0E6A               	movlw	low sendVSCPDriverAck@crc
 10908  001DB4  6E1F               	movwf	?_crc8,c
 10909  001DB6  6A21               	clrf	?_crc8+2,c
 10910  001DB8  0C00               	retlw	0
 10911  001DBA                     __end_ofPL50:
 10912                           	opt stack 0
 10913                           tblptru	equ	0xFF8
 10914                           tblptrh	equ	0xFF7
 10915                           tblptrl	equ	0xFF6
 10916                           tablat	equ	0xFF5
 10917                           prodh	equ	0xFF4
 10918                           prodl	equ	0xFF3
 10919                           intcon	equ	0xFF2
 10920                           indf0	equ	0xFEF
 10921                           postinc0	equ	0xFEE
 10922                           fsr0h	equ	0xFEA
 10923                           fsr0l	equ	0xFE9
 10924                           wreg	equ	0xFE8
 10925                           indf1	equ	0xFE7
 10926                           postinc1	equ	0xFE6
 10927                           postdec1	equ	0xFE5
 10928                           fsr1h	equ	0xFE2
 10929                           fsr1l	equ	0xFE1
 10930                           indf2	equ	0xFDF
 10931                           postinc2	equ	0xFDE
 10932                           postdec2	equ	0xFDD
 10933                           plusw2	equ	0xFDB
 10934                           fsr2h	equ	0xFDA
 10935                           fsr2l	equ	0xFD9
 10936                           status	equ	0xFD8
 10937                           
 10938 ;; *************** function _sendVSCPDriverNack *****************
 10939 ;; Defined at:
 10940 ;;		line 1969 in file "main.c"
 10941 ;; Parameters:    Size  Location     Type
 10942 ;;		None
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;  crc             1   10[BANK0 ] unsigned char 
 10945 ;; Return value:  Size  Location     Type
 10946 ;;		None               void
 10947 ;; Registers used:
 10948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10949 ;; Tracked objects:
 10950 ;;		On entry : E/0
 10951 ;;		On exit  : 0/0
 10952 ;;		Unchanged: 0/0
 10953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10954 ;;      Params:         0       0       0       0       0       0       0
 10955 ;;      Locals:         0       1       0       0       0       0       0
 10956 ;;      Temps:          0       0       0       0       0       0       0
 10957 ;;      Totals:         0       1       0       0       0       0       0
 10958 ;;Total ram usage:        1 bytes
 10959 ;; Hardware stack levels used:    1
 10960 ;; Hardware stack levels required when called:    6
 10961 ;; This function calls:
 10962 ;;		_WriteUSART
 10963 ;;		_sendEscapedUartData
 10964 ;;		_crc8
 10965 ;; This function is called by:
 10966 ;;		_doModeVscp
 10967 ;; This function uses a non-reentrant model
 10968 ;;
 10969                           
 10970                           	psect	text15
 10971  001C72                     __ptext15:
 10972                           	opt stack 0
 10973  001C72                     _sendVSCPDriverNack:
 10974                           	opt stack 22
 10975                           
 10976                           ;main.c: 1970: uint8_t crc = 0;
 10977                           
 10978                           ;incstack = 0
 10979                           ;incstack = 0
 10980  001C72  0100               	movlb	0	; () banked
 10981  001C74  6B6A               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10982  001C76                     l929:
 10983  001C76  A2AC               	btfss	4012,1,c	;volatile
 10984  001C78  D7FE               	goto	l929
 10985                           
 10986                           ;main.c: 1974: WriteUSART(0x10);
 10987  001C7A  0E10               	movlw	16
 10988  001C7C  ECE7  F006         	call	_WriteUSART
 10989  001C80                     l932:
 10990  001C80  A2AC               	btfss	4012,1,c	;volatile
 10991  001C82  D7FE               	goto	l932
 10992                           
 10993                           ;main.c: 1976: WriteUSART(0x02);
 10994  001C84  0E02               	movlw	2
 10995  001C86  ECE7  F006         	call	_WriteUSART
 10996  001C8A                     l935:
 10997  001C8A  A2AC               	btfss	4012,1,c	;volatile
 10998  001C8C  D7FE               	goto	l935
 10999                           
 11000                           ;main.c: 1980: WriteUSART(252);
 11001  001C8E  0EFC               	movlw	252
 11002  001C90  ECE7  F006         	call	_WriteUSART
 11003                           
 11004                           ;main.c: 1981: crc8(&crc, 252);
 11005  001C94  0100               	movlb	0	; () banked
 11006  001C96  0E00               	movlw	high sendVSCPDriverNack@crc
 11007  001C98  6E20               	movwf	?_crc8+1,c
 11008  001C9A  0E6A               	movlw	low sendVSCPDriverNack@crc
 11009  001C9C  6E1F               	movwf	?_crc8,c
 11010  001C9E  0EFC               	movlw	252
 11011  001CA0  6E21               	movwf	?_crc8+2,c
 11012  001CA2  ECEF  F007         	call	_crc8	;wreg free
 11013  001CA6                     l938:
 11014  001CA6  A2AC               	btfss	4012,1,c	;volatile
 11015  001CA8  D7FE               	goto	l938
 11016                           
 11017                           ;main.c: 1985: WriteUSART(0);
 11018  001CAA  0E00               	movlw	0
 11019  001CAC  ECE7  F006         	call	_WriteUSART
 11020                           
 11021                           ;main.c: 1986: crc8(&crc, 0);
 11022  001CB0  D82B               	call	PL52	;call to abstracted procedure
 11023  001CB2  ECEF  F007         	call	_crc8	;wreg free
 11024                           
 11025                           ; BSR set to: 3
 11026                           ;main.c: 1989: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 11027  001CB6  0100               	movlb	0	; () banked
 11028  001CB8  0E00               	movlw	high sendVSCPDriverNack@crc
 11029  001CBA  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11030  001CBC  0E6A               	movlw	low sendVSCPDriverNack@crc
 11031  001CBE  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11032  001CC0  0101               	movlb	1	; () banked
 11033  001CC2  5134               	movf	(_cmdbuf+2)& (0+255),w,b
 11034  001CC4  EC7F  F00A         	call	_sendEscapedUartData
 11035  001CC8                     l941:
 11036  001CC8  A2AC               	btfss	4012,1,c	;volatile
 11037  001CCA  D7FE               	goto	l941
 11038                           
 11039                           ;main.c: 1993: WriteUSART(0);
 11040  001CCC  0E00               	movlw	0
 11041  001CCE  ECE7  F006         	call	_WriteUSART
 11042                           
 11043                           ;main.c: 1994: crc8(&crc, 0);
 11044  001CD2  D81A               	call	PL52	;call to abstracted procedure
 11045  001CD4  ECEF  F007         	call	_crc8	;wreg free
 11046  001CD8                     l944:
 11047  001CD8  A2AC               	btfss	4012,1,c	;volatile
 11048  001CDA  D7FE               	goto	l944
 11049                           
 11050                           ;main.c: 1996: WriteUSART(0);
 11051  001CDC  0E00               	movlw	0
 11052  001CDE  ECE7  F006         	call	_WriteUSART
 11053                           
 11054                           ;main.c: 1997: crc8(&crc, 0);
 11055  001CE2  D812               	call	PL52	;call to abstracted procedure
 11056  001CE4  ECEF  F007         	call	_crc8	;wreg free
 11057                           
 11058                           ; BSR set to: 3
 11059                           ;main.c: 2000: sendEscapedUartData(crc, (0));
 11060  001CE8  0100               	movlb	0	; () banked
 11061  001CEA  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11062  001CEC  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 11063  001CEE  516A               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 11064  001CF0  EC7F  F00A         	call	_sendEscapedUartData
 11065  001CF4                     l947:
 11066  001CF4  A2AC               	btfss	4012,1,c	;volatile
 11067  001CF6  D7FE               	goto	l947
 11068                           
 11069                           ;main.c: 2004: WriteUSART(0x10);
 11070  001CF8  0E10               	movlw	16
 11071  001CFA  ECE7  F006         	call	_WriteUSART
 11072  001CFE                     l950:
 11073  001CFE  A2AC               	btfss	4012,1,c	;volatile
 11074  001D00  D7FE               	goto	l950
 11075                           
 11076                           ;main.c: 2006: WriteUSART(0x03);
 11077  001D02  0E03               	movlw	3
 11078  001D04  EFE7  F006         	goto	_WriteUSART
 11079  001D08                     __end_of_sendVSCPDriverNack:
 11080                           	opt stack 0
 11081  001D08                     PL52:
 11082                           	opt stack 22
 11083  001D08  0100               	movlb	0	; () banked
 11084  001D0A  0E00               	movlw	high sendVSCPDriverNack@crc
 11085  001D0C  6E20               	movwf	?_crc8+1,c
 11086  001D0E  0E6A               	movlw	low sendVSCPDriverNack@crc
 11087  001D10  6E1F               	movwf	?_crc8,c
 11088  001D12  6A21               	clrf	?_crc8+2,c
 11089  001D14  0C00               	retlw	0
 11090  001D16                     __end_ofPL52:
 11091                           	opt stack 0
 11092                           tblptru	equ	0xFF8
 11093                           tblptrh	equ	0xFF7
 11094                           tblptrl	equ	0xFF6
 11095                           tablat	equ	0xFF5
 11096                           prodh	equ	0xFF4
 11097                           prodl	equ	0xFF3
 11098                           intcon	equ	0xFF2
 11099                           indf0	equ	0xFEF
 11100                           postinc0	equ	0xFEE
 11101                           fsr0h	equ	0xFEA
 11102                           fsr0l	equ	0xFE9
 11103                           wreg	equ	0xFE8
 11104                           indf1	equ	0xFE7
 11105                           postinc1	equ	0xFE6
 11106                           postdec1	equ	0xFE5
 11107                           fsr1h	equ	0xFE2
 11108                           fsr1l	equ	0xFE1
 11109                           indf2	equ	0xFDF
 11110                           postinc2	equ	0xFDE
 11111                           postdec2	equ	0xFDD
 11112                           plusw2	equ	0xFDB
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _calcCRC *****************
 11118 ;; Defined at:
 11119 ;;		line 2740 in file "main.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;  p               2    7[BANK0 ] PTR unsigned char 
 11122 ;;		 -> cmdbuf(80), 
 11123 ;;  len             1    9[BANK0 ] unsigned char 
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;  crc             1   11[BANK0 ] unsigned char 
 11126 ;;  j               1   10[BANK0 ] unsigned char 
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  1    wreg      unsigned char 
 11129 ;; Registers used:
 11130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11131 ;; Tracked objects:
 11132 ;;		On entry : F/0
 11133 ;;		On exit  : F/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11136 ;;      Params:         0       3       0       0       0       0       0
 11137 ;;      Locals:         0       2       0       0       0       0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0
 11139 ;;      Totals:         0       5       0       0       0       0       0
 11140 ;;Total ram usage:        5 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; Hardware stack levels required when called:    5
 11143 ;; This function calls:
 11144 ;;		_crc8
 11145 ;; This function is called by:
 11146 ;;		_doModeVscp
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text16
 11151  000F10                     __ptext16:
 11152                           	opt stack 0
 11153  000F10                     _calcCRC:
 11154                           	opt stack 23
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;main.c: 2741: uint8_t j;
 11158                           ;main.c: 2742: uint8_t crc = 0;
 11159                           
 11160                           ;incstack = 0
 11161                           ;incstack = 0
 11162  000F10  6B6B               	clrf	calcCRC@crc& (0+255),b
 11163                           
 11164                           ;main.c: 2744: for (j = 0; j < len; j++) {
 11165  000F12  6B6A               	clrf	calcCRC@j& (0+255),b
 11166  000F14  D010               	goto	l17256
 11167  000F16                     l17252:
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;main.c: 2745: crc8(&crc, p[j]);
 11171  000F16  0E00               	movlw	high calcCRC@crc
 11172  000F18  6E20               	movwf	?_crc8+1,c
 11173  000F1A  0E6B               	movlw	low calcCRC@crc
 11174  000F1C  6E1F               	movwf	?_crc8,c
 11175  000F1E  516A               	movf	calcCRC@j& (0+255),w,b
 11176  000F20  2567               	addwf	calcCRC@p& (0+255),w,b
 11177  000F22  6ED9               	movwf	fsr2l,c
 11178  000F24  0E00               	movlw	0
 11179  000F26  2168               	addwfc	(calcCRC@p+1)& (0+255),w,b
 11180  000F28  6EDA               	movwf	fsr2h,c
 11181  000F2A  50DF               	movf	indf2,w,c
 11182  000F2C  6E21               	movwf	?_crc8+2,c
 11183  000F2E  ECEF  F007         	call	_crc8	;wreg free
 11184                           
 11185                           ; BSR set to: 3
 11186  000F32  0100               	movlb	0	; () banked
 11187  000F34  2B6A               	incf	calcCRC@j& (0+255),f,b
 11188  000F36                     l17256:
 11189                           
 11190                           ; BSR set to: 0
 11191  000F36  5169               	movf	calcCRC@len& (0+255),w,b
 11192  000F38  5D6A               	subwf	calcCRC@j& (0+255),w,b
 11193  000F3A  E3ED               	bnc	l17252
 11194                           
 11195                           ; BSR set to: 0
 11196                           ;main.c: 2746: }
 11197                           ;main.c: 2748: return crc;
 11198  000F3C  516B               	movf	calcCRC@crc& (0+255),w,b
 11199                           
 11200                           ; BSR set to: 0
 11201  000F3E  0012               	return	
 11202  000F40                     __end_of_calcCRC:
 11203                           	opt stack 0
 11204                           tblptru	equ	0xFF8
 11205                           tblptrh	equ	0xFF7
 11206                           tblptrl	equ	0xFF6
 11207                           tablat	equ	0xFF5
 11208                           prodh	equ	0xFF4
 11209                           prodl	equ	0xFF3
 11210                           intcon	equ	0xFF2
 11211                           indf0	equ	0xFEF
 11212                           postinc0	equ	0xFEE
 11213                           fsr0h	equ	0xFEA
 11214                           fsr0l	equ	0xFE9
 11215                           wreg	equ	0xFE8
 11216                           indf1	equ	0xFE7
 11217                           postinc1	equ	0xFE6
 11218                           postdec1	equ	0xFE5
 11219                           fsr1h	equ	0xFE2
 11220                           fsr1l	equ	0xFE1
 11221                           indf2	equ	0xFDF
 11222                           postinc2	equ	0xFDE
 11223                           postdec2	equ	0xFDD
 11224                           plusw2	equ	0xFDB
 11225                           fsr2h	equ	0xFDA
 11226                           fsr2l	equ	0xFD9
 11227                           status	equ	0xFD8
 11228                           
 11229 ;; *************** function _receiveSendEventCANAL *****************
 11230 ;; Defined at:
 11231 ;;		line 2128 in file "main.c"
 11232 ;; Parameters:    Size  Location     Type
 11233 ;;		None
 11234 ;; Auto vars:     Size  Location     Type
 11235 ;;  crc             1   28[BANK0 ] unsigned char 
 11236 ;;  data            8   14[BANK0 ] unsigned char [8]
 11237 ;;  id              4   23[BANK0 ] unsigned long 
 11238 ;;  dlc             1   27[BANK0 ] unsigned char 
 11239 ;;  i               1   22[BANK0 ] unsigned char 
 11240 ;; Return value:  Size  Location     Type
 11241 ;;                  1    wreg      enum E15660
 11242 ;; Registers used:
 11243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11244 ;; Tracked objects:
 11245 ;;		On entry : F/1
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11249 ;;      Params:         0       0       0       0       0       0       0
 11250 ;;      Locals:         0      15       0       0       0       0       0
 11251 ;;      Temps:          0       0       0       0       0       0       0
 11252 ;;      Totals:         0      15       0       0       0       0       0
 11253 ;;Total ram usage:       15 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    6
 11256 ;; This function calls:
 11257 ;;		_WriteUSART
 11258 ;;		_sendEscapedUartData
 11259 ;;		_crc8
 11260 ;;		_getCANFrame
 11261 ;; This function is called by:
 11262 ;;		_doModeVscp
 11263 ;; This function uses a non-reentrant model
 11264 ;;
 11265                           
 11266                           	psect	text17
 11267  002F9C                     __ptext17:
 11268                           	opt stack 0
 11269  002F9C                     _receiveSendEventCANAL:
 11270                           	opt stack 22
 11271                           
 11272                           ; BSR set to: 1
 11273                           ;main.c: 2129: uint8_t i;
 11274                           ;main.c: 2130: uint32_t id;
 11275                           ;main.c: 2131: uint8_t dlc;
 11276                           ;main.c: 2132: uint8_t data[8];
 11277                           ;main.c: 2134: if ( getCANFrame( &id, &dlc, &data ) ) {
 11278                           
 11279                           ; BSR set to: 0
 11280                           ;incstack = 0
 11281                           ;incstack = 0
 11282  002F9C  0100               	movlb	0	; () banked
 11283  002F9E  0E00               	movlw	high receiveSendEventCANAL@dlc
 11284  002FA0  6F6B               	movwf	(?_getCANFrame+1)& (0+255),b
 11285  002FA2  0E7B               	movlw	low receiveSendEventCANAL@dlc
 11286  002FA4  6F6A               	movwf	?_getCANFrame& (0+255),b
 11287  002FA6  0E00               	movlw	high receiveSendEventCANAL@data
 11288  002FA8  6F6D               	movwf	(?_getCANFrame+3)& (0+255),b
 11289  002FAA  0E6E               	movlw	low receiveSendEventCANAL@data
 11290  002FAC  6F6C               	movwf	(?_getCANFrame+2)& (0+255),b
 11291  002FAE  0E77               	movlw	receiveSendEventCANAL@id& (0+255)
 11292  002FB0  EC31  F00F         	call	_getCANFrame
 11293  002FB4  0900               	iorlw	0
 11294  002FB6  E101 D08F          	bz	l1050
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;main.c: 2136: uint8_t crc = 0;
 11298  002FBA  6B7C               	clrf	receiveSendEventCANAL@crc& (0+255),b
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;main.c: 2139: cntRxFrames++;
 11302  002FBC  0101               	movlb	1	; () banked
 11303  002FBE  2B0C               	incf	_cntRxFrames& (0+255),f,b
 11304  002FC0  0E00               	movlw	0
 11305  002FC2  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11306  002FC4  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11307  002FC6  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11308                           
 11309                           ;main.c: 2140: cntRxBytes += dlc;
 11310  002FC8  0100               	movlb	0	; () banked
 11311  002FCA  517B               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11312  002FCC  0101               	movlb	1	; () banked
 11313  002FCE  2708               	addwf	_cntRxBytes& (0+255),f,b
 11314  002FD0  0E00               	movlw	0
 11315  002FD2  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11316  002FD4  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11317  002FD6  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11318  002FD8                     l1029:
 11319                           
 11320                           ; BSR set to: 1
 11321  002FD8  A2AC               	btfss	4012,1,c	;volatile
 11322  002FDA  D7FE               	goto	l1029
 11323                           
 11324                           ; BSR set to: 1
 11325                           ;main.c: 2144: WriteUSART(0x10);
 11326  002FDC  0E10               	movlw	16
 11327  002FDE  ECE7  F006         	call	_WriteUSART
 11328  002FE2                     l1032:
 11329  002FE2  A2AC               	btfss	4012,1,c	;volatile
 11330  002FE4  D7FE               	goto	l1032
 11331                           
 11332                           ;main.c: 2146: WriteUSART(0x02);
 11333  002FE6  0E02               	movlw	2
 11334  002FE8  ECE7  F006         	call	_WriteUSART
 11335  002FEC                     l1035:
 11336  002FEC  A2AC               	btfss	4012,1,c	;volatile
 11337  002FEE  D7FE               	goto	l1035
 11338                           
 11339                           ;main.c: 2150: WriteUSART(2);
 11340  002FF0  0E02               	movlw	2
 11341  002FF2  ECE7  F006         	call	_WriteUSART
 11342                           
 11343                           ;main.c: 2151: crc8(&crc, 2);
 11344  002FF6  0100               	movlb	0	; () banked
 11345  002FF8  0E00               	movlw	high receiveSendEventCANAL@crc
 11346  002FFA  6E20               	movwf	?_crc8+1,c
 11347  002FFC  0E7C               	movlw	low receiveSendEventCANAL@crc
 11348  002FFE  6E1F               	movwf	?_crc8,c
 11349  003000  0E02               	movlw	2
 11350  003002  6E21               	movwf	?_crc8+2,c
 11351  003004  ECEF  F007         	call	_crc8	;wreg free
 11352  003008                     l1038:
 11353  003008  A2AC               	btfss	4012,1,c	;volatile
 11354  00300A  D7FE               	goto	l1038
 11355                           
 11356                           ;main.c: 2155: WriteUSART(0);
 11357  00300C  0E00               	movlw	0
 11358  00300E  ECE7  F006         	call	_WriteUSART
 11359                           
 11360                           ;main.c: 2156: crc8(&crc, 0);
 11361  003012  0100               	movlb	0	; () banked
 11362  003014  0E00               	movlw	high receiveSendEventCANAL@crc
 11363  003016  6E20               	movwf	?_crc8+1,c
 11364  003018  0E7C               	movlw	low receiveSendEventCANAL@crc
 11365  00301A  6E1F               	movwf	?_crc8,c
 11366  00301C  0E00               	movlw	0
 11367  00301E  6A21               	clrf	?_crc8+2,c
 11368  003020  ECEF  F007         	call	_crc8	;wreg free
 11369                           
 11370                           ; BSR set to: 3
 11371                           ;main.c: 2159: sendEscapedUartData(sequencyno, &crc);
 11372  003024  0100               	movlb	0	; () banked
 11373  003026  0E00               	movlw	high receiveSendEventCANAL@crc
 11374  003028  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11375  00302A  0E7C               	movlw	low receiveSendEventCANAL@crc
 11376  00302C  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11377  00302E  5034               	movf	_sequencyno,w,c
 11378  003030  EC7F  F00A         	call	_sendEscapedUartData
 11379                           
 11380                           ;main.c: 2160: sequencyno++;
 11381  003034  2A34               	incf	_sequencyno,f,c
 11382                           
 11383                           ;main.c: 2163: sendEscapedUartData(0, &crc);
 11384  003036  0100               	movlb	0	; () banked
 11385  003038  0E00               	movlw	high receiveSendEventCANAL@crc
 11386  00303A  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11387  00303C  0E7C               	movlw	low receiveSendEventCANAL@crc
 11388  00303E  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11389  003040  0E00               	movlw	0
 11390  003042  EC7F  F00A         	call	_sendEscapedUartData
 11391                           
 11392                           ;main.c: 2164: sendEscapedUartData(5 + dlc, &crc);
 11393  003046  D849               	call	PL126	;call to abstracted procedure
 11394  003048  0F05               	addlw	5
 11395  00304A  EC7F  F00A         	call	_sendEscapedUartData
 11396                           
 11397                           ;main.c: 2170: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 11398  00304E  0100               	movlb	0	; () banked
 11399  003050  0E00               	movlw	high receiveSendEventCANAL@crc
 11400  003052  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11401  003054  0E7C               	movlw	low receiveSendEventCANAL@crc
 11402  003056  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11403  003058  517A               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 11404  00305A  EC7F  F00A         	call	_sendEscapedUartData
 11405                           
 11406                           ;main.c: 2171: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 11407  00305E  0100               	movlb	0	; () banked
 11408  003060  0E00               	movlw	high receiveSendEventCANAL@crc
 11409  003062  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11410  003064  0E7C               	movlw	low receiveSendEventCANAL@crc
 11411  003066  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11412  003068  5179               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 11413  00306A  EC7F  F00A         	call	_sendEscapedUartData
 11414                           
 11415                           ;main.c: 2172: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 11416  00306E  0100               	movlb	0	; () banked
 11417  003070  0E00               	movlw	high receiveSendEventCANAL@crc
 11418  003072  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11419  003074  0E7C               	movlw	low receiveSendEventCANAL@crc
 11420  003076  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11421  003078  5178               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 11422  00307A  EC7F  F00A         	call	_sendEscapedUartData
 11423                           
 11424                           ;main.c: 2173: sendEscapedUartData((id & 0xff), &crc);
 11425  00307E  0100               	movlb	0	; () banked
 11426  003080  0E00               	movlw	high receiveSendEventCANAL@crc
 11427  003082  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11428  003084  0E7C               	movlw	low receiveSendEventCANAL@crc
 11429  003086  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11430  003088  5177               	movf	receiveSendEventCANAL@id& (0+255),w,b
 11431  00308A  EC7F  F00A         	call	_sendEscapedUartData
 11432                           
 11433                           ;main.c: 2176: sendEscapedUartData(dlc, &crc);
 11434  00308E  D825               	call	PL126	;call to abstracted procedure
 11435  003090  EC7F  F00A         	call	_sendEscapedUartData
 11436                           
 11437                           ;main.c: 2179: for (i = 0; i < dlc; i++) {
 11438  003094  0100               	movlb	0	; () banked
 11439  003096  6B76               	clrf	receiveSendEventCANAL@i& (0+255),b
 11440  003098  D00D               	goto	l17240
 11441  00309A                     l17236:
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;main.c: 2180: sendEscapedUartData( data[ i ], &crc );
 11445  00309A  0E00               	movlw	high receiveSendEventCANAL@crc
 11446  00309C  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11447  00309E  0E7C               	movlw	low receiveSendEventCANAL@crc
 11448  0030A0  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11449  0030A2  5176               	movf	receiveSendEventCANAL@i& (0+255),w,b
 11450  0030A4  0F6E               	addlw	low receiveSendEventCANAL@data
 11451  0030A6  6ED9               	movwf	fsr2l,c
 11452  0030A8  6ADA               	clrf	fsr2h,c
 11453  0030AA  50DF               	movf	indf2,w,c
 11454  0030AC  EC7F  F00A         	call	_sendEscapedUartData
 11455  0030B0  0100               	movlb	0	; () banked
 11456  0030B2  2B76               	incf	receiveSendEventCANAL@i& (0+255),f,b
 11457  0030B4                     l17240:
 11458                           
 11459                           ; BSR set to: 0
 11460  0030B4  517B               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11461  0030B6  5D76               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 11462  0030B8  E3F0               	bnc	l17236
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;main.c: 2181: }
 11466                           ;main.c: 2186: sendEscapedUartData(crc, (0));
 11467  0030BA  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11468  0030BC  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 11469  0030BE  517C               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 11470  0030C0  EC7F  F00A         	call	_sendEscapedUartData
 11471  0030C4                     l1044:
 11472  0030C4  A2AC               	btfss	4012,1,c	;volatile
 11473  0030C6  D7FE               	goto	l1044
 11474                           
 11475                           ;main.c: 2190: WriteUSART(0x10);
 11476  0030C8  0E10               	movlw	16
 11477  0030CA  ECE7  F006         	call	_WriteUSART
 11478  0030CE                     l1047:
 11479  0030CE  A2AC               	btfss	4012,1,c	;volatile
 11480  0030D0  D7FE               	goto	l1047
 11481                           
 11482                           ;main.c: 2192: WriteUSART(0x03);
 11483  0030D2  0E03               	movlw	3
 11484  0030D4  ECE7  F006         	call	_WriteUSART
 11485  0030D8                     l1050:
 11486  0030D8  0012               	return	
 11487  0030DA                     __end_of_receiveSendEventCANAL:
 11488                           	opt stack 0
 11489  0030DA                     PL126:
 11490                           	opt stack 22
 11491  0030DA  0100               	movlb	0	; () banked
 11492  0030DC  0E00               	movlw	high receiveSendEventCANAL@crc
 11493  0030DE  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11494  0030E0  0E7C               	movlw	low receiveSendEventCANAL@crc
 11495  0030E2  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11496  0030E4  517B               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11497  0030E6  0012               	return	
 11498  0030E8                     __end_ofPL126:
 11499                           	opt stack 0
 11500                           tblptru	equ	0xFF8
 11501                           tblptrh	equ	0xFF7
 11502                           tblptrl	equ	0xFF6
 11503                           tablat	equ	0xFF5
 11504                           prodh	equ	0xFF4
 11505                           prodl	equ	0xFF3
 11506                           intcon	equ	0xFF2
 11507                           indf0	equ	0xFEF
 11508                           postinc0	equ	0xFEE
 11509                           fsr0h	equ	0xFEA
 11510                           fsr0l	equ	0xFE9
 11511                           wreg	equ	0xFE8
 11512                           indf1	equ	0xFE7
 11513                           postinc1	equ	0xFE6
 11514                           postdec1	equ	0xFE5
 11515                           fsr1h	equ	0xFE2
 11516                           fsr1l	equ	0xFE1
 11517                           indf2	equ	0xFDF
 11518                           postinc2	equ	0xFDE
 11519                           postdec2	equ	0xFDD
 11520                           plusw2	equ	0xFDB
 11521                           fsr2h	equ	0xFDA
 11522                           fsr2l	equ	0xFD9
 11523                           status	equ	0xFD8
 11524                           
 11525 ;; *************** function _receiveSendMultiEventCANAL *****************
 11526 ;; Defined at:
 11527 ;;		line 2205 in file "main.c"
 11528 ;; Parameters:    Size  Location     Type
 11529 ;;		None
 11530 ;; Auto vars:     Size  Location     Type
 11531 ;;  crc             1   29[BANK0 ] unsigned char 
 11532 ;;  data            8   14[BANK0 ] unsigned char [8]
 11533 ;;  id              4   24[BANK0 ] unsigned long 
 11534 ;;  pos             1   30[BANK0 ] unsigned char 
 11535 ;;  dlc             1   28[BANK0 ] unsigned char 
 11536 ;;  i               1   23[BANK0 ] unsigned char 
 11537 ;;  msgcount        1   22[BANK0 ] unsigned char 
 11538 ;; Return value:  Size  Location     Type
 11539 ;;                  1    wreg      enum E15660
 11540 ;; Registers used:
 11541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11542 ;; Tracked objects:
 11543 ;;		On entry : F/1
 11544 ;;		On exit  : 0/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11547 ;;      Params:         0       0       0       0       0       0       0
 11548 ;;      Locals:         0      17       0       0       0       0       0
 11549 ;;      Temps:          0       0       0       0       0       0       0
 11550 ;;      Totals:         0      17       0       0       0       0       0
 11551 ;;Total ram usage:       17 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:    6
 11554 ;; This function calls:
 11555 ;;		_WriteUSART
 11556 ;;		_sendEscapedUartData
 11557 ;;		_crc8
 11558 ;;		_getCANFrame
 11559 ;; This function is called by:
 11560 ;;		_doModeVscp
 11561 ;; This function uses a non-reentrant model
 11562 ;;
 11563                           
 11564                           	psect	text18
 11565  003566                     __ptext18:
 11566                           	opt stack 0
 11567  003566                     _receiveSendMultiEventCANAL:
 11568                           	opt stack 22
 11569                           
 11570                           ; BSR set to: 1
 11571                           ;main.c: 2206: uint8_t i;
 11572                           ;main.c: 2207: uint8_t pos=0;
 11573                           
 11574                           ;incstack = 0
 11575                           ;incstack = 0
 11576  003566  0100               	movlb	0	; () banked
 11577  003568  6B7E               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 11578                           
 11579                           ;main.c: 2208: uint8_t msgcount=0;
 11580  00356A  6B76               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11581                           
 11582                           ; BSR set to: 0
 11583                           ;main.c: 2209: uint32_t id;
 11584                           ;main.c: 2210: uint8_t dlc;
 11585                           ;main.c: 2211: uint8_t data[8];
 11586                           ;main.c: 2213: if ( getCANFrame( &id, &dlc, &data ) ) {
 11587  00356C  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11588  00356E  D8BA               	call	PL88	;call to abstracted procedure
 11589  003570  EC31  F00F         	call	_getCANFrame
 11590  003574  0900               	iorlw	0
 11591  003576  E101 D0AC          	bz	l1082
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;main.c: 2215: uint8_t crc = 0;
 11595  00357A  6B7D               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;main.c: 2218: cntRxFrames++;
 11599  00357C  0101               	movlb	1	; () banked
 11600  00357E  2B0C               	incf	_cntRxFrames& (0+255),f,b
 11601  003580  0E00               	movlw	0
 11602  003582  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11603  003584  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11604  003586  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11605                           
 11606                           ;main.c: 2219: cntRxBytes += dlc;
 11607  003588  0100               	movlb	0	; () banked
 11608  00358A  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11609  00358C  0101               	movlb	1	; () banked
 11610  00358E  2708               	addwf	_cntRxBytes& (0+255),f,b
 11611  003590  0E00               	movlw	0
 11612  003592  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11613  003594  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11614  003596  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11615  003598                     l1054:
 11616                           
 11617                           ; BSR set to: 1
 11618  003598  A2AC               	btfss	4012,1,c	;volatile
 11619  00359A  D7FE               	goto	l1054
 11620                           
 11621                           ; BSR set to: 1
 11622                           ;main.c: 2223: WriteUSART(0x10);
 11623  00359C  0E10               	movlw	16
 11624  00359E  ECE7  F006         	call	_WriteUSART
 11625  0035A2                     l1057:
 11626  0035A2  A2AC               	btfss	4012,1,c	;volatile
 11627  0035A4  D7FE               	goto	l1057
 11628                           
 11629                           ;main.c: 2225: WriteUSART(0x02);
 11630  0035A6  0E02               	movlw	2
 11631  0035A8  ECE7  F006         	call	_WriteUSART
 11632  0035AC                     l1060:
 11633  0035AC  A2AC               	btfss	4012,1,c	;volatile
 11634  0035AE  D7FE               	goto	l1060
 11635                           
 11636                           ;main.c: 2229: WriteUSART(6);
 11637  0035B0  0E06               	movlw	6
 11638  0035B2  ECE7  F006         	call	_WriteUSART
 11639                           
 11640                           ;main.c: 2230: crc8(&crc, 6);
 11641  0035B6  0100               	movlb	0	; () banked
 11642  0035B8  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11643  0035BA  6E20               	movwf	?_crc8+1,c
 11644  0035BC  0E7D               	movlw	low receiveSendMultiEventCANAL@crc
 11645  0035BE  6E1F               	movwf	?_crc8,c
 11646  0035C0  0E06               	movlw	6
 11647  0035C2  6E21               	movwf	?_crc8+2,c
 11648  0035C4  ECEF  F007         	call	_crc8	;wreg free
 11649  0035C8                     l1063:
 11650  0035C8  A2AC               	btfss	4012,1,c	;volatile
 11651  0035CA  D7FE               	goto	l1063
 11652                           
 11653                           ;main.c: 2234: WriteUSART(0);
 11654  0035CC  0E00               	movlw	0
 11655  0035CE  ECE7  F006         	call	_WriteUSART
 11656                           
 11657                           ;main.c: 2235: crc8(&crc, 0);
 11658  0035D2  0100               	movlb	0	; () banked
 11659  0035D4  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11660  0035D6  6E20               	movwf	?_crc8+1,c
 11661  0035D8  0E7D               	movlw	low receiveSendMultiEventCANAL@crc
 11662  0035DA  6E1F               	movwf	?_crc8,c
 11663  0035DC  0E00               	movlw	0
 11664  0035DE  6A21               	clrf	?_crc8+2,c
 11665  0035E0  ECEF  F007         	call	_crc8	;wreg free
 11666                           
 11667                           ; BSR set to: 3
 11668                           ;main.c: 2238: sendEscapedUartData(sequencyno, &crc);
 11669  0035E4  0100               	movlb	0	; () banked
 11670  0035E6  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11671  0035E8  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11672  0035EA  0E7D               	movlw	low receiveSendMultiEventCANAL@crc
 11673  0035EC  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11674  0035EE  5034               	movf	_sequencyno,w,c
 11675  0035F0  EC7F  F00A         	call	_sendEscapedUartData
 11676                           
 11677                           ;main.c: 2239: sequencyno++;
 11678  0035F4  2A34               	incf	_sequencyno,f,c
 11679  0035F6                     l17142:
 11680                           
 11681                           ;main.c: 2249: wrkbuf[ pos ] = (id >> 24) & 0xff;
 11682  0035F6  0E82               	movlw	low _wrkbuf
 11683  0035F8  0100               	movlb	0	; () banked
 11684  0035FA  257E               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11685  0035FC  6ED9               	movwf	fsr2l,c
 11686  0035FE  6ADA               	clrf	fsr2h,c
 11687  003600  0E01               	movlw	high _wrkbuf
 11688  003602  22DA               	addwfc	fsr2h,f,c
 11689  003604  C07B  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 11690                           
 11691                           ; BSR set to: 0
 11692                           ;main.c: 2250: pos++;
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;main.c: 2251: wrkbuf[ pos ] = (id >> 16) & 0xff;
 11696  003608  D865               	call	PL28	;call to abstracted procedure
 11697  00360A  C07A  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;main.c: 2252: pos++;
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;main.c: 2253: wrkbuf[ pos ] = (id >> 8) & 0xff;
 11704  00360E  D862               	call	PL28	;call to abstracted procedure
 11705  003610  C079  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;main.c: 2254: pos++;
 11709                           
 11710                           ; BSR set to: 0
 11711                           ;main.c: 2255: wrkbuf[ pos ] = id & 0xff;
 11712  003614  D85F               	call	PL28	;call to abstracted procedure
 11713  003616  C078  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;main.c: 2256: pos++;
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;main.c: 2259: wrkbuf[ pos ] = dlc;
 11720  00361A  D85C               	call	PL28	;call to abstracted procedure
 11721  00361C  C07C  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;main.c: 2260: pos++;
 11725  003620  2B7E               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;main.c: 2263: for (i = 0; i < dlc; i++) {
 11729  003622  6B77               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11730  003624  D00F               	goto	l17170
 11731  003626                     l17164:
 11732                           
 11733                           ; BSR set to: 0
 11734                           ;main.c: 2264: wrkbuf[ pos ] = data[ i ];
 11735  003626  5177               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11736  003628  0F6E               	addlw	low receiveSendMultiEventCANAL@data
 11737  00362A  6ED9               	movwf	fsr2l,c
 11738  00362C  6ADA               	clrf	fsr2h,c
 11739  00362E  0E82               	movlw	low _wrkbuf
 11740  003630  0100               	movlb	0	; () banked
 11741  003632  257E               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11742  003634  6EE1               	movwf	fsr1l,c
 11743  003636  6AE2               	clrf	fsr1h,c
 11744  003638  0E01               	movlw	high _wrkbuf
 11745  00363A  22E2               	addwfc	fsr1h,f,c
 11746  00363C  CFDF FFE7          	movff	indf2,indf1
 11747                           
 11748                           ; BSR set to: 1
 11749                           ;main.c: 2265: pos++;
 11750  003640  2B7E               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11751                           
 11752                           ; BSR set to: 0
 11753  003642  2B77               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11754  003644                     l17170:
 11755                           
 11756                           ; BSR set to: 0
 11757  003644  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11758  003646  5D77               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11759  003648  E3EE               	bnc	l17164
 11760                           
 11761                           ; BSR set to: 0
 11762                           ;main.c: 2266: }
 11763                           ;main.c: 2268: msgcount++;
 11764  00364A  2B76               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;main.c: 2270: } while ( ( msgcount < caps.maxCanalFrames ) &&
 11768                           ;main.c: 2271: ( msgcount < 5 ) &&
 11769                           ;main.c: 2272: getCANFrame( &id, &dlc, &data ) );
 11770  00364C  0101               	movlb	1	; () banked
 11771  00364E  51F8               	movf	(_caps+1)& (0+255),w,b
 11772  003650  0100               	movlb	0	; () banked
 11773  003652  6176               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11774  003654  D009               	goto	l17180
 11775                           
 11776                           ; BSR set to: 0
 11777  003656  0E05               	movlw	5
 11778  003658  6176               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11779  00365A  D006               	goto	l17180
 11780                           
 11781                           ; BSR set to: 0
 11782  00365C  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11783  00365E  D842               	call	PL88	;call to abstracted procedure
 11784  003660  EC31  F00F         	call	_getCANFrame
 11785  003664  0900               	iorlw	0
 11786  003666  E1C7               	bnz	l17142
 11787  003668                     l17180:
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;main.c: 2277: sendEscapedUartData(0, &crc);
 11791  003668  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11792  00366A  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11793  00366C  0E7D               	movlw	low receiveSendMultiEventCANAL@crc
 11794  00366E  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11795  003670  0E00               	movlw	0
 11796  003672  EC7F  F00A         	call	_sendEscapedUartData
 11797                           
 11798                           ;main.c: 2278: sendEscapedUartData(pos, &crc);
 11799  003676  0100               	movlb	0	; () banked
 11800  003678  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11801  00367A  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11802  00367C  0E7D               	movlw	low receiveSendMultiEventCANAL@crc
 11803  00367E  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11804  003680  517E               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11805  003682  EC7F  F00A         	call	_sendEscapedUartData
 11806                           
 11807                           ;main.c: 2281: for (i = 0; i < pos; i++) {
 11808  003686  0100               	movlb	0	; () banked
 11809  003688  6B77               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11810  00368A  D011               	goto	l17188
 11811  00368C                     l17184:
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;main.c: 2282: sendEscapedUartData( wrkbuf[ i ], &crc);
 11815  00368C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11816  00368E  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11817  003690  0E7D               	movlw	low receiveSendMultiEventCANAL@crc
 11818  003692  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11819  003694  0E82               	movlw	low _wrkbuf
 11820  003696  0100               	movlb	0	; () banked
 11821  003698  2577               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11822  00369A  6ED9               	movwf	fsr2l,c
 11823  00369C  6ADA               	clrf	fsr2h,c
 11824  00369E  0101               	movlb	1	; () banked
 11825  0036A0  0E01               	movlw	high _wrkbuf
 11826  0036A2  22DA               	addwfc	fsr2h,f,c
 11827  0036A4  50DF               	movf	indf2,w,c
 11828  0036A6  EC7F  F00A         	call	_sendEscapedUartData
 11829  0036AA  0100               	movlb	0	; () banked
 11830  0036AC  2B77               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11831  0036AE                     l17188:
 11832                           
 11833                           ; BSR set to: 0
 11834  0036AE  517E               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11835  0036B0  5D77               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11836  0036B2  E3EC               	bnc	l17184
 11837                           
 11838                           ; BSR set to: 0
 11839                           ;main.c: 2283: }
 11840                           ;main.c: 2286: sendEscapedUartData(crc, (0));
 11841  0036B4  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11842  0036B6  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 11843  0036B8  517D               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11844  0036BA  EC7F  F00A         	call	_sendEscapedUartData
 11845  0036BE                     l1076:
 11846  0036BE  A2AC               	btfss	4012,1,c	;volatile
 11847  0036C0  D7FE               	goto	l1076
 11848                           
 11849                           ;main.c: 2290: WriteUSART(0x10);
 11850  0036C2  0E10               	movlw	16
 11851  0036C4  ECE7  F006         	call	_WriteUSART
 11852  0036C8                     l1079:
 11853  0036C8  A2AC               	btfss	4012,1,c	;volatile
 11854  0036CA  D7FE               	goto	l1079
 11855                           
 11856                           ;main.c: 2292: WriteUSART(0x03);
 11857  0036CC  0E03               	movlw	3
 11858  0036CE  ECE7  F006         	call	_WriteUSART
 11859  0036D2                     l1082:
 11860  0036D2  0012               	return	
 11861  0036D4                     __end_of_receiveSendMultiEventCANAL:
 11862                           	opt stack 0
 11863  0036D4                     PL28:
 11864                           	opt stack 22
 11865  0036D4  2B7E               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11866  0036D6  0E82               	movlw	low _wrkbuf
 11867  0036D8  257E               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11868  0036DA  6ED9               	movwf	fsr2l,c
 11869  0036DC  6ADA               	clrf	fsr2h,c
 11870  0036DE  0E01               	movlw	high _wrkbuf
 11871  0036E0  22DA               	addwfc	fsr2h,f,c
 11872  0036E2  0012               	return	
 11873  0036E4                     __end_ofPL28:
 11874                           	opt stack 0
 11875  0036E4                     PL88:
 11876                           	opt stack 22
 11877  0036E4  6F6B               	movwf	(?_getCANFrame+1)& (0+255),b
 11878  0036E6  0E7C               	movlw	low receiveSendMultiEventCANAL@dlc
 11879  0036E8  6F6A               	movwf	?_getCANFrame& (0+255),b
 11880  0036EA  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11881  0036EC  6F6D               	movwf	(?_getCANFrame+3)& (0+255),b
 11882  0036EE  0E6E               	movlw	low receiveSendMultiEventCANAL@data
 11883  0036F0  6F6C               	movwf	(?_getCANFrame+2)& (0+255),b
 11884  0036F2  0E78               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11885  0036F4  0012               	return	
 11886  0036F6                     __end_ofPL88:
 11887                           	opt stack 0
 11888                           tblptru	equ	0xFF8
 11889                           tblptrh	equ	0xFF7
 11890                           tblptrl	equ	0xFF6
 11891                           tablat	equ	0xFF5
 11892                           prodh	equ	0xFF4
 11893                           prodl	equ	0xFF3
 11894                           intcon	equ	0xFF2
 11895                           indf0	equ	0xFEF
 11896                           postinc0	equ	0xFEE
 11897                           fsr0h	equ	0xFEA
 11898                           fsr0l	equ	0xFE9
 11899                           wreg	equ	0xFE8
 11900                           indf1	equ	0xFE7
 11901                           postinc1	equ	0xFE6
 11902                           postdec1	equ	0xFE5
 11903                           fsr1h	equ	0xFE2
 11904                           fsr1l	equ	0xFE1
 11905                           indf2	equ	0xFDF
 11906                           postinc2	equ	0xFDE
 11907                           postdec2	equ	0xFDD
 11908                           plusw2	equ	0xFDB
 11909                           fsr2h	equ	0xFDA
 11910                           fsr2l	equ	0xFD9
 11911                           status	equ	0xFD8
 11912                           
 11913 ;; *************** function _sendEscapedUartData *****************
 11914 ;; Defined at:
 11915 ;;		line 1851 in file "main.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;  c               1    wreg     unsigned char 
 11918 ;;  pcrc            2    7[BANK0 ] PTR unsigned char 
 11919 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11920 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11921 ;;		 -> NULL(0), 
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;  c               1    9[BANK0 ] unsigned char 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;		None               void
 11926 ;; Registers used:
 11927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : E/1
 11930 ;;		On exit  : C/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11933 ;;      Params:         0       2       0       0       0       0       0
 11934 ;;      Locals:         0       1       0       0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0
 11936 ;;      Totals:         0       3       0       0       0       0       0
 11937 ;;Total ram usage:        3 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    5
 11940 ;; This function calls:
 11941 ;;		_WriteUSART
 11942 ;;		_crc8
 11943 ;; This function is called by:
 11944 ;;		_sendVSCPDriverErrorFrame
 11945 ;;		_sendVSCPDriverAck
 11946 ;;		_sendVSCPDriverNack
 11947 ;;		_sendVSCPDriverCommandReply
 11948 ;;		_receiveSendEventCANAL
 11949 ;;		_receiveSendMultiEventCANAL
 11950 ;;		_sendVSCPModeCapabilities
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           	psect	text19
 11955  0014FE                     __ptext19:
 11956                           	opt stack 0
 11957  0014FE                     _sendEscapedUartData:
 11958                           	opt stack 22
 11959                           
 11960                           ;incstack = 0
 11961                           ;incstack = 0
 11962                           ;sendEscapedUartData@c stored from wreg
 11963  0014FE  CFE8 F069          	movff	wreg,sendEscapedUartData@c
 11964                           
 11965                           ;main.c: 1852: if (0x10 == c) {
 11966  001502  0100               	movlb	0	; () banked
 11967  001504  5169               	movf	sendEscapedUartData@c& (0+255),w,b
 11968  001506  0A10               	xorlw	16
 11969  001508  E117               	bnz	l868
 11970  00150A                     l860:
 11971  00150A  A2AC               	btfss	4012,1,c	;volatile
 11972  00150C  D7FE               	goto	l860
 11973                           
 11974                           ;main.c: 1855: WriteUSART(0x10);
 11975  00150E  0E10               	movlw	16
 11976  001510  ECE7  F006         	call	_WriteUSART
 11977  001514                     l863:
 11978  001514  A2AC               	btfss	4012,1,c	;volatile
 11979  001516  D7FE               	goto	l863
 11980                           
 11981                           ;main.c: 1859: WriteUSART(0x10);
 11982  001518  0E10               	movlw	16
 11983  00151A  ECE7  F006         	call	_WriteUSART
 11984                           
 11985                           ;main.c: 1860: if ((0) != pcrc) crc8(pcrc, 0x10);
 11986  00151E  0100               	movlb	0	; () banked
 11987  001520  5168               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11988  001522  1167               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11989  001524  E01B               	bz	l872
 11990                           
 11991                           ; BSR set to: 0
 11992  001526  C067  F01F         	movff	sendEscapedUartData@pcrc,?_crc8
 11993  00152A  C068  F020         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11994  00152E  0E10               	movlw	16
 11995  001530  6E21               	movwf	?_crc8+2,c
 11996  001532  ECEF  F007         	call	_crc8	;wreg free
 11997  001536  D012               	goto	l872
 11998  001538                     l868:
 11999  001538  A2AC               	btfss	4012,1,c	;volatile
 12000  00153A  D7FE               	goto	l868
 12001                           
 12002                           ;main.c: 1866: WriteUSART(c);
 12003  00153C  0100               	movlb	0	; () banked
 12004  00153E  5169               	movf	sendEscapedUartData@c& (0+255),w,b
 12005  001540  ECE7  F006         	call	_WriteUSART
 12006                           
 12007                           ;main.c: 1867: if ((0) != pcrc) crc8(pcrc, c);
 12008  001544  0100               	movlb	0	; () banked
 12009  001546  5168               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 12010  001548  1167               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 12011  00154A  E008               	bz	l872
 12012                           
 12013                           ; BSR set to: 0
 12014  00154C  C067  F01F         	movff	sendEscapedUartData@pcrc,?_crc8
 12015  001550  C068  F020         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 12016  001554  C069  F021         	movff	sendEscapedUartData@c,?_crc8+2
 12017  001558  ECEF  F007         	call	_crc8	;wreg free
 12018  00155C                     l872:
 12019  00155C  0012               	return	
 12020  00155E                     __end_of_sendEscapedUartData:
 12021                           	opt stack 0
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           indf0	equ	0xFEF
 12030                           postinc0	equ	0xFEE
 12031                           fsr0h	equ	0xFEA
 12032                           fsr0l	equ	0xFE9
 12033                           wreg	equ	0xFE8
 12034                           indf1	equ	0xFE7
 12035                           postinc1	equ	0xFE6
 12036                           postdec1	equ	0xFE5
 12037                           fsr1h	equ	0xFE2
 12038                           fsr1l	equ	0xFE1
 12039                           indf2	equ	0xFDF
 12040                           postinc2	equ	0xFDE
 12041                           postdec2	equ	0xFDD
 12042                           plusw2	equ	0xFDB
 12043                           fsr2h	equ	0xFDA
 12044                           fsr2l	equ	0xFD9
 12045                           status	equ	0xFD8
 12046                           
 12047 ;; *************** function _crc8 *****************
 12048 ;; Defined at:
 12049 ;;		line 47 in file "crc8.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;  crc             2   30[COMRAM] PTR unsigned char 
 12052 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 12053 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 12054 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 12055 ;;  m               1   32[COMRAM] unsigned char 
 12056 ;; Auto vars:     Size  Location     Type
 12057 ;;		None
 12058 ;; Return value:  Size  Location     Type
 12059 ;;		None               void
 12060 ;; Registers used:
 12061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12062 ;; Tracked objects:
 12063 ;;		On entry : F/0
 12064 ;;		On exit  : F/3
 12065 ;;		Unchanged: 0/0
 12066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12067 ;;      Params:         3       0       0       0       0       0       0
 12068 ;;      Locals:         0       0       0       0       0       0       0
 12069 ;;      Temps:          2       0       0       0       0       0       0
 12070 ;;      Totals:         5       0       0       0       0       0       0
 12071 ;;Total ram usage:        5 bytes
 12072 ;; Hardware stack levels used:    1
 12073 ;; Hardware stack levels required when called:    4
 12074 ;; This function calls:
 12075 ;;		_init_crc8
 12076 ;; This function is called by:
 12077 ;;		_sendEscapedUartData
 12078 ;;		_sendVSCPDriverErrorFrame
 12079 ;;		_sendVSCPDriverAck
 12080 ;;		_sendVSCPDriverNack
 12081 ;;		_sendVSCPDriverCommandReply
 12082 ;;		_receiveSendEventCANAL
 12083 ;;		_receiveSendMultiEventCANAL
 12084 ;;		_sendVSCPModeCapabilities
 12085 ;;		_calcCRC
 12086 ;; This function uses a non-reentrant model
 12087 ;;
 12088                           
 12089                           	psect	text20
 12090  000FDE                     __ptext20:
 12091                           	opt stack 0
 12092  000FDE                     _crc8:
 12093                           	opt stack 23
 12094                           
 12095                           ; BSR set to: 0
 12096                           ;crc8.c: 48: if ( !made_table ) {
 12097                           
 12098                           ;incstack = 0
 12099                           ;incstack = 0
 12100  000FDE  0101               	movlb	1	; () banked
 12101  000FE0  5129               	movf	(_made_table+1)& (0+255),w,b
 12102  000FE2  1128               	iorwf	_made_table& (0+255),w,b
 12103  000FE4  B4D8               	btfsc	status,2,c
 12104                           
 12105                           ; BSR set to: 1
 12106                           ;crc8.c: 49: init_crc8();
 12107  000FE6  EC16  F00B         	call	_init_crc8	;wreg free
 12108                           
 12109                           ; BSR set to: 1
 12110                           ;crc8.c: 50: }
 12111                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 12112  000FEA  C01F  FFD9         	movff	crc8@crc,fsr2l
 12113  000FEE  C020  FFDA         	movff	crc8@crc+1,fsr2h
 12114  000FF2  50DF               	movf	indf2,w,c
 12115  000FF4  1821               	xorwf	crc8@m,w,c
 12116  000FF6  6E22               	movwf	??_crc8& (0+255),c
 12117  000FF8  6A23               	clrf	(??_crc8+1)& (0+255),c
 12118  000FFA  0103               	movlb	3	; () banked
 12119  000FFC  0E00               	movlw	low _crc8_table
 12120  000FFE  2422               	addwf	??_crc8,w,c
 12121  001000  6ED9               	movwf	fsr2l,c
 12122  001002  0E03               	movlw	high _crc8_table
 12123  001004  2023               	addwfc	??_crc8+1,w,c
 12124  001006  6EDA               	movwf	fsr2h,c
 12125  001008  C01F  FFE1         	movff	crc8@crc,fsr1l
 12126  00100C  C020  FFE2         	movff	crc8@crc+1,fsr1h
 12127  001010  CFDF FFE7          	movff	indf2,indf1
 12128                           
 12129                           ; BSR set to: 3
 12130  001014  0012               	return	
 12131  001016                     __end_of_crc8:
 12132                           	opt stack 0
 12133                           tblptru	equ	0xFF8
 12134                           tblptrh	equ	0xFF7
 12135                           tblptrl	equ	0xFF6
 12136                           tablat	equ	0xFF5
 12137                           prodh	equ	0xFF4
 12138                           prodl	equ	0xFF3
 12139                           intcon	equ	0xFF2
 12140                           indf0	equ	0xFEF
 12141                           postinc0	equ	0xFEE
 12142                           fsr0h	equ	0xFEA
 12143                           fsr0l	equ	0xFE9
 12144                           wreg	equ	0xFE8
 12145                           indf1	equ	0xFE7
 12146                           postinc1	equ	0xFE6
 12147                           postdec1	equ	0xFE5
 12148                           fsr1h	equ	0xFE2
 12149                           fsr1l	equ	0xFE1
 12150                           indf2	equ	0xFDF
 12151                           postinc2	equ	0xFDE
 12152                           postdec2	equ	0xFDD
 12153                           plusw2	equ	0xFDB
 12154                           fsr2h	equ	0xFDA
 12155                           fsr2l	equ	0xFD9
 12156                           status	equ	0xFD8
 12157                           
 12158 ;; *************** function _init_crc8 *****************
 12159 ;; Defined at:
 12160 ;;		line 25 in file "crc8.c"
 12161 ;; Parameters:    Size  Location     Type
 12162 ;;		None
 12163 ;; Auto vars:     Size  Location     Type
 12164 ;;  i               2    5[BANK0 ] int 
 12165 ;;  j               2    2[BANK0 ] int 
 12166 ;;  crc             1    4[BANK0 ] unsigned char 
 12167 ;; Return value:  Size  Location     Type
 12168 ;;		None               void
 12169 ;; Registers used:
 12170 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12171 ;; Tracked objects:
 12172 ;;		On entry : E/0
 12173 ;;		On exit  : F/1
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12176 ;;      Params:         0       0       0       0       0       0       0
 12177 ;;      Locals:         0       7       0       0       0       0       0
 12178 ;;      Temps:          0       0       0       0       0       0       0
 12179 ;;      Totals:         0       7       0       0       0       0       0
 12180 ;;Total ram usage:        7 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:    3
 12183 ;; This function calls:
 12184 ;;		Nothing
 12185 ;; This function is called by:
 12186 ;;		_main
 12187 ;;		_crc8
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           	psect	text21
 12192  00162C                     __ptext21:
 12193                           	opt stack 0
 12194  00162C                     _init_crc8:
 12195                           	opt stack 23
 12196                           
 12197                           ;crc8.c: 26: int i,j;
 12198                           ;crc8.c: 27: unsigned char crc;
 12199                           ;crc8.c: 29: if (!made_table) {
 12200                           
 12201                           ; BSR set to: 3
 12202                           ;incstack = 0
 12203                           ;incstack = 0
 12204  00162C  0101               	movlb	1	; () banked
 12205  00162E  5129               	movf	(_made_table+1)& (0+255),w,b
 12206  001630  1128               	iorwf	_made_table& (0+255),w,b
 12207  001632  E133               	bnz	l1666
 12208                           
 12209                           ; BSR set to: 1
 12210                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 12211  001634  0100               	movlb	0	; () banked
 12212  001636  6B65               	clrf	init_crc8@i& (0+255),b
 12213  001638  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 12214  00163A                     l1658:
 12215                           
 12216                           ; BSR set to: 0
 12217                           ;crc8.c: 31: crc = i;
 12218  00163A  C065  F064         	movff	init_crc8@i,init_crc8@crc
 12219                           
 12220                           ;crc8.c: 32: for (j=0; j<8; j++) {
 12221  00163E  6B62               	clrf	init_crc8@j& (0+255),b
 12222  001640  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 12223  001642                     l1660:
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 12227  001642  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 12228  001644  D003               	goto	l14564
 12229                           
 12230                           ; BSR set to: 0
 12231  001646  6B60               	clrf	_init_crc8$2106& (0+255),b
 12232  001648  6B61               	clrf	(_init_crc8$2106+1)& (0+255),b
 12233  00164A  D003               	goto	l14566
 12234  00164C                     l14564:
 12235                           
 12236                           ; BSR set to: 0
 12237  00164C  6B61               	clrf	(_init_crc8$2106+1)& (0+255),b
 12238  00164E  0E07               	movlw	7
 12239  001650  6F60               	movwf	_init_crc8$2106& (0+255),b
 12240  001652                     l14566:
 12241                           
 12242                           ; BSR set to: 0
 12243  001652  5164               	movf	init_crc8@crc& (0+255),w,b
 12244  001654  2564               	addwf	init_crc8@crc& (0+255),w,b
 12245  001656  1960               	xorwf	_init_crc8$2106& (0+255),w,b
 12246  001658  6F64               	movwf	init_crc8@crc& (0+255),b
 12247                           
 12248                           ; BSR set to: 0
 12249  00165A  4B62               	infsnz	init_crc8@j& (0+255),f,b
 12250  00165C  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 12251                           
 12252                           ; BSR set to: 0
 12253  00165E  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 12254  001660  0A80               	xorlw	128
 12255  001662  0F80               	addlw	-128
 12256  001664  0E08               	movlw	8
 12257  001666  B4D8               	btfsc	status,2,c
 12258  001668  5D62               	subwf	init_crc8@j& (0+255),w,b
 12259  00166A  E3EB               	bnc	l1660
 12260                           
 12261                           ; BSR set to: 0
 12262                           ;crc8.c: 34: }
 12263                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 12264  00166C  0E00               	movlw	low _crc8_table
 12265  00166E  0100               	movlb	0	; () banked
 12266  001670  2565               	addwf	init_crc8@i& (0+255),w,b
 12267  001672  6ED9               	movwf	fsr2l,c
 12268  001674  0E03               	movlw	high _crc8_table
 12269  001676  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 12270  001678  6EDA               	movwf	fsr2h,c
 12271  00167A  C064  FFDF         	movff	init_crc8@crc,indf2
 12272                           
 12273                           ; BSR set to: 0
 12274  00167E  4B65               	infsnz	init_crc8@i& (0+255),f,b
 12275  001680  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 12276                           
 12277                           ; BSR set to: 0
 12278  001682  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 12279  001684  0A80               	xorlw	128
 12280  001686  0F7F               	addlw	-129
 12281  001688  0E00               	movlw	0
 12282  00168A  B4D8               	btfsc	status,2,c
 12283  00168C  5D65               	subwf	init_crc8@i& (0+255),w,b
 12284  00168E  E3D5               	bnc	l1658
 12285                           
 12286                           ; BSR set to: 0
 12287                           ;crc8.c: 37: }
 12288                           ;crc8.c: 38: made_table=1;
 12289  001690  0E00               	movlw	0
 12290  001692  0101               	movlb	1	; () banked
 12291  001694  6F29               	movwf	(_made_table+1)& (0+255),b
 12292  001696  0E01               	movlw	1
 12293  001698  6F28               	movwf	_made_table& (0+255),b
 12294  00169A                     l1666:
 12295                           
 12296                           ; BSR set to: 1
 12297  00169A  0012               	return	
 12298  00169C                     __end_of_init_crc8:
 12299                           	opt stack 0
 12300                           tblptru	equ	0xFF8
 12301                           tblptrh	equ	0xFF7
 12302                           tblptrl	equ	0xFF6
 12303                           tablat	equ	0xFF5
 12304                           prodh	equ	0xFF4
 12305                           prodl	equ	0xFF3
 12306                           intcon	equ	0xFF2
 12307                           indf0	equ	0xFEF
 12308                           postinc0	equ	0xFEE
 12309                           fsr0h	equ	0xFEA
 12310                           fsr0l	equ	0xFE9
 12311                           wreg	equ	0xFE8
 12312                           indf1	equ	0xFE7
 12313                           postinc1	equ	0xFE6
 12314                           postdec1	equ	0xFE5
 12315                           fsr1h	equ	0xFE2
 12316                           fsr1l	equ	0xFE1
 12317                           indf2	equ	0xFDF
 12318                           postinc2	equ	0xFDE
 12319                           postdec2	equ	0xFDD
 12320                           plusw2	equ	0xFDB
 12321                           fsr2h	equ	0xFDA
 12322                           fsr2l	equ	0xFD9
 12323                           status	equ	0xFD8
 12324                           
 12325 ;; *************** function _doModeVerbose *****************
 12326 ;; Defined at:
 12327 ;;		line 618 in file "main.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;		None
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 12332 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 12333 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 12334 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 12335 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 12336 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 12337 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 12338 ;;		 -> cmdbuf(80), 
 12339 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 12340 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 12341 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 12342 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 12343 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 12344 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 12345 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 12346 ;;		 -> cmdbuf(80), 
 12347 ;;  id              4   64[BANK2 ] unsigned long 
 12348 ;;  p               2   68[BANK2 ] PTR unsigned char 
 12349 ;;		 -> NULL(0), cmdbuf(80), 
 12350 ;;  mask_class      2   10[BANK2 ] unsigned short 
 12351 ;;  maskno          1   50[BANK2 ] unsigned char 
 12352 ;;  bPersistent     1    0        enum E15660
 12353 ;;  mask_nodeid     1   17[BANK2 ] unsigned char 
 12354 ;;  mask_type       1   16[BANK2 ] unsigned char 
 12355 ;;  mask_priorit    1   15[BANK2 ] unsigned char 
 12356 ;;  id              4    0[BANK2 ] unsigned long 
 12357 ;;  p               2   70[BANK2 ] PTR unsigned char 
 12358 ;;		 -> NULL(0), cmdbuf(80), 
 12359 ;;  filter_class    2    8[BANK2 ] unsigned short 
 12360 ;;  filterno        1   44[BANK2 ] unsigned char 
 12361 ;;  bPersistent     1   43[BANK2 ] enum E15660
 12362 ;;  filter_nodei    1   14[BANK2 ] unsigned char 
 12363 ;;  filter_type     1   13[BANK2 ] unsigned char 
 12364 ;;  filter_prior    1   12[BANK2 ] unsigned char 
 12365 ;;  nodeid          1   54[BANK2 ] unsigned char 
 12366 ;;  value           1   42[BANK2 ] unsigned char 
 12367 ;;  p               2   59[BANK2 ] PTR unsigned char 
 12368 ;;		 -> NULL(0), cmdbuf(80), 
 12369 ;;  nodeid          1   49[BANK2 ] unsigned char 
 12370 ;;  value           1   46[BANK2 ] unsigned char 
 12371 ;;  reg             1   41[BANK2 ] unsigned char 
 12372 ;;  page            1   40[BANK2 ] unsigned char 
 12373 ;;  p               2   57[BANK2 ] PTR unsigned char 
 12374 ;;		 -> NULL(0), cmdbuf(80), 
 12375 ;;  value           1   56[BANK2 ] unsigned char 
 12376 ;;  i               1   53[BANK2 ] unsigned char 
 12377 ;;  reg             1   52[BANK2 ] unsigned char 
 12378 ;;  page            1   51[BANK2 ] unsigned char 
 12379 ;;  nodeid          1   48[BANK2 ] unsigned char 
 12380 ;;  count           1   47[BANK2 ] unsigned char 
 12381 ;;  rv              1   39[BANK2 ] enum E15660
 12382 ;;  p               2   62[BANK2 ] PTR unsigned char 
 12383 ;;		 -> NULL(0), cmdbuf(80), 
 12384 ;;  ifmode          1   61[BANK2 ] enum E16371
 12385 ;;  c               1   55[BANK2 ] unsigned char 
 12386 ;;  i               1   45[BANK2 ] unsigned char 
 12387 ;; Return value:  Size  Location     Type
 12388 ;;		None               void
 12389 ;; Registers used:
 12390 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12391 ;; Tracked objects:
 12392 ;;		On entry : F/1
 12393 ;;		On exit  : D/0
 12394 ;;		Unchanged: 0/0
 12395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12396 ;;      Params:         0       0       0       0       0       0       0
 12397 ;;      Locals:         0       0       0      72       0       0       0
 12398 ;;      Temps:          0      20       0       0       0       0       0
 12399 ;;      Totals:         0      20       0      72       0       0       0
 12400 ;;Total ram usage:       92 bytes
 12401 ;; Hardware stack levels used:    1
 12402 ;; Hardware stack levels required when called:   10
 12403 ;; This function calls:
 12404 ;;		_vscp_restoreDefaults
 12405 ;;		_putsUSART
 12406 ;;		_printFirmwareVersion
 12407 ;;		_fifo_read
 12408 ;;		_ECANSetOperationMode
 12409 ;;		_setFilter
 12410 ;;		__CANIDToRegs
 12411 ;;		_Busy_eep
 12412 ;;		_Write_b_eep
 12413 ;;		_receivePrintEventVerbose
 12414 ;;		_WriteUSART
 12415 ;;		_stristr
 12416 ;;		_strtok
 12417 ;;		_atoi
 12418 ;;		_memset
 12419 ;;		_sendVSCPFrame
 12420 ;;		_printStatistics
 12421 ;;		_printErrors
 12422 ;;		_printHelp
 12423 ;;		_findNodes
 12424 ;;		_strcpy
 12425 ;;		_strchr
 12426 ;;		_readRegisterExtended
 12427 ;;		_sprintf
 12428 ;;		_printBinary
 12429 ;;		_writeRegisterExtended
 12430 ;;		_printNodeFirmwareVersion
 12431 ;;		_printGUID
 12432 ;;		_printMDF
 12433 ;; This function is called by:
 12434 ;;		_main
 12435 ;; This function uses a non-reentrant model
 12436 ;;
 12437                           
 12438                           	psect	text22
 12439  005342                     __ptext22:
 12440                           	opt stack 0
 12441  005342                     _doModeVerbose:
 12442                           	opt stack 19
 12443                           
 12444                           ; BSR set to: 1
 12445                           ;main.c: 619: uint8_t c;
 12446                           ;main.c: 620: uint8_t i;
 12447                           ;main.c: 623: if (!bSilent) {
 12448                           
 12449                           ; BSR set to: 1
 12450                           ;incstack = 0
 12451                           ;incstack = 0
 12452  005342  662D               	tstfsz	_bSilent,c
 12453  005344  D002               	goto	l14706
 12454                           
 12455                           ; BSR set to: 1
 12456                           ;main.c: 624: receivePrintEventVerbose();
 12457  005346  EC7A  F022         	call	_receivePrintEventVerbose	;wreg free
 12458  00534A                     l14706:
 12459                           
 12460                           ;main.c: 625: }
 12461                           ;main.c: 628: (INTCONbits.GIE = 0);
 12462  00534A  9EF2               	bcf	intcon,7,c	;volatile
 12463                           
 12464                           ;main.c: 630: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 12465  00534C  0E01               	movlw	high _serialInputFifo
 12466  00534E  0100               	movlb	0	; () banked
 12467  005350  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 12468  005352  0EE2               	movlw	low _serialInputFifo
 12469  005354  6F60               	movwf	?_fifo_read& (0+255),b
 12470  005356  0E02               	movlw	high doModeVerbose@c
 12471  005358  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 12472  00535A  0EB7               	movlw	low doModeVerbose@c
 12473  00535C  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 12474  00535E  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 12475  005360  0E01               	movlw	1
 12476  005362  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 12477  005364  ECCC  F011         	call	_fifo_read	;wreg free
 12478  005368  0560               	decf	?_fifo_read& (0+255),w,b
 12479  00536A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 12480  00536C  E002 EFB9  F034    	bnz	l15596
 12481                           
 12482                           ; BSR set to: 0
 12483                           ;main.c: 633: (INTCONbits.GIE = 1);
 12484  005372  8EF2               	bsf	intcon,7,c	;volatile
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;main.c: 636: if ( bLocalEcho ) {
 12488  005374  502B               	movf	_bLocalEcho,w,c
 12489  005376  E00F               	bz	l14720
 12490                           
 12491                           ; BSR set to: 0
 12492                           ;main.c: 637: WriteUSART( c );
 12493  005378  0102               	movlb	2	; () banked
 12494  00537A  51B7               	movf	doModeVerbose@c& (0+255),w,b
 12495  00537C  ECE7  F006         	call	_WriteUSART
 12496  005380                     l513:
 12497  005380  A2AC               	btfss	4012,1,c	;volatile
 12498  005382  D7FE               	goto	l513
 12499                           
 12500                           ;main.c: 639: if ( 0x0d == c ) {
 12501  005384  0102               	movlb	2	; () banked
 12502  005386  51B7               	movf	doModeVerbose@c& (0+255),w,b
 12503  005388  0A0D               	xorlw	13
 12504  00538A  E105               	bnz	l14720
 12505                           
 12506                           ; BSR set to: 2
 12507                           ;main.c: 640: WriteUSART( 0x0a );
 12508  00538C  0E0A               	movlw	10
 12509  00538E  ECE7  F006         	call	_WriteUSART
 12510  005392                     l517:
 12511  005392  A2AC               	btfss	4012,1,c	;volatile
 12512  005394  D7FE               	goto	l517
 12513  005396                     l14720:
 12514                           
 12515                           ;main.c: 642: }
 12516                           ;main.c: 643: }
 12517                           ;main.c: 646: cmdbuf[ pos++ ] = c;
 12518  005396  0E32               	movlw	low _cmdbuf
 12519  005398  2432               	addwf	_pos,w,c
 12520  00539A  6ED9               	movwf	fsr2l,c
 12521  00539C  6ADA               	clrf	fsr2h,c
 12522  00539E  0E01               	movlw	high _cmdbuf
 12523  0053A0  22DA               	addwfc	fsr2h,f,c
 12524  0053A2  0102               	movlb	2	; () banked
 12525  0053A4  C2B7  FFDF         	movff	doModeVerbose@c,indf2
 12526                           
 12527                           ; BSR set to: 2
 12528  0053A8  2A32               	incf	_pos,f,c
 12529                           
 12530                           ; BSR set to: 2
 12531                           ;main.c: 647: if (pos >= sizeof( cmdbuf ) ) {
 12532  0053AA  0E4F               	movlw	79
 12533  0053AC  6432               	cpfsgt	_pos,c
 12534  0053AE  D001               	goto	l14728
 12535                           
 12536                           ; BSR set to: 2
 12537                           ;main.c: 650: pos = 0;
 12538  0053B0  6A32               	clrf	_pos,c
 12539  0053B2                     l14728:
 12540                           
 12541                           ; BSR set to: 2
 12542                           ;main.c: 651: }
 12543                           ;main.c: 654: if (0x0d == c) {
 12544  0053B2  51B7               	movf	doModeVerbose@c& (0+255),w,b
 12545  0053B4  0A0D               	xorlw	13
 12546  0053B6  E002 EFB9  F034    	bnz	l15596
 12547                           
 12548                           ; BSR set to: 2
 12549                           ;main.c: 656: cmdbuf[ pos ] = 0;
 12550  0053BC  0E32               	movlw	low _cmdbuf
 12551  0053BE  2432               	addwf	_pos,w,c
 12552  0053C0  6ED9               	movwf	fsr2l,c
 12553  0053C2  6ADA               	clrf	fsr2h,c
 12554  0053C4  0E01               	movlw	high _cmdbuf
 12555  0053C6  22DA               	addwfc	fsr2h,f,c
 12556  0053C8  6ADF               	clrf	indf2,c
 12557                           
 12558                           ; BSR set to: 1
 12559                           ;main.c: 659: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 12560  0053CA  0100               	movlb	0	; () banked
 12561  0053CC  6F69               	movwf	(?_stristr+1)& (0+255),b
 12562  0053CE  0E32               	movlw	low _cmdbuf
 12563  0053D0  6F68               	movwf	?_stristr& (0+255),b
 12564  0053D2  0E7C               	movlw	high STR_6
 12565  0053D4  6F6B               	movwf	(?_stristr+3)& (0+255),b
 12566  0053D6  0EC1               	movlw	low STR_6
 12567  0053D8  6F6A               	movwf	(?_stristr+2)& (0+255),b
 12568  0053DA  ECFD  F00B         	call	_stristr	;wreg free
 12569  0053DE  0E32               	movlw	low _cmdbuf
 12570  0053E0  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12571  0053E2  0E01               	movlw	high _cmdbuf
 12572  0053E4  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12573  0053E6  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12574  0053E8  E102               	bnz	u18705
 12575  0053EA  5168               	movf	?_stristr& (0+255),w,b
 12576  0053EC  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12577  0053EE                     u18705:
 12578  0053EE  E111               	bnz	l14740
 12579                           
 12580                           ; BSR set to: 0
 12581                           ;main.c: 660: putsUSART((char *) "Will enter bootloader now...\r\n");
 12582  0053F0  0E76               	movlw	high STR_7
 12583  0053F2  6E21               	movwf	?_putsUSART+1,c
 12584  0053F4  0EF6               	movlw	low STR_7
 12585  0053F6  6E20               	movwf	?_putsUSART,c
 12586  0053F8  EC74  F009         	call	_putsUSART	;wreg free
 12587                           
 12588                           ;main.c: 661: (Busy_eep(), Write_b_eep(0x00,0xFF));
 12589  0053FC  ECB3  F006         	call	_Busy_eep	;wreg free
 12590  005400  6A20               	clrf	?_Write_b_eep+1,c
 12591  005402  6A1F               	clrf	?_Write_b_eep,c
 12592  005404  0EFF               	movlw	255
 12593  005406  6821               	setf	?_Write_b_eep+2,c
 12594  005408  ECB9  F007         	call	_Write_b_eep	;wreg free
 12595  00540C  00FF               	reset		;# 
 12596                           
 12597                           ;main.c: 663: }
 12598  00540E  EFB0  F034         	goto	l15592
 12599  005412                     l14740:
 12600                           
 12601                           ; BSR set to: 0
 12602                           ;main.c: 665: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 12603  005412  EC63  F035         	call	PL70	;call to abstracted procedure
 12604  005416  ECFD  F00B         	call	_stristr	;wreg free
 12605  00541A  0E32               	movlw	low _cmdbuf
 12606  00541C  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12607  00541E  0E01               	movlw	high _cmdbuf
 12608  005420  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12609  005422  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12610  005424  E102               	bnz	u18715
 12611  005426  5168               	movf	?_stristr& (0+255),w,b
 12612  005428  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12613  00542A                     u18715:
 12614  00542A  E10C               	bnz	l14748
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;main.c: 666: bSilent = 0;
 12618  00542C  6A2D               	clrf	_bSilent,c
 12619                           
 12620                           ; BSR set to: 0
 12621                           ;main.c: 667: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12622  00542E  0E00               	movlw	0
 12623  005430  ECFD  F006         	call	_ECANSetOperationMode
 12624                           
 12625                           ;main.c: 668: putsUSART((char *) "+OK\r\n");
 12626  005434  0E7C               	movlw	high STR_9
 12627  005436  6E21               	movwf	?_putsUSART+1,c
 12628  005438  0E6B               	movlw	low STR_9
 12629  00543A  6E20               	movwf	?_putsUSART,c
 12630  00543C  EC74  F009         	call	_putsUSART	;wreg free
 12631                           
 12632                           ;main.c: 669: }
 12633  005440  EFB0  F034         	goto	l15592
 12634  005444                     l14748:
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;main.c: 671: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 12638  005444  0E01               	movlw	high _cmdbuf
 12639  005446  EC6D  F035         	call	PL86	;call to abstracted procedure
 12640  00544A  ECFD  F00B         	call	_stristr	;wreg free
 12641  00544E  0E32               	movlw	low _cmdbuf
 12642  005450  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12643  005452  0E01               	movlw	high _cmdbuf
 12644  005454  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12645  005456  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12646  005458  E102               	bnz	u18725
 12647  00545A  5168               	movf	?_stristr& (0+255),w,b
 12648  00545C  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12649  00545E                     u18725:
 12650  00545E  E10D               	bnz	l14756
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;main.c: 672: bSilent = 1;
 12654  005460  0E01               	movlw	1
 12655  005462  6E2D               	movwf	_bSilent,c
 12656                           
 12657                           ; BSR set to: 0
 12658                           ;main.c: 673: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12659  005464  0E00               	movlw	0
 12660  005466  ECFD  F006         	call	_ECANSetOperationMode
 12661                           
 12662                           ;main.c: 674: putsUSART((char *) "+OK\r\n");
 12663  00546A  0E7C               	movlw	high STR_9
 12664  00546C  6E21               	movwf	?_putsUSART+1,c
 12665  00546E  0E6B               	movlw	low STR_9
 12666  005470  6E20               	movwf	?_putsUSART,c
 12667  005472  EC74  F009         	call	_putsUSART	;wreg free
 12668                           
 12669                           ;main.c: 675: }
 12670  005476  EFB0  F034         	goto	l15592
 12671  00547A                     l14756:
 12672                           
 12673                           ; BSR set to: 0
 12674                           ;main.c: 677: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 12675  00547A  0E01               	movlw	high _cmdbuf
 12676  00547C  0100               	movlb	0	; () banked
 12677  00547E  EC76  F035         	call	PL100	;call to abstracted procedure
 12678  005482  ECFD  F00B         	call	_stristr	;wreg free
 12679  005486  0E32               	movlw	low _cmdbuf
 12680  005488  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12681  00548A  0E01               	movlw	high _cmdbuf
 12682  00548C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12683  00548E  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12684  005490  E102               	bnz	u18735
 12685  005492  5168               	movf	?_stristr& (0+255),w,b
 12686  005494  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12687  005496                     u18735:
 12688  005496  E10D               	bnz	l14764
 12689                           
 12690                           ; BSR set to: 0
 12691                           ;main.c: 678: bSilent = 1;
 12692  005498  0E01               	movlw	1
 12693  00549A  6E2D               	movwf	_bSilent,c
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;main.c: 679: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 12697  00549C  0E80               	movlw	128
 12698  00549E  ECFD  F006         	call	_ECANSetOperationMode
 12699                           
 12700                           ;main.c: 680: putsUSART((char *) "+OK\r\n");
 12701  0054A2  0E7C               	movlw	high STR_9
 12702  0054A4  6E21               	movwf	?_putsUSART+1,c
 12703  0054A6  0E6B               	movlw	low STR_9
 12704  0054A8  6E20               	movwf	?_putsUSART,c
 12705  0054AA  EC74  F009         	call	_putsUSART	;wreg free
 12706                           
 12707                           ;main.c: 681: }
 12708  0054AE  EFB0  F034         	goto	l15592
 12709  0054B2                     l14764:
 12710                           
 12711                           ; BSR set to: 0
 12712                           ;main.c: 683: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 12713  0054B2  0E01               	movlw	high _cmdbuf
 12714  0054B4  0100               	movlb	0	; () banked
 12715  0054B6  EC96  F035         	call	PL118	;call to abstracted procedure
 12716  0054BA  ECFD  F00B         	call	_stristr	;wreg free
 12717  0054BE  0E32               	movlw	low _cmdbuf
 12718  0054C0  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12719  0054C2  0E01               	movlw	high _cmdbuf
 12720  0054C4  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12721  0054C6  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12722  0054C8  E102               	bnz	u18745
 12723  0054CA  5168               	movf	?_stristr& (0+255),w,b
 12724  0054CC  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12725  0054CE                     u18745:
 12726  0054CE  E10C               	bnz	l14772
 12727                           
 12728                           ; BSR set to: 0
 12729                           ;main.c: 684: bSilent = 0;
 12730  0054D0  6A2D               	clrf	_bSilent,c
 12731                           
 12732                           ; BSR set to: 0
 12733                           ;main.c: 685: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 12734  0054D2  0E40               	movlw	64
 12735  0054D4  ECFD  F006         	call	_ECANSetOperationMode
 12736                           
 12737                           ;main.c: 686: putsUSART((char *) "+OK\r\n");
 12738  0054D8  0E7C               	movlw	high STR_9
 12739  0054DA  6E21               	movwf	?_putsUSART+1,c
 12740  0054DC  0E6B               	movlw	low STR_9
 12741  0054DE  6E20               	movwf	?_putsUSART,c
 12742  0054E0  EC74  F009         	call	_putsUSART	;wreg free
 12743                           
 12744                           ;main.c: 687: }
 12745  0054E4  EFB0  F034         	goto	l15592
 12746  0054E8                     l14772:
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;main.c: 689: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 12750  0054E8  0E01               	movlw	high _cmdbuf
 12751  0054EA  0100               	movlb	0	; () banked
 12752  0054EC  EC8E  F035         	call	PL116	;call to abstracted procedure
 12753  0054F0  ECFD  F00B         	call	_stristr	;wreg free
 12754  0054F4  0E32               	movlw	low _cmdbuf
 12755  0054F6  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12756  0054F8  0E01               	movlw	high _cmdbuf
 12757  0054FA  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12758  0054FC  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12759  0054FE  E102               	bnz	u18755
 12760  005500  5168               	movf	?_stristr& (0+255),w,b
 12761  005502  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12762  005504                     u18755:
 12763  005504  E10C               	bnz	l14780
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;main.c: 690: bSilent = 0;
 12767  005506  6A2D               	clrf	_bSilent,c
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;main.c: 691: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 12771  005508  0E60               	movlw	96
 12772  00550A  ECFD  F006         	call	_ECANSetOperationMode
 12773                           
 12774                           ;main.c: 692: putsUSART((char *) "+OK\r\n");
 12775  00550E  0E7C               	movlw	high STR_9
 12776  005510  6E21               	movwf	?_putsUSART+1,c
 12777  005512  0E6B               	movlw	low STR_9
 12778  005514  6E20               	movwf	?_putsUSART,c
 12779  005516  EC74  F009         	call	_putsUSART	;wreg free
 12780                           
 12781                           ;main.c: 693: }
 12782  00551A  EFB0  F034         	goto	l15592
 12783  00551E                     l14780:
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;main.c: 695: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 12787  00551E  0E01               	movlw	high _cmdbuf
 12788  005520  0100               	movlb	0	; () banked
 12789  005522  6F69               	movwf	(?_stristr+1)& (0+255),b
 12790  005524  0E32               	movlw	low _cmdbuf
 12791  005526  6F68               	movwf	?_stristr& (0+255),b
 12792  005528  0E7B               	movlw	high STR_18
 12793  00552A  6F6B               	movwf	(?_stristr+3)& (0+255),b
 12794  00552C  0EF9               	movlw	low STR_18
 12795  00552E  6F6A               	movwf	(?_stristr+2)& (0+255),b
 12796  005530  ECFD  F00B         	call	_stristr	;wreg free
 12797  005534  0E32               	movlw	low _cmdbuf
 12798  005536  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12799  005538  0E01               	movlw	high _cmdbuf
 12800  00553A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12801  00553C  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12802  00553E  E102               	bnz	u18765
 12803  005540  5168               	movf	?_stristr& (0+255),w,b
 12804  005542  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12805  005544                     u18765:
 12806  005544  E10A               	bnz	l14786
 12807                           
 12808                           ; BSR set to: 0
 12809                           ;main.c: 696: printFirmwareVersion();
 12810  005546  ECBE  F00C         	call	_printFirmwareVersion	;wreg free
 12811                           
 12812                           ;main.c: 697: putsUSART((char *) "+OK\r\n");
 12813  00554A  0E7C               	movlw	high STR_9
 12814  00554C  6E21               	movwf	?_putsUSART+1,c
 12815  00554E  0E6B               	movlw	low STR_9
 12816  005550  6E20               	movwf	?_putsUSART,c
 12817  005552  EC74  F009         	call	_putsUSART	;wreg free
 12818                           
 12819                           ;main.c: 698: }
 12820  005556  EFB0  F034         	goto	l15592
 12821  00555A                     l14786:
 12822                           
 12823                           ; BSR set to: 0
 12824                           ;main.c: 700: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 12825  00555A  0E01               	movlw	high _cmdbuf
 12826  00555C  0100               	movlb	0	; () banked
 12827  00555E  6F69               	movwf	(?_stristr+1)& (0+255),b
 12828  005560  0E32               	movlw	low _cmdbuf
 12829  005562  6F68               	movwf	?_stristr& (0+255),b
 12830  005564  0E7C               	movlw	high STR_20
 12831  005566  6F6B               	movwf	(?_stristr+3)& (0+255),b
 12832  005568  0E34               	movlw	low STR_20
 12833  00556A  6F6A               	movwf	(?_stristr+2)& (0+255),b
 12834  00556C  ECFD  F00B         	call	_stristr	;wreg free
 12835  005570  0E32               	movlw	low _cmdbuf
 12836  005572  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12837  005574  0E01               	movlw	high _cmdbuf
 12838  005576  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12839  005578  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12840  00557A  E102               	bnz	u18775
 12841  00557C  5168               	movf	?_stristr& (0+255),w,b
 12842  00557E  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12843  005580                     u18775:
 12844  005580  E15D               	bnz	l14822
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;main.c: 701: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12848  005582  506F               	movf	3951,w,c	;volatile
 12849  005584  0BE0               	andlw	224
 12850  005586  0102               	movlb	2	; () banked
 12851  005588  6FBD               	movwf	doModeVerbose@ifmode& (0+255),b
 12852                           
 12853                           ; BSR set to: 2
 12854                           ;main.c: 702: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12855  00558A  67BD               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12856  00558C  D00A               	goto	l14796
 12857                           
 12858                           ; BSR set to: 2
 12859  00558E  662D               	tstfsz	_bSilent,c
 12860  005590  D008               	goto	l14796
 12861                           
 12862                           ; BSR set to: 2
 12863                           ;main.c: 703: putsUSART((char *) "+OK - Normal mode\r\n");
 12864  005592  0E7A               	movlw	high STR_21
 12865  005594  6E21               	movwf	?_putsUSART+1,c
 12866  005596  0E18               	movlw	low STR_21
 12867  005598  6E20               	movwf	?_putsUSART,c
 12868  00559A  EC74  F009         	call	_putsUSART	;wreg free
 12869                           
 12870                           ;main.c: 704: }
 12871  00559E  EFB0  F034         	goto	l15592
 12872  0055A2                     l14796:
 12873                           
 12874                           ; BSR set to: 2
 12875                           ;main.c: 705: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12876  0055A2  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 12877  0055A4  0E01               	movlw	1
 12878  0055A6  A4D8               	btfss	status,2,c
 12879  0055A8  0E00               	movlw	0
 12880  0055AA  142D               	andwf	_bSilent,w,c
 12881  0055AC  E008               	bz	l14800
 12882                           
 12883                           ; BSR set to: 2
 12884                           ;main.c: 706: putsUSART((char *) "+OK - Silent mode\r\n");
 12885  0055AE  0E7A               	movlw	high STR_22
 12886  0055B0  6E21               	movwf	?_putsUSART+1,c
 12887  0055B2  0E2C               	movlw	low STR_22
 12888  0055B4  6E20               	movwf	?_putsUSART,c
 12889  0055B6  EC74  F009         	call	_putsUSART	;wreg free
 12890                           
 12891                           ;main.c: 707: }
 12892  0055BA  EFB0  F034         	goto	l15592
 12893  0055BE                     l14800:
 12894                           
 12895                           ; BSR set to: 2
 12896                           ;main.c: 708: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12897  0055BE  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 12898  0055C0  0A20               	xorlw	32
 12899  0055C2  E108               	bnz	l14804
 12900                           
 12901                           ; BSR set to: 2
 12902                           ;main.c: 709: putsUSART((char *) "+OK - Sleep mode\r\n");
 12903  0055C4  0E7A               	movlw	high STR_23
 12904  0055C6  6E21               	movwf	?_putsUSART+1,c
 12905  0055C8  0E68               	movlw	low STR_23
 12906  0055CA  6E20               	movwf	?_putsUSART,c
 12907  0055CC  EC74  F009         	call	_putsUSART	;wreg free
 12908                           
 12909                           ;main.c: 710: }
 12910  0055D0  EFB0  F034         	goto	l15592
 12911  0055D4                     l14804:
 12912                           
 12913                           ; BSR set to: 2
 12914                           ;main.c: 711: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12915  0055D4  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 12916  0055D6  0A40               	xorlw	64
 12917  0055D8  E108               	bnz	l14808
 12918                           
 12919                           ; BSR set to: 2
 12920                           ;main.c: 712: putsUSART((char *) "+OK - Loopback mode\r\n");
 12921  0055DA  0E79               	movlw	high STR_24
 12922  0055DC  6E21               	movwf	?_putsUSART+1,c
 12923  0055DE  0E5A               	movlw	low STR_24
 12924  0055E0  6E20               	movwf	?_putsUSART,c
 12925  0055E2  EC74  F009         	call	_putsUSART	;wreg free
 12926                           
 12927                           ;main.c: 713: }
 12928  0055E6  EFB0  F034         	goto	l15592
 12929  0055EA                     l14808:
 12930                           
 12931                           ; BSR set to: 2
 12932                           ;main.c: 714: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12933  0055EA  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 12934  0055EC  0A60               	xorlw	96
 12935  0055EE  E108               	bnz	l14812
 12936                           
 12937                           ; BSR set to: 2
 12938                           ;main.c: 715: putsUSART((char *) "+OK - Listen only mode\r\n");
 12939  0055F0  0E77               	movlw	high STR_25
 12940  0055F2  6E21               	movwf	?_putsUSART+1,c
 12941  0055F4  0EF3               	movlw	low STR_25
 12942  0055F6  6E20               	movwf	?_putsUSART,c
 12943  0055F8  EC74  F009         	call	_putsUSART	;wreg free
 12944                           
 12945                           ;main.c: 716: }
 12946  0055FC  EFB0  F034         	goto	l15592
 12947  005600                     l14812:
 12948                           
 12949                           ; BSR set to: 2
 12950                           ;main.c: 717: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12951  005600  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 12952  005602  0A80               	xorlw	128
 12953  005604  E108               	bnz	l14816
 12954                           
 12955                           ; BSR set to: 2
 12956                           ;main.c: 718: putsUSART((char *) "+OK - Closed mode\r\n");
 12957  005606  0E7A               	movlw	high STR_26
 12958  005608  6E21               	movwf	?_putsUSART+1,c
 12959  00560A  0E04               	movlw	low STR_26
 12960  00560C  6E20               	movwf	?_putsUSART,c
 12961  00560E  EC74  F009         	call	_putsUSART	;wreg free
 12962                           
 12963                           ;main.c: 719: }
 12964  005612  EFB0  F034         	goto	l15592
 12965  005616                     l14816:
 12966                           
 12967                           ; BSR set to: 2
 12968                           ;main.c: 720: else if (ECAN_OP_MODE_BITS == ifmode) {
 12969  005616  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 12970  005618  0AE0               	xorlw	224
 12971  00561A  E108               	bnz	l14820
 12972                           
 12973                           ; BSR set to: 2
 12974                           ;main.c: 721: putsUSART((char *) "+OK - Bits mode\r\n");
 12975  00561C  0E7A               	movlw	high STR_27
 12976  00561E  6E21               	movwf	?_putsUSART+1,c
 12977  005620  0E7B               	movlw	low STR_27
 12978  005622  6E20               	movwf	?_putsUSART,c
 12979  005624  EC74  F009         	call	_putsUSART	;wreg free
 12980                           
 12981                           ;main.c: 722: }
 12982  005628  EFB0  F034         	goto	l15592
 12983  00562C                     l14820:
 12984                           
 12985                           ; BSR set to: 2
 12986                           ;main.c: 723: else {
 12987                           ;main.c: 724: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12988  00562C  0E78               	movlw	high STR_28
 12989  00562E  6E21               	movwf	?_putsUSART+1,c
 12990  005630  0E86               	movlw	low STR_28
 12991  005632  6E20               	movwf	?_putsUSART,c
 12992  005634  EC74  F009         	call	_putsUSART	;wreg free
 12993  005638  EFB0  F034         	goto	l15592
 12994  00563C                     l14822:
 12995                           
 12996                           ; BSR set to: 0
 12997                           ;main.c: 729: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12998  00563C  0E01               	movlw	high _cmdbuf
 12999  00563E  0100               	movlb	0	; () banked
 13000  005640  6F69               	movwf	(?_stristr+1)& (0+255),b
 13001  005642  0E32               	movlw	low _cmdbuf
 13002  005644  6F68               	movwf	?_stristr& (0+255),b
 13003  005646  0E7C               	movlw	high STR_29
 13004  005648  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13005  00564A  0EEB               	movlw	low STR_29
 13006  00564C  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13007  00564E  ECFD  F00B         	call	_stristr	;wreg free
 13008  005652  0E32               	movlw	low _cmdbuf
 13009  005654  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13010  005656  0E01               	movlw	high _cmdbuf
 13011  005658  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13012  00565A  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13013  00565C  E102               	bnz	u18875
 13014  00565E  5168               	movf	?_stristr& (0+255),w,b
 13015  005660  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13016  005662                     u18875:
 13017  005662  E001 D0CD          	bnz	l14876
 13018                           
 13019                           ; BSR set to: 0
 13020                           ;main.c: 731: char *p = strtok(cmdbuf, ",");
 13021  005666  EC12  F035         	call	PL30	;call to abstracted procedure
 13022  00566A  EC05  F00D         	call	_strtok	;wreg free
 13023  00566E  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13024  005672  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13025                           
 13026                           ; BSR set to: 0
 13027                           ;main.c: 734: vscpPriority = 3;
 13028  005676  0E03               	movlw	3
 13029  005678  6E3F               	movwf	_vscpPriority,c
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;main.c: 735: if ((0) != p) {
 13033  00567A  0102               	movlb	2	; () banked
 13034  00567C  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13035  00567E  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13036  005680  E008               	bz	l14832
 13037                           
 13038                           ; BSR set to: 2
 13039                           ;main.c: 736: vscpPriority = atoi(p);
 13040  005682  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13041  005686  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13042  00568A  EC03  F015         	call	_atoi	;wreg free
 13043  00568E  5166               	movf	?_atoi& (0+255),w,b
 13044  005690  6E3F               	movwf	_vscpPriority,c
 13045  005692                     l14832:
 13046                           
 13047                           ;main.c: 737: }
 13048                           ;main.c: 740: vscpClass = 0;
 13049  005692  6A3A               	clrf	_vscpClass,c
 13050  005694  6A3B               	clrf	_vscpClass+1,c
 13051                           
 13052                           ;main.c: 741: if ((0) != (p = strtok((0), ","))) {
 13053  005696  ECBB  F034         	call	PL2	;call to abstracted procedure
 13054  00569A  EC05  F00D         	call	_strtok	;wreg free
 13055  00569E  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13056  0056A2  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13057  0056A6  0102               	movlb	2	; () banked
 13058  0056A8  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13059  0056AA  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13060  0056AC  E00A               	bz	l14838
 13061                           
 13062                           ; BSR set to: 2
 13063                           ;main.c: 742: vscpClass = atoi(p);
 13064  0056AE  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13065  0056B2  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13066  0056B6  EC03  F015         	call	_atoi	;wreg free
 13067  0056BA  C066  F03A         	movff	?_atoi,_vscpClass
 13068  0056BE  C067  F03B         	movff	?_atoi+1,_vscpClass+1
 13069  0056C2                     l14838:
 13070                           
 13071                           ;main.c: 743: }
 13072                           ;main.c: 746: vscpType = 0;
 13073  0056C2  6A41               	clrf	_vscpType,c
 13074                           
 13075                           ;main.c: 747: if ((0) != (p = strtok((0), ","))) {
 13076  0056C4  ECBB  F034         	call	PL2	;call to abstracted procedure
 13077  0056C8  EC05  F00D         	call	_strtok	;wreg free
 13078  0056CC  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13079  0056D0  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13080  0056D4  0102               	movlb	2	; () banked
 13081  0056D6  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13082  0056D8  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13083  0056DA  E008               	bz	l14844
 13084                           
 13085                           ; BSR set to: 2
 13086                           ;main.c: 748: vscpType = atoi(p);
 13087  0056DC  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13088  0056E0  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13089  0056E4  EC03  F015         	call	_atoi	;wreg free
 13090  0056E8  5166               	movf	?_atoi& (0+255),w,b
 13091  0056EA  6E41               	movwf	_vscpType,c
 13092  0056EC                     l14844:
 13093                           
 13094                           ;main.c: 749: }
 13095                           ;main.c: 752: vscpNodeId = 0;
 13096  0056EC  6A3E               	clrf	_vscpNodeId,c
 13097                           
 13098                           ;main.c: 753: if ((0) != (p = strtok((0), ","))) {
 13099  0056EE  ECBB  F034         	call	PL2	;call to abstracted procedure
 13100  0056F2  EC05  F00D         	call	_strtok	;wreg free
 13101  0056F6  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13102  0056FA  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13103  0056FE  0102               	movlb	2	; () banked
 13104  005700  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13105  005702  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13106  005704  E008               	bz	l14850
 13107                           
 13108                           ; BSR set to: 2
 13109                           ;main.c: 754: vscpNodeId = atoi(p);
 13110  005706  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13111  00570A  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13112  00570E  EC03  F015         	call	_atoi	;wreg free
 13113  005712  5166               	movf	?_atoi& (0+255),w,b
 13114  005714  6E3E               	movwf	_vscpNodeId,c
 13115  005716                     l14850:
 13116                           
 13117                           ;main.c: 755: }
 13118                           ;main.c: 758: vscpSize = 0;
 13119  005716  6A40               	clrf	_vscpSize,c
 13120                           
 13121                           ;main.c: 759: if ((0) != (p = strtok((0), ","))) {
 13122  005718  ECBB  F034         	call	PL2	;call to abstracted procedure
 13123  00571C  EC05  F00D         	call	_strtok	;wreg free
 13124  005720  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13125  005724  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13126  005728  0102               	movlb	2	; () banked
 13127  00572A  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13128  00572C  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13129  00572E  E008               	bz	l14856
 13130                           
 13131                           ; BSR set to: 2
 13132                           ;main.c: 760: vscpSize = atoi(p);
 13133  005730  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13134  005734  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13135  005738  EC03  F015         	call	_atoi	;wreg free
 13136  00573C  5166               	movf	?_atoi& (0+255),w,b
 13137  00573E  6E40               	movwf	_vscpSize,c
 13138  005740                     l14856:
 13139                           
 13140                           ;main.c: 761: }
 13141                           ;main.c: 763: memset( vscpData, 0, 8 );
 13142  005740  0E01               	movlw	high _vscpData
 13143  005742  0100               	movlb	0	; () banked
 13144  005744  6F61               	movwf	(?_memset+1)& (0+255),b
 13145  005746  0EEA               	movlw	low _vscpData
 13146  005748  6F60               	movwf	?_memset& (0+255),b
 13147  00574A  6B63               	clrf	(?_memset+3)& (0+255),b
 13148  00574C  6B62               	clrf	(?_memset+2)& (0+255),b
 13149  00574E  6B65               	clrf	(?_memset+5)& (0+255),b
 13150  005750  0E08               	movlw	8
 13151  005752  6F64               	movwf	(?_memset+4)& (0+255),b
 13152  005754  EC5A  F007         	call	_memset	;wreg free
 13153                           
 13154                           ; BSR set to: 0
 13155                           ;main.c: 764: for (i = 0; i < vscpSize; i++) {
 13156  005758  0102               	movlb	2	; () banked
 13157  00575A  6BAD               	clrf	doModeVerbose@i& (0+255),b
 13158  00575C  D01D               	goto	l14866
 13159  00575E                     l14860:
 13160                           
 13161                           ; BSR set to: 2
 13162                           ;main.c: 765: if ((0) != (p = strtok((0), ","))) {
 13163  00575E  ECBB  F034         	call	PL2	;call to abstracted procedure
 13164  005762  EC05  F00D         	call	_strtok	;wreg free
 13165  005766  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13166  00576A  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13167  00576E  0102               	movlb	2	; () banked
 13168  005770  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13169  005772  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13170  005774  E014               	bz	l14868
 13171                           
 13172                           ; BSR set to: 2
 13173                           ;main.c: 766: vscpData[ i ] = atoi(p);
 13174  005776  0EEA               	movlw	low _vscpData
 13175  005778  25AD               	addwf	doModeVerbose@i& (0+255),w,b
 13176  00577A  6ED9               	movwf	fsr2l,c
 13177  00577C  6ADA               	clrf	fsr2h,c
 13178  00577E  0101               	movlb	1	; () banked
 13179  005780  0E01               	movlw	high _vscpData
 13180  005782  22DA               	addwfc	fsr2h,f,c
 13181  005784  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13182  005788  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13183  00578C  EC03  F015         	call	_atoi	;wreg free
 13184  005790  5166               	movf	?_atoi& (0+255),w,b
 13185  005792  6EDF               	movwf	indf2,c
 13186                           
 13187                           ; BSR set to: 0
 13188                           
 13189                           ;main.c: 767: }
 13190  005794  0102               	movlb	2	; () banked
 13191  005796  2BAD               	incf	doModeVerbose@i& (0+255),f,b
 13192  005798                     l14866:
 13193                           
 13194                           ; BSR set to: 2
 13195  005798  5040               	movf	_vscpSize,w,c
 13196  00579A  5DAD               	subwf	doModeVerbose@i& (0+255),w,b
 13197  00579C  E3E0               	bnc	l14860
 13198  00579E                     l14868:
 13199                           
 13200                           ; BSR set to: 2
 13201                           ;main.c: 770: }
 13202                           ;main.c: 771: }
 13203                           ;main.c: 773: if ( sendVSCPFrame(vscpClass,
 13204                           ;main.c: 774: vscpType,
 13205                           ;main.c: 775: vscpNodeId,
 13206                           ;main.c: 776: vscpPriority,
 13207                           ;main.c: 777: vscpSize,
 13208                           ;main.c: 778: vscpData ) ) {
 13209  00579E  C03A  F093         	movff	_vscpClass,?_sendVSCPFrame
 13210  0057A2  C03B  F094         	movff	_vscpClass+1,?_sendVSCPFrame+1
 13211  0057A6  C041  F095         	movff	_vscpType,?_sendVSCPFrame+2
 13212  0057AA  C03E  F096         	movff	_vscpNodeId,?_sendVSCPFrame+3
 13213  0057AE  C03F  F097         	movff	_vscpPriority,?_sendVSCPFrame+4
 13214  0057B2  C040  F098         	movff	_vscpSize,?_sendVSCPFrame+5
 13215  0057B6  0E01               	movlw	high _vscpData
 13216  0057B8  0100               	movlb	0	; () banked
 13217  0057BA  6F9A               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 13218  0057BC  0EEA               	movlw	low _vscpData
 13219  0057BE  6F99               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 13220  0057C0  EC85  F00F         	call	_sendVSCPFrame	;wreg free
 13221  0057C4  0900               	iorlw	0
 13222  0057C6  E014               	bz	l14874
 13223                           
 13224                           ;main.c: 780: cntTxFrames++;
 13225  0057C8  0101               	movlb	1	; () banked
 13226  0057CA  2B14               	incf	_cntTxFrames& (0+255),f,b
 13227  0057CC  0E00               	movlw	0
 13228  0057CE  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 13229  0057D0  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 13230  0057D2  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 13231                           
 13232                           ;main.c: 781: cntTxBytes += vscpSize;
 13233  0057D4  5040               	movf	_vscpSize,w,c
 13234  0057D6  2710               	addwf	_cntTxBytes& (0+255),f,b
 13235  0057D8  0E00               	movlw	0
 13236  0057DA  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 13237  0057DC  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 13238  0057DE  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 13239                           
 13240                           ; BSR set to: 1
 13241                           ;main.c: 782: putsUSART((char *) "+OK\r\n");
 13242  0057E0  0E7C               	movlw	high STR_9
 13243  0057E2  6E21               	movwf	?_putsUSART+1,c
 13244  0057E4  0E6B               	movlw	low STR_9
 13245  0057E6  6E20               	movwf	?_putsUSART,c
 13246  0057E8  EC74  F009         	call	_putsUSART	;wreg free
 13247                           
 13248                           ;main.c: 783: }
 13249  0057EC  EFB0  F034         	goto	l15592
 13250  0057F0                     l14874:
 13251                           
 13252                           ;main.c: 784: else {
 13253                           ;main.c: 785: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 13254  0057F0  0E76               	movlw	high STR_37
 13255  0057F2  6E21               	movwf	?_putsUSART+1,c
 13256  0057F4  0E73               	movlw	low STR_37
 13257  0057F6  6E20               	movwf	?_putsUSART,c
 13258  0057F8  EC74  F009         	call	_putsUSART	;wreg free
 13259  0057FC  EFB0  F034         	goto	l15592
 13260  005800                     l14876:
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;main.c: 789: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 13264  005800  0E01               	movlw	high _cmdbuf
 13265  005802  0100               	movlb	0	; () banked
 13266  005804  6F69               	movwf	(?_stristr+1)& (0+255),b
 13267  005806  0E32               	movlw	low _cmdbuf
 13268  005808  6F68               	movwf	?_stristr& (0+255),b
 13269  00580A  0E7C               	movlw	high STR_38
 13270  00580C  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13271  00580E  0EE8               	movlw	low STR_38
 13272  005810  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13273  005812  ECFD  F00B         	call	_stristr	;wreg free
 13274  005816  0E32               	movlw	low _cmdbuf
 13275  005818  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13276  00581A  0E01               	movlw	high _cmdbuf
 13277  00581C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13278  00581E  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13279  005820  E102               	bnz	u18965
 13280  005822  5168               	movf	?_stristr& (0+255),w,b
 13281  005824  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13282  005826                     u18965:
 13283  005826  E114               	bnz	l14884
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;main.c: 790: if (receivePrintEventVerbose()) {
 13287  005828  EC7A  F022         	call	_receivePrintEventVerbose	;wreg free
 13288  00582C  0900               	iorlw	0
 13289  00582E  E008               	bz	l14882
 13290                           
 13291                           ;main.c: 791: putsUSART((char *) "+OK\r\n");
 13292  005830  0E7C               	movlw	high STR_9
 13293  005832  6E21               	movwf	?_putsUSART+1,c
 13294  005834  0E6B               	movlw	low STR_9
 13295  005836  6E20               	movwf	?_putsUSART,c
 13296  005838  EC74  F009         	call	_putsUSART	;wreg free
 13297                           
 13298                           ;main.c: 792: }
 13299  00583C  EFB0  F034         	goto	l15592
 13300  005840                     l14882:
 13301                           
 13302                           ;main.c: 793: else {
 13303                           ;main.c: 794: putsUSART((char *) "+OK - no events\r\n");
 13304  005840  0E7A               	movlw	high STR_40
 13305  005842  6E21               	movwf	?_putsUSART+1,c
 13306  005844  0E8D               	movlw	low STR_40
 13307  005846  6E20               	movwf	?_putsUSART,c
 13308  005848  EC74  F009         	call	_putsUSART	;wreg free
 13309  00584C  EFB0  F034         	goto	l15592
 13310  005850                     l14884:
 13311                           
 13312                           ; BSR set to: 0
 13313                           ;main.c: 798: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 13314  005850  0E01               	movlw	high _cmdbuf
 13315  005852  0100               	movlb	0	; () banked
 13316  005854  6F69               	movwf	(?_stristr+1)& (0+255),b
 13317  005856  0E32               	movlw	low _cmdbuf
 13318  005858  6F68               	movwf	?_stristr& (0+255),b
 13319  00585A  0E7C               	movlw	high STR_41
 13320  00585C  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13321  00585E  0EBC               	movlw	low STR_41
 13322  005860  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13323  005862  ECFD  F00B         	call	_stristr	;wreg free
 13324  005866  0E32               	movlw	low _cmdbuf
 13325  005868  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13326  00586A  0E01               	movlw	high _cmdbuf
 13327  00586C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13328  00586E  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13329  005870  E102               	bnz	u18985
 13330  005872  5168               	movf	?_stristr& (0+255),w,b
 13331  005874  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13332  005876                     u18985:
 13333  005876  E10A               	bnz	l14890
 13334                           
 13335                           ; BSR set to: 0
 13336                           ;main.c: 799: printStatistics();
 13337  005878  ECEB  F019         	call	_printStatistics	;wreg free
 13338                           
 13339                           ;main.c: 800: putsUSART((char *) "+OK\r\n");
 13340  00587C  0E7C               	movlw	high STR_9
 13341  00587E  6E21               	movwf	?_putsUSART+1,c
 13342  005880  0E6B               	movlw	low STR_9
 13343  005882  6E20               	movwf	?_putsUSART,c
 13344  005884  EC74  F009         	call	_putsUSART	;wreg free
 13345                           
 13346                           ;main.c: 801: }
 13347  005888  EFB0  F034         	goto	l15592
 13348  00588C                     l14890:
 13349                           
 13350                           ; BSR set to: 0
 13351                           ;main.c: 803: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 13352  00588C  0E01               	movlw	high _cmdbuf
 13353  00588E  0100               	movlb	0	; () banked
 13354  005890  6F69               	movwf	(?_stristr+1)& (0+255),b
 13355  005892  0E32               	movlw	low _cmdbuf
 13356  005894  6F68               	movwf	?_stristr& (0+255),b
 13357  005896  0E7C               	movlw	high STR_43
 13358  005898  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13359  00589A  0ED6               	movlw	low STR_43
 13360  00589C  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13361  00589E  ECFD  F00B         	call	_stristr	;wreg free
 13362  0058A2  0E32               	movlw	low _cmdbuf
 13363  0058A4  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13364  0058A6  0E01               	movlw	high _cmdbuf
 13365  0058A8  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13366  0058AA  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13367  0058AC  E102               	bnz	u18995
 13368  0058AE  5168               	movf	?_stristr& (0+255),w,b
 13369  0058B0  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13370  0058B2                     u18995:
 13371  0058B2  E10A               	bnz	l14896
 13372                           
 13373                           ; BSR set to: 0
 13374                           ;main.c: 804: printErrors();
 13375  0058B4  EC27  F021         	call	_printErrors	;wreg free
 13376                           
 13377                           ;main.c: 805: putsUSART((char *) "+OK\r\n");
 13378  0058B8  0E7C               	movlw	high STR_9
 13379  0058BA  6E21               	movwf	?_putsUSART+1,c
 13380  0058BC  0E6B               	movlw	low STR_9
 13381  0058BE  6E20               	movwf	?_putsUSART,c
 13382  0058C0  EC74  F009         	call	_putsUSART	;wreg free
 13383                           
 13384                           ;main.c: 806: }
 13385  0058C4  EFB0  F034         	goto	l15592
 13386  0058C8                     l14896:
 13387                           
 13388                           ; BSR set to: 0
 13389                           ;main.c: 808: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 13390  0058C8  0E01               	movlw	high _cmdbuf
 13391  0058CA  0100               	movlb	0	; () banked
 13392  0058CC  6F69               	movwf	(?_stristr+1)& (0+255),b
 13393  0058CE  0E32               	movlw	low _cmdbuf
 13394  0058D0  6F68               	movwf	?_stristr& (0+255),b
 13395  0058D2  0E7C               	movlw	high STR_45
 13396  0058D4  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13397  0058D6  0EB7               	movlw	low STR_45
 13398  0058D8  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13399  0058DA  ECFD  F00B         	call	_stristr	;wreg free
 13400  0058DE  0E32               	movlw	low _cmdbuf
 13401  0058E0  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13402  0058E2  0E01               	movlw	high _cmdbuf
 13403  0058E4  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13404  0058E6  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13405  0058E8  E102               	bnz	u19005
 13406  0058EA  5168               	movf	?_stristr& (0+255),w,b
 13407  0058EC  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13408  0058EE                     u19005:
 13409  0058EE  E10A               	bnz	l14900
 13410                           
 13411                           ; BSR set to: 0
 13412                           ;main.c: 809: printHelp();
 13413  0058F0  EC2B  F019         	call	_printHelp	;wreg free
 13414                           
 13415                           ;main.c: 810: putsUSART((char *) "+OK\r\n");
 13416  0058F4  0E7C               	movlw	high STR_9
 13417  0058F6  6E21               	movwf	?_putsUSART+1,c
 13418  0058F8  0E6B               	movlw	low STR_9
 13419  0058FA  6E20               	movwf	?_putsUSART,c
 13420  0058FC  EC74  F009         	call	_putsUSART	;wreg free
 13421                           
 13422                           ;main.c: 811: }
 13423  005900  EFB0  F034         	goto	l15592
 13424  005904                     l14900:
 13425                           
 13426                           ; BSR set to: 0
 13427                           ;main.c: 813: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 13428  005904  0E01               	movlw	high _cmdbuf
 13429  005906  0100               	movlb	0	; () banked
 13430  005908  6F69               	movwf	(?_stristr+1)& (0+255),b
 13431  00590A  0E32               	movlw	low _cmdbuf
 13432  00590C  6F68               	movwf	?_stristr& (0+255),b
 13433  00590E  0E7C               	movlw	high STR_47
 13434  005910  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13435  005912  0E94               	movlw	low STR_47
 13436  005914  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13437  005916  ECFD  F00B         	call	_stristr	;wreg free
 13438  00591A  0E32               	movlw	low _cmdbuf
 13439  00591C  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13440  00591E  0E01               	movlw	high _cmdbuf
 13441  005920  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13442  005922  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13443  005924  E102               	bnz	u19015
 13444  005926  5168               	movf	?_stristr& (0+255),w,b
 13445  005928  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13446  00592A                     u19015:
 13447  00592A  E10A               	bnz	l14906
 13448                           
 13449                           ; BSR set to: 0
 13450                           ;main.c: 814: findNodes();
 13451  00592C  EC36  F017         	call	_findNodes	;wreg free
 13452                           
 13453                           ;main.c: 815: putsUSART((char *) "+OK\r\n");
 13454  005930  0E7C               	movlw	high STR_9
 13455  005932  6E21               	movwf	?_putsUSART+1,c
 13456  005934  0E6B               	movlw	low STR_9
 13457  005936  6E20               	movwf	?_putsUSART,c
 13458  005938  EC74  F009         	call	_putsUSART	;wreg free
 13459                           
 13460                           ;main.c: 816: }
 13461  00593C  EFB0  F034         	goto	l15592
 13462  005940                     l14906:
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;main.c: 819: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 13466  005940  0E01               	movlw	high _cmdbuf
 13467  005942  0100               	movlb	0	; () banked
 13468  005944  6F69               	movwf	(?_stristr+1)& (0+255),b
 13469  005946  0E32               	movlw	low _cmdbuf
 13470  005948  6F68               	movwf	?_stristr& (0+255),b
 13471  00594A  0E7C               	movlw	high STR_49
 13472  00594C  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13473  00594E  0E99               	movlw	low STR_49
 13474  005950  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13475  005952  ECFD  F00B         	call	_stristr	;wreg free
 13476  005956  0E32               	movlw	low _cmdbuf
 13477  005958  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13478  00595A  0E01               	movlw	high _cmdbuf
 13479  00595C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13480  00595E  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13481  005960  E102               	bnz	u19025
 13482  005962  5168               	movf	?_stristr& (0+255),w,b
 13483  005964  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13484  005966                     u19025:
 13485  005966  E001 D20A          	bnz	l15074
 13486                           
 13487                           ; BSR set to: 0
 13488                           ;main.c: 821: uint8_t i;
 13489                           ;main.c: 822: uint8_t nodeid;
 13490                           ;main.c: 823: uint8_t page = 0;
 13491  00596A  0102               	movlb	2	; () banked
 13492  00596C  6BB3               	clrf	doModeVerbose@page& (0+255),b
 13493                           
 13494                           ; BSR set to: 2
 13495                           ;main.c: 824: uint8_t reg;
 13496                           ;main.c: 825: uint8_t value;
 13497                           ;main.c: 826: uint8_t count = 1;
 13498  00596E  0E01               	movlw	1
 13499  005970  6FAF               	movwf	doModeVerbose@count& (0+255),b
 13500                           
 13501                           ; BSR set to: 2
 13502                           ;main.c: 828: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13503  005972  506F               	movf	3951,w,c	;volatile
 13504  005974  0BE0               	andlw	224
 13505  005976  E011               	bz	l14922
 13506                           
 13507                           ; BSR set to: 2
 13508                           ;main.c: 829: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 13509  005978  0E70               	movlw	high STR_50
 13510  00597A  6E21               	movwf	?_putsUSART+1,c
 13511  00597C  0E5D               	movlw	low STR_50
 13512  00597E  6E20               	movwf	?_putsUSART,c
 13513  005980  EC74  F009         	call	_putsUSART	;wreg free
 13514  005984                     l14916:
 13515                           
 13516                           ;main.c: 830: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 13517  005984  0E01               	movlw	high _cmdbuf
 13518  005986  0100               	movlb	0	; () banked
 13519  005988  6F61               	movwf	(?_memset+1)& (0+255),b
 13520  00598A  0E32               	movlw	low _cmdbuf
 13521  00598C  EC94  F00D         	call	PL20	;call to abstracted procedure
 13522  005990  EC5A  F007         	call	_memset	;wreg free
 13523                           
 13524                           ; BSR set to: 0
 13525                           ;main.c: 831: pos = 0;
 13526  005994  6A32               	clrf	_pos,c
 13527  005996  EFBA  F034         	goto	l580
 13528  00599A                     l14922:
 13529                           
 13530                           ; BSR set to: 2
 13531                           ;main.c: 833: }
 13532                           ;main.c: 835: strcpy(cmdbuf, cmdbuf + 5);
 13533  00599A  ECCA  F034         	call	PL6	;call to abstracted procedure
 13534  00599E  EC71  F007         	call	_strcpy	;wreg free
 13535                           
 13536                           ; BSR set to: 0
 13537                           ;main.c: 836: char *p = strtok(cmdbuf, " ");
 13538  0059A2  0E01               	movlw	high _cmdbuf
 13539  0059A4  EC1C  F035         	call	PL36	;call to abstracted procedure
 13540  0059A8  EC05  F00D         	call	_strtok	;wreg free
 13541  0059AC  C068  F2B9         	movff	?_strtok,doModeVerbose@p_1211
 13542  0059B0  C069  F2BA         	movff	?_strtok+1,doModeVerbose@p_1211+1
 13543                           
 13544                           ; BSR set to: 0
 13545                           ;main.c: 837: if ((0) != p) {
 13546  0059B4  0102               	movlb	2	; () banked
 13547  0059B6  51BA               	movf	(doModeVerbose@p_1211+1)& (0+255),w,b
 13548  0059B8  11B9               	iorwf	doModeVerbose@p_1211& (0+255),w,b
 13549  0059BA  E00A               	bz	l14930
 13550                           
 13551                           ; BSR set to: 2
 13552                           ;main.c: 838: nodeid = atoi(p);
 13553  0059BC  C2B9  F066         	movff	doModeVerbose@p_1211,?_atoi
 13554  0059C0  C2BA  F067         	movff	doModeVerbose@p_1211+1,?_atoi+1
 13555  0059C4  EC03  F015         	call	_atoi	;wreg free
 13556  0059C8  5166               	movf	?_atoi& (0+255),w,b
 13557  0059CA  0102               	movlb	2	; () banked
 13558  0059CC  6FB0               	movwf	doModeVerbose@nodeid& (0+255),b
 13559                           
 13560                           ;main.c: 839: }
 13561  0059CE  D007               	goto	l14938
 13562  0059D0                     l14930:
 13563                           
 13564                           ; BSR set to: 2
 13565                           ;main.c: 840: else {
 13566                           ;main.c: 841: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13567  0059D0  0E78               	movlw	high STR_52
 13568  0059D2  6E21               	movwf	?_putsUSART+1,c
 13569  0059D4  0E6E               	movlw	low STR_52
 13570  0059D6  6E20               	movwf	?_putsUSART,c
 13571  0059D8  EC74  F009         	call	_putsUSART	;wreg free
 13572  0059DC  D7D3               	goto	l14916
 13573  0059DE                     l14938:
 13574                           
 13575                           ; BSR set to: 2
 13576                           ;main.c: 845: }
 13577                           ;main.c: 847: if ((0) != (p = strtok((0), " "))) {
 13578  0059DE  EC0A  F035         	call	PL26	;call to abstracted procedure
 13579  0059E2  EC05  F00D         	call	_strtok	;wreg free
 13580  0059E6  C068  F2B9         	movff	?_strtok,doModeVerbose@p_1211
 13581  0059EA  C069  F2BA         	movff	?_strtok+1,doModeVerbose@p_1211+1
 13582  0059EE  0102               	movlb	2	; () banked
 13583  0059F0  51BA               	movf	(doModeVerbose@p_1211+1)& (0+255),w,b
 13584  0059F2  11B9               	iorwf	doModeVerbose@p_1211& (0+255),w,b
 13585  0059F4  E033               	bz	l14946
 13586                           
 13587                           ; BSR set to: 2
 13588                           ;main.c: 849: char *preg;
 13589                           ;main.c: 850: if (preg = strchr(p, ':')) {
 13590  0059F6  C2B9  F01F         	movff	doModeVerbose@p_1211,?_strchr
 13591  0059FA  C2BA  F020         	movff	doModeVerbose@p_1211+1,?_strchr+1
 13592  0059FE  6A22               	clrf	?_strchr+3,c
 13593  005A00  0E3A               	movlw	58
 13594  005A02  6E21               	movwf	?_strchr+2,c
 13595  005A04  EC50  F00A         	call	_strchr	;wreg free
 13596  005A08  C01F  F284         	movff	?_strchr,doModeVerbose@preg
 13597  005A0C  C020  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 13598  005A10  0102               	movlb	2	; () banked
 13599  005A12  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 13600  005A14  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 13601  005A16  E018               	bz	l14944
 13602                           
 13603                           ; BSR set to: 2
 13604                           ;main.c: 851: page = atoi(p);
 13605  005A18  C2B9  F066         	movff	doModeVerbose@p_1211,?_atoi
 13606  005A1C  C2BA  F067         	movff	doModeVerbose@p_1211+1,?_atoi+1
 13607  005A20  EC03  F015         	call	_atoi	;wreg free
 13608  005A24  5166               	movf	?_atoi& (0+255),w,b
 13609  005A26  0102               	movlb	2	; () banked
 13610  005A28  6FB3               	movwf	doModeVerbose@page& (0+255),b
 13611                           
 13612                           ;main.c: 852: reg = atoi(preg + 1);
 13613  005A2A  2984               	incf	doModeVerbose@preg& (0+255),w,b
 13614  005A2C  0100               	movlb	0	; () banked
 13615  005A2E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13616  005A30  0E00               	movlw	0
 13617  005A32  0102               	movlb	2	; () banked
 13618  005A34  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 13619  005A36  0100               	movlb	0	; () banked
 13620  005A38  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13621  005A3A  C0C8  F066         	movff	??_doModeVerbose,?_atoi
 13622  005A3E  C0C9  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13623  005A42  EC03  F015         	call	_atoi	;wreg free
 13624  005A46  D006               	goto	L5
 13625  005A48                     l14944:
 13626                           
 13627                           ; BSR set to: 2
 13628                           ;main.c: 854: else {
 13629                           ;main.c: 855: reg = atoi(p);
 13630  005A48  C2B9  F066         	movff	doModeVerbose@p_1211,?_atoi
 13631  005A4C  C2BA  F067         	movff	doModeVerbose@p_1211+1,?_atoi+1
 13632  005A50  EC03  F015         	call	_atoi	;wreg free
 13633  005A54                     L5:
 13634  005A54  5166               	movf	?_atoi& (0+255),w,b
 13635  005A56  0102               	movlb	2	; () banked
 13636  005A58  6FB4               	movwf	doModeVerbose@reg& (0+255),b
 13637  005A5A  D007               	goto	l14954
 13638  005A5C                     l14946:
 13639                           
 13640                           ; BSR set to: 2
 13641                           ;main.c: 859: else {
 13642                           ;main.c: 860: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13643  005A5C  0E76               	movlw	high STR_54
 13644  005A5E  6E21               	movwf	?_putsUSART+1,c
 13645  005A60  0EB5               	movlw	low STR_54
 13646  005A62  6E20               	movwf	?_putsUSART,c
 13647  005A64  EC74  F009         	call	_putsUSART	;wreg free
 13648  005A68  D78D               	goto	l14916
 13649  005A6A                     l14954:
 13650                           
 13651                           ; BSR set to: 2
 13652                           ;main.c: 864: }
 13653                           ;main.c: 867: if ((0) != (p = strtok((0), " "))) {
 13654  005A6A  EC0A  F035         	call	PL26	;call to abstracted procedure
 13655  005A6E  EC05  F00D         	call	_strtok	;wreg free
 13656  005A72  C068  F2B9         	movff	?_strtok,doModeVerbose@p_1211
 13657  005A76  C069  F2BA         	movff	?_strtok+1,doModeVerbose@p_1211+1
 13658  005A7A  0102               	movlb	2	; () banked
 13659  005A7C  51BA               	movf	(doModeVerbose@p_1211+1)& (0+255),w,b
 13660  005A7E  11B9               	iorwf	doModeVerbose@p_1211& (0+255),w,b
 13661  005A80  E00D               	bz	l587
 13662                           
 13663                           ; BSR set to: 2
 13664                           ;main.c: 868: count = atoi(p);
 13665  005A82  C2B9  F066         	movff	doModeVerbose@p_1211,?_atoi
 13666  005A86  C2BA  F067         	movff	doModeVerbose@p_1211+1,?_atoi+1
 13667  005A8A  EC03  F015         	call	_atoi	;wreg free
 13668  005A8E  5166               	movf	?_atoi& (0+255),w,b
 13669  005A90  0102               	movlb	2	; () banked
 13670  005A92  6FAF               	movwf	doModeVerbose@count& (0+255),b
 13671                           
 13672                           ; BSR set to: 2
 13673                           ;main.c: 869: if (0 == count) count = 1;
 13674  005A94  67AF               	tstfsz	doModeVerbose@count& (0+255),b
 13675  005A96  D002               	goto	l587
 13676                           
 13677                           ; BSR set to: 2
 13678  005A98  0E01               	movlw	1
 13679  005A9A  6FAF               	movwf	doModeVerbose@count& (0+255),b
 13680  005A9C                     l587:
 13681                           
 13682                           ; BSR set to: 2
 13683                           ;main.c: 870: }
 13684                           ;main.c: 872: BOOL rv = 1;
 13685  005A9C  0E01               	movlw	1
 13686  005A9E  6FA7               	movwf	doModeVerbose@rv& (0+255),b
 13687                           
 13688                           ; BSR set to: 2
 13689                           ;main.c: 873: for ( i = 0; i < count; i++ ) {
 13690  005AA0  6BB5               	clrf	doModeVerbose@i_1204& (0+255),b
 13691  005AA2  D157               	goto	l15066
 13692  005AA4                     l14964:
 13693                           
 13694                           ; BSR set to: 2
 13695                           ;main.c: 875: if ( readRegisterExtended( nodeid,
 13696                           ;main.c: 876: page,
 13697                           ;main.c: 877: (reg + i) & 0xff,
 13698                           ;main.c: 878: rwtimeout,
 13699                           ;main.c: 879: &value ) ) {
 13700  005AA4  0100               	movlb	0	; () banked
 13701  005AA6  C2B3  F0B3         	movff	doModeVerbose@page,?_readRegisterExtended
 13702  005AAA  6BB4               	clrf	(?_readRegisterExtended+1)& (0+255),b
 13703  005AAC  0102               	movlb	2	; () banked
 13704  005AAE  51B4               	movf	doModeVerbose@reg& (0+255),w,b
 13705  005AB0  25B5               	addwf	doModeVerbose@i_1204& (0+255),w,b
 13706  005AB2  0100               	movlb	0	; () banked
 13707  005AB4  6FB5               	movwf	(?_readRegisterExtended+2)& (0+255),b
 13708  005AB6  C033  F0B6         	movff	_rwtimeout,?_readRegisterExtended+3
 13709  005ABA  6BB7               	clrf	(?_readRegisterExtended+4)& (0+255),b
 13710  005ABC  0E02               	movlw	high doModeVerbose@value
 13711  005ABE  6FB9               	movwf	(?_readRegisterExtended+6)& (0+255),b
 13712  005AC0  0EB8               	movlw	low doModeVerbose@value
 13713  005AC2  6FB8               	movwf	(?_readRegisterExtended+5)& (0+255),b
 13714  005AC4  0102               	movlb	2	; () banked
 13715  005AC6  51B0               	movf	doModeVerbose@nodeid& (0+255),w,b
 13716  005AC8  EC8A  F013         	call	_readRegisterExtended
 13717  005ACC  0900               	iorlw	0
 13718  005ACE  E101 D0C3          	bz	l591
 13719                           
 13720                           ;main.c: 880: putsUSART((char *) "+OK - nodeid=");
 13721  005AD2  0E7B               	movlw	high STR_56
 13722  005AD4  6E21               	movwf	?_putsUSART+1,c
 13723  005AD6  0E23               	movlw	low STR_56
 13724  005AD8  6E20               	movwf	?_putsUSART,c
 13725  005ADA  EC74  F009         	call	_putsUSART	;wreg free
 13726                           
 13727                           ;main.c: 881: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13728  005ADE  6629               	tstfsz	_bHex,c
 13729  005AE0  D005               	goto	l14972
 13730  005AE2  0E7C               	movlw	high STR_58
 13731  005AE4  0102               	movlb	2	; () banked
 13732  005AE6  6F94               	movwf	(_doModeVerbose$1223+1)& (0+255),b
 13733  005AE8  0E71               	movlw	low STR_58
 13734  005AEA  D004               	goto	L6
 13735  005AEC                     l14972:
 13736  005AEC  0E7B               	movlw	high STR_57
 13737  005AEE  0102               	movlb	2	; () banked
 13738  005AF0  6F94               	movwf	(_doModeVerbose$1223+1)& (0+255),b
 13739  005AF2  0E75               	movlw	low STR_57
 13740  005AF4                     L6:
 13741  005AF4  6F93               	movwf	_doModeVerbose$1223& (0+255),b
 13742                           
 13743                           ; BSR set to: 2
 13744  005AF6  0E01               	movlw	high _wrkbuf
 13745  005AF8  0100               	movlb	0	; () banked
 13746  005AFA  6F72               	movwf	(?_sprintf+1)& (0+255),b
 13747  005AFC  0E82               	movlw	low _wrkbuf
 13748  005AFE  6F71               	movwf	?_sprintf& (0+255),b
 13749  005B00  C293  F073         	movff	_doModeVerbose$1223,?_sprintf+2
 13750  005B04  C294  F074         	movff	_doModeVerbose$1223+1,?_sprintf+3
 13751  005B08  C2B0  F075         	movff	doModeVerbose@nodeid,?_sprintf+4
 13752  005B0C  6B76               	clrf	(?_sprintf+5)& (0+255),b
 13753  005B0E  ECFB  F025         	call	_sprintf	;wreg free
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;main.c: 882: putsUSART(wrkbuf);
 13757  005B12  0101               	movlb	1	; () banked
 13758  005B14  0E01               	movlw	high _wrkbuf
 13759  005B16  6E21               	movwf	?_putsUSART+1,c
 13760  005B18  0E82               	movlw	low _wrkbuf
 13761  005B1A  6E20               	movwf	?_putsUSART,c
 13762  005B1C  EC74  F009         	call	_putsUSART	;wreg free
 13763                           
 13764                           ;main.c: 883: putsUSART((char *) "Value for reg ");
 13765  005B20  0E7B               	movlw	high STR_59
 13766  005B22  6E21               	movwf	?_putsUSART+1,c
 13767  005B24  0E06               	movlw	low STR_59
 13768  005B26  6E20               	movwf	?_putsUSART,c
 13769  005B28  EC74  F009         	call	_putsUSART	;wreg free
 13770                           
 13771                           ;main.c: 884: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13772  005B2C  6629               	tstfsz	_bHex,c
 13773  005B2E  D005               	goto	l14984
 13774  005B30  0E7C               	movlw	high STR_61
 13775  005B32  0102               	movlb	2	; () banked
 13776  005B34  6F96               	movwf	(_doModeVerbose$1228+1)& (0+255),b
 13777  005B36  0EEE               	movlw	low STR_61
 13778  005B38  D004               	goto	L7
 13779  005B3A                     l14984:
 13780  005B3A  0E7C               	movlw	high STR_60
 13781  005B3C  0102               	movlb	2	; () banked
 13782  005B3E  6F96               	movwf	(_doModeVerbose$1228+1)& (0+255),b
 13783  005B40  0E50               	movlw	low STR_60
 13784  005B42                     L7:
 13785  005B42  6F95               	movwf	_doModeVerbose$1228& (0+255),b
 13786                           
 13787                           ; BSR set to: 2
 13788  005B44  0E01               	movlw	high _wrkbuf
 13789  005B46  0100               	movlb	0	; () banked
 13790  005B48  6F72               	movwf	(?_sprintf+1)& (0+255),b
 13791  005B4A  0E82               	movlw	low _wrkbuf
 13792  005B4C  6F71               	movwf	?_sprintf& (0+255),b
 13793  005B4E  C295  F073         	movff	_doModeVerbose$1228,?_sprintf+2
 13794  005B52  C296  F074         	movff	_doModeVerbose$1228+1,?_sprintf+3
 13795  005B56  C2B3  F075         	movff	doModeVerbose@page,?_sprintf+4
 13796  005B5A  6B76               	clrf	(?_sprintf+5)& (0+255),b
 13797  005B5C  ECFB  F025         	call	_sprintf	;wreg free
 13798                           
 13799                           ; BSR set to: 0
 13800                           ;main.c: 885: putsUSART(wrkbuf);
 13801  005B60  0101               	movlb	1	; () banked
 13802  005B62  0E01               	movlw	high _wrkbuf
 13803  005B64  6E21               	movwf	?_putsUSART+1,c
 13804  005B66  0E82               	movlw	low _wrkbuf
 13805  005B68  6E20               	movwf	?_putsUSART,c
 13806  005B6A  EC74  F009         	call	_putsUSART	;wreg free
 13807                           
 13808                           ;main.c: 886: WriteUSART(':');
 13809  005B6E  0E3A               	movlw	58
 13810  005B70  ECE7  F006         	call	_WriteUSART
 13811  005B74                     l600:
 13812  005B74  A2AC               	btfss	4012,1,c	;volatile
 13813  005B76  D7FE               	goto	l600
 13814                           
 13815                           ;main.c: 888: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13816  005B78  6629               	tstfsz	_bHex,c
 13817  005B7A  D005               	goto	l14994
 13818  005B7C  0E7C               	movlw	high STR_61
 13819  005B7E  0102               	movlb	2	; () banked
 13820  005B80  6F98               	movwf	(_doModeVerbose$1232+1)& (0+255),b
 13821  005B82  0EEE               	movlw	low STR_61
 13822  005B84  D004               	goto	L8
 13823  005B86                     l14994:
 13824  005B86  0E7C               	movlw	high STR_60
 13825  005B88  0102               	movlb	2	; () banked
 13826  005B8A  6F98               	movwf	(_doModeVerbose$1232+1)& (0+255),b
 13827  005B8C  0E50               	movlw	low STR_60
 13828  005B8E                     L8:
 13829  005B8E  6F97               	movwf	_doModeVerbose$1232& (0+255),b
 13830                           
 13831                           ; BSR set to: 2
 13832  005B90  0E01               	movlw	high _wrkbuf
 13833  005B92  0100               	movlb	0	; () banked
 13834  005B94  6F72               	movwf	(?_sprintf+1)& (0+255),b
 13835  005B96  0E82               	movlw	low _wrkbuf
 13836  005B98  6F71               	movwf	?_sprintf& (0+255),b
 13837  005B9A  C297  F073         	movff	_doModeVerbose$1232,?_sprintf+2
 13838  005B9E  C298  F074         	movff	_doModeVerbose$1232+1,?_sprintf+3
 13839  005BA2  EC25  F035         	call	PL42	;call to abstracted procedure
 13840  005BA6  ECFB  F025         	call	_sprintf	;wreg free
 13841                           
 13842                           ; BSR set to: 0
 13843                           ;main.c: 889: putsUSART(wrkbuf);
 13844  005BAA  0101               	movlb	1	; () banked
 13845  005BAC  0E01               	movlw	high _wrkbuf
 13846  005BAE  6E21               	movwf	?_putsUSART+1,c
 13847  005BB0  0E82               	movlw	low _wrkbuf
 13848  005BB2  6E20               	movwf	?_putsUSART,c
 13849  005BB4  EC74  F009         	call	_putsUSART	;wreg free
 13850                           
 13851                           ;main.c: 890: putsUSART((char *) " = ");
 13852  005BB8  0E7B               	movlw	high (STR_286+4)
 13853  005BBA  6E21               	movwf	?_putsUSART+1,c
 13854  005BBC  0EDD               	movlw	low (STR_286+4)
 13855  005BBE  6E20               	movwf	?_putsUSART,c
 13856  005BC0  EC74  F009         	call	_putsUSART	;wreg free
 13857                           
 13858                           ;main.c: 891: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 13859  005BC4  6629               	tstfsz	_bHex,c
 13860  005BC6  D005               	goto	l15006
 13861  005BC8  0E7C               	movlw	high STR_61
 13862  005BCA  0102               	movlb	2	; () banked
 13863  005BCC  6F9A               	movwf	(_doModeVerbose$1237+1)& (0+255),b
 13864  005BCE  0EEE               	movlw	low STR_61
 13865  005BD0  D004               	goto	L9
 13866  005BD2                     l15006:
 13867  005BD2  0E7C               	movlw	high STR_60
 13868  005BD4  0102               	movlb	2	; () banked
 13869  005BD6  6F9A               	movwf	(_doModeVerbose$1237+1)& (0+255),b
 13870  005BD8  0E50               	movlw	low STR_60
 13871  005BDA                     L9:
 13872  005BDA  6F99               	movwf	_doModeVerbose$1237& (0+255),b
 13873                           
 13874                           ; BSR set to: 2
 13875  005BDC  0E01               	movlw	high _wrkbuf
 13876  005BDE  0100               	movlb	0	; () banked
 13877  005BE0  6F72               	movwf	(?_sprintf+1)& (0+255),b
 13878  005BE2  0E82               	movlw	low _wrkbuf
 13879  005BE4  6F71               	movwf	?_sprintf& (0+255),b
 13880  005BE6  C299  F073         	movff	_doModeVerbose$1237,?_sprintf+2
 13881  005BEA  C29A  F074         	movff	_doModeVerbose$1237+1,?_sprintf+3
 13882  005BEE  C2B8  F075         	movff	doModeVerbose@value,?_sprintf+4
 13883  005BF2  6B76               	clrf	(?_sprintf+5)& (0+255),b
 13884  005BF4  ECFB  F025         	call	_sprintf	;wreg free
 13885                           
 13886                           ; BSR set to: 0
 13887                           ;main.c: 892: putsUSART(wrkbuf);
 13888  005BF8  0101               	movlb	1	; () banked
 13889  005BFA  0E01               	movlw	high _wrkbuf
 13890  005BFC  6E21               	movwf	?_putsUSART+1,c
 13891  005BFE  0E82               	movlw	low _wrkbuf
 13892  005C00  6E20               	movwf	?_putsUSART,c
 13893  005C02  EC74  F009         	call	_putsUSART	;wreg free
 13894  005C06                     l611:
 13895  005C06  A2AC               	btfss	4012,1,c	;volatile
 13896  005C08  D7FE               	goto	l611
 13897                           
 13898                           ;main.c: 894: putsUSART("\t\'");
 13899  005C0A  0E7C               	movlw	high STR_67
 13900  005C0C  6E21               	movwf	?_putsUSART+1,c
 13901  005C0E  0EE2               	movlw	low STR_67
 13902  005C10  6E20               	movwf	?_putsUSART,c
 13903  005C12  EC74  F009         	call	_putsUSART	;wreg free
 13904                           
 13905                           ;main.c: 895: if ((value > 32) && (value < 127)) {
 13906  005C16  0E20               	movlw	32
 13907  005C18  0102               	movlb	2	; () banked
 13908  005C1A  65B8               	cpfsgt	doModeVerbose@value& (0+255),b
 13909  005C1C  D007               	goto	l15020
 13910                           
 13911                           ; BSR set to: 2
 13912  005C1E  0E7F               	movlw	127
 13913  005C20  61B8               	cpfslt	doModeVerbose@value& (0+255),b
 13914  005C22  D004               	goto	l15020
 13915                           
 13916                           ; BSR set to: 2
 13917                           ;main.c: 896: WriteUSART(value);
 13918  005C24  51B8               	movf	doModeVerbose@value& (0+255),w,b
 13919  005C26  ECE7  F006         	call	_WriteUSART
 13920                           
 13921                           ;main.c: 897: }
 13922  005C2A  D003               	goto	l616
 13923  005C2C                     l15020:
 13924                           
 13925                           ; BSR set to: 2
 13926                           ;main.c: 898: else {
 13927                           ;main.c: 899: WriteUSART('.');
 13928  005C2C  0E2E               	movlw	46
 13929  005C2E  ECE7  F006         	call	_WriteUSART
 13930  005C32                     l616:
 13931  005C32  A2AC               	btfss	4012,1,c	;volatile
 13932  005C34  D7FE               	goto	l616
 13933                           
 13934                           ;main.c: 902: putsUSART("\' \t");
 13935  005C36  0E7C               	movlw	high STR_68
 13936  005C38  6E21               	movwf	?_putsUSART+1,c
 13937  005C3A  0EC6               	movlw	low STR_68
 13938  005C3C  6E20               	movwf	?_putsUSART,c
 13939  005C3E  EC74  F009         	call	_putsUSART	;wreg free
 13940                           
 13941                           ;main.c: 903: printBinary(value);
 13942  005C42  0102               	movlb	2	; () banked
 13943  005C44  51B8               	movf	doModeVerbose@value& (0+255),w,b
 13944  005C46  EC4F  F009         	call	_printBinary
 13945                           
 13946                           ; BSR set to: 0
 13947                           ;main.c: 904: putsUSART((char *) "\r\n");
 13948  005C4A  0E70               	movlw	high (STR_237+50)
 13949  005C4C  6E21               	movwf	?_putsUSART+1,c
 13950  005C4E  0E5A               	movlw	low (STR_237+50)
 13951  005C50  6E20               	movwf	?_putsUSART,c
 13952  005C52  EC74  F009         	call	_putsUSART	;wreg free
 13953                           
 13954                           ;main.c: 905: }
 13955  005C56  D07B               	goto	l15064
 13956  005C58                     l591:
 13957                           
 13958                           ;main.c: 906: else {
 13959                           ;main.c: 907: rv = 0;
 13960  005C58  0102               	movlb	2	; () banked
 13961  005C5A  6BA7               	clrf	doModeVerbose@rv& (0+255),b
 13962                           
 13963                           ; BSR set to: 2
 13964                           ;main.c: 908: putsUSART((char *) "-ERROR - nodeid=");
 13965  005C5C  0E7A               	movlw	high STR_70
 13966  005C5E  6E21               	movwf	?_putsUSART+1,c
 13967  005C60  0EF5               	movlw	low STR_70
 13968  005C62  6E20               	movwf	?_putsUSART,c
 13969  005C64  EC74  F009         	call	_putsUSART	;wreg free
 13970                           
 13971                           ;main.c: 909: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13972  005C68  6629               	tstfsz	_bHex,c
 13973  005C6A  D005               	goto	l15034
 13974  005C6C  0E7C               	movlw	high STR_58
 13975  005C6E  0102               	movlb	2	; () banked
 13976  005C70  6F9C               	movwf	(_doModeVerbose$1245+1)& (0+255),b
 13977  005C72  0E71               	movlw	low STR_58
 13978  005C74  D004               	goto	L10
 13979  005C76                     l15034:
 13980  005C76  0E7B               	movlw	high STR_57
 13981  005C78  0102               	movlb	2	; () banked
 13982  005C7A  6F9C               	movwf	(_doModeVerbose$1245+1)& (0+255),b
 13983  005C7C  0E75               	movlw	low STR_57
 13984  005C7E                     L10:
 13985  005C7E  6F9B               	movwf	_doModeVerbose$1245& (0+255),b
 13986                           
 13987                           ; BSR set to: 2
 13988  005C80  0E01               	movlw	high _wrkbuf
 13989  005C82  0100               	movlb	0	; () banked
 13990  005C84  6F72               	movwf	(?_sprintf+1)& (0+255),b
 13991  005C86  0E82               	movlw	low _wrkbuf
 13992  005C88  6F71               	movwf	?_sprintf& (0+255),b
 13993  005C8A  C29B  F073         	movff	_doModeVerbose$1245,?_sprintf+2
 13994  005C8E  C29C  F074         	movff	_doModeVerbose$1245+1,?_sprintf+3
 13995  005C92  C2B0  F075         	movff	doModeVerbose@nodeid,?_sprintf+4
 13996  005C96  6B76               	clrf	(?_sprintf+5)& (0+255),b
 13997  005C98  ECFB  F025         	call	_sprintf	;wreg free
 13998                           
 13999                           ; BSR set to: 0
 14000                           ;main.c: 910: putsUSART(wrkbuf);
 14001  005C9C  0101               	movlb	1	; () banked
 14002  005C9E  0E01               	movlw	high _wrkbuf
 14003  005CA0  6E21               	movwf	?_putsUSART+1,c
 14004  005CA2  0E82               	movlw	low _wrkbuf
 14005  005CA4  6E20               	movwf	?_putsUSART,c
 14006  005CA6  EC74  F009         	call	_putsUSART	;wreg free
 14007                           
 14008                           ;main.c: 911: putsUSART((char *) "Unable to read register ");
 14009  005CAA  0E78               	movlw	high STR_73
 14010  005CAC  6E21               	movwf	?_putsUSART+1,c
 14011  005CAE  0E25               	movlw	low STR_73
 14012  005CB0  6E20               	movwf	?_putsUSART,c
 14013  005CB2  EC74  F009         	call	_putsUSART	;wreg free
 14014  005CB6                     l624:
 14015  005CB6  A2AC               	btfss	4012,1,c	;volatile
 14016  005CB8  D7FE               	goto	l624
 14017                           
 14018                           ;main.c: 913: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 14019  005CBA  6629               	tstfsz	_bHex,c
 14020  005CBC  D005               	goto	l15044
 14021  005CBE  0E7C               	movlw	high STR_61
 14022  005CC0  0102               	movlb	2	; () banked
 14023  005CC2  6F9E               	movwf	(_doModeVerbose$1250+1)& (0+255),b
 14024  005CC4  0EEE               	movlw	low STR_61
 14025  005CC6  D004               	goto	L11
 14026  005CC8                     l15044:
 14027  005CC8  0E7C               	movlw	high STR_60
 14028  005CCA  0102               	movlb	2	; () banked
 14029  005CCC  6F9E               	movwf	(_doModeVerbose$1250+1)& (0+255),b
 14030  005CCE  0E50               	movlw	low STR_60
 14031  005CD0                     L11:
 14032  005CD0  6F9D               	movwf	_doModeVerbose$1250& (0+255),b
 14033                           
 14034                           ; BSR set to: 2
 14035  005CD2  0E01               	movlw	high _wrkbuf
 14036  005CD4  0100               	movlb	0	; () banked
 14037  005CD6  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14038  005CD8  0E82               	movlw	low _wrkbuf
 14039  005CDA  6F71               	movwf	?_sprintf& (0+255),b
 14040  005CDC  C29D  F073         	movff	_doModeVerbose$1250,?_sprintf+2
 14041  005CE0  C29E  F074         	movff	_doModeVerbose$1250+1,?_sprintf+3
 14042  005CE4  C2B3  F075         	movff	doModeVerbose@page,?_sprintf+4
 14043  005CE8  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14044  005CEA  ECFB  F025         	call	_sprintf	;wreg free
 14045                           
 14046                           ; BSR set to: 0
 14047                           ;main.c: 914: putsUSART(wrkbuf);
 14048  005CEE  0101               	movlb	1	; () banked
 14049  005CF0  0E01               	movlw	high _wrkbuf
 14050  005CF2  6E21               	movwf	?_putsUSART+1,c
 14051  005CF4  0E82               	movlw	low _wrkbuf
 14052  005CF6  6E20               	movwf	?_putsUSART,c
 14053  005CF8  EC74  F009         	call	_putsUSART	;wreg free
 14054                           
 14055                           ;main.c: 915: WriteUSART(':');
 14056  005CFC  0E3A               	movlw	58
 14057  005CFE  ECE7  F006         	call	_WriteUSART
 14058                           
 14059                           ;main.c: 916: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 14060  005D02  6629               	tstfsz	_bHex,c
 14061  005D04  D005               	goto	l15056
 14062  005D06  0E7C               	movlw	high STR_61
 14063  005D08  0102               	movlb	2	; () banked
 14064  005D0A  6FA0               	movwf	(_doModeVerbose$1254+1)& (0+255),b
 14065  005D0C  0EEE               	movlw	low STR_61
 14066  005D0E  D004               	goto	L12
 14067  005D10                     l15056:
 14068  005D10  0E7C               	movlw	high STR_60
 14069  005D12  0102               	movlb	2	; () banked
 14070  005D14  6FA0               	movwf	(_doModeVerbose$1254+1)& (0+255),b
 14071  005D16  0E50               	movlw	low STR_60
 14072  005D18                     L12:
 14073  005D18  6F9F               	movwf	_doModeVerbose$1254& (0+255),b
 14074                           
 14075                           ; BSR set to: 2
 14076  005D1A  0E01               	movlw	high _wrkbuf
 14077  005D1C  0100               	movlb	0	; () banked
 14078  005D1E  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14079  005D20  0E82               	movlw	low _wrkbuf
 14080  005D22  6F71               	movwf	?_sprintf& (0+255),b
 14081  005D24  C29F  F073         	movff	_doModeVerbose$1254,?_sprintf+2
 14082  005D28  C2A0  F074         	movff	_doModeVerbose$1254+1,?_sprintf+3
 14083  005D2C  EC25  F035         	call	PL42	;call to abstracted procedure
 14084  005D30  ECFB  F025         	call	_sprintf	;wreg free
 14085                           
 14086                           ; BSR set to: 0
 14087                           ;main.c: 917: putsUSART(wrkbuf);
 14088  005D34  0101               	movlb	1	; () banked
 14089  005D36  0E01               	movlw	high _wrkbuf
 14090  005D38  6E21               	movwf	?_putsUSART+1,c
 14091  005D3A  0E82               	movlw	low _wrkbuf
 14092  005D3C  6E20               	movwf	?_putsUSART,c
 14093  005D3E  EC74  F009         	call	_putsUSART	;wreg free
 14094                           
 14095                           ;main.c: 919: putsUSART((char *) "\r\n");
 14096  005D42  0E70               	movlw	high (STR_237+50)
 14097  005D44  6E21               	movwf	?_putsUSART+1,c
 14098  005D46  0E5A               	movlw	low (STR_237+50)
 14099  005D48  6E20               	movwf	?_putsUSART,c
 14100  005D4A  EC74  F009         	call	_putsUSART	;wreg free
 14101  005D4E                     l15064:
 14102  005D4E  0102               	movlb	2	; () banked
 14103  005D50  2BB5               	incf	doModeVerbose@i_1204& (0+255),f,b
 14104  005D52                     l15066:
 14105                           
 14106                           ; BSR set to: 2
 14107  005D52  51AF               	movf	doModeVerbose@count& (0+255),w,b
 14108  005D54  5DB5               	subwf	doModeVerbose@i_1204& (0+255),w,b
 14109  005D56  E201 D6A5          	bnc	l14964
 14110                           
 14111                           ; BSR set to: 2
 14112                           ;main.c: 920: }
 14113                           ;main.c: 921: }
 14114                           ;main.c: 923: if (rv) {
 14115  005D5A  51A7               	movf	doModeVerbose@rv& (0+255),w,b
 14116  005D5C  E008               	bz	l15072
 14117                           
 14118                           ; BSR set to: 2
 14119                           ;main.c: 924: putsUSART((char *) "+OK\r\n");
 14120  005D5E  0E7C               	movlw	high STR_9
 14121  005D60  6E21               	movwf	?_putsUSART+1,c
 14122  005D62  0E6B               	movlw	low STR_9
 14123  005D64  6E20               	movwf	?_putsUSART,c
 14124  005D66  EC74  F009         	call	_putsUSART	;wreg free
 14125                           
 14126                           ;main.c: 925: }
 14127  005D6A  EFB0  F034         	goto	l15592
 14128  005D6E                     l15072:
 14129                           
 14130                           ; BSR set to: 2
 14131                           ;main.c: 926: else {
 14132                           ;main.c: 927: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 14133  005D6E  0E6F               	movlw	high STR_80
 14134  005D70  6E21               	movwf	?_putsUSART+1,c
 14135  005D72  0EF2               	movlw	low STR_80
 14136  005D74  6E20               	movwf	?_putsUSART,c
 14137  005D76  EC74  F009         	call	_putsUSART	;wreg free
 14138  005D7A  EFB0  F034         	goto	l15592
 14139  005D7E                     l15074:
 14140                           
 14141                           ; BSR set to: 0
 14142                           ;main.c: 933: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 14143  005D7E  0E01               	movlw	high _cmdbuf
 14144  005D80  0100               	movlb	0	; () banked
 14145  005D82  6F69               	movwf	(?_stristr+1)& (0+255),b
 14146  005D84  0E32               	movlw	low _cmdbuf
 14147  005D86  6F68               	movwf	?_stristr& (0+255),b
 14148  005D88  0E7C               	movlw	high STR_81
 14149  005D8A  6F6B               	movwf	(?_stristr+3)& (0+255),b
 14150  005D8C  0E9E               	movlw	low STR_81
 14151  005D8E  6F6A               	movwf	(?_stristr+2)& (0+255),b
 14152  005D90  ECFD  F00B         	call	_stristr	;wreg free
 14153  005D94  0E32               	movlw	low _cmdbuf
 14154  005D96  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14155  005D98  0E01               	movlw	high _cmdbuf
 14156  005D9A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14157  005D9C  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 14158  005D9E  E102               	bnz	u19255
 14159  005DA0  5168               	movf	?_stristr& (0+255),w,b
 14160  005DA2  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14161  005DA4                     u19255:
 14162  005DA4  E001 D0FB          	bnz	l15156
 14163                           
 14164                           ; BSR set to: 0
 14165                           ;main.c: 935: uint8_t nodeid;
 14166                           ;main.c: 936: uint8_t page = 0;
 14167  005DA8  0102               	movlb	2	; () banked
 14168  005DAA  6BA8               	clrf	doModeVerbose@page_1260& (0+255),b
 14169                           
 14170                           ; BSR set to: 2
 14171                           ;main.c: 937: uint8_t reg;
 14172                           ;main.c: 938: uint8_t value;
 14173                           ;main.c: 940: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14174  005DAC  506F               	movf	3951,w,c	;volatile
 14175  005DAE  0BE0               	andlw	224
 14176  005DB0  E007               	bz	l15088
 14177                           
 14178                           ; BSR set to: 2
 14179                           ;main.c: 941: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 14180  005DB2  0E70               	movlw	high STR_50
 14181  005DB4  6E21               	movwf	?_putsUSART+1,c
 14182  005DB6  0E5D               	movlw	low STR_50
 14183  005DB8  6E20               	movwf	?_putsUSART,c
 14184  005DBA  EC74  F009         	call	_putsUSART	;wreg free
 14185  005DBE  D5E2               	goto	l14916
 14186  005DC0                     l15088:
 14187                           
 14188                           ; BSR set to: 2
 14189                           ;main.c: 945: }
 14190                           ;main.c: 947: strcpy(cmdbuf, cmdbuf + 5);
 14191  005DC0  ECCA  F034         	call	PL6	;call to abstracted procedure
 14192  005DC4  EC71  F007         	call	_strcpy	;wreg free
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;main.c: 948: char *p = strtok(cmdbuf, " ");
 14196  005DC8  0E01               	movlw	high _cmdbuf
 14197  005DCA  EC1C  F035         	call	PL36	;call to abstracted procedure
 14198  005DCE  EC05  F00D         	call	_strtok	;wreg free
 14199  005DD2  C068  F2BB         	movff	?_strtok,doModeVerbose@p_1264
 14200  005DD6  C069  F2BC         	movff	?_strtok+1,doModeVerbose@p_1264+1
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;main.c: 949: if ((0) != p) {
 14204  005DDA  0102               	movlb	2	; () banked
 14205  005DDC  51BC               	movf	(doModeVerbose@p_1264+1)& (0+255),w,b
 14206  005DDE  11BB               	iorwf	doModeVerbose@p_1264& (0+255),w,b
 14207  005DE0  E00A               	bz	l15096
 14208                           
 14209                           ; BSR set to: 2
 14210                           ;main.c: 950: nodeid = atoi(p);
 14211  005DE2  C2BB  F066         	movff	doModeVerbose@p_1264,?_atoi
 14212  005DE6  C2BC  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 14213  005DEA  EC03  F015         	call	_atoi	;wreg free
 14214  005DEE  5166               	movf	?_atoi& (0+255),w,b
 14215  005DF0  0102               	movlb	2	; () banked
 14216  005DF2  6FB1               	movwf	doModeVerbose@nodeid_1259& (0+255),b
 14217                           
 14218                           ;main.c: 951: }
 14219  005DF4  D007               	goto	l15104
 14220  005DF6                     l15096:
 14221                           
 14222                           ; BSR set to: 2
 14223                           ;main.c: 952: else {
 14224                           ;main.c: 953: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 14225  005DF6  0E78               	movlw	high STR_52
 14226  005DF8  6E21               	movwf	?_putsUSART+1,c
 14227  005DFA  0E6E               	movlw	low STR_52
 14228  005DFC  6E20               	movwf	?_putsUSART,c
 14229  005DFE  EC74  F009         	call	_putsUSART	;wreg free
 14230  005E02  D5C0               	goto	l14916
 14231  005E04                     l15104:
 14232                           
 14233                           ; BSR set to: 2
 14234                           ;main.c: 957: }
 14235                           ;main.c: 959: if ( (0) != ( p = strtok((0), " ") ) ) {
 14236  005E04  EC0A  F035         	call	PL26	;call to abstracted procedure
 14237  005E08  EC05  F00D         	call	_strtok	;wreg free
 14238  005E0C  C068  F2BB         	movff	?_strtok,doModeVerbose@p_1264
 14239  005E10  C069  F2BC         	movff	?_strtok+1,doModeVerbose@p_1264+1
 14240  005E14  0102               	movlb	2	; () banked
 14241  005E16  51BC               	movf	(doModeVerbose@p_1264+1)& (0+255),w,b
 14242  005E18  11BB               	iorwf	doModeVerbose@p_1264& (0+255),w,b
 14243  005E1A  E033               	bz	l15112
 14244                           
 14245                           ; BSR set to: 2
 14246                           ;main.c: 961: char *preg;
 14247                           ;main.c: 962: if (preg = strchr(p, ':')) {
 14248  005E1C  C2BB  F01F         	movff	doModeVerbose@p_1264,?_strchr
 14249  005E20  C2BC  F020         	movff	doModeVerbose@p_1264+1,?_strchr+1
 14250  005E24  6A22               	clrf	?_strchr+3,c
 14251  005E26  0E3A               	movlw	58
 14252  005E28  6E21               	movwf	?_strchr+2,c
 14253  005E2A  EC50  F00A         	call	_strchr	;wreg free
 14254  005E2E  C01F  F286         	movff	?_strchr,doModeVerbose@preg_1268
 14255  005E32  C020  F287         	movff	?_strchr+1,doModeVerbose@preg_1268+1
 14256  005E36  0102               	movlb	2	; () banked
 14257  005E38  5187               	movf	(doModeVerbose@preg_1268+1)& (0+255),w,b
 14258  005E3A  1186               	iorwf	doModeVerbose@preg_1268& (0+255),w,b
 14259  005E3C  E018               	bz	l15110
 14260                           
 14261                           ; BSR set to: 2
 14262                           ;main.c: 963: page = atoi(p);
 14263  005E3E  C2BB  F066         	movff	doModeVerbose@p_1264,?_atoi
 14264  005E42  C2BC  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 14265  005E46  EC03  F015         	call	_atoi	;wreg free
 14266  005E4A  5166               	movf	?_atoi& (0+255),w,b
 14267  005E4C  0102               	movlb	2	; () banked
 14268  005E4E  6FA8               	movwf	doModeVerbose@page_1260& (0+255),b
 14269                           
 14270                           ;main.c: 964: reg = atoi(preg + 1);
 14271  005E50  2986               	incf	doModeVerbose@preg_1268& (0+255),w,b
 14272  005E52  0100               	movlb	0	; () banked
 14273  005E54  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14274  005E56  0E00               	movlw	0
 14275  005E58  0102               	movlb	2	; () banked
 14276  005E5A  2187               	addwfc	(doModeVerbose@preg_1268+1)& (0+255),w,b
 14277  005E5C  0100               	movlb	0	; () banked
 14278  005E5E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14279  005E60  C0C8  F066         	movff	??_doModeVerbose,?_atoi
 14280  005E64  C0C9  F067         	movff	??_doModeVerbose+1,?_atoi+1
 14281  005E68  EC03  F015         	call	_atoi	;wreg free
 14282  005E6C  D006               	goto	L13
 14283  005E6E                     l15110:
 14284                           
 14285                           ; BSR set to: 2
 14286                           ;main.c: 966: else {
 14287                           ;main.c: 967: reg = atoi(p);
 14288  005E6E  C2BB  F066         	movff	doModeVerbose@p_1264,?_atoi
 14289  005E72  C2BC  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 14290  005E76  EC03  F015         	call	_atoi	;wreg free
 14291  005E7A                     L13:
 14292  005E7A  5166               	movf	?_atoi& (0+255),w,b
 14293  005E7C  0102               	movlb	2	; () banked
 14294  005E7E  6FA9               	movwf	doModeVerbose@reg_1261& (0+255),b
 14295  005E80  D007               	goto	l15120
 14296  005E82                     l15112:
 14297                           
 14298                           ; BSR set to: 2
 14299                           ;main.c: 971: else {
 14300                           ;main.c: 972: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 14301  005E82  0E76               	movlw	high STR_54
 14302  005E84  6E21               	movwf	?_putsUSART+1,c
 14303  005E86  0EB5               	movlw	low STR_54
 14304  005E88  6E20               	movwf	?_putsUSART,c
 14305  005E8A  EC74  F009         	call	_putsUSART	;wreg free
 14306  005E8E  D57A               	goto	l14916
 14307  005E90                     l15120:
 14308                           
 14309                           ; BSR set to: 2
 14310                           ;main.c: 976: }
 14311                           ;main.c: 979: if ((0) != (p = strtok((0), " "))) {
 14312  005E90  EC0A  F035         	call	PL26	;call to abstracted procedure
 14313  005E94  EC05  F00D         	call	_strtok	;wreg free
 14314  005E98  C068  F2BB         	movff	?_strtok,doModeVerbose@p_1264
 14315  005E9C  C069  F2BC         	movff	?_strtok+1,doModeVerbose@p_1264+1
 14316  005EA0  0102               	movlb	2	; () banked
 14317  005EA2  51BC               	movf	(doModeVerbose@p_1264+1)& (0+255),w,b
 14318  005EA4  11BB               	iorwf	doModeVerbose@p_1264& (0+255),w,b
 14319  005EA6  E00A               	bz	l15124
 14320                           
 14321                           ; BSR set to: 2
 14322                           ;main.c: 980: value = atoi(p);
 14323  005EA8  C2BB  F066         	movff	doModeVerbose@p_1264,?_atoi
 14324  005EAC  C2BC  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 14325  005EB0  EC03  F015         	call	_atoi	;wreg free
 14326  005EB4  5166               	movf	?_atoi& (0+255),w,b
 14327  005EB6  0102               	movlb	2	; () banked
 14328  005EB8  6FAE               	movwf	doModeVerbose@value_1262& (0+255),b
 14329                           
 14330                           ;main.c: 981: }
 14331  005EBA  D007               	goto	l15132
 14332  005EBC                     l15124:
 14333                           
 14334                           ; BSR set to: 2
 14335                           ;main.c: 982: else {
 14336                           ;main.c: 983: putsUSART((char *) "-ERROR - Need a value\r\n");
 14337  005EBC  0E78               	movlw	high STR_88
 14338  005EBE  6E21               	movwf	?_putsUSART+1,c
 14339  005EC0  0E9E               	movlw	low STR_88
 14340  005EC2  6E20               	movwf	?_putsUSART,c
 14341  005EC4  EC74  F009         	call	_putsUSART	;wreg free
 14342  005EC8  D55D               	goto	l14916
 14343  005ECA                     l15132:
 14344                           
 14345                           ; BSR set to: 2
 14346                           ;main.c: 987: }
 14347                           ;main.c: 989: if (writeRegisterExtended(nodeid,
 14348                           ;main.c: 990: page,
 14349                           ;main.c: 991: reg,
 14350                           ;main.c: 992: rwtimeout,
 14351                           ;main.c: 993: &value)) {
 14352  005ECA  0100               	movlb	0	; () banked
 14353  005ECC  C2A8  F0B3         	movff	doModeVerbose@page_1260,?_writeRegisterExtended
 14354  005ED0  6BB4               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 14355  005ED2  C2A9  F0B5         	movff	doModeVerbose@reg_1261,?_writeRegisterExtended+2
 14356  005ED6  C033  F0B6         	movff	_rwtimeout,?_writeRegisterExtended+3
 14357  005EDA  6BB7               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 14358  005EDC  0E02               	movlw	high doModeVerbose@value_1262
 14359  005EDE  6FB9               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 14360  005EE0  0EAE               	movlw	low doModeVerbose@value_1262
 14361  005EE2  6FB8               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 14362  005EE4  0102               	movlb	2	; () banked
 14363  005EE6  51B1               	movf	doModeVerbose@nodeid_1259& (0+255),w,b
 14364  005EE8  EC83  F014         	call	_writeRegisterExtended
 14365  005EEC  0900               	iorlw	0
 14366  005EEE  E02F               	bz	l15146
 14367                           
 14368                           ;main.c: 994: putsUSART((char *) "+OK - Value written successfully for ");
 14369  005EF0  0E75               	movlw	high STR_89
 14370  005EF2  6E21               	movwf	?_putsUSART+1,c
 14371  005EF4  0E30               	movlw	low STR_89
 14372  005EF6  6E20               	movwf	?_putsUSART,c
 14373  005EF8  EC74  F009         	call	_putsUSART	;wreg free
 14374                           
 14375                           ;main.c: 995: putsUSART((char *) "nodeid=");
 14376  005EFC  0E7B               	movlw	high (STR_56+6)
 14377  005EFE  6E21               	movwf	?_putsUSART+1,c
 14378  005F00  0E29               	movlw	low (STR_56+6)
 14379  005F02  6E20               	movwf	?_putsUSART,c
 14380  005F04  EC74  F009         	call	_putsUSART	;wreg free
 14381                           
 14382                           ;main.c: 996: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 14383  005F08  6629               	tstfsz	_bHex,c
 14384  005F0A  D005               	goto	l15140
 14385  005F0C  0E7C               	movlw	high STR_92
 14386  005F0E  0102               	movlb	2	; () banked
 14387  005F10  6FA2               	movwf	(_doModeVerbose$1277+1)& (0+255),b
 14388  005F12  0ECE               	movlw	low STR_92
 14389  005F14  D004               	goto	L14
 14390  005F16                     l15140:
 14391  005F16  0E7B               	movlw	high STR_91
 14392  005F18  0102               	movlb	2	; () banked
 14393  005F1A  6FA2               	movwf	(_doModeVerbose$1277+1)& (0+255),b
 14394  005F1C  0ED1               	movlw	low STR_91
 14395  005F1E                     L14:
 14396  005F1E  6FA1               	movwf	_doModeVerbose$1277& (0+255),b
 14397                           
 14398                           ; BSR set to: 2
 14399  005F20  0E01               	movlw	high _wrkbuf
 14400  005F22  0100               	movlb	0	; () banked
 14401  005F24  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14402  005F26  0E82               	movlw	low _wrkbuf
 14403  005F28  6F71               	movwf	?_sprintf& (0+255),b
 14404  005F2A  C2A1  F073         	movff	_doModeVerbose$1277,?_sprintf+2
 14405  005F2E  C2A2  F074         	movff	_doModeVerbose$1277+1,?_sprintf+3
 14406  005F32  C2B1  F075         	movff	doModeVerbose@nodeid_1259,?_sprintf+4
 14407  005F36  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14408  005F38  ECFB  F025         	call	_sprintf	;wreg free
 14409                           
 14410                           ; BSR set to: 0
 14411                           ;main.c: 997: putsUSART(wrkbuf);
 14412  005F3C  0101               	movlb	1	; () banked
 14413  005F3E  0E01               	movlw	high _wrkbuf
 14414  005F40  6E21               	movwf	?_putsUSART+1,c
 14415  005F42  0E82               	movlw	low _wrkbuf
 14416  005F44  6E20               	movwf	?_putsUSART,c
 14417  005F46  EC74  F009         	call	_putsUSART	;wreg free
 14418                           
 14419                           ;main.c: 998: }
 14420  005F4A  EFB0  F034         	goto	l15592
 14421  005F4E                     l15146:
 14422                           
 14423                           ;main.c: 999: else {
 14424                           ;main.c: 1000: putsUSART((char *) "-ERROR - Failed to write value for ");
 14425  005F4E  0E75               	movlw	high STR_93
 14426  005F50  6E21               	movwf	?_putsUSART+1,c
 14427  005F52  0EE9               	movlw	low STR_93
 14428  005F54  6E20               	movwf	?_putsUSART,c
 14429  005F56  EC74  F009         	call	_putsUSART	;wreg free
 14430                           
 14431                           ;main.c: 1001: putsUSART((char *) "nodeid=");
 14432  005F5A  0E7B               	movlw	high (STR_56+6)
 14433  005F5C  6E21               	movwf	?_putsUSART+1,c
 14434  005F5E  0E29               	movlw	low (STR_56+6)
 14435  005F60  6E20               	movwf	?_putsUSART,c
 14436  005F62  EC74  F009         	call	_putsUSART	;wreg free
 14437                           
 14438                           ;main.c: 1002: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 14439  005F66  6629               	tstfsz	_bHex,c
 14440  005F68  D005               	goto	l15152
 14441  005F6A  0E7C               	movlw	high STR_92
 14442  005F6C  0102               	movlb	2	; () banked
 14443  005F6E  6FA4               	movwf	(_doModeVerbose$1283+1)& (0+255),b
 14444  005F70  0ECE               	movlw	low STR_92
 14445  005F72  D004               	goto	L15
 14446  005F74                     l15152:
 14447  005F74  0E7B               	movlw	high STR_91
 14448  005F76  0102               	movlb	2	; () banked
 14449  005F78  6FA4               	movwf	(_doModeVerbose$1283+1)& (0+255),b
 14450  005F7A  0ED1               	movlw	low STR_91
 14451  005F7C                     L15:
 14452  005F7C  6FA3               	movwf	_doModeVerbose$1283& (0+255),b
 14453                           
 14454                           ; BSR set to: 2
 14455  005F7E  0E01               	movlw	high _wrkbuf
 14456  005F80  0100               	movlb	0	; () banked
 14457  005F82  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14458  005F84  0E82               	movlw	low _wrkbuf
 14459  005F86  6F71               	movwf	?_sprintf& (0+255),b
 14460  005F88  C2A3  F073         	movff	_doModeVerbose$1283,?_sprintf+2
 14461  005F8C  C2A4  F074         	movff	_doModeVerbose$1283+1,?_sprintf+3
 14462  005F90  C2B1  F075         	movff	doModeVerbose@nodeid_1259,?_sprintf+4
 14463  005F94  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14464  005F96  ECFB  F025         	call	_sprintf	;wreg free
 14465  005F9A  EFB0  F034         	goto	l15592
 14466  005F9E                     l15156:
 14467                           
 14468                           ; BSR set to: 0
 14469                           ;main.c: 1008: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 14470  005F9E  0E01               	movlw	high _cmdbuf
 14471  005FA0  0100               	movlb	0	; () banked
 14472  005FA2  6F69               	movwf	(?_stristr+1)& (0+255),b
 14473  005FA4  0E32               	movlw	low _cmdbuf
 14474  005FA6  6F68               	movwf	?_stristr& (0+255),b
 14475  005FA8  0E7C               	movlw	high STR_97
 14476  005FAA  6F6B               	movwf	(?_stristr+3)& (0+255),b
 14477  005FAC  0EAD               	movlw	low STR_97
 14478  005FAE  6F6A               	movwf	(?_stristr+2)& (0+255),b
 14479  005FB0  ECFD  F00B         	call	_stristr	;wreg free
 14480  005FB4  0E32               	movlw	low _cmdbuf
 14481  005FB6  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14482  005FB8  0E01               	movlw	high _cmdbuf
 14483  005FBA  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14484  005FBC  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 14485  005FBE  E102               	bnz	u19345
 14486  005FC0  5168               	movf	?_stristr& (0+255),w,b
 14487  005FC2  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14488  005FC4                     u19345:
 14489  005FC4  E172               	bnz	l15200
 14490                           
 14491                           ; BSR set to: 0
 14492                           ;main.c: 1010: uint8_t nodeid;
 14493                           ;main.c: 1011: uint8_t value;
 14494                           ;main.c: 1013: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14495  005FC6  506F               	movf	3951,w,c	;volatile
 14496  005FC8  0BE0               	andlw	224
 14497  005FCA  E007               	bz	l15168
 14498                           
 14499                           ; BSR set to: 0
 14500                           ;main.c: 1014: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 14501  005FCC  0E70               	movlw	high STR_50
 14502  005FCE  6E21               	movwf	?_putsUSART+1,c
 14503  005FD0  0E5D               	movlw	low STR_50
 14504  005FD2  6E20               	movwf	?_putsUSART,c
 14505  005FD4  EC74  F009         	call	_putsUSART	;wreg free
 14506  005FD8  D4D5               	goto	l14916
 14507  005FDA                     l15168:
 14508                           
 14509                           ; BSR set to: 0
 14510                           ;main.c: 1018: }
 14511                           ;main.c: 1020: strcpy(cmdbuf, cmdbuf + 5);
 14512  005FDA  ECCA  F034         	call	PL6	;call to abstracted procedure
 14513  005FDE  EC71  F007         	call	_strcpy	;wreg free
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;main.c: 1021: nodeid = atoi(cmdbuf);
 14517  005FE2  0E01               	movlw	high _cmdbuf
 14518  005FE4  0100               	movlb	0	; () banked
 14519  005FE6  6F67               	movwf	(?_atoi+1)& (0+255),b
 14520  005FE8  0E32               	movlw	low _cmdbuf
 14521  005FEA  6F66               	movwf	?_atoi& (0+255),b
 14522  005FEC  EC03  F015         	call	_atoi	;wreg free
 14523  005FF0  5166               	movf	?_atoi& (0+255),w,b
 14524  005FF2  0102               	movlb	2	; () banked
 14525  005FF4  6FB6               	movwf	doModeVerbose@nodeid_1285& (0+255),b
 14526                           
 14527                           ; BSR set to: 2
 14528                           ;main.c: 1023: putsUSART((char *) "Info for node id = ");
 14529  005FF6  0E7A               	movlw	high STR_99
 14530  005FF8  6E21               	movwf	?_putsUSART+1,c
 14531  005FFA  0E40               	movlw	low STR_99
 14532  005FFC  6E20               	movwf	?_putsUSART,c
 14533  005FFE  EC74  F009         	call	_putsUSART	;wreg free
 14534                           
 14535                           ;main.c: 1024: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 14536  006002  6629               	tstfsz	_bHex,c
 14537  006004  D005               	goto	l15178
 14538  006006  0E7C               	movlw	high STR_61
 14539  006008  0102               	movlb	2	; () banked
 14540  00600A  6FA6               	movwf	(_doModeVerbose$1292+1)& (0+255),b
 14541  00600C  0EEE               	movlw	low STR_61
 14542  00600E  D004               	goto	L16
 14543  006010                     l15178:
 14544  006010  0E7C               	movlw	high STR_60
 14545  006012  0102               	movlb	2	; () banked
 14546  006014  6FA6               	movwf	(_doModeVerbose$1292+1)& (0+255),b
 14547  006016  0E50               	movlw	low STR_60
 14548  006018                     L16:
 14549  006018  6FA5               	movwf	_doModeVerbose$1292& (0+255),b
 14550                           
 14551                           ; BSR set to: 2
 14552  00601A  0E01               	movlw	high _wrkbuf
 14553  00601C  0100               	movlb	0	; () banked
 14554  00601E  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14555  006020  0E82               	movlw	low _wrkbuf
 14556  006022  6F71               	movwf	?_sprintf& (0+255),b
 14557  006024  C2A5  F073         	movff	_doModeVerbose$1292,?_sprintf+2
 14558  006028  C2A6  F074         	movff	_doModeVerbose$1292+1,?_sprintf+3
 14559  00602C  C2B6  F075         	movff	doModeVerbose@nodeid_1285,?_sprintf+4
 14560  006030  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14561  006032  ECFB  F025         	call	_sprintf	;wreg free
 14562                           
 14563                           ; BSR set to: 0
 14564                           ;main.c: 1025: putsUSART(wrkbuf);
 14565  006036  0101               	movlb	1	; () banked
 14566  006038  0E01               	movlw	high _wrkbuf
 14567  00603A  6E21               	movwf	?_putsUSART+1,c
 14568  00603C  0E82               	movlw	low _wrkbuf
 14569  00603E  6E20               	movwf	?_putsUSART,c
 14570  006040  EC74  F009         	call	_putsUSART	;wreg free
 14571                           
 14572                           ;main.c: 1026: putsUSART((char *) "\r\n");
 14573  006044  0E70               	movlw	high (STR_237+50)
 14574  006046  6E21               	movwf	?_putsUSART+1,c
 14575  006048  0E5A               	movlw	low (STR_237+50)
 14576  00604A  6E20               	movwf	?_putsUSART,c
 14577  00604C  EC74  F009         	call	_putsUSART	;wreg free
 14578                           
 14579                           ;main.c: 1028: if (!readRegisterExtended(nodeid,
 14580                           ;main.c: 1029: 0,
 14581                           ;main.c: 1030: 0xd0,
 14582                           ;main.c: 1031: rwtimeout,
 14583                           ;main.c: 1032: &value)) {
 14584  006050  0100               	movlb	0	; () banked
 14585  006052  6BB4               	clrf	(?_readRegisterExtended+1)& (0+255),b
 14586  006054  6BB3               	clrf	?_readRegisterExtended& (0+255),b
 14587  006056  0ED0               	movlw	208
 14588  006058  6FB5               	movwf	(?_readRegisterExtended+2)& (0+255),b
 14589  00605A  C033  F0B6         	movff	_rwtimeout,?_readRegisterExtended+3
 14590  00605E  6BB7               	clrf	(?_readRegisterExtended+4)& (0+255),b
 14591  006060  0E02               	movlw	high doModeVerbose@value_1286
 14592  006062  6FB9               	movwf	(?_readRegisterExtended+6)& (0+255),b
 14593  006064  0EAA               	movlw	low doModeVerbose@value_1286
 14594  006066  6FB8               	movwf	(?_readRegisterExtended+5)& (0+255),b
 14595  006068  0102               	movlb	2	; () banked
 14596  00606A  51B6               	movf	doModeVerbose@nodeid_1285& (0+255),w,b
 14597  00606C  EC8A  F013         	call	_readRegisterExtended
 14598  006070  0900               	iorlw	0
 14599  006072  E107               	bnz	l15196
 14600                           
 14601                           ;main.c: 1033: putsUSART((char *) "-ERROR - Node not found.\r\n");
 14602  006074  0E77               	movlw	high STR_103
 14603  006076  6E21               	movwf	?_putsUSART+1,c
 14604  006078  0E6D               	movlw	low STR_103
 14605  00607A  6E20               	movwf	?_putsUSART,c
 14606  00607C  EC74  F009         	call	_putsUSART	;wreg free
 14607  006080  D481               	goto	l14916
 14608  006082                     l15196:
 14609                           
 14610                           ;main.c: 1037: }
 14611                           ;main.c: 1039: printNodeFirmwareVersion(nodeid);
 14612  006082  0102               	movlb	2	; () banked
 14613  006084  51B6               	movf	doModeVerbose@nodeid_1285& (0+255),w,b
 14614  006086  EC03  F011         	call	_printNodeFirmwareVersion
 14615                           
 14616                           ;main.c: 1040: printGUID(nodeid);
 14617  00608A  0102               	movlb	2	; () banked
 14618  00608C  51B6               	movf	doModeVerbose@nodeid_1285& (0+255),w,b
 14619  00608E  EC05  F014         	call	_printGUID
 14620                           
 14621                           ;main.c: 1041: printMDF(nodeid);
 14622  006092  0102               	movlb	2	; () banked
 14623  006094  51B6               	movf	doModeVerbose@nodeid_1285& (0+255),w,b
 14624  006096  EC50  F00D         	call	_printMDF
 14625                           
 14626                           ;main.c: 1042: putsUSART((char *) "+OK\r\n");
 14627  00609A  0E7C               	movlw	high STR_9
 14628  00609C  6E21               	movwf	?_putsUSART+1,c
 14629  00609E  0E6B               	movlw	low STR_9
 14630  0060A0  6E20               	movwf	?_putsUSART,c
 14631  0060A2  EC74  F009         	call	_putsUSART	;wreg free
 14632                           
 14633                           ;main.c: 1043: }
 14634  0060A6  EFB0  F034         	goto	l15592
 14635  0060AA                     l15200:
 14636                           
 14637                           ; BSR set to: 0
 14638                           ;main.c: 1047: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 14639  0060AA  0E01               	movlw	high _cmdbuf
 14640  0060AC  0100               	movlb	0	; () banked
 14641  0060AE  6F69               	movwf	(?_stristr+1)& (0+255),b
 14642  0060B0  0E32               	movlw	low _cmdbuf
 14643  0060B2  6F68               	movwf	?_stristr& (0+255),b
 14644  0060B4  0E7C               	movlw	high STR_105
 14645  0060B6  6F6B               	movwf	(?_stristr+3)& (0+255),b
 14646  0060B8  0E42               	movlw	low STR_105
 14647  0060BA  6F6A               	movwf	(?_stristr+2)& (0+255),b
 14648  0060BC  ECFD  F00B         	call	_stristr	;wreg free
 14649  0060C0  0E32               	movlw	low _cmdbuf
 14650  0060C2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14651  0060C4  0E01               	movlw	high _cmdbuf
 14652  0060C6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14653  0060C8  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 14654  0060CA  E102               	bnz	u19385
 14655  0060CC  5168               	movf	?_stristr& (0+255),w,b
 14656  0060CE  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14657  0060D0                     u19385:
 14658  0060D0  E001 D0F3          	bnz	l15300
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;main.c: 1050: uint8_t filterno;
 14662                           ;main.c: 1051: uint8_t filter_priority;
 14663                           ;main.c: 1052: uint16_t filter_class;
 14664                           ;main.c: 1053: uint8_t filter_type;
 14665                           ;main.c: 1054: uint8_t filter_nodeid;
 14666                           ;main.c: 1055: BOOL bPersistent = 0;
 14667  0060D4  0102               	movlb	2	; () banked
 14668  0060D6  6BAB               	clrf	doModeVerbose@bPersistent& (0+255),b
 14669                           
 14670                           ; BSR set to: 2
 14671                           ;main.c: 1057: strcpy(cmdbuf, cmdbuf + 8);
 14672  0060D8  0E01               	movlw	high _cmdbuf
 14673  0060DA  ECFD  F034         	call	PL16	;call to abstracted procedure
 14674  0060DE  EC71  F007         	call	_strcpy	;wreg free
 14675                           
 14676                           ; BSR set to: 0
 14677                           ;main.c: 1058: char *p = strtok(cmdbuf, ",");
 14678  0060E2  EC12  F035         	call	PL30	;call to abstracted procedure
 14679  0060E6  EC05  F00D         	call	_strtok	;wreg free
 14680  0060EA  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1303
 14681  0060EE  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1303+1
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;main.c: 1059: if ((0) != p) {
 14685  0060F2  0102               	movlb	2	; () banked
 14686  0060F4  51C7               	movf	(doModeVerbose@p_1303+1)& (0+255),w,b
 14687  0060F6  11C6               	iorwf	doModeVerbose@p_1303& (0+255),w,b
 14688  0060F8  E013               	bz	l15222
 14689                           
 14690                           ; BSR set to: 2
 14691                           ;main.c: 1060: filterno = atoi(p);
 14692  0060FA  C2C6  F066         	movff	doModeVerbose@p_1303,?_atoi
 14693  0060FE  C2C7  F067         	movff	doModeVerbose@p_1303+1,?_atoi+1
 14694  006102  EC03  F015         	call	_atoi	;wreg free
 14695  006106  5166               	movf	?_atoi& (0+255),w,b
 14696  006108  0102               	movlb	2	; () banked
 14697  00610A  6FAC               	movwf	doModeVerbose@filterno& (0+255),b
 14698                           
 14699                           ; BSR set to: 2
 14700                           ;main.c: 1061: if (filterno > 15) {
 14701  00610C  0E0F               	movlw	15
 14702  00610E  65AC               	cpfsgt	doModeVerbose@filterno& (0+255),b
 14703  006110  D00E               	goto	l15230
 14704                           
 14705                           ; BSR set to: 2
 14706                           ;main.c: 1062: putsUSART((char *) "-ERROR - Filter number can only be set to a value bet
      +                          ween 0-15.\r\n");
 14707  006112  0E6D               	movlw	high STR_107
 14708  006114  6E21               	movwf	?_putsUSART+1,c
 14709  006116  0EB2               	movlw	low STR_107
 14710  006118  6E20               	movwf	?_putsUSART,c
 14711  00611A  EC74  F009         	call	_putsUSART	;wreg free
 14712  00611E  D432               	goto	l14916
 14713  006120                     l15222:
 14714                           
 14715                           ; BSR set to: 2
 14716                           ;main.c: 1068: else {
 14717                           ;main.c: 1069: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 14718  006120  0E74               	movlw	high STR_108
 14719  006122  6E21               	movwf	?_putsUSART+1,c
 14720  006124  0E20               	movlw	low STR_108
 14721  006126  6E20               	movwf	?_putsUSART,c
 14722  006128  EC74  F009         	call	_putsUSART	;wreg free
 14723  00612C  D42B               	goto	l14916
 14724  00612E                     l15230:
 14725                           
 14726                           ; BSR set to: 2
 14727                           ;main.c: 1073: }
 14728                           ;main.c: 1076: p = strtok((0), ",");
 14729  00612E  ECBB  F034         	call	PL2	;call to abstracted procedure
 14730  006132  EC05  F00D         	call	_strtok	;wreg free
 14731  006136  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1303
 14732  00613A  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1303+1
 14733                           
 14734                           ; BSR set to: 0
 14735                           ;main.c: 1077: if ((0) != p) {
 14736  00613E  0102               	movlb	2	; () banked
 14737  006140  51C7               	movf	(doModeVerbose@p_1303+1)& (0+255),w,b
 14738  006142  11C6               	iorwf	doModeVerbose@p_1303& (0+255),w,b
 14739  006144  E00A               	bz	l15236
 14740                           
 14741                           ; BSR set to: 2
 14742                           ;main.c: 1078: filter_priority = atoi(p);
 14743  006146  C2C6  F066         	movff	doModeVerbose@p_1303,?_atoi
 14744  00614A  C2C7  F067         	movff	doModeVerbose@p_1303+1,?_atoi+1
 14745  00614E  EC03  F015         	call	_atoi	;wreg free
 14746  006152  5166               	movf	?_atoi& (0+255),w,b
 14747  006154  0102               	movlb	2	; () banked
 14748  006156  6F8C               	movwf	doModeVerbose@filter_priority& (0+255),b
 14749                           
 14750                           ;main.c: 1079: }
 14751  006158  D007               	goto	l15244
 14752  00615A                     l15236:
 14753                           
 14754                           ; BSR set to: 2
 14755                           ;main.c: 1080: else {
 14756                           ;main.c: 1081: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 14757  00615A  0E73               	movlw	high STR_110
 14758  00615C  6E21               	movwf	?_putsUSART+1,c
 14759  00615E  0E2C               	movlw	low STR_110
 14760  006160  6E20               	movwf	?_putsUSART,c
 14761  006162  EC74  F009         	call	_putsUSART	;wreg free
 14762  006166  D40E               	goto	l14916
 14763  006168                     l15244:
 14764                           
 14765                           ; BSR set to: 2
 14766                           ;main.c: 1085: }
 14767                           ;main.c: 1088: p = strtok((0), ",");
 14768  006168  ECBB  F034         	call	PL2	;call to abstracted procedure
 14769  00616C  EC05  F00D         	call	_strtok	;wreg free
 14770  006170  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1303
 14771  006174  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1303+1
 14772                           
 14773                           ; BSR set to: 0
 14774                           ;main.c: 1089: if ((0) != p) {
 14775  006178  0102               	movlb	2	; () banked
 14776  00617A  51C7               	movf	(doModeVerbose@p_1303+1)& (0+255),w,b
 14777  00617C  11C6               	iorwf	doModeVerbose@p_1303& (0+255),w,b
 14778  00617E  E00B               	bz	l15250
 14779                           
 14780                           ; BSR set to: 2
 14781                           ;main.c: 1090: filter_class = atoi(p);
 14782  006180  C2C6  F066         	movff	doModeVerbose@p_1303,?_atoi
 14783  006184  C2C7  F067         	movff	doModeVerbose@p_1303+1,?_atoi+1
 14784  006188  EC03  F015         	call	_atoi	;wreg free
 14785  00618C  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 14786  006190  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 14787                           
 14788                           ;main.c: 1091: }
 14789  006194  D008               	goto	l15258
 14790  006196                     l15250:
 14791                           
 14792                           ; BSR set to: 2
 14793                           ;main.c: 1092: else {
 14794                           ;main.c: 1093: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 14795  006196  0E74               	movlw	high STR_112
 14796  006198  6E21               	movwf	?_putsUSART+1,c
 14797  00619A  0EBC               	movlw	low STR_112
 14798  00619C  6E20               	movwf	?_putsUSART,c
 14799  00619E  EC74  F009         	call	_putsUSART	;wreg free
 14800  0061A2  EFC2  F02C         	goto	l14916
 14801  0061A6                     l15258:
 14802                           
 14803                           ; BSR set to: 0
 14804                           ;main.c: 1097: }
 14805                           ;main.c: 1100: p = strtok((0), ",");
 14806  0061A6  DBEF               	call	PL4	;call to abstracted procedure
 14807  0061A8  EC05  F00D         	call	_strtok	;wreg free
 14808  0061AC  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1303
 14809  0061B0  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1303+1
 14810                           
 14811                           ; BSR set to: 0
 14812                           ;main.c: 1101: if ((0) != p) {
 14813  0061B4  0102               	movlb	2	; () banked
 14814  0061B6  51C7               	movf	(doModeVerbose@p_1303+1)& (0+255),w,b
 14815  0061B8  11C6               	iorwf	doModeVerbose@p_1303& (0+255),w,b
 14816  0061BA  E00A               	bz	l15264
 14817                           
 14818                           ; BSR set to: 2
 14819                           ;main.c: 1102: filter_type = atoi(p);
 14820  0061BC  C2C6  F066         	movff	doModeVerbose@p_1303,?_atoi
 14821  0061C0  C2C7  F067         	movff	doModeVerbose@p_1303+1,?_atoi+1
 14822  0061C4  EC03  F015         	call	_atoi	;wreg free
 14823  0061C8  5166               	movf	?_atoi& (0+255),w,b
 14824  0061CA  0102               	movlb	2	; () banked
 14825  0061CC  6F8D               	movwf	doModeVerbose@filter_type& (0+255),b
 14826                           
 14827                           ;main.c: 1103: }
 14828  0061CE  D008               	goto	l15272
 14829  0061D0                     l15264:
 14830                           
 14831                           ; BSR set to: 2
 14832                           ;main.c: 1104: else {
 14833                           ;main.c: 1105: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 14834  0061D0  0E75               	movlw	high STR_114
 14835  0061D2  6E21               	movwf	?_putsUSART+1,c
 14836  0061D4  0E0A               	movlw	low STR_114
 14837  0061D6  6E20               	movwf	?_putsUSART,c
 14838  0061D8  EC74  F009         	call	_putsUSART	;wreg free
 14839  0061DC  EFC2  F02C         	goto	l14916
 14840  0061E0                     l15272:
 14841                           
 14842                           ; BSR set to: 2
 14843                           ;main.c: 1109: }
 14844                           ;main.c: 1112: p = strtok((0), ",");
 14845  0061E0  DBCA               	call	PL2	;call to abstracted procedure
 14846  0061E2  EC05  F00D         	call	_strtok	;wreg free
 14847  0061E6  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1303
 14848  0061EA  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1303+1
 14849                           
 14850                           ; BSR set to: 0
 14851                           ;main.c: 1113: if ((0) != p) {
 14852  0061EE  0102               	movlb	2	; () banked
 14853  0061F0  51C7               	movf	(doModeVerbose@p_1303+1)& (0+255),w,b
 14854  0061F2  11C6               	iorwf	doModeVerbose@p_1303& (0+255),w,b
 14855  0061F4  E00A               	bz	l15278
 14856                           
 14857                           ; BSR set to: 2
 14858                           ;main.c: 1114: filter_nodeid = atoi(p);
 14859  0061F6  C2C6  F066         	movff	doModeVerbose@p_1303,?_atoi
 14860  0061FA  C2C7  F067         	movff	doModeVerbose@p_1303+1,?_atoi+1
 14861  0061FE  EC03  F015         	call	_atoi	;wreg free
 14862  006202  5166               	movf	?_atoi& (0+255),w,b
 14863  006204  0102               	movlb	2	; () banked
 14864  006206  6F8E               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 14865                           
 14866                           ;main.c: 1115: }
 14867  006208  D008               	goto	l15286
 14868  00620A                     l15278:
 14869                           
 14870                           ; BSR set to: 2
 14871                           ;main.c: 1116: else {
 14872                           ;main.c: 1117: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 14873  00620A  0E73               	movlw	high STR_116
 14874  00620C  6E21               	movwf	?_putsUSART+1,c
 14875  00620E  0E7F               	movlw	low STR_116
 14876  006210  6E20               	movwf	?_putsUSART,c
 14877  006212  EC74  F009         	call	_putsUSART	;wreg free
 14878  006216  EFC2  F02C         	goto	l14916
 14879  00621A                     l15286:
 14880                           
 14881                           ; BSR set to: 2
 14882                           ;main.c: 1121: }
 14883                           ;main.c: 1124: p = strtok((0), ",");
 14884  00621A  DBAD               	call	PL2	;call to abstracted procedure
 14885  00621C  EC05  F00D         	call	_strtok	;wreg free
 14886  006220  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1303
 14887  006224  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1303+1
 14888                           
 14889                           ;main.c: 1125: if ( (0) != stristr(p, "PERSISTENT") ) {
 14890  006228  C2C6  F068         	movff	doModeVerbose@p_1303,?_stristr
 14891  00622C  C2C7  F069         	movff	doModeVerbose@p_1303+1,?_stristr+1
 14892  006230  0E7B               	movlw	high STR_118
 14893  006232  6F6B               	movwf	(?_stristr+3)& (0+255),b
 14894  006234  0E5F               	movlw	low STR_118
 14895  006236  6F6A               	movwf	(?_stristr+2)& (0+255),b
 14896  006238  ECFD  F00B         	call	_stristr	;wreg free
 14897  00623C  5169               	movf	(?_stristr+1)& (0+255),w,b
 14898  00623E  1168               	iorwf	?_stristr& (0+255),w,b
 14899  006240  E003               	bz	l15290
 14900                           
 14901                           ; BSR set to: 0
 14902                           ;main.c: 1126: bPersistent = 1;
 14903  006242  0E01               	movlw	1
 14904  006244  0102               	movlb	2	; () banked
 14905  006246  6FAB               	movwf	doModeVerbose@bPersistent& (0+255),b
 14906  006248                     l15290:
 14907                           
 14908                           ;main.c: 1127: }
 14909                           ;main.c: 1130: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14910  006248  0E80               	movlw	128
 14911  00624A  ECFD  F006         	call	_ECANSetOperationMode
 14912                           
 14913                           ;main.c: 1132: uint32_t id = ((uint32_t) filter_priority << 26) |
 14914                           ;main.c: 1133: ((uint32_t) filter_class << 16) |
 14915                           ;main.c: 1134: ((uint32_t) filter_type << 8) |
 14916                           ;main.c: 1135: filter_nodeid;
 14917  00624E  C28D  F0C8         	movff	doModeVerbose@filter_type,??_doModeVerbose
 14918  006252  EC32  F035         	call	PL44	;call to abstracted procedure
 14919  006256  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 14920  006258  0100               	movlb	0	; () banked
 14921  00625A  6FCC               	movwf	(??_doModeVerbose+4)& (0+255),b
 14922  00625C  0102               	movlb	2	; () banked
 14923  00625E  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 14924  006260  EC58  F035         	call	PL62	;call to abstracted procedure
 14925  006264  C28C  F0D0         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 14926  006268  DBA3               	call	PL8	;call to abstracted procedure
 14927  00626A  518E               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 14928  00626C  0100               	movlb	0	; () banked
 14929  00626E  11D8               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14930  006270  0102               	movlb	2	; () banked
 14931  006272  6F80               	movwf	doModeVerbose@id& (0+255),b
 14932  006274  0100               	movlb	0	; () banked
 14933  006276  51D9               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14934  006278  0102               	movlb	2	; () banked
 14935  00627A  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 14936  00627C  0100               	movlb	0	; () banked
 14937  00627E  51DA               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14938  006280  0102               	movlb	2	; () banked
 14939  006282  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 14940  006284  0100               	movlb	0	; () banked
 14941  006286  51DB               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14942  006288  0102               	movlb	2	; () banked
 14943  00628A  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 14944                           
 14945                           ; BSR set to: 2
 14946                           ;main.c: 1137: setFilter(filterno, id, bPersistent );
 14947  00628C  C280  F060         	movff	doModeVerbose@id,?_setFilter
 14948  006290  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 14949  006294  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 14950  006298  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 14951  00629C  C2AB  F064         	movff	doModeVerbose@bPersistent,?_setFilter+4
 14952  0062A0  51AC               	movf	doModeVerbose@filterno& (0+255),w,b
 14953  0062A2  ECF7  F01F         	call	_setFilter
 14954                           
 14955                           ;main.c: 1140: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 14956  0062A6  0E00               	movlw	0
 14957  0062A8  ECFD  F006         	call	_ECANSetOperationMode
 14958                           
 14959                           ;main.c: 1142: putsUSART((char *) "+OK\r\n");
 14960  0062AC  0E7C               	movlw	high STR_9
 14961  0062AE  6E21               	movwf	?_putsUSART+1,c
 14962  0062B0  0E6B               	movlw	low STR_9
 14963  0062B2  6E20               	movwf	?_putsUSART,c
 14964  0062B4  EC74  F009         	call	_putsUSART	;wreg free
 14965                           
 14966                           ;main.c: 1143: }
 14967  0062B8  D353               	goto	l15592
 14968  0062BA                     l15300:
 14969                           
 14970                           ; BSR set to: 0
 14971                           ;main.c: 1147: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 14972  0062BA  0E01               	movlw	high _cmdbuf
 14973  0062BC  0100               	movlb	0	; () banked
 14974  0062BE  6F69               	movwf	(?_stristr+1)& (0+255),b
 14975  0062C0  0E32               	movlw	low _cmdbuf
 14976  0062C2  6F68               	movwf	?_stristr& (0+255),b
 14977  0062C4  0E7C               	movlw	high STR_120
 14978  0062C6  6F6B               	movwf	(?_stristr+3)& (0+255),b
 14979  0062C8  0EA3               	movlw	low STR_120
 14980  0062CA  6F6A               	movwf	(?_stristr+2)& (0+255),b
 14981  0062CC  ECFD  F00B         	call	_stristr	;wreg free
 14982  0062D0  0E32               	movlw	low _cmdbuf
 14983  0062D2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14984  0062D4  0E01               	movlw	high _cmdbuf
 14985  0062D6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14986  0062D8  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 14987  0062DA  E102               	bnz	u19475
 14988  0062DC  5168               	movf	?_stristr& (0+255),w,b
 14989  0062DE  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14990  0062E0                     u19475:
 14991  0062E0  E001 D0DC          	bnz	l15428
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;main.c: 1156: strcpy(cmdbuf, cmdbuf + 8);
 14995                           
 14996                           ; BSR set to: 0
 14997  0062E4  0E01               	movlw	high _cmdbuf
 14998  0062E6  DB89               	call	PL16	;call to abstracted procedure
 14999  0062E8  EC71  F007         	call	_strcpy	;wreg free
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;main.c: 1157: char *p = strtok(cmdbuf, ",");
 15003  0062EC  DB9B               	call	PL30	;call to abstracted procedure
 15004  0062EE  EC05  F00D         	call	_strtok	;wreg free
 15005  0062F2  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1326
 15006  0062F6  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1326+1
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;main.c: 1158: if ((0) != p) {
 15010  0062FA  0102               	movlb	2	; () banked
 15011  0062FC  51C5               	movf	(doModeVerbose@p_1326+1)& (0+255),w,b
 15012  0062FE  11C4               	iorwf	doModeVerbose@p_1326& (0+255),w,b
 15013  006300  E014               	bz	l15322
 15014                           
 15015                           ; BSR set to: 2
 15016                           ;main.c: 1159: maskno = atoi(p);
 15017  006302  C2C4  F066         	movff	doModeVerbose@p_1326,?_atoi
 15018  006306  C2C5  F067         	movff	doModeVerbose@p_1326+1,?_atoi+1
 15019  00630A  EC03  F015         	call	_atoi	;wreg free
 15020  00630E  5166               	movf	?_atoi& (0+255),w,b
 15021  006310  0102               	movlb	2	; () banked
 15022  006312  6FB2               	movwf	doModeVerbose@maskno& (0+255),b
 15023                           
 15024                           ; BSR set to: 2
 15025                           ;main.c: 1160: if (maskno > 1) {
 15026  006314  0E01               	movlw	1
 15027  006316  65B2               	cpfsgt	doModeVerbose@maskno& (0+255),b
 15028  006318  D010               	goto	l15330
 15029                           
 15030                           ; BSR set to: 2
 15031                           ;main.c: 1161: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 15032  00631A  0E70               	movlw	high STR_122
 15033  00631C  6E21               	movwf	?_putsUSART+1,c
 15034  00631E  0EF8               	movlw	low STR_122
 15035  006320  6E20               	movwf	?_putsUSART,c
 15036  006322  EC74  F009         	call	_putsUSART	;wreg free
 15037  006326  EFC2  F02C         	goto	l14916
 15038  00632A                     l15322:
 15039                           
 15040                           ; BSR set to: 2
 15041                           ;main.c: 1167: else {
 15042                           ;main.c: 1168: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 15043  00632A  0E75               	movlw	high STR_123
 15044  00632C  6E21               	movwf	?_putsUSART+1,c
 15045  00632E  0E56               	movlw	low STR_123
 15046  006330  6E20               	movwf	?_putsUSART,c
 15047  006332  EC74  F009         	call	_putsUSART	;wreg free
 15048  006336  EFC2  F02C         	goto	l14916
 15049  00633A                     l15330:
 15050                           
 15051                           ; BSR set to: 2
 15052                           ;main.c: 1172: }
 15053                           ;main.c: 1175: p = strtok((0), ",");
 15054  00633A  DB1D               	call	PL2	;call to abstracted procedure
 15055  00633C  EC05  F00D         	call	_strtok	;wreg free
 15056  006340  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1326
 15057  006344  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1326+1
 15058                           
 15059                           ; BSR set to: 0
 15060                           ;main.c: 1176: if ((0) != p) {
 15061  006348  0102               	movlb	2	; () banked
 15062  00634A  51C5               	movf	(doModeVerbose@p_1326+1)& (0+255),w,b
 15063  00634C  11C4               	iorwf	doModeVerbose@p_1326& (0+255),w,b
 15064  00634E  E00A               	bz	l15336
 15065                           
 15066                           ; BSR set to: 2
 15067                           ;main.c: 1177: mask_priority = atoi(p);
 15068  006350  C2C4  F066         	movff	doModeVerbose@p_1326,?_atoi
 15069  006354  C2C5  F067         	movff	doModeVerbose@p_1326+1,?_atoi+1
 15070  006358  EC03  F015         	call	_atoi	;wreg free
 15071  00635C  5166               	movf	?_atoi& (0+255),w,b
 15072  00635E  0102               	movlb	2	; () banked
 15073  006360  6F8F               	movwf	doModeVerbose@mask_priority& (0+255),b
 15074                           
 15075                           ;main.c: 1178: }
 15076  006362  D008               	goto	l15344
 15077  006364                     l15336:
 15078                           
 15079                           ; BSR set to: 2
 15080                           ;main.c: 1179: else {
 15081                           ;main.c: 1180: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 15082  006364  0E73               	movlw	high STR_125
 15083  006366  6E21               	movwf	?_putsUSART+1,c
 15084  006368  0ED0               	movlw	low STR_125
 15085  00636A  6E20               	movwf	?_putsUSART,c
 15086  00636C  EC74  F009         	call	_putsUSART	;wreg free
 15087  006370  EFC2  F02C         	goto	l14916
 15088  006374                     l15344:
 15089                           
 15090                           ; BSR set to: 2
 15091                           ;main.c: 1184: }
 15092                           ;main.c: 1187: p = strtok((0), ",");
 15093  006374  DB00               	call	PL2	;call to abstracted procedure
 15094  006376  EC05  F00D         	call	_strtok	;wreg free
 15095  00637A  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1326
 15096  00637E  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1326+1
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;main.c: 1188: if ((0) != p) {
 15100  006382  0102               	movlb	2	; () banked
 15101  006384  51C5               	movf	(doModeVerbose@p_1326+1)& (0+255),w,b
 15102  006386  11C4               	iorwf	doModeVerbose@p_1326& (0+255),w,b
 15103  006388  E00B               	bz	l15350
 15104                           
 15105                           ; BSR set to: 2
 15106                           ;main.c: 1189: mask_class = atoi(p);
 15107  00638A  C2C4  F066         	movff	doModeVerbose@p_1326,?_atoi
 15108  00638E  C2C5  F067         	movff	doModeVerbose@p_1326+1,?_atoi+1
 15109  006392  EC03  F015         	call	_atoi	;wreg free
 15110  006396  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 15111  00639A  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 15112                           
 15113                           ;main.c: 1190: }
 15114  00639E  D008               	goto	l15358
 15115  0063A0                     l15350:
 15116                           
 15117                           ; BSR set to: 2
 15118                           ;main.c: 1191: else {
 15119                           ;main.c: 1192: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 15120  0063A0  0E75               	movlw	high STR_127
 15121  0063A2  6E21               	movwf	?_putsUSART+1,c
 15122  0063A4  0EA0               	movlw	low STR_127
 15123  0063A6  6E20               	movwf	?_putsUSART,c
 15124  0063A8  EC74  F009         	call	_putsUSART	;wreg free
 15125  0063AC  EFC2  F02C         	goto	l14916
 15126  0063B0                     l15358:
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;main.c: 1196: }
 15130                           ;main.c: 1199: p = strtok((0), ",");
 15131  0063B0  DAEA               	call	PL4	;call to abstracted procedure
 15132  0063B2  EC05  F00D         	call	_strtok	;wreg free
 15133  0063B6  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1326
 15134  0063BA  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1326+1
 15135                           
 15136                           ; BSR set to: 0
 15137                           ;main.c: 1200: if ((0) != p) {
 15138  0063BE  0102               	movlb	2	; () banked
 15139  0063C0  51C5               	movf	(doModeVerbose@p_1326+1)& (0+255),w,b
 15140  0063C2  11C4               	iorwf	doModeVerbose@p_1326& (0+255),w,b
 15141  0063C4  E00A               	bz	l15364
 15142                           
 15143                           ; BSR set to: 2
 15144                           ;main.c: 1201: mask_type = atoi(p);
 15145  0063C6  C2C4  F066         	movff	doModeVerbose@p_1326,?_atoi
 15146  0063CA  C2C5  F067         	movff	doModeVerbose@p_1326+1,?_atoi+1
 15147  0063CE  EC03  F015         	call	_atoi	;wreg free
 15148  0063D2  5166               	movf	?_atoi& (0+255),w,b
 15149  0063D4  0102               	movlb	2	; () banked
 15150  0063D6  6F90               	movwf	doModeVerbose@mask_type& (0+255),b
 15151                           
 15152                           ;main.c: 1202: }
 15153  0063D8  D008               	goto	l15372
 15154  0063DA                     l15364:
 15155                           
 15156                           ; BSR set to: 2
 15157                           ;main.c: 1203: else {
 15158                           ;main.c: 1204: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 15159  0063DA  0E75               	movlw	high STR_129
 15160  0063DC  6E21               	movwf	?_putsUSART+1,c
 15161  0063DE  0EC5               	movlw	low STR_129
 15162  0063E0  6E20               	movwf	?_putsUSART,c
 15163  0063E2  EC74  F009         	call	_putsUSART	;wreg free
 15164  0063E6  EFC2  F02C         	goto	l14916
 15165  0063EA                     l15372:
 15166                           
 15167                           ; BSR set to: 2
 15168                           ;main.c: 1208: }
 15169                           ;main.c: 1211: p = strtok((0), ",");
 15170  0063EA  DAC5               	call	PL2	;call to abstracted procedure
 15171  0063EC  EC05  F00D         	call	_strtok	;wreg free
 15172  0063F0  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1326
 15173  0063F4  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1326+1
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;main.c: 1212: if ((0) != p) {
 15177  0063F8  0102               	movlb	2	; () banked
 15178  0063FA  51C5               	movf	(doModeVerbose@p_1326+1)& (0+255),w,b
 15179  0063FC  11C4               	iorwf	doModeVerbose@p_1326& (0+255),w,b
 15180  0063FE  E00A               	bz	l15378
 15181                           
 15182                           ; BSR set to: 2
 15183                           ;main.c: 1213: mask_nodeid = atoi(p);
 15184  006400  C2C4  F066         	movff	doModeVerbose@p_1326,?_atoi
 15185  006404  C2C5  F067         	movff	doModeVerbose@p_1326+1,?_atoi+1
 15186  006408  EC03  F015         	call	_atoi	;wreg free
 15187  00640C  5166               	movf	?_atoi& (0+255),w,b
 15188  00640E  0102               	movlb	2	; () banked
 15189  006410  6F91               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 15190                           
 15191                           ;main.c: 1214: }
 15192  006412  D008               	goto	l15386
 15193  006414                     l15378:
 15194                           
 15195                           ; BSR set to: 2
 15196                           ;main.c: 1215: else {
 15197                           ;main.c: 1216: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 15198  006414  0E74               	movlw	high STR_131
 15199  006416  6E21               	movwf	?_putsUSART+1,c
 15200  006418  0E95               	movlw	low STR_131
 15201  00641A  6E20               	movwf	?_putsUSART,c
 15202  00641C  EC74  F009         	call	_putsUSART	;wreg free
 15203  006420  EFC2  F02C         	goto	l14916
 15204  006424                     l15386:
 15205                           
 15206                           ; BSR set to: 2
 15207                           ;main.c: 1220: }
 15208                           ;main.c: 1221: uint32_t id = ((uint32_t) mask_priority << 26) |
 15209                           ;main.c: 1222: ((uint32_t) mask_class << 16) |
 15210                           ;main.c: 1223: ((uint32_t) mask_type << 8) |
 15211                           ;main.c: 1224: mask_nodeid;
 15212  006424  C290  F0C8         	movff	doModeVerbose@mask_type,??_doModeVerbose
 15213  006428  DB1D               	call	PL44	;call to abstracted procedure
 15214  00642A  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 15215  00642C  0100               	movlb	0	; () banked
 15216  00642E  6FCC               	movwf	(??_doModeVerbose+4)& (0+255),b
 15217  006430  0102               	movlb	2	; () banked
 15218  006432  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 15219  006434  DB3D               	call	PL62	;call to abstracted procedure
 15220  006436  C28F  F0D0         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 15221  00643A  DABA               	call	PL8	;call to abstracted procedure
 15222  00643C  5191               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 15223  00643E  0100               	movlb	0	; () banked
 15224  006440  11D8               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 15225  006442  0102               	movlb	2	; () banked
 15226  006444  6FC0               	movwf	doModeVerbose@id_1338& (0+255),b
 15227  006446  0100               	movlb	0	; () banked
 15228  006448  51D9               	movf	(??_doModeVerbose+17)& (0+255),w,b
 15229  00644A  0102               	movlb	2	; () banked
 15230  00644C  6FC1               	movwf	(doModeVerbose@id_1338+1)& (0+255),b
 15231  00644E  0100               	movlb	0	; () banked
 15232  006450  51DA               	movf	(??_doModeVerbose+18)& (0+255),w,b
 15233  006452  0102               	movlb	2	; () banked
 15234  006454  6FC2               	movwf	(doModeVerbose@id_1338+2)& (0+255),b
 15235  006456  0100               	movlb	0	; () banked
 15236  006458  51DB               	movf	(??_doModeVerbose+19)& (0+255),w,b
 15237  00645A  0102               	movlb	2	; () banked
 15238  00645C  6FC3               	movwf	(doModeVerbose@id_1338+3)& (0+255),b
 15239                           
 15240                           ; BSR set to: 2
 15241                           ;main.c: 1227: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15242  00645E  0E80               	movlw	128
 15243  006460  ECFD  F006         	call	_ECANSetOperationMode
 15244                           
 15245                           ;main.c: 1229: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 15246                           ;main.c: 1230: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 15247  006464  0102               	movlb	2	; () banked
 15248  006466  51B2               	movf	doModeVerbose@maskno& (0+255),w,b
 15249  006468  E008               	bz	l15394
 15250                           
 15251                           ; BSR set to: 2
 15252  00646A  0E0F               	movlw	15	;volatile
 15253  00646C  0100               	movlb	0	; () banked
 15254  00646E  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 15255  006470  0E18               	movlw	24	;volatile
 15256  006472  DB12               	call	PL56	;call to abstracted procedure
 15257  006474  EC88  F015         	call	__CANIDToRegs	;wreg free
 15258  006478  D007               	goto	l15396
 15259  00647A                     l15394:
 15260                           
 15261                           ; BSR set to: 2
 15262  00647A  0E0F               	movlw	15	;volatile
 15263  00647C  0100               	movlb	0	; () banked
 15264  00647E  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 15265  006480  0E1C               	movlw	28	;volatile
 15266  006482  DB0A               	call	PL56	;call to abstracted procedure
 15267  006484  EC88  F015         	call	__CANIDToRegs	;wreg free
 15268  006488                     l15396:
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;main.c: 1233: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 15272  006488  0E00               	movlw	0
 15273  00648A  ECFD  F006         	call	_ECANSetOperationMode
 15274                           
 15275                           ;main.c: 1247: }
 15276                           ;main.c: 1248: }
 15277                           ;main.c: 1250: putsUSART((char *) "+OK\r\n");
 15278  00648E  0E7C               	movlw	high STR_9
 15279  006490  6E21               	movwf	?_putsUSART+1,c
 15280  006492  0E6B               	movlw	low STR_9
 15281  006494  6E20               	movwf	?_putsUSART,c
 15282  006496  EC74  F009         	call	_putsUSART	;wreg free
 15283                           
 15284                           ;main.c: 1252: }
 15285  00649A  D262               	goto	l15592
 15286  00649C                     l15428:
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;main.c: 1262: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 15290  00649C  0E01               	movlw	high _cmdbuf
 15291  00649E  0100               	movlb	0	; () banked
 15292  0064A0  6F69               	movwf	(?_stristr+1)& (0+255),b
 15293  0064A2  0E32               	movlw	low _cmdbuf
 15294  0064A4  6F68               	movwf	?_stristr& (0+255),b
 15295  0064A6  0E7C               	movlw	high STR_133
 15296  0064A8  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15297  0064AA  0E8F               	movlw	low STR_133
 15298  0064AC  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15299  0064AE  ECFD  F00B         	call	_stristr	;wreg free
 15300  0064B2  0E32               	movlw	low _cmdbuf
 15301  0064B4  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15302  0064B6  0E01               	movlw	high _cmdbuf
 15303  0064B8  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15304  0064BA  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15305  0064BC  E102               	bnz	u19565
 15306  0064BE  5168               	movf	?_stristr& (0+255),w,b
 15307  0064C0  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15308  0064C2                     u19565:
 15309  0064C2  E001 D23C          	bnz	l15586
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;main.c: 1265: strcpy(cmdbuf, cmdbuf + 4);
 15313  0064C6  0E01               	movlw	high _cmdbuf
 15314  0064C8  6E20               	movwf	?_strcpy+1,c
 15315  0064CA  0E32               	movlw	low _cmdbuf
 15316  0064CC  6E1F               	movwf	?_strcpy,c
 15317  0064CE  0E36               	movlw	low (_cmdbuf+4)
 15318  0064D0  0100               	movlb	0	; () banked
 15319  0064D2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15320  0064D4  0E01               	movlw	high (_cmdbuf+4)
 15321  0064D6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15322  0064D8  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 15323  0064DC  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 15324  0064E0  EC71  F007         	call	_strcpy	;wreg free
 15325                           
 15326                           ; BSR set to: 0
 15327                           ;main.c: 1268: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 15328  0064E4  0E01               	movlw	high _cmdbuf
 15329  0064E6  0100               	movlb	0	; () banked
 15330  0064E8  6F69               	movwf	(?_stristr+1)& (0+255),b
 15331  0064EA  0E32               	movlw	low _cmdbuf
 15332  0064EC  6F68               	movwf	?_stristr& (0+255),b
 15333  0064EE  0E7C               	movlw	high STR_134
 15334  0064F0  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15335  0064F2  0EDA               	movlw	low STR_134
 15336  0064F4  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15337  0064F6  ECFD  F00B         	call	_stristr	;wreg free
 15338  0064FA  0E32               	movlw	low _cmdbuf
 15339  0064FC  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15340  0064FE  0E01               	movlw	high _cmdbuf
 15341  006500  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15342  006502  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15343  006504  E102               	bnz	u19575
 15344  006506  5168               	movf	?_stristr& (0+255),w,b
 15345  006508  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15346  00650A                     u19575:
 15347  00650A  E112               	bnz	l15440
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;main.c: 1269: bHex = 1;
 15351  00650C  0E01               	movlw	1
 15352  00650E  6E29               	movwf	_bHex,c
 15353                           
 15354                           ; BSR set to: 0
 15355                           ;main.c: 1270: (Busy_eep(), Write_b_eep(0x06,1));
 15356  006510  ECB3  F006         	call	_Busy_eep	;wreg free
 15357  006514  6A20               	clrf	?_Write_b_eep+1,c
 15358  006516  0E06               	movlw	6
 15359  006518  6E1F               	movwf	?_Write_b_eep,c
 15360  00651A  0E01               	movlw	1
 15361  00651C  6E21               	movwf	?_Write_b_eep+2,c
 15362  00651E  ECB9  F007         	call	_Write_b_eep	;wreg free
 15363                           
 15364                           ;main.c: 1271: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 15365  006522  0E73               	movlw	high STR_135
 15366  006524  6E21               	movwf	?_putsUSART+1,c
 15367  006526  0E00               	movlw	low STR_135
 15368  006528  6E20               	movwf	?_putsUSART,c
 15369  00652A  EC74  F009         	call	_putsUSART	;wreg free
 15370                           
 15371                           ;main.c: 1272: }
 15372  00652E  D218               	goto	l15592
 15373  006530                     l15440:
 15374                           
 15375                           ; BSR set to: 0
 15376                           ;main.c: 1274: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 15377  006530  0E01               	movlw	high _cmdbuf
 15378  006532  0100               	movlb	0	; () banked
 15379  006534  6F69               	movwf	(?_stristr+1)& (0+255),b
 15380  006536  0E32               	movlw	low _cmdbuf
 15381  006538  6F68               	movwf	?_stristr& (0+255),b
 15382  00653A  0E7B               	movlw	high STR_136
 15383  00653C  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15384  00653E  0EF1               	movlw	low STR_136
 15385  006540  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15386  006542  ECFD  F00B         	call	_stristr	;wreg free
 15387  006546  0E32               	movlw	low _cmdbuf
 15388  006548  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15389  00654A  0E01               	movlw	high _cmdbuf
 15390  00654C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15391  00654E  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15392  006550  E102               	bnz	u19585
 15393  006552  5168               	movf	?_stristr& (0+255),w,b
 15394  006554  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15395  006556                     u19585:
 15396  006556  E111               	bnz	l15450
 15397                           
 15398                           ; BSR set to: 0
 15399                           ;main.c: 1275: bHex = 0;
 15400  006558  6A29               	clrf	_bHex,c
 15401                           
 15402                           ; BSR set to: 0
 15403                           ;main.c: 1276: (Busy_eep(), Write_b_eep(0x06,0));
 15404  00655A  ECB3  F006         	call	_Busy_eep	;wreg free
 15405  00655E  6A20               	clrf	?_Write_b_eep+1,c
 15406  006560  0E06               	movlw	6
 15407  006562  6E1F               	movwf	?_Write_b_eep,c
 15408  006564  0E00               	movlw	0
 15409  006566  6A21               	clrf	?_Write_b_eep+2,c
 15410  006568  ECB9  F007         	call	_Write_b_eep	;wreg free
 15411                           
 15412                           ;main.c: 1277: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 15413  00656C  0E73               	movlw	high STR_137
 15414  00656E  6E21               	movwf	?_putsUSART+1,c
 15415  006570  0EF8               	movlw	low STR_137
 15416  006572  6E20               	movwf	?_putsUSART,c
 15417  006574  EC74  F009         	call	_putsUSART	;wreg free
 15418                           
 15419                           ;main.c: 1278: }
 15420  006578  D1F3               	goto	l15592
 15421  00657A                     l15450:
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;main.c: 1279: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 15425  00657A  0E01               	movlw	high _cmdbuf
 15426  00657C  0100               	movlb	0	; () banked
 15427  00657E  6F69               	movwf	(?_stristr+1)& (0+255),b
 15428  006580  0E32               	movlw	low _cmdbuf
 15429  006582  6F68               	movwf	?_stristr& (0+255),b
 15430  006584  0E7B               	movlw	high STR_138
 15431  006586  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15432  006588  0E54               	movlw	low STR_138
 15433  00658A  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15434  00658C  ECFD  F00B         	call	_stristr	;wreg free
 15435  006590  5169               	movf	(?_stristr+1)& (0+255),w,b
 15436  006592  1168               	iorwf	?_stristr& (0+255),w,b
 15437  006594  E021               	bz	l15464
 15438                           
 15439                           ; BSR set to: 0
 15440                           ;main.c: 1280: strcpy(cmdbuf, cmdbuf + 10);
 15441  006596  0E01               	movlw	high _cmdbuf
 15442  006598  DA72               	call	PL46	;call to abstracted procedure
 15443  00659A  EC71  F007         	call	_strcpy	;wreg free
 15444                           
 15445                           ; BSR set to: 0
 15446                           ;main.c: 1281: rwtimeout = atoi(cmdbuf);
 15447  00659E  0E01               	movlw	high _cmdbuf
 15448  0065A0  0100               	movlb	0	; () banked
 15449  0065A2  6F67               	movwf	(?_atoi+1)& (0+255),b
 15450  0065A4  0E32               	movlw	low _cmdbuf
 15451  0065A6  6F66               	movwf	?_atoi& (0+255),b
 15452  0065A8  EC03  F015         	call	_atoi	;wreg free
 15453  0065AC  5166               	movf	?_atoi& (0+255),w,b
 15454  0065AE  6E33               	movwf	_rwtimeout,c
 15455                           
 15456                           ; BSR set to: 0
 15457                           ;main.c: 1282: if (rwtimeout < 20u) {
 15458  0065B0  0E14               	movlw	20
 15459  0065B2  6033               	cpfslt	_rwtimeout,c
 15460  0065B4  D001               	goto	l15460
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;main.c: 1283: rwtimeout = 20u;
 15464  0065B6  6E33               	movwf	_rwtimeout,c
 15465  0065B8                     l15460:
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;main.c: 1284: }
 15469                           ;main.c: 1285: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 15470  0065B8  ECB3  F006         	call	_Busy_eep	;wreg free
 15471  0065BC  6A20               	clrf	?_Write_b_eep+1,c
 15472  0065BE  0E09               	movlw	9
 15473  0065C0  6E1F               	movwf	?_Write_b_eep,c
 15474  0065C2  C033  F021         	movff	_rwtimeout,?_Write_b_eep+2
 15475  0065C6  ECB9  F007         	call	_Write_b_eep	;wreg free
 15476                           
 15477                           ;main.c: 1286: putsUSART((char *) "+OK\r\n");
 15478  0065CA  0E7C               	movlw	high STR_9
 15479  0065CC  6E21               	movwf	?_putsUSART+1,c
 15480  0065CE  0E6B               	movlw	low STR_9
 15481  0065D0  6E20               	movwf	?_putsUSART,c
 15482  0065D2  EC74  F009         	call	_putsUSART	;wreg free
 15483                           
 15484                           ;main.c: 1287: }
 15485  0065D6  D1C4               	goto	l15592
 15486  0065D8                     l15464:
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;main.c: 1289: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 15490  0065D8  0E01               	movlw	high _cmdbuf
 15491  0065DA  0100               	movlb	0	; () banked
 15492  0065DC  6F69               	movwf	(?_stristr+1)& (0+255),b
 15493  0065DE  0E32               	movlw	low _cmdbuf
 15494  0065E0  6F68               	movwf	?_stristr& (0+255),b
 15495  0065E2  0E7B               	movlw	high STR_140
 15496  0065E4  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15497  0065E6  0E9D               	movlw	low STR_140
 15498  0065E8  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15499  0065EA  ECFD  F00B         	call	_stristr	;wreg free
 15500  0065EE  5169               	movf	(?_stristr+1)& (0+255),w,b
 15501  0065F0  1168               	iorwf	?_stristr& (0+255),w,b
 15502  0065F2  E05C               	bz	l15498
 15503                           
 15504                           ; BSR set to: 0
 15505                           ;main.c: 1290: strcpy(cmdbuf, cmdbuf + 8);
 15506  0065F4  0E01               	movlw	high _cmdbuf
 15507  0065F6  DA01               	call	PL16	;call to abstracted procedure
 15508  0065F8  EC71  F007         	call	_strcpy	;wreg free
 15509                           
 15510                           ; BSR set to: 0
 15511                           ;main.c: 1291: if (0 != stristr(cmdbuf, "CLOSE")) {
 15512  0065FC  0E01               	movlw	high _cmdbuf
 15513  0065FE  0100               	movlb	0	; () banked
 15514  006600  DA75               	call	PL100	;call to abstracted procedure
 15515  006602  ECFD  F00B         	call	_stristr	;wreg free
 15516  006606  5169               	movf	(?_stristr+1)& (0+255),w,b
 15517  006608  1168               	iorwf	?_stristr& (0+255),w,b
 15518  00660A  E00A               	bz	l15474
 15519                           
 15520                           ; BSR set to: 0
 15521                           ;main.c: 1292: (Busy_eep(), Write_b_eep(0x07,0));
 15522  00660C  ECB3  F006         	call	_Busy_eep	;wreg free
 15523  006610  6A20               	clrf	?_Write_b_eep+1,c
 15524  006612  0E07               	movlw	7
 15525  006614  6E1F               	movwf	?_Write_b_eep,c
 15526  006616  0E00               	movlw	0
 15527  006618  6A21               	clrf	?_Write_b_eep+2,c
 15528  00661A  ECB9  F007         	call	_Write_b_eep	;wreg free
 15529                           
 15530                           ;main.c: 1293: }
 15531  00661E  D1A0               	goto	l15592
 15532  006620                     l15474:
 15533                           
 15534                           ; BSR set to: 0
 15535                           ;main.c: 1294: else if (0 != stristr(cmdbuf, "OPEN")) {
 15536  006620  DA52               	call	PL70	;call to abstracted procedure
 15537  006622  ECFD  F00B         	call	_stristr	;wreg free
 15538  006626  5169               	movf	(?_stristr+1)& (0+255),w,b
 15539  006628  1168               	iorwf	?_stristr& (0+255),w,b
 15540  00662A  E00A               	bz	l15480
 15541                           
 15542                           ; BSR set to: 0
 15543                           ;main.c: 1295: (Busy_eep(), Write_b_eep(0x07,1));
 15544  00662C  ECB3  F006         	call	_Busy_eep	;wreg free
 15545  006630  6A20               	clrf	?_Write_b_eep+1,c
 15546  006632  0E07               	movlw	7
 15547  006634  6E1F               	movwf	?_Write_b_eep,c
 15548  006636  0E01               	movlw	1
 15549  006638  6E21               	movwf	?_Write_b_eep+2,c
 15550  00663A  ECB9  F007         	call	_Write_b_eep	;wreg free
 15551                           
 15552                           ;main.c: 1296: }
 15553  00663E  D190               	goto	l15592
 15554  006640                     l15480:
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;main.c: 1297: else if (0 != stristr(cmdbuf, "SILENT")) {
 15558  006640  0E01               	movlw	high _cmdbuf
 15559  006642  DA4B               	call	PL86	;call to abstracted procedure
 15560  006644  ECFD  F00B         	call	_stristr	;wreg free
 15561  006648  5169               	movf	(?_stristr+1)& (0+255),w,b
 15562  00664A  1168               	iorwf	?_stristr& (0+255),w,b
 15563  00664C  E00A               	bz	l15486
 15564                           
 15565                           ; BSR set to: 0
 15566                           ;main.c: 1298: (Busy_eep(), Write_b_eep(0x07,2));
 15567  00664E  ECB3  F006         	call	_Busy_eep	;wreg free
 15568  006652  6A20               	clrf	?_Write_b_eep+1,c
 15569  006654  0E07               	movlw	7
 15570  006656  6E1F               	movwf	?_Write_b_eep,c
 15571  006658  0E02               	movlw	2
 15572  00665A  6E21               	movwf	?_Write_b_eep+2,c
 15573  00665C  ECB9  F007         	call	_Write_b_eep	;wreg free
 15574                           
 15575                           ;main.c: 1299: }
 15576  006660  D17F               	goto	l15592
 15577  006662                     l15486:
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;main.c: 1300: else if (0 != stristr(cmdbuf, "LISTEN")) {
 15581  006662  0E01               	movlw	high _cmdbuf
 15582  006664  0100               	movlb	0	; () banked
 15583  006666  DA5A               	call	PL116	;call to abstracted procedure
 15584  006668  ECFD  F00B         	call	_stristr	;wreg free
 15585  00666C  5169               	movf	(?_stristr+1)& (0+255),w,b
 15586  00666E  1168               	iorwf	?_stristr& (0+255),w,b
 15587  006670  E00A               	bz	l15492
 15588                           
 15589                           ; BSR set to: 0
 15590                           ;main.c: 1301: (Busy_eep(), Write_b_eep(0x07,3));
 15591  006672  ECB3  F006         	call	_Busy_eep	;wreg free
 15592  006676  6A20               	clrf	?_Write_b_eep+1,c
 15593  006678  0E07               	movlw	7
 15594  00667A  6E1F               	movwf	?_Write_b_eep,c
 15595  00667C  0E03               	movlw	3
 15596  00667E  6E21               	movwf	?_Write_b_eep+2,c
 15597  006680  ECB9  F007         	call	_Write_b_eep	;wreg free
 15598                           
 15599                           ;main.c: 1302: }
 15600  006684  D16D               	goto	l15592
 15601  006686                     l15492:
 15602                           
 15603                           ; BSR set to: 0
 15604                           ;main.c: 1303: else if (0 != stristr(cmdbuf, "LOOPBACK")) {
 15605  006686  0E01               	movlw	high _cmdbuf
 15606  006688  0100               	movlb	0	; () banked
 15607  00668A  DA50               	call	PL118	;call to abstracted procedure
 15608  00668C  ECFD  F00B         	call	_stristr	;wreg free
 15609  006690  5169               	movf	(?_stristr+1)& (0+255),w,b
 15610  006692  1168               	iorwf	?_stristr& (0+255),w,b
 15611  006694  E101 D164          	bz	l15592
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;main.c: 1304: (Busy_eep(), Write_b_eep(0x07,4));
 15615  006698  ECB3  F006         	call	_Busy_eep	;wreg free
 15616  00669C  6A20               	clrf	?_Write_b_eep+1,c
 15617  00669E  0E07               	movlw	7
 15618  0066A0  6E1F               	movwf	?_Write_b_eep,c
 15619  0066A2  0E04               	movlw	4
 15620  0066A4  6E21               	movwf	?_Write_b_eep+2,c
 15621  0066A6  ECB9  F007         	call	_Write_b_eep	;wreg free
 15622                           
 15623                           ; BSR set to: 0
 15624  0066AA  D15A               	goto	l15592
 15625  0066AC                     l15498:
 15626                           
 15627                           ; BSR set to: 0
 15628                           ;main.c: 1307: else if (0 != stristr(cmdbuf, "MODE ")) {
 15629  0066AC  0E01               	movlw	high _cmdbuf
 15630  0066AE  0100               	movlb	0	; () banked
 15631  0066B0  6F69               	movwf	(?_stristr+1)& (0+255),b
 15632  0066B2  0E32               	movlw	low _cmdbuf
 15633  0066B4  6F68               	movwf	?_stristr& (0+255),b
 15634  0066B6  0E7C               	movlw	high STR_146
 15635  0066B8  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15636  0066BA  0E77               	movlw	low STR_146
 15637  0066BC  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15638  0066BE  ECFD  F00B         	call	_stristr	;wreg free
 15639  0066C2  5169               	movf	(?_stristr+1)& (0+255),w,b
 15640  0066C4  1168               	iorwf	?_stristr& (0+255),w,b
 15641  0066C6  E066               	bz	l15528
 15642                           
 15643                           ; BSR set to: 0
 15644                           ;main.c: 1308: strcpy(cmdbuf, cmdbuf + 5);
 15645  0066C8  D965               	call	PL6	;call to abstracted procedure
 15646  0066CA  EC71  F007         	call	_strcpy	;wreg free
 15647                           
 15648                           ; BSR set to: 0
 15649                           ;main.c: 1309: if (0 != stristr(cmdbuf, "VERBOSE")) {
 15650  0066CE  0E01               	movlw	high _cmdbuf
 15651  0066D0  0100               	movlb	0	; () banked
 15652  0066D2  6F69               	movwf	(?_stristr+1)& (0+255),b
 15653  0066D4  0E32               	movlw	low _cmdbuf
 15654  0066D6  6F68               	movwf	?_stristr& (0+255),b
 15655  0066D8  0E7B               	movlw	high STR_147
 15656  0066DA  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15657  0066DC  0EE9               	movlw	low STR_147
 15658  0066DE  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15659  0066E0  ECFD  F00B         	call	_stristr	;wreg free
 15660  0066E4  5169               	movf	(?_stristr+1)& (0+255),w,b
 15661  0066E6  1168               	iorwf	?_stristr& (0+255),w,b
 15662  0066E8  E012               	bz	l15512
 15663                           
 15664                           ; BSR set to: 0
 15665                           ;main.c: 1310: mode = 0;
 15666  0066EA  0101               	movlb	1	; () banked
 15667  0066EC  6B31               	clrf	_mode& (0+255),b
 15668                           
 15669                           ; BSR set to: 1
 15670                           ;main.c: 1311: (Busy_eep(), Write_b_eep(0x03,0));
 15671  0066EE  ECB3  F006         	call	_Busy_eep	;wreg free
 15672  0066F2  6A20               	clrf	?_Write_b_eep+1,c
 15673  0066F4  0E03               	movlw	3
 15674  0066F6  6E1F               	movwf	?_Write_b_eep,c
 15675  0066F8  0E00               	movlw	0
 15676  0066FA  6A21               	clrf	?_Write_b_eep+2,c
 15677  0066FC  ECB9  F007         	call	_Write_b_eep	;wreg free
 15678                           
 15679                           ;main.c: 1312: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 15680  006700  0E77               	movlw	high STR_148
 15681  006702  6E21               	movwf	?_putsUSART+1,c
 15682  006704  0E51               	movlw	low STR_148
 15683  006706  6E20               	movwf	?_putsUSART,c
 15684  006708  EC74  F009         	call	_putsUSART	;wreg free
 15685                           
 15686                           ;main.c: 1313: }
 15687  00670C  D129               	goto	l15592
 15688  00670E                     l15512:
 15689                           
 15690                           ; BSR set to: 0
 15691                           ;main.c: 1314: else if (0 != stristr(cmdbuf, "VSCP")) {
 15692  00670E  0E01               	movlw	high _cmdbuf
 15693  006710  0100               	movlb	0	; () banked
 15694  006712  6F69               	movwf	(?_stristr+1)& (0+255),b
 15695  006714  0E32               	movlw	low _cmdbuf
 15696  006716  6F68               	movwf	?_stristr& (0+255),b
 15697  006718  0E7C               	movlw	high STR_149
 15698  00671A  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15699  00671C  0EB2               	movlw	low STR_149
 15700  00671E  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15701  006720  ECFD  F00B         	call	_stristr	;wreg free
 15702  006724  5169               	movf	(?_stristr+1)& (0+255),w,b
 15703  006726  1168               	iorwf	?_stristr& (0+255),w,b
 15704  006728  E013               	bz	l15520
 15705                           
 15706                           ; BSR set to: 0
 15707                           ;main.c: 1315: mode = 1;
 15708  00672A  0E01               	movlw	1
 15709  00672C  0101               	movlb	1	; () banked
 15710  00672E  6F31               	movwf	_mode& (0+255),b
 15711                           
 15712                           ; BSR set to: 1
 15713                           ;main.c: 1316: (Busy_eep(), Write_b_eep(0x03,1));
 15714  006730  ECB3  F006         	call	_Busy_eep	;wreg free
 15715  006734  6A20               	clrf	?_Write_b_eep+1,c
 15716  006736  0E03               	movlw	3
 15717  006738  6E1F               	movwf	?_Write_b_eep,c
 15718  00673A  0E01               	movlw	1
 15719  00673C  6E21               	movwf	?_Write_b_eep+2,c
 15720  00673E  ECB9  F007         	call	_Write_b_eep	;wreg free
 15721                           
 15722                           ;main.c: 1317: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 15723  006742  0E76               	movlw	high STR_150
 15724  006744  6E21               	movwf	?_putsUSART+1,c
 15725  006746  0ED6               	movlw	low STR_150
 15726  006748  6E20               	movwf	?_putsUSART,c
 15727  00674A  EC74  F009         	call	_putsUSART	;wreg free
 15728                           
 15729                           ;main.c: 1318: }
 15730  00674E  D108               	goto	l15592
 15731  006750                     l15520:
 15732                           
 15733                           ; BSR set to: 0
 15734                           ;main.c: 1319: else if (0 != stristr(cmdbuf, "SLCAN")) {
 15735  006750  0E01               	movlw	high _cmdbuf
 15736  006752  0100               	movlb	0	; () banked
 15737  006754  6F69               	movwf	(?_stristr+1)& (0+255),b
 15738  006756  0E32               	movlw	low _cmdbuf
 15739  006758  6F68               	movwf	?_stristr& (0+255),b
 15740  00675A  0E7C               	movlw	high STR_151
 15741  00675C  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15742  00675E  0E89               	movlw	low STR_151
 15743  006760  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15744  006762  ECFD  F00B         	call	_stristr	;wreg free
 15745  006766  5169               	movf	(?_stristr+1)& (0+255),w,b
 15746  006768  1168               	iorwf	?_stristr& (0+255),w,b
 15747  00676A  E101 D0F9          	bz	l15592
 15748                           
 15749                           ; BSR set to: 0
 15750                           ;main.c: 1320: mode = 2;
 15751  00676E  0E02               	movlw	2
 15752  006770  0101               	movlb	1	; () banked
 15753  006772  6F31               	movwf	_mode& (0+255),b
 15754                           
 15755                           ; BSR set to: 1
 15756                           ;main.c: 1321: (Busy_eep(), Write_b_eep(0x03,2));
 15757  006774  ECB3  F006         	call	_Busy_eep	;wreg free
 15758  006778  6A20               	clrf	?_Write_b_eep+1,c
 15759  00677A  0E03               	movlw	3
 15760  00677C  6E1F               	movwf	?_Write_b_eep,c
 15761  00677E  0E02               	movlw	2
 15762  006780  6E21               	movwf	?_Write_b_eep+2,c
 15763  006782  ECB9  F007         	call	_Write_b_eep	;wreg free
 15764                           
 15765                           ;main.c: 1322: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 15766  006786  0E77               	movlw	high STR_152
 15767  006788  6E21               	movwf	?_putsUSART+1,c
 15768  00678A  0ED9               	movlw	low STR_152
 15769  00678C  6E20               	movwf	?_putsUSART,c
 15770  00678E  EC74  F009         	call	_putsUSART	;wreg free
 15771  006792  D0E6               	goto	l15592
 15772  006794                     l15528:
 15773                           
 15774                           ; BSR set to: 0
 15775                           ;main.c: 1326: else if (cmdbuf == stristr(cmdbuf, "ECHO ")) {
 15776  006794  0E01               	movlw	high _cmdbuf
 15777  006796  0100               	movlb	0	; () banked
 15778  006798  6F69               	movwf	(?_stristr+1)& (0+255),b
 15779  00679A  0E32               	movlw	low _cmdbuf
 15780  00679C  6F68               	movwf	?_stristr& (0+255),b
 15781  00679E  0E7C               	movlw	high STR_153
 15782  0067A0  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15783  0067A2  0E7D               	movlw	low STR_153
 15784  0067A4  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15785  0067A6  ECFD  F00B         	call	_stristr	;wreg free
 15786  0067AA  0E32               	movlw	low _cmdbuf
 15787  0067AC  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15788  0067AE  0E01               	movlw	high _cmdbuf
 15789  0067B0  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15790  0067B2  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15791  0067B4  E102               	bnz	u19715
 15792  0067B6  5168               	movf	?_stristr& (0+255),w,b
 15793  0067B8  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15794  0067BA                     u19715:
 15795  0067BA  E13D               	bnz	l15552
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;main.c: 1327: strcpy(cmdbuf, cmdbuf + 5);
 15799  0067BC  D8EB               	call	PL6	;call to abstracted procedure
 15800  0067BE  EC71  F007         	call	_strcpy	;wreg free
 15801                           
 15802                           ; BSR set to: 0
 15803                           ;main.c: 1328: if (0 != stristr(cmdbuf, "ON")) {
 15804  0067C2  0E01               	movlw	high _cmdbuf
 15805  0067C4  0100               	movlb	0	; () banked
 15806  0067C6  D9A2               	call	PL112	;call to abstracted procedure
 15807  0067C8  ECFD  F00B         	call	_stristr	;wreg free
 15808  0067CC  5169               	movf	(?_stristr+1)& (0+255),w,b
 15809  0067CE  1168               	iorwf	?_stristr& (0+255),w,b
 15810  0067D0  E012               	bz	l15540
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;main.c: 1329: bLocalEcho = 1;
 15814  0067D2  0E01               	movlw	1
 15815  0067D4  6E2B               	movwf	_bLocalEcho,c
 15816                           
 15817                           ; BSR set to: 0
 15818                           ;main.c: 1330: (Busy_eep(), Write_b_eep(0x65,1));
 15819  0067D6  ECB3  F006         	call	_Busy_eep	;wreg free
 15820  0067DA  6A20               	clrf	?_Write_b_eep+1,c
 15821  0067DC  0E65               	movlw	101
 15822  0067DE  6E1F               	movwf	?_Write_b_eep,c
 15823  0067E0  0E01               	movlw	1
 15824  0067E2  6E21               	movwf	?_Write_b_eep+2,c
 15825  0067E4  ECB9  F007         	call	_Write_b_eep	;wreg free
 15826                           
 15827                           ;main.c: 1331: putsUSART((char *) "+OK - Local echo on\r\n");
 15828  0067E8  0E79               	movlw	high STR_155
 15829  0067EA  6E21               	movwf	?_putsUSART+1,c
 15830  0067EC  0E86               	movlw	low STR_155
 15831  0067EE  6E20               	movwf	?_putsUSART,c
 15832  0067F0  EC74  F009         	call	_putsUSART	;wreg free
 15833                           
 15834                           ;main.c: 1332: }
 15835  0067F4  D0B5               	goto	l15592
 15836  0067F6                     l15540:
 15837                           
 15838                           ; BSR set to: 0
 15839                           ;main.c: 1333: else if (0 != stristr(cmdbuf, "OFF")) {
 15840  0067F6  0E01               	movlw	high _cmdbuf
 15841  0067F8  0100               	movlb	0	; () banked
 15842  0067FA  D980               	call	PL110	;call to abstracted procedure
 15843  0067FC  ECFD  F00B         	call	_stristr	;wreg free
 15844  006800  5169               	movf	(?_stristr+1)& (0+255),w,b
 15845  006802  1168               	iorwf	?_stristr& (0+255),w,b
 15846  006804  E011               	bz	l15550
 15847                           
 15848                           ; BSR set to: 0
 15849                           ;main.c: 1334: bLocalEcho = 0;
 15850  006806  6A2B               	clrf	_bLocalEcho,c
 15851                           
 15852                           ; BSR set to: 0
 15853                           ;main.c: 1335: (Busy_eep(), Write_b_eep(0x65,0));
 15854  006808  ECB3  F006         	call	_Busy_eep	;wreg free
 15855  00680C  6A20               	clrf	?_Write_b_eep+1,c
 15856  00680E  0E65               	movlw	101
 15857  006810  6E1F               	movwf	?_Write_b_eep,c
 15858  006812  0E00               	movlw	0
 15859  006814  6A21               	clrf	?_Write_b_eep+2,c
 15860  006816  ECB9  F007         	call	_Write_b_eep	;wreg free
 15861                           
 15862                           ;main.c: 1336: putsUSART((char *) "+OK - Local echo off\r\n");
 15863  00681A  0E79               	movlw	high STR_157
 15864  00681C  6E21               	movwf	?_putsUSART+1,c
 15865  00681E  0E15               	movlw	low STR_157
 15866  006820  6E20               	movwf	?_putsUSART,c
 15867  006822  EC74  F009         	call	_putsUSART	;wreg free
 15868                           
 15869                           ;main.c: 1337: }
 15870  006826  D09C               	goto	l15592
 15871  006828                     l15550:
 15872                           
 15873                           ; BSR set to: 0
 15874                           ;main.c: 1338: else {
 15875                           ;main.c: 1339: putsUSART((char *) "+ERROR - Wrong argument to 'set echo'.\r\n");
 15876  006828  0E73               	movlw	high STR_158
 15877  00682A  6E21               	movwf	?_putsUSART+1,c
 15878  00682C  0E56               	movlw	low STR_158
 15879  00682E  6E20               	movwf	?_putsUSART,c
 15880  006830  EC74  F009         	call	_putsUSART	;wreg free
 15881  006834  D095               	goto	l15592
 15882  006836                     l15552:
 15883                           
 15884                           ; BSR set to: 0
 15885                           ;main.c: 1343: else if (cmdbuf == stristr(cmdbuf, "TIMESTAMP ")) {
 15886  006836  0E01               	movlw	high _cmdbuf
 15887  006838  0100               	movlb	0	; () banked
 15888  00683A  6F69               	movwf	(?_stristr+1)& (0+255),b
 15889  00683C  0E32               	movlw	low _cmdbuf
 15890  00683E  6F68               	movwf	?_stristr& (0+255),b
 15891  006840  0E7B               	movlw	high STR_159
 15892  006842  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15893  006844  0E49               	movlw	low STR_159
 15894  006846  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15895  006848  ECFD  F00B         	call	_stristr	;wreg free
 15896  00684C  0E32               	movlw	low _cmdbuf
 15897  00684E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15898  006850  0E01               	movlw	high _cmdbuf
 15899  006852  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15900  006854  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15901  006856  E102               	bnz	u19745
 15902  006858  5168               	movf	?_stristr& (0+255),w,b
 15903  00685A  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15904  00685C                     u19745:
 15905  00685C  E13E               	bnz	l15576
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;main.c: 1344: strcpy(cmdbuf, cmdbuf + 10);
 15909  00685E  0E01               	movlw	high _cmdbuf
 15910  006860  D90E               	call	PL46	;call to abstracted procedure
 15911  006862  EC71  F007         	call	_strcpy	;wreg free
 15912                           
 15913                           ; BSR set to: 0
 15914                           ;main.c: 1345: if (0 != stristr(cmdbuf, "ON")) {
 15915  006866  0E01               	movlw	high _cmdbuf
 15916  006868  0100               	movlb	0	; () banked
 15917  00686A  D950               	call	PL112	;call to abstracted procedure
 15918  00686C  ECFD  F00B         	call	_stristr	;wreg free
 15919  006870  5169               	movf	(?_stristr+1)& (0+255),w,b
 15920  006872  1168               	iorwf	?_stristr& (0+255),w,b
 15921  006874  E012               	bz	l15564
 15922                           
 15923                           ; BSR set to: 0
 15924                           ;main.c: 1346: bTimestamp = 1;
 15925  006876  0E01               	movlw	1
 15926  006878  6E2E               	movwf	_bTimestamp,c
 15927                           
 15928                           ; BSR set to: 0
 15929                           ;main.c: 1347: (Busy_eep(), Write_b_eep(0x66,1));
 15930  00687A  ECB3  F006         	call	_Busy_eep	;wreg free
 15931  00687E  6A20               	clrf	?_Write_b_eep+1,c
 15932  006880  0E66               	movlw	102
 15933  006882  6E1F               	movwf	?_Write_b_eep,c
 15934  006884  0E01               	movlw	1
 15935  006886  6E21               	movwf	?_Write_b_eep+2,c
 15936  006888  ECB9  F007         	call	_Write_b_eep	;wreg free
 15937                           
 15938                           ;main.c: 1348: putsUSART((char *) "+OK - Timestamp on\r\n");
 15939  00688C  0E79               	movlw	high STR_161
 15940  00688E  6E21               	movwf	?_putsUSART+1,c
 15941  006890  0EB2               	movlw	low STR_161
 15942  006892  6E20               	movwf	?_putsUSART,c
 15943  006894  EC74  F009         	call	_putsUSART	;wreg free
 15944                           
 15945                           ;main.c: 1349: }
 15946  006898  D063               	goto	l15592
 15947  00689A                     l15564:
 15948                           
 15949                           ; BSR set to: 0
 15950                           ;main.c: 1350: else if (0 != stristr(cmdbuf, "OFF")) {
 15951  00689A  0E01               	movlw	high _cmdbuf
 15952  00689C  0100               	movlb	0	; () banked
 15953  00689E  D92E               	call	PL110	;call to abstracted procedure
 15954  0068A0  ECFD  F00B         	call	_stristr	;wreg free
 15955  0068A4  5169               	movf	(?_stristr+1)& (0+255),w,b
 15956  0068A6  1168               	iorwf	?_stristr& (0+255),w,b
 15957  0068A8  E011               	bz	l15574
 15958                           
 15959                           ; BSR set to: 0
 15960                           ;main.c: 1351: bTimestamp = 0;
 15961  0068AA  6A2E               	clrf	_bTimestamp,c
 15962                           
 15963                           ; BSR set to: 0
 15964                           ;main.c: 1352: (Busy_eep(), Write_b_eep(0x66,0));
 15965  0068AC  ECB3  F006         	call	_Busy_eep	;wreg free
 15966  0068B0  6A20               	clrf	?_Write_b_eep+1,c
 15967  0068B2  0E66               	movlw	102
 15968  0068B4  6E1F               	movwf	?_Write_b_eep,c
 15969  0068B6  0E00               	movlw	0
 15970  0068B8  6A21               	clrf	?_Write_b_eep+2,c
 15971  0068BA  ECB9  F007         	call	_Write_b_eep	;wreg free
 15972                           
 15973                           ;main.c: 1353: putsUSART((char *) "+OK - Timestamp off\r\n");
 15974  0068BE  0E79               	movlw	high STR_163
 15975  0068C0  6E21               	movwf	?_putsUSART+1,c
 15976  0068C2  0E70               	movlw	low STR_163
 15977  0068C4  6E20               	movwf	?_putsUSART,c
 15978  0068C6  EC74  F009         	call	_putsUSART	;wreg free
 15979                           
 15980                           ;main.c: 1354: }
 15981  0068CA  D04A               	goto	l15592
 15982  0068CC                     l15574:
 15983                           
 15984                           ; BSR set to: 0
 15985                           ;main.c: 1355: else {
 15986                           ;main.c: 1356: putsUSART((char *) "+ERROR - Wrong argument to 'set timestamp'.\r\n");
 15987  0068CC  0E72               	movlw	high STR_164
 15988  0068CE  6E21               	movwf	?_putsUSART+1,c
 15989  0068D0  0E4C               	movlw	low STR_164
 15990  0068D2  6E20               	movwf	?_putsUSART,c
 15991  0068D4  EC74  F009         	call	_putsUSART	;wreg free
 15992  0068D8  D043               	goto	l15592
 15993  0068DA                     l15576:
 15994                           
 15995                           ; BSR set to: 0
 15996                           ;main.c: 1360: else if (cmdbuf == stristr(cmdbuf, "DEFAULTS")) {
 15997  0068DA  0E01               	movlw	high _cmdbuf
 15998  0068DC  0100               	movlb	0	; () banked
 15999  0068DE  6F69               	movwf	(?_stristr+1)& (0+255),b
 16000  0068E0  0E32               	movlw	low _cmdbuf
 16001  0068E2  6F68               	movwf	?_stristr& (0+255),b
 16002  0068E4  0E7B               	movlw	high STR_165
 16003  0068E6  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16004  0068E8  0EB8               	movlw	low STR_165
 16005  0068EA  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16006  0068EC  ECFD  F00B         	call	_stristr	;wreg free
 16007  0068F0  0E32               	movlw	low _cmdbuf
 16008  0068F2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16009  0068F4  0E01               	movlw	high _cmdbuf
 16010  0068F6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16011  0068F8  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 16012  0068FA  E102               	bnz	u19775
 16013  0068FC  5168               	movf	?_stristr& (0+255),w,b
 16014  0068FE  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 16015  006900                     u19775:
 16016  006900  E103               	bnz	l15580
 16017                           
 16018                           ; BSR set to: 0
 16019                           ;main.c: 1361: vscp_restoreDefaults();
 16020  006902  ECB6  F006         	call	_vscp_restoreDefaults	;wreg free
 16021                           
 16022                           ;main.c: 1362: }
 16023  006906  D02C               	goto	l15592
 16024  006908                     l15580:
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;main.c: 1364: else if (cmdbuf == stristr(cmdbuf, "?")) {
 16028  006908  0E01               	movlw	high _cmdbuf
 16029  00690A  0100               	movlb	0	; () banked
 16030  00690C  6F69               	movwf	(?_stristr+1)& (0+255),b
 16031  00690E  0E32               	movlw	low _cmdbuf
 16032  006910  6F68               	movwf	?_stristr& (0+255),b
 16033  006912  0E7C               	movlw	high STR_166
 16034  006914  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16035  006916  0EFD               	movlw	low STR_166
 16036  006918  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16037  00691A  ECFD  F00B         	call	_stristr	;wreg free
 16038  00691E  0E32               	movlw	low _cmdbuf
 16039  006920  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16040  006922  0E01               	movlw	high _cmdbuf
 16041  006924  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16042  006926  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 16043  006928  E102               	bnz	u19785
 16044  00692A  5168               	movf	?_stristr& (0+255),w,b
 16045  00692C  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 16046  00692E                     u19785:
 16047  00692E  E018               	bz	l15592
 16048                           
 16049                           ; BSR set to: 0
 16050                           ;main.c: 1367: else {
 16051                           ;main.c: 1368: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 16052  006930  0E76               	movlw	high STR_167
 16053  006932  6E21               	movwf	?_putsUSART+1,c
 16054  006934  0E94               	movlw	low STR_167
 16055  006936  6E20               	movwf	?_putsUSART,c
 16056  006938  EC74  F009         	call	_putsUSART	;wreg free
 16057  00693C  D011               	goto	l15592
 16058  00693E                     l15586:
 16059                           
 16060                           ; BSR set to: 0
 16061                           ;main.c: 1372: else {
 16062                           ;main.c: 1373: if ( 0x0d == cmdbuf[ 0 ] ) {
 16063  00693E  0101               	movlb	1	; () banked
 16064  006940  5132               	movf	_cmdbuf& (0+255),w,b
 16065  006942  0A0D               	xorlw	13
 16066  006944  E107               	bnz	l15590
 16067                           
 16068                           ; BSR set to: 1
 16069                           ;main.c: 1374: putsUSART((char *) "+OK\r\n");
 16070  006946  0E7C               	movlw	high STR_9
 16071  006948  6E21               	movwf	?_putsUSART+1,c
 16072  00694A  0E6B               	movlw	low STR_9
 16073  00694C  6E20               	movwf	?_putsUSART,c
 16074  00694E  EC74  F009         	call	_putsUSART	;wreg free
 16075                           
 16076                           ;main.c: 1375: }
 16077  006952  D006               	goto	l15592
 16078  006954                     l15590:
 16079                           
 16080                           ; BSR set to: 1
 16081                           ;main.c: 1376: else {
 16082                           ;main.c: 1377: putsUSART((char *) "-ERROR - Unknown command\r\n");
 16083  006954  0E77               	movlw	high STR_169
 16084  006956  6E21               	movwf	?_putsUSART+1,c
 16085  006958  0EA3               	movlw	low STR_169
 16086  00695A  6E20               	movwf	?_putsUSART,c
 16087  00695C  EC74  F009         	call	_putsUSART	;wreg free
 16088  006960                     l15592:
 16089                           
 16090                           ;main.c: 1378: }
 16091                           ;main.c: 1379: }
 16092                           ;main.c: 1381: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 16093  006960  0E01               	movlw	high _cmdbuf
 16094  006962  0100               	movlb	0	; () banked
 16095  006964  6F61               	movwf	(?_memset+1)& (0+255),b
 16096  006966  0E32               	movlw	low _cmdbuf
 16097  006968  EC94  F00D         	call	PL20	;call to abstracted procedure
 16098  00696C  EC5A  F007         	call	_memset	;wreg free
 16099                           
 16100                           ; BSR set to: 0
 16101                           ;main.c: 1382: pos = 0;
 16102  006970  6A32               	clrf	_pos,c
 16103  006972                     l15596:
 16104                           
 16105                           ;main.c: 1383: }
 16106                           ;main.c: 1384: }
 16107                           ;main.c: 1387: (INTCONbits.GIE = 1);
 16108  006972  8EF2               	bsf	intcon,7,c	;volatile
 16109  006974                     l580:
 16110  006974  0012               	return	
 16111  006976                     __end_of_doModeVerbose:
 16112                           	opt stack 0
 16113  006976                     PL2:
 16114                           	opt stack 19
 16115  006976  0100               	movlb	0	; () banked
 16116  006978  6B69               	clrf	(?_strtok+1)& (0+255),b
 16117  00697A  6B68               	clrf	?_strtok& (0+255),b
 16118  00697C  0E7C               	movlw	high STR_30
 16119  00697E  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16120  006980  0EF5               	movlw	low STR_30
 16121  006982  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16122  006984  0012               	return	
 16123  006986                     __end_ofPL2:
 16124                           	opt stack 0
 16125  006986                     PL4:
 16126                           	opt stack 19
 16127  006986  6B69               	clrf	(?_strtok+1)& (0+255),b
 16128  006988  6B68               	clrf	?_strtok& (0+255),b
 16129  00698A  0E7C               	movlw	high STR_30
 16130  00698C  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16131  00698E  0EF5               	movlw	low STR_30
 16132  006990  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16133  006992  0012               	return	
 16134  006994                     __end_ofPL4:
 16135                           	opt stack 0
 16136  006994                     PL6:
 16137                           	opt stack 19
 16138  006994  0E01               	movlw	high _cmdbuf
 16139  006996  6E20               	movwf	?_strcpy+1,c
 16140  006998  0E32               	movlw	low _cmdbuf
 16141  00699A  6E1F               	movwf	?_strcpy,c
 16142  00699C  0E37               	movlw	low (_cmdbuf+5)
 16143  00699E  0100               	movlb	0	; () banked
 16144  0069A0  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16145  0069A2  0E01               	movlw	high (_cmdbuf+5)
 16146  0069A4  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16147  0069A6  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 16148  0069AA  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16149  0069AE  0012               	return	
 16150  0069B0                     __end_ofPL6:
 16151                           	opt stack 0
 16152  0069B0                     PL8:
 16153                           	opt stack 19
 16154  0069B0  6BD1               	clrf	(??_doModeVerbose+9)& (0+255),b
 16155  0069B2  6BD2               	clrf	(??_doModeVerbose+10)& (0+255),b
 16156  0069B4  6BD3               	clrf	(??_doModeVerbose+11)& (0+255),b
 16157  0069B6  0E1A               	movlw	26
 16158  0069B8                     u19465:
 16159  0069B8  90D8               	bcf	status,0,c
 16160  0069BA  37D0               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 16161  0069BC  37D1               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 16162  0069BE  37D2               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 16163  0069C0  37D3               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 16164  0069C2  2EE8               	decfsz	wreg,f,c
 16165  0069C4  D7F9               	goto	u19465
 16166  0069C6  51CC               	movf	(??_doModeVerbose+4)& (0+255),w,b
 16167  0069C8  11D0               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 16168  0069CA  6FD4               	movwf	(??_doModeVerbose+12)& (0+255),b
 16169  0069CC  51CD               	movf	(??_doModeVerbose+5)& (0+255),w,b
 16170  0069CE  11D1               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 16171  0069D0  6FD5               	movwf	(??_doModeVerbose+13)& (0+255),b
 16172  0069D2  51CE               	movf	(??_doModeVerbose+6)& (0+255),w,b
 16173  0069D4  11D2               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 16174  0069D6  6FD6               	movwf	(??_doModeVerbose+14)& (0+255),b
 16175  0069D8  51CF               	movf	(??_doModeVerbose+7)& (0+255),w,b
 16176  0069DA  11D3               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 16177  0069DC  6FD7               	movwf	(??_doModeVerbose+15)& (0+255),b
 16178  0069DE  51C8               	movf	??_doModeVerbose& (0+255),w,b
 16179  0069E0  11D4               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 16180  0069E2  6FD8               	movwf	(??_doModeVerbose+16)& (0+255),b
 16181  0069E4  51C9               	movf	(??_doModeVerbose+1)& (0+255),w,b
 16182  0069E6  11D5               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 16183  0069E8  6FD9               	movwf	(??_doModeVerbose+17)& (0+255),b
 16184  0069EA  51CA               	movf	(??_doModeVerbose+2)& (0+255),w,b
 16185  0069EC  11D6               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 16186  0069EE  6FDA               	movwf	(??_doModeVerbose+18)& (0+255),b
 16187  0069F0  51CB               	movf	(??_doModeVerbose+3)& (0+255),w,b
 16188  0069F2  11D7               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 16189  0069F4  6FDB               	movwf	(??_doModeVerbose+19)& (0+255),b
 16190  0069F6  0102               	movlb	2	; () banked
 16191  0069F8  0012               	return	
 16192  0069FA                     __end_ofPL8:
 16193                           	opt stack 0
 16194  0069FA                     PL16:
 16195                           	opt stack 19
 16196  0069FA  6E20               	movwf	?_strcpy+1,c
 16197  0069FC  0E32               	movlw	low _cmdbuf
 16198  0069FE  6E1F               	movwf	?_strcpy,c
 16199  006A00  0E3A               	movlw	low (_cmdbuf+8)
 16200  006A02  0100               	movlb	0	; () banked
 16201  006A04  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16202  006A06  0E01               	movlw	high (_cmdbuf+8)
 16203  006A08  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16204  006A0A  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 16205  006A0E  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16206  006A12  0012               	return	
 16207  006A14                     __end_ofPL16:
 16208                           	opt stack 0
 16209  006A14                     PL26:
 16210                           	opt stack 19
 16211  006A14  0100               	movlb	0	; () banked
 16212  006A16  6B69               	clrf	(?_strtok+1)& (0+255),b
 16213  006A18  6B68               	clrf	?_strtok& (0+255),b
 16214  006A1A  0E7B               	movlw	high (STR_57+8)
 16215  006A1C  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16216  006A1E  0E7D               	movlw	low (STR_57+8)
 16217  006A20  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16218  006A22  0012               	return	
 16219  006A24                     __end_ofPL26:
 16220                           	opt stack 0
 16221  006A24                     PL30:
 16222                           	opt stack 19
 16223  006A24  0E01               	movlw	high _cmdbuf
 16224  006A26  0100               	movlb	0	; () banked
 16225  006A28  6F69               	movwf	(?_strtok+1)& (0+255),b
 16226  006A2A  0E32               	movlw	low _cmdbuf
 16227  006A2C  6F68               	movwf	?_strtok& (0+255),b
 16228  006A2E  0E7C               	movlw	high STR_30
 16229  006A30  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16230  006A32  0EF5               	movlw	low STR_30
 16231  006A34  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16232  006A36  0012               	return	
 16233  006A38                     __end_ofPL30:
 16234                           	opt stack 0
 16235  006A38                     PL36:
 16236                           	opt stack 19
 16237  006A38  0100               	movlb	0	; () banked
 16238  006A3A  6F69               	movwf	(?_strtok+1)& (0+255),b
 16239  006A3C  0E32               	movlw	low _cmdbuf
 16240  006A3E  6F68               	movwf	?_strtok& (0+255),b
 16241  006A40  0E7B               	movlw	high (STR_57+8)
 16242  006A42  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16243  006A44  0E7D               	movlw	low (STR_57+8)
 16244  006A46  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16245  006A48  0012               	return	
 16246  006A4A                     __end_ofPL36:
 16247                           	opt stack 0
 16248  006A4A                     PL42:
 16249                           	opt stack 19
 16250  006A4A  0102               	movlb	2	; () banked
 16251  006A4C  51B5               	movf	doModeVerbose@i_1204& (0+255),w,b
 16252  006A4E  C2B4  F0C8         	movff	doModeVerbose@reg,??_doModeVerbose
 16253  006A52  0100               	movlb	0	; () banked
 16254  006A54  6BC9               	clrf	(??_doModeVerbose+1)& (0+255),b
 16255  006A56  27C8               	addwf	??_doModeVerbose& (0+255),f,b
 16256  006A58  0E00               	movlw	0
 16257  006A5A  23C9               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 16258  006A5C  51C8               	movf	??_doModeVerbose& (0+255),w,b
 16259  006A5E  6F75               	movwf	(?_sprintf+4)& (0+255),b
 16260  006A60  6B76               	clrf	(?_sprintf+5)& (0+255),b
 16261  006A62  0012               	return	
 16262  006A64                     __end_ofPL42:
 16263                           	opt stack 0
 16264  006A64                     PL44:
 16265                           	opt stack 19
 16266  006A64  0100               	movlb	0	; () banked
 16267  006A66  6BC9               	clrf	(??_doModeVerbose+1)& (0+255),b
 16268  006A68  6BCA               	clrf	(??_doModeVerbose+2)& (0+255),b
 16269  006A6A  6BCB               	clrf	(??_doModeVerbose+3)& (0+255),b
 16270  006A6C  C0CA  F0CB         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 16271  006A70  C0C9  F0CA         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 16272  006A74  C0C8  F0C9         	movff	??_doModeVerbose,??_doModeVerbose+1
 16273  006A78  6BC8               	clrf	??_doModeVerbose& (0+255),b
 16274  006A7A  0102               	movlb	2	; () banked
 16275  006A7C  0012               	return	
 16276  006A7E                     __end_ofPL44:
 16277                           	opt stack 0
 16278  006A7E                     PL46:
 16279                           	opt stack 19
 16280  006A7E  6E20               	movwf	?_strcpy+1,c
 16281  006A80  0E32               	movlw	low _cmdbuf
 16282  006A82  6E1F               	movwf	?_strcpy,c
 16283  006A84  0E3C               	movlw	low (_cmdbuf+10)
 16284  006A86  0100               	movlb	0	; () banked
 16285  006A88  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16286  006A8A  0E01               	movlw	high (_cmdbuf+10)
 16287  006A8C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16288  006A8E  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 16289  006A92  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16290  006A96  0012               	return	
 16291  006A98                     __end_ofPL46:
 16292                           	opt stack 0
 16293  006A98                     PL56:
 16294                           	opt stack 19
 16295  006A98  6F60               	movwf	?__CANIDToRegs& (0+255),b
 16296  006A9A  C2C0  F062         	movff	doModeVerbose@id_1338,?__CANIDToRegs+2
 16297  006A9E  C2C1  F063         	movff	doModeVerbose@id_1338+1,?__CANIDToRegs+3
 16298  006AA2  C2C2  F064         	movff	doModeVerbose@id_1338+2,?__CANIDToRegs+4
 16299  006AA6  C2C3  F065         	movff	doModeVerbose@id_1338+3,?__CANIDToRegs+5
 16300  006AAA  0E01               	movlw	1
 16301  006AAC  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 16302  006AAE  0C01               	retlw	1
 16303  006AB0                     __end_ofPL56:
 16304                           	opt stack 0
 16305  006AB0                     PL62:
 16306                           	opt stack 19
 16307  006AB0  0100               	movlb	0	; () banked
 16308  006AB2  6FCD               	movwf	(??_doModeVerbose+5)& (0+255),b
 16309  006AB4  6BCE               	clrf	(??_doModeVerbose+6)& (0+255),b
 16310  006AB6  6BCF               	clrf	(??_doModeVerbose+7)& (0+255),b
 16311  006AB8  C0CD  F0CF         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 16312  006ABC  C0CC  F0CE         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 16313  006AC0  6BCD               	clrf	(??_doModeVerbose+5)& (0+255),b
 16314  006AC2  6BCC               	clrf	(??_doModeVerbose+4)& (0+255),b
 16315  006AC4  0012               	return	
 16316  006AC6                     __end_ofPL62:
 16317                           	opt stack 0
 16318  006AC6                     PL70:
 16319                           	opt stack 19
 16320  006AC6  0E01               	movlw	high _cmdbuf
 16321  006AC8  0100               	movlb	0	; () banked
 16322  006ACA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16323  006ACC  0E32               	movlw	low _cmdbuf
 16324  006ACE  6F68               	movwf	?_stristr& (0+255),b
 16325  006AD0  0E7C               	movlw	high STR_8
 16326  006AD2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16327  006AD4  0EA8               	movlw	low STR_8
 16328  006AD6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16329  006AD8  0012               	return	
 16330  006ADA                     __end_ofPL70:
 16331                           	opt stack 0
 16332  006ADA                     PL86:
 16333                           	opt stack 19
 16334  006ADA  0100               	movlb	0	; () banked
 16335  006ADC  6F69               	movwf	(?_stristr+1)& (0+255),b
 16336  006ADE  0E32               	movlw	low _cmdbuf
 16337  006AE0  6F68               	movwf	?_stristr& (0+255),b
 16338  006AE2  0E7C               	movlw	high STR_10
 16339  006AE4  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16340  006AE6  0E49               	movlw	low STR_10
 16341  006AE8  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16342  006AEA  0012               	return	
 16343  006AEC                     __end_ofPL86:
 16344                           	opt stack 0
 16345  006AEC                     PL100:
 16346                           	opt stack 19
 16347  006AEC  6F69               	movwf	(?_stristr+1)& (0+255),b
 16348  006AEE  0E32               	movlw	low _cmdbuf
 16349  006AF0  6F68               	movwf	?_stristr& (0+255),b
 16350  006AF2  0E7C               	movlw	high STR_12
 16351  006AF4  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16352  006AF6  0E83               	movlw	low STR_12
 16353  006AF8  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16354  006AFA  0012               	return	
 16355  006AFC                     __end_ofPL100:
 16356                           	opt stack 0
 16357  006AFC                     PL110:
 16358                           	opt stack 19
 16359  006AFC  6F69               	movwf	(?_stristr+1)& (0+255),b
 16360  006AFE  0E32               	movlw	low _cmdbuf
 16361  006B00  6F68               	movwf	?_stristr& (0+255),b
 16362  006B02  0E7C               	movlw	high STR_156
 16363  006B04  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16364  006B06  0ED2               	movlw	low STR_156
 16365  006B08  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16366  006B0A  0012               	return	
 16367  006B0C                     __end_ofPL110:
 16368                           	opt stack 0
 16369  006B0C                     PL112:
 16370                           	opt stack 19
 16371  006B0C  6F69               	movwf	(?_stristr+1)& (0+255),b
 16372  006B0E  0E32               	movlw	low _cmdbuf
 16373  006B10  6F68               	movwf	?_stristr& (0+255),b
 16374  006B12  0E7B               	movlw	high (STR_18+5)
 16375  006B14  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16376  006B16  0EFE               	movlw	low (STR_18+5)
 16377  006B18  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16378  006B1A  0012               	return	
 16379  006B1C                     __end_ofPL112:
 16380                           	opt stack 0
 16381  006B1C                     PL116:
 16382                           	opt stack 19
 16383  006B1C  6F69               	movwf	(?_stristr+1)& (0+255),b
 16384  006B1E  0E32               	movlw	low _cmdbuf
 16385  006B20  6F68               	movwf	?_stristr& (0+255),b
 16386  006B22  0E7C               	movlw	high STR_16
 16387  006B24  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16388  006B26  0E3B               	movlw	low STR_16
 16389  006B28  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16390  006B2A  0012               	return	
 16391  006B2C                     __end_ofPL116:
 16392                           	opt stack 0
 16393  006B2C                     PL118:
 16394                           	opt stack 19
 16395  006B2C  6F69               	movwf	(?_stristr+1)& (0+255),b
 16396  006B2E  0E32               	movlw	low _cmdbuf
 16397  006B30  6F68               	movwf	?_stristr& (0+255),b
 16398  006B32  0E7B               	movlw	high STR_14
 16399  006B34  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16400  006B36  0EAF               	movlw	low STR_14
 16401  006B38  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16402  006B3A  0012               	return	
 16403  006B3C                     __end_ofPL118:
 16404                           	opt stack 0
 16405                           tblptru	equ	0xFF8
 16406                           tblptrh	equ	0xFF7
 16407                           tblptrl	equ	0xFF6
 16408                           tablat	equ	0xFF5
 16409                           prodh	equ	0xFF4
 16410                           prodl	equ	0xFF3
 16411                           intcon	equ	0xFF2
 16412                           indf0	equ	0xFEF
 16413                           postinc0	equ	0xFEE
 16414                           fsr0h	equ	0xFEA
 16415                           fsr0l	equ	0xFE9
 16416                           wreg	equ	0xFE8
 16417                           indf1	equ	0xFE7
 16418                           postinc1	equ	0xFE6
 16419                           postdec1	equ	0xFE5
 16420                           fsr1h	equ	0xFE2
 16421                           fsr1l	equ	0xFE1
 16422                           indf2	equ	0xFDF
 16423                           postinc2	equ	0xFDE
 16424                           postdec2	equ	0xFDD
 16425                           plusw2	equ	0xFDB
 16426                           fsr2h	equ	0xFDA
 16427                           fsr2l	equ	0xFD9
 16428                           status	equ	0xFD8
 16429                           
 16430 ;; *************** function _writeRegisterExtended *****************
 16431 ;; Defined at:
 16432 ;;		line 2688 in file "main.c"
 16433 ;; Parameters:    Size  Location     Type
 16434 ;;  nodeid          1    wreg     unsigned char 
 16435 ;;  page            2   83[BANK0 ] unsigned short 
 16436 ;;  reg             1   85[BANK0 ] unsigned char 
 16437 ;;  timeout         2   86[BANK0 ] unsigned short 
 16438 ;;  value           2   88[BANK0 ] PTR unsigned char 
 16439 ;;		 -> doModeVerbose@value_1262(1), 
 16440 ;; Auto vars:     Size  Location     Type
 16441 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16442 ;; Return value:  Size  Location     Type
 16443 ;;                  1    wreg      enum E15660
 16444 ;; Registers used:
 16445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16446 ;; Tracked objects:
 16447 ;;		On entry : F/2
 16448 ;;		On exit  : E/0
 16449 ;;		Unchanged: 0/0
 16450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16451 ;;      Params:         0       7       0       0       0       0       0
 16452 ;;      Locals:         0       1       0       0       0       0       0
 16453 ;;      Temps:          0       4       0       0       0       0       0
 16454 ;;      Totals:         0      12       0       0       0       0       0
 16455 ;;Total ram usage:       12 bytes
 16456 ;; Hardware stack levels used:    1
 16457 ;; Hardware stack levels required when called:    7
 16458 ;; This function calls:
 16459 ;;		_checkCANBusState
 16460 ;;		_sendVSCPFrame
 16461 ;;		_getVSCPFrame
 16462 ;; This function is called by:
 16463 ;;		_doModeVerbose
 16464 ;; This function uses a non-reentrant model
 16465 ;;
 16466                           
 16467                           	psect	text23
 16468  002906                     __ptext23:
 16469                           	opt stack 0
 16470  002906                     _writeRegisterExtended:
 16471                           	opt stack 21
 16472                           
 16473                           ;incstack = 0
 16474                           ;incstack = 0
 16475                           ;writeRegisterExtended@nodeid stored from wreg
 16476  002906  CFE8 F0BE          	movff	wreg,writeRegisterExtended@nodeid
 16477                           
 16478                           ; BSR set to: 2
 16479                           ;main.c: 2689: vscpData[ 0 ] = nodeid;
 16480  00290A  C0BE  F1EA         	movff	writeRegisterExtended@nodeid,_vscpData
 16481                           
 16482                           ; BSR set to: 2
 16483                           ;main.c: 2690: vscpData[ 1 ] = page >> 8;
 16484  00290E  0100               	movlb	0	; () banked
 16485  002910  51B4               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 16486  002912  0101               	movlb	1	; () banked
 16487  002914  6FEB               	movwf	(_vscpData+1)& (0+255),b
 16488                           
 16489                           ; BSR set to: 1
 16490                           ;main.c: 2691: vscpData[ 2 ] = page & 0xff;
 16491  002916  C0B3  F1EC         	movff	writeRegisterExtended@page,_vscpData+2
 16492                           
 16493                           ; BSR set to: 1
 16494                           ;main.c: 2692: vscpData[ 3 ] = reg;
 16495  00291A  C0B5  F1ED         	movff	writeRegisterExtended@reg,_vscpData+3
 16496                           
 16497                           ; BSR set to: 1
 16498                           ;main.c: 2693: vscpData[ 4 ] = *value;
 16499  00291E  C0B8  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16500  002922  C0B9  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16501  002926  50DF               	movf	indf2,w,c
 16502  002928  6FEE               	movwf	(_vscpData+4)& (0+255),b
 16503                           
 16504                           ; BSR set to: 1
 16505                           ;main.c: 2695: if (sendVSCPFrame(0,
 16506                           ;main.c: 2696: 38,
 16507                           ;main.c: 2697: 0,
 16508                           ;main.c: 2698: 0,
 16509                           ;main.c: 2699: 5,
 16510                           ;main.c: 2700: vscpData)) {
 16511  00292A  0100               	movlb	0	; () banked
 16512  00292C  6B94               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16513  00292E  6B93               	clrf	?_sendVSCPFrame& (0+255),b
 16514  002930  0E26               	movlw	38
 16515  002932  6F95               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16516  002934  6B96               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16517  002936  6B97               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16518  002938  0E05               	movlw	5
 16519  00293A  6F98               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16520  00293C  0E01               	movlw	high _vscpData
 16521  00293E  6F9A               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16522  002940  0EEA               	movlw	low _vscpData
 16523  002942  6F99               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16524  002944  EC85  F00F         	call	_sendVSCPFrame	;wreg free
 16525  002948  0900               	iorlw	0
 16526  00294A  E05B               	bz	l17026
 16527                           
 16528                           ;main.c: 2702: timekeeper = 0;
 16529  00294C  0101               	movlb	1	; () banked
 16530  00294E  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 16531  002950  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16532  002952  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16533  002954  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16534                           
 16535                           ;main.c: 2703: while (timekeeper < timeout) {
 16536  002956  D03E               	goto	l17024
 16537  002958                     l1198:
 16538                           
 16539                           ; BSR set to: 1
 16540  002958  0004               	clrwdt		;# 
 16541                           
 16542                           ;main.c: 2706: checkCANBusState();
 16543  00295A  EC27  F007         	call	_checkCANBusState	;wreg free
 16544                           
 16545                           ;main.c: 2708: if (getVSCPFrame(&vscpClass,
 16546                           ;main.c: 2709: &vscpType,
 16547                           ;main.c: 2710: &vscpNodeId,
 16548                           ;main.c: 2711: &vscpPriority,
 16549                           ;main.c: 2712: &vscpSize,
 16550                           ;main.c: 2713: vscpData)) {
 16551  00295E  0E41               	movlw	low _vscpType
 16552  002960  0100               	movlb	0	; () banked
 16553  002962  6F6E               	movwf	?_getVSCPFrame& (0+255),b
 16554  002964  0E3E               	movlw	low _vscpNodeId
 16555  002966  6F6F               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16556  002968  0E3F               	movlw	low _vscpPriority
 16557  00296A  6F70               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16558  00296C  0E40               	movlw	low _vscpSize
 16559  00296E  6F71               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16560  002970  0E01               	movlw	high _vscpData
 16561  002972  6F73               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16562  002974  0EEA               	movlw	low _vscpData
 16563  002976  6F72               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16564  002978  0E3A               	movlw	_vscpClass& (0+255)
 16565  00297A  EC7A  F00C         	call	_getVSCPFrame
 16566  00297E  0900               	iorlw	0
 16567  002980  E029               	bz	l17024
 16568                           
 16569                           ; BSR set to: 0
 16570                           ;main.c: 2715: if ((nodeid == vscpNodeId) &&
 16571                           ;main.c: 2716: (5 == vscpSize) &&
 16572                           ;main.c: 2717: (0 == vscpData[ 0 ]) &&
 16573                           ;main.c: 2718: ((page >> 8) == vscpData[ 1 ]) &&
 16574                           ;main.c: 2719: ((page & 0xff) == vscpData[ 2 ]) &&
 16575                           ;main.c: 2720: (reg == vscpData[ 3 ]) &&
 16576                           ;main.c: 2721: (*value == vscpData[ 4 ])) {
 16577  002982  503E               	movf	_vscpNodeId,w,c
 16578  002984  63BE               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 16579  002986  D026               	goto	l17024
 16580                           
 16581                           ; BSR set to: 0
 16582  002988  5040               	movf	_vscpSize,w,c
 16583  00298A  0A05               	xorlw	5
 16584  00298C  E123               	bnz	l17024
 16585                           
 16586                           ; BSR set to: 0
 16587  00298E  0101               	movlb	1	; () banked
 16588  002990  67EA               	tstfsz	_vscpData& (0+255),b
 16589  002992  D020               	goto	l17024
 16590                           
 16591                           ; BSR set to: 1
 16592  002994  0100               	movlb	0	; () banked
 16593  002996  51B4               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 16594  002998  0101               	movlb	1	; () banked
 16595  00299A  19EB               	xorwf	(_vscpData+1)& (0+255),w,b
 16596  00299C  E11B               	bnz	l17024
 16597                           
 16598                           ; BSR set to: 1
 16599  00299E  0100               	movlb	0	; () banked
 16600  0029A0  51B3               	movf	writeRegisterExtended@page& (0+255),w,b
 16601  0029A2  EE21  F0EC         	lfsr	2,_vscpData+2
 16602  0029A6  62DF               	cpfseq	indf2,c
 16603  0029A8  D015               	goto	l17024
 16604                           
 16605                           ; BSR set to: 1
 16606  0029AA  51B5               	movf	writeRegisterExtended@reg& (0+255),w,b
 16607  0029AC  0101               	movlb	1	; () banked
 16608  0029AE  EE21  F0ED         	lfsr	2,_vscpData+3
 16609  0029B2  62DF               	cpfseq	indf2,c
 16610  0029B4  D00F               	goto	l17024
 16611                           
 16612                           ; BSR set to: 1
 16613  0029B6  51EE               	movf	(_vscpData+4)& (0+255),w,b
 16614  0029B8  C0B8  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16615  0029BC  C0B9  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16616  0029C0  62DF               	cpfseq	indf2,c
 16617  0029C2  D008               	goto	l17024
 16618                           
 16619                           ; BSR set to: 1
 16620                           ;main.c: 2722: *value = vscpData[ 1 ];
 16621  0029C4  C0B8  FFD9         	movff	writeRegisterExtended@value,fsr2l
 16622  0029C8  C0B9  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 16623  0029CC  C1EB  FFDF         	movff	_vscpData+1,indf2
 16624                           
 16625                           ; BSR set to: 1
 16626                           ;main.c: 2723: return 1;
 16627  0029D0  0E01               	movlw	1
 16628  0029D2  D018               	goto	l1201
 16629  0029D4                     l17024:
 16630  0029D4  0100               	movlb	0	; () banked
 16631  0029D6  51B6               	movf	writeRegisterExtended@timeout& (0+255),w,b
 16632  0029D8  6FBA               	movwf	??_writeRegisterExtended& (0+255),b
 16633  0029DA  51B7               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 16634  0029DC  6FBB               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 16635  0029DE  6BBC               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 16636  0029E0  6BBD               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 16637  0029E2  51BA               	movf	??_writeRegisterExtended& (0+255),w,b
 16638  0029E4  0101               	movlb	1	; () banked
 16639  0029E6  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 16640  0029E8  0100               	movlb	0	; () banked
 16641  0029EA  51BB               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 16642  0029EC  0101               	movlb	1	; () banked
 16643  0029EE  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16644  0029F0  0100               	movlb	0	; () banked
 16645  0029F2  51BC               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 16646  0029F4  0101               	movlb	1	; () banked
 16647  0029F6  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16648  0029F8  0100               	movlb	0	; () banked
 16649  0029FA  51BD               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 16650  0029FC  0101               	movlb	1	; () banked
 16651  0029FE  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16652  002A00  E3AB               	bnc	l1198
 16653  002A02                     l17026:
 16654                           
 16655                           ;main.c: 2724: }
 16656                           ;main.c: 2726: }
 16657                           ;main.c: 2728: }
 16658                           ;main.c: 2730: }
 16659                           ;main.c: 2732: return 0;
 16660  002A02  0E00               	movlw	0
 16661  002A04                     l1201:
 16662  002A04  0012               	return	
 16663  002A06                     __end_of_writeRegisterExtended:
 16664                           	opt stack 0
 16665                           tblptru	equ	0xFF8
 16666                           tblptrh	equ	0xFF7
 16667                           tblptrl	equ	0xFF6
 16668                           tablat	equ	0xFF5
 16669                           prodh	equ	0xFF4
 16670                           prodl	equ	0xFF3
 16671                           intcon	equ	0xFF2
 16672                           indf0	equ	0xFEF
 16673                           postinc0	equ	0xFEE
 16674                           fsr0h	equ	0xFEA
 16675                           fsr0l	equ	0xFE9
 16676                           wreg	equ	0xFE8
 16677                           indf1	equ	0xFE7
 16678                           postinc1	equ	0xFE6
 16679                           postdec1	equ	0xFE5
 16680                           fsr1h	equ	0xFE2
 16681                           fsr1l	equ	0xFE1
 16682                           indf2	equ	0xFDF
 16683                           postinc2	equ	0xFDE
 16684                           postdec2	equ	0xFDD
 16685                           plusw2	equ	0xFDB
 16686                           fsr2h	equ	0xFDA
 16687                           fsr2l	equ	0xFD9
 16688                           status	equ	0xFD8
 16689                           
 16690 ;; *************** function _printBinary *****************
 16691 ;; Defined at:
 16692 ;;		line 2776 in file "main.c"
 16693 ;; Parameters:    Size  Location     Type
 16694 ;;  value           1    wreg     unsigned char 
 16695 ;; Auto vars:     Size  Location     Type
 16696 ;;  value           1    0[BANK0 ] unsigned char 
 16697 ;;  i               2    1[BANK0 ] int 
 16698 ;; Return value:  Size  Location     Type
 16699 ;;		None               void
 16700 ;; Registers used:
 16701 ;;		wreg, status,2, status,0, cstack
 16702 ;; Tracked objects:
 16703 ;;		On entry : F/2
 16704 ;;		On exit  : F/0
 16705 ;;		Unchanged: 0/0
 16706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16707 ;;      Params:         0       0       0       0       0       0       0
 16708 ;;      Locals:         0       3       0       0       0       0       0
 16709 ;;      Temps:          2       0       0       0       0       0       0
 16710 ;;      Totals:         2       3       0       0       0       0       0
 16711 ;;Total ram usage:        5 bytes
 16712 ;; Hardware stack levels used:    1
 16713 ;; Hardware stack levels required when called:    4
 16714 ;; This function calls:
 16715 ;;		_WriteUSART
 16716 ;; This function is called by:
 16717 ;;		_doModeVerbose
 16718 ;; This function uses a non-reentrant model
 16719 ;;
 16720                           
 16721                           	psect	text24
 16722  00129E                     __ptext24:
 16723                           	opt stack 0
 16724  00129E                     _printBinary:
 16725                           	opt stack 24
 16726                           
 16727                           ;incstack = 0
 16728                           ;incstack = 0
 16729                           ;printBinary@value stored from wreg
 16730  00129E  CFE8 F060          	movff	wreg,printBinary@value
 16731                           
 16732                           ; BSR set to: 2
 16733                           ;main.c: 2777: int i;
 16734                           ;main.c: 2779: for (i = 7; i >= 0; i--) {
 16735  0012A2  0100               	movlb	0	; () banked
 16736  0012A4  6B62               	clrf	(printBinary@i+1)& (0+255),b
 16737  0012A6  0E07               	movlw	7
 16738  0012A8  6F61               	movwf	printBinary@i& (0+255),b
 16739  0012AA                     l16974:
 16740                           
 16741                           ; BSR set to: 0
 16742                           ;main.c: 2780: if (value & (1 << i)) {
 16743  0012AA  C061  F020         	movff	printBinary@i,??_printBinary
 16744  0012AE  0E01               	movlw	1
 16745  0012B0  6E21               	movwf	(??_printBinary+1)& (0+255),c
 16746  0012B2  2A20               	incf	??_printBinary,f,c
 16747  0012B4  D002               	goto	u21934
 16748  0012B6                     u21935:
 16749  0012B6  90D8               	bcf	status,0,c
 16750  0012B8  3621               	rlcf	??_printBinary+1,f,c
 16751  0012BA                     u21934:
 16752  0012BA  2E20               	decfsz	??_printBinary,f,c
 16753  0012BC  D7FC               	goto	u21935
 16754  0012BE  5021               	movf	??_printBinary+1,w,c
 16755  0012C0  1560               	andwf	printBinary@value& (0+255),w,b
 16756  0012C2  E006               	bz	l1221
 16757  0012C4                     l1217:
 16758  0012C4  A2AC               	btfss	4012,1,c	;volatile
 16759  0012C6  D7FE               	goto	l1217
 16760                           
 16761                           ;main.c: 2782: WriteUSART('1');
 16762  0012C8  0E31               	movlw	49
 16763  0012CA  ECE7  F006         	call	_WriteUSART
 16764                           
 16765                           ;main.c: 2783: } else {
 16766  0012CE  D005               	goto	l16982
 16767  0012D0                     l1221:
 16768  0012D0  A2AC               	btfss	4012,1,c	;volatile
 16769  0012D2  D7FE               	goto	l1221
 16770                           
 16771                           ;main.c: 2785: WriteUSART('0');
 16772  0012D4  0E30               	movlw	48
 16773  0012D6  ECE7  F006         	call	_WriteUSART
 16774  0012DA                     l16982:
 16775  0012DA  0100               	movlb	0	; () banked
 16776  0012DC  0761               	decf	printBinary@i& (0+255),f,b
 16777  0012DE  A0D8               	btfss	status,0,c
 16778  0012E0  0762               	decf	(printBinary@i+1)& (0+255),f,b
 16779                           
 16780                           ; BSR set to: 0
 16781  0012E2  BF62               	btfsc	(printBinary@i+1)& (0+255),7,b
 16782                           
 16783                           ; BSR set to: 0
 16784  0012E4  0012               	return	
 16785  0012E6  D7E1               	goto	l16974
 16786  0012E8                     __end_of_printBinary:
 16787                           	opt stack 0
 16788                           tblptru	equ	0xFF8
 16789                           tblptrh	equ	0xFF7
 16790                           tblptrl	equ	0xFF6
 16791                           tablat	equ	0xFF5
 16792                           prodh	equ	0xFF4
 16793                           prodl	equ	0xFF3
 16794                           intcon	equ	0xFF2
 16795                           indf0	equ	0xFEF
 16796                           postinc0	equ	0xFEE
 16797                           fsr0h	equ	0xFEA
 16798                           fsr0l	equ	0xFE9
 16799                           wreg	equ	0xFE8
 16800                           indf1	equ	0xFE7
 16801                           postinc1	equ	0xFE6
 16802                           postdec1	equ	0xFE5
 16803                           fsr1h	equ	0xFE2
 16804                           fsr1l	equ	0xFE1
 16805                           indf2	equ	0xFDF
 16806                           postinc2	equ	0xFDE
 16807                           postdec2	equ	0xFDD
 16808                           plusw2	equ	0xFDB
 16809                           fsr2h	equ	0xFDA
 16810                           fsr2l	equ	0xFD9
 16811                           status	equ	0xFD8
 16812                           
 16813 ;; *************** function _readRegisterExtended *****************
 16814 ;; Defined at:
 16815 ;;		line 2585 in file "main.c"
 16816 ;; Parameters:    Size  Location     Type
 16817 ;;  nodeid          1    wreg     unsigned char 
 16818 ;;  page            2   83[BANK0 ] unsigned short 
 16819 ;;  reg             1   85[BANK0 ] unsigned char 
 16820 ;;  timeout         2   86[BANK0 ] unsigned short 
 16821 ;;  value           2   88[BANK0 ] PTR unsigned char 
 16822 ;;		 -> doModeVerbose@value_1286(1), doModeVerbose@value(1), 
 16823 ;; Auto vars:     Size  Location     Type
 16824 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16825 ;; Return value:  Size  Location     Type
 16826 ;;                  1    wreg      enum E15660
 16827 ;; Registers used:
 16828 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16829 ;; Tracked objects:
 16830 ;;		On entry : F/2
 16831 ;;		On exit  : E/0
 16832 ;;		Unchanged: 0/0
 16833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16834 ;;      Params:         0       7       0       0       0       0       0
 16835 ;;      Locals:         0       1       0       0       0       0       0
 16836 ;;      Temps:          0       4       0       0       0       0       0
 16837 ;;      Totals:         0      12       0       0       0       0       0
 16838 ;;Total ram usage:       12 bytes
 16839 ;; Hardware stack levels used:    1
 16840 ;; Hardware stack levels required when called:    7
 16841 ;; This function calls:
 16842 ;;		_checkCANBusState
 16843 ;;		_sendVSCPFrame
 16844 ;;		_getVSCPFrame
 16845 ;; This function is called by:
 16846 ;;		_doModeVerbose
 16847 ;; This function uses a non-reentrant model
 16848 ;;
 16849                           
 16850                           	psect	text25
 16851  002714                     __ptext25:
 16852                           	opt stack 0
 16853  002714                     _readRegisterExtended:
 16854                           	opt stack 21
 16855                           
 16856                           ; BSR set to: 0
 16857                           ;incstack = 0
 16858                           ;incstack = 0
 16859                           ;readRegisterExtended@nodeid stored from wreg
 16860  002714  CFE8 F0BE          	movff	wreg,readRegisterExtended@nodeid
 16861                           
 16862                           ; BSR set to: 2
 16863                           ;main.c: 2586: vscpData[ 0 ] = nodeid;
 16864  002718  C0BE  F1EA         	movff	readRegisterExtended@nodeid,_vscpData
 16865                           
 16866                           ; BSR set to: 2
 16867                           ;main.c: 2587: vscpData[ 1 ] = page >> 8;
 16868  00271C  0100               	movlb	0	; () banked
 16869  00271E  51B4               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16870  002720  0101               	movlb	1	; () banked
 16871  002722  6FEB               	movwf	(_vscpData+1)& (0+255),b
 16872                           
 16873                           ; BSR set to: 1
 16874                           ;main.c: 2588: vscpData[ 2 ] = page & 0xff;
 16875  002724  C0B3  F1EC         	movff	readRegisterExtended@page,_vscpData+2
 16876                           
 16877                           ; BSR set to: 1
 16878                           ;main.c: 2589: vscpData[ 3 ] = reg;
 16879  002728  C0B5  F1ED         	movff	readRegisterExtended@reg,_vscpData+3
 16880                           
 16881                           ; BSR set to: 1
 16882                           ;main.c: 2590: vscpData[ 4 ] = 1;
 16883  00272C  0E01               	movlw	1
 16884  00272E  6FEE               	movwf	(_vscpData+4)& (0+255),b
 16885                           
 16886                           ; BSR set to: 1
 16887                           ;main.c: 2592: if ( sendVSCPFrame(0,
 16888                           ;main.c: 2593: 37,
 16889                           ;main.c: 2594: 0,
 16890                           ;main.c: 2595: 0,
 16891                           ;main.c: 2596: 5,
 16892                           ;main.c: 2597: vscpData ) ) {
 16893  002730  0100               	movlb	0	; () banked
 16894  002732  6B94               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16895  002734  6B93               	clrf	?_sendVSCPFrame& (0+255),b
 16896  002736  0E25               	movlw	37
 16897  002738  6F95               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16898  00273A  6B96               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16899  00273C  6B97               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16900  00273E  0E05               	movlw	5
 16901  002740  6F98               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16902  002742  0E01               	movlw	high _vscpData
 16903  002744  6F9A               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16904  002746  0EEA               	movlw	low _vscpData
 16905  002748  6F99               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16906  00274A  EC85  F00F         	call	_sendVSCPFrame	;wreg free
 16907  00274E  0900               	iorlw	0
 16908  002750  E05A               	bz	l16622
 16909                           
 16910                           ;main.c: 2599: timekeeper = 0;
 16911  002752  0101               	movlb	1	; () banked
 16912  002754  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 16913  002756  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16914  002758  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16915  00275A  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16916                           
 16917                           ;main.c: 2600: while (timekeeper < timeout) {
 16918  00275C  D03D               	goto	l16620
 16919  00275E                     l1180:
 16920                           
 16921                           ; BSR set to: 1
 16922  00275E  0004               	clrwdt		;# 
 16923                           
 16924                           ;main.c: 2603: checkCANBusState();
 16925  002760  EC27  F007         	call	_checkCANBusState	;wreg free
 16926                           
 16927                           ;main.c: 2605: if ( getVSCPFrame( &vscpClass,
 16928                           ;main.c: 2606: &vscpType,
 16929                           ;main.c: 2607: &vscpNodeId,
 16930                           ;main.c: 2608: &vscpPriority,
 16931                           ;main.c: 2609: &vscpSize,
 16932                           ;main.c: 2610: vscpData ) ) {
 16933  002764  0E41               	movlw	low _vscpType
 16934  002766  0100               	movlb	0	; () banked
 16935  002768  6F6E               	movwf	?_getVSCPFrame& (0+255),b
 16936  00276A  0E3E               	movlw	low _vscpNodeId
 16937  00276C  6F6F               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16938  00276E  0E3F               	movlw	low _vscpPriority
 16939  002770  6F70               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16940  002772  0E40               	movlw	low _vscpSize
 16941  002774  6F71               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16942  002776  0E01               	movlw	high _vscpData
 16943  002778  6F73               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16944  00277A  0EEA               	movlw	low _vscpData
 16945  00277C  6F72               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16946  00277E  0E3A               	movlw	_vscpClass& (0+255)
 16947  002780  EC7A  F00C         	call	_getVSCPFrame
 16948  002784  0900               	iorlw	0
 16949  002786  E028               	bz	l16620
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;main.c: 2611: if ( ( nodeid == vscpNodeId ) &&
 16953                           ;main.c: 2612: ( 0 == vscpClass ) &&
 16954                           ;main.c: 2613: ( 39 == vscpType ) &&
 16955                           ;main.c: 2614: ( 5 == vscpSize ) &&
 16956                           ;main.c: 2615: ( 0 == vscpData[ 0 ] ) &&
 16957                           ;main.c: 2616: ( (page >> 8) == vscpData[ 1 ] ) &&
 16958                           ;main.c: 2617: ( (page & 0xff) == vscpData[ 2 ] ) &&
 16959                           ;main.c: 2618: ( reg == vscpData[ 3 ] ) ) {
 16960  002788  503E               	movf	_vscpNodeId,w,c
 16961  00278A  63BE               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 16962  00278C  D025               	goto	l16620
 16963                           
 16964                           ; BSR set to: 0
 16965  00278E  503B               	movf	_vscpClass+1,w,c
 16966  002790  103A               	iorwf	_vscpClass,w,c
 16967  002792  E122               	bnz	l16620
 16968                           
 16969                           ; BSR set to: 0
 16970  002794  5041               	movf	_vscpType,w,c
 16971  002796  0A27               	xorlw	39
 16972  002798  E11F               	bnz	l16620
 16973                           
 16974                           ; BSR set to: 0
 16975  00279A  5040               	movf	_vscpSize,w,c
 16976  00279C  0A05               	xorlw	5
 16977  00279E  E11C               	bnz	l16620
 16978                           
 16979                           ; BSR set to: 0
 16980  0027A0  0101               	movlb	1	; () banked
 16981  0027A2  67EA               	tstfsz	_vscpData& (0+255),b
 16982  0027A4  D019               	goto	l16620
 16983                           
 16984                           ; BSR set to: 1
 16985  0027A6  0100               	movlb	0	; () banked
 16986  0027A8  51B4               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16987  0027AA  0101               	movlb	1	; () banked
 16988  0027AC  19EB               	xorwf	(_vscpData+1)& (0+255),w,b
 16989  0027AE  E114               	bnz	l16620
 16990                           
 16991                           ; BSR set to: 1
 16992  0027B0  0100               	movlb	0	; () banked
 16993  0027B2  51B3               	movf	readRegisterExtended@page& (0+255),w,b
 16994  0027B4  EE21  F0EC         	lfsr	2,_vscpData+2
 16995  0027B8  62DF               	cpfseq	indf2,c
 16996  0027BA  D00E               	goto	l16620
 16997                           
 16998                           ; BSR set to: 1
 16999  0027BC  51B5               	movf	readRegisterExtended@reg& (0+255),w,b
 17000  0027BE  0101               	movlb	1	; () banked
 17001  0027C0  EE21  F0ED         	lfsr	2,_vscpData+3
 17002  0027C4  62DF               	cpfseq	indf2,c
 17003  0027C6  D008               	goto	l16620
 17004                           
 17005                           ; BSR set to: 1
 17006                           ;main.c: 2619: *value = vscpData[ 4 ];
 17007  0027C8  C0B8  FFD9         	movff	readRegisterExtended@value,fsr2l
 17008  0027CC  C0B9  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 17009  0027D0  C1EE  FFDF         	movff	_vscpData+4,indf2
 17010                           
 17011                           ; BSR set to: 1
 17012                           ;main.c: 2620: return 1;
 17013  0027D4  0E01               	movlw	1
 17014  0027D6  D018               	goto	l1183
 17015  0027D8                     l16620:
 17016  0027D8  0100               	movlb	0	; () banked
 17017  0027DA  51B6               	movf	readRegisterExtended@timeout& (0+255),w,b
 17018  0027DC  6FBA               	movwf	??_readRegisterExtended& (0+255),b
 17019  0027DE  51B7               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 17020  0027E0  6FBB               	movwf	(??_readRegisterExtended+1)& (0+255),b
 17021  0027E2  6BBC               	clrf	(??_readRegisterExtended+2)& (0+255),b
 17022  0027E4  6BBD               	clrf	(??_readRegisterExtended+3)& (0+255),b
 17023  0027E6  51BA               	movf	??_readRegisterExtended& (0+255),w,b
 17024  0027E8  0101               	movlb	1	; () banked
 17025  0027EA  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 17026  0027EC  0100               	movlb	0	; () banked
 17027  0027EE  51BB               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 17028  0027F0  0101               	movlb	1	; () banked
 17029  0027F2  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17030  0027F4  0100               	movlb	0	; () banked
 17031  0027F6  51BC               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 17032  0027F8  0101               	movlb	1	; () banked
 17033  0027FA  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17034  0027FC  0100               	movlb	0	; () banked
 17035  0027FE  51BD               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 17036  002800  0101               	movlb	1	; () banked
 17037  002802  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17038  002804  E3AC               	bnc	l1180
 17039  002806                     l16622:
 17040                           
 17041                           ;main.c: 2621: }
 17042                           ;main.c: 2622: }
 17043                           ;main.c: 2623: }
 17044                           ;main.c: 2624: }
 17045                           ;main.c: 2626: return 0;
 17046  002806  0E00               	movlw	0
 17047  002808                     l1183:
 17048  002808  0012               	return	
 17049  00280A                     __end_of_readRegisterExtended:
 17050                           	opt stack 0
 17051                           tblptru	equ	0xFF8
 17052                           tblptrh	equ	0xFF7
 17053                           tblptrl	equ	0xFF6
 17054                           tablat	equ	0xFF5
 17055                           prodh	equ	0xFF4
 17056                           prodl	equ	0xFF3
 17057                           intcon	equ	0xFF2
 17058                           indf0	equ	0xFEF
 17059                           postinc0	equ	0xFEE
 17060                           fsr0h	equ	0xFEA
 17061                           fsr0l	equ	0xFE9
 17062                           wreg	equ	0xFE8
 17063                           indf1	equ	0xFE7
 17064                           postinc1	equ	0xFE6
 17065                           postdec1	equ	0xFE5
 17066                           fsr1h	equ	0xFE2
 17067                           fsr1l	equ	0xFE1
 17068                           indf2	equ	0xFDF
 17069                           postinc2	equ	0xFDE
 17070                           postdec2	equ	0xFDD
 17071                           plusw2	equ	0xFDB
 17072                           fsr2h	equ	0xFDA
 17073                           fsr2l	equ	0xFD9
 17074                           status	equ	0xFD8
 17075                           
 17076 ;; *************** function _strcpy *****************
 17077 ;; Defined at:
 17078 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 17079 ;; Parameters:    Size  Location     Type
 17080 ;;  to              2   30[COMRAM] PTR unsigned char 
 17081 ;;		 -> cmdbuf(80), 
 17082 ;;  from            2   32[COMRAM] PTR const unsigned char 
 17083 ;;		 -> cmdbuf(80), 
 17084 ;; Auto vars:     Size  Location     Type
 17085 ;;  cp              2    0[BANK0 ] PTR unsigned char 
 17086 ;;		 -> cmdbuf(80), 
 17087 ;; Return value:  Size  Location     Type
 17088 ;;                  2   30[COMRAM] PTR unsigned char 
 17089 ;; Registers used:
 17090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17091 ;; Tracked objects:
 17092 ;;		On entry : F/0
 17093 ;;		On exit  : F/0
 17094 ;;		Unchanged: 0/0
 17095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17096 ;;      Params:         4       0       0       0       0       0       0
 17097 ;;      Locals:         0       2       0       0       0       0       0
 17098 ;;      Temps:          0       0       0       0       0       0       0
 17099 ;;      Totals:         4       2       0       0       0       0       0
 17100 ;;Total ram usage:        6 bytes
 17101 ;; Hardware stack levels used:    1
 17102 ;; Hardware stack levels required when called:    3
 17103 ;; This function calls:
 17104 ;;		Nothing
 17105 ;; This function is called by:
 17106 ;;		_doModeVerbose
 17107 ;; This function uses a non-reentrant model
 17108 ;;
 17109                           
 17110                           	psect	text26
 17111  000EE2                     __ptext26:
 17112                           	opt stack 0
 17113  000EE2                     _strcpy:
 17114                           	opt stack 25
 17115                           
 17116                           ; BSR set to: 0
 17117                           
 17118                           ;incstack = 0
 17119                           ;incstack = 0
 17120  000EE2  C01F  F060         	movff	strcpy@to,strcpy@cp
 17121  000EE6  C020  F061         	movff	strcpy@to+1,strcpy@cp+1
 17122  000EEA  D004               	goto	l16572
 17123  000EEC                     l16570:
 17124                           
 17125                           ; BSR set to: 0
 17126  000EEC  4B60               	infsnz	strcpy@cp& (0+255),f,b
 17127  000EEE  2B61               	incf	(strcpy@cp+1)& (0+255),f,b
 17128  000EF0  4A21               	infsnz	strcpy@from,f,c
 17129  000EF2  2A22               	incf	strcpy@from+1,f,c
 17130  000EF4                     l16572:
 17131                           
 17132                           ; BSR set to: 0
 17133  000EF4  C021  FFD9         	movff	strcpy@from,fsr2l
 17134  000EF8  C022  FFDA         	movff	strcpy@from+1,fsr2h
 17135  000EFC  C060  FFE1         	movff	strcpy@cp,fsr1l
 17136  000F00  C061  FFE2         	movff	strcpy@cp+1,fsr1h
 17137  000F04  CFDF FFE7          	movff	indf2,indf1
 17138  000F08  50E7               	movf	indf1,w,c
 17139  000F0A  B4D8               	btfsc	status,2,c
 17140                           
 17141                           ; BSR set to: 0
 17142  000F0C  0012               	return	
 17143  000F0E  D7EE               	goto	l16570
 17144  000F10                     __end_of_strcpy:
 17145                           	opt stack 0
 17146                           tblptru	equ	0xFF8
 17147                           tblptrh	equ	0xFF7
 17148                           tblptrl	equ	0xFF6
 17149                           tablat	equ	0xFF5
 17150                           prodh	equ	0xFF4
 17151                           prodl	equ	0xFF3
 17152                           intcon	equ	0xFF2
 17153                           indf0	equ	0xFEF
 17154                           postinc0	equ	0xFEE
 17155                           fsr0h	equ	0xFEA
 17156                           fsr0l	equ	0xFE9
 17157                           wreg	equ	0xFE8
 17158                           indf1	equ	0xFE7
 17159                           postinc1	equ	0xFE6
 17160                           postdec1	equ	0xFE5
 17161                           fsr1h	equ	0xFE2
 17162                           fsr1l	equ	0xFE1
 17163                           indf2	equ	0xFDF
 17164                           postinc2	equ	0xFDE
 17165                           postdec2	equ	0xFDD
 17166                           plusw2	equ	0xFDB
 17167                           fsr2h	equ	0xFDA
 17168                           fsr2l	equ	0xFD9
 17169                           status	equ	0xFD8
 17170                           
 17171 ;; *************** function _findNodes *****************
 17172 ;; Defined at:
 17173 ;;		line 2927 in file "main.c"
 17174 ;; Parameters:    Size  Location     Type
 17175 ;;		None
 17176 ;; Auto vars:     Size  Location     Type
 17177 ;;  i               1  103[BANK0 ] unsigned char 
 17178 ;;  bDot            1  102[BANK0 ] enum E15660
 17179 ;;  value           1  101[BANK0 ] unsigned char 
 17180 ;;  nFound          1  100[BANK0 ] unsigned char 
 17181 ;; Return value:  Size  Location     Type
 17182 ;;		None               void
 17183 ;; Registers used:
 17184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 17185 ;; Tracked objects:
 17186 ;;		On entry : F/0
 17187 ;;		On exit  : 0/0
 17188 ;;		Unchanged: 0/0
 17189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17190 ;;      Params:         0       0       0       0       0       0       0
 17191 ;;      Locals:         0       6       0       0       0       0       0
 17192 ;;      Temps:          0       0       0       0       0       0       0
 17193 ;;      Totals:         0       6       0       0       0       0       0
 17194 ;;Total ram usage:        6 bytes
 17195 ;; Hardware stack levels used:    1
 17196 ;; Hardware stack levels required when called:    9
 17197 ;; This function calls:
 17198 ;;		_putsUSART
 17199 ;;		_WriteUSART
 17200 ;;		_printNodeFirmwareVersion
 17201 ;;		_printGUID
 17202 ;;		_printMDF
 17203 ;;		_itoa
 17204 ;;		_readRegister
 17205 ;; This function is called by:
 17206 ;;		_doModeVerbose
 17207 ;; This function uses a non-reentrant model
 17208 ;;
 17209                           
 17210                           	psect	text27
 17211  002E6C                     __ptext27:
 17212                           	opt stack 0
 17213  002E6C                     _findNodes:
 17214                           	opt stack 19
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;main.c: 2928: uint8_t nFound = 0;
 17218                           
 17219                           ; BSR set to: 0
 17220                           ;incstack = 0
 17221                           ;incstack = 0
 17222  002E6C  6BC4               	clrf	findNodes@nFound& (0+255),b
 17223                           
 17224                           ;main.c: 2929: uint8_t i;
 17225                           ;main.c: 2930: uint8_t value;
 17226                           ;main.c: 2931: BOOL bDot = 0;
 17227  002E6E  6BC6               	clrf	findNodes@bDot& (0+255),b
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;main.c: 2933: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 17231  002E70  506F               	movf	3951,w,c	;volatile
 17232  002E72  0BE0               	andlw	224
 17233  002E74  E007               	bz	l16514
 17234                           
 17235                           ; BSR set to: 0
 17236                           ;main.c: 2934: putsUSART( "-ERROR - Command only works if interface is open.\r\n" );
 17237  002E76  0E70               	movlw	high STR_50
 17238  002E78  6E21               	movwf	?_putsUSART+1,c
 17239  002E7A  0E5D               	movlw	low STR_50
 17240  002E7C  6E20               	movwf	?_putsUSART,c
 17241  002E7E  EC74  F009         	call	_putsUSART	;wreg free
 17242  002E82  D08B               	goto	l1283
 17243  002E84                     l16514:
 17244                           
 17245                           ; BSR set to: 0
 17246                           ;main.c: 2936: }
 17247                           ;main.c: 2938: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 17248  002E84  0E6D               	movlw	high STR_279
 17249  002E86  6E21               	movwf	?_putsUSART+1,c
 17250  002E88  0E2C               	movlw	low STR_279
 17251  002E8A  6E20               	movwf	?_putsUSART,c
 17252  002E8C  EC74  F009         	call	_putsUSART	;wreg free
 17253                           
 17254                           ;main.c: 2940: for (i = 1; i != 0; i++) {
 17255  002E90  0E01               	movlw	1
 17256  002E92  0100               	movlb	0	; () banked
 17257  002E94  6FC7               	movwf	findNodes@i& (0+255),b
 17258  002E96                     l1284:
 17259                           
 17260                           ; BSR set to: 0
 17261  002E96  0004               	clrwdt		;# 
 17262                           
 17263                           ;main.c: 2944: if (readRegister( i,
 17264                           ;main.c: 2945: 0xE0,
 17265                           ;main.c: 2946: rwtimeout,
 17266                           ;main.c: 2947: &value ) ) {
 17267  002E98  0EE0               	movlw	224
 17268  002E9A  0100               	movlb	0	; () banked
 17269  002E9C  6FB3               	movwf	?_readRegister& (0+255),b
 17270  002E9E  C033  F0B4         	movff	_rwtimeout,?_readRegister+1
 17271  002EA2  6BB5               	clrf	(?_readRegister+2)& (0+255),b
 17272  002EA4  0EC5               	movlw	low findNodes@value
 17273  002EA6  6FB6               	movwf	(?_readRegister+3)& (0+255),b
 17274  002EA8  51C7               	movf	findNodes@i& (0+255),w,b
 17275  002EAA  EC9F  F010         	call	_readRegister
 17276  002EAE  0900               	iorlw	0
 17277  002EB0  E049               	bz	l16550
 17278                           
 17279                           ;main.c: 2948: if ( bDot ) {
 17280  002EB2  0100               	movlb	0	; () banked
 17281  002EB4  51C6               	movf	findNodes@bDot& (0+255),w,b
 17282  002EB6  E006               	bz	l1287
 17283                           
 17284                           ; BSR set to: 0
 17285                           ;main.c: 2949: putsUSART((char *) "\r\n");
 17286  002EB8  0E70               	movlw	high (STR_237+50)
 17287  002EBA  6E21               	movwf	?_putsUSART+1,c
 17288  002EBC  0E5A               	movlw	low (STR_237+50)
 17289  002EBE  6E20               	movwf	?_putsUSART,c
 17290  002EC0  EC74  F009         	call	_putsUSART	;wreg free
 17291  002EC4                     l1287:
 17292                           
 17293                           ;main.c: 2950: }
 17294                           ;main.c: 2951: putsUSART((char *) "Node found with node id = ");
 17295  002EC4  0E77               	movlw	high STR_281
 17296  002EC6  6E21               	movwf	?_putsUSART+1,c
 17297  002EC8  0EBE               	movlw	low STR_281
 17298  002ECA  6E20               	movwf	?_putsUSART,c
 17299  002ECC  EC74  F009         	call	_putsUSART	;wreg free
 17300                           
 17301                           ;main.c: 2952: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 17302  002ED0  6629               	tstfsz	_bHex,c
 17303  002ED2  D004               	goto	l16532
 17304  002ED4  0100               	movlb	0	; () banked
 17305  002ED6  6BC3               	clrf	(_findNodes$1615+1)& (0+255),b
 17306  002ED8  0E0A               	movlw	10
 17307  002EDA  D003               	goto	L17
 17308  002EDC                     l16532:
 17309  002EDC  0100               	movlb	0	; () banked
 17310  002EDE  6BC3               	clrf	(_findNodes$1615+1)& (0+255),b
 17311  002EE0  0E10               	movlw	16
 17312  002EE2                     L17:
 17313  002EE2  6FC2               	movwf	_findNodes$1615& (0+255),b
 17314                           
 17315                           ; BSR set to: 0
 17316  002EE4  0E01               	movlw	high _wrkbuf
 17317  002EE6  0100               	movlb	0	; () banked
 17318  002EE8  6F6D               	movwf	(?_itoa+1)& (0+255),b
 17319  002EEA  0E82               	movlw	low _wrkbuf
 17320  002EEC  6F6C               	movwf	?_itoa& (0+255),b
 17321  002EEE  C03E  F06E         	movff	_vscpNodeId,?_itoa+2
 17322  002EF2  6B6F               	clrf	(?_itoa+3)& (0+255),b
 17323  002EF4  C0C2  F070         	movff	_findNodes$1615,?_itoa+4
 17324  002EF8  C0C3  F071         	movff	_findNodes$1615+1,?_itoa+5
 17325  002EFC  ECD3  F007         	call	_itoa	;wreg free
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;main.c: 2953: putsUSART(wrkbuf);
 17329  002F00  0101               	movlb	1	; () banked
 17330  002F02  0E01               	movlw	high _wrkbuf
 17331  002F04  6E21               	movwf	?_putsUSART+1,c
 17332  002F06  0E82               	movlw	low _wrkbuf
 17333  002F08  6E20               	movwf	?_putsUSART,c
 17334  002F0A  EC74  F009         	call	_putsUSART	;wreg free
 17335                           
 17336                           ;main.c: 2954: putsUSART((char *) "\r\n");
 17337  002F0E  0E70               	movlw	high (STR_237+50)
 17338  002F10  6E21               	movwf	?_putsUSART+1,c
 17339  002F12  0E5A               	movlw	low (STR_237+50)
 17340  002F14  6E20               	movwf	?_putsUSART,c
 17341  002F16  EC74  F009         	call	_putsUSART	;wreg free
 17342                           
 17343                           ;main.c: 2955: printNodeFirmwareVersion(i);
 17344  002F1A  0100               	movlb	0	; () banked
 17345  002F1C  51C7               	movf	findNodes@i& (0+255),w,b
 17346  002F1E  EC03  F011         	call	_printNodeFirmwareVersion
 17347                           
 17348                           ;main.c: 2956: printGUID(i);
 17349  002F22  0100               	movlb	0	; () banked
 17350  002F24  51C7               	movf	findNodes@i& (0+255),w,b
 17351  002F26  EC05  F014         	call	_printGUID
 17352                           
 17353                           ;main.c: 2957: printMDF(i);
 17354  002F2A  0100               	movlb	0	; () banked
 17355  002F2C  51C7               	movf	findNodes@i& (0+255),w,b
 17356  002F2E  EC50  F00D         	call	_printMDF
 17357                           
 17358                           ;main.c: 2958: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 17359  002F32  0E6D               	movlw	high STR_279
 17360  002F34  6E21               	movwf	?_putsUSART+1,c
 17361  002F36  0E2C               	movlw	low STR_279
 17362  002F38  6E20               	movwf	?_putsUSART,c
 17363  002F3A  EC74  F009         	call	_putsUSART	;wreg free
 17364                           
 17365                           ;main.c: 2959: nFound++;
 17366  002F3E  0100               	movlb	0	; () banked
 17367  002F40  2BC4               	incf	findNodes@nFound& (0+255),f,b
 17368                           
 17369                           ;main.c: 2960: }
 17370  002F42  D007               	goto	l16556
 17371  002F44                     l16550:
 17372                           
 17373                           ;main.c: 2961: else {
 17374                           ;main.c: 2962: bDot = 1;
 17375  002F44  0E01               	movlw	1
 17376  002F46  0100               	movlb	0	; () banked
 17377  002F48  6FC6               	movwf	findNodes@bDot& (0+255),b
 17378                           
 17379                           ; BSR set to: 0
 17380                           ;main.c: 2963: WriteUSART('.');
 17381  002F4A  0E2E               	movlw	46
 17382  002F4C  ECE7  F006         	call	_WriteUSART
 17383                           
 17384                           ;main.c: 2964: (!TXSTAbits.TRMT);
 17385  002F50  50AC               	movf	4012,w,c	;volatile
 17386  002F52                     l16556:
 17387  002F52  0100               	movlb	0	; () banked
 17388  002F54  2BC7               	incf	findNodes@i& (0+255),f,b
 17389                           
 17390                           ; BSR set to: 0
 17391  002F56  67C7               	tstfsz	findNodes@i& (0+255),b
 17392  002F58  D79E               	goto	l1284
 17393                           
 17394                           ; BSR set to: 0
 17395                           ;main.c: 2965: }
 17396                           ;main.c: 2967: }
 17397                           ;main.c: 2969: putsUSART((char *) "\r\n");
 17398  002F5A  0E70               	movlw	high (STR_237+50)
 17399  002F5C  6E21               	movwf	?_putsUSART+1,c
 17400  002F5E  0E5A               	movlw	low (STR_237+50)
 17401  002F60  6E20               	movwf	?_putsUSART,c
 17402  002F62  EC74  F009         	call	_putsUSART	;wreg free
 17403                           
 17404                           ;main.c: 2970: itoa(wrkbuf, nFound, 10);
 17405  002F66  0E01               	movlw	high _wrkbuf
 17406  002F68  0100               	movlb	0	; () banked
 17407  002F6A  6F6D               	movwf	(?_itoa+1)& (0+255),b
 17408  002F6C  0E82               	movlw	low _wrkbuf
 17409  002F6E  6F6C               	movwf	?_itoa& (0+255),b
 17410  002F70  C0C4  F06E         	movff	findNodes@nFound,?_itoa+2
 17411  002F74  6B6F               	clrf	(?_itoa+3)& (0+255),b
 17412  002F76  6B71               	clrf	(?_itoa+5)& (0+255),b
 17413  002F78  0E0A               	movlw	10
 17414  002F7A  6F70               	movwf	(?_itoa+4)& (0+255),b
 17415  002F7C  ECD3  F007         	call	_itoa	;wreg free
 17416                           
 17417                           ; BSR set to: 0
 17418                           ;main.c: 2971: putsUSART(wrkbuf);
 17419  002F80  0101               	movlb	1	; () banked
 17420  002F82  0E01               	movlw	high _wrkbuf
 17421  002F84  6E21               	movwf	?_putsUSART+1,c
 17422  002F86  0E82               	movlw	low _wrkbuf
 17423  002F88  6E20               	movwf	?_putsUSART,c
 17424  002F8A  EC74  F009         	call	_putsUSART	;wreg free
 17425                           
 17426                           ;main.c: 2972: putsUSART((char *) " node(s) found\r\n");
 17427  002F8E  0E7A               	movlw	high STR_285
 17428  002F90  6E21               	movwf	?_putsUSART+1,c
 17429  002F92  0ED3               	movlw	low STR_285
 17430  002F94  6E20               	movwf	?_putsUSART,c
 17431  002F96  EC74  F009         	call	_putsUSART	;wreg free
 17432  002F9A                     l1283:
 17433  002F9A  0012               	return	
 17434  002F9C                     __end_of_findNodes:
 17435                           	opt stack 0
 17436                           tblptru	equ	0xFF8
 17437                           tblptrh	equ	0xFF7
 17438                           tblptrl	equ	0xFF6
 17439                           tablat	equ	0xFF5
 17440                           prodh	equ	0xFF4
 17441                           prodl	equ	0xFF3
 17442                           intcon	equ	0xFF2
 17443                           indf0	equ	0xFEF
 17444                           postinc0	equ	0xFEE
 17445                           fsr0h	equ	0xFEA
 17446                           fsr0l	equ	0xFE9
 17447                           wreg	equ	0xFE8
 17448                           indf1	equ	0xFE7
 17449                           postinc1	equ	0xFE6
 17450                           postdec1	equ	0xFE5
 17451                           fsr1h	equ	0xFE2
 17452                           fsr1l	equ	0xFE1
 17453                           indf2	equ	0xFDF
 17454                           postinc2	equ	0xFDE
 17455                           postdec2	equ	0xFDD
 17456                           plusw2	equ	0xFDB
 17457                           fsr2h	equ	0xFDA
 17458                           fsr2l	equ	0xFD9
 17459                           status	equ	0xFD8
 17460                           
 17461 ;; *************** function _printMDF *****************
 17462 ;; Defined at:
 17463 ;;		line 3023 in file "main.c"
 17464 ;; Parameters:    Size  Location     Type
 17465 ;;  nodeid          1    wreg     unsigned char 
 17466 ;; Auto vars:     Size  Location     Type
 17467 ;;  nodeid          1   92[BANK0 ] unsigned char 
 17468 ;;  p               2   94[BANK0 ] PTR unsigned char 
 17469 ;;		 -> wrkbuf(80), 
 17470 ;;  i               1   96[BANK0 ] unsigned char 
 17471 ;;  value           1   93[BANK0 ] unsigned char 
 17472 ;; Return value:  Size  Location     Type
 17473 ;;		None               void
 17474 ;; Registers used:
 17475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17476 ;; Tracked objects:
 17477 ;;		On entry : D/2
 17478 ;;		On exit  : 0/0
 17479 ;;		Unchanged: 0/0
 17480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17481 ;;      Params:         0       0       0       0       0       0       0
 17482 ;;      Locals:         0       5       0       0       0       0       0
 17483 ;;      Temps:          0       0       0       0       0       0       0
 17484 ;;      Totals:         0       5       0       0       0       0       0
 17485 ;;Total ram usage:        5 bytes
 17486 ;; Hardware stack levels used:    1
 17487 ;; Hardware stack levels required when called:    8
 17488 ;; This function calls:
 17489 ;;		_putsUSART
 17490 ;;		_memset
 17491 ;;		_readRegister
 17492 ;; This function is called by:
 17493 ;;		_doModeVerbose
 17494 ;;		_findNodes
 17495 ;; This function uses a non-reentrant model
 17496 ;;
 17497                           
 17498                           	psect	text28
 17499  001AA0                     __ptext28:
 17500                           	opt stack 0
 17501  001AA0                     _printMDF:
 17502                           	opt stack 20
 17503                           
 17504                           ;incstack = 0
 17505                           ;incstack = 0
 17506                           ;printMDF@nodeid stored from wreg
 17507  001AA0  CFE8 F0BC          	movff	wreg,printMDF@nodeid
 17508                           
 17509                           ;main.c: 3024: uint8_t i;
 17510                           ;main.c: 3025: uint8_t value;
 17511                           ;main.c: 3026: char *p = wrkbuf;
 17512  001AA4  0E01               	movlw	high _wrkbuf
 17513  001AA6  0100               	movlb	0	; () banked
 17514  001AA8  6FBF               	movwf	(printMDF@p+1)& (0+255),b
 17515  001AAA  0E82               	movlw	low _wrkbuf
 17516  001AAC  6FBE               	movwf	printMDF@p& (0+255),b
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;main.c: 3027: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 17520  001AAE  0E01               	movlw	high _wrkbuf
 17521  001AB0  6F61               	movwf	(?_memset+1)& (0+255),b
 17522  001AB2  0E82               	movlw	low _wrkbuf
 17523  001AB4  D839               	call	PL20	;call to abstracted procedure
 17524  001AB6  EC5A  F007         	call	_memset	;wreg free
 17525                           
 17526                           ; BSR set to: 0
 17527                           ;main.c: 3028: putsUSART((char *) "MDF = http://");
 17528  001ABA  0E7B               	movlw	high STR_291
 17529  001ABC  6E21               	movwf	?_putsUSART+1,c
 17530  001ABE  0E15               	movlw	low STR_291
 17531  001AC0  6E20               	movwf	?_putsUSART,c
 17532  001AC2  EC74  F009         	call	_putsUSART	;wreg free
 17533                           
 17534                           ;main.c: 3030: for (i = 0; i < 32; i++) {
 17535  001AC6  0100               	movlb	0	; () banked
 17536  001AC8  6BC0               	clrf	printMDF@i& (0+255),b
 17537  001ACA                     l17102:
 17538                           
 17539                           ; BSR set to: 0
 17540                           ;main.c: 3031: if (readRegister(nodeid,
 17541                           ;main.c: 3032: 0xE0 + i,
 17542                           ;main.c: 3033: rwtimeout,
 17543                           ;main.c: 3034: &value)) {
 17544  001ACA  51C0               	movf	printMDF@i& (0+255),w,b
 17545  001ACC  0FE0               	addlw	224
 17546  001ACE  6FB3               	movwf	?_readRegister& (0+255),b
 17547  001AD0  C033  F0B4         	movff	_rwtimeout,?_readRegister+1
 17548  001AD4  6BB5               	clrf	(?_readRegister+2)& (0+255),b
 17549  001AD6  0EBD               	movlw	low printMDF@value
 17550  001AD8  6FB6               	movwf	(?_readRegister+3)& (0+255),b
 17551  001ADA  51BC               	movf	printMDF@nodeid& (0+255),w,b
 17552  001ADC  EC9F  F010         	call	_readRegister
 17553  001AE0  0900               	iorlw	0
 17554  001AE2  E00A               	bz	l17108
 17555                           
 17556                           ;main.c: 3035: *p = value;
 17557  001AE4  C0BE  FFD9         	movff	printMDF@p,fsr2l
 17558  001AE8  C0BF  FFDA         	movff	printMDF@p+1,fsr2h
 17559  001AEC  C0BD  FFDF         	movff	printMDF@value,indf2
 17560  001AF0                     l17106:
 17561                           
 17562                           ;main.c: 3036: p++;
 17563  001AF0  0100               	movlb	0	; () banked
 17564  001AF2  4BBE               	infsnz	printMDF@p& (0+255),f,b
 17565  001AF4  2BBF               	incf	(printMDF@p+1)& (0+255),f,b
 17566                           
 17567                           ;main.c: 3038: }
 17568  001AF6  D007               	goto	l17112
 17569  001AF8                     l17108:
 17570                           
 17571                           ;main.c: 3039: else {
 17572                           ;main.c: 3040: *p = '?';
 17573  001AF8  C0BE  FFD9         	movff	printMDF@p,fsr2l
 17574  001AFC  C0BF  FFDA         	movff	printMDF@p+1,fsr2h
 17575  001B00  0E3F               	movlw	63
 17576  001B02  6EDF               	movwf	indf2,c
 17577  001B04  D7F5               	goto	l17106
 17578  001B06                     l17112:
 17579                           
 17580                           ; BSR set to: 0
 17581  001B06  2BC0               	incf	printMDF@i& (0+255),f,b
 17582                           
 17583                           ; BSR set to: 0
 17584  001B08  0E1F               	movlw	31
 17585  001B0A  65C0               	cpfsgt	printMDF@i& (0+255),b
 17586  001B0C  D7DE               	goto	l17102
 17587                           
 17588                           ; BSR set to: 0
 17589                           ;main.c: 3042: }
 17590                           ;main.c: 3043: }
 17591                           ;main.c: 3045: putsUSART(wrkbuf);
 17592  001B0E  0101               	movlb	1	; () banked
 17593  001B10  0E01               	movlw	high _wrkbuf
 17594  001B12  6E21               	movwf	?_putsUSART+1,c
 17595  001B14  0E82               	movlw	low _wrkbuf
 17596  001B16  6E20               	movwf	?_putsUSART,c
 17597  001B18  EC74  F009         	call	_putsUSART	;wreg free
 17598                           
 17599                           ;main.c: 3046: putsUSART((char *) "\r\n");
 17600  001B1C  0E70               	movlw	high (STR_237+50)
 17601  001B1E  6E21               	movwf	?_putsUSART+1,c
 17602  001B20  0E5A               	movlw	low (STR_237+50)
 17603  001B22  6E20               	movwf	?_putsUSART,c
 17604  001B24  EF74  F009         	goto	_putsUSART	;wreg free
 17605  001B28                     __end_of_printMDF:
 17606                           	opt stack 0
 17607  001B28                     PL20:
 17608                           	opt stack 19
 17609  001B28  6F60               	movwf	?_memset& (0+255),b
 17610  001B2A  6B63               	clrf	(?_memset+3)& (0+255),b
 17611  001B2C  6B62               	clrf	(?_memset+2)& (0+255),b
 17612  001B2E  6B65               	clrf	(?_memset+5)& (0+255),b
 17613  001B30  0E50               	movlw	80
 17614  001B32  6F64               	movwf	(?_memset+4)& (0+255),b
 17615  001B34  0C50               	retlw	80
 17616  001B36                     __end_ofPL20:
 17617                           	opt stack 0
 17618                           tblptru	equ	0xFF8
 17619                           tblptrh	equ	0xFF7
 17620                           tblptrl	equ	0xFF6
 17621                           tablat	equ	0xFF5
 17622                           prodh	equ	0xFF4
 17623                           prodl	equ	0xFF3
 17624                           intcon	equ	0xFF2
 17625                           indf0	equ	0xFEF
 17626                           postinc0	equ	0xFEE
 17627                           fsr0h	equ	0xFEA
 17628                           fsr0l	equ	0xFE9
 17629                           wreg	equ	0xFE8
 17630                           indf1	equ	0xFE7
 17631                           postinc1	equ	0xFE6
 17632                           postdec1	equ	0xFE5
 17633                           fsr1h	equ	0xFE2
 17634                           fsr1l	equ	0xFE1
 17635                           indf2	equ	0xFDF
 17636                           postinc2	equ	0xFDE
 17637                           postdec2	equ	0xFDD
 17638                           plusw2	equ	0xFDB
 17639                           fsr2h	equ	0xFDA
 17640                           fsr2l	equ	0xFD9
 17641                           status	equ	0xFD8
 17642                           
 17643 ;; *************** function _printGUID *****************
 17644 ;; Defined at:
 17645 ;;		line 2982 in file "main.c"
 17646 ;; Parameters:    Size  Location     Type
 17647 ;;  nodeid          1    wreg     unsigned char 
 17648 ;; Auto vars:     Size  Location     Type
 17649 ;;  nodeid          1   92[BANK0 ] unsigned char 
 17650 ;;  buf             3   93[BANK0 ] unsigned char [3]
 17651 ;;  i               1   97[BANK0 ] unsigned char 
 17652 ;;  value           1   96[BANK0 ] unsigned char 
 17653 ;; Return value:  Size  Location     Type
 17654 ;;		None               void
 17655 ;; Registers used:
 17656 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17657 ;; Tracked objects:
 17658 ;;		On entry : D/2
 17659 ;;		On exit  : 0/0
 17660 ;;		Unchanged: 0/0
 17661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17662 ;;      Params:         0       0       0       0       0       0       0
 17663 ;;      Locals:         0       6       0       0       0       0       0
 17664 ;;      Temps:          0       0       0       0       0       0       0
 17665 ;;      Totals:         0       6       0       0       0       0       0
 17666 ;;Total ram usage:        6 bytes
 17667 ;; Hardware stack levels used:    1
 17668 ;; Hardware stack levels required when called:    8
 17669 ;; This function calls:
 17670 ;;		_putsUSART
 17671 ;;		_memset
 17672 ;;		_strlen
 17673 ;;		_itoa
 17674 ;;		_readRegister
 17675 ;;		_strcat
 17676 ;; This function is called by:
 17677 ;;		_doModeVerbose
 17678 ;;		_findNodes
 17679 ;; This function uses a non-reentrant model
 17680 ;;
 17681                           
 17682                           	psect	text29
 17683  00280A                     __ptext29:
 17684                           	opt stack 0
 17685  00280A                     _printGUID:
 17686                           	opt stack 20
 17687                           
 17688                           ;incstack = 0
 17689                           ;incstack = 0
 17690                           ;printGUID@nodeid stored from wreg
 17691  00280A  CFE8 F0BC          	movff	wreg,printGUID@nodeid
 17692                           
 17693                           ;main.c: 2983: uint8_t i;
 17694                           ;main.c: 2984: uint8_t value;
 17695                           ;main.c: 2985: char buf[3];
 17696                           ;main.c: 2987: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 17697  00280E  0E01               	movlw	high _wrkbuf
 17698  002810  0100               	movlb	0	; () banked
 17699  002812  6F61               	movwf	(?_memset+1)& (0+255),b
 17700  002814  0E82               	movlw	low _wrkbuf
 17701  002816  EC94  F00D         	call	PL20	;call to abstracted procedure
 17702  00281A  EC5A  F007         	call	_memset	;wreg free
 17703                           
 17704                           ; BSR set to: 0
 17705                           ;main.c: 2988: putsUSART((char *) "GUID = ");
 17706  00281E  0E7B               	movlw	high STR_286
 17707  002820  6E21               	movwf	?_putsUSART+1,c
 17708  002822  0ED9               	movlw	low STR_286
 17709  002824  6E20               	movwf	?_putsUSART,c
 17710  002826  EC74  F009         	call	_putsUSART	;wreg free
 17711                           
 17712                           ;main.c: 2990: for (i = 0; i < 16; i++) {
 17713  00282A  0100               	movlb	0	; () banked
 17714  00282C  6BC1               	clrf	printGUID@i& (0+255),b
 17715  00282E                     l17068:
 17716                           
 17717                           ; BSR set to: 0
 17718                           ;main.c: 2991: if (readRegister(nodeid,
 17719                           ;main.c: 2992: 0xD0 + i,
 17720                           ;main.c: 2993: rwtimeout,
 17721                           ;main.c: 2994: &value)) {
 17722  00282E  51C1               	movf	printGUID@i& (0+255),w,b
 17723  002830  0FD0               	addlw	208
 17724  002832  6FB3               	movwf	?_readRegister& (0+255),b
 17725  002834  C033  F0B4         	movff	_rwtimeout,?_readRegister+1
 17726  002838  6BB5               	clrf	(?_readRegister+2)& (0+255),b
 17727  00283A  0EC0               	movlw	low printGUID@value
 17728  00283C  6FB6               	movwf	(?_readRegister+3)& (0+255),b
 17729  00283E  51BC               	movf	printGUID@nodeid& (0+255),w,b
 17730  002840  EC9F  F010         	call	_readRegister
 17731  002844  0900               	iorlw	0
 17732  002846  E029               	bz	l17078
 17733                           
 17734                           ;main.c: 2995: itoa(buf, value, 16);
 17735  002848  0100               	movlb	0	; () banked
 17736  00284A  0E00               	movlw	high printGUID@buf
 17737  00284C  6F6D               	movwf	(?_itoa+1)& (0+255),b
 17738  00284E  0EBD               	movlw	low printGUID@buf
 17739  002850  6F6C               	movwf	?_itoa& (0+255),b
 17740  002852  C0C0  F06E         	movff	printGUID@value,?_itoa+2
 17741  002856  6B6F               	clrf	(?_itoa+3)& (0+255),b
 17742  002858  6B71               	clrf	(?_itoa+5)& (0+255),b
 17743  00285A  0E10               	movlw	16
 17744  00285C  6F70               	movwf	(?_itoa+4)& (0+255),b
 17745  00285E  ECD3  F007         	call	_itoa	;wreg free
 17746                           
 17747                           ; BSR set to: 0
 17748                           ;main.c: 2996: if (1 == strlen(buf)) {
 17749  002862  0E00               	movlw	high printGUID@buf
 17750  002864  6E20               	movwf	?_strlen+1,c
 17751  002866  0EBD               	movlw	low printGUID@buf
 17752  002868  6E1F               	movwf	?_strlen,c
 17753  00286A  EC28  F008         	call	_strlen	;wreg free
 17754  00286E  041F               	decf	?_strlen,w,c
 17755  002870  1020               	iorwf	?_strlen+1,w,c
 17756  002872  E10F               	bnz	l17076
 17757                           
 17758                           ;main.c: 2997: strcat(wrkbuf, "0");
 17759  002874  0101               	movlb	1	; () banked
 17760  002876  0E01               	movlw	high _wrkbuf
 17761  002878  6E20               	movwf	?_strcat+1,c
 17762  00287A  0E82               	movlw	low _wrkbuf
 17763  00287C  6E1F               	movwf	?_strcat,c
 17764  00287E  0E7C               	movlw	high STR_287
 17765  002880  6E22               	movwf	?_strcat+3,c
 17766  002882  0EF9               	movlw	low STR_287
 17767  002884  6E21               	movwf	?_strcat+2,c
 17768  002886  ECF5  F009         	call	_strcat	;wreg free
 17769                           
 17770                           ;main.c: 2998: strcat(wrkbuf, buf);
 17771  00288A  D833               	call	PL82	;call to abstracted procedure
 17772  00288C  ECF5  F009         	call	_strcat	;wreg free
 17773                           
 17774                           ;main.c: 2999: } else {
 17775  002890  D00F               	goto	l17080
 17776  002892                     l17076:
 17777                           
 17778                           ;main.c: 3000: strcat(wrkbuf, buf);
 17779  002892  D82F               	call	PL82	;call to abstracted procedure
 17780  002894  ECF5  F009         	call	_strcat	;wreg free
 17781  002898  D00B               	goto	l17080
 17782  00289A                     l17078:
 17783                           
 17784                           ;main.c: 3004: strcat(wrkbuf, "--");
 17785  00289A  0101               	movlb	1	; () banked
 17786  00289C  0E01               	movlw	high _wrkbuf
 17787  00289E  6E20               	movwf	?_strcat+1,c
 17788  0028A0  0E82               	movlw	low _wrkbuf
 17789  0028A2  6E1F               	movwf	?_strcat,c
 17790  0028A4  0E7C               	movlw	high STR_288
 17791  0028A6  6E22               	movwf	?_strcat+3,c
 17792  0028A8  0EE5               	movlw	low STR_288
 17793  0028AA  6E21               	movwf	?_strcat+2,c
 17794  0028AC  ECF5  F009         	call	_strcat	;wreg free
 17795  0028B0                     l17080:
 17796                           
 17797                           ;main.c: 3005: }
 17798                           ;main.c: 3007: if (i < 15) {
 17799  0028B0  0E0F               	movlw	15
 17800  0028B2  0100               	movlb	0	; () banked
 17801  0028B4  61C1               	cpfslt	printGUID@i& (0+255),b
 17802  0028B6  D00B               	goto	l17084
 17803                           
 17804                           ; BSR set to: 0
 17805                           ;main.c: 3008: strcat(wrkbuf, ":");
 17806  0028B8  0101               	movlb	1	; () banked
 17807  0028BA  0E01               	movlw	high _wrkbuf
 17808  0028BC  6E20               	movwf	?_strcat+1,c
 17809  0028BE  0E82               	movlw	low _wrkbuf
 17810  0028C0  6E1F               	movwf	?_strcat,c
 17811  0028C2  0E7C               	movlw	high STR_289
 17812  0028C4  6E22               	movwf	?_strcat+3,c
 17813  0028C6  0EFB               	movlw	low STR_289
 17814  0028C8  6E21               	movwf	?_strcat+2,c
 17815  0028CA  ECF5  F009         	call	_strcat	;wreg free
 17816  0028CE                     l17084:
 17817  0028CE  0100               	movlb	0	; () banked
 17818  0028D0  2BC1               	incf	printGUID@i& (0+255),f,b
 17819                           
 17820                           ; BSR set to: 0
 17821  0028D2  0E0F               	movlw	15
 17822  0028D4  65C1               	cpfsgt	printGUID@i& (0+255),b
 17823  0028D6  D7AB               	goto	l17068
 17824                           
 17825                           ; BSR set to: 0
 17826                           ;main.c: 3009: }
 17827                           ;main.c: 3011: }
 17828                           ;main.c: 3013: putsUSART(wrkbuf);
 17829  0028D8  0101               	movlb	1	; () banked
 17830  0028DA  0E01               	movlw	high _wrkbuf
 17831  0028DC  6E21               	movwf	?_putsUSART+1,c
 17832  0028DE  0E82               	movlw	low _wrkbuf
 17833  0028E0  6E20               	movwf	?_putsUSART,c
 17834  0028E2  EC74  F009         	call	_putsUSART	;wreg free
 17835                           
 17836                           ;main.c: 3014: putsUSART((char *) "\r\n");
 17837  0028E6  0E70               	movlw	high (STR_237+50)
 17838  0028E8  6E21               	movwf	?_putsUSART+1,c
 17839  0028EA  0E5A               	movlw	low (STR_237+50)
 17840  0028EC  6E20               	movwf	?_putsUSART,c
 17841  0028EE  EF74  F009         	goto	_putsUSART	;wreg free
 17842  0028F2                     __end_of_printGUID:
 17843                           	opt stack 0
 17844  0028F2                     PL82:
 17845                           	opt stack 20
 17846  0028F2  0E01               	movlw	high _wrkbuf
 17847  0028F4  6E20               	movwf	?_strcat+1,c
 17848  0028F6  0E82               	movlw	low _wrkbuf
 17849  0028F8  6E1F               	movwf	?_strcat,c
 17850  0028FA  0100               	movlb	0	; () banked
 17851  0028FC  0E00               	movlw	high printGUID@buf
 17852  0028FE  6E22               	movwf	?_strcat+3,c
 17853  002900  0EBD               	movlw	low printGUID@buf
 17854  002902  6E21               	movwf	?_strcat+2,c
 17855  002904  0012               	return	
 17856  002906                     __end_ofPL82:
 17857                           	opt stack 0
 17858                           tblptru	equ	0xFF8
 17859                           tblptrh	equ	0xFF7
 17860                           tblptrl	equ	0xFF6
 17861                           tablat	equ	0xFF5
 17862                           prodh	equ	0xFF4
 17863                           prodl	equ	0xFF3
 17864                           intcon	equ	0xFF2
 17865                           indf0	equ	0xFEF
 17866                           postinc0	equ	0xFEE
 17867                           fsr0h	equ	0xFEA
 17868                           fsr0l	equ	0xFE9
 17869                           wreg	equ	0xFE8
 17870                           indf1	equ	0xFE7
 17871                           postinc1	equ	0xFE6
 17872                           postdec1	equ	0xFE5
 17873                           fsr1h	equ	0xFE2
 17874                           fsr1l	equ	0xFE1
 17875                           indf2	equ	0xFDF
 17876                           postinc2	equ	0xFDE
 17877                           postdec2	equ	0xFDD
 17878                           plusw2	equ	0xFDB
 17879                           fsr2h	equ	0xFDA
 17880                           fsr2l	equ	0xFD9
 17881                           status	equ	0xFD8
 17882                           
 17883 ;; *************** function _printNodeFirmwareVersion *****************
 17884 ;; Defined at:
 17885 ;;		line 3054 in file "main.c"
 17886 ;; Parameters:    Size  Location     Type
 17887 ;;  nodeid          1    wreg     unsigned char 
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;  nodeid          1   92[BANK0 ] unsigned char 
 17890 ;;  buf             3   93[BANK0 ] unsigned char [3]
 17891 ;;  i               1   97[BANK0 ] unsigned char 
 17892 ;;  value           1   96[BANK0 ] unsigned char 
 17893 ;; Return value:  Size  Location     Type
 17894 ;;		None               void
 17895 ;; Registers used:
 17896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17897 ;; Tracked objects:
 17898 ;;		On entry : D/2
 17899 ;;		On exit  : 0/0
 17900 ;;		Unchanged: 0/0
 17901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17902 ;;      Params:         0       0       0       0       0       0       0
 17903 ;;      Locals:         0       6       0       0       0       0       0
 17904 ;;      Temps:          0       0       0       0       0       0       0
 17905 ;;      Totals:         0       6       0       0       0       0       0
 17906 ;;Total ram usage:        6 bytes
 17907 ;; Hardware stack levels used:    1
 17908 ;; Hardware stack levels required when called:    8
 17909 ;; This function calls:
 17910 ;;		_putsUSART
 17911 ;;		_memset
 17912 ;;		_itoa
 17913 ;;		_readRegister
 17914 ;;		_strcat
 17915 ;; This function is called by:
 17916 ;;		_doModeVerbose
 17917 ;;		_findNodes
 17918 ;; This function uses a non-reentrant model
 17919 ;;
 17920                           
 17921                           	psect	text30
 17922  002206                     __ptext30:
 17923                           	opt stack 0
 17924  002206                     _printNodeFirmwareVersion:
 17925                           	opt stack 20
 17926                           
 17927                           ;incstack = 0
 17928                           ;incstack = 0
 17929                           ;printNodeFirmwareVersion@nodeid stored from wreg
 17930  002206  CFE8 F0BC          	movff	wreg,printNodeFirmwareVersion@nodeid
 17931                           
 17932                           ;main.c: 3055: uint8_t i;
 17933                           ;main.c: 3056: uint8_t value;
 17934                           ;main.c: 3057: char buf[3];
 17935                           ;main.c: 3059: memset( wrkbuf, 0, sizeof(wrkbuf) );
 17936  00220A  0E01               	movlw	high _wrkbuf
 17937  00220C  0100               	movlb	0	; () banked
 17938  00220E  6F61               	movwf	(?_memset+1)& (0+255),b
 17939  002210  0E82               	movlw	low _wrkbuf
 17940  002212  EC94  F00D         	call	PL20	;call to abstracted procedure
 17941  002216  EC5A  F007         	call	_memset	;wreg free
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;main.c: 3060: putsUSART((char *) "Firmware version = ");
 17945  00221A  0E7A               	movlw	high STR_293
 17946  00221C  6E21               	movwf	?_putsUSART+1,c
 17947  00221E  0E54               	movlw	low STR_293
 17948  002220  6E20               	movwf	?_putsUSART,c
 17949  002222  EC74  F009         	call	_putsUSART	;wreg free
 17950                           
 17951                           ;main.c: 3062: for (i = 0; i < 3; i++) {
 17952  002226  0100               	movlb	0	; () banked
 17953  002228  6BC1               	clrf	printNodeFirmwareVersion@i& (0+255),b
 17954  00222A                     l17040:
 17955                           
 17956                           ; BSR set to: 0
 17957                           ;main.c: 3063: if (readRegister(nodeid,
 17958                           ;main.c: 3064: 0x94 + i,
 17959                           ;main.c: 3065: rwtimeout,
 17960                           ;main.c: 3066: &value)) {
 17961  00222A  51C1               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 17962  00222C  0F94               	addlw	148
 17963  00222E  6FB3               	movwf	?_readRegister& (0+255),b
 17964  002230  C033  F0B4         	movff	_rwtimeout,?_readRegister+1
 17965  002234  6BB5               	clrf	(?_readRegister+2)& (0+255),b
 17966  002236  0EC0               	movlw	low printNodeFirmwareVersion@value
 17967  002238  6FB6               	movwf	(?_readRegister+3)& (0+255),b
 17968  00223A  51BC               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 17969  00223C  EC9F  F010         	call	_readRegister
 17970  002240  0900               	iorlw	0
 17971  002242  E019               	bz	l17046
 17972                           
 17973                           ;main.c: 3067: itoa(buf, value, 16);
 17974  002244  0100               	movlb	0	; () banked
 17975  002246  0E00               	movlw	high printNodeFirmwareVersion@buf
 17976  002248  6F6D               	movwf	(?_itoa+1)& (0+255),b
 17977  00224A  0EBD               	movlw	low printNodeFirmwareVersion@buf
 17978  00224C  6F6C               	movwf	?_itoa& (0+255),b
 17979  00224E  C0C0  F06E         	movff	printNodeFirmwareVersion@value,?_itoa+2
 17980  002252  6B6F               	clrf	(?_itoa+3)& (0+255),b
 17981  002254  6B71               	clrf	(?_itoa+5)& (0+255),b
 17982  002256  0E10               	movlw	16
 17983  002258  6F70               	movwf	(?_itoa+4)& (0+255),b
 17984  00225A  ECD3  F007         	call	_itoa	;wreg free
 17985                           
 17986                           ; BSR set to: 0
 17987                           ;main.c: 3068: strcat(wrkbuf, buf);
 17988  00225E  0E01               	movlw	high _wrkbuf
 17989  002260  6E20               	movwf	?_strcat+1,c
 17990  002262  0E82               	movlw	low _wrkbuf
 17991  002264  6E1F               	movwf	?_strcat,c
 17992  002266  0100               	movlb	0	; () banked
 17993  002268  0E00               	movlw	high printNodeFirmwareVersion@buf
 17994  00226A  6E22               	movwf	?_strcat+3,c
 17995  00226C  0EBD               	movlw	low printNodeFirmwareVersion@buf
 17996  00226E  6E21               	movwf	?_strcat+2,c
 17997  002270  ECF5  F009         	call	_strcat	;wreg free
 17998                           
 17999                           ;main.c: 3069: }
 18000  002274  D00B               	goto	l17048
 18001  002276                     l17046:
 18002                           
 18003                           ;main.c: 3070: else {
 18004                           ;main.c: 3071: strcat(wrkbuf, "?");
 18005  002276  0101               	movlb	1	; () banked
 18006  002278  0E01               	movlw	high _wrkbuf
 18007  00227A  6E20               	movwf	?_strcat+1,c
 18008  00227C  0E82               	movlw	low _wrkbuf
 18009  00227E  6E1F               	movwf	?_strcat,c
 18010  002280  0E7C               	movlw	high STR_166
 18011  002282  6E22               	movwf	?_strcat+3,c
 18012  002284  0EFD               	movlw	low STR_166
 18013  002286  6E21               	movwf	?_strcat+2,c
 18014  002288  ECF5  F009         	call	_strcat	;wreg free
 18015  00228C                     l17048:
 18016                           
 18017                           ;main.c: 3072: }
 18018                           ;main.c: 3074: if (i < 2) {
 18019  00228C  0E02               	movlw	2
 18020  00228E  0100               	movlb	0	; () banked
 18021  002290  61C1               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 18022  002292  D00B               	goto	l17052
 18023                           
 18024                           ; BSR set to: 0
 18025                           ;main.c: 3075: strcat(wrkbuf, ".");
 18026  002294  0101               	movlb	1	; () banked
 18027  002296  0E01               	movlw	high _wrkbuf
 18028  002298  6E20               	movwf	?_strcat+1,c
 18029  00229A  0E82               	movlw	low _wrkbuf
 18030  00229C  6E1F               	movwf	?_strcat,c
 18031  00229E  0E7C               	movlw	high STR_295
 18032  0022A0  6E22               	movwf	?_strcat+3,c
 18033  0022A2  0EF7               	movlw	low STR_295
 18034  0022A4  6E21               	movwf	?_strcat+2,c
 18035  0022A6  ECF5  F009         	call	_strcat	;wreg free
 18036  0022AA                     l17052:
 18037  0022AA  0100               	movlb	0	; () banked
 18038  0022AC  2BC1               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 18039                           
 18040                           ; BSR set to: 0
 18041  0022AE  0E02               	movlw	2
 18042  0022B0  65C1               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 18043  0022B2  D7BB               	goto	l17040
 18044                           
 18045                           ; BSR set to: 0
 18046                           ;main.c: 3076: }
 18047                           ;main.c: 3078: }
 18048                           ;main.c: 3080: putsUSART(wrkbuf);
 18049  0022B4  0101               	movlb	1	; () banked
 18050  0022B6  0E01               	movlw	high _wrkbuf
 18051  0022B8  6E21               	movwf	?_putsUSART+1,c
 18052  0022BA  0E82               	movlw	low _wrkbuf
 18053  0022BC  6E20               	movwf	?_putsUSART,c
 18054  0022BE  EC74  F009         	call	_putsUSART	;wreg free
 18055                           
 18056                           ;main.c: 3081: putsUSART((char *) "\r\n");
 18057  0022C2  0E70               	movlw	high (STR_237+50)
 18058  0022C4  6E21               	movwf	?_putsUSART+1,c
 18059  0022C6  0E5A               	movlw	low (STR_237+50)
 18060  0022C8  6E20               	movwf	?_putsUSART,c
 18061  0022CA  EF74  F009         	goto	_putsUSART	;wreg free
 18062  0022CE                     __end_of_printNodeFirmwareVersion:
 18063                           	opt stack 0
 18064                           tblptru	equ	0xFF8
 18065                           tblptrh	equ	0xFF7
 18066                           tblptrl	equ	0xFF6
 18067                           tablat	equ	0xFF5
 18068                           prodh	equ	0xFF4
 18069                           prodl	equ	0xFF3
 18070                           intcon	equ	0xFF2
 18071                           indf0	equ	0xFEF
 18072                           postinc0	equ	0xFEE
 18073                           fsr0h	equ	0xFEA
 18074                           fsr0l	equ	0xFE9
 18075                           wreg	equ	0xFE8
 18076                           indf1	equ	0xFE7
 18077                           postinc1	equ	0xFE6
 18078                           postdec1	equ	0xFE5
 18079                           fsr1h	equ	0xFE2
 18080                           fsr1l	equ	0xFE1
 18081                           indf2	equ	0xFDF
 18082                           postinc2	equ	0xFDE
 18083                           postdec2	equ	0xFDD
 18084                           plusw2	equ	0xFDB
 18085                           fsr2h	equ	0xFDA
 18086                           fsr2l	equ	0xFD9
 18087                           status	equ	0xFD8
 18088                           
 18089 ;; *************** function _strcat *****************
 18090 ;; Defined at:
 18091 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 18092 ;; Parameters:    Size  Location     Type
 18093 ;;  to              2   30[COMRAM] PTR unsigned char 
 18094 ;;		 -> wrkbuf(80), 
 18095 ;;  from            2   32[COMRAM] PTR const unsigned char 
 18096 ;;		 -> STR_295(2), STR_294(2), printNodeFirmwareVersion@buf(3), STR_289(2), 
 18097 ;;		 -> STR_288(3), STR_287(2), printGUID@buf(3), 
 18098 ;; Auto vars:     Size  Location     Type
 18099 ;;  cp              2    0[BANK0 ] PTR unsigned char 
 18100 ;;		 -> wrkbuf(80), 
 18101 ;; Return value:  Size  Location     Type
 18102 ;;                  2   30[COMRAM] PTR unsigned char 
 18103 ;; Registers used:
 18104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18105 ;; Tracked objects:
 18106 ;;		On entry : E/1
 18107 ;;		On exit  : 0/0
 18108 ;;		Unchanged: 0/0
 18109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18110 ;;      Params:         4       0       0       0       0       0       0
 18111 ;;      Locals:         0       2       0       0       0       0       0
 18112 ;;      Temps:          0       0       0       0       0       0       0
 18113 ;;      Totals:         4       2       0       0       0       0       0
 18114 ;;Total ram usage:        6 bytes
 18115 ;; Hardware stack levels used:    1
 18116 ;; Hardware stack levels required when called:    3
 18117 ;; This function calls:
 18118 ;;		Nothing
 18119 ;; This function is called by:
 18120 ;;		_printGUID
 18121 ;;		_printNodeFirmwareVersion
 18122 ;; This function uses a non-reentrant model
 18123 ;;
 18124                           
 18125                           	psect	text31
 18126  0013EA                     __ptext31:
 18127                           	opt stack 0
 18128  0013EA                     _strcat:
 18129                           	opt stack 24
 18130                           
 18131                           ;incstack = 0
 18132                           ;incstack = 0
 18133  0013EA  C01F  F060         	movff	strcat@to,strcat@cp
 18134  0013EE  C020  F061         	movff	strcat@to+1,strcat@cp+1
 18135  0013F2  D003               	goto	l17668
 18136  0013F4                     l17666:
 18137  0013F4  0100               	movlb	0	; () banked
 18138  0013F6  4B60               	infsnz	strcat@cp& (0+255),f,b
 18139  0013F8  2B61               	incf	(strcat@cp+1)& (0+255),f,b
 18140  0013FA                     l17668:
 18141  0013FA  C060  FFD9         	movff	strcat@cp,fsr2l
 18142  0013FE  C061  FFDA         	movff	strcat@cp+1,fsr2h
 18143  001402  50DF               	movf	indf2,w,c
 18144  001404  E006               	bz	l17672
 18145  001406  D7F6               	goto	l17666
 18146  001408                     l17670:
 18147  001408  0100               	movlb	0	; () banked
 18148  00140A  4B60               	infsnz	strcat@cp& (0+255),f,b
 18149  00140C  2B61               	incf	(strcat@cp+1)& (0+255),f,b
 18150  00140E  4A21               	infsnz	strcat@from,f,c
 18151  001410  2A22               	incf	strcat@from+1,f,c
 18152  001412                     l17672:
 18153  001412  C021  FFF6         	movff	strcat@from,tblptrl
 18154  001416  C022  FFF7         	movff	strcat@from+1,tblptrh
 18155  00141A  6AF8               	clrf	tblptru,c
 18156  00141C  C060  FFD9         	movff	strcat@cp,fsr2l
 18157  001420  C061  FFDA         	movff	strcat@cp+1,fsr2h
 18158  001424  0E05               	movlw	(high __ramtop+-1)
 18159  001426  64F7               	cpfsgt	tblptrh,c
 18160  001428  D003               	bra	u23217
 18161  00142A  0008               	tblrd		*
 18162  00142C  50F5               	movf	tablat,w,c
 18163  00142E  D005               	bra	u23210
 18164  001430                     u23217:
 18165  001430  CFF6 FFE9          	movff	tblptrl,fsr0l
 18166  001434  CFF7 FFEA          	movff	tblptrh,fsr0h
 18167  001438  50EF               	movf	indf0,w,c
 18168  00143A                     u23210:
 18169  00143A  6EDF               	movwf	indf2,c
 18170  00143C  50DF               	movf	indf2,w,c
 18171  00143E  B4D8               	btfsc	status,2,c
 18172  001440  0012               	return	
 18173  001442  D7E2               	goto	l17670
 18174  001444                     __end_of_strcat:
 18175                           	opt stack 0
 18176                           tblptru	equ	0xFF8
 18177                           tblptrh	equ	0xFF7
 18178                           tblptrl	equ	0xFF6
 18179                           tablat	equ	0xFF5
 18180                           prodh	equ	0xFF4
 18181                           prodl	equ	0xFF3
 18182                           intcon	equ	0xFF2
 18183                           indf0	equ	0xFEF
 18184                           postinc0	equ	0xFEE
 18185                           fsr0h	equ	0xFEA
 18186                           fsr0l	equ	0xFE9
 18187                           wreg	equ	0xFE8
 18188                           indf1	equ	0xFE7
 18189                           postinc1	equ	0xFE6
 18190                           postdec1	equ	0xFE5
 18191                           fsr1h	equ	0xFE2
 18192                           fsr1l	equ	0xFE1
 18193                           indf2	equ	0xFDF
 18194                           postinc2	equ	0xFDE
 18195                           postdec2	equ	0xFDD
 18196                           plusw2	equ	0xFDB
 18197                           fsr2h	equ	0xFDA
 18198                           fsr2l	equ	0xFD9
 18199                           status	equ	0xFD8
 18200                           
 18201 ;; *************** function _readRegister *****************
 18202 ;; Defined at:
 18203 ;;		line 2538 in file "main.c"
 18204 ;; Parameters:    Size  Location     Type
 18205 ;;  nodeid          1    wreg     unsigned char 
 18206 ;;  reg             1   83[BANK0 ] unsigned char 
 18207 ;;  timeout         2   84[BANK0 ] unsigned short 
 18208 ;;  value           1   86[BANK0 ] PTR unsigned char 
 18209 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 18210 ;; Auto vars:     Size  Location     Type
 18211 ;;  nodeid          1   91[BANK0 ] unsigned char 
 18212 ;; Return value:  Size  Location     Type
 18213 ;;                  1    wreg      enum E15660
 18214 ;; Registers used:
 18215 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18216 ;; Tracked objects:
 18217 ;;		On entry : F/0
 18218 ;;		On exit  : E/0
 18219 ;;		Unchanged: 0/0
 18220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18221 ;;      Params:         0       4       0       0       0       0       0
 18222 ;;      Locals:         0       1       0       0       0       0       0
 18223 ;;      Temps:          0       4       0       0       0       0       0
 18224 ;;      Totals:         0       9       0       0       0       0       0
 18225 ;;Total ram usage:        9 bytes
 18226 ;; Hardware stack levels used:    1
 18227 ;; Hardware stack levels required when called:    7
 18228 ;; This function calls:
 18229 ;;		_checkCANBusState
 18230 ;;		_sendVSCPFrame
 18231 ;;		_getVSCPFrame
 18232 ;; This function is called by:
 18233 ;;		_findNodes
 18234 ;;		_printGUID
 18235 ;;		_printMDF
 18236 ;;		_printNodeFirmwareVersion
 18237 ;; This function uses a non-reentrant model
 18238 ;;
 18239                           
 18240                           	psect	text32
 18241  00213E                     __ptext32:
 18242                           	opt stack 0
 18243  00213E                     _readRegister:
 18244                           	opt stack 20
 18245                           
 18246                           ;incstack = 0
 18247                           ;incstack = 0
 18248                           ;readRegister@nodeid stored from wreg
 18249  00213E  CFE8 F0BB          	movff	wreg,readRegister@nodeid
 18250                           
 18251                           ; BSR set to: 0
 18252                           ;main.c: 2539: vscpData[ 0 ] = nodeid;
 18253  002142  C0BB  F1EA         	movff	readRegister@nodeid,_vscpData
 18254                           
 18255                           ; BSR set to: 0
 18256                           ;main.c: 2540: vscpData[ 1 ] = reg;
 18257  002146  C0B3  F1EB         	movff	readRegister@reg,_vscpData+1
 18258                           
 18259                           ; BSR set to: 0
 18260                           ;main.c: 2542: if (sendVSCPFrame(0,
 18261                           ;main.c: 2543: 9,
 18262                           ;main.c: 2544: 0,
 18263                           ;main.c: 2545: 0,
 18264                           ;main.c: 2546: 2,
 18265                           ;main.c: 2547: vscpData)) {
 18266  00214A  6B94               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 18267  00214C  6B93               	clrf	?_sendVSCPFrame& (0+255),b
 18268  00214E  0E09               	movlw	9
 18269  002150  6F95               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 18270  002152  6B96               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 18271  002154  6B97               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 18272  002156  0E02               	movlw	2
 18273  002158  6F98               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 18274  00215A  0E01               	movlw	high _vscpData
 18275  00215C  0100               	movlb	0	; () banked
 18276  00215E  6F9A               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 18277  002160  0EEA               	movlw	low _vscpData
 18278  002162  6F99               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 18279  002164  EC85  F00F         	call	_sendVSCPFrame	;wreg free
 18280  002168  0900               	iorlw	0
 18281  00216A  E04B               	bz	l17660
 18282                           
 18283                           ;main.c: 2549: timekeeper = 0;
 18284  00216C  0101               	movlb	1	; () banked
 18285  00216E  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 18286  002170  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 18287  002172  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 18288  002174  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 18289                           
 18290                           ;main.c: 2550: while (timekeeper < timeout) {
 18291  002176  D02E               	goto	l17658
 18292  002178                     l1171:
 18293                           
 18294                           ; BSR set to: 1
 18295  002178  0004               	clrwdt		;# 
 18296                           
 18297                           ;main.c: 2553: checkCANBusState();
 18298  00217A  EC27  F007         	call	_checkCANBusState	;wreg free
 18299                           
 18300                           ;main.c: 2555: if (getVSCPFrame(&vscpClass,
 18301                           ;main.c: 2556: &vscpType,
 18302                           ;main.c: 2557: &vscpNodeId,
 18303                           ;main.c: 2558: &vscpPriority,
 18304                           ;main.c: 2559: &vscpSize,
 18305                           ;main.c: 2560: vscpData)) {
 18306  00217E  0E41               	movlw	low _vscpType
 18307  002180  0100               	movlb	0	; () banked
 18308  002182  6F6E               	movwf	?_getVSCPFrame& (0+255),b
 18309  002184  0E3E               	movlw	low _vscpNodeId
 18310  002186  6F6F               	movwf	(?_getVSCPFrame+1)& (0+255),b
 18311  002188  0E3F               	movlw	low _vscpPriority
 18312  00218A  6F70               	movwf	(?_getVSCPFrame+2)& (0+255),b
 18313  00218C  0E40               	movlw	low _vscpSize
 18314  00218E  6F71               	movwf	(?_getVSCPFrame+3)& (0+255),b
 18315  002190  0E01               	movlw	high _vscpData
 18316  002192  6F73               	movwf	(?_getVSCPFrame+5)& (0+255),b
 18317  002194  0EEA               	movlw	low _vscpData
 18318  002196  6F72               	movwf	(?_getVSCPFrame+4)& (0+255),b
 18319  002198  0E3A               	movlw	_vscpClass& (0+255)
 18320  00219A  EC7A  F00C         	call	_getVSCPFrame
 18321  00219E  0900               	iorlw	0
 18322  0021A0  E019               	bz	l17658
 18323                           
 18324                           ; BSR set to: 0
 18325                           ;main.c: 2561: if ((nodeid == vscpNodeId) &&
 18326                           ;main.c: 2562: (0 == vscpClass) &&
 18327                           ;main.c: 2563: (10 == vscpType) &&
 18328                           ;main.c: 2564: (2 == vscpSize) &&
 18329                           ;main.c: 2565: (reg == vscpData[ 0 ])) {
 18330  0021A2  503E               	movf	_vscpNodeId,w,c
 18331  0021A4  63BB               	cpfseq	readRegister@nodeid& (0+255),b
 18332  0021A6  D016               	goto	l17658
 18333                           
 18334                           ; BSR set to: 0
 18335  0021A8  503B               	movf	_vscpClass+1,w,c
 18336  0021AA  103A               	iorwf	_vscpClass,w,c
 18337  0021AC  E113               	bnz	l17658
 18338                           
 18339                           ; BSR set to: 0
 18340  0021AE  5041               	movf	_vscpType,w,c
 18341  0021B0  0A0A               	xorlw	10
 18342  0021B2  E110               	bnz	l17658
 18343                           
 18344                           ; BSR set to: 0
 18345  0021B4  5040               	movf	_vscpSize,w,c
 18346  0021B6  0A02               	xorlw	2
 18347  0021B8  E10D               	bnz	l17658
 18348                           
 18349                           ; BSR set to: 0
 18350  0021BA  0101               	movlb	1	; () banked
 18351  0021BC  51EA               	movf	_vscpData& (0+255),w,b
 18352  0021BE  0100               	movlb	0	; () banked
 18353  0021C0  63B3               	cpfseq	readRegister@reg& (0+255),b
 18354  0021C2  D008               	goto	l17658
 18355                           
 18356                           ; BSR set to: 0
 18357                           ;main.c: 2566: *value = vscpData[ 1 ];
 18358  0021C4  51B6               	movf	readRegister@value& (0+255),w,b
 18359  0021C6  6ED9               	movwf	fsr2l,c
 18360  0021C8  6ADA               	clrf	fsr2h,c
 18361  0021CA  0101               	movlb	1	; () banked
 18362  0021CC  C1EB  FFDF         	movff	_vscpData+1,indf2
 18363                           
 18364                           ; BSR set to: 1
 18365                           ;main.c: 2567: return 1;
 18366  0021D0  0E01               	movlw	1
 18367  0021D2  D018               	goto	l1174
 18368  0021D4                     l17658:
 18369  0021D4  0100               	movlb	0	; () banked
 18370  0021D6  51B4               	movf	readRegister@timeout& (0+255),w,b
 18371  0021D8  6FB7               	movwf	??_readRegister& (0+255),b
 18372  0021DA  51B5               	movf	(readRegister@timeout+1)& (0+255),w,b
 18373  0021DC  6FB8               	movwf	(??_readRegister+1)& (0+255),b
 18374  0021DE  6BB9               	clrf	(??_readRegister+2)& (0+255),b
 18375  0021E0  6BBA               	clrf	(??_readRegister+3)& (0+255),b
 18376  0021E2  51B7               	movf	??_readRegister& (0+255),w,b
 18377  0021E4  0101               	movlb	1	; () banked
 18378  0021E6  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 18379  0021E8  0100               	movlb	0	; () banked
 18380  0021EA  51B8               	movf	(??_readRegister+1)& (0+255),w,b
 18381  0021EC  0101               	movlb	1	; () banked
 18382  0021EE  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 18383  0021F0  0100               	movlb	0	; () banked
 18384  0021F2  51B9               	movf	(??_readRegister+2)& (0+255),w,b
 18385  0021F4  0101               	movlb	1	; () banked
 18386  0021F6  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 18387  0021F8  0100               	movlb	0	; () banked
 18388  0021FA  51BA               	movf	(??_readRegister+3)& (0+255),w,b
 18389  0021FC  0101               	movlb	1	; () banked
 18390  0021FE  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 18391  002200  E3BB               	bnc	l1171
 18392  002202                     l17660:
 18393                           
 18394                           ;main.c: 2568: }
 18395                           ;main.c: 2569: }
 18396                           ;main.c: 2570: }
 18397                           ;main.c: 2571: }
 18398                           ;main.c: 2573: return 0;
 18399  002202  0E00               	movlw	0
 18400  002204                     l1174:
 18401  002204  0012               	return	
 18402  002206                     __end_of_readRegister:
 18403                           	opt stack 0
 18404                           tblptru	equ	0xFF8
 18405                           tblptrh	equ	0xFF7
 18406                           tblptrl	equ	0xFF6
 18407                           tablat	equ	0xFF5
 18408                           prodh	equ	0xFF4
 18409                           prodl	equ	0xFF3
 18410                           intcon	equ	0xFF2
 18411                           indf0	equ	0xFEF
 18412                           postinc0	equ	0xFEE
 18413                           fsr0h	equ	0xFEA
 18414                           fsr0l	equ	0xFE9
 18415                           wreg	equ	0xFE8
 18416                           indf1	equ	0xFE7
 18417                           postinc1	equ	0xFE6
 18418                           postdec1	equ	0xFE5
 18419                           fsr1h	equ	0xFE2
 18420                           fsr1l	equ	0xFE1
 18421                           indf2	equ	0xFDF
 18422                           postinc2	equ	0xFDE
 18423                           postdec2	equ	0xFDD
 18424                           plusw2	equ	0xFDB
 18425                           fsr2h	equ	0xFDA
 18426                           fsr2l	equ	0xFD9
 18427                           status	equ	0xFD8
 18428                           
 18429 ;; *************** function _sendVSCPFrame *****************
 18430 ;; Defined at:
 18431 ;;		line 3285 in file "main.c"
 18432 ;; Parameters:    Size  Location     Type
 18433 ;;  vscpclass       2   51[BANK0 ] unsigned short 
 18434 ;;  vscptype        1   53[BANK0 ] unsigned char 
 18435 ;;  nodeid          1   54[BANK0 ] unsigned char 
 18436 ;;  priority        1   55[BANK0 ] unsigned char 
 18437 ;;  size            1   56[BANK0 ] unsigned char 
 18438 ;;  pData           2   57[BANK0 ] PTR unsigned char 
 18439 ;;		 -> vscpData(8), 
 18440 ;; Auto vars:     Size  Location     Type
 18441 ;;  id              4   79[BANK0 ] unsigned long 
 18442 ;; Return value:  Size  Location     Type
 18443 ;;                  1    wreg      unsigned char 
 18444 ;; Registers used:
 18445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18446 ;; Tracked objects:
 18447 ;;		On entry : F/0
 18448 ;;		On exit  : E/0
 18449 ;;		Unchanged: 0/0
 18450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18451 ;;      Params:         0       8       0       0       0       0       0
 18452 ;;      Locals:         0       4       0       0       0       0       0
 18453 ;;      Temps:          0      20       0       0       0       0       0
 18454 ;;      Totals:         0      32       0       0       0       0       0
 18455 ;;Total ram usage:       32 bytes
 18456 ;; Hardware stack levels used:    1
 18457 ;; Hardware stack levels required when called:    6
 18458 ;; This function calls:
 18459 ;;		_sendCANFrame
 18460 ;; This function is called by:
 18461 ;;		_doModeVerbose
 18462 ;;		_readRegister
 18463 ;;		_readRegisterExtended
 18464 ;;		_writeRegisterExtended
 18465 ;; This function uses a non-reentrant model
 18466 ;;
 18467                           
 18468                           	psect	text33
 18469  001F0A                     __ptext33:
 18470                           	opt stack 0
 18471  001F0A                     _sendVSCPFrame:
 18472                           	opt stack 20
 18473                           
 18474                           ; BSR set to: 0
 18475                           ;main.c: 3286: uint32_t id = ((uint32_t) priority << 26) |
 18476                           ;main.c: 3287: ((uint32_t) vscpclass << 16) |
 18477                           ;main.c: 3288: ((uint32_t) vscptype << 8) |
 18478                           ;main.c: 3289: nodeid;
 18479                           
 18480                           ;incstack = 0
 18481                           ;incstack = 0
 18482  001F0A  C095  F09B         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 18483  001F0E  6B9C               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 18484  001F10  6B9D               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 18485  001F12  6B9E               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 18486  001F14  C09D  F09E         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 18487  001F18  C09C  F09D         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 18488  001F1C  C09B  F09C         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 18489  001F20  6B9B               	clrf	??_sendVSCPFrame& (0+255),b
 18490  001F22  5193               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 18491  001F24  6F9F               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 18492  001F26  5194               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 18493  001F28  6FA0               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 18494  001F2A  6BA1               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 18495  001F2C  6BA2               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 18496  001F2E  C0A0  F0A2         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 18497  001F32  C09F  F0A1         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 18498  001F36  6BA0               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 18499  001F38  6B9F               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 18500  001F3A  C097  F0A3         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 18501  001F3E  6BA4               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 18502  001F40  6BA5               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 18503  001F42  6BA6               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 18504  001F44  0E1A               	movlw	26
 18505  001F46                     u20945:
 18506  001F46  90D8               	bcf	status,0,c
 18507  001F48  37A3               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 18508  001F4A  37A4               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 18509  001F4C  37A5               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 18510  001F4E  37A6               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 18511  001F50  2EE8               	decfsz	wreg,f,c
 18512  001F52  D7F9               	goto	u20945
 18513  001F54  519F               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 18514  001F56  11A3               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 18515  001F58  6FA7               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 18516  001F5A  51A0               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 18517  001F5C  11A4               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 18518  001F5E  6FA8               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 18519  001F60  51A1               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 18520  001F62  11A5               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 18521  001F64  6FA9               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 18522  001F66  51A2               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 18523  001F68  11A6               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 18524  001F6A  6FAA               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 18525  001F6C  519B               	movf	??_sendVSCPFrame& (0+255),w,b
 18526  001F6E  11A7               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 18527  001F70  6FAB               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 18528  001F72  519C               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 18529  001F74  11A8               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 18530  001F76  6FAC               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 18531  001F78  519D               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 18532  001F7A  11A9               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 18533  001F7C  6FAD               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 18534  001F7E  519E               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 18535  001F80  11AA               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 18536  001F82  6FAE               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 18537  001F84  5196               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 18538  001F86  11AB               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 18539  001F88  6FAF               	movwf	sendVSCPFrame@id& (0+255),b
 18540  001F8A  51AC               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 18541  001F8C  6FB0               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 18542  001F8E  51AD               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 18543  001F90  6FB1               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 18544  001F92  51AE               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 18545  001F94  6FB2               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 18546                           
 18547                           ; BSR set to: 0
 18548                           ;main.c: 3291: if (!sendCANFrame(id, size, pData)) {
 18549  001F96  C0AF  F08C         	movff	sendVSCPFrame@id,?_sendCANFrame
 18550  001F9A  C0B0  F08D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 18551  001F9E  C0B1  F08E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 18552  001FA2  C0B2  F08F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 18553  001FA6  C098  F090         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 18554  001FAA  C099  F091         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 18555  001FAE  C09A  F092         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 18556  001FB2  EC0B  F008         	call	_sendCANFrame	;wreg free
 18557  001FB6  0900               	iorlw	0
 18558                           
 18559                           ;main.c: 3293: return 0;
 18560  001FB8  0E00               	movlw	0
 18561  001FBA  A4D8               	btfss	status,2,c
 18562                           
 18563                           ;main.c: 3294: }
 18564                           ;main.c: 3296: return 1;
 18565  001FBC  0E01               	movlw	1
 18566  001FBE  0012               	return	
 18567  001FC0                     __end_of_sendVSCPFrame:
 18568                           	opt stack 0
 18569                           tblptru	equ	0xFF8
 18570                           tblptrh	equ	0xFF7
 18571                           tblptrl	equ	0xFF6
 18572                           tablat	equ	0xFF5
 18573                           prodh	equ	0xFF4
 18574                           prodl	equ	0xFF3
 18575                           intcon	equ	0xFF2
 18576                           indf0	equ	0xFEF
 18577                           postinc0	equ	0xFEE
 18578                           fsr0h	equ	0xFEA
 18579                           fsr0l	equ	0xFE9
 18580                           wreg	equ	0xFE8
 18581                           indf1	equ	0xFE7
 18582                           postinc1	equ	0xFE6
 18583                           postdec1	equ	0xFE5
 18584                           fsr1h	equ	0xFE2
 18585                           fsr1l	equ	0xFE1
 18586                           indf2	equ	0xFDF
 18587                           postinc2	equ	0xFDE
 18588                           postdec2	equ	0xFDD
 18589                           plusw2	equ	0xFDB
 18590                           fsr2h	equ	0xFDA
 18591                           fsr2l	equ	0xFD9
 18592                           status	equ	0xFD8
 18593                           
 18594 ;; *************** function _sendCANFrame *****************
 18595 ;; Defined at:
 18596 ;;		line 3331 in file "main.c"
 18597 ;; Parameters:    Size  Location     Type
 18598 ;;  id              4   44[BANK0 ] unsigned long 
 18599 ;;  dlc             1   48[BANK0 ] unsigned char 
 18600 ;;  pdata           2   49[BANK0 ] PTR unsigned char 
 18601 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 18602 ;; Auto vars:     Size  Location     Type
 18603 ;;		None
 18604 ;; Return value:  Size  Location     Type
 18605 ;;                  1    wreg      unsigned char 
 18606 ;; Registers used:
 18607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18608 ;; Tracked objects:
 18609 ;;		On entry : F/0
 18610 ;;		On exit  : E/0
 18611 ;;		Unchanged: 0/0
 18612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18613 ;;      Params:         0       7       0       0       0       0       0
 18614 ;;      Locals:         0       0       0       0       0       0       0
 18615 ;;      Temps:          0       0       0       0       0       0       0
 18616 ;;      Totals:         0       7       0       0       0       0       0
 18617 ;;Total ram usage:        7 bytes
 18618 ;; Hardware stack levels used:    1
 18619 ;; Hardware stack levels required when called:    5
 18620 ;; This function calls:
 18621 ;;		_ECANSendMessage
 18622 ;; This function is called by:
 18623 ;;		_doModeSLCAN
 18624 ;;		_receiveVSCPModeCanalMsg
 18625 ;;		_sendVSCPFrame
 18626 ;; This function uses a non-reentrant model
 18627 ;;
 18628                           
 18629                           	psect	text34
 18630  001016                     __ptext34:
 18631                           	opt stack 0
 18632  001016                     _sendCANFrame:
 18633                           	opt stack 23
 18634                           
 18635                           ; BSR set to: 0
 18636                           ;main.c: 3332: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 18637                           
 18638                           ;incstack = 0
 18639                           ;incstack = 0
 18640  001016  C08C  F067         	movff	sendCANFrame@id,?_ECANSendMessage
 18641  00101A  C08D  F068         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 18642  00101E  C08E  F069         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 18643  001022  C08F  F06A         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 18644  001026  C091  F06B         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 18645  00102A  C092  F06C         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 18646  00102E  C090  F06D         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 18647  001032  0E20               	movlw	32
 18648  001034  6F6E               	movwf	(?_ECANSendMessage+7)& (0+255),b
 18649  001036  EC74  F018         	call	_ECANSendMessage	;wreg free
 18650  00103A  0900               	iorlw	0
 18651  00103C  E107               	bnz	l17516
 18652                           
 18653                           ; BSR set to: 0
 18654                           ;main.c: 3334: can_transmitOverruns++;
 18655  00103E  0101               	movlb	1	; () banked
 18656  001040  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 18657  001042  0E00               	movlw	0
 18658  001044  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 18659  001046  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 18660  001048  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 18661                           
 18662                           ; BSR set to: 1
 18663                           ;main.c: 3335: return 0;
 18664  00104A  D001               	goto	l1374
 18665  00104C                     l17516:
 18666                           
 18667                           ; BSR set to: 0
 18668                           ;main.c: 3336: }
 18669                           ;main.c: 3338: return 1;
 18670  00104C  0E01               	movlw	1
 18671  00104E                     l1374:
 18672  00104E  0012               	return	
 18673  001050                     __end_of_sendCANFrame:
 18674                           	opt stack 0
 18675                           tblptru	equ	0xFF8
 18676                           tblptrh	equ	0xFF7
 18677                           tblptrl	equ	0xFF6
 18678                           tablat	equ	0xFF5
 18679                           prodh	equ	0xFF4
 18680                           prodl	equ	0xFF3
 18681                           intcon	equ	0xFF2
 18682                           indf0	equ	0xFEF
 18683                           postinc0	equ	0xFEE
 18684                           fsr0h	equ	0xFEA
 18685                           fsr0l	equ	0xFE9
 18686                           wreg	equ	0xFE8
 18687                           indf1	equ	0xFE7
 18688                           postinc1	equ	0xFE6
 18689                           postdec1	equ	0xFE5
 18690                           fsr1h	equ	0xFE2
 18691                           fsr1l	equ	0xFE1
 18692                           indf2	equ	0xFDF
 18693                           postinc2	equ	0xFDE
 18694                           postdec2	equ	0xFDD
 18695                           plusw2	equ	0xFDB
 18696                           fsr2h	equ	0xFDA
 18697                           fsr2l	equ	0xFD9
 18698                           status	equ	0xFD8
 18699                           
 18700 ;; *************** function _ECANSendMessage *****************
 18701 ;; Defined at:
 18702 ;;		line 617 in file "ECAN.c"
 18703 ;; Parameters:    Size  Location     Type
 18704 ;;  id              4    7[BANK0 ] unsigned long 
 18705 ;;  data            2   11[BANK0 ] PTR unsigned char 
 18706 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 18707 ;;  dataLen         1   13[BANK0 ] unsigned char 
 18708 ;;  msgFlags        1   14[BANK0 ] enum E16315
 18709 ;; Auto vars:     Size  Location     Type
 18710 ;;  pb             18   16[BANK0 ] PTR unsigned char [9]
 18711 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18712 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18713 ;;		 -> B0CON(1), 
 18714 ;;  ptr             2   42[BANK0 ] PTR unsigned char 
 18715 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18716 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18717 ;;		 -> B0CON(1), 
 18718 ;;  tempPtr         2   38[BANK0 ] PTR unsigned char 
 18719 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18720 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18721 ;;		 -> B0CON(1), 
 18722 ;;  i               1   41[BANK0 ] unsigned char 
 18723 ;;  temp            1   40[BANK0 ] unsigned char 
 18724 ;;  tempBSEL0       1   37[BANK0 ] struct .
 18725 ;;  j               1   36[BANK0 ] unsigned char 
 18726 ;;  buffers         1   35[BANK0 ] unsigned char 
 18727 ;;  mode            1   34[BANK0 ] unsigned char 
 18728 ;; Return value:  Size  Location     Type
 18729 ;;                  1    wreg      enum E15660
 18730 ;; Registers used:
 18731 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18732 ;; Tracked objects:
 18733 ;;		On entry : F/0
 18734 ;;		On exit  : F/0
 18735 ;;		Unchanged: 0/0
 18736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18737 ;;      Params:         0       8       0       0       0       0       0
 18738 ;;      Locals:         0      28       0       0       0       0       0
 18739 ;;      Temps:          0       1       0       0       0       0       0
 18740 ;;      Totals:         0      37       0       0       0       0       0
 18741 ;;Total ram usage:       37 bytes
 18742 ;; Hardware stack levels used:    1
 18743 ;; Hardware stack levels required when called:    4
 18744 ;; This function calls:
 18745 ;;		__CANIDToRegs
 18746 ;; This function is called by:
 18747 ;;		_sendCANFrame
 18748 ;; This function uses a non-reentrant model
 18749 ;;
 18750                           
 18751                           	psect	text35
 18752  0030E8                     __ptext35:
 18753                           	opt stack 0
 18754  0030E8                     _ECANSendMessage:
 18755                           	opt stack 23
 18756                           
 18757                           ; BSR set to: 0
 18758                           ;ECAN.c: 619: BYTE mode;
 18759                           ;ECAN.c: 620: BYTE buffers;
 18760                           ;ECAN.c: 628: BYTE i,j;
 18761                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 18762                           ;ECAN.c: 630: BYTE* pb[9];
 18763                           ;ECAN.c: 631: BYTE temp;
 18764                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 18765                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 18766                           
 18767                           ;incstack = 0
 18768                           ;incstack = 0
 18769  0030E8  0E0F               	movlw	15	;volatile
 18770  0030EA  0100               	movlb	0	; () banked
 18771  0030EC  6F71               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 18772  0030EE  0E40               	movlw	64	;volatile
 18773  0030F0  6F70               	movwf	ECANSendMessage@pb& (0+255),b
 18774                           
 18775                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 18776  0030F2  0E0F               	movlw	15	;volatile
 18777  0030F4  6F73               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 18778  0030F6  0E30               	movlw	48	;volatile
 18779  0030F8  6F72               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 18780                           
 18781                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 18782  0030FA  0E0F               	movlw	15	;volatile
 18783  0030FC  6F75               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 18784  0030FE  0E20               	movlw	32	;volatile
 18785  003100  6F74               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 18786                           
 18787                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 18788  003102  0E0E               	movlw	14	;volatile
 18789  003104  6F77               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 18790  003106  0E20               	movlw	32	;volatile
 18791  003108  6F76               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 18792                           
 18793                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 18794  00310A  0E0E               	movlw	14	;volatile
 18795  00310C  6F79               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 18796  00310E  0E30               	movlw	48	;volatile
 18797  003110  6F78               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 18798                           
 18799                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 18800  003112  0E0E               	movlw	14	;volatile
 18801  003114  6F7B               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 18802  003116  0E40               	movlw	64	;volatile
 18803  003118  6F7A               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 18804                           
 18805                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 18806  00311A  0E0E               	movlw	14	;volatile
 18807  00311C  6F7D               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 18808  00311E  0E50               	movlw	80	;volatile
 18809  003120  6F7C               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 18810                           
 18811                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 18812  003122  0E0E               	movlw	14	;volatile
 18813  003124  6F7F               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 18814  003126  0E60               	movlw	96	;volatile
 18815  003128  6F7E               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 18816                           
 18817                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 18818  00312A  0E0E               	movlw	14	;volatile
 18819  00312C  6F81               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 18820  00312E  0E70               	movlw	112	;volatile
 18821  003130  6F80               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 18822                           
 18823                           ; BSR set to: 0
 18824                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 18825  003132  5077               	movf	3959,w,c	;volatile
 18826  003134  0BC0               	andlw	192
 18827  003136  6F82               	movwf	ECANSendMessage@mode& (0+255),b
 18828                           
 18829                           ; BSR set to: 0
 18830                           ;ECAN.c: 660: if ( mode == 0x00 )
 18831  003138  6782               	tstfsz	ECANSendMessage@mode& (0+255),b
 18832  00313A  D002               	goto	l17682
 18833                           
 18834                           ; BSR set to: 0
 18835                           ;ECAN.c: 661: buffers = 2;
 18836  00313C  0E02               	movlw	2
 18837  00313E  D001               	goto	L18
 18838  003140                     l17682:
 18839                           
 18840                           ; BSR set to: 0
 18841                           ;ECAN.c: 662: else
 18842                           ;ECAN.c: 663: buffers = 8;
 18843  003140  0E08               	movlw	8
 18844  003142                     L18:
 18845  003142  6F83               	movwf	ECANSendMessage@buffers& (0+255),b
 18846                           
 18847                           ; BSR set to: 0
 18848                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 18849  003144  010D               	movlb	13	; () banked
 18850  003146  90D8               	bcf	status,0,c
 18851  003148  31F8               	rrcf	248,w,b	;volatile
 18852  00314A  0100               	movlb	0	; () banked
 18853  00314C  6F85               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 18854                           
 18855                           ; BSR set to: 0
 18856                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 18857  00314E  6B89               	clrf	ECANSendMessage@i& (0+255),b
 18858  003150  D07D               	goto	l17742
 18859  003152                     l17688:
 18860                           
 18861                           ; BSR set to: 0
 18862                           ;ECAN.c: 688: {
 18863                           ;ECAN.c: 693: ptr = pb[i];
 18864  003152  5189               	movf	ECANSendMessage@i& (0+255),w,b
 18865  003154  0D02               	mullw	2
 18866  003156  50F3               	movf	prodl,w,c
 18867  003158  0F70               	addlw	low ECANSendMessage@pb
 18868  00315A  6ED9               	movwf	fsr2l,c
 18869  00315C  6ADA               	clrf	fsr2h,c
 18870  00315E  CFDE F08A          	movff	postinc2,ECANSendMessage@ptr
 18871  003162  CFDD F08B          	movff	postdec2,ECANSendMessage@ptr+1
 18872                           
 18873                           ; BSR set to: 0
 18874                           ;ECAN.c: 694: tempPtr = ptr;
 18875  003166  C08A  F086         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 18876  00316A  C08B  F087         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 18877                           
 18878                           ; BSR set to: 0
 18879                           ;ECAN.c: 702: if ( i > 2 )
 18880  00316E  0E02               	movlw	2
 18881  003170  6589               	cpfsgt	ECANSendMessage@i& (0+255),b
 18882  003172  D004               	goto	l17700
 18883                           
 18884                           ; BSR set to: 0
 18885                           ;ECAN.c: 703: {
 18886                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 18887  003174  90D8               	bcf	status,0,c
 18888  003176  3385               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 18889                           
 18890                           ; BSR set to: 0
 18891                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 18892  003178  A185               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 18893  00317A  D067               	goto	l17740
 18894  00317C                     l17700:
 18895                           
 18896                           ; BSR set to: 0
 18897                           ;ECAN.c: 714: }
 18898                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 18899  00317C  C08A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18900  003180  C08B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18901  003184  50DF               	movf	indf2,w,c
 18902  003186  6F6F               	movwf	??_ECANSendMessage& (0+255),b
 18903  003188  B76F               	btfsc	??_ECANSendMessage& (0+255),3,b
 18904  00318A  D05F               	goto	l17740
 18905                           
 18906                           ; BSR set to: 0
 18907                           ;ECAN.c: 721: {
 18908                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 18909  00318C  C08A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18910  003190  C08B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18911  003194  0EFC               	movlw	252
 18912  003196  16DF               	andwf	indf2,f,c
 18913                           
 18914                           ; BSR set to: 0
 18915                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 18916  003198  C06E  F06F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 18917  00319C  0E03               	movlw	3
 18918  00319E  176F               	andwf	??_ECANSendMessage& (0+255),f,b
 18919  0031A0  C08A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 18920  0031A4  C08B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 18921  0031A8  516F               	movf	??_ECANSendMessage& (0+255),w,b
 18922  0031AA  12DF               	iorwf	indf2,f,c
 18923                           
 18924                           ; BSR set to: 0
 18925                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 18926  0031AC  AD6E               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 18927  0031AE  D004               	goto	l1542
 18928                           
 18929                           ; BSR set to: 0
 18930                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 18931  0031B0  516D               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18932  0031B2  0940               	iorlw	64
 18933  0031B4  6F88               	movwf	ECANSendMessage@temp& (0+255),b
 18934  0031B6  D002               	goto	l17710
 18935  0031B8                     l1542:
 18936                           
 18937                           ; BSR set to: 0
 18938                           ;ECAN.c: 729: else
 18939                           ;ECAN.c: 730: temp = dataLen;
 18940  0031B8  C06D  F088         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 18941  0031BC                     l17710:
 18942                           
 18943                           ; BSR set to: 0
 18944                           ;ECAN.c: 732: *(ptr+5) = temp;
 18945  0031BC  EE20 F005          	lfsr	2,5
 18946  0031C0  518A               	movf	ECANSendMessage@ptr& (0+255),w,b
 18947  0031C2  26D9               	addwf	fsr2l,f,c
 18948  0031C4  518B               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 18949  0031C6  22DA               	addwfc	fsr2h,f,c
 18950  0031C8  C088  FFDF         	movff	ECANSendMessage@temp,indf2
 18951                           
 18952                           ; BSR set to: 0
 18953                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 18954  0031CC  AB6E               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 18955  0031CE  D003               	goto	l1544
 18956                           
 18957                           ; BSR set to: 0
 18958                           ;ECAN.c: 736: temp = 1;
 18959  0031D0  0E01               	movlw	1
 18960  0031D2  6F88               	movwf	ECANSendMessage@temp& (0+255),b
 18961  0031D4  D001               	goto	l17716
 18962  0031D6                     l1544:
 18963                           
 18964                           ; BSR set to: 0
 18965                           ;ECAN.c: 738: else
 18966                           ;ECAN.c: 739: temp = 0;
 18967  0031D6  6B88               	clrf	ECANSendMessage@temp& (0+255),b
 18968  0031D8                     l17716:
 18969                           
 18970                           ; BSR set to: 0
 18971                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 18972  0031D8  298A               	incf	ECANSendMessage@ptr& (0+255),w,b
 18973  0031DA  6F60               	movwf	?__CANIDToRegs& (0+255),b
 18974  0031DC  0E00               	movlw	0
 18975  0031DE  218B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 18976  0031E0  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 18977  0031E2  C067  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 18978  0031E6  C068  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 18979  0031EA  C069  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 18980  0031EE  C06A  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 18981  0031F2  C088  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 18982  0031F6  EC88  F015         	call	__CANIDToRegs	;wreg free
 18983                           
 18984                           ; BSR set to: 0
 18985                           ;ECAN.c: 745: ptr += 6;
 18986  0031FA  0E06               	movlw	6
 18987  0031FC  278A               	addwf	ECANSendMessage@ptr& (0+255),f,b
 18988  0031FE  0E00               	movlw	0
 18989  003200  238B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 18990                           
 18991                           ; BSR set to: 0
 18992                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 18993  003202  6B84               	clrf	ECANSendMessage@j& (0+255),b
 18994  003204  D00F               	goto	l17730
 18995  003206                     l17722:
 18996                           
 18997                           ; BSR set to: 0
 18998                           ;ECAN.c: 748: *ptr++ = *data++;
 18999  003206  C06B  FFD9         	movff	ECANSendMessage@data,fsr2l
 19000  00320A  C06C  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 19001  00320E  C08A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 19002  003212  C08B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 19003  003216  CFDF FFE7          	movff	indf2,indf1
 19004                           
 19005                           ; BSR set to: 0
 19006  00321A  4B6B               	infsnz	ECANSendMessage@data& (0+255),f,b
 19007  00321C  2B6C               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 19008                           
 19009                           ; BSR set to: 0
 19010  00321E  4B8A               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 19011  003220  2B8B               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 19012                           
 19013                           ; BSR set to: 0
 19014  003222  2B84               	incf	ECANSendMessage@j& (0+255),f,b
 19015  003224                     l17730:
 19016                           
 19017                           ; BSR set to: 0
 19018  003224  516D               	movf	ECANSendMessage@dataLen& (0+255),w,b
 19019  003226  5D84               	subwf	ECANSendMessage@j& (0+255),w,b
 19020  003228  E3EE               	bnc	l17722
 19021                           
 19022                           ; BSR set to: 0
 19023                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 19024  00322A  C086  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 19025  00322E  C087  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 19026  003232  50DF               	movf	indf2,w,c
 19027  003234  6F6F               	movwf	??_ECANSendMessage& (0+255),b
 19028  003236  B56F               	btfsc	??_ECANSendMessage& (0+255),2,b
 19029  003238  D006               	goto	l17736
 19030                           
 19031                           ; BSR set to: 0
 19032                           ;ECAN.c: 753: *tempPtr |= 0x08;
 19033  00323A  C086  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 19034  00323E  C087  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 19035  003242  0E00               	movlw	0
 19036  003244  86DB               	bsf	plusw2,3,c
 19037  003246                     l17736:
 19038                           
 19039                           ; BSR set to: 0
 19040                           ;ECAN.c: 755: return TRUE;
 19041  003246  0E01               	movlw	1
 19042  003248  D005               	goto	l1550
 19043  00324A                     l17740:
 19044                           
 19045                           ; BSR set to: 0
 19046  00324A  2B89               	incf	ECANSendMessage@i& (0+255),f,b
 19047  00324C                     l17742:
 19048                           
 19049                           ; BSR set to: 0
 19050  00324C  5183               	movf	ECANSendMessage@buffers& (0+255),w,b
 19051  00324E  5D89               	subwf	ECANSendMessage@i& (0+255),w,b
 19052  003250  E380               	bnc	l17688
 19053                           
 19054                           ; BSR set to: 0
 19055                           ;ECAN.c: 756: }
 19056                           ;ECAN.c: 757: }
 19057                           ;ECAN.c: 760: return FALSE;
 19058  003252  0E00               	movlw	0
 19059  003254                     l1550:
 19060                           
 19061                           ; BSR set to: 0
 19062  003254  0012               	return	
 19063  003256                     __end_of_ECANSendMessage:
 19064                           	opt stack 0
 19065                           tblptru	equ	0xFF8
 19066                           tblptrh	equ	0xFF7
 19067                           tblptrl	equ	0xFF6
 19068                           tablat	equ	0xFF5
 19069                           prodh	equ	0xFF4
 19070                           prodl	equ	0xFF3
 19071                           intcon	equ	0xFF2
 19072                           indf0	equ	0xFEF
 19073                           postinc0	equ	0xFEE
 19074                           fsr0h	equ	0xFEA
 19075                           fsr0l	equ	0xFE9
 19076                           wreg	equ	0xFE8
 19077                           indf1	equ	0xFE7
 19078                           postinc1	equ	0xFE6
 19079                           postdec1	equ	0xFE5
 19080                           fsr1h	equ	0xFE2
 19081                           fsr1l	equ	0xFE1
 19082                           indf2	equ	0xFDF
 19083                           postinc2	equ	0xFDE
 19084                           postdec2	equ	0xFDD
 19085                           plusw2	equ	0xFDB
 19086                           fsr2h	equ	0xFDA
 19087                           fsr2l	equ	0xFD9
 19088                           status	equ	0xFD8
 19089                           
 19090 ;; *************** function _checkCANBusState *****************
 19091 ;; Defined at:
 19092 ;;		line 592 in file "main.c"
 19093 ;; Parameters:    Size  Location     Type
 19094 ;;		None
 19095 ;; Auto vars:     Size  Location     Type
 19096 ;;		None
 19097 ;; Return value:  Size  Location     Type
 19098 ;;		None               void
 19099 ;; Registers used:
 19100 ;;		wreg, status,2
 19101 ;; Tracked objects:
 19102 ;;		On entry : 0/1
 19103 ;;		On exit  : 0/0
 19104 ;;		Unchanged: 0/0
 19105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19106 ;;      Params:         0       0       0       0       0       0       0
 19107 ;;      Locals:         0       0       0       0       0       0       0
 19108 ;;      Temps:          0       0       0       0       0       0       0
 19109 ;;      Totals:         0       0       0       0       0       0       0
 19110 ;;Total ram usage:        0 bytes
 19111 ;; Hardware stack levels used:    1
 19112 ;; Hardware stack levels required when called:    3
 19113 ;; This function calls:
 19114 ;;		Nothing
 19115 ;; This function is called by:
 19116 ;;		_main
 19117 ;;		_readRegister
 19118 ;;		_readRegisterExtended
 19119 ;;		_writeRegisterExtended
 19120 ;; This function uses a non-reentrant model
 19121 ;;
 19122                           
 19123                           	psect	text36
 19124  000E4E                     __ptext36:
 19125                           	opt stack 0
 19126  000E4E                     _checkCANBusState:
 19127                           	opt stack 23
 19128                           
 19129                           ;main.c: 594: if ( COMSTATbits.TXBO ) {
 19130                           
 19131                           ; BSR set to: 0
 19132                           ;incstack = 0
 19133                           ;incstack = 0
 19134  000E4E  AA74               	btfss	3956,5,c	;volatile
 19135  000E50  D002               	goto	l499
 19136                           
 19137                           ;main.c: 596: ledFunctionality = 6;
 19138  000E52  0E06               	movlw	6
 19139  000E54  D009               	goto	L19
 19140  000E56                     l499:
 19141                           
 19142                           ;main.c: 598: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
 19143  000E56  B874               	btfsc	3956,4,c	;volatile
 19144  000E58  D002               	goto	l11130
 19145  000E5A  A674               	btfss	3956,3,c	;volatile
 19146  000E5C  D002               	goto	l501
 19147  000E5E                     l11130:
 19148                           
 19149                           ;main.c: 600: ledFunctionality = 5;
 19150  000E5E  0E05               	movlw	5
 19151  000E60  D003               	goto	L19
 19152  000E62                     l501:
 19153                           
 19154                           ;main.c: 604: ledFunctionality = 4;
 19155  000E62  0E04               	movlw	4
 19156                           
 19157                           ;main.c: 602: else if ( COMSTATbits.EWARN ) {
 19158  000E64  A074               	btfss	3956,0,c	;volatile
 19159                           
 19160                           ;main.c: 606: else {
 19161                           ;main.c: 608: ledFunctionality = 1;
 19162                           
 19163                           ;main.c: 605: }
 19164  000E66  0E01               	movlw	1
 19165  000E68                     L19:
 19166  000E68  6E30               	movwf	_ledFunctionality,c	;volatile
 19167  000E6A  0012               	return	
 19168  000E6C                     __end_of_checkCANBusState:
 19169                           	opt stack 0
 19170                           tblptru	equ	0xFF8
 19171                           tblptrh	equ	0xFF7
 19172                           tblptrl	equ	0xFF6
 19173                           tablat	equ	0xFF5
 19174                           prodh	equ	0xFF4
 19175                           prodl	equ	0xFF3
 19176                           intcon	equ	0xFF2
 19177                           indf0	equ	0xFEF
 19178                           postinc0	equ	0xFEE
 19179                           fsr0h	equ	0xFEA
 19180                           fsr0l	equ	0xFE9
 19181                           wreg	equ	0xFE8
 19182                           indf1	equ	0xFE7
 19183                           postinc1	equ	0xFE6
 19184                           postdec1	equ	0xFE5
 19185                           fsr1h	equ	0xFE2
 19186                           fsr1l	equ	0xFE1
 19187                           indf2	equ	0xFDF
 19188                           postinc2	equ	0xFDE
 19189                           postdec2	equ	0xFDD
 19190                           plusw2	equ	0xFDB
 19191                           fsr2h	equ	0xFDA
 19192                           fsr2l	equ	0xFD9
 19193                           status	equ	0xFD8
 19194                           
 19195 ;; *************** function _memset *****************
 19196 ;; Defined at:
 19197 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 19198 ;; Parameters:    Size  Location     Type
 19199 ;;  p1              2    0[BANK0 ] PTR void 
 19200 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 19201 ;;  c               2    2[BANK0 ] int 
 19202 ;;  n               2    4[BANK0 ] unsigned int 
 19203 ;; Auto vars:     Size  Location     Type
 19204 ;;  p               2   30[COMRAM] PTR unsigned char 
 19205 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 19206 ;; Return value:  Size  Location     Type
 19207 ;;                  2    0[BANK0 ] PTR void 
 19208 ;; Registers used:
 19209 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19210 ;; Tracked objects:
 19211 ;;		On entry : F/0
 19212 ;;		On exit  : F/0
 19213 ;;		Unchanged: 0/0
 19214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19215 ;;      Params:         0       6       0       0       0       0       0
 19216 ;;      Locals:         2       0       0       0       0       0       0
 19217 ;;      Temps:          0       0       0       0       0       0       0
 19218 ;;      Totals:         2       6       0       0       0       0       0
 19219 ;;Total ram usage:        8 bytes
 19220 ;; Hardware stack levels used:    1
 19221 ;; Hardware stack levels required when called:    3
 19222 ;; This function calls:
 19223 ;;		Nothing
 19224 ;; This function is called by:
 19225 ;;		_doModeVerbose
 19226 ;;		_doModeSLCAN
 19227 ;;		_printGUID
 19228 ;;		_printMDF
 19229 ;;		_printNodeFirmwareVersion
 19230 ;; This function uses a non-reentrant model
 19231 ;;
 19232                           
 19233                           	psect	text37
 19234  000EB4                     __ptext37:
 19235                           	opt stack 0
 19236  000EB4                     _memset:
 19237                           	opt stack 25
 19238                           
 19239                           ; BSR set to: 0
 19240                           
 19241                           ;incstack = 0
 19242                           ;incstack = 0
 19243  000EB4  C060  F01F         	movff	memset@p1,memset@p
 19244  000EB8  C061  F020         	movff	memset@p1+1,memset@p+1
 19245  000EBC  D008               	goto	l16328
 19246  000EBE                     l16324:
 19247                           
 19248                           ; BSR set to: 0
 19249  000EBE  C01F  FFD9         	movff	memset@p,fsr2l
 19250  000EC2  C020  FFDA         	movff	memset@p+1,fsr2h
 19251  000EC6  C062  FFDF         	movff	memset@c,indf2
 19252                           
 19253                           ; BSR set to: 0
 19254  000ECA  4A1F               	infsnz	memset@p,f,c
 19255  000ECC  2A20               	incf	memset@p+1,f,c
 19256  000ECE                     l16328:
 19257                           
 19258                           ; BSR set to: 0
 19259  000ECE  0764               	decf	memset@n& (0+255),f,b
 19260  000ED0  A0D8               	btfss	status,0,c
 19261  000ED2  0765               	decf	(memset@n+1)& (0+255),f,b
 19262  000ED4  0100               	movlb	0	; () banked
 19263  000ED6  2964               	incf	memset@n& (0+255),w,b
 19264  000ED8  B4D8               	btfsc	status,2,c
 19265  000EDA  2965               	incf	(memset@n+1)& (0+255),w,b
 19266  000EDC  B4D8               	btfsc	status,2,c
 19267                           
 19268                           ; BSR set to: 0
 19269  000EDE  0012               	return	
 19270  000EE0  D7EE               	goto	l16324
 19271  000EE2                     __end_of_memset:
 19272                           	opt stack 0
 19273                           tblptru	equ	0xFF8
 19274                           tblptrh	equ	0xFF7
 19275                           tblptrl	equ	0xFF6
 19276                           tablat	equ	0xFF5
 19277                           prodh	equ	0xFF4
 19278                           prodl	equ	0xFF3
 19279                           intcon	equ	0xFF2
 19280                           indf0	equ	0xFEF
 19281                           postinc0	equ	0xFEE
 19282                           fsr0h	equ	0xFEA
 19283                           fsr0l	equ	0xFE9
 19284                           wreg	equ	0xFE8
 19285                           indf1	equ	0xFE7
 19286                           postinc1	equ	0xFE6
 19287                           postdec1	equ	0xFE5
 19288                           fsr1h	equ	0xFE2
 19289                           fsr1l	equ	0xFE1
 19290                           indf2	equ	0xFDF
 19291                           postinc2	equ	0xFDE
 19292                           postdec2	equ	0xFDD
 19293                           plusw2	equ	0xFDB
 19294                           fsr2h	equ	0xFDA
 19295                           fsr2l	equ	0xFD9
 19296                           status	equ	0xFD8
 19297                           
 19298 ;; *************** function _printHelp *****************
 19299 ;; Defined at:
 19300 ;;		line 2886 in file "main.c"
 19301 ;; Parameters:    Size  Location     Type
 19302 ;;		None
 19303 ;; Auto vars:     Size  Location     Type
 19304 ;;		None
 19305 ;; Return value:  Size  Location     Type
 19306 ;;		None               void
 19307 ;; Registers used:
 19308 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19309 ;; Tracked objects:
 19310 ;;		On entry : F/0
 19311 ;;		On exit  : 0/0
 19312 ;;		Unchanged: 0/0
 19313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19314 ;;      Params:         0       0       0       0       0       0       0
 19315 ;;      Locals:         0       0       0       0       0       0       0
 19316 ;;      Temps:          0       0       0       0       0       0       0
 19317 ;;      Totals:         0       0       0       0       0       0       0
 19318 ;;Total ram usage:        0 bytes
 19319 ;; Hardware stack levels used:    1
 19320 ;; Hardware stack levels required when called:    5
 19321 ;; This function calls:
 19322 ;;		_putsUSART
 19323 ;; This function is called by:
 19324 ;;		_doModeVerbose
 19325 ;; This function uses a non-reentrant model
 19326 ;;
 19327                           
 19328                           	psect	text38
 19329  003256                     __ptext38:
 19330                           	opt stack 0
 19331  003256                     _printHelp:
 19332                           	opt stack 23
 19333                           
 19334                           ; BSR set to: 0
 19335                           ;main.c: 2887: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 19336                           
 19337                           ; BSR set to: 0
 19338                           ;incstack = 0
 19339                           ;incstack = 0
 19340  003256  0E74               	movlw	high STR_246
 19341  003258  6E21               	movwf	?_putsUSART+1,c
 19342  00325A  0E6E               	movlw	low STR_246
 19343  00325C  6E20               	movwf	?_putsUSART,c
 19344  00325E  EC74  F009         	call	_putsUSART	;wreg free
 19345                           
 19346                           ;main.c: 2888: putsUSART((char *) "------------------------------------\r\n");
 19347  003262  0E6D               	movlw	high (STR_279+28)
 19348  003264  6E21               	movwf	?_putsUSART+1,c
 19349  003266  0E48               	movlw	low (STR_279+28)
 19350  003268  6E20               	movwf	?_putsUSART,c
 19351  00326A  EC74  F009         	call	_putsUSART	;wreg free
 19352                           
 19353                           ;main.c: 2889: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 19354  00326E  0E77               	movlw	high STR_248
 19355  003270  6E21               	movwf	?_putsUSART+1,c
 19356  003272  0E88               	movlw	low STR_248
 19357  003274  6E20               	movwf	?_putsUSART,c
 19358  003276  EC74  F009         	call	_putsUSART	;wreg free
 19359                           
 19360                           ;main.c: 2890: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 19361  00327A  0E72               	movlw	high STR_249
 19362  00327C  6E21               	movwf	?_putsUSART+1,c
 19363  00327E  0ED4               	movlw	low STR_249
 19364  003280  6E20               	movwf	?_putsUSART,c
 19365  003282  EC74  F009         	call	_putsUSART	;wreg free
 19366                           
 19367                           ;main.c: 2891: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 19368  003286  0E72               	movlw	high STR_250
 19369  003288  6E21               	movwf	?_putsUSART+1,c
 19370  00328A  0E7A               	movlw	low STR_250
 19371  00328C  6E20               	movwf	?_putsUSART,c
 19372  00328E  EC74  F009         	call	_putsUSART	;wreg free
 19373                           
 19374                           ;main.c: 2892: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 19375  003292  0E70               	movlw	high STR_251
 19376  003294  6E21               	movwf	?_putsUSART+1,c
 19377  003296  0EC5               	movlw	low STR_251
 19378  003298  6E20               	movwf	?_putsUSART,c
 19379  00329A  EC74  F009         	call	_putsUSART	;wreg free
 19380                           
 19381                           ;main.c: 2893: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 19382  00329E  0E71               	movlw	high STR_252
 19383  0032A0  6E21               	movwf	?_putsUSART+1,c
 19384  0032A2  0E2A               	movlw	low STR_252
 19385  0032A4  6E20               	movwf	?_putsUSART,c
 19386  0032A6  EC74  F009         	call	_putsUSART	;wreg free
 19387                           
 19388                           ;main.c: 2894: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 19389  0032AA  0E77               	movlw	high STR_253
 19390  0032AC  6E21               	movwf	?_putsUSART+1,c
 19391  0032AE  0E15               	movlw	low STR_253
 19392  0032B0  6E20               	movwf	?_putsUSART,c
 19393  0032B2  EC74  F009         	call	_putsUSART	;wreg free
 19394                           
 19395                           ;main.c: 2895: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 19396  0032B6  0E71               	movlw	high STR_254
 19397  0032B8  6E21               	movwf	?_putsUSART+1,c
 19398  0032BA  0E5C               	movlw	low STR_254
 19399  0032BC  6E20               	movwf	?_putsUSART,c
 19400  0032BE  EC74  F009         	call	_putsUSART	;wreg free
 19401                           
 19402                           ;main.c: 2896: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 19403  0032C2  0E72               	movlw	high STR_255
 19404  0032C4  6E21               	movwf	?_putsUSART+1,c
 19405  0032C6  0EA8               	movlw	low STR_255
 19406  0032C8  6E20               	movwf	?_putsUSART,c
 19407  0032CA  EC74  F009         	call	_putsUSART	;wreg free
 19408                           
 19409                           ;main.c: 2897: putsUSART((char *) "TX - Send CAN frame .\r\n");
 19410  0032CE  0E78               	movlw	high STR_256
 19411  0032D0  6E21               	movwf	?_putsUSART+1,c
 19412  0032D2  0E3E               	movlw	low STR_256
 19413  0032D4  6E20               	movwf	?_putsUSART,c
 19414  0032D6  EC74  F009         	call	_putsUSART	;wreg free
 19415                           
 19416                           ;main.c: 2898: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 19417  0032DA  0E6E               	movlw	high STR_257
 19418  0032DC  6E21               	movwf	?_putsUSART+1,c
 19419  0032DE  0EDF               	movlw	low STR_257
 19420  0032E0  6E20               	movwf	?_putsUSART,c
 19421  0032E2  EC74  F009         	call	_putsUSART	;wreg free
 19422                           
 19423                           ;main.c: 2899: putsUSART((char *) "RX - Read CAN frame.\r\n");
 19424  0032E6  0E78               	movlw	high STR_258
 19425  0032E8  6E21               	movwf	?_putsUSART+1,c
 19426  0032EA  0EFE               	movlw	low STR_258
 19427  0032EC  6E20               	movwf	?_putsUSART,c
 19428  0032EE  EC74  F009         	call	_putsUSART	;wreg free
 19429                           
 19430                           ;main.c: 2900: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 19431  0032F2  0E76               	movlw	high STR_259
 19432  0032F4  6E21               	movwf	?_putsUSART+1,c
 19433  0032F6  0E52               	movlw	low STR_259
 19434  0032F8  6E20               	movwf	?_putsUSART,c
 19435  0032FA  EC74  F009         	call	_putsUSART	;wreg free
 19436                           
 19437                           ;main.c: 2901: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 19438  0032FE  0E74               	movlw	high STR_260
 19439  003300  6E21               	movwf	?_putsUSART+1,c
 19440  003302  0E47               	movlw	low STR_260
 19441  003304  6E20               	movwf	?_putsUSART,c
 19442  003306  EC74  F009         	call	_putsUSART	;wreg free
 19443                           
 19444                           ;main.c: 2902: putsUSART((char *) "HELP - Display this help information.\r\n");
 19445  00330A  0E73               	movlw	high STR_261
 19446  00330C  6E21               	movwf	?_putsUSART+1,c
 19447  00330E  0EA8               	movlw	low STR_261
 19448  003310  6E20               	movwf	?_putsUSART,c
 19449  003312  EC74  F009         	call	_putsUSART	;wreg free
 19450                           
 19451                           ;main.c: 2903: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 19452  003316  0E72               	movlw	high STR_262
 19453  003318  6E21               	movwf	?_putsUSART+1,c
 19454  00331A  0E1D               	movlw	low STR_262
 19455  00331C  6E20               	movwf	?_putsUSART,c
 19456  00331E  EC74  F009         	call	_putsUSART	;wreg free
 19457                           
 19458                           ;main.c: 2904: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 19459  003322  0E6C               	movlw	high STR_263
 19460  003324  6E21               	movwf	?_putsUSART+1,c
 19461  003326  0E4F               	movlw	low STR_263
 19462  003328  6E20               	movwf	?_putsUSART,c
 19463  00332A  EC74  F009         	call	_putsUSART	;wreg free
 19464                           
 19465                           ;main.c: 2905: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 19466  00332E  0E6C               	movlw	high STR_264
 19467  003330  6E21               	movwf	?_putsUSART+1,c
 19468  003332  0E9B               	movlw	low STR_264
 19469  003334  6E20               	movwf	?_putsUSART,c
 19470  003336  EC74  F009         	call	_putsUSART	;wreg free
 19471                           
 19472                           ;main.c: 2906: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 19473  00333A  0E6C               	movlw	high STR_265
 19474  00333C  6E21               	movwf	?_putsUSART+1,c
 19475  00333E  0E02               	movlw	low STR_265
 19476  003340  6E20               	movwf	?_putsUSART,c
 19477  003342  EC74  F009         	call	_putsUSART	;wreg free
 19478                           
 19479                           ;main.c: 2907: putsUSART((char *) "FILTER - Set filter .\r\n");
 19480  003346  0E78               	movlw	high STR_266
 19481  003348  6E21               	movwf	?_putsUSART+1,c
 19482  00334A  0E56               	movlw	low STR_266
 19483  00334C  6E20               	movwf	?_putsUSART,c
 19484  00334E  EC74  F009         	call	_putsUSART	;wreg free
 19485                           
 19486                           ;main.c: 2908: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 19487  003352  0E6B               	movlw	high STR_267
 19488  003354  6E21               	movwf	?_putsUSART+1,c
 19489  003356  0EB4               	movlw	low STR_267
 19490  003358  6E20               	movwf	?_putsUSART,c
 19491  00335A  EC74  F009         	call	_putsUSART	;wreg free
 19492                           
 19493                           ;main.c: 2909: putsUSART((char *) "MASK - Set mask .\r\n");
 19494  00335E  0E79               	movlw	high STR_268
 19495  003360  6E21               	movwf	?_putsUSART+1,c
 19496  003362  0EDC               	movlw	low STR_268
 19497  003364  6E20               	movwf	?_putsUSART,c
 19498  003366  EC74  F009         	call	_putsUSART	;wreg free
 19499                           
 19500                           ;main.c: 2910: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 19501  00336A  0E6C               	movlw	high STR_269
 19502  00336C  6E21               	movwf	?_putsUSART+1,c
 19503  00336E  0EE5               	movlw	low STR_269
 19504  003370  6E20               	movwf	?_putsUSART,c
 19505  003372  EC74  F009         	call	_putsUSART	;wreg free
 19506                           
 19507                           ;main.c: 2911: putsUSART((char *) "SET - Persistent functionality.\r\n");
 19508  003376  0E76               	movlw	high STR_270
 19509  003378  6E21               	movwf	?_putsUSART+1,c
 19510  00337A  0E30               	movlw	low STR_270
 19511  00337C  6E20               	movwf	?_putsUSART,c
 19512  00337E  EC74  F009         	call	_putsUSART	;wreg free
 19513                           
 19514                           ;main.c: 2912: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 19515  003382  0E71               	movlw	high STR_271
 19516  003384  6E21               	movwf	?_putsUSART+1,c
 19517  003386  0EEE               	movlw	low STR_271
 19518  003388  6E20               	movwf	?_putsUSART,c
 19519  00338A  EC74  F009         	call	_putsUSART	;wreg free
 19520                           
 19521                           ;main.c: 2913: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 19522  00338E  0E71               	movlw	high STR_272
 19523  003390  6E21               	movwf	?_putsUSART+1,c
 19524  003392  0EBF               	movlw	low STR_272
 19525  003394  6E20               	movwf	?_putsUSART,c
 19526  003396  EC74  F009         	call	_putsUSART	;wreg free
 19527                           
 19528                           ;main.c: 2914: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=20 ms .\r\n");
 19529  00339A  0E6D               	movlw	high STR_273
 19530  00339C  6E21               	movwf	?_putsUSART+1,c
 19531  00339E  0E6F               	movlw	low STR_273
 19532  0033A0  6E20               	movwf	?_putsUSART,c
 19533  0033A2  EC74  F009         	call	_putsUSART	;wreg free
 19534                           
 19535                           ;main.c: 2915: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 19536  0033A6  0E71               	movlw	high STR_274
 19537  0033A8  6E21               	movwf	?_putsUSART+1,c
 19538  0033AA  0E8E               	movlw	low STR_274
 19539  0033AC  6E20               	movwf	?_putsUSART,c
 19540  0033AE  EC74  F009         	call	_putsUSART	;wreg free
 19541                           
 19542                           ;main.c: 2916: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 19543  0033B2  0E6F               	movlw	high STR_275
 19544  0033B4  6E21               	movwf	?_putsUSART+1,c
 19545  0033B6  0E4E               	movlw	low STR_275
 19546  0033B8  6E20               	movwf	?_putsUSART,c
 19547  0033BA  EC74  F009         	call	_putsUSART	;wreg free
 19548                           
 19549                           ;main.c: 2917: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 19550  0033BE  0E6D               	movlw	high STR_276
 19551  0033C0  6E21               	movwf	?_putsUSART+1,c
 19552  0033C2  0EF4               	movlw	low STR_276
 19553  0033C4  6E20               	movwf	?_putsUSART,c
 19554  0033C6  EC74  F009         	call	_putsUSART	;wreg free
 19555                           
 19556                           ;main.c: 2918: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 19557  0033CA  0E74               	movlw	high STR_277
 19558  0033CC  6E21               	movwf	?_putsUSART+1,c
 19559  0033CE  0EE3               	movlw	low STR_277
 19560  0033D0  6E20               	movwf	?_putsUSART,c
 19561  0033D2  EF74  F009         	goto	_putsUSART	;wreg free
 19562  0033D6                     __end_of_printHelp:
 19563                           	opt stack 0
 19564                           tblptru	equ	0xFF8
 19565                           tblptrh	equ	0xFF7
 19566                           tblptrl	equ	0xFF6
 19567                           tablat	equ	0xFF5
 19568                           prodh	equ	0xFF4
 19569                           prodl	equ	0xFF3
 19570                           intcon	equ	0xFF2
 19571                           indf0	equ	0xFEF
 19572                           postinc0	equ	0xFEE
 19573                           fsr0h	equ	0xFEA
 19574                           fsr0l	equ	0xFE9
 19575                           wreg	equ	0xFE8
 19576                           indf1	equ	0xFE7
 19577                           postinc1	equ	0xFE6
 19578                           postdec1	equ	0xFE5
 19579                           fsr1h	equ	0xFE2
 19580                           fsr1l	equ	0xFE1
 19581                           indf2	equ	0xFDF
 19582                           postinc2	equ	0xFDE
 19583                           postdec2	equ	0xFDD
 19584                           plusw2	equ	0xFDB
 19585                           fsr2h	equ	0xFDA
 19586                           fsr2l	equ	0xFD9
 19587                           status	equ	0xFD8
 19588                           
 19589 ;; *************** function _printErrors *****************
 19590 ;; Defined at:
 19591 ;;		line 2822 in file "main.c"
 19592 ;; Parameters:    Size  Location     Type
 19593 ;;		None
 19594 ;; Auto vars:     Size  Location     Type
 19595 ;;		None
 19596 ;; Return value:  Size  Location     Type
 19597 ;;		None               void
 19598 ;; Registers used:
 19599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19600 ;; Tracked objects:
 19601 ;;		On entry : F/0
 19602 ;;		On exit  : 0/0
 19603 ;;		Unchanged: 0/0
 19604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19605 ;;      Params:         0       0       0       0       0       0       0
 19606 ;;      Locals:         0      12       0       0       0       0       0
 19607 ;;      Temps:          0       0       0       0       0       0       0
 19608 ;;      Totals:         0      12       0       0       0       0       0
 19609 ;;Total ram usage:       12 bytes
 19610 ;; Hardware stack levels used:    1
 19611 ;; Hardware stack levels required when called:    5
 19612 ;; This function calls:
 19613 ;;		_putsUSART
 19614 ;;		_sprintf
 19615 ;; This function is called by:
 19616 ;;		_doModeVerbose
 19617 ;; This function uses a non-reentrant model
 19618 ;;
 19619                           
 19620                           	psect	text39
 19621  00424E                     __ptext39:
 19622                           	opt stack 0
 19623  00424E                     _printErrors:
 19624                           	opt stack 23
 19625                           
 19626                           ; BSR set to: 0
 19627                           ;main.c: 2823: putsUSART((char *) "CAN Receive overruns: ");
 19628                           
 19629                           ;incstack = 0
 19630                           ;incstack = 0
 19631  00424E  0E79               	movlw	high STR_216
 19632  004250  6E21               	movwf	?_putsUSART+1,c
 19633  004252  0E2C               	movlw	low STR_216
 19634  004254  6E20               	movwf	?_putsUSART,c
 19635  004256  EC74  F009         	call	_putsUSART	;wreg free
 19636                           
 19637                           ;main.c: 2824: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 19638  00425A  6629               	tstfsz	_bHex,c
 19639  00425C  D005               	goto	l16404
 19640  00425E  0E7C               	movlw	high STR_181
 19641  004260  0100               	movlb	0	; () banked
 19642  004262  6F90               	movwf	(_printErrors$1535+1)& (0+255),b
 19643  004264  0EDE               	movlw	low STR_181
 19644  004266  D004               	goto	L20
 19645  004268                     l16404:
 19646  004268  0E7C               	movlw	high STR_180
 19647  00426A  0100               	movlb	0	; () banked
 19648  00426C  6F90               	movwf	(_printErrors$1535+1)& (0+255),b
 19649  00426E  0E01               	movlw	low STR_180
 19650  004270                     L20:
 19651  004270  6F8F               	movwf	_printErrors$1535& (0+255),b
 19652                           
 19653                           ; BSR set to: 0
 19654  004272  0E01               	movlw	high _wrkbuf
 19655  004274  0100               	movlb	0	; () banked
 19656  004276  6F72               	movwf	(?_sprintf+1)& (0+255),b
 19657  004278  0E82               	movlw	low _wrkbuf
 19658  00427A  6F71               	movwf	?_sprintf& (0+255),b
 19659  00427C  C08F  F073         	movff	_printErrors$1535,?_sprintf+2
 19660  004280  C090  F074         	movff	_printErrors$1535+1,?_sprintf+3
 19661  004284  C100  F075         	movff	_can_receiveOverruns,?_sprintf+4
 19662  004288  C101  F076         	movff	_can_receiveOverruns+1,?_sprintf+5
 19663  00428C  C102  F077         	movff	_can_receiveOverruns+2,?_sprintf+6
 19664  004290  C103  F078         	movff	_can_receiveOverruns+3,?_sprintf+7
 19665  004294  ECFB  F025         	call	_sprintf	;wreg free
 19666                           
 19667                           ; BSR set to: 0
 19668                           ;main.c: 2825: putsUSART(wrkbuf);
 19669  004298  0101               	movlb	1	; () banked
 19670  00429A  0E01               	movlw	high _wrkbuf
 19671  00429C  6E21               	movwf	?_putsUSART+1,c
 19672  00429E  0E82               	movlw	low _wrkbuf
 19673  0042A0  6E20               	movwf	?_putsUSART,c
 19674  0042A2  EC74  F009         	call	_putsUSART	;wreg free
 19675                           
 19676                           ;main.c: 2826: putsUSART((char *) "\r\n");
 19677  0042A6  0E70               	movlw	high (STR_237+50)
 19678  0042A8  6E21               	movwf	?_putsUSART+1,c
 19679  0042AA  0E5A               	movlw	low (STR_237+50)
 19680  0042AC  6E20               	movwf	?_putsUSART,c
 19681  0042AE  EC74  F009         	call	_putsUSART	;wreg free
 19682                           
 19683                           ;main.c: 2828: putsUSART((char *) "CAN Transmit overruns: ");
 19684  0042B2  0E78               	movlw	high STR_220
 19685  0042B4  6E21               	movwf	?_putsUSART+1,c
 19686  0042B6  0EE6               	movlw	low STR_220
 19687  0042B8  6E20               	movwf	?_putsUSART,c
 19688  0042BA  EC74  F009         	call	_putsUSART	;wreg free
 19689                           
 19690                           ;main.c: 2829: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 19691  0042BE  6629               	tstfsz	_bHex,c
 19692  0042C0  D005               	goto	l16418
 19693  0042C2  0E7C               	movlw	high STR_181
 19694  0042C4  0100               	movlb	0	; () banked
 19695  0042C6  6F92               	movwf	(_printErrors$1541+1)& (0+255),b
 19696  0042C8  0EDE               	movlw	low STR_181
 19697  0042CA  D004               	goto	L21
 19698  0042CC                     l16418:
 19699  0042CC  0E7C               	movlw	high STR_180
 19700  0042CE  0100               	movlb	0	; () banked
 19701  0042D0  6F92               	movwf	(_printErrors$1541+1)& (0+255),b
 19702  0042D2  0E01               	movlw	low STR_180
 19703  0042D4                     L21:
 19704  0042D4  6F91               	movwf	_printErrors$1541& (0+255),b
 19705                           
 19706                           ; BSR set to: 0
 19707  0042D6  0E01               	movlw	high _wrkbuf
 19708  0042D8  0100               	movlb	0	; () banked
 19709  0042DA  6F72               	movwf	(?_sprintf+1)& (0+255),b
 19710  0042DC  0E82               	movlw	low _wrkbuf
 19711  0042DE  6F71               	movwf	?_sprintf& (0+255),b
 19712  0042E0  C091  F073         	movff	_printErrors$1541,?_sprintf+2
 19713  0042E4  C092  F074         	movff	_printErrors$1541+1,?_sprintf+3
 19714  0042E8  C104  F075         	movff	_can_transmitOverruns,?_sprintf+4
 19715  0042EC  C105  F076         	movff	_can_transmitOverruns+1,?_sprintf+5
 19716  0042F0  C106  F077         	movff	_can_transmitOverruns+2,?_sprintf+6
 19717  0042F4  C107  F078         	movff	_can_transmitOverruns+3,?_sprintf+7
 19718  0042F8  ECFB  F025         	call	_sprintf	;wreg free
 19719                           
 19720                           ; BSR set to: 0
 19721                           ;main.c: 2830: putsUSART(wrkbuf);
 19722  0042FC  0101               	movlb	1	; () banked
 19723  0042FE  0E01               	movlw	high _wrkbuf
 19724  004300  6E21               	movwf	?_putsUSART+1,c
 19725  004302  0E82               	movlw	low _wrkbuf
 19726  004304  6E20               	movwf	?_putsUSART,c
 19727  004306  EC74  F009         	call	_putsUSART	;wreg free
 19728                           
 19729                           ;main.c: 2831: putsUSART((char *) "\r\n");
 19730  00430A  0E70               	movlw	high (STR_237+50)
 19731  00430C  6E21               	movwf	?_putsUSART+1,c
 19732  00430E  0E5A               	movlw	low (STR_237+50)
 19733  004310  6E20               	movwf	?_putsUSART,c
 19734  004312  EC74  F009         	call	_putsUSART	;wreg free
 19735                           
 19736                           ;main.c: 2833: putsUSART((char *) "UART Receive overruns: ");
 19737  004316  0E78               	movlw	high STR_224
 19738  004318  6E21               	movwf	?_putsUSART+1,c
 19739  00431A  0ECE               	movlw	low STR_224
 19740  00431C  6E20               	movwf	?_putsUSART,c
 19741  00431E  EC74  F009         	call	_putsUSART	;wreg free
 19742                           
 19743                           ;main.c: 2834: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 19744  004322  6629               	tstfsz	_bHex,c
 19745  004324  D005               	goto	l16432
 19746  004326  0E7C               	movlw	high STR_181
 19747  004328  0100               	movlb	0	; () banked
 19748  00432A  6F94               	movwf	(_printErrors$1547+1)& (0+255),b
 19749  00432C  0EDE               	movlw	low STR_181
 19750  00432E  D004               	goto	L22
 19751  004330                     l16432:
 19752  004330  0E7C               	movlw	high STR_180
 19753  004332  0100               	movlb	0	; () banked
 19754  004334  6F94               	movwf	(_printErrors$1547+1)& (0+255),b
 19755  004336  0E01               	movlw	low STR_180
 19756  004338                     L22:
 19757  004338  6F93               	movwf	_printErrors$1547& (0+255),b
 19758                           
 19759                           ; BSR set to: 0
 19760  00433A  0E01               	movlw	high _wrkbuf
 19761  00433C  0100               	movlb	0	; () banked
 19762  00433E  6F72               	movwf	(?_sprintf+1)& (0+255),b
 19763  004340  0E82               	movlw	low _wrkbuf
 19764  004342  6F71               	movwf	?_sprintf& (0+255),b
 19765  004344  C093  F073         	movff	_printErrors$1547,?_sprintf+2
 19766  004348  C094  F074         	movff	_printErrors$1547+1,?_sprintf+3
 19767  00434C  C120  F075         	movff	_uart_receiveOverruns,?_sprintf+4
 19768  004350  C121  F076         	movff	_uart_receiveOverruns+1,?_sprintf+5
 19769  004354  C122  F077         	movff	_uart_receiveOverruns+2,?_sprintf+6
 19770  004358  C123  F078         	movff	_uart_receiveOverruns+3,?_sprintf+7
 19771  00435C  ECFB  F025         	call	_sprintf	;wreg free
 19772                           
 19773                           ; BSR set to: 0
 19774                           ;main.c: 2835: putsUSART(wrkbuf);
 19775  004360  0101               	movlb	1	; () banked
 19776  004362  0E01               	movlw	high _wrkbuf
 19777  004364  6E21               	movwf	?_putsUSART+1,c
 19778  004366  0E82               	movlw	low _wrkbuf
 19779  004368  6E20               	movwf	?_putsUSART,c
 19780  00436A  EC74  F009         	call	_putsUSART	;wreg free
 19781                           
 19782                           ;main.c: 2836: putsUSART((char *) "\r\n");
 19783  00436E  0E70               	movlw	high (STR_237+50)
 19784  004370  6E21               	movwf	?_putsUSART+1,c
 19785  004372  0E5A               	movlw	low (STR_237+50)
 19786  004374  6E20               	movwf	?_putsUSART,c
 19787  004376  EC74  F009         	call	_putsUSART	;wreg free
 19788                           
 19789                           ;main.c: 2838: putsUSART((char *) "UART Receive overruns: ");
 19790  00437A  0E78               	movlw	high STR_224
 19791  00437C  6E21               	movwf	?_putsUSART+1,c
 19792  00437E  0ECE               	movlw	low STR_224
 19793  004380  6E20               	movwf	?_putsUSART,c
 19794  004382  EC74  F009         	call	_putsUSART	;wreg free
 19795                           
 19796                           ;main.c: 2839: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 19797  004386  6629               	tstfsz	_bHex,c
 19798  004388  D005               	goto	l16446
 19799  00438A  0E7C               	movlw	high STR_181
 19800  00438C  0100               	movlb	0	; () banked
 19801  00438E  6F96               	movwf	(_printErrors$1553+1)& (0+255),b
 19802  004390  0EDE               	movlw	low STR_181
 19803  004392  D004               	goto	L23
 19804  004394                     l16446:
 19805  004394  0E7C               	movlw	high STR_180
 19806  004396  0100               	movlb	0	; () banked
 19807  004398  6F96               	movwf	(_printErrors$1553+1)& (0+255),b
 19808  00439A  0E01               	movlw	low STR_180
 19809  00439C                     L23:
 19810  00439C  6F95               	movwf	_printErrors$1553& (0+255),b
 19811                           
 19812                           ; BSR set to: 0
 19813  00439E  0E01               	movlw	high _wrkbuf
 19814  0043A0  0100               	movlb	0	; () banked
 19815  0043A2  6F72               	movwf	(?_sprintf+1)& (0+255),b
 19816  0043A4  0E82               	movlw	low _wrkbuf
 19817  0043A6  6F71               	movwf	?_sprintf& (0+255),b
 19818  0043A8  C095  F073         	movff	_printErrors$1553,?_sprintf+2
 19819  0043AC  C096  F074         	movff	_printErrors$1553+1,?_sprintf+3
 19820  0043B0  C124  F075         	movff	_uart_transmitOverruns,?_sprintf+4
 19821  0043B4  C125  F076         	movff	_uart_transmitOverruns+1,?_sprintf+5
 19822  0043B8  C126  F077         	movff	_uart_transmitOverruns+2,?_sprintf+6
 19823  0043BC  C127  F078         	movff	_uart_transmitOverruns+3,?_sprintf+7
 19824  0043C0  ECFB  F025         	call	_sprintf	;wreg free
 19825                           
 19826                           ; BSR set to: 0
 19827                           ;main.c: 2840: putsUSART(wrkbuf);
 19828  0043C4  0101               	movlb	1	; () banked
 19829  0043C6  0E01               	movlw	high _wrkbuf
 19830  0043C8  6E21               	movwf	?_putsUSART+1,c
 19831  0043CA  0E82               	movlw	low _wrkbuf
 19832  0043CC  6E20               	movwf	?_putsUSART,c
 19833  0043CE  EC74  F009         	call	_putsUSART	;wreg free
 19834                           
 19835                           ;main.c: 2841: putsUSART((char *) "\r\n");
 19836  0043D2  0E70               	movlw	high (STR_237+50)
 19837  0043D4  6E21               	movwf	?_putsUSART+1,c
 19838  0043D6  0E5A               	movlw	low (STR_237+50)
 19839  0043D8  6E20               	movwf	?_putsUSART,c
 19840  0043DA  EC74  F009         	call	_putsUSART	;wreg free
 19841                           
 19842                           ;main.c: 2843: putsUSART((char *) "Transmit Error Counter: ");
 19843  0043DE  0E78               	movlw	high STR_232
 19844  0043E0  6E21               	movwf	?_putsUSART+1,c
 19845  0043E2  0E0C               	movlw	low STR_232
 19846  0043E4  6E20               	movwf	?_putsUSART,c
 19847  0043E6  EC74  F009         	call	_putsUSART	;wreg free
 19848                           
 19849                           ;main.c: 2844: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 19850  0043EA  6629               	tstfsz	_bHex,c
 19851  0043EC  D005               	goto	l16460
 19852  0043EE  0E7C               	movlw	high STR_61
 19853  0043F0  0100               	movlb	0	; () banked
 19854  0043F2  6F98               	movwf	(_printErrors$1559+1)& (0+255),b
 19855  0043F4  0EEE               	movlw	low STR_61
 19856  0043F6  D004               	goto	L24
 19857  0043F8                     l16460:
 19858  0043F8  0E7C               	movlw	high STR_60
 19859  0043FA  0100               	movlb	0	; () banked
 19860  0043FC  6F98               	movwf	(_printErrors$1559+1)& (0+255),b
 19861  0043FE  0E50               	movlw	low STR_60
 19862  004400                     L24:
 19863  004400  6F97               	movwf	_printErrors$1559& (0+255),b
 19864                           
 19865                           ; BSR set to: 0
 19866  004402  0E01               	movlw	high _wrkbuf
 19867  004404  0100               	movlb	0	; () banked
 19868  004406  6F72               	movwf	(?_sprintf+1)& (0+255),b
 19869  004408  0E82               	movlw	low _wrkbuf
 19870  00440A  6F71               	movwf	?_sprintf& (0+255),b
 19871  00440C  C097  F073         	movff	_printErrors$1559,?_sprintf+2
 19872  004410  C098  F074         	movff	_printErrors$1559+1,?_sprintf+3
 19873  004414  CF76 F075          	movff	3958,?_sprintf+4	;volatile
 19874  004418  6B76               	clrf	(?_sprintf+5)& (0+255),b
 19875  00441A  ECFB  F025         	call	_sprintf	;wreg free
 19876                           
 19877                           ; BSR set to: 0
 19878                           ;main.c: 2845: putsUSART(wrkbuf);
 19879  00441E  0101               	movlb	1	; () banked
 19880  004420  0E01               	movlw	high _wrkbuf
 19881  004422  6E21               	movwf	?_putsUSART+1,c
 19882  004424  0E82               	movlw	low _wrkbuf
 19883  004426  6E20               	movwf	?_putsUSART,c
 19884  004428  EC74  F009         	call	_putsUSART	;wreg free
 19885                           
 19886                           ;main.c: 2846: putsUSART((char *) "\r\n");
 19887  00442C  0E70               	movlw	high (STR_237+50)
 19888  00442E  6E21               	movwf	?_putsUSART+1,c
 19889  004430  0E5A               	movlw	low (STR_237+50)
 19890  004432  6E20               	movwf	?_putsUSART,c
 19891  004434  EC74  F009         	call	_putsUSART	;wreg free
 19892                           
 19893                           ;main.c: 2848: if (COMSTATbits.TXWARN) {
 19894  004438  A474               	btfss	3956,2,c	;volatile
 19895  00443A  D006               	goto	l16472
 19896                           
 19897                           ;main.c: 2849: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19898  00443C  0E6E               	movlw	high STR_236
 19899  00443E  6E21               	movwf	?_putsUSART+1,c
 19900  004440  0E32               	movlw	low STR_236
 19901  004442  6E20               	movwf	?_putsUSART,c
 19902  004444  EC74  F009         	call	_putsUSART	;wreg free
 19903  004448                     l16472:
 19904                           
 19905                           ;main.c: 2850: }
 19906                           ;main.c: 2852: if (COMSTATbits.TXBO) {
 19907  004448  AA74               	btfss	3956,5,c	;volatile
 19908  00444A  D006               	goto	l16476
 19909                           
 19910                           ;main.c: 2853: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19911  00444C  0E70               	movlw	high STR_237
 19912  00444E  6E21               	movwf	?_putsUSART+1,c
 19913  004450  0E28               	movlw	low STR_237
 19914  004452  6E20               	movwf	?_putsUSART,c
 19915  004454  EC74  F009         	call	_putsUSART	;wreg free
 19916  004458                     l16476:
 19917                           
 19918                           ;main.c: 2854: }
 19919                           ;main.c: 2856: if (COMSTATbits.TXBP) {
 19920  004458  A874               	btfss	3956,4,c	;volatile
 19921  00445A  D006               	goto	l1268
 19922                           
 19923                           ;main.c: 2857: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19924  00445C  0E6E               	movlw	high STR_238
 19925  00445E  6E21               	movwf	?_putsUSART+1,c
 19926  004460  0EA6               	movlw	low STR_238
 19927  004462  6E20               	movwf	?_putsUSART,c
 19928  004464  EC74  F009         	call	_putsUSART	;wreg free
 19929  004468                     l1268:
 19930                           
 19931                           ;main.c: 2858: }
 19932                           ;main.c: 2861: putsUSART((char *) "Receive Error Counter: ");
 19933  004468  0E78               	movlw	high STR_239
 19934  00446A  6E21               	movwf	?_putsUSART+1,c
 19935  00446C  0EB6               	movlw	low STR_239
 19936  00446E  6E20               	movwf	?_putsUSART,c
 19937  004470  EC74  F009         	call	_putsUSART	;wreg free
 19938                           
 19939                           ;main.c: 2862: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19940  004474  6629               	tstfsz	_bHex,c
 19941  004476  D005               	goto	l16484
 19942  004478  0E7C               	movlw	high STR_61
 19943  00447A  0100               	movlb	0	; () banked
 19944  00447C  6F9A               	movwf	(_printErrors$1568+1)& (0+255),b
 19945  00447E  0EEE               	movlw	low STR_61
 19946  004480  D004               	goto	L25
 19947  004482                     l16484:
 19948  004482  0E7C               	movlw	high STR_60
 19949  004484  0100               	movlb	0	; () banked
 19950  004486  6F9A               	movwf	(_printErrors$1568+1)& (0+255),b
 19951  004488  0E50               	movlw	low STR_60
 19952  00448A                     L25:
 19953  00448A  6F99               	movwf	_printErrors$1568& (0+255),b
 19954                           
 19955                           ; BSR set to: 0
 19956  00448C  0E01               	movlw	high _wrkbuf
 19957  00448E  0100               	movlb	0	; () banked
 19958  004490  6F72               	movwf	(?_sprintf+1)& (0+255),b
 19959  004492  0E82               	movlw	low _wrkbuf
 19960  004494  6F71               	movwf	?_sprintf& (0+255),b
 19961  004496  C099  F073         	movff	_printErrors$1568,?_sprintf+2
 19962  00449A  C09A  F074         	movff	_printErrors$1568+1,?_sprintf+3
 19963  00449E  CF75 F075          	movff	3957,?_sprintf+4	;volatile
 19964  0044A2  6B76               	clrf	(?_sprintf+5)& (0+255),b
 19965  0044A4  ECFB  F025         	call	_sprintf	;wreg free
 19966                           
 19967                           ; BSR set to: 0
 19968                           ;main.c: 2863: putsUSART(wrkbuf);
 19969  0044A8  0101               	movlb	1	; () banked
 19970  0044AA  0E01               	movlw	high _wrkbuf
 19971  0044AC  6E21               	movwf	?_putsUSART+1,c
 19972  0044AE  0E82               	movlw	low _wrkbuf
 19973  0044B0  6E20               	movwf	?_putsUSART,c
 19974  0044B2  EC74  F009         	call	_putsUSART	;wreg free
 19975                           
 19976                           ;main.c: 2864: putsUSART((char *) "\r\n");
 19977  0044B6  0E70               	movlw	high (STR_237+50)
 19978  0044B8  6E21               	movwf	?_putsUSART+1,c
 19979  0044BA  0E5A               	movlw	low (STR_237+50)
 19980  0044BC  6E20               	movwf	?_putsUSART,c
 19981  0044BE  EC74  F009         	call	_putsUSART	;wreg free
 19982                           
 19983                           ;main.c: 2866: if (COMSTATbits.RXWARN) {
 19984  0044C2  A274               	btfss	3956,1,c	;volatile
 19985  0044C4  D006               	goto	l16496
 19986                           
 19987                           ;main.c: 2867: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19988  0044C6  0E6F               	movlw	high STR_243
 19989  0044C8  6E21               	movwf	?_putsUSART+1,c
 19990  0044CA  0E17               	movlw	low STR_243
 19991  0044CC  6E20               	movwf	?_putsUSART,c
 19992  0044CE  EC74  F009         	call	_putsUSART	;wreg free
 19993  0044D2                     l16496:
 19994                           
 19995                           ;main.c: 2868: }
 19996                           ;main.c: 2870: if (COMSTATbits.RXBP) {
 19997  0044D2  A674               	btfss	3956,3,c	;volatile
 19998  0044D4  D006               	goto	l16500
 19999                           
 20000                           ;main.c: 2871: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 20001  0044D6  0E6F               	movlw	high STR_244
 20002  0044D8  6E21               	movwf	?_putsUSART+1,c
 20003  0044DA  0EBC               	movlw	low STR_244
 20004  0044DC  6E20               	movwf	?_putsUSART,c
 20005  0044DE  EC74  F009         	call	_putsUSART	;wreg free
 20006  0044E2                     l16500:
 20007                           
 20008                           ;main.c: 2872: }
 20009                           ;main.c: 2874: if (COMSTATbits.EWARN) {
 20010  0044E2  A074               	btfss	3956,0,c	;volatile
 20011  0044E4  D006               	goto	l1276
 20012                           
 20013                           ;main.c: 2875: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 20014  0044E6  0E70               	movlw	high STR_245
 20015  0044E8  6E21               	movwf	?_putsUSART+1,c
 20016  0044EA  0E91               	movlw	low STR_245
 20017  0044EC  6E20               	movwf	?_putsUSART,c
 20018  0044EE  EC74  F009         	call	_putsUSART	;wreg free
 20019  0044F2                     l1276:
 20020  0044F2  0012               	return	
 20021  0044F4                     __end_of_printErrors:
 20022                           	opt stack 0
 20023                           tblptru	equ	0xFF8
 20024                           tblptrh	equ	0xFF7
 20025                           tblptrl	equ	0xFF6
 20026                           tablat	equ	0xFF5
 20027                           prodh	equ	0xFF4
 20028                           prodl	equ	0xFF3
 20029                           intcon	equ	0xFF2
 20030                           indf0	equ	0xFEF
 20031                           postinc0	equ	0xFEE
 20032                           fsr0h	equ	0xFEA
 20033                           fsr0l	equ	0xFE9
 20034                           wreg	equ	0xFE8
 20035                           indf1	equ	0xFE7
 20036                           postinc1	equ	0xFE6
 20037                           postdec1	equ	0xFE5
 20038                           fsr1h	equ	0xFE2
 20039                           fsr1l	equ	0xFE1
 20040                           indf2	equ	0xFDF
 20041                           postinc2	equ	0xFDE
 20042                           postdec2	equ	0xFDD
 20043                           plusw2	equ	0xFDB
 20044                           fsr2h	equ	0xFDA
 20045                           fsr2l	equ	0xFD9
 20046                           status	equ	0xFD8
 20047                           
 20048 ;; *************** function _printStatistics *****************
 20049 ;; Defined at:
 20050 ;;		line 2795 in file "main.c"
 20051 ;; Parameters:    Size  Location     Type
 20052 ;;		None
 20053 ;; Auto vars:     Size  Location     Type
 20054 ;;		None
 20055 ;; Return value:  Size  Location     Type
 20056 ;;		None               void
 20057 ;; Registers used:
 20058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20059 ;; Tracked objects:
 20060 ;;		On entry : F/0
 20061 ;;		On exit  : 0/0
 20062 ;;		Unchanged: 0/0
 20063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20064 ;;      Params:         0       0       0       0       0       0       0
 20065 ;;      Locals:         0       8       0       0       0       0       0
 20066 ;;      Temps:          0       0       0       0       0       0       0
 20067 ;;      Totals:         0       8       0       0       0       0       0
 20068 ;;Total ram usage:        8 bytes
 20069 ;; Hardware stack levels used:    1
 20070 ;; Hardware stack levels required when called:    5
 20071 ;; This function calls:
 20072 ;;		_putsUSART
 20073 ;;		_sprintf
 20074 ;; This function is called by:
 20075 ;;		_doModeVerbose
 20076 ;; This function uses a non-reentrant model
 20077 ;;
 20078                           
 20079                           	psect	text40
 20080  0033D6                     __ptext40:
 20081                           	opt stack 0
 20082  0033D6                     _printStatistics:
 20083                           	opt stack 23
 20084                           
 20085                           ; BSR set to: 0
 20086                           ;main.c: 2796: putsUSART((char *) "Sent CAN frames: ");
 20087                           
 20088                           ;incstack = 0
 20089                           ;incstack = 0
 20090  0033D6  0E7A               	movlw	high STR_200
 20091  0033D8  6E21               	movwf	?_putsUSART+1,c
 20092  0033DA  0E9F               	movlw	low STR_200
 20093  0033DC  6E20               	movwf	?_putsUSART,c
 20094  0033DE  EC74  F009         	call	_putsUSART	;wreg free
 20095                           
 20096                           ;main.c: 2797: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 20097  0033E2  6629               	tstfsz	_bHex,c
 20098  0033E4  D005               	goto	l16348
 20099  0033E6  0E7C               	movlw	high STR_181
 20100  0033E8  0100               	movlb	0	; () banked
 20101  0033EA  6F90               	movwf	(_printStatistics$1510+1)& (0+255),b
 20102  0033EC  0EDE               	movlw	low STR_181
 20103  0033EE  D004               	goto	L26
 20104  0033F0                     l16348:
 20105  0033F0  0E7C               	movlw	high STR_201
 20106  0033F2  0100               	movlb	0	; () banked
 20107  0033F4  6F90               	movwf	(_printStatistics$1510+1)& (0+255),b
 20108  0033F6  0E5E               	movlw	low STR_201
 20109  0033F8                     L26:
 20110  0033F8  6F8F               	movwf	_printStatistics$1510& (0+255),b
 20111                           
 20112                           ; BSR set to: 0
 20113  0033FA  0E01               	movlw	high _wrkbuf
 20114  0033FC  0100               	movlb	0	; () banked
 20115  0033FE  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20116  003400  0E82               	movlw	low _wrkbuf
 20117  003402  6F71               	movwf	?_sprintf& (0+255),b
 20118  003404  C08F  F073         	movff	_printStatistics$1510,?_sprintf+2
 20119  003408  C090  F074         	movff	_printStatistics$1510+1,?_sprintf+3
 20120  00340C  C114  F075         	movff	_cntTxFrames,?_sprintf+4
 20121  003410  C115  F076         	movff	_cntTxFrames+1,?_sprintf+5
 20122  003414  C116  F077         	movff	_cntTxFrames+2,?_sprintf+6
 20123  003418  C117  F078         	movff	_cntTxFrames+3,?_sprintf+7
 20124  00341C  ECFB  F025         	call	_sprintf	;wreg free
 20125                           
 20126                           ; BSR set to: 0
 20127                           ;main.c: 2798: putsUSART(wrkbuf);
 20128  003420  0101               	movlb	1	; () banked
 20129  003422  0E01               	movlw	high _wrkbuf
 20130  003424  6E21               	movwf	?_putsUSART+1,c
 20131  003426  0E82               	movlw	low _wrkbuf
 20132  003428  6E20               	movwf	?_putsUSART,c
 20133  00342A  EC74  F009         	call	_putsUSART	;wreg free
 20134                           
 20135                           ;main.c: 2799: putsUSART((char *) "\r\n");
 20136  00342E  0E70               	movlw	high (STR_237+50)
 20137  003430  6E21               	movwf	?_putsUSART+1,c
 20138  003432  0E5A               	movlw	low (STR_237+50)
 20139  003434  6E20               	movwf	?_putsUSART,c
 20140  003436  EC74  F009         	call	_putsUSART	;wreg free
 20141                           
 20142                           ;main.c: 2801: putsUSART((char *) "Sent CAN bytes: ");
 20143  00343A  0E7A               	movlw	high STR_204
 20144  00343C  6E21               	movwf	?_putsUSART+1,c
 20145  00343E  0EE4               	movlw	low STR_204
 20146  003440  6E20               	movwf	?_putsUSART,c
 20147  003442  EC74  F009         	call	_putsUSART	;wreg free
 20148                           
 20149                           ;main.c: 2802: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 20150  003446  6629               	tstfsz	_bHex,c
 20151  003448  D005               	goto	l16362
 20152  00344A  0E7C               	movlw	high STR_181
 20153  00344C  0100               	movlb	0	; () banked
 20154  00344E  6F92               	movwf	(_printStatistics$1516+1)& (0+255),b
 20155  003450  0EDE               	movlw	low STR_181
 20156  003452  D004               	goto	L27
 20157  003454                     l16362:
 20158  003454  0E7C               	movlw	high STR_201
 20159  003456  0100               	movlb	0	; () banked
 20160  003458  6F92               	movwf	(_printStatistics$1516+1)& (0+255),b
 20161  00345A  0E5E               	movlw	low STR_201
 20162  00345C                     L27:
 20163  00345C  6F91               	movwf	_printStatistics$1516& (0+255),b
 20164                           
 20165                           ; BSR set to: 0
 20166  00345E  0E01               	movlw	high _wrkbuf
 20167  003460  0100               	movlb	0	; () banked
 20168  003462  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20169  003464  0E82               	movlw	low _wrkbuf
 20170  003466  6F71               	movwf	?_sprintf& (0+255),b
 20171  003468  C091  F073         	movff	_printStatistics$1516,?_sprintf+2
 20172  00346C  C092  F074         	movff	_printStatistics$1516+1,?_sprintf+3
 20173  003470  C110  F075         	movff	_cntTxBytes,?_sprintf+4
 20174  003474  C111  F076         	movff	_cntTxBytes+1,?_sprintf+5
 20175  003478  C112  F077         	movff	_cntTxBytes+2,?_sprintf+6
 20176  00347C  C113  F078         	movff	_cntTxBytes+3,?_sprintf+7
 20177  003480  ECFB  F025         	call	_sprintf	;wreg free
 20178                           
 20179                           ; BSR set to: 0
 20180                           ;main.c: 2803: putsUSART(wrkbuf);
 20181  003484  0101               	movlb	1	; () banked
 20182  003486  0E01               	movlw	high _wrkbuf
 20183  003488  6E21               	movwf	?_putsUSART+1,c
 20184  00348A  0E82               	movlw	low _wrkbuf
 20185  00348C  6E20               	movwf	?_putsUSART,c
 20186  00348E  EC74  F009         	call	_putsUSART	;wreg free
 20187                           
 20188                           ;main.c: 2804: putsUSART((char *) "\r\n");
 20189  003492  0E70               	movlw	high (STR_237+50)
 20190  003494  6E21               	movwf	?_putsUSART+1,c
 20191  003496  0E5A               	movlw	low (STR_237+50)
 20192  003498  6E20               	movwf	?_putsUSART,c
 20193  00349A  EC74  F009         	call	_putsUSART	;wreg free
 20194                           
 20195                           ;main.c: 2806: putsUSART((char *) "Received CAN frames: ");
 20196  00349E  0E79               	movlw	high STR_208
 20197  0034A0  6E21               	movwf	?_putsUSART+1,c
 20198  0034A2  0E9C               	movlw	low STR_208
 20199  0034A4  6E20               	movwf	?_putsUSART,c
 20200  0034A6  EC74  F009         	call	_putsUSART	;wreg free
 20201                           
 20202                           ;main.c: 2807: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 20203  0034AA  6629               	tstfsz	_bHex,c
 20204  0034AC  D005               	goto	l16376
 20205  0034AE  0E7C               	movlw	high STR_181
 20206  0034B0  0100               	movlb	0	; () banked
 20207  0034B2  6F94               	movwf	(_printStatistics$1522+1)& (0+255),b
 20208  0034B4  0EDE               	movlw	low STR_181
 20209  0034B6  D004               	goto	L28
 20210  0034B8                     l16376:
 20211  0034B8  0E7C               	movlw	high STR_201
 20212  0034BA  0100               	movlb	0	; () banked
 20213  0034BC  6F94               	movwf	(_printStatistics$1522+1)& (0+255),b
 20214  0034BE  0E5E               	movlw	low STR_201
 20215  0034C0                     L28:
 20216  0034C0  6F93               	movwf	_printStatistics$1522& (0+255),b
 20217                           
 20218                           ; BSR set to: 0
 20219  0034C2  0E01               	movlw	high _wrkbuf
 20220  0034C4  0100               	movlb	0	; () banked
 20221  0034C6  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20222  0034C8  0E82               	movlw	low _wrkbuf
 20223  0034CA  6F71               	movwf	?_sprintf& (0+255),b
 20224  0034CC  C093  F073         	movff	_printStatistics$1522,?_sprintf+2
 20225  0034D0  C094  F074         	movff	_printStatistics$1522+1,?_sprintf+3
 20226  0034D4  C10C  F075         	movff	_cntRxFrames,?_sprintf+4
 20227  0034D8  C10D  F076         	movff	_cntRxFrames+1,?_sprintf+5
 20228  0034DC  C10E  F077         	movff	_cntRxFrames+2,?_sprintf+6
 20229  0034E0  C10F  F078         	movff	_cntRxFrames+3,?_sprintf+7
 20230  0034E4  ECFB  F025         	call	_sprintf	;wreg free
 20231                           
 20232                           ; BSR set to: 0
 20233                           ;main.c: 2808: putsUSART(wrkbuf);
 20234  0034E8  0101               	movlb	1	; () banked
 20235  0034EA  0E01               	movlw	high _wrkbuf
 20236  0034EC  6E21               	movwf	?_putsUSART+1,c
 20237  0034EE  0E82               	movlw	low _wrkbuf
 20238  0034F0  6E20               	movwf	?_putsUSART,c
 20239  0034F2  EC74  F009         	call	_putsUSART	;wreg free
 20240                           
 20241                           ;main.c: 2809: putsUSART((char *) "\r\n");
 20242  0034F6  0E70               	movlw	high (STR_237+50)
 20243  0034F8  6E21               	movwf	?_putsUSART+1,c
 20244  0034FA  0E5A               	movlw	low (STR_237+50)
 20245  0034FC  6E20               	movwf	?_putsUSART,c
 20246  0034FE  EC74  F009         	call	_putsUSART	;wreg free
 20247                           
 20248                           ;main.c: 2811: putsUSART((char *) "Received CAN bytes: ");
 20249  003502  0E79               	movlw	high STR_212
 20250  003504  6E21               	movwf	?_putsUSART+1,c
 20251  003506  0EC7               	movlw	low STR_212
 20252  003508  6E20               	movwf	?_putsUSART,c
 20253  00350A  EC74  F009         	call	_putsUSART	;wreg free
 20254                           
 20255                           ;main.c: 2812: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 20256  00350E  6629               	tstfsz	_bHex,c
 20257  003510  D005               	goto	l16390
 20258  003512  0E7C               	movlw	high STR_181
 20259  003514  0100               	movlb	0	; () banked
 20260  003516  6F96               	movwf	(_printStatistics$1528+1)& (0+255),b
 20261  003518  0EDE               	movlw	low STR_181
 20262  00351A  D004               	goto	L29
 20263  00351C                     l16390:
 20264  00351C  0E7C               	movlw	high STR_201
 20265  00351E  0100               	movlb	0	; () banked
 20266  003520  6F96               	movwf	(_printStatistics$1528+1)& (0+255),b
 20267  003522  0E5E               	movlw	low STR_201
 20268  003524                     L29:
 20269  003524  6F95               	movwf	_printStatistics$1528& (0+255),b
 20270                           
 20271                           ; BSR set to: 0
 20272  003526  0E01               	movlw	high _wrkbuf
 20273  003528  0100               	movlb	0	; () banked
 20274  00352A  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20275  00352C  0E82               	movlw	low _wrkbuf
 20276  00352E  6F71               	movwf	?_sprintf& (0+255),b
 20277  003530  C095  F073         	movff	_printStatistics$1528,?_sprintf+2
 20278  003534  C096  F074         	movff	_printStatistics$1528+1,?_sprintf+3
 20279  003538  C108  F075         	movff	_cntRxBytes,?_sprintf+4
 20280  00353C  C109  F076         	movff	_cntRxBytes+1,?_sprintf+5
 20281  003540  C10A  F077         	movff	_cntRxBytes+2,?_sprintf+6
 20282  003544  C10B  F078         	movff	_cntRxBytes+3,?_sprintf+7
 20283  003548  ECFB  F025         	call	_sprintf	;wreg free
 20284                           
 20285                           ; BSR set to: 0
 20286                           ;main.c: 2813: putsUSART(wrkbuf);
 20287  00354C  0101               	movlb	1	; () banked
 20288  00354E  0E01               	movlw	high _wrkbuf
 20289  003550  6E21               	movwf	?_putsUSART+1,c
 20290  003552  0E82               	movlw	low _wrkbuf
 20291  003554  6E20               	movwf	?_putsUSART,c
 20292  003556  EC74  F009         	call	_putsUSART	;wreg free
 20293                           
 20294                           ;main.c: 2814: putsUSART((char *) "\r\n");
 20295  00355A  0E70               	movlw	high (STR_237+50)
 20296  00355C  6E21               	movwf	?_putsUSART+1,c
 20297  00355E  0E5A               	movlw	low (STR_237+50)
 20298  003560  6E20               	movwf	?_putsUSART,c
 20299  003562  EF74  F009         	goto	_putsUSART	;wreg free
 20300  003566                     __end_of_printStatistics:
 20301                           	opt stack 0
 20302                           tblptru	equ	0xFF8
 20303                           tblptrh	equ	0xFF7
 20304                           tblptrl	equ	0xFF6
 20305                           tablat	equ	0xFF5
 20306                           prodh	equ	0xFF4
 20307                           prodl	equ	0xFF3
 20308                           intcon	equ	0xFF2
 20309                           indf0	equ	0xFEF
 20310                           postinc0	equ	0xFEE
 20311                           fsr0h	equ	0xFEA
 20312                           fsr0l	equ	0xFE9
 20313                           wreg	equ	0xFE8
 20314                           indf1	equ	0xFE7
 20315                           postinc1	equ	0xFE6
 20316                           postdec1	equ	0xFE5
 20317                           fsr1h	equ	0xFE2
 20318                           fsr1l	equ	0xFE1
 20319                           indf2	equ	0xFDF
 20320                           postinc2	equ	0xFDE
 20321                           postdec2	equ	0xFDD
 20322                           plusw2	equ	0xFDB
 20323                           fsr2h	equ	0xFDA
 20324                           fsr2l	equ	0xFD9
 20325                           status	equ	0xFD8
 20326                           
 20327 ;; *************** function _atoi *****************
 20328 ;; Defined at:
 20329 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 20330 ;; Parameters:    Size  Location     Type
 20331 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 20332 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 20333 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 20334 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 20335 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 20336 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 20337 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 20338 ;;		 -> cmdbuf(80), 
 20339 ;; Auto vars:     Size  Location     Type
 20340 ;;  a               2   11[BANK0 ] int 
 20341 ;;  sign            1   10[BANK0 ] unsigned char 
 20342 ;; Return value:  Size  Location     Type
 20343 ;;                  2    6[BANK0 ] int 
 20344 ;; Registers used:
 20345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20346 ;; Tracked objects:
 20347 ;;		On entry : C/2
 20348 ;;		On exit  : F/0
 20349 ;;		Unchanged: 0/0
 20350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20351 ;;      Params:         0       2       0       0       0       0       0
 20352 ;;      Locals:         0       3       0       0       0       0       0
 20353 ;;      Temps:          0       2       0       0       0       0       0
 20354 ;;      Totals:         0       7       0       0       0       0       0
 20355 ;;Total ram usage:        7 bytes
 20356 ;; Hardware stack levels used:    1
 20357 ;; Hardware stack levels required when called:    4
 20358 ;; This function calls:
 20359 ;;		_isdigit
 20360 ;;		___wmul
 20361 ;; This function is called by:
 20362 ;;		_doModeVerbose
 20363 ;; This function uses a non-reentrant model
 20364 ;;
 20365                           
 20366                           	psect	text41
 20367  002A06                     __ptext41:
 20368                           	opt stack 0
 20369  002A06                     _atoi:
 20370                           	opt stack 24
 20371                           
 20372                           ;incstack = 0
 20373                           ;incstack = 0
 20374  002A06  D003               	goto	l16300
 20375  002A08                     l16298:
 20376  002A08  0100               	movlb	0	; () banked
 20377  002A0A  4B66               	infsnz	atoi@s& (0+255),f,b
 20378  002A0C  2B67               	incf	(atoi@s+1)& (0+255),f,b
 20379  002A0E                     l16300:
 20380  002A0E  0100               	movlb	0	; () banked
 20381  002A10  D878               	call	PL22	;call to abstracted procedure
 20382  002A12  64EA               	cpfsgt	fsr0h,c
 20383  002A14  D003               	bra	u20817
 20384  002A16  6EEA               	movwf	fsr0h,c
 20385  002A18  50EF               	movf	indf0,w,c
 20386  002A1A  D003               	bra	u20810
 20387  002A1C                     u20817:
 20388  002A1C  6EF7               	movwf	tblptrh,c
 20389  002A1E  0008               	tblrd		*
 20390  002A20  50F5               	movf	tablat,w,c
 20391  002A22                     u20810:
 20392  002A22  0A20               	xorlw	32
 20393  002A24  E0F1               	bz	l16298
 20394  002A26  0100               	movlb	0	; () banked
 20395  002A28  D86C               	call	PL22	;call to abstracted procedure
 20396  002A2A  64EA               	cpfsgt	fsr0h,c
 20397  002A2C  D003               	bra	u20837
 20398  002A2E  6EEA               	movwf	fsr0h,c
 20399  002A30  50EF               	movf	indf0,w,c
 20400  002A32  D003               	bra	u20830
 20401  002A34                     u20837:
 20402  002A34  6EF7               	movwf	tblptrh,c
 20403  002A36  0008               	tblrd		*
 20404  002A38  50F5               	movf	tablat,w,c
 20405  002A3A                     u20830:
 20406  002A3A  0A09               	xorlw	9
 20407  002A3C  E0E5               	bz	l16298
 20408  002A3E  0100               	movlb	0	; () banked
 20409  002A40  6B6B               	clrf	atoi@a& (0+255),b
 20410  002A42  6B6C               	clrf	(atoi@a+1)& (0+255),b
 20411  002A44  6B6A               	clrf	atoi@sign& (0+255),b
 20412                           
 20413                           ; BSR set to: 0
 20414  002A46  D85D               	call	PL22	;call to abstracted procedure
 20415  002A48  64EA               	cpfsgt	fsr0h,c
 20416  002A4A  D003               	bra	u20857
 20417  002A4C  6EEA               	movwf	fsr0h,c
 20418  002A4E  50EF               	movf	indf0,w,c
 20419  002A50  D003               	bra	u20850
 20420  002A52                     u20857:
 20421  002A52  6EF7               	movwf	tblptrh,c
 20422  002A54  0008               	tblrd		*
 20423  002A56  50F5               	movf	tablat,w,c
 20424  002A58                     u20850:
 20425  002A58  0A2D               	xorlw	45
 20426  002A5A  E103               	bnz	l16308
 20427  002A5C  0100               	movlb	0	; () banked
 20428  002A5E  2B6A               	incf	atoi@sign& (0+255),f,b
 20429  002A60  D00D               	goto	L30
 20430  002A62                     l16308:
 20431  002A62  0100               	movlb	0	; () banked
 20432  002A64  D84E               	call	PL22	;call to abstracted procedure
 20433  002A66  64EA               	cpfsgt	fsr0h,c
 20434  002A68  D003               	bra	u20877
 20435  002A6A  6EEA               	movwf	fsr0h,c
 20436  002A6C  50EF               	movf	indf0,w,c
 20437  002A6E  D003               	bra	u20870
 20438  002A70                     u20877:
 20439  002A70  6EF7               	movwf	tblptrh,c
 20440  002A72  0008               	tblrd		*
 20441  002A74  50F5               	movf	tablat,w,c
 20442  002A76                     u20870:
 20443  002A76  0A2B               	xorlw	43
 20444  002A78  E122               	bnz	l16316
 20445  002A7A                     l16310:
 20446  002A7A  0100               	movlb	0	; () banked
 20447  002A7C                     L30:
 20448  002A7C  4B66               	infsnz	atoi@s& (0+255),f,b
 20449  002A7E  2B67               	incf	(atoi@s+1)& (0+255),f,b
 20450  002A80  D01E               	goto	l16316
 20451  002A82                     l16312:
 20452  002A82  C06B  F060         	movff	atoi@a,?___wmul
 20453  002A86  C06C  F061         	movff	atoi@a+1,?___wmul+1
 20454  002A8A  0100               	movlb	0	; () banked
 20455  002A8C  6B63               	clrf	(?___wmul+3)& (0+255),b
 20456  002A8E  0E0A               	movlw	10
 20457  002A90  6F62               	movwf	(?___wmul+2)& (0+255),b
 20458  002A92  ECA0  F007         	call	___wmul	;wreg free
 20459  002A96  D835               	call	PL22	;call to abstracted procedure
 20460  002A98  64EA               	cpfsgt	fsr0h,c
 20461  002A9A  D003               	bra	u20897
 20462  002A9C  6EEA               	movwf	fsr0h,c
 20463  002A9E  50EF               	movf	indf0,w,c
 20464  002AA0  D003               	bra	u20890
 20465  002AA2                     u20897:
 20466  002AA2  6EF7               	movwf	tblptrh,c
 20467  002AA4  0008               	tblrd		*
 20468  002AA6  50F5               	movf	tablat,w,c
 20469  002AA8                     u20890:
 20470  002AA8  0100               	movlb	0	; () banked
 20471  002AAA  2760               	addwf	?___wmul& (0+255),f,b
 20472  002AAC  0E00               	movlw	0
 20473  002AAE  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 20474  002AB0  0ED0               	movlw	208
 20475  002AB2  2560               	addwf	?___wmul& (0+255),w,b
 20476  002AB4  6F6B               	movwf	atoi@a& (0+255),b
 20477  002AB6  0EFF               	movlw	255
 20478  002AB8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 20479  002ABA  6F6C               	movwf	(atoi@a+1)& (0+255),b
 20480  002ABC  D7DE               	goto	l16310
 20481  002ABE                     l16316:
 20482  002ABE  0100               	movlb	0	; () banked
 20483  002AC0  D820               	call	PL22	;call to abstracted procedure
 20484  002AC2  64EA               	cpfsgt	fsr0h,c
 20485  002AC4  D003               	bra	u20907
 20486  002AC6  6EEA               	movwf	fsr0h,c
 20487  002AC8  50EF               	movf	indf0,w,c
 20488  002ACA  D003               	bra	u20900
 20489  002ACC                     u20907:
 20490  002ACC  6EF7               	movwf	tblptrh,c
 20491  002ACE  0008               	tblrd		*
 20492  002AD0  50F5               	movf	tablat,w,c
 20493  002AD2                     u20900:
 20494  002AD2  EC18  F007         	call	_isdigit
 20495  002AD6  E2D5               	bc	l16312
 20496  002AD8  0100               	movlb	0	; () banked
 20497  002ADA  516A               	movf	atoi@sign& (0+255),w,b
 20498  002ADC  E00D               	bz	l2188
 20499                           
 20500                           ; BSR set to: 0
 20501  002ADE  C06B  F068         	movff	atoi@a,??_atoi
 20502  002AE2  C06C  F069         	movff	atoi@a+1,??_atoi+1
 20503  002AE6  1F68               	comf	??_atoi& (0+255),f,b
 20504  002AE8  1F69               	comf	(??_atoi+1)& (0+255),f,b
 20505  002AEA  4B68               	infsnz	??_atoi& (0+255),f,b
 20506  002AEC  2B69               	incf	(??_atoi+1)& (0+255),f,b
 20507  002AEE  C068  F066         	movff	??_atoi,?_atoi
 20508  002AF2  C069  F067         	movff	??_atoi+1,?_atoi+1
 20509  002AF6  D004               	goto	l2189
 20510  002AF8                     l2188:
 20511                           
 20512                           ; BSR set to: 0
 20513  002AF8  C06B  F066         	movff	atoi@a,?_atoi
 20514  002AFC  C06C  F067         	movff	atoi@a+1,?_atoi+1
 20515  002B00                     l2189:
 20516                           
 20517                           ; BSR set to: 0
 20518  002B00  0012               	return	
 20519  002B02                     __end_of_atoi:
 20520                           	opt stack 0
 20521  002B02                     PL22:
 20522                           	opt stack 24
 20523  002B02  5166               	movf	atoi@s& (0+255),w,b
 20524  002B04  6EF6               	movwf	tblptrl,c
 20525  002B06  6EE9               	movwf	fsr0l,c
 20526  002B08  0E05               	movlw	(high __ramtop+-1)
 20527  002B0A  6EEA               	movwf	fsr0h,c
 20528  002B0C  5167               	movf	(atoi@s+1)& (0+255),w,b
 20529  002B0E  0012               	return	
 20530  002B10                     __end_ofPL22:
 20531                           	opt stack 0
 20532                           tblptru	equ	0xFF8
 20533                           tblptrh	equ	0xFF7
 20534                           tblptrl	equ	0xFF6
 20535                           tablat	equ	0xFF5
 20536                           prodh	equ	0xFF4
 20537                           prodl	equ	0xFF3
 20538                           intcon	equ	0xFF2
 20539                           indf0	equ	0xFEF
 20540                           postinc0	equ	0xFEE
 20541                           fsr0h	equ	0xFEA
 20542                           fsr0l	equ	0xFE9
 20543                           wreg	equ	0xFE8
 20544                           indf1	equ	0xFE7
 20545                           postinc1	equ	0xFE6
 20546                           postdec1	equ	0xFE5
 20547                           fsr1h	equ	0xFE2
 20548                           fsr1l	equ	0xFE1
 20549                           indf2	equ	0xFDF
 20550                           postinc2	equ	0xFDE
 20551                           postdec2	equ	0xFDD
 20552                           plusw2	equ	0xFDB
 20553                           fsr2h	equ	0xFDA
 20554                           fsr2l	equ	0xFD9
 20555                           status	equ	0xFD8
 20556                           
 20557 ;; *************** function _strtok *****************
 20558 ;; Defined at:
 20559 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 20560 ;; Parameters:    Size  Location     Type
 20561 ;;  s1              2    8[BANK0 ] PTR unsigned char 
 20562 ;;		 -> NULL(0), cmdbuf(80), 
 20563 ;;  s2              2   10[BANK0 ] PTR const unsigned char 
 20564 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 20565 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 20566 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 20567 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 20568 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 20569 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 20570 ;; Auto vars:     Size  Location     Type
 20571 ;;		None
 20572 ;; Return value:  Size  Location     Type
 20573 ;;                  2    8[BANK0 ] PTR unsigned char 
 20574 ;; Registers used:
 20575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20576 ;; Tracked objects:
 20577 ;;		On entry : F/0
 20578 ;;		On exit  : F/0
 20579 ;;		Unchanged: 0/0
 20580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20581 ;;      Params:         0       4       0       0       0       0       0
 20582 ;;      Locals:         0       0       0       0       0       0       0
 20583 ;;      Temps:          0       0       0       0       0       0       0
 20584 ;;      Totals:         0       4       0       0       0       0       0
 20585 ;;Total ram usage:        4 bytes
 20586 ;; Hardware stack levels used:    1
 20587 ;; Hardware stack levels required when called:    5
 20588 ;; This function calls:
 20589 ;;		_strspn
 20590 ;;		_strcspn
 20591 ;; This function is called by:
 20592 ;;		_doModeVerbose
 20593 ;; This function uses a non-reentrant model
 20594 ;;
 20595                           
 20596                           	psect	text42
 20597  001A0A                     __ptext42:
 20598                           	opt stack 0
 20599  001A0A                     _strtok:
 20600                           	opt stack 23
 20601                           
 20602                           ; BSR set to: 0
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;incstack = 0
 20606                           ;incstack = 0
 20607  001A0A  5169               	movf	(strtok@s1+1)& (0+255),w,b
 20608  001A0C  1168               	iorwf	strtok@s1& (0+255),w,b
 20609  001A0E  E104               	bnz	l16278
 20610                           
 20611                           ; BSR set to: 0
 20612  001A10  C026  F068         	movff	strtok@sp,strtok@s1
 20613  001A14  C027  F069         	movff	strtok@sp+1,strtok@s1+1
 20614  001A18                     l16278:
 20615                           
 20616                           ; BSR set to: 0
 20617  001A18  5169               	movf	(strtok@s1+1)& (0+255),w,b
 20618  001A1A  1168               	iorwf	strtok@s1& (0+255),w,b
 20619  001A1C  E017               	bz	L31
 20620                           
 20621                           ; BSR set to: 0
 20622                           
 20623                           ; BSR set to: 0
 20624  001A1E  C068  F062         	movff	strtok@s1,?_strspn
 20625  001A22  C069  F063         	movff	strtok@s1+1,?_strspn+1
 20626  001A26  C06A  F064         	movff	strtok@s2,?_strspn+2
 20627  001A2A  C06B  F065         	movff	strtok@s2+1,?_strspn+3
 20628  001A2E  ECE4  F008         	call	_strspn	;wreg free
 20629  001A32  0100               	movlb	0	; () banked
 20630  001A34  5162               	movf	?_strspn& (0+255),w,b
 20631  001A36  2768               	addwf	strtok@s1& (0+255),f,b
 20632  001A38  5163               	movf	(?_strspn+1)& (0+255),w,b
 20633  001A3A  2369               	addwfc	(strtok@s1+1)& (0+255),f,b
 20634                           
 20635                           ; BSR set to: 0
 20636  001A3C  C068  FFD9         	movff	strtok@s1,fsr2l
 20637  001A40  C069  FFDA         	movff	strtok@s1+1,fsr2h
 20638  001A44  50DF               	movf	indf2,w,c
 20639  001A46  E105               	bnz	l16288
 20640                           
 20641                           ; BSR set to: 0
 20642  001A48  6A26               	clrf	strtok@sp,c
 20643  001A4A  6A27               	clrf	strtok@sp+1,c
 20644  001A4C                     L31:
 20645  001A4C  6B68               	clrf	?_strtok& (0+255),b
 20646  001A4E  6B69               	clrf	(?_strtok+1)& (0+255),b
 20647  001A50  D026               	goto	l2681
 20648  001A52                     l16288:
 20649                           
 20650                           ; BSR set to: 0
 20651  001A52  C068  F062         	movff	strtok@s1,?_strcspn
 20652  001A56  C069  F063         	movff	strtok@s1+1,?_strcspn+1
 20653  001A5A  C06A  F064         	movff	strtok@s2,?_strcspn+2
 20654  001A5E  C06B  F065         	movff	strtok@s2+1,?_strcspn+3
 20655  001A62  EC07  F009         	call	_strcspn	;wreg free
 20656  001A66  0100               	movlb	0	; () banked
 20657  001A68  5162               	movf	?_strcspn& (0+255),w,b
 20658  001A6A  2568               	addwf	strtok@s1& (0+255),w,b
 20659  001A6C  6E26               	movwf	strtok@sp,c
 20660  001A6E  5163               	movf	(?_strcspn+1)& (0+255),w,b
 20661  001A70  2169               	addwfc	(strtok@s1+1)& (0+255),w,b
 20662  001A72  6E27               	movwf	strtok@sp+1,c
 20663                           
 20664                           ; BSR set to: 0
 20665  001A74  C026  FFD9         	movff	strtok@sp,fsr2l
 20666  001A78  C027  FFDA         	movff	strtok@sp+1,fsr2h
 20667  001A7C  50DF               	movf	indf2,w,c
 20668  001A7E  E009               	bz	l2683
 20669                           
 20670                           ; BSR set to: 0
 20671  001A80  C026  FFD9         	movff	strtok@sp,fsr2l
 20672  001A84  C027  FFDA         	movff	strtok@sp+1,fsr2h
 20673  001A88  0E00               	movlw	0
 20674  001A8A  6EDF               	movwf	indf2,c
 20675                           
 20676                           ; BSR set to: 0
 20677  001A8C  4A26               	infsnz	strtok@sp,f,c
 20678  001A8E  2A27               	incf	strtok@sp+1,f,c
 20679  001A90  D002               	goto	l2684
 20680  001A92                     l2683:
 20681                           
 20682                           ; BSR set to: 0
 20683  001A92  6A26               	clrf	strtok@sp,c
 20684  001A94  6A27               	clrf	strtok@sp+1,c
 20685  001A96                     l2684:
 20686                           
 20687                           ; BSR set to: 0
 20688  001A96  C068  F068         	movff	strtok@s1,?_strtok
 20689  001A9A  C069  F069         	movff	strtok@s1+1,?_strtok+1
 20690  001A9E                     l2681:
 20691                           
 20692                           ; BSR set to: 0
 20693  001A9E  0012               	return	
 20694  001AA0                     __end_of_strtok:
 20695                           	opt stack 0
 20696                           tblptru	equ	0xFF8
 20697                           tblptrh	equ	0xFF7
 20698                           tblptrl	equ	0xFF6
 20699                           tablat	equ	0xFF5
 20700                           prodh	equ	0xFF4
 20701                           prodl	equ	0xFF3
 20702                           intcon	equ	0xFF2
 20703                           indf0	equ	0xFEF
 20704                           postinc0	equ	0xFEE
 20705                           fsr0h	equ	0xFEA
 20706                           fsr0l	equ	0xFE9
 20707                           wreg	equ	0xFE8
 20708                           indf1	equ	0xFE7
 20709                           postinc1	equ	0xFE6
 20710                           postdec1	equ	0xFE5
 20711                           fsr1h	equ	0xFE2
 20712                           fsr1l	equ	0xFE1
 20713                           indf2	equ	0xFDF
 20714                           postinc2	equ	0xFDE
 20715                           postdec2	equ	0xFDD
 20716                           plusw2	equ	0xFDB
 20717                           fsr2h	equ	0xFDA
 20718                           fsr2l	equ	0xFD9
 20719                           status	equ	0xFD8
 20720                           
 20721 ;; *************** function _strcspn *****************
 20722 ;; Defined at:
 20723 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 20724 ;; Parameters:    Size  Location     Type
 20725 ;;  s1              2    2[BANK0 ] PTR const unsigned char 
 20726 ;;		 -> NULL(0), cmdbuf(80), 
 20727 ;;  s2              2    4[BANK0 ] PTR const unsigned char 
 20728 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 20729 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 20730 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 20731 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 20732 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 20733 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 20734 ;; Auto vars:     Size  Location     Type
 20735 ;;  i               2    6[BANK0 ] unsigned int 
 20736 ;; Return value:  Size  Location     Type
 20737 ;;                  2    2[BANK0 ] unsigned int 
 20738 ;; Registers used:
 20739 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20740 ;; Tracked objects:
 20741 ;;		On entry : F/0
 20742 ;;		On exit  : 0/0
 20743 ;;		Unchanged: 0/0
 20744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20745 ;;      Params:         0       4       0       0       0       0       0
 20746 ;;      Locals:         0       2       0       0       0       0       0
 20747 ;;      Temps:          0       0       0       0       0       0       0
 20748 ;;      Totals:         0       6       0       0       0       0       0
 20749 ;;Total ram usage:        6 bytes
 20750 ;; Hardware stack levels used:    1
 20751 ;; Hardware stack levels required when called:    4
 20752 ;; This function calls:
 20753 ;;		_strchr
 20754 ;; This function is called by:
 20755 ;;		_strtok
 20756 ;; This function uses a non-reentrant model
 20757 ;;
 20758                           
 20759                           	psect	text43
 20760  00120E                     __ptext43:
 20761                           	opt stack 0
 20762  00120E                     _strcspn:
 20763                           	opt stack 23
 20764                           
 20765                           ; BSR set to: 0
 20766                           
 20767                           ; BSR set to: 0
 20768                           ;incstack = 0
 20769                           ;incstack = 0
 20770  00120E  6B66               	clrf	strcspn@i& (0+255),b
 20771  001210  6B67               	clrf	(strcspn@i+1)& (0+255),b
 20772  001212  D005               	goto	l17810
 20773  001214                     l17808:
 20774  001214  0100               	movlb	0	; () banked
 20775  001216  4B62               	infsnz	strcspn@s1& (0+255),f,b
 20776  001218  2B63               	incf	(strcspn@s1+1)& (0+255),f,b
 20777  00121A  4B66               	infsnz	strcspn@i& (0+255),f,b
 20778  00121C  2B67               	incf	(strcspn@i+1)& (0+255),f,b
 20779  00121E                     l17810:
 20780                           
 20781                           ; BSR set to: 0
 20782  00121E  C062  FFD9         	movff	strcspn@s1,fsr2l
 20783  001222  C063  FFDA         	movff	strcspn@s1+1,fsr2h
 20784  001226  50DF               	movf	indf2,w,c
 20785  001228  E010               	bz	l2708
 20786                           
 20787                           ; BSR set to: 0
 20788  00122A  C064  F01F         	movff	strcspn@s2,?_strchr
 20789  00122E  C065  F020         	movff	strcspn@s2+1,?_strchr+1
 20790  001232  C062  FFD9         	movff	strcspn@s1,fsr2l
 20791  001236  C063  FFDA         	movff	strcspn@s1+1,fsr2h
 20792  00123A  50DF               	movf	indf2,w,c
 20793  00123C  6E21               	movwf	?_strchr+2,c
 20794  00123E  6A22               	clrf	?_strchr+3,c
 20795  001240  EC50  F00A         	call	_strchr	;wreg free
 20796  001244  5020               	movf	?_strchr+1,w,c
 20797  001246  101F               	iorwf	?_strchr,w,c
 20798  001248  E0E5               	bz	l17808
 20799  00124A                     l2708:
 20800  00124A  C066  F062         	movff	strcspn@i,?_strcspn
 20801  00124E  C067  F063         	movff	strcspn@i+1,?_strcspn+1
 20802  001252  0012               	return	
 20803  001254                     __end_of_strcspn:
 20804                           	opt stack 0
 20805                           tblptru	equ	0xFF8
 20806                           tblptrh	equ	0xFF7
 20807                           tblptrl	equ	0xFF6
 20808                           tablat	equ	0xFF5
 20809                           prodh	equ	0xFF4
 20810                           prodl	equ	0xFF3
 20811                           intcon	equ	0xFF2
 20812                           indf0	equ	0xFEF
 20813                           postinc0	equ	0xFEE
 20814                           fsr0h	equ	0xFEA
 20815                           fsr0l	equ	0xFE9
 20816                           wreg	equ	0xFE8
 20817                           indf1	equ	0xFE7
 20818                           postinc1	equ	0xFE6
 20819                           postdec1	equ	0xFE5
 20820                           fsr1h	equ	0xFE2
 20821                           fsr1l	equ	0xFE1
 20822                           indf2	equ	0xFDF
 20823                           postinc2	equ	0xFDE
 20824                           postdec2	equ	0xFDD
 20825                           plusw2	equ	0xFDB
 20826                           fsr2h	equ	0xFDA
 20827                           fsr2l	equ	0xFD9
 20828                           status	equ	0xFD8
 20829                           
 20830 ;; *************** function _strspn *****************
 20831 ;; Defined at:
 20832 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 20833 ;; Parameters:    Size  Location     Type
 20834 ;;  s1              2    2[BANK0 ] PTR const unsigned char 
 20835 ;;		 -> NULL(0), cmdbuf(80), 
 20836 ;;  s2              2    4[BANK0 ] PTR const unsigned char 
 20837 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 20838 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 20839 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 20840 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 20841 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 20842 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 20843 ;; Auto vars:     Size  Location     Type
 20844 ;;  i               2    6[BANK0 ] unsigned int 
 20845 ;; Return value:  Size  Location     Type
 20846 ;;                  2    2[BANK0 ] unsigned int 
 20847 ;; Registers used:
 20848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20849 ;; Tracked objects:
 20850 ;;		On entry : F/0
 20851 ;;		On exit  : 0/0
 20852 ;;		Unchanged: 0/0
 20853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20854 ;;      Params:         0       4       0       0       0       0       0
 20855 ;;      Locals:         0       2       0       0       0       0       0
 20856 ;;      Temps:          0       0       0       0       0       0       0
 20857 ;;      Totals:         0       6       0       0       0       0       0
 20858 ;;Total ram usage:        6 bytes
 20859 ;; Hardware stack levels used:    1
 20860 ;; Hardware stack levels required when called:    4
 20861 ;; This function calls:
 20862 ;;		_strchr
 20863 ;; This function is called by:
 20864 ;;		_strtok
 20865 ;; This function uses a non-reentrant model
 20866 ;;
 20867                           
 20868                           	psect	text44
 20869  0011C8                     __ptext44:
 20870                           	opt stack 0
 20871  0011C8                     _strspn:
 20872                           	opt stack 23
 20873                           
 20874                           ; BSR set to: 0
 20875                           
 20876                           ;incstack = 0
 20877                           ;incstack = 0
 20878  0011C8  6B66               	clrf	strspn@i& (0+255),b
 20879  0011CA  6B67               	clrf	(strspn@i+1)& (0+255),b
 20880  0011CC  D005               	goto	l17802
 20881  0011CE                     l17800:
 20882  0011CE  0100               	movlb	0	; () banked
 20883  0011D0  4B62               	infsnz	strspn@s1& (0+255),f,b
 20884  0011D2  2B63               	incf	(strspn@s1+1)& (0+255),f,b
 20885  0011D4  4B66               	infsnz	strspn@i& (0+255),f,b
 20886  0011D6  2B67               	incf	(strspn@i+1)& (0+255),f,b
 20887  0011D8                     l17802:
 20888                           
 20889                           ; BSR set to: 0
 20890  0011D8  C062  FFD9         	movff	strspn@s1,fsr2l
 20891  0011DC  C063  FFDA         	movff	strspn@s1+1,fsr2h
 20892  0011E0  50DF               	movf	indf2,w,c
 20893  0011E2  E010               	bz	l2727
 20894                           
 20895                           ; BSR set to: 0
 20896  0011E4  C064  F01F         	movff	strspn@s2,?_strchr
 20897  0011E8  C065  F020         	movff	strspn@s2+1,?_strchr+1
 20898  0011EC  C062  FFD9         	movff	strspn@s1,fsr2l
 20899  0011F0  C063  FFDA         	movff	strspn@s1+1,fsr2h
 20900  0011F4  50DF               	movf	indf2,w,c
 20901  0011F6  6E21               	movwf	?_strchr+2,c
 20902  0011F8  6A22               	clrf	?_strchr+3,c
 20903  0011FA  EC50  F00A         	call	_strchr	;wreg free
 20904  0011FE  5020               	movf	?_strchr+1,w,c
 20905  001200  101F               	iorwf	?_strchr,w,c
 20906  001202  E1E5               	bnz	l17800
 20907  001204                     l2727:
 20908  001204  C066  F062         	movff	strspn@i,?_strspn
 20909  001208  C067  F063         	movff	strspn@i+1,?_strspn+1
 20910  00120C  0012               	return	
 20911  00120E                     __end_of_strspn:
 20912                           	opt stack 0
 20913                           tblptru	equ	0xFF8
 20914                           tblptrh	equ	0xFF7
 20915                           tblptrl	equ	0xFF6
 20916                           tablat	equ	0xFF5
 20917                           prodh	equ	0xFF4
 20918                           prodl	equ	0xFF3
 20919                           intcon	equ	0xFF2
 20920                           indf0	equ	0xFEF
 20921                           postinc0	equ	0xFEE
 20922                           fsr0h	equ	0xFEA
 20923                           fsr0l	equ	0xFE9
 20924                           wreg	equ	0xFE8
 20925                           indf1	equ	0xFE7
 20926                           postinc1	equ	0xFE6
 20927                           postdec1	equ	0xFE5
 20928                           fsr1h	equ	0xFE2
 20929                           fsr1l	equ	0xFE1
 20930                           indf2	equ	0xFDF
 20931                           postinc2	equ	0xFDE
 20932                           postdec2	equ	0xFDD
 20933                           plusw2	equ	0xFDB
 20934                           fsr2h	equ	0xFDA
 20935                           fsr2l	equ	0xFD9
 20936                           status	equ	0xFD8
 20937                           
 20938 ;; *************** function _strchr *****************
 20939 ;; Defined at:
 20940 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20941 ;; Parameters:    Size  Location     Type
 20942 ;;  ptr             2   30[COMRAM] PTR const unsigned char 
 20943 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 20944 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 20945 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 20946 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 20947 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 20948 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 20949 ;;		 -> cmdbuf(80), 
 20950 ;;  chr             2   32[COMRAM] int 
 20951 ;; Auto vars:     Size  Location     Type
 20952 ;;		None
 20953 ;; Return value:  Size  Location     Type
 20954 ;;                  2   30[COMRAM] PTR unsigned char 
 20955 ;; Registers used:
 20956 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20957 ;; Tracked objects:
 20958 ;;		On entry : D/2
 20959 ;;		On exit  : 0/0
 20960 ;;		Unchanged: 0/0
 20961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20962 ;;      Params:         4       0       0       0       0       0       0
 20963 ;;      Locals:         0       0       0       0       0       0       0
 20964 ;;      Temps:          0       2       0       0       0       0       0
 20965 ;;      Totals:         4       2       0       0       0       0       0
 20966 ;;Total ram usage:        6 bytes
 20967 ;; Hardware stack levels used:    1
 20968 ;; Hardware stack levels required when called:    3
 20969 ;; This function calls:
 20970 ;;		Nothing
 20971 ;; This function is called by:
 20972 ;;		_doModeVerbose
 20973 ;;		_strcspn
 20974 ;;		_strspn
 20975 ;; This function uses a non-reentrant model
 20976 ;;
 20977                           
 20978                           	psect	text45
 20979  0014A0                     __ptext45:
 20980                           	opt stack 0
 20981  0014A0                     _strchr:
 20982                           	opt stack 25
 20983  0014A0                     l2629:
 20984  0014A0  501F               	movf	strchr@ptr,w,c
 20985  0014A2  6EF6               	movwf	tblptrl,c
 20986  0014A4  6EE9               	movwf	fsr0l,c
 20987  0014A6  0E05               	movlw	(high __ramtop+-1)
 20988  0014A8  6EEA               	movwf	fsr0h,c
 20989  0014AA  5020               	movf	strchr@ptr+1,w,c
 20990  0014AC  64EA               	cpfsgt	fsr0h,c
 20991  0014AE  D003               	bra	u21187
 20992  0014B0  6EEA               	movwf	fsr0h,c
 20993  0014B2  50EF               	movf	indf0,w,c
 20994  0014B4  D003               	bra	u21180
 20995  0014B6                     u21187:
 20996  0014B6  6EF7               	movwf	tblptrh,c
 20997  0014B8  0008               	tblrd		*
 20998  0014BA  50F5               	movf	tablat,w,c
 20999  0014BC                     u21180:
 21000  0014BC  1821               	xorwf	strchr@chr,w,c
 21001  0014BE  E105               	bnz	l16578
 21002  0014C0  C01F  F01F         	movff	strchr@ptr,?_strchr
 21003  0014C4  C020  F020         	movff	strchr@ptr+1,?_strchr+1
 21004  0014C8  D019               	goto	l2631
 21005  0014CA                     l16578:
 21006  0014CA  501F               	movf	strchr@ptr,w,c
 21007  0014CC  0100               	movlb	0	; () banked
 21008  0014CE  6F60               	movwf	??_strchr& (0+255),b
 21009  0014D0  5020               	movf	strchr@ptr+1,w,c
 21010  0014D2  6F61               	movwf	(??_strchr+1)& (0+255),b
 21011  0014D4  4A1F               	infsnz	strchr@ptr,f,c
 21012  0014D6  2A20               	incf	strchr@ptr+1,f,c
 21013  0014D8  5160               	movf	??_strchr& (0+255),w,b
 21014  0014DA  6EF6               	movwf	tblptrl,c
 21015  0014DC  6EE9               	movwf	fsr0l,c
 21016  0014DE  0E05               	movlw	(high __ramtop+-1)
 21017  0014E0  6EEA               	movwf	fsr0h,c
 21018  0014E2  5161               	movf	(??_strchr+1)& (0+255),w,b
 21019  0014E4  64EA               	cpfsgt	fsr0h,c
 21020  0014E6  D003               	bra	u21207
 21021  0014E8  6EEA               	movwf	fsr0h,c
 21022  0014EA  50EF               	movf	indf0,w,c
 21023  0014EC  D003               	bra	u21200
 21024  0014EE                     u21207:
 21025  0014EE  6EF7               	movwf	tblptrh,c
 21026  0014F0  0008               	tblrd		*
 21027  0014F2  50F5               	movf	tablat,w,c
 21028  0014F4                     u21200:
 21029  0014F4  0900               	iorlw	0
 21030  0014F6  E1D4               	bnz	l2629
 21031  0014F8  6A1F               	clrf	?_strchr,c
 21032  0014FA  6A20               	clrf	?_strchr+1,c
 21033  0014FC                     l2631:
 21034  0014FC  0012               	return	
 21035  0014FE                     __end_of_strchr:
 21036                           	opt stack 0
 21037                           tblptru	equ	0xFF8
 21038                           tblptrh	equ	0xFF7
 21039                           tblptrl	equ	0xFF6
 21040                           tablat	equ	0xFF5
 21041                           prodh	equ	0xFF4
 21042                           prodl	equ	0xFF3
 21043                           intcon	equ	0xFF2
 21044                           indf0	equ	0xFEF
 21045                           postinc0	equ	0xFEE
 21046                           fsr0h	equ	0xFEA
 21047                           fsr0l	equ	0xFE9
 21048                           wreg	equ	0xFE8
 21049                           indf1	equ	0xFE7
 21050                           postinc1	equ	0xFE6
 21051                           postdec1	equ	0xFE5
 21052                           fsr1h	equ	0xFE2
 21053                           fsr1l	equ	0xFE1
 21054                           indf2	equ	0xFDF
 21055                           postinc2	equ	0xFDE
 21056                           postdec2	equ	0xFDD
 21057                           plusw2	equ	0xFDB
 21058                           fsr2h	equ	0xFDA
 21059                           fsr2l	equ	0xFD9
 21060                           status	equ	0xFD8
 21061                           
 21062 ;; *************** function _stristr *****************
 21063 ;; Defined at:
 21064 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 21065 ;; Parameters:    Size  Location     Type
 21066 ;;  s1              2    8[BANK0 ] PTR const unsigned char 
 21067 ;;		 -> NULL(0), cmdbuf(80), 
 21068 ;;  s2              2   10[BANK0 ] PTR const unsigned char 
 21069 ;;		 -> STR_166(2), STR_165(9), STR_162(4), STR_160(3), 
 21070 ;;		 -> STR_159(11), STR_156(4), STR_154(3), STR_153(6), 
 21071 ;;		 -> STR_151(6), STR_149(5), STR_147(8), STR_146(6), 
 21072 ;;		 -> STR_145(9), STR_144(7), STR_143(7), STR_142(5), 
 21073 ;;		 -> STR_141(6), STR_140(9), STR_138(11), STR_136(8), 
 21074 ;;		 -> STR_134(4), STR_133(5), STR_120(5), STR_118(11), 
 21075 ;;		 -> STR_105(7), STR_97(5), STR_81(5), STR_49(5), 
 21076 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 21077 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 21078 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 21079 ;;		 -> STR_8(5), STR_6(5), 
 21080 ;; Auto vars:     Size  Location     Type
 21081 ;;		None
 21082 ;; Return value:  Size  Location     Type
 21083 ;;                  2    8[BANK0 ] PTR unsigned char 
 21084 ;; Registers used:
 21085 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21086 ;; Tracked objects:
 21087 ;;		On entry : F/0
 21088 ;;		On exit  : F/0
 21089 ;;		Unchanged: 0/0
 21090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21091 ;;      Params:         0       4       0       0       0       0       0
 21092 ;;      Locals:         0       0       0       0       0       0       0
 21093 ;;      Temps:          0       0       0       0       0       0       0
 21094 ;;      Totals:         0       4       0       0       0       0       0
 21095 ;;Total ram usage:        4 bytes
 21096 ;; Hardware stack levels used:    1
 21097 ;; Hardware stack levels required when called:    5
 21098 ;; This function calls:
 21099 ;;		_strlen
 21100 ;;		_strnicmp
 21101 ;;		_strichr
 21102 ;; This function is called by:
 21103 ;;		_doModeVerbose
 21104 ;; This function uses a non-reentrant model
 21105 ;;
 21106                           
 21107                           	psect	text46
 21108  0017FA                     __ptext46:
 21109                           	opt stack 0
 21110  0017FA                     _stristr:
 21111                           	opt stack 23
 21112                           
 21113                           ; BSR set to: 0
 21114                           
 21115                           ;incstack = 0
 21116                           ;incstack = 0
 21117  0017FA  D02F               	goto	l16270
 21118  0017FC                     l16264:
 21119                           
 21120                           ; BSR set to: 0
 21121  0017FC  C068  F060         	movff	stristr@s1,?_strnicmp
 21122  001800  C069  F061         	movff	stristr@s1+1,?_strnicmp+1
 21123  001804  C06A  F062         	movff	stristr@s2,?_strnicmp+2
 21124  001808  C06B  F063         	movff	stristr@s2+1,?_strnicmp+3
 21125  00180C  C06A  F01F         	movff	stristr@s2,?_strlen
 21126  001810  C06B  F020         	movff	stristr@s2+1,?_strlen+1
 21127  001814  EC28  F008         	call	_strlen	;wreg free
 21128  001818  C01F  F064         	movff	?_strlen,?_strnicmp+4
 21129  00181C  C020  F065         	movff	?_strlen+1,?_strnicmp+5
 21130  001820  ECE0  F00A         	call	_strnicmp	;wreg free
 21131  001824  5161               	movf	(?_strnicmp+1)& (0+255),w,b
 21132  001826  1160               	iorwf	?_strnicmp& (0+255),w,b
 21133  001828  E105               	bnz	l16268
 21134                           
 21135                           ; BSR set to: 0
 21136  00182A  C068  F068         	movff	stristr@s1,?_stristr
 21137  00182E  C069  F069         	movff	stristr@s1+1,?_stristr+1
 21138  001832  D01F               	goto	l2650
 21139  001834                     l16268:
 21140                           
 21141                           ; BSR set to: 0
 21142  001834  2968               	incf	stristr@s1& (0+255),w,b
 21143  001836  6E20               	movwf	?_strichr,c
 21144  001838  0E00               	movlw	0
 21145  00183A  2169               	addwfc	(stristr@s1+1)& (0+255),w,b
 21146  00183C  6E21               	movwf	?_strichr+1,c
 21147  00183E  C06A  FFF6         	movff	stristr@s2,tblptrl
 21148  001842  C06B  FFF7         	movff	stristr@s2+1,tblptrh
 21149  001846  0008               	tblrd		*
 21150  001848  50F5               	movf	tablat,w,c
 21151  00184A  6E22               	movwf	?_strichr+2,c
 21152  00184C  6A23               	clrf	?_strichr+3,c
 21153  00184E  EC65  F008         	call	_strichr	;wreg free
 21154  001852  C020  F068         	movff	?_strichr,stristr@s1
 21155  001856  C021  F069         	movff	?_strichr+1,stristr@s1+1
 21156  00185A                     l16270:
 21157  00185A  0100               	movlb	0	; () banked
 21158  00185C  5169               	movf	(stristr@s1+1)& (0+255),w,b
 21159  00185E  1168               	iorwf	stristr@s1& (0+255),w,b
 21160  001860  E006               	bz	l2653
 21161                           
 21162                           ; BSR set to: 0
 21163  001862  C068  FFD9         	movff	stristr@s1,fsr2l
 21164  001866  C069  FFDA         	movff	stristr@s1+1,fsr2h
 21165  00186A  50DF               	movf	indf2,w,c
 21166  00186C  E1C7               	bnz	l16264
 21167  00186E                     l2653:
 21168                           
 21169                           ; BSR set to: 0
 21170  00186E  6B68               	clrf	?_stristr& (0+255),b
 21171  001870  6B69               	clrf	(?_stristr+1)& (0+255),b
 21172  001872                     l2650:
 21173                           
 21174                           ; BSR set to: 0
 21175  001872  0012               	return	
 21176  001874                     __end_of_stristr:
 21177                           	opt stack 0
 21178                           tblptru	equ	0xFF8
 21179                           tblptrh	equ	0xFF7
 21180                           tblptrl	equ	0xFF6
 21181                           tablat	equ	0xFF5
 21182                           prodh	equ	0xFF4
 21183                           prodl	equ	0xFF3
 21184                           intcon	equ	0xFF2
 21185                           indf0	equ	0xFEF
 21186                           postinc0	equ	0xFEE
 21187                           fsr0h	equ	0xFEA
 21188                           fsr0l	equ	0xFE9
 21189                           wreg	equ	0xFE8
 21190                           indf1	equ	0xFE7
 21191                           postinc1	equ	0xFE6
 21192                           postdec1	equ	0xFE5
 21193                           fsr1h	equ	0xFE2
 21194                           fsr1l	equ	0xFE1
 21195                           indf2	equ	0xFDF
 21196                           postinc2	equ	0xFDE
 21197                           postdec2	equ	0xFDD
 21198                           plusw2	equ	0xFDB
 21199                           fsr2h	equ	0xFDA
 21200                           fsr2l	equ	0xFD9
 21201                           status	equ	0xFD8
 21202                           
 21203 ;; *************** function _strichr *****************
 21204 ;; Defined at:
 21205 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 21206 ;; Parameters:    Size  Location     Type
 21207 ;;  ptr             2   31[COMRAM] PTR const unsigned char 
 21208 ;;		 -> NULL(0), cmdbuf(80), 
 21209 ;;  chr             2   33[COMRAM] int 
 21210 ;; Auto vars:     Size  Location     Type
 21211 ;;		None
 21212 ;; Return value:  Size  Location     Type
 21213 ;;                  2   31[COMRAM] PTR unsigned char 
 21214 ;; Registers used:
 21215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21216 ;; Tracked objects:
 21217 ;;		On entry : F/0
 21218 ;;		On exit  : 0/0
 21219 ;;		Unchanged: 0/0
 21220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21221 ;;      Params:         4       0       0       0       0       0       0
 21222 ;;      Locals:         0       0       0       0       0       0       0
 21223 ;;      Temps:          0       0       0       0       0       0       0
 21224 ;;      Totals:         4       0       0       0       0       0       0
 21225 ;;Total ram usage:        4 bytes
 21226 ;; Hardware stack levels used:    1
 21227 ;; Hardware stack levels required when called:    4
 21228 ;; This function calls:
 21229 ;;		_toupper
 21230 ;; This function is called by:
 21231 ;;		_stristr
 21232 ;; This function uses a non-reentrant model
 21233 ;;
 21234                           
 21235                           	psect	text47
 21236  0010CA                     __ptext47:
 21237                           	opt stack 0
 21238  0010CA                     _strichr:
 21239                           	opt stack 23
 21240                           
 21241                           ; BSR set to: 0
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;incstack = 0
 21245                           ;incstack = 0
 21246  0010CA  5022               	movf	strichr@chr,w,c
 21247  0010CC  ECF2  F006         	call	_toupper
 21248  0010D0  6E22               	movwf	strichr@chr,c
 21249  0010D2  6A23               	clrf	strichr@chr+1,c
 21250  0010D4  D010               	goto	l17786
 21251  0010D6                     l17780:
 21252  0010D6  C020  FFD9         	movff	strichr@ptr,fsr2l
 21253  0010DA  C021  FFDA         	movff	strichr@ptr+1,fsr2h
 21254  0010DE  50DF               	movf	indf2,w,c
 21255  0010E0  ECF2  F006         	call	_toupper
 21256  0010E4  1822               	xorwf	strichr@chr,w,c
 21257  0010E6  E105               	bnz	l17784
 21258  0010E8  C020  F020         	movff	strichr@ptr,?_strichr
 21259  0010EC  C021  F021         	movff	strichr@ptr+1,?_strichr+1
 21260  0010F0  D00A               	goto	l2717
 21261  0010F2                     l17784:
 21262  0010F2  4A20               	infsnz	strichr@ptr,f,c
 21263  0010F4  2A21               	incf	strichr@ptr+1,f,c
 21264  0010F6                     l17786:
 21265  0010F6  C020  FFD9         	movff	strichr@ptr,fsr2l
 21266  0010FA  C021  FFDA         	movff	strichr@ptr+1,fsr2h
 21267  0010FE  50DF               	movf	indf2,w,c
 21268  001100  E1EA               	bnz	l17780
 21269  001102  6A20               	clrf	?_strichr,c
 21270  001104  6A21               	clrf	?_strichr+1,c
 21271  001106                     l2717:
 21272  001106  0012               	return	
 21273  001108                     __end_of_strichr:
 21274                           	opt stack 0
 21275                           tblptru	equ	0xFF8
 21276                           tblptrh	equ	0xFF7
 21277                           tblptrl	equ	0xFF6
 21278                           tablat	equ	0xFF5
 21279                           prodh	equ	0xFF4
 21280                           prodl	equ	0xFF3
 21281                           intcon	equ	0xFF2
 21282                           indf0	equ	0xFEF
 21283                           postinc0	equ	0xFEE
 21284                           fsr0h	equ	0xFEA
 21285                           fsr0l	equ	0xFE9
 21286                           wreg	equ	0xFE8
 21287                           indf1	equ	0xFE7
 21288                           postinc1	equ	0xFE6
 21289                           postdec1	equ	0xFE5
 21290                           fsr1h	equ	0xFE2
 21291                           fsr1l	equ	0xFE1
 21292                           indf2	equ	0xFDF
 21293                           postinc2	equ	0xFDE
 21294                           postdec2	equ	0xFDD
 21295                           plusw2	equ	0xFDB
 21296                           fsr2h	equ	0xFDA
 21297                           fsr2l	equ	0xFD9
 21298                           status	equ	0xFD8
 21299                           
 21300 ;; *************** function _strnicmp *****************
 21301 ;; Defined at:
 21302 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 21303 ;; Parameters:    Size  Location     Type
 21304 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 21305 ;;		 -> NULL(0), cmdbuf(80), 
 21306 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 21307 ;;		 -> STR_166(2), STR_165(9), STR_162(4), STR_160(3), 
 21308 ;;		 -> STR_159(11), STR_156(4), STR_154(3), STR_153(6), 
 21309 ;;		 -> STR_151(6), STR_149(5), STR_147(8), STR_146(6), 
 21310 ;;		 -> STR_145(9), STR_144(7), STR_143(7), STR_142(5), 
 21311 ;;		 -> STR_141(6), STR_140(9), STR_138(11), STR_136(8), 
 21312 ;;		 -> STR_134(4), STR_133(5), STR_120(5), STR_118(11), 
 21313 ;;		 -> STR_105(7), STR_97(5), STR_81(5), STR_49(5), 
 21314 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 21315 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 21316 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 21317 ;;		 -> STR_8(5), STR_6(5), 
 21318 ;;  len             2    4[BANK0 ] unsigned int 
 21319 ;; Auto vars:     Size  Location     Type
 21320 ;;  r               1   34[COMRAM] char 
 21321 ;; Return value:  Size  Location     Type
 21322 ;;                  2    0[BANK0 ] int 
 21323 ;; Registers used:
 21324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21325 ;; Tracked objects:
 21326 ;;		On entry : 0/0
 21327 ;;		On exit  : F/0
 21328 ;;		Unchanged: 0/0
 21329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21330 ;;      Params:         0       6       0       0       0       0       0
 21331 ;;      Locals:         1       0       0       0       0       0       0
 21332 ;;      Temps:          0       2       0       0       0       0       0
 21333 ;;      Totals:         1       8       0       0       0       0       0
 21334 ;;Total ram usage:        9 bytes
 21335 ;; Hardware stack levels used:    1
 21336 ;; Hardware stack levels required when called:    4
 21337 ;; This function calls:
 21338 ;;		_toupper
 21339 ;; This function is called by:
 21340 ;;		_stristr
 21341 ;; This function uses a non-reentrant model
 21342 ;;
 21343                           
 21344                           	psect	text48
 21345  0015C0                     __ptext48:
 21346                           	opt stack 0
 21347  0015C0                     _strnicmp:
 21348                           	opt stack 23
 21349                           
 21350                           ;incstack = 0
 21351                           ;incstack = 0
 21352  0015C0  D02A               	goto	l17776
 21353  0015C2                     l17766:
 21354                           
 21355                           ; BSR set to: 0
 21356  0015C2  C062  FFF6         	movff	strnicmp@s2,tblptrl
 21357  0015C6  C063  FFF7         	movff	strnicmp@s2+1,tblptrh
 21358  0015CA  0008               	tblrd		*
 21359  0015CC  50F5               	movf	tablat,w,c
 21360  0015CE  ECF2  F006         	call	_toupper
 21361  0015D2  0100               	movlb	0	; () banked
 21362  0015D4  6F66               	movwf	??_strnicmp& (0+255),b
 21363  0015D6  C060  FFD9         	movff	strnicmp@s1,fsr2l
 21364  0015DA  C061  FFDA         	movff	strnicmp@s1+1,fsr2h
 21365  0015DE  50DF               	movf	indf2,w,c
 21366  0015E0  ECF2  F006         	call	_toupper
 21367  0015E4  0100               	movlb	0	; () banked
 21368  0015E6  6F67               	movwf	(??_strnicmp+1)& (0+255),b
 21369  0015E8  5166               	movf	??_strnicmp& (0+255),w,b
 21370  0015EA  5D67               	subwf	(??_strnicmp+1)& (0+255),w,b
 21371  0015EC  6E23               	movwf	strnicmp@r,c
 21372  0015EE  6623               	tstfsz	strnicmp@r& (0+255),c
 21373  0015F0  D006               	goto	l17770
 21374  0015F2  C060  FFD9         	movff	strnicmp@s1,fsr2l
 21375  0015F6  C061  FFDA         	movff	strnicmp@s1+1,fsr2h
 21376  0015FA  50DF               	movf	indf2,w,c
 21377  0015FC  E107               	bnz	l17774
 21378  0015FE                     l17770:
 21379  0015FE  5023               	movf	strnicmp@r,w,c
 21380  001600  0100               	movlb	0	; () banked
 21381  001602  6F60               	movwf	?_strnicmp& (0+255),b
 21382  001604  6B61               	clrf	(?_strnicmp+1)& (0+255),b
 21383  001606  BF60               	btfsc	?_strnicmp& (0+255),7,b
 21384  001608  0761               	decf	(?_strnicmp+1)& (0+255),f,b
 21385  00160A  D00F               	goto	l2669
 21386  00160C                     l17774:
 21387  00160C  0100               	movlb	0	; () banked
 21388  00160E  4B60               	infsnz	strnicmp@s1& (0+255),f,b
 21389  001610  2B61               	incf	(strnicmp@s1+1)& (0+255),f,b
 21390  001612  4B62               	infsnz	strnicmp@s2& (0+255),f,b
 21391  001614  2B63               	incf	(strnicmp@s2+1)& (0+255),f,b
 21392  001616                     l17776:
 21393  001616  0100               	movlb	0	; () banked
 21394  001618  0764               	decf	strnicmp@len& (0+255),f,b
 21395  00161A  A0D8               	btfss	status,0,c
 21396  00161C  0765               	decf	(strnicmp@len+1)& (0+255),f,b
 21397  00161E  2964               	incf	strnicmp@len& (0+255),w,b
 21398  001620  B4D8               	btfsc	status,2,c
 21399  001622  2965               	incf	(strnicmp@len+1)& (0+255),w,b
 21400  001624  E1CE               	bnz	l17766
 21401                           
 21402                           ; BSR set to: 0
 21403  001626  6B60               	clrf	?_strnicmp& (0+255),b
 21404  001628  6B61               	clrf	(?_strnicmp+1)& (0+255),b
 21405  00162A                     l2669:
 21406                           
 21407                           ; BSR set to: 0
 21408  00162A  0012               	return	
 21409  00162C                     __end_of_strnicmp:
 21410                           	opt stack 0
 21411                           tblptru	equ	0xFF8
 21412                           tblptrh	equ	0xFF7
 21413                           tblptrl	equ	0xFF6
 21414                           tablat	equ	0xFF5
 21415                           prodh	equ	0xFF4
 21416                           prodl	equ	0xFF3
 21417                           intcon	equ	0xFF2
 21418                           indf0	equ	0xFEF
 21419                           postinc0	equ	0xFEE
 21420                           fsr0h	equ	0xFEA
 21421                           fsr0l	equ	0xFE9
 21422                           wreg	equ	0xFE8
 21423                           indf1	equ	0xFE7
 21424                           postinc1	equ	0xFE6
 21425                           postdec1	equ	0xFE5
 21426                           fsr1h	equ	0xFE2
 21427                           fsr1l	equ	0xFE1
 21428                           indf2	equ	0xFDF
 21429                           postinc2	equ	0xFDE
 21430                           postdec2	equ	0xFDD
 21431                           plusw2	equ	0xFDB
 21432                           fsr2h	equ	0xFDA
 21433                           fsr2l	equ	0xFD9
 21434                           status	equ	0xFD8
 21435                           
 21436 ;; *************** function _toupper *****************
 21437 ;; Defined at:
 21438 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 21439 ;; Parameters:    Size  Location     Type
 21440 ;;  c               1    wreg     unsigned char 
 21441 ;; Auto vars:     Size  Location     Type
 21442 ;;  c               1   30[COMRAM] unsigned char 
 21443 ;; Return value:  Size  Location     Type
 21444 ;;                  1    wreg      unsigned char 
 21445 ;; Registers used:
 21446 ;;		wreg, status,2, status,0
 21447 ;; Tracked objects:
 21448 ;;		On entry : 0/0
 21449 ;;		On exit  : 0/0
 21450 ;;		Unchanged: 0/0
 21451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21452 ;;      Params:         0       0       0       0       0       0       0
 21453 ;;      Locals:         1       0       0       0       0       0       0
 21454 ;;      Temps:          0       0       0       0       0       0       0
 21455 ;;      Totals:         1       0       0       0       0       0       0
 21456 ;;Total ram usage:        1 bytes
 21457 ;; Hardware stack levels used:    1
 21458 ;; Hardware stack levels required when called:    3
 21459 ;; This function calls:
 21460 ;;		Nothing
 21461 ;; This function is called by:
 21462 ;;		_strnicmp
 21463 ;;		_strichr
 21464 ;; This function uses a non-reentrant model
 21465 ;;
 21466                           
 21467                           	psect	text49
 21468  000DE4                     __ptext49:
 21469                           	opt stack 0
 21470  000DE4                     _toupper:
 21471                           	opt stack 23
 21472                           
 21473                           ; BSR set to: 0
 21474                           ;incstack = 0
 21475                           ;incstack = 0
 21476                           ;toupper@c stored from wreg
 21477  000DE4  CFE8 F01F          	movff	wreg,toupper@c
 21478  000DE8  0E7B               	movlw	123
 21479  000DEA  601F               	cpfslt	toupper@c,c
 21480  000DEC  D004               	goto	l17794
 21481  000DEE  0E60               	movlw	96
 21482  000DF0  641F               	cpfsgt	toupper@c,c
 21483  000DF2  D001               	goto	l17794
 21484  000DF4  9A1F               	bcf	toupper@c,5,c
 21485  000DF6                     l17794:
 21486  000DF6  501F               	movf	toupper@c,w,c
 21487  000DF8  0012               	return	
 21488  000DFA                     __end_of_toupper:
 21489                           	opt stack 0
 21490                           tblptru	equ	0xFF8
 21491                           tblptrh	equ	0xFF7
 21492                           tblptrl	equ	0xFF6
 21493                           tablat	equ	0xFF5
 21494                           prodh	equ	0xFF4
 21495                           prodl	equ	0xFF3
 21496                           intcon	equ	0xFF2
 21497                           indf0	equ	0xFEF
 21498                           postinc0	equ	0xFEE
 21499                           fsr0h	equ	0xFEA
 21500                           fsr0l	equ	0xFE9
 21501                           wreg	equ	0xFE8
 21502                           indf1	equ	0xFE7
 21503                           postinc1	equ	0xFE6
 21504                           postdec1	equ	0xFE5
 21505                           fsr1h	equ	0xFE2
 21506                           fsr1l	equ	0xFE1
 21507                           indf2	equ	0xFDF
 21508                           postinc2	equ	0xFDE
 21509                           postdec2	equ	0xFDD
 21510                           plusw2	equ	0xFDB
 21511                           fsr2h	equ	0xFDA
 21512                           fsr2l	equ	0xFD9
 21513                           status	equ	0xFD8
 21514                           
 21515 ;; *************** function _strlen *****************
 21516 ;; Defined at:
 21517 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 21518 ;; Parameters:    Size  Location     Type
 21519 ;;  s               2   30[COMRAM] PTR const unsigned char 
 21520 ;;		 -> printGUID@buf(3), STR_166(2), STR_165(9), STR_162(4), 
 21521 ;;		 -> STR_160(3), STR_159(11), STR_156(4), STR_154(3), 
 21522 ;;		 -> STR_153(6), STR_151(6), STR_149(5), STR_147(8), 
 21523 ;;		 -> STR_146(6), STR_145(9), STR_144(7), STR_143(7), 
 21524 ;;		 -> STR_142(5), STR_141(6), STR_140(9), STR_138(11), 
 21525 ;;		 -> STR_136(8), STR_134(4), STR_133(5), STR_120(5), 
 21526 ;;		 -> STR_118(11), STR_105(7), STR_97(5), STR_81(5), 
 21527 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 21528 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 21529 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 21530 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 21531 ;;		 -> cmdbuf(80), 
 21532 ;; Auto vars:     Size  Location     Type
 21533 ;;  cp              2   32[COMRAM] PTR const unsigned char 
 21534 ;;		 -> printGUID@buf(3), STR_166(2), STR_165(9), STR_162(4), 
 21535 ;;		 -> STR_160(3), STR_159(11), STR_156(4), STR_154(3), 
 21536 ;;		 -> STR_153(6), STR_151(6), STR_149(5), STR_147(8), 
 21537 ;;		 -> STR_146(6), STR_145(9), STR_144(7), STR_143(7), 
 21538 ;;		 -> STR_142(5), STR_141(6), STR_140(9), STR_138(11), 
 21539 ;;		 -> STR_136(8), STR_134(4), STR_133(5), STR_120(5), 
 21540 ;;		 -> STR_118(11), STR_105(7), STR_97(5), STR_81(5), 
 21541 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 21542 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 21543 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 21544 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 21545 ;;		 -> cmdbuf(80), 
 21546 ;; Return value:  Size  Location     Type
 21547 ;;                  2   30[COMRAM] unsigned int 
 21548 ;; Registers used:
 21549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 21550 ;; Tracked objects:
 21551 ;;		On entry : E/1
 21552 ;;		On exit  : 0/0
 21553 ;;		Unchanged: 0/0
 21554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21555 ;;      Params:         2       0       0       0       0       0       0
 21556 ;;      Locals:         2       0       0       0       0       0       0
 21557 ;;      Temps:          0       0       0       0       0       0       0
 21558 ;;      Totals:         4       0       0       0       0       0       0
 21559 ;;Total ram usage:        4 bytes
 21560 ;; Hardware stack levels used:    1
 21561 ;; Hardware stack levels required when called:    3
 21562 ;; This function calls:
 21563 ;;		Nothing
 21564 ;; This function is called by:
 21565 ;;		_doModeSLCAN
 21566 ;;		_receiveSendEventSLCAN
 21567 ;;		_printGUID
 21568 ;;		_hexStringToBytes
 21569 ;;		_stristr
 21570 ;; This function uses a non-reentrant model
 21571 ;;
 21572                           
 21573                           	psect	text50
 21574  001050                     __ptext50:
 21575                           	opt stack 0
 21576  001050                     _strlen:
 21577                           	opt stack 24
 21578                           
 21579                           ;incstack = 0
 21580                           ;incstack = 0
 21581  001050  C01F  F021         	movff	strlen@s,strlen@cp
 21582  001054  C020  F022         	movff	strlen@s+1,strlen@cp+1
 21583  001058  D002               	goto	l13944
 21584  00105A                     l13942:
 21585  00105A  4A21               	infsnz	strlen@cp,f,c
 21586  00105C  2A22               	incf	strlen@cp+1,f,c
 21587  00105E                     l13944:
 21588  00105E  5021               	movf	strlen@cp,w,c
 21589  001060  6EF6               	movwf	tblptrl,c
 21590  001062  6EE9               	movwf	fsr0l,c
 21591  001064  0E05               	movlw	(high __ramtop+-1)
 21592  001066  6EEA               	movwf	fsr0h,c
 21593  001068  5022               	movf	strlen@cp+1,w,c
 21594  00106A  64EA               	cpfsgt	fsr0h,c
 21595  00106C  D003               	bra	u17547
 21596  00106E  6EEA               	movwf	fsr0h,c
 21597  001070  50EF               	movf	indf0,w,c
 21598  001072  D003               	bra	u17540
 21599  001074                     u17547:
 21600  001074  6EF7               	movwf	tblptrh,c
 21601  001076  0008               	tblrd		*
 21602  001078  50F5               	movf	tablat,w,c
 21603  00107A                     u17540:
 21604  00107A  0900               	iorlw	0
 21605  00107C  E1EE               	bnz	l13942
 21606  00107E  501F               	movf	strlen@s,w,c
 21607  001080  5C21               	subwf	strlen@cp,w,c
 21608  001082  6E1F               	movwf	?_strlen,c
 21609  001084  5020               	movf	strlen@s+1,w,c
 21610  001086  5822               	subwfb	strlen@cp+1,w,c
 21611  001088  6E20               	movwf	?_strlen+1,c
 21612  00108A  0012               	return	
 21613  00108C                     __end_of_strlen:
 21614                           	opt stack 0
 21615                           tblptru	equ	0xFF8
 21616                           tblptrh	equ	0xFF7
 21617                           tblptrl	equ	0xFF6
 21618                           tablat	equ	0xFF5
 21619                           prodh	equ	0xFF4
 21620                           prodl	equ	0xFF3
 21621                           intcon	equ	0xFF2
 21622                           indf0	equ	0xFEF
 21623                           postinc0	equ	0xFEE
 21624                           fsr0h	equ	0xFEA
 21625                           fsr0l	equ	0xFE9
 21626                           wreg	equ	0xFE8
 21627                           indf1	equ	0xFE7
 21628                           postinc1	equ	0xFE6
 21629                           postdec1	equ	0xFE5
 21630                           fsr1h	equ	0xFE2
 21631                           fsr1l	equ	0xFE1
 21632                           indf2	equ	0xFDF
 21633                           postinc2	equ	0xFDE
 21634                           postdec2	equ	0xFDD
 21635                           plusw2	equ	0xFDB
 21636                           fsr2h	equ	0xFDA
 21637                           fsr2l	equ	0xFD9
 21638                           status	equ	0xFD8
 21639                           
 21640 ;; *************** function _receivePrintEventVerbose *****************
 21641 ;; Defined at:
 21642 ;;		line 2067 in file "main.c"
 21643 ;; Parameters:    Size  Location     Type
 21644 ;;		None
 21645 ;; Auto vars:     Size  Location     Type
 21646 ;;  t               4    0        unsigned long 
 21647 ;;  i               1   70[BANK0 ] unsigned char 
 21648 ;; Return value:  Size  Location     Type
 21649 ;;                  1    wreg      enum E15660
 21650 ;; Registers used:
 21651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21652 ;; Tracked objects:
 21653 ;;		On entry : E/1
 21654 ;;		On exit  : 0/0
 21655 ;;		Unchanged: 0/0
 21656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21657 ;;      Params:         0       0       0       0       0       0       0
 21658 ;;      Locals:         0      19       0       0       0       0       0
 21659 ;;      Temps:          0       5       0       0       0       0       0
 21660 ;;      Totals:         0      24       0       0       0       0       0
 21661 ;;Total ram usage:       24 bytes
 21662 ;; Hardware stack levels used:    1
 21663 ;; Hardware stack levels required when called:    6
 21664 ;; This function calls:
 21665 ;;		_putsUSART
 21666 ;;		_sprintf
 21667 ;;		_getVSCPFrame
 21668 ;;		_ReadTimer3
 21669 ;;		___wmul
 21670 ;; This function is called by:
 21671 ;;		_doModeVerbose
 21672 ;; This function uses a non-reentrant model
 21673 ;;
 21674                           
 21675                           	psect	text51
 21676  0044F4                     __ptext51:
 21677                           	opt stack 0
 21678  0044F4                     _receivePrintEventVerbose:
 21679                           	opt stack 22
 21680                           
 21681                           ;main.c: 2068: uint8_t i;
 21682                           ;main.c: 2070: if ( getVSCPFrame(&vscpClass,
 21683                           ;main.c: 2071: &vscpType,
 21684                           ;main.c: 2072: &vscpNodeId,
 21685                           ;main.c: 2073: &vscpPriority,
 21686                           ;main.c: 2074: &vscpSize,
 21687                           ;main.c: 2075: vscpData)) {
 21688                           
 21689                           ;incstack = 0
 21690                           ;incstack = 0
 21691  0044F4  0E41               	movlw	low _vscpType
 21692  0044F6  0100               	movlb	0	; () banked
 21693  0044F8  6F6E               	movwf	?_getVSCPFrame& (0+255),b
 21694  0044FA  0E3E               	movlw	low _vscpNodeId
 21695  0044FC  6F6F               	movwf	(?_getVSCPFrame+1)& (0+255),b
 21696  0044FE  0E3F               	movlw	low _vscpPriority
 21697  004500  6F70               	movwf	(?_getVSCPFrame+2)& (0+255),b
 21698  004502  0E40               	movlw	low _vscpSize
 21699  004504  6F71               	movwf	(?_getVSCPFrame+3)& (0+255),b
 21700  004506  0E01               	movlw	high _vscpData
 21701  004508  6F73               	movwf	(?_getVSCPFrame+5)& (0+255),b
 21702  00450A  0EEA               	movlw	low _vscpData
 21703  00450C  6F72               	movwf	(?_getVSCPFrame+4)& (0+255),b
 21704  00450E  0E3A               	movlw	_vscpClass& (0+255)
 21705  004510  EC7A  F00C         	call	_getVSCPFrame
 21706  004514  0900               	iorlw	0
 21707  004516  E101 D17D          	bz	l16250
 21708                           
 21709                           ; BSR set to: 0
 21710                           ;main.c: 2078: cntRxFrames++;
 21711  00451A  0101               	movlb	1	; () banked
 21712  00451C  2B0C               	incf	_cntRxFrames& (0+255),f,b
 21713  00451E  0E00               	movlw	0
 21714  004520  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 21715  004522  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 21716  004524  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 21717                           
 21718                           ;main.c: 2079: cntRxBytes += vscpSize;
 21719  004526  5040               	movf	_vscpSize,w,c
 21720  004528  2708               	addwf	_cntRxBytes& (0+255),f,b
 21721  00452A  0E00               	movlw	0
 21722  00452C  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 21723  00452E  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 21724  004530  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 21725                           
 21726                           ; BSR set to: 1
 21727                           ;main.c: 2081: putsUSART((char *) "<Prio=");
 21728  004532  0E7C               	movlw	high STR_176
 21729  004534  6E21               	movwf	?_putsUSART+1,c
 21730  004536  0E2D               	movlw	low STR_176
 21731  004538  6E20               	movwf	?_putsUSART,c
 21732  00453A  EC74  F009         	call	_putsUSART	;wreg free
 21733                           
 21734                           ;main.c: 2082: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 21735  00453E  6629               	tstfsz	_bHex,c
 21736  004540  D005               	goto	l16150
 21737  004542  0E7C               	movlw	high STR_61
 21738  004544  0100               	movlb	0	; () banked
 21739  004546  6F99               	movwf	(_receivePrintEventVerbose$1411+1)& (0+255),b
 21740  004548  0EEE               	movlw	low STR_61
 21741  00454A  D004               	goto	L32
 21742  00454C                     l16150:
 21743  00454C  0E7C               	movlw	high STR_60
 21744  00454E  0100               	movlb	0	; () banked
 21745  004550  6F99               	movwf	(_receivePrintEventVerbose$1411+1)& (0+255),b
 21746  004552  0E50               	movlw	low STR_60
 21747  004554                     L32:
 21748  004554  6F98               	movwf	_receivePrintEventVerbose$1411& (0+255),b
 21749                           
 21750                           ; BSR set to: 0
 21751  004556  0E01               	movlw	high _wrkbuf
 21752  004558  0100               	movlb	0	; () banked
 21753  00455A  6F72               	movwf	(?_sprintf+1)& (0+255),b
 21754  00455C  0E82               	movlw	low _wrkbuf
 21755  00455E  6F71               	movwf	?_sprintf& (0+255),b
 21756  004560  C098  F073         	movff	_receivePrintEventVerbose$1411,?_sprintf+2
 21757  004564  C099  F074         	movff	_receivePrintEventVerbose$1411+1,?_sprintf+3
 21758  004568  C03F  F075         	movff	_vscpPriority,?_sprintf+4
 21759  00456C  6B76               	clrf	(?_sprintf+5)& (0+255),b
 21760  00456E  ECFB  F025         	call	_sprintf	;wreg free
 21761                           
 21762                           ; BSR set to: 0
 21763                           ;main.c: 2083: putsUSART(wrkbuf);
 21764  004572  0101               	movlb	1	; () banked
 21765  004574  0E01               	movlw	high _wrkbuf
 21766  004576  6E21               	movwf	?_putsUSART+1,c
 21767  004578  0E82               	movlw	low _wrkbuf
 21768  00457A  6E20               	movwf	?_putsUSART,c
 21769  00457C  EC74  F009         	call	_putsUSART	;wreg free
 21770                           
 21771                           ;main.c: 2084: if ( bTimestamp ) {
 21772  004580  502E               	movf	_bTimestamp,w,c
 21773  004582  E04E               	bz	l16174
 21774                           
 21775                           ;main.c: 2086: uint32_t t = timer<<16;
 21776  004584  0E7B               	movlw	high STR_179
 21777  004586  6E21               	movwf	?_putsUSART+1,c
 21778  004588  0E31               	movlw	low STR_179
 21779  00458A  6E20               	movwf	?_putsUSART,c
 21780  00458C  EC74  F009         	call	_putsUSART	;wreg free
 21781                           
 21782                           ;main.c: 2087: t |= ReadTimer3()*10;
 21783  004590  ECDE  F006         	call	_ReadTimer3	;wreg free
 21784  004594  D941               	call	PL84	;call to abstracted procedure
 21785  004596  ECA0  F007         	call	___wmul	;wreg free
 21786                           
 21787                           ; BSR set to: 0
 21788                           ;main.c: 2088: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", (timer<<16) | ReadTimer3()*10 );
 21789  00459A  6629               	tstfsz	_bHex,c
 21790  00459C  D004               	goto	l16166
 21791                           
 21792                           ; BSR set to: 0
 21793  00459E  0E7C               	movlw	high STR_181
 21794  0045A0  6F9B               	movwf	(_receivePrintEventVerbose$1417+1)& (0+255),b
 21795  0045A2  0EDE               	movlw	low STR_181
 21796  0045A4  D003               	goto	L33
 21797  0045A6                     l16166:
 21798                           
 21799                           ; BSR set to: 0
 21800  0045A6  0E7C               	movlw	high STR_180
 21801  0045A8  6F9B               	movwf	(_receivePrintEventVerbose$1417+1)& (0+255),b
 21802  0045AA  0E01               	movlw	low STR_180
 21803  0045AC                     L33:
 21804  0045AC  6F9A               	movwf	_receivePrintEventVerbose$1417& (0+255),b
 21805                           
 21806                           ; BSR set to: 0
 21807  0045AE  ECDE  F006         	call	_ReadTimer3	;wreg free
 21808  0045B2  D932               	call	PL84	;call to abstracted procedure
 21809  0045B4  ECA0  F007         	call	___wmul	;wreg free
 21810  0045B8  C11C  F08F         	movff	_timer,??_receivePrintEventVerbose	;volatile
 21811  0045BC  C11D  F090         	movff	_timer+1,??_receivePrintEventVerbose+1	;volatile
 21812  0045C0  C11E  F091         	movff	_timer+2,??_receivePrintEventVerbose+2	;volatile
 21813  0045C4  C11F  F092         	movff	_timer+3,??_receivePrintEventVerbose+3	;volatile
 21814  0045C8  C090  F092         	movff	??_receivePrintEventVerbose+1,??_receivePrintEventVerbose+3
 21815  0045CC  C08F  F091         	movff	??_receivePrintEventVerbose,??_receivePrintEventVerbose+2
 21816  0045D0  0100               	movlb	0	; () banked
 21817  0045D2  6B90               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21818  0045D4  6B8F               	clrf	??_receivePrintEventVerbose& (0+255),b
 21819  0045D6  5160               	movf	?___wmul& (0+255),w,b
 21820  0045D8  118F               	iorwf	??_receivePrintEventVerbose& (0+255),w,b
 21821  0045DA  6F94               	movwf	_receivePrintEventVerbose$3590& (0+255),b	;volatile
 21822  0045DC  5161               	movf	(?___wmul+1)& (0+255),w,b
 21823  0045DE  1190               	iorwf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21824  0045E0  6F95               	movwf	(_receivePrintEventVerbose$3590+1)& (0+255),b	;volatile
 21825  0045E2  0E00               	movlw	0
 21826  0045E4  1191               	iorwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21827  0045E6  6F96               	movwf	(_receivePrintEventVerbose$3590+2)& (0+255),b	;volatile
 21828  0045E8  0E00               	movlw	0
 21829  0045EA  1192               	iorwf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21830  0045EC  6F97               	movwf	(_receivePrintEventVerbose$3590+3)& (0+255),b	;volatile
 21831                           
 21832                           ; BSR set to: 0
 21833  0045EE  0E01               	movlw	high _wrkbuf
 21834  0045F0  6F72               	movwf	(?_sprintf+1)& (0+255),b
 21835  0045F2  0E82               	movlw	low _wrkbuf
 21836  0045F4  6F71               	movwf	?_sprintf& (0+255),b
 21837  0045F6  C09A  F073         	movff	_receivePrintEventVerbose$1417,?_sprintf+2
 21838  0045FA  C09B  F074         	movff	_receivePrintEventVerbose$1417+1,?_sprintf+3
 21839  0045FE  C094  F075         	movff	_receivePrintEventVerbose$3590,?_sprintf+4	;volatile
 21840  004602  C095  F076         	movff	_receivePrintEventVerbose$3590+1,?_sprintf+5	;volatile
 21841  004606  C096  F077         	movff	_receivePrintEventVerbose$3590+2,?_sprintf+6	;volatile
 21842  00460A  C097  F078         	movff	_receivePrintEventVerbose$3590+3,?_sprintf+7	;volatile
 21843  00460E  ECFB  F025         	call	_sprintf	;wreg free
 21844                           
 21845                           ; BSR set to: 0
 21846                           ;main.c: 2089: putsUSART(wrkbuf);
 21847  004612  0101               	movlb	1	; () banked
 21848  004614  0E01               	movlw	high _wrkbuf
 21849  004616  6E21               	movwf	?_putsUSART+1,c
 21850  004618  0E82               	movlw	low _wrkbuf
 21851  00461A  6E20               	movwf	?_putsUSART,c
 21852  00461C  EC74  F009         	call	_putsUSART	;wreg free
 21853  004620                     l16174:
 21854                           
 21855                           ;main.c: 2090: }
 21856                           ;main.c: 2091: putsUSART((char *) ",class=");
 21857  004620  0E7B               	movlw	high STR_182
 21858  004622  6E21               	movwf	?_putsUSART+1,c
 21859  004624  0EE1               	movlw	low STR_182
 21860  004626  6E20               	movwf	?_putsUSART,c
 21861  004628  EC74  F009         	call	_putsUSART	;wreg free
 21862                           
 21863                           ;main.c: 2092: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 21864  00462C  6629               	tstfsz	_bHex,c
 21865  00462E  D005               	goto	l16180
 21866  004630  0E7C               	movlw	high STR_61
 21867  004632  0100               	movlb	0	; () banked
 21868  004634  6F9D               	movwf	(_receivePrintEventVerbose$1422+1)& (0+255),b
 21869  004636  0EEE               	movlw	low STR_61
 21870  004638  D004               	goto	L34
 21871  00463A                     l16180:
 21872  00463A  0E7C               	movlw	high STR_183
 21873  00463C  0100               	movlb	0	; () banked
 21874  00463E  6F9D               	movwf	(_receivePrintEventVerbose$1422+1)& (0+255),b
 21875  004640  0E57               	movlw	low STR_183
 21876  004642                     L34:
 21877  004642  6F9C               	movwf	_receivePrintEventVerbose$1422& (0+255),b
 21878                           
 21879                           ; BSR set to: 0
 21880  004644  0E01               	movlw	high _wrkbuf
 21881  004646  0100               	movlb	0	; () banked
 21882  004648  6F72               	movwf	(?_sprintf+1)& (0+255),b
 21883  00464A  0E82               	movlw	low _wrkbuf
 21884  00464C  6F71               	movwf	?_sprintf& (0+255),b
 21885  00464E  C09C  F073         	movff	_receivePrintEventVerbose$1422,?_sprintf+2
 21886  004652  C09D  F074         	movff	_receivePrintEventVerbose$1422+1,?_sprintf+3
 21887  004656  C03A  F075         	movff	_vscpClass,?_sprintf+4
 21888  00465A  C03B  F076         	movff	_vscpClass+1,?_sprintf+5
 21889  00465E  ECFB  F025         	call	_sprintf	;wreg free
 21890                           
 21891                           ; BSR set to: 0
 21892                           ;main.c: 2093: putsUSART(wrkbuf);
 21893  004662  0101               	movlb	1	; () banked
 21894  004664  0E01               	movlw	high _wrkbuf
 21895  004666  6E21               	movwf	?_putsUSART+1,c
 21896  004668  0E82               	movlw	low _wrkbuf
 21897  00466A  6E20               	movwf	?_putsUSART,c
 21898  00466C  EC74  F009         	call	_putsUSART	;wreg free
 21899                           
 21900                           ;main.c: 2094: putsUSART((char *) ",type=");
 21901  004670  0E7C               	movlw	high STR_185
 21902  004672  6E21               	movwf	?_putsUSART+1,c
 21903  004674  0E1F               	movlw	low STR_185
 21904  004676  6E20               	movwf	?_putsUSART,c
 21905  004678  EC74  F009         	call	_putsUSART	;wreg free
 21906                           
 21907                           ;main.c: 2095: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21908  00467C  6629               	tstfsz	_bHex,c
 21909  00467E  D005               	goto	l16192
 21910  004680  0E7C               	movlw	high STR_61
 21911  004682  0100               	movlb	0	; () banked
 21912  004684  6F9F               	movwf	(_receivePrintEventVerbose$1427+1)& (0+255),b
 21913  004686  0EEE               	movlw	low STR_61
 21914  004688  D004               	goto	L35
 21915  00468A                     l16192:
 21916  00468A  0E7C               	movlw	high STR_60
 21917  00468C  0100               	movlb	0	; () banked
 21918  00468E  6F9F               	movwf	(_receivePrintEventVerbose$1427+1)& (0+255),b
 21919  004690  0E50               	movlw	low STR_60
 21920  004692                     L35:
 21921  004692  6F9E               	movwf	_receivePrintEventVerbose$1427& (0+255),b
 21922                           
 21923                           ; BSR set to: 0
 21924  004694  0E01               	movlw	high _wrkbuf
 21925  004696  0100               	movlb	0	; () banked
 21926  004698  6F72               	movwf	(?_sprintf+1)& (0+255),b
 21927  00469A  0E82               	movlw	low _wrkbuf
 21928  00469C  6F71               	movwf	?_sprintf& (0+255),b
 21929  00469E  C09E  F073         	movff	_receivePrintEventVerbose$1427,?_sprintf+2
 21930  0046A2  C09F  F074         	movff	_receivePrintEventVerbose$1427+1,?_sprintf+3
 21931  0046A6  C041  F075         	movff	_vscpType,?_sprintf+4
 21932  0046AA  6B76               	clrf	(?_sprintf+5)& (0+255),b
 21933  0046AC  ECFB  F025         	call	_sprintf	;wreg free
 21934                           
 21935                           ; BSR set to: 0
 21936                           ;main.c: 2096: putsUSART(wrkbuf);
 21937  0046B0  0101               	movlb	1	; () banked
 21938  0046B2  0E01               	movlw	high _wrkbuf
 21939  0046B4  6E21               	movwf	?_putsUSART+1,c
 21940  0046B6  0E82               	movlw	low _wrkbuf
 21941  0046B8  6E20               	movwf	?_putsUSART,c
 21942  0046BA  EC74  F009         	call	_putsUSART	;wreg free
 21943                           
 21944                           ;main.c: 2097: putsUSART((char *) ",nodeid=");
 21945  0046BE  0E7B               	movlw	high STR_188
 21946  0046C0  6E21               	movwf	?_putsUSART+1,c
 21947  0046C2  0EA6               	movlw	low STR_188
 21948  0046C4  6E20               	movwf	?_putsUSART,c
 21949  0046C6  EC74  F009         	call	_putsUSART	;wreg free
 21950                           
 21951                           ;main.c: 2098: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21952  0046CA  6629               	tstfsz	_bHex,c
 21953  0046CC  D005               	goto	l16204
 21954  0046CE  0E7C               	movlw	high STR_61
 21955  0046D0  0100               	movlb	0	; () banked
 21956  0046D2  6FA1               	movwf	(_receivePrintEventVerbose$1432+1)& (0+255),b
 21957  0046D4  0EEE               	movlw	low STR_61
 21958  0046D6  D004               	goto	L36
 21959  0046D8                     l16204:
 21960  0046D8  0E7C               	movlw	high STR_60
 21961  0046DA  0100               	movlb	0	; () banked
 21962  0046DC  6FA1               	movwf	(_receivePrintEventVerbose$1432+1)& (0+255),b
 21963  0046DE  0E50               	movlw	low STR_60
 21964  0046E0                     L36:
 21965  0046E0  6FA0               	movwf	_receivePrintEventVerbose$1432& (0+255),b
 21966                           
 21967                           ; BSR set to: 0
 21968  0046E2  0E01               	movlw	high _wrkbuf
 21969  0046E4  0100               	movlb	0	; () banked
 21970  0046E6  6F72               	movwf	(?_sprintf+1)& (0+255),b
 21971  0046E8  0E82               	movlw	low _wrkbuf
 21972  0046EA  6F71               	movwf	?_sprintf& (0+255),b
 21973  0046EC  C0A0  F073         	movff	_receivePrintEventVerbose$1432,?_sprintf+2
 21974  0046F0  C0A1  F074         	movff	_receivePrintEventVerbose$1432+1,?_sprintf+3
 21975  0046F4  C03E  F075         	movff	_vscpNodeId,?_sprintf+4
 21976  0046F8  6B76               	clrf	(?_sprintf+5)& (0+255),b
 21977  0046FA  ECFB  F025         	call	_sprintf	;wreg free
 21978                           
 21979                           ; BSR set to: 0
 21980                           ;main.c: 2099: putsUSART(wrkbuf);
 21981  0046FE  0101               	movlb	1	; () banked
 21982  004700  0E01               	movlw	high _wrkbuf
 21983  004702  6E21               	movwf	?_putsUSART+1,c
 21984  004704  0E82               	movlw	low _wrkbuf
 21985  004706  6E20               	movwf	?_putsUSART,c
 21986  004708  EC74  F009         	call	_putsUSART	;wreg free
 21987                           
 21988                           ;main.c: 2100: putsUSART((char *) ",size=");
 21989  00470C  0E7C               	movlw	high STR_191
 21990  00470E  6E21               	movwf	?_putsUSART+1,c
 21991  004710  0E26               	movlw	low STR_191
 21992  004712  6E20               	movwf	?_putsUSART,c
 21993  004714  EC74  F009         	call	_putsUSART	;wreg free
 21994                           
 21995                           ;main.c: 2101: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21996  004718  6629               	tstfsz	_bHex,c
 21997  00471A  D005               	goto	l16216
 21998  00471C  0E7C               	movlw	high STR_61
 21999  00471E  0100               	movlb	0	; () banked
 22000  004720  6FA3               	movwf	(_receivePrintEventVerbose$1437+1)& (0+255),b
 22001  004722  0EEE               	movlw	low STR_61
 22002  004724  D004               	goto	L37
 22003  004726                     l16216:
 22004  004726  0E7C               	movlw	high STR_60
 22005  004728  0100               	movlb	0	; () banked
 22006  00472A  6FA3               	movwf	(_receivePrintEventVerbose$1437+1)& (0+255),b
 22007  00472C  0E50               	movlw	low STR_60
 22008  00472E                     L37:
 22009  00472E  6FA2               	movwf	_receivePrintEventVerbose$1437& (0+255),b
 22010                           
 22011                           ; BSR set to: 0
 22012  004730  0E01               	movlw	high _wrkbuf
 22013  004732  0100               	movlb	0	; () banked
 22014  004734  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22015  004736  0E82               	movlw	low _wrkbuf
 22016  004738  6F71               	movwf	?_sprintf& (0+255),b
 22017  00473A  C0A2  F073         	movff	_receivePrintEventVerbose$1437,?_sprintf+2
 22018  00473E  C0A3  F074         	movff	_receivePrintEventVerbose$1437+1,?_sprintf+3
 22019  004742  C040  F075         	movff	_vscpSize,?_sprintf+4
 22020  004746  6B76               	clrf	(?_sprintf+5)& (0+255),b
 22021  004748  ECFB  F025         	call	_sprintf	;wreg free
 22022                           
 22023                           ; BSR set to: 0
 22024                           ;main.c: 2102: putsUSART(wrkbuf);
 22025  00474C  0101               	movlb	1	; () banked
 22026  00474E  0E01               	movlw	high _wrkbuf
 22027  004750  6E21               	movwf	?_putsUSART+1,c
 22028  004752  0E82               	movlw	low _wrkbuf
 22029  004754  6E20               	movwf	?_putsUSART,c
 22030  004756  EC74  F009         	call	_putsUSART	;wreg free
 22031                           
 22032                           ;main.c: 2103: if (vscpSize > 0) {
 22033  00475A  5040               	movf	_vscpSize,w,c
 22034  00475C  E04D               	bz	l16244
 22035                           
 22036                           ;main.c: 2104: putsUSART((char *) ",Data=");
 22037  00475E  0E7C               	movlw	high STR_194
 22038  004760  6E21               	movwf	?_putsUSART+1,c
 22039  004762  0E18               	movlw	low STR_194
 22040  004764  6E20               	movwf	?_putsUSART,c
 22041  004766  EC74  F009         	call	_putsUSART	;wreg free
 22042                           
 22043                           ;main.c: 2105: for (i = 0; i < vscpSize; i++) {
 22044  00476A  0100               	movlb	0	; () banked
 22045  00476C  6BA6               	clrf	receivePrintEventVerbose@i& (0+255),b
 22046  00476E  D040               	goto	l16242
 22047  004770                     l1017:
 22048                           
 22049                           ; BSR set to: 0
 22050                           ;main.c: 2107: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 22051  004770  6629               	tstfsz	_bHex,c
 22052  004772  D004               	goto	l16230
 22053                           
 22054                           ; BSR set to: 0
 22055  004774  0E7C               	movlw	high STR_61
 22056  004776  6FA5               	movwf	(_receivePrintEventVerbose$1442+1)& (0+255),b
 22057  004778  0EEE               	movlw	low STR_61
 22058  00477A  D003               	goto	L38
 22059  00477C                     l16230:
 22060                           
 22061                           ; BSR set to: 0
 22062  00477C  0E7C               	movlw	high STR_60
 22063  00477E  6FA5               	movwf	(_receivePrintEventVerbose$1442+1)& (0+255),b
 22064  004780  0E50               	movlw	low STR_60
 22065  004782                     L38:
 22066  004782  6FA4               	movwf	_receivePrintEventVerbose$1442& (0+255),b
 22067                           
 22068                           ; BSR set to: 0
 22069  004784  0E01               	movlw	high _wrkbuf
 22070  004786  0100               	movlb	0	; () banked
 22071  004788  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22072  00478A  0E82               	movlw	low _wrkbuf
 22073  00478C  6F71               	movwf	?_sprintf& (0+255),b
 22074  00478E  C0A4  F073         	movff	_receivePrintEventVerbose$1442,?_sprintf+2
 22075  004792  C0A5  F074         	movff	_receivePrintEventVerbose$1442+1,?_sprintf+3
 22076  004796  0EEA               	movlw	low _vscpData
 22077  004798  25A6               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 22078  00479A  6ED9               	movwf	fsr2l,c
 22079  00479C  6ADA               	clrf	fsr2h,c
 22080  00479E  0E01               	movlw	high _vscpData
 22081  0047A0  22DA               	addwfc	fsr2h,f,c
 22082  0047A2  50DF               	movf	indf2,w,c
 22083  0047A4  6F75               	movwf	(?_sprintf+4)& (0+255),b
 22084  0047A6  6B76               	clrf	(?_sprintf+5)& (0+255),b
 22085  0047A8  ECFB  F025         	call	_sprintf	;wreg free
 22086                           
 22087                           ; BSR set to: 0
 22088                           ;main.c: 2108: putsUSART(wrkbuf);
 22089  0047AC  0101               	movlb	1	; () banked
 22090  0047AE  0E01               	movlw	high _wrkbuf
 22091  0047B0  6E21               	movwf	?_putsUSART+1,c
 22092  0047B2  0E82               	movlw	low _wrkbuf
 22093  0047B4  6E20               	movwf	?_putsUSART,c
 22094  0047B6  EC74  F009         	call	_putsUSART	;wreg free
 22095                           
 22096                           ;main.c: 2109: if (i < (vscpSize - 1)) {
 22097  0047BA  0EFF               	movlw	255
 22098  0047BC  2440               	addwf	_vscpSize,w,c
 22099  0047BE  0100               	movlb	0	; () banked
 22100  0047C0  6F8F               	movwf	??_receivePrintEventVerbose& (0+255),b
 22101  0047C2  6B90               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 22102  0047C4  0EFF               	movlw	255
 22103  0047C6  2390               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 22104  0047C8  51A6               	movf	receivePrintEventVerbose@i& (0+255),w,b
 22105  0047CA  6F91               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 22106  0047CC  6B92               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 22107  0047CE  5192               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 22108  0047D0  0A80               	xorlw	128
 22109  0047D2  6F93               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 22110  0047D4  518F               	movf	??_receivePrintEventVerbose& (0+255),w,b
 22111  0047D6  5D91               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 22112  0047D8  5190               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 22113  0047DA  0A80               	xorlw	128
 22114  0047DC  5993               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 22115  0047DE  E206               	bc	l16240
 22116                           
 22117                           ; BSR set to: 0
 22118                           ;main.c: 2110: putsUSART((char *) ",");
 22119  0047E0  0E7C               	movlw	high STR_30
 22120  0047E2  6E21               	movwf	?_putsUSART+1,c
 22121  0047E4  0EF5               	movlw	low STR_30
 22122  0047E6  6E20               	movwf	?_putsUSART,c
 22123  0047E8  EC74  F009         	call	_putsUSART	;wreg free
 22124  0047EC                     l16240:
 22125  0047EC  0100               	movlb	0	; () banked
 22126  0047EE  2BA6               	incf	receivePrintEventVerbose@i& (0+255),f,b
 22127  0047F0                     l16242:
 22128                           
 22129                           ; BSR set to: 0
 22130  0047F0  5040               	movf	_vscpSize,w,c
 22131  0047F2  5DA6               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 22132  0047F4  E207               	bc	l1024
 22133  0047F6  D7BC               	goto	l1017
 22134  0047F8                     l16244:
 22135                           
 22136                           ;main.c: 2114: putsUSART((char *) ",Data=none");
 22137  0047F8  0E7B               	movlw	high STR_198
 22138  0047FA  6E21               	movwf	?_putsUSART+1,c
 22139  0047FC  0E6A               	movlw	low STR_198
 22140  0047FE  6E20               	movwf	?_putsUSART,c
 22141  004800  EC74  F009         	call	_putsUSART	;wreg free
 22142  004804                     l1024:
 22143                           
 22144                           ;main.c: 2115: }
 22145                           ;main.c: 2116: putsUSART((char *) ">\r\n");
 22146  004804  0E7C               	movlw	high STR_199
 22147  004806  6E21               	movwf	?_putsUSART+1,c
 22148  004808  0ECA               	movlw	low STR_199
 22149  00480A  6E20               	movwf	?_putsUSART,c
 22150  00480C  EC74  F009         	call	_putsUSART	;wreg free
 22151                           
 22152                           ;main.c: 2117: return 1;
 22153  004810  0E01               	movlw	1
 22154  004812  D001               	goto	l1025
 22155  004814                     l16250:
 22156                           
 22157                           ; BSR set to: 0
 22158                           ;main.c: 2118: }
 22159                           ;main.c: 2120: return 0;
 22160  004814  0E00               	movlw	0
 22161  004816                     l1025:
 22162  004816  0012               	return	
 22163  004818                     __end_of_receivePrintEventVerbose:
 22164                           	opt stack 0
 22165  004818                     PL84:
 22166                           	opt stack 22
 22167  004818  C01F  F060         	movff	?_ReadTimer3,?___wmul
 22168  00481C  C020  F061         	movff	?_ReadTimer3+1,?___wmul+1
 22169  004820  0100               	movlb	0	; () banked
 22170  004822  6B63               	clrf	(?___wmul+3)& (0+255),b
 22171  004824  0E0A               	movlw	10
 22172  004826  6F62               	movwf	(?___wmul+2)& (0+255),b
 22173  004828  0C0A               	retlw	10
 22174  00482A                     __end_ofPL84:
 22175                           	opt stack 0
 22176                           tblptru	equ	0xFF8
 22177                           tblptrh	equ	0xFF7
 22178                           tblptrl	equ	0xFF6
 22179                           tablat	equ	0xFF5
 22180                           prodh	equ	0xFF4
 22181                           prodl	equ	0xFF3
 22182                           intcon	equ	0xFF2
 22183                           indf0	equ	0xFEF
 22184                           postinc0	equ	0xFEE
 22185                           fsr0h	equ	0xFEA
 22186                           fsr0l	equ	0xFE9
 22187                           wreg	equ	0xFE8
 22188                           indf1	equ	0xFE7
 22189                           postinc1	equ	0xFE6
 22190                           postdec1	equ	0xFE5
 22191                           fsr1h	equ	0xFE2
 22192                           fsr1l	equ	0xFE1
 22193                           indf2	equ	0xFDF
 22194                           postinc2	equ	0xFDE
 22195                           postdec2	equ	0xFDD
 22196                           plusw2	equ	0xFDB
 22197                           fsr2h	equ	0xFDA
 22198                           fsr2l	equ	0xFD9
 22199                           status	equ	0xFD8
 22200                           
 22201 ;; *************** function _ReadTimer3 *****************
 22202 ;; Defined at:
 22203 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t3read.c"
 22204 ;; Parameters:    Size  Location     Type
 22205 ;;		None
 22206 ;; Auto vars:     Size  Location     Type
 22207 ;;  timer           2   32[COMRAM] struct Timers
 22208 ;; Return value:  Size  Location     Type
 22209 ;;                  2   30[COMRAM] unsigned int 
 22210 ;; Registers used:
 22211 ;;		None
 22212 ;; Tracked objects:
 22213 ;;		On entry : 0/0
 22214 ;;		On exit  : 0/0
 22215 ;;		Unchanged: 0/0
 22216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22217 ;;      Params:         2       0       0       0       0       0       0
 22218 ;;      Locals:         2       0       0       0       0       0       0
 22219 ;;      Temps:          0       0       0       0       0       0       0
 22220 ;;      Totals:         4       0       0       0       0       0       0
 22221 ;;Total ram usage:        4 bytes
 22222 ;; Hardware stack levels used:    1
 22223 ;; Hardware stack levels required when called:    3
 22224 ;; This function calls:
 22225 ;;		Nothing
 22226 ;; This function is called by:
 22227 ;;		_receivePrintEventVerbose
 22228 ;; This function uses a non-reentrant model
 22229 ;;
 22230                           
 22231                           	psect	text52
 22232  000DBC                     __ptext52:
 22233                           	opt stack 0
 22234  000DBC                     _ReadTimer3:
 22235                           	opt stack 24
 22236                           
 22237                           ;incstack = 0
 22238                           ;incstack = 0
 22239  000DBC  CFB2 F021          	movff	4018,ReadTimer3@timer	;volatile
 22240  000DC0  CFB3 F022          	movff	4019,ReadTimer3@timer+1	;volatile
 22241  000DC4  C021  F01F         	movff	ReadTimer3@timer,?_ReadTimer3
 22242  000DC8  C022  F020         	movff	ReadTimer3@timer+1,?_ReadTimer3+1
 22243  000DCC  0012               	return	
 22244  000DCE                     __end_of_ReadTimer3:
 22245                           	opt stack 0
 22246                           tblptru	equ	0xFF8
 22247                           tblptrh	equ	0xFF7
 22248                           tblptrl	equ	0xFF6
 22249                           tablat	equ	0xFF5
 22250                           prodh	equ	0xFF4
 22251                           prodl	equ	0xFF3
 22252                           intcon	equ	0xFF2
 22253                           indf0	equ	0xFEF
 22254                           postinc0	equ	0xFEE
 22255                           fsr0h	equ	0xFEA
 22256                           fsr0l	equ	0xFE9
 22257                           wreg	equ	0xFE8
 22258                           indf1	equ	0xFE7
 22259                           postinc1	equ	0xFE6
 22260                           postdec1	equ	0xFE5
 22261                           fsr1h	equ	0xFE2
 22262                           fsr1l	equ	0xFE1
 22263                           indf2	equ	0xFDF
 22264                           postinc2	equ	0xFDE
 22265                           postdec2	equ	0xFDD
 22266                           plusw2	equ	0xFDB
 22267                           fsr2h	equ	0xFDA
 22268                           fsr2l	equ	0xFD9
 22269                           status	equ	0xFD8
 22270                           
 22271 ;; *************** function _getVSCPFrame *****************
 22272 ;; Defined at:
 22273 ;;		line 3310 in file "main.c"
 22274 ;; Parameters:    Size  Location     Type
 22275 ;;  pvscpclass      1    wreg     PTR unsigned short 
 22276 ;;		 -> vscpClass(2), 
 22277 ;;  pvscptype       1   14[BANK0 ] PTR unsigned char 
 22278 ;;		 -> vscpType(1), 
 22279 ;;  pNodeId         1   15[BANK0 ] PTR unsigned char 
 22280 ;;		 -> vscpNodeId(1), 
 22281 ;;  pPriority       1   16[BANK0 ] PTR unsigned char 
 22282 ;;		 -> vscpPriority(1), 
 22283 ;;  pSize           1   17[BANK0 ] PTR unsigned char 
 22284 ;;		 -> vscpSize(1), 
 22285 ;;  pData           2   18[BANK0 ] PTR unsigned char 
 22286 ;;		 -> vscpData(8), 
 22287 ;; Auto vars:     Size  Location     Type
 22288 ;;  pvscpclass      1   24[BANK0 ] PTR unsigned short 
 22289 ;;		 -> vscpClass(2), 
 22290 ;;  id              4   25[BANK0 ] unsigned long 
 22291 ;; Return value:  Size  Location     Type
 22292 ;;                  1    wreg      unsigned char 
 22293 ;; Registers used:
 22294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 22295 ;; Tracked objects:
 22296 ;;		On entry : F/0
 22297 ;;		On exit  : F/0
 22298 ;;		Unchanged: 0/0
 22299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22300 ;;      Params:         0       6       0       0       0       0       0
 22301 ;;      Locals:         0       5       0       0       0       0       0
 22302 ;;      Temps:          0       4       0       0       0       0       0
 22303 ;;      Totals:         0      15       0       0       0       0       0
 22304 ;;Total ram usage:       15 bytes
 22305 ;; Hardware stack levels used:    1
 22306 ;; Hardware stack levels required when called:    5
 22307 ;; This function calls:
 22308 ;;		_getCANFrame
 22309 ;; This function is called by:
 22310 ;;		_receivePrintEventVerbose
 22311 ;;		_readRegister
 22312 ;;		_readRegisterExtended
 22313 ;;		_writeRegisterExtended
 22314 ;; This function uses a non-reentrant model
 22315 ;;
 22316                           
 22317                           	psect	text53
 22318  0018F4                     __ptext53:
 22319                           	opt stack 0
 22320  0018F4                     _getVSCPFrame:
 22321                           	opt stack 21
 22322                           
 22323                           ;incstack = 0
 22324                           ;incstack = 0
 22325                           ;getVSCPFrame@pvscpclass stored from wreg
 22326  0018F4  CFE8 F078          	movff	wreg,getVSCPFrame@pvscpclass
 22327                           
 22328                           ; BSR set to: 0
 22329                           ;main.c: 3311: uint32_t id;
 22330                           ;main.c: 3313: if (!getCANFrame(&id, pSize, pData)) {
 22331  0018F8  C071  F06A         	movff	getVSCPFrame@pSize,?_getCANFrame
 22332  0018FC  0E0F               	movlw	15
 22333  0018FE  6F6B               	movwf	(?_getCANFrame+1)& (0+255),b
 22334  001900  0E5F               	movlw	__accesstop+-1
 22335  001902  656A               	cpfsgt	?_getCANFrame& (0+255),b
 22336  001904  6B6B               	clrf	(?_getCANFrame+1)& (0+255),b
 22337  001906  C072  F06C         	movff	getVSCPFrame@pData,?_getCANFrame+2
 22338  00190A  C073  F06D         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 22339  00190E  0E79               	movlw	getVSCPFrame@id& (0+255)
 22340  001910  EC31  F00F         	call	_getCANFrame
 22341  001914  0900               	iorlw	0
 22342  001916  E102               	bnz	l17550
 22343                           
 22344                           ; BSR set to: 0
 22345                           ;main.c: 3314: return 0;
 22346  001918  0E00               	movlw	0
 22347  00191A  D02F               	goto	l1370
 22348  00191C                     l17550:
 22349                           
 22350                           ; BSR set to: 0
 22351                           ;main.c: 3315: }
 22352                           ;main.c: 3317: *pNodeId = id & 0x0ff;
 22353  00191C  516F               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 22354  00191E  6ED9               	movwf	fsr2l,c
 22355  001920  6ADA               	clrf	fsr2h,c
 22356  001922  C079  FFDF         	movff	getVSCPFrame@id,indf2
 22357                           
 22358                           ;main.c: 3318: *pvscptype = (id >> 8) & 0xff;
 22359  001926  516E               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 22360  001928  6ED9               	movwf	fsr2l,c
 22361  00192A  6ADA               	clrf	fsr2h,c
 22362  00192C  C07A  FFDF         	movff	getVSCPFrame@id+1,indf2
 22363                           
 22364                           ; BSR set to: 0
 22365                           ;main.c: 3319: *pvscpclass = (id >> 16) & 0x1ff;
 22366  001930  0100               	movlb	0	; () banked
 22367  001932  517B               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 22368  001934  6F74               	movwf	??_getVSCPFrame& (0+255),b
 22369  001936  0E01               	movlw	1
 22370  001938  157C               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 22371  00193A  6F75               	movwf	(??_getVSCPFrame+1)& (0+255),b
 22372  00193C  5178               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 22373  00193E  6ED9               	movwf	fsr2l,c
 22374  001940  6ADA               	clrf	fsr2h,c
 22375  001942  C074  FFDE         	movff	??_getVSCPFrame,postinc2
 22376  001946  C075  FFDD         	movff	??_getVSCPFrame+1,postdec2
 22377                           
 22378                           ; BSR set to: 0
 22379                           ;main.c: 3320: *pPriority = (uint16_t) (0x07 & (id >> 26));
 22380  00194A  5170               	movf	getVSCPFrame@pPriority& (0+255),w,b
 22381  00194C  6ED9               	movwf	fsr2l,c
 22382  00194E  6ADA               	clrf	fsr2h,c
 22383  001950  C079  F074         	movff	getVSCPFrame@id,??_getVSCPFrame
 22384  001954  C07A  F075         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 22385  001958  C07B  F076         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 22386  00195C  C07C  F077         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 22387  001960  0E1B               	movlw	27
 22388  001962  D005               	goto	u23030
 22389  001964                     u23035:
 22390  001964  90D8               	bcf	status,0,c
 22391  001966  3377               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 22392  001968  3376               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 22393  00196A  3375               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 22394  00196C  3374               	rrcf	??_getVSCPFrame& (0+255),f,b
 22395  00196E                     u23030:
 22396  00196E  2EE8               	decfsz	wreg,f,c
 22397  001970  D7F9               	goto	u23035
 22398  001972  5174               	movf	??_getVSCPFrame& (0+255),w,b
 22399  001974  0B07               	andlw	7
 22400  001976  6EDF               	movwf	indf2,c
 22401                           
 22402                           ; BSR set to: 0
 22403                           ;main.c: 3322: return 1;
 22404  001978  0E01               	movlw	1
 22405  00197A                     l1370:
 22406                           
 22407                           ; BSR set to: 0
 22408  00197A  0012               	return	
 22409  00197C                     __end_of_getVSCPFrame:
 22410                           	opt stack 0
 22411                           tblptru	equ	0xFF8
 22412                           tblptrh	equ	0xFF7
 22413                           tblptrl	equ	0xFF6
 22414                           tablat	equ	0xFF5
 22415                           prodh	equ	0xFF4
 22416                           prodl	equ	0xFF3
 22417                           intcon	equ	0xFF2
 22418                           indf0	equ	0xFEF
 22419                           postinc0	equ	0xFEE
 22420                           fsr0h	equ	0xFEA
 22421                           fsr0l	equ	0xFE9
 22422                           wreg	equ	0xFE8
 22423                           indf1	equ	0xFE7
 22424                           postinc1	equ	0xFE6
 22425                           postdec1	equ	0xFE5
 22426                           fsr1h	equ	0xFE2
 22427                           fsr1l	equ	0xFE1
 22428                           indf2	equ	0xFDF
 22429                           postinc2	equ	0xFDE
 22430                           postdec2	equ	0xFDD
 22431                           plusw2	equ	0xFDB
 22432                           fsr2h	equ	0xFDA
 22433                           fsr2l	equ	0xFD9
 22434                           status	equ	0xFD8
 22435                           
 22436 ;; *************** function _getCANFrame *****************
 22437 ;; Defined at:
 22438 ;;		line 3346 in file "main.c"
 22439 ;; Parameters:    Size  Location     Type
 22440 ;;  pid             1    wreg     PTR unsigned long 
 22441 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 22442 ;;  pdlc            2   10[BANK0 ] PTR unsigned char 
 22443 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 22444 ;;  pdata           2   12[BANK0 ] PTR unsigned char 
 22445 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 22446 ;; Auto vars:     Size  Location     Type
 22447 ;;  pid             1   34[COMRAM] PTR unsigned long 
 22448 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 22449 ;; Return value:  Size  Location     Type
 22450 ;;                  1    wreg      unsigned char 
 22451 ;; Registers used:
 22452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 22453 ;; Tracked objects:
 22454 ;;		On entry : F/0
 22455 ;;		On exit  : F/0
 22456 ;;		Unchanged: 0/0
 22457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22458 ;;      Params:         0       4       0       0       0       0       0
 22459 ;;      Locals:         1       0       0       0       0       0       0
 22460 ;;      Temps:          0       0       0       0       0       0       0
 22461 ;;      Totals:         1       4       0       0       0       0       0
 22462 ;;Total ram usage:        5 bytes
 22463 ;; Hardware stack levels used:    1
 22464 ;; Hardware stack levels required when called:    4
 22465 ;; This function calls:
 22466 ;;		_fifo_read
 22467 ;; This function is called by:
 22468 ;;		_receiveSendEventCANAL
 22469 ;;		_receiveSendMultiEventCANAL
 22470 ;;		_receiveSendEventSLCAN
 22471 ;;		_getVSCPFrame
 22472 ;; This function uses a non-reentrant model
 22473 ;;
 22474                           
 22475                           	psect	text54
 22476  001E62                     __ptext54:
 22477                           	opt stack 0
 22478  001E62                     _getCANFrame:
 22479                           	opt stack 23
 22480                           
 22481                           ; BSR set to: 0
 22482                           ;incstack = 0
 22483                           ;incstack = 0
 22484                           ;getCANFrame@pid stored from wreg
 22485  001E62  CFE8 F023          	movff	wreg,getCANFrame@pid
 22486                           
 22487                           ; BSR set to: 0
 22488                           ;main.c: 3347: if ( fifo_canrxcount ) {
 22489  001E66  502F               	movf	_fifo_canrxcount,w,c	;volatile
 22490  001E68  E013               	bz	l17568
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;main.c: 3350: (INTCONbits.GIE = 0);
 22494  001E6A  9EF2               	bcf	intcon,7,c	;volatile
 22495                           
 22496                           ; BSR set to: 0
 22497                           ;main.c: 3351: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 22498  001E6C  0E01               	movlw	high _canInputFifo
 22499  001E6E  0100               	movlb	0	; () banked
 22500  001E70  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 22501  001E72  0ED2               	movlw	low _canInputFifo
 22502  001E74  6F60               	movwf	?_fifo_read& (0+255),b
 22503  001E76  C023  F062         	movff	getCANFrame@pid,?_fifo_read+2
 22504  001E7A  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 22505  001E7C  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 22506  001E7E  0E04               	movlw	4
 22507  001E80  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 22508  001E82  ECCC  F011         	call	_fifo_read	;wreg free
 22509  001E86  5160               	movf	?_fifo_read& (0+255),w,b
 22510  001E88  0A04               	xorlw	4
 22511  001E8A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 22512  001E8C  E003               	bz	l17572
 22513  001E8E                     l17566:
 22514                           
 22515                           ; BSR set to: 0
 22516                           ;main.c: 3352: (INTCONbits.GIE = 1);
 22517  001E8E  8EF2               	bsf	intcon,7,c	;volatile
 22518  001E90                     l17568:
 22519                           
 22520                           ; BSR set to: 0
 22521                           ;main.c: 3353: return 0;
 22522  001E90  0E00               	movlw	0
 22523  001E92  D03A               	goto	l1379
 22524  001E94                     l17572:
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;main.c: 3354: }
 22528                           ;main.c: 3357: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 22529  001E94  0E01               	movlw	high _canInputFifo
 22530  001E96  0100               	movlb	0	; () banked
 22531  001E98  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 22532  001E9A  0ED2               	movlw	low _canInputFifo
 22533  001E9C  6F60               	movwf	?_fifo_read& (0+255),b
 22534  001E9E  C06A  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 22535  001EA2  C06B  F063         	movff	getCANFrame@pdlc+1,?_fifo_read+3
 22536  001EA6  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 22537  001EA8  0E01               	movlw	1
 22538  001EAA  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 22539  001EAC  ECCC  F011         	call	_fifo_read	;wreg free
 22540  001EB0  0560               	decf	?_fifo_read& (0+255),w,b
 22541  001EB2  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 22542  001EB4  E1EC               	bnz	l17566
 22543                           
 22544                           ; BSR set to: 0
 22545                           ;main.c: 3360: }
 22546                           ;main.c: 3363: if ( *pdlc > 8 ) {
 22547  001EB6  C06A  FFD9         	movff	getCANFrame@pdlc,fsr2l
 22548  001EBA  C06B  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 22549  001EBE  0E08               	movlw	8
 22550  001EC0  64DF               	cpfsgt	indf2,c
 22551  001EC2  D005               	goto	l17584
 22552                           
 22553                           ; BSR set to: 0
 22554                           ;main.c: 3364: *pdlc = 0;
 22555  001EC4  C06A  FFD9         	movff	getCANFrame@pdlc,fsr2l
 22556  001EC8  C06B  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 22557  001ECC  6ADF               	clrf	indf2,c
 22558  001ECE                     l17584:
 22559                           
 22560                           ; BSR set to: 0
 22561                           ;main.c: 3365: }
 22562                           ;main.c: 3368: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 22563  001ECE  0E01               	movlw	high _canInputFifo
 22564  001ED0  0100               	movlb	0	; () banked
 22565  001ED2  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 22566  001ED4  0ED2               	movlw	low _canInputFifo
 22567  001ED6  6F60               	movwf	?_fifo_read& (0+255),b
 22568  001ED8  C06C  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 22569  001EDC  C06D  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 22570  001EE0  C06A  FFD9         	movff	getCANFrame@pdlc,fsr2l
 22571  001EE4  C06B  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 22572  001EE8  50DF               	movf	indf2,w,c
 22573  001EEA  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 22574  001EEC  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 22575  001EEE  ECCC  F011         	call	_fifo_read	;wreg free
 22576  001EF2  C06A  FFD9         	movff	getCANFrame@pdlc,fsr2l
 22577  001EF6  C06B  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 22578  001EFA  50DF               	movf	indf2,w,c
 22579  001EFC  1960               	xorwf	?_fifo_read& (0+255),w,b
 22580  001EFE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 22581  001F00  E1C6               	bnz	l17566
 22582                           
 22583                           ; BSR set to: 0
 22584                           ;main.c: 3371: }
 22585                           ;main.c: 3373: fifo_canrxcount--;
 22586  001F02  062F               	decf	_fifo_canrxcount,f,c	;volatile
 22587                           
 22588                           ; BSR set to: 0
 22589                           ;main.c: 3375: (INTCONbits.GIE = 1);
 22590  001F04  8EF2               	bsf	intcon,7,c	;volatile
 22591                           
 22592                           ; BSR set to: 0
 22593                           ;main.c: 3377: return 1;
 22594  001F06  0E01               	movlw	1
 22595  001F08                     l1379:
 22596                           
 22597                           ; BSR set to: 0
 22598  001F08  0012               	return	
 22599  001F0A                     __end_of_getCANFrame:
 22600                           	opt stack 0
 22601                           tblptru	equ	0xFF8
 22602                           tblptrh	equ	0xFF7
 22603                           tblptrl	equ	0xFF6
 22604                           tablat	equ	0xFF5
 22605                           prodh	equ	0xFF4
 22606                           prodl	equ	0xFF3
 22607                           intcon	equ	0xFF2
 22608                           indf0	equ	0xFEF
 22609                           postinc0	equ	0xFEE
 22610                           fsr0h	equ	0xFEA
 22611                           fsr0l	equ	0xFE9
 22612                           wreg	equ	0xFE8
 22613                           indf1	equ	0xFE7
 22614                           postinc1	equ	0xFE6
 22615                           postdec1	equ	0xFE5
 22616                           fsr1h	equ	0xFE2
 22617                           fsr1l	equ	0xFE1
 22618                           indf2	equ	0xFDF
 22619                           postinc2	equ	0xFDE
 22620                           postdec2	equ	0xFDD
 22621                           plusw2	equ	0xFDB
 22622                           fsr2h	equ	0xFDA
 22623                           fsr2l	equ	0xFD9
 22624                           status	equ	0xFD8
 22625                           
 22626 ;; *************** function _fifo_read *****************
 22627 ;; Defined at:
 22628 ;;		line 29 in file "fifo.c"
 22629 ;; Parameters:    Size  Location     Type
 22630 ;;  f               2    0[BANK0 ] PTR struct .
 22631 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 22632 ;;  buf             2    2[BANK0 ] PTR const void 
 22633 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 22634 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 22635 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 22636 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 22637 ;;  nbytes          2    4[BANK0 ] unsigned short 
 22638 ;; Auto vars:     Size  Location     Type
 22639 ;;  i               2    8[BANK0 ] unsigned short 
 22640 ;;  p               2    6[BANK0 ] PTR unsigned char 
 22641 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 22642 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 22643 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 22644 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 22645 ;; Return value:  Size  Location     Type
 22646 ;;                  2    0[BANK0 ] unsigned short 
 22647 ;; Registers used:
 22648 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 22649 ;; Tracked objects:
 22650 ;;		On entry : F/0
 22651 ;;		On exit  : F/0
 22652 ;;		Unchanged: 0/0
 22653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22654 ;;      Params:         0       6       0       0       0       0       0
 22655 ;;      Locals:         0       4       0       0       0       0       0
 22656 ;;      Temps:          4       0       0       0       0       0       0
 22657 ;;      Totals:         4      10       0       0       0       0       0
 22658 ;;Total ram usage:       14 bytes
 22659 ;; Hardware stack levels used:    1
 22660 ;; Hardware stack levels required when called:    3
 22661 ;; This function calls:
 22662 ;;		Nothing
 22663 ;; This function is called by:
 22664 ;;		_main
 22665 ;;		_doModeVerbose
 22666 ;;		_doModeVscp
 22667 ;;		_doModeSLCAN
 22668 ;;		_getCANFrame
 22669 ;; This function uses a non-reentrant model
 22670 ;;
 22671                           
 22672                           	psect	text55
 22673  002398                     __ptext55:
 22674                           	opt stack 0
 22675  002398                     _fifo_read:
 22676                           	opt stack 23
 22677                           
 22678                           ; BSR set to: 0
 22679                           ;fifo.c: 30: uint16_t i;
 22680                           ;fifo.c: 31: uint8_t *p;
 22681                           ;fifo.c: 32: p = buf;
 22682                           
 22683                           ; BSR set to: 0
 22684                           ;incstack = 0
 22685                           ;incstack = 0
 22686  002398  C062  F066         	movff	fifo_read@buf,fifo_read@p
 22687  00239C  C063  F067         	movff	fifo_read@buf+1,fifo_read@p+1
 22688                           
 22689                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 22690  0023A0  6B68               	clrf	fifo_read@i& (0+255),b
 22691  0023A2  6B69               	clrf	(fifo_read@i+1)& (0+255),b
 22692  0023A4  D04A               	goto	l14696
 22693  0023A6                     l14682:
 22694                           
 22695                           ; BSR set to: 0
 22696                           ;fifo.c: 36: if ( f->tail != f->head ) {
 22697  0023A6  EE20 F002          	lfsr	2,2
 22698  0023AA  D851               	call	PL38	;call to abstracted procedure
 22699  0023AC  18E5               	xorwf	postdec1,w,c
 22700  0023AE  CFDF FFE8          	movff	indf2,wreg
 22701  0023B2  B4D8               	btfsc	status,2,c
 22702  0023B4  18E7               	xorwf	indf1,w,c
 22703  0023B6  E03A               	bz	l1630
 22704                           
 22705                           ; BSR set to: 0
 22706                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 22707  0023B8  EE20 F004          	lfsr	2,4
 22708  0023BC  5160               	movf	fifo_read@f& (0+255),w,b
 22709  0023BE  26D9               	addwf	fsr2l,f,c
 22710  0023C0  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22711  0023C2  22DA               	addwfc	fsr2h,f,c
 22712  0023C4  CFDE F01F          	movff	postinc2,??_fifo_read
 22713  0023C8  CFDD F020          	movff	postdec2,??_fifo_read+1
 22714  0023CC  C060  FFD9         	movff	fifo_read@f,fsr2l
 22715  0023D0  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 22716  0023D4  CFDE F021          	movff	postinc2,??_fifo_read+2
 22717  0023D8  CFDD F022          	movff	postdec2,??_fifo_read+3
 22718  0023DC  501F               	movf	??_fifo_read,w,c
 22719  0023DE  2421               	addwf	??_fifo_read+2,w,c
 22720  0023E0  6ED9               	movwf	fsr2l,c
 22721  0023E2  5020               	movf	??_fifo_read+1,w,c
 22722  0023E4  2022               	addwfc	??_fifo_read+3,w,c
 22723  0023E6  6EDA               	movwf	fsr2h,c
 22724  0023E8  C066  FFE1         	movff	fifo_read@p,fsr1l
 22725  0023EC  C067  FFE2         	movff	fifo_read@p+1,fsr1h
 22726  0023F0  CFDF FFE7          	movff	indf2,indf1
 22727                           
 22728                           ; BSR set to: 0
 22729  0023F4  4B66               	infsnz	fifo_read@p& (0+255),f,b
 22730  0023F6  2B67               	incf	(fifo_read@p+1)& (0+255),f,b
 22731                           
 22732                           ; BSR set to: 0
 22733                           ;fifo.c: 38: f->tail++;
 22734  0023F8  EE20 F004          	lfsr	2,4
 22735  0023FC  5160               	movf	fifo_read@f& (0+255),w,b
 22736  0023FE  26D9               	addwf	fsr2l,f,c
 22737  002400  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22738  002402  22DA               	addwfc	fsr2h,f,c
 22739  002404  2ADE               	incf	postinc2,f,c
 22740  002406  0E00               	movlw	0
 22741  002408  22DD               	addwfc	postdec2,f,c
 22742                           
 22743                           ; BSR set to: 0
 22744                           ;fifo.c: 39: if (f->tail >= f->size) {
 22745  00240A  EE20 F006          	lfsr	2,6
 22746  00240E  D81F               	call	PL38	;call to abstracted procedure
 22747  002410  5CE5               	subwf	postdec1,w,c
 22748  002412  E102               	bnz	u18595
 22749  002414  50DF               	movf	indf2,w,c
 22750  002416  5CE7               	subwf	indf1,w,c
 22751  002418                     u18595:
 22752  002418  E30E               	bnc	l14694
 22753                           
 22754                           ; BSR set to: 0
 22755                           ;fifo.c: 40: f->tail = 0;
 22756  00241A  EE20 F004          	lfsr	2,4
 22757  00241E  5160               	movf	fifo_read@f& (0+255),w,b
 22758  002420  26D9               	addwf	fsr2l,f,c
 22759  002422  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22760  002424  22DA               	addwfc	fsr2h,f,c
 22761  002426  6ADE               	clrf	postinc2,c
 22762  002428  6ADD               	clrf	postdec2,c
 22763  00242A  D005               	goto	l14694
 22764  00242C                     l1630:
 22765                           
 22766                           ; BSR set to: 0
 22767                           ;fifo.c: 43: else {
 22768                           ;fifo.c: 44: return i;
 22769  00242C  C068  F060         	movff	fifo_read@i,?_fifo_read
 22770  002430  C069  F061         	movff	fifo_read@i+1,?_fifo_read+1
 22771  002434  D00B               	goto	l1633
 22772  002436                     l14694:
 22773                           
 22774                           ; BSR set to: 0
 22775  002436  4B68               	infsnz	fifo_read@i& (0+255),f,b
 22776  002438  2B69               	incf	(fifo_read@i+1)& (0+255),f,b
 22777  00243A                     l14696:
 22778                           
 22779                           ; BSR set to: 0
 22780  00243A  5164               	movf	fifo_read@nbytes& (0+255),w,b
 22781  00243C  5D68               	subwf	fifo_read@i& (0+255),w,b
 22782  00243E  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 22783  002440  5969               	subwfb	(fifo_read@i+1)& (0+255),w,b
 22784  002442  E3B1               	bnc	l14682
 22785                           
 22786                           ; BSR set to: 0
 22787                           ;fifo.c: 45: }
 22788                           ;fifo.c: 47: }
 22789                           ;fifo.c: 49: return nbytes;
 22790  002444  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 22791  002448  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 22792  00244C                     l1633:
 22793                           
 22794                           ; BSR set to: 0
 22795  00244C  0012               	return	
 22796  00244E                     __end_of_fifo_read:
 22797                           	opt stack 0
 22798  00244E                     PL38:
 22799                           	opt stack 23
 22800  00244E  5160               	movf	fifo_read@f& (0+255),w,b
 22801  002450  26D9               	addwf	fsr2l,f,c
 22802  002452  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22803  002454  22DA               	addwfc	fsr2h,f,c
 22804  002456  EE10 F004          	lfsr	1,4
 22805  00245A  5160               	movf	fifo_read@f& (0+255),w,b
 22806  00245C  26E1               	addwf	fsr1l,f,c
 22807  00245E  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22808  002460  22E2               	addwfc	fsr1h,f,c
 22809  002462  52E6               	movf	postinc1,f,c
 22810  002464  52DE               	movf	postinc2,f,c
 22811  002466  50DD               	movf	postdec2,w,c
 22812  002468  0012               	return	
 22813  00246A                     __end_ofPL38:
 22814                           	opt stack 0
 22815                           tblptru	equ	0xFF8
 22816                           tblptrh	equ	0xFF7
 22817                           tblptrl	equ	0xFF6
 22818                           tablat	equ	0xFF5
 22819                           prodh	equ	0xFF4
 22820                           prodl	equ	0xFF3
 22821                           intcon	equ	0xFF2
 22822                           indf0	equ	0xFEF
 22823                           postinc0	equ	0xFEE
 22824                           fsr0h	equ	0xFEA
 22825                           fsr0l	equ	0xFE9
 22826                           wreg	equ	0xFE8
 22827                           indf1	equ	0xFE7
 22828                           postinc1	equ	0xFE6
 22829                           postdec1	equ	0xFE5
 22830                           fsr1h	equ	0xFE2
 22831                           fsr1l	equ	0xFE1
 22832                           indf2	equ	0xFDF
 22833                           postinc2	equ	0xFDE
 22834                           postdec2	equ	0xFDD
 22835                           plusw2	equ	0xFDB
 22836                           fsr2h	equ	0xFDA
 22837                           fsr2l	equ	0xFD9
 22838                           status	equ	0xFD8
 22839                           
 22840 ;; *************** function _sprintf *****************
 22841 ;; Defined at:
 22842 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 22843 ;; Parameters:    Size  Location     Type
 22844 ;;  sp              2   17[BANK0 ] PTR unsigned char 
 22845 ;;		 -> wrkbuf(80), 
 22846 ;;  f               2   19[BANK0 ] PTR const unsigned char 
 22847 ;;		 -> STR_241(3), STR_240(7), STR_234(3), STR_233(7), 
 22848 ;;		 -> STR_230(4), STR_229(8), STR_226(4), STR_225(8), 
 22849 ;;		 -> STR_222(4), STR_221(8), STR_218(4), STR_217(8), 
 22850 ;;		 -> STR_214(4), STR_213(7), STR_210(4), STR_209(7), 
 22851 ;;		 -> STR_206(4), STR_205(7), STR_202(4), STR_201(7), 
 22852 ;;		 -> STR_196(3), STR_195(7), STR_193(3), STR_192(7), 
 22853 ;;		 -> STR_190(3), STR_189(7), STR_187(3), STR_186(7), 
 22854 ;;		 -> STR_184(3), STR_183(7), STR_181(4), STR_180(8), 
 22855 ;;		 -> STR_178(3), STR_177(7), STR_101(3), STR_100(7), 
 22856 ;;		 -> STR_96(4), STR_95(8), STR_92(4), STR_91(8), 
 22857 ;;		 -> STR_77(3), STR_76(7), STR_75(3), STR_74(7), 
 22858 ;;		 -> STR_72(6), STR_71(10), STR_66(3), STR_65(7), 
 22859 ;;		 -> STR_63(3), STR_62(7), STR_61(3), STR_60(7), 
 22860 ;;		 -> STR_58(6), STR_57(10), 
 22861 ;; Auto vars:     Size  Location     Type
 22862 ;;  idx             1   28[BANK0 ] unsigned char 
 22863 ;;  _val            4   40[BANK0 ] struct .
 22864 ;;  flag            2   45[BANK0 ] unsigned short 
 22865 ;;  width           2   38[BANK0 ] int 
 22866 ;;  prec            2   36[BANK0 ] int 
 22867 ;;  c               1   44[BANK0 ] char 
 22868 ;;  ap              1   35[BANK0 ] PTR void [1]
 22869 ;;		 -> ?_sprintf(2), 
 22870 ;; Return value:  Size  Location     Type
 22871 ;;                  2   17[BANK0 ] int 
 22872 ;; Registers used:
 22873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22874 ;; Tracked objects:
 22875 ;;		On entry : F/0
 22876 ;;		On exit  : F/0
 22877 ;;		Unchanged: 0/0
 22878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22879 ;;      Params:         0       8       0       0       0       0       0
 22880 ;;      Locals:         0      19       0       0       0       0       0
 22881 ;;      Temps:          0       3       0       0       0       0       0
 22882 ;;      Totals:         0      30       0       0       0       0       0
 22883 ;;Total ram usage:       30 bytes
 22884 ;; Hardware stack levels used:    1
 22885 ;; Hardware stack levels required when called:    4
 22886 ;; This function calls:
 22887 ;;		_isdigit
 22888 ;;		___lldiv
 22889 ;;		___llmod
 22890 ;;		___wmul
 22891 ;; This function is called by:
 22892 ;;		_doModeVerbose
 22893 ;;		_receivePrintEventVerbose
 22894 ;;		_printStatistics
 22895 ;;		_printErrors
 22896 ;; This function uses a non-reentrant model
 22897 ;;
 22898                           
 22899                           	psect	text56
 22900  004BF6                     __ptext56:
 22901                           	opt stack 0
 22902  004BF6                     _sprintf:
 22903                           	opt stack 24
 22904                           
 22905                           ; BSR set to: 0
 22906                           ;doprnt.c: 494: va_list ap;
 22907                           ;doprnt.c: 499: signed char c;
 22908                           ;doprnt.c: 501: int width;
 22909                           ;doprnt.c: 504: int prec;
 22910                           ;doprnt.c: 508: unsigned short flag;
 22911                           ;doprnt.c: 527: union {
 22912                           ;doprnt.c: 528: unsigned long _val;
 22913                           ;doprnt.c: 529: struct {
 22914                           ;doprnt.c: 530: const char * _cp;
 22915                           ;doprnt.c: 531: unsigned _len;
 22916                           ;doprnt.c: 532: } _str;
 22917                           ;doprnt.c: 533: } _val;
 22918                           ;doprnt.c: 542: *ap = __va_start();
 22919                           
 22920                           ; BSR set to: 0
 22921                           ;incstack = 0
 22922                           ;incstack = 0
 22923  004BF6  0E75               	movlw	low (?_sprintf+4)
 22924  004BF8  6F83               	movwf	sprintf@ap& (0+255),b
 22925                           
 22926                           ;doprnt.c: 545: while(c = *f++) {
 22927  004BFA  D332               	goto	l16962
 22928  004BFC                     l16628:
 22929                           
 22930                           ; BSR set to: 0
 22931                           ;doprnt.c: 547: if(c != '%')
 22932  004BFC  518C               	movf	sprintf@c& (0+255),w,b
 22933  004BFE  0A25               	xorlw	37
 22934  004C00  E009               	bz	l1717
 22935                           
 22936                           ; BSR set to: 0
 22937                           ;doprnt.c: 549: {
 22938                           ;doprnt.c: 550: ((*sp++ = (c)));
 22939  004C02  C071  FFD9         	movff	sprintf@sp,fsr2l
 22940  004C06  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 22941  004C0A  C08C  FFDF         	movff	sprintf@c,indf2
 22942                           
 22943                           ; BSR set to: 0
 22944  004C0E  4B71               	infsnz	sprintf@sp& (0+255),f,b
 22945  004C10  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 22946                           
 22947                           ;doprnt.c: 551: continue;
 22948  004C12  D326               	goto	l16962
 22949  004C14                     l1717:
 22950                           
 22951                           ; BSR set to: 0
 22952                           ;doprnt.c: 552: }
 22953                           ;doprnt.c: 555: width = 0;
 22954  004C14  6B86               	clrf	sprintf@width& (0+255),b
 22955  004C16  6B87               	clrf	(sprintf@width+1)& (0+255),b
 22956                           
 22957                           ;doprnt.c: 557: flag = 0;
 22958  004C18  6B8D               	clrf	sprintf@flag& (0+255),b
 22959  004C1A  6B8E               	clrf	(sprintf@flag+1)& (0+255),b
 22960  004C1C  D009               	goto	l16644
 22961  004C1E                     l16634:
 22962                           
 22963                           ; BSR set to: 0
 22964                           ;doprnt.c: 563: flag |= 0x08;
 22965  004C1E  878D               	bsf	sprintf@flag& (0+255),3,b
 22966  004C20  D005               	goto	L39
 22967  004C22                     l16636:
 22968                           
 22969                           ; BSR set to: 0
 22970                           ;doprnt.c: 570: flag |= 0x01;
 22971  004C22  818D               	bsf	sprintf@flag& (0+255),0,b
 22972  004C24  D003               	goto	L39
 22973  004C26                     l16638:
 22974                           
 22975                           ; BSR set to: 0
 22976                           ;doprnt.c: 583: flag |= 0x800;
 22977  004C26  878E               	bsf	(sprintf@flag+1)& (0+255),3,b
 22978  004C28  D001               	goto	L39
 22979  004C2A                     l16640:
 22980                           
 22981                           ; BSR set to: 0
 22982                           ;doprnt.c: 589: flag |= 0x04;
 22983  004C2A  858D               	bsf	sprintf@flag& (0+255),2,b
 22984  004C2C                     L39:
 22985                           
 22986                           ;doprnt.c: 590: f++;
 22987  004C2C  4B73               	infsnz	sprintf@f& (0+255),f,b
 22988  004C2E  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 22989  004C30                     l16644:
 22990                           
 22991                           ; BSR set to: 0
 22992  004C30  C073  FFF6         	movff	sprintf@f,tblptrl
 22993  004C34  C074  FFF7         	movff	sprintf@f+1,tblptrh
 22994  004C38  0008               	tblrd		*
 22995  004C3A  50F5               	movf	tablat,w,c
 22996                           
 22997                           ; Switch size 1, requested type "space"
 22998                           ; Number of cases is 4, Range of values is 32 to 48
 22999                           ; switch strategies available:
 23000                           ; Name         Instructions Cycles
 23001                           ; simple_byte           13     7 (average)
 23002                           ;	Chosen strategy is simple_byte
 23003  004C3C  0A20               	xorlw	32	; case 32
 23004  004C3E  E0F1               	bz	l16636
 23005  004C40  0A03               	xorlw	3	; case 35
 23006  004C42  E0F1               	bz	l16638
 23007  004C44  0A0E               	xorlw	14	; case 45
 23008  004C46  E0EB               	bz	l16634
 23009  004C48  0A1D               	xorlw	29	; case 48
 23010  004C4A  E0EF               	bz	l16640
 23011                           
 23012                           ; BSR set to: 0
 23013                           ;doprnt.c: 602: if(flag & 0x08)
 23014  004C4C  B78D               	btfsc	sprintf@flag& (0+255),3,b
 23015                           
 23016                           ; BSR set to: 0
 23017                           ;doprnt.c: 603: flag &= ~0x04;
 23018  004C4E  958D               	bcf	sprintf@flag& (0+255),2,b
 23019                           
 23020                           ; BSR set to: 0
 23021                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 23022  004C50  C073  FFF6         	movff	sprintf@f,tblptrl
 23023  004C54  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23024  004C58  0008               	tblrd		*
 23025  004C5A  50F5               	movf	tablat,w,c
 23026  004C5C  EC18  F007         	call	_isdigit
 23027  004C60  E327               	bnc	l16660
 23028                           
 23029                           ;doprnt.c: 607: width = 0;
 23030  004C62  0100               	movlb	0	; () banked
 23031  004C64  6B86               	clrf	sprintf@width& (0+255),b
 23032  004C66  6B87               	clrf	(sprintf@width+1)& (0+255),b
 23033  004C68                     l16652:
 23034                           
 23035                           ;doprnt.c: 609: width *= 10;
 23036  004C68  C086  F060         	movff	sprintf@width,?___wmul
 23037  004C6C  C087  F061         	movff	sprintf@width+1,?___wmul+1
 23038  004C70  0100               	movlb	0	; () banked
 23039  004C72  6B63               	clrf	(?___wmul+3)& (0+255),b
 23040  004C74  0E0A               	movlw	10
 23041  004C76  6F62               	movwf	(?___wmul+2)& (0+255),b
 23042  004C78  ECA0  F007         	call	___wmul	;wreg free
 23043  004C7C  C060  F086         	movff	?___wmul,sprintf@width
 23044  004C80  C061  F087         	movff	?___wmul+1,sprintf@width+1
 23045                           
 23046                           ; BSR set to: 0
 23047                           ;doprnt.c: 610: width += *f++ - '0';
 23048  004C84  C073  FFF6         	movff	sprintf@f,tblptrl
 23049  004C88  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23050  004C8C  0008               	tblrd		*
 23051  004C8E  CFF5 F079          	movff	tablat,??_sprintf
 23052  004C92  0ED0               	movlw	208
 23053  004C94  2579               	addwf	??_sprintf& (0+255),w,b
 23054  004C96  6F7A               	movwf	(??_sprintf+1)& (0+255),b
 23055  004C98  6B7B               	clrf	(??_sprintf+2)& (0+255),b
 23056  004C9A  0EFF               	movlw	255
 23057  004C9C  237B               	addwfc	(??_sprintf+2)& (0+255),f,b
 23058  004C9E  517A               	movf	(??_sprintf+1)& (0+255),w,b
 23059  004CA0  2786               	addwf	sprintf@width& (0+255),f,b
 23060  004CA2  517B               	movf	(??_sprintf+2)& (0+255),w,b
 23061  004CA4  2387               	addwfc	(sprintf@width+1)& (0+255),f,b
 23062                           
 23063                           ; BSR set to: 0
 23064                           
 23065                           ; BSR set to: 0
 23066                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 23067  004CA6  DB3A               	call	PL96	;call to abstracted procedure
 23068  004CA8  EC18  F007         	call	_isdigit
 23069  004CAC  E315               	bnc	l16668
 23070  004CAE  D7DC               	goto	l16652
 23071  004CB0                     l16660:
 23072  004CB0  0100               	movlb	0	; () banked
 23073  004CB2  C073  FFF6         	movff	sprintf@f,tblptrl
 23074  004CB6  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23075  004CBA  0008               	tblrd		*
 23076  004CBC  50F5               	movf	tablat,w,c
 23077  004CBE  0A2A               	xorlw	42
 23078  004CC0  E10B               	bnz	l16668
 23079                           
 23080                           ; BSR set to: 0
 23081                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 23082  004CC2  5183               	movf	sprintf@ap& (0+255),w,b
 23083  004CC4  6ED9               	movwf	fsr2l,c
 23084  004CC6  6ADA               	clrf	fsr2h,c
 23085  004CC8  CFDE F086          	movff	postinc2,sprintf@width
 23086  004CCC  CFDD F087          	movff	postdec2,sprintf@width+1
 23087                           
 23088                           ; BSR set to: 0
 23089  004CD0  0E02               	movlw	2
 23090  004CD2  2783               	addwf	sprintf@ap& (0+255),f,b
 23091                           
 23092                           ; BSR set to: 0
 23093                           ;doprnt.c: 615: f++;
 23094  004CD4  4B73               	infsnz	sprintf@f& (0+255),f,b
 23095  004CD6  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 23096  004CD8                     l16668:
 23097                           
 23098                           ;doprnt.c: 617: }
 23099                           ;doprnt.c: 620: if(*f == '.') {
 23100  004CD8  0100               	movlb	0	; () banked
 23101  004CDA  C073  FFF6         	movff	sprintf@f,tblptrl
 23102  004CDE  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23103  004CE2  0008               	tblrd		*
 23104  004CE4  50F5               	movf	tablat,w,c
 23105  004CE6  0A2E               	xorlw	46
 23106  004CE8  E138               	bnz	l1733
 23107                           
 23108                           ; BSR set to: 0
 23109                           ;doprnt.c: 621: flag |= 0x4000;
 23110  004CEA  8D8E               	bsf	(sprintf@flag+1)& (0+255),6,b
 23111                           
 23112                           ;doprnt.c: 622: f++;
 23113                           
 23114                           ; BSR set to: 0
 23115                           ;doprnt.c: 624: if(*f == '*') {
 23116  004CEC  DB17               	call	PL96	;call to abstracted procedure
 23117  004CEE  0A2A               	xorlw	42
 23118  004CF0  E10C               	bnz	l1734
 23119                           
 23120                           ; BSR set to: 0
 23121                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 23122  004CF2  5183               	movf	sprintf@ap& (0+255),w,b
 23123  004CF4  6ED9               	movwf	fsr2l,c
 23124  004CF6  6ADA               	clrf	fsr2h,c
 23125  004CF8  CFDE F084          	movff	postinc2,sprintf@prec
 23126  004CFC  CFDD F085          	movff	postdec2,sprintf@prec+1
 23127                           
 23128                           ; BSR set to: 0
 23129  004D00  0E02               	movlw	2
 23130  004D02  2783               	addwf	sprintf@ap& (0+255),f,b
 23131                           
 23132                           ; BSR set to: 0
 23133                           ;doprnt.c: 626: f++;
 23134  004D04  4B73               	infsnz	sprintf@f& (0+255),f,b
 23135  004D06  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 23136                           
 23137                           ;doprnt.c: 627: } else
 23138  004D08  D089               	goto	l16738
 23139  004D0A                     l1734:
 23140                           
 23141                           ; BSR set to: 0
 23142                           ;doprnt.c: 629: {
 23143                           ;doprnt.c: 630: prec = 0;
 23144  004D0A  6B84               	clrf	sprintf@prec& (0+255),b
 23145  004D0C  6B85               	clrf	(sprintf@prec+1)& (0+255),b
 23146                           
 23147                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 23148  004D0E  D01B               	goto	l16684
 23149  004D10                     l16680:
 23150                           
 23151                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 23152  004D10  C084  F060         	movff	sprintf@prec,?___wmul
 23153  004D14  C085  F061         	movff	sprintf@prec+1,?___wmul+1
 23154  004D18  0100               	movlb	0	; () banked
 23155  004D1A  6B63               	clrf	(?___wmul+3)& (0+255),b
 23156  004D1C  0E0A               	movlw	10
 23157  004D1E  6F62               	movwf	(?___wmul+2)& (0+255),b
 23158  004D20  ECA0  F007         	call	___wmul	;wreg free
 23159  004D24  C073  FFF6         	movff	sprintf@f,tblptrl
 23160  004D28  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23161  004D2C  0008               	tblrd		*
 23162  004D2E  50F5               	movf	tablat,w,c
 23163  004D30  2760               	addwf	?___wmul& (0+255),f,b
 23164  004D32  0E00               	movlw	0
 23165  004D34  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 23166  004D36  0ED0               	movlw	208
 23167  004D38  2560               	addwf	?___wmul& (0+255),w,b
 23168  004D3A  6F84               	movwf	sprintf@prec& (0+255),b
 23169  004D3C  0EFF               	movlw	255
 23170  004D3E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 23171  004D40  6F85               	movwf	(sprintf@prec+1)& (0+255),b
 23172                           
 23173                           ; BSR set to: 0
 23174  004D42  4B73               	infsnz	sprintf@f& (0+255),f,b
 23175  004D44  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 23176  004D46                     l16684:
 23177                           
 23178                           ; BSR set to: 0
 23179  004D46  C073  FFF6         	movff	sprintf@f,tblptrl
 23180  004D4A  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23181  004D4E  0008               	tblrd		*
 23182  004D50  50F5               	movf	tablat,w,c
 23183  004D52  EC18  F007         	call	_isdigit
 23184  004D56  E362               	bnc	l16738
 23185  004D58  D7DB               	goto	l16680
 23186  004D5A                     l1733:
 23187                           
 23188                           ; BSR set to: 0
 23189                           ;doprnt.c: 635: prec = 0;
 23190  004D5A  6B84               	clrf	sprintf@prec& (0+255),b
 23191  004D5C  6B85               	clrf	(sprintf@prec+1)& (0+255),b
 23192  004D5E  D05E               	goto	l16738
 23193  004D60                     l16686:
 23194                           
 23195                           ; BSR set to: 0
 23196                           ;doprnt.c: 652: flag |= 0x10;
 23197  004D60  898D               	bsf	sprintf@flag& (0+255),4,b
 23198                           
 23199                           ;doprnt.c: 653: goto loop;
 23200  004D62  D05C               	goto	l16738
 23201  004D64                     l16688:
 23202                           
 23203                           ; BSR set to: 0
 23204                           ;doprnt.c: 700: flag |= 0x40;
 23205  004D64  8D8D               	bsf	sprintf@flag& (0+255),6,b
 23206                           
 23207                           ;doprnt.c: 702: break;
 23208  004D66  D070               	goto	l16740
 23209  004D68                     l16690:
 23210                           
 23211                           ; BSR set to: 0
 23212                           ;doprnt.c: 723: flag |= 0x20;
 23213  004D68  8B8D               	bsf	sprintf@flag& (0+255),5,b
 23214  004D6A                     l1750:
 23215                           
 23216                           ; BSR set to: 0
 23217                           ;doprnt.c: 730: flag |= 0x80;
 23218  004D6A  8F8D               	bsf	sprintf@flag& (0+255),7,b
 23219                           
 23220                           ;doprnt.c: 732: break;
 23221  004D6C  D06D               	goto	l16740
 23222  004D6E                     l16692:
 23223                           
 23224                           ; BSR set to: 0
 23225                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 23226  004D6E  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 23227  004D70  1184               	iorwf	sprintf@prec& (0+255),w,b
 23228  004D72  E009               	bz	l16698
 23229                           
 23230                           ; BSR set to: 0
 23231  004D74  5189               	movf	(sprintf@_val+1)& (0+255),w,b
 23232  004D76  5D84               	subwf	sprintf@prec& (0+255),w,b
 23233  004D78  518A               	movf	(sprintf@_val+2)& (0+255),w,b
 23234  004D7A  5985               	subwfb	(sprintf@prec+1)& (0+255),w,b
 23235  004D7C  E204               	bc	l16698
 23236                           
 23237                           ; BSR set to: 0
 23238                           ;doprnt.c: 763: _val._str._len = prec;
 23239  004D7E  C084  F089         	movff	sprintf@prec,sprintf@_val+1
 23240  004D82  C085  F08A         	movff	sprintf@prec+1,sprintf@_val+2
 23241  004D86                     l16698:
 23242                           
 23243                           ; BSR set to: 0
 23244                           ;doprnt.c: 766: if(width > _val._str._len)
 23245  004D86  5186               	movf	sprintf@width& (0+255),w,b
 23246  004D88  5D89               	subwf	(sprintf@_val+1)& (0+255),w,b
 23247  004D8A  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23248  004D8C  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
 23249  004D8E  E207               	bc	l1753
 23250                           
 23251                           ; BSR set to: 0
 23252                           ;doprnt.c: 767: width -= _val._str._len;
 23253  004D90  EE20  F089         	lfsr	2,sprintf@_val+1
 23254  004D94  50DE               	movf	postinc2,w,c
 23255  004D96  5F86               	subwf	sprintf@width& (0+255),f,b
 23256  004D98  50DD               	movf	postdec2,w,c
 23257  004D9A  5B87               	subwfb	(sprintf@width+1)& (0+255),f,b
 23258  004D9C  D002               	goto	l1754
 23259  004D9E                     l1753:
 23260                           
 23261                           ; BSR set to: 0
 23262                           ;doprnt.c: 768: else
 23263                           ;doprnt.c: 769: width = 0;
 23264  004D9E  6B86               	clrf	sprintf@width& (0+255),b
 23265  004DA0  6B87               	clrf	(sprintf@width+1)& (0+255),b
 23266  004DA2                     l1754:
 23267                           
 23268                           ; BSR set to: 0
 23269                           ;doprnt.c: 771: if(!(flag & 0x08))
 23270  004DA2  A78D               	btfss	sprintf@flag& (0+255),3,b
 23271  004DA4  D004               	goto	l16708
 23272  004DA6  D015               	goto	l16716
 23273  004DA8                     l16704:
 23274                           
 23275                           ; BSR set to: 0
 23276                           ;doprnt.c: 774: ((*sp++ = (' ')));
 23277  004DA8  DAA8               	call	PL66	;call to abstracted procedure
 23278                           
 23279                           ; BSR set to: 0
 23280  004DAA  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23281  004DAC  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23282  004DAE                     l16708:
 23283                           
 23284                           ; BSR set to: 0
 23285  004DAE  0786               	decf	sprintf@width& (0+255),f,b
 23286  004DB0  DAC3               	call	PL130	;call to abstracted procedure
 23287  004DB2  B4D8               	btfsc	status,2,c
 23288  004DB4  2987               	incf	(sprintf@width+1)& (0+255),w,b
 23289  004DB6  E00D               	bz	l16716
 23290  004DB8  D7F7               	goto	l16704
 23291  004DBA                     l16710:
 23292                           
 23293                           ; BSR set to: 0
 23294                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 23295  004DBA  5188               	movf	sprintf@_val& (0+255),w,b
 23296  004DBC  6ED9               	movwf	fsr2l,c
 23297  004DBE  6ADA               	clrf	fsr2h,c
 23298  004DC0  C071  FFE1         	movff	sprintf@sp,fsr1l
 23299  004DC4  C072  FFE2         	movff	sprintf@sp+1,fsr1h
 23300  004DC8  CFDF FFE7          	movff	indf2,indf1
 23301                           
 23302                           ; BSR set to: 0
 23303  004DCC  2B88               	incf	sprintf@_val& (0+255),f,b
 23304                           
 23305                           ; BSR set to: 0
 23306  004DCE  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23307  004DD0  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23308  004DD2                     l16716:
 23309                           
 23310                           ; BSR set to: 0
 23311  004DD2  0789               	decf	(sprintf@_val+1)& (0+255),f,b
 23312  004DD4  A0D8               	btfss	status,0,c
 23313  004DD6  078A               	decf	(sprintf@_val+2)& (0+255),f,b
 23314  004DD8  0100               	movlb	0	; () banked
 23315  004DDA  2989               	incf	(sprintf@_val+1)& (0+255),w,b
 23316  004DDC  B4D8               	btfsc	status,2,c
 23317  004DDE  298A               	incf	(sprintf@_val+2)& (0+255),w,b
 23318  004DE0  E1EC               	bnz	l16710
 23319                           
 23320                           ; BSR set to: 0
 23321                           ;doprnt.c: 779: if(flag & 0x08)
 23322  004DE2  B78D               	btfsc	sprintf@flag& (0+255),3,b
 23323  004DE4  D004               	goto	l16724
 23324  004DE6  D23C               	goto	l16962
 23325  004DE8                     l16720:
 23326                           
 23327                           ; BSR set to: 0
 23328                           ;doprnt.c: 781: ((*sp++ = (' ')));
 23329  004DE8  DA88               	call	PL66	;call to abstracted procedure
 23330                           
 23331                           ; BSR set to: 0
 23332  004DEA  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23333  004DEC  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23334  004DEE                     l16724:
 23335                           
 23336                           ; BSR set to: 0
 23337  004DEE  0786               	decf	sprintf@width& (0+255),f,b
 23338  004DF0  DAA3               	call	PL130	;call to abstracted procedure
 23339  004DF2  B4D8               	btfsc	status,2,c
 23340  004DF4  2987               	incf	(sprintf@width+1)& (0+255),w,b
 23341  004DF6  E101 D233          	bz	l16962
 23342  004DFA  D7F6               	goto	l16720
 23343  004DFC                     l16726:
 23344                           
 23345                           ; BSR set to: 0
 23346                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 23347  004DFC  5183               	movf	sprintf@ap& (0+255),w,b
 23348  004DFE  6ED9               	movwf	fsr2l,c
 23349  004E00  6ADA               	clrf	fsr2h,c
 23350  004E02  50DF               	movf	indf2,w,c
 23351  004E04  6F8C               	movwf	sprintf@c& (0+255),b
 23352                           
 23353                           ; BSR set to: 0
 23354  004E06  0E02               	movlw	2
 23355  004E08  2783               	addwf	sprintf@ap& (0+255),f,b
 23356  004E0A                     l16730:
 23357                           
 23358                           ; BSR set to: 0
 23359                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 23360  004E0A  0E8C               	movlw	low sprintf@c
 23361  004E0C  6F88               	movwf	sprintf@_val& (0+255),b
 23362                           
 23363                           ; BSR set to: 0
 23364                           ;doprnt.c: 815: _val._str._len = 1;
 23365  004E0E  6B8A               	clrf	(sprintf@_val+2)& (0+255),b
 23366  004E10  0E01               	movlw	1
 23367  004E12  6F89               	movwf	(sprintf@_val+1)& (0+255),b
 23368                           
 23369                           ;doprnt.c: 816: goto dostring;
 23370  004E14  D7AC               	goto	l16692
 23371  004E16                     l16734:
 23372                           
 23373                           ; BSR set to: 0
 23374                           ;doprnt.c: 827: flag |= 0xC0;
 23375  004E16  0EC0               	movlw	192
 23376  004E18  138D               	iorwf	sprintf@flag& (0+255),f,b
 23377                           
 23378                           ;doprnt.c: 828: break;
 23379  004E1A  D016               	goto	l16740
 23380  004E1C                     l16738:
 23381  004E1C  0100               	movlb	0	; () banked
 23382  004E1E  DA74               	call	PL72	;call to abstracted procedure
 23383  004E20  518C               	movf	sprintf@c& (0+255),w,b
 23384                           
 23385                           ; Switch size 1, requested type "space"
 23386                           ; Number of cases is 9, Range of values is 0 to 120
 23387                           ; switch strategies available:
 23388                           ; Name         Instructions Cycles
 23389                           ; simple_byte           28    15 (average)
 23390                           ;	Chosen strategy is simple_byte
 23391  004E22  E101 D221          	bz	l16964
 23392  004E26  0A58               	xorlw	88	; case 88
 23393  004E28  E09F               	bz	l16690
 23394  004E2A  0A3B               	xorlw	59	; case 99
 23395  004E2C  E0E7               	bz	l16726
 23396  004E2E  0A07               	xorlw	7	; case 100
 23397  004E30  E00B               	bz	l16740
 23398  004E32  0A0D               	xorlw	13	; case 105
 23399  004E34  E009               	bz	l16740
 23400  004E36  0A05               	xorlw	5	; case 108
 23401  004E38  E093               	bz	l16686
 23402  004E3A  0A03               	xorlw	3	; case 111
 23403  004E3C  E093               	bz	l16688
 23404  004E3E  0A1A               	xorlw	26	; case 117
 23405  004E40  E0EA               	bz	l16734
 23406  004E42  0A0D               	xorlw	13	; case 120
 23407  004E44  E092               	bz	l1750
 23408  004E46  D7E1               	goto	l16730
 23409  004E48                     l16740:
 23410                           
 23411                           ; BSR set to: 0
 23412                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 23413  004E48  518D               	movf	sprintf@flag& (0+255),w,b
 23414  004E4A  0BC0               	andlw	192
 23415  004E4C  E120               	bnz	l1769
 23416                           
 23417                           ; BSR set to: 0
 23418                           ;doprnt.c: 1260: {
 23419                           ;doprnt.c: 1262: if(flag & 0x10)
 23420  004E4E  A98D               	btfss	sprintf@flag& (0+255),4,b
 23421  004E50  D003               	goto	l16748
 23422                           
 23423                           ; BSR set to: 0
 23424                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 23425  004E52  5183               	movf	sprintf@ap& (0+255),w,b
 23426                           
 23427                           ; BSR set to: 0
 23428  004E54  DA47               	call	PL54	;call to abstracted procedure
 23429  004E56  D00D               	goto	L40
 23430  004E58                     l16748:
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;doprnt.c: 1264: else
 23434                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 23435  004E58  5183               	movf	sprintf@ap& (0+255),w,b
 23436  004E5A  6ED9               	movwf	fsr2l,c
 23437  004E5C  6ADA               	clrf	fsr2h,c
 23438  004E5E  CFDE F088          	movff	postinc2,sprintf@_val
 23439  004E62  CFDD F089          	movff	postdec2,sprintf@_val+1
 23440  004E66  0E00               	movlw	0
 23441  004E68  BF89               	btfsc	(sprintf@_val+1)& (0+255),7,b
 23442  004E6A  0EFF               	movlw	-1
 23443  004E6C  6F8A               	movwf	(sprintf@_val+2)& (0+255),b
 23444  004E6E  6F8B               	movwf	(sprintf@_val+3)& (0+255),b
 23445                           
 23446                           ; BSR set to: 0
 23447  004E70  0E02               	movlw	2
 23448  004E72                     L40:
 23449  004E72  2783               	addwf	sprintf@ap& (0+255),f,b
 23450                           
 23451                           ; BSR set to: 0
 23452                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 23453  004E74  AF8B               	btfss	(sprintf@_val+3)& (0+255),7,b
 23454  004E76  D01F               	goto	l16766
 23455                           
 23456                           ; BSR set to: 0
 23457                           ;doprnt.c: 1269: flag |= 0x03;
 23458  004E78  0E03               	movlw	3
 23459  004E7A  138D               	iorwf	sprintf@flag& (0+255),f,b
 23460                           
 23461                           ; BSR set to: 0
 23462                           ;doprnt.c: 1270: _val._val = -_val._val;
 23463  004E7C  1F8B               	comf	(sprintf@_val+3)& (0+255),f,b
 23464  004E7E  1F8A               	comf	(sprintf@_val+2)& (0+255),f,b
 23465  004E80  1F89               	comf	(sprintf@_val+1)& (0+255),f,b
 23466  004E82  6D88               	negf	sprintf@_val& (0+255),b
 23467  004E84  0E00               	movlw	0
 23468  004E86  2389               	addwfc	(sprintf@_val+1)& (0+255),f,b
 23469  004E88  238A               	addwfc	(sprintf@_val+2)& (0+255),f,b
 23470  004E8A  238B               	addwfc	(sprintf@_val+3)& (0+255),f,b
 23471  004E8C  D014               	goto	l16766
 23472  004E8E                     l1769:
 23473                           
 23474                           ; BSR set to: 0
 23475                           ;doprnt.c: 1275: else
 23476                           ;doprnt.c: 1280: {
 23477                           ;doprnt.c: 1288: if(flag & 0x10)
 23478  004E8E  A98D               	btfss	sprintf@flag& (0+255),4,b
 23479  004E90  D003               	goto	l16762
 23480                           
 23481                           ; BSR set to: 0
 23482                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 23483  004E92  5183               	movf	sprintf@ap& (0+255),w,b
 23484                           
 23485                           ; BSR set to: 0
 23486  004E94  DA27               	call	PL54	;call to abstracted procedure
 23487  004E96  D00E               	goto	L41
 23488  004E98                     l16762:
 23489                           
 23490                           ; BSR set to: 0
 23491                           ;doprnt.c: 1290: else
 23492                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 23493  004E98  5183               	movf	sprintf@ap& (0+255),w,b
 23494  004E9A  6ED9               	movwf	fsr2l,c
 23495  004E9C  6ADA               	clrf	fsr2h,c
 23496  004E9E  CFDE F079          	movff	postinc2,??_sprintf
 23497  004EA2  CFDD F07A          	movff	postdec2,??_sprintf+1
 23498  004EA6  C079  F088         	movff	??_sprintf,sprintf@_val
 23499  004EAA  C07A  F089         	movff	??_sprintf+1,sprintf@_val+1
 23500  004EAE  6B8A               	clrf	(sprintf@_val+2)& (0+255),b
 23501  004EB0  6B8B               	clrf	(sprintf@_val+3)& (0+255),b
 23502                           
 23503                           ; BSR set to: 0
 23504  004EB2  0E02               	movlw	2
 23505  004EB4                     L41:
 23506  004EB4  2783               	addwf	sprintf@ap& (0+255),f,b
 23507  004EB6                     l16766:
 23508                           
 23509                           ; BSR set to: 0
 23510                           ;doprnt.c: 1294: }
 23511                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 23512  004EB6  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 23513  004EB8  1184               	iorwf	sprintf@prec& (0+255),w,b
 23514  004EBA  E15C               	bnz	l16816
 23515                           
 23516                           ; BSR set to: 0
 23517  004EBC  518B               	movf	(sprintf@_val+3)& (0+255),w,b
 23518  004EBE  1188               	iorwf	sprintf@_val& (0+255),w,b
 23519  004EC0  1189               	iorwf	(sprintf@_val+1)& (0+255),w,b
 23520  004EC2  118A               	iorwf	(sprintf@_val+2)& (0+255),w,b
 23521  004EC4  E157               	bnz	l16816
 23522                           
 23523                           ; BSR set to: 0
 23524                           ;doprnt.c: 1298: prec++;
 23525  004EC6  4B84               	infsnz	sprintf@prec& (0+255),f,b
 23526  004EC8  2B85               	incf	(sprintf@prec+1)& (0+255),f,b
 23527  004ECA  D054               	goto	l16816
 23528  004ECC                     l16772:
 23529                           
 23530                           ; BSR set to: 0
 23531                           ;doprnt.c: 1309: case 0xC0:
 23532                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23533  004ECC  0E01               	movlw	1
 23534  004ECE  6F8C               	movwf	sprintf@c& (0+255),b
 23535  004ED0                     l16774:
 23536                           
 23537                           ; BSR set to: 0
 23538  004ED0  518C               	movf	sprintf@c& (0+255),w,b
 23539  004ED2  0A0A               	xorlw	10
 23540  004ED4  E058               	bz	l16818
 23541                           
 23542                           ; BSR set to: 0
 23543                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 23544  004ED6  518C               	movf	sprintf@c& (0+255),w,b
 23545  004ED8  0D04               	mullw	4
 23546  004EDA  0E6C               	movlw	low _dpowers
 23547  004EDC  24F3               	addwf	prodl,w,c
 23548  004EDE  6EF6               	movwf	tblptrl,c
 23549  004EE0  0E6B               	movlw	high _dpowers
 23550  004EE2  20F4               	addwfc	prodh,w,c
 23551  004EE4  6EF7               	movwf	tblptrh,c
 23552  004EE6  0009               	tblrd		*+
 23553  004EE8  50F5               	movf	tablat,w,c
 23554  004EEA  5D88               	subwf	sprintf@_val& (0+255),w,b
 23555  004EEC  0009               	tblrd		*+
 23556  004EEE  50F5               	movf	tablat,w,c
 23557  004EF0  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
 23558  004EF2  0009               	tblrd		*+
 23559  004EF4  50F5               	movf	tablat,w,c
 23560  004EF6  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
 23561  004EF8  0009               	tblrd		*+
 23562  004EFA  50F5               	movf	tablat,w,c
 23563  004EFC  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
 23564  004EFE  E343               	bnc	l16818
 23565                           
 23566                           ; BSR set to: 0
 23567  004F00  2B8C               	incf	sprintf@c& (0+255),f,b
 23568  004F02  D7E6               	goto	l16774
 23569  004F04                     l16786:
 23570                           
 23571                           ; BSR set to: 0
 23572                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 23573  004F04  0E01               	movlw	1
 23574  004F06  6F8C               	movwf	sprintf@c& (0+255),b
 23575  004F08                     l16788:
 23576                           
 23577                           ; BSR set to: 0
 23578  004F08  518C               	movf	sprintf@c& (0+255),w,b
 23579  004F0A  0A08               	xorlw	8
 23580  004F0C  E03C               	bz	l16818
 23581                           
 23582                           ; BSR set to: 0
 23583                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 23584  004F0E  518C               	movf	sprintf@c& (0+255),w,b
 23585  004F10  0D04               	mullw	4
 23586  004F12  0E94               	movlw	low _hexpowers
 23587  004F14  24F3               	addwf	prodl,w,c
 23588  004F16  6EF6               	movwf	tblptrl,c
 23589  004F18  0E6B               	movlw	high _hexpowers
 23590  004F1A  20F4               	addwfc	prodh,w,c
 23591  004F1C  6EF7               	movwf	tblptrh,c
 23592  004F1E  0009               	tblrd		*+
 23593  004F20  50F5               	movf	tablat,w,c
 23594  004F22  5D88               	subwf	sprintf@_val& (0+255),w,b
 23595  004F24  0009               	tblrd		*+
 23596  004F26  50F5               	movf	tablat,w,c
 23597  004F28  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
 23598  004F2A  0009               	tblrd		*+
 23599  004F2C  50F5               	movf	tablat,w,c
 23600  004F2E  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
 23601  004F30  0009               	tblrd		*+
 23602  004F32  50F5               	movf	tablat,w,c
 23603  004F34  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
 23604  004F36  E327               	bnc	l16818
 23605                           
 23606                           ; BSR set to: 0
 23607  004F38  2B8C               	incf	sprintf@c& (0+255),f,b
 23608  004F3A  D7E6               	goto	l16788
 23609  004F3C                     l16800:
 23610                           
 23611                           ; BSR set to: 0
 23612                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 23613  004F3C  0E01               	movlw	1
 23614  004F3E  6F8C               	movwf	sprintf@c& (0+255),b
 23615  004F40                     l16802:
 23616                           
 23617                           ; BSR set to: 0
 23618  004F40  518C               	movf	sprintf@c& (0+255),w,b
 23619  004F42  0A0C               	xorlw	12
 23620  004F44  E020               	bz	l16818
 23621                           
 23622                           ; BSR set to: 0
 23623                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 23624  004F46  518C               	movf	sprintf@c& (0+255),w,b
 23625  004F48  0D04               	mullw	4
 23626  004F4A  0E3C               	movlw	low _octpowers
 23627  004F4C  24F3               	addwf	prodl,w,c
 23628  004F4E  6EF6               	movwf	tblptrl,c
 23629  004F50  0E6B               	movlw	high _octpowers
 23630  004F52  20F4               	addwfc	prodh,w,c
 23631  004F54  6EF7               	movwf	tblptrh,c
 23632  004F56  0009               	tblrd		*+
 23633  004F58  50F5               	movf	tablat,w,c
 23634  004F5A  5D88               	subwf	sprintf@_val& (0+255),w,b
 23635  004F5C  0009               	tblrd		*+
 23636  004F5E  50F5               	movf	tablat,w,c
 23637  004F60  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
 23638  004F62  0009               	tblrd		*+
 23639  004F64  50F5               	movf	tablat,w,c
 23640  004F66  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
 23641  004F68  0009               	tblrd		*+
 23642  004F6A  50F5               	movf	tablat,w,c
 23643  004F6C  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
 23644  004F6E  E30B               	bnc	l16818
 23645                           
 23646                           ; BSR set to: 0
 23647  004F70  2B8C               	incf	sprintf@c& (0+255),f,b
 23648  004F72  D7E6               	goto	l16802
 23649  004F74                     l16816:
 23650                           
 23651                           ; BSR set to: 0
 23652  004F74  518D               	movf	sprintf@flag& (0+255),w,b
 23653  004F76  0BC0               	andlw	192
 23654                           
 23655                           ; Switch size 1, requested type "space"
 23656                           ; Number of cases is 4, Range of values is 0 to 192
 23657                           ; switch strategies available:
 23658                           ; Name         Instructions Cycles
 23659                           ; simple_byte           13     7 (average)
 23660                           ;	Chosen strategy is simple_byte
 23661  004F78  E0A9               	bz	l16772
 23662  004F7A  0A40               	xorlw	64	; case 64
 23663  004F7C  E0DF               	bz	l16800
 23664  004F7E  0AC0               	xorlw	192	; case 128
 23665  004F80  E0C1               	bz	l16786
 23666  004F82  0A40               	xorlw	64	; case 192
 23667  004F84  E0A3               	bz	l16772
 23668  004F86                     l16818:
 23669                           
 23670                           ; BSR set to: 0
 23671                           ;doprnt.c: 1346: if(c < prec)
 23672  004F86  0E80               	movlw	128
 23673  004F88  BF8C               	btfsc	sprintf@c& (0+255),7,b
 23674  004F8A  0E7F               	movlw	127
 23675  004F8C  6F79               	movwf	??_sprintf& (0+255),b
 23676  004F8E  5184               	movf	sprintf@prec& (0+255),w,b
 23677  004F90  5D8C               	subwf	sprintf@c& (0+255),w,b
 23678  004F92  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 23679  004F94  0A80               	xorlw	128
 23680  004F96  5979               	subwfb	??_sprintf& (0+255),w,b
 23681  004F98  E203               	bc	l16822
 23682                           
 23683                           ; BSR set to: 0
 23684                           ;doprnt.c: 1347: c = prec;
 23685  004F9A  C084  F08C         	movff	sprintf@prec,sprintf@c
 23686  004F9E  D00F               	goto	l16826
 23687  004FA0                     l16822:
 23688                           
 23689                           ; BSR set to: 0
 23690                           ;doprnt.c: 1348: else if(prec < c)
 23691  004FA0  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 23692  004FA2  0A80               	xorlw	128
 23693  004FA4  6F79               	movwf	??_sprintf& (0+255),b
 23694  004FA6  518C               	movf	sprintf@c& (0+255),w,b
 23695  004FA8  5D84               	subwf	sprintf@prec& (0+255),w,b
 23696  004FAA  0E80               	movlw	128
 23697  004FAC  BF8C               	btfsc	sprintf@c& (0+255),7,b
 23698  004FAE  0E7F               	movlw	127
 23699  004FB0  5979               	subwfb	??_sprintf& (0+255),w,b
 23700  004FB2  E205               	bc	l16826
 23701                           
 23702                           ; BSR set to: 0
 23703                           ;doprnt.c: 1349: prec = c;
 23704  004FB4  518C               	movf	sprintf@c& (0+255),w,b
 23705  004FB6  6F84               	movwf	sprintf@prec& (0+255),b
 23706  004FB8  6B85               	clrf	(sprintf@prec+1)& (0+255),b
 23707  004FBA  BF84               	btfsc	sprintf@prec& (0+255),7,b
 23708  004FBC  0785               	decf	(sprintf@prec+1)& (0+255),f,b
 23709  004FBE                     l16826:
 23710                           
 23711                           ; BSR set to: 0
 23712                           ;doprnt.c: 1352: if(width && flag & 0x03)
 23713  004FBE  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23714  004FC0  1186               	iorwf	sprintf@width& (0+255),w,b
 23715  004FC2  E006               	bz	l16832
 23716                           
 23717                           ; BSR set to: 0
 23718  004FC4  518D               	movf	sprintf@flag& (0+255),w,b
 23719  004FC6  0B03               	andlw	3
 23720  004FC8  E003               	bz	l16832
 23721                           
 23722                           ; BSR set to: 0
 23723                           ;doprnt.c: 1353: width--;
 23724  004FCA  0786               	decf	sprintf@width& (0+255),f,b
 23725  004FCC  A0D8               	btfss	status,0,c
 23726  004FCE  0787               	decf	(sprintf@width+1)& (0+255),f,b
 23727  004FD0                     l16832:
 23728                           
 23729                           ; BSR set to: 0
 23730                           ;doprnt.c: 1355: if(flag & 0x4000) {
 23731  004FD0  AD8E               	btfss	(sprintf@flag+1)& (0+255),6,b
 23732  004FD2  D010               	goto	l16838
 23733                           
 23734                           ; BSR set to: 0
 23735                           ;doprnt.c: 1356: if(width > prec)
 23736  004FD4  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 23737  004FD6  0A80               	xorlw	128
 23738  004FD8  6F79               	movwf	??_sprintf& (0+255),b
 23739  004FDA  5186               	movf	sprintf@width& (0+255),w,b
 23740  004FDC  5D84               	subwf	sprintf@prec& (0+255),w,b
 23741  004FDE  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23742  004FE0  0A80               	xorlw	128
 23743  004FE2  5979               	subwfb	??_sprintf& (0+255),w,b
 23744  004FE4  E205               	bc	l1797
 23745                           
 23746                           ; BSR set to: 0
 23747                           ;doprnt.c: 1357: width -= prec;
 23748  004FE6  5184               	movf	sprintf@prec& (0+255),w,b
 23749  004FE8  5F86               	subwf	sprintf@width& (0+255),f,b
 23750  004FEA  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 23751  004FEC  5B87               	subwfb	(sprintf@width+1)& (0+255),f,b
 23752  004FEE  D002               	goto	l16838
 23753  004FF0                     l1797:
 23754                           
 23755                           ; BSR set to: 0
 23756                           ;doprnt.c: 1358: else
 23757                           ;doprnt.c: 1359: width = 0;
 23758  004FF0  6B86               	clrf	sprintf@width& (0+255),b
 23759  004FF2  6B87               	clrf	(sprintf@width+1)& (0+255),b
 23760  004FF4                     l16838:
 23761                           
 23762                           ; BSR set to: 0
 23763                           ;doprnt.c: 1360: }
 23764                           ;doprnt.c: 1364: if((flag & (
 23765                           ;doprnt.c: 1366: 0x04|
 23766                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 23767  004FF4  0EC4               	movlw	196
 23768  004FF6  D94E               	call	PL18	;call to abstracted procedure
 23769  004FF8  0E40               	movlw	64
 23770  004FFA  B4D8               	btfsc	status,2,c
 23771  004FFC  1979               	xorwf	??_sprintf& (0+255),w,b
 23772  004FFE  E107               	bnz	l16844
 23773                           
 23774                           ; BSR set to: 0
 23775                           ;doprnt.c: 1369: if(width)
 23776  005000  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23777  005002  1186               	iorwf	sprintf@width& (0+255),w,b
 23778  005004  E018               	bz	l16850
 23779                           
 23780                           ; BSR set to: 0
 23781                           ;doprnt.c: 1370: width--;
 23782  005006  0786               	decf	sprintf@width& (0+255),f,b
 23783  005008  A0D8               	btfss	status,0,c
 23784  00500A  0787               	decf	(sprintf@width+1)& (0+255),f,b
 23785  00500C  D014               	goto	l16850
 23786  00500E                     l16844:
 23787                           
 23788                           ; BSR set to: 0
 23789                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23790  00500E  0EC0               	movlw	192
 23791  005010  D941               	call	PL18	;call to abstracted procedure
 23792  005012  0E80               	movlw	128
 23793  005014  B4D8               	btfsc	status,2,c
 23794  005016  1979               	xorwf	??_sprintf& (0+255),w,b
 23795  005018  E10E               	bnz	l16850
 23796                           
 23797                           ; BSR set to: 0
 23798                           ;doprnt.c: 1379: if(width > 2)
 23799  00501A  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23800  00501C  0A80               	xorlw	128
 23801  00501E  0F80               	addlw	-128
 23802  005020  0E03               	movlw	3
 23803  005022  B4D8               	btfsc	status,2,c
 23804  005024  5D86               	subwf	sprintf@width& (0+255),w,b
 23805  005026  E305               	bnc	l1803
 23806                           
 23807                           ; BSR set to: 0
 23808                           ;doprnt.c: 1380: width -= 2;
 23809  005028  0EFE               	movlw	254
 23810  00502A  2786               	addwf	sprintf@width& (0+255),f,b
 23811  00502C  0EFF               	movlw	255
 23812  00502E  2387               	addwfc	(sprintf@width+1)& (0+255),f,b
 23813  005030  D002               	goto	l16850
 23814  005032                     l1803:
 23815                           
 23816                           ; BSR set to: 0
 23817                           ;doprnt.c: 1381: else
 23818                           ;doprnt.c: 1382: width = 0;
 23819  005032  6B86               	clrf	sprintf@width& (0+255),b
 23820  005034  6B87               	clrf	(sprintf@width+1)& (0+255),b
 23821  005036                     l16850:
 23822                           
 23823                           ; BSR set to: 0
 23824                           ;doprnt.c: 1383: }
 23825                           ;doprnt.c: 1388: if(width > c)
 23826  005036  0E80               	movlw	128
 23827  005038  BF8C               	btfsc	sprintf@c& (0+255),7,b
 23828  00503A  0E7F               	movlw	127
 23829  00503C  6F79               	movwf	??_sprintf& (0+255),b
 23830  00503E  5186               	movf	sprintf@width& (0+255),w,b
 23831  005040  5D8C               	subwf	sprintf@c& (0+255),w,b
 23832  005042  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23833  005044  0A80               	xorlw	128
 23834  005046  5979               	subwfb	??_sprintf& (0+255),w,b
 23835  005048  E207               	bc	l1805
 23836                           
 23837                           ; BSR set to: 0
 23838                           ;doprnt.c: 1389: width -= c;
 23839  00504A  518C               	movf	sprintf@c& (0+255),w,b
 23840  00504C  5F86               	subwf	sprintf@width& (0+255),f,b
 23841  00504E  0E00               	movlw	0
 23842  005050  BF8C               	btfsc	sprintf@c& (0+255),7,b
 23843  005052  0EFF               	movlw	255
 23844  005054  5B87               	subwfb	(sprintf@width+1)& (0+255),f,b
 23845  005056  D002               	goto	l1806
 23846  005058                     l1805:
 23847                           
 23848                           ; BSR set to: 0
 23849                           ;doprnt.c: 1390: else
 23850                           ;doprnt.c: 1391: width = 0;
 23851  005058  6B86               	clrf	sprintf@width& (0+255),b
 23852  00505A  6B87               	clrf	(sprintf@width+1)& (0+255),b
 23853  00505C                     l1806:
 23854                           
 23855                           ; BSR set to: 0
 23856                           ;doprnt.c: 1394: if(flag & 0x04) {
 23857  00505C  A58D               	btfss	sprintf@flag& (0+255),2,b
 23858  00505E  D03C               	goto	l16888
 23859                           
 23860                           ; BSR set to: 0
 23861                           ;doprnt.c: 1399: if(flag & 0x03)
 23862  005060  518D               	movf	sprintf@flag& (0+255),w,b
 23863  005062  0B03               	andlw	3
 23864  005064  E009               	bz	l1808
 23865                           
 23866                           ; BSR set to: 0
 23867                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 23868  005066  C071  FFD9         	movff	sprintf@sp,fsr2l
 23869  00506A  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 23870  00506E  0E2D               	movlw	45
 23871  005070  6EDF               	movwf	indf2,c
 23872  005072                     l16858:
 23873                           
 23874                           ; BSR set to: 0
 23875  005072  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23876  005074  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23877  005076  D022               	goto	l16880
 23878  005078                     l1808:
 23879                           
 23880                           ; BSR set to: 0
 23881                           ;doprnt.c: 1403: else
 23882                           ;doprnt.c: 1406: if(flag & 0x01)
 23883  005078  A18D               	btfss	sprintf@flag& (0+255),0,b
 23884  00507A  D006               	goto	l16864
 23885                           
 23886                           ; BSR set to: 0
 23887                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 23888  00507C  C071  FFD9         	movff	sprintf@sp,fsr2l
 23889  005080  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 23890  005084  0E20               	movlw	32
 23891  005086  D7F4               	goto	L42
 23892  005088                     l16864:
 23893                           
 23894                           ; BSR set to: 0
 23895                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23896  005088  0EC0               	movlw	192
 23897  00508A  D904               	call	PL18	;call to abstracted procedure
 23898  00508C  0E80               	movlw	128
 23899  00508E  B4D8               	btfsc	status,2,c
 23900  005090  1979               	xorwf	??_sprintf& (0+255),w,b
 23901  005092  E114               	bnz	l16880
 23902                           
 23903                           ; BSR set to: 0
 23904                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 23905  005094  C071  FFD9         	movff	sprintf@sp,fsr2l
 23906  005098  D94A               	call	PL102	;call to abstracted procedure
 23907                           
 23908                           ; BSR set to: 0
 23909  00509A  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23910  00509C  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23911                           
 23912                           ; BSR set to: 0
 23913                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23914  00509E  BB8D               	btfsc	sprintf@flag& (0+255),5,b
 23915  0050A0  D003               	goto	l16874
 23916                           
 23917                           ; BSR set to: 0
 23918  0050A2  6B7E               	clrf	(_sprintf$2168+1)& (0+255),b
 23919  0050A4  0E78               	movlw	120
 23920  0050A6  D002               	goto	L43
 23921  0050A8                     l16874:
 23922                           
 23923                           ; BSR set to: 0
 23924  0050A8  6B7E               	clrf	(_sprintf$2168+1)& (0+255),b
 23925  0050AA  0E58               	movlw	88
 23926  0050AC                     L43:
 23927  0050AC  6F7D               	movwf	_sprintf$2168& (0+255),b
 23928                           
 23929                           ; BSR set to: 0
 23930  0050AE  C071  FFD9         	movff	sprintf@sp,fsr2l
 23931  0050B2  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 23932  0050B6  C07D  FFDF         	movff	_sprintf$2168,indf2
 23933  0050BA  D7DB               	goto	l16858
 23934  0050BC                     l16880:
 23935                           
 23936                           ; BSR set to: 0
 23937                           ;doprnt.c: 1419: }
 23938                           ;doprnt.c: 1422: if(width)
 23939  0050BC  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23940  0050BE  1186               	iorwf	sprintf@width& (0+255),w,b
 23941  0050C0  E101 D0B9          	bz	l16952
 23942                           
 23943                           ; BSR set to: 0
 23944                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 23945  0050C4  C071  FFD9         	movff	sprintf@sp,fsr2l
 23946  0050C8  D932               	call	PL102	;call to abstracted procedure
 23947                           
 23948                           ; BSR set to: 0
 23949  0050CA  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23950  0050CC  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23951                           
 23952                           ; BSR set to: 0
 23953                           ;doprnt.c: 1425: while(--width);
 23954  0050CE  0786               	decf	sprintf@width& (0+255),f,b
 23955  0050D0  A0D8               	btfss	status,0,c
 23956  0050D2  0787               	decf	(sprintf@width+1)& (0+255),f,b
 23957  0050D4  0100               	movlb	0	; () banked
 23958  0050D6  D7F2               	goto	l16880
 23959  0050D8                     l16888:
 23960                           
 23961                           ; BSR set to: 0
 23962                           ;doprnt.c: 1429: {
 23963                           ;doprnt.c: 1431: if(width
 23964                           ;doprnt.c: 1433: && !(flag & 0x08)
 23965                           ;doprnt.c: 1435: )
 23966  0050D8  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23967  0050DA  1186               	iorwf	sprintf@width& (0+255),w,b
 23968  0050DC  A4D8               	btfss	status,2,c
 23969                           
 23970                           ; BSR set to: 0
 23971  0050DE  B78D               	btfsc	sprintf@flag& (0+255),3,b
 23972  0050E0  D004               	goto	l16898
 23973  0050E2                     l16892:
 23974                           
 23975                           ; BSR set to: 0
 23976                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23977  0050E2  C071  FFD9         	movff	sprintf@sp,fsr2l
 23978                           
 23979                           ; BSR set to: 0
 23980                           
 23981                           ; BSR set to: 0
 23982                           ;doprnt.c: 1438: while(--width);
 23983  0050E6  D8F1               	call	PL48	;call to abstracted procedure
 23984  0050E8  E1FC               	bnz	l16892
 23985  0050EA                     l16898:
 23986                           
 23987                           ; BSR set to: 0
 23988                           ;doprnt.c: 1445: if(flag & 0x03)
 23989  0050EA  518D               	movf	sprintf@flag& (0+255),w,b
 23990  0050EC  0B03               	andlw	3
 23991  0050EE  E009               	bz	l1824
 23992                           
 23993                           ; BSR set to: 0
 23994                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23995  0050F0  C071  FFD9         	movff	sprintf@sp,fsr2l
 23996  0050F4  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 23997  0050F8  0E2D               	movlw	45
 23998  0050FA  6EDF               	movwf	indf2,c
 23999                           
 24000                           ; BSR set to: 0
 24001  0050FC  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24002  0050FE  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24003  005100  D008               	goto	l16908
 24004  005102                     l1824:
 24005                           
 24006                           ; BSR set to: 0
 24007                           ;doprnt.c: 1450: else if(flag & 0x01)
 24008  005102  A18D               	btfss	sprintf@flag& (0+255),0,b
 24009  005104  D006               	goto	l16908
 24010                           
 24011                           ; BSR set to: 0
 24012                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 24013  005106  C071  FFD9         	movff	sprintf@sp,fsr2l
 24014  00510A  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24015  00510E  0E20               	movlw	32
 24016  005110  D7F4               	goto	L44
 24017  005112                     l16908:
 24018                           
 24019                           ; BSR set to: 0
 24020                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 24021  005112  0EC0               	movlw	192
 24022  005114  D8BF               	call	PL18	;call to abstracted procedure
 24023  005116  0E40               	movlw	64
 24024  005118  B4D8               	btfsc	status,2,c
 24025  00511A  1979               	xorwf	??_sprintf& (0+255),w,b
 24026  00511C  E106               	bnz	l16914
 24027                           
 24028                           ; BSR set to: 0
 24029                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 24030  00511E  C071  FFD9         	movff	sprintf@sp,fsr2l
 24031  005122  D905               	call	PL102	;call to abstracted procedure
 24032  005124                     l16912:
 24033                           
 24034                           ; BSR set to: 0
 24035  005124  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24036  005126  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24037  005128  D086               	goto	l16952
 24038  00512A                     l16914:
 24039                           
 24040                           ; BSR set to: 0
 24041                           ;doprnt.c: 1457: else
 24042                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 24043  00512A  0EC0               	movlw	192
 24044  00512C  D8B3               	call	PL18	;call to abstracted procedure
 24045  00512E  0E80               	movlw	128
 24046  005130  B4D8               	btfsc	status,2,c
 24047  005132  1979               	xorwf	??_sprintf& (0+255),w,b
 24048  005134  E001 D07F          	bnz	l16952
 24049                           
 24050                           ; BSR set to: 0
 24051                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 24052  005138  C071  FFD9         	movff	sprintf@sp,fsr2l
 24053  00513C  D8F8               	call	PL102	;call to abstracted procedure
 24054                           
 24055                           ; BSR set to: 0
 24056  00513E  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24057  005140  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24058                           
 24059                           ; BSR set to: 0
 24060                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 24061  005142  BB8D               	btfsc	sprintf@flag& (0+255),5,b
 24062  005144  D003               	goto	l16924
 24063                           
 24064                           ; BSR set to: 0
 24065  005146  6B80               	clrf	(_sprintf$2169+1)& (0+255),b
 24066  005148  0E78               	movlw	120
 24067  00514A  D002               	goto	L45
 24068  00514C                     l16924:
 24069                           
 24070                           ; BSR set to: 0
 24071  00514C  6B80               	clrf	(_sprintf$2169+1)& (0+255),b
 24072  00514E  0E58               	movlw	88
 24073  005150                     L45:
 24074  005150  6F7F               	movwf	_sprintf$2169& (0+255),b
 24075                           
 24076                           ; BSR set to: 0
 24077  005152  C071  FFD9         	movff	sprintf@sp,fsr2l
 24078  005156  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24079  00515A  C07F  FFDF         	movff	_sprintf$2169,indf2
 24080  00515E  D7E2               	goto	l16912
 24081  005160                     l16930:
 24082                           
 24083                           ; BSR set to: 0
 24084                           ;doprnt.c: 1493: case 0xC0:
 24085                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 24086  005160  C084  F079         	movff	sprintf@prec,??_sprintf
 24087  005164  C085  F07A         	movff	sprintf@prec+1,??_sprintf+1
 24088  005168  90D8               	bcf	status,0,c
 24089  00516A  3779               	rlcf	??_sprintf& (0+255),f,b
 24090  00516C  377A               	rlcf	(??_sprintf+1)& (0+255),f,b
 24091  00516E  90D8               	bcf	status,0,c
 24092  005170  3779               	rlcf	??_sprintf& (0+255),f,b
 24093  005172  377A               	rlcf	(??_sprintf+1)& (0+255),f,b
 24094  005174  0E6C               	movlw	low _dpowers
 24095  005176  2579               	addwf	??_sprintf& (0+255),w,b
 24096  005178  6EF6               	movwf	tblptrl,c
 24097  00517A  0E6B               	movlw	high _dpowers
 24098  00517C  D87C               	call	PL10	;call to abstracted procedure
 24099  00517E  C088  F060         	movff	sprintf@_val,?___lldiv
 24100  005182  C089  F061         	movff	sprintf@_val+1,?___lldiv+1
 24101  005186  C08A  F062         	movff	sprintf@_val+2,?___lldiv+2
 24102  00518A  C08B  F063         	movff	sprintf@_val+3,?___lldiv+3
 24103  00518E  ECC2  F00B         	call	___lldiv	;wreg free
 24104  005192  C063  F06B         	movff	?___lldiv+3,?___llmod+3
 24105  005196  C062  F06A         	movff	?___lldiv+2,?___llmod+2
 24106  00519A  C061  F069         	movff	?___lldiv+1,?___llmod+1
 24107  00519E  C060  F068         	movff	?___lldiv,?___llmod
 24108  0051A2  0E0A               	movlw	10
 24109  0051A4  6F6C               	movwf	(?___llmod+4)& (0+255),b
 24110  0051A6  0E00               	movlw	0
 24111  0051A8  6B6D               	clrf	(?___llmod+5)& (0+255),b
 24112  0051AA  6B6E               	clrf	(?___llmod+6)& (0+255),b
 24113  0051AC  6B6F               	clrf	(?___llmod+7)& (0+255),b
 24114  0051AE  ECAF  F00A         	call	___llmod	;wreg free
 24115  0051B2  5168               	movf	?___llmod& (0+255),w,b
 24116  0051B4  D02D               	goto	L46
 24117  0051B6                     l16932:
 24118                           
 24119                           ; BSR set to: 0
 24120                           ;doprnt.c: 1506: {
 24121                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 24122  0051B6  D876               	call	PL24	;call to abstracted procedure
 24123  0051B8  0E94               	movlw	low _hexpowers
 24124  0051BA  2579               	addwf	??_sprintf& (0+255),w,b
 24125  0051BC  6EF6               	movwf	tblptrl,c
 24126  0051BE  0E6B               	movlw	high _hexpowers
 24127  0051C0  D85A               	call	PL10	;call to abstracted procedure
 24128  0051C2  ECC2  F00B         	call	___lldiv	;wreg free
 24129  0051C6  5160               	movf	?___lldiv& (0+255),w,b
 24130  0051C8  0B0F               	andlw	15
 24131  0051CA  6F7C               	movwf	sprintf@idx& (0+255),b
 24132                           
 24133                           ; BSR set to: 0
 24134                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 24135  0051CC  BB8D               	btfsc	sprintf@flag& (0+255),5,b
 24136  0051CE  D004               	goto	l16938
 24137                           
 24138                           ; BSR set to: 0
 24139  0051D0  0E7A               	movlw	high STR_307
 24140  0051D2  6F82               	movwf	(_sprintf$2175+1)& (0+255),b
 24141  0051D4  0EC2               	movlw	low STR_307
 24142  0051D6  D003               	goto	L47
 24143  0051D8                     l16938:
 24144                           
 24145                           ; BSR set to: 0
 24146  0051D8  0E7A               	movlw	high STR_306
 24147  0051DA  6F82               	movwf	(_sprintf$2175+1)& (0+255),b
 24148  0051DC  0EB1               	movlw	low STR_306
 24149  0051DE                     L47:
 24150  0051DE  6F81               	movwf	_sprintf$2175& (0+255),b
 24151                           
 24152                           ; BSR set to: 0
 24153  0051E0  517C               	movf	sprintf@idx& (0+255),w,b
 24154  0051E2  2581               	addwf	_sprintf$2175& (0+255),w,b
 24155  0051E4  6F79               	movwf	??_sprintf& (0+255),b
 24156  0051E6  0E00               	movlw	0
 24157  0051E8  2182               	addwfc	(_sprintf$2175+1)& (0+255),w,b
 24158  0051EA  6F7A               	movwf	(??_sprintf+1)& (0+255),b
 24159  0051EC  C079  FFF6         	movff	??_sprintf,tblptrl
 24160  0051F0  C07A  FFF7         	movff	??_sprintf+1,tblptrh
 24161  0051F4  0008               	tblrd		*
 24162  0051F6  CFF5 F08C          	movff	tablat,sprintf@c
 24163                           
 24164                           ;doprnt.c: 1515: }
 24165                           ;doprnt.c: 1517: break;
 24166  0051FA  D016               	goto	l16948
 24167  0051FC                     l16942:
 24168                           
 24169                           ; BSR set to: 0
 24170                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 24171  0051FC  D853               	call	PL24	;call to abstracted procedure
 24172  0051FE  0E3C               	movlw	low _octpowers
 24173  005200  2579               	addwf	??_sprintf& (0+255),w,b
 24174  005202  6EF6               	movwf	tblptrl,c
 24175  005204  0E6B               	movlw	high _octpowers
 24176  005206  D837               	call	PL10	;call to abstracted procedure
 24177  005208  ECC2  F00B         	call	___lldiv	;wreg free
 24178  00520C  5160               	movf	?___lldiv& (0+255),w,b
 24179  00520E  0B07               	andlw	7
 24180  005210                     L46:
 24181  005210  0F30               	addlw	48
 24182  005212  6F8C               	movwf	sprintf@c& (0+255),b
 24183                           
 24184                           ;doprnt.c: 1527: break;
 24185  005214  D009               	goto	l16948
 24186  005216                     l16946:
 24187                           
 24188                           ; BSR set to: 0
 24189  005216  518D               	movf	sprintf@flag& (0+255),w,b
 24190  005218  0BC0               	andlw	192
 24191                           
 24192                           ; Switch size 1, requested type "space"
 24193                           ; Number of cases is 4, Range of values is 0 to 192
 24194                           ; switch strategies available:
 24195                           ; Name         Instructions Cycles
 24196                           ; simple_byte           13     7 (average)
 24197                           ;	Chosen strategy is simple_byte
 24198  00521A  E0A2               	bz	l16930
 24199  00521C  0A40               	xorlw	64	; case 64
 24200  00521E  E0EE               	bz	l16942
 24201  005220  0AC0               	xorlw	192	; case 128
 24202  005222  E0C9               	bz	l16932
 24203  005224  0A40               	xorlw	64	; case 192
 24204  005226  E09C               	bz	l16930
 24205  005228                     l16948:
 24206                           
 24207                           ; BSR set to: 0
 24208                           ;doprnt.c: 1531: ((*sp++ = (c)));
 24209  005228  C071  FFD9         	movff	sprintf@sp,fsr2l
 24210  00522C  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24211  005230  C08C  FFDF         	movff	sprintf@c,indf2
 24212  005234  D777               	goto	l16912
 24213  005236                     l16952:
 24214                           
 24215                           ; BSR set to: 0
 24216  005236  0784               	decf	sprintf@prec& (0+255),f,b
 24217  005238  A0D8               	btfss	status,0,c
 24218  00523A  0785               	decf	(sprintf@prec+1)& (0+255),f,b
 24219  00523C  0100               	movlb	0	; () banked
 24220  00523E  2984               	incf	sprintf@prec& (0+255),w,b
 24221  005240  B4D8               	btfsc	status,2,c
 24222  005242  2985               	incf	(sprintf@prec+1)& (0+255),w,b
 24223  005244  E1E8               	bnz	l16946
 24224                           
 24225                           ; BSR set to: 0
 24226                           ;doprnt.c: 1532: }
 24227                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 24228  005246  A78D               	btfss	sprintf@flag& (0+255),3,b
 24229  005248  D00B               	goto	l16962
 24230                           
 24231                           ; BSR set to: 0
 24232  00524A  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24233  00524C  0A80               	xorlw	128
 24234  00524E  0F80               	addlw	-128
 24235  005250  0E01               	movlw	1
 24236  005252  B4D8               	btfsc	status,2,c
 24237  005254  5D86               	subwf	sprintf@width& (0+255),w,b
 24238  005256  E304               	bnc	l16962
 24239  005258                     l16956:
 24240                           
 24241                           ; BSR set to: 0
 24242                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 24243  005258  C071  FFD9         	movff	sprintf@sp,fsr2l
 24244                           
 24245                           ; BSR set to: 0
 24246                           
 24247                           ; BSR set to: 0
 24248                           ;doprnt.c: 1538: while(--width);
 24249  00525C  D836               	call	PL48	;call to abstracted procedure
 24250  00525E  E1FC               	bnz	l16956
 24251  005260                     l16962:
 24252                           
 24253                           ; BSR set to: 0
 24254  005260  D853               	call	PL72	;call to abstracted procedure
 24255  005262  0100               	movlb	0	; () banked
 24256  005264  678C               	tstfsz	sprintf@c& (0+255),b
 24257  005266  D4CA               	goto	l16628
 24258  005268                     l16964:
 24259                           
 24260                           ; BSR set to: 0
 24261                           ;doprnt.c: 1545: *sp = 0;
 24262  005268  C071  FFD9         	movff	sprintf@sp,fsr2l
 24263  00526C  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24264  005270  0E00               	movlw	0
 24265  005272  6EDF               	movwf	indf2,c
 24266                           
 24267                           ; BSR set to: 0
 24268  005274  0C00               	retlw	0
 24269  005276                     __end_of_sprintf:
 24270                           	opt stack 0
 24271  005276                     PL10:
 24272                           	opt stack 24
 24273  005276  217A               	addwfc	(??_sprintf+1)& (0+255),w,b
 24274  005278  6EF7               	movwf	tblptrh,c
 24275  00527A  0009               	tblrd		*+
 24276  00527C  CFF5 F064          	movff	tablat,?___lldiv+4
 24277  005280  0009               	tblrd		*+
 24278  005282  CFF5 F065          	movff	tablat,?___lldiv+5
 24279  005286  0009               	tblrd		*+
 24280  005288  CFF5 F066          	movff	tablat,?___lldiv+6
 24281  00528C  000A               	tblrd		*-
 24282  00528E  CFF5 F067          	movff	tablat,?___lldiv+7
 24283  005292  0012               	return	
 24284  005294                     __end_ofPL10:
 24285                           	opt stack 0
 24286  005294                     PL18:
 24287                           	opt stack 24
 24288  005294  158D               	andwf	sprintf@flag& (0+255),w,b
 24289  005296  6F79               	movwf	??_sprintf& (0+255),b
 24290  005298  0E08               	movlw	8
 24291  00529A  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
 24292  00529C  6F7A               	movwf	(??_sprintf+1)& (0+255),b
 24293  00529E  517A               	movf	(??_sprintf+1)& (0+255),w,b
 24294  0052A0  0A08               	xorlw	8
 24295  0052A2  0012               	return	
 24296  0052A4                     __end_ofPL18:
 24297                           	opt stack 0
 24298  0052A4                     PL24:
 24299                           	opt stack 24
 24300  0052A4  C088  F060         	movff	sprintf@_val,?___lldiv
 24301  0052A8  C089  F061         	movff	sprintf@_val+1,?___lldiv+1
 24302  0052AC  C08A  F062         	movff	sprintf@_val+2,?___lldiv+2
 24303  0052B0  C08B  F063         	movff	sprintf@_val+3,?___lldiv+3
 24304  0052B4  C084  F079         	movff	sprintf@prec,??_sprintf
 24305  0052B8  C085  F07A         	movff	sprintf@prec+1,??_sprintf+1
 24306  0052BC  90D8               	bcf	status,0,c
 24307  0052BE  3779               	rlcf	??_sprintf& (0+255),f,b
 24308  0052C0  377A               	rlcf	(??_sprintf+1)& (0+255),f,b
 24309  0052C2  90D8               	bcf	status,0,c
 24310  0052C4  3779               	rlcf	??_sprintf& (0+255),f,b
 24311  0052C6  377A               	rlcf	(??_sprintf+1)& (0+255),f,b
 24312  0052C8  0012               	return	
 24313  0052CA                     __end_ofPL24:
 24314                           	opt stack 0
 24315  0052CA                     PL48:
 24316                           	opt stack 24
 24317  0052CA  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24318  0052CE  0E20               	movlw	32
 24319  0052D0  6EDF               	movwf	indf2,c
 24320  0052D2  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24321  0052D4  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24322  0052D6  0786               	decf	sprintf@width& (0+255),f,b
 24323  0052D8  A0D8               	btfss	status,0,c
 24324  0052DA  0787               	decf	(sprintf@width+1)& (0+255),f,b
 24325  0052DC  0100               	movlb	0	; () banked
 24326  0052DE  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24327  0052E0  1186               	iorwf	sprintf@width& (0+255),w,b
 24328  0052E2  0012               	return	
 24329  0052E4                     __end_ofPL48:
 24330                           	opt stack 0
 24331  0052E4                     PL54:
 24332                           	opt stack 24
 24333  0052E4  6ED9               	movwf	fsr2l,c
 24334  0052E6  6ADA               	clrf	fsr2h,c
 24335  0052E8  CFDE F088          	movff	postinc2,sprintf@_val
 24336  0052EC  CFDE F089          	movff	postinc2,sprintf@_val+1
 24337  0052F0  CFDE F08A          	movff	postinc2,sprintf@_val+2
 24338  0052F4  CFDE F08B          	movff	postinc2,sprintf@_val+3
 24339  0052F8  0C04               	retlw	4
 24340  0052FA                     __end_ofPL54:
 24341                           	opt stack 0
 24342  0052FA                     PL66:
 24343                           	opt stack 24
 24344  0052FA  C071  FFD9         	movff	sprintf@sp,fsr2l
 24345  0052FE  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24346  005302  0E20               	movlw	32
 24347  005304  6EDF               	movwf	indf2,c
 24348  005306  0C20               	retlw	32
 24349  005308                     __end_ofPL66:
 24350                           	opt stack 0
 24351  005308                     PL72:
 24352                           	opt stack 24
 24353  005308  C073  FFF6         	movff	sprintf@f,tblptrl
 24354  00530C  C074  FFF7         	movff	sprintf@f+1,tblptrh
 24355  005310  4B73               	infsnz	sprintf@f& (0+255),f,b
 24356  005312  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 24357  005314  0008               	tblrd		*
 24358  005316  CFF5 F08C          	movff	tablat,sprintf@c
 24359  00531A  0012               	return	
 24360  00531C                     __end_ofPL72:
 24361                           	opt stack 0
 24362  00531C                     PL96:
 24363                           	opt stack 24
 24364  00531C  4B73               	infsnz	sprintf@f& (0+255),f,b
 24365  00531E  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 24366  005320  C073  FFF6         	movff	sprintf@f,tblptrl
 24367  005324  C074  FFF7         	movff	sprintf@f+1,tblptrh
 24368  005328  0008               	tblrd		*
 24369  00532A  50F5               	movf	tablat,w,c
 24370  00532C  0012               	return	
 24371  00532E                     __end_ofPL96:
 24372                           	opt stack 0
 24373  00532E                     PL102:
 24374                           	opt stack 24
 24375  00532E  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24376  005332  0E30               	movlw	48
 24377  005334  6EDF               	movwf	indf2,c
 24378  005336  0C30               	retlw	48
 24379  005338                     __end_ofPL102:
 24380                           	opt stack 0
 24381  005338                     PL130:
 24382                           	opt stack 24
 24383  005338  A0D8               	btfss	status,0,c
 24384  00533A  0787               	decf	(sprintf@width+1)& (0+255),f,b
 24385  00533C  0100               	movlb	0	; () banked
 24386  00533E  2986               	incf	sprintf@width& (0+255),w,b
 24387  005340  0012               	return	
 24388  005342                     __end_ofPL130:
 24389                           	opt stack 0
 24390                           tblptru	equ	0xFF8
 24391                           tblptrh	equ	0xFF7
 24392                           tblptrl	equ	0xFF6
 24393                           tablat	equ	0xFF5
 24394                           prodh	equ	0xFF4
 24395                           prodl	equ	0xFF3
 24396                           intcon	equ	0xFF2
 24397                           indf0	equ	0xFEF
 24398                           postinc0	equ	0xFEE
 24399                           fsr0h	equ	0xFEA
 24400                           fsr0l	equ	0xFE9
 24401                           wreg	equ	0xFE8
 24402                           indf1	equ	0xFE7
 24403                           postinc1	equ	0xFE6
 24404                           postdec1	equ	0xFE5
 24405                           fsr1h	equ	0xFE2
 24406                           fsr1l	equ	0xFE1
 24407                           indf2	equ	0xFDF
 24408                           postinc2	equ	0xFDE
 24409                           postdec2	equ	0xFDD
 24410                           plusw2	equ	0xFDB
 24411                           fsr2h	equ	0xFDA
 24412                           fsr2l	equ	0xFD9
 24413                           status	equ	0xFD8
 24414                           
 24415 ;; *************** function ___wmul *****************
 24416 ;; Defined at:
 24417 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 24418 ;; Parameters:    Size  Location     Type
 24419 ;;  multiplier      2    0[BANK0 ] unsigned int 
 24420 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 24421 ;; Auto vars:     Size  Location     Type
 24422 ;;  product         2    4[BANK0 ] unsigned int 
 24423 ;; Return value:  Size  Location     Type
 24424 ;;                  2    0[BANK0 ] unsigned int 
 24425 ;; Registers used:
 24426 ;;		wreg, status,2, status,0, prodl, prodh
 24427 ;; Tracked objects:
 24428 ;;		On entry : F/0
 24429 ;;		On exit  : F/0
 24430 ;;		Unchanged: 0/0
 24431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24432 ;;      Params:         0       4       0       0       0       0       0
 24433 ;;      Locals:         0       2       0       0       0       0       0
 24434 ;;      Temps:          0       0       0       0       0       0       0
 24435 ;;      Totals:         0       6       0       0       0       0       0
 24436 ;;Total ram usage:        6 bytes
 24437 ;; Hardware stack levels used:    1
 24438 ;; Hardware stack levels required when called:    3
 24439 ;; This function calls:
 24440 ;;		Nothing
 24441 ;; This function is called by:
 24442 ;;		_receivePrintEventVerbose
 24443 ;;		_sprintf
 24444 ;;		_atoi
 24445 ;; This function uses a non-reentrant model
 24446 ;;
 24447                           
 24448                           	psect	text57
 24449  000F40                     __ptext57:
 24450                           	opt stack 0
 24451  000F40                     ___wmul:
 24452                           	opt stack 24
 24453                           
 24454                           ; BSR set to: 0
 24455                           
 24456                           ; BSR set to: 0
 24457                           ;incstack = 0
 24458                           ;incstack = 0
 24459  000F40  5160               	movf	___wmul@multiplier& (0+255),w,b
 24460  000F42  0362               	mulwf	___wmul@multiplicand& (0+255),b
 24461  000F44  CFF3 F064          	movff	prodl,___wmul@product
 24462  000F48  CFF4 F065          	movff	prodh,___wmul@product+1
 24463  000F4C  5160               	movf	___wmul@multiplier& (0+255),w,b
 24464  000F4E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 24465  000F50  D808               	call	PL106	;call to abstracted procedure
 24466  000F52  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 24467  000F54  0362               	mulwf	___wmul@multiplicand& (0+255),b
 24468  000F56  D805               	call	PL106	;call to abstracted procedure
 24469                           
 24470                           ; BSR set to: 0
 24471  000F58  C064  F060         	movff	___wmul@product,?___wmul
 24472  000F5C  C065  F061         	movff	___wmul@product+1,?___wmul+1
 24473                           
 24474                           ; BSR set to: 0
 24475  000F60  0012               	return	
 24476  000F62                     __end_of___wmul:
 24477                           	opt stack 0
 24478  000F62                     PL106:
 24479                           	opt stack 24
 24480  000F62  CFF3 FFF4          	movff	prodl,prodh
 24481  000F66  6AF3               	clrf	prodl,c
 24482  000F68  50F3               	movf	prodl,w,c
 24483  000F6A  2764               	addwf	___wmul@product& (0+255),f,b
 24484  000F6C  50F4               	movf	prodh,w,c
 24485  000F6E  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 24486  000F70  0012               	return	
 24487  000F72                     __end_ofPL106:
 24488                           	opt stack 0
 24489                           tblptru	equ	0xFF8
 24490                           tblptrh	equ	0xFF7
 24491                           tblptrl	equ	0xFF6
 24492                           tablat	equ	0xFF5
 24493                           prodh	equ	0xFF4
 24494                           prodl	equ	0xFF3
 24495                           intcon	equ	0xFF2
 24496                           indf0	equ	0xFEF
 24497                           postinc0	equ	0xFEE
 24498                           fsr0h	equ	0xFEA
 24499                           fsr0l	equ	0xFE9
 24500                           wreg	equ	0xFE8
 24501                           indf1	equ	0xFE7
 24502                           postinc1	equ	0xFE6
 24503                           postdec1	equ	0xFE5
 24504                           fsr1h	equ	0xFE2
 24505                           fsr1l	equ	0xFE1
 24506                           indf2	equ	0xFDF
 24507                           postinc2	equ	0xFDE
 24508                           postdec2	equ	0xFDD
 24509                           plusw2	equ	0xFDB
 24510                           fsr2h	equ	0xFDA
 24511                           fsr2l	equ	0xFD9
 24512                           status	equ	0xFD8
 24513                           
 24514 ;; *************** function ___llmod *****************
 24515 ;; Defined at:
 24516 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 24517 ;; Parameters:    Size  Location     Type
 24518 ;;  dividend        4    8[BANK0 ] unsigned long 
 24519 ;;  divisor         4   12[BANK0 ] unsigned long 
 24520 ;; Auto vars:     Size  Location     Type
 24521 ;;  counter         1   16[BANK0 ] unsigned char 
 24522 ;; Return value:  Size  Location     Type
 24523 ;;                  4    8[BANK0 ] unsigned long 
 24524 ;; Registers used:
 24525 ;;		wreg, status,2, status,0
 24526 ;; Tracked objects:
 24527 ;;		On entry : F/0
 24528 ;;		On exit  : F/0
 24529 ;;		Unchanged: 0/0
 24530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24531 ;;      Params:         0       8       0       0       0       0       0
 24532 ;;      Locals:         0       1       0       0       0       0       0
 24533 ;;      Temps:          0       0       0       0       0       0       0
 24534 ;;      Totals:         0       9       0       0       0       0       0
 24535 ;;Total ram usage:        9 bytes
 24536 ;; Hardware stack levels used:    1
 24537 ;; Hardware stack levels required when called:    3
 24538 ;; This function calls:
 24539 ;;		Nothing
 24540 ;; This function is called by:
 24541 ;;		_sprintf
 24542 ;;		_ultoa
 24543 ;; This function uses a non-reentrant model
 24544 ;;
 24545                           
 24546                           	psect	text58
 24547  00155E                     __ptext58:
 24548                           	opt stack 0
 24549  00155E                     ___llmod:
 24550                           	opt stack 23
 24551                           
 24552                           ; BSR set to: 0
 24553                           
 24554                           ; BSR set to: 0
 24555                           ;incstack = 0
 24556                           ;incstack = 0
 24557  00155E  516F               	movf	(___llmod@divisor+3)& (0+255),w,b
 24558  001560  116C               	iorwf	___llmod@divisor& (0+255),w,b
 24559  001562  116D               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 24560  001564  116E               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 24561  001566  E023               	bz	l2505
 24562                           
 24563                           ; BSR set to: 0
 24564  001568  0E01               	movlw	1
 24565  00156A  6F70               	movwf	___llmod@counter& (0+255),b
 24566  00156C  D006               	goto	l17754
 24567  00156E                     l17752:
 24568                           
 24569                           ; BSR set to: 0
 24570  00156E  90D8               	bcf	status,0,c
 24571  001570  376C               	rlcf	___llmod@divisor& (0+255),f,b
 24572  001572  376D               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 24573  001574  376E               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 24574  001576  376F               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 24575  001578  2B70               	incf	___llmod@counter& (0+255),f,b
 24576  00157A                     l17754:
 24577                           
 24578                           ; BSR set to: 0
 24579  00157A  AF6F               	btfss	(___llmod@divisor+3)& (0+255),7,b
 24580  00157C  D7F8               	goto	l17752
 24581  00157E                     l17756:
 24582                           
 24583                           ; BSR set to: 0
 24584  00157E  516C               	movf	___llmod@divisor& (0+255),w,b
 24585  001580  5D68               	subwf	___llmod@dividend& (0+255),w,b
 24586  001582  516D               	movf	(___llmod@divisor+1)& (0+255),w,b
 24587  001584  5969               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 24588  001586  516E               	movf	(___llmod@divisor+2)& (0+255),w,b
 24589  001588  596A               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 24590  00158A  516F               	movf	(___llmod@divisor+3)& (0+255),w,b
 24591  00158C  596B               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 24592  00158E  E308               	bnc	l17760
 24593                           
 24594                           ; BSR set to: 0
 24595  001590  516C               	movf	___llmod@divisor& (0+255),w,b
 24596  001592  5F68               	subwf	___llmod@dividend& (0+255),f,b
 24597  001594  516D               	movf	(___llmod@divisor+1)& (0+255),w,b
 24598  001596  5B69               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 24599  001598  516E               	movf	(___llmod@divisor+2)& (0+255),w,b
 24600  00159A  5B6A               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 24601  00159C  516F               	movf	(___llmod@divisor+3)& (0+255),w,b
 24602  00159E  5B6B               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 24603  0015A0                     l17760:
 24604                           
 24605                           ; BSR set to: 0
 24606  0015A0  90D8               	bcf	status,0,c
 24607  0015A2  336F               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 24608  0015A4  336E               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 24609  0015A6  336D               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 24610  0015A8  336C               	rrcf	___llmod@divisor& (0+255),f,b
 24611                           
 24612                           ; BSR set to: 0
 24613  0015AA  2F70               	decfsz	___llmod@counter& (0+255),f,b
 24614  0015AC  D7E8               	goto	l17756
 24615  0015AE                     l2505:
 24616                           
 24617                           ; BSR set to: 0
 24618  0015AE  C068  F068         	movff	___llmod@dividend,?___llmod
 24619  0015B2  C069  F069         	movff	___llmod@dividend+1,?___llmod+1
 24620  0015B6  C06A  F06A         	movff	___llmod@dividend+2,?___llmod+2
 24621  0015BA  C06B  F06B         	movff	___llmod@dividend+3,?___llmod+3
 24622                           
 24623                           ; BSR set to: 0
 24624  0015BE  0012               	return	
 24625  0015C0                     __end_of___llmod:
 24626                           	opt stack 0
 24627                           tblptru	equ	0xFF8
 24628                           tblptrh	equ	0xFF7
 24629                           tblptrl	equ	0xFF6
 24630                           tablat	equ	0xFF5
 24631                           prodh	equ	0xFF4
 24632                           prodl	equ	0xFF3
 24633                           intcon	equ	0xFF2
 24634                           indf0	equ	0xFEF
 24635                           postinc0	equ	0xFEE
 24636                           fsr0h	equ	0xFEA
 24637                           fsr0l	equ	0xFE9
 24638                           wreg	equ	0xFE8
 24639                           indf1	equ	0xFE7
 24640                           postinc1	equ	0xFE6
 24641                           postdec1	equ	0xFE5
 24642                           fsr1h	equ	0xFE2
 24643                           fsr1l	equ	0xFE1
 24644                           indf2	equ	0xFDF
 24645                           postinc2	equ	0xFDE
 24646                           postdec2	equ	0xFDD
 24647                           plusw2	equ	0xFDB
 24648                           fsr2h	equ	0xFDA
 24649                           fsr2l	equ	0xFD9
 24650                           status	equ	0xFD8
 24651                           
 24652 ;; *************** function ___lldiv *****************
 24653 ;; Defined at:
 24654 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 24655 ;; Parameters:    Size  Location     Type
 24656 ;;  dividend        4    0[BANK0 ] unsigned long 
 24657 ;;  divisor         4    4[BANK0 ] unsigned long 
 24658 ;; Auto vars:     Size  Location     Type
 24659 ;;  quotient        4   30[COMRAM] unsigned long 
 24660 ;;  counter         1   34[COMRAM] unsigned char 
 24661 ;; Return value:  Size  Location     Type
 24662 ;;                  4    0[BANK0 ] unsigned long 
 24663 ;; Registers used:
 24664 ;;		wreg, status,2, status,0
 24665 ;; Tracked objects:
 24666 ;;		On entry : F/0
 24667 ;;		On exit  : F/0
 24668 ;;		Unchanged: 0/0
 24669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24670 ;;      Params:         0       8       0       0       0       0       0
 24671 ;;      Locals:         5       0       0       0       0       0       0
 24672 ;;      Temps:          0       0       0       0       0       0       0
 24673 ;;      Totals:         5       8       0       0       0       0       0
 24674 ;;Total ram usage:       13 bytes
 24675 ;; Hardware stack levels used:    1
 24676 ;; Hardware stack levels required when called:    3
 24677 ;; This function calls:
 24678 ;;		Nothing
 24679 ;; This function is called by:
 24680 ;;		_sprintf
 24681 ;;		_ultoa
 24682 ;; This function uses a non-reentrant model
 24683 ;;
 24684                           
 24685                           	psect	text59
 24686  001784                     __ptext59:
 24687                           	opt stack 0
 24688  001784                     ___lldiv:
 24689                           	opt stack 23
 24690                           
 24691                           ; BSR set to: 0
 24692                           
 24693                           ; BSR set to: 0
 24694                           ;incstack = 0
 24695                           ;incstack = 0
 24696  001784  6A1F               	clrf	___lldiv@quotient,c
 24697  001786  6A20               	clrf	___lldiv@quotient+1,c
 24698  001788  6A21               	clrf	___lldiv@quotient+2,c
 24699  00178A  6A22               	clrf	___lldiv@quotient+3,c
 24700                           
 24701                           ; BSR set to: 0
 24702  00178C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24703  00178E  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 24704  001790  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 24705  001792  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 24706  001794  E029               	bz	l2495
 24707                           
 24708                           ; BSR set to: 0
 24709  001796  0E01               	movlw	1
 24710  001798  6E23               	movwf	___lldiv@counter,c
 24711  00179A  D006               	goto	l14312
 24712  00179C                     l14310:
 24713                           
 24714                           ; BSR set to: 0
 24715  00179C  90D8               	bcf	status,0,c
 24716  00179E  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 24717  0017A0  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 24718  0017A2  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 24719  0017A4  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 24720  0017A6  2A23               	incf	___lldiv@counter,f,c
 24721  0017A8                     l14312:
 24722                           
 24723                           ; BSR set to: 0
 24724  0017A8  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 24725  0017AA  D7F8               	goto	l14310
 24726  0017AC                     l14314:
 24727                           
 24728                           ; BSR set to: 0
 24729  0017AC  90D8               	bcf	status,0,c
 24730  0017AE  361F               	rlcf	___lldiv@quotient,f,c
 24731  0017B0  3620               	rlcf	___lldiv@quotient+1,f,c
 24732  0017B2  3621               	rlcf	___lldiv@quotient+2,f,c
 24733  0017B4  3622               	rlcf	___lldiv@quotient+3,f,c
 24734                           
 24735                           ; BSR set to: 0
 24736  0017B6  5164               	movf	___lldiv@divisor& (0+255),w,b
 24737  0017B8  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 24738  0017BA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24739  0017BC  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 24740  0017BE  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24741  0017C0  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 24742  0017C2  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24743  0017C4  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 24744  0017C6  E309               	bnc	l14322
 24745                           
 24746                           ; BSR set to: 0
 24747  0017C8  5164               	movf	___lldiv@divisor& (0+255),w,b
 24748  0017CA  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 24749  0017CC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 24750  0017CE  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 24751  0017D0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 24752  0017D2  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 24753  0017D4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 24754  0017D6  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 24755                           
 24756                           ; BSR set to: 0
 24757  0017D8  801F               	bsf	___lldiv@quotient,0,c
 24758  0017DA                     l14322:
 24759                           
 24760                           ; BSR set to: 0
 24761  0017DA  90D8               	bcf	status,0,c
 24762  0017DC  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 24763  0017DE  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 24764  0017E0  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 24765  0017E2  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 24766                           
 24767                           ; BSR set to: 0
 24768  0017E4  2E23               	decfsz	___lldiv@counter,f,c
 24769  0017E6  D7E2               	goto	l14314
 24770  0017E8                     l2495:
 24771                           
 24772                           ; BSR set to: 0
 24773  0017E8  C01F  F060         	movff	___lldiv@quotient,?___lldiv
 24774  0017EC  C020  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 24775  0017F0  C021  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 24776  0017F4  C022  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 24777                           
 24778                           ; BSR set to: 0
 24779  0017F8  0012               	return	
 24780  0017FA                     __end_of___lldiv:
 24781                           	opt stack 0
 24782                           tblptru	equ	0xFF8
 24783                           tblptrh	equ	0xFF7
 24784                           tblptrl	equ	0xFF6
 24785                           tablat	equ	0xFF5
 24786                           prodh	equ	0xFF4
 24787                           prodl	equ	0xFF3
 24788                           intcon	equ	0xFF2
 24789                           indf0	equ	0xFEF
 24790                           postinc0	equ	0xFEE
 24791                           fsr0h	equ	0xFEA
 24792                           fsr0l	equ	0xFE9
 24793                           wreg	equ	0xFE8
 24794                           indf1	equ	0xFE7
 24795                           postinc1	equ	0xFE6
 24796                           postdec1	equ	0xFE5
 24797                           fsr1h	equ	0xFE2
 24798                           fsr1l	equ	0xFE1
 24799                           indf2	equ	0xFDF
 24800                           postinc2	equ	0xFDE
 24801                           postdec2	equ	0xFDD
 24802                           plusw2	equ	0xFDB
 24803                           fsr2h	equ	0xFDA
 24804                           fsr2l	equ	0xFD9
 24805                           status	equ	0xFD8
 24806                           
 24807 ;; *************** function _isdigit *****************
 24808 ;; Defined at:
 24809 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 24810 ;; Parameters:    Size  Location     Type
 24811 ;;  c               1    wreg     unsigned char 
 24812 ;; Auto vars:     Size  Location     Type
 24813 ;;  c               1   32[COMRAM] unsigned char 
 24814 ;; Return value:  Size  Location     Type
 24815 ;;		None               void
 24816 ;; Registers used:
 24817 ;;		wreg, status,2, status,0
 24818 ;; Tracked objects:
 24819 ;;		On entry : 0/0
 24820 ;;		On exit  : 0/0
 24821 ;;		Unchanged: 0/0
 24822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24823 ;;      Params:         0       0       0       0       0       0       0
 24824 ;;      Locals:         2       0       0       0       0       0       0
 24825 ;;      Temps:          1       0       0       0       0       0       0
 24826 ;;      Totals:         3       0       0       0       0       0       0
 24827 ;;Total ram usage:        3 bytes
 24828 ;; Hardware stack levels used:    1
 24829 ;; Hardware stack levels required when called:    3
 24830 ;; This function calls:
 24831 ;;		Nothing
 24832 ;; This function is called by:
 24833 ;;		_sprintf
 24834 ;;		_atoi
 24835 ;; This function uses a non-reentrant model
 24836 ;;
 24837                           
 24838                           	psect	text60
 24839  000E30                     __ptext60:
 24840                           	opt stack 0
 24841  000E30                     _isdigit:
 24842                           	opt stack 24
 24843                           
 24844                           ; BSR set to: 0
 24845                           ;incstack = 0
 24846                           ;incstack = 0
 24847                           ;isdigit@c stored from wreg
 24848  000E30  CFE8 F021          	movff	wreg,isdigit@c
 24849  000E34  6A20               	clrf	_isdigit$3189,c
 24850  000E36  0E3A               	movlw	58
 24851  000E38  6021               	cpfslt	isdigit@c,c
 24852  000E3A  D005               	goto	l14270
 24853  000E3C  0E2F               	movlw	47
 24854  000E3E  6421               	cpfsgt	isdigit@c,c
 24855  000E40  D002               	goto	l14270
 24856  000E42  0E01               	movlw	1
 24857  000E44  6E20               	movwf	_isdigit$3189,c
 24858  000E46                     l14270:
 24859  000E46  C020  F01F         	movff	_isdigit$3189,??_isdigit
 24860  000E4A  301F               	rrcf	??_isdigit,w,c
 24861  000E4C  0012               	return	
 24862  000E4E                     __end_of_isdigit:
 24863                           	opt stack 0
 24864                           tblptru	equ	0xFF8
 24865                           tblptrh	equ	0xFF7
 24866                           tblptrl	equ	0xFF6
 24867                           tablat	equ	0xFF5
 24868                           prodh	equ	0xFF4
 24869                           prodl	equ	0xFF3
 24870                           intcon	equ	0xFF2
 24871                           indf0	equ	0xFEF
 24872                           postinc0	equ	0xFEE
 24873                           fsr0h	equ	0xFEA
 24874                           fsr0l	equ	0xFE9
 24875                           wreg	equ	0xFE8
 24876                           indf1	equ	0xFE7
 24877                           postinc1	equ	0xFE6
 24878                           postdec1	equ	0xFE5
 24879                           fsr1h	equ	0xFE2
 24880                           fsr1l	equ	0xFE1
 24881                           indf2	equ	0xFDF
 24882                           postinc2	equ	0xFDE
 24883                           postdec2	equ	0xFDD
 24884                           plusw2	equ	0xFDB
 24885                           fsr2h	equ	0xFDA
 24886                           fsr2l	equ	0xFD9
 24887                           status	equ	0xFD8
 24888                           
 24889 ;; *************** function _printFirmwareVersion *****************
 24890 ;; Defined at:
 24891 ;;		line 3099 in file "main.c"
 24892 ;; Parameters:    Size  Location     Type
 24893 ;;		None
 24894 ;; Auto vars:     Size  Location     Type
 24895 ;;  wrkbuf         20   20[BANK0 ] unsigned char [20]
 24896 ;; Return value:  Size  Location     Type
 24897 ;;		None               void
 24898 ;; Registers used:
 24899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24900 ;; Tracked objects:
 24901 ;;		On entry : 0/1
 24902 ;;		On exit  : 0/0
 24903 ;;		Unchanged: 0/0
 24904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24905 ;;      Params:         0       0       0       0       0       0       0
 24906 ;;      Locals:         0      20       0       0       0       0       0
 24907 ;;      Temps:          0       0       0       0       0       0       0
 24908 ;;      Totals:         0      20       0       0       0       0       0
 24909 ;;Total ram usage:       20 bytes
 24910 ;; Hardware stack levels used:    1
 24911 ;; Hardware stack levels required when called:    6
 24912 ;; This function calls:
 24913 ;;		_putsUSART
 24914 ;;		_WriteUSART
 24915 ;;		_itoa
 24916 ;; This function is called by:
 24917 ;;		_main
 24918 ;;		_doModeVerbose
 24919 ;; This function uses a non-reentrant model
 24920 ;;
 24921                           
 24922                           	psect	text61
 24923  00197C                     __ptext61:
 24924                           	opt stack 0
 24925  00197C                     _printFirmwareVersion:
 24926                           	opt stack 22
 24927                           
 24928                           ;main.c: 3100: char wrkbuf[20];
 24929                           ;main.c: 3101: putsUSART((char *) "Version: ");
 24930                           
 24931                           ;incstack = 0
 24932                           ;incstack = 0
 24933  00197C  0E7B               	movlw	high STR_297
 24934  00197E  6E21               	movwf	?_putsUSART+1,c
 24935  001980  0E7F               	movlw	low STR_297
 24936  001982  6E20               	movwf	?_putsUSART,c
 24937  001984  EC74  F009         	call	_putsUSART	;wreg free
 24938                           
 24939                           ;main.c: 3102: itoa(wrkbuf, 1, 10);
 24940  001988  0100               	movlb	0	; () banked
 24941  00198A  D834               	call	PL64	;call to abstracted procedure
 24942  00198C  ECD3  F007         	call	_itoa	;wreg free
 24943                           
 24944                           ; BSR set to: 0
 24945                           ;main.c: 3103: putsUSART(wrkbuf);
 24946  001990  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24947  001992  6E21               	movwf	?_putsUSART+1,c
 24948  001994  0E74               	movlw	low printFirmwareVersion@wrkbuf
 24949  001996  6E20               	movwf	?_putsUSART,c
 24950  001998  EC74  F009         	call	_putsUSART	;wreg free
 24951  00199C                     l1323:
 24952  00199C  A2AC               	btfss	4012,1,c	;volatile
 24953  00199E  D7FE               	goto	l1323
 24954                           
 24955                           ;main.c: 3105: WriteUSART('.');
 24956  0019A0  0E2E               	movlw	46
 24957  0019A2  ECE7  F006         	call	_WriteUSART
 24958                           
 24959                           ;main.c: 3106: itoa(wrkbuf, 1, 10);
 24960  0019A6  0100               	movlb	0	; () banked
 24961  0019A8  D825               	call	PL64	;call to abstracted procedure
 24962  0019AA  ECD3  F007         	call	_itoa	;wreg free
 24963                           
 24964                           ; BSR set to: 0
 24965                           ;main.c: 3107: putsUSART(wrkbuf);
 24966  0019AE  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24967  0019B0  6E21               	movwf	?_putsUSART+1,c
 24968  0019B2  0E74               	movlw	low printFirmwareVersion@wrkbuf
 24969  0019B4  6E20               	movwf	?_putsUSART,c
 24970  0019B6  EC74  F009         	call	_putsUSART	;wreg free
 24971  0019BA                     l1326:
 24972  0019BA  A2AC               	btfss	4012,1,c	;volatile
 24973  0019BC  D7FE               	goto	l1326
 24974                           
 24975                           ;main.c: 3109: WriteUSART('.');
 24976  0019BE  0E2E               	movlw	46
 24977  0019C0  ECE7  F006         	call	_WriteUSART
 24978                           
 24979                           ;main.c: 3110: itoa(wrkbuf, 0, 10);
 24980  0019C4  0100               	movlb	0	; () banked
 24981  0019C6  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24982  0019C8  6F6D               	movwf	(?_itoa+1)& (0+255),b
 24983  0019CA  0E74               	movlw	low printFirmwareVersion@wrkbuf
 24984  0019CC  6F6C               	movwf	?_itoa& (0+255),b
 24985  0019CE  6B6F               	clrf	(?_itoa+3)& (0+255),b
 24986  0019D0  6B6E               	clrf	(?_itoa+2)& (0+255),b
 24987  0019D2  6B71               	clrf	(?_itoa+5)& (0+255),b
 24988  0019D4  0E0A               	movlw	10
 24989  0019D6  6F70               	movwf	(?_itoa+4)& (0+255),b
 24990  0019D8  ECD3  F007         	call	_itoa	;wreg free
 24991                           
 24992                           ; BSR set to: 0
 24993                           ;main.c: 3111: putsUSART(wrkbuf);
 24994  0019DC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24995  0019DE  6E21               	movwf	?_putsUSART+1,c
 24996  0019E0  0E74               	movlw	low printFirmwareVersion@wrkbuf
 24997  0019E2  6E20               	movwf	?_putsUSART,c
 24998  0019E4  EC74  F009         	call	_putsUSART	;wreg free
 24999                           
 25000                           ;main.c: 3112: putsUSART((char *) "\r\n");
 25001  0019E8  0E70               	movlw	high (STR_237+50)
 25002  0019EA  6E21               	movwf	?_putsUSART+1,c
 25003  0019EC  0E5A               	movlw	low (STR_237+50)
 25004  0019EE  6E20               	movwf	?_putsUSART,c
 25005  0019F0  EF74  F009         	goto	_putsUSART	;wreg free
 25006  0019F4                     __end_of_printFirmwareVersion:
 25007                           	opt stack 0
 25008  0019F4                     PL64:
 25009                           	opt stack 22
 25010  0019F4  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25011  0019F6  6F6D               	movwf	(?_itoa+1)& (0+255),b
 25012  0019F8  0E74               	movlw	low printFirmwareVersion@wrkbuf
 25013  0019FA  6F6C               	movwf	?_itoa& (0+255),b
 25014  0019FC  6B6F               	clrf	(?_itoa+3)& (0+255),b
 25015  0019FE  0E01               	movlw	1
 25016  001A00  6F6E               	movwf	(?_itoa+2)& (0+255),b
 25017  001A02  6B71               	clrf	(?_itoa+5)& (0+255),b
 25018  001A04  0E0A               	movlw	10
 25019  001A06  6F70               	movwf	(?_itoa+4)& (0+255),b
 25020  001A08  0C0A               	retlw	10
 25021  001A0A                     __end_ofPL64:
 25022                           	opt stack 0
 25023                           tblptru	equ	0xFF8
 25024                           tblptrh	equ	0xFF7
 25025                           tblptrl	equ	0xFF6
 25026                           tablat	equ	0xFF5
 25027                           prodh	equ	0xFF4
 25028                           prodl	equ	0xFF3
 25029                           intcon	equ	0xFF2
 25030                           indf0	equ	0xFEF
 25031                           postinc0	equ	0xFEE
 25032                           fsr0h	equ	0xFEA
 25033                           fsr0l	equ	0xFE9
 25034                           wreg	equ	0xFE8
 25035                           indf1	equ	0xFE7
 25036                           postinc1	equ	0xFE6
 25037                           postdec1	equ	0xFE5
 25038                           fsr1h	equ	0xFE2
 25039                           fsr1l	equ	0xFE1
 25040                           indf2	equ	0xFDF
 25041                           postinc2	equ	0xFDE
 25042                           postdec2	equ	0xFDD
 25043                           plusw2	equ	0xFDB
 25044                           fsr2h	equ	0xFDA
 25045                           fsr2l	equ	0xFD9
 25046                           status	equ	0xFD8
 25047                           
 25048 ;; *************** function _itoa *****************
 25049 ;; Defined at:
 25050 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 25051 ;; Parameters:    Size  Location     Type
 25052 ;;  buf             2   12[BANK0 ] PTR unsigned char 
 25053 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25054 ;;  val             2   14[BANK0 ] int 
 25055 ;;  base            2   16[BANK0 ] int 
 25056 ;; Auto vars:     Size  Location     Type
 25057 ;;  cp              2    0        PTR unsigned char 
 25058 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25059 ;; Return value:  Size  Location     Type
 25060 ;;                  2   12[BANK0 ] PTR unsigned char 
 25061 ;; Registers used:
 25062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25063 ;; Tracked objects:
 25064 ;;		On entry : F/0
 25065 ;;		On exit  : F/0
 25066 ;;		Unchanged: 0/0
 25067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25068 ;;      Params:         0       6       0       0       0       0       0
 25069 ;;      Locals:         0       2       0       0       0       0       0
 25070 ;;      Temps:          0       0       0       0       0       0       0
 25071 ;;      Totals:         0       8       0       0       0       0       0
 25072 ;;Total ram usage:        8 bytes
 25073 ;; Hardware stack levels used:    1
 25074 ;; Hardware stack levels required when called:    5
 25075 ;; This function calls:
 25076 ;;		_utoa
 25077 ;; This function is called by:
 25078 ;;		_receiveSendEventSLCAN
 25079 ;;		_findNodes
 25080 ;;		_printGUID
 25081 ;;		_printNodeFirmwareVersion
 25082 ;;		_printFirmwareVersion
 25083 ;; This function uses a non-reentrant model
 25084 ;;
 25085                           
 25086                           	psect	text62
 25087  000FA6                     __ptext62:
 25088                           	opt stack 0
 25089  000FA6                     _itoa:
 25090                           	opt stack 22
 25091                           
 25092                           ; BSR set to: 0
 25093                           
 25094                           ;incstack = 0
 25095                           ;incstack = 0
 25096  000FA6  AF6F               	btfss	(itoa@val+1)& (0+255),7,b
 25097  000FA8  D00C               	goto	l14112
 25098                           
 25099                           ; BSR set to: 0
 25100  000FAA  C06C  FFD9         	movff	itoa@buf,fsr2l
 25101  000FAE  C06D  FFDA         	movff	itoa@buf+1,fsr2h
 25102  000FB2  0E2D               	movlw	45
 25103  000FB4  6EDF               	movwf	indf2,c
 25104                           
 25105                           ; BSR set to: 0
 25106  000FB6  4B6C               	infsnz	itoa@buf& (0+255),f,b
 25107  000FB8  2B6D               	incf	(itoa@buf+1)& (0+255),f,b
 25108                           
 25109                           ; BSR set to: 0
 25110  000FBA  6D6E               	negf	itoa@val& (0+255),b
 25111  000FBC  1F6F               	comf	(itoa@val+1)& (0+255),f,b
 25112  000FBE  B0D8               	btfsc	status,0,c
 25113  000FC0  2B6F               	incf	(itoa@val+1)& (0+255),f,b
 25114  000FC2                     l14112:
 25115                           
 25116                           ; BSR set to: 0
 25117  000FC2  C06C  F063         	movff	itoa@buf,?_utoa
 25118  000FC6  C06D  F064         	movff	itoa@buf+1,?_utoa+1
 25119  000FCA  C06E  F065         	movff	itoa@val,?_utoa+2
 25120  000FCE  C06F  F066         	movff	itoa@val+1,?_utoa+3
 25121  000FD2  C070  F067         	movff	itoa@base,?_utoa+4
 25122  000FD6  C071  F068         	movff	itoa@base+1,?_utoa+5
 25123  000FDA  EFE9  F00D         	goto	_utoa	;wreg free
 25124  000FDE                     __end_of_itoa:
 25125                           	opt stack 0
 25126                           tblptru	equ	0xFF8
 25127                           tblptrh	equ	0xFF7
 25128                           tblptrl	equ	0xFF6
 25129                           tablat	equ	0xFF5
 25130                           prodh	equ	0xFF4
 25131                           prodl	equ	0xFF3
 25132                           intcon	equ	0xFF2
 25133                           indf0	equ	0xFEF
 25134                           postinc0	equ	0xFEE
 25135                           fsr0h	equ	0xFEA
 25136                           fsr0l	equ	0xFE9
 25137                           wreg	equ	0xFE8
 25138                           indf1	equ	0xFE7
 25139                           postinc1	equ	0xFE6
 25140                           postdec1	equ	0xFE5
 25141                           fsr1h	equ	0xFE2
 25142                           fsr1l	equ	0xFE1
 25143                           indf2	equ	0xFDF
 25144                           postinc2	equ	0xFDE
 25145                           postdec2	equ	0xFDD
 25146                           plusw2	equ	0xFDB
 25147                           fsr2h	equ	0xFDA
 25148                           fsr2l	equ	0xFD9
 25149                           status	equ	0xFD8
 25150                           
 25151 ;; *************** function _utoa *****************
 25152 ;; Defined at:
 25153 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 25154 ;; Parameters:    Size  Location     Type
 25155 ;;  buf             2    3[BANK0 ] PTR unsigned char 
 25156 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25157 ;;  val             2    5[BANK0 ] unsigned int 
 25158 ;;  base            2    7[BANK0 ] int 
 25159 ;; Auto vars:     Size  Location     Type
 25160 ;;  v               2    9[BANK0 ] unsigned int 
 25161 ;;  c               1   11[BANK0 ] unsigned char 
 25162 ;; Return value:  Size  Location     Type
 25163 ;;                  2    3[BANK0 ] PTR unsigned char 
 25164 ;; Registers used:
 25165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25166 ;; Tracked objects:
 25167 ;;		On entry : F/0
 25168 ;;		On exit  : F/0
 25169 ;;		Unchanged: 0/0
 25170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25171 ;;      Params:         0       6       0       0       0       0       0
 25172 ;;      Locals:         0       3       0       0       0       0       0
 25173 ;;      Temps:          0       0       0       0       0       0       0
 25174 ;;      Totals:         0       9       0       0       0       0       0
 25175 ;;Total ram usage:        9 bytes
 25176 ;; Hardware stack levels used:    1
 25177 ;; Hardware stack levels required when called:    4
 25178 ;; This function calls:
 25179 ;;		___lwdiv
 25180 ;;		___lwmod
 25181 ;; This function is called by:
 25182 ;;		_itoa
 25183 ;; This function uses a non-reentrant model
 25184 ;;
 25185                           
 25186                           	psect	text63
 25187  001BD2                     __ptext63:
 25188                           	opt stack 0
 25189  001BD2                     _utoa:
 25190                           	opt stack 22
 25191                           
 25192                           ; BSR set to: 0
 25193                           
 25194                           ; BSR set to: 0
 25195                           ;incstack = 0
 25196                           ;incstack = 0
 25197  001BD2  C065  F069         	movff	utoa@val,utoa@v
 25198  001BD6  C066  F06A         	movff	utoa@val+1,utoa@v+1
 25199  001BDA                     l14276:
 25200                           
 25201                           ; BSR set to: 0
 25202  001BDA  C069  F01F         	movff	utoa@v,?___lwdiv
 25203  001BDE  C06A  F020         	movff	utoa@v+1,?___lwdiv+1
 25204  001BE2  C067  F021         	movff	utoa@base,?___lwdiv+2
 25205  001BE6  C068  F022         	movff	utoa@base+1,?___lwdiv+3
 25206  001BEA  EC2A  F009         	call	___lwdiv	;wreg free
 25207  001BEE  C01F  F069         	movff	?___lwdiv,utoa@v
 25208  001BF2  C020  F06A         	movff	?___lwdiv+1,utoa@v+1
 25209                           
 25210                           ; BSR set to: 0
 25211  001BF6  4B63               	infsnz	utoa@buf& (0+255),f,b
 25212  001BF8  2B64               	incf	(utoa@buf+1)& (0+255),f,b
 25213                           
 25214                           ; BSR set to: 0
 25215  001BFA  516A               	movf	(utoa@v+1)& (0+255),w,b
 25216  001BFC  1169               	iorwf	utoa@v& (0+255),w,b
 25217  001BFE  E1ED               	bnz	l14276
 25218                           
 25219                           ; BSR set to: 0
 25220  001C00  C063  FFD9         	movff	utoa@buf,fsr2l
 25221  001C04  C064  FFDA         	movff	utoa@buf+1,fsr2h
 25222  001C08  0E00               	movlw	0
 25223  001C0A  6ADF               	clrf	indf2,c
 25224                           
 25225                           ; BSR set to: 0
 25226  001C0C  0763               	decf	utoa@buf& (0+255),f,b
 25227  001C0E  A0D8               	btfss	status,0,c
 25228  001C10  0764               	decf	(utoa@buf+1)& (0+255),f,b
 25229  001C12                     l14286:
 25230                           
 25231                           ; BSR set to: 0
 25232  001C12  C065  F01F         	movff	utoa@val,?___lwmod
 25233  001C16  C066  F020         	movff	utoa@val+1,?___lwmod+1
 25234  001C1A  C067  F021         	movff	utoa@base,?___lwmod+2
 25235  001C1E  C068  F022         	movff	utoa@base+1,?___lwmod+3
 25236  001C22  EC46  F008         	call	___lwmod	;wreg free
 25237  001C26  501F               	movf	?___lwmod,w,c
 25238  001C28  6F6B               	movwf	utoa@c& (0+255),b
 25239                           
 25240                           ; BSR set to: 0
 25241  001C2A  C065  F01F         	movff	utoa@val,?___lwdiv
 25242  001C2E  C066  F020         	movff	utoa@val+1,?___lwdiv+1
 25243  001C32  C067  F021         	movff	utoa@base,?___lwdiv+2
 25244  001C36  C068  F022         	movff	utoa@base+1,?___lwdiv+3
 25245  001C3A  EC2A  F009         	call	___lwdiv	;wreg free
 25246  001C3E  C01F  F065         	movff	?___lwdiv,utoa@val
 25247  001C42  C020  F066         	movff	?___lwdiv+1,utoa@val+1
 25248                           
 25249                           ; BSR set to: 0
 25250  001C46  0E09               	movlw	9
 25251  001C48  656B               	cpfsgt	utoa@c& (0+255),b
 25252  001C4A  D002               	goto	l2464
 25253                           
 25254                           ; BSR set to: 0
 25255  001C4C  0E07               	movlw	7
 25256  001C4E  276B               	addwf	utoa@c& (0+255),f,b
 25257  001C50                     l2464:
 25258                           
 25259                           ; BSR set to: 0
 25260  001C50  0E30               	movlw	48
 25261  001C52  276B               	addwf	utoa@c& (0+255),f,b
 25262                           
 25263                           ; BSR set to: 0
 25264  001C54  C063  FFD9         	movff	utoa@buf,fsr2l
 25265  001C58  C064  FFDA         	movff	utoa@buf+1,fsr2h
 25266  001C5C  C06B  FFDF         	movff	utoa@c,indf2
 25267                           
 25268                           ; BSR set to: 0
 25269  001C60  0763               	decf	utoa@buf& (0+255),f,b
 25270  001C62  A0D8               	btfss	status,0,c
 25271  001C64  0764               	decf	(utoa@buf+1)& (0+255),f,b
 25272                           
 25273                           ; BSR set to: 0
 25274  001C66  5166               	movf	(utoa@val+1)& (0+255),w,b
 25275  001C68  1165               	iorwf	utoa@val& (0+255),w,b
 25276  001C6A  E1D3               	bnz	l14286
 25277                           
 25278                           ; BSR set to: 0
 25279                           ;	Return value of _utoa is never used
 25280  001C6C  4B63               	infsnz	utoa@buf& (0+255),f,b
 25281  001C6E  2B64               	incf	(utoa@buf+1)& (0+255),f,b
 25282                           
 25283                           ; BSR set to: 0
 25284  001C70  0012               	return	
 25285  001C72                     __end_of_utoa:
 25286                           	opt stack 0
 25287                           tblptru	equ	0xFF8
 25288                           tblptrh	equ	0xFF7
 25289                           tblptrl	equ	0xFF6
 25290                           tablat	equ	0xFF5
 25291                           prodh	equ	0xFF4
 25292                           prodl	equ	0xFF3
 25293                           intcon	equ	0xFF2
 25294                           indf0	equ	0xFEF
 25295                           postinc0	equ	0xFEE
 25296                           fsr0h	equ	0xFEA
 25297                           fsr0l	equ	0xFE9
 25298                           wreg	equ	0xFE8
 25299                           indf1	equ	0xFE7
 25300                           postinc1	equ	0xFE6
 25301                           postdec1	equ	0xFE5
 25302                           fsr1h	equ	0xFE2
 25303                           fsr1l	equ	0xFE1
 25304                           indf2	equ	0xFDF
 25305                           postinc2	equ	0xFDE
 25306                           postdec2	equ	0xFDD
 25307                           plusw2	equ	0xFDB
 25308                           fsr2h	equ	0xFDA
 25309                           fsr2l	equ	0xFD9
 25310                           status	equ	0xFD8
 25311                           
 25312 ;; *************** function ___lwmod *****************
 25313 ;; Defined at:
 25314 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 25315 ;; Parameters:    Size  Location     Type
 25316 ;;  dividend        2   30[COMRAM] unsigned int 
 25317 ;;  divisor         2   32[COMRAM] unsigned int 
 25318 ;; Auto vars:     Size  Location     Type
 25319 ;;  counter         1   34[COMRAM] unsigned char 
 25320 ;; Return value:  Size  Location     Type
 25321 ;;                  2   30[COMRAM] unsigned int 
 25322 ;; Registers used:
 25323 ;;		wreg, status,2, status,0
 25324 ;; Tracked objects:
 25325 ;;		On entry : F/0
 25326 ;;		On exit  : F/0
 25327 ;;		Unchanged: F/0
 25328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25329 ;;      Params:         4       0       0       0       0       0       0
 25330 ;;      Locals:         1       0       0       0       0       0       0
 25331 ;;      Temps:          0       0       0       0       0       0       0
 25332 ;;      Totals:         5       0       0       0       0       0       0
 25333 ;;Total ram usage:        5 bytes
 25334 ;; Hardware stack levels used:    1
 25335 ;; Hardware stack levels required when called:    3
 25336 ;; This function calls:
 25337 ;;		Nothing
 25338 ;; This function is called by:
 25339 ;;		_utoa
 25340 ;; This function uses a non-reentrant model
 25341 ;;
 25342                           
 25343                           	psect	text64
 25344  00108C                     __ptext64:
 25345                           	opt stack 0
 25346  00108C                     ___lwmod:
 25347                           	opt stack 22
 25348                           
 25349                           ; BSR set to: 0
 25350                           
 25351                           ; BSR set to: 0
 25352                           ;incstack = 0
 25353                           ;incstack = 0
 25354  00108C  5022               	movf	___lwmod@divisor+1,w,c
 25355  00108E  1021               	iorwf	___lwmod@divisor,w,c
 25356  001090  E017               	bz	l2588
 25357                           
 25358                           ; BSR set to: 0
 25359  001092  0E01               	movlw	1
 25360  001094  6E23               	movwf	___lwmod@counter,c
 25361  001096  D004               	goto	l14370
 25362  001098                     l14368:
 25363                           
 25364                           ; BSR set to: 0
 25365  001098  90D8               	bcf	status,0,c
 25366  00109A  3621               	rlcf	___lwmod@divisor,f,c
 25367  00109C  3622               	rlcf	___lwmod@divisor+1,f,c
 25368  00109E  2A23               	incf	___lwmod@counter,f,c
 25369  0010A0                     l14370:
 25370                           
 25371                           ; BSR set to: 0
 25372  0010A0  AE22               	btfss	___lwmod@divisor+1,7,c
 25373  0010A2  D7FA               	goto	l14368
 25374  0010A4                     l14372:
 25375                           
 25376                           ; BSR set to: 0
 25377  0010A4  5021               	movf	___lwmod@divisor,w,c
 25378  0010A6  5C1F               	subwf	___lwmod@dividend,w,c
 25379  0010A8  5022               	movf	___lwmod@divisor+1,w,c
 25380  0010AA  5820               	subwfb	___lwmod@dividend+1,w,c
 25381  0010AC  E304               	bnc	l14376
 25382                           
 25383                           ; BSR set to: 0
 25384  0010AE  5021               	movf	___lwmod@divisor,w,c
 25385  0010B0  5E1F               	subwf	___lwmod@dividend,f,c
 25386  0010B2  5022               	movf	___lwmod@divisor+1,w,c
 25387  0010B4  5A20               	subwfb	___lwmod@dividend+1,f,c
 25388  0010B6                     l14376:
 25389                           
 25390                           ; BSR set to: 0
 25391  0010B6  90D8               	bcf	status,0,c
 25392  0010B8  3222               	rrcf	___lwmod@divisor+1,f,c
 25393  0010BA  3221               	rrcf	___lwmod@divisor,f,c
 25394                           
 25395                           ; BSR set to: 0
 25396  0010BC  2E23               	decfsz	___lwmod@counter,f,c
 25397  0010BE  D7F2               	goto	l14372
 25398  0010C0                     l2588:
 25399                           
 25400                           ; BSR set to: 0
 25401  0010C0  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
 25402  0010C4  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
 25403                           
 25404                           ; BSR set to: 0
 25405  0010C8  0012               	return	
 25406  0010CA                     __end_of___lwmod:
 25407                           	opt stack 0
 25408                           tblptru	equ	0xFF8
 25409                           tblptrh	equ	0xFF7
 25410                           tblptrl	equ	0xFF6
 25411                           tablat	equ	0xFF5
 25412                           prodh	equ	0xFF4
 25413                           prodl	equ	0xFF3
 25414                           intcon	equ	0xFF2
 25415                           indf0	equ	0xFEF
 25416                           postinc0	equ	0xFEE
 25417                           fsr0h	equ	0xFEA
 25418                           fsr0l	equ	0xFE9
 25419                           wreg	equ	0xFE8
 25420                           indf1	equ	0xFE7
 25421                           postinc1	equ	0xFE6
 25422                           postdec1	equ	0xFE5
 25423                           fsr1h	equ	0xFE2
 25424                           fsr1l	equ	0xFE1
 25425                           indf2	equ	0xFDF
 25426                           postinc2	equ	0xFDE
 25427                           postdec2	equ	0xFDD
 25428                           plusw2	equ	0xFDB
 25429                           fsr2h	equ	0xFDA
 25430                           fsr2l	equ	0xFD9
 25431                           status	equ	0xFD8
 25432                           
 25433 ;; *************** function ___lwdiv *****************
 25434 ;; Defined at:
 25435 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 25436 ;; Parameters:    Size  Location     Type
 25437 ;;  dividend        2   30[COMRAM] unsigned int 
 25438 ;;  divisor         2   32[COMRAM] unsigned int 
 25439 ;; Auto vars:     Size  Location     Type
 25440 ;;  quotient        2    1[BANK0 ] unsigned int 
 25441 ;;  counter         1    0[BANK0 ] unsigned char 
 25442 ;; Return value:  Size  Location     Type
 25443 ;;                  2   30[COMRAM] unsigned int 
 25444 ;; Registers used:
 25445 ;;		wreg, status,2, status,0
 25446 ;; Tracked objects:
 25447 ;;		On entry : F/0
 25448 ;;		On exit  : F/0
 25449 ;;		Unchanged: 0/0
 25450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25451 ;;      Params:         4       0       0       0       0       0       0
 25452 ;;      Locals:         0       3       0       0       0       0       0
 25453 ;;      Temps:          0       0       0       0       0       0       0
 25454 ;;      Totals:         4       3       0       0       0       0       0
 25455 ;;Total ram usage:        7 bytes
 25456 ;; Hardware stack levels used:    1
 25457 ;; Hardware stack levels required when called:    3
 25458 ;; This function calls:
 25459 ;;		Nothing
 25460 ;; This function is called by:
 25461 ;;		_utoa
 25462 ;; This function uses a non-reentrant model
 25463 ;;
 25464                           
 25465                           	psect	text65
 25466  001254                     __ptext65:
 25467                           	opt stack 0
 25468  001254                     ___lwdiv:
 25469                           	opt stack 22
 25470                           
 25471                           ; BSR set to: 0
 25472                           
 25473                           ; BSR set to: 0
 25474                           ;incstack = 0
 25475                           ;incstack = 0
 25476  001254  6B61               	clrf	___lwdiv@quotient& (0+255),b
 25477  001256  6B62               	clrf	(___lwdiv@quotient+1)& (0+255),b
 25478                           
 25479                           ; BSR set to: 0
 25480  001258  5022               	movf	___lwdiv@divisor+1,w,c
 25481  00125A  1021               	iorwf	___lwdiv@divisor,w,c
 25482  00125C  E01B               	bz	l2578
 25483                           
 25484                           ; BSR set to: 0
 25485  00125E  0E01               	movlw	1
 25486  001260  6F60               	movwf	___lwdiv@counter& (0+255),b
 25487  001262  D004               	goto	l14350
 25488  001264                     l14348:
 25489                           
 25490                           ; BSR set to: 0
 25491  001264  90D8               	bcf	status,0,c
 25492  001266  3621               	rlcf	___lwdiv@divisor,f,c
 25493  001268  3622               	rlcf	___lwdiv@divisor+1,f,c
 25494  00126A  2B60               	incf	___lwdiv@counter& (0+255),f,b
 25495  00126C                     l14350:
 25496                           
 25497                           ; BSR set to: 0
 25498  00126C  AE22               	btfss	___lwdiv@divisor+1,7,c
 25499  00126E  D7FA               	goto	l14348
 25500  001270                     l14352:
 25501                           
 25502                           ; BSR set to: 0
 25503  001270  90D8               	bcf	status,0,c
 25504  001272  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
 25505  001274  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 25506                           
 25507                           ; BSR set to: 0
 25508  001276  5021               	movf	___lwdiv@divisor,w,c
 25509  001278  5C1F               	subwf	___lwdiv@dividend,w,c
 25510  00127A  5022               	movf	___lwdiv@divisor+1,w,c
 25511  00127C  5820               	subwfb	___lwdiv@dividend+1,w,c
 25512  00127E  E305               	bnc	l14360
 25513                           
 25514                           ; BSR set to: 0
 25515  001280  5021               	movf	___lwdiv@divisor,w,c
 25516  001282  5E1F               	subwf	___lwdiv@dividend,f,c
 25517  001284  5022               	movf	___lwdiv@divisor+1,w,c
 25518  001286  5A20               	subwfb	___lwdiv@dividend+1,f,c
 25519                           
 25520                           ; BSR set to: 0
 25521  001288  8161               	bsf	___lwdiv@quotient& (0+255),0,b
 25522  00128A                     l14360:
 25523                           
 25524                           ; BSR set to: 0
 25525  00128A  90D8               	bcf	status,0,c
 25526  00128C  3222               	rrcf	___lwdiv@divisor+1,f,c
 25527  00128E  3221               	rrcf	___lwdiv@divisor,f,c
 25528                           
 25529                           ; BSR set to: 0
 25530  001290  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
 25531  001292  D7EE               	goto	l14352
 25532  001294                     l2578:
 25533                           
 25534                           ; BSR set to: 0
 25535  001294  C061  F01F         	movff	___lwdiv@quotient,?___lwdiv
 25536  001298  C062  F020         	movff	___lwdiv@quotient+1,?___lwdiv+1
 25537                           
 25538                           ; BSR set to: 0
 25539  00129C  0012               	return	
 25540  00129E                     __end_of___lwdiv:
 25541                           	opt stack 0
 25542                           tblptru	equ	0xFF8
 25543                           tblptrh	equ	0xFF7
 25544                           tblptrl	equ	0xFF6
 25545                           tablat	equ	0xFF5
 25546                           prodh	equ	0xFF4
 25547                           prodl	equ	0xFF3
 25548                           intcon	equ	0xFF2
 25549                           indf0	equ	0xFEF
 25550                           postinc0	equ	0xFEE
 25551                           fsr0h	equ	0xFEA
 25552                           fsr0l	equ	0xFE9
 25553                           wreg	equ	0xFE8
 25554                           indf1	equ	0xFE7
 25555                           postinc1	equ	0xFE6
 25556                           postdec1	equ	0xFE5
 25557                           fsr1h	equ	0xFE2
 25558                           fsr1l	equ	0xFE1
 25559                           indf2	equ	0xFDF
 25560                           postinc2	equ	0xFDE
 25561                           postdec2	equ	0xFDD
 25562                           plusw2	equ	0xFDB
 25563                           fsr2h	equ	0xFDA
 25564                           fsr2l	equ	0xFD9
 25565                           status	equ	0xFD8
 25566                           
 25567 ;; *************** function _vscp_restoreDefaults *****************
 25568 ;; Defined at:
 25569 ;;		line 3089 in file "main.c"
 25570 ;; Parameters:    Size  Location     Type
 25571 ;;		None
 25572 ;; Auto vars:     Size  Location     Type
 25573 ;;		None
 25574 ;; Return value:  Size  Location     Type
 25575 ;;		None               void
 25576 ;; Registers used:
 25577 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25578 ;; Tracked objects:
 25579 ;;		On entry : 0/1
 25580 ;;		On exit  : 0/0
 25581 ;;		Unchanged: 0/0
 25582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25583 ;;      Params:         0       0       0       0       0       0       0
 25584 ;;      Locals:         0       0       0       0       0       0       0
 25585 ;;      Temps:          0       0       0       0       0       0       0
 25586 ;;      Totals:         0       0       0       0       0       0       0
 25587 ;;Total ram usage:        0 bytes
 25588 ;; Hardware stack levels used:    1
 25589 ;; Hardware stack levels required when called:    6
 25590 ;; This function calls:
 25591 ;;		_init_app_ram
 25592 ;;		_init_app_eeprom
 25593 ;; This function is called by:
 25594 ;;		_main
 25595 ;;		_doModeVerbose
 25596 ;; This function uses a non-reentrant model
 25597 ;;
 25598                           
 25599                           	psect	text66
 25600  000D6C                     __ptext66:
 25601                           	opt stack 0
 25602  000D6C                     _vscp_restoreDefaults:
 25603                           	opt stack 22
 25604                           
 25605                           ;main.c: 3090: init_app_eeprom();
 25606                           
 25607                           ; BSR set to: 0
 25608                           ;incstack = 0
 25609                           ;incstack = 0
 25610  000D6C  EC67  F011         	call	_init_app_eeprom	;wreg free
 25611                           
 25612                           ;main.c: 3091: init_app_ram();
 25613  000D70  EFFF  F01D         	goto	_init_app_ram	;wreg free
 25614  000D74                     __end_of_vscp_restoreDefaults:
 25615                           	opt stack 0
 25616                           tblptru	equ	0xFF8
 25617                           tblptrh	equ	0xFF7
 25618                           tblptrl	equ	0xFF6
 25619                           tablat	equ	0xFF5
 25620                           prodh	equ	0xFF4
 25621                           prodl	equ	0xFF3
 25622                           intcon	equ	0xFF2
 25623                           indf0	equ	0xFEF
 25624                           postinc0	equ	0xFEE
 25625                           fsr0h	equ	0xFEA
 25626                           fsr0l	equ	0xFE9
 25627                           wreg	equ	0xFE8
 25628                           indf1	equ	0xFE7
 25629                           postinc1	equ	0xFE6
 25630                           postdec1	equ	0xFE5
 25631                           fsr1h	equ	0xFE2
 25632                           fsr1l	equ	0xFE1
 25633                           indf2	equ	0xFDF
 25634                           postinc2	equ	0xFDE
 25635                           postdec2	equ	0xFDD
 25636                           plusw2	equ	0xFDB
 25637                           fsr2h	equ	0xFDA
 25638                           fsr2l	equ	0xFD9
 25639                           status	equ	0xFD8
 25640                           
 25641 ;; *************** function _init_app_eeprom *****************
 25642 ;; Defined at:
 25643 ;;		line 559 in file "main.c"
 25644 ;; Parameters:    Size  Location     Type
 25645 ;;		None
 25646 ;; Auto vars:     Size  Location     Type
 25647 ;;  i               1   34[COMRAM] unsigned char 
 25648 ;; Return value:  Size  Location     Type
 25649 ;;		None               void
 25650 ;; Registers used:
 25651 ;;		wreg, status,2, status,0, cstack
 25652 ;; Tracked objects:
 25653 ;;		On entry : 0/1
 25654 ;;		On exit  : 0/0
 25655 ;;		Unchanged: 0/0
 25656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25657 ;;      Params:         0       0       0       0       0       0       0
 25658 ;;      Locals:         1       0       0       0       0       0       0
 25659 ;;      Temps:          0       0       0       0       0       0       0
 25660 ;;      Totals:         1       0       0       0       0       0       0
 25661 ;;Total ram usage:        1 bytes
 25662 ;; Hardware stack levels used:    1
 25663 ;; Hardware stack levels required when called:    4
 25664 ;; This function calls:
 25665 ;;		_Busy_eep
 25666 ;;		_Write_b_eep
 25667 ;; This function is called by:
 25668 ;;		_vscp_restoreDefaults
 25669 ;; This function uses a non-reentrant model
 25670 ;;
 25671                           
 25672                           	psect	text67
 25673  0022CE                     __ptext67:
 25674                           	opt stack 0
 25675  0022CE                     _init_app_eeprom:
 25676                           	opt stack 23
 25677                           
 25678                           ;main.c: 560: uint8_t i;
 25679                           ;main.c: 562: (Busy_eep(), Write_b_eep(0x01,0x55));
 25680                           
 25681                           ;incstack = 0
 25682                           ;incstack = 0
 25683  0022CE  ECB3  F006         	call	_Busy_eep	;wreg free
 25684  0022D2  6A20               	clrf	?_Write_b_eep+1,c
 25685  0022D4  0E01               	movlw	1
 25686  0022D6  6E1F               	movwf	?_Write_b_eep,c
 25687  0022D8  0E55               	movlw	85
 25688  0022DA  6E21               	movwf	?_Write_b_eep+2,c
 25689  0022DC  ECB9  F007         	call	_Write_b_eep	;wreg free
 25690                           
 25691                           ;main.c: 563: (Busy_eep(), Write_b_eep(0x02,0xAA));
 25692  0022E0  ECB3  F006         	call	_Busy_eep	;wreg free
 25693  0022E4  6A20               	clrf	?_Write_b_eep+1,c
 25694  0022E6  0E02               	movlw	2
 25695  0022E8  6E1F               	movwf	?_Write_b_eep,c
 25696  0022EA  0EAA               	movlw	170
 25697  0022EC  6E21               	movwf	?_Write_b_eep+2,c
 25698  0022EE  ECB9  F007         	call	_Write_b_eep	;wreg free
 25699                           
 25700                           ;main.c: 564: (Busy_eep(), Write_b_eep(0x03,0));
 25701  0022F2  ECB3  F006         	call	_Busy_eep	;wreg free
 25702  0022F6  6A20               	clrf	?_Write_b_eep+1,c
 25703  0022F8  0E03               	movlw	3
 25704  0022FA  6E1F               	movwf	?_Write_b_eep,c
 25705  0022FC  0E00               	movlw	0
 25706  0022FE  6A21               	clrf	?_Write_b_eep+2,c
 25707  002300  ECB9  F007         	call	_Write_b_eep	;wreg free
 25708                           
 25709                           ;main.c: 565: (Busy_eep(), Write_b_eep(0x05,0));
 25710  002304  ECB3  F006         	call	_Busy_eep	;wreg free
 25711  002308  6A20               	clrf	?_Write_b_eep+1,c
 25712  00230A  0E05               	movlw	5
 25713  00230C  6E1F               	movwf	?_Write_b_eep,c
 25714  00230E  0E00               	movlw	0
 25715  002310  6A21               	clrf	?_Write_b_eep+2,c
 25716  002312  ECB9  F007         	call	_Write_b_eep	;wreg free
 25717                           
 25718                           ;main.c: 566: (Busy_eep(), Write_b_eep(0x06,0));
 25719  002316  ECB3  F006         	call	_Busy_eep	;wreg free
 25720  00231A  6A20               	clrf	?_Write_b_eep+1,c
 25721  00231C  0E06               	movlw	6
 25722  00231E  6E1F               	movwf	?_Write_b_eep,c
 25723  002320  0E00               	movlw	0
 25724  002322  6A21               	clrf	?_Write_b_eep+2,c
 25725  002324  ECB9  F007         	call	_Write_b_eep	;wreg free
 25726                           
 25727                           ;main.c: 567: (Busy_eep(), Write_b_eep(0x09,20u));
 25728  002328  ECB3  F006         	call	_Busy_eep	;wreg free
 25729  00232C  6A20               	clrf	?_Write_b_eep+1,c
 25730  00232E  0E09               	movlw	9
 25731  002330  6E1F               	movwf	?_Write_b_eep,c
 25732  002332  0E14               	movlw	20
 25733  002334  6E21               	movwf	?_Write_b_eep+2,c
 25734  002336  ECB9  F007         	call	_Write_b_eep	;wreg free
 25735                           
 25736                           ;main.c: 570: for ( i = 0x20; i < (0x5C + 4); i++ ) {
 25737  00233A  0E20               	movlw	32
 25738  00233C  6E23               	movwf	init_app_eeprom@i,c
 25739  00233E                     l16098:
 25740                           
 25741                           ;main.c: 571: (Busy_eep(), Write_b_eep(0x20,0xFF));
 25742  00233E  ECB3  F006         	call	_Busy_eep	;wreg free
 25743  002342  6A20               	clrf	?_Write_b_eep+1,c
 25744  002344  0E20               	movlw	32
 25745  002346  6E1F               	movwf	?_Write_b_eep,c
 25746  002348  0EFF               	movlw	255
 25747  00234A  6821               	setf	?_Write_b_eep+2,c
 25748  00234C  ECB9  F007         	call	_Write_b_eep	;wreg free
 25749  002350  2A23               	incf	init_app_eeprom@i,f,c
 25750  002352  0E5F               	movlw	95
 25751  002354  6423               	cpfsgt	init_app_eeprom@i,c
 25752  002356  D7F3               	goto	l16098
 25753                           
 25754                           ;main.c: 572: }
 25755                           ;main.c: 575: for (i = 0x60; i < (0x64 + 4); i++) {
 25756  002358  0E60               	movlw	96
 25757  00235A  6E23               	movwf	init_app_eeprom@i,c
 25758  00235C                     l16112:
 25759                           
 25760                           ;main.c: 576: (Busy_eep(), Write_b_eep(0x60,0x00));
 25761  00235C  ECB3  F006         	call	_Busy_eep	;wreg free
 25762  002360  6A20               	clrf	?_Write_b_eep+1,c
 25763  002362  0E60               	movlw	96
 25764  002364  6E1F               	movwf	?_Write_b_eep,c
 25765  002366  0E00               	movlw	0
 25766  002368  6A21               	clrf	?_Write_b_eep+2,c
 25767  00236A  ECB9  F007         	call	_Write_b_eep	;wreg free
 25768  00236E  2A23               	incf	init_app_eeprom@i,f,c
 25769  002370  0E67               	movlw	103
 25770  002372  6423               	cpfsgt	init_app_eeprom@i,c
 25771  002374  D7F3               	goto	l16112
 25772                           
 25773                           ;main.c: 577: }
 25774                           ;main.c: 579: (Busy_eep(), Write_b_eep(0x65,0));
 25775  002376  ECB3  F006         	call	_Busy_eep	;wreg free
 25776  00237A  6A20               	clrf	?_Write_b_eep+1,c
 25777  00237C  0E65               	movlw	101
 25778  00237E  6E1F               	movwf	?_Write_b_eep,c
 25779  002380  0E00               	movlw	0
 25780  002382  6A21               	clrf	?_Write_b_eep+2,c
 25781  002384  ECB9  F007         	call	_Write_b_eep	;wreg free
 25782                           
 25783                           ;main.c: 580: (Busy_eep(), Write_b_eep(0x66,0));
 25784  002388  ECB3  F006         	call	_Busy_eep	;wreg free
 25785  00238C  6A20               	clrf	?_Write_b_eep+1,c
 25786  00238E  0E66               	movlw	102
 25787  002390  6E1F               	movwf	?_Write_b_eep,c
 25788  002392  6A21               	clrf	?_Write_b_eep+2,c
 25789  002394  EFB9  F007         	goto	_Write_b_eep	;wreg free
 25790  002398                     __end_of_init_app_eeprom:
 25791                           	opt stack 0
 25792                           tblptru	equ	0xFF8
 25793                           tblptrh	equ	0xFF7
 25794                           tblptrl	equ	0xFF6
 25795                           tablat	equ	0xFF5
 25796                           prodh	equ	0xFF4
 25797                           prodl	equ	0xFF3
 25798                           intcon	equ	0xFF2
 25799                           indf0	equ	0xFEF
 25800                           postinc0	equ	0xFEE
 25801                           fsr0h	equ	0xFEA
 25802                           fsr0l	equ	0xFE9
 25803                           wreg	equ	0xFE8
 25804                           indf1	equ	0xFE7
 25805                           postinc1	equ	0xFE6
 25806                           postdec1	equ	0xFE5
 25807                           fsr1h	equ	0xFE2
 25808                           fsr1l	equ	0xFE1
 25809                           indf2	equ	0xFDF
 25810                           postinc2	equ	0xFDE
 25811                           postdec2	equ	0xFDD
 25812                           plusw2	equ	0xFDB
 25813                           fsr2h	equ	0xFDA
 25814                           fsr2l	equ	0xFD9
 25815                           status	equ	0xFD8
 25816                           
 25817 ;; *************** function _printMode *****************
 25818 ;; Defined at:
 25819 ;;		line 3120 in file "main.c"
 25820 ;; Parameters:    Size  Location     Type
 25821 ;;		None
 25822 ;; Auto vars:     Size  Location     Type
 25823 ;;		None
 25824 ;; Return value:  Size  Location     Type
 25825 ;;		None               void
 25826 ;; Registers used:
 25827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25828 ;; Tracked objects:
 25829 ;;		On entry : 0/1
 25830 ;;		On exit  : 0/0
 25831 ;;		Unchanged: 0/0
 25832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25833 ;;      Params:         0       0       0       0       0       0       0
 25834 ;;      Locals:         0       0       0       0       0       0       0
 25835 ;;      Temps:          0       0       0       0       0       0       0
 25836 ;;      Totals:         0       0       0       0       0       0       0
 25837 ;;Total ram usage:        0 bytes
 25838 ;; Hardware stack levels used:    1
 25839 ;; Hardware stack levels required when called:    5
 25840 ;; This function calls:
 25841 ;;		_putsUSART
 25842 ;; This function is called by:
 25843 ;;		_main
 25844 ;; This function uses a non-reentrant model
 25845 ;;
 25846                           
 25847                           	psect	text68
 25848  00169C                     __ptext68:
 25849                           	opt stack 0
 25850  00169C                     _printMode:
 25851                           	opt stack 24
 25852                           
 25853                           ;main.c: 3121: putsUSART((char *) "Mode: ");
 25854                           
 25855                           ;incstack = 0
 25856                           ;incstack = 0
 25857  00169C  0E7C               	movlw	high STR_299
 25858  00169E  6E21               	movwf	?_putsUSART+1,c
 25859  0016A0  0E11               	movlw	low STR_299
 25860  0016A2  6E20               	movwf	?_putsUSART,c
 25861  0016A4  EC74  F009         	call	_putsUSART	;wreg free
 25862                           
 25863                           ;main.c: 3122: if (0 == mode) {
 25864  0016A8  0101               	movlb	1	; () banked
 25865  0016AA  6731               	tstfsz	_mode& (0+255),b
 25866  0016AC  D007               	goto	l14666
 25867                           
 25868                           ; BSR set to: 1
 25869                           ;main.c: 3123: putsUSART((char *) "Verbose");
 25870  0016AE  0E7C               	movlw	high STR_300
 25871  0016B0  6E21               	movwf	?_putsUSART+1,c
 25872  0016B2  0E09               	movlw	low STR_300
 25873  0016B4  6E20               	movwf	?_putsUSART,c
 25874  0016B6  EC74  F009         	call	_putsUSART	;wreg free
 25875                           
 25876                           ;main.c: 3124: } else if (1 == mode) {
 25877  0016BA  D023               	goto	l1333
 25878  0016BC                     l14666:
 25879                           
 25880                           ; BSR set to: 1
 25881  0016BC  0531               	decf	_mode& (0+255),w,b
 25882  0016BE  E107               	bnz	l14670
 25883                           
 25884                           ; BSR set to: 1
 25885                           ;main.c: 3125: putsUSART((char *) "VSCP Driver");
 25886  0016C0  0E7B               	movlw	high STR_301
 25887  0016C2  6E21               	movwf	?_putsUSART+1,c
 25888  0016C4  0E3D               	movlw	low STR_301
 25889  0016C6  6E20               	movwf	?_putsUSART,c
 25890  0016C8  EC74  F009         	call	_putsUSART	;wreg free
 25891                           
 25892                           ;main.c: 3126: } else if (2 == mode) {
 25893  0016CC  D01A               	goto	l1333
 25894  0016CE                     l14670:
 25895                           
 25896                           ; BSR set to: 1
 25897  0016CE  5131               	movf	_mode& (0+255),w,b
 25898  0016D0  0A02               	xorlw	2
 25899  0016D2  E107               	bnz	l14674
 25900                           
 25901                           ; BSR set to: 1
 25902                           ;main.c: 3127: putsUSART((char *) "SL Driver");
 25903  0016D4  0E7B               	movlw	high STR_302
 25904  0016D6  6E21               	movwf	?_putsUSART+1,c
 25905  0016D8  0E93               	movlw	low STR_302
 25906  0016DA  6E20               	movwf	?_putsUSART,c
 25907  0016DC  EC74  F009         	call	_putsUSART	;wreg free
 25908                           
 25909                           ;main.c: 3128: } else if (3 == mode) {
 25910  0016E0  D010               	goto	l1333
 25911  0016E2                     l14674:
 25912                           
 25913                           ; BSR set to: 1
 25914  0016E2  5131               	movf	_mode& (0+255),w,b
 25915  0016E4  0A03               	xorlw	3
 25916  0016E6  E107               	bnz	l14678
 25917                           
 25918                           ; BSR set to: 1
 25919                           ;main.c: 3129: putsUSART((char *) "VSCP Node");
 25920  0016E8  0E7B               	movlw	high STR_303
 25921  0016EA  6E21               	movwf	?_putsUSART+1,c
 25922  0016EC  0E89               	movlw	low STR_303
 25923  0016EE  6E20               	movwf	?_putsUSART,c
 25924  0016F0  EC74  F009         	call	_putsUSART	;wreg free
 25925                           
 25926                           ;main.c: 3130: } else {
 25927  0016F4  D006               	goto	l1333
 25928  0016F6                     l14678:
 25929                           
 25930                           ; BSR set to: 1
 25931                           ;main.c: 3131: putsUSART((char *) "Unknown (Verbose used)");
 25932  0016F6  0E79               	movlw	high STR_304
 25933  0016F8  6E21               	movwf	?_putsUSART+1,c
 25934  0016FA  0E43               	movlw	low STR_304
 25935  0016FC  6E20               	movwf	?_putsUSART,c
 25936  0016FE  EC74  F009         	call	_putsUSART	;wreg free
 25937  001702                     l1333:
 25938                           
 25939                           ;main.c: 3132: }
 25940                           ;main.c: 3133: putsUSART((char *) "\r\n");
 25941  001702  0E70               	movlw	high (STR_237+50)
 25942  001704  6E21               	movwf	?_putsUSART+1,c
 25943  001706  0E5A               	movlw	low (STR_237+50)
 25944  001708  6E20               	movwf	?_putsUSART,c
 25945  00170A  EF74  F009         	goto	_putsUSART	;wreg free
 25946  00170E                     __end_of_printMode:
 25947                           	opt stack 0
 25948                           tblptru	equ	0xFF8
 25949                           tblptrh	equ	0xFF7
 25950                           tblptrl	equ	0xFF6
 25951                           tablat	equ	0xFF5
 25952                           prodh	equ	0xFF4
 25953                           prodl	equ	0xFF3
 25954                           intcon	equ	0xFF2
 25955                           indf0	equ	0xFEF
 25956                           postinc0	equ	0xFEE
 25957                           fsr0h	equ	0xFEA
 25958                           fsr0l	equ	0xFE9
 25959                           wreg	equ	0xFE8
 25960                           indf1	equ	0xFE7
 25961                           postinc1	equ	0xFE6
 25962                           postdec1	equ	0xFE5
 25963                           fsr1h	equ	0xFE2
 25964                           fsr1l	equ	0xFE1
 25965                           indf2	equ	0xFDF
 25966                           postinc2	equ	0xFDE
 25967                           postdec2	equ	0xFDD
 25968                           plusw2	equ	0xFDB
 25969                           fsr2h	equ	0xFDA
 25970                           fsr2l	equ	0xFD9
 25971                           status	equ	0xFD8
 25972                           
 25973 ;; *************** function _putsUSART *****************
 25974 ;; Defined at:
 25975 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 25976 ;; Parameters:    Size  Location     Type
 25977 ;;  data            2   31[COMRAM] PTR unsigned char 
 25978 ;;		 -> STR_305(3), STR_304(23), STR_303(10), STR_302(10), 
 25979 ;;		 -> STR_301(12), STR_300(8), STR_299(7), STR_298(3), 
 25980 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_297(10), STR_296(3), STR_293(20), 
 25981 ;;		 -> STR_292(3), STR_291(14), STR_290(3), STR_286(8), 
 25982 ;;		 -> STR_285(17), STR_284(3), STR_283(67), STR_282(3), 
 25983 ;;		 -> STR_281(27), STR_280(3), STR_279(67), STR_278(52), 
 25984 ;;		 -> STR_277(39), STR_276(62), STR_275(55), STR_274(49), 
 25985 ;;		 -> STR_273(67), STR_272(47), STR_271(47), STR_270(34), 
 25986 ;;		 -> STR_269(71), STR_268(20), STR_267(78), STR_266(24), 
 25987 ;;		 -> STR_265(77), STR_264(74), STR_263(76), STR_262(47), 
 25988 ;;		 -> STR_261(40), STR_260(39), STR_259(33), STR_258(23), 
 25989 ;;		 -> STR_257(56), STR_256(24), STR_255(44), STR_254(50), 
 25990 ;;		 -> STR_253(31), STR_252(50), STR_251(51), STR_250(46), 
 25991 ;;		 -> STR_249(44), STR_248(27), STR_247(39), STR_246(39), 
 25992 ;;		 -> STR_245(52), STR_244(54), STR_243(55), STR_242(3), 
 25993 ;;		 -> STR_239(24), STR_238(57), STR_237(53), STR_236(58), 
 25994 ;;		 -> STR_235(3), STR_232(25), STR_231(3), STR_228(24), 
 25995 ;;		 -> STR_227(3), STR_224(24), STR_223(3), STR_220(24), 
 25996 ;;		 -> STR_219(3), STR_216(23), STR_215(3), STR_212(21), 
 25997 ;;		 -> STR_211(3), STR_208(22), STR_207(3), STR_204(17), 
 25998 ;;		 -> STR_203(3), STR_200(18), STR_199(4), STR_198(11), 
 25999 ;;		 -> STR_197(2), STR_194(7), STR_191(7), STR_188(9), 
 26000 ;;		 -> STR_185(7), STR_182(8), STR_179(12), STR_176(7), 
 26001 ;;		 -> STR_175(2), STR_174(2), STR_173(6), STR_172(8), 
 26002 ;;		 -> STR_171(8), STR_170(20), STR_169(27), STR_168(6), 
 26003 ;;		 -> STR_167(33), STR_164(46), STR_163(22), STR_161(21), 
 26004 ;;		 -> STR_158(41), STR_157(23), STR_155(22), STR_152(26), 
 26005 ;;		 -> STR_150(32), STR_148(28), STR_139(6), STR_137(40), 
 26006 ;;		 -> STR_135(44), STR_132(6), STR_131(39), STR_129(36), 
 26007 ;;		 -> STR_127(37), STR_125(40), STR_123(37), STR_122(50), 
 26008 ;;		 -> STR_119(6), STR_116(41), STR_114(38), STR_112(39), 
 26009 ;;		 -> STR_110(42), STR_108(39), STR_107(66), STR_104(6), 
 26010 ;;		 -> STR_103(27), STR_102(3), STR_99(20), STR_98(52), 
 26011 ;;		 -> STR_94(8), STR_93(36), STR_90(8), STR_89(38), 
 26012 ;;		 -> STR_88(24), STR_86(33), STR_84(24), STR_82(52), 
 26013 ;;		 -> STR_80(54), STR_79(6), STR_78(3), STR_73(25), 
 26014 ;;		 -> STR_70(17), STR_69(3), STR_68(4), STR_67(3), 
 26015 ;;		 -> STR_64(4), STR_59(15), wrkbuf(80), STR_56(14), 
 26016 ;;		 -> STR_54(33), STR_52(24), STR_50(52), STR_48(6), 
 26017 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 26018 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 26019 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 26020 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 26021 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 26022 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 26023 ;;		 -> STR_3(35), STR_2(58), STR_1(37), 
 26024 ;; Auto vars:     Size  Location     Type
 26025 ;;		None
 26026 ;; Return value:  Size  Location     Type
 26027 ;;		None               void
 26028 ;; Registers used:
 26029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 26030 ;; Tracked objects:
 26031 ;;		On entry : 0/1
 26032 ;;		On exit  : 0/0
 26033 ;;		Unchanged: 0/0
 26034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26035 ;;      Params:         2       0       0       0       0       0       0
 26036 ;;      Locals:         0       0       0       0       0       0       0
 26037 ;;      Temps:          2       0       0       0       0       0       0
 26038 ;;      Totals:         4       0       0       0       0       0       0
 26039 ;;Total ram usage:        4 bytes
 26040 ;; Hardware stack levels used:    1
 26041 ;; Hardware stack levels required when called:    4
 26042 ;; This function calls:
 26043 ;;		_WriteUSART
 26044 ;; This function is called by:
 26045 ;;		_main
 26046 ;;		_doModeVerbose
 26047 ;;		_doModeSLCAN
 26048 ;;		_receivePrintEventVerbose
 26049 ;;		_receiveSendEventSLCAN
 26050 ;;		_printStatistics
 26051 ;;		_printErrors
 26052 ;;		_printHelp
 26053 ;;		_findNodes
 26054 ;;		_printGUID
 26055 ;;		_printMDF
 26056 ;;		_printNodeFirmwareVersion
 26057 ;;		_printFirmwareVersion
 26058 ;;		_printMode
 26059 ;; This function uses a non-reentrant model
 26060 ;;
 26061                           
 26062                           	psect	text69
 26063  0012E8                     __ptext69:
 26064                           	opt stack 0
 26065  0012E8                     _putsUSART:
 26066                           	opt stack 23
 26067  0012E8                     l1980:
 26068  0012E8  A2AC               	btfss	4012,1,c	;volatile
 26069  0012EA  D7FE               	goto	l1980
 26070  0012EC  5020               	movf	putsUSART@data,w,c
 26071  0012EE  6EF6               	movwf	tblptrl,c
 26072  0012F0  6EE9               	movwf	fsr0l,c
 26073  0012F2  0E05               	movlw	(high __ramtop+-1)
 26074  0012F4  6EEA               	movwf	fsr0h,c
 26075  0012F6  5021               	movf	putsUSART@data+1,w,c
 26076  0012F8  64EA               	cpfsgt	fsr0h,c
 26077  0012FA  D003               	bra	u18497
 26078  0012FC  6EEA               	movwf	fsr0h,c
 26079  0012FE  50EF               	movf	indf0,w,c
 26080  001300  D003               	bra	u18490
 26081  001302                     u18497:
 26082  001302  6EF7               	movwf	tblptrh,c
 26083  001304  0008               	tblrd		*
 26084  001306  50F5               	movf	tablat,w,c
 26085  001308                     u18490:
 26086  001308  ECE7  F006         	call	_WriteUSART
 26087  00130C  5020               	movf	putsUSART@data,w,c
 26088  00130E  6E22               	movwf	??_putsUSART& (0+255),c
 26089  001310  5021               	movf	putsUSART@data+1,w,c
 26090  001312  6E23               	movwf	(??_putsUSART+1)& (0+255),c
 26091  001314  4A20               	infsnz	putsUSART@data,f,c
 26092  001316  2A21               	incf	putsUSART@data+1,f,c
 26093  001318  5022               	movf	??_putsUSART,w,c
 26094  00131A  6EF6               	movwf	tblptrl,c
 26095  00131C  6EE9               	movwf	fsr0l,c
 26096  00131E  0E05               	movlw	(high __ramtop+-1)
 26097  001320  6EEA               	movwf	fsr0h,c
 26098  001322  5023               	movf	??_putsUSART+1,w,c
 26099  001324  64EA               	cpfsgt	fsr0h,c
 26100  001326  D003               	bra	u18507
 26101  001328  6EEA               	movwf	fsr0h,c
 26102  00132A  50EF               	movf	indf0,w,c
 26103  00132C  D003               	bra	u18500
 26104  00132E                     u18507:
 26105  00132E  6EF7               	movwf	tblptrh,c
 26106  001330  0008               	tblrd		*
 26107  001332  50F5               	movf	tablat,w,c
 26108  001334                     u18500:
 26109  001334  0900               	iorlw	0
 26110  001336  B4D8               	btfsc	status,2,c
 26111  001338  0012               	return	
 26112  00133A  D7D6               	goto	l1980
 26113  00133C                     __end_of_putsUSART:
 26114                           	opt stack 0
 26115                           tblptru	equ	0xFF8
 26116                           tblptrh	equ	0xFF7
 26117                           tblptrl	equ	0xFF6
 26118                           tablat	equ	0xFF5
 26119                           prodh	equ	0xFF4
 26120                           prodl	equ	0xFF3
 26121                           intcon	equ	0xFF2
 26122                           indf0	equ	0xFEF
 26123                           postinc0	equ	0xFEE
 26124                           fsr0h	equ	0xFEA
 26125                           fsr0l	equ	0xFE9
 26126                           wreg	equ	0xFE8
 26127                           indf1	equ	0xFE7
 26128                           postinc1	equ	0xFE6
 26129                           postdec1	equ	0xFE5
 26130                           fsr1h	equ	0xFE2
 26131                           fsr1l	equ	0xFE1
 26132                           indf2	equ	0xFDF
 26133                           postinc2	equ	0xFDE
 26134                           postdec2	equ	0xFDD
 26135                           plusw2	equ	0xFDB
 26136                           fsr2h	equ	0xFDA
 26137                           fsr2l	equ	0xFD9
 26138                           status	equ	0xFD8
 26139                           
 26140 ;; *************** function _WriteUSART *****************
 26141 ;; Defined at:
 26142 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 26143 ;; Parameters:    Size  Location     Type
 26144 ;;  data            1    wreg     unsigned char 
 26145 ;; Auto vars:     Size  Location     Type
 26146 ;;  data            1   30[COMRAM] unsigned char 
 26147 ;; Return value:  Size  Location     Type
 26148 ;;		None               void
 26149 ;; Registers used:
 26150 ;;		wreg
 26151 ;; Tracked objects:
 26152 ;;		On entry : 0/1
 26153 ;;		On exit  : 0/0
 26154 ;;		Unchanged: 0/0
 26155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26156 ;;      Params:         0       0       0       0       0       0       0
 26157 ;;      Locals:         1       0       0       0       0       0       0
 26158 ;;      Temps:          0       0       0       0       0       0       0
 26159 ;;      Totals:         1       0       0       0       0       0       0
 26160 ;;Total ram usage:        1 bytes
 26161 ;; Hardware stack levels used:    1
 26162 ;; Hardware stack levels required when called:    3
 26163 ;; This function calls:
 26164 ;;		Nothing
 26165 ;; This function is called by:
 26166 ;;		_doModeVerbose
 26167 ;;		_sendEscapedUartData
 26168 ;;		_sendVSCPDriverErrorFrame
 26169 ;;		_sendVSCPDriverAck
 26170 ;;		_sendVSCPDriverNack
 26171 ;;		_sendVSCPDriverCommandReply
 26172 ;;		_receiveSendEventCANAL
 26173 ;;		_receiveSendMultiEventCANAL
 26174 ;;		_sendVSCPModeCapabilities
 26175 ;;		_receiveSendEventSLCAN
 26176 ;;		_printBinary
 26177 ;;		_findNodes
 26178 ;;		_printFirmwareVersion
 26179 ;;		_putsUSART
 26180 ;; This function uses a non-reentrant model
 26181 ;;
 26182                           
 26183                           	psect	text70
 26184  000DCE                     __ptext70:
 26185                           	opt stack 0
 26186  000DCE                     _WriteUSART:
 26187                           	opt stack 24
 26188                           
 26189                           ;incstack = 0
 26190                           ;incstack = 0
 26191                           ;WriteUSART@data stored from wreg
 26192  000DCE  CFE8 F01F          	movff	wreg,WriteUSART@data
 26193  000DD2  ACAC               	btfss	4012,6,c	;volatile
 26194  000DD4  D004               	goto	l16260
 26195  000DD6  90AC               	bcf	4012,0,c	;volatile
 26196  000DD8  0101               	movlb	1	; () banked
 26197  000DDA  B32A               	btfsc	_USART_Status& (0+255),1,b
 26198                           
 26199                           ; BSR set to: 1
 26200  000DDC  80AC               	bsf	4012,0,c	;volatile
 26201  000DDE                     l16260:
 26202  000DDE  C01F  FFAD         	movff	WriteUSART@data,4013	;volatile
 26203  000DE2  0012               	return	
 26204  000DE4                     __end_of_WriteUSART:
 26205                           	opt stack 0
 26206                           tblptru	equ	0xFF8
 26207                           tblptrh	equ	0xFF7
 26208                           tblptrl	equ	0xFF6
 26209                           tablat	equ	0xFF5
 26210                           prodh	equ	0xFF4
 26211                           prodl	equ	0xFF3
 26212                           intcon	equ	0xFF2
 26213                           indf0	equ	0xFEF
 26214                           postinc0	equ	0xFEE
 26215                           fsr0h	equ	0xFEA
 26216                           fsr0l	equ	0xFE9
 26217                           wreg	equ	0xFE8
 26218                           indf1	equ	0xFE7
 26219                           postinc1	equ	0xFE6
 26220                           postdec1	equ	0xFE5
 26221                           fsr1h	equ	0xFE2
 26222                           fsr1l	equ	0xFE1
 26223                           indf2	equ	0xFDF
 26224                           postinc2	equ	0xFDE
 26225                           postdec2	equ	0xFDD
 26226                           plusw2	equ	0xFDB
 26227                           fsr2h	equ	0xFDA
 26228                           fsr2l	equ	0xFD9
 26229                           status	equ	0xFD8
 26230                           
 26231 ;; *************** function _init *****************
 26232 ;; Defined at:
 26233 ;;		line 435 in file "main.c"
 26234 ;; Parameters:    Size  Location     Type
 26235 ;;		None
 26236 ;; Auto vars:     Size  Location     Type
 26237 ;;		None
 26238 ;; Return value:  Size  Location     Type
 26239 ;;		None               void
 26240 ;; Registers used:
 26241 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26242 ;; Tracked objects:
 26243 ;;		On entry : 0/1
 26244 ;;		On exit  : 0/0
 26245 ;;		Unchanged: 0/0
 26246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26247 ;;      Params:         0       0       0       0       0       0       0
 26248 ;;      Locals:         0       0       0       0       0       0       0
 26249 ;;      Temps:          0       0       0       0       0       0       0
 26250 ;;      Totals:         0       0       0       0       0       0       0
 26251 ;;Total ram usage:        0 bytes
 26252 ;; Hardware stack levels used:    1
 26253 ;; Hardware stack levels required when called:    6
 26254 ;; This function calls:
 26255 ;;		_WriteTimer0
 26256 ;;		_init_app_ram
 26257 ;;		_OpenUSART
 26258 ;;		_OpenTimer0
 26259 ;;		_OpenTimer3
 26260 ;;		_WriteTimer3
 26261 ;;		_ECANInitialize
 26262 ;; This function is called by:
 26263 ;;		_main
 26264 ;; This function uses a non-reentrant model
 26265 ;;
 26266                           
 26267                           	psect	text71
 26268  001392                     __ptext71:
 26269                           	opt stack 0
 26270  001392                     _init:
 26271                           	opt stack 23
 26272                           
 26273                           ;main.c: 437: init_app_ram();
 26274                           
 26275                           ;incstack = 0
 26276                           ;incstack = 0
 26277  001392  ECFF  F01D         	call	_init_app_ram	;wreg free
 26278                           
 26279                           ;main.c: 440: OSCCONbits.IRCF0 = 1;
 26280  001396  88D3               	bsf	4051,4,c	;volatile
 26281                           
 26282                           ;main.c: 441: OSCCONbits.IRCF1 = 1;
 26283  001398  8AD3               	bsf	4051,5,c	;volatile
 26284                           
 26285                           ;main.c: 442: OSCCONbits.IRCF2 = 1;
 26286  00139A  8CD3               	bsf	4051,6,c	;volatile
 26287                           
 26288                           ;main.c: 443: OSCTUNEbits.PLLEN = 1;
 26289  00139C  8C9B               	bsf	3995,6,c	;volatile
 26290                           
 26291                           ;main.c: 445: TRISBbits.RB2 = 0;
 26292  00139E  9493               	bcf	3987,2,c	;volatile
 26293                           
 26294                           ;main.c: 446: TRISBbits.RB3 = 1;
 26295  0013A0  8693               	bsf	3987,3,c	;volatile
 26296                           
 26297                           ;main.c: 448: TRISCbits.RC1 = 0;
 26298  0013A2  9294               	bcf	3988,1,c	;volatile
 26299                           
 26300                           ;main.c: 449: TRISCbits.RC6 = 0;
 26301  0013A4  9C94               	bcf	3988,6,c	;volatile
 26302                           
 26303                           ;main.c: 450: TRISCbits.RC7 = 1;
 26304  0013A6  8E94               	bsf	3988,7,c	;volatile
 26305                           
 26306                           ;main.c: 454: OpenUSART( 0b01111111 &
 26307                           ;main.c: 455: 0b11111111 &
 26308                           ;main.c: 456: 0b11111110 &
 26309                           ;main.c: 457: 0b11111101 &
 26310                           ;main.c: 458: 0b11111111,
 26311                           ;main.c: 459: 21 );
 26312  0013A8  6A20               	clrf	?_OpenUSART+1,c
 26313  0013AA  0E15               	movlw	21
 26314  0013AC  6E1F               	movwf	?_OpenUSART,c
 26315  0013AE  0E7C               	movlw	124
 26316  0013B0  EC22  F00A         	call	_OpenUSART
 26317                           
 26318                           ;main.c: 461: RCIF = 0;
 26319  0013B4  9A9E               	bcf	3998,5,c	;volatile
 26320                           
 26321                           ;main.c: 462: RCIP = 0;
 26322  0013B6  9A9F               	bcf	3999,5,c	;volatile
 26323                           
 26324                           ;main.c: 463: RCIE = 1;
 26325  0013B8  8A9D               	bsf	3997,5,c	;volatile
 26326                           
 26327                           ;main.c: 464: PEIE = 1;
 26328  0013BA  8CF2               	bsf	intcon,6,c	;volatile
 26329                           
 26330                           ;main.c: 467: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 26331  0013BC  0E92               	movlw	146
 26332  0013BE  EC09  F007         	call	_OpenTimer0
 26333                           
 26334                           ;main.c: 468: WriteTimer0(0xfb1d);
 26335  0013C2  0EFB               	movlw	251
 26336  0013C4  6E20               	movwf	?_WriteTimer0+1,c
 26337  0013C6  0E1D               	movlw	29
 26338  0013C8  6E1F               	movwf	?_WriteTimer0,c
 26339  0013CA  ECC3  F006         	call	_WriteTimer0	;wreg free
 26340                           
 26341                           ;main.c: 471: OpenTimer3( 0b11111101 & 0b11001111 & 0b11111111 & 0b11111111 & 0b01111111
      +                           );
 26342  0013CE  0E4D               	movlw	77
 26343  0013D0  EC46  F007         	call	_OpenTimer3
 26344                           
 26345                           ;main.c: 472: WriteTimer3( 0x0000 );
 26346  0013D4  0E00               	movlw	0
 26347  0013D6  6A20               	clrf	?_WriteTimer3+1,c
 26348  0013D8  6A1F               	clrf	?_WriteTimer3,c
 26349  0013DA  ECD5  F006         	call	_WriteTimer3	;wreg free
 26350                           
 26351                           ;main.c: 475: ECANInitialize();
 26352  0013DE  EC3A  F00C         	call	_ECANInitialize	;wreg free
 26353                           
 26354                           ;main.c: 499: RXBnIE = 1;
 26355  0013E2  82A3               	bsf	4003,1,c	;volatile
 26356                           
 26357                           ;main.c: 500: ERRIE = 1;
 26358  0013E4  8AA3               	bsf	4003,5,c	;volatile
 26359                           
 26360                           ;main.c: 502: (INTCONbits.GIE = 1);
 26361  0013E6  8EF2               	bsf	intcon,7,c	;volatile
 26362  0013E8  0012               	return	
 26363  0013EA                     __end_of_init:
 26364                           	opt stack 0
 26365                           tblptru	equ	0xFF8
 26366                           tblptrh	equ	0xFF7
 26367                           tblptrl	equ	0xFF6
 26368                           tablat	equ	0xFF5
 26369                           prodh	equ	0xFF4
 26370                           prodl	equ	0xFF3
 26371                           intcon	equ	0xFF2
 26372                           indf0	equ	0xFEF
 26373                           postinc0	equ	0xFEE
 26374                           fsr0h	equ	0xFEA
 26375                           fsr0l	equ	0xFE9
 26376                           wreg	equ	0xFE8
 26377                           indf1	equ	0xFE7
 26378                           postinc1	equ	0xFE6
 26379                           postdec1	equ	0xFE5
 26380                           fsr1h	equ	0xFE2
 26381                           fsr1l	equ	0xFE1
 26382                           indf2	equ	0xFDF
 26383                           postinc2	equ	0xFDE
 26384                           postdec2	equ	0xFDD
 26385                           plusw2	equ	0xFDB
 26386                           fsr2h	equ	0xFDA
 26387                           fsr2l	equ	0xFD9
 26388                           status	equ	0xFD8
 26389                           
 26390 ;; *************** function _ECANInitialize *****************
 26391 ;; Defined at:
 26392 ;;		line 168 in file "ECAN.c"
 26393 ;; Parameters:    Size  Location     Type
 26394 ;;		None
 26395 ;; Auto vars:     Size  Location     Type
 26396 ;;		None
 26397 ;; Return value:  Size  Location     Type
 26398 ;;		None               void
 26399 ;; Registers used:
 26400 ;;		wreg, status,2, status,0, cstack
 26401 ;; Tracked objects:
 26402 ;;		On entry : 0/1
 26403 ;;		On exit  : 0/0
 26404 ;;		Unchanged: 0/0
 26405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26406 ;;      Params:         0       0       0       0       0       0       0
 26407 ;;      Locals:         0       0       0       0       0       0       0
 26408 ;;      Temps:          0       0       0       0       0       0       0
 26409 ;;      Totals:         0       0       0       0       0       0       0
 26410 ;;Total ram usage:        0 bytes
 26411 ;; Hardware stack levels used:    1
 26412 ;; Hardware stack levels required when called:    4
 26413 ;; This function calls:
 26414 ;;		_ECANSetOperationMode
 26415 ;; This function is called by:
 26416 ;;		_init
 26417 ;; This function uses a non-reentrant model
 26418 ;;
 26419                           
 26420                           	psect	text72
 26421  001874                     __ptext72:
 26422                           	opt stack 0
 26423  001874                     _ECANInitialize:
 26424                           	opt stack 24
 26425                           
 26426                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 26427                           
 26428                           ;incstack = 0
 26429                           ;incstack = 0
 26430  001874  0E80               	movlw	128
 26431  001876  ECFD  F006         	call	_ECANSetOperationMode
 26432                           
 26433                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 26434  00187A  0E09               	movlw	9
 26435  00187C  6E70               	movwf	3952,c	;volatile
 26436                           
 26437                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 26438  00187E  0EFC               	movlw	252
 26439  001880  6E71               	movwf	3953,c	;volatile
 26440                           
 26441                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 26442                           ;ECAN.c: 181: (0 << 6) |
 26443                           ;ECAN.c: 182: (2-1);
 26444  001882  0E01               	movlw	1
 26445  001884  6E72               	movwf	3954,c	;volatile
 26446                           
 26447                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 26448  001886  0E20               	movlw	32
 26449  001888  6E73               	movwf	3955,c	;volatile
 26450                           
 26451                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 26452  00188A  8E77               	bsf	3959,7,c	;volatile
 26453                           
 26454                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 26455  00188C  9C77               	bcf	3959,6,c	;volatile
 26456                           
 26457                           ;ECAN.c: 205: RXB0CON = 0;
 26458  00188E  6A60               	clrf	3936,c	;volatile
 26459                           
 26460                           ;ECAN.c: 211: RXB1CON = 0;
 26461  001890  010F               	movlb	15	; () banked
 26462  001892  6B50               	clrf	80,b	;volatile
 26463                           
 26464                           ; BSR set to: 15
 26465                           ;ECAN.c: 221: B0CON = 0;
 26466  001894  010E               	movlb	14	; () banked
 26467  001896  6B20               	clrf	32,b	;volatile
 26468                           
 26469                           ; BSR set to: 14
 26470                           ;ECAN.c: 231: B1CON = 0;
 26471  001898  6B30               	clrf	48,b	;volatile
 26472                           
 26473                           ; BSR set to: 14
 26474                           ;ECAN.c: 241: B2CON = 0;
 26475  00189A  6B40               	clrf	64,b	;volatile
 26476                           
 26477                           ; BSR set to: 14
 26478                           ;ECAN.c: 251: B3CON = 0;
 26479  00189C  6B50               	clrf	80,b	;volatile
 26480                           
 26481                           ; BSR set to: 14
 26482                           ;ECAN.c: 261: B4CON = 0;
 26483  00189E  6B60               	clrf	96,b	;volatile
 26484                           
 26485                           ; BSR set to: 14
 26486                           ;ECAN.c: 271: B5CON = 0;
 26487  0018A0  6B70               	clrf	112,b	;volatile
 26488                           
 26489                           ; BSR set to: 14
 26490                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 26491  0018A2  010D               	movlb	13	; () banked
 26492  0018A4  6BF8               	clrf	248,b	;volatile
 26493                           
 26494                           ; BSR set to: 13
 26495                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 26496  0018A6  010F               	movlb	15	; () banked
 26497  0018A8  6B00               	clrf	0,b	;volatile
 26498                           
 26499                           ; BSR set to: 15
 26500  0018AA  0E08               	movlw	8
 26501  0018AC  6F01               	movwf	1,b	;volatile
 26502                           
 26503                           ; BSR set to: 15
 26504  0018AE  6B02               	clrf	2,b	;volatile
 26505                           
 26506                           ; BSR set to: 15
 26507  0018B0  6B03               	clrf	3,b	;volatile
 26508                           
 26509                           ; BSR set to: 15
 26510                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 26511  0018B2  0E01               	movlw	1
 26512  0018B4  010D               	movlb	13	; () banked
 26513  0018B6  6FD4               	movwf	212,b	;volatile
 26514                           
 26515                           ; BSR set to: 13
 26516                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 26517  0018B8  6BD5               	clrf	213,b	;volatile
 26518                           
 26519                           ; BSR set to: 13
 26520                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 26521  0018BA  6BE0               	clrf	224,b	;volatile
 26522                           
 26523                           ; BSR set to: 13
 26524                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 26525  0018BC  0E11               	movlw	17
 26526  0018BE  6FE1               	movwf	225,b	;volatile
 26527                           
 26528                           ; BSR set to: 13
 26529                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 26530  0018C0  6FE2               	movwf	226,b	;volatile
 26531                           
 26532                           ; BSR set to: 13
 26533                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 26534  0018C2  6BE3               	clrf	227,b	;volatile
 26535                           
 26536                           ; BSR set to: 13
 26537                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 26538  0018C4  6BE4               	clrf	228,b	;volatile
 26539                           
 26540                           ; BSR set to: 13
 26541                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 26542  0018C6  6BE5               	clrf	229,b	;volatile
 26543                           
 26544                           ; BSR set to: 13
 26545                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 26546  0018C8  6BE6               	clrf	230,b	;volatile
 26547                           
 26548                           ; BSR set to: 13
 26549                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 26550  0018CA  6BE7               	clrf	231,b	;volatile
 26551                           
 26552                           ; BSR set to: 13
 26553                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 26554  0018CC  0E54               	movlw	84
 26555  0018CE  6FF0               	movwf	240,b	;volatile
 26556                           
 26557                           ; BSR set to: 13
 26558                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 26559  0018D0  0E05               	movlw	5
 26560  0018D2  6FF1               	movwf	241,b	;volatile
 26561                           
 26562                           ; BSR set to: 13
 26563                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 26564  0018D4  6BF2               	clrf	242,b	;volatile
 26565                           
 26566                           ; BSR set to: 13
 26567                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 26568  0018D6  6BF2               	clrf	242,b	;volatile
 26569                           
 26570                           ; BSR set to: 13
 26571                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 26572  0018D8  010F               	movlb	15	; () banked
 26573  0018DA  6B18               	clrf	24,b	;volatile
 26574                           
 26575                           ; BSR set to: 15
 26576  0018DC  6B19               	clrf	25,b	;volatile
 26577                           
 26578                           ; BSR set to: 15
 26579  0018DE  6B1A               	clrf	26,b	;volatile
 26580                           
 26581                           ; BSR set to: 15
 26582  0018E0  6B1B               	clrf	27,b	;volatile
 26583                           
 26584                           ; BSR set to: 15
 26585                           ;ECAN.c: 482: RXM0EXIDM = 1;
 26586  0018E2  8719               	bsf	25,3,b	;volatile
 26587                           
 26588                           ; BSR set to: 15
 26589                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 26590  0018E4  6B1C               	clrf	28,b	;volatile
 26591                           
 26592                           ; BSR set to: 15
 26593  0018E6  6B1D               	clrf	29,b	;volatile
 26594                           
 26595                           ; BSR set to: 15
 26596  0018E8  6B1E               	clrf	30,b	;volatile
 26597                           
 26598                           ; BSR set to: 15
 26599  0018EA  6B1F               	clrf	31,b	;volatile
 26600                           
 26601                           ; BSR set to: 15
 26602                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 26603  0018EC  871D               	bsf	29,3,b	;volatile
 26604                           
 26605                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 26606  0018EE  0E20               	movlw	32
 26607  0018F0  EFFD  F006         	goto	_ECANSetOperationMode
 26608  0018F4                     __end_of_ECANInitialize:
 26609                           	opt stack 0
 26610                           tblptru	equ	0xFF8
 26611                           tblptrh	equ	0xFF7
 26612                           tblptrl	equ	0xFF6
 26613                           tablat	equ	0xFF5
 26614                           prodh	equ	0xFF4
 26615                           prodl	equ	0xFF3
 26616                           intcon	equ	0xFF2
 26617                           indf0	equ	0xFEF
 26618                           postinc0	equ	0xFEE
 26619                           fsr0h	equ	0xFEA
 26620                           fsr0l	equ	0xFE9
 26621                           wreg	equ	0xFE8
 26622                           indf1	equ	0xFE7
 26623                           postinc1	equ	0xFE6
 26624                           postdec1	equ	0xFE5
 26625                           fsr1h	equ	0xFE2
 26626                           fsr1l	equ	0xFE1
 26627                           indf2	equ	0xFDF
 26628                           postinc2	equ	0xFDE
 26629                           postdec2	equ	0xFDD
 26630                           plusw2	equ	0xFDB
 26631                           fsr2h	equ	0xFDA
 26632                           fsr2l	equ	0xFD9
 26633                           status	equ	0xFD8
 26634                           
 26635 ;; *************** function _WriteTimer3 *****************
 26636 ;; Defined at:
 26637 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t3write.c"
 26638 ;; Parameters:    Size  Location     Type
 26639 ;;  timer3          2   30[COMRAM] unsigned int 
 26640 ;; Auto vars:     Size  Location     Type
 26641 ;;  timer           2   32[COMRAM] struct Timers
 26642 ;; Return value:  Size  Location     Type
 26643 ;;		None               void
 26644 ;; Registers used:
 26645 ;;		None
 26646 ;; Tracked objects:
 26647 ;;		On entry : 0/1
 26648 ;;		On exit  : 0/0
 26649 ;;		Unchanged: 0/0
 26650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26651 ;;      Params:         2       0       0       0       0       0       0
 26652 ;;      Locals:         2       0       0       0       0       0       0
 26653 ;;      Temps:          0       0       0       0       0       0       0
 26654 ;;      Totals:         4       0       0       0       0       0       0
 26655 ;;Total ram usage:        4 bytes
 26656 ;; Hardware stack levels used:    1
 26657 ;; Hardware stack levels required when called:    3
 26658 ;; This function calls:
 26659 ;;		Nothing
 26660 ;; This function is called by:
 26661 ;;		_init
 26662 ;; This function uses a non-reentrant model
 26663 ;;
 26664                           
 26665                           	psect	text73
 26666  000DAA                     __ptext73:
 26667                           	opt stack 0
 26668  000DAA                     _WriteTimer3:
 26669                           	opt stack 25
 26670                           
 26671                           ;incstack = 0
 26672                           ;incstack = 0
 26673  000DAA  C01F  F021         	movff	WriteTimer3@timer3,WriteTimer3@timer
 26674  000DAE  C020  F022         	movff	WriteTimer3@timer3+1,WriteTimer3@timer+1
 26675  000DB2  C022  FFB3         	movff	WriteTimer3@timer+1,4019	;volatile
 26676  000DB6  C021  FFB2         	movff	WriteTimer3@timer,4018	;volatile
 26677  000DBA  0012               	return	
 26678  000DBC                     __end_of_WriteTimer3:
 26679                           	opt stack 0
 26680                           tblptru	equ	0xFF8
 26681                           tblptrh	equ	0xFF7
 26682                           tblptrl	equ	0xFF6
 26683                           tablat	equ	0xFF5
 26684                           prodh	equ	0xFF4
 26685                           prodl	equ	0xFF3
 26686                           intcon	equ	0xFF2
 26687                           indf0	equ	0xFEF
 26688                           postinc0	equ	0xFEE
 26689                           fsr0h	equ	0xFEA
 26690                           fsr0l	equ	0xFE9
 26691                           wreg	equ	0xFE8
 26692                           indf1	equ	0xFE7
 26693                           postinc1	equ	0xFE6
 26694                           postdec1	equ	0xFE5
 26695                           fsr1h	equ	0xFE2
 26696                           fsr1l	equ	0xFE1
 26697                           indf2	equ	0xFDF
 26698                           postinc2	equ	0xFDE
 26699                           postdec2	equ	0xFDD
 26700                           plusw2	equ	0xFDB
 26701                           fsr2h	equ	0xFDA
 26702                           fsr2l	equ	0xFD9
 26703                           status	equ	0xFD8
 26704                           
 26705 ;; *************** function _OpenTimer3 *****************
 26706 ;; Defined at:
 26707 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t3open.c"
 26708 ;; Parameters:    Size  Location     Type
 26709 ;;  config          1    wreg     unsigned char 
 26710 ;; Auto vars:     Size  Location     Type
 26711 ;;  config          1   30[COMRAM] unsigned char 
 26712 ;; Return value:  Size  Location     Type
 26713 ;;		None               void
 26714 ;; Registers used:
 26715 ;;		wreg, status,2, status,0
 26716 ;; Tracked objects:
 26717 ;;		On entry : 0/1
 26718 ;;		On exit  : 0/0
 26719 ;;		Unchanged: 0/0
 26720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26721 ;;      Params:         0       0       0       0       0       0       0
 26722 ;;      Locals:         1       0       0       0       0       0       0
 26723 ;;      Temps:          0       0       0       0       0       0       0
 26724 ;;      Totals:         1       0       0       0       0       0       0
 26725 ;;Total ram usage:        1 bytes
 26726 ;; Hardware stack levels used:    1
 26727 ;; Hardware stack levels required when called:    3
 26728 ;; This function calls:
 26729 ;;		Nothing
 26730 ;; This function is called by:
 26731 ;;		_init
 26732 ;; This function uses a non-reentrant model
 26733 ;;
 26734                           
 26735                           	psect	text74
 26736  000E8C                     __ptext74:
 26737                           	opt stack 0
 26738  000E8C                     _OpenTimer3:
 26739                           	opt stack 25
 26740                           
 26741                           ;incstack = 0
 26742                           ;incstack = 0
 26743                           ;OpenTimer3@config stored from wreg
 26744  000E8C  CFE8 F01F          	movff	wreg,OpenTimer3@config
 26745  000E90  501F               	movf	OpenTimer3@config,w,c
 26746  000E92  0B36               	andlw	54
 26747  000E94  6EB1               	movwf	4017,c	;volatile
 26748  000E96  6AB3               	clrf	4019,c	;volatile
 26749  000E98  6AB2               	clrf	4018,c	;volatile
 26750  000E9A  92A1               	bcf	4001,1,c	;volatile
 26751  000E9C  AE1F               	btfss	OpenTimer3@config,7,c
 26752  000E9E  D002               	goto	l1921
 26753  000EA0  82A0               	bsf	4000,1,c	;volatile
 26754  000EA2  D001               	goto	l1922
 26755  000EA4                     l1921:
 26756  000EA4  92A0               	bcf	4000,1,c	;volatile
 26757  000EA6                     l1922:
 26758  000EA6  A01F               	btfss	OpenTimer3@config,0,c
 26759  000EA8  D002               	goto	l1923
 26760  000EAA  8EB1               	bsf	4017,7,c	;volatile
 26761  000EAC  D001               	goto	l1924
 26762  000EAE                     l1923:
 26763  000EAE  9EB1               	bcf	4017,7,c	;volatile
 26764  000EB0                     l1924:
 26765  000EB0  80B1               	bsf	4017,0,c	;volatile
 26766  000EB2  0012               	return	
 26767  000EB4                     __end_of_OpenTimer3:
 26768                           	opt stack 0
 26769                           tblptru	equ	0xFF8
 26770                           tblptrh	equ	0xFF7
 26771                           tblptrl	equ	0xFF6
 26772                           tablat	equ	0xFF5
 26773                           prodh	equ	0xFF4
 26774                           prodl	equ	0xFF3
 26775                           intcon	equ	0xFF2
 26776                           indf0	equ	0xFEF
 26777                           postinc0	equ	0xFEE
 26778                           fsr0h	equ	0xFEA
 26779                           fsr0l	equ	0xFE9
 26780                           wreg	equ	0xFE8
 26781                           indf1	equ	0xFE7
 26782                           postinc1	equ	0xFE6
 26783                           postdec1	equ	0xFE5
 26784                           fsr1h	equ	0xFE2
 26785                           fsr1l	equ	0xFE1
 26786                           indf2	equ	0xFDF
 26787                           postinc2	equ	0xFDE
 26788                           postdec2	equ	0xFDD
 26789                           plusw2	equ	0xFDB
 26790                           fsr2h	equ	0xFDA
 26791                           fsr2l	equ	0xFD9
 26792                           status	equ	0xFD8
 26793                           
 26794 ;; *************** function _OpenTimer0 *****************
 26795 ;; Defined at:
 26796 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 26797 ;; Parameters:    Size  Location     Type
 26798 ;;  config          1    wreg     unsigned char 
 26799 ;; Auto vars:     Size  Location     Type
 26800 ;;  config          1   30[COMRAM] unsigned char 
 26801 ;; Return value:  Size  Location     Type
 26802 ;;		None               void
 26803 ;; Registers used:
 26804 ;;		wreg, status,2, status,0
 26805 ;; Tracked objects:
 26806 ;;		On entry : 0/1
 26807 ;;		On exit  : 0/0
 26808 ;;		Unchanged: 0/0
 26809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26810 ;;      Params:         0       0       0       0       0       0       0
 26811 ;;      Locals:         1       0       0       0       0       0       0
 26812 ;;      Temps:          0       0       0       0       0       0       0
 26813 ;;      Totals:         1       0       0       0       0       0       0
 26814 ;;Total ram usage:        1 bytes
 26815 ;; Hardware stack levels used:    1
 26816 ;; Hardware stack levels required when called:    3
 26817 ;; This function calls:
 26818 ;;		Nothing
 26819 ;; This function is called by:
 26820 ;;		_init
 26821 ;; This function uses a non-reentrant model
 26822 ;;
 26823                           
 26824                           	psect	text75
 26825  000E12                     __ptext75:
 26826                           	opt stack 0
 26827  000E12                     _OpenTimer0:
 26828                           	opt stack 25
 26829                           
 26830                           ;incstack = 0
 26831                           ;incstack = 0
 26832                           ;OpenTimer0@config stored from wreg
 26833  000E12  CFE8 F01F          	movff	wreg,OpenTimer0@config
 26834  000E16  501F               	movf	OpenTimer0@config,w,c
 26835  000E18  0B7F               	andlw	127
 26836  000E1A  6ED5               	movwf	4053,c	;volatile
 26837  000E1C  6AD7               	clrf	4055,c	;volatile
 26838  000E1E  6AD6               	clrf	4054,c	;volatile
 26839  000E20  94F2               	bcf	intcon,2,c	;volatile
 26840  000E22  AE1F               	btfss	OpenTimer0@config,7,c
 26841  000E24  D002               	goto	l1897
 26842  000E26  8AF2               	bsf	intcon,5,c	;volatile
 26843  000E28  D001               	goto	l1898
 26844  000E2A                     l1897:
 26845  000E2A  9AF2               	bcf	intcon,5,c	;volatile
 26846  000E2C                     l1898:
 26847  000E2C  8ED5               	bsf	4053,7,c	;volatile
 26848  000E2E  0012               	return	
 26849  000E30                     __end_of_OpenTimer0:
 26850                           	opt stack 0
 26851                           tblptru	equ	0xFF8
 26852                           tblptrh	equ	0xFF7
 26853                           tblptrl	equ	0xFF6
 26854                           tablat	equ	0xFF5
 26855                           prodh	equ	0xFF4
 26856                           prodl	equ	0xFF3
 26857                           intcon	equ	0xFF2
 26858                           indf0	equ	0xFEF
 26859                           postinc0	equ	0xFEE
 26860                           fsr0h	equ	0xFEA
 26861                           fsr0l	equ	0xFE9
 26862                           wreg	equ	0xFE8
 26863                           indf1	equ	0xFE7
 26864                           postinc1	equ	0xFE6
 26865                           postdec1	equ	0xFE5
 26866                           fsr1h	equ	0xFE2
 26867                           fsr1l	equ	0xFE1
 26868                           indf2	equ	0xFDF
 26869                           postinc2	equ	0xFDE
 26870                           postdec2	equ	0xFDD
 26871                           plusw2	equ	0xFDB
 26872                           fsr2h	equ	0xFDA
 26873                           fsr2l	equ	0xFD9
 26874                           status	equ	0xFD8
 26875                           
 26876 ;; *************** function _OpenUSART *****************
 26877 ;; Defined at:
 26878 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 26879 ;; Parameters:    Size  Location     Type
 26880 ;;  config          1    wreg     unsigned char 
 26881 ;;  spbrg           2   30[COMRAM] unsigned int 
 26882 ;; Auto vars:     Size  Location     Type
 26883 ;;  config          1   32[COMRAM] unsigned char 
 26884 ;; Return value:  Size  Location     Type
 26885 ;;		None               void
 26886 ;; Registers used:
 26887 ;;		wreg, status,2
 26888 ;; Tracked objects:
 26889 ;;		On entry : 0/1
 26890 ;;		On exit  : 0/0
 26891 ;;		Unchanged: 0/0
 26892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26893 ;;      Params:         2       0       0       0       0       0       0
 26894 ;;      Locals:         1       0       0       0       0       0       0
 26895 ;;      Temps:          0       0       0       0       0       0       0
 26896 ;;      Totals:         3       0       0       0       0       0       0
 26897 ;;Total ram usage:        3 bytes
 26898 ;; Hardware stack levels used:    1
 26899 ;; Hardware stack levels required when called:    3
 26900 ;; This function calls:
 26901 ;;		Nothing
 26902 ;; This function is called by:
 26903 ;;		_init
 26904 ;; This function uses a non-reentrant model
 26905 ;;
 26906                           
 26907                           	psect	text76
 26908  001444                     __ptext76:
 26909                           	opt stack 0
 26910  001444                     _OpenUSART:
 26911                           	opt stack 25
 26912                           
 26913                           ;incstack = 0
 26914                           ;incstack = 0
 26915                           ;OpenUSART@config stored from wreg
 26916  001444  CFE8 F021          	movff	wreg,OpenUSART@config
 26917  001448  6AAC               	clrf	4012,c	;volatile
 26918  00144A  6AAB               	clrf	4011,c	;volatile
 26919  00144C  B021               	btfsc	OpenUSART@config,0,c
 26920  00144E  88AC               	bsf	4012,4,c	;volatile
 26921  001450  A221               	btfss	OpenUSART@config,1,c
 26922  001452  D002               	goto	l8422
 26923  001454  8CAC               	bsf	4012,6,c	;volatile
 26924  001456  8CAB               	bsf	4011,6,c	;volatile
 26925  001458                     l8422:
 26926  001458  B421               	btfsc	OpenUSART@config,2,c
 26927  00145A  8EAC               	bsf	4012,7,c	;volatile
 26928  00145C  A621               	btfss	OpenUSART@config,3,c
 26929  00145E  D002               	goto	l1963
 26930  001460  88AB               	bsf	4011,4,c	;volatile
 26931  001462  D001               	goto	l8430
 26932  001464                     l1963:
 26933  001464  8AAB               	bsf	4011,5,c	;volatile
 26934  001466                     l8430:
 26935  001466  B821               	btfsc	OpenUSART@config,4,c
 26936  001468  84AC               	bsf	4012,2,c	;volatile
 26937  00146A  989E               	bcf	3998,4,c	;volatile
 26938  00146C  BA21               	btfsc	OpenUSART@config,5,c
 26939  00146E  86AB               	bsf	4011,3,c	;volatile
 26940  001470  AC21               	btfss	OpenUSART@config,6,c
 26941  001472  D002               	goto	l1967
 26942  001474  8A9D               	bsf	3997,5,c	;volatile
 26943  001476  D001               	goto	l1968
 26944  001478                     l1967:
 26945  001478  9A9D               	bcf	3997,5,c	;volatile
 26946  00147A                     l1968:
 26947  00147A  9A9E               	bcf	3998,5,c	;volatile
 26948  00147C  AE21               	btfss	OpenUSART@config,7,c
 26949  00147E  D002               	goto	l1969
 26950  001480  889D               	bsf	3997,4,c	;volatile
 26951  001482  D001               	goto	l1970
 26952  001484                     l1969:
 26953  001484  989D               	bcf	3997,4,c	;volatile
 26954  001486                     l1970:
 26955  001486  C01F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 26956  00148A  5020               	movf	OpenUSART@spbrg+1,w,c
 26957  00148C  6EB0               	movwf	4016,c	;volatile
 26958  00148E  8AAC               	bsf	4012,5,c	;volatile
 26959  001490  8EAB               	bsf	4011,7,c	;volatile
 26960  001492  9C94               	bcf	3988,6,c	;volatile
 26961  001494  8E94               	bsf	3988,7,c	;volatile
 26962  001496  B8AC               	btfsc	4012,4,c	;volatile
 26963  001498  BEAC               	btfsc	4012,7,c	;volatile
 26964  00149A  D001               	goto	l1972
 26965  00149C  8C94               	bsf	3988,6,c	;volatile
 26966  00149E                     l1972:
 26967  00149E  0012               	return	
 26968  0014A0                     __end_of_OpenUSART:
 26969                           	opt stack 0
 26970                           tblptru	equ	0xFF8
 26971                           tblptrh	equ	0xFF7
 26972                           tblptrl	equ	0xFF6
 26973                           tablat	equ	0xFF5
 26974                           prodh	equ	0xFF4
 26975                           prodl	equ	0xFF3
 26976                           intcon	equ	0xFF2
 26977                           indf0	equ	0xFEF
 26978                           postinc0	equ	0xFEE
 26979                           fsr0h	equ	0xFEA
 26980                           fsr0l	equ	0xFE9
 26981                           wreg	equ	0xFE8
 26982                           indf1	equ	0xFE7
 26983                           postinc1	equ	0xFE6
 26984                           postdec1	equ	0xFE5
 26985                           fsr1h	equ	0xFE2
 26986                           fsr1l	equ	0xFE1
 26987                           indf2	equ	0xFDF
 26988                           postinc2	equ	0xFDE
 26989                           postdec2	equ	0xFDD
 26990                           plusw2	equ	0xFDB
 26991                           fsr2h	equ	0xFDA
 26992                           fsr2l	equ	0xFD9
 26993                           status	equ	0xFD8
 26994                           
 26995 ;; *************** function _init_app_ram *****************
 26996 ;; Defined at:
 26997 ;;		line 511 in file "main.c"
 26998 ;; Parameters:    Size  Location     Type
 26999 ;;		None
 27000 ;; Auto vars:     Size  Location     Type
 27001 ;;  i               1   24[BANK0 ] unsigned char 
 27002 ;; Return value:  Size  Location     Type
 27003 ;;		None               void
 27004 ;; Registers used:
 27005 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27006 ;; Tracked objects:
 27007 ;;		On entry : 0/1
 27008 ;;		On exit  : 0/0
 27009 ;;		Unchanged: 0/0
 27010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27011 ;;      Params:         0       0       0       0       0       0       0
 27012 ;;      Locals:         0       1       0       0       0       0       0
 27013 ;;      Temps:          0       8       0       0       0       0       0
 27014 ;;      Totals:         0       9       0       0       0       0       0
 27015 ;;Total ram usage:        9 bytes
 27016 ;; Hardware stack levels used:    1
 27017 ;; Hardware stack levels required when called:    5
 27018 ;; This function calls:
 27019 ;;		_Read_b_eep
 27020 ;;		_ECANSetOperationMode
 27021 ;;		_setFilter
 27022 ;;		__CANIDToRegs
 27023 ;; This function is called by:
 27024 ;;		_init
 27025 ;;		_vscp_restoreDefaults
 27026 ;; This function uses a non-reentrant model
 27027 ;;
 27028                           
 27029                           	psect	text77
 27030  003BFE                     __ptext77:
 27031                           	opt stack 0
 27032  003BFE                     _init_app_ram:
 27033                           	opt stack 22
 27034                           
 27035                           ;main.c: 513: can_receiveOverruns = 0;
 27036                           
 27037                           ;incstack = 0
 27038                           ;incstack = 0
 27039  003BFE  0101               	movlb	1	; () banked
 27040  003C00  6B00               	clrf	_can_receiveOverruns& (0+255),b
 27041  003C02  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 27042  003C04  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 27043  003C06  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 27044                           
 27045                           ;main.c: 514: can_transmitOverruns = 0;
 27046  003C08  6B04               	clrf	_can_transmitOverruns& (0+255),b
 27047  003C0A  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 27048  003C0C  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 27049  003C0E  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 27050                           
 27051                           ;main.c: 515: uart_receiveOverruns = 0;
 27052  003C10  6B20               	clrf	_uart_receiveOverruns& (0+255),b
 27053  003C12  6B21               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 27054  003C14  6B22               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 27055  003C16  6B23               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 27056                           
 27057                           ;main.c: 516: uart_transmitOverruns = 0;
 27058  003C18  6B24               	clrf	_uart_transmitOverruns& (0+255),b
 27059  003C1A  6B25               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 27060  003C1C  6B26               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 27061  003C1E  6B27               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 27062                           
 27063                           ;main.c: 517: timer = 0;
 27064  003C20  6B1C               	clrf	_timer& (0+255),b	;volatile
 27065  003C22  6B1D               	clrf	(_timer+1)& (0+255),b	;volatile
 27066  003C24  6B1E               	clrf	(_timer+2)& (0+255),b	;volatile
 27067  003C26  6B1F               	clrf	(_timer+3)& (0+255),b	;volatile
 27068                           
 27069                           ; BSR set to: 1
 27070                           ;main.c: 519: bHex = Read_b_eep(0x06);
 27071  003C28  6A20               	clrf	?_Read_b_eep+1,c
 27072  003C2A  0E06               	movlw	6
 27073  003C2C  6E1F               	movwf	?_Read_b_eep,c
 27074  003C2E  ECCC  F006         	call	_Read_b_eep	;wreg free
 27075  003C32  6E29               	movwf	_bHex,c
 27076                           
 27077                           ;main.c: 520: mode = Read_b_eep(0x03);
 27078  003C34  6A20               	clrf	?_Read_b_eep+1,c
 27079  003C36  0E03               	movlw	3
 27080  003C38  6E1F               	movwf	?_Read_b_eep,c
 27081  003C3A  ECCC  F006         	call	_Read_b_eep	;wreg free
 27082  003C3E  0101               	movlb	1	; () banked
 27083  003C40  6F31               	movwf	_mode& (0+255),b
 27084                           
 27085                           ;main.c: 521: bLocalEcho = Read_b_eep(0x65);
 27086  003C42  6A20               	clrf	?_Read_b_eep+1,c
 27087  003C44  0E65               	movlw	101
 27088  003C46  6E1F               	movwf	?_Read_b_eep,c
 27089  003C48  ECCC  F006         	call	_Read_b_eep	;wreg free
 27090  003C4C  6E2B               	movwf	_bLocalEcho,c
 27091                           
 27092                           ;main.c: 522: bTimestamp = Read_b_eep(0x66);
 27093  003C4E  6A20               	clrf	?_Read_b_eep+1,c
 27094  003C50  0E66               	movlw	102
 27095  003C52  6E1F               	movwf	?_Read_b_eep,c
 27096  003C54  ECCC  F006         	call	_Read_b_eep	;wreg free
 27097  003C58  6E2E               	movwf	_bTimestamp,c
 27098                           
 27099                           ;main.c: 524: rwtimeout = Read_b_eep(0x09);
 27100  003C5A  6A20               	clrf	?_Read_b_eep+1,c
 27101  003C5C  0E09               	movlw	9
 27102  003C5E  6E1F               	movwf	?_Read_b_eep,c
 27103  003C60  ECCC  F006         	call	_Read_b_eep	;wreg free
 27104  003C64  6E33               	movwf	_rwtimeout,c
 27105                           
 27106                           ;main.c: 529: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 27107  003C66  0E80               	movlw	128
 27108  003C68  ECFD  F006         	call	_ECANSetOperationMode
 27109                           
 27110                           ;main.c: 531: for (uint8_t i=0; i<15; i++ ) {
 27111  003C6C  0100               	movlb	0	; () banked
 27112  003C6E  6B78               	clrf	init_app_ram@i& (0+255),b
 27113  003C70                     l15926:
 27114                           
 27115                           ; BSR set to: 0
 27116                           ;main.c: 532: setFilter( i,
 27117                           ;main.c: 533: ( Read_b_eep(0x20 + i*4) << 24 ) +
 27118                           ;main.c: 534: ( Read_b_eep(0x20 + 1 + i*4) << 16 ) +
 27119                           ;main.c: 535: ( Read_b_eep(0x20 + 2 + i*4) << 8 ) +
 27120                           ;main.c: 536: ( Read_b_eep(0x20 + 3 + i*4) ), 0 );
 27121  003C70  5178               	movf	init_app_ram@i& (0+255),w,b
 27122  003C72  6F70               	movwf	??_init_app_ram& (0+255),b
 27123  003C74  6B71               	clrf	(??_init_app_ram+1)& (0+255),b
 27124  003C76  90D8               	bcf	status,0,c
 27125  003C78  3770               	rlcf	??_init_app_ram& (0+255),f,b
 27126  003C7A  3771               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 27127  003C7C  90D8               	bcf	status,0,c
 27128  003C7E  3770               	rlcf	??_init_app_ram& (0+255),f,b
 27129  003C80  3771               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 27130  003C82  0E22               	movlw	34
 27131  003C84  2570               	addwf	??_init_app_ram& (0+255),w,b
 27132  003C86  6E1F               	movwf	?_Read_b_eep,c
 27133  003C88  0E00               	movlw	0
 27134  003C8A  2171               	addwfc	(??_init_app_ram+1)& (0+255),w,b
 27135  003C8C  6E20               	movwf	?_Read_b_eep+1,c
 27136  003C8E  ECCC  F006         	call	_Read_b_eep	;wreg free
 27137  003C92  0100               	movlb	0	; () banked
 27138  003C94  6F73               	movwf	(??_init_app_ram+3)& (0+255),b
 27139  003C96  6B72               	clrf	(??_init_app_ram+2)& (0+255),b
 27140  003C98  5178               	movf	init_app_ram@i& (0+255),w,b
 27141  003C9A  0D04               	mullw	4
 27142  003C9C  0E20               	movlw	32
 27143  003C9E  24F3               	addwf	prodl,w,c
 27144  003CA0  6E1F               	movwf	?_Read_b_eep,c
 27145  003CA2  0E00               	movlw	0
 27146  003CA4  20F4               	addwfc	prodh,w,c
 27147  003CA6  6E20               	movwf	?_Read_b_eep+1,c
 27148  003CA8  ECCC  F006         	call	_Read_b_eep	;wreg free
 27149  003CAC  0100               	movlb	0	; () banked
 27150  003CAE  6F74               	movwf	(??_init_app_ram+4)& (0+255),b
 27151  003CB0  6B75               	clrf	(??_init_app_ram+5)& (0+255),b
 27152  003CB2  5178               	movf	init_app_ram@i& (0+255),w,b
 27153  003CB4  0D04               	mullw	4
 27154  003CB6  0E21               	movlw	33
 27155  003CB8  24F3               	addwf	prodl,w,c
 27156  003CBA  6E1F               	movwf	?_Read_b_eep,c
 27157  003CBC  0E00               	movlw	0
 27158  003CBE  20F4               	addwfc	prodh,w,c
 27159  003CC0  6E20               	movwf	?_Read_b_eep+1,c
 27160  003CC2  ECCC  F006         	call	_Read_b_eep	;wreg free
 27161  003CC6  0100               	movlb	0	; () banked
 27162  003CC8  2774               	addwf	(??_init_app_ram+4)& (0+255),f,b
 27163  003CCA  0E00               	movlw	0
 27164  003CCC  2375               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 27165  003CCE  5172               	movf	(??_init_app_ram+2)& (0+255),w,b
 27166  003CD0  2574               	addwf	(??_init_app_ram+4)& (0+255),w,b
 27167  003CD2  6F76               	movwf	(??_init_app_ram+6)& (0+255),b
 27168  003CD4  5173               	movf	(??_init_app_ram+3)& (0+255),w,b
 27169  003CD6  2175               	addwfc	(??_init_app_ram+5)& (0+255),w,b
 27170  003CD8  6F77               	movwf	(??_init_app_ram+7)& (0+255),b
 27171  003CDA  5178               	movf	init_app_ram@i& (0+255),w,b
 27172  003CDC  0D04               	mullw	4
 27173  003CDE  0E23               	movlw	35
 27174  003CE0  24F3               	addwf	prodl,w,c
 27175  003CE2  6E1F               	movwf	?_Read_b_eep,c
 27176  003CE4  0E00               	movlw	0
 27177  003CE6  20F4               	addwfc	prodh,w,c
 27178  003CE8  6E20               	movwf	?_Read_b_eep+1,c
 27179  003CEA  ECCC  F006         	call	_Read_b_eep	;wreg free
 27180  003CEE  0100               	movlb	0	; () banked
 27181  003CF0  2776               	addwf	(??_init_app_ram+6)& (0+255),f,b
 27182  003CF2  0E00               	movlw	0
 27183  003CF4  2377               	addwfc	(??_init_app_ram+7)& (0+255),f,b
 27184  003CF6  C076  F060         	movff	??_init_app_ram+6,?_setFilter
 27185  003CFA  C077  F061         	movff	??_init_app_ram+7,?_setFilter+1
 27186  003CFE  BF61               	btfsc	(?_setFilter+1)& (0+255),7,b
 27187  003D00  0EFF               	movlw	-1
 27188  003D02  6F62               	movwf	(?_setFilter+2)& (0+255),b
 27189  003D04  6F63               	movwf	(?_setFilter+3)& (0+255),b
 27190  003D06  6B64               	clrf	(?_setFilter+4)& (0+255),b
 27191  003D08  5178               	movf	init_app_ram@i& (0+255),w,b
 27192  003D0A  ECF7  F01F         	call	_setFilter
 27193  003D0E  0100               	movlb	0	; () banked
 27194  003D10  2B78               	incf	init_app_ram@i& (0+255),f,b
 27195                           
 27196                           ; BSR set to: 0
 27197  003D12  0E0E               	movlw	14
 27198  003D14  6578               	cpfsgt	init_app_ram@i& (0+255),b
 27199  003D16  D7AC               	goto	l15926
 27200                           
 27201                           ; BSR set to: 0
 27202                           ;main.c: 537: }
 27203                           ;main.c: 539: _CANIDToRegs((BYTE*)&RXM0SIDH, ( Read_b_eep(0x60) << 24 ) + ( Read_b_eep(0
      +                          x60 + 1) << 16 ) + ( Read_b_eep(0x60 + 2) << 8 ) + ( Read_b_eep(0x60 + 3) ), 1);
 27204  003D18  0E0F               	movlw	15	;volatile
 27205  003D1A  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 27206  003D1C  0E18               	movlw	24	;volatile
 27207  003D1E  6F60               	movwf	?__CANIDToRegs& (0+255),b
 27208  003D20  6A20               	clrf	?_Read_b_eep+1,c
 27209  003D22  0E62               	movlw	98
 27210  003D24  6E1F               	movwf	?_Read_b_eep,c
 27211  003D26  ECCC  F006         	call	_Read_b_eep	;wreg free
 27212  003D2A  0100               	movlb	0	; () banked
 27213  003D2C  6F71               	movwf	(??_init_app_ram+1)& (0+255),b
 27214  003D2E  6B70               	clrf	??_init_app_ram& (0+255),b
 27215  003D30  6A20               	clrf	?_Read_b_eep+1,c
 27216  003D32  0E60               	movlw	96
 27217  003D34  6E1F               	movwf	?_Read_b_eep,c
 27218  003D36  ECCC  F006         	call	_Read_b_eep	;wreg free
 27219  003D3A  0100               	movlb	0	; () banked
 27220  003D3C  6F72               	movwf	(??_init_app_ram+2)& (0+255),b
 27221  003D3E  6B73               	clrf	(??_init_app_ram+3)& (0+255),b
 27222  003D40  6A20               	clrf	?_Read_b_eep+1,c
 27223  003D42  0E61               	movlw	97
 27224  003D44  6E1F               	movwf	?_Read_b_eep,c
 27225  003D46  ECCC  F006         	call	_Read_b_eep	;wreg free
 27226  003D4A  D83B               	call	PL60	;call to abstracted procedure
 27227  003D4C  0E63               	movlw	99
 27228  003D4E  6E1F               	movwf	?_Read_b_eep,c
 27229  003D50  ECCC  F006         	call	_Read_b_eep	;wreg free
 27230  003D54  D827               	call	PL34	;call to abstracted procedure
 27231  003D56  EC88  F015         	call	__CANIDToRegs	;wreg free
 27232                           
 27233                           ;main.c: 545: _CANIDToRegs((BYTE*)&RXM1SIDH, ( Read_b_eep(0x64) << 24 ) + ( Read_b_eep(0
      +                          x64 + 1) << 16 ) + ( Read_b_eep(0x64 + 2) << 8 ) + ( Read_b_eep(0x64 + 3) ), 1);
 27234  003D5A  0E0F               	movlw	15	;volatile
 27235  003D5C  0100               	movlb	0	; () banked
 27236  003D5E  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 27237  003D60  0E1C               	movlw	28	;volatile
 27238  003D62  6F60               	movwf	?__CANIDToRegs& (0+255),b
 27239  003D64  6A20               	clrf	?_Read_b_eep+1,c
 27240  003D66  0E66               	movlw	102
 27241  003D68  6E1F               	movwf	?_Read_b_eep,c
 27242  003D6A  ECCC  F006         	call	_Read_b_eep	;wreg free
 27243  003D6E  0100               	movlb	0	; () banked
 27244  003D70  6F71               	movwf	(??_init_app_ram+1)& (0+255),b
 27245  003D72  6B70               	clrf	??_init_app_ram& (0+255),b
 27246  003D74  6A20               	clrf	?_Read_b_eep+1,c
 27247  003D76  0E64               	movlw	100
 27248  003D78  6E1F               	movwf	?_Read_b_eep,c
 27249  003D7A  ECCC  F006         	call	_Read_b_eep	;wreg free
 27250  003D7E  0100               	movlb	0	; () banked
 27251  003D80  6F72               	movwf	(??_init_app_ram+2)& (0+255),b
 27252  003D82  6B73               	clrf	(??_init_app_ram+3)& (0+255),b
 27253  003D84  6A20               	clrf	?_Read_b_eep+1,c
 27254  003D86  0E65               	movlw	101
 27255  003D88  6E1F               	movwf	?_Read_b_eep,c
 27256  003D8A  ECCC  F006         	call	_Read_b_eep	;wreg free
 27257  003D8E  D819               	call	PL60	;call to abstracted procedure
 27258  003D90  0E67               	movlw	103
 27259  003D92  6E1F               	movwf	?_Read_b_eep,c
 27260  003D94  ECCC  F006         	call	_Read_b_eep	;wreg free
 27261  003D98  D805               	call	PL34	;call to abstracted procedure
 27262  003D9A  EC88  F015         	call	__CANIDToRegs	;wreg free
 27263                           
 27264                           ; BSR set to: 0
 27265                           ;main.c: 551: ECANSetOperationMode(0x20);
 27266  003D9E  0E20               	movlw	32
 27267  003DA0  EFFD  F006         	goto	_ECANSetOperationMode
 27268  003DA4                     __end_of_init_app_ram:
 27269                           	opt stack 0
 27270  003DA4                     PL34:
 27271                           	opt stack 22
 27272  003DA4  0100               	movlb	0	; () banked
 27273  003DA6  2774               	addwf	(??_init_app_ram+4)& (0+255),f,b
 27274  003DA8  0E00               	movlw	0
 27275  003DAA  2375               	addwfc	(??_init_app_ram+5)& (0+255),f,b
 27276  003DAC  C074  F062         	movff	??_init_app_ram+4,?__CANIDToRegs+2
 27277  003DB0  C075  F063         	movff	??_init_app_ram+5,?__CANIDToRegs+3
 27278  003DB4  BF63               	btfsc	(?__CANIDToRegs+3)& (0+255),7,b
 27279  003DB6  0EFF               	movlw	-1
 27280  003DB8  6F64               	movwf	(?__CANIDToRegs+4)& (0+255),b
 27281  003DBA  6F65               	movwf	(?__CANIDToRegs+5)& (0+255),b
 27282  003DBC  0E01               	movlw	1
 27283  003DBE  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 27284  003DC0  0C01               	retlw	1
 27285  003DC2                     __end_ofPL34:
 27286                           	opt stack 0
 27287  003DC2                     PL60:
 27288                           	opt stack 22
 27289  003DC2  0100               	movlb	0	; () banked
 27290  003DC4  2772               	addwf	(??_init_app_ram+2)& (0+255),f,b
 27291  003DC6  0E00               	movlw	0
 27292  003DC8  2373               	addwfc	(??_init_app_ram+3)& (0+255),f,b
 27293  003DCA  5170               	movf	??_init_app_ram& (0+255),w,b
 27294  003DCC  2572               	addwf	(??_init_app_ram+2)& (0+255),w,b
 27295  003DCE  6F74               	movwf	(??_init_app_ram+4)& (0+255),b
 27296  003DD0  5171               	movf	(??_init_app_ram+1)& (0+255),w,b
 27297  003DD2  2173               	addwfc	(??_init_app_ram+3)& (0+255),w,b
 27298  003DD4  6F75               	movwf	(??_init_app_ram+5)& (0+255),b
 27299  003DD6  6A20               	clrf	?_Read_b_eep+1,c
 27300  003DD8  0012               	return	
 27301  003DDA                     __end_ofPL60:
 27302                           	opt stack 0
 27303                           tblptru	equ	0xFF8
 27304                           tblptrh	equ	0xFF7
 27305                           tblptrl	equ	0xFF6
 27306                           tablat	equ	0xFF5
 27307                           prodh	equ	0xFF4
 27308                           prodl	equ	0xFF3
 27309                           intcon	equ	0xFF2
 27310                           indf0	equ	0xFEF
 27311                           postinc0	equ	0xFEE
 27312                           fsr0h	equ	0xFEA
 27313                           fsr0l	equ	0xFE9
 27314                           wreg	equ	0xFE8
 27315                           indf1	equ	0xFE7
 27316                           postinc1	equ	0xFE6
 27317                           postdec1	equ	0xFE5
 27318                           fsr1h	equ	0xFE2
 27319                           fsr1l	equ	0xFE1
 27320                           indf2	equ	0xFDF
 27321                           postinc2	equ	0xFDE
 27322                           postdec2	equ	0xFDD
 27323                           plusw2	equ	0xFDB
 27324                           fsr2h	equ	0xFDA
 27325                           fsr2l	equ	0xFD9
 27326                           status	equ	0xFD8
 27327                           
 27328 ;; *************** function __CANIDToRegs *****************
 27329 ;; Defined at:
 27330 ;;		line 1101 in file "ECAN.c"
 27331 ;; Parameters:    Size  Location     Type
 27332 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 27333 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 27334 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 27335 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 27336 ;;  val             4    2[BANK0 ] unsigned long 
 27337 ;;  type            1    6[BANK0 ] unsigned char 
 27338 ;; Auto vars:     Size  Location     Type
 27339 ;;  Value           1   34[COMRAM] PTR struct _CAN_MESSAGE_
 27340 ;;		 -> _CANIDToRegs@val(4), 
 27341 ;; Return value:  Size  Location     Type
 27342 ;;		None               void
 27343 ;; Registers used:
 27344 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27345 ;; Tracked objects:
 27346 ;;		On entry : F/0
 27347 ;;		On exit  : F/0
 27348 ;;		Unchanged: 0/0
 27349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27350 ;;      Params:         0       7       0       0       0       0       0
 27351 ;;      Locals:         1       0       0       0       0       0       0
 27352 ;;      Temps:          2       0       0       0       0       0       0
 27353 ;;      Totals:         3       7       0       0       0       0       0
 27354 ;;Total ram usage:       10 bytes
 27355 ;; Hardware stack levels used:    1
 27356 ;; Hardware stack levels required when called:    3
 27357 ;; This function calls:
 27358 ;;		Nothing
 27359 ;; This function is called by:
 27360 ;;		_init_app_ram
 27361 ;;		_doModeVerbose
 27362 ;;		_ECANSendMessage
 27363 ;; This function uses a non-reentrant model
 27364 ;;
 27365                           
 27366                           	psect	text78
 27367  002B10                     __ptext78:
 27368                           	opt stack 0
 27369  002B10                     __CANIDToRegs:
 27370                           	opt stack 23
 27371                           
 27372                           ; BSR set to: 0
 27373                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 27374                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 27375                           
 27376                           ;incstack = 0
 27377                           ;incstack = 0
 27378  002B10  0E62               	movlw	low __CANIDToRegs@val
 27379  002B12  6E23               	movwf	__CANIDToRegs@Value,c
 27380                           
 27381                           ; BSR set to: 0
 27382                           ;ECAN.c: 1106: if ( type == 0 )
 27383  002B14  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 27384  002B16  D022               	goto	l16058
 27385                           
 27386                           ; BSR set to: 0
 27387                           ;ECAN.c: 1107: {
 27388                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 27389  002B18  5023               	movf	__CANIDToRegs@Value,w,c
 27390  002B1A  6ED9               	movwf	fsr2l,c
 27391  002B1C  6ADA               	clrf	fsr2h,c
 27392  002B1E  50DF               	movf	indf2,w,c
 27393  002B20  6E21               	movwf	??__CANIDToRegs& (0+255),c
 27394  002B22  90D8               	bcf	status,0,c
 27395  002B24  3221               	rrcf	??__CANIDToRegs,f,c
 27396  002B26  90D8               	bcf	status,0,c
 27397  002B28  3221               	rrcf	??__CANIDToRegs,f,c
 27398  002B2A  90D8               	bcf	status,0,c
 27399  002B2C  3021               	rrcf	??__CANIDToRegs,w,c
 27400                           
 27401                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 27402  002B2E  D858               	call	PL58	;call to abstracted procedure
 27403  002B30  2AD9               	incf	fsr2l,f,c
 27404  002B32  6ADA               	clrf	fsr2h,c
 27405  002B34  D871               	call	PL128	;call to abstracted procedure
 27406  002B36                     u20525:
 27407  002B36  90D8               	bcf	status,0,c
 27408  002B38  3621               	rlcf	??__CANIDToRegs,f,c
 27409  002B3A  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 27410  002B3C  D7FC               	goto	u20525
 27411  002B3E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27412                           
 27413                           ; BSR set to: 0
 27414                           ;ECAN.c: 1111: ptr++;
 27415                           
 27416                           ; BSR set to: 0
 27417                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 27418  002B42  D844               	call	PL32	;call to abstracted procedure
 27419  002B44  D869               	call	PL128	;call to abstracted procedure
 27420  002B46                     u20535:
 27421  002B46  90D8               	bcf	status,0,c
 27422  002B48  3621               	rlcf	??__CANIDToRegs,f,c
 27423  002B4A  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 27424  002B4C  D7FC               	goto	u20535
 27425  002B4E  5021               	movf	??__CANIDToRegs,w,c
 27426  002B50  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27427  002B54  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 27428  002B58  6EDF               	movwf	indf2,c
 27429                           
 27430                           ;ECAN.c: 1113: }
 27431  002B5A  D037               	goto	l1604
 27432  002B5C                     l16058:
 27433                           
 27434                           ; BSR set to: 0
 27435                           ;ECAN.c: 1114: else
 27436                           ;ECAN.c: 1115: {
 27437                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 27438  002B5C  D854               	call	PL90	;call to abstracted procedure
 27439  002B5E  0E05               	movlw	5
 27440  002B60  6E22               	movwf	(??__CANIDToRegs+1)& (0+255),c
 27441  002B62                     u20545:
 27442  002B62  90D8               	bcf	status,0,c
 27443  002B64  3221               	rrcf	??__CANIDToRegs,f,c
 27444  002B66  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 27445  002B68  D7FC               	goto	u20545
 27446  002B6A  5021               	movf	??__CANIDToRegs,w,c
 27447                           
 27448                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 27449  002B6C  D839               	call	PL58	;call to abstracted procedure
 27450  002B6E  0E03               	movlw	3
 27451  002B70  D840               	call	PL80	;call to abstracted procedure
 27452  002B72  3621               	rlcf	??__CANIDToRegs,f,c
 27453  002B74  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27454                           
 27455                           ; BSR set to: 0
 27456                           ;ECAN.c: 1119: ptr++;
 27457                           
 27458                           ; BSR set to: 0
 27459                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 27460  002B78  D829               	call	PL32	;call to abstracted procedure
 27461  002B7A  0E02               	movlw	2
 27462  002B7C  D83A               	call	PL80	;call to abstracted procedure
 27463  002B7E  3421               	rlcf	??__CANIDToRegs,w,c
 27464  002B80  0BE0               	andlw	224
 27465  002B82  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27466  002B86  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 27467  002B8A  6EDF               	movwf	indf2,c
 27468                           
 27469                           ; BSR set to: 0
 27470                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 27471  002B8C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27472  002B90  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 27473  002B94  0E00               	movlw	0
 27474  002B96  86DB               	bsf	plusw2,3,c
 27475                           
 27476                           ; BSR set to: 0
 27477                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 27478  002B98  D836               	call	PL90	;call to abstracted procedure
 27479  002B9A  0E03               	movlw	3
 27480  002B9C  1621               	andwf	??__CANIDToRegs,f,c
 27481  002B9E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27482                           
 27483                           ;ECAN.c: 1124: ptr++;
 27484                           
 27485                           ; BSR set to: 0
 27486                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 27487  002BA2  D814               	call	PL32	;call to abstracted procedure
 27488  002BA4  2AD9               	incf	fsr2l,f,c
 27489  002BA6  6ADA               	clrf	fsr2h,c
 27490  002BA8  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 27491  002BAC  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 27492  002BB0  CFDF FFE7          	movff	indf2,indf1
 27493                           
 27494                           ; BSR set to: 0
 27495                           ;ECAN.c: 1126: ptr++;
 27496  002BB4  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 27497  002BB6  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 27498                           
 27499                           ; BSR set to: 0
 27500                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 27501  002BB8  5023               	movf	__CANIDToRegs@Value,w,c
 27502  002BBA  6ED9               	movwf	fsr2l,c
 27503  002BBC  6ADA               	clrf	fsr2h,c
 27504  002BBE  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 27505  002BC2  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 27506  002BC6  CFDF FFE7          	movff	indf2,indf1
 27507  002BCA                     l1604:
 27508                           
 27509                           ; BSR set to: 0
 27510  002BCA  0012               	return	
 27511  002BCC                     __end_of__CANIDToRegs:
 27512                           	opt stack 0
 27513  002BCC                     PL32:
 27514                           	opt stack 23
 27515  002BCC  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 27516  002BD0  5021               	movf	??__CANIDToRegs,w,c
 27517  002BD2  12DF               	iorwf	indf2,f,c
 27518  002BD4  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 27519  002BD6  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 27520  002BD8  5023               	movf	__CANIDToRegs@Value,w,c
 27521  002BDA  6ED9               	movwf	fsr2l,c
 27522  002BDC  6ADA               	clrf	fsr2h,c
 27523  002BDE  0012               	return	
 27524  002BE0                     __end_ofPL32:
 27525                           	opt stack 0
 27526  002BE0                     PL58:
 27527                           	opt stack 23
 27528  002BE0  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 27529  002BE4  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 27530  002BE8  6EDF               	movwf	indf2,c
 27531  002BEA  5023               	movf	__CANIDToRegs@Value,w,c
 27532  002BEC  6ED9               	movwf	fsr2l,c
 27533  002BEE  6ADA               	clrf	fsr2h,c
 27534  002BF0  0012               	return	
 27535  002BF2                     __end_ofPL58:
 27536                           	opt stack 0
 27537  002BF2                     PL80:
 27538                           	opt stack 23
 27539  002BF2  26D9               	addwf	fsr2l,f,c
 27540  002BF4  6ADA               	clrf	fsr2h,c
 27541  002BF6  50DF               	movf	indf2,w,c
 27542  002BF8  6E21               	movwf	??__CANIDToRegs& (0+255),c
 27543  002BFA  90D8               	bcf	status,0,c
 27544  002BFC  3621               	rlcf	??__CANIDToRegs,f,c
 27545  002BFE  90D8               	bcf	status,0,c
 27546  002C00  3621               	rlcf	??__CANIDToRegs,f,c
 27547  002C02  90D8               	bcf	status,0,c
 27548  002C04  0012               	return	
 27549  002C06                     __end_ofPL80:
 27550                           	opt stack 0
 27551  002C06                     PL90:
 27552                           	opt stack 23
 27553  002C06  5023               	movf	__CANIDToRegs@Value,w,c
 27554  002C08  6ED9               	movwf	fsr2l,c
 27555  002C0A  6ADA               	clrf	fsr2h,c
 27556  002C0C  0E02               	movlw	2
 27557  002C0E  26D9               	addwf	fsr2l,f,c
 27558  002C10  6ADA               	clrf	fsr2h,c
 27559  002C12  50DF               	movf	indf2,w,c
 27560  002C14  6E21               	movwf	??__CANIDToRegs& (0+255),c
 27561  002C16  0012               	return	
 27562  002C18                     __end_ofPL90:
 27563                           	opt stack 0
 27564  002C18                     PL128:
 27565                           	opt stack 23
 27566  002C18  50DF               	movf	indf2,w,c
 27567  002C1A  6E21               	movwf	??__CANIDToRegs& (0+255),c
 27568  002C1C  0E05               	movlw	5
 27569  002C1E  6E22               	movwf	(??__CANIDToRegs+1)& (0+255),c
 27570  002C20  0C05               	retlw	5
 27571  002C22                     __end_ofPL128:
 27572                           	opt stack 0
 27573                           tblptru	equ	0xFF8
 27574                           tblptrh	equ	0xFF7
 27575                           tblptrl	equ	0xFF6
 27576                           tablat	equ	0xFF5
 27577                           prodh	equ	0xFF4
 27578                           prodl	equ	0xFF3
 27579                           intcon	equ	0xFF2
 27580                           indf0	equ	0xFEF
 27581                           postinc0	equ	0xFEE
 27582                           fsr0h	equ	0xFEA
 27583                           fsr0l	equ	0xFE9
 27584                           wreg	equ	0xFE8
 27585                           indf1	equ	0xFE7
 27586                           postinc1	equ	0xFE6
 27587                           postdec1	equ	0xFE5
 27588                           fsr1h	equ	0xFE2
 27589                           fsr1l	equ	0xFE1
 27590                           indf2	equ	0xFDF
 27591                           postinc2	equ	0xFDE
 27592                           postdec2	equ	0xFDD
 27593                           plusw2	equ	0xFDB
 27594                           fsr2h	equ	0xFDA
 27595                           fsr2l	equ	0xFD9
 27596                           status	equ	0xFD8
 27597                           
 27598 ;; *************** function _setFilter *****************
 27599 ;; Defined at:
 27600 ;;		line 3141 in file "main.c"
 27601 ;; Parameters:    Size  Location     Type
 27602 ;;  filter          1    wreg     unsigned char 
 27603 ;;  val             4    0[BANK0 ] unsigned long 
 27604 ;;  bPersistent     1    4[BANK0 ] enum E15660
 27605 ;; Auto vars:     Size  Location     Type
 27606 ;;  filter          1   11[BANK0 ] unsigned char 
 27607 ;;  eidl            1   15[BANK0 ] unsigned char 
 27608 ;;  eidh            1   14[BANK0 ] unsigned char 
 27609 ;;  sidl            1   13[BANK0 ] unsigned char 
 27610 ;;  sidh            1   12[BANK0 ] unsigned char 
 27611 ;; Return value:  Size  Location     Type
 27612 ;;		None               void
 27613 ;; Registers used:
 27614 ;;		wreg, status,2, status,0, cstack
 27615 ;; Tracked objects:
 27616 ;;		On entry : D/2
 27617 ;;		On exit  : 0/0
 27618 ;;		Unchanged: 0/0
 27619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27620 ;;      Params:         0       5       0       0       0       0       0
 27621 ;;      Locals:         0       5       0       0       0       0       0
 27622 ;;      Temps:          0       6       0       0       0       0       0
 27623 ;;      Totals:         0      16       0       0       0       0       0
 27624 ;;Total ram usage:       16 bytes
 27625 ;; Hardware stack levels used:    1
 27626 ;; Hardware stack levels required when called:    4
 27627 ;; This function calls:
 27628 ;;		_Busy_eep
 27629 ;;		_Write_b_eep
 27630 ;; This function is called by:
 27631 ;;		_init_app_ram
 27632 ;;		_doModeVerbose
 27633 ;; This function uses a non-reentrant model
 27634 ;;
 27635                           
 27636                           	psect	text79
 27637  003FEE                     __ptext79:
 27638                           	opt stack 0
 27639  003FEE                     _setFilter:
 27640                           	opt stack 24
 27641                           
 27642                           ; BSR set to: 0
 27643                           ;incstack = 0
 27644                           ;incstack = 0
 27645                           ;setFilter@filter stored from wreg
 27646  003FEE  CFE8 F06B          	movff	wreg,setFilter@filter
 27647                           
 27648                           ;main.c: 3142: uint8_t sidh = (long) val >> 21L;
 27649  003FF2  0E15               	movlw	21
 27650  003FF4  0100               	movlb	0	; () banked
 27651  003FF6  6F65               	movwf	??_setFilter& (0+255),b
 27652  003FF8  C060  F066         	movff	setFilter@val,??_setFilter+1
 27653  003FFC  C061  F067         	movff	setFilter@val+1,??_setFilter+2
 27654  004000  C062  F068         	movff	setFilter@val+2,??_setFilter+3
 27655  004004  C063  F069         	movff	setFilter@val+3,??_setFilter+4
 27656  004008                     u20485:
 27657  004008  6765               	tstfsz	??_setFilter& (0+255),b
 27658  00400A  D001               	goto	u20486
 27659  00400C  D007               	goto	u20487
 27660  00400E                     u20486:
 27661  00400E  3569               	rlcf	(??_setFilter+4)& (0+255),w,b
 27662  004010  3369               	rrcf	(??_setFilter+4)& (0+255),f,b
 27663  004012  3368               	rrcf	(??_setFilter+3)& (0+255),f,b
 27664  004014  3367               	rrcf	(??_setFilter+2)& (0+255),f,b
 27665  004016  3366               	rrcf	(??_setFilter+1)& (0+255),f,b
 27666  004018  2F65               	decfsz	??_setFilter& (0+255),f,b
 27667  00401A  D7F6               	goto	u20485
 27668  00401C                     u20487:
 27669  00401C  5166               	movf	(??_setFilter+1)& (0+255),w,b
 27670  00401E  6F6C               	movwf	setFilter@sidh& (0+255),b
 27671                           
 27672                           ;main.c: 3143: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 27673                           ;main.c: 3144: ((long) (val) & 0x03L) |
 27674                           ;main.c: 3145: 0x08;
 27675  004020  C060  F065         	movff	setFilter@val,??_setFilter
 27676  004024  0E03               	movlw	3
 27677  004026  1765               	andwf	??_setFilter& (0+255),f,b
 27678  004028  0E0D               	movlw	13
 27679  00402A  6F66               	movwf	(??_setFilter+1)& (0+255),b
 27680  00402C  C060  F067         	movff	setFilter@val,??_setFilter+2
 27681  004030  C061  F068         	movff	setFilter@val+1,??_setFilter+3
 27682  004034  C062  F069         	movff	setFilter@val+2,??_setFilter+4
 27683  004038  C063  F06A         	movff	setFilter@val+3,??_setFilter+5
 27684  00403C                     u20495:
 27685  00403C  6766               	tstfsz	(??_setFilter+1)& (0+255),b
 27686  00403E  D001               	goto	u20496
 27687  004040  D007               	goto	u20497
 27688  004042                     u20496:
 27689  004042  356A               	rlcf	(??_setFilter+5)& (0+255),w,b
 27690  004044  336A               	rrcf	(??_setFilter+5)& (0+255),f,b
 27691  004046  3369               	rrcf	(??_setFilter+4)& (0+255),f,b
 27692  004048  3368               	rrcf	(??_setFilter+3)& (0+255),f,b
 27693  00404A  3367               	rrcf	(??_setFilter+2)& (0+255),f,b
 27694  00404C  2F66               	decfsz	(??_setFilter+1)& (0+255),f,b
 27695  00404E  D7F6               	goto	u20495
 27696  004050                     u20497:
 27697  004050  5167               	movf	(??_setFilter+2)& (0+255),w,b
 27698  004052  0BE0               	andlw	224
 27699  004054  1165               	iorwf	??_setFilter& (0+255),w,b
 27700  004056  0908               	iorlw	8
 27701  004058  6F6D               	movwf	setFilter@sidl& (0+255),b
 27702                           
 27703                           ; BSR set to: 0
 27704                           ;main.c: 3146: uint8_t eidh = (long) val >> 8L;
 27705  00405A  C061  F06E         	movff	setFilter@val+1,setFilter@eidh
 27706                           
 27707                           ; BSR set to: 0
 27708                           ;main.c: 3147: uint8_t eidl = val;
 27709  00405E  C060  F06F         	movff	setFilter@val,setFilter@eidl
 27710                           
 27711                           ;main.c: 3149: switch (filter) {
 27712  004062  D090               	goto	l16032
 27713  004064                     l1344:
 27714                           
 27715                           ; BSR set to: 0
 27716                           ;main.c: 3152: RXF0SIDH = sidh;
 27717  004064  C06C  FF00         	movff	setFilter@sidh,3840	;volatile
 27718                           
 27719                           ;main.c: 3153: RXF0SIDL = sidl;
 27720  004068  C06D  FF01         	movff	setFilter@sidl,3841	;volatile
 27721                           
 27722                           ;main.c: 3154: RXF0EIDH = eidh;
 27723  00406C  C06E  FF02         	movff	setFilter@eidh,3842	;volatile
 27724                           
 27725                           ;main.c: 3155: RXF0EIDL = eidl;
 27726  004070  C06F  FF03         	movff	setFilter@eidl,3843	;volatile
 27727                           
 27728                           ;main.c: 3156: break;
 27729  004074  D0AA               	goto	l16034
 27730  004076                     l1346:
 27731                           
 27732                           ; BSR set to: 0
 27733                           ;main.c: 3159: RXF1SIDH = sidh;
 27734  004076  C06C  FF04         	movff	setFilter@sidh,3844	;volatile
 27735                           
 27736                           ;main.c: 3160: RXF1SIDL = sidl;
 27737  00407A  C06D  FF05         	movff	setFilter@sidl,3845	;volatile
 27738                           
 27739                           ;main.c: 3161: RXF1EIDH = eidh;
 27740  00407E  C06E  FF06         	movff	setFilter@eidh,3846	;volatile
 27741                           
 27742                           ;main.c: 3162: RXF1EIDL = eidl;
 27743  004082  C06F  FF07         	movff	setFilter@eidl,3847	;volatile
 27744                           
 27745                           ;main.c: 3163: break;
 27746  004086  D0A1               	goto	l16034
 27747  004088                     l1347:
 27748                           
 27749                           ; BSR set to: 0
 27750                           ;main.c: 3166: RXF2SIDH = sidh;
 27751  004088  C06C  FF08         	movff	setFilter@sidh,3848	;volatile
 27752                           
 27753                           ;main.c: 3167: RXF2SIDL = sidl;
 27754  00408C  C06D  FF09         	movff	setFilter@sidl,3849	;volatile
 27755                           
 27756                           ;main.c: 3168: RXF2EIDH = eidh;
 27757  004090  C06E  FF0A         	movff	setFilter@eidh,3850	;volatile
 27758                           
 27759                           ;main.c: 3169: RXF2EIDL = eidl;
 27760  004094  C06F  FF0B         	movff	setFilter@eidl,3851	;volatile
 27761                           
 27762                           ;main.c: 3170: break;
 27763  004098  D098               	goto	l16034
 27764  00409A                     l1348:
 27765                           
 27766                           ; BSR set to: 0
 27767                           ;main.c: 3173: RXF3SIDH = sidh;
 27768  00409A  C06C  FF0C         	movff	setFilter@sidh,3852	;volatile
 27769                           
 27770                           ;main.c: 3174: RXF3SIDL = sidl;
 27771  00409E  C06D  FF0D         	movff	setFilter@sidl,3853	;volatile
 27772                           
 27773                           ;main.c: 3175: RXF3EIDH = eidh;
 27774  0040A2  C06E  FF0E         	movff	setFilter@eidh,3854	;volatile
 27775                           
 27776                           ;main.c: 3176: RXF3EIDL = eidl;
 27777  0040A6  C06F  FF0F         	movff	setFilter@eidl,3855	;volatile
 27778                           
 27779                           ;main.c: 3177: break;
 27780  0040AA  D08F               	goto	l16034
 27781  0040AC                     l1349:
 27782                           
 27783                           ; BSR set to: 0
 27784                           ;main.c: 3180: RXF4SIDH = sidh;
 27785  0040AC  C06C  FF10         	movff	setFilter@sidh,3856	;volatile
 27786                           
 27787                           ;main.c: 3181: RXF4SIDL = sidl;
 27788  0040B0  C06D  FF11         	movff	setFilter@sidl,3857	;volatile
 27789                           
 27790                           ;main.c: 3182: RXF4EIDH = eidh;
 27791  0040B4  C06E  FF12         	movff	setFilter@eidh,3858	;volatile
 27792                           
 27793                           ;main.c: 3183: RXF4EIDL = eidl;
 27794  0040B8  C06F  FF13         	movff	setFilter@eidl,3859	;volatile
 27795                           
 27796                           ;main.c: 3184: break;
 27797  0040BC  D086               	goto	l16034
 27798  0040BE                     l1350:
 27799                           
 27800                           ; BSR set to: 0
 27801                           ;main.c: 3187: RXF5SIDH = sidh;
 27802  0040BE  C06C  FF14         	movff	setFilter@sidh,3860	;volatile
 27803                           
 27804                           ;main.c: 3188: RXF5SIDL = sidl;
 27805  0040C2  C06D  FF15         	movff	setFilter@sidl,3861	;volatile
 27806                           
 27807                           ;main.c: 3189: RXF5EIDH = eidh;
 27808  0040C6  C06E  FF16         	movff	setFilter@eidh,3862	;volatile
 27809                           
 27810                           ;main.c: 3190: RXF5EIDL = eidl;
 27811  0040CA  C06F  FF17         	movff	setFilter@eidl,3863	;volatile
 27812                           
 27813                           ;main.c: 3191: break;
 27814  0040CE  D07D               	goto	l16034
 27815  0040D0                     l1351:
 27816                           
 27817                           ; BSR set to: 0
 27818                           ;main.c: 3194: RXF6SIDH = sidh;
 27819  0040D0  C06C  FD60         	movff	setFilter@sidh,3424	;volatile
 27820                           
 27821                           ;main.c: 3195: RXF6SIDL = sidl;
 27822  0040D4  C06D  FD61         	movff	setFilter@sidl,3425	;volatile
 27823                           
 27824                           ;main.c: 3196: RXF6EIDH = eidh;
 27825  0040D8  C06E  FD62         	movff	setFilter@eidh,3426	;volatile
 27826                           
 27827                           ;main.c: 3197: RXF6EIDL = eidl;
 27828  0040DC  C06F  FD63         	movff	setFilter@eidl,3427	;volatile
 27829                           
 27830                           ;main.c: 3198: break;
 27831  0040E0  D074               	goto	l16034
 27832  0040E2                     l1352:
 27833                           
 27834                           ; BSR set to: 0
 27835                           ;main.c: 3201: RXF7SIDH = sidh;
 27836  0040E2  C06C  FD64         	movff	setFilter@sidh,3428	;volatile
 27837                           
 27838                           ;main.c: 3202: RXF7SIDL = sidl;
 27839  0040E6  C06D  FD65         	movff	setFilter@sidl,3429	;volatile
 27840                           
 27841                           ;main.c: 3203: RXF7EIDH = eidh;
 27842  0040EA  C06E  FD66         	movff	setFilter@eidh,3430	;volatile
 27843                           
 27844                           ;main.c: 3204: RXF7EIDL = eidl;
 27845  0040EE  C06F  FD67         	movff	setFilter@eidl,3431	;volatile
 27846                           
 27847                           ;main.c: 3205: break;
 27848  0040F2  D06B               	goto	l16034
 27849  0040F4                     l1353:
 27850                           
 27851                           ; BSR set to: 0
 27852                           ;main.c: 3208: RXF8SIDH = sidh;
 27853  0040F4  C06C  FD68         	movff	setFilter@sidh,3432	;volatile
 27854                           
 27855                           ;main.c: 3209: RXF8SIDL = sidl;
 27856  0040F8  C06D  FD69         	movff	setFilter@sidl,3433	;volatile
 27857                           
 27858                           ;main.c: 3210: RXF8EIDH = eidh;
 27859  0040FC  C06E  FD6A         	movff	setFilter@eidh,3434	;volatile
 27860                           
 27861                           ;main.c: 3211: RXF8EIDL = eidl;
 27862  004100  C06F  FD6B         	movff	setFilter@eidl,3435	;volatile
 27863                           
 27864                           ;main.c: 3212: break;
 27865  004104  D062               	goto	l16034
 27866  004106                     l1354:
 27867                           
 27868                           ; BSR set to: 0
 27869                           ;main.c: 3215: RXF9SIDH = sidh;
 27870  004106  C06C  FD70         	movff	setFilter@sidh,3440	;volatile
 27871                           
 27872                           ;main.c: 3216: RXF9SIDL = sidl;
 27873  00410A  C06D  FD71         	movff	setFilter@sidl,3441	;volatile
 27874                           
 27875                           ;main.c: 3217: RXF9EIDH = eidh;
 27876  00410E  C06E  FD72         	movff	setFilter@eidh,3442	;volatile
 27877                           
 27878                           ;main.c: 3218: RXF9EIDL = eidl;
 27879  004112  C06F  FD73         	movff	setFilter@eidl,3443	;volatile
 27880                           
 27881                           ;main.c: 3219: break;
 27882  004116  D059               	goto	l16034
 27883  004118                     l1355:
 27884                           
 27885                           ; BSR set to: 0
 27886                           ;main.c: 3222: RXF10SIDH = sidh;
 27887  004118  C06C  FD74         	movff	setFilter@sidh,3444	;volatile
 27888                           
 27889                           ;main.c: 3223: RXF10SIDL = sidl;
 27890  00411C  C06D  FD75         	movff	setFilter@sidl,3445	;volatile
 27891                           
 27892                           ;main.c: 3224: RXF10EIDH = eidh;
 27893  004120  C06E  FD76         	movff	setFilter@eidh,3446	;volatile
 27894                           
 27895                           ;main.c: 3225: RXF10EIDL = eidl;
 27896  004124  C06F  FD77         	movff	setFilter@eidl,3447	;volatile
 27897                           
 27898                           ;main.c: 3226: break;
 27899  004128  D050               	goto	l16034
 27900  00412A                     l1356:
 27901                           
 27902                           ; BSR set to: 0
 27903                           ;main.c: 3229: RXF11SIDH = sidh;
 27904  00412A  C06C  FD78         	movff	setFilter@sidh,3448	;volatile
 27905                           
 27906                           ;main.c: 3230: RXF11SIDL = sidl;
 27907  00412E  C06D  FD79         	movff	setFilter@sidl,3449	;volatile
 27908                           
 27909                           ;main.c: 3231: RXF11EIDH = eidh;
 27910  004132  C06E  FD7A         	movff	setFilter@eidh,3450	;volatile
 27911                           
 27912                           ;main.c: 3232: RXF11EIDL = eidl;
 27913  004136  C06F  FD7B         	movff	setFilter@eidl,3451	;volatile
 27914                           
 27915                           ;main.c: 3233: break;
 27916  00413A  D047               	goto	l16034
 27917  00413C                     l1357:
 27918                           
 27919                           ; BSR set to: 0
 27920                           ;main.c: 3236: RXF12SIDH = sidh;
 27921  00413C  C06C  FD80         	movff	setFilter@sidh,3456	;volatile
 27922                           
 27923                           ;main.c: 3237: RXF12SIDL = sidl;
 27924  004140  C06D  FD81         	movff	setFilter@sidl,3457	;volatile
 27925                           
 27926                           ;main.c: 3238: RXF12EIDH = eidh;
 27927  004144  C06E  FD82         	movff	setFilter@eidh,3458	;volatile
 27928                           
 27929                           ;main.c: 3239: RXF12EIDL = eidl;
 27930  004148  C06F  FD83         	movff	setFilter@eidl,3459	;volatile
 27931                           
 27932                           ;main.c: 3240: break;
 27933  00414C  D03E               	goto	l16034
 27934  00414E                     l1358:
 27935                           
 27936                           ; BSR set to: 0
 27937                           ;main.c: 3243: RXF13SIDH = sidh;
 27938  00414E  C06C  FD84         	movff	setFilter@sidh,3460	;volatile
 27939                           
 27940                           ;main.c: 3244: RXF13SIDL = sidl;
 27941  004152  C06D  FD85         	movff	setFilter@sidl,3461	;volatile
 27942                           
 27943                           ;main.c: 3245: RXF13EIDH = eidh;
 27944  004156  C06E  FD86         	movff	setFilter@eidh,3462	;volatile
 27945                           
 27946                           ;main.c: 3246: RXF13EIDL = eidl;
 27947  00415A  C06F  FD87         	movff	setFilter@eidl,3463	;volatile
 27948                           
 27949                           ;main.c: 3247: break;
 27950  00415E  D035               	goto	l16034
 27951  004160                     l1359:
 27952                           
 27953                           ; BSR set to: 0
 27954                           ;main.c: 3250: RXF14SIDH = sidh;
 27955  004160  C06C  FD88         	movff	setFilter@sidh,3464	;volatile
 27956                           
 27957                           ;main.c: 3251: RXF14SIDL = sidl;
 27958  004164  C06D  FD89         	movff	setFilter@sidl,3465	;volatile
 27959                           
 27960                           ;main.c: 3252: RXF14EIDH = eidh;
 27961  004168  C06E  FD8A         	movff	setFilter@eidh,3466	;volatile
 27962                           
 27963                           ;main.c: 3253: RXF14EIDL = eidl;
 27964  00416C  C06F  FD8B         	movff	setFilter@eidl,3467	;volatile
 27965                           
 27966                           ;main.c: 3254: break;
 27967  004170  D02C               	goto	l16034
 27968  004172                     l1360:
 27969                           
 27970                           ; BSR set to: 0
 27971                           ;main.c: 3257: RXF15SIDH = sidh;
 27972  004172  C06C  FD90         	movff	setFilter@sidh,3472	;volatile
 27973                           
 27974                           ;main.c: 3258: RXF15SIDL = sidl;
 27975  004176  C06D  FD91         	movff	setFilter@sidl,3473	;volatile
 27976                           
 27977                           ;main.c: 3259: RXF15EIDH = eidh;
 27978  00417A  C06E  FD92         	movff	setFilter@eidh,3474	;volatile
 27979                           
 27980                           ;main.c: 3260: RXF15EIDL = eidl;
 27981  00417E  C06F  FD93         	movff	setFilter@eidl,3475	;volatile
 27982                           
 27983                           ;main.c: 3261: break;
 27984  004182  D023               	goto	l16034
 27985  004184                     l16032:
 27986                           
 27987                           ; BSR set to: 0
 27988  004184  516B               	movf	setFilter@filter& (0+255),w,b
 27989                           
 27990                           ; Switch size 1, requested type "space"
 27991                           ; Number of cases is 16, Range of values is 0 to 15
 27992                           ; switch strategies available:
 27993                           ; Name         Instructions Cycles
 27994                           ; simple_byte           49    25 (average)
 27995                           ;	Chosen strategy is simple_byte
 27996  004186  E101 D76D          	bz	l1344
 27997  00418A  0A01               	xorlw	1	; case 1
 27998  00418C  E101 D773          	bz	l1346
 27999  004190  0A03               	xorlw	3	; case 2
 28000  004192  E101 D779          	bz	l1347
 28001  004196  0A01               	xorlw	1	; case 3
 28002  004198  E080               	bz	l1348
 28003  00419A  0A07               	xorlw	7	; case 4
 28004  00419C  E087               	bz	l1349
 28005  00419E  0A01               	xorlw	1	; case 5
 28006  0041A0  E08E               	bz	l1350
 28007  0041A2  0A03               	xorlw	3	; case 6
 28008  0041A4  E095               	bz	l1351
 28009  0041A6  0A01               	xorlw	1	; case 7
 28010  0041A8  E09C               	bz	l1352
 28011  0041AA  0A0F               	xorlw	15	; case 8
 28012  0041AC  E0A3               	bz	l1353
 28013  0041AE  0A01               	xorlw	1	; case 9
 28014  0041B0  E0AA               	bz	l1354
 28015  0041B2  0A03               	xorlw	3	; case 10
 28016  0041B4  E0B1               	bz	l1355
 28017  0041B6  0A01               	xorlw	1	; case 11
 28018  0041B8  E0B8               	bz	l1356
 28019  0041BA  0A07               	xorlw	7	; case 12
 28020  0041BC  E0BF               	bz	l1357
 28021  0041BE  0A01               	xorlw	1	; case 13
 28022  0041C0  E0C6               	bz	l1358
 28023  0041C2  0A03               	xorlw	3	; case 14
 28024  0041C4  E0CD               	bz	l1359
 28025  0041C6  0A01               	xorlw	1	; case 15
 28026  0041C8  E0D4               	bz	l1360
 28027  0041CA                     l16034:
 28028                           
 28029                           ; BSR set to: 0
 28030                           ;main.c: 3264: if ( bPersistent ) {
 28031  0041CA  5164               	movf	setFilter@bPersistent& (0+255),w,b
 28032  0041CC  E034               	bz	l1362
 28033                           
 28034                           ; BSR set to: 0
 28035                           ;main.c: 3265: (Busy_eep(), Write_b_eep(0x20 + 0 + 4*filter,( ( id >> 24 ) & 0xff )));
 28036  0041CE  ECB3  F006         	call	_Busy_eep	;wreg free
 28037  0041D2  D832               	call	PL12	;call to abstracted procedure
 28038  0041D4  0E20               	movlw	32
 28039  0041D6  2565               	addwf	??_setFilter& (0+255),w,b
 28040  0041D8  6E1F               	movwf	?_Write_b_eep,c
 28041  0041DA  0E00               	movlw	0
 28042  0041DC  2166               	addwfc	(??_setFilter+1)& (0+255),w,b
 28043  0041DE  6E20               	movwf	?_Write_b_eep+1,c
 28044  0041E0  C039  F021         	movff	_id+3,?_Write_b_eep+2
 28045  0041E4  ECB9  F007         	call	_Write_b_eep	;wreg free
 28046                           
 28047                           ;main.c: 3266: (Busy_eep(), Write_b_eep(0x20 + 1 + 4*filter,( ( id >> 16 ) & 0xff )));
 28048  0041E8  ECB3  F006         	call	_Busy_eep	;wreg free
 28049  0041EC  D825               	call	PL12	;call to abstracted procedure
 28050  0041EE  0E21               	movlw	33
 28051  0041F0  2565               	addwf	??_setFilter& (0+255),w,b
 28052  0041F2  6E1F               	movwf	?_Write_b_eep,c
 28053  0041F4  0E00               	movlw	0
 28054  0041F6  2166               	addwfc	(??_setFilter+1)& (0+255),w,b
 28055  0041F8  6E20               	movwf	?_Write_b_eep+1,c
 28056  0041FA  C038  F021         	movff	_id+2,?_Write_b_eep+2
 28057  0041FE  ECB9  F007         	call	_Write_b_eep	;wreg free
 28058                           
 28059                           ;main.c: 3267: (Busy_eep(), Write_b_eep(0x20 + 2 + 4*filter,( ( id >> 8 ) & 0xff )));
 28060  004202  ECB3  F006         	call	_Busy_eep	;wreg free
 28061  004206  D818               	call	PL12	;call to abstracted procedure
 28062  004208  0E22               	movlw	34
 28063  00420A  2565               	addwf	??_setFilter& (0+255),w,b
 28064  00420C  6E1F               	movwf	?_Write_b_eep,c
 28065  00420E  0E00               	movlw	0
 28066  004210  2166               	addwfc	(??_setFilter+1)& (0+255),w,b
 28067  004212  6E20               	movwf	?_Write_b_eep+1,c
 28068  004214  C037  F021         	movff	_id+1,?_Write_b_eep+2
 28069  004218  ECB9  F007         	call	_Write_b_eep	;wreg free
 28070                           
 28071                           ;main.c: 3268: (Busy_eep(), Write_b_eep(0x20 + 3 + 4*filter,( id & 0xff )));
 28072  00421C  ECB3  F006         	call	_Busy_eep	;wreg free
 28073  004220  D80B               	call	PL12	;call to abstracted procedure
 28074  004222  0E23               	movlw	35
 28075  004224  2565               	addwf	??_setFilter& (0+255),w,b
 28076  004226  6E1F               	movwf	?_Write_b_eep,c
 28077  004228  0E00               	movlw	0
 28078  00422A  2166               	addwfc	(??_setFilter+1)& (0+255),w,b
 28079  00422C  6E20               	movwf	?_Write_b_eep+1,c
 28080  00422E  C036  F021         	movff	_id,?_Write_b_eep+2
 28081  004232  ECB9  F007         	call	_Write_b_eep	;wreg free
 28082  004236                     l1362:
 28083  004236  0012               	return	
 28084  004238                     __end_of_setFilter:
 28085                           	opt stack 0
 28086  004238                     PL12:
 28087                           	opt stack 24
 28088  004238  0100               	movlb	0	; () banked
 28089  00423A  516B               	movf	setFilter@filter& (0+255),w,b
 28090  00423C  6F65               	movwf	??_setFilter& (0+255),b
 28091  00423E  6B66               	clrf	(??_setFilter+1)& (0+255),b
 28092  004240  90D8               	bcf	status,0,c
 28093  004242  3765               	rlcf	??_setFilter& (0+255),f,b
 28094  004244  3766               	rlcf	(??_setFilter+1)& (0+255),f,b
 28095  004246  90D8               	bcf	status,0,c
 28096  004248  3765               	rlcf	??_setFilter& (0+255),f,b
 28097  00424A  3766               	rlcf	(??_setFilter+1)& (0+255),f,b
 28098  00424C  0012               	return	
 28099  00424E                     __end_ofPL12:
 28100                           	opt stack 0
 28101                           tblptru	equ	0xFF8
 28102                           tblptrh	equ	0xFF7
 28103                           tblptrl	equ	0xFF6
 28104                           tablat	equ	0xFF5
 28105                           prodh	equ	0xFF4
 28106                           prodl	equ	0xFF3
 28107                           intcon	equ	0xFF2
 28108                           indf0	equ	0xFEF
 28109                           postinc0	equ	0xFEE
 28110                           fsr0h	equ	0xFEA
 28111                           fsr0l	equ	0xFE9
 28112                           wreg	equ	0xFE8
 28113                           indf1	equ	0xFE7
 28114                           postinc1	equ	0xFE6
 28115                           postdec1	equ	0xFE5
 28116                           fsr1h	equ	0xFE2
 28117                           fsr1l	equ	0xFE1
 28118                           indf2	equ	0xFDF
 28119                           postinc2	equ	0xFDE
 28120                           postdec2	equ	0xFDD
 28121                           plusw2	equ	0xFDB
 28122                           fsr2h	equ	0xFDA
 28123                           fsr2l	equ	0xFD9
 28124                           status	equ	0xFD8
 28125                           
 28126 ;; *************** function _Write_b_eep *****************
 28127 ;; Defined at:
 28128 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 28129 ;; Parameters:    Size  Location     Type
 28130 ;;  badd            2   30[COMRAM] unsigned int 
 28131 ;;  bdat            1   32[COMRAM] unsigned char 
 28132 ;; Auto vars:     Size  Location     Type
 28133 ;;  GIE_BIT_VAL     1   33[COMRAM] unsigned char 
 28134 ;; Return value:  Size  Location     Type
 28135 ;;		None               void
 28136 ;; Registers used:
 28137 ;;		wreg, status,2
 28138 ;; Tracked objects:
 28139 ;;		On entry : 0/1
 28140 ;;		On exit  : 0/0
 28141 ;;		Unchanged: 0/0
 28142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28143 ;;      Params:         3       0       0       0       0       0       0
 28144 ;;      Locals:         1       0       0       0       0       0       0
 28145 ;;      Temps:          0       0       0       0       0       0       0
 28146 ;;      Totals:         4       0       0       0       0       0       0
 28147 ;;Total ram usage:        4 bytes
 28148 ;; Hardware stack levels used:    1
 28149 ;; Hardware stack levels required when called:    3
 28150 ;; This function calls:
 28151 ;;		Nothing
 28152 ;; This function is called by:
 28153 ;;		_init_app_eeprom
 28154 ;;		_doModeVerbose
 28155 ;;		_doModeSLCAN
 28156 ;;		_setFilter
 28157 ;; This function uses a non-reentrant model
 28158 ;;
 28159                           
 28160                           	psect	text80
 28161  000F72                     __ptext80:
 28162                           	opt stack 0
 28163  000F72                     _Write_b_eep:
 28164                           	opt stack 25
 28165                           
 28166                           ;incstack = 0
 28167                           ;incstack = 0
 28168  000F72  C01F  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 28169  000F76  C021  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 28170  000F7A  9EA6               	bcf	4006,7,c	;volatile
 28171  000F7C  9CA6               	bcf	4006,6,c	;volatile
 28172  000F7E  84A6               	bsf	4006,2,c	;volatile
 28173  000F80  0E00               	movlw	0
 28174  000F82  BEF2               	btfsc	intcon,7,c	;volatile
 28175  000F84  0E01               	movlw	1
 28176  000F86  6E22               	movwf	Write_b_eep@GIE_BIT_VAL,c
 28177  000F88  9EF2               	bcf	intcon,7,c	;volatile
 28178  000F8A  0E55               	movlw	85
 28179  000F8C  6EA7               	movwf	4007,c	;volatile
 28180  000F8E  0EAA               	movlw	170
 28181  000F90  6EA7               	movwf	4007,c	;volatile
 28182  000F92  82A6               	bsf	4006,1,c	;volatile
 28183  000F94                     l1881:
 28184  000F94  B2A6               	btfsc	4006,1,c	;volatile
 28185  000F96  D7FE               	goto	l1881
 28186  000F98  B022               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 28187  000F9A  D002               	bra	u20595
 28188  000F9C  9EF2               	bcf	intcon,7,c	;volatile
 28189  000F9E  D001               	bra	u20596
 28190  000FA0                     u20595:
 28191  000FA0  8EF2               	bsf	intcon,7,c	;volatile
 28192  000FA2                     u20596:
 28193  000FA2  94A6               	bcf	4006,2,c	;volatile
 28194  000FA4  0012               	return	
 28195  000FA6                     __end_of_Write_b_eep:
 28196                           	opt stack 0
 28197                           tblptru	equ	0xFF8
 28198                           tblptrh	equ	0xFF7
 28199                           tblptrl	equ	0xFF6
 28200                           tablat	equ	0xFF5
 28201                           prodh	equ	0xFF4
 28202                           prodl	equ	0xFF3
 28203                           intcon	equ	0xFF2
 28204                           indf0	equ	0xFEF
 28205                           postinc0	equ	0xFEE
 28206                           fsr0h	equ	0xFEA
 28207                           fsr0l	equ	0xFE9
 28208                           wreg	equ	0xFE8
 28209                           indf1	equ	0xFE7
 28210                           postinc1	equ	0xFE6
 28211                           postdec1	equ	0xFE5
 28212                           fsr1h	equ	0xFE2
 28213                           fsr1l	equ	0xFE1
 28214                           indf2	equ	0xFDF
 28215                           postinc2	equ	0xFDE
 28216                           postdec2	equ	0xFDD
 28217                           plusw2	equ	0xFDB
 28218                           fsr2h	equ	0xFDA
 28219                           fsr2l	equ	0xFD9
 28220                           status	equ	0xFD8
 28221                           
 28222 ;; *************** function _Busy_eep *****************
 28223 ;; Defined at:
 28224 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 28225 ;; Parameters:    Size  Location     Type
 28226 ;;		None
 28227 ;; Auto vars:     Size  Location     Type
 28228 ;;		None
 28229 ;; Return value:  Size  Location     Type
 28230 ;;		None               void
 28231 ;; Registers used:
 28232 ;;		None
 28233 ;; Tracked objects:
 28234 ;;		On entry : 0/1
 28235 ;;		On exit  : 0/0
 28236 ;;		Unchanged: 0/0
 28237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28238 ;;      Params:         0       0       0       0       0       0       0
 28239 ;;      Locals:         0       0       0       0       0       0       0
 28240 ;;      Temps:          0       0       0       0       0       0       0
 28241 ;;      Totals:         0       0       0       0       0       0       0
 28242 ;;Total ram usage:        0 bytes
 28243 ;; Hardware stack levels used:    1
 28244 ;; Hardware stack levels required when called:    3
 28245 ;; This function calls:
 28246 ;;		Nothing
 28247 ;; This function is called by:
 28248 ;;		_init_app_eeprom
 28249 ;;		_doModeVerbose
 28250 ;;		_doModeSLCAN
 28251 ;;		_setFilter
 28252 ;; This function uses a non-reentrant model
 28253 ;;
 28254                           
 28255                           	psect	text81
 28256  000D66                     __ptext81:
 28257                           	opt stack 0
 28258  000D66                     _Busy_eep:
 28259                           	opt stack 25
 28260  000D66                     l1856:
 28261  000D66  A2A6               	btfss	4006,1,c	;volatile
 28262  000D68  0012               	return	
 28263  000D6A  D7FD               	goto	l1856
 28264  000D6C                     __end_of_Busy_eep:
 28265                           	opt stack 0
 28266                           tblptru	equ	0xFF8
 28267                           tblptrh	equ	0xFF7
 28268                           tblptrl	equ	0xFF6
 28269                           tablat	equ	0xFF5
 28270                           prodh	equ	0xFF4
 28271                           prodl	equ	0xFF3
 28272                           intcon	equ	0xFF2
 28273                           indf0	equ	0xFEF
 28274                           postinc0	equ	0xFEE
 28275                           fsr0h	equ	0xFEA
 28276                           fsr0l	equ	0xFE9
 28277                           wreg	equ	0xFE8
 28278                           indf1	equ	0xFE7
 28279                           postinc1	equ	0xFE6
 28280                           postdec1	equ	0xFE5
 28281                           fsr1h	equ	0xFE2
 28282                           fsr1l	equ	0xFE1
 28283                           indf2	equ	0xFDF
 28284                           postinc2	equ	0xFDE
 28285                           postdec2	equ	0xFDD
 28286                           plusw2	equ	0xFDB
 28287                           fsr2h	equ	0xFDA
 28288                           fsr2l	equ	0xFD9
 28289                           status	equ	0xFD8
 28290                           
 28291 ;; *************** function _ECANSetOperationMode *****************
 28292 ;; Defined at:
 28293 ;;		line 1014 in file "ECAN.c"
 28294 ;; Parameters:    Size  Location     Type
 28295 ;;  mode            1    wreg     enum E16346
 28296 ;; Auto vars:     Size  Location     Type
 28297 ;;  mode            1   30[COMRAM] enum E16346
 28298 ;; Return value:  Size  Location     Type
 28299 ;;		None               void
 28300 ;; Registers used:
 28301 ;;		wreg, status,2, status,0
 28302 ;; Tracked objects:
 28303 ;;		On entry : 0/1
 28304 ;;		On exit  : 0/0
 28305 ;;		Unchanged: 0/0
 28306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28307 ;;      Params:         0       0       0       0       0       0       0
 28308 ;;      Locals:         1       0       0       0       0       0       0
 28309 ;;      Temps:          0       0       0       0       0       0       0
 28310 ;;      Totals:         1       0       0       0       0       0       0
 28311 ;;Total ram usage:        1 bytes
 28312 ;; Hardware stack levels used:    1
 28313 ;; Hardware stack levels required when called:    3
 28314 ;; This function calls:
 28315 ;;		Nothing
 28316 ;; This function is called by:
 28317 ;;		_main
 28318 ;;		_init_app_ram
 28319 ;;		_doModeVerbose
 28320 ;;		_doModeVscp
 28321 ;;		_doModeSLCAN
 28322 ;;		_ECANInitialize
 28323 ;; This function uses a non-reentrant model
 28324 ;;
 28325                           
 28326                           	psect	text82
 28327  000DFA                     __ptext82:
 28328                           	opt stack 0
 28329  000DFA                     _ECANSetOperationMode:
 28330                           	opt stack 25
 28331                           
 28332                           ;incstack = 0
 28333                           ;incstack = 0
 28334                           ;ECANSetOperationMode@mode stored from wreg
 28335  000DFA  CFE8 F01F          	movff	wreg,ECANSetOperationMode@mode
 28336                           
 28337                           ;ECAN.c: 1015: CANCON &= 0x1F;
 28338  000DFE  0E1F               	movlw	31
 28339  000E00  166F               	andwf	3951,f,c	;volatile
 28340                           
 28341                           ;ECAN.c: 1016: CANCON |= mode;
 28342  000E02  501F               	movf	ECANSetOperationMode@mode,w,c
 28343  000E04  126F               	iorwf	3951,f,c	;volatile
 28344  000E06                     l14700:
 28345  000E06  506F               	movf	3951,w,c	;volatile
 28346  000E08  0BE0               	andlw	224
 28347  000E0A  181F               	xorwf	ECANSetOperationMode@mode,w,c
 28348  000E0C  B4D8               	btfsc	status,2,c
 28349  000E0E  0012               	return	
 28350  000E10  D7FA               	goto	l14700
 28351  000E12                     __end_of_ECANSetOperationMode:
 28352                           	opt stack 0
 28353                           tblptru	equ	0xFF8
 28354                           tblptrh	equ	0xFF7
 28355                           tblptrl	equ	0xFF6
 28356                           tablat	equ	0xFF5
 28357                           prodh	equ	0xFF4
 28358                           prodl	equ	0xFF3
 28359                           intcon	equ	0xFF2
 28360                           indf0	equ	0xFEF
 28361                           postinc0	equ	0xFEE
 28362                           fsr0h	equ	0xFEA
 28363                           fsr0l	equ	0xFE9
 28364                           wreg	equ	0xFE8
 28365                           indf1	equ	0xFE7
 28366                           postinc1	equ	0xFE6
 28367                           postdec1	equ	0xFE5
 28368                           fsr1h	equ	0xFE2
 28369                           fsr1l	equ	0xFE1
 28370                           indf2	equ	0xFDF
 28371                           postinc2	equ	0xFDE
 28372                           postdec2	equ	0xFDD
 28373                           plusw2	equ	0xFDB
 28374                           fsr2h	equ	0xFDA
 28375                           fsr2l	equ	0xFD9
 28376                           status	equ	0xFD8
 28377                           
 28378 ;; *************** function _Read_b_eep *****************
 28379 ;; Defined at:
 28380 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 28381 ;; Parameters:    Size  Location     Type
 28382 ;;  badd            2   30[COMRAM] unsigned int 
 28383 ;; Auto vars:     Size  Location     Type
 28384 ;;		None
 28385 ;; Return value:  Size  Location     Type
 28386 ;;                  1    wreg      unsigned char 
 28387 ;; Registers used:
 28388 ;;		wreg, status,2
 28389 ;; Tracked objects:
 28390 ;;		On entry : 0/1
 28391 ;;		On exit  : 0/0
 28392 ;;		Unchanged: 0/0
 28393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28394 ;;      Params:         2       0       0       0       0       0       0
 28395 ;;      Locals:         0       0       0       0       0       0       0
 28396 ;;      Temps:          0       0       0       0       0       0       0
 28397 ;;      Totals:         2       0       0       0       0       0       0
 28398 ;;Total ram usage:        2 bytes
 28399 ;; Hardware stack levels used:    1
 28400 ;; Hardware stack levels required when called:    3
 28401 ;; This function calls:
 28402 ;;		Nothing
 28403 ;; This function is called by:
 28404 ;;		_main
 28405 ;;		_init_app_ram
 28406 ;; This function uses a non-reentrant model
 28407 ;;
 28408                           
 28409                           	psect	text83
 28410  000D98                     __ptext83:
 28411                           	opt stack 0
 28412  000D98                     _Read_b_eep:
 28413                           	opt stack 23
 28414                           
 28415                           ;incstack = 0
 28416                           ;incstack = 0
 28417  000D98  C01F  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 28418  000D9C  9CA6               	bcf	4006,6,c	;volatile
 28419  000D9E  9EA6               	bcf	4006,7,c	;volatile
 28420  000DA0  80A6               	bsf	4006,0,c	;volatile
 28421  000DA2  F000               	nop		;# 
 28422  000DA4  F000               	nop		;# 
 28423  000DA6  50A8               	movf	4008,w,c	;volatile
 28424  000DA8  0012               	return	
 28425  000DAA                     __end_of_Read_b_eep:
 28426                           	opt stack 0
 28427                           tblptru	equ	0xFF8
 28428                           tblptrh	equ	0xFF7
 28429                           tblptrl	equ	0xFF6
 28430                           tablat	equ	0xFF5
 28431                           prodh	equ	0xFF4
 28432                           prodl	equ	0xFF3
 28433                           intcon	equ	0xFF2
 28434                           indf0	equ	0xFEF
 28435                           postinc0	equ	0xFEE
 28436                           fsr0h	equ	0xFEA
 28437                           fsr0l	equ	0xFE9
 28438                           wreg	equ	0xFE8
 28439                           indf1	equ	0xFE7
 28440                           postinc1	equ	0xFE6
 28441                           postdec1	equ	0xFE5
 28442                           fsr1h	equ	0xFE2
 28443                           fsr1l	equ	0xFE1
 28444                           indf2	equ	0xFDF
 28445                           postinc2	equ	0xFDE
 28446                           postdec2	equ	0xFDD
 28447                           plusw2	equ	0xFDB
 28448                           fsr2h	equ	0xFDA
 28449                           fsr2l	equ	0xFD9
 28450                           status	equ	0xFD8
 28451                           
 28452 ;; *************** function _WriteTimer0 *****************
 28453 ;; Defined at:
 28454 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 28455 ;; Parameters:    Size  Location     Type
 28456 ;;  timer0          2   30[COMRAM] unsigned int 
 28457 ;; Auto vars:     Size  Location     Type
 28458 ;;  timer           2   32[COMRAM] struct Timers
 28459 ;; Return value:  Size  Location     Type
 28460 ;;		None               void
 28461 ;; Registers used:
 28462 ;;		None
 28463 ;; Tracked objects:
 28464 ;;		On entry : 0/1
 28465 ;;		On exit  : 0/0
 28466 ;;		Unchanged: 0/0
 28467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28468 ;;      Params:         2       0       0       0       0       0       0
 28469 ;;      Locals:         2       0       0       0       0       0       0
 28470 ;;      Temps:          0       0       0       0       0       0       0
 28471 ;;      Totals:         4       0       0       0       0       0       0
 28472 ;;Total ram usage:        4 bytes
 28473 ;; Hardware stack levels used:    1
 28474 ;; Hardware stack levels required when called:    3
 28475 ;; This function calls:
 28476 ;;		Nothing
 28477 ;; This function is called by:
 28478 ;;		_init
 28479 ;; This function uses a non-reentrant model
 28480 ;;
 28481                           
 28482                           	psect	text84
 28483  000D86                     __ptext84:
 28484                           	opt stack 0
 28485  000D86                     _WriteTimer0:
 28486                           	opt stack 25
 28487                           
 28488                           ;incstack = 0
 28489                           ;incstack = 0
 28490  000D86  C01F  F021         	movff	WriteTimer0@timer0,WriteTimer0@timer
 28491  000D8A  C020  F022         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 28492  000D8E  C022  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 28493  000D92  C021  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 28494  000D96  0012               	return	
 28495  000D98                     __end_of_WriteTimer0:
 28496                           	opt stack 0
 28497                           tblptru	equ	0xFF8
 28498                           tblptrh	equ	0xFF7
 28499                           tblptrl	equ	0xFF6
 28500                           tablat	equ	0xFF5
 28501                           prodh	equ	0xFF4
 28502                           prodl	equ	0xFF3
 28503                           intcon	equ	0xFF2
 28504                           indf0	equ	0xFEF
 28505                           postinc0	equ	0xFEE
 28506                           fsr0h	equ	0xFEA
 28507                           fsr0l	equ	0xFE9
 28508                           wreg	equ	0xFE8
 28509                           indf1	equ	0xFE7
 28510                           postinc1	equ	0xFE6
 28511                           postdec1	equ	0xFE5
 28512                           fsr1h	equ	0xFE2
 28513                           fsr1l	equ	0xFE1
 28514                           indf2	equ	0xFDF
 28515                           postinc2	equ	0xFDE
 28516                           postdec2	equ	0xFDD
 28517                           plusw2	equ	0xFDB
 28518                           fsr2h	equ	0xFDA
 28519                           fsr2l	equ	0xFD9
 28520                           status	equ	0xFD8
 28521                           
 28522 ;; *************** function _fifo_init *****************
 28523 ;; Defined at:
 28524 ;;		line 14 in file "fifo.c"
 28525 ;; Parameters:    Size  Location     Type
 28526 ;;  f               2    0[BANK0 ] PTR struct .
 28527 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28528 ;;  buf             2    2[BANK0 ] PTR const void 
 28529 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 28530 ;;  size            2    4[BANK0 ] unsigned short 
 28531 ;; Auto vars:     Size  Location     Type
 28532 ;;		None
 28533 ;; Return value:  Size  Location     Type
 28534 ;;		None               void
 28535 ;; Registers used:
 28536 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28537 ;; Tracked objects:
 28538 ;;		On entry : F/0
 28539 ;;		On exit  : F/0
 28540 ;;		Unchanged: 0/0
 28541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28542 ;;      Params:         0       6       0       0       0       0       0
 28543 ;;      Locals:         0       0       0       0       0       0       0
 28544 ;;      Temps:          0       0       0       0       0       0       0
 28545 ;;      Totals:         0       6       0       0       0       0       0
 28546 ;;Total ram usage:        6 bytes
 28547 ;; Hardware stack levels used:    1
 28548 ;; Hardware stack levels required when called:    3
 28549 ;; This function calls:
 28550 ;;		Nothing
 28551 ;; This function is called by:
 28552 ;;		_main
 28553 ;; This function uses a non-reentrant model
 28554 ;;
 28555                           
 28556                           	psect	text85
 28557  001146                     __ptext85:
 28558                           	opt stack 0
 28559  001146                     _fifo_init:
 28560                           	opt stack 26
 28561                           
 28562                           ; BSR set to: 0
 28563                           ;fifo.c: 15: f->head = 0;
 28564                           
 28565                           ;incstack = 0
 28566                           ;incstack = 0
 28567  001146  EE20 F002          	lfsr	2,2
 28568  00114A  D816               	call	PL124	;call to abstracted procedure
 28569                           
 28570                           ;fifo.c: 16: f->tail = 0;
 28571  00114C  EE20 F004          	lfsr	2,4
 28572  001150  D813               	call	PL124	;call to abstracted procedure
 28573                           
 28574                           ;fifo.c: 17: f->size = size;
 28575  001152  EE20 F006          	lfsr	2,6
 28576  001156  5160               	movf	fifo_init@f& (0+255),w,b
 28577  001158  26D9               	addwf	fsr2l,f,c
 28578  00115A  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 28579  00115C  22DA               	addwfc	fsr2h,f,c
 28580  00115E  C064  FFDE         	movff	fifo_init@size,postinc2
 28581  001162  C065  FFDD         	movff	fifo_init@size+1,postdec2
 28582                           
 28583                           ; BSR set to: 0
 28584                           ;fifo.c: 18: f->buf = buf;
 28585  001166  C060  FFD9         	movff	fifo_init@f,fsr2l
 28586  00116A  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 28587  00116E  C062  FFDE         	movff	fifo_init@buf,postinc2
 28588  001172  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 28589                           
 28590                           ; BSR set to: 0
 28591  001176  0012               	return	
 28592  001178                     __end_of_fifo_init:
 28593                           	opt stack 0
 28594  001178                     PL124:
 28595                           	opt stack 26
 28596  001178  5160               	movf	fifo_init@f& (0+255),w,b
 28597  00117A  26D9               	addwf	fsr2l,f,c
 28598  00117C  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 28599  00117E  22DA               	addwfc	fsr2h,f,c
 28600  001180  6ADE               	clrf	postinc2,c
 28601  001182  6ADD               	clrf	postdec2,c
 28602  001184  0012               	return	
 28603  001186                     __end_ofPL124:
 28604                           	opt stack 0
 28605                           tblptru	equ	0xFF8
 28606                           tblptrh	equ	0xFF7
 28607                           tblptrl	equ	0xFF6
 28608                           tablat	equ	0xFF5
 28609                           prodh	equ	0xFF4
 28610                           prodl	equ	0xFF3
 28611                           intcon	equ	0xFF2
 28612                           indf0	equ	0xFEF
 28613                           postinc0	equ	0xFEE
 28614                           fsr0h	equ	0xFEA
 28615                           fsr0l	equ	0xFE9
 28616                           wreg	equ	0xFE8
 28617                           indf1	equ	0xFE7
 28618                           postinc1	equ	0xFE6
 28619                           postdec1	equ	0xFE5
 28620                           fsr1h	equ	0xFE2
 28621                           fsr1l	equ	0xFE1
 28622                           indf2	equ	0xFDF
 28623                           postinc2	equ	0xFDE
 28624                           postdec2	equ	0xFDD
 28625                           plusw2	equ	0xFDB
 28626                           fsr2h	equ	0xFDA
 28627                           fsr2l	equ	0xFD9
 28628                           status	equ	0xFD8
 28629                           
 28630 ;; *************** function _Interrupt *****************
 28631 ;; Defined at:
 28632 ;;		line 146 in file "main.c"
 28633 ;; Parameters:    Size  Location     Type
 28634 ;;		None
 28635 ;; Auto vars:     Size  Location     Type
 28636 ;;  fail            1   29[COMRAM] unsigned char 
 28637 ;;  c               1   28[COMRAM] unsigned char 
 28638 ;; Return value:  Size  Location     Type
 28639 ;;		None               void
 28640 ;; Registers used:
 28641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 28642 ;; Tracked objects:
 28643 ;;		On entry : 0/0
 28644 ;;		On exit  : 0/0
 28645 ;;		Unchanged: 0/0
 28646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28647 ;;      Params:         0       0       0       0       0       0       0
 28648 ;;      Locals:         2       0       0       0       0       0       0
 28649 ;;      Temps:          9       0       0       0       0       0       0
 28650 ;;      Totals:        11       0       0       0       0       0       0
 28651 ;;Total ram usage:       11 bytes
 28652 ;; Hardware stack levels used:    1
 28653 ;; Hardware stack levels required when called:    2
 28654 ;; This function calls:
 28655 ;;		_ReadUSART
 28656 ;;		_fifo_write
 28657 ;;		_ECANReceiveMessage
 28658 ;;		_fifo_getFree
 28659 ;;		i1_WriteTimer0
 28660 ;; This function is called by:
 28661 ;;		Interrupt level 1
 28662 ;; This function uses a non-reentrant model
 28663 ;;
 28664                           
 28665                           	psect	intcodelo
 28666  000018                     __pintcodelo:
 28667                           	opt stack 0
 28668  000018                     _Interrupt:
 28669                           	opt stack 19
 28670                           
 28671                           ; BSR set to: 0
 28672                           ;incstack = 0
 28673  000018  CFD8 F016          	movff	status,??_Interrupt+2
 28674  00001C  CFE8 F017          	movff	wreg,??_Interrupt+3
 28675  000020  CFE0 F018          	movff	bsr,??_Interrupt+4
 28676  000024  CFE1 F019          	movff	fsr1l,??_Interrupt+5
 28677  000028  CFE2 F01A          	movff	fsr1h,??_Interrupt+6
 28678  00002C  CFD9 F01B          	movff	fsr2l,??_Interrupt+7
 28679  000030  CFDA F01C          	movff	fsr2h,??_Interrupt+8
 28680  000034                     
 28681                           ;main.c: 147: uint8_t c;
 28682                           ;main.c: 150: if ( 1 == PIR1bits.RCIF ) {
 28683  000034  AA9E               	btfss	3998,5,c	;volatile
 28684  000036  D001               	goto	i1u1259_21
 28685  000038  D001               	goto	i1u1259_20
 28686  00003A                     i1u1259_21:
 28687  00003A  D02A               	goto	i1l411
 28688  00003C                     i1u1259_20:
 28689  00003C                     
 28690                           ;main.c: 152: c = ReadUSART();
 28691  00003C  EC36  F007         	call	_ReadUSART	;wreg free
 28692  000040  6E1D               	movwf	Interrupt@c,c
 28693  000042                     
 28694                           ; BSR set to: 1
 28695                           ;main.c: 154: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 28696  000042  0E01               	movlw	high _serialInputFifo
 28697  000044  6E02               	movwf	?_fifo_write+1,c
 28698  000046  0EE2               	movlw	low _serialInputFifo
 28699  000048  6E01               	movwf	?_fifo_write,c
 28700  00004A  0E1D               	movlw	low Interrupt@c
 28701  00004C  6E03               	movwf	?_fifo_write+2,c
 28702  00004E  0E00               	movlw	high Interrupt@c
 28703  000050  6E04               	movwf	?_fifo_write+3,c
 28704  000052  0E0F               	movlw	15
 28705  000054  6E04               	movwf	?_fifo_write+3,c
 28706  000056  0E5F               	movlw	__accesstop+-1
 28707  000058  6403               	cpfsgt	?_fifo_write+2,c
 28708  00005A  6A04               	clrf	?_fifo_write+3,c
 28709  00005C  0E01               	movlw	1
 28710  00005E  6E05               	movwf	?_fifo_write+4,c
 28711  000060  0E00               	movlw	0
 28712  000062  6E06               	movwf	?_fifo_write+5,c
 28713  000064  0E00               	movlw	0
 28714  000066  6E07               	movwf	?_fifo_write+6,c
 28715  000068  0E00               	movlw	0
 28716  00006A  6E08               	movwf	?_fifo_write+7,c
 28717  00006C  ECA0  F016         	call	_fifo_write	;wreg free
 28718  000070  0401               	decf	?_fifo_write,w,c
 28719  000072  1002               	iorwf	?_fifo_write+1,w,c
 28720  000074  B4D8               	btfsc	status,2,c
 28721  000076  D001               	goto	i1u1260_21
 28722  000078  D001               	goto	i1u1260_20
 28723  00007A                     i1u1260_21:
 28724  00007A  D008               	goto	i1l10752
 28725  00007C                     i1u1260_20:
 28726  00007C                     
 28727                           ; BSR set to: 1
 28728                           ;main.c: 156: uart_receiveOverruns++;
 28729  00007C  0E01               	movlw	1
 28730  00007E  2720               	addwf	_uart_receiveOverruns& (0+255),f,b
 28731  000080  0E00               	movlw	0
 28732  000082  2321               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 28733  000084  0E00               	movlw	0
 28734  000086  2322               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 28735  000088  0E00               	movlw	0
 28736  00008A  2323               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 28737  00008C                     i1l10752:
 28738                           
 28739                           ; BSR set to: 1
 28740                           ;main.c: 157: }
 28741                           ;main.c: 160: PIR1bits.RCIF = 0;
 28742  00008C  9A9E               	bcf	3998,5,c	;volatile
 28743                           
 28744                           ;main.c: 162: }
 28745  00008E  D07D               	goto	i1l413
 28746  000090                     i1l411:
 28747                           
 28748                           ;main.c: 164: else if (1 == INTCONbits.TMR0IF) {
 28749  000090  A4F2               	btfss	intcon,2,c	;volatile
 28750  000092  D001               	goto	i1u1261_21
 28751  000094  D001               	goto	i1u1261_20
 28752  000096                     i1u1261_21:
 28753  000096  D079               	goto	i1l413
 28754  000098                     i1u1261_20:
 28755  000098                     
 28756                           ;main.c: 166: WriteTimer0(0xfb1d);
 28757  000098  0EFB               	movlw	251
 28758  00009A  6E02               	movwf	?i1_WriteTimer0+1,c
 28759  00009C  0E1D               	movlw	29
 28760  00009E  6E01               	movwf	?i1_WriteTimer0,c
 28761  0000A0  ECBA  F006         	call	i1_WriteTimer0	;wreg free
 28762  0000A4                     
 28763                           ;main.c: 168: timer++;
 28764  0000A4  0E01               	movlw	1
 28765  0000A6  0101               	movlb	1	; () banked
 28766  0000A8  271C               	addwf	_timer& (0+255),f,b	;volatile
 28767  0000AA  0E00               	movlw	0
 28768  0000AC  231D               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 28769  0000AE  0E00               	movlw	0
 28770  0000B0  231E               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 28771  0000B2  0E00               	movlw	0
 28772  0000B4  231F               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 28773  0000B6                     
 28774                           ; BSR set to: 1
 28775                           ;main.c: 169: timekeeper++;
 28776  0000B6  0E01               	movlw	1
 28777  0000B8  2718               	addwf	_timekeeper& (0+255),f,b	;volatile
 28778  0000BA  0E00               	movlw	0
 28779  0000BC  2319               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 28780  0000BE  0E00               	movlw	0
 28781  0000C0  231A               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 28782  0000C2  0E00               	movlw	0
 28783  0000C4  231B               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 28784  0000C6                     
 28785                           ; BSR set to: 1
 28786                           ;main.c: 172: status_led_cnt++;
 28787  0000C6  4A24               	infsnz	_status_led_cnt,f,c	;volatile
 28788  0000C8  2A25               	incf	_status_led_cnt+1,f,c	;volatile
 28789  0000CA                     
 28790                           ; BSR set to: 1
 28791                           ;main.c: 173: if ( ( 2 == ledFunctionality ) &&
 28792                           ;main.c: 174: ( status_led_cnt > 1000 ) ) {
 28793  0000CA  5030               	movf	_ledFunctionality,w,c	;volatile
 28794  0000CC  0A02               	xorlw	2
 28795  0000CE  A4D8               	btfss	status,2,c
 28796  0000D0  D001               	goto	i1u1262_21
 28797  0000D2  D001               	goto	i1u1262_20
 28798  0000D4                     i1u1262_21:
 28799  0000D4  D00C               	goto	i1l10768
 28800  0000D6                     i1u1262_20:
 28801  0000D6                     
 28802                           ; BSR set to: 1
 28803  0000D6  0EE9               	movlw	233
 28804  0000D8  5C24               	subwf	_status_led_cnt,w,c	;volatile
 28805  0000DA  0E03               	movlw	3
 28806  0000DC  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 28807  0000DE  A0D8               	btfss	status,0,c
 28808  0000E0  D001               	goto	i1u1263_21
 28809  0000E2  D001               	goto	i1u1263_20
 28810  0000E4                     i1u1263_21:
 28811  0000E4  D004               	goto	i1l10768
 28812  0000E6                     i1u1263_20:
 28813  0000E6                     i1l10766:
 28814                           
 28815                           ; BSR set to: 1
 28816                           ;main.c: 175: LATC1 = ~LATC1;
 28817  0000E6  728B               	btg	3979,1,c	;volatile
 28818                           
 28819                           ;main.c: 176: status_led_cnt = 0;
 28820  0000E8  6A24               	clrf	_status_led_cnt,c	;volatile
 28821  0000EA  6A25               	clrf	_status_led_cnt+1,c	;volatile
 28822                           
 28823                           ;main.c: 177: }
 28824  0000EC  D04D               	goto	i1l416
 28825  0000EE                     i1l10768:
 28826                           
 28827                           ; BSR set to: 1
 28828                           ;main.c: 178: else if ( ( 3 == ledFunctionality ) &&
 28829                           ;main.c: 179: ( status_led_cnt > 400 ) ) {
 28830  0000EE  5030               	movf	_ledFunctionality,w,c	;volatile
 28831  0000F0  0A03               	xorlw	3
 28832  0000F2  A4D8               	btfss	status,2,c
 28833  0000F4  D001               	goto	i1u1264_21
 28834  0000F6  D001               	goto	i1u1264_20
 28835  0000F8                     i1u1264_21:
 28836  0000F8  D009               	goto	i1l10774
 28837  0000FA                     i1u1264_20:
 28838  0000FA                     
 28839                           ; BSR set to: 1
 28840  0000FA  0E91               	movlw	145
 28841  0000FC  5C24               	subwf	_status_led_cnt,w,c	;volatile
 28842  0000FE  0E01               	movlw	1
 28843  000100  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 28844  000102  A0D8               	btfss	status,0,c
 28845  000104  D001               	goto	i1u1265_21
 28846  000106  D001               	goto	i1u1265_20
 28847  000108                     i1u1265_21:
 28848  000108  D001               	goto	i1l10774
 28849  00010A                     i1u1265_20:
 28850  00010A  D7ED               	goto	i1l10766
 28851  00010C                     i1l10774:
 28852                           
 28853                           ; BSR set to: 1
 28854                           ;main.c: 183: else if ( ( 4 == ledFunctionality ) &&
 28855                           ;main.c: 184: ( status_led_cnt > 100 ) ) {
 28856  00010C  5030               	movf	_ledFunctionality,w,c	;volatile
 28857  00010E  0A04               	xorlw	4
 28858  000110  A4D8               	btfss	status,2,c
 28859  000112  D001               	goto	i1u1266_21
 28860  000114  D001               	goto	i1u1266_20
 28861  000116                     i1u1266_21:
 28862  000116  D009               	goto	i1l10780
 28863  000118                     i1u1266_20:
 28864  000118                     
 28865                           ; BSR set to: 1
 28866  000118  0E65               	movlw	101
 28867  00011A  5C24               	subwf	_status_led_cnt,w,c	;volatile
 28868  00011C  0E00               	movlw	0
 28869  00011E  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 28870  000120  A0D8               	btfss	status,0,c
 28871  000122  D001               	goto	i1u1267_21
 28872  000124  D001               	goto	i1u1267_20
 28873  000126                     i1u1267_21:
 28874  000126  D001               	goto	i1l10780
 28875  000128                     i1u1267_20:
 28876  000128  D7DE               	goto	i1l10766
 28877  00012A                     i1l10780:
 28878                           
 28879                           ; BSR set to: 1
 28880                           ;main.c: 188: else if ( ( 5 == ledFunctionality ) &&
 28881                           ;main.c: 189: (status_led_cnt > 70)) {
 28882  00012A  5030               	movf	_ledFunctionality,w,c	;volatile
 28883  00012C  0A05               	xorlw	5
 28884  00012E  A4D8               	btfss	status,2,c
 28885  000130  D001               	goto	i1u1268_21
 28886  000132  D001               	goto	i1u1268_20
 28887  000134                     i1u1268_21:
 28888  000134  D009               	goto	i1l10786
 28889  000136                     i1u1268_20:
 28890  000136                     
 28891                           ; BSR set to: 1
 28892  000136  0E47               	movlw	71
 28893  000138  5C24               	subwf	_status_led_cnt,w,c	;volatile
 28894  00013A  0E00               	movlw	0
 28895  00013C  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 28896  00013E  A0D8               	btfss	status,0,c
 28897  000140  D001               	goto	i1u1269_21
 28898  000142  D001               	goto	i1u1269_20
 28899  000144                     i1u1269_21:
 28900  000144  D001               	goto	i1l10786
 28901  000146                     i1u1269_20:
 28902  000146  D7CF               	goto	i1l10766
 28903  000148                     i1l10786:
 28904                           
 28905                           ; BSR set to: 1
 28906                           ;main.c: 193: else if ( ( 6 == ledFunctionality ) &&
 28907                           ;main.c: 194: ( status_led_cnt > 40 ) ) {
 28908  000148  5030               	movf	_ledFunctionality,w,c	;volatile
 28909  00014A  0A06               	xorlw	6
 28910  00014C  A4D8               	btfss	status,2,c
 28911  00014E  D001               	goto	i1u1270_21
 28912  000150  D001               	goto	i1u1270_20
 28913  000152                     i1u1270_21:
 28914  000152  D009               	goto	i1l10792
 28915  000154                     i1u1270_20:
 28916  000154                     
 28917                           ; BSR set to: 1
 28918  000154  0E29               	movlw	41
 28919  000156  5C24               	subwf	_status_led_cnt,w,c	;volatile
 28920  000158  0E00               	movlw	0
 28921  00015A  5825               	subwfb	_status_led_cnt+1,w,c	;volatile
 28922  00015C  A0D8               	btfss	status,0,c
 28923  00015E  D001               	goto	i1u1271_21
 28924  000160  D001               	goto	i1u1271_20
 28925  000162                     i1u1271_21:
 28926  000162  D001               	goto	i1l10792
 28927  000164                     i1u1271_20:
 28928  000164  D7C0               	goto	i1l10766
 28929  000166                     i1l10792:
 28930                           
 28931                           ; BSR set to: 1
 28932                           ;main.c: 198: else if ( 1 == ledFunctionality ) {
 28933  000166  0430               	decf	_ledFunctionality,w,c	;volatile
 28934  000168  A4D8               	btfss	status,2,c
 28935  00016A  D001               	goto	i1u1272_21
 28936  00016C  D001               	goto	i1u1272_20
 28937  00016E                     i1u1272_21:
 28938  00016E  D004               	goto	i1l425
 28939  000170                     i1u1272_20:
 28940  000170                     
 28941                           ; BSR set to: 1
 28942                           ;main.c: 199: LATC1 = 1;
 28943  000170  828B               	bsf	3979,1,c	;volatile
 28944                           
 28945                           ;main.c: 200: status_led_cnt = 0;
 28946  000172  6A24               	clrf	_status_led_cnt,c	;volatile
 28947  000174  6A25               	clrf	_status_led_cnt+1,c	;volatile
 28948                           
 28949                           ;main.c: 201: }
 28950  000176  D008               	goto	i1l416
 28951  000178                     i1l425:
 28952                           
 28953                           ; BSR set to: 1
 28954                           ;main.c: 202: else if ( 0 == ledFunctionality ) {
 28955  000178  6630               	tstfsz	_ledFunctionality,c	;volatile
 28956  00017A  D001               	goto	i1u1273_21
 28957  00017C  D001               	goto	i1u1273_20
 28958  00017E                     i1u1273_21:
 28959  00017E  D004               	goto	i1l422
 28960  000180                     i1u1273_20:
 28961  000180                     
 28962                           ; BSR set to: 1
 28963                           ;main.c: 203: LATC1 = 0;
 28964  000180  928B               	bcf	3979,1,c	;volatile
 28965                           
 28966                           ;main.c: 204: status_led_cnt = 0;
 28967  000182  6A24               	clrf	_status_led_cnt,c	;volatile
 28968  000184  6A25               	clrf	_status_led_cnt+1,c	;volatile
 28969  000186  D000               	goto	i1l416
 28970  000188                     i1l422:
 28971  000188                     i1l416:
 28972                           
 28973                           ; BSR set to: 1
 28974                           ;main.c: 205: }
 28975                           ;main.c: 207: INTCONbits.TMR0IF = 0;
 28976  000188  94F2               	bcf	intcon,2,c	;volatile
 28977  00018A                     i1l413:
 28978                           
 28979                           ;main.c: 208: }
 28980                           ;main.c: 211: if ( 1 == ERRIF ) {
 28981  00018A  AAA4               	btfss	4004,5,c	;volatile
 28982  00018C  D001               	goto	i1u1274_21
 28983  00018E  D001               	goto	i1u1274_20
 28984  000190                     i1u1274_21:
 28985  000190  D02A               	goto	i1l10818
 28986  000192                     i1u1274_20:
 28987  000192                     
 28988                           ;main.c: 214: if ( COMSTATbits.RXBnOVFL ) {
 28989  000192  AC74               	btfss	3956,6,c	;volatile
 28990  000194  D001               	goto	i1u1275_21
 28991  000196  D001               	goto	i1u1275_20
 28992  000198                     i1u1275_21:
 28993  000198  D00A               	goto	i1l10804
 28994  00019A                     i1u1275_20:
 28995  00019A                     
 28996                           ;main.c: 215: can_receiveOverruns++;
 28997  00019A  0E01               	movlw	1
 28998  00019C  0101               	movlb	1	; () banked
 28999  00019E  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 29000  0001A0  0E00               	movlw	0
 29001  0001A2  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 29002  0001A4  0E00               	movlw	0
 29003  0001A6  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 29004  0001A8  0E00               	movlw	0
 29005  0001AA  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 29006  0001AC                     
 29007                           ; BSR set to: 1
 29008                           ;main.c: 216: COMSTATbits.RXBnOVFL = 0;
 29009  0001AC  9C74               	bcf	3956,6,c	;volatile
 29010  0001AE                     i1l10804:
 29011                           
 29012                           ;main.c: 217: }
 29013                           ;main.c: 220: if ( COMSTATbits.TXBO ) {
 29014  0001AE  AA74               	btfss	3956,5,c	;volatile
 29015  0001B0  D001               	goto	i1u1276_21
 29016  0001B2  D001               	goto	i1u1276_20
 29017  0001B4                     i1u1276_21:
 29018  0001B4  D003               	goto	i1l430
 29019  0001B6                     i1u1276_20:
 29020  0001B6                     
 29021                           ;main.c: 222: ledFunctionality = 6;
 29022  0001B6  0E06               	movlw	6
 29023  0001B8  6E30               	movwf	_ledFunctionality,c	;volatile
 29024                           
 29025                           ;main.c: 223: }
 29026  0001BA  D014               	goto	i1l10816
 29027  0001BC                     i1l430:
 29028                           
 29029                           ;main.c: 224: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
 29030  0001BC  B874               	btfsc	3956,4,c	;volatile
 29031  0001BE  D001               	goto	i1u1277_21
 29032  0001C0  D001               	goto	i1u1277_20
 29033  0001C2                     i1u1277_21:
 29034  0001C2  D004               	goto	i1l10810
 29035  0001C4                     i1u1277_20:
 29036  0001C4  A674               	btfss	3956,3,c	;volatile
 29037  0001C6  D001               	goto	i1u1278_21
 29038  0001C8  D001               	goto	i1u1278_20
 29039  0001CA                     i1u1278_21:
 29040  0001CA  D003               	goto	i1l432
 29041  0001CC                     i1u1278_20:
 29042  0001CC                     i1l10810:
 29043                           
 29044                           ;main.c: 226: ledFunctionality = 5;
 29045  0001CC  0E05               	movlw	5
 29046  0001CE  6E30               	movwf	_ledFunctionality,c	;volatile
 29047                           
 29048                           ;main.c: 227: }
 29049  0001D0  D009               	goto	i1l10816
 29050  0001D2                     i1l432:
 29051                           
 29052                           ;main.c: 228: else if ( COMSTATbits.EWARN ) {
 29053  0001D2  A074               	btfss	3956,0,c	;volatile
 29054  0001D4  D001               	goto	i1u1279_21
 29055  0001D6  D001               	goto	i1u1279_20
 29056  0001D8                     i1u1279_21:
 29057  0001D8  D003               	goto	i1l10814
 29058  0001DA                     i1u1279_20:
 29059  0001DA                     
 29060                           ;main.c: 230: ledFunctionality = 4;
 29061  0001DA  0E04               	movlw	4
 29062  0001DC  6E30               	movwf	_ledFunctionality,c	;volatile
 29063                           
 29064                           ;main.c: 231: }
 29065  0001DE  D002               	goto	i1l10816
 29066  0001E0                     i1l10814:
 29067                           
 29068                           ;main.c: 232: else {
 29069                           ;main.c: 234: ledFunctionality = 1;
 29070  0001E0  0E01               	movlw	1
 29071  0001E2  6E30               	movwf	_ledFunctionality,c	;volatile
 29072  0001E4                     i1l10816:
 29073                           
 29074                           ;main.c: 235: }
 29075                           ;main.c: 237: ERRIF = 0;
 29076  0001E4  9AA4               	bcf	4004,5,c	;volatile
 29077  0001E6                     i1l10818:
 29078                           
 29079                           ;main.c: 238: }
 29080                           ;main.c: 241: if ( RXBnIF ) {
 29081  0001E6  A2A4               	btfss	4004,1,c	;volatile
 29082  0001E8  D001               	goto	i1u1280_21
 29083  0001EA  D001               	goto	i1u1280_20
 29084  0001EC                     i1u1280_21:
 29085  0001EC  D0A1               	goto	i1l450
 29086  0001EE                     i1u1280_20:
 29087  0001EE                     
 29088                           ;main.c: 243: if ( ECANReceiveMessage((unsigned long *)&id,
 29089                           ;main.c: 244: (BYTE*)&data,
 29090                           ;main.c: 245: (BYTE*)&dlc,
 29091                           ;main.c: 246: &flags) ) {
 29092  0001EE  0101               	movlb	1	; () banked
 29093  0001F0  0E01               	movlw	high _data
 29094  0001F2  6E09               	movwf	?_ECANReceiveMessage+1,c
 29095  0001F4  0EDA               	movlw	low _data
 29096  0001F6  6E08               	movwf	?_ECANReceiveMessage,c
 29097  0001F8  0E3C               	movlw	low _dlc
 29098  0001FA  6E0A               	movwf	?_ECANReceiveMessage+2,c
 29099  0001FC  0E3D               	movlw	low _flags
 29100  0001FE  6E0B               	movwf	?_ECANReceiveMessage+3,c
 29101  000200  0E36               	movlw	_id& (0+255)
 29102  000202  ECED  F01E         	call	_ECANReceiveMessage
 29103  000206  0900               	iorlw	0
 29104  000208  B4D8               	btfsc	status,2,c
 29105  00020A  D001               	goto	i1u1281_21
 29106  00020C  D001               	goto	i1u1281_20
 29107  00020E                     i1u1281_21:
 29108  00020E  D08F               	goto	i1l10854
 29109  000210                     i1u1281_20:
 29110  000210                     
 29111                           ;main.c: 249: if ( flags & ECAN_RX_OVERFLOW ) {
 29112  000210  A63D               	btfss	_flags,3,c
 29113  000212  D001               	goto	i1u1282_21
 29114  000214  D001               	goto	i1u1282_20
 29115  000216                     i1u1282_21:
 29116  000216  D00E               	goto	i1l440
 29117  000218                     i1u1282_20:
 29118  000218                     
 29119                           ;main.c: 250: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 29120  000218  AA3D               	btfss	_flags,5,c
 29121  00021A  D001               	goto	i1u1283_21
 29122  00021C  D001               	goto	i1u1283_20
 29123  00021E                     i1u1283_21:
 29124  00021E  D087               	goto	i1l10854
 29125  000220                     i1u1283_20:
 29126  000220                     i1l10826:
 29127  000220  0E01               	movlw	1
 29128  000222  0101               	movlb	1	; () banked
 29129  000224  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 29130  000226  0E00               	movlw	0
 29131  000228  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 29132  00022A  0E00               	movlw	0
 29133  00022C  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 29134  00022E  0E00               	movlw	0
 29135  000230  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 29136  000232  D07D               	goto	i1l10854
 29137  000234                     i1l440:
 29138                           
 29139                           ;main.c: 252: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 29140                           ;main.c: 253: ( flags & ECAN_RX_XTD_FRAME ) ) {
 29141  000234  BC3D               	btfsc	_flags,6,c
 29142  000236  D001               	goto	i1u1284_21
 29143  000238  D001               	goto	i1u1284_20
 29144  00023A                     i1u1284_21:
 29145  00023A  D079               	goto	i1l10854
 29146  00023C                     i1u1284_20:
 29147  00023C  AA3D               	btfss	_flags,5,c
 29148  00023E  D001               	goto	i1u1285_21
 29149  000240  D001               	goto	i1u1285_20
 29150  000242                     i1u1285_21:
 29151  000242  D075               	goto	i1l10854
 29152  000244                     i1u1285_20:
 29153  000244                     
 29154                           ;main.c: 255: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 29155  000244  503C               	movf	_dlc,w,c
 29156  000246  6E14               	movwf	??_Interrupt& (0+255),c
 29157  000248  6A15               	clrf	(??_Interrupt+1)& (0+255),c
 29158  00024A  0E05               	movlw	5
 29159  00024C  2614               	addwf	??_Interrupt,f,c
 29160  00024E  0E00               	movlw	0
 29161  000250  2215               	addwfc	??_Interrupt+1,f,c
 29162  000252  0101               	movlb	1	; () banked
 29163  000254  0E01               	movlw	high _canInputFifo
 29164  000256  6E02               	movwf	?_fifo_getFree+1,c
 29165  000258  0ED2               	movlw	low _canInputFifo
 29166  00025A  6E01               	movwf	?_fifo_getFree,c
 29167  00025C  ECDD  F00E         	call	_fifo_getFree	;wreg free
 29168  000260  5014               	movf	??_Interrupt,w,c
 29169  000262  5C01               	subwf	?_fifo_getFree,w,c
 29170  000264  5015               	movf	??_Interrupt+1,w,c
 29171  000266  5802               	subwfb	?_fifo_getFree+1,w,c
 29172  000268  A0D8               	btfss	status,0,c
 29173  00026A  D001               	goto	i1u1286_21
 29174  00026C  D001               	goto	i1u1286_20
 29175  00026E                     i1u1286_21:
 29176  00026E  D7D8               	goto	i1l10826
 29177  000270                     i1u1286_20:
 29178  000270                     
 29179                           ; BSR set to: 1
 29180                           ;main.c: 256: uint8_t fail = 0;
 29181  000270  6A1E               	clrf	Interrupt@fail,c
 29182  000272                     
 29183                           ; BSR set to: 1
 29184                           ;main.c: 257: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 29185  000272  0E01               	movlw	high _canInputFifo
 29186  000274  6E02               	movwf	?_fifo_write+1,c
 29187  000276  0ED2               	movlw	low _canInputFifo
 29188  000278  6E01               	movwf	?_fifo_write,c
 29189  00027A  0E36               	movlw	low _id
 29190  00027C  6E03               	movwf	?_fifo_write+2,c
 29191  00027E  0E00               	movlw	high _id
 29192  000280  6E04               	movwf	?_fifo_write+3,c
 29193  000282  0E0F               	movlw	15
 29194  000284  6E04               	movwf	?_fifo_write+3,c
 29195  000286  0E5F               	movlw	__accesstop+-1
 29196  000288  6403               	cpfsgt	?_fifo_write+2,c
 29197  00028A  6A04               	clrf	?_fifo_write+3,c
 29198  00028C  0E04               	movlw	4
 29199  00028E  6E05               	movwf	?_fifo_write+4,c
 29200  000290  0E00               	movlw	0
 29201  000292  6E06               	movwf	?_fifo_write+5,c
 29202  000294  0E00               	movlw	0
 29203  000296  6E07               	movwf	?_fifo_write+6,c
 29204  000298  0E00               	movlw	0
 29205  00029A  6E08               	movwf	?_fifo_write+7,c
 29206  00029C  ECA0  F016         	call	_fifo_write	;wreg free
 29207  0002A0  5001               	movf	?_fifo_write,w,c
 29208  0002A2  0A04               	xorlw	4
 29209  0002A4  1002               	iorwf	?_fifo_write+1,w,c
 29210  0002A6  B4D8               	btfsc	status,2,c
 29211  0002A8  D001               	goto	i1u1287_21
 29212  0002AA  D001               	goto	i1u1287_20
 29213  0002AC                     i1u1287_21:
 29214  0002AC  D002               	goto	i1l10838
 29215  0002AE                     i1u1287_20:
 29216  0002AE                     
 29217                           ; BSR set to: 1
 29218                           ;main.c: 258: fail = 1;
 29219  0002AE  0E01               	movlw	1
 29220  0002B0  6E1E               	movwf	Interrupt@fail,c
 29221  0002B2                     i1l10838:
 29222                           
 29223                           ; BSR set to: 1
 29224                           ;main.c: 259: }
 29225                           ;main.c: 260: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 29226  0002B2  0E01               	movlw	high _canInputFifo
 29227  0002B4  6E02               	movwf	?_fifo_write+1,c
 29228  0002B6  0ED2               	movlw	low _canInputFifo
 29229  0002B8  6E01               	movwf	?_fifo_write,c
 29230  0002BA  0E3C               	movlw	low _dlc
 29231  0002BC  6E03               	movwf	?_fifo_write+2,c
 29232  0002BE  0E00               	movlw	high _dlc
 29233  0002C0  6E04               	movwf	?_fifo_write+3,c
 29234  0002C2  0E0F               	movlw	15
 29235  0002C4  6E04               	movwf	?_fifo_write+3,c
 29236  0002C6  0E5F               	movlw	__accesstop+-1
 29237  0002C8  6403               	cpfsgt	?_fifo_write+2,c
 29238  0002CA  6A04               	clrf	?_fifo_write+3,c
 29239  0002CC  0E01               	movlw	1
 29240  0002CE  6E05               	movwf	?_fifo_write+4,c
 29241  0002D0  0E00               	movlw	0
 29242  0002D2  6E06               	movwf	?_fifo_write+5,c
 29243  0002D4  0E00               	movlw	0
 29244  0002D6  6E07               	movwf	?_fifo_write+6,c
 29245  0002D8  0E00               	movlw	0
 29246  0002DA  6E08               	movwf	?_fifo_write+7,c
 29247  0002DC  ECA0  F016         	call	_fifo_write	;wreg free
 29248  0002E0  0401               	decf	?_fifo_write,w,c
 29249  0002E2  1002               	iorwf	?_fifo_write+1,w,c
 29250  0002E4  B4D8               	btfsc	status,2,c
 29251  0002E6  D001               	goto	i1u1288_21
 29252  0002E8  D001               	goto	i1u1288_20
 29253  0002EA                     i1u1288_21:
 29254  0002EA  D002               	goto	i1l10842
 29255  0002EC                     i1u1288_20:
 29256  0002EC                     
 29257                           ; BSR set to: 1
 29258                           ;main.c: 261: fail = 1;
 29259  0002EC  0E01               	movlw	1
 29260  0002EE  6E1E               	movwf	Interrupt@fail,c
 29261  0002F0                     i1l10842:
 29262                           
 29263                           ; BSR set to: 1
 29264                           ;main.c: 262: }
 29265                           ;main.c: 263: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 29266  0002F0  0E01               	movlw	high _canInputFifo
 29267  0002F2  6E02               	movwf	?_fifo_write+1,c
 29268  0002F4  0ED2               	movlw	low _canInputFifo
 29269  0002F6  6E01               	movwf	?_fifo_write,c
 29270  0002F8  0E01               	movlw	high _data
 29271  0002FA  6E04               	movwf	?_fifo_write+3,c
 29272  0002FC  0EDA               	movlw	low _data
 29273  0002FE  6E03               	movwf	?_fifo_write+2,c
 29274  000300  503C               	movf	_dlc,w,c
 29275  000302  6E05               	movwf	?_fifo_write+4,c
 29276  000304  6A06               	clrf	?_fifo_write+5,c
 29277  000306  6A07               	clrf	?_fifo_write+6,c
 29278  000308  6A08               	clrf	?_fifo_write+7,c
 29279  00030A  ECA0  F016         	call	_fifo_write	;wreg free
 29280  00030E  503C               	movf	_dlc,w,c
 29281  000310  1801               	xorwf	?_fifo_write,w,c
 29282  000312  1002               	iorwf	?_fifo_write+1,w,c
 29283  000314  B4D8               	btfsc	status,2,c
 29284  000316  D001               	goto	i1u1289_21
 29285  000318  D001               	goto	i1u1289_20
 29286  00031A                     i1u1289_21:
 29287  00031A  D002               	goto	i1l10846
 29288  00031C                     i1u1289_20:
 29289  00031C                     
 29290                           ; BSR set to: 1
 29291                           ;main.c: 264: fail = 1;
 29292  00031C  0E01               	movlw	1
 29293  00031E  6E1E               	movwf	Interrupt@fail,c
 29294  000320                     i1l10846:
 29295                           
 29296                           ; BSR set to: 1
 29297                           ;main.c: 265: }
 29298                           ;main.c: 267: fifo_canrxcount++;
 29299  000320  2A2F               	incf	_fifo_canrxcount,f,c	;volatile
 29300  000322                     
 29301                           ; BSR set to: 1
 29302                           ;main.c: 269: if ( fail ) {
 29303  000322  501E               	movf	Interrupt@fail,w,c
 29304  000324  B4D8               	btfsc	status,2,c
 29305  000326  D001               	goto	i1u1290_21
 29306  000328  D001               	goto	i1u1290_20
 29307  00032A                     i1u1290_21:
 29308  00032A  D001               	goto	i1l10854
 29309  00032C                     i1u1290_20:
 29310  00032C  D779               	goto	i1l10826
 29311  00032E                     i1l10854:
 29312                           
 29313                           ;main.c: 276: }
 29314                           ;main.c: 278: }
 29315                           ;main.c: 280: }
 29316                           ;main.c: 283: RXBnIF = 0;
 29317  00032E  92A4               	bcf	4004,1,c	;volatile
 29318  000330                     i1l450:
 29319  000330  C01C  FFDA         	movff	??_Interrupt+8,fsr2h
 29320  000334  C01B  FFD9         	movff	??_Interrupt+7,fsr2l
 29321  000338  C01A  FFE2         	movff	??_Interrupt+6,fsr1h
 29322  00033C  C019  FFE1         	movff	??_Interrupt+5,fsr1l
 29323  000340  C018  FFE0         	movff	??_Interrupt+4,bsr
 29324  000344  C017  FFE8         	movff	??_Interrupt+3,wreg
 29325  000348  C016  FFD8         	movff	??_Interrupt+2,status
 29326  00034C  0010               	retfie	
 29327  00034E                     __end_of_Interrupt:
 29328                           	opt stack 0
 29329                           tblptru	equ	0xFF8
 29330                           tblptrh	equ	0xFF7
 29331                           tblptrl	equ	0xFF6
 29332                           tablat	equ	0xFF5
 29333                           prodh	equ	0xFF4
 29334                           prodl	equ	0xFF3
 29335                           intcon	equ	0xFF2
 29336                           indf0	equ	0xFEF
 29337                           postinc0	equ	0xFEE
 29338                           fsr0h	equ	0xFEA
 29339                           fsr0l	equ	0xFE9
 29340                           wreg	equ	0xFE8
 29341                           indf1	equ	0xFE7
 29342                           postinc1	equ	0xFE6
 29343                           postdec1	equ	0xFE5
 29344                           fsr1h	equ	0xFE2
 29345                           fsr1l	equ	0xFE1
 29346                           bsr	equ	0xFE0
 29347                           indf2	equ	0xFDF
 29348                           postinc2	equ	0xFDE
 29349                           postdec2	equ	0xFDD
 29350                           plusw2	equ	0xFDB
 29351                           fsr2h	equ	0xFDA
 29352                           fsr2l	equ	0xFD9
 29353                           status	equ	0xFD8
 29354                           
 29355 ;; *************** function i1_WriteTimer0 *****************
 29356 ;; Defined at:
 29357 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 29358 ;; Parameters:    Size  Location     Type
 29359 ;;  timer0          2    0[COMRAM] unsigned int 
 29360 ;; Auto vars:     Size  Location     Type
 29361 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 29362 ;; Return value:  Size  Location     Type
 29363 ;;		None               void
 29364 ;; Registers used:
 29365 ;;		None
 29366 ;; Tracked objects:
 29367 ;;		On entry : 0/0
 29368 ;;		On exit  : 0/0
 29369 ;;		Unchanged: 0/0
 29370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29371 ;;      Params:         2       0       0       0       0       0       0
 29372 ;;      Locals:         2       0       0       0       0       0       0
 29373 ;;      Temps:          0       0       0       0       0       0       0
 29374 ;;      Totals:         4       0       0       0       0       0       0
 29375 ;;Total ram usage:        4 bytes
 29376 ;; Hardware stack levels used:    1
 29377 ;; This function calls:
 29378 ;;		Nothing
 29379 ;; This function is called by:
 29380 ;;		_Interrupt
 29381 ;; This function uses a non-reentrant model
 29382 ;;
 29383                           
 29384                           	psect	text87
 29385  000D74                     __ptext87:
 29386                           	opt stack 0
 29387  000D74                     i1_WriteTimer0:
 29388                           	opt stack 20
 29389                           
 29390                           ;incstack = 0
 29391                           ;incstack = 0
 29392  000D74  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 29393  000D78  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 29394  000D7C  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 29395  000D80  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 29396  000D84  0012               	return	
 29397  000D86                     __end_ofi1_WriteTimer0:
 29398                           	opt stack 0
 29399                           tblptru	equ	0xFF8
 29400                           tblptrh	equ	0xFF7
 29401                           tblptrl	equ	0xFF6
 29402                           tablat	equ	0xFF5
 29403                           prodh	equ	0xFF4
 29404                           prodl	equ	0xFF3
 29405                           intcon	equ	0xFF2
 29406                           indf0	equ	0xFEF
 29407                           postinc0	equ	0xFEE
 29408                           fsr0h	equ	0xFEA
 29409                           fsr0l	equ	0xFE9
 29410                           wreg	equ	0xFE8
 29411                           indf1	equ	0xFE7
 29412                           postinc1	equ	0xFE6
 29413                           postdec1	equ	0xFE5
 29414                           fsr1h	equ	0xFE2
 29415                           fsr1l	equ	0xFE1
 29416                           bsr	equ	0xFE0
 29417                           indf2	equ	0xFDF
 29418                           postinc2	equ	0xFDE
 29419                           postdec2	equ	0xFDD
 29420                           plusw2	equ	0xFDB
 29421                           fsr2h	equ	0xFDA
 29422                           fsr2l	equ	0xFD9
 29423                           status	equ	0xFD8
 29424                           
 29425 ;; *************** function _fifo_getFree *****************
 29426 ;; Defined at:
 29427 ;;		line 97 in file "fifo.c"
 29428 ;; Parameters:    Size  Location     Type
 29429 ;;  f               2    0[COMRAM] PTR struct .
 29430 ;;		 -> canInputFifo(8), 
 29431 ;; Auto vars:     Size  Location     Type
 29432 ;;		None
 29433 ;; Return value:  Size  Location     Type
 29434 ;;                  2    0[COMRAM] unsigned short 
 29435 ;; Registers used:
 29436 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29437 ;; Tracked objects:
 29438 ;;		On entry : F/1
 29439 ;;		On exit  : F/1
 29440 ;;		Unchanged: F/0
 29441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29442 ;;      Params:         2       0       0       0       0       0       0
 29443 ;;      Locals:         0       0       0       0       0       0       0
 29444 ;;      Temps:          8       0       0       0       0       0       0
 29445 ;;      Totals:        10       0       0       0       0       0       0
 29446 ;;Total ram usage:       10 bytes
 29447 ;; Hardware stack levels used:    1
 29448 ;; This function calls:
 29449 ;;		Nothing
 29450 ;; This function is called by:
 29451 ;;		_Interrupt
 29452 ;; This function uses a non-reentrant model
 29453 ;;
 29454                           
 29455                           	psect	text88
 29456  001DBA                     __ptext88:
 29457                           	opt stack 0
 29458  001DBA                     _fifo_getFree:
 29459                           	opt stack 20
 29460                           
 29461                           ; BSR set to: 1
 29462                           ;fifo.c: 98: if (f->head < f->tail) {
 29463                           
 29464                           ;incstack = 0
 29465                           ;incstack = 0
 29466  001DBA  EE20 F004          	lfsr	2,4
 29467  001DBE  5001               	movf	fifo_getFree@f,w,c
 29468  001DC0  26D9               	addwf	fsr2l,f,c
 29469  001DC2  5002               	movf	fifo_getFree@f+1,w,c
 29470  001DC4  22DA               	addwfc	fsr2h,f,c
 29471  001DC6  EE10 F002          	lfsr	1,2
 29472  001DCA  5001               	movf	fifo_getFree@f,w,c
 29473  001DCC  26E1               	addwf	fsr1l,f,c
 29474  001DCE  5002               	movf	fifo_getFree@f+1,w,c
 29475  001DD0  22E2               	addwfc	fsr1h,f,c
 29476  001DD2  52E6               	movf	postinc1,f,c
 29477  001DD4  52DE               	movf	postinc2,f,c
 29478  001DD6  50DD               	movf	postdec2,w,c
 29479  001DD8  5CE5               	subwf	postdec1,w,c
 29480  001DDA  E102               	bnz	i1u670_25
 29481  001DDC  50DF               	movf	indf2,w,c
 29482  001DDE  5CE7               	subwf	indf1,w,c
 29483  001DE0                     i1u670_25:
 29484  001DE0  E213               	bc	i1l6926
 29485                           
 29486                           ; BSR set to: 1
 29487                           ;fifo.c: 99: return (f->tail - f->head);
 29488  001DE2  EE20 F002          	lfsr	2,2
 29489  001DE6  D834               	call	PL94	;call to abstracted procedure
 29490  001DE8  EE20 F004          	lfsr	2,4
 29491  001DEC  5001               	movf	fifo_getFree@f,w,c
 29492  001DEE  26D9               	addwf	fsr2l,f,c
 29493  001DF0  5002               	movf	fifo_getFree@f+1,w,c
 29494  001DF2  22DA               	addwfc	fsr2h,f,c
 29495  001DF4  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 29496  001DF8  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 29497  001DFC  5003               	movf	??_fifo_getFree,w,c
 29498  001DFE  5C05               	subwf	??_fifo_getFree+2,w,c
 29499  001E00  6E01               	movwf	?_fifo_getFree,c
 29500  001E02  5004               	movf	??_fifo_getFree+1,w,c
 29501  001E04  5806               	subwfb	??_fifo_getFree+3,w,c
 29502  001E06  D022               	goto	L48
 29503  001E08                     i1l6926:
 29504                           
 29505                           ; BSR set to: 1
 29506                           ;fifo.c: 101: else {
 29507                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 29508  001E08  EE20 F004          	lfsr	2,4
 29509  001E0C  D821               	call	PL94	;call to abstracted procedure
 29510  001E0E  EE20 F002          	lfsr	2,2
 29511  001E12  5001               	movf	fifo_getFree@f,w,c
 29512  001E14  26D9               	addwf	fsr2l,f,c
 29513  001E16  5002               	movf	fifo_getFree@f+1,w,c
 29514  001E18  22DA               	addwfc	fsr2h,f,c
 29515  001E1A  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 29516  001E1E  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 29517  001E22  EE20 F006          	lfsr	2,6
 29518  001E26  5001               	movf	fifo_getFree@f,w,c
 29519  001E28  26D9               	addwf	fsr2l,f,c
 29520  001E2A  5002               	movf	fifo_getFree@f+1,w,c
 29521  001E2C  22DA               	addwfc	fsr2h,f,c
 29522  001E2E  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 29523  001E32  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 29524  001E36  5005               	movf	??_fifo_getFree+2,w,c
 29525  001E38  5C07               	subwf	??_fifo_getFree+4,w,c
 29526  001E3A  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 29527  001E3C  5006               	movf	??_fifo_getFree+3,w,c
 29528  001E3E  5808               	subwfb	??_fifo_getFree+5,w,c
 29529  001E40  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 29530  001E42  5003               	movf	??_fifo_getFree,w,c
 29531  001E44  2409               	addwf	??_fifo_getFree+6,w,c
 29532  001E46  6E01               	movwf	?_fifo_getFree,c
 29533  001E48  5004               	movf	??_fifo_getFree+1,w,c
 29534  001E4A  200A               	addwfc	??_fifo_getFree+7,w,c
 29535  001E4C                     L48:
 29536  001E4C  6E02               	movwf	?_fifo_getFree+1,c
 29537                           
 29538                           ; BSR set to: 1
 29539  001E4E  0012               	return	
 29540  001E50                     __end_of_fifo_getFree:
 29541                           	opt stack 0
 29542  001E50                     PL94:
 29543                           	opt stack 20
 29544  001E50  5001               	movf	fifo_getFree@f,w,c
 29545  001E52  26D9               	addwf	fsr2l,f,c
 29546  001E54  5002               	movf	fifo_getFree@f+1,w,c
 29547  001E56  22DA               	addwfc	fsr2h,f,c
 29548  001E58  CFDE F003          	movff	postinc2,??_fifo_getFree
 29549  001E5C  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 29550  001E60  0012               	return	
 29551  001E62                     __end_ofPL94:
 29552                           	opt stack 0
 29553                           tblptru	equ	0xFF8
 29554                           tblptrh	equ	0xFF7
 29555                           tblptrl	equ	0xFF6
 29556                           tablat	equ	0xFF5
 29557                           prodh	equ	0xFF4
 29558                           prodl	equ	0xFF3
 29559                           intcon	equ	0xFF2
 29560                           indf0	equ	0xFEF
 29561                           postinc0	equ	0xFEE
 29562                           fsr0h	equ	0xFEA
 29563                           fsr0l	equ	0xFE9
 29564                           wreg	equ	0xFE8
 29565                           indf1	equ	0xFE7
 29566                           postinc1	equ	0xFE6
 29567                           postdec1	equ	0xFE5
 29568                           fsr1h	equ	0xFE2
 29569                           fsr1l	equ	0xFE1
 29570                           bsr	equ	0xFE0
 29571                           indf2	equ	0xFDF
 29572                           postinc2	equ	0xFDE
 29573                           postdec2	equ	0xFDD
 29574                           plusw2	equ	0xFDB
 29575                           fsr2h	equ	0xFDA
 29576                           fsr2l	equ	0xFD9
 29577                           status	equ	0xFD8
 29578                           
 29579 ;; *************** function _ECANReceiveMessage *****************
 29580 ;; Defined at:
 29581 ;;		line 803 in file "ECAN.c"
 29582 ;; Parameters:    Size  Location     Type
 29583 ;;  id              1    wreg     PTR unsigned long 
 29584 ;;		 -> id(4), 
 29585 ;;  data            2    7[COMRAM] PTR unsigned char 
 29586 ;;		 -> data(8), 
 29587 ;;  dataLen         1    9[COMRAM] PTR unsigned char 
 29588 ;;		 -> dlc(1), 
 29589 ;;  msgFlags        1   10[COMRAM] PTR enum E16333
 29590 ;;		 -> flags(1), 
 29591 ;; Auto vars:     Size  Location     Type
 29592 ;;  id              1   13[COMRAM] PTR unsigned long 
 29593 ;;		 -> id(4), 
 29594 ;;  ptr             2   17[COMRAM] PTR unsigned char 
 29595 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29596 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29597 ;;  savedPtr        2   11[COMRAM] PTR unsigned char 
 29598 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29599 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29600 ;;  temp            1   16[COMRAM] struct .
 29601 ;;  mode            1   15[COMRAM] unsigned char 
 29602 ;;  i               1   14[COMRAM] unsigned char 
 29603 ;; Return value:  Size  Location     Type
 29604 ;;                  1    wreg      enum E15660
 29605 ;; Registers used:
 29606 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 29607 ;; Tracked objects:
 29608 ;;		On entry : F/1
 29609 ;;		On exit  : 0/0
 29610 ;;		Unchanged: 0/0
 29611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29612 ;;      Params:         4       0       0       0       0       0       0
 29613 ;;      Locals:         8       0       0       0       0       0       0
 29614 ;;      Temps:          0       0       0       0       0       0       0
 29615 ;;      Totals:        12       0       0       0       0       0       0
 29616 ;;Total ram usage:       12 bytes
 29617 ;; Hardware stack levels used:    1
 29618 ;; Hardware stack levels required when called:    1
 29619 ;; This function calls:
 29620 ;;		__ECANPointBuffer
 29621 ;;		__RegsToCANID
 29622 ;; This function is called by:
 29623 ;;		_Interrupt
 29624 ;; This function uses a non-reentrant model
 29625 ;;
 29626                           
 29627                           	psect	text89
 29628  003DDA                     __ptext89:
 29629                           	opt stack 0
 29630  003DDA                     _ECANReceiveMessage:
 29631                           	opt stack 19
 29632                           
 29633                           ; BSR set to: 1
 29634                           ;incstack = 0
 29635                           ;incstack = 0
 29636                           ;ECANReceiveMessage@id stored from wreg
 29637  003DDA  CFE8 F00E          	movff	wreg,ECANReceiveMessage@id
 29638                           
 29639                           ; BSR set to: 1
 29640                           ;ECAN.c: 805: BYTE mode;
 29641                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 29642                           ;ECAN.c: 809: char i;
 29643                           ;ECAN.c: 810: BYTE_VAL temp;
 29644                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 29645  003DDE  6B2B               	clrf	__ECANRxFilterHitInfo& (0+255),b
 29646                           
 29647                           ; BSR set to: 1
 29648                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 29649  003DE0  5077               	movf	3959,w,c	;volatile
 29650  003DE2  0BC0               	andlw	192
 29651  003DE4  6E10               	movwf	ECANReceiveMessage@mode,c
 29652                           
 29653                           ; BSR set to: 1
 29654                           ;ECAN.c: 816: if ( mode == 0x00 )
 29655  003DE6  6610               	tstfsz	ECANReceiveMessage@mode,c
 29656  003DE8  D035               	goto	i1l10640
 29657                           
 29658                           ; BSR set to: 1
 29659                           ;ECAN.c: 822: {
 29660                           ;ECAN.c: 824: if ( RXB0FUL )
 29661  003DEA  AE60               	btfss	3936,7,c	;volatile
 29662  003DEC  D013               	goto	i1l1555
 29663                           
 29664                           ; BSR set to: 1
 29665                           ;ECAN.c: 825: {
 29666                           ;ECAN.c: 827: RXB0IF = 0;
 29667  003DEE  90A4               	bcf	4004,0,c	;volatile
 29668                           
 29669                           ;ECAN.c: 830: if ( RXB0OVFL )
 29670  003DF0  AE74               	btfss	3956,7,c	;volatile
 29671  003DF2  D006               	goto	i1l10616
 29672                           
 29673                           ; BSR set to: 1
 29674                           ;ECAN.c: 831: {
 29675                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 29676  003DF4  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 29677  003DF6  6ED9               	movwf	fsr2l,c
 29678  003DF8  6ADA               	clrf	fsr2h,c
 29679  003DFA  0E00               	movlw	0
 29680  003DFC  86DB               	bsf	plusw2,3,c
 29681                           
 29682                           ; BSR set to: 1
 29683                           ;ECAN.c: 833: RXB0OVFL = 0;
 29684  003DFE  9E74               	bcf	3956,7,c	;volatile
 29685  003E00                     i1l10616:
 29686                           
 29687                           ; BSR set to: 1
 29688                           ;ECAN.c: 834: }
 29689                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 29690  003E00  A060               	btfss	3936,0,c	;volatile
 29691  003E02  D002               	bra	i1u1233_25
 29692  003E04  812B               	bsf	__ECANRxFilterHitInfo& (0+255),0,b
 29693  003E06  D002               	bra	i1u1233_27
 29694  003E08                     i1u1233_25:
 29695  003E08  0101               	movlb	1	; () banked
 29696  003E0A  912B               	bcf	__ECANRxFilterHitInfo& (0+255),0,b
 29697  003E0C                     i1u1233_27:
 29698                           
 29699                           ; BSR set to: 1
 29700                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 29701  003E0C  0E0F               	movlw	15	;volatile
 29702  003E0E  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 29703  003E10  0E60               	movlw	96	;volatile
 29704  003E12  D01C               	goto	L49
 29705  003E14                     i1l1555:
 29706                           
 29707                           ; BSR set to: 1
 29708                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 29709  003E14  010F               	movlb	15	; () banked
 29710  003E16  AF50               	btfss	80,7,b	;volatile
 29711  003E18  D01B               	goto	i1l10634
 29712                           
 29713                           ; BSR set to: 15
 29714                           ;ECAN.c: 842: {
 29715                           ;ECAN.c: 844: RXB1IF = 0;
 29716  003E1A  92A4               	bcf	4004,1,c	;volatile
 29717                           
 29718                           ;ECAN.c: 847: if ( RXB1OVFL )
 29719  003E1C  AC74               	btfss	3956,6,c	;volatile
 29720  003E1E  D006               	goto	i1l10626
 29721                           
 29722                           ; BSR set to: 15
 29723                           ;ECAN.c: 848: {
 29724                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 29725  003E20  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 29726  003E22  6ED9               	movwf	fsr2l,c
 29727  003E24  6ADA               	clrf	fsr2h,c
 29728  003E26  0E00               	movlw	0
 29729  003E28  86DB               	bsf	plusw2,3,c
 29730                           
 29731                           ; BSR set to: 15
 29732                           ;ECAN.c: 850: RXB1OVFL = 0;
 29733  003E2A  9C74               	bcf	3956,6,c	;volatile
 29734  003E2C                     i1l10626:
 29735                           
 29736                           ; BSR set to: 15
 29737                           ;ECAN.c: 851: }
 29738                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 29739  003E2C  5150               	movf	80,w,b	;volatile
 29740  003E2E  0B07               	andlw	7
 29741  003E30  0101               	movlb	1	; () banked
 29742  003E32  6F2B               	movwf	__ECANRxFilterHitInfo& (0+255),b
 29743                           
 29744                           ; BSR set to: 1
 29745                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 29746  003E34  0E02               	movlw	2
 29747  003E36  612B               	cpfslt	__ECANRxFilterHitInfo& (0+255),b
 29748  003E38  D005               	goto	i1l10632
 29749                           
 29750                           ; BSR set to: 1
 29751                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 29752  003E3A  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 29753  003E3C  6ED9               	movwf	fsr2l,c
 29754  003E3E  6ADA               	clrf	fsr2h,c
 29755  003E40  0E00               	movlw	0
 29756  003E42  8EDB               	bsf	plusw2,7,c
 29757  003E44                     i1l10632:
 29758                           
 29759                           ; BSR set to: 1
 29760                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 29761  003E44  010F               	movlb	15	; () banked
 29762  003E46  0E0F               	movlw	15	;volatile
 29763  003E48  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 29764  003E4A  0E50               	movlw	80	;volatile
 29765  003E4C                     L49:
 29766  003E4C  6E12               	movwf	ECANReceiveMessage@ptr,c
 29767                           
 29768                           ;ECAN.c: 860: }
 29769  003E4E  D066               	goto	i1l10694
 29770  003E50                     i1l10634:
 29771                           
 29772                           ;ECAN.c: 861: else
 29773                           ;ECAN.c: 862: return FALSE;
 29774  003E50  0E00               	movlw	0
 29775  003E52  D0C5               	goto	i1l1562
 29776  003E54                     i1l10640:
 29777                           
 29778                           ; BSR set to: 1
 29779                           ;ECAN.c: 869: else if ( mode == 0x40 )
 29780  003E54  5010               	movf	ECANReceiveMessage@mode,w,c
 29781  003E56  0A40               	xorlw	64
 29782  003E58  E146               	bnz	i1l1565
 29783                           
 29784                           ; BSR set to: 1
 29785                           ;ECAN.c: 875: {
 29786                           ;ECAN.c: 876: if ( RXB0FUL )
 29787  003E5A  AE60               	btfss	3936,7,c	;volatile
 29788  003E5C  D004               	goto	i1l1566
 29789                           
 29790                           ; BSR set to: 1
 29791                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 29792  003E5E  0E0F               	movlw	15	;volatile
 29793  003E60  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 29794  003E62  0E60               	movlw	96	;volatile
 29795  003E64  D03E               	goto	L56
 29796  003E66                     i1l1566:
 29797                           
 29798                           ; BSR set to: 1
 29799                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 29800  003E66  010F               	movlb	15	; () banked
 29801  003E68  AF50               	btfss	80,7,b	;volatile
 29802  003E6A  D004               	goto	i1l1568
 29803                           
 29804                           ; BSR set to: 15
 29805                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 29806  003E6C  0E0F               	movlw	15	;volatile
 29807  003E6E  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 29808  003E70  0E50               	movlw	80	;volatile
 29809  003E72  D037               	goto	L56
 29810  003E74                     i1l1568:
 29811                           
 29812                           ; BSR set to: 15
 29813                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 29814  003E74  010D               	movlb	13
 29815  003E76  B5F8               	btfsc	248,2,b	;volatile
 29816  003E78  D007               	goto	i1l1570
 29817  003E7A  010E               	movlb	14
 29818  003E7C  AF20               	btfss	32,7,b	;volatile
 29819  003E7E  D004               	goto	i1l1570
 29820                           
 29821                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 29822  003E80  0E0E               	movlw	14	;volatile
 29823  003E82  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 29824  003E84  0E20               	movlw	32	;volatile
 29825  003E86  D02D               	goto	L56
 29826  003E88                     i1l1570:
 29827                           
 29828                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 29829  003E88  010D               	movlb	13
 29830  003E8A  B7F8               	btfsc	248,3,b	;volatile
 29831  003E8C  D007               	goto	i1l1572
 29832  003E8E  010E               	movlb	14
 29833  003E90  AF30               	btfss	48,7,b	;volatile
 29834  003E92  D004               	goto	i1l1572
 29835                           
 29836                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 29837  003E94  0E0E               	movlw	14	;volatile
 29838  003E96  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 29839  003E98  0E30               	movlw	48	;volatile
 29840  003E9A  D023               	goto	L56
 29841  003E9C                     i1l1572:
 29842                           
 29843                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 29844  003E9C  010D               	movlb	13
 29845  003E9E  B9F8               	btfsc	248,4,b	;volatile
 29846  003EA0  D007               	goto	i1l1574
 29847  003EA2  010E               	movlb	14
 29848  003EA4  AF40               	btfss	64,7,b	;volatile
 29849  003EA6  D004               	goto	i1l1574
 29850                           
 29851                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 29852  003EA8  0E0E               	movlw	14	;volatile
 29853  003EAA  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 29854  003EAC  0E40               	movlw	64	;volatile
 29855  003EAE  D019               	goto	L56
 29856  003EB0                     i1l1574:
 29857                           
 29858                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 29859  003EB0  010D               	movlb	13
 29860  003EB2  BBF8               	btfsc	248,5,b	;volatile
 29861  003EB4  D005               	goto	i1l1576
 29862  003EB6  010E               	movlb	14
 29863  003EB8  AF50               	btfss	80,7,b	;volatile
 29864  003EBA  D002               	goto	i1l1576
 29865                           
 29866                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 29867  003EBC  0E0E               	movlw	14	;volatile
 29868  003EBE  D7D7               	goto	L57
 29869  003EC0                     i1l1576:
 29870                           
 29871                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 29872  003EC0  010D               	movlb	13
 29873  003EC2  BDF8               	btfsc	248,6,b	;volatile
 29874  003EC4  D005               	goto	i1l1578
 29875  003EC6  010E               	movlb	14
 29876  003EC8  AF60               	btfss	96,7,b	;volatile
 29877  003ECA  D002               	goto	i1l1578
 29878                           
 29879                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 29880  003ECC  0E0E               	movlw	14	;volatile
 29881  003ECE  D7C8               	goto	L58
 29882  003ED0                     i1l1578:
 29883                           
 29884                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 29885  003ED0  010D               	movlb	13
 29886  003ED2  BFF8               	btfsc	248,7,b	;volatile
 29887  003ED4  D7BD               	goto	i1l10634
 29888  003ED6  010E               	movlb	14
 29889  003ED8  AF70               	btfss	112,7,b	;volatile
 29890  003EDA  D7BA               	goto	i1l10634
 29891                           
 29892                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 29893  003EDC  0E0E               	movlw	14	;volatile
 29894  003EDE  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 29895  003EE0  0E70               	movlw	112	;volatile
 29896  003EE2                     L56:
 29897  003EE2  6E12               	movwf	ECANReceiveMessage@ptr,c
 29898  003EE4  D00A               	goto	i1l10684
 29899  003EE6                     i1l1565:
 29900                           
 29901                           ; BSR set to: 1
 29902                           ;ECAN.c: 910: else
 29903                           ;ECAN.c: 915: {
 29904                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 29905  003EE6  AE74               	btfss	3956,7,c	;volatile
 29906  003EE8  D7B3               	goto	i1l10634
 29907                           
 29908                           ; BSR set to: 1
 29909                           ;ECAN.c: 919: {
 29910                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 29911  003EEA  506F               	movf	3951,w,c	;volatile
 29912  003EEC  0B07               	andlw	7
 29913  003EEE  EC87  F00B         	call	__ECANPointBuffer
 29914  003EF2  C001  F012         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 29915  003EF6  C002  F013         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 29916  003EFA                     i1l10684:
 29917                           
 29918                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 29919  003EFA  C012  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 29920  003EFE  C013  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 29921  003F02  50DF               	movf	indf2,w,c
 29922  003F04  0B1F               	andlw	31
 29923  003F06  0101               	movlb	1	; () banked
 29924  003F08  6F2B               	movwf	__ECANRxFilterHitInfo& (0+255),b
 29925                           
 29926                           ; BSR set to: 1
 29927                           ;ECAN.c: 934: RXB1IF = 0;
 29928  003F0A  92A4               	bcf	4004,1,c	;volatile
 29929                           
 29930                           ; BSR set to: 1
 29931                           ;ECAN.c: 936: if ( RXB1OVFL )
 29932  003F0C  AC74               	btfss	3956,6,c	;volatile
 29933  003F0E  D006               	goto	i1l10694
 29934                           
 29935                           ; BSR set to: 1
 29936                           ;ECAN.c: 937: {
 29937                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 29938  003F10  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 29939  003F12  6ED9               	movwf	fsr2l,c
 29940  003F14  6ADA               	clrf	fsr2h,c
 29941  003F16  0E00               	movlw	0
 29942  003F18  86DB               	bsf	plusw2,3,c
 29943                           
 29944                           ; BSR set to: 1
 29945                           ;ECAN.c: 939: RXB1OVFL = 0;
 29946  003F1A  9C74               	bcf	3956,6,c	;volatile
 29947  003F1C                     i1l10694:
 29948                           
 29949                           ;ECAN.c: 944: savedPtr = ptr;
 29950  003F1C  C012  F00C         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 29951  003F20  C013  F00D         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 29952                           
 29953                           ;ECAN.c: 945: *msgFlags = 0;
 29954  003F24  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 29955  003F26  6ED9               	movwf	fsr2l,c
 29956  003F28  6ADA               	clrf	fsr2h,c
 29957  003F2A  6ADF               	clrf	indf2,c
 29958                           
 29959                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 29960  003F2C  EE20 F005          	lfsr	2,5
 29961  003F30  D857               	call	PL120	;call to abstracted procedure
 29962                           
 29963                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 29964  003F32  500A               	movf	ECANReceiveMessage@dataLen,w,c
 29965  003F34  6ED9               	movwf	fsr2l,c
 29966  003F36  6ADA               	clrf	fsr2h,c
 29967  003F38  5011               	movf	ECANReceiveMessage@temp,w,c
 29968  003F3A  0B0F               	andlw	15
 29969  003F3C  6EDF               	movwf	indf2,c
 29970                           
 29971                           ;ECAN.c: 952: if ( temp.bits.b6 )
 29972  003F3E  AC11               	btfss	ECANReceiveMessage@temp,6,c
 29973  003F40  D005               	goto	i1l1586
 29974                           
 29975                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 29976  003F42  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 29977  003F44  6ED9               	movwf	fsr2l,c
 29978  003F46  6ADA               	clrf	fsr2h,c
 29979  003F48  0E00               	movlw	0
 29980  003F4A  8CDB               	bsf	plusw2,6,c
 29981  003F4C                     i1l1586:
 29982                           
 29983                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 29984  003F4C  EE20 F002          	lfsr	2,2
 29985  003F50  D847               	call	PL120	;call to abstracted procedure
 29986                           
 29987                           ;ECAN.c: 957: if ( temp.bits.b3 )
 29988  003F52  A611               	btfss	ECANReceiveMessage@temp,3,c
 29989  003F54  D008               	goto	i1l1587
 29990                           
 29991                           ;ECAN.c: 958: {
 29992                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 29993  003F56  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 29994  003F58  6ED9               	movwf	fsr2l,c
 29995  003F5A  6ADA               	clrf	fsr2h,c
 29996  003F5C  0E00               	movlw	0
 29997  003F5E  8ADB               	bsf	plusw2,5,c
 29998                           
 29999                           ;ECAN.c: 960: temp.Val = 1;
 30000  003F60  0E01               	movlw	1
 30001  003F62  6E11               	movwf	ECANReceiveMessage@temp,c
 30002                           
 30003                           ;ECAN.c: 961: }
 30004  003F64  D001               	goto	i1l10712
 30005  003F66                     i1l1587:
 30006                           
 30007                           ;ECAN.c: 962: else
 30008                           ;ECAN.c: 963: temp.Val = 0;
 30009  003F66  6A11               	clrf	ECANReceiveMessage@temp,c
 30010  003F68                     i1l10712:
 30011                           
 30012                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 30013  003F68  2812               	incf	ECANReceiveMessage@ptr,w,c
 30014  003F6A  6E01               	movwf	?__RegsToCANID,c
 30015  003F6C  0E00               	movlw	0
 30016  003F6E  2013               	addwfc	ECANReceiveMessage@ptr+1,w,c
 30017  003F70  6E02               	movwf	?__RegsToCANID+1,c
 30018  003F72  C00E  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 30019  003F76  C011  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 30020  003F7A  EC11  F016         	call	__RegsToCANID	;wreg free
 30021                           
 30022                           ;ECAN.c: 968: ptr += 6;
 30023  003F7E  0E06               	movlw	6
 30024  003F80  2612               	addwf	ECANReceiveMessage@ptr,f,c
 30025  003F82  0E00               	movlw	0
 30026  003F84  2213               	addwfc	ECANReceiveMessage@ptr+1,f,c
 30027                           
 30028                           ;ECAN.c: 969: temp.Val = *dataLen;
 30029  003F86  500A               	movf	ECANReceiveMessage@dataLen,w,c
 30030  003F88  6ED9               	movwf	fsr2l,c
 30031  003F8A  6ADA               	clrf	fsr2h,c
 30032  003F8C  50DF               	movf	indf2,w,c
 30033  003F8E  6E11               	movwf	ECANReceiveMessage@temp,c
 30034                           
 30035                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 30036  003F90  6A0F               	clrf	ECANReceiveMessage@i,c
 30037  003F92  D00F               	goto	i1l10728
 30038  003F94                     i1l10720:
 30039                           
 30040                           ;ECAN.c: 971: *data++ = *ptr++;
 30041  003F94  C012  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 30042  003F98  C013  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 30043  003F9C  C008  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 30044  003FA0  C009  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 30045  003FA4  CFDF FFE7          	movff	indf2,indf1
 30046  003FA8  4A12               	infsnz	ECANReceiveMessage@ptr,f,c
 30047  003FAA  2A13               	incf	ECANReceiveMessage@ptr+1,f,c
 30048  003FAC  4A08               	infsnz	ECANReceiveMessage@data,f,c
 30049  003FAE  2A09               	incf	ECANReceiveMessage@data+1,f,c
 30050  003FB0  2A0F               	incf	ECANReceiveMessage@i,f,c
 30051  003FB2                     i1l10728:
 30052  003FB2  5011               	movf	ECANReceiveMessage@temp,w,c
 30053  003FB4  5C0F               	subwf	ECANReceiveMessage@i,w,c
 30054  003FB6  E3EE               	bnc	i1l10720
 30055                           
 30056                           ;ECAN.c: 974: if ( IRXIF )
 30057  003FB8  AEA4               	btfss	4004,7,c	;volatile
 30058  003FBA  D006               	goto	i1l10734
 30059                           
 30060                           ;ECAN.c: 975: {
 30061                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 30062  003FBC  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30063  003FBE  6ED9               	movwf	fsr2l,c
 30064  003FC0  6ADA               	clrf	fsr2h,c
 30065  003FC2  0E00               	movlw	0
 30066  003FC4  88DB               	bsf	plusw2,4,c
 30067                           
 30068                           ;ECAN.c: 977: IRXIF = 0;
 30069  003FC6  9EA4               	bcf	4004,7,c	;volatile
 30070  003FC8                     i1l10734:
 30071                           
 30072                           ;ECAN.c: 978: }
 30073                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 30074  003FC8  C00C  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 30075  003FCC  C00D  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 30076  003FD0  0E7F               	movlw	127
 30077  003FD2  16DF               	andwf	indf2,f,c
 30078                           
 30079                           ;ECAN.c: 985: if ( mode == 0x80 )
 30080  003FD4  5010               	movf	ECANReceiveMessage@mode,w,c
 30081  003FD6  0A80               	xorlw	128
 30082  003FD8  B4D8               	btfsc	status,2,c
 30083                           
 30084                           ;ECAN.c: 986: FIFOEMPTY = 0;
 30085  003FDA  9E74               	bcf	3956,7,c	;volatile
 30086                           
 30087                           ;ECAN.c: 992: return TRUE;
 30088  003FDC  0E01               	movlw	1
 30089  003FDE                     i1l1562:
 30090  003FDE  0012               	return	
 30091  003FE0                     __end_of_ECANReceiveMessage:
 30092                           	opt stack 0
 30093  003FE0                     PL120:
 30094                           	opt stack 19
 30095  003FE0  5012               	movf	ECANReceiveMessage@ptr,w,c
 30096  003FE2  26D9               	addwf	fsr2l,f,c
 30097  003FE4  5013               	movf	ECANReceiveMessage@ptr+1,w,c
 30098  003FE6  22DA               	addwfc	fsr2h,f,c
 30099  003FE8  50DF               	movf	indf2,w,c
 30100  003FEA  6E11               	movwf	ECANReceiveMessage@temp,c
 30101  003FEC  0012               	return	
 30102  003FEE                     __end_ofPL120:
 30103                           	opt stack 0
 30104                           tblptru	equ	0xFF8
 30105                           tblptrh	equ	0xFF7
 30106                           tblptrl	equ	0xFF6
 30107                           tablat	equ	0xFF5
 30108                           prodh	equ	0xFF4
 30109                           prodl	equ	0xFF3
 30110                           intcon	equ	0xFF2
 30111                           indf0	equ	0xFEF
 30112                           postinc0	equ	0xFEE
 30113                           fsr0h	equ	0xFEA
 30114                           fsr0l	equ	0xFE9
 30115                           wreg	equ	0xFE8
 30116                           indf1	equ	0xFE7
 30117                           postinc1	equ	0xFE6
 30118                           postdec1	equ	0xFE5
 30119                           fsr1h	equ	0xFE2
 30120                           fsr1l	equ	0xFE1
 30121                           bsr	equ	0xFE0
 30122                           indf2	equ	0xFDF
 30123                           postinc2	equ	0xFDE
 30124                           postdec2	equ	0xFDD
 30125                           plusw2	equ	0xFDB
 30126                           fsr2h	equ	0xFDA
 30127                           fsr2l	equ	0xFD9
 30128                           status	equ	0xFD8
 30129                           
 30130 ;; *************** function __RegsToCANID *****************
 30131 ;; Defined at:
 30132 ;;		line 1158 in file "ECAN.c"
 30133 ;; Parameters:    Size  Location     Type
 30134 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 30135 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30136 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30137 ;;  val             1    2[COMRAM] PTR unsigned long 
 30138 ;;		 -> id(4), 
 30139 ;;  type            1    3[COMRAM] unsigned char 
 30140 ;; Auto vars:     Size  Location     Type
 30141 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 30142 ;;		 -> id(4), 
 30143 ;; Return value:  Size  Location     Type
 30144 ;;		None               void
 30145 ;; Registers used:
 30146 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 30147 ;; Tracked objects:
 30148 ;;		On entry : 1/1
 30149 ;;		On exit  : 1/1
 30150 ;;		Unchanged: 1/0
 30151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30152 ;;      Params:         4       0       0       0       0       0       0
 30153 ;;      Locals:         1       0       0       0       0       0       0
 30154 ;;      Temps:          2       0       0       0       0       0       0
 30155 ;;      Totals:         7       0       0       0       0       0       0
 30156 ;;Total ram usage:        7 bytes
 30157 ;; Hardware stack levels used:    1
 30158 ;; This function calls:
 30159 ;;		Nothing
 30160 ;; This function is called by:
 30161 ;;		_ECANReceiveMessage
 30162 ;; This function uses a non-reentrant model
 30163 ;;
 30164                           
 30165                           	psect	text90
 30166  002C22                     __ptext90:
 30167                           	opt stack 0
 30168  002C22                     __RegsToCANID:
 30169                           	opt stack 19
 30170                           
 30171                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 30172                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 30173                           
 30174                           ;incstack = 0
 30175                           ;incstack = 0
 30176  002C22  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 30177                           
 30178                           ;ECAN.c: 1163: if ( type == 0 )
 30179  002C26  6604               	tstfsz	__RegsToCANID@type,c
 30180  002C28  D02B               	goto	i1l10384
 30181                           
 30182                           ;ECAN.c: 1164: {
 30183                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 30184  002C2A  5007               	movf	__RegsToCANID@Value,w,c
 30185  002C2C  6ED9               	movwf	fsr2l,c
 30186  002C2E  D86C               	call	PL74	;call to abstracted procedure
 30187  002C30  3605               	rlcf	??__RegsToCANID,f,c
 30188  002C32  90D8               	bcf	status,0,c
 30189  002C34  3605               	rlcf	??__RegsToCANID,f,c
 30190  002C36  90D8               	bcf	status,0,c
 30191  002C38  3405               	rlcf	??__RegsToCANID,w,c
 30192  002C3A  6EDF               	movwf	indf2,c
 30193                           
 30194                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 30195  002C3C  5007               	movf	__RegsToCANID@Value,w,c
 30196  002C3E  6ED9               	movwf	fsr2l,c
 30197  002C40  6ADA               	clrf	fsr2h,c
 30198  002C42  2AD9               	incf	fsr2l,f,c
 30199  002C44  6ADA               	clrf	fsr2h,c
 30200  002C46  D873               	call	PL92	;call to abstracted procedure
 30201  002C48                     i1u1193_25:
 30202  002C48  90D8               	bcf	status,0,c
 30203  002C4A  3205               	rrcf	??__RegsToCANID,f,c
 30204  002C4C  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 30205  002C4E  D7FC               	goto	i1u1193_25
 30206  002C50  5005               	movf	??__RegsToCANID,w,c
 30207                           
 30208                           ;ECAN.c: 1168: ptr++;
 30209                           
 30210                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 30211  002C52  D863               	call	PL76	;call to abstracted procedure
 30212  002C54  0E05               	movlw	5
 30213  002C56  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 30214  002C58                     i1u1194_25:
 30215  002C58  90D8               	bcf	status,0,c
 30216  002C5A  3205               	rrcf	??__RegsToCANID,f,c
 30217  002C5C  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 30218  002C5E  D7FC               	goto	i1u1194_25
 30219  002C60  5007               	movf	__RegsToCANID@Value,w,c
 30220  002C62  6ED9               	movwf	fsr2l,c
 30221  002C64  6ADA               	clrf	fsr2h,c
 30222  002C66  5005               	movf	??__RegsToCANID,w,c
 30223  002C68  12DF               	iorwf	indf2,f,c
 30224                           
 30225                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 30226  002C6A  D83D               	call	PL40	;call to abstracted procedure
 30227  002C6C  6ADF               	clrf	indf2,c
 30228                           
 30229                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 30230  002C6E  5007               	movf	__RegsToCANID@Value,w,c
 30231  002C70  6ED9               	movwf	fsr2l,c
 30232  002C72  6ADA               	clrf	fsr2h,c
 30233  002C74  0E03               	movlw	3
 30234  002C76  26D9               	addwf	fsr2l,f,c
 30235  002C78  6ADA               	clrf	fsr2h,c
 30236  002C7A  0E00               	movlw	0
 30237  002C7C  6EDF               	movwf	indf2,c
 30238                           
 30239                           ;ECAN.c: 1172: }
 30240  002C7E  D032               	goto	i1l1609
 30241  002C80                     i1l10384:
 30242                           
 30243                           ;ECAN.c: 1173: else
 30244                           ;ECAN.c: 1174: {
 30245                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 30246  002C80  D832               	call	PL40	;call to abstracted procedure
 30247  002C82  D855               	call	PL92	;call to abstracted procedure
 30248  002C84                     i1u1195_25:
 30249  002C84  90D8               	bcf	status,0,c
 30250  002C86  3605               	rlcf	??__RegsToCANID,f,c
 30251  002C88  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 30252  002C8A  D7FC               	goto	i1u1195_25
 30253  002C8C  5005               	movf	??__RegsToCANID,w,c
 30254  002C8E  6EDF               	movwf	indf2,c
 30255                           
 30256                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 30257  002C90  5007               	movf	__RegsToCANID@Value,w,c
 30258  002C92  6ED9               	movwf	fsr2l,c
 30259  002C94  6ADA               	clrf	fsr2h,c
 30260  002C96  0E03               	movlw	3
 30261  002C98  26D9               	addwf	fsr2l,f,c
 30262  002C9A  D836               	call	PL74	;call to abstracted procedure
 30263  002C9C  3205               	rrcf	??__RegsToCANID,f,c
 30264  002C9E  90D8               	bcf	status,0,c
 30265  002CA0  3205               	rrcf	??__RegsToCANID,f,c
 30266  002CA2  90D8               	bcf	status,0,c
 30267  002CA4  3005               	rrcf	??__RegsToCANID,w,c
 30268                           
 30269                           ;ECAN.c: 1178: ptr++;
 30270                           
 30271                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 30272  002CA6  D839               	call	PL76	;call to abstracted procedure
 30273  002CA8  0E03               	movlw	3
 30274  002CAA  1605               	andwf	??__RegsToCANID,f,c
 30275  002CAC  D81C               	call	PL40	;call to abstracted procedure
 30276  002CAE  5005               	movf	??__RegsToCANID,w,c
 30277  002CB0  12DF               	iorwf	indf2,f,c
 30278                           
 30279                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 30280  002CB2  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 30281  002CB6  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 30282  002CBA  50DF               	movf	indf2,w,c
 30283  002CBC  6E05               	movwf	??__RegsToCANID& (0+255),c
 30284  002CBE  90D8               	bcf	status,0,c
 30285  002CC0  3205               	rrcf	??__RegsToCANID,f,c
 30286  002CC2  90D8               	bcf	status,0,c
 30287  002CC4  3205               	rrcf	??__RegsToCANID,f,c
 30288  002CC6  90D8               	bcf	status,0,c
 30289  002CC8  3205               	rrcf	??__RegsToCANID,f,c
 30290  002CCA  0E1C               	movlw	28
 30291  002CCC  1605               	andwf	??__RegsToCANID,f,c
 30292  002CCE  D80B               	call	PL40	;call to abstracted procedure
 30293  002CD0  5005               	movf	??__RegsToCANID,w,c
 30294  002CD2  12DF               	iorwf	indf2,f,c
 30295                           
 30296                           ;ECAN.c: 1182: ptr++;
 30297                           
 30298                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 30299  002CD4  D80F               	call	PL68	;call to abstracted procedure
 30300  002CD6  2AE1               	incf	fsr1l,f,c
 30301  002CD8  6AE2               	clrf	fsr1h,c
 30302  002CDA  CFDF FFE7          	movff	indf2,indf1
 30303                           
 30304                           ;ECAN.c: 1184: ptr++;
 30305                           
 30306                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 30307  002CDE  D80A               	call	PL68	;call to abstracted procedure
 30308  002CE0  CFDF FFE7          	movff	indf2,indf1
 30309  002CE4                     i1l1609:
 30310  002CE4  0012               	return	
 30311  002CE6                     __end_of__RegsToCANID:
 30312                           	opt stack 0
 30313  002CE6                     PL40:
 30314                           	opt stack 19
 30315  002CE6  5007               	movf	__RegsToCANID@Value,w,c
 30316  002CE8  6ED9               	movwf	fsr2l,c
 30317  002CEA  6ADA               	clrf	fsr2h,c
 30318  002CEC  0E02               	movlw	2
 30319  002CEE  26D9               	addwf	fsr2l,f,c
 30320  002CF0  6ADA               	clrf	fsr2h,c
 30321  002CF2  0012               	return	
 30322  002CF4                     __end_ofPL40:
 30323                           	opt stack 0
 30324  002CF4                     PL68:
 30325                           	opt stack 19
 30326  002CF4  4A01               	infsnz	__RegsToCANID@ptr,f,c
 30327  002CF6  2A02               	incf	__RegsToCANID@ptr+1,f,c
 30328  002CF8  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 30329  002CFC  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 30330  002D00  5007               	movf	__RegsToCANID@Value,w,c
 30331  002D02  6EE1               	movwf	fsr1l,c
 30332  002D04  6AE2               	clrf	fsr1h,c
 30333  002D06  0012               	return	
 30334  002D08                     __end_ofPL68:
 30335                           	opt stack 0
 30336  002D08                     PL74:
 30337                           	opt stack 19
 30338  002D08  6ADA               	clrf	fsr2h,c
 30339  002D0A  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 30340  002D0E  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 30341  002D12  50E7               	movf	indf1,w,c
 30342  002D14  6E05               	movwf	??__RegsToCANID& (0+255),c
 30343  002D16  90D8               	bcf	status,0,c
 30344  002D18  0012               	return	
 30345  002D1A                     __end_ofPL74:
 30346                           	opt stack 0
 30347  002D1A                     PL76:
 30348                           	opt stack 19
 30349  002D1A  6EDF               	movwf	indf2,c
 30350  002D1C  4A01               	infsnz	__RegsToCANID@ptr,f,c
 30351  002D1E  2A02               	incf	__RegsToCANID@ptr+1,f,c
 30352  002D20  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 30353  002D24  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 30354  002D28  50DF               	movf	indf2,w,c
 30355  002D2A  6E05               	movwf	??__RegsToCANID& (0+255),c
 30356  002D2C  0012               	return	
 30357  002D2E                     __end_ofPL76:
 30358                           	opt stack 0
 30359  002D2E                     PL92:
 30360                           	opt stack 19
 30361  002D2E  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 30362  002D32  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 30363  002D36  50E7               	movf	indf1,w,c
 30364  002D38  6E05               	movwf	??__RegsToCANID& (0+255),c
 30365  002D3A  0E05               	movlw	5
 30366  002D3C  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 30367  002D3E  0C05               	retlw	5
 30368  002D40                     __end_ofPL92:
 30369                           	opt stack 0
 30370                           tblptru	equ	0xFF8
 30371                           tblptrh	equ	0xFF7
 30372                           tblptrl	equ	0xFF6
 30373                           tablat	equ	0xFF5
 30374                           prodh	equ	0xFF4
 30375                           prodl	equ	0xFF3
 30376                           intcon	equ	0xFF2
 30377                           indf0	equ	0xFEF
 30378                           postinc0	equ	0xFEE
 30379                           fsr0h	equ	0xFEA
 30380                           fsr0l	equ	0xFE9
 30381                           wreg	equ	0xFE8
 30382                           indf1	equ	0xFE7
 30383                           postinc1	equ	0xFE6
 30384                           postdec1	equ	0xFE5
 30385                           fsr1h	equ	0xFE2
 30386                           fsr1l	equ	0xFE1
 30387                           bsr	equ	0xFE0
 30388                           indf2	equ	0xFDF
 30389                           postinc2	equ	0xFDE
 30390                           postdec2	equ	0xFDD
 30391                           plusw2	equ	0xFDB
 30392                           fsr2h	equ	0xFDA
 30393                           fsr2l	equ	0xFD9
 30394                           status	equ	0xFD8
 30395                           
 30396 ;; *************** function __ECANPointBuffer *****************
 30397 ;; Defined at:
 30398 ;;		line 1209 in file "ECAN.c"
 30399 ;; Parameters:    Size  Location     Type
 30400 ;;  b               1    wreg     unsigned char 
 30401 ;; Auto vars:     Size  Location     Type
 30402 ;;  b               1    3[COMRAM] unsigned char 
 30403 ;;  pt              2    4[COMRAM] PTR unsigned char 
 30404 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30405 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30406 ;; Return value:  Size  Location     Type
 30407 ;;                  2    0[COMRAM] PTR unsigned char 
 30408 ;; Registers used:
 30409 ;;		wreg, status,2, status,0
 30410 ;; Tracked objects:
 30411 ;;		On entry : F/1
 30412 ;;		On exit  : 0/0
 30413 ;;		Unchanged: 0/0
 30414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30415 ;;      Params:         3       0       0       0       0       0       0
 30416 ;;      Locals:         3       0       0       0       0       0       0
 30417 ;;      Temps:          0       0       0       0       0       0       0
 30418 ;;      Totals:         6       0       0       0       0       0       0
 30419 ;;Total ram usage:        6 bytes
 30420 ;; Hardware stack levels used:    1
 30421 ;; This function calls:
 30422 ;;		Nothing
 30423 ;; This function is called by:
 30424 ;;		_ECANReceiveMessage
 30425 ;; This function uses a non-reentrant model
 30426 ;;
 30427                           
 30428                           	psect	text91
 30429  00170E                     __ptext91:
 30430                           	opt stack 0
 30431  00170E                     __ECANPointBuffer:
 30432                           	opt stack 19
 30433                           
 30434                           ;incstack = 0
 30435                           ;incstack = 0
 30436                           ;__ECANPointBuffer@b stored from wreg
 30437  00170E  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 30438                           
 30439                           ; BSR set to: 1
 30440                           ;ECAN.c: 1210: BYTE* pt;
 30441                           ;ECAN.c: 1212: switch(b)
 30442  001712  D024               	goto	i1l10370
 30443  001714                     i1l10352:
 30444                           
 30445                           ; BSR set to: 1
 30446                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 30447  001714  0E0F               	movlw	15	;volatile
 30448  001716  6E06               	movwf	__ECANPointBuffer@pt+1,c
 30449  001718  0E60               	movlw	96	;volatile
 30450  00171A  D01E               	goto	L65
 30451  00171C                     i1l10354:
 30452                           
 30453                           ; BSR set to: 1
 30454                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 30455  00171C  010F               	movlb	15	; () banked
 30456  00171E  0E0F               	movlw	15	;volatile
 30457  001720  6E06               	movwf	__ECANPointBuffer@pt+1,c
 30458  001722  0E50               	movlw	80	;volatile
 30459  001724  D019               	goto	L65
 30460  001726                     i1l10356:
 30461                           
 30462                           ; BSR set to: 1
 30463                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 30464  001726  010E               	movlb	14	; () banked
 30465  001728  0E0E               	movlw	14	;volatile
 30466  00172A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 30467  00172C  0E20               	movlw	32	;volatile
 30468  00172E  D014               	goto	L65
 30469  001730                     i1l10358:
 30470                           
 30471                           ; BSR set to: 1
 30472                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 30473  001730  010E               	movlb	14	; () banked
 30474  001732  0E0E               	movlw	14	;volatile
 30475  001734  6E06               	movwf	__ECANPointBuffer@pt+1,c
 30476  001736  0E30               	movlw	48	;volatile
 30477  001738  D00F               	goto	L65
 30478  00173A                     i1l10360:
 30479                           
 30480                           ; BSR set to: 1
 30481                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 30482  00173A  010E               	movlb	14	; () banked
 30483  00173C  0E0E               	movlw	14	;volatile
 30484  00173E  6E06               	movwf	__ECANPointBuffer@pt+1,c
 30485  001740  0E40               	movlw	64	;volatile
 30486  001742  D00A               	goto	L65
 30487  001744                     i1l10362:
 30488                           
 30489                           ; BSR set to: 1
 30490                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 30491  001744  010E               	movlb	14	; () banked
 30492  001746  0E0E               	movlw	14	;volatile
 30493  001748  D7EB               	goto	L66
 30494  00174A                     i1l10364:
 30495                           
 30496                           ; BSR set to: 1
 30497                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 30498  00174A  010E               	movlb	14	; () banked
 30499  00174C  0E0E               	movlw	14	;volatile
 30500  00174E  D7E3               	goto	L67
 30501  001750                     i1l10366:
 30502                           
 30503                           ; BSR set to: 1
 30504                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 30505  001750  010E               	movlb	14	; () banked
 30506  001752  0E0E               	movlw	14	;volatile
 30507  001754  6E06               	movwf	__ECANPointBuffer@pt+1,c
 30508  001756  0E70               	movlw	112	;volatile
 30509  001758                     L65:
 30510  001758  6E05               	movwf	__ECANPointBuffer@pt,c
 30511                           
 30512                           ;ECAN.c: 1237: break;
 30513  00175A  D00F               	goto	i1l1614
 30514  00175C                     i1l10370:
 30515                           
 30516                           ; BSR set to: 1
 30517  00175C  5004               	movf	__ECANPointBuffer@b,w,c
 30518                           
 30519                           ; Switch size 1, requested type "space"
 30520                           ; Number of cases is 7, Range of values is 0 to 6
 30521                           ; switch strategies available:
 30522                           ; Name         Instructions Cycles
 30523                           ; simple_byte           22    12 (average)
 30524                           ;	Chosen strategy is simple_byte
 30525  00175E  E0DA               	bz	i1l10352
 30526  001760  0A01               	xorlw	1	; case 1
 30527  001762  E0DC               	bz	i1l10354
 30528  001764  0A03               	xorlw	3	; case 2
 30529  001766  E0DF               	bz	i1l10356
 30530  001768  0A01               	xorlw	1	; case 3
 30531  00176A  E0E2               	bz	i1l10358
 30532  00176C  0A07               	xorlw	7	; case 4
 30533  00176E  E0E5               	bz	i1l10360
 30534  001770  0A01               	xorlw	1	; case 5
 30535  001772  E0E8               	bz	i1l10362
 30536  001774  0A03               	xorlw	3	; case 6
 30537  001776  E0E9               	bz	i1l10364
 30538  001778  D7EB               	goto	i1l10366
 30539  00177A                     i1l1614:
 30540                           
 30541                           ;ECAN.c: 1239: return (pt);
 30542  00177A  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 30543  00177E  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 30544  001782  0012               	return	
 30545  001784                     __end_of__ECANPointBuffer:
 30546                           	opt stack 0
 30547                           tblptru	equ	0xFF8
 30548                           tblptrh	equ	0xFF7
 30549                           tblptrl	equ	0xFF6
 30550                           tablat	equ	0xFF5
 30551                           prodh	equ	0xFF4
 30552                           prodl	equ	0xFF3
 30553                           intcon	equ	0xFF2
 30554                           indf0	equ	0xFEF
 30555                           postinc0	equ	0xFEE
 30556                           fsr0h	equ	0xFEA
 30557                           fsr0l	equ	0xFE9
 30558                           wreg	equ	0xFE8
 30559                           indf1	equ	0xFE7
 30560                           postinc1	equ	0xFE6
 30561                           postdec1	equ	0xFE5
 30562                           fsr1h	equ	0xFE2
 30563                           fsr1l	equ	0xFE1
 30564                           bsr	equ	0xFE0
 30565                           indf2	equ	0xFDF
 30566                           postinc2	equ	0xFDE
 30567                           postdec2	equ	0xFDD
 30568                           plusw2	equ	0xFDB
 30569                           fsr2h	equ	0xFDA
 30570                           fsr2l	equ	0xFD9
 30571                           status	equ	0xFD8
 30572                           
 30573 ;; *************** function _fifo_write *****************
 30574 ;; Defined at:
 30575 ;;		line 61 in file "fifo.c"
 30576 ;; Parameters:    Size  Location     Type
 30577 ;;  f               2    0[COMRAM] PTR struct .
 30578 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 30579 ;;  buf             2    2[COMRAM] PTR const void 
 30580 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 30581 ;;  nbytes          4    4[COMRAM] unsigned long 
 30582 ;; Auto vars:     Size  Location     Type
 30583 ;;  i               4   14[COMRAM] unsigned long 
 30584 ;;  p               2   12[COMRAM] PTR const unsigned char 
 30585 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 30586 ;; Return value:  Size  Location     Type
 30587 ;;                  2    0[COMRAM] unsigned short 
 30588 ;; Registers used:
 30589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 30590 ;; Tracked objects:
 30591 ;;		On entry : F/1
 30592 ;;		On exit  : F/1
 30593 ;;		Unchanged: F/0
 30594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30595 ;;      Params:         8       0       0       0       0       0       0
 30596 ;;      Locals:         6       0       0       0       0       0       0
 30597 ;;      Temps:          4       0       0       0       0       0       0
 30598 ;;      Totals:        18       0       0       0       0       0       0
 30599 ;;Total ram usage:       18 bytes
 30600 ;; Hardware stack levels used:    1
 30601 ;; This function calls:
 30602 ;;		Nothing
 30603 ;; This function is called by:
 30604 ;;		_Interrupt
 30605 ;; This function uses a non-reentrant model
 30606 ;;
 30607                           
 30608                           	psect	text92
 30609  002D40                     __ptext92:
 30610                           	opt stack 0
 30611  002D40                     _fifo_write:
 30612                           	opt stack 20
 30613                           
 30614                           ; BSR set to: 1
 30615                           ;fifo.c: 62: uint32_t i;
 30616                           ;fifo.c: 63: const uint8_t *p;
 30617                           ;fifo.c: 64: p = buf;
 30618                           
 30619                           ;incstack = 0
 30620                           ;incstack = 0
 30621  002D40  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 30622  002D44  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 30623                           
 30624                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 30625  002D48  6A0F               	clrf	fifo_write@i,c
 30626  002D4A  6A10               	clrf	fifo_write@i+1,c
 30627  002D4C  6A11               	clrf	fifo_write@i+2,c
 30628  002D4E  6A12               	clrf	fifo_write@i+3,c
 30629  002D50  D068               	goto	i1l6914
 30630  002D52                     i1l6894:
 30631                           
 30632                           ; BSR set to: 1
 30633                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 30634                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 30635  002D52  EE20 F004          	lfsr	2,4
 30636  002D56  5001               	movf	fifo_write@f,w,c
 30637  002D58  D872               	call	PL14	;call to abstracted procedure
 30638  002D5A  E102               	bnz	i1u665_25
 30639  002D5C  5009               	movf	??_fifo_write,w,c
 30640  002D5E  180B               	xorwf	??_fifo_write+2,w,c
 30641  002D60                     i1u665_25:
 30642  002D60  E011               	bz	i1l1641
 30643                           
 30644                           ; BSR set to: 1
 30645  002D62  EE20 F006          	lfsr	2,6
 30646  002D66  5001               	movf	fifo_write@f,w,c
 30647  002D68  D86A               	call	PL14	;call to abstracted procedure
 30648  002D6A  E102               	bnz	i1u666_25
 30649  002D6C  5009               	movf	??_fifo_write,w,c
 30650  002D6E  180B               	xorwf	??_fifo_write+2,w,c
 30651  002D70                     i1u666_25:
 30652  002D70  E10E               	bnz	i1l6902
 30653                           
 30654                           ; BSR set to: 1
 30655  002D72  EE20 F004          	lfsr	2,4
 30656  002D76  5001               	movf	fifo_write@f,w,c
 30657  002D78  26D9               	addwf	fsr2l,f,c
 30658  002D7A  5002               	movf	fifo_write@f+1,w,c
 30659  002D7C  22DA               	addwfc	fsr2h,f,c
 30660  002D7E  50DE               	movf	postinc2,w,c
 30661  002D80  10DD               	iorwf	postdec2,w,c
 30662  002D82  E105               	bnz	i1l6902
 30663  002D84                     i1l1641:
 30664                           
 30665                           ; BSR set to: 1
 30666                           ;fifo.c: 71: return i;
 30667  002D84  C00F  F001         	movff	fifo_write@i,?_fifo_write
 30668  002D88  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 30669  002D8C  D057               	goto	i1l1642
 30670  002D8E                     i1l6902:
 30671                           
 30672                           ; BSR set to: 1
 30673                           ;fifo.c: 73: else {
 30674                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 30675  002D8E  C00D  FFD9         	movff	fifo_write@p,fsr2l
 30676  002D92  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 30677  002D96  EE10 F002          	lfsr	1,2
 30678  002D9A  5001               	movf	fifo_write@f,w,c
 30679  002D9C  26E1               	addwf	fsr1l,f,c
 30680  002D9E  5002               	movf	fifo_write@f+1,w,c
 30681  002DA0  22E2               	addwfc	fsr1h,f,c
 30682  002DA2  CFE6 F009          	movff	postinc1,??_fifo_write
 30683  002DA6  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 30684  002DAA  C001  FFE1         	movff	fifo_write@f,fsr1l
 30685  002DAE  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 30686  002DB2  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 30687  002DB6  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 30688  002DBA  5009               	movf	??_fifo_write,w,c
 30689  002DBC  240B               	addwf	??_fifo_write+2,w,c
 30690  002DBE  6EE1               	movwf	fsr1l,c
 30691  002DC0  500A               	movf	??_fifo_write+1,w,c
 30692  002DC2  200C               	addwfc	??_fifo_write+3,w,c
 30693  002DC4  6EE2               	movwf	fsr1h,c
 30694  002DC6  CFDF FFE7          	movff	indf2,indf1
 30695                           
 30696                           ; BSR set to: 1
 30697  002DCA  4A0D               	infsnz	fifo_write@p,f,c
 30698  002DCC  2A0E               	incf	fifo_write@p+1,f,c
 30699                           
 30700                           ; BSR set to: 1
 30701                           ;fifo.c: 75: f->head++;
 30702  002DCE  EE20 F002          	lfsr	2,2
 30703  002DD2  5001               	movf	fifo_write@f,w,c
 30704  002DD4  26D9               	addwf	fsr2l,f,c
 30705  002DD6  5002               	movf	fifo_write@f+1,w,c
 30706  002DD8  22DA               	addwfc	fsr2h,f,c
 30707  002DDA  2ADE               	incf	postinc2,f,c
 30708  002DDC  0E00               	movlw	0
 30709  002DDE  22DD               	addwfc	postdec2,f,c
 30710                           
 30711                           ; BSR set to: 1
 30712                           ;fifo.c: 77: if (f->head >= f->size) {
 30713  002DE0  EE20 F006          	lfsr	2,6
 30714  002DE4  5001               	movf	fifo_write@f,w,c
 30715  002DE6  26D9               	addwf	fsr2l,f,c
 30716  002DE8  5002               	movf	fifo_write@f+1,w,c
 30717  002DEA  22DA               	addwfc	fsr2h,f,c
 30718  002DEC  EE10 F002          	lfsr	1,2
 30719  002DF0  5001               	movf	fifo_write@f,w,c
 30720  002DF2  26E1               	addwf	fsr1l,f,c
 30721  002DF4  5002               	movf	fifo_write@f+1,w,c
 30722  002DF6  22E2               	addwfc	fsr1h,f,c
 30723  002DF8  52E6               	movf	postinc1,f,c
 30724  002DFA  52DE               	movf	postinc2,f,c
 30725  002DFC  50DD               	movf	postdec2,w,c
 30726  002DFE  5CE5               	subwf	postdec1,w,c
 30727  002E00  E102               	bnz	i1u668_25
 30728  002E02  50DF               	movf	indf2,w,c
 30729  002E04  5CE7               	subwf	indf1,w,c
 30730  002E06                     i1u668_25:
 30731  002E06  E308               	bnc	i1l6912
 30732                           
 30733                           ; BSR set to: 1
 30734                           ;fifo.c: 78: f->head = 0;
 30735  002E08  EE20 F002          	lfsr	2,2
 30736  002E0C  5001               	movf	fifo_write@f,w,c
 30737  002E0E  26D9               	addwf	fsr2l,f,c
 30738  002E10  5002               	movf	fifo_write@f+1,w,c
 30739  002E12  22DA               	addwfc	fsr2h,f,c
 30740  002E14  6ADE               	clrf	postinc2,c
 30741  002E16  6ADD               	clrf	postdec2,c
 30742  002E18                     i1l6912:
 30743                           
 30744                           ; BSR set to: 1
 30745  002E18  2A0F               	incf	fifo_write@i,f,c
 30746  002E1A  0E00               	movlw	0
 30747  002E1C  2210               	addwfc	fifo_write@i+1,f,c
 30748  002E1E  2211               	addwfc	fifo_write@i+2,f,c
 30749  002E20  2212               	addwfc	fifo_write@i+3,f,c
 30750  002E22                     i1l6914:
 30751                           
 30752                           ; BSR set to: 1
 30753  002E22  5005               	movf	fifo_write@nbytes,w,c
 30754  002E24  5C0F               	subwf	fifo_write@i,w,c
 30755  002E26  5006               	movf	fifo_write@nbytes+1,w,c
 30756  002E28  5810               	subwfb	fifo_write@i+1,w,c
 30757  002E2A  5007               	movf	fifo_write@nbytes+2,w,c
 30758  002E2C  5811               	subwfb	fifo_write@i+2,w,c
 30759  002E2E  5008               	movf	fifo_write@nbytes+3,w,c
 30760  002E30  5812               	subwfb	fifo_write@i+3,w,c
 30761  002E32  E38F               	bnc	i1l6894
 30762                           
 30763                           ; BSR set to: 1
 30764                           ;fifo.c: 79: }
 30765                           ;fifo.c: 80: }
 30766                           ;fifo.c: 82: }
 30767                           ;fifo.c: 84: return nbytes;
 30768  002E34  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 30769  002E38  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 30770  002E3C                     i1l1642:
 30771                           
 30772                           ; BSR set to: 1
 30773  002E3C  0012               	return	
 30774  002E3E                     __end_of_fifo_write:
 30775                           	opt stack 0
 30776  002E3E                     PL14:
 30777                           	opt stack 20
 30778  002E3E  26D9               	addwf	fsr2l,f,c
 30779  002E40  5002               	movf	fifo_write@f+1,w,c
 30780  002E42  22DA               	addwfc	fsr2h,f,c
 30781  002E44  CFDE F009          	movff	postinc2,??_fifo_write
 30782  002E48  CFDD F00A          	movff	postdec2,??_fifo_write+1
 30783  002E4C  EE20 F002          	lfsr	2,2
 30784  002E50  5001               	movf	fifo_write@f,w,c
 30785  002E52  26D9               	addwf	fsr2l,f,c
 30786  002E54  5002               	movf	fifo_write@f+1,w,c
 30787  002E56  22DA               	addwfc	fsr2h,f,c
 30788  002E58  CFDE F00B          	movff	postinc2,??_fifo_write+2
 30789  002E5C  CFDD F00C          	movff	postdec2,??_fifo_write+3
 30790  002E60  2A0B               	incf	??_fifo_write+2,f,c
 30791  002E62  0E00               	movlw	0
 30792  002E64  220C               	addwfc	??_fifo_write+3,f,c
 30793  002E66  500A               	movf	??_fifo_write+1,w,c
 30794  002E68  180C               	xorwf	??_fifo_write+3,w,c
 30795  002E6A  0012               	return	
 30796  002E6C                     __end_ofPL14:
 30797                           	opt stack 0
 30798                           tblptru	equ	0xFF8
 30799                           tblptrh	equ	0xFF7
 30800                           tblptrl	equ	0xFF6
 30801                           tablat	equ	0xFF5
 30802                           prodh	equ	0xFF4
 30803                           prodl	equ	0xFF3
 30804                           intcon	equ	0xFF2
 30805                           indf0	equ	0xFEF
 30806                           postinc0	equ	0xFEE
 30807                           fsr0h	equ	0xFEA
 30808                           fsr0l	equ	0xFE9
 30809                           wreg	equ	0xFE8
 30810                           indf1	equ	0xFE7
 30811                           postinc1	equ	0xFE6
 30812                           postdec1	equ	0xFE5
 30813                           fsr1h	equ	0xFE2
 30814                           fsr1l	equ	0xFE1
 30815                           bsr	equ	0xFE0
 30816                           indf2	equ	0xFDF
 30817                           postinc2	equ	0xFDE
 30818                           postdec2	equ	0xFDD
 30819                           plusw2	equ	0xFDB
 30820                           fsr2h	equ	0xFDA
 30821                           fsr2l	equ	0xFD9
 30822                           status	equ	0xFD8
 30823                           
 30824 ;; *************** function _ReadUSART *****************
 30825 ;; Defined at:
 30826 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 30827 ;; Parameters:    Size  Location     Type
 30828 ;;		None
 30829 ;; Auto vars:     Size  Location     Type
 30830 ;;  data            1    0[COMRAM] unsigned char 
 30831 ;; Return value:  Size  Location     Type
 30832 ;;                  1    wreg      unsigned char 
 30833 ;; Registers used:
 30834 ;;		wreg, status,2, status,0
 30835 ;; Tracked objects:
 30836 ;;		On entry : 0/0
 30837 ;;		On exit  : F/1
 30838 ;;		Unchanged: 0/0
 30839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30840 ;;      Params:         0       0       0       0       0       0       0
 30841 ;;      Locals:         1       0       0       0       0       0       0
 30842 ;;      Temps:          0       0       0       0       0       0       0
 30843 ;;      Totals:         1       0       0       0       0       0       0
 30844 ;;Total ram usage:        1 bytes
 30845 ;; Hardware stack levels used:    1
 30846 ;; This function calls:
 30847 ;;		Nothing
 30848 ;; This function is called by:
 30849 ;;		_Interrupt
 30850 ;; This function uses a non-reentrant model
 30851 ;;
 30852                           
 30853                           	psect	text93
 30854  000E6C                     __ptext93:
 30855                           	opt stack 0
 30856  000E6C                     _ReadUSART:
 30857                           	opt stack 20
 30858                           
 30859                           ; BSR set to: 1
 30860                           ;incstack = 0
 30861                           ;incstack = 0
 30862  000E6C  0EF2               	movlw	242
 30863  000E6E  0101               	movlb	1	; () banked
 30864  000E70  172A               	andwf	_USART_Status& (0+255),f,b
 30865                           
 30866                           ; BSR set to: 1
 30867  000E72  ACAB               	btfss	4011,6,c	;volatile
 30868  000E74  D003               	goto	i1l1993
 30869                           
 30870                           ; BSR set to: 1
 30871  000E76  912A               	bcf	_USART_Status& (0+255),0,b
 30872  000E78  B0AB               	btfsc	4011,0,c	;volatile
 30873                           
 30874                           ; BSR set to: 1
 30875  000E7A  812A               	bsf	_USART_Status& (0+255),0,b
 30876  000E7C                     i1l1993:
 30877                           
 30878                           ; BSR set to: 1
 30879  000E7C  B4AB               	btfsc	4011,2,c	;volatile
 30880                           
 30881                           ; BSR set to: 1
 30882  000E7E  852A               	bsf	_USART_Status& (0+255),2,b
 30883                           
 30884                           ; BSR set to: 1
 30885  000E80  B2AB               	btfsc	4011,1,c	;volatile
 30886                           
 30887                           ; BSR set to: 1
 30888  000E82  872A               	bsf	_USART_Status& (0+255),3,b
 30889                           
 30890                           ; BSR set to: 1
 30891  000E84  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 30892                           
 30893                           ; BSR set to: 1
 30894  000E88  5001               	movf	ReadUSART@data,w,c
 30895                           
 30896                           ; BSR set to: 1
 30897  000E8A  0012               	return	
 30898  000E8C                     __end_of_ReadUSART:
 30899                           	opt stack 0
 30900                           tblptru	equ	0xFF8
 30901                           tblptrh	equ	0xFF7
 30902                           tblptrl	equ	0xFF6
 30903                           tablat	equ	0xFF5
 30904                           prodh	equ	0xFF4
 30905                           prodl	equ	0xFF3
 30906                           intcon	equ	0xFF2
 30907                           indf0	equ	0xFEF
 30908                           postinc0	equ	0xFEE
 30909                           fsr0h	equ	0xFEA
 30910                           fsr0l	equ	0xFE9
 30911                           wreg	equ	0xFE8
 30912                           indf1	equ	0xFE7
 30913                           postinc1	equ	0xFE6
 30914                           postdec1	equ	0xFE5
 30915                           fsr1h	equ	0xFE2
 30916                           fsr1l	equ	0xFE1
 30917                           bsr	equ	0xFE0
 30918                           indf2	equ	0xFDF
 30919                           postinc2	equ	0xFDE
 30920                           postdec2	equ	0xFDD
 30921                           plusw2	equ	0xFDB
 30922                           fsr2h	equ	0xFDA
 30923                           fsr2l	equ	0xFD9
 30924                           status	equ	0xFD8
 30925                           tblptru	equ	0xFF8
 30926                           tblptrh	equ	0xFF7
 30927                           tblptrl	equ	0xFF6
 30928                           tablat	equ	0xFF5
 30929                           prodh	equ	0xFF4
 30930                           prodl	equ	0xFF3
 30931                           intcon	equ	0xFF2
 30932                           indf0	equ	0xFEF
 30933                           postinc0	equ	0xFEE
 30934                           fsr0h	equ	0xFEA
 30935                           fsr0l	equ	0xFE9
 30936                           wreg	equ	0xFE8
 30937                           indf1	equ	0xFE7
 30938                           postinc1	equ	0xFE6
 30939                           postdec1	equ	0xFE5
 30940                           fsr1h	equ	0xFE2
 30941                           fsr1l	equ	0xFE1
 30942                           bsr	equ	0xFE0
 30943                           indf2	equ	0xFDF
 30944                           postinc2	equ	0xFDE
 30945                           postdec2	equ	0xFDD
 30946                           plusw2	equ	0xFDB
 30947                           fsr2h	equ	0xFDA
 30948                           fsr2l	equ	0xFD9
 30949                           status	equ	0xFD8
 30950                           
 30951                           	psect	rparam
 30952  0000                     tblptru	equ	0xFF8
 30953                           tblptrh	equ	0xFF7
 30954                           tblptrl	equ	0xFF6
 30955                           tablat	equ	0xFF5
 30956                           prodh	equ	0xFF4
 30957                           prodl	equ	0xFF3
 30958                           intcon	equ	0xFF2
 30959                           indf0	equ	0xFEF
 30960                           postinc0	equ	0xFEE
 30961                           fsr0h	equ	0xFEA
 30962                           fsr0l	equ	0xFE9
 30963                           wreg	equ	0xFE8
 30964                           indf1	equ	0xFE7
 30965                           postinc1	equ	0xFE6
 30966                           postdec1	equ	0xFE5
 30967                           fsr1h	equ	0xFE2
 30968                           fsr1l	equ	0xFE1
 30969                           bsr	equ	0xFE0
 30970                           indf2	equ	0xFDF
 30971                           postinc2	equ	0xFDE
 30972                           postdec2	equ	0xFDD
 30973                           plusw2	equ	0xFDB
 30974                           fsr2h	equ	0xFDA
 30975                           fsr2l	equ	0xFD9
 30976                           status	equ	0xFD8
 30977                           tblptru	equ	0xFF8
 30978                           tblptrh	equ	0xFF7
 30979                           tblptrl	equ	0xFF6
 30980                           tablat	equ	0xFF5
 30981                           prodh	equ	0xFF4
 30982                           prodl	equ	0xFF3
 30983                           intcon	equ	0xFF2
 30984                           indf0	equ	0xFEF
 30985                           postinc0	equ	0xFEE
 30986                           fsr0h	equ	0xFEA
 30987                           fsr0l	equ	0xFE9
 30988                           wreg	equ	0xFE8
 30989                           indf1	equ	0xFE7
 30990                           postinc1	equ	0xFE6
 30991                           postdec1	equ	0xFE5
 30992                           fsr1h	equ	0xFE2
 30993                           fsr1l	equ	0xFE1
 30994                           bsr	equ	0xFE0
 30995                           indf2	equ	0xFDF
 30996                           postinc2	equ	0xFDE
 30997                           postdec2	equ	0xFDD
 30998                           plusw2	equ	0xFDB
 30999                           fsr2h	equ	0xFDA
 31000                           fsr2l	equ	0xFD9
 31001                           status	equ	0xFD8


Data Sizes:
    Strings     4427
    Constant    120
    Data        0
    BSS         1150
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      65
    BANK0           160    126     126
    BANK1           256      5     250
    BANK2           256     72     200
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ReadTimer3	unsigned int  size(1) Largest target is 2
		 -> WriteTimer3@timer(COMRAM[2]), ReadTimer3@timer(COMRAM[2]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_166(CODE[2]), STR_165(CODE[9]), STR_162(CODE[4]), 
		 -> STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), 
		 -> STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), 
		 -> STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), 
		 -> STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_166(CODE[2]), STR_165(CODE[9]), STR_162(CODE[4]), STR_160(CODE[3]), 
		 -> STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), STR_153(CODE[6]), 
		 -> STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), STR_146(CODE[6]), 
		 -> STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), STR_142(CODE[5]), 
		 -> STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), STR_136(CODE[8]), 
		 -> STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), STR_118(CODE[11]), 
		 -> STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_166(CODE[2]), STR_165(CODE[9]), STR_162(CODE[4]), 
		 -> STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), 
		 -> STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), 
		 -> STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), 
		 -> STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_166(CODE[2]), STR_165(CODE[9]), STR_162(CODE[4]), 
		 -> STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), 
		 -> STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), 
		 -> STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), 
		 -> STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_166(CODE[2]), STR_165(CODE[9]), STR_162(CODE[4]), STR_160(CODE[3]), 
		 -> STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), STR_153(CODE[6]), 
		 -> STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), STR_146(CODE[6]), 
		 -> STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), STR_142(CODE[5]), 
		 -> STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), STR_136(CODE[8]), 
		 -> STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), STR_118(CODE[11]), 
		 -> STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_295(CODE[2]), STR_294(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_289(CODE[2]), 
		 -> STR_288(CODE[3]), STR_287(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_305(CODE[3]), STR_304(CODE[23]), STR_303(CODE[10]), STR_302(CODE[10]), 
		 -> STR_301(CODE[12]), STR_300(CODE[8]), STR_299(CODE[7]), STR_298(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_297(CODE[10]), STR_296(CODE[3]), STR_293(CODE[20]), 
		 -> STR_292(CODE[3]), STR_291(CODE[14]), STR_290(CODE[3]), STR_286(CODE[8]), 
		 -> STR_285(CODE[17]), STR_284(CODE[3]), STR_283(CODE[67]), STR_282(CODE[3]), 
		 -> STR_281(CODE[27]), STR_280(CODE[3]), STR_279(CODE[67]), STR_278(CODE[52]), 
		 -> STR_277(CODE[39]), STR_276(CODE[62]), STR_275(CODE[55]), STR_274(CODE[49]), 
		 -> STR_273(CODE[67]), STR_272(CODE[47]), STR_271(CODE[47]), STR_270(CODE[34]), 
		 -> STR_269(CODE[71]), STR_268(CODE[20]), STR_267(CODE[78]), STR_266(CODE[24]), 
		 -> STR_265(CODE[77]), STR_264(CODE[74]), STR_263(CODE[76]), STR_262(CODE[47]), 
		 -> STR_261(CODE[40]), STR_260(CODE[39]), STR_259(CODE[33]), STR_258(CODE[23]), 
		 -> STR_257(CODE[56]), STR_256(CODE[24]), STR_255(CODE[44]), STR_254(CODE[50]), 
		 -> STR_253(CODE[31]), STR_252(CODE[50]), STR_251(CODE[51]), STR_250(CODE[46]), 
		 -> STR_249(CODE[44]), STR_248(CODE[27]), STR_247(CODE[39]), STR_246(CODE[39]), 
		 -> STR_245(CODE[52]), STR_244(CODE[54]), STR_243(CODE[55]), STR_242(CODE[3]), 
		 -> STR_239(CODE[24]), STR_238(CODE[57]), STR_237(CODE[53]), STR_236(CODE[58]), 
		 -> STR_235(CODE[3]), STR_232(CODE[25]), STR_231(CODE[3]), STR_228(CODE[24]), 
		 -> STR_227(CODE[3]), STR_224(CODE[24]), STR_223(CODE[3]), STR_220(CODE[24]), 
		 -> STR_219(CODE[3]), STR_216(CODE[23]), STR_215(CODE[3]), STR_212(CODE[21]), 
		 -> STR_211(CODE[3]), STR_208(CODE[22]), STR_207(CODE[3]), STR_204(CODE[17]), 
		 -> STR_203(CODE[3]), STR_200(CODE[18]), STR_199(CODE[4]), STR_198(CODE[11]), 
		 -> STR_197(CODE[2]), STR_194(CODE[7]), STR_191(CODE[7]), STR_188(CODE[9]), 
		 -> STR_185(CODE[7]), STR_182(CODE[8]), STR_179(CODE[12]), STR_176(CODE[7]), 
		 -> STR_175(CODE[2]), STR_174(CODE[2]), STR_173(CODE[6]), STR_172(CODE[8]), 
		 -> STR_171(CODE[8]), STR_170(CODE[20]), STR_169(CODE[27]), STR_168(CODE[6]), 
		 -> STR_167(CODE[33]), STR_164(CODE[46]), STR_163(CODE[22]), STR_161(CODE[21]), 
		 -> STR_158(CODE[41]), STR_157(CODE[23]), STR_155(CODE[22]), STR_152(CODE[26]), 
		 -> STR_150(CODE[32]), STR_148(CODE[28]), STR_139(CODE[6]), STR_137(CODE[40]), 
		 -> STR_135(CODE[44]), STR_132(CODE[6]), STR_131(CODE[39]), STR_129(CODE[36]), 
		 -> STR_127(CODE[37]), STR_125(CODE[40]), STR_123(CODE[37]), STR_122(CODE[50]), 
		 -> STR_119(CODE[6]), STR_116(CODE[41]), STR_114(CODE[38]), STR_112(CODE[39]), 
		 -> STR_110(CODE[42]), STR_108(CODE[39]), STR_107(CODE[66]), STR_104(CODE[6]), 
		 -> STR_103(CODE[27]), STR_102(CODE[3]), STR_99(CODE[20]), STR_98(CODE[52]), 
		 -> STR_94(CODE[8]), STR_93(CODE[36]), STR_90(CODE[8]), STR_89(CODE[38]), 
		 -> STR_88(CODE[24]), STR_86(CODE[33]), STR_84(CODE[24]), STR_82(CODE[52]), 
		 -> STR_80(CODE[54]), STR_79(CODE[6]), STR_78(CODE[3]), STR_73(CODE[25]), 
		 -> STR_70(CODE[17]), STR_69(CODE[3]), STR_68(CODE[4]), STR_67(CODE[3]), 
		 -> STR_64(CODE[4]), STR_59(CODE[15]), wrkbuf(BANK1[80]), STR_56(CODE[14]), 
		 -> STR_54(CODE[33]), STR_52(CODE[24]), STR_50(CODE[52]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2175	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_307(CODE[17]), STR_306(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_241(CODE[3]), STR_240(CODE[7]), STR_234(CODE[3]), STR_233(CODE[7]), 
		 -> STR_230(CODE[4]), STR_229(CODE[8]), STR_226(CODE[4]), STR_225(CODE[8]), 
		 -> STR_222(CODE[4]), STR_221(CODE[8]), STR_218(CODE[4]), STR_217(CODE[8]), 
		 -> STR_214(CODE[4]), STR_213(CODE[7]), STR_210(CODE[4]), STR_209(CODE[7]), 
		 -> STR_206(CODE[4]), STR_205(CODE[7]), STR_202(CODE[4]), STR_201(CODE[7]), 
		 -> STR_196(CODE[3]), STR_195(CODE[7]), STR_193(CODE[3]), STR_192(CODE[7]), 
		 -> STR_190(CODE[3]), STR_189(CODE[7]), STR_187(CODE[3]), STR_186(CODE[7]), 
		 -> STR_184(CODE[3]), STR_183(CODE[7]), STR_181(CODE[4]), STR_180(CODE[8]), 
		 -> STR_178(CODE[3]), STR_177(CODE[7]), STR_101(CODE[3]), STR_100(CODE[7]), 
		 -> STR_96(CODE[4]), STR_95(CODE[8]), STR_92(CODE[4]), STR_91(CODE[8]), 
		 -> STR_77(CODE[3]), STR_76(CODE[7]), STR_75(CODE[3]), STR_74(CODE[7]), 
		 -> STR_72(CODE[6]), STR_71(CODE[10]), STR_66(CODE[3]), STR_65(CODE[7]), 
		 -> STR_63(CODE[3]), STR_62(CODE[7]), STR_61(CODE[3]), STR_60(CODE[7]), 
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2155$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(COMRAM[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(COMRAM[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(COMRAM[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(COMRAM[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(COMRAM[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1568	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_241(CODE[3]), STR_240(CODE[7]), 

    printErrors$1559	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_234(CODE[3]), STR_233(CODE[7]), 

    printErrors$1553	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_230(CODE[4]), STR_229(CODE[8]), 

    printErrors$1547	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_226(CODE[4]), STR_225(CODE[8]), 

    printErrors$1541	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_222(CODE[4]), STR_221(CODE[8]), 

    printErrors$1535	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_218(CODE[4]), STR_217(CODE[8]), 

    printStatistics$1528	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_214(CODE[4]), STR_213(CODE[7]), 

    printStatistics$1522	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_210(CODE[4]), STR_209(CODE[7]), 

    printStatistics$1516	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_206(CODE[4]), STR_205(CODE[7]), 

    printStatistics$1510	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_202(CODE[4]), STR_201(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1262(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1286(BANK2[1]), doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1442	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_196(CODE[3]), STR_195(CODE[7]), 

    receivePrintEventVerbose$1437	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_193(CODE[3]), STR_192(CODE[7]), 

    receivePrintEventVerbose$1432	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_190(CODE[3]), STR_189(CODE[7]), 

    receivePrintEventVerbose$1427	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_187(CODE[3]), STR_186(CODE[7]), 

    receivePrintEventVerbose$1422	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_184(CODE[3]), STR_183(CODE[7]), 

    receivePrintEventVerbose$1417	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_181(CODE[4]), STR_180(CODE[8]), 

    receivePrintEventVerbose$1411	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_178(CODE[3]), STR_177(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1326	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1303	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1292	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_101(CODE[3]), STR_100(CODE[7]), 

    doModeVerbose$1283	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_96(CODE[4]), STR_95(CODE[8]), 

    doModeVerbose$1277	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_92(CODE[4]), STR_91(CODE[8]), 

    doModeVerbose@preg_1268	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@p_1264	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1254	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_77(CODE[3]), STR_76(CODE[7]), 

    doModeVerbose$1250	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_75(CODE[3]), STR_74(CODE[7]), 

    doModeVerbose$1245	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_72(CODE[6]), STR_71(CODE[10]), 

    doModeVerbose$1237	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1232	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_63(CODE[3]), STR_62(CODE[7]), 

    doModeVerbose$1228	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_61(CODE[3]), STR_60(CODE[7]), 

    doModeVerbose$1223	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@p_1211	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    _main->_putsUSART
    _doModeSLCAN->_putsUSART
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_putsUSART
    _receiveSendEventSLCAN->_getCANFrame
    _ultoa->___lldiv
    _sendVSCPDriverErrorFrame->_crc8
    _sendVSCPDriverCommandReply->_crc8
    _sendVSCPModeCapabilities->_crc8
    _sendVSCPDriverAck->_crc8
    _sendVSCPDriverNack->_crc8
    _calcCRC->_crc8
    _receiveSendEventCANAL->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_crc8
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _doModeVerbose->_putsUSART
    _doModeVerbose->__CANIDToRegs
    _printBinary->_WriteUSART
    _findNodes->_putsUSART
    _printMDF->_putsUSART
    _printGUID->_putsUSART
    _printNodeFirmwareVersion->_putsUSART
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_putsUSART
    _printStatistics->_putsUSART
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _stristr->_strichr
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_putsUSART
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___lldiv
    ___wmul->_ReadTimer3
    ___llmod->___lldiv
    _printFirmwareVersion->_putsUSART
    _utoa->___lwmod
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->__CANIDToRegs
    __CANIDToRegs->_Read_b_eep
    _setFilter->_Write_b_eep

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _vscp_restoreDefaults->_init_app_ram
    _init->_init_app_ram
    _init_app_ram->_setFilter

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  156854
                                            124 BANK0      2     2      0
                                              0 BANK1      5     0      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
               _ECANSetOperationMode
                   _checkCANBusState
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9714
                                             51 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
               _ECANSetOperationMode
                           _Busy_eep
                        _Write_b_eep
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              0 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4117
                                             30 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1173
                                             17 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   22520
                                             84 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             10 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             10 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             10 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    3302
                                             51 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                             30 COMRAM     4     4      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             10 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             10 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                              7 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3672
                                             14 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    4116
                                             14 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                              7 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                             30 COMRAM     5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       92    92      0  110964
                                            104 BANK0     20    20      0
                                              0 BANK2     72    72      0
               _vscp_restoreDefaults
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                         _WriteUSART
                            _stristr
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4962
                                             83 BANK0     12     5      7
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                             31 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    4878
                                             83 BANK0     12     5      7
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            6     6      0   25754
                                             98 BANK0      6     6      0
                          _putsUSART
                         _WriteUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    5402
                                             92 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    7034
                                             92 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6814
                                             92 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    4710
                                             83 BANK0      9     5      4
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    3078
                                             51 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2778
                                             44 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    2652
                                              7 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) _checkCANBusState                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                             30 COMRAM     2     2      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7444
                                             47 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7336
                                             47 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1098
                                              8 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     354
                                              2 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     354
                                              2 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     168
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1186
                                              8 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                             31 COMRAM     4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                             34 COMRAM     1     1      0
                                              0 BANK0      8     2      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            28    28      0    9459
                                             47 BANK0     24    24      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
                         _ReadTimer3
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadTimer3                                           4     2      2      71
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1380
                                             14 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     906
                                             34 COMRAM     1     1      0
                                             10 BANK0      4     0      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     612
                                             30 COMRAM     4     4      0
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    6994
                                             17 BANK0     30    22      8
                         _ReadTimer3 (ARG)
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
                         _ReadTimer3 (ARG)
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                              8 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                             30 COMRAM     5     5      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             30 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1614
                                             20 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             12 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              3 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                             30 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                             30 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _vscp_restoreDefaults                                 0     0      0    5040
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (3) _init_app_eeprom                                      1     1      0     330
                                             34 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                             31 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    5262
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                         _OpenTimer3
                        _WriteTimer3
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _WriteTimer3                                          4     2      2      68
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer3                                           1     1      0      66
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     220
                                             30 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _init_app_ram                                         9     9      0    4710
                                             16 BANK0      9     9      0
                         _Read_b_eep
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     966
                                             32 COMRAM     3     3      0
                                              0 BANK0      7     0      7
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           16    11      5    3312
                                              0 BANK0     16    11      5
                         _Read_b_eep (ARG)
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                             30 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                             30 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     186
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2006
                                             19 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 12     8      4    1180
                                              7 COMRAM    12     8      4
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
         _Busy_eep (ARG)
         _Write_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
         _Busy_eep (ARG)
         _Write_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _OpenUSART
     _OpenTimer0
     _OpenTimer3
     _WriteTimer3
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _ECANSetOperationMode
   _checkCANBusState
   _doModeVerbose
     _vscp_restoreDefaults
       _init_app_ram
         _Read_b_eep
         _ECANSetOperationMode
         _setFilter
           _Read_b_eep (ARG)
           _Busy_eep (ARG)
           _Write_b_eep (ARG)
         __CANIDToRegs
           _Read_b_eep (ARG)
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _ECANSetOperationMode
     _setFilter
       _Read_b_eep (ARG)
       _Busy_eep (ARG)
       _Write_b_eep (ARG)
     __CANIDToRegs
       _Read_b_eep (ARG)
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
       _ReadTimer3
       ___wmul
         _ReadTimer3 (ARG)
     _WriteUSART
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
         _ReadTimer3 (ARG)
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _checkCANBusState
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _ReadTimer3 (ARG)
       _isdigit (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___wmul (ARG)
         _ReadTimer3 (ARG)
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _checkCANBusState
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _ECANSetOperationMode
     _Busy_eep
     _Write_b_eep
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
           _Read_b_eep (ARG)
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     48      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      5      FA       6       97.7%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     7E      7E       4       78.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      41       1       68.4%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     381      15        0.0%
DATA                 0      0     57D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Oct 07 23:19:56 2015

        ??_receiveVSCPModeMultiCanalMsg 001F                   __end_of_doModeVerbose 6976  
                          printBinary@i 0061                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 1FC0  
            doModeVerbose@filter_nodeid 028E                                      PL2 6976  
                                    PL4 6986                                      PL6 6994  
                                    PL8 69B0                                      _id 0036  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 0D66  
                                   PL10 5276                                     PL20 1B28  
                                   PL12 4238                                     PL30 6A24  
                                   PL22 2B02                                     PL14 2E3E  
                                   PL40 2CE6                                     PL32 2BCC  
                                   PL24 52A4                                     PL16 69FA  
                                   PL50 1DAC                                     PL42 6A4A  
                                   PL34 3DA4                                     PL26 6A14  
                                   PL18 5294                                     PL60 3DC2  
                                   PL52 1D08                                     PL44 6A64  
                                   PL36 6A38                                     PL28 36D4  
                                   PL70 6AC6                                     PL62 6AB0  
                                   PL54 52E4                                     PL46 6A7E  
                                   PL38 244E                                     PL80 2BF2  
                                   PL72 5308                                     PL64 19F4  
                                   PL56 6A98                                     PL48 52CA  
                                   PL90 2C06                                     PL82 28F2  
                                   PL74 2D08                                     PL66 52FA  
                                   PL58 2BE0                                     PL92 2D2E  
                                   PL84 4818                                     PL76 2D1A  
                                   PL68 2CF4                                     PL94 1E50  
                                   PL86 6ADA                                     PL78 2616  
                                   PL96 531C                                     PL88 36E4  
                                   PL98 4BEA                 sendEscapedUartData@pcrc 0067  
                                   l501 0E62                                     l600 5B74  
                                   l513 5380                                     l611 5C06  
                                   l517 5392                                     l470 3A0A  
                                   l463 39AE                                     l624 5CB6  
                                   l616 5C32                                     l466 39C4  
                                   l458 3952                                     l467 39CE  
                                   l459 3992                                     l580 6974  
                                   l469 39FC                                     l902 1D1A  
                                   l591 5C58                                     l911 1D4A  
                                   l920 1D98                                     l752 3A82  
                                   l808 4BE8                                     l905 1D24  
                                   l914 1D6C                                     l770 3B0C  
                                   l818 48EC                                     l499 0E56  
                                   l587 5A9C                                     l923 1DA2  
                                   l843 4AE6                                     l860 150A  
                                   l932 1C80                                     l908 1D2E  
                                   l941 1CC8                                     l917 1D7C  
                                   l757 3BFC                                     l950 1CFE  
                                   l863 1514                                     l935 1C8A  
                                   l872 155C                                     l944 1CD8  
                                   l929 1C76                                     l881 2096  
                                   l938 1CA6                                     l962 2484  
                                   l890 20E4                                     l947 1CF4  
                                   l971 24D2                                     l875 2082  
                                   l868 1538                                     l980 2522  
                                   l956 2470                                     l884 20B2  
                                   l965 24A0                                     l893 211C  
                                   l974 24EE                                     l878 208C  
                                   l983 252C                                     l959 247A  
                                   l887 20D4                                     l968 24C2  
                                   l896 2126                                     l977 2502  
                          __CFG_CPB$OFF 000000                          getVSCPFrame@id 0079  
                         fifo_write@buf 0003                   ?_vscp_restoreDefaults 0001  
                  __size_of_WriteTimer0 0012                    __size_of_WriteTimer3 0012  
                                   _dlc 003C                                     _pos 0032  
                  __size_of_Write_b_eep 0034          __size_of_writeRegisterExtended 0100  
                                   wreg 000FE8           __end_of_writeRegisterExtended 2A06  
                                  PL100 6AEC                                    PL110 6AFC  
                                  PL102 532E                                    PL120 3FE0  
                                  PL112 6B0C                                    PL104 2130  
                                  PL130 5338                                    PL122 206E  
                                  PL114 387A                                    PL106 0F62  
                                  PL124 1178                                    PL116 6B1C  
                                  PL108 2536                                    PL126 30DA  
                                  PL118 6B2C                         ReadTimer3@timer 0021  
                                  PL128 2C18                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1110 1FC4  
                                  l1024 4804                                    l1032 2FE2  
                                  l1025 4816                                    l1017 4770  
                                  l1201 2A04                                    l1113 1FCE  
                                  l1050 30D8                                    l1122 205A  
                                  l1035 2FEC                                    l1060 35AC  
                                  l1044 30C4                                    l1116 1FD8  
                                  l1140 379C                                    l1132 3730  
                                  l1221 12D0                                    l1029 2FD8  
                                  l1125 2064                                    l1054 3598  
                                  l1038 3008                                    l1063 35C8  
                                  l1047 30CE                                    l1119 1FF4  
                                  l1217 12C4                                    l1057 35A2  
                                  l1153 384E                                    l1137 3762  
                                  l1082 36D2                                    l1146 37EC  
                                  l1323 199C                                    l1171 2178  
                                  l1163 2712                                    l1180 275E  
                                  l1076 36BE                                    l1156 386E  
                                  l1333 1702                                    l1350 40BE  
                                  l1326 19BA                                    l1174 2204  
                                  l1351 40D0                                    l1183 2808  
                                  l1079 36C8                                    l1159 3878  
                                  l1360 4172                                    l1352 40E2  
                                  l1344 4064                                    l1353 40F4  
                                  l1362 4236                                    l1354 4106  
                                  l1346 4076                                    l1370 197A  
                                  l1355 4118                                    l1347 4088  
                                  l1283 2F9A                                    l1356 412A  
                                  l1348 409A                                    l1604 2BCA  
                                  l1276 44F2                                    l1268 4468  
                                  l1284 2E96                                    l1357 413C  
                                  l1349 40AC                                    l1358 414E  
                                  l1630 242C                                    l1550 3254  
                                  l1542 31B8                                    l1374 104E  
                                  l1198 2958                                    l1359 4160  
                                  l1287 2EC4                                    l1544 31D6  
                                  l2505 15AE                                    l1633 244C  
                                  l1803 5032                                    l1379 1F08  
                                  l2188 2AF8                                    l1660 1642  
                                  l1805 5058                                    l1733 4D5A  
                                  l1717 4C14                                    l2189 2B00  
                                  l1806 505C                                    l1750 4D6A  
                                  l1734 4D0A                                    l2631 14FC  
                                  l2464 1C50                                    l1824 5102  
                                  l1808 5078                                    l1680 1144  
                                  l1921 0EA4                                    l1753 4D9E  
                                  l1922 0EA6                                    l1754 4DA2  
                                  l2650 1872                                    l1658 163A  
                                  l1666 169A                                    l1923 0EAE  
                                  l2563 25F2                                    l1924 0EB0  
                                  l2708 124A                                    l2717 1106  
                                  l2653 186E                                    l2629 14A0  
                                  l1685 1B6A                                    l1686 1BD0  
                                  l2495 17E8                                    l2727 1204  
                                  l1856 0D66                                    l1881 0F94  
                                  l1769 4E8E                                    l2681 1A9E  
                                  l1970 1486                                    l2578 1294  
                                  l1963 1464                                    l2683 1A92  
                                  l1972 149E                                    l1980 12E8  
                                  l2588 10C0                                    l2684 1A96  
                                  l1797 4FF0                                    l2669 162A  
                                  l1967 1478                                    l1968 147A  
                                  l1969 1484                                    l1897 0E2A  
                                  l1898 0E2C                                    l8430 1466  
                                  l8422 1458                                    STR_1 757B  
                                  STR_2 6E6C                                    STR_3 760D  
                                  STR_4 6F85                                    STR_5 7734  
                                  STR_6 7CC1                                    STR_7 76F6  
                                  STR_8 7CA8                                    STR_9 7C6B  
                                  _PEIE 007F96                          sendCANFrame@id 008C  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0020  
                                  _bDLE 0028                            __CFG_PWRT$ON 000000  
                                  ___IT 000101              __end_of_sendVSCPDriverNack 1D08  
                                  _bHex 0029            doModeVerbose@filter_priority 028C  
                                  _crc8 0FDE                                    _data 01DA  
                                  _caps 01F7                                    _atoi 2A06  
                                  _main 3888                                    _init 1392  
                                  _mode 0131                                    _itoa 0FA6  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 1BD2  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 034E  
                          _sprintf$2175 0081                            _sprintf$2168 007D  
                          _sprintf$2169 007F            receiveSendMultiEventCANAL@id 0078  
             ECANReceiveMessage@dataLen 000A      __end_of_receiveSendMultiEventCANAL 36D4  
            _receiveSendMultiEventCANAL 3566                      doModeVerbose@count 02AF  
                 getVSCPFrame@pPriority 0070                      doModeVerbose@value 02B8  
                  __end_of_getVSCPFrame 197C                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 00A8  
              ?_receiveVSCPModeCanalMsg 0001                         ?_doModeVscpNode 0001  
                                 l11130 0E5E                                   _B0CON 000E20  
                                 _B1CON 000E30                                   l14112 0FC2  
                                 _B2CON 000E40                                   l15020 5C2C  
                                 l14310 179C                                   l15110 5E6E  
                                 l15006 5BD2                                   l14312 17A8  
                                 l15200 60AA                                   l15120 5E90  
                                 l15112 5E82                                   l15104 5E04  
                                 _B3CON 000E50                                   l14322 17DA  
                                 l14314 17AC                                   l15034 5C76  
                                 l14250 1130                                   l14242 111E  
                                 l15300 62BA                                   l15140 5F16  
                                 l15132 5ECA                                   l15124 5EBC  
                                 l15044 5CC8                                   l14350 126C  
                                 l14270 0E46                                   l15230 612E  
                                 l15222 6120                                   l14510 39B8  
                                 l16032 4184                                   l16112 235C  
                                 l14360 128A                                   l14352 1270  
                                 l15152 5F74                                   l15072 5D6E  
                                 l15056 5D10                                   l15064 5D4E  
                                 l14504 3994                                   _B4CON 000E60  
                                 l16034 41CA                                   l14370 10A0  
                                 l15330 633A                                   l15322 632A  
                                 l15250 6196                                   l15146 5F4E  
                                 l15066 5D52                                   l15074 5D7E  
                                 l14258 1142                                   l14522 39E0  
                                 l14506 39A8                                   l14700 0E06  
                                 l14348 1264                                   l14372 10A4  
                                 l14276 1BDA                                   l16204 46D8  
                                 l16300 2A0E                                   l15244 6168  
                                 l15236 615A                                   l15156 5F9E  
                                 l14540 3A2C                                   l14532 3A16  
                                 l14286 1C12                                   l16230 477C  
                                 l16150 454C                                   l16310 2A7A  
                                 l17102 1ACA                                   l15350 63A0  
                                 l14534 3A1A                                   l14518 39D8  
                                 l14376 10B6                                   l14368 1098  
                                 l16240 47EC                                   l16216 4726  
                                 l16312 2A82                                   l17040 222A  
                                 l17112 1B06                                   l17024 29D4  
                                 l15520 6750                                   l15512 670E  
                                 l15440 6530                                   l15344 6374  
                                 l15336 6364                                   l15272 61E0  
                                 l15264 61D0                                   l15168 5FDA  
                                 l15096 5DF6                                   l15088 5DC0  
                                 l14800 55BE                                   l14720 5396  
                                 l14536 3A20                                   l14472 38EA  
                                 _B5CON 000E70                                   l16058 2B5C  
                                 l16242 47F0                                   l16250 4814  
                                 l17106 1AF0                                   l17026 2A02  
                                 l15450 657A                                   l15290 6248  
                                 l15258 61A6                                   l15178 6010  
                                 l14706 534A                                   l15602 3A4A  
                                 l16260 0DDE                                   l16244 47F8  
                                 l16180 463A                                   l16316 2ABE  
                                 l16308 2A62                                   l16500 44E2  
                                 l16404 4268                                   l16324 0EBE  
                                 l17052 22AA                                   l17108 1AF8  
                                 l15540 67F6                                   l15460 65B8  
                                 l15372 63EA                                   l15364 63DA  
                                 l15428 649C                                   l15196 6082  
                                 l14900 5904                                   l14820 562C  
                                 l14812 5600                                   l14804 55D4  
                                 l14740 5412                                   l14564 164C  
                                 l15604 3A4E                                   l14670 16CE  
                                 l16166 45A6                                   l16174 4620  
                                 l13942 105A                                   l16270 185A  
                                 l17046 2276                                   l15550 6828  
                                 l15358 63B0                                   l15286 621A  
                                 l15278 620A                                   l14822 563C  
                                 l14566 1652                                   l17142 35F6  
                                 l15622 3A9A                                   l16192 468A  
                                 l13944 105E                                   l16264 17FC  
                                 l16432 4330                                   l16328 0ECE  
                                 l17048 228C                                   l17080 28B0  
                                 l15552 6836                                   l15528 6794  
                                 l15480 6640                                   l15464 65D8  
                                 l14832 5692                                   l14816 5616  
                                 l14808 55EA                                   l14728 53B2  
                                 l17240 30B4                                   l15712 3B64  
                                 l14674 16E2                                   l14666 16BC  
                                 l16098 233E                                   l14682 23A6  
                                 l16362 3454                                   l16418 42CC  
                                 l16514 2E84                                   l15474 6620  
                                 l15394 647A                                   l15386 6424  
                                 l15378 6414                                   l14930 59D0  
                                 l14922 599A                                   l14906 5940  
                                 l14850 5716                                   l17170 3644  
                                 l17330 26D0                                   l15730 3BAA  
                                 l15626 3AA0                                   l16268 1834  
                                 l16348 33F0                                   l16460 43F8  
                                 l17084 28CE                                   l17076 2892  
                                 l17068 282E                                   l16532 2EDC  
                                 l16620 27D8                                   l15580 6908  
                                 l15564 689A                                   l15492 6686  
                                 l15396 6488                                   l14916 5984  
                                 l14860 575E                                   l14844 56EC  
                                 l14780 551E                                   l14772 54E8  
                                 l14764 54B2                                   l14756 547A  
                                 l14748 5444                                   l17180 3668  
                                 l17164 3626                                   l17236 309A  
                                 l17252 0F16                                   l17500 1198  
                                 l15724 3B90                                   l15636 3AB6  
                                 l13964 1BBC                                   l15900 4B56  
                                 l14678 16F6                                   l16710 4DBA  
                                 l14694 2436                                   l16278 1A18  
                                 l16390 351C                                   l16446 4394  
                                 l17078 289A                                   l16550 2F44  
                                 l16622 2806                                   l15590 6954  
                                 l15574 68CC                                   l15486 6662  
                                 l14838 56C2                                   l15742 3BDE  
                                 l15718 3B78                                   l15646 3ADE  
                                 l15662 3AE6                                   l13958 1B78  
                                 l15806 4922                                   l15902 4BB4  
                                 ?_crc8 001F                                   l16800 4F3C  
                                 l16720 4DE8                                   l16704 4DA8  
                                 l16640 4C2A                                   l14696 243A  
                                 l16288 1A52                                   l16376 34B8  
                                 l16472 4448                                   l15576 68DA  
                                 l14944 5A48                                   l14856 5740  
                                 l15592 6960                                   l17184 368C  
                                 l17256 0F36                                   l15736 3BC4  
                                 l15672 3B12                                   l15752 3BFA  
                                 l15840 4A60                                   l15832 49E8  
                                 l15816 4946                                   l15912 4BE6  
                                 l16802 4F40                                   l16730 4E0A  
                                 l16634 4C1E                                   l16298 2A08  
                                 l16570 0EEC                                   l15498 66AC  
                                 l15586 693E                                   l14954 5A6A  
                                 l14946 5A5C                                   l14938 59DE  
                                 l14890 588C                                   l14882 5840  
                                 l14874 57F0                                   l14866 5798  
                                 l14786 555A                                   l17506 11B4  
                                 l15746 3BF0                                   l15674 3B18  
                                 l15906 4BC8                                   l15850 4A8A  
                                 l16724 4DEE                                   l16708 4DAE  
                                 l16716 4DD2                                   l16740 4E48  
                                 l16652 4C68                                   l16660 4CB0  
                                 l16636 4C22                                   l16644 4C30  
                                 l16628 4BFC                                   l16484 4482  
                                 l16476 4458                                   l17700 317C  
                                 l17516 104C                                   l16556 2F52  
                                 l16572 0EF4                                   l14972 5AEC  
                                 l14964 5AA4                                   l14884 5850  
                                 l14868 579E                                   l14876 5800  
                                 l14796 55A2                                   l15596 6972  
                                 l17188 36AE                                   l15676 3B1C  
                                 l15748 3BF6                                   l15908 4BD4  
                                 l15772 4878                                   l15926 3C70  
                                 l16822 4FA0                                   l16734 4E16  
                                 l16726 4DFC                                   l16638 4C26  
                                 l17550 191C                                   l17710 31BC  
                                 l15694 3B3E                                   l15686 3B32  
                                 l15678 3B22                                   l17606 2554  
                                 l17470 37F6                                   l17462 37B0  
                                 l15870 4AEC                                   l15862 4AC8  
                                 l15790 48E6                                   l16912 5124  
                                 l16832 4FD0                                   l16816 4F74  
                                 l16680 4D10                                   l17800 11CE  
                                 l16496 44D2                                   l14984 5B3A  
                                 l14896 58C8                                   l17616 2598  
                                 l15784 48C2                                   l15776 489A  
                                 l16930 5160                                   l16914 512A  
                                 l16850 5036                                   l16826 4FBE  
                                 l16818 4F86                                   l16762 4E98  
                                 l16690 4D68                                   l16738 4E1C  
                                 l16578 14CA                                   l17802 11D8  
                                 l17810 121E                                   l17722 3206  
                                 l17730 3224                                   l14994 5B86  
                                 l17474 380A                                   l15874 4B02  
                                 l15794 48F6                                   l15778 489E  
                                 l16932 51B6                                   l16924 514C  
                                 l16908 5112                                   l16844 500E  
                                 l16772 4ECC                                   l16748 4E58  
                                 l16692 4D6E                                   l16684 4D46  
                                 l16668 4CD8                                   l17572 1E94  
                                 l17716 31D8                                   l17740 324A  
                                 l17660 2202                                   l15884 4B22  
                                 l16942 51FC                                   l16838 4FF4  
                                 l16774 4ED0                                   l16766 4EB6  
                                 l16686 4D60                                   l17566 1E8E  
                                 l17742 324C                                   l17670 1408  
                                 l15894 4B3E                                   l17760 15A0  
                                 l17752 156E                                   l16952 5236  
                                 l16864 5088                                   l16880 50BC  
                                 l16688 4D64                                   l17584 1ECE  
                                 l17568 1E90                                   l17808 1214  
                                 l17736 3246                                   l17672 1412  
                                 l17754 157A                                   l16946 5216  
                                 l16938 51D8                                   l16874 50A8  
                                 l16858 5072                                   l16786 4F04  
                                 l16698 4D86                                   l16962 5260  
                                 l17770 15FE                                   l17682 3140  
                                 l17658 21D4                                   l17666 13F4  
                  __size_of_doModeSLCAN 03C0                                   l17756 157E  
                                 l16956 5258                                   l16948 5228  
                                 l16892 50E2                                   l16788 4F08  
                                 l16964 5268                                   l17780 10D6  
                                 l17668 13FA                                   l17774 160C  
                                 l17766 15C2                                   l16982 12DA  
                                 l16974 12AA                                   l16888 50D8  
                                 l17776 1616                                   l17784 10F2  
                                 l17688 3152                                   l16898 50EA  
                                 l17794 0DF6                                   l17786 10F6  
                                 ?_atoi 0066                                   ?_main 01F2  
                                 ?_init 0001                                   ?_itoa 006C  
                         i1_WriteTimer0 0D74                                   _EEADR 000FA9  
                                 STR_10 7C49                                   STR_11 7C6B  
                                 STR_12 7C83                                   STR_20 7C34  
                                 STR_13 7C6B                                   STR_21 7A18  
                                 STR_30 7CF5                                   STR_14 7BAF  
                                 STR_22 7A2C                                   STR_15 7C6B  
                                 STR_31 7CF5                                   STR_23 7A68  
                                 STR_32 7CF5                                   STR_16 7C3B  
                                 STR_40 7A8D                                   STR_24 795A  
                                 STR_17 7C6B                                   STR_33 7CF5  
                                 STR_41 7CBC                                   STR_25 77F3  
                                 STR_42 7C6B                                   STR_34 7CF5  
                                 STR_18 7BF9                                   STR_26 7A04  
                                 STR_50 705D                                   STR_19 7C6B  
                                 STR_51 7B7D                                   STR_35 7CF5  
                                 STR_43 7CD6                                   STR_27 7A7B  
                                 STR_44 7C6B                                   STR_36 7C6B  
                                 STR_60 7C50                                   STR_28 7886  
                                 STR_52 786E                                   STR_53 7B7D  
                                 STR_61 7CEE                                   STR_29 7CEB  
                                 STR_45 7CB7                                   STR_37 7673  
                                 STR_46 7C6B                                   STR_62 7C50  
                                 STR_38 7CE8                                   STR_70 7AF5  
                                 STR_54 76B5                                   STR_39 7C6B  
                                 STR_55 7B7D                                   STR_71 7B75  
                                 STR_63 7CEE                                   STR_47 7C94  
                                 STR_48 7C6B                                   STR_72 7C71  
                                 STR_64 7BDD                                   STR_56 7B23  
                                 STR_80 6FF2                                   STR_65 7C50  
                                 STR_81 7C9E                                   STR_49 7C99  
                                 STR_57 7B75                                   STR_73 7825  
                                 STR_82 705D                                   STR_90 7B29  
                                 STR_74 7C50                                   STR_66 7CEE  
                                 STR_58 7C71                                   STR_83 7B7D  
                                 STR_75 7CEE                                   STR_67 7CE2  
                                 STR_91 7BD1                                   STR_59 7B06  
                                 STR_84 786E                                   STR_76 7C50  
                                 STR_92 7CCE                                   STR_68 7CC6  
                                 STR_69 705A                                   STR_85 7B7D  
                                 STR_77 7CEE                                   STR_93 75E9  
                                 STR_78 705A                                   STR_86 76B5  
                                 STR_94 7B29                                   STR_79 7C6B  
                                 STR_95 7BD1                                   STR_87 7B7D  
                                 STR_96 7CCE                                   STR_88 789E  
                                 STR_97 7CAD                                   STR_89 7530  
                                 STR_98 705D                                   STR_99 7A40  
          __end_of_printFirmwareVersion 19F4                                   _BSEL0 000DF8  
                       __end_of___lldiv 17FA                                   ?_utoa 0063  
                       __end_of_calcCRC 0F40                                   _T0CON 000FD5  
                                 u21200 14F4                         __end_of___llmod 15C0  
                                 u20260 49B4                                   u20270 49BE  
                                 u21207 14EE                                   u20280 49C8  
                                 u20265 49B2                                   u20275 49BC  
                                 u21180 14BC                                   u20525 2B36  
                                 u20285 49C6                                   u23030 196E  
                                 u20535 2B46                                   _LATC1 007C59  
                                 _T3CON 000FB1                                   u20545 2B62  
                                 u20810 2A22                                   u23210 143A  
                                 u23035 1964                                   u21187 14B6  
                                 u20900 2AD2                                   u20485 4008  
                                 u20486 400E                                   u20830 2A3A  
                                 u20495 403C                                   u20487 401C  
                                 u20496 4042                                   u20497 4050  
                                 u20817 2A1C                                   u23217 1430  
                                 u20850 2A58                                   u20595 0FA0  
                                 u20907 2ACC                                   u20596 0FA2  
                                 u20837 2A34                                   u20870 2A76  
                                 u20857 2A52                                   u20945 1F46  
                                 u22545 2666                                   u20890 2AA8  
                                 u20877 2A70                                   u21934 12BA  
                                 u21935 12B6                                   u20897 2AA2  
                                 u23467 38FA                                   u19005 58EE  
                                 u19015 592A                                   u19025 5966  
                                 u18500 1334                                   u17540 107A  
                                 u18507 132E                         __end_of___lwdiv 129E  
                                 u17547 1074                                   u19255 5DA4  
                                 _ERRIE 007D1D                                   _ERRIF 007D25  
                                 u19345 5FC4                                   u18705 53EE  
                                 u18490 1308                                   u18715 542A  
                                 u18725 545E                                   u18735 5496  
                                 u18497 1302                                   u19465 69B8  
                                 u19385 60D0                                   u18745 54CE  
                                 u18595 2418                                   u19715 67BA  
                                 u19475 62E0                                   u18755 5504  
                                 u19565 64C2                                   u18765 5544  
                                 u19575 650A                                   u18775 5580  
                          _vscpPriority 003F                                   u19745 685C  
                                 u19585 6556                                   i1l411 0090  
                                 u18875 5662                                   i1l413 018A  
                                 u18965 5826                                   i1l430 01BC  
                                 i1l422 0188                                   u19775 6900  
                                 i1l440 0234                                   i1l432 01D2  
                                 i1l416 0188                                   i1l425 0178  
                       __end_of___lwmod 10CA                                   u19785 692E  
                                 u18985 5876                                   i1l450 0330  
                                 u19890 3ABC                                   u18995 58B2  
                       sendCANFrame@dlc 0090                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0060  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _TMR3H 000FB3                                   _TMR3L 000FB2  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00B5  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 002C                 readRegisterExtended@reg 00B5  
                         __CFG_WRTD$OFF 000000                          Read_b_eep@badd 001F  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 1B36  
                                 crc8@m 0021                                   _flags 003D  
                       __end_of_dpowers 6B94                  Write_b_eep@GIE_BIT_VAL 0022  
                      _checkCANBusState 0E4E                         __end_of_isdigit 0E4E  
                                 _timer 011C                                   atoi@a 006B  
                                 atoi@s 0066                                   main@c 00DD  
                                 _ultoa 2544                              Interrupt@c 001D  
            ??_printNodeFirmwareVersion 0024                        _printErrors$1541 0091  
                      _printErrors$1535 008F                        _printErrors$1553 0095  
                                 tablat 000FF5                        _printErrors$1547 0093  
                      _printErrors$1559 0097                        _printErrors$1568 0099  
               ??_receiveSendEventCANAL 0024             __end_of_sendEscapedUartData 155E  
                                 plusw2 000FDB                                   utoa@c 006B  
                                 utoa@v 0069                                   status 000FD8  
                       __end_of_sprintf 5276                 ??_receiveSendEventSLCAN 007E  
                       __end_of_strichr 1108                         __end_of_strcspn 1254  
                       __end_of_toupper 0DFA                         __end_of_stristr 1874  
                          __end_ofPL100 6AFC                            __end_ofPL110 6B0C  
                          __end_ofPL102 5338                            __end_ofPL120 3FEE  
                          __end_ofPL112 6B1C                            __end_ofPL104 213E  
                          __end_ofPL130 5342                            __end_ofPL122 207A  
                          __end_ofPL114 3888                            __end_ofPL106 0F72  
                          __end_ofPL124 1186                            __end_ofPL116 6B2C  
                          __end_ofPL108 2544                            __end_ofPL126 30E8  
                          __end_ofPL118 6B3C                            __end_ofPL128 2C22  
     __size_of_receivePrintEventVerbose 0324                     doModeVerbose@i_1204 02B5  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1211 02B9  
                   doModeVerbose@p_1303 02C6                     doModeVerbose@p_1326 02C4  
                   doModeVerbose@p_1264 02BB                          WriteUSART@data 001F  
                  _ECANSetOperationMode 0DFA                            _canInputFifo 01D2  
                       __initialization 133C                  doModeVerbose@page_1260 02A8  
         receiveSendMultiEventCANAL@dlc 007C                            __end_of_crc8 1016  
         receiveSendMultiEventCANAL@crc 007D                            __end_of_atoi 2B02  
         receiveSendMultiEventCANAL@pos 007E                            __end_of_main 3A38  
                          __end_of_init 13EA                            __end_of_itoa 0FDE  
                            _ReadTimer3 0DBC                            __end_of_utoa 1C72  
                   doModeVerbose@ifmode 02BD                              _Read_b_eep 0D98  
                   doModeVerbose@maskno 02B2                        __end_of_Busy_eep 0D6C  
                   doModeVerbose@nodeid 02B0                           doModeSLCAN@id 009A  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A0  
                     ??_ECANSendMessage 006F                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00B8                                  ??_crc8 0022  
                 getVSCPFrame@pvscptype 006E                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0024                                  ??_main 00DC  
                     readRegister@value 00B6                                  ??_init 0024  
                                ??_itoa 0024                                  ??_utoa 0024  
                doModeVerbose@mask_type 0290                           __activetblptr 000002  
                       _stateVscpDriver 0035                       __RegsToCANID@type 0004  
                  _can_transmitOverruns 0104              ECANReceiveMessage@msgFlags 000B  
                         ?_readRegister 00B3               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1268 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B6  
            ECANReceiveMessage@savedPtr 000C                                  _CANCON 000F6F  
                      ___llmod@dividend 0068                                  STR_100 7C50  
                                STR_101 7CEE                                  STR_102 705A  
                                STR_110 732C                                  STR_111 7CF5  
                                STR_103 776D                                  STR_104 7C6B  
                                STR_120 7CA3                                  STR_200 7A9F  
                                STR_112 74BC                                  STR_121 7CF5  
                                STR_113 7CF5                                  STR_201 7C5E  
                                STR_105 7C42                                  STR_130 7CF5  
                                STR_106 7CF5                                  STR_210 7CDE  
                                STR_202 7CDE                                  STR_114 750A  
                                STR_122 70F8                                  STR_211 705A  
                                STR_203 705A                                  STR_115 7CF5  
                                STR_123 7556                                  STR_131 7495  
                                STR_107 6DB2                                  STR_132 7C6B  
                                STR_124 7CF5                                  STR_300 7C09  
                                STR_140 7B9D                                  STR_204 7AE4  
                                STR_212 79C7                                  STR_220 78E6  
                                STR_108 7420                                  STR_116 737F  
                                STR_117 7CF5                                  STR_109 7CF5  
                                STR_141 7C83                                  STR_213 7C5E  
                                STR_205 7C5E                                  STR_221 7C01  
                                STR_133 7C8F                                  STR_301 7B3D  
                                STR_125 73D0                                  STR_126 7CF5  
                                STR_142 7CA8                                  STR_230 7CDE  
                                STR_222 7CDE                                  STR_214 7CDE  
                                STR_206 7CDE                                  STR_134 7CDA  
                                STR_302 7B93                                  STR_118 7B5F  
                                STR_150 76D6                                  STR_231 705A  
                                STR_223 705A                                  STR_215 705A  
                                STR_207 705A                                  STR_119 7C6B  
                                STR_143 7C49                                  STR_151 7C89  
                                STR_303 7B89                                  STR_127 75A0  
                                STR_135 7300                                  STR_128 7CF5  
                                STR_144 7C3B                                  STR_160 7BFE  
                                STR_240 7C50                                  STR_136 7BF1  
                                STR_208 799C                                  STR_304 7943  
                                STR_216 792C                                  STR_224 78CE  
                                STR_232 780C                                  STR_152 77D9  
                                STR_305 705A                                  STR_145 7BAF  
                                STR_233 7C50                                  STR_209 7C5E  
                                STR_225 7C01                                  STR_217 7C01  
                                STR_241 7CEE                                  STR_153 7C7D  
                                STR_161 79B2                                  STR_129 75C5  
                                STR_137 73F8                                  STR_242 705A  
                                STR_162 7CD2                                  STR_154 7BFE  
                                STR_234 7CEE                                  STR_226 7CDE  
                                STR_218 7CDE                                  STR_146 7C77  
                                STR_138 7B54                                  STR_306 7AB1  
                                STR_170 79F0                                  STR_250 727A  
                                STR_235 705A                                  STR_227 705A  
                                STR_219 705A                                  STR_139 7C6B  
                                STR_147 7BE9                                  STR_171 7BC1  
                                STR_307 7AC2                                  STR_155 7986  
                                STR_163 7970                                  STR_251 70C5  
                                STR_243 6F17                                  STR_228 78CE  
                                STR_156 7CD2                                  STR_180 7C01  
                                STR_172 7BC9                                  STR_148 7751  
                                STR_260 7447                                  STR_164 724C  
                                STR_252 712A                                  STR_244 6FBC  
                                STR_236 6E32                                  STR_229 7C01  
                                STR_181 7CDE                                  STR_149 7CB2  
                                STR_173 7C65                                  STR_165 7BB8  
                                STR_157 7915                                  STR_253 7715  
                                STR_261 73A8                                  STR_245 7091  
                                STR_237 7028                                  _EEDATA 000FA8  
                                STR_190 7CEE                                  STR_166 7CFD  
                                STR_174 7CF3                                  STR_182 7BE1  
                                STR_270 7630                                  STR_246 746E  
                                STR_158 7356                                  STR_262 721D  
                                STR_254 715C                                  STR_238 6EA6  
                                STR_247 6D48                                  STR_175 7CF1  
                                STR_183 7C57                                  STR_191 7C26  
                                STR_159 7B49                                  STR_239 78B6  
                                STR_167 7694                                  STR_255 72A8  
                                STR_271 71EE                                  STR_263 6C4F  
                                STR_280 705A                                  STR_168 7C6B  
                                STR_192 7C50                                  STR_184 7CEE  
                                STR_176 7C2D                                  STR_256 783E  
                                STR_248 7788                                  STR_272 71BF  
                                STR_264 6C9B                                  STR_177 7C50  
                                STR_193 7CEE                                  STR_185 7C1F  
                                STR_281 77BE                                  STR_169 77A3  
                                STR_249 72D4                                  STR_257 6EDF  
                                STR_273 6D6F                                  STR_265 6C02  
                                STR_290 705A                                  STR_282 705A  
                                STR_186 7C50                                  STR_178 7CEE  
                                STR_194 7C18                                  STR_258 78FE  
                                STR_266 7856                                  STR_274 718E  
                                STR_283 6D2C                                  STR_195 7C50  
                                STR_187 7CEE                                  STR_179 7B31  
                                STR_291 7B15                                  STR_259 7652  
                                STR_275 6F4E                                  STR_267 6BB4  
                                STR_292 705A                                  STR_284 705A  
                                STR_196 7CEE                                  STR_188 7BA6  
                                STR_268 79DC                                  STR_276 6DF4  
                                STR_197 7CF5                                  STR_189 7C50  
                                STR_285 7AD3                                  STR_293 7A54  
                                STR_277 74E3                                  STR_269 6CE5  
                                STR_278 705D                                  STR_294 7CFD  
                                STR_286 7BD9                                  STR_198 7B6A  
                                STR_287 7CF9                                  STR_295 7CF7  
                                STR_199 7CCA                                  STR_279 6D2C  
                                STR_296 705A                                  STR_288 7CE5  
                                STR_289 7CFB                                  STR_297 7B7F  
                                STR_298 705A                                  STR_299 7C11  
                                _EECON2 000FA7            __end_of_readRegisterExtended 280A  
                                _CIOCON 000F73                                  ?_ultoa 0071  
          ??_sendVSCPDriverCommandReply 0024                    __end_of_fifo_getFree 1E50  
                         ?_init_app_ram 0001                                  _MDSEL0 007BBE  
                                _MDSEL1 007BBF                                  i1l1614 177A  
                                i1l1641 2D84                                  i1l1609 2CE4  
                                i1l1642 2E3C                                  i1l1570 3E88  
                                i1l1562 3FDE                                  i1l1555 3E14  
                                i1l1572 3E9C                                  i1l1565 3EE6  
                                i1l1574 3EB0                                  i1l1566 3E66  
                                i1l1576 3EC0                                  i1l1568 3E74  
                                i1l1586 3F4C                                  i1l1578 3ED0  
                                i1l1587 3F66                                  i1l1993 0E7C  
                            _OpenTimer0 0E12                              _OpenTimer3 0E8C  
                                i1l6902 2D8E                                  i1l6912 2E18  
                                i1l6914 2E22                                  i1l6926 1E08  
                                i1l6894 2D52                         _init_app_eeprom 22CE  
                    __size_of_ReadUSART 0020                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 0008                  ECANReceiveMessage@mode 0010  
                ECANReceiveMessage@temp 0011                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 0072  
            ??_sendVSCPDriverErrorFrame 0024                       getVSCPFrame@pSize 0071  
                    _doModeVerbose$1223 0293                      _doModeVerbose$1232 0297  
                    _doModeVerbose$1250 029D                      _doModeVerbose$1228 0295  
                    _doModeVerbose$1245 029B                      _doModeVerbose$1237 0299  
                    _doModeVerbose$1254 029F                      _doModeVerbose$1283 02A3  
                    _doModeVerbose$1292 02A5                      _doModeVerbose$1277 02A1  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0023  
                    __size_of_Interrupt 0336                              _bLocalEcho 002B  
              readRegisterExtended@page 00B3                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0023  
                                ___wmul 0F40                              _bInitiated 002A  
                        __CFG_STVREN$ON 000000                               ??___lldiv 001F  
                             ??_calcCRC 0024                                  _cmdbuf 0132  
                             ??___llmod 0024                        OpenTimer0@config 001F  
                receiveSendEventCANAL@i 0076                               ??___lwdiv 0023  
                             ??___lwmod 0023           _receivePrintEventVerbose$1411 0098  
         _receivePrintEventVerbose$1422 009C           _receivePrintEventVerbose$1432 00A0  
         _receivePrintEventVerbose$1417 009A           _receivePrintEventVerbose$1442 00A4  
         _receivePrintEventVerbose$1427 009E           _receivePrintEventVerbose$1437 00A2  
         _receivePrintEventVerbose$3590 0094                                  _memcpy 1186  
                                _memset 0EB4                                  clear_0 1344  
                                clear_1 1358                                  clear_2 136A  
                                clear_3 1376                                  clear_4 1382  
                      OpenTimer3@config 001F                           ?_sendCANFrame 008C  
                                _strcat 13EA                                  _strchr 14A0  
                                _strcpy 0EE2                                  _strlen 1050  
                                _wrkbuf 0182                                  _strtok 1A0A  
                                _strspn 11C8     __size_of_sendVSCPDriverCommandReply 00CC  
                             ??_isdigit 001F                  receiveSendEventSLCAN@i 0086  
                      __end_of_printMDF 1B28                            __mediumconst 6B3C  
                        ??_readRegister 00B7                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 007D                                  ultoa@v 0079  
                          ?_printErrors 0001                               ??_sprintf 0079  
                             ??_strichr 0024                               ??_strcspn 0023  
                             ??_toupper 001F                          ??_init_app_ram 0070  
                             ??_stristr 0024                              _bTimestamp 002E  
            ??_sendVSCPModeCapabilities 0024              doModeVerbose@mask_priority 028F  
                      __end_of_strnicmp 162C                              __accesstop 0060  
               __end_of__initialization 1388                    _printFirmwareVersion 197C  
                 __size_of_getVSCPFrame 0088                doModeVerbose@bPersistent 02AB  
             receiveSendEventCANAL@data 006E                    doModeVerbose@id_1338 02C0  
                            _WriteUSART 0DCE                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0190                    _printStatistics$1510 008F  
                  _printStatistics$1522 0093                             ?_ReadTimer3 001F  
                  _printStatistics$1516 0091                    _printStatistics$1528 0095  
                 _uart_transmitOverruns 0124                             ?_Read_b_eep 001F  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 2616  
                            __end_ofPL2 6986                              __end_ofPL4 6994  
                            __end_ofPL6 69B0                              __end_ofPL8 69FA  
                        ??_sendCANFrame 0024                       __end_of_ReadUSART 0E8C  
                         ?__RegsToCANID 0001             __size_of_ECANReceiveMessage 0206  
                    sendVSCPFrame@pData 0099                         readRegister@reg 00B3  
                  sendVSCPDriverAck@crc 006A                      __size_of_findNodes 0130  
                        doModeSLCAN@dlc 009E                      __size_of_fifo_init 0032  
                    __size_of_fifo_read 00B6                  getVSCPFrame@pvscpclass 0078  
                       _fifo_canrxcount 002F                 __end_of_init_app_eeprom 2398  
                     __end_of_Interrupt 034E                           ReadUSART@data 0001  
                    readRegister@nodeid 00BB                          _status_led_cnt 0024  
                    __RegsToCANID@Value 0007                              _crc8_table 0300  
                     __end_of_OpenUSART 14A0                 doModeVerbose@mask_class 028A  
             printNodeFirmwareVersion@i 00C1                         setFilter@filter 006B  
                          sprintf@width 0086        __end_of_printNodeFirmwareVersion 22CE  
                            _doModeVscp 3A38                                 ??_ultoa 0024  
                          _getVSCPFrame 18F4                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                             ?_OpenTimer3 0001  
                            calcCRC@crc 006B                               ?_Busy_eep 0001  
                            calcCRC@len 0069                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 001F                      __size_of_init_crc8 0070  
                          __IT_INT_MASK 012C                           setFilter@eidh 006E  
                         setFilter@eidl 006F                            __IT_SAVE_BSR 012D  
                         setFilter@sidh 006C                           setFilter@sidl 006D  
                      ??_doModeVscpNode 001F                              _nTimeStamp 0031  
           ?_receiveSendMultiEventCANAL 0001                __end_of_hexStringToBytes 1BD2  
              ECANSetOperationMode@mode 001F                                 ?___wmul 0060  
                    __size_of_setFilter 024A                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 012B  
              __end_of_checkCANBusState 0E6C                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 1C72                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0021                           putsUSART@data 0020  
                  _readRegisterExtended 2714                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0021                           ??_WriteTimer3 0021  
                      WriteTimer3@timer 0021                          ??__RegsToCANID 0005  
                         ??_Write_b_eep 0022                   sendVSCPFrame@priority 0097  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 001F  
                               ?_strchr 001F                                 ?_strcpy 001F  
                               ?_strlen 001F                                 ?_strtok 0068  
                               ?_strspn 0062                              _cntRxBytes 0108  
                            _cntTxBytes 0110                                 i1l10360 173A  
                               i1l10352 1714                                 i1l10362 1744  
                               i1l10354 171C                                 i1l10370 175C  
                               i1l10364 174A                                 i1l10356 1726  
                               i1l10366 1750                                 i1l10358 1730  
                               i1l10384 2C80                                 i1l10720 3F94  
                               i1l10712 3F68                                 i1l10632 3E44  
                               i1l10616 3E00                                 i1l10640 3E54  
                               i1l10800 019A                                 i1l10626 3E2C  
                               i1l10634 3E50                                 i1l10810 01CC  
                               i1l10802 01AC                      __size_of_printGUID 00E8  
                               i1l10820 01EE                                 i1l10812 01DA  
                               i1l10804 01AE                                 i1l10734 3FC8  
                               i1l10830 0244                                 i1l10822 0210  
                               i1l10814 01E0                                 i1l10806 01B6  
                               i1l10750 007C                                 i1l10728 3FB2  
                               i1l10840 02EC                                 i1l10832 0270  
                               i1l10824 0218                                 i1l10808 01C4  
                               i1l10816 01E4                                 i1l10760 00C6  
                               i1l10752 008C                                 i1l10744 0034  
                   ?_sendVSCPDriverNack 0001                                 i1l10842 02F0  
                               i1l10834 0272                                 i1l10826 0220  
                               i1l10818 01E6                                 i1l10770 00FA  
                               i1l10762 00CA                                 i1l10754 0098  
                               i1l10746 003C                                 i1l10684 3EFA  
                               i1l10844 031C                                 i1l10836 02AE  
                               i1l10828 023C                                 i1l10780 012A  
                               i1l10764 00D6                                 i1l10756 00A4  
                               i1l10748 0042                                 i1l10694 3F1C  
                               i1l10846 0320                                 i1l10838 02B2  
                               i1l10854 032E                                 i1l10782 0136  
                               i1l10774 010C                                 i1l10766 00E6  
                               i1l10758 00B6                                 i1l10848 0322  
                               i1l10792 0166                                 i1l10776 0118  
                               i1l10768 00EE                                 i1l10794 0170  
                               i1l10786 0148                                 i1l10796 0180  
                               i1l10788 0154                                 i1l10798 0192  
                            _fifo_write 2D40                      __size_of_printHelp 0180  
                    __size_of_printMode 0072                   sendVSCPFrame@vscptype 0095  
                 __size_of_fifo_getFree 0096                 doModeVerbose@value_1262 02AE  
               doModeVerbose@value_1286 02AA                       sendCANFrame@pdata 0091  
                            _made_table 0128                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 170E                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0054      __end_of_sendVSCPDriverCommandReply 2536  
            _sendVSCPDriverCommandReply 246A                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 2906  
      __size_of_receiveVSCPModeCanalMsg 00EA                  __size_of_doModeVerbose 1634  
                  sendEscapedUartData@c 0069                     __size_of_ReadTimer3 0012  
                __size_of_sendVSCPFrame 00B6                     __size_of_Read_b_eep 0012  
                            ??_Busy_eep 001F        __end_of_sendVSCPDriverErrorFrame 2130  
        __size_of_receiveSendEventCANAL 013E           __end_of_receiveSendEventCANAL 30DA  
                  ??_sendVSCPDriverNack 0024              printFirmwareVersion@wrkbuf 0074  
        __size_of_receiveSendEventSLCAN 0184                         _ECANSendMessage 30E8  
         __end_of_receiveSendEventSLCAN 387A                                 __Hparam 0000  
                     __end_of_findNodes 2F9C                                 __Lparam 0000  
                     __end_of_fifo_init 1178                       __end_of_fifo_read 244E  
                         ??_getCANFrame 0023                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00B3                    __end_of_readRegister 2206  
                             ?_printMDF 0001                                 _bSilent 002D  
             receiveVSCPModeCanalMsg@id 00AF                           ??_doModeSLCAN 0093  
                               ___lldiv 1784                         __size_of___wmul 0022  
                               _calcCRC 0F10                         getCANFrame@pdlc 006A  
                               ___llmod 155E                                 ___lwdiv 1254  
                             _FIFOEMPTY 007BA7                                 ___lwmod 108C  
                 ?_readRegisterExtended 00B3             printNodeFirmwareVersion@buf 00BD  
                  __end_of_init_app_ram 3DA4                            _fifo_getFree 1DBA  
                          init_crc8@crc 0064                                 __pcinit 133C  
                       __size_of_memcpy 0042                         __size_of_memset 002E  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                   __size_of_OpenTimer3 0028                               ?_strnicmp 0060  
                               __ptext0 3888                                 __ptext1 0D64  
                               __ptext2 482A                                 __ptext3 1B36  
                               __ptext4 1108                 receiveSendEventCANAL@id 0077  
                               __ptext5 36F6                                 __ptext6 2544  
                               __ptext7 3A38                                 __ptext8 207A  
                               __ptext9 246A                                 crc8@crc 001F  
         printNodeFirmwareVersion@value 00C0                       ??_printStatistics 0024  
                             _T0CONbits 000FD5                         __size_of_strcat 005A  
                       __size_of_strchr 005E                         __size_of_strcpy 002E  
                       __size_of_strlen 003C                       __end_of_hexpowers 6BB4  
                       __size_of_strtok 0096                         __size_of_strspn 0046  
                               _dpowers 6B6C                       __end_of_init_crc8 169C  
                               _isdigit 0E30          printNodeFirmwareVersion@nodeid 00BC  
                             _T3CONbits 000FB1                     __end_of_WriteTimer0 0D98  
                   __end_of_WriteTimer3 0DBC                          _nibbleFromChar 1108  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 0FA6  
                               _sprintf 4BF6        __end_of_sendVSCPModeCapabilities 206E  
                     __end_of_setFilter 4238                                 _strichr 10CA  
                        doModeVerbose@c 02B7                          doModeVerbose@i 02AD  
                        doModeVerbose@p 02BE                                 _strcspn 120E  
                               _toupper 0DE4                             ?_doModeVscp 0001  
                               _stristr 17FA                    __size_of_printBinary 004A  
                  end_of_initialization 1388                       __end_of_octpowers 6B6C  
                  __size_of_printErrors 02A6                                 memcpy@d 001F  
                               memcpy@n 0064                                 memcpy@s 0021  
                ??_printFirmwareVersion 0024                                 itoa@buf 006C  
                               memset@c 0062                                 itoa@val 006E  
                               memset@n 0064                                 memset@p 001F  
                             i1u1233_25 3E08                               i1u1233_27 3E0C  
                         __Lmediumconst 6B3C                               i1u1260_20 007C  
                             i1u1260_21 007A                               i1u1261_20 0098  
                             i1u1261_21 0096                    __end_of_sendCANFrame 1050  
                             i1u1270_20 0154                               i1u1262_20 00D6  
                             i1u1270_21 0152                               i1u1262_21 00D4  
                             i1u1271_20 0164                               i1u1263_20 00E6  
                             i1u1271_21 0162                               i1u1263_21 00E4  
                             i1u1280_20 01EE                               i1u1272_20 0170  
                             i1u1264_20 00FA                               i1u1280_21 01EC  
                             i1u1272_21 016E                               i1u1264_21 00F8  
                             i1u1281_20 0210                               i1u1273_20 0180  
                             i1u1265_20 010A                               i1u1281_21 020E  
                             i1u1273_21 017E                               i1u1265_21 0108  
                             i1u1193_25 2C48                               i1u1290_20 032C  
                             i1u1282_20 0218                               i1u1274_20 0192  
                             i1u1266_20 0118                               i1u1290_21 032A  
                             i1u1282_21 0216                               i1u1274_21 0190  
                             i1u1266_21 0116                               i1u1194_25 2C58  
                             i1u1283_20 0220                               i1u1275_20 019A  
                             i1u1267_20 0128                               i1u1259_20 003C  
                             i1u1283_21 021E                               i1u1275_21 0198  
                             i1u1267_21 0126                               i1u1259_21 003A  
                             i1u1195_25 2C84                               i1u1284_20 023C  
                             i1u1276_20 01B6                               i1u1268_20 0136  
                             i1u1284_21 023A                               i1u1276_21 01B4  
                             i1u1268_21 0134                               i1u1285_20 0244  
                             i1u1277_20 01C4                               i1u1269_20 0146  
                             i1u1285_21 0242                               i1u1277_21 01C2  
                             i1u1269_21 0144                               i1u1286_20 0270  
                             i1u1278_20 01CC                               i1u1286_21 026E  
                             i1u1278_21 01CA                               i1u1287_20 02AE  
                             i1u1279_20 01DA                               i1u1287_21 02AC  
                             i1u1279_21 01D8                               i1u1288_20 02EC  
                             i1u1288_21 02EA                               i1u1289_20 031C  
                             i1u1289_21 031A                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0081                       __end_of_printGUID 28F2  
                       ___lldiv@divisor 0064                       __end_of_printHelp 33D6  
                       ___lldiv@counter 0023                       __end_of_printMode 170E  
                     ECANSendMessage@id 0067                       ECANSendMessage@pb 0070  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 0024  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 133C  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 5342  
                               utoa@buf 0063       __size_of_printNodeFirmwareVersion 00C8  
                               utoa@val 0065               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 1F0A                                 strlen@s 001F  
                            _sequencyno 0034                              _timekeeper 0118  
                             _RXM0EXIDM 0078CB                                 strspn@i 0066  
                            ??_strnicmp 0066                     __end_of_getCANFrame 1F0A  
                            findNodes@i 00C7                  __end_of_nibbleFromChar 1146  
                   __end_of_doModeSLCAN 4BEA                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 0068  
                            fifo_read@p 0066                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B3  
     sendVSCPDriverCommandReply@cmdCode 006A                     __size_of_WriteUSART 0016  
           sendVSCPModeCapabilities@crc 006A                 __end_of_ECANSendMessage 3256  
                  _uart_receiveOverruns 0120                _receivePrintEventVerbose 44F4  
                            _vscpNodeId 003E                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 2CE6                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02B3  
                     doModeVerbose@preg 0284                          _init_crc8$2106 0060  
                ??_readRegisterExtended 00BA                          ?_doModeVerbose 0001  
                          ??_ReadTimer3 0021                            ??_Read_b_eep 0021  
                        ?_sendVSCPFrame 0093                          __end_of___wmul 0F62  
                   __size_of_doModeVscp 01C6                             _WriteTimer0 0D86  
                           _WriteTimer3 0DAA                             _Write_b_eep 0F72  
                        __end_of_memcpy 11C8                          __end_of_memset 0EE2  
     __size_of_sendVSCPDriverErrorFrame 00B6               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                               ___DCDelay 01F9  
                        __end_of_strcat 1444                          __end_of_strchr 14FE  
                        __end_of_strcpy 0F10                          __end_of_strlen 108C  
              doModeVerbose@filter_type 028D                          __end_of_strtok 1AA0  
                        __end_of_strspn 120E                             __end_ofPL10 5294  
                           __end_ofPL20 1B36                             __end_ofPL12 424E  
                           __end_ofPL30 6A38                             __end_ofPL22 2B10  
                           __end_ofPL14 2E6C                             __end_ofPL40 2CF4  
                           __end_ofPL32 2BE0                             __end_ofPL24 52CA  
                           __end_ofPL16 6A14                             __end_ofPL50 1DBA  
                           __end_ofPL42 6A64                             __end_ofPL34 3DC2  
                           __end_ofPL26 6A24                             __end_ofPL18 52A4  
                           __end_ofPL60 3DDA                             __end_ofPL52 1D16  
                           __end_ofPL44 6A7E                             __end_ofPL36 6A4A  
                           __end_ofPL28 36E4                             __end_ofPL70 6ADA  
                           __end_ofPL62 6AC6                             __end_ofPL54 52FA  
                           __end_ofPL46 6A98                             __end_ofPL38 246A  
                           __end_ofPL80 2C06                             __end_ofPL72 531C  
                           __end_ofPL64 1A0A                             __end_ofPL56 6AB0  
                           __end_ofPL48 52E4                             __end_ofPL90 2C18  
                           __end_ofPL82 2906                             __end_ofPL74 2D1A  
                           __end_ofPL66 5308                             __end_ofPL58 2BF2  
                           __end_ofPL92 2D40                             __end_ofPL84 482A  
                           __end_ofPL76 2D2E                             __end_ofPL68 2D08  
                           __end_ofPL94 1E62                             __end_ofPL86 6AEC  
                           __end_ofPL78 262A                             __end_ofPL96 532E  
                           __end_ofPL88 36F6                             __end_ofPL98 4BF6  
                   start_initialization 133C                               _ReadUSART 0E6C  
                       findNodes@nFound 00C4                   doModeVerbose@reg_1261 02A9  
                 doModeVerbose@filterno 02AC                 _receiveVSCPModeCanalMsg 262A  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 009F  
                          ??_OpenTimer0 001F                            ??_OpenTimer3 001F  
                  setFilter@bPersistent 0064                      __end_of_ReadTimer3 0DCE  
sendVSCPDriverCommandReply@cmdReplyCode 006B                               _Interrupt 0018  
                        ??__CANIDToRegs 0021              readRegisterExtended@nodeid 00BE  
                             _OpenUSART 1444                      __end_of_Read_b_eep 0DAA  
                   sendVSCPFrame@nodeid 0096                         ___llmod@divisor 006C  
                 __size_of_readRegister 00C8                         ___llmod@counter 0070  
                     __size_of_Busy_eep 0006                   ECANReceiveMessage@ptr 0012  
                   __size_of_fifo_write 00FE                   __size_of_init_app_ram 01A6  
                        _findNodes$1615 00C2                __end_of__ECANPointBuffer 1784  
                     __CANIDToRegs@type 0066                              init_crc8@i 0065  
                            init_crc8@j 0062                             _getCANFrame 1E62  
                              ??___wmul 0023       __size_of_sendVSCPModeCapabilities 00AE  
                     ?_hexStringToBytes 0060                             _doModeSLCAN 482A  
             ?_sendVSCPModeCapabilities 0001                       ?_checkCANBusState 0001  
            __end_of_ECANReceiveMessage 3FE0                                ??_memcpy 001F  
                   readRegister@timeout 00B4                                ??_memset 001F  
                 sendVSCPDriverNack@crc 006A                doModeVerbose@mask_nodeid 0291  
                 __end_ofi1_WriteTimer0 0D86                      ??_hexStringToBytes 0065  
                    ??_checkCANBusState 001F                                ??_strcat 0023  
                              ??_strchr 0060                                ??_strcpy 0023  
                              ??_strlen 0021                      __end_of_OpenTimer0 0E30  
                    __end_of_OpenTimer3 0EB4                                ??_strtok 0023  
                              ??_strspn 0023                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0024                              ?_ReadUSART 0001  
                       __IT_SAVE_STATUS 012E                           __pcstackBANK0 0060  
                         __pcstackBANK1 01F2                           __pcstackBANK2 0280  
                   __end_of__stringdata 7CFF                            _readRegister 213E  
                          _isdigit$3189 0020                   __size_of_sendCANFrame 003A  
           ?_sendVSCPDriverCommandReply 006A             sendVSCPDriverErrorFrame@crc 006B  
                      ?_ECANSendMessage 0067                       sendVSCPFrame@size 0098  
                          _init_app_ram 3BFE                              ?_Interrupt 0001  
                            ?_OpenUSART 001F                             sprintf@_val 0088  
                           sprintf@flag 008D                             sprintf@prec 0084  
                             __pnvBANK1 01F7                           __IT_SAVE_WREG 012F  
                      _ledFunctionality 0030                doModeVerbose@nodeid_1259 02B1  
              doModeVerbose@nodeid_1285 02B6                            setFilter@val 0060  
                      ___lwdiv@dividend 001F                         ??_doModeVerbose 00C8  
         __size_of_ECANSetOperationMode 0018                         _printStatistics 33D6  
                          ??_WriteUSART 001F                         ??_sendVSCPFrame 009B  
                        _ECANInitialize 1874                       _sendVSCPDriverAck 1D16  
                         __pmediumconst 6B3C                                ?___lldiv 0060  
                              ?_calcCRC 0067                                ?___llmod 0068  
                             _findNodes 2E6C                                ?___lwdiv 001F  
                              ?___lwmod 001F                               _fifo_init 1146  
                             _fifo_read 2398                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 0088                             __pintcodelo 0018  
                          _sendCANFrame 1016                       WriteTimer0@timer0 001F  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0093                     ??_sendVSCPDriverAck 0024  
                     __size_of_strnicmp 006C                         printGUID@nodeid 00BC  
                     WriteTimer3@timer3 001F                     _sendEscapedUartData 14FE  
                             _hexpowers 6B94                        ___lwdiv@quotient 0061  
                             _init_crc8 162C                   __size_of__RegsToCANID 00C4  
             doModeVerbose@filter_class 0288                                ?_sprintf 0071  
                              ?_strichr 0020                             _cntRxFrames 010C  
                          ??_doModeVscp 0024                                ?_strcspn 0062  
                              ?_toupper 0001                                ?_stristr 0068  
                    __end_of_WriteUSART 0DE4                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                         _can_inputBuffer 0400  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0093  
                             _setFilter 3FEE                             strnicmp@len 0064  
                             _octpowers 6B3C                                _PIE1bits 000F9D  
                              _PIE2bits 000FA0             __size_of_sendVSCPDriverNack 0096  
                __end_of_ECANInitialize 18F4               __end_of_sendVSCPDriverAck 1DAC  
                              i1u670_25 1DE0                                i1u665_25 2D60  
                              _PIR1bits 000F9E                                i1u666_25 2D70  
                 _receiveSendEventCANAL 2F9C                                _PIR2bits 000FA1  
                              i1u668_25 2E06                        ECANSendMessage@i 0089  
                      ECANSendMessage@j 0084                    ?_sendEscapedUartData 0067  
                 _receiveSendEventSLCAN 36F6                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 0077                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 006C                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006A  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 280A                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C1  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 3256  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 169C                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 3BFE                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 2BCC                               _putsUSART 12E8  
                           __stringdata 6BB4                       ___wmul@multiplier 0060  
                          __RegsToCANID 2C22                               _vscpClass 003A  
               ??_writeRegisterExtended 00BA                         Write_b_eep@badd 001F  
                       Write_b_eep@bdat 0021                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 008F  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 006F  
                         ??_printBinary 0020                        doModeVerbose@reg 02B4  
                         ??_printErrors 0024                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 0033  
             writeRegisterExtended@page 00B3                                ___DCByte 0130  
  __end_of_receiveVSCPModeMultiCanalMsg 0D64   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 0D62                             ??_Interrupt 0014  
               __end_of_printStatistics 3566                             ??_OpenUSART 0021  
          writeRegisterExtended@timeout 00B6                                _Busy_eep 0D66  
              __size_of_init_app_eeprom 00CA                              ?_setFilter 0060  
                       OpenUSART@config 0021                          findNodes@value 00C5  
          __end_of_vscp_restoreDefaults 0D74                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0078         __end_of_receiveVSCPModeCanalMsg 2714  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000E                   ??_sendEscapedUartData 0024  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 2E3E                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00A7                              ?_printGUID 0001  
                           doModeVscp@c 00B4                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 001F  
                      ??_nibbleFromChar 001F                        __size_of___lldiv 0076  
                      __size_of_calcCRC 0030                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 001F                            ?_WriteTimer3 001F  
                      getCANFrame@pdata 006C                            ?_Write_b_eep 001F  
                            ?_putsUSART 0020                         fifo_read@nbytes 0064  
                            sprintf@idx 007C                   hexStringToBytes@inhex 0063  
                              calcCRC@j 006A                              strcat@from 0021  
                              calcCRC@p 0067                        __size_of_isdigit 001E  
                       ___lwdiv@divisor 0021                         ___lwdiv@counter 0060  
                              __ptext10 1FC0                                __ptext11 0D62  
                              __ptext20 0FDE                                __ptext12 262A  
                              __ptext21 162C                                __ptext13 1186  
                              __ptext30 2206                                __ptext22 5342  
                              __ptext14 1D16                                __ptext31 13EA  
                              __ptext23 2906                                __ptext15 1C72  
                              __ptext40 33D6                                __ptext32 213E  
                              __ptext24 129E                                __ptext16 0F10  
                              __ptext41 2A06                                __ptext33 1F0A  
                              __ptext25 2714                                __ptext17 2F9C  
                              __ptext50 1050                                __ptext42 1A0A  
                              __ptext34 1016                                __ptext26 0EE2  
                              __ptext18 3566                                __ptext51 44F4  
                              __ptext43 120E                                __ptext35 30E8  
                              __ptext27 2E6C                                __ptext19 14FE  
                              __ptext60 0E30                                __ptext52 0DBC  
                              __ptext44 11C8                                __ptext36 0E4E  
                              __ptext28 1AA0                                __ptext61 197C  
                              __ptext53 18F4                                __ptext45 14A0  
                              __ptext37 0EB4                                __ptext29 280A  
                              __ptext70 0DCE                                __ptext62 0FA6  
                              __ptext54 1E62                                __ptext46 17FA  
                              __ptext38 3256                                __ptext71 1392  
                              __ptext63 1BD2                                __ptext55 2398  
                              __ptext47 10CA                                __ptext39 424E  
                              __ptext80 0F72                                __ptext72 1874  
                              __ptext64 108C                                __ptext56 4BF6  
                              __ptext48 15C0                                __ptext81 0D66  
                              __ptext73 0DAA                                __ptext65 1254  
                              __ptext57 0F40                                __ptext49 0DE4  
                              __ptext90 2C22                                __ptext82 0DFA  
                              __ptext74 0E8C                                __ptext66 0D6C  
                              __ptext58 155E                                __ptext91 170E  
                              __ptext83 0D98                                __ptext75 0E12  
                              __ptext67 22CE                                __ptext59 1784  
                              __ptext92 2D40                                __ptext84 0D86  
                              __ptext76 1444                                __ptext68 169C  
                              __ptext93 0E6C                                __ptext85 1146  
                              __ptext77 3BFE                                __ptext69 12E8  
                              __ptext78 2B10                                __ptext87 0D74  
                              __ptext79 3FEE                                __ptext88 1DBA  
                              __ptext89 3DDA                receiveSendEventCANAL@dlc 007B  
              receiveSendEventCANAL@crc 007C                          printMDF@nodeid 00BC  
                         ?_getVSCPFrame 006E                              strichr@chr 0022  
                      __size_of_sprintf 0680                              strichr@ptr 0020  
                      __size_of_strichr 003E                        __size_of_strcspn 0046  
                      __size_of_toupper 0016                        __size_of_stristr 007A  
                            strcpy@from 0021                          printGUID@value 00C0  
                   __end_of_printBinary 12E8                           __size_of_crc8 0038  
                         __size_of_atoi 00FC                           __size_of_main 01B0  
                         __size_of_init 0058                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 0001                     __end_of_printErrors 44F4  
                         __size_of_utoa 00A0                  ?_receiveSendEventCANAL 0001  
                            strnicmp@s1 0060                              strnicmp@s2 0062  
                         init_app_ram@i 0078              __size_of_sendVSCPDriverAck 0096  
        receiveSendMultiEventCANAL@data 006E                  ?_receiveSendEventSLCAN 0001  
              _printNodeFirmwareVersion 2206                     ECANSendMessage@data 006B  
              ECANSendMessage@tempBSEL0 0085                                _printMDF 1AA0  
                             printMDF@i 00C0                               printMDF@p 00BE  
                          ?_getCANFrame 006A                     ECANSendMessage@mode 0082  
                   ECANSendMessage@temp 0088                       ?__ECANPointBuffer 0001  
          ??_receiveSendMultiEventCANAL 0024                                atoi@sign 006A  
                           ??_findNodes 0024                            ?_doModeSLCAN 0001  
                           ??_fifo_init 001F                             ??_fifo_read 001F  
                              _vscpData 01EA           __size_of_readRegisterExtended 00F6  
                              main@argc 01F2                                main@argv 01F4  
                              _vscpSize 0040                      ??__ECANPointBuffer 0004  
                              _vscpType 0041                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006A                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A7                                _strnicmp 15C0  
                      init_app_eeprom@i 0023             writeRegisterExtended@nodeid 00BE  
                         Interrupt@fail 001E                         _serialInputFifo 01E2  
                         findNodes@bDot 00C6                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 001F                     ECANReceiveMessage@i 000F  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A6                                itoa@base 0070  
                              isdigit@c 0021                      _ECANReceiveMessage 3DDA  
                              memset@p1 0060                             ??_init_crc8 001F  
                             ultoa@base 0077                          ??_getVSCPFrame 0074  
             __size_of_hexStringToBytes 009C               __size_of_checkCANBusState 001E  
                       sendVSCPFrame@id 00AF                                intlevel1 0000  
                             sprintf@ap 0083                               sprintf@sp 0071  
                  hexStringToBytes@size 0062                               strchr@chr 0021  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 0085  
                      ___lwmod@dividend 001F                               strchr@ptr 001F  
                   ?_ECANReceiveMessage 0008                        ___lldiv@dividend 0060  
                           ??_setFilter 0065                           printMDF@value 00BD  
   __size_of_receiveSendMultiEventCANAL 016E                           fifo_getFree@f 0001  
                             strcspn@s1 0062                               strcspn@s2 0064  
    receiveSendMultiEventCANAL@msgcount 0076                 ECANSendMessage@msgFlags 006E  
                            _OSCCONbits 000FD3                               strnicmp@r 0023  
                             stristr@s1 0068                               stristr@s2 006A  
                    ECANSendMessage@ptr 008A                       ??_init_app_eeprom 0023  
                 __size_of__CANIDToRegs 00BC                             ??_printGUID 0024  
                           ??_printHelp 0024                             ??_printMode 0024  
              _sendVSCPDriverErrorFrame 207A                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 006D                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 000C                             ??_putsUSART 0022  
                              utoa@base 0067                                ultoa@buf 0071  
                              ultoa@val 0073                           fifo_init@size 0064  
                              sprintf@c 008C                                sprintf@f 0073  
                   hexStringToBytes@buf 0060                                strcat@cp 0060  
                   hexStringToBytes@len 0068                          _doModeVscpNode 0D64  
                              strcat@to 001F        __end_of_receivePrintEventVerbose 4818  
                ECANSendMessage@buffers 0083                        ___lldiv@quotient 001F  
                       ___lwmod@divisor 0021            __end_of_ECANSetOperationMode 0E12  
                  _vscp_restoreDefaults 0D6C                            printGUID@buf 00BD  
                              strcpy@cp 0060                                strlen@cp 0021  
                              strcpy@to 001F                         ___lwmod@counter 0023  
                              strcspn@i 0066                                toupper@c 001F  
                           _printBinary 129E                                strtok@s1 0068  
                              strtok@s2 006A                                strspn@s1 0062  
                              strspn@s2 0064                              _RXM1EXIDEN 0078EB  
                              strtok@sp 0026                  ECANSendMessage@tempPtr 0086  
                           _printErrors 424E                            fifo_init@buf 0062  
                          fifo_read@buf 0062           sendVSCPDriverCommandReply@crc 006C  
                          __CANIDToRegs 2B10                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 012A               readRegisterExtended@value 00B8  
              _sendVSCPModeCapabilities 1FC0                __size_of_ECANSendMessage 016E  
