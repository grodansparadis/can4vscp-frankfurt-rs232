

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Oct 05 23:09:09 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006C8A                     __pmediumconst:
   136                           	opt stack 0
   137  006C8A                     _octpowers:
   138                           	opt stack 0
   139  006C8A  0001               	dw	1
   140  006C8C  0000               	dw	0
   141  006C8E  0008               	dw	8
   142  006C90  0000               	dw	0
   143  006C92  0040               	dw	64
   144  006C94  0000               	dw	0
   145  006C96  0200               	dw	512
   146  006C98  0000               	dw	0
   147  006C9A  1000               	dw	4096
   148  006C9C  0000               	dw	0
   149  006C9E  8000               	dw	32768
   150  006CA0  0000               	dw	0
   151  006CA2  0000               	dw	0
   152  006CA4  0004               	dw	4
   153  006CA6  0000               	dw	0
   154  006CA8  0020               	dw	32
   155  006CAA  0000               	dw	0
   156  006CAC  0100               	dw	256
   157  006CAE  0000               	dw	0
   158  006CB0  0800               	dw	2048
   159  006CB2  0000               	dw	0
   160  006CB4  4000               	dw	16384
   161  006CB6  0000               	dw	0
   162  006CB8  0000               	dw	0
   163  006CBA                     __end_of_octpowers:
   164                           	opt stack 0
   165  006CBA                     _dpowers:
   166                           	opt stack 0
   167  006CBA  0001               	dw	1
   168  006CBC  0000               	dw	0
   169  006CBE  000A               	dw	10
   170  006CC0  0000               	dw	0
   171  006CC2  0064               	dw	100
   172  006CC4  0000               	dw	0
   173  006CC6  03E8               	dw	1000
   174  006CC8  0000               	dw	0
   175  006CCA  2710               	dw	10000
   176  006CCC  0000               	dw	0
   177  006CCE  86A0               	dw	34464
   178  006CD0  0001               	dw	1
   179  006CD2  4240               	dw	16960
   180  006CD4  000F               	dw	15
   181  006CD6  9680               	dw	38528
   182  006CD8  0098               	dw	152
   183  006CDA  E100               	dw	57600
   184  006CDC  05F5               	dw	1525
   185  006CDE  CA00               	dw	51712
   186  006CE0  3B9A               	dw	15258
   187  006CE2                     __end_of_dpowers:
   188                           	opt stack 0
   189  006CE2                     _hexpowers:
   190                           	opt stack 0
   191  006CE2  0001               	dw	1
   192  006CE4  0000               	dw	0
   193  006CE6  0010               	dw	16
   194  006CE8  0000               	dw	0
   195  006CEA  0100               	dw	256
   196  006CEC  0000               	dw	0
   197  006CEE  1000               	dw	4096
   198  006CF0  0000               	dw	0
   199  006CF2  0000               	dw	0
   200  006CF4  0001               	dw	1
   201  006CF6  0000               	dw	0
   202  006CF8  0010               	dw	16
   203  006CFA  0000               	dw	0
   204  006CFC  0100               	dw	256
   205  006CFE  0000               	dw	0
   206  006D00  1000               	dw	4096
   207  006D02                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _RCREG	set	4014
   230  0000                     _RCSTA	set	4011
   231  0000                     _RCSTAbits	set	4011
   232  0000                     _RXB1CONbits	set	3920
   233  0000                     _RXERRCNT	set	3957
   234  0000                     _RXF0EIDH	set	3842
   235  0000                     _RXF0EIDL	set	3843
   236  0000                     _RXF0SIDH	set	3840
   237  0000                     _RXF0SIDL	set	3841
   238  0000                     _RXF10EIDH	set	3446
   239  0000                     _RXF10EIDL	set	3447
   240  0000                     _RXF10SIDH	set	3444
   241  0000                     _RXF10SIDL	set	3445
   242  0000                     _RXF11EIDH	set	3450
   243  0000                     _RXF11EIDL	set	3451
   244  0000                     _RXF11SIDH	set	3448
   245  0000                     _RXF11SIDL	set	3449
   246  0000                     _RXF12EIDH	set	3458
   247  0000                     _RXF12EIDL	set	3459
   248  0000                     _RXF12SIDH	set	3456
   249  0000                     _RXF12SIDL	set	3457
   250  0000                     _RXF13EIDH	set	3462
   251  0000                     _RXF13EIDL	set	3463
   252  0000                     _RXF13SIDH	set	3460
   253  0000                     _RXF13SIDL	set	3461
   254  0000                     _RXF14EIDH	set	3466
   255  0000                     _RXF14EIDL	set	3467
   256  0000                     _RXF14SIDH	set	3464
   257  0000                     _RXF14SIDL	set	3465
   258  0000                     _RXF15EIDH	set	3474
   259  0000                     _RXF15EIDL	set	3475
   260  0000                     _RXF15SIDH	set	3472
   261  0000                     _RXF15SIDL	set	3473
   262  0000                     _RXF1EIDH	set	3846
   263  0000                     _RXF1EIDL	set	3847
   264  0000                     _RXF1SIDH	set	3844
   265  0000                     _RXF1SIDL	set	3845
   266  0000                     _RXF2EIDH	set	3850
   267  0000                     _RXF2EIDL	set	3851
   268  0000                     _RXF2SIDH	set	3848
   269  0000                     _RXF2SIDL	set	3849
   270  0000                     _RXF3EIDH	set	3854
   271  0000                     _RXF3EIDL	set	3855
   272  0000                     _RXF3SIDH	set	3852
   273  0000                     _RXF3SIDL	set	3853
   274  0000                     _RXF4EIDH	set	3858
   275  0000                     _RXF4EIDL	set	3859
   276  0000                     _RXF4SIDH	set	3856
   277  0000                     _RXF4SIDL	set	3857
   278  0000                     _RXF5EIDH	set	3862
   279  0000                     _RXF5EIDL	set	3863
   280  0000                     _RXF5SIDH	set	3860
   281  0000                     _RXF5SIDL	set	3861
   282  0000                     _RXF6EIDH	set	3426
   283  0000                     _RXF6EIDL	set	3427
   284  0000                     _RXF6SIDH	set	3424
   285  0000                     _RXF6SIDL	set	3425
   286  0000                     _RXF7EIDH	set	3430
   287  0000                     _RXF7EIDL	set	3431
   288  0000                     _RXF7SIDH	set	3428
   289  0000                     _RXF7SIDL	set	3429
   290  0000                     _RXF8EIDH	set	3434
   291  0000                     _RXF8EIDL	set	3435
   292  0000                     _RXF8SIDH	set	3432
   293  0000                     _RXF8SIDL	set	3433
   294  0000                     _RXF9EIDH	set	3442
   295  0000                     _RXF9EIDL	set	3443
   296  0000                     _RXF9SIDH	set	3440
   297  0000                     _RXF9SIDL	set	3441
   298  0000                     _RXFBCON0	set	3552
   299  0000                     _RXFBCON1	set	3553
   300  0000                     _RXFBCON2	set	3554
   301  0000                     _RXFBCON3	set	3555
   302  0000                     _RXFBCON4	set	3556
   303  0000                     _RXFBCON5	set	3557
   304  0000                     _RXFBCON6	set	3558
   305  0000                     _RXFBCON7	set	3559
   306  0000                     _RXFCON0	set	3540
   307  0000                     _RXFCON1	set	3541
   308  0000                     _RXM0EIDH	set	3866
   309  0000                     _RXM0EIDL	set	3867
   310  0000                     _RXM0SIDL	set	3865
   311  0000                     _RXM1EIDH	set	3870
   312  0000                     _RXM1EIDL	set	3871
   313  0000                     _RXM1SIDL	set	3869
   314  0000                     _SPBRG	set	4015
   315  0000                     _SPBRGH	set	4016
   316  0000                     _T0CON	set	4053
   317  0000                     _T0CONbits	set	4053
   318  0000                     _TMR0H	set	4055
   319  0000                     _TMR0L	set	4054
   320  0000                     _TRISBbits	set	3987
   321  0000                     _TRISCbits	set	3988
   322  0000                     _TXERRCNT	set	3958
   323  0000                     _TXREG	set	4013
   324  0000                     _TXSTA	set	4012
   325  0000                     _TXSTAbits	set	4012
   326  0000                     _B0RXFUL	set	28935
   327  0000                     _B0TXEN	set	28610
   328  0000                     _B1RXFUL	set	29063
   329  0000                     _B1TXEN	set	28611
   330  0000                     _B2RXFUL	set	29191
   331  0000                     _B2TXEN	set	28612
   332  0000                     _B3RXFUL	set	29319
   333  0000                     _B3TXEN	set	28613
   334  0000                     _B4RXFUL	set	29447
   335  0000                     _B4TXEN	set	28614
   336  0000                     _B5RXFUL	set	29575
   337  0000                     _B5TXEN	set	28615
   338  0000                     _ERRIE	set	32029
   339  0000                     _FIFOEMPTY	set	31655
   340  0000                     _IRXIF	set	32039
   341  0000                     _LATC1	set	31833
   342  0000                     _MDSEL0	set	31678
   343  0000                     _MDSEL1	set	31679
   344  0000                     _PEIE	set	32662
   345  0000                     _RCIE	set	31981
   346  0000                     _RCIF	set	31989
   347  0000                     _RCIP	set	31997
   348  0000                     _RXB0FILHIT0	set	31488
   349  0000                     _RXB0FUL	set	31495
   350  0000                     _RXB0IF	set	32032
   351  0000                     _RXB0OVFL	set	31655
   352  0000                     _RXB1IF	set	32033
   353  0000                     _RXB1OVFL	set	31654
   354  0000                     _RXBnIE	set	32025
   355  0000                     _RXBnIF	set	32033
   356  0000                     _RXM0EXIDM	set	30923
   357  0000                     _RXM1EXIDEN	set	30955
   358  0000                     _B0CON	set	3616
   359  0000                     _B1CON	set	3632
   360  0000                     _B2CON	set	3648
   361  0000                     _B3CON	set	3664
   362  0000                     _B4CON	set	3680
   363  0000                     _B5CON	set	3696
   364  0000                     _RXB0CON	set	3936
   365  0000                     _RXB1CON	set	3920
   366  0000                     _RXM0SIDH	set	3864
   367  0000                     _RXM1SIDH	set	3868
   368  0000                     _TXB0CON	set	3904
   369  0000                     _TXB1CON	set	3888
   370  0000                     _TXB2CON	set	3872
   371  006D02                     __stringdata:
   372                           	opt stack 0
   373  006D02                     STR_235:
   374  006D02  20                 	db	32
   375  006D03  20                 	db	32
   376  006D04  20                 	db	32
   377  006D05  20                 	db	32
   378  006D06  20                 	db	32
   379  006D07  20                 	db	32
   380  006D08  20                 	db	32
   381  006D09  20                 	db	32
   382  006D0A  20                 	db	32
   383  006D0B  46                 	db	70	;'F'
   384  006D0C  6F                 	db	111	;'o'
   385  006D0D  72                 	db	114	;'r'
   386  006D0E  6D                 	db	109	;'m'
   387  006D0F  61                 	db	97	;'a'
   388  006D10  74                 	db	116	;'t'
   389  006D11  3A                 	db	58	;':'
   390  006D12  20                 	db	32
   391  006D13  66                 	db	102	;'f'
   392  006D14  69                 	db	105	;'i'
   393  006D15  6C                 	db	108	;'l'
   394  006D16  74                 	db	116	;'t'
   395  006D17  65                 	db	101	;'e'
   396  006D18  72                 	db	114	;'r'
   397  006D19  20                 	db	32
   398  006D1A  66                 	db	102	;'f'
   399  006D1B  69                 	db	105	;'i'
   400  006D1C  6C                 	db	108	;'l'
   401  006D1D  74                 	db	116	;'t'
   402  006D1E  65                 	db	101	;'e'
   403  006D1F  72                 	db	114	;'r'
   404  006D20  6E                 	db	110	;'n'
   405  006D21  6F                 	db	111	;'o'
   406  006D22  2C                 	db	44
   407  006D23  70                 	db	112	;'p'
   408  006D24  72                 	db	114	;'r'
   409  006D25  69                 	db	105	;'i'
   410  006D26  6F                 	db	111	;'o'
   411  006D27  2C                 	db	44
   412  006D28  63                 	db	99	;'c'
   413  006D29  6C                 	db	108	;'l'
   414  006D2A  61                 	db	97	;'a'
   415  006D2B  73                 	db	115	;'s'
   416  006D2C  73                 	db	115	;'s'
   417  006D2D  2C                 	db	44
   418  006D2E  74                 	db	116	;'t'
   419  006D2F  79                 	db	121	;'y'
   420  006D30  70                 	db	112	;'p'
   421  006D31  65                 	db	101	;'e'
   422  006D32  2C                 	db	44
   423  006D33  6E                 	db	110	;'n'
   424  006D34  6F                 	db	111	;'o'
   425  006D35  64                 	db	100	;'d'
   426  006D36  65                 	db	101	;'e'
   427  006D37  69                 	db	105	;'i'
   428  006D38  64                 	db	100	;'d'
   429  006D39  20                 	db	32
   430  006D3A  20                 	db	32
   431  006D3B  28                 	db	40
   432  006D3C  66                 	db	102	;'f'
   433  006D3D  69                 	db	105	;'i'
   434  006D3E  6C                 	db	108	;'l'
   435  006D3F  74                 	db	116	;'t'
   436  006D40  65                 	db	101	;'e'
   437  006D41  72                 	db	114	;'r'
   438  006D42  6E                 	db	110	;'n'
   439  006D43  6F                 	db	111	;'o'
   440  006D44  20                 	db	32
   441  006D45  3D                 	db	61	;'='
   442  006D46  20                 	db	32
   443  006D47  30                 	db	48	;'0'
   444  006D48  2D                 	db	45
   445  006D49  31                 	db	49	;'1'
   446  006D4A  35                 	db	53	;'5'
   447  006D4B  29                 	db	41
   448  006D4C  2E                 	db	46
   449  006D4D  0D                 	db	13
   450  006D4E  0A                 	db	10
   451  006D4F  00                 	db	0
   452  006D50                     STR_233:
   453  006D50  49                 	db	73	;'I'
   454  006D51  4E                 	db	78	;'N'
   455  006D52  46                 	db	70	;'F'
   456  006D53  4F                 	db	79	;'O'
   457  006D54  20                 	db	32
   458  006D55  2D                 	db	45
   459  006D56  20                 	db	32
   460  006D57  47                 	db	71	;'G'
   461  006D58  65                 	db	101	;'e'
   462  006D59  74                 	db	116	;'t'
   463  006D5A  20                 	db	32
   464  006D5B  69                 	db	105	;'i'
   465  006D5C  6E                 	db	110	;'n'
   466  006D5D  66                 	db	102	;'f'
   467  006D5E  6F                 	db	111	;'o'
   468  006D5F  20                 	db	32
   469  006D60  61                 	db	97	;'a'
   470  006D61  62                 	db	98	;'b'
   471  006D62  6F                 	db	111	;'o'
   472  006D63  75                 	db	117	;'u'
   473  006D64  74                 	db	116	;'t'
   474  006D65  20                 	db	32
   475  006D66  61                 	db	97	;'a'
   476  006D67  6E                 	db	110	;'n'
   477  006D68  20                 	db	32
   478  006D69  65                 	db	101	;'e'
   479  006D6A  78                 	db	120	;'x'
   480  006D6B  69                 	db	105	;'i'
   481  006D6C  73                 	db	115	;'s'
   482  006D6D  74                 	db	116	;'t'
   483  006D6E  65                 	db	101	;'e'
   484  006D6F  6E                 	db	110	;'n'
   485  006D70  74                 	db	116	;'t'
   486  006D71  20                 	db	32
   487  006D72  6E                 	db	110	;'n'
   488  006D73  6F                 	db	111	;'o'
   489  006D74  64                 	db	100	;'d'
   490  006D75  65                 	db	101	;'e'
   491  006D76  20                 	db	32
   492  006D77  6F                 	db	111	;'o'
   493  006D78  6E                 	db	110	;'n'
   494  006D79  20                 	db	32
   495  006D7A  74                 	db	116	;'t'
   496  006D7B  68                 	db	104	;'h'
   497  006D7C  65                 	db	101	;'e'
   498  006D7D  20                 	db	32
   499  006D7E  62                 	db	98	;'b'
   500  006D7F  75                 	db	117	;'u'
   501  006D80  73                 	db	115	;'s'
   502  006D81  20                 	db	32
   503  006D82  28                 	db	40
   504  006D83  46                 	db	70	;'F'
   505  006D84  6F                 	db	111	;'o'
   506  006D85  72                 	db	114	;'r'
   507  006D86  6D                 	db	109	;'m'
   508  006D87  61                 	db	97	;'a'
   509  006D88  74                 	db	116	;'t'
   510  006D89  3A                 	db	58	;':'
   511  006D8A  20                 	db	32
   512  006D8B  69                 	db	105	;'i'
   513  006D8C  6E                 	db	110	;'n'
   514  006D8D  66                 	db	102	;'f'
   515  006D8E  6F                 	db	111	;'o'
   516  006D8F  20                 	db	32
   517  006D90  6E                 	db	110	;'n'
   518  006D91  69                 	db	105	;'i'
   519  006D92  63                 	db	99	;'c'
   520  006D93  6B                 	db	107	;'k'
   521  006D94  6E                 	db	110	;'n'
   522  006D95  61                 	db	97	;'a'
   523  006D96  6D                 	db	109	;'m'
   524  006D97  65                 	db	101	;'e'
   525  006D98  29                 	db	41
   526  006D99  2E                 	db	46
   527  006D9A  0D                 	db	13
   528  006D9B  0A                 	db	10
   529  006D9C  00                 	db	0
   530  006D9D                     STR_231:
   531  006D9D  52                 	db	82	;'R'
   532  006D9E  52                 	db	82	;'R'
   533  006D9F  45                 	db	69	;'E'
   534  006DA0  47                 	db	71	;'G'
   535  006DA1  20                 	db	32
   536  006DA2  2D                 	db	45
   537  006DA3  20                 	db	32
   538  006DA4  52                 	db	82	;'R'
   539  006DA5  65                 	db	101	;'e'
   540  006DA6  61                 	db	97	;'a'
   541  006DA7  64                 	db	100	;'d'
   542  006DA8  20                 	db	32
   543  006DA9  72                 	db	114	;'r'
   544  006DAA  65                 	db	101	;'e'
   545  006DAB  67                 	db	103	;'g'
   546  006DAC  69                 	db	105	;'i'
   547  006DAD  73                 	db	115	;'s'
   548  006DAE  74                 	db	116	;'t'
   549  006DAF  65                 	db	101	;'e'
   550  006DB0  72                 	db	114	;'r'
   551  006DB1  28                 	db	40
   552  006DB2  73                 	db	115	;'s'
   553  006DB3  29                 	db	41
   554  006DB4  20                 	db	32
   555  006DB5  6F                 	db	111	;'o'
   556  006DB6  66                 	db	102	;'f'
   557  006DB7  20                 	db	32
   558  006DB8  6E                 	db	110	;'n'
   559  006DB9  6F                 	db	111	;'o'
   560  006DBA  64                 	db	100	;'d'
   561  006DBB  65                 	db	101	;'e'
   562  006DBC  20                 	db	32
   563  006DBD  28                 	db	40
   564  006DBE  46                 	db	70	;'F'
   565  006DBF  6F                 	db	111	;'o'
   566  006DC0  72                 	db	114	;'r'
   567  006DC1  6D                 	db	109	;'m'
   568  006DC2  61                 	db	97	;'a'
   569  006DC3  74                 	db	116	;'t'
   570  006DC4  3A                 	db	58	;':'
   571  006DC5  20                 	db	32
   572  006DC6  72                 	db	114	;'r'
   573  006DC7  72                 	db	114	;'r'
   574  006DC8  65                 	db	101	;'e'
   575  006DC9  67                 	db	103	;'g'
   576  006DCA  20                 	db	32
   577  006DCB  6E                 	db	110	;'n'
   578  006DCC  6F                 	db	111	;'o'
   579  006DCD  64                 	db	100	;'d'
   580  006DCE  65                 	db	101	;'e'
   581  006DCF  69                 	db	105	;'i'
   582  006DD0  64                 	db	100	;'d'
   583  006DD1  20                 	db	32
   584  006DD2  5B                 	db	91	;'['
   585  006DD3  70                 	db	112	;'p'
   586  006DD4  61                 	db	97	;'a'
   587  006DD5  67                 	db	103	;'g'
   588  006DD6  65                 	db	101	;'e'
   589  006DD7  3A                 	db	58	;':'
   590  006DD8  5D                 	db	93	;']'
   591  006DD9  72                 	db	114	;'r'
   592  006DDA  65                 	db	101	;'e'
   593  006DDB  67                 	db	103	;'g'
   594  006DDC  20                 	db	32
   595  006DDD  5B                 	db	91	;'['
   596  006DDE  63                 	db	99	;'c'
   597  006DDF  6F                 	db	111	;'o'
   598  006DE0  75                 	db	117	;'u'
   599  006DE1  6E                 	db	110	;'n'
   600  006DE2  74                 	db	116	;'t'
   601  006DE3  5D                 	db	93	;']'
   602  006DE4  29                 	db	41
   603  006DE5  2E                 	db	46
   604  006DE6  0D                 	db	13
   605  006DE7  0A                 	db	10
   606  006DE8  00                 	db	0
   607  006DE9                     STR_232:
   608  006DE9  57                 	db	87	;'W'
   609  006DEA  52                 	db	82	;'R'
   610  006DEB  45                 	db	69	;'E'
   611  006DEC  47                 	db	71	;'G'
   612  006DED  20                 	db	32
   613  006DEE  2D                 	db	45
   614  006DEF  20                 	db	32
   615  006DF0  57                 	db	87	;'W'
   616  006DF1  72                 	db	114	;'r'
   617  006DF2  69                 	db	105	;'i'
   618  006DF3  74                 	db	116	;'t'
   619  006DF4  65                 	db	101	;'e'
   620  006DF5  20                 	db	32
   621  006DF6  72                 	db	114	;'r'
   622  006DF7  65                 	db	101	;'e'
   623  006DF8  67                 	db	103	;'g'
   624  006DF9  69                 	db	105	;'i'
   625  006DFA  73                 	db	115	;'s'
   626  006DFB  74                 	db	116	;'t'
   627  006DFC  65                 	db	101	;'e'
   628  006DFD  72                 	db	114	;'r'
   629  006DFE  20                 	db	32
   630  006DFF  6F                 	db	111	;'o'
   631  006E00  66                 	db	102	;'f'
   632  006E01  20                 	db	32
   633  006E02  6E                 	db	110	;'n'
   634  006E03  6F                 	db	111	;'o'
   635  006E04  64                 	db	100	;'d'
   636  006E05  65                 	db	101	;'e'
   637  006E06  20                 	db	32
   638  006E07  28                 	db	40
   639  006E08  46                 	db	70	;'F'
   640  006E09  6F                 	db	111	;'o'
   641  006E0A  72                 	db	114	;'r'
   642  006E0B  6D                 	db	109	;'m'
   643  006E0C  61                 	db	97	;'a'
   644  006E0D  74                 	db	116	;'t'
   645  006E0E  3A                 	db	58	;':'
   646  006E0F  20                 	db	32
   647  006E10  77                 	db	119	;'w'
   648  006E11  72                 	db	114	;'r'
   649  006E12  65                 	db	101	;'e'
   650  006E13  67                 	db	103	;'g'
   651  006E14  20                 	db	32
   652  006E15  6E                 	db	110	;'n'
   653  006E16  6F                 	db	111	;'o'
   654  006E17  64                 	db	100	;'d'
   655  006E18  65                 	db	101	;'e'
   656  006E19  69                 	db	105	;'i'
   657  006E1A  64                 	db	100	;'d'
   658  006E1B  20                 	db	32
   659  006E1C  5B                 	db	91	;'['
   660  006E1D  70                 	db	112	;'p'
   661  006E1E  61                 	db	97	;'a'
   662  006E1F  67                 	db	103	;'g'
   663  006E20  65                 	db	101	;'e'
   664  006E21  3A                 	db	58	;':'
   665  006E22  5D                 	db	93	;']'
   666  006E23  72                 	db	114	;'r'
   667  006E24  65                 	db	101	;'e'
   668  006E25  67                 	db	103	;'g'
   669  006E26  20                 	db	32
   670  006E27  63                 	db	99	;'c'
   671  006E28  6F                 	db	111	;'o'
   672  006E29  6E                 	db	110	;'n'
   673  006E2A  74                 	db	116	;'t'
   674  006E2B  65                 	db	101	;'e'
   675  006E2C  6E                 	db	110	;'n'
   676  006E2D  74                 	db	116	;'t'
   677  006E2E  29                 	db	41
   678  006E2F  2E                 	db	46
   679  006E30  0D                 	db	13
   680  006E31  0A                 	db	10
   681  006E32  00                 	db	0
   682  006E33                     STR_237:
   683  006E33  20                 	db	32
   684  006E34  20                 	db	32
   685  006E35  20                 	db	32
   686  006E36  20                 	db	32
   687  006E37  20                 	db	32
   688  006E38  20                 	db	32
   689  006E39  20                 	db	32
   690  006E3A  46                 	db	70	;'F'
   691  006E3B  6F                 	db	111	;'o'
   692  006E3C  72                 	db	114	;'r'
   693  006E3D  6D                 	db	109	;'m'
   694  006E3E  61                 	db	97	;'a'
   695  006E3F  74                 	db	116	;'t'
   696  006E40  3A                 	db	58	;':'
   697  006E41  20                 	db	32
   698  006E42  6D                 	db	109	;'m'
   699  006E43  61                 	db	97	;'a'
   700  006E44  73                 	db	115	;'s'
   701  006E45  6B                 	db	107	;'k'
   702  006E46  20                 	db	32
   703  006E47  6D                 	db	109	;'m'
   704  006E48  61                 	db	97	;'a'
   705  006E49  73                 	db	115	;'s'
   706  006E4A  6B                 	db	107	;'k'
   707  006E4B  6E                 	db	110	;'n'
   708  006E4C  6F                 	db	111	;'o'
   709  006E4D  2C                 	db	44
   710  006E4E  70                 	db	112	;'p'
   711  006E4F  72                 	db	114	;'r'
   712  006E50  69                 	db	105	;'i'
   713  006E51  6F                 	db	111	;'o'
   714  006E52  2C                 	db	44
   715  006E53  63                 	db	99	;'c'
   716  006E54  6C                 	db	108	;'l'
   717  006E55  61                 	db	97	;'a'
   718  006E56  73                 	db	115	;'s'
   719  006E57  73                 	db	115	;'s'
   720  006E58  2C                 	db	44
   721  006E59  74                 	db	116	;'t'
   722  006E5A  79                 	db	121	;'y'
   723  006E5B  70                 	db	112	;'p'
   724  006E5C  65                 	db	101	;'e'
   725  006E5D  2C                 	db	44
   726  006E5E  6E                 	db	110	;'n'
   727  006E5F  6F                 	db	111	;'o'
   728  006E60  64                 	db	100	;'d'
   729  006E61  65                 	db	101	;'e'
   730  006E62  69                 	db	105	;'i'
   731  006E63  64                 	db	100	;'d'
   732  006E64  20                 	db	32
   733  006E65  28                 	db	40
   734  006E66  6D                 	db	109	;'m'
   735  006E67  61                 	db	97	;'a'
   736  006E68  73                 	db	115	;'s'
   737  006E69  6B                 	db	107	;'k'
   738  006E6A  6E                 	db	110	;'n'
   739  006E6B  6F                 	db	111	;'o'
   740  006E6C  20                 	db	32
   741  006E6D  3D                 	db	61	;'='
   742  006E6E  20                 	db	32
   743  006E6F  30                 	db	48	;'0'
   744  006E70  20                 	db	32
   745  006E71  6F                 	db	111	;'o'
   746  006E72  72                 	db	114	;'r'
   747  006E73  20                 	db	32
   748  006E74  31                 	db	49	;'1'
   749  006E75  29                 	db	41
   750  006E76  2E                 	db	46
   751  006E77  0D                 	db	13
   752  006E78  0A                 	db	10
   753  006E79  00                 	db	0
   754  006E7A                     STR_246:
   755  006E7A  2D                 	db	45
   756  006E7B  2D                 	db	45
   757  006E7C  2D                 	db	45
   758  006E7D  2D                 	db	45
   759  006E7E  2D                 	db	45
   760  006E7F  2D                 	db	45
   761  006E80  2D                 	db	45
   762  006E81  2D                 	db	45
   763  006E82  2D                 	db	45
   764  006E83  2D                 	db	45
   765  006E84  2D                 	db	45
   766  006E85  2D                 	db	45
   767  006E86  2D                 	db	45
   768  006E87  2D                 	db	45
   769  006E88  2D                 	db	45
   770  006E89  2D                 	db	45
   771  006E8A  2D                 	db	45
   772  006E8B  2D                 	db	45
   773  006E8C  2D                 	db	45
   774  006E8D  2D                 	db	45
   775  006E8E  2D                 	db	45
   776  006E8F  2D                 	db	45
   777  006E90  2D                 	db	45
   778  006E91  2D                 	db	45
   779  006E92  2D                 	db	45
   780  006E93  2D                 	db	45
   781  006E94  2D                 	db	45
   782  006E95  2D                 	db	45
   783  006E96  2D                 	db	45
   784  006E97  2D                 	db	45
   785  006E98  2D                 	db	45
   786  006E99  2D                 	db	45
   787  006E9A  2D                 	db	45
   788  006E9B  2D                 	db	45
   789  006E9C  2D                 	db	45
   790  006E9D  2D                 	db	45
   791  006E9E  2D                 	db	45
   792  006E9F  2D                 	db	45
   793  006EA0  2D                 	db	45
   794  006EA1  2D                 	db	45
   795  006EA2  2D                 	db	45
   796  006EA3  2D                 	db	45
   797  006EA4  2D                 	db	45
   798  006EA5  2D                 	db	45
   799  006EA6  2D                 	db	45
   800  006EA7  2D                 	db	45
   801  006EA8  2D                 	db	45
   802  006EA9  2D                 	db	45
   803  006EAA  2D                 	db	45
   804  006EAB  2D                 	db	45
   805  006EAC  2D                 	db	45
   806  006EAD  2D                 	db	45
   807  006EAE  2D                 	db	45
   808  006EAF  2D                 	db	45
   809  006EB0  2D                 	db	45
   810  006EB1  2D                 	db	45
   811  006EB2  2D                 	db	45
   812  006EB3  2D                 	db	45
   813  006EB4  2D                 	db	45
   814  006EB5  2D                 	db	45
   815  006EB6  2D                 	db	45
   816  006EB7  2D                 	db	45
   817  006EB8  2D                 	db	45
   818  006EB9  2D                 	db	45
   819  006EBA  0D                 	db	13
   820  006EBB  0A                 	db	10
   821  006EBC  00                 	db	0
   822  006EBD                     STR_241:
   823  006EBD  20                 	db	32
   824  006EBE  20                 	db	32
   825  006EBF  20                 	db	32
   826  006EC0  20                 	db	32
   827  006EC1  52                 	db	82	;'R'
   828  006EC2  57                 	db	87	;'W'
   829  006EC3  54                 	db	84	;'T'
   830  006EC4  49                 	db	73	;'I'
   831  006EC5  4D                 	db	77	;'M'
   832  006EC6  45                 	db	69	;'E'
   833  006EC7  4F                 	db	79	;'O'
   834  006EC8  55                 	db	85	;'U'
   835  006EC9  54                 	db	84	;'T'
   836  006ECA  20                 	db	32
   837  006ECB  2D                 	db	45
   838  006ECC  20                 	db	32
   839  006ECD  53                 	db	83	;'S'
   840  006ECE  65                 	db	101	;'e'
   841  006ECF  74                 	db	116	;'t'
   842  006ED0  20                 	db	32
   843  006ED1  72                 	db	114	;'r'
   844  006ED2  65                 	db	101	;'e'
   845  006ED3  67                 	db	103	;'g'
   846  006ED4  69                 	db	105	;'i'
   847  006ED5  73                 	db	115	;'s'
   848  006ED6  74                 	db	116	;'t'
   849  006ED7  65                 	db	101	;'e'
   850  006ED8  72                 	db	114	;'r'
   851  006ED9  20                 	db	32
   852  006EDA  72                 	db	114	;'r'
   853  006EDB  65                 	db	101	;'e'
   854  006EDC  61                 	db	97	;'a'
   855  006EDD  64                 	db	100	;'d'
   856  006EDE  2F                 	db	47
   857  006EDF  77                 	db	119	;'w'
   858  006EE0  72                 	db	114	;'r'
   859  006EE1  69                 	db	105	;'i'
   860  006EE2  74                 	db	116	;'t'
   861  006EE3  65                 	db	101	;'e'
   862  006EE4  20                 	db	32
   863  006EE5  74                 	db	116	;'t'
   864  006EE6  69                 	db	105	;'i'
   865  006EE7  6D                 	db	109	;'m'
   866  006EE8  65                 	db	101	;'e'
   867  006EE9  6F                 	db	111	;'o'
   868  006EEA  75                 	db	117	;'u'
   869  006EEB  74                 	db	116	;'t'
   870  006EEC  2E                 	db	46
   871  006EED  20                 	db	32
   872  006EEE  44                 	db	68	;'D'
   873  006EEF  65                 	db	101	;'e'
   874  006EF0  66                 	db	102	;'f'
   875  006EF1  61                 	db	97	;'a'
   876  006EF2  75                 	db	117	;'u'
   877  006EF3  6C                 	db	108	;'l'
   878  006EF4  74                 	db	116	;'t'
   879  006EF5  3D                 	db	61	;'='
   880  006EF6  31                 	db	49	;'1'
   881  006EF7  30                 	db	48	;'0'
   882  006EF8  20                 	db	32
   883  006EF9  6D                 	db	109	;'m'
   884  006EFA  73                 	db	115	;'s'
   885  006EFB  20                 	db	32
   886  006EFC  2E                 	db	46
   887  006EFD  0D                 	db	13
   888  006EFE  0A                 	db	10
   889  006EFF  00                 	db	0
   890  006F00                     STR_97:
   891  006F00  2D                 	db	45
   892  006F01  45                 	db	69	;'E'
   893  006F02  52                 	db	82	;'R'
   894  006F03  52                 	db	82	;'R'
   895  006F04  4F                 	db	79	;'O'
   896  006F05  52                 	db	82	;'R'
   897  006F06  20                 	db	32
   898  006F07  2D                 	db	45
   899  006F08  20                 	db	32
   900  006F09  46                 	db	70	;'F'
   901  006F0A  69                 	db	105	;'i'
   902  006F0B  6C                 	db	108	;'l'
   903  006F0C  74                 	db	116	;'t'
   904  006F0D  65                 	db	101	;'e'
   905  006F0E  72                 	db	114	;'r'
   906  006F0F  20                 	db	32
   907  006F10  6E                 	db	110	;'n'
   908  006F11  75                 	db	117	;'u'
   909  006F12  6D                 	db	109	;'m'
   910  006F13  62                 	db	98	;'b'
   911  006F14  65                 	db	101	;'e'
   912  006F15  72                 	db	114	;'r'
   913  006F16  20                 	db	32
   914  006F17  63                 	db	99	;'c'
   915  006F18  61                 	db	97	;'a'
   916  006F19  6E                 	db	110	;'n'
   917  006F1A  20                 	db	32
   918  006F1B  6F                 	db	111	;'o'
   919  006F1C  6E                 	db	110	;'n'
   920  006F1D  6C                 	db	108	;'l'
   921  006F1E  79                 	db	121	;'y'
   922  006F1F  20                 	db	32
   923  006F20  62                 	db	98	;'b'
   924  006F21  65                 	db	101	;'e'
   925  006F22  20                 	db	32
   926  006F23  73                 	db	115	;'s'
   927  006F24  65                 	db	101	;'e'
   928  006F25  74                 	db	116	;'t'
   929  006F26  20                 	db	32
   930  006F27  74                 	db	116	;'t'
   931  006F28  6F                 	db	111	;'o'
   932  006F29  20                 	db	32
   933  006F2A  61                 	db	97	;'a'
   934  006F2B  20                 	db	32
   935  006F2C  76                 	db	118	;'v'
   936  006F2D  61                 	db	97	;'a'
   937  006F2E  6C                 	db	108	;'l'
   938  006F2F  75                 	db	117	;'u'
   939  006F30  65                 	db	101	;'e'
   940  006F31  20                 	db	32
   941  006F32  62                 	db	98	;'b'
   942  006F33  65                 	db	101	;'e'
   943  006F34  74                 	db	116	;'t'
   944  006F35  77                 	db	119	;'w'
   945  006F36  65                 	db	101	;'e'
   946  006F37  65                 	db	101	;'e'
   947  006F38  6E                 	db	110	;'n'
   948  006F39  20                 	db	32
   949  006F3A  30                 	db	48	;'0'
   950  006F3B  2D                 	db	45
   951  006F3C  31                 	db	49	;'1'
   952  006F3D  35                 	db	53	;'5'
   953  006F3E  2E                 	db	46
   954  006F3F  0D                 	db	13
   955  006F40  0A                 	db	10
   956  006F41  00                 	db	0
   957  006F42                     STR_244:
   958  006F42  20                 	db	32
   959  006F43  20                 	db	32
   960  006F44  20                 	db	32
   961  006F45  20                 	db	32
   962  006F46  4D                 	db	77	;'M'
   963  006F47  4F                 	db	79	;'O'
   964  006F48  44                 	db	68	;'D'
   965  006F49  45                 	db	69	;'E'
   966  006F4A  20                 	db	32
   967  006F4B  2D                 	db	45
   968  006F4C  20                 	db	32
   969  006F4D  53                 	db	83	;'S'
   970  006F4E  65                 	db	101	;'e'
   971  006F4F  74                 	db	116	;'t'
   972  006F50  20                 	db	32
   973  006F51  61                 	db	97	;'a'
   974  006F52  64                 	db	100	;'d'
   975  006F53  61                 	db	97	;'a'
   976  006F54  70                 	db	112	;'p'
   977  006F55  74                 	db	116	;'t'
   978  006F56  65                 	db	101	;'e'
   979  006F57  72                 	db	114	;'r'
   980  006F58  20                 	db	32
   981  006F59  6D                 	db	109	;'m'
   982  006F5A  6F                 	db	111	;'o'
   983  006F5B  64                 	db	100	;'d'
   984  006F5C  65                 	db	101	;'e'
   985  006F5D  20                 	db	32
   986  006F5E  74                 	db	116	;'t'
   987  006F5F  68                 	db	104	;'h'
   988  006F60  61                 	db	97	;'a'
   989  006F61  74                 	db	116	;'t'
   990  006F62  20                 	db	32
   991  006F63  73                 	db	115	;'s'
   992  006F64  68                 	db	104	;'h'
   993  006F65  6F                 	db	111	;'o'
   994  006F66  75                 	db	117	;'u'
   995  006F67  6C                 	db	108	;'l'
   996  006F68  64                 	db	100	;'d'
   997  006F69  20                 	db	32
   998  006F6A  62                 	db	98	;'b'
   999  006F6B  65                 	db	101	;'e'
  1000  006F6C  20                 	db	32
  1001  006F6D  75                 	db	117	;'u'
  1002  006F6E  73                 	db	115	;'s'
  1003  006F6F  65                 	db	101	;'e'
  1004  006F70  64                 	db	100	;'d'
  1005  006F71  20                 	db	32
  1006  006F72  6F                 	db	111	;'o'
  1007  006F73  6E                 	db	110	;'n'
  1008  006F74  20                 	db	32
  1009  006F75  73                 	db	115	;'s'
  1010  006F76  74                 	db	116	;'t'
  1011  006F77  61                 	db	97	;'a'
  1012  006F78  72                 	db	114	;'r'
  1013  006F79  74                 	db	116	;'t'
  1014  006F7A  75                 	db	117	;'u'
  1015  006F7B  70                 	db	112	;'p'
  1016  006F7C  2E                 	db	46
  1017  006F7D  0D                 	db	13
  1018  006F7E  0A                 	db	10
  1019  006F7F  00                 	db	0
  1020  006F80                     STR_204:
  1021  006F80  54                 	db	84	;'T'
  1022  006F81  72                 	db	114	;'r'
  1023  006F82  61                 	db	97	;'a'
  1024  006F83  6E                 	db	110	;'n'
  1025  006F84  73                 	db	115	;'s'
  1026  006F85  6D                 	db	109	;'m'
  1027  006F86  69                 	db	105	;'i'
  1028  006F87  74                 	db	116	;'t'
  1029  006F88  74                 	db	116	;'t'
  1030  006F89  65                 	db	101	;'e'
  1031  006F8A  72                 	db	114	;'r'
  1032  006F8B  20                 	db	32
  1033  006F8C  69                 	db	105	;'i'
  1034  006F8D  6E                 	db	110	;'n'
  1035  006F8E  20                 	db	32
  1036  006F8F  45                 	db	69	;'E'
  1037  006F90  72                 	db	114	;'r'
  1038  006F91  72                 	db	114	;'r'
  1039  006F92  6F                 	db	111	;'o'
  1040  006F93  72                 	db	114	;'r'
  1041  006F94  20                 	db	32
  1042  006F95  53                 	db	83	;'S'
  1043  006F96  74                 	db	116	;'t'
  1044  006F97  61                 	db	97	;'a'
  1045  006F98  74                 	db	116	;'t'
  1046  006F99  65                 	db	101	;'e'
  1047  006F9A  20                 	db	32
  1048  006F9B  57                 	db	87	;'W'
  1049  006F9C  61                 	db	97	;'a'
  1050  006F9D  72                 	db	114	;'r'
  1051  006F9E  6E                 	db	110	;'n'
  1052  006F9F  69                 	db	105	;'i'
  1053  006FA0  6E                 	db	110	;'n'
  1054  006FA1  67                 	db	103	;'g'
  1055  006FA2  20                 	db	32
  1056  006FA3  28                 	db	40
  1057  006FA4  31                 	db	49	;'1'
  1058  006FA5  32                 	db	50	;'2'
  1059  006FA6  38                 	db	56	;'8'
  1060  006FA7  20                 	db	32
  1061  006FA8  3E                 	db	62	;'>'
  1062  006FA9  20                 	db	32
  1063  006FAA  54                 	db	84	;'T'
  1064  006FAB  45                 	db	69	;'E'
  1065  006FAC  52                 	db	82	;'R'
  1066  006FAD  52                 	db	82	;'R'
  1067  006FAE  43                 	db	67	;'C'
  1068  006FAF  4E                 	db	78	;'N'
  1069  006FB0  54                 	db	84	;'T'
  1070  006FB1  20                 	db	32
  1071  006FB2  3F                 	db	63	;'?'
  1072  006FB3  20                 	db	32
  1073  006FB4  39                 	db	57	;'9'
  1074  006FB5  36                 	db	54	;'6'
  1075  006FB6  29                 	db	41
  1076  006FB7  0D                 	db	13
  1077  006FB8  0A                 	db	10
  1078  006FB9  00                 	db	0
  1079  006FBA                     STR_2:
  1080  006FBA  43                 	db	67	;'C'
  1081  006FBB  6F                 	db	111	;'o'
  1082  006FBC  70                 	db	112	;'p'
  1083  006FBD  79                 	db	121	;'y'
  1084  006FBE  72                 	db	114	;'r'
  1085  006FBF  69                 	db	105	;'i'
  1086  006FC0  67                 	db	103	;'g'
  1087  006FC1  68                 	db	104	;'h'
  1088  006FC2  74                 	db	116	;'t'
  1089  006FC3  20                 	db	32
  1090  006FC4  28                 	db	40
  1091  006FC5  43                 	db	67	;'C'
  1092  006FC6  29                 	db	41
  1093  006FC7  20                 	db	32
  1094  006FC8  32                 	db	50	;'2'
  1095  006FC9  30                 	db	48	;'0'
  1096  006FCA  31                 	db	49	;'1'
  1097  006FCB  34                 	db	52	;'4'
  1098  006FCC  2D                 	db	45
  1099  006FCD  32                 	db	50	;'2'
  1100  006FCE  30                 	db	48	;'0'
  1101  006FCF  31                 	db	49	;'1'
  1102  006FD0  35                 	db	53	;'5'
  1103  006FD1  20                 	db	32
  1104  006FD2  50                 	db	80	;'P'
  1105  006FD3  61                 	db	97	;'a'
  1106  006FD4  72                 	db	114	;'r'
  1107  006FD5  61                 	db	97	;'a'
  1108  006FD6  64                 	db	100	;'d'
  1109  006FD7  69                 	db	105	;'i'
  1110  006FD8  73                 	db	115	;'s'
  1111  006FD9  65                 	db	101	;'e'
  1112  006FDA  20                 	db	32
  1113  006FDB  6F                 	db	111	;'o'
  1114  006FDC  66                 	db	102	;'f'
  1115  006FDD  20                 	db	32
  1116  006FDE  74                 	db	116	;'t'
  1117  006FDF  68                 	db	104	;'h'
  1118  006FE0  65                 	db	101	;'e'
  1119  006FE1  20                 	db	32
  1120  006FE2  46                 	db	70	;'F'
  1121  006FE3  72                 	db	114	;'r'
  1122  006FE4  6F                 	db	111	;'o'
  1123  006FE5  67                 	db	103	;'g'
  1124  006FE6  20                 	db	32
  1125  006FE7  41                 	db	65	;'A'
  1126  006FE8  42                 	db	66	;'B'
  1127  006FE9  2C                 	db	44
  1128  006FEA  20                 	db	32
  1129  006FEB  53                 	db	83	;'S'
  1130  006FEC  77                 	db	119	;'w'
  1131  006FED  65                 	db	101	;'e'
  1132  006FEE  64                 	db	100	;'d'
  1133  006FEF  65                 	db	101	;'e'
  1134  006FF0  6E                 	db	110	;'n'
  1135  006FF1  0D                 	db	13
  1136  006FF2  0A                 	db	10
  1137  006FF3  00                 	db	0
  1138  006FF4                     STR_206:
  1139  006FF4  54                 	db	84	;'T'
  1140  006FF5  72                 	db	114	;'r'
  1141  006FF6  61                 	db	97	;'a'
  1142  006FF7  6E                 	db	110	;'n'
  1143  006FF8  73                 	db	115	;'s'
  1144  006FF9  6D                 	db	109	;'m'
  1145  006FFA  69                 	db	105	;'i'
  1146  006FFB  74                 	db	116	;'t'
  1147  006FFC  74                 	db	116	;'t'
  1148  006FFD  65                 	db	101	;'e'
  1149  006FFE  72                 	db	114	;'r'
  1150  006FFF  20                 	db	32
  1151  007000  69                 	db	105	;'i'
  1152  007001  6E                 	db	110	;'n'
  1153  007002  20                 	db	32
  1154  007003  45                 	db	69	;'E'
  1155  007004  72                 	db	114	;'r'
  1156  007005  72                 	db	114	;'r'
  1157  007006  6F                 	db	111	;'o'
  1158  007007  72                 	db	114	;'r'
  1159  007008  20                 	db	32
  1160  007009  53                 	db	83	;'S'
  1161  00700A  74                 	db	116	;'t'
  1162  00700B  61                 	db	97	;'a'
  1163  00700C  74                 	db	116	;'t'
  1164  00700D  65                 	db	101	;'e'
  1165  00700E  20                 	db	32
  1166  00700F  42                 	db	66	;'B'
  1167  007010  75                 	db	117	;'u'
  1168  007011  73                 	db	115	;'s'
  1169  007012  20                 	db	32
  1170  007013  50                 	db	80	;'P'
  1171  007014  61                 	db	97	;'a'
  1172  007015  73                 	db	115	;'s'
  1173  007016  73                 	db	115	;'s'
  1174  007017  69                 	db	105	;'i'
  1175  007018  76                 	db	118	;'v'
  1176  007019  65                 	db	101	;'e'
  1177  00701A  20                 	db	32
  1178  00701B  28                 	db	40
  1179  00701C  54                 	db	84	;'T'
  1180  00701D  45                 	db	69	;'E'
  1181  00701E  52                 	db	82	;'R'
  1182  00701F  52                 	db	82	;'R'
  1183  007020  43                 	db	67	;'C'
  1184  007021  4E                 	db	78	;'N'
  1185  007022  54                 	db	84	;'T'
  1186  007023  20                 	db	32
  1187  007024  3F                 	db	63	;'?'
  1188  007025  20                 	db	32
  1189  007026  31                 	db	49	;'1'
  1190  007027  32                 	db	50	;'2'
  1191  007028  38                 	db	56	;'8'
  1192  007029  29                 	db	41
  1193  00702A  0D                 	db	13
  1194  00702B  0A                 	db	10
  1195  00702C  00                 	db	0
  1196  00702D                     STR_225:
  1197  00702D  20                 	db	32
  1198  00702E  20                 	db	32
  1199  00702F  20                 	db	32
  1200  007030  20                 	db	32
  1201  007031  20                 	db	32
  1202  007032  46                 	db	70	;'F'
  1203  007033  6F                 	db	111	;'o'
  1204  007034  72                 	db	114	;'r'
  1205  007035  6D                 	db	109	;'m'
  1206  007036  61                 	db	97	;'a'
  1207  007037  74                 	db	116	;'t'
  1208  007038  3A                 	db	58	;':'
  1209  007039  20                 	db	32
  1210  00703A  70                 	db	112	;'p'
  1211  00703B  72                 	db	114	;'r'
  1212  00703C  69                 	db	105	;'i'
  1213  00703D  6F                 	db	111	;'o'
  1214  00703E  72                 	db	114	;'r'
  1215  00703F  69                 	db	105	;'i'
  1216  007040  74                 	db	116	;'t'
  1217  007041  79                 	db	121	;'y'
  1218  007042  2C                 	db	44
  1219  007043  63                 	db	99	;'c'
  1220  007044  6C                 	db	108	;'l'
  1221  007045  61                 	db	97	;'a'
  1222  007046  73                 	db	115	;'s'
  1223  007047  73                 	db	115	;'s'
  1224  007048  2C                 	db	44
  1225  007049  74                 	db	116	;'t'
  1226  00704A  79                 	db	121	;'y'
  1227  00704B  70                 	db	112	;'p'
  1228  00704C  65                 	db	101	;'e'
  1229  00704D  2C                 	db	44
  1230  00704E  6E                 	db	110	;'n'
  1231  00704F  6F                 	db	111	;'o'
  1232  007050  64                 	db	100	;'d'
  1233  007051  65                 	db	101	;'e'
  1234  007052  69                 	db	105	;'i'
  1235  007053  64                 	db	100	;'d'
  1236  007054  2C                 	db	44
  1237  007055  63                 	db	99	;'c'
  1238  007056  6F                 	db	111	;'o'
  1239  007057  75                 	db	117	;'u'
  1240  007058  6E                 	db	110	;'n'
  1241  007059  74                 	db	116	;'t'
  1242  00705A  2C                 	db	44
  1243  00705B  64                 	db	100	;'d'
  1244  00705C  61                 	db	97	;'a'
  1245  00705D  74                 	db	116	;'t'
  1246  00705E  61                 	db	97	;'a'
  1247  00705F  2C                 	db	44
  1248  007060  2C                 	db	44
  1249  007061  2C                 	db	44
  1250  007062  0D                 	db	13
  1251  007063  0A                 	db	10
  1252  007064  00                 	db	0
  1253  007065                     STR_211:
  1254  007065  52                 	db	82	;'R'
  1255  007066  65                 	db	101	;'e'
  1256  007067  63                 	db	99	;'c'
  1257  007068  65                 	db	101	;'e'
  1258  007069  69                 	db	105	;'i'
  1259  00706A  76                 	db	118	;'v'
  1260  00706B  65                 	db	101	;'e'
  1261  00706C  72                 	db	114	;'r'
  1262  00706D  20                 	db	32
  1263  00706E  69                 	db	105	;'i'
  1264  00706F  6E                 	db	110	;'n'
  1265  007070  20                 	db	32
  1266  007071  45                 	db	69	;'E'
  1267  007072  72                 	db	114	;'r'
  1268  007073  72                 	db	114	;'r'
  1269  007074  6F                 	db	111	;'o'
  1270  007075  72                 	db	114	;'r'
  1271  007076  20                 	db	32
  1272  007077  53                 	db	83	;'S'
  1273  007078  74                 	db	116	;'t'
  1274  007079  61                 	db	97	;'a'
  1275  00707A  74                 	db	116	;'t'
  1276  00707B  65                 	db	101	;'e'
  1277  00707C  20                 	db	32
  1278  00707D  57                 	db	87	;'W'
  1279  00707E  61                 	db	97	;'a'
  1280  00707F  72                 	db	114	;'r'
  1281  007080  6E                 	db	110	;'n'
  1282  007081  69                 	db	105	;'i'
  1283  007082  6E                 	db	110	;'n'
  1284  007083  67                 	db	103	;'g'
  1285  007084  20                 	db	32
  1286  007085  28                 	db	40
  1287  007086  31                 	db	49	;'1'
  1288  007087  32                 	db	50	;'2'
  1289  007088  38                 	db	56	;'8'
  1290  007089  20                 	db	32
  1291  00708A  3E                 	db	62	;'>'
  1292  00708B  20                 	db	32
  1293  00708C  52                 	db	82	;'R'
  1294  00708D  45                 	db	69	;'E'
  1295  00708E  52                 	db	82	;'R'
  1296  00708F  52                 	db	82	;'R'
  1297  007090  43                 	db	67	;'C'
  1298  007091  4E                 	db	78	;'N'
  1299  007092  54                 	db	84	;'T'
  1300  007093  20                 	db	32
  1301  007094  3F                 	db	63	;'?'
  1302  007095  20                 	db	32
  1303  007096  39                 	db	57	;'9'
  1304  007097  36                 	db	54	;'6'
  1305  007098  29                 	db	41
  1306  007099  0D                 	db	13
  1307  00709A  0A                 	db	10
  1308  00709B  00                 	db	0
  1309  00709C                     STR_243:
  1310  00709C  20                 	db	32
  1311  00709D  20                 	db	32
  1312  00709E  20                 	db	32
  1313  00709F  20                 	db	32
  1314  0070A0  53                 	db	83	;'S'
  1315  0070A1  54                 	db	84	;'T'
  1316  0070A2  41                 	db	65	;'A'
  1317  0070A3  52                 	db	82	;'R'
  1318  0070A4  54                 	db	84	;'T'
  1319  0070A5  49                 	db	73	;'I'
  1320  0070A6  46                 	db	70	;'F'
  1321  0070A7  20                 	db	32
  1322  0070A8  2D                 	db	45
  1323  0070A9  20                 	db	32
  1324  0070AA  53                 	db	83	;'S'
  1325  0070AB  65                 	db	101	;'e'
  1326  0070AC  74                 	db	116	;'t'
  1327  0070AD  20                 	db	32
  1328  0070AE  69                 	db	105	;'i'
  1329  0070AF  6E                 	db	110	;'n'
  1330  0070B0  74                 	db	116	;'t'
  1331  0070B1  65                 	db	101	;'e'
  1332  0070B2  72                 	db	114	;'r'
  1333  0070B3  66                 	db	102	;'f'
  1334  0070B4  61                 	db	97	;'a'
  1335  0070B5  63                 	db	99	;'c'
  1336  0070B6  65                 	db	101	;'e'
  1337  0070B7  20                 	db	32
  1338  0070B8  73                 	db	115	;'s'
  1339  0070B9  74                 	db	116	;'t'
  1340  0070BA  61                 	db	97	;'a'
  1341  0070BB  74                 	db	116	;'t'
  1342  0070BC  65                 	db	101	;'e'
  1343  0070BD  20                 	db	32
  1344  0070BE  74                 	db	116	;'t'
  1345  0070BF  6F                 	db	111	;'o'
  1346  0070C0  20                 	db	32
  1347  0070C1  75                 	db	117	;'u'
  1348  0070C2  73                 	db	115	;'s'
  1349  0070C3  65                 	db	101	;'e'
  1350  0070C4  20                 	db	32
  1351  0070C5  6F                 	db	111	;'o'
  1352  0070C6  6E                 	db	110	;'n'
  1353  0070C7  20                 	db	32
  1354  0070C8  73                 	db	115	;'s'
  1355  0070C9  74                 	db	116	;'t'
  1356  0070CA  61                 	db	97	;'a'
  1357  0070CB  72                 	db	114	;'r'
  1358  0070CC  74                 	db	116	;'t'
  1359  0070CD  75                 	db	117	;'u'
  1360  0070CE  70                 	db	112	;'p'
  1361  0070CF  2E                 	db	46
  1362  0070D0  0D                 	db	13
  1363  0070D1  0A                 	db	10
  1364  0070D2  00                 	db	0
  1365  0070D3                     STR_4:
  1366  0070D3  50                 	db	80	;'P'
  1367  0070D4  72                 	db	114	;'r'
  1368  0070D5  65                 	db	101	;'e'
  1369  0070D6  73                 	db	115	;'s'
  1370  0070D7  73                 	db	115	;'s'
  1371  0070D8  20                 	db	32
  1372  0070D9  27                 	db	39
  1373  0070DA  76                 	db	118	;'v'
  1374  0070DB  27                 	db	39
  1375  0070DC  20                 	db	32
  1376  0070DD  77                 	db	119	;'w'
  1377  0070DE  69                 	db	105	;'i'
  1378  0070DF  74                 	db	116	;'t'
  1379  0070E0  68                 	db	104	;'h'
  1380  0070E1  69                 	db	105	;'i'
  1381  0070E2  6E                 	db	110	;'n'
  1382  0070E3  20                 	db	32
  1383  0070E4  74                 	db	116	;'t'
  1384  0070E5  68                 	db	104	;'h'
  1385  0070E6  72                 	db	114	;'r'
  1386  0070E7  65                 	db	101	;'e'
  1387  0070E8  65                 	db	101	;'e'
  1388  0070E9  20                 	db	32
  1389  0070EA  73                 	db	115	;'s'
  1390  0070EB  65                 	db	101	;'e'
  1391  0070EC  63                 	db	99	;'c'
  1392  0070ED  6F                 	db	111	;'o'
  1393  0070EE  6E                 	db	110	;'n'
  1394  0070EF  64                 	db	100	;'d'
  1395  0070F0  73                 	db	115	;'s'
  1396  0070F1  20                 	db	32
  1397  0070F2  74                 	db	116	;'t'
  1398  0070F3  6F                 	db	111	;'o'
  1399  0070F4  20                 	db	32
  1400  0070F5  65                 	db	101	;'e'
  1401  0070F6  6E                 	db	110	;'n'
  1402  0070F7  74                 	db	116	;'t'
  1403  0070F8  65                 	db	101	;'e'
  1404  0070F9  72                 	db	114	;'r'
  1405  0070FA  20                 	db	32
  1406  0070FB  76                 	db	118	;'v'
  1407  0070FC  65                 	db	101	;'e'
  1408  0070FD  72                 	db	114	;'r'
  1409  0070FE  62                 	db	98	;'b'
  1410  0070FF  6F                 	db	111	;'o'
  1411  007100  73                 	db	115	;'s'
  1412  007101  65                 	db	101	;'e'
  1413  007102  20                 	db	32
  1414  007103  6D                 	db	109	;'m'
  1415  007104  6F                 	db	111	;'o'
  1416  007105  64                 	db	100	;'d'
  1417  007106  65                 	db	101	;'e'
  1418  007107  0D                 	db	13
  1419  007108  0A                 	db	10
  1420  007109  00                 	db	0
  1421  00710A                     STR_212:
  1422  00710A  52                 	db	82	;'R'
  1423  00710B  65                 	db	101	;'e'
  1424  00710C  63                 	db	99	;'c'
  1425  00710D  65                 	db	101	;'e'
  1426  00710E  69                 	db	105	;'i'
  1427  00710F  76                 	db	118	;'v'
  1428  007110  65                 	db	101	;'e'
  1429  007111  72                 	db	114	;'r'
  1430  007112  20                 	db	32
  1431  007113  69                 	db	105	;'i'
  1432  007114  6E                 	db	110	;'n'
  1433  007115  20                 	db	32
  1434  007116  45                 	db	69	;'E'
  1435  007117  72                 	db	114	;'r'
  1436  007118  72                 	db	114	;'r'
  1437  007119  6F                 	db	111	;'o'
  1438  00711A  72                 	db	114	;'r'
  1439  00711B  20                 	db	32
  1440  00711C  53                 	db	83	;'S'
  1441  00711D  74                 	db	116	;'t'
  1442  00711E  61                 	db	97	;'a'
  1443  00711F  74                 	db	116	;'t'
  1444  007120  65                 	db	101	;'e'
  1445  007121  20                 	db	32
  1446  007122  42                 	db	66	;'B'
  1447  007123  75                 	db	117	;'u'
  1448  007124  73                 	db	115	;'s'
  1449  007125  20                 	db	32
  1450  007126  50                 	db	80	;'P'
  1451  007127  61                 	db	97	;'a'
  1452  007128  73                 	db	115	;'s'
  1453  007129  73                 	db	115	;'s'
  1454  00712A  69                 	db	105	;'i'
  1455  00712B  76                 	db	118	;'v'
  1456  00712C  65                 	db	101	;'e'
  1457  00712D  20                 	db	32
  1458  00712E  28                 	db	40
  1459  00712F  52                 	db	82	;'R'
  1460  007130  45                 	db	69	;'E'
  1461  007131  52                 	db	82	;'R'
  1462  007132  52                 	db	82	;'R'
  1463  007133  43                 	db	67	;'C'
  1464  007134  4E                 	db	78	;'N'
  1465  007135  54                 	db	84	;'T'
  1466  007136  20                 	db	32
  1467  007137  3F                 	db	63	;'?'
  1468  007138  20                 	db	32
  1469  007139  31                 	db	49	;'1'
  1470  00713A  32                 	db	50	;'2'
  1471  00713B  38                 	db	56	;'8'
  1472  00713C  29                 	db	41
  1473  00713D  0D                 	db	13
  1474  00713E  0A                 	db	10
  1475  00713F  00                 	db	0
  1476  007140                     STR_79:
  1477  007140  2D                 	db	45
  1478  007141  45                 	db	69	;'E'
  1479  007142  52                 	db	82	;'R'
  1480  007143  52                 	db	82	;'R'
  1481  007144  4F                 	db	79	;'O'
  1482  007145  52                 	db	82	;'R'
  1483  007146  20                 	db	32
  1484  007147  2D                 	db	45
  1485  007148  20                 	db	32
  1486  007149  4F                 	db	79	;'O'
  1487  00714A  6E                 	db	110	;'n'
  1488  00714B  65                 	db	101	;'e'
  1489  00714C  20                 	db	32
  1490  00714D  6F                 	db	111	;'o'
  1491  00714E  72                 	db	114	;'r'
  1492  00714F  20                 	db	32
  1493  007150  6D                 	db	109	;'m'
  1494  007151  6F                 	db	111	;'o'
  1495  007152  72                 	db	114	;'r'
  1496  007153  65                 	db	101	;'e'
  1497  007154  20                 	db	32
  1498  007155  72                 	db	114	;'r'
  1499  007156  65                 	db	101	;'e'
  1500  007157  67                 	db	103	;'g'
  1501  007158  69                 	db	105	;'i'
  1502  007159  73                 	db	115	;'s'
  1503  00715A  74                 	db	116	;'t'
  1504  00715B  65                 	db	101	;'e'
  1505  00715C  72                 	db	114	;'r'
  1506  00715D  28                 	db	40
  1507  00715E  73                 	db	115	;'s'
  1508  00715F  29                 	db	41
  1509  007160  20                 	db	32
  1510  007161  63                 	db	99	;'c'
  1511  007162  6F                 	db	111	;'o'
  1512  007163  75                 	db	117	;'u'
  1513  007164  6C                 	db	108	;'l'
  1514  007165  64                 	db	100	;'d'
  1515  007166  20                 	db	32
  1516  007167  6E                 	db	110	;'n'
  1517  007168  6F                 	db	111	;'o'
  1518  007169  74                 	db	116	;'t'
  1519  00716A  20                 	db	32
  1520  00716B  62                 	db	98	;'b'
  1521  00716C  65                 	db	101	;'e'
  1522  00716D  20                 	db	32
  1523  00716E  72                 	db	114	;'r'
  1524  00716F  65                 	db	101	;'e'
  1525  007170  61                 	db	97	;'a'
  1526  007171  64                 	db	100	;'d'
  1527  007172  2E                 	db	46
  1528  007173  0D                 	db	13
  1529  007174  0A                 	db	10
  1530  007175  00                 	db	0
  1531  007176                     STR_205:
  1532  007176  54                 	db	84	;'T'
  1533  007177  72                 	db	114	;'r'
  1534  007178  61                 	db	97	;'a'
  1535  007179  6E                 	db	110	;'n'
  1536  00717A  73                 	db	115	;'s'
  1537  00717B  6D                 	db	109	;'m'
  1538  00717C  69                 	db	105	;'i'
  1539  00717D  74                 	db	116	;'t'
  1540  00717E  74                 	db	116	;'t'
  1541  00717F  65                 	db	101	;'e'
  1542  007180  72                 	db	114	;'r'
  1543  007181  20                 	db	32
  1544  007182  69                 	db	105	;'i'
  1545  007183  6E                 	db	110	;'n'
  1546  007184  20                 	db	32
  1547  007185  45                 	db	69	;'E'
  1548  007186  72                 	db	114	;'r'
  1549  007187  72                 	db	114	;'r'
  1550  007188  6F                 	db	111	;'o'
  1551  007189  72                 	db	114	;'r'
  1552  00718A  20                 	db	32
  1553  00718B  53                 	db	83	;'S'
  1554  00718C  74                 	db	116	;'t'
  1555  00718D  61                 	db	97	;'a'
  1556  00718E  74                 	db	116	;'t'
  1557  00718F  65                 	db	101	;'e'
  1558  007190  20                 	db	32
  1559  007191  42                 	db	66	;'B'
  1560  007192  75                 	db	117	;'u'
  1561  007193  73                 	db	115	;'s'
  1562  007194  20                 	db	32
  1563  007195  4F                 	db	79	;'O'
  1564  007196  46                 	db	70	;'F'
  1565  007197  46                 	db	70	;'F'
  1566  007198  20                 	db	32
  1567  007199  28                 	db	40
  1568  00719A  54                 	db	84	;'T'
  1569  00719B  45                 	db	69	;'E'
  1570  00719C  52                 	db	82	;'R'
  1571  00719D  52                 	db	82	;'R'
  1572  00719E  43                 	db	67	;'C'
  1573  00719F  4E                 	db	78	;'N'
  1574  0071A0  54                 	db	84	;'T'
  1575  0071A1  20                 	db	32
  1576  0071A2  3F                 	db	63	;'?'
  1577  0071A3  20                 	db	32
  1578  0071A4  32                 	db	50	;'2'
  1579  0071A5  35                 	db	53	;'5'
  1580  0071A6  36                 	db	54	;'6'
  1581  0071A7  29                 	db	41
  1582  0071A8  0D                 	db	13
  1583  0071A9  0A                 	db	10
  1584  0071AA  00                 	db	0
  1585  0071AB                     STR_213:
  1586  0071AB  54                 	db	84	;'T'
  1587  0071AC  72                 	db	114	;'r'
  1588  0071AD  61                 	db	97	;'a'
  1589  0071AE  6E                 	db	110	;'n'
  1590  0071AF  73                 	db	115	;'s'
  1591  0071B0  6D                 	db	109	;'m'
  1592  0071B1  69                 	db	105	;'i'
  1593  0071B2  74                 	db	116	;'t'
  1594  0071B3  74                 	db	116	;'t'
  1595  0071B4  65                 	db	101	;'e'
  1596  0071B5  72                 	db	114	;'r'
  1597  0071B6  20                 	db	32
  1598  0071B7  6F                 	db	111	;'o'
  1599  0071B8  72                 	db	114	;'r'
  1600  0071B9  20                 	db	32
  1601  0071BA  52                 	db	82	;'R'
  1602  0071BB  65                 	db	101	;'e'
  1603  0071BC  63                 	db	99	;'c'
  1604  0071BD  65                 	db	101	;'e'
  1605  0071BE  69                 	db	105	;'i'
  1606  0071BF  76                 	db	118	;'v'
  1607  0071C0  65                 	db	101	;'e'
  1608  0071C1  72                 	db	114	;'r'
  1609  0071C2  20                 	db	32
  1610  0071C3  69                 	db	105	;'i'
  1611  0071C4  73                 	db	115	;'s'
  1612  0071C5  20                 	db	32
  1613  0071C6  69                 	db	105	;'i'
  1614  0071C7  6E                 	db	110	;'n'
  1615  0071C8  20                 	db	32
  1616  0071C9  45                 	db	69	;'E'
  1617  0071CA  72                 	db	114	;'r'
  1618  0071CB  72                 	db	114	;'r'
  1619  0071CC  6F                 	db	111	;'o'
  1620  0071CD  72                 	db	114	;'r'
  1621  0071CE  20                 	db	32
  1622  0071CF  53                 	db	83	;'S'
  1623  0071D0  74                 	db	116	;'t'
  1624  0071D1  61                 	db	97	;'a'
  1625  0071D2  74                 	db	116	;'t'
  1626  0071D3  65                 	db	101	;'e'
  1627  0071D4  20                 	db	32
  1628  0071D5  57                 	db	87	;'W'
  1629  0071D6  61                 	db	97	;'a'
  1630  0071D7  72                 	db	114	;'r'
  1631  0071D8  6E                 	db	110	;'n'
  1632  0071D9  69                 	db	105	;'i'
  1633  0071DA  6E                 	db	110	;'n'
  1634  0071DB  67                 	db	103	;'g'
  1635  0071DC  0D                 	db	13
  1636  0071DD  0A                 	db	10
  1637  0071DE  00                 	db	0
  1638  0071DF                     STR_219:
  1639  0071DF  4C                 	db	76	;'L'
  1640  0071E0  49                 	db	73	;'I'
  1641  0071E1  53                 	db	83	;'S'
  1642  0071E2  54                 	db	84	;'T'
  1643  0071E3  45                 	db	69	;'E'
  1644  0071E4  4E                 	db	78	;'N'
  1645  0071E5  20                 	db	32
  1646  0071E6  2D                 	db	45
  1647  0071E7  20                 	db	32
  1648  0071E8  4F                 	db	79	;'O'
  1649  0071E9  70                 	db	112	;'p'
  1650  0071EA  65                 	db	101	;'e'
  1651  0071EB  6E                 	db	110	;'n'
  1652  0071EC  20                 	db	32
  1653  0071ED  43                 	db	67	;'C'
  1654  0071EE  41                 	db	65	;'A'
  1655  0071EF  4E                 	db	78	;'N'
  1656  0071F0  20                 	db	32
  1657  0071F1  69                 	db	105	;'i'
  1658  0071F2  6E                 	db	110	;'n'
  1659  0071F3  74                 	db	116	;'t'
  1660  0071F4  65                 	db	101	;'e'
  1661  0071F5  72                 	db	114	;'r'
  1662  0071F6  66                 	db	102	;'f'
  1663  0071F7  61                 	db	97	;'a'
  1664  0071F8  63                 	db	99	;'c'
  1665  0071F9  65                 	db	101	;'e'
  1666  0071FA  20                 	db	32
  1667  0071FB  69                 	db	105	;'i'
  1668  0071FC  6E                 	db	110	;'n'
  1669  0071FD  20                 	db	32
  1670  0071FE  6C                 	db	108	;'l'
  1671  0071FF  69                 	db	105	;'i'
  1672  007200  73                 	db	115	;'s'
  1673  007201  74                 	db	116	;'t'
  1674  007202  65                 	db	101	;'e'
  1675  007203  6E                 	db	110	;'n'
  1676  007204  20                 	db	32
  1677  007205  6F                 	db	111	;'o'
  1678  007206  6E                 	db	110	;'n'
  1679  007207  6C                 	db	108	;'l'
  1680  007208  79                 	db	121	;'y'
  1681  007209  20                 	db	32
  1682  00720A  6D                 	db	109	;'m'
  1683  00720B  6F                 	db	111	;'o'
  1684  00720C  64                 	db	100	;'d'
  1685  00720D  65                 	db	101	;'e'
  1686  00720E  2E                 	db	46
  1687  00720F  0D                 	db	13
  1688  007210  0A                 	db	10
  1689  007211  00                 	db	0
  1690  007212                     STR_110:
  1691  007212  2D                 	db	45
  1692  007213  45                 	db	69	;'E'
  1693  007214  52                 	db	82	;'R'
  1694  007215  52                 	db	82	;'R'
  1695  007216  4F                 	db	79	;'O'
  1696  007217  52                 	db	82	;'R'
  1697  007218  20                 	db	32
  1698  007219  2D                 	db	45
  1699  00721A  20                 	db	32
  1700  00721B  4D                 	db	77	;'M'
  1701  00721C  61                 	db	97	;'a'
  1702  00721D  73                 	db	115	;'s'
  1703  00721E  6B                 	db	107	;'k'
  1704  00721F  20                 	db	32
  1705  007220  6E                 	db	110	;'n'
  1706  007221  75                 	db	117	;'u'
  1707  007222  6D                 	db	109	;'m'
  1708  007223  62                 	db	98	;'b'
  1709  007224  65                 	db	101	;'e'
  1710  007225  72                 	db	114	;'r'
  1711  007226  20                 	db	32
  1712  007227  63                 	db	99	;'c'
  1713  007228  61                 	db	97	;'a'
  1714  007229  6E                 	db	110	;'n'
  1715  00722A  20                 	db	32
  1716  00722B  6F                 	db	111	;'o'
  1717  00722C  6E                 	db	110	;'n'
  1718  00722D  6C                 	db	108	;'l'
  1719  00722E  79                 	db	121	;'y'
  1720  00722F  20                 	db	32
  1721  007230  62                 	db	98	;'b'
  1722  007231  65                 	db	101	;'e'
  1723  007232  20                 	db	32
  1724  007233  73                 	db	115	;'s'
  1725  007234  65                 	db	101	;'e'
  1726  007235  74                 	db	116	;'t'
  1727  007236  20                 	db	32
  1728  007237  61                 	db	97	;'a'
  1729  007238  73                 	db	115	;'s'
  1730  007239  20                 	db	32
  1731  00723A  30                 	db	48	;'0'
  1732  00723B  20                 	db	32
  1733  00723C  6F                 	db	111	;'o'
  1734  00723D  72                 	db	114	;'r'
  1735  00723E  20                 	db	32
  1736  00723F  31                 	db	49	;'1'
  1737  007240  2E                 	db	46
  1738  007241  0D                 	db	13
  1739  007242  0A                 	db	10
  1740  007243  00                 	db	0
  1741  007244                     STR_220:
  1742  007244  4C                 	db	76	;'L'
  1743  007245  4F                 	db	79	;'O'
  1744  007246  4F                 	db	79	;'O'
  1745  007247  50                 	db	80	;'P'
  1746  007248  42                 	db	66	;'B'
  1747  007249  41                 	db	65	;'A'
  1748  00724A  43                 	db	67	;'C'
  1749  00724B  4B                 	db	75	;'K'
  1750  00724C  20                 	db	32
  1751  00724D  2D                 	db	45
  1752  00724E  20                 	db	32
  1753  00724F  4F                 	db	79	;'O'
  1754  007250  70                 	db	112	;'p'
  1755  007251  65                 	db	101	;'e'
  1756  007252  6E                 	db	110	;'n'
  1757  007253  20                 	db	32
  1758  007254  43                 	db	67	;'C'
  1759  007255  41                 	db	65	;'A'
  1760  007256  4E                 	db	78	;'N'
  1761  007257  20                 	db	32
  1762  007258  69                 	db	105	;'i'
  1763  007259  6E                 	db	110	;'n'
  1764  00725A  74                 	db	116	;'t'
  1765  00725B  65                 	db	101	;'e'
  1766  00725C  72                 	db	114	;'r'
  1767  00725D  66                 	db	102	;'f'
  1768  00725E  61                 	db	97	;'a'
  1769  00725F  63                 	db	99	;'c'
  1770  007260  65                 	db	101	;'e'
  1771  007261  20                 	db	32
  1772  007262  69                 	db	105	;'i'
  1773  007263  6E                 	db	110	;'n'
  1774  007264  20                 	db	32
  1775  007265  6C                 	db	108	;'l'
  1776  007266  6F                 	db	111	;'o'
  1777  007267  6F                 	db	111	;'o'
  1778  007268  70                 	db	112	;'p'
  1779  007269  62                 	db	98	;'b'
  1780  00726A  61                 	db	97	;'a'
  1781  00726B  63                 	db	99	;'c'
  1782  00726C  6B                 	db	107	;'k'
  1783  00726D  20                 	db	32
  1784  00726E  6D                 	db	109	;'m'
  1785  00726F  6F                 	db	111	;'o'
  1786  007270  64                 	db	100	;'d'
  1787  007271  65                 	db	101	;'e'
  1788  007272  2E                 	db	46
  1789  007273  0D                 	db	13
  1790  007274  0A                 	db	10
  1791  007275  00                 	db	0
  1792  007276                     STR_222:
  1793  007276  56                 	db	86	;'V'
  1794  007277  45                 	db	69	;'E'
  1795  007278  52                 	db	82	;'R'
  1796  007279  53                 	db	83	;'S'
  1797  00727A  49                 	db	73	;'I'
  1798  00727B  4F                 	db	79	;'O'
  1799  00727C  4E                 	db	78	;'N'
  1800  00727D  20                 	db	32
  1801  00727E  2D                 	db	45
  1802  00727F  20                 	db	32
  1803  007280  44                 	db	68	;'D'
  1804  007281  69                 	db	105	;'i'
  1805  007282  73                 	db	115	;'s'
  1806  007283  70                 	db	112	;'p'
  1807  007284  6C                 	db	108	;'l'
  1808  007285  61                 	db	97	;'a'
  1809  007286  79                 	db	121	;'y'
  1810  007287  20                 	db	32
  1811  007288  66                 	db	102	;'f'
  1812  007289  69                 	db	105	;'i'
  1813  00728A  72                 	db	114	;'r'
  1814  00728B  6D                 	db	109	;'m'
  1815  00728C  77                 	db	119	;'w'
  1816  00728D  61                 	db	97	;'a'
  1817  00728E  72                 	db	114	;'r'
  1818  00728F  65                 	db	101	;'e'
  1819  007290  20                 	db	32
  1820  007291  76                 	db	118	;'v'
  1821  007292  65                 	db	101	;'e'
  1822  007293  72                 	db	114	;'r'
  1823  007294  73                 	db	115	;'s'
  1824  007295  69                 	db	105	;'i'
  1825  007296  6F                 	db	111	;'o'
  1826  007297  6E                 	db	110	;'n'
  1827  007298  20                 	db	32
  1828  007299  69                 	db	105	;'i'
  1829  00729A  6E                 	db	110	;'n'
  1830  00729B  66                 	db	102	;'f'
  1831  00729C  6F                 	db	111	;'o'
  1832  00729D  72                 	db	114	;'r'
  1833  00729E  6D                 	db	109	;'m'
  1834  00729F  61                 	db	97	;'a'
  1835  0072A0  74                 	db	116	;'t'
  1836  0072A1  69                 	db	105	;'i'
  1837  0072A2  6F                 	db	111	;'o'
  1838  0072A3  6E                 	db	110	;'n'
  1839  0072A4  2E                 	db	46
  1840  0072A5  0D                 	db	13
  1841  0072A6  0A                 	db	10
  1842  0072A7  00                 	db	0
  1843  0072A8                     STR_242:
  1844  0072A8  20                 	db	32
  1845  0072A9  20                 	db	32
  1846  0072AA  20                 	db	32
  1847  0072AB  20                 	db	32
  1848  0072AC  20                 	db	32
  1849  0072AD  20                 	db	32
  1850  0072AE  20                 	db	32
  1851  0072AF  20                 	db	32
  1852  0072B0  20                 	db	32
  1853  0072B1  20                 	db	32
  1854  0072B2  20                 	db	32
  1855  0072B3  20                 	db	32
  1856  0072B4  20                 	db	32
  1857  0072B5  20                 	db	32
  1858  0072B6  20                 	db	32
  1859  0072B7  20                 	db	32
  1860  0072B8  46                 	db	70	;'F'
  1861  0072B9  6F                 	db	111	;'o'
  1862  0072BA  72                 	db	114	;'r'
  1863  0072BB  6D                 	db	109	;'m'
  1864  0072BC  61                 	db	97	;'a'
  1865  0072BD  74                 	db	116	;'t'
  1866  0072BE  3A                 	db	58	;':'
  1867  0072BF  20                 	db	32
  1868  0072C0  73                 	db	115	;'s'
  1869  0072C1  65                 	db	101	;'e'
  1870  0072C2  74                 	db	116	;'t'
  1871  0072C3  20                 	db	32
  1872  0072C4  72                 	db	114	;'r'
  1873  0072C5  77                 	db	119	;'w'
  1874  0072C6  74                 	db	116	;'t'
  1875  0072C7  69                 	db	105	;'i'
  1876  0072C8  6D                 	db	109	;'m'
  1877  0072C9  65                 	db	101	;'e'
  1878  0072CA  6F                 	db	111	;'o'
  1879  0072CB  75                 	db	117	;'u'
  1880  0072CC  74                 	db	116	;'t'
  1881  0072CD  20                 	db	32
  1882  0072CE  74                 	db	116	;'t'
  1883  0072CF  69                 	db	105	;'i'
  1884  0072D0  6D                 	db	109	;'m'
  1885  0072D1  65                 	db	101	;'e'
  1886  0072D2  6F                 	db	111	;'o'
  1887  0072D3  75                 	db	117	;'u'
  1888  0072D4  74                 	db	116	;'t'
  1889  0072D5  2E                 	db	46
  1890  0072D6  0D                 	db	13
  1891  0072D7  0A                 	db	10
  1892  0072D8  00                 	db	0
  1893  0072D9                     STR_240:
  1894  0072D9  20                 	db	32
  1895  0072DA  20                 	db	32
  1896  0072DB  20                 	db	32
  1897  0072DC  20                 	db	32
  1898  0072DD  44                 	db	68	;'D'
  1899  0072DE  45                 	db	69	;'E'
  1900  0072DF  43                 	db	67	;'C'
  1901  0072E0  49                 	db	73	;'I'
  1902  0072E1  4D                 	db	77	;'M'
  1903  0072E2  41                 	db	65	;'A'
  1904  0072E3  4C                 	db	76	;'L'
  1905  0072E4  20                 	db	32
  1906  0072E5  2D                 	db	45
  1907  0072E6  20                 	db	32
  1908  0072E7  44                 	db	68	;'D'
  1909  0072E8  69                 	db	105	;'i'
  1910  0072E9  73                 	db	115	;'s'
  1911  0072EA  70                 	db	112	;'p'
  1912  0072EB  6C                 	db	108	;'l'
  1913  0072EC  61                 	db	97	;'a'
  1914  0072ED  79                 	db	121	;'y'
  1915  0072EE  20                 	db	32
  1916  0072EF  6E                 	db	110	;'n'
  1917  0072F0  75                 	db	117	;'u'
  1918  0072F1  6D                 	db	109	;'m'
  1919  0072F2  65                 	db	101	;'e'
  1920  0072F3  72                 	db	114	;'r'
  1921  0072F4  69                 	db	105	;'i'
  1922  0072F5  63                 	db	99	;'c'
  1923  0072F6  61                 	db	97	;'a'
  1924  0072F7  6C                 	db	108	;'l'
  1925  0072F8  73                 	db	115	;'s'
  1926  0072F9  20                 	db	32
  1927  0072FA  69                 	db	105	;'i'
  1928  0072FB  6E                 	db	110	;'n'
  1929  0072FC  20                 	db	32
  1930  0072FD  64                 	db	100	;'d'
  1931  0072FE  65                 	db	101	;'e'
  1932  0072FF  63                 	db	99	;'c'
  1933  007300  69                 	db	105	;'i'
  1934  007301  6D                 	db	109	;'m'
  1935  007302  61                 	db	97	;'a'
  1936  007303  6C                 	db	108	;'l'
  1937  007304  2E                 	db	46
  1938  007305  0D                 	db	13
  1939  007306  0A                 	db	10
  1940  007307  00                 	db	0
  1941  007308                     STR_239:
  1942  007308  20                 	db	32
  1943  007309  20                 	db	32
  1944  00730A  20                 	db	32
  1945  00730B  20                 	db	32
  1946  00730C  48                 	db	72	;'H'
  1947  00730D  45                 	db	69	;'E'
  1948  00730E  58                 	db	88	;'X'
  1949  00730F  20                 	db	32
  1950  007310  2D                 	db	45
  1951  007311  20                 	db	32
  1952  007312  44                 	db	68	;'D'
  1953  007313  69                 	db	105	;'i'
  1954  007314  73                 	db	115	;'s'
  1955  007315  70                 	db	112	;'p'
  1956  007316  6C                 	db	108	;'l'
  1957  007317  61                 	db	97	;'a'
  1958  007318  79                 	db	121	;'y'
  1959  007319  20                 	db	32
  1960  00731A  6E                 	db	110	;'n'
  1961  00731B  75                 	db	117	;'u'
  1962  00731C  6D                 	db	109	;'m'
  1963  00731D  65                 	db	101	;'e'
  1964  00731E  72                 	db	114	;'r'
  1965  00731F  69                 	db	105	;'i'
  1966  007320  63                 	db	99	;'c'
  1967  007321  61                 	db	97	;'a'
  1968  007322  6C                 	db	108	;'l'
  1969  007323  73                 	db	115	;'s'
  1970  007324  20                 	db	32
  1971  007325  69                 	db	105	;'i'
  1972  007326  6E                 	db	110	;'n'
  1973  007327  20                 	db	32
  1974  007328  68                 	db	104	;'h'
  1975  007329  65                 	db	101	;'e'
  1976  00732A  78                 	db	120	;'x'
  1977  00732B  61                 	db	97	;'a'
  1978  00732C  64                 	db	100	;'d'
  1979  00732D  65                 	db	101	;'e'
  1980  00732E  63                 	db	99	;'c'
  1981  00732F  69                 	db	105	;'i'
  1982  007330  6D                 	db	109	;'m'
  1983  007331  61                 	db	97	;'a'
  1984  007332  6C                 	db	108	;'l'
  1985  007333  2E                 	db	46
  1986  007334  0D                 	db	13
  1987  007335  0A                 	db	10
  1988  007336  00                 	db	0
  1989  007337                     STR_230:
  1990  007337  46                 	db	70	;'F'
  1991  007338  49                 	db	73	;'I'
  1992  007339  4E                 	db	78	;'N'
  1993  00733A  44                 	db	68	;'D'
  1994  00733B  20                 	db	32
  1995  00733C  2D                 	db	45
  1996  00733D  20                 	db	32
  1997  00733E  46                 	db	70	;'F'
  1998  00733F  69                 	db	105	;'i'
  1999  007340  6E                 	db	110	;'n'
  2000  007341  64                 	db	100	;'d'
  2001  007342  20                 	db	32
  2002  007343  61                 	db	97	;'a'
  2003  007344  76                 	db	118	;'v'
  2004  007345  61                 	db	97	;'a'
  2005  007346  69                 	db	105	;'i'
  2006  007347  6C                 	db	108	;'l'
  2007  007348  61                 	db	97	;'a'
  2008  007349  62                 	db	98	;'b'
  2009  00734A  6C                 	db	108	;'l'
  2010  00734B  65                 	db	101	;'e'
  2011  00734C  20                 	db	32
  2012  00734D  43                 	db	67	;'C'
  2013  00734E  41                 	db	65	;'A'
  2014  00734F  4E                 	db	78	;'N'
  2015  007350  34                 	db	52	;'4'
  2016  007351  56                 	db	86	;'V'
  2017  007352  53                 	db	83	;'S'
  2018  007353  43                 	db	67	;'C'
  2019  007354  50                 	db	80	;'P'
  2020  007355  20                 	db	32
  2021  007356  6E                 	db	110	;'n'
  2022  007357  6F                 	db	111	;'o'
  2023  007358  64                 	db	100	;'d'
  2024  007359  65                 	db	101	;'e'
  2025  00735A  73                 	db	115	;'s'
  2026  00735B  20                 	db	32
  2027  00735C  6F                 	db	111	;'o'
  2028  00735D  6E                 	db	110	;'n'
  2029  00735E  20                 	db	32
  2030  00735F  62                 	db	98	;'b'
  2031  007360  75                 	db	117	;'u'
  2032  007361  73                 	db	115	;'s'
  2033  007362  2E                 	db	46
  2034  007363  0D                 	db	13
  2035  007364  0A                 	db	10
  2036  007365  00                 	db	0
  2037  007366                     STR_218:
  2038  007366  53                 	db	83	;'S'
  2039  007367  49                 	db	73	;'I'
  2040  007368  4C                 	db	76	;'L'
  2041  007369  45                 	db	69	;'E'
  2042  00736A  4E                 	db	78	;'N'
  2043  00736B  54                 	db	84	;'T'
  2044  00736C  20                 	db	32
  2045  00736D  2D                 	db	45
  2046  00736E  20                 	db	32
  2047  00736F  4F                 	db	79	;'O'
  2048  007370  70                 	db	112	;'p'
  2049  007371  65                 	db	101	;'e'
  2050  007372  6E                 	db	110	;'n'
  2051  007373  20                 	db	32
  2052  007374  43                 	db	67	;'C'
  2053  007375  41                 	db	65	;'A'
  2054  007376  4E                 	db	78	;'N'
  2055  007377  20                 	db	32
  2056  007378  69                 	db	105	;'i'
  2057  007379  6E                 	db	110	;'n'
  2058  00737A  74                 	db	116	;'t'
  2059  00737B  65                 	db	101	;'e'
  2060  00737C  72                 	db	114	;'r'
  2061  00737D  66                 	db	102	;'f'
  2062  00737E  61                 	db	97	;'a'
  2063  00737F  63                 	db	99	;'c'
  2064  007380  65                 	db	101	;'e'
  2065  007381  20                 	db	32
  2066  007382  69                 	db	105	;'i'
  2067  007383  6E                 	db	110	;'n'
  2068  007384  20                 	db	32
  2069  007385  73                 	db	115	;'s'
  2070  007386  69                 	db	105	;'i'
  2071  007387  6C                 	db	108	;'l'
  2072  007388  65                 	db	101	;'e'
  2073  007389  6E                 	db	110	;'n'
  2074  00738A  74                 	db	116	;'t'
  2075  00738B  20                 	db	32
  2076  00738C  6D                 	db	109	;'m'
  2077  00738D  6F                 	db	111	;'o'
  2078  00738E  64                 	db	100	;'d'
  2079  00738F  65                 	db	101	;'e'
  2080  007390  2E                 	db	46
  2081  007391  0D                 	db	13
  2082  007392  0A                 	db	10
  2083  007393  00                 	db	0
  2084  007394                     STR_223:
  2085  007394  49                 	db	73	;'I'
  2086  007395  46                 	db	70	;'F'
  2087  007396  4D                 	db	77	;'M'
  2088  007397  4F                 	db	79	;'O'
  2089  007398  44                 	db	68	;'D'
  2090  007399  45                 	db	69	;'E'
  2091  00739A  20                 	db	32
  2092  00739B  2D                 	db	45
  2093  00739C  20                 	db	32
  2094  00739D  44                 	db	68	;'D'
  2095  00739E  69                 	db	105	;'i'
  2096  00739F  73                 	db	115	;'s'
  2097  0073A0  70                 	db	112	;'p'
  2098  0073A1  6C                 	db	108	;'l'
  2099  0073A2  61                 	db	97	;'a'
  2100  0073A3  79                 	db	121	;'y'
  2101  0073A4  20                 	db	32
  2102  0073A5  73                 	db	115	;'s'
  2103  0073A6  65                 	db	101	;'e'
  2104  0073A7  6C                 	db	108	;'l'
  2105  0073A8  65                 	db	101	;'e'
  2106  0073A9  63                 	db	99	;'c'
  2107  0073AA  74                 	db	116	;'t'
  2108  0073AB  65                 	db	101	;'e'
  2109  0073AC  64                 	db	100	;'d'
  2110  0073AD  20                 	db	32
  2111  0073AE  69                 	db	105	;'i'
  2112  0073AF  6E                 	db	110	;'n'
  2113  0073B0  74                 	db	116	;'t'
  2114  0073B1  65                 	db	101	;'e'
  2115  0073B2  72                 	db	114	;'r'
  2116  0073B3  66                 	db	102	;'f'
  2117  0073B4  61                 	db	97	;'a'
  2118  0073B5  63                 	db	99	;'c'
  2119  0073B6  65                 	db	101	;'e'
  2120  0073B7  20                 	db	32
  2121  0073B8  6D                 	db	109	;'m'
  2122  0073B9  6F                 	db	111	;'o'
  2123  0073BA  64                 	db	100	;'d'
  2124  0073BB  65                 	db	101	;'e'
  2125  0073BC  2E                 	db	46
  2126  0073BD  0D                 	db	13
  2127  0073BE  0A                 	db	10
  2128  0073BF  00                 	db	0
  2129  0073C0                     STR_217:
  2130  0073C0  4F                 	db	79	;'O'
  2131  0073C1  50                 	db	80	;'P'
  2132  0073C2  45                 	db	69	;'E'
  2133  0073C3  4E                 	db	78	;'N'
  2134  0073C4  20                 	db	32
  2135  0073C5  2D                 	db	45
  2136  0073C6  20                 	db	32
  2137  0073C7  4F                 	db	79	;'O'
  2138  0073C8  70                 	db	112	;'p'
  2139  0073C9  65                 	db	101	;'e'
  2140  0073CA  6E                 	db	110	;'n'
  2141  0073CB  20                 	db	32
  2142  0073CC  43                 	db	67	;'C'
  2143  0073CD  41                 	db	65	;'A'
  2144  0073CE  4E                 	db	78	;'N'
  2145  0073CF  20                 	db	32
  2146  0073D0  69                 	db	105	;'i'
  2147  0073D1  6E                 	db	110	;'n'
  2148  0073D2  74                 	db	116	;'t'
  2149  0073D3  65                 	db	101	;'e'
  2150  0073D4  72                 	db	114	;'r'
  2151  0073D5  66                 	db	102	;'f'
  2152  0073D6  61                 	db	97	;'a'
  2153  0073D7  63                 	db	99	;'c'
  2154  0073D8  65                 	db	101	;'e'
  2155  0073D9  20                 	db	32
  2156  0073DA  69                 	db	105	;'i'
  2157  0073DB  6E                 	db	110	;'n'
  2158  0073DC  20                 	db	32
  2159  0073DD  6E                 	db	110	;'n'
  2160  0073DE  6F                 	db	111	;'o'
  2161  0073DF  72                 	db	114	;'r'
  2162  0073E0  6D                 	db	109	;'m'
  2163  0073E1  61                 	db	97	;'a'
  2164  0073E2  6C                 	db	108	;'l'
  2165  0073E3  20                 	db	32
  2166  0073E4  6D                 	db	109	;'m'
  2167  0073E5  6F                 	db	111	;'o'
  2168  0073E6  64                 	db	100	;'d'
  2169  0073E7  65                 	db	101	;'e'
  2170  0073E8  2E                 	db	46
  2171  0073E9  0D                 	db	13
  2172  0073EA  0A                 	db	10
  2173  0073EB  00                 	db	0
  2174  0073EC                     STR_123:
  2175  0073EC  2B                 	db	43
  2176  0073ED  4F                 	db	79	;'O'
  2177  0073EE  4B                 	db	75	;'K'
  2178  0073EF  20                 	db	32
  2179  0073F0  2D                 	db	45
  2180  0073F1  20                 	db	32
  2181  0073F2  4E                 	db	78	;'N'
  2182  0073F3  75                 	db	117	;'u'
  2183  0073F4  6D                 	db	109	;'m'
  2184  0073F5  65                 	db	101	;'e'
  2185  0073F6  72                 	db	114	;'r'
  2186  0073F7  69                 	db	105	;'i'
  2187  0073F8  63                 	db	99	;'c'
  2188  0073F9  61                 	db	97	;'a'
  2189  0073FA  6C                 	db	108	;'l'
  2190  0073FB  20                 	db	32
  2191  0073FC  6F                 	db	111	;'o'
  2192  0073FD  75                 	db	117	;'u'
  2193  0073FE  74                 	db	116	;'t'
  2194  0073FF  70                 	db	112	;'p'
  2195  007400  75                 	db	117	;'u'
  2196  007401  74                 	db	116	;'t'
  2197  007402  20                 	db	32
  2198  007403  6E                 	db	110	;'n'
  2199  007404  6F                 	db	111	;'o'
  2200  007405  77                 	db	119	;'w'
  2201  007406  20                 	db	32
  2202  007407  69                 	db	105	;'i'
  2203  007408  6E                 	db	110	;'n'
  2204  007409  20                 	db	32
  2205  00740A  68                 	db	104	;'h'
  2206  00740B  65                 	db	101	;'e'
  2207  00740C  78                 	db	120	;'x'
  2208  00740D  61                 	db	97	;'a'
  2209  00740E  64                 	db	100	;'d'
  2210  00740F  65                 	db	101	;'e'
  2211  007410  63                 	db	99	;'c'
  2212  007411  69                 	db	105	;'i'
  2213  007412  6D                 	db	109	;'m'
  2214  007413  61                 	db	97	;'a'
  2215  007414  6C                 	db	108	;'l'
  2216  007415  0D                 	db	13
  2217  007416  0A                 	db	10
  2218  007417  00                 	db	0
  2219  007418                     STR_100:
  2220  007418  2D                 	db	45
  2221  007419  45                 	db	69	;'E'
  2222  00741A  52                 	db	82	;'R'
  2223  00741B  52                 	db	82	;'R'
  2224  00741C  4F                 	db	79	;'O'
  2225  00741D  52                 	db	82	;'R'
  2226  00741E  20                 	db	32
  2227  00741F  2D                 	db	45
  2228  007420  20                 	db	32
  2229  007421  66                 	db	102	;'f'
  2230  007422  69                 	db	105	;'i'
  2231  007423  6C                 	db	108	;'l'
  2232  007424  74                 	db	116	;'t'
  2233  007425  65                 	db	101	;'e'
  2234  007426  72                 	db	114	;'r'
  2235  007427  20                 	db	32
  2236  007428  66                 	db	102	;'f'
  2237  007429  6F                 	db	111	;'o'
  2238  00742A  72                 	db	114	;'r'
  2239  00742B  20                 	db	32
  2240  00742C  70                 	db	112	;'p'
  2241  00742D  72                 	db	114	;'r'
  2242  00742E  69                 	db	105	;'i'
  2243  00742F  6F                 	db	111	;'o'
  2244  007430  72                 	db	114	;'r'
  2245  007431  69                 	db	105	;'i'
  2246  007432  74                 	db	116	;'t'
  2247  007433  79                 	db	121	;'y'
  2248  007434  20                 	db	32
  2249  007435  69                 	db	105	;'i'
  2250  007436  73                 	db	115	;'s'
  2251  007437  20                 	db	32
  2252  007438  6D                 	db	109	;'m'
  2253  007439  69                 	db	105	;'i'
  2254  00743A  73                 	db	115	;'s'
  2255  00743B  73                 	db	115	;'s'
  2256  00743C  69                 	db	105	;'i'
  2257  00743D  6E                 	db	110	;'n'
  2258  00743E  67                 	db	103	;'g'
  2259  00743F  0D                 	db	13
  2260  007440  0A                 	db	10
  2261  007441  00                 	db	0
  2262  007442                     STR_106:
  2263  007442  2D                 	db	45
  2264  007443  45                 	db	69	;'E'
  2265  007444  52                 	db	82	;'R'
  2266  007445  52                 	db	82	;'R'
  2267  007446  4F                 	db	79	;'O'
  2268  007447  52                 	db	82	;'R'
  2269  007448  20                 	db	32
  2270  007449  2D                 	db	45
  2271  00744A  20                 	db	32
  2272  00744B  66                 	db	102	;'f'
  2273  00744C  69                 	db	105	;'i'
  2274  00744D  6C                 	db	108	;'l'
  2275  00744E  74                 	db	116	;'t'
  2276  00744F  65                 	db	101	;'e'
  2277  007450  72                 	db	114	;'r'
  2278  007451  20                 	db	32
  2279  007452  66                 	db	102	;'f'
  2280  007453  6F                 	db	111	;'o'
  2281  007454  72                 	db	114	;'r'
  2282  007455  20                 	db	32
  2283  007456  6E                 	db	110	;'n'
  2284  007457  69                 	db	105	;'i'
  2285  007458  64                 	db	100	;'d'
  2286  007459  65                 	db	101	;'e'
  2287  00745A  20                 	db	32
  2288  00745B  69                 	db	105	;'i'
  2289  00745C  64                 	db	100	;'d'
  2290  00745D  20                 	db	32
  2291  00745E  69                 	db	105	;'i'
  2292  00745F  73                 	db	115	;'s'
  2293  007460  20                 	db	32
  2294  007461  6D                 	db	109	;'m'
  2295  007462  69                 	db	105	;'i'
  2296  007463  73                 	db	115	;'s'
  2297  007464  73                 	db	115	;'s'
  2298  007465  69                 	db	105	;'i'
  2299  007466  6E                 	db	110	;'n'
  2300  007467  67                 	db	103	;'g'
  2301  007468  0D                 	db	13
  2302  007469  0A                 	db	10
  2303  00746A  00                 	db	0
  2304  00746B                     STR_229:
  2305  00746B  48                 	db	72	;'H'
  2306  00746C  45                 	db	69	;'E'
  2307  00746D  4C                 	db	76	;'L'
  2308  00746E  50                 	db	80	;'P'
  2309  00746F  20                 	db	32
  2310  007470  2D                 	db	45
  2311  007471  20                 	db	32
  2312  007472  44                 	db	68	;'D'
  2313  007473  69                 	db	105	;'i'
  2314  007474  73                 	db	115	;'s'
  2315  007475  70                 	db	112	;'p'
  2316  007476  6C                 	db	108	;'l'
  2317  007477  61                 	db	97	;'a'
  2318  007478  79                 	db	121	;'y'
  2319  007479  20                 	db	32
  2320  00747A  74                 	db	116	;'t'
  2321  00747B  68                 	db	104	;'h'
  2322  00747C  69                 	db	105	;'i'
  2323  00747D  73                 	db	115	;'s'
  2324  00747E  20                 	db	32
  2325  00747F  68                 	db	104	;'h'
  2326  007480  65                 	db	101	;'e'
  2327  007481  6C                 	db	108	;'l'
  2328  007482  70                 	db	112	;'p'
  2329  007483  20                 	db	32
  2330  007484  69                 	db	105	;'i'
  2331  007485  6E                 	db	110	;'n'
  2332  007486  66                 	db	102	;'f'
  2333  007487  6F                 	db	111	;'o'
  2334  007488  72                 	db	114	;'r'
  2335  007489  6D                 	db	109	;'m'
  2336  00748A  61                 	db	97	;'a'
  2337  00748B  74                 	db	116	;'t'
  2338  00748C  69                 	db	105	;'i'
  2339  00748D  6F                 	db	111	;'o'
  2340  00748E  6E                 	db	110	;'n'
  2341  00748F  2E                 	db	46
  2342  007490  0D                 	db	13
  2343  007491  0A                 	db	10
  2344  007492  00                 	db	0
  2345  007493                     STR_113:
  2346  007493  2D                 	db	45
  2347  007494  45                 	db	69	;'E'
  2348  007495  52                 	db	82	;'R'
  2349  007496  52                 	db	82	;'R'
  2350  007497  4F                 	db	79	;'O'
  2351  007498  52                 	db	82	;'R'
  2352  007499  20                 	db	32
  2353  00749A  2D                 	db	45
  2354  00749B  20                 	db	32
  2355  00749C  6D                 	db	109	;'m'
  2356  00749D  61                 	db	97	;'a'
  2357  00749E  73                 	db	115	;'s'
  2358  00749F  6B                 	db	107	;'k'
  2359  0074A0  20                 	db	32
  2360  0074A1  66                 	db	102	;'f'
  2361  0074A2  6F                 	db	111	;'o'
  2362  0074A3  72                 	db	114	;'r'
  2363  0074A4  20                 	db	32
  2364  0074A5  70                 	db	112	;'p'
  2365  0074A6  72                 	db	114	;'r'
  2366  0074A7  69                 	db	105	;'i'
  2367  0074A8  6F                 	db	111	;'o'
  2368  0074A9  72                 	db	114	;'r'
  2369  0074AA  69                 	db	105	;'i'
  2370  0074AB  74                 	db	116	;'t'
  2371  0074AC  79                 	db	121	;'y'
  2372  0074AD  20                 	db	32
  2373  0074AE  69                 	db	105	;'i'
  2374  0074AF  73                 	db	115	;'s'
  2375  0074B0  20                 	db	32
  2376  0074B1  6D                 	db	109	;'m'
  2377  0074B2  69                 	db	105	;'i'
  2378  0074B3  73                 	db	115	;'s'
  2379  0074B4  73                 	db	115	;'s'
  2380  0074B5  69                 	db	105	;'i'
  2381  0074B6  6E                 	db	110	;'n'
  2382  0074B7  67                 	db	103	;'g'
  2383  0074B8  0D                 	db	13
  2384  0074B9  0A                 	db	10
  2385  0074BA  00                 	db	0
  2386  0074BB                     STR_125:
  2387  0074BB  2B                 	db	43
  2388  0074BC  4F                 	db	79	;'O'
  2389  0074BD  4B                 	db	75	;'K'
  2390  0074BE  20                 	db	32
  2391  0074BF  2D                 	db	45
  2392  0074C0  20                 	db	32
  2393  0074C1  4E                 	db	78	;'N'
  2394  0074C2  75                 	db	117	;'u'
  2395  0074C3  6D                 	db	109	;'m'
  2396  0074C4  65                 	db	101	;'e'
  2397  0074C5  72                 	db	114	;'r'
  2398  0074C6  69                 	db	105	;'i'
  2399  0074C7  63                 	db	99	;'c'
  2400  0074C8  61                 	db	97	;'a'
  2401  0074C9  6C                 	db	108	;'l'
  2402  0074CA  20                 	db	32
  2403  0074CB  6F                 	db	111	;'o'
  2404  0074CC  75                 	db	117	;'u'
  2405  0074CD  74                 	db	116	;'t'
  2406  0074CE  70                 	db	112	;'p'
  2407  0074CF  75                 	db	117	;'u'
  2408  0074D0  74                 	db	116	;'t'
  2409  0074D1  20                 	db	32
  2410  0074D2  6E                 	db	110	;'n'
  2411  0074D3  6F                 	db	111	;'o'
  2412  0074D4  77                 	db	119	;'w'
  2413  0074D5  20                 	db	32
  2414  0074D6  69                 	db	105	;'i'
  2415  0074D7  6E                 	db	110	;'n'
  2416  0074D8  20                 	db	32
  2417  0074D9  64                 	db	100	;'d'
  2418  0074DA  65                 	db	101	;'e'
  2419  0074DB  63                 	db	99	;'c'
  2420  0074DC  69                 	db	105	;'i'
  2421  0074DD  6D                 	db	109	;'m'
  2422  0074DE  61                 	db	97	;'a'
  2423  0074DF  6C                 	db	108	;'l'
  2424  0074E0  0D                 	db	13
  2425  0074E1  0A                 	db	10
  2426  0074E2  00                 	db	0
  2427  0074E3                     STR_98:
  2428  0074E3  2D                 	db	45
  2429  0074E4  45                 	db	69	;'E'
  2430  0074E5  52                 	db	82	;'R'
  2431  0074E6  52                 	db	82	;'R'
  2432  0074E7  4F                 	db	79	;'O'
  2433  0074E8  52                 	db	82	;'R'
  2434  0074E9  20                 	db	32
  2435  0074EA  2D                 	db	45
  2436  0074EB  20                 	db	32
  2437  0074EC  4E                 	db	78	;'N'
  2438  0074ED  6F                 	db	111	;'o'
  2439  0074EE  20                 	db	32
  2440  0074EF  66                 	db	102	;'f'
  2441  0074F0  69                 	db	105	;'i'
  2442  0074F1  6C                 	db	108	;'l'
  2443  0074F2  74                 	db	116	;'t'
  2444  0074F3  65                 	db	101	;'e'
  2445  0074F4  72                 	db	114	;'r'
  2446  0074F5  20                 	db	32
  2447  0074F6  6E                 	db	110	;'n'
  2448  0074F7  75                 	db	117	;'u'
  2449  0074F8  6D                 	db	109	;'m'
  2450  0074F9  62                 	db	98	;'b'
  2451  0074FA  65                 	db	101	;'e'
  2452  0074FB  72                 	db	114	;'r'
  2453  0074FC  20                 	db	32
  2454  0074FD  73                 	db	115	;'s'
  2455  0074FE  70                 	db	112	;'p'
  2456  0074FF  65                 	db	101	;'e'
  2457  007500  63                 	db	99	;'c'
  2458  007501  69                 	db	105	;'i'
  2459  007502  66                 	db	102	;'f'
  2460  007503  69                 	db	105	;'i'
  2461  007504  65                 	db	101	;'e'
  2462  007505  64                 	db	100	;'d'
  2463  007506  2E                 	db	46
  2464  007507  0D                 	db	13
  2465  007508  0A                 	db	10
  2466  007509  00                 	db	0
  2467  00750A                     STR_228:
  2468  00750A  45                 	db	69	;'E'
  2469  00750B  52                 	db	82	;'R'
  2470  00750C  52                 	db	82	;'R'
  2471  00750D  20                 	db	32
  2472  00750E  2D                 	db	45
  2473  00750F  20                 	db	32
  2474  007510  44                 	db	68	;'D'
  2475  007511  69                 	db	105	;'i'
  2476  007512  73                 	db	115	;'s'
  2477  007513  70                 	db	112	;'p'
  2478  007514  6C                 	db	108	;'l'
  2479  007515  61                 	db	97	;'a'
  2480  007516  79                 	db	121	;'y'
  2481  007517  20                 	db	32
  2482  007518  43                 	db	67	;'C'
  2483  007519  41                 	db	65	;'A'
  2484  00751A  4E                 	db	78	;'N'
  2485  00751B  20                 	db	32
  2486  00751C  65                 	db	101	;'e'
  2487  00751D  72                 	db	114	;'r'
  2488  00751E  72                 	db	114	;'r'
  2489  00751F  6F                 	db	111	;'o'
  2490  007520  72                 	db	114	;'r'
  2491  007521  20                 	db	32
  2492  007522  69                 	db	105	;'i'
  2493  007523  6E                 	db	110	;'n'
  2494  007524  66                 	db	102	;'f'
  2495  007525  6F                 	db	111	;'o'
  2496  007526  72                 	db	114	;'r'
  2497  007527  6D                 	db	109	;'m'
  2498  007528  61                 	db	97	;'a'
  2499  007529  74                 	db	116	;'t'
  2500  00752A  69                 	db	105	;'i'
  2501  00752B  6F                 	db	111	;'o'
  2502  00752C  6E                 	db	110	;'n'
  2503  00752D  2E                 	db	46
  2504  00752E  0D                 	db	13
  2505  00752F  0A                 	db	10
  2506  007530  00                 	db	0
  2507  007531                     STR_214:
  2508  007531  48                 	db	72	;'H'
  2509  007532  65                 	db	101	;'e'
  2510  007533  6C                 	db	108	;'l'
  2511  007534  70                 	db	112	;'p'
  2512  007535  20                 	db	32
  2513  007536  66                 	db	102	;'f'
  2514  007537  6F                 	db	111	;'o'
  2515  007538  72                 	db	114	;'r'
  2516  007539  20                 	db	32
  2517  00753A  74                 	db	116	;'t'
  2518  00753B  68                 	db	104	;'h'
  2519  00753C  65                 	db	101	;'e'
  2520  00753D  20                 	db	32
  2521  00753E  46                 	db	70	;'F'
  2522  00753F  72                 	db	114	;'r'
  2523  007540  61                 	db	97	;'a'
  2524  007541  6E                 	db	110	;'n'
  2525  007542  6B                 	db	107	;'k'
  2526  007543  66                 	db	102	;'f'
  2527  007544  75                 	db	117	;'u'
  2528  007545  72                 	db	114	;'r'
  2529  007546  74                 	db	116	;'t'
  2530  007547  20                 	db	32
  2531  007548  52                 	db	82	;'R'
  2532  007549  53                 	db	83	;'S'
  2533  00754A  2D                 	db	45
  2534  00754B  32                 	db	50	;'2'
  2535  00754C  33                 	db	51	;'3'
  2536  00754D  32                 	db	50	;'2'
  2537  00754E  20                 	db	32
  2538  00754F  6D                 	db	109	;'m'
  2539  007550  6F                 	db	111	;'o'
  2540  007551  64                 	db	100	;'d'
  2541  007552  75                 	db	117	;'u'
  2542  007553  6C                 	db	108	;'l'
  2543  007554  65                 	db	101	;'e'
  2544  007555  0D                 	db	13
  2545  007556  0A                 	db	10
  2546  007557  00                 	db	0
  2547  007558                     STR_119:
  2548  007558  2D                 	db	45
  2549  007559  45                 	db	69	;'E'
  2550  00755A  52                 	db	82	;'R'
  2551  00755B  52                 	db	82	;'R'
  2552  00755C  4F                 	db	79	;'O'
  2553  00755D  52                 	db	82	;'R'
  2554  00755E  20                 	db	32
  2555  00755F  2D                 	db	45
  2556  007560  20                 	db	32
  2557  007561  6D                 	db	109	;'m'
  2558  007562  61                 	db	97	;'a'
  2559  007563  73                 	db	115	;'s'
  2560  007564  6B                 	db	107	;'k'
  2561  007565  20                 	db	32
  2562  007566  66                 	db	102	;'f'
  2563  007567  6F                 	db	111	;'o'
  2564  007568  72                 	db	114	;'r'
  2565  007569  20                 	db	32
  2566  00756A  6E                 	db	110	;'n'
  2567  00756B  69                 	db	105	;'i'
  2568  00756C  64                 	db	100	;'d'
  2569  00756D  65                 	db	101	;'e'
  2570  00756E  20                 	db	32
  2571  00756F  69                 	db	105	;'i'
  2572  007570  64                 	db	100	;'d'
  2573  007571  20                 	db	32
  2574  007572  69                 	db	105	;'i'
  2575  007573  73                 	db	115	;'s'
  2576  007574  20                 	db	32
  2577  007575  6D                 	db	109	;'m'
  2578  007576  69                 	db	105	;'i'
  2579  007577  73                 	db	115	;'s'
  2580  007578  73                 	db	115	;'s'
  2581  007579  69                 	db	105	;'i'
  2582  00757A  6E                 	db	110	;'n'
  2583  00757B  67                 	db	103	;'g'
  2584  00757C  0D                 	db	13
  2585  00757D  0A                 	db	10
  2586  00757E  00                 	db	0
  2587  00757F                     STR_102:
  2588  00757F  2D                 	db	45
  2589  007580  45                 	db	69	;'E'
  2590  007581  52                 	db	82	;'R'
  2591  007582  52                 	db	82	;'R'
  2592  007583  4F                 	db	79	;'O'
  2593  007584  52                 	db	82	;'R'
  2594  007585  20                 	db	32
  2595  007586  2D                 	db	45
  2596  007587  20                 	db	32
  2597  007588  66                 	db	102	;'f'
  2598  007589  69                 	db	105	;'i'
  2599  00758A  6C                 	db	108	;'l'
  2600  00758B  74                 	db	116	;'t'
  2601  00758C  65                 	db	101	;'e'
  2602  00758D  72                 	db	114	;'r'
  2603  00758E  20                 	db	32
  2604  00758F  66                 	db	102	;'f'
  2605  007590  6F                 	db	111	;'o'
  2606  007591  72                 	db	114	;'r'
  2607  007592  20                 	db	32
  2608  007593  63                 	db	99	;'c'
  2609  007594  6C                 	db	108	;'l'
  2610  007595  61                 	db	97	;'a'
  2611  007596  73                 	db	115	;'s'
  2612  007597  73                 	db	115	;'s'
  2613  007598  20                 	db	32
  2614  007599  69                 	db	105	;'i'
  2615  00759A  73                 	db	115	;'s'
  2616  00759B  20                 	db	32
  2617  00759C  6D                 	db	109	;'m'
  2618  00759D  69                 	db	105	;'i'
  2619  00759E  73                 	db	115	;'s'
  2620  00759F  73                 	db	115	;'s'
  2621  0075A0  69                 	db	105	;'i'
  2622  0075A1  6E                 	db	110	;'n'
  2623  0075A2  67                 	db	103	;'g'
  2624  0075A3  0D                 	db	13
  2625  0075A4  0A                 	db	10
  2626  0075A5  00                 	db	0
  2627  0075A6                     STR_245:
  2628  0075A6  20                 	db	32
  2629  0075A7  20                 	db	32
  2630  0075A8  20                 	db	32
  2631  0075A9  20                 	db	32
  2632  0075AA  20                 	db	32
  2633  0075AB  20                 	db	32
  2634  0075AC  20                 	db	32
  2635  0075AD  20                 	db	32
  2636  0075AE  20                 	db	32
  2637  0075AF  20                 	db	32
  2638  0075B0  20                 	db	32
  2639  0075B1  4D                 	db	77	;'M'
  2640  0075B2  6F                 	db	111	;'o'
  2641  0075B3  64                 	db	100	;'d'
  2642  0075B4  65                 	db	101	;'e'
  2643  0075B5  73                 	db	115	;'s'
  2644  0075B6  3A                 	db	58	;':'
  2645  0075B7  20                 	db	32
  2646  0075B8  76                 	db	118	;'v'
  2647  0075B9  65                 	db	101	;'e'
  2648  0075BA  72                 	db	114	;'r'
  2649  0075BB  62                 	db	98	;'b'
  2650  0075BC  6F                 	db	111	;'o'
  2651  0075BD  73                 	db	115	;'s'
  2652  0075BE  65                 	db	101	;'e'
  2653  0075BF  7C                 	db	124
  2654  0075C0  76                 	db	118	;'v'
  2655  0075C1  73                 	db	115	;'s'
  2656  0075C2  63                 	db	99	;'c'
  2657  0075C3  70                 	db	112	;'p'
  2658  0075C4  7C                 	db	124
  2659  0075C5  73                 	db	115	;'s'
  2660  0075C6  6C                 	db	108	;'l'
  2661  0075C7  63                 	db	99	;'c'
  2662  0075C8  61                 	db	97	;'a'
  2663  0075C9  6E                 	db	110	;'n'
  2664  0075CA  0D                 	db	13
  2665  0075CB  0A                 	db	10
  2666  0075CC  00                 	db	0
  2667  0075CD                     STR_104:
  2668  0075CD  2D                 	db	45
  2669  0075CE  45                 	db	69	;'E'
  2670  0075CF  52                 	db	82	;'R'
  2671  0075D0  52                 	db	82	;'R'
  2672  0075D1  4F                 	db	79	;'O'
  2673  0075D2  52                 	db	82	;'R'
  2674  0075D3  20                 	db	32
  2675  0075D4  2D                 	db	45
  2676  0075D5  20                 	db	32
  2677  0075D6  66                 	db	102	;'f'
  2678  0075D7  69                 	db	105	;'i'
  2679  0075D8  6C                 	db	108	;'l'
  2680  0075D9  74                 	db	116	;'t'
  2681  0075DA  65                 	db	101	;'e'
  2682  0075DB  72                 	db	114	;'r'
  2683  0075DC  20                 	db	32
  2684  0075DD  66                 	db	102	;'f'
  2685  0075DE  6F                 	db	111	;'o'
  2686  0075DF  72                 	db	114	;'r'
  2687  0075E0  20                 	db	32
  2688  0075E1  74                 	db	116	;'t'
  2689  0075E2  79                 	db	121	;'y'
  2690  0075E3  70                 	db	112	;'p'
  2691  0075E4  65                 	db	101	;'e'
  2692  0075E5  20                 	db	32
  2693  0075E6  69                 	db	105	;'i'
  2694  0075E7  73                 	db	115	;'s'
  2695  0075E8  20                 	db	32
  2696  0075E9  6D                 	db	109	;'m'
  2697  0075EA  69                 	db	105	;'i'
  2698  0075EB  73                 	db	115	;'s'
  2699  0075EC  73                 	db	115	;'s'
  2700  0075ED  69                 	db	105	;'i'
  2701  0075EE  6E                 	db	110	;'n'
  2702  0075EF  67                 	db	103	;'g'
  2703  0075F0  0D                 	db	13
  2704  0075F1  0A                 	db	10
  2705  0075F2  00                 	db	0
  2706  0075F3                     STR_111:
  2707  0075F3  2D                 	db	45
  2708  0075F4  45                 	db	69	;'E'
  2709  0075F5  52                 	db	82	;'R'
  2710  0075F6  52                 	db	82	;'R'
  2711  0075F7  4F                 	db	79	;'O'
  2712  0075F8  52                 	db	82	;'R'
  2713  0075F9  20                 	db	32
  2714  0075FA  2D                 	db	45
  2715  0075FB  20                 	db	32
  2716  0075FC  4E                 	db	78	;'N'
  2717  0075FD  6F                 	db	111	;'o'
  2718  0075FE  20                 	db	32
  2719  0075FF  6D                 	db	109	;'m'
  2720  007600  61                 	db	97	;'a'
  2721  007601  73                 	db	115	;'s'
  2722  007602  6B                 	db	107	;'k'
  2723  007603  20                 	db	32
  2724  007604  6E                 	db	110	;'n'
  2725  007605  75                 	db	117	;'u'
  2726  007606  6D                 	db	109	;'m'
  2727  007607  62                 	db	98	;'b'
  2728  007608  65                 	db	101	;'e'
  2729  007609  72                 	db	114	;'r'
  2730  00760A  20                 	db	32
  2731  00760B  73                 	db	115	;'s'
  2732  00760C  70                 	db	112	;'p'
  2733  00760D  65                 	db	101	;'e'
  2734  00760E  63                 	db	99	;'c'
  2735  00760F  69                 	db	105	;'i'
  2736  007610  66                 	db	102	;'f'
  2737  007611  69                 	db	105	;'i'
  2738  007612  65                 	db	101	;'e'
  2739  007613  64                 	db	100	;'d'
  2740  007614  2E                 	db	46
  2741  007615  0D                 	db	13
  2742  007616  0A                 	db	10
  2743  007617  00                 	db	0
  2744  007618                     STR_1:
  2745  007618  0D                 	db	13
  2746  007619  0A                 	db	10
  2747  00761A  46                 	db	70	;'F'
  2748  00761B  72                 	db	114	;'r'
  2749  00761C  61                 	db	97	;'a'
  2750  00761D  6E                 	db	110	;'n'
  2751  00761E  6B                 	db	107	;'k'
  2752  00761F  66                 	db	102	;'f'
  2753  007620  75                 	db	117	;'u'
  2754  007621  72                 	db	114	;'r'
  2755  007622  74                 	db	116	;'t'
  2756  007623  20                 	db	32
  2757  007624  52                 	db	82	;'R'
  2758  007625  53                 	db	83	;'S'
  2759  007626  2D                 	db	45
  2760  007627  32                 	db	50	;'2'
  2761  007628  33                 	db	51	;'3'
  2762  007629  32                 	db	50	;'2'
  2763  00762A  20                 	db	32
  2764  00762B  43                 	db	67	;'C'
  2765  00762C  41                 	db	65	;'A'
  2766  00762D  4E                 	db	78	;'N'
  2767  00762E  34                 	db	52	;'4'
  2768  00762F  56                 	db	86	;'V'
  2769  007630  53                 	db	83	;'S'
  2770  007631  43                 	db	67	;'C'
  2771  007632  50                 	db	80	;'P'
  2772  007633  20                 	db	32
  2773  007634  6D                 	db	109	;'m'
  2774  007635  6F                 	db	111	;'o'
  2775  007636  64                 	db	100	;'d'
  2776  007637  75                 	db	117	;'u'
  2777  007638  6C                 	db	108	;'l'
  2778  007639  65                 	db	101	;'e'
  2779  00763A  0D                 	db	13
  2780  00763B  0A                 	db	10
  2781  00763C  00                 	db	0
  2782  00763D                     STR_115:
  2783  00763D  2D                 	db	45
  2784  00763E  45                 	db	69	;'E'
  2785  00763F  52                 	db	82	;'R'
  2786  007640  52                 	db	82	;'R'
  2787  007641  4F                 	db	79	;'O'
  2788  007642  52                 	db	82	;'R'
  2789  007643  20                 	db	32
  2790  007644  2D                 	db	45
  2791  007645  20                 	db	32
  2792  007646  6D                 	db	109	;'m'
  2793  007647  61                 	db	97	;'a'
  2794  007648  73                 	db	115	;'s'
  2795  007649  6B                 	db	107	;'k'
  2796  00764A  20                 	db	32
  2797  00764B  66                 	db	102	;'f'
  2798  00764C  6F                 	db	111	;'o'
  2799  00764D  72                 	db	114	;'r'
  2800  00764E  20                 	db	32
  2801  00764F  63                 	db	99	;'c'
  2802  007650  6C                 	db	108	;'l'
  2803  007651  61                 	db	97	;'a'
  2804  007652  73                 	db	115	;'s'
  2805  007653  73                 	db	115	;'s'
  2806  007654  20                 	db	32
  2807  007655  69                 	db	105	;'i'
  2808  007656  73                 	db	115	;'s'
  2809  007657  20                 	db	32
  2810  007658  6D                 	db	109	;'m'
  2811  007659  69                 	db	105	;'i'
  2812  00765A  73                 	db	115	;'s'
  2813  00765B  73                 	db	115	;'s'
  2814  00765C  69                 	db	105	;'i'
  2815  00765D  6E                 	db	110	;'n'
  2816  00765E  67                 	db	103	;'g'
  2817  00765F  0D                 	db	13
  2818  007660  0A                 	db	10
  2819  007661  00                 	db	0
  2820  007662                     STR_117:
  2821  007662  2D                 	db	45
  2822  007663  45                 	db	69	;'E'
  2823  007664  52                 	db	82	;'R'
  2824  007665  52                 	db	82	;'R'
  2825  007666  4F                 	db	79	;'O'
  2826  007667  52                 	db	82	;'R'
  2827  007668  20                 	db	32
  2828  007669  2D                 	db	45
  2829  00766A  20                 	db	32
  2830  00766B  6D                 	db	109	;'m'
  2831  00766C  61                 	db	97	;'a'
  2832  00766D  73                 	db	115	;'s'
  2833  00766E  6B                 	db	107	;'k'
  2834  00766F  20                 	db	32
  2835  007670  66                 	db	102	;'f'
  2836  007671  6F                 	db	111	;'o'
  2837  007672  72                 	db	114	;'r'
  2838  007673  20                 	db	32
  2839  007674  74                 	db	116	;'t'
  2840  007675  79                 	db	121	;'y'
  2841  007676  70                 	db	112	;'p'
  2842  007677  65                 	db	101	;'e'
  2843  007678  20                 	db	32
  2844  007679  69                 	db	105	;'i'
  2845  00767A  73                 	db	115	;'s'
  2846  00767B  20                 	db	32
  2847  00767C  6D                 	db	109	;'m'
  2848  00767D  69                 	db	105	;'i'
  2849  00767E  73                 	db	115	;'s'
  2850  00767F  73                 	db	115	;'s'
  2851  007680  69                 	db	105	;'i'
  2852  007681  6E                 	db	110	;'n'
  2853  007682  67                 	db	103	;'g'
  2854  007683  0D                 	db	13
  2855  007684  0A                 	db	10
  2856  007685  00                 	db	0
  2857  007686                     STR_3:
  2858  007686  68                 	db	104	;'h'
  2859  007687  74                 	db	116	;'t'
  2860  007688  74                 	db	116	;'t'
  2861  007689  70                 	db	112	;'p'
  2862  00768A  3A                 	db	58	;':'
  2863  00768B  2F                 	db	47
  2864  00768C  2F                 	db	47
  2865  00768D  77                 	db	119	;'w'
  2866  00768E  77                 	db	119	;'w'
  2867  00768F  77                 	db	119	;'w'
  2868  007690  2E                 	db	46
  2869  007691  70                 	db	112	;'p'
  2870  007692  61                 	db	97	;'a'
  2871  007693  72                 	db	114	;'r'
  2872  007694  61                 	db	97	;'a'
  2873  007695  64                 	db	100	;'d'
  2874  007696  69                 	db	105	;'i'
  2875  007697  73                 	db	115	;'s'
  2876  007698  65                 	db	101	;'e'
  2877  007699  6F                 	db	111	;'o'
  2878  00769A  66                 	db	102	;'f'
  2879  00769B  74                 	db	116	;'t'
  2880  00769C  68                 	db	104	;'h'
  2881  00769D  65                 	db	101	;'e'
  2882  00769E  66                 	db	102	;'f'
  2883  00769F  72                 	db	114	;'r'
  2884  0076A0  6F                 	db	111	;'o'
  2885  0076A1  67                 	db	103	;'g'
  2886  0076A2  2E                 	db	46
  2887  0076A3  63                 	db	99	;'c'
  2888  0076A4  6F                 	db	111	;'o'
  2889  0076A5  6D                 	db	109	;'m'
  2890  0076A6  0D                 	db	13
  2891  0076A7  0A                 	db	10
  2892  0076A8  00                 	db	0
  2893  0076A9                     STR_87:
  2894  0076A9  2B                 	db	43
  2895  0076AA  4F                 	db	79	;'O'
  2896  0076AB  4B                 	db	75	;'K'
  2897  0076AC  20                 	db	32
  2898  0076AD  2D                 	db	45
  2899  0076AE  20                 	db	32
  2900  0076AF  56                 	db	86	;'V'
  2901  0076B0  61                 	db	97	;'a'
  2902  0076B1  6C                 	db	108	;'l'
  2903  0076B2  75                 	db	117	;'u'
  2904  0076B3  65                 	db	101	;'e'
  2905  0076B4  20                 	db	32
  2906  0076B5  77                 	db	119	;'w'
  2907  0076B6  72                 	db	114	;'r'
  2908  0076B7  69                 	db	105	;'i'
  2909  0076B8  74                 	db	116	;'t'
  2910  0076B9  74                 	db	116	;'t'
  2911  0076BA  65                 	db	101	;'e'
  2912  0076BB  6E                 	db	110	;'n'
  2913  0076BC  20                 	db	32
  2914  0076BD  73                 	db	115	;'s'
  2915  0076BE  75                 	db	117	;'u'
  2916  0076BF  63                 	db	99	;'c'
  2917  0076C0  63                 	db	99	;'c'
  2918  0076C1  65                 	db	101	;'e'
  2919  0076C2  73                 	db	115	;'s'
  2920  0076C3  73                 	db	115	;'s'
  2921  0076C4  66                 	db	102	;'f'
  2922  0076C5  75                 	db	117	;'u'
  2923  0076C6  6C                 	db	108	;'l'
  2924  0076C7  6C                 	db	108	;'l'
  2925  0076C8  79                 	db	121	;'y'
  2926  0076C9  0D                 	db	13
  2927  0076CA  0A                 	db	10
  2928  0076CB  00                 	db	0
  2929  0076CC                     STR_238:
  2930  0076CC  53                 	db	83	;'S'
  2931  0076CD  45                 	db	69	;'E'
  2932  0076CE  54                 	db	84	;'T'
  2933  0076CF  20                 	db	32
  2934  0076D0  2D                 	db	45
  2935  0076D1  20                 	db	32
  2936  0076D2  50                 	db	80	;'P'
  2937  0076D3  65                 	db	101	;'e'
  2938  0076D4  72                 	db	114	;'r'
  2939  0076D5  73                 	db	115	;'s'
  2940  0076D6  69                 	db	105	;'i'
  2941  0076D7  73                 	db	115	;'s'
  2942  0076D8  74                 	db	116	;'t'
  2943  0076D9  65                 	db	101	;'e'
  2944  0076DA  6E                 	db	110	;'n'
  2945  0076DB  74                 	db	116	;'t'
  2946  0076DC  20                 	db	32
  2947  0076DD  66                 	db	102	;'f'
  2948  0076DE  75                 	db	117	;'u'
  2949  0076DF  6E                 	db	110	;'n'
  2950  0076E0  63                 	db	99	;'c'
  2951  0076E1  74                 	db	116	;'t'
  2952  0076E2  69                 	db	105	;'i'
  2953  0076E3  6F                 	db	111	;'o'
  2954  0076E4  6E                 	db	110	;'n'
  2955  0076E5  61                 	db	97	;'a'
  2956  0076E6  6C                 	db	108	;'l'
  2957  0076E7  69                 	db	105	;'i'
  2958  0076E8  74                 	db	116	;'t'
  2959  0076E9  79                 	db	121	;'y'
  2960  0076EA  2E                 	db	46
  2961  0076EB  0D                 	db	13
  2962  0076EC  0A                 	db	10
  2963  0076ED  00                 	db	0
  2964  0076EE                     STR_227:
  2965  0076EE  53                 	db	83	;'S'
  2966  0076EF  54                 	db	84	;'T'
  2967  0076F0  41                 	db	65	;'A'
  2968  0076F1  54                 	db	84	;'T'
  2969  0076F2  20                 	db	32
  2970  0076F3  2D                 	db	45
  2971  0076F4  20                 	db	32
  2972  0076F5  44                 	db	68	;'D'
  2973  0076F6  69                 	db	105	;'i'
  2974  0076F7  73                 	db	115	;'s'
  2975  0076F8  70                 	db	112	;'p'
  2976  0076F9  6C                 	db	108	;'l'
  2977  0076FA  61                 	db	97	;'a'
  2978  0076FB  79                 	db	121	;'y'
  2979  0076FC  20                 	db	32
  2980  0076FD  43                 	db	67	;'C'
  2981  0076FE  41                 	db	65	;'A'
  2982  0076FF  4E                 	db	78	;'N'
  2983  007700  20                 	db	32
  2984  007701  73                 	db	115	;'s'
  2985  007702  74                 	db	116	;'t'
  2986  007703  61                 	db	97	;'a'
  2987  007704  74                 	db	116	;'t'
  2988  007705  69                 	db	105	;'i'
  2989  007706  73                 	db	115	;'s'
  2990  007707  74                 	db	116	;'t'
  2991  007708  69                 	db	105	;'i'
  2992  007709  63                 	db	99	;'c'
  2993  00770A  73                 	db	115	;'s'
  2994  00770B  2E                 	db	46
  2995  00770C  0D                 	db	13
  2996  00770D  0A                 	db	10
  2997  00770E  00                 	db	0
  2998  00770F                     STR_37:
  2999  00770F  2D                 	db	45
  3000  007710  45                 	db	69	;'E'
  3001  007711  52                 	db	82	;'R'
  3002  007712  52                 	db	82	;'R'
  3003  007713  4F                 	db	79	;'O'
  3004  007714  52                 	db	82	;'R'
  3005  007715  20                 	db	32
  3006  007716  2D                 	db	45
  3007  007717  20                 	db	32
  3008  007718  46                 	db	70	;'F'
  3009  007719  61                 	db	97	;'a'
  3010  00771A  69                 	db	105	;'i'
  3011  00771B  6C                 	db	108	;'l'
  3012  00771C  65                 	db	101	;'e'
  3013  00771D  64                 	db	100	;'d'
  3014  00771E  20                 	db	32
  3015  00771F  74                 	db	116	;'t'
  3016  007720  6F                 	db	111	;'o'
  3017  007721  20                 	db	32
  3018  007722  73                 	db	115	;'s'
  3019  007723  65                 	db	101	;'e'
  3020  007724  6E                 	db	110	;'n'
  3021  007725  64                 	db	100	;'d'
  3022  007726  20                 	db	32
  3023  007727  65                 	db	101	;'e'
  3024  007728  76                 	db	118	;'v'
  3025  007729  65                 	db	101	;'e'
  3026  00772A  6E                 	db	110	;'n'
  3027  00772B  74                 	db	116	;'t'
  3028  00772C  2E                 	db	46
  3029  00772D  0D                 	db	13
  3030  00772E  0A                 	db	10
  3031  00772F  00                 	db	0
  3032  007730                     STR_138:
  3033  007730  2D                 	db	45
  3034  007731  45                 	db	69	;'E'
  3035  007732  52                 	db	82	;'R'
  3036  007733  52                 	db	82	;'R'
  3037  007734  4F                 	db	79	;'O'
  3038  007735  52                 	db	82	;'R'
  3039  007736  20                 	db	32
  3040  007737  2D                 	db	45
  3041  007738  20                 	db	32
  3042  007739  55                 	db	85	;'U'
  3043  00773A  6E                 	db	110	;'n'
  3044  00773B  6B                 	db	107	;'k'
  3045  00773C  6E                 	db	110	;'n'
  3046  00773D  6F                 	db	111	;'o'
  3047  00773E  77                 	db	119	;'w'
  3048  00773F  6E                 	db	110	;'n'
  3049  007740  20                 	db	32
  3050  007741  27                 	db	39
  3051  007742  53                 	db	83	;'S'
  3052  007743  45                 	db	69	;'E'
  3053  007744  54                 	db	84	;'T'
  3054  007745  27                 	db	39
  3055  007746  20                 	db	32
  3056  007747  63                 	db	99	;'c'
  3057  007748  6F                 	db	111	;'o'
  3058  007749  6D                 	db	109	;'m'
  3059  00774A  6D                 	db	109	;'m'
  3060  00774B  61                 	db	97	;'a'
  3061  00774C  6E                 	db	110	;'n'
  3062  00774D  64                 	db	100	;'d'
  3063  00774E  0D                 	db	13
  3064  00774F  0A                 	db	10
  3065  007750  00                 	db	0
  3066  007751                     STR_88:
  3067  007751  2D                 	db	45
  3068  007752  45                 	db	69	;'E'
  3069  007753  52                 	db	82	;'R'
  3070  007754  52                 	db	82	;'R'
  3071  007755  4F                 	db	79	;'O'
  3072  007756  52                 	db	82	;'R'
  3073  007757  20                 	db	32
  3074  007758  2D                 	db	45
  3075  007759  20                 	db	32
  3076  00775A  46                 	db	70	;'F'
  3077  00775B  61                 	db	97	;'a'
  3078  00775C  69                 	db	105	;'i'
  3079  00775D  6C                 	db	108	;'l'
  3080  00775E  65                 	db	101	;'e'
  3081  00775F  64                 	db	100	;'d'
  3082  007760  20                 	db	32
  3083  007761  74                 	db	116	;'t'
  3084  007762  6F                 	db	111	;'o'
  3085  007763  20                 	db	32
  3086  007764  77                 	db	119	;'w'
  3087  007765  72                 	db	114	;'r'
  3088  007766  69                 	db	105	;'i'
  3089  007767  74                 	db	116	;'t'
  3090  007768  65                 	db	101	;'e'
  3091  007769  20                 	db	32
  3092  00776A  76                 	db	118	;'v'
  3093  00776B  61                 	db	97	;'a'
  3094  00776C  6C                 	db	108	;'l'
  3095  00776D  75                 	db	117	;'u'
  3096  00776E  65                 	db	101	;'e'
  3097  00776F  0D                 	db	13
  3098  007770  0A                 	db	10
  3099  007771  00                 	db	0
  3100  007772                     STR_53:
  3101  007772  2D                 	db	45
  3102  007773  45                 	db	69	;'E'
  3103  007774  52                 	db	82	;'R'
  3104  007775  52                 	db	82	;'R'
  3105  007776  4F                 	db	79	;'O'
  3106  007777  52                 	db	82	;'R'
  3107  007778  20                 	db	32
  3108  007779  2D                 	db	45
  3109  00777A  20                 	db	32
  3110  00777B  4E                 	db	78	;'N'
  3111  00777C  65                 	db	101	;'e'
  3112  00777D  65                 	db	101	;'e'
  3113  00777E  64                 	db	100	;'d'
  3114  00777F  73                 	db	115	;'s'
  3115  007780  20                 	db	32
  3116  007781  5B                 	db	91	;'['
  3117  007782  70                 	db	112	;'p'
  3118  007783  61                 	db	97	;'a'
  3119  007784  67                 	db	103	;'g'
  3120  007785  65                 	db	101	;'e'
  3121  007786  3A                 	db	58	;':'
  3122  007787  5D                 	db	93	;']'
  3123  007788  72                 	db	114	;'r'
  3124  007789  65                 	db	101	;'e'
  3125  00778A  67                 	db	103	;'g'
  3126  00778B  69                 	db	105	;'i'
  3127  00778C  73                 	db	115	;'s'
  3128  00778D  74                 	db	116	;'t'
  3129  00778E  65                 	db	101	;'e'
  3130  00778F  72                 	db	114	;'r'
  3131  007790  0D                 	db	13
  3132  007791  0A                 	db	10
  3133  007792  00                 	db	0
  3134  007793                     STR_133:
  3135  007793  2B                 	db	43
  3136  007794  4F                 	db	79	;'O'
  3137  007795  4B                 	db	75	;'K'
  3138  007796  20                 	db	32
  3139  007797  2D                 	db	45
  3140  007798  20                 	db	32
  3141  007799  4D                 	db	77	;'M'
  3142  00779A  6F                 	db	111	;'o'
  3143  00779B  64                 	db	100	;'d'
  3144  00779C  65                 	db	101	;'e'
  3145  00779D  20                 	db	32
  3146  00779E  69                 	db	105	;'i'
  3147  00779F  73                 	db	115	;'s'
  3148  0077A0  20                 	db	32
  3149  0077A1  6E                 	db	110	;'n'
  3150  0077A2  6F                 	db	111	;'o'
  3151  0077A3  77                 	db	119	;'w'
  3152  0077A4  20                 	db	32
  3153  0077A5  56                 	db	86	;'V'
  3154  0077A6  53                 	db	83	;'S'
  3155  0077A7  43                 	db	67	;'C'
  3156  0077A8  50                 	db	80	;'P'
  3157  0077A9  20                 	db	32
  3158  0077AA  44                 	db	68	;'D'
  3159  0077AB  72                 	db	114	;'r'
  3160  0077AC  69                 	db	105	;'i'
  3161  0077AD  76                 	db	118	;'v'
  3162  0077AE  65                 	db	101	;'e'
  3163  0077AF  72                 	db	114	;'r'
  3164  0077B0  0D                 	db	13
  3165  0077B1  0A                 	db	10
  3166  0077B2  00                 	db	0
  3167  0077B3                     STR_7:
  3168  0077B3  57                 	db	87	;'W'
  3169  0077B4  69                 	db	105	;'i'
  3170  0077B5  6C                 	db	108	;'l'
  3171  0077B6  6C                 	db	108	;'l'
  3172  0077B7  20                 	db	32
  3173  0077B8  65                 	db	101	;'e'
  3174  0077B9  6E                 	db	110	;'n'
  3175  0077BA  74                 	db	116	;'t'
  3176  0077BB  65                 	db	101	;'e'
  3177  0077BC  72                 	db	114	;'r'
  3178  0077BD  20                 	db	32
  3179  0077BE  62                 	db	98	;'b'
  3180  0077BF  6F                 	db	111	;'o'
  3181  0077C0  6F                 	db	111	;'o'
  3182  0077C1  74                 	db	116	;'t'
  3183  0077C2  6C                 	db	108	;'l'
  3184  0077C3  6F                 	db	111	;'o'
  3185  0077C4  61                 	db	97	;'a'
  3186  0077C5  64                 	db	100	;'d'
  3187  0077C6  65                 	db	101	;'e'
  3188  0077C7  72                 	db	114	;'r'
  3189  0077C8  20                 	db	32
  3190  0077C9  6E                 	db	110	;'n'
  3191  0077CA  6F                 	db	111	;'o'
  3192  0077CB  77                 	db	119	;'w'
  3193  0077CC  2E                 	db	46
  3194  0077CD  2E                 	db	46
  3195  0077CE  2E                 	db	46
  3196  0077CF  0D                 	db	13
  3197  0077D0  0A                 	db	10
  3198  0077D1  00                 	db	0
  3199  0077D2                     STR_221:
  3200  0077D2  43                 	db	67	;'C'
  3201  0077D3  4C                 	db	76	;'L'
  3202  0077D4  4F                 	db	79	;'O'
  3203  0077D5  53                 	db	83	;'S'
  3204  0077D6  45                 	db	69	;'E'
  3205  0077D7  20                 	db	32
  3206  0077D8  2D                 	db	45
  3207  0077D9  20                 	db	32
  3208  0077DA  43                 	db	67	;'C'
  3209  0077DB  6C                 	db	108	;'l'
  3210  0077DC  6F                 	db	111	;'o'
  3211  0077DD  73                 	db	115	;'s'
  3212  0077DE  65                 	db	101	;'e'
  3213  0077DF  20                 	db	32
  3214  0077E0  43                 	db	67	;'C'
  3215  0077E1  41                 	db	65	;'A'
  3216  0077E2  4E                 	db	78	;'N'
  3217  0077E3  20                 	db	32
  3218  0077E4  69                 	db	105	;'i'
  3219  0077E5  6E                 	db	110	;'n'
  3220  0077E6  74                 	db	116	;'t'
  3221  0077E7  65                 	db	101	;'e'
  3222  0077E8  72                 	db	114	;'r'
  3223  0077E9  66                 	db	102	;'f'
  3224  0077EA  61                 	db	97	;'a'
  3225  0077EB  63                 	db	99	;'c'
  3226  0077EC  65                 	db	101	;'e'
  3227  0077ED  2E                 	db	46
  3228  0077EE  0D                 	db	13
  3229  0077EF  0A                 	db	10
  3230  0077F0  00                 	db	0
  3231  0077F1                     STR_5:
  3232  0077F1  54                 	db	84	;'T'
  3233  0077F2  65                 	db	101	;'e'
  3234  0077F3  6D                 	db	109	;'m'
  3235  0077F4  70                 	db	112	;'p'
  3236  0077F5  6F                 	db	111	;'o'
  3237  0077F6  72                 	db	114	;'r'
  3238  0077F7  61                 	db	97	;'a'
  3239  0077F8  72                 	db	114	;'r'
  3240  0077F9  79                 	db	121	;'y'
  3241  0077FA  20                 	db	32
  3242  0077FB  76                 	db	118	;'v'
  3243  0077FC  65                 	db	101	;'e'
  3244  0077FD  72                 	db	114	;'r'
  3245  0077FE  62                 	db	98	;'b'
  3246  0077FF  6F                 	db	111	;'o'
  3247  007800  73                 	db	115	;'s'
  3248  007801  65                 	db	101	;'e'
  3249  007802  20                 	db	32
  3250  007803  6D                 	db	109	;'m'
  3251  007804  6F                 	db	111	;'o'
  3252  007805  64                 	db	100	;'d'
  3253  007806  65                 	db	101	;'e'
  3254  007807  20                 	db	32
  3255  007808  73                 	db	115	;'s'
  3256  007809  65                 	db	101	;'e'
  3257  00780A  74                 	db	116	;'t'
  3258  00780B  0D                 	db	13
  3259  00780C  0A                 	db	10
  3260  00780D  00                 	db	0
  3261  00780E                     STR_131:
  3262  00780E  2B                 	db	43
  3263  00780F  4F                 	db	79	;'O'
  3264  007810  4B                 	db	75	;'K'
  3265  007811  20                 	db	32
  3266  007812  2D                 	db	45
  3267  007813  20                 	db	32
  3268  007814  4D                 	db	77	;'M'
  3269  007815  6F                 	db	111	;'o'
  3270  007816  64                 	db	100	;'d'
  3271  007817  65                 	db	101	;'e'
  3272  007818  20                 	db	32
  3273  007819  69                 	db	105	;'i'
  3274  00781A  73                 	db	115	;'s'
  3275  00781B  20                 	db	32
  3276  00781C  6E                 	db	110	;'n'
  3277  00781D  6F                 	db	111	;'o'
  3278  00781E  77                 	db	119	;'w'
  3279  00781F  20                 	db	32
  3280  007820  76                 	db	118	;'v'
  3281  007821  65                 	db	101	;'e'
  3282  007822  72                 	db	114	;'r'
  3283  007823  62                 	db	98	;'b'
  3284  007824  6F                 	db	111	;'o'
  3285  007825  73                 	db	115	;'s'
  3286  007826  65                 	db	101	;'e'
  3287  007827  0D                 	db	13
  3288  007828  0A                 	db	10
  3289  007829  00                 	db	0
  3290  00782A                     STR_216:
  3291  00782A  42                 	db	66	;'B'
  3292  00782B  4F                 	db	79	;'O'
  3293  00782C  4F                 	db	79	;'O'
  3294  00782D  54                 	db	84	;'T'
  3295  00782E  20                 	db	32
  3296  00782F  2D                 	db	45
  3297  007830  20                 	db	32
  3298  007831  45                 	db	69	;'E'
  3299  007832  6E                 	db	110	;'n'
  3300  007833  74                 	db	116	;'t'
  3301  007834  65                 	db	101	;'e'
  3302  007835  72                 	db	114	;'r'
  3303  007836  20                 	db	32
  3304  007837  62                 	db	98	;'b'
  3305  007838  6F                 	db	111	;'o'
  3306  007839  6F                 	db	111	;'o'
  3307  00783A  74                 	db	116	;'t'
  3308  00783B  6C                 	db	108	;'l'
  3309  00783C  6F                 	db	111	;'o'
  3310  00783D  61                 	db	97	;'a'
  3311  00783E  64                 	db	100	;'d'
  3312  00783F  65                 	db	101	;'e'
  3313  007840  72                 	db	114	;'r'
  3314  007841  2E                 	db	46
  3315  007842  0D                 	db	13
  3316  007843  0A                 	db	10
  3317  007844  00                 	db	0
  3318  007845                     STR_140:
  3319  007845  2D                 	db	45
  3320  007846  45                 	db	69	;'E'
  3321  007847  52                 	db	82	;'R'
  3322  007848  52                 	db	82	;'R'
  3323  007849  4F                 	db	79	;'O'
  3324  00784A  52                 	db	82	;'R'
  3325  00784B  20                 	db	32
  3326  00784C  2D                 	db	45
  3327  00784D  20                 	db	32
  3328  00784E  55                 	db	85	;'U'
  3329  00784F  6E                 	db	110	;'n'
  3330  007850  6B                 	db	107	;'k'
  3331  007851  6E                 	db	110	;'n'
  3332  007852  6F                 	db	111	;'o'
  3333  007853  77                 	db	119	;'w'
  3334  007854  6E                 	db	110	;'n'
  3335  007855  20                 	db	32
  3336  007856  63                 	db	99	;'c'
  3337  007857  6F                 	db	111	;'o'
  3338  007858  6D                 	db	109	;'m'
  3339  007859  6D                 	db	109	;'m'
  3340  00785A  61                 	db	97	;'a'
  3341  00785B  6E                 	db	110	;'n'
  3342  00785C  64                 	db	100	;'d'
  3343  00785D  0D                 	db	13
  3344  00785E  0A                 	db	10
  3345  00785F  00                 	db	0
  3346  007860                     STR_247:
  3347  007860  4E                 	db	78	;'N'
  3348  007861  6F                 	db	111	;'o'
  3349  007862  64                 	db	100	;'d'
  3350  007863  65                 	db	101	;'e'
  3351  007864  20                 	db	32
  3352  007865  66                 	db	102	;'f'
  3353  007866  6F                 	db	111	;'o'
  3354  007867  75                 	db	117	;'u'
  3355  007868  6E                 	db	110	;'n'
  3356  007869  64                 	db	100	;'d'
  3357  00786A  20                 	db	32
  3358  00786B  77                 	db	119	;'w'
  3359  00786C  69                 	db	105	;'i'
  3360  00786D  74                 	db	116	;'t'
  3361  00786E  68                 	db	104	;'h'
  3362  00786F  20                 	db	32
  3363  007870  6E                 	db	110	;'n'
  3364  007871  6F                 	db	111	;'o'
  3365  007872  64                 	db	100	;'d'
  3366  007873  65                 	db	101	;'e'
  3367  007874  20                 	db	32
  3368  007875  69                 	db	105	;'i'
  3369  007876  64                 	db	100	;'d'
  3370  007877  20                 	db	32
  3371  007878  3D                 	db	61	;'='
  3372  007879  20                 	db	32
  3373  00787A  00                 	db	0
  3374  00787B                     STR_135:
  3375  00787B  2B                 	db	43
  3376  00787C  4F                 	db	79	;'O'
  3377  00787D  4B                 	db	75	;'K'
  3378  00787E  20                 	db	32
  3379  00787F  2D                 	db	45
  3380  007880  20                 	db	32
  3381  007881  4D                 	db	77	;'M'
  3382  007882  6F                 	db	111	;'o'
  3383  007883  64                 	db	100	;'d'
  3384  007884  65                 	db	101	;'e'
  3385  007885  20                 	db	32
  3386  007886  69                 	db	105	;'i'
  3387  007887  73                 	db	115	;'s'
  3388  007888  20                 	db	32
  3389  007889  6E                 	db	110	;'n'
  3390  00788A  6F                 	db	111	;'o'
  3391  00788B  77                 	db	119	;'w'
  3392  00788C  20                 	db	32
  3393  00788D  53                 	db	83	;'S'
  3394  00788E  4C                 	db	76	;'L'
  3395  00788F  43                 	db	67	;'C'
  3396  007890  41                 	db	65	;'A'
  3397  007891  4E                 	db	78	;'N'
  3398  007892  0D                 	db	13
  3399  007893  0A                 	db	10
  3400  007894  00                 	db	0
  3401  007895                     STR_25:
  3402  007895  2B                 	db	43
  3403  007896  4F                 	db	79	;'O'
  3404  007897  4B                 	db	75	;'K'
  3405  007898  20                 	db	32
  3406  007899  2D                 	db	45
  3407  00789A  20                 	db	32
  3408  00789B  4C                 	db	76	;'L'
  3409  00789C  69                 	db	105	;'i'
  3410  00789D  73                 	db	115	;'s'
  3411  00789E  74                 	db	116	;'t'
  3412  00789F  65                 	db	101	;'e'
  3413  0078A0  6E                 	db	110	;'n'
  3414  0078A1  20                 	db	32
  3415  0078A2  6F                 	db	111	;'o'
  3416  0078A3  6E                 	db	110	;'n'
  3417  0078A4  6C                 	db	108	;'l'
  3418  0078A5  79                 	db	121	;'y'
  3419  0078A6  20                 	db	32
  3420  0078A7  6D                 	db	109	;'m'
  3421  0078A8  6F                 	db	111	;'o'
  3422  0078A9  64                 	db	100	;'d'
  3423  0078AA  65                 	db	101	;'e'
  3424  0078AB  0D                 	db	13
  3425  0078AC  0A                 	db	10
  3426  0078AD  00                 	db	0
  3427  0078AE                     STR_200:
  3428  0078AE  54                 	db	84	;'T'
  3429  0078AF  72                 	db	114	;'r'
  3430  0078B0  61                 	db	97	;'a'
  3431  0078B1  6E                 	db	110	;'n'
  3432  0078B2  73                 	db	115	;'s'
  3433  0078B3  6D                 	db	109	;'m'
  3434  0078B4  69                 	db	105	;'i'
  3435  0078B5  74                 	db	116	;'t'
  3436  0078B6  20                 	db	32
  3437  0078B7  45                 	db	69	;'E'
  3438  0078B8  72                 	db	114	;'r'
  3439  0078B9  72                 	db	114	;'r'
  3440  0078BA  6F                 	db	111	;'o'
  3441  0078BB  72                 	db	114	;'r'
  3442  0078BC  20                 	db	32
  3443  0078BD  43                 	db	67	;'C'
  3444  0078BE  6F                 	db	111	;'o'
  3445  0078BF  75                 	db	117	;'u'
  3446  0078C0  6E                 	db	110	;'n'
  3447  0078C1  74                 	db	116	;'t'
  3448  0078C2  65                 	db	101	;'e'
  3449  0078C3  72                 	db	114	;'r'
  3450  0078C4  3A                 	db	58	;':'
  3451  0078C5  20                 	db	32
  3452  0078C6  00                 	db	0
  3453  0078C7                     STR_72:
  3454  0078C7  55                 	db	85	;'U'
  3455  0078C8  6E                 	db	110	;'n'
  3456  0078C9  61                 	db	97	;'a'
  3457  0078CA  62                 	db	98	;'b'
  3458  0078CB  6C                 	db	108	;'l'
  3459  0078CC  65                 	db	101	;'e'
  3460  0078CD  20                 	db	32
  3461  0078CE  74                 	db	116	;'t'
  3462  0078CF  6F                 	db	111	;'o'
  3463  0078D0  20                 	db	32
  3464  0078D1  72                 	db	114	;'r'
  3465  0078D2  65                 	db	101	;'e'
  3466  0078D3  61                 	db	97	;'a'
  3467  0078D4  64                 	db	100	;'d'
  3468  0078D5  20                 	db	32
  3469  0078D6  72                 	db	114	;'r'
  3470  0078D7  65                 	db	101	;'e'
  3471  0078D8  67                 	db	103	;'g'
  3472  0078D9  69                 	db	105	;'i'
  3473  0078DA  73                 	db	115	;'s'
  3474  0078DB  74                 	db	116	;'t'
  3475  0078DC  65                 	db	101	;'e'
  3476  0078DD  72                 	db	114	;'r'
  3477  0078DE  20                 	db	32
  3478  0078DF  00                 	db	0
  3479  0078E0                     STR_224:
  3480  0078E0  54                 	db	84	;'T'
  3481  0078E1  58                 	db	88	;'X'
  3482  0078E2  20                 	db	32
  3483  0078E3  2D                 	db	45
  3484  0078E4  20                 	db	32
  3485  0078E5  53                 	db	83	;'S'
  3486  0078E6  65                 	db	101	;'e'
  3487  0078E7  6E                 	db	110	;'n'
  3488  0078E8  64                 	db	100	;'d'
  3489  0078E9  20                 	db	32
  3490  0078EA  43                 	db	67	;'C'
  3491  0078EB  41                 	db	65	;'A'
  3492  0078EC  4E                 	db	78	;'N'
  3493  0078ED  20                 	db	32
  3494  0078EE  66                 	db	102	;'f'
  3495  0078EF  72                 	db	114	;'r'
  3496  0078F0  61                 	db	97	;'a'
  3497  0078F1  6D                 	db	109	;'m'
  3498  0078F2  65                 	db	101	;'e'
  3499  0078F3  20                 	db	32
  3500  0078F4  2E                 	db	46
  3501  0078F5  0D                 	db	13
  3502  0078F6  0A                 	db	10
  3503  0078F7  00                 	db	0
  3504  0078F8                     STR_234:
  3505  0078F8  46                 	db	70	;'F'
  3506  0078F9  49                 	db	73	;'I'
  3507  0078FA  4C                 	db	76	;'L'
  3508  0078FB  54                 	db	84	;'T'
  3509  0078FC  45                 	db	69	;'E'
  3510  0078FD  52                 	db	82	;'R'
  3511  0078FE  20                 	db	32
  3512  0078FF  2D                 	db	45
  3513  007900  20                 	db	32
  3514  007901  53                 	db	83	;'S'
  3515  007902  65                 	db	101	;'e'
  3516  007903  74                 	db	116	;'t'
  3517  007904  20                 	db	32
  3518  007905  66                 	db	102	;'f'
  3519  007906  69                 	db	105	;'i'
  3520  007907  6C                 	db	108	;'l'
  3521  007908  74                 	db	116	;'t'
  3522  007909  65                 	db	101	;'e'
  3523  00790A  72                 	db	114	;'r'
  3524  00790B  20                 	db	32
  3525  00790C  2E                 	db	46
  3526  00790D  0D                 	db	13
  3527  00790E  0A                 	db	10
  3528  00790F  00                 	db	0
  3529  007910                     STR_51:
  3530  007910  2D                 	db	45
  3531  007911  45                 	db	69	;'E'
  3532  007912  52                 	db	82	;'R'
  3533  007913  52                 	db	82	;'R'
  3534  007914  4F                 	db	79	;'O'
  3535  007915  52                 	db	82	;'R'
  3536  007916  20                 	db	32
  3537  007917  2D                 	db	45
  3538  007918  20                 	db	32
  3539  007919  4E                 	db	78	;'N'
  3540  00791A  65                 	db	101	;'e'
  3541  00791B  65                 	db	101	;'e'
  3542  00791C  64                 	db	100	;'d'
  3543  00791D  73                 	db	115	;'s'
  3544  00791E  20                 	db	32
  3545  00791F  6E                 	db	110	;'n'
  3546  007920  6F                 	db	111	;'o'
  3547  007921  64                 	db	100	;'d'
  3548  007922  65                 	db	101	;'e'
  3549  007923  69                 	db	105	;'i'
  3550  007924  64                 	db	100	;'d'
  3551  007925  0D                 	db	13
  3552  007926  0A                 	db	10
  3553  007927  00                 	db	0
  3554  007928                     STR_28:
  3555  007928  2D                 	db	45
  3556  007929  45                 	db	69	;'E'
  3557  00792A  52                 	db	82	;'R'
  3558  00792B  52                 	db	82	;'R'
  3559  00792C  4F                 	db	79	;'O'
  3560  00792D  52                 	db	82	;'R'
  3561  00792E  20                 	db	32
  3562  00792F  2D                 	db	45
  3563  007930  20                 	db	32
  3564  007931  55                 	db	85	;'U'
  3565  007932  6E                 	db	110	;'n'
  3566  007933  6B                 	db	107	;'k'
  3567  007934  6E                 	db	110	;'n'
  3568  007935  6F                 	db	111	;'o'
  3569  007936  77                 	db	119	;'w'
  3570  007937  6E                 	db	110	;'n'
  3571  007938  20                 	db	32
  3572  007939  6D                 	db	109	;'m'
  3573  00793A  6F                 	db	111	;'o'
  3574  00793B  64                 	db	100	;'d'
  3575  00793C  65                 	db	101	;'e'
  3576  00793D  0D                 	db	13
  3577  00793E  0A                 	db	10
  3578  00793F  00                 	db	0
  3579  007940                     STR_86:
  3580  007940  2D                 	db	45
  3581  007941  45                 	db	69	;'E'
  3582  007942  52                 	db	82	;'R'
  3583  007943  52                 	db	82	;'R'
  3584  007944  4F                 	db	79	;'O'
  3585  007945  52                 	db	82	;'R'
  3586  007946  20                 	db	32
  3587  007947  2D                 	db	45
  3588  007948  20                 	db	32
  3589  007949  4E                 	db	78	;'N'
  3590  00794A  65                 	db	101	;'e'
  3591  00794B  65                 	db	101	;'e'
  3592  00794C  64                 	db	100	;'d'
  3593  00794D  20                 	db	32
  3594  00794E  61                 	db	97	;'a'
  3595  00794F  20                 	db	32
  3596  007950  76                 	db	118	;'v'
  3597  007951  61                 	db	97	;'a'
  3598  007952  6C                 	db	108	;'l'
  3599  007953  75                 	db	117	;'u'
  3600  007954  65                 	db	101	;'e'
  3601  007955  0D                 	db	13
  3602  007956  0A                 	db	10
  3603  007957  00                 	db	0
  3604  007958                     STR_207:
  3605  007958  52                 	db	82	;'R'
  3606  007959  65                 	db	101	;'e'
  3607  00795A  63                 	db	99	;'c'
  3608  00795B  65                 	db	101	;'e'
  3609  00795C  69                 	db	105	;'i'
  3610  00795D  76                 	db	118	;'v'
  3611  00795E  65                 	db	101	;'e'
  3612  00795F  20                 	db	32
  3613  007960  45                 	db	69	;'E'
  3614  007961  72                 	db	114	;'r'
  3615  007962  72                 	db	114	;'r'
  3616  007963  6F                 	db	111	;'o'
  3617  007964  72                 	db	114	;'r'
  3618  007965  20                 	db	32
  3619  007966  43                 	db	67	;'C'
  3620  007967  6F                 	db	111	;'o'
  3621  007968  75                 	db	117	;'u'
  3622  007969  6E                 	db	110	;'n'
  3623  00796A  74                 	db	116	;'t'
  3624  00796B  65                 	db	101	;'e'
  3625  00796C  72                 	db	114	;'r'
  3626  00796D  3A                 	db	58	;':'
  3627  00796E  20                 	db	32
  3628  00796F  00                 	db	0
  3629  007970                     STR_192:
  3630  007970  55                 	db	85	;'U'
  3631  007971  41                 	db	65	;'A'
  3632  007972  52                 	db	82	;'R'
  3633  007973  54                 	db	84	;'T'
  3634  007974  20                 	db	32
  3635  007975  52                 	db	82	;'R'
  3636  007976  65                 	db	101	;'e'
  3637  007977  63                 	db	99	;'c'
  3638  007978  65                 	db	101	;'e'
  3639  007979  69                 	db	105	;'i'
  3640  00797A  76                 	db	118	;'v'
  3641  00797B  65                 	db	101	;'e'
  3642  00797C  20                 	db	32
  3643  00797D  6F                 	db	111	;'o'
  3644  00797E  76                 	db	118	;'v'
  3645  00797F  65                 	db	101	;'e'
  3646  007980  72                 	db	114	;'r'
  3647  007981  72                 	db	114	;'r'
  3648  007982  75                 	db	117	;'u'
  3649  007983  6E                 	db	110	;'n'
  3650  007984  73                 	db	115	;'s'
  3651  007985  3A                 	db	58	;':'
  3652  007986  20                 	db	32
  3653  007987  00                 	db	0
  3654  007988                     STR_188:
  3655  007988  43                 	db	67	;'C'
  3656  007989  41                 	db	65	;'A'
  3657  00798A  4E                 	db	78	;'N'
  3658  00798B  20                 	db	32
  3659  00798C  54                 	db	84	;'T'
  3660  00798D  72                 	db	114	;'r'
  3661  00798E  61                 	db	97	;'a'
  3662  00798F  6E                 	db	110	;'n'
  3663  007990  73                 	db	115	;'s'
  3664  007991  6D                 	db	109	;'m'
  3665  007992  69                 	db	105	;'i'
  3666  007993  74                 	db	116	;'t'
  3667  007994  20                 	db	32
  3668  007995  6F                 	db	111	;'o'
  3669  007996  76                 	db	118	;'v'
  3670  007997  65                 	db	101	;'e'
  3671  007998  72                 	db	114	;'r'
  3672  007999  72                 	db	114	;'r'
  3673  00799A  75                 	db	117	;'u'
  3674  00799B  6E                 	db	110	;'n'
  3675  00799C  73                 	db	115	;'s'
  3676  00799D  3A                 	db	58	;':'
  3677  00799E  20                 	db	32
  3678  00799F  00                 	db	0
  3679  0079A0                     STR_226:
  3680  0079A0  52                 	db	82	;'R'
  3681  0079A1  58                 	db	88	;'X'
  3682  0079A2  20                 	db	32
  3683  0079A3  2D                 	db	45
  3684  0079A4  20                 	db	32
  3685  0079A5  52                 	db	82	;'R'
  3686  0079A6  65                 	db	101	;'e'
  3687  0079A7  61                 	db	97	;'a'
  3688  0079A8  64                 	db	100	;'d'
  3689  0079A9  20                 	db	32
  3690  0079AA  43                 	db	67	;'C'
  3691  0079AB  41                 	db	65	;'A'
  3692  0079AC  4E                 	db	78	;'N'
  3693  0079AD  20                 	db	32
  3694  0079AE  66                 	db	102	;'f'
  3695  0079AF  72                 	db	114	;'r'
  3696  0079B0  61                 	db	97	;'a'
  3697  0079B1  6D                 	db	109	;'m'
  3698  0079B2  65                 	db	101	;'e'
  3699  0079B3  2E                 	db	46
  3700  0079B4  0D                 	db	13
  3701  0079B5  0A                 	db	10
  3702  0079B6  00                 	db	0
  3703  0079B7                     STR_184:
  3704  0079B7  43                 	db	67	;'C'
  3705  0079B8  41                 	db	65	;'A'
  3706  0079B9  4E                 	db	78	;'N'
  3707  0079BA  20                 	db	32
  3708  0079BB  52                 	db	82	;'R'
  3709  0079BC  65                 	db	101	;'e'
  3710  0079BD  63                 	db	99	;'c'
  3711  0079BE  65                 	db	101	;'e'
  3712  0079BF  69                 	db	105	;'i'
  3713  0079C0  76                 	db	118	;'v'
  3714  0079C1  65                 	db	101	;'e'
  3715  0079C2  20                 	db	32
  3716  0079C3  6F                 	db	111	;'o'
  3717  0079C4  76                 	db	118	;'v'
  3718  0079C5  65                 	db	101	;'e'
  3719  0079C6  72                 	db	114	;'r'
  3720  0079C7  72                 	db	114	;'r'
  3721  0079C8  75                 	db	117	;'u'
  3722  0079C9  6E                 	db	110	;'n'
  3723  0079CA  73                 	db	115	;'s'
  3724  0079CB  3A                 	db	58	;':'
  3725  0079CC  20                 	db	32
  3726  0079CD  00                 	db	0
  3727  0079CE                     STR_269:
  3728  0079CE  55                 	db	85	;'U'
  3729  0079CF  6E                 	db	110	;'n'
  3730  0079D0  6B                 	db	107	;'k'
  3731  0079D1  6E                 	db	110	;'n'
  3732  0079D2  6F                 	db	111	;'o'
  3733  0079D3  77                 	db	119	;'w'
  3734  0079D4  6E                 	db	110	;'n'
  3735  0079D5  20                 	db	32
  3736  0079D6  28                 	db	40
  3737  0079D7  56                 	db	86	;'V'
  3738  0079D8  65                 	db	101	;'e'
  3739  0079D9  72                 	db	114	;'r'
  3740  0079DA  62                 	db	98	;'b'
  3741  0079DB  6F                 	db	111	;'o'
  3742  0079DC  73                 	db	115	;'s'
  3743  0079DD  65                 	db	101	;'e'
  3744  0079DE  20                 	db	32
  3745  0079DF  75                 	db	117	;'u'
  3746  0079E0  73                 	db	115	;'s'
  3747  0079E1  65                 	db	101	;'e'
  3748  0079E2  64                 	db	100	;'d'
  3749  0079E3  29                 	db	41
  3750  0079E4  00                 	db	0
  3751  0079E5                     STR_24:
  3752  0079E5  2B                 	db	43
  3753  0079E6  4F                 	db	79	;'O'
  3754  0079E7  4B                 	db	75	;'K'
  3755  0079E8  20                 	db	32
  3756  0079E9  2D                 	db	45
  3757  0079EA  20                 	db	32
  3758  0079EB  4C                 	db	76	;'L'
  3759  0079EC  6F                 	db	111	;'o'
  3760  0079ED  6F                 	db	111	;'o'
  3761  0079EE  70                 	db	112	;'p'
  3762  0079EF  62                 	db	98	;'b'
  3763  0079F0  61                 	db	97	;'a'
  3764  0079F1  63                 	db	99	;'c'
  3765  0079F2  6B                 	db	107	;'k'
  3766  0079F3  20                 	db	32
  3767  0079F4  6D                 	db	109	;'m'
  3768  0079F5  6F                 	db	111	;'o'
  3769  0079F6  64                 	db	100	;'d'
  3770  0079F7  65                 	db	101	;'e'
  3771  0079F8  0D                 	db	13
  3772  0079F9  0A                 	db	10
  3773  0079FA  00                 	db	0
  3774  0079FB                     STR_176:
  3775  0079FB  52                 	db	82	;'R'
  3776  0079FC  65                 	db	101	;'e'
  3777  0079FD  63                 	db	99	;'c'
  3778  0079FE  65                 	db	101	;'e'
  3779  0079FF  69                 	db	105	;'i'
  3780  007A00  76                 	db	118	;'v'
  3781  007A01  65                 	db	101	;'e'
  3782  007A02  64                 	db	100	;'d'
  3783  007A03  20                 	db	32
  3784  007A04  43                 	db	67	;'C'
  3785  007A05  41                 	db	65	;'A'
  3786  007A06  4E                 	db	78	;'N'
  3787  007A07  20                 	db	32
  3788  007A08  66                 	db	102	;'f'
  3789  007A09  72                 	db	114	;'r'
  3790  007A0A  61                 	db	97	;'a'
  3791  007A0B  6D                 	db	109	;'m'
  3792  007A0C  65                 	db	101	;'e'
  3793  007A0D  73                 	db	115	;'s'
  3794  007A0E  3A                 	db	58	;':'
  3795  007A0F  20                 	db	32
  3796  007A10  00                 	db	0
  3797  007A11                     STR_180:
  3798  007A11  52                 	db	82	;'R'
  3799  007A12  65                 	db	101	;'e'
  3800  007A13  63                 	db	99	;'c'
  3801  007A14  65                 	db	101	;'e'
  3802  007A15  69                 	db	105	;'i'
  3803  007A16  76                 	db	118	;'v'
  3804  007A17  65                 	db	101	;'e'
  3805  007A18  64                 	db	100	;'d'
  3806  007A19  20                 	db	32
  3807  007A1A  43                 	db	67	;'C'
  3808  007A1B  41                 	db	65	;'A'
  3809  007A1C  4E                 	db	78	;'N'
  3810  007A1D  20                 	db	32
  3811  007A1E  62                 	db	98	;'b'
  3812  007A1F  79                 	db	121	;'y'
  3813  007A20  74                 	db	116	;'t'
  3814  007A21  65                 	db	101	;'e'
  3815  007A22  73                 	db	115	;'s'
  3816  007A23  3A                 	db	58	;':'
  3817  007A24  20                 	db	32
  3818  007A25  00                 	db	0
  3819  007A26                     STR_236:
  3820  007A26  4D                 	db	77	;'M'
  3821  007A27  41                 	db	65	;'A'
  3822  007A28  53                 	db	83	;'S'
  3823  007A29  4B                 	db	75	;'K'
  3824  007A2A  20                 	db	32
  3825  007A2B  2D                 	db	45
  3826  007A2C  20                 	db	32
  3827  007A2D  53                 	db	83	;'S'
  3828  007A2E  65                 	db	101	;'e'
  3829  007A2F  74                 	db	116	;'t'
  3830  007A30  20                 	db	32
  3831  007A31  6D                 	db	109	;'m'
  3832  007A32  61                 	db	97	;'a'
  3833  007A33  73                 	db	115	;'s'
  3834  007A34  6B                 	db	107	;'k'
  3835  007A35  20                 	db	32
  3836  007A36  2E                 	db	46
  3837  007A37  0D                 	db	13
  3838  007A38  0A                 	db	10
  3839  007A39  00                 	db	0
  3840  007A3A                     STR_141:
  3841  007A3A  4A                 	db	74	;'J'
  3842  007A3B  46                 	db	70	;'F'
  3843  007A3C  72                 	db	114	;'r'
  3844  007A3D  61                 	db	97	;'a'
  3845  007A3E  6E                 	db	110	;'n'
  3846  007A3F  6B                 	db	107	;'k'
  3847  007A40  66                 	db	102	;'f'
  3848  007A41  75                 	db	117	;'u'
  3849  007A42  72                 	db	114	;'r'
  3850  007A43  74                 	db	116	;'t'
  3851  007A44  20                 	db	32
  3852  007A45  52                 	db	82	;'R'
  3853  007A46  53                 	db	83	;'S'
  3854  007A47  2D                 	db	45
  3855  007A48  32                 	db	50	;'2'
  3856  007A49  33                 	db	51	;'3'
  3857  007A4A  32                 	db	50	;'2'
  3858  007A4B  0D                 	db	13
  3859  007A4C  0A                 	db	10
  3860  007A4D  00                 	db	0
  3861  007A4E                     STR_26:
  3862  007A4E  2B                 	db	43
  3863  007A4F  4F                 	db	79	;'O'
  3864  007A50  4B                 	db	75	;'K'
  3865  007A51  20                 	db	32
  3866  007A52  2D                 	db	45
  3867  007A53  20                 	db	32
  3868  007A54  43                 	db	67	;'C'
  3869  007A55  6C                 	db	108	;'l'
  3870  007A56  6F                 	db	111	;'o'
  3871  007A57  73                 	db	115	;'s'
  3872  007A58  65                 	db	101	;'e'
  3873  007A59  64                 	db	100	;'d'
  3874  007A5A  20                 	db	32
  3875  007A5B  6D                 	db	109	;'m'
  3876  007A5C  6F                 	db	111	;'o'
  3877  007A5D  64                 	db	100	;'d'
  3878  007A5E  65                 	db	101	;'e'
  3879  007A5F  0D                 	db	13
  3880  007A60  0A                 	db	10
  3881  007A61  00                 	db	0
  3882  007A62                     STR_21:
  3883  007A62  2B                 	db	43
  3884  007A63  4F                 	db	79	;'O'
  3885  007A64  4B                 	db	75	;'K'
  3886  007A65  20                 	db	32
  3887  007A66  2D                 	db	45
  3888  007A67  20                 	db	32
  3889  007A68  4E                 	db	78	;'N'
  3890  007A69  6F                 	db	111	;'o'
  3891  007A6A  72                 	db	114	;'r'
  3892  007A6B  6D                 	db	109	;'m'
  3893  007A6C  61                 	db	97	;'a'
  3894  007A6D  6C                 	db	108	;'l'
  3895  007A6E  20                 	db	32
  3896  007A6F  6D                 	db	109	;'m'
  3897  007A70  6F                 	db	111	;'o'
  3898  007A71  64                 	db	100	;'d'
  3899  007A72  65                 	db	101	;'e'
  3900  007A73  0D                 	db	13
  3901  007A74  0A                 	db	10
  3902  007A75  00                 	db	0
  3903  007A76                     STR_22:
  3904  007A76  2B                 	db	43
  3905  007A77  4F                 	db	79	;'O'
  3906  007A78  4B                 	db	75	;'K'
  3907  007A79  20                 	db	32
  3908  007A7A  2D                 	db	45
  3909  007A7B  20                 	db	32
  3910  007A7C  53                 	db	83	;'S'
  3911  007A7D  69                 	db	105	;'i'
  3912  007A7E  6C                 	db	108	;'l'
  3913  007A7F  65                 	db	101	;'e'
  3914  007A80  6E                 	db	110	;'n'
  3915  007A81  74                 	db	116	;'t'
  3916  007A82  20                 	db	32
  3917  007A83  6D                 	db	109	;'m'
  3918  007A84  6F                 	db	111	;'o'
  3919  007A85  64                 	db	100	;'d'
  3920  007A86  65                 	db	101	;'e'
  3921  007A87  0D                 	db	13
  3922  007A88  0A                 	db	10
  3923  007A89  00                 	db	0
  3924  007A8A                     STR_90:
  3925  007A8A  49                 	db	73	;'I'
  3926  007A8B  6E                 	db	110	;'n'
  3927  007A8C  66                 	db	102	;'f'
  3928  007A8D  6F                 	db	111	;'o'
  3929  007A8E  20                 	db	32
  3930  007A8F  66                 	db	102	;'f'
  3931  007A90  6F                 	db	111	;'o'
  3932  007A91  72                 	db	114	;'r'
  3933  007A92  20                 	db	32
  3934  007A93  6E                 	db	110	;'n'
  3935  007A94  6F                 	db	111	;'o'
  3936  007A95  64                 	db	100	;'d'
  3937  007A96  65                 	db	101	;'e'
  3938  007A97  20                 	db	32
  3939  007A98  69                 	db	105	;'i'
  3940  007A99  64                 	db	100	;'d'
  3941  007A9A  20                 	db	32
  3942  007A9B  3D                 	db	61	;'='
  3943  007A9C  20                 	db	32
  3944  007A9D  00                 	db	0
  3945  007A9E                     STR_258:
  3946  007A9E  46                 	db	70	;'F'
  3947  007A9F  69                 	db	105	;'i'
  3948  007AA0  72                 	db	114	;'r'
  3949  007AA1  6D                 	db	109	;'m'
  3950  007AA2  77                 	db	119	;'w'
  3951  007AA3  61                 	db	97	;'a'
  3952  007AA4  72                 	db	114	;'r'
  3953  007AA5  65                 	db	101	;'e'
  3954  007AA6  20                 	db	32
  3955  007AA7  76                 	db	118	;'v'
  3956  007AA8  65                 	db	101	;'e'
  3957  007AA9  72                 	db	114	;'r'
  3958  007AAA  73                 	db	115	;'s'
  3959  007AAB  69                 	db	105	;'i'
  3960  007AAC  6F                 	db	111	;'o'
  3961  007AAD  6E                 	db	110	;'n'
  3962  007AAE  20                 	db	32
  3963  007AAF  3D                 	db	61	;'='
  3964  007AB0  20                 	db	32
  3965  007AB1  00                 	db	0
  3966  007AB2                     STR_23:
  3967  007AB2  2B                 	db	43
  3968  007AB3  4F                 	db	79	;'O'
  3969  007AB4  4B                 	db	75	;'K'
  3970  007AB5  20                 	db	32
  3971  007AB6  2D                 	db	45
  3972  007AB7  20                 	db	32
  3973  007AB8  53                 	db	83	;'S'
  3974  007AB9  6C                 	db	108	;'l'
  3975  007ABA  65                 	db	101	;'e'
  3976  007ABB  65                 	db	101	;'e'
  3977  007ABC  70                 	db	112	;'p'
  3978  007ABD  20                 	db	32
  3979  007ABE  6D                 	db	109	;'m'
  3980  007ABF  6F                 	db	111	;'o'
  3981  007AC0  64                 	db	100	;'d'
  3982  007AC1  65                 	db	101	;'e'
  3983  007AC2  0D                 	db	13
  3984  007AC3  0A                 	db	10
  3985  007AC4  00                 	db	0
  3986  007AC5                     STR_27:
  3987  007AC5  2B                 	db	43
  3988  007AC6  4F                 	db	79	;'O'
  3989  007AC7  4B                 	db	75	;'K'
  3990  007AC8  20                 	db	32
  3991  007AC9  2D                 	db	45
  3992  007ACA  20                 	db	32
  3993  007ACB  42                 	db	66	;'B'
  3994  007ACC  69                 	db	105	;'i'
  3995  007ACD  74                 	db	116	;'t'
  3996  007ACE  73                 	db	115	;'s'
  3997  007ACF  20                 	db	32
  3998  007AD0  6D                 	db	109	;'m'
  3999  007AD1  6F                 	db	111	;'o'
  4000  007AD2  64                 	db	100	;'d'
  4001  007AD3  65                 	db	101	;'e'
  4002  007AD4  0D                 	db	13
  4003  007AD5  0A                 	db	10
  4004  007AD6  00                 	db	0
  4005  007AD7                     STR_40:
  4006  007AD7  2B                 	db	43
  4007  007AD8  4F                 	db	79	;'O'
  4008  007AD9  4B                 	db	75	;'K'
  4009  007ADA  20                 	db	32
  4010  007ADB  2D                 	db	45
  4011  007ADC  20                 	db	32
  4012  007ADD  6E                 	db	110	;'n'
  4013  007ADE  6F                 	db	111	;'o'
  4014  007ADF  20                 	db	32
  4015  007AE0  65                 	db	101	;'e'
  4016  007AE1  76                 	db	118	;'v'
  4017  007AE2  65                 	db	101	;'e'
  4018  007AE3  6E                 	db	110	;'n'
  4019  007AE4  74                 	db	116	;'t'
  4020  007AE5  73                 	db	115	;'s'
  4021  007AE6  0D                 	db	13
  4022  007AE7  0A                 	db	10
  4023  007AE8  00                 	db	0
  4024  007AE9                     STR_168:
  4025  007AE9  53                 	db	83	;'S'
  4026  007AEA  65                 	db	101	;'e'
  4027  007AEB  6E                 	db	110	;'n'
  4028  007AEC  74                 	db	116	;'t'
  4029  007AED  20                 	db	32
  4030  007AEE  43                 	db	67	;'C'
  4031  007AEF  41                 	db	65	;'A'
  4032  007AF0  4E                 	db	78	;'N'
  4033  007AF1  20                 	db	32
  4034  007AF2  66                 	db	102	;'f'
  4035  007AF3  72                 	db	114	;'r'
  4036  007AF4  61                 	db	97	;'a'
  4037  007AF5  6D                 	db	109	;'m'
  4038  007AF6  65                 	db	101	;'e'
  4039  007AF7  73                 	db	115	;'s'
  4040  007AF8  3A                 	db	58	;':'
  4041  007AF9  20                 	db	32
  4042  007AFA  00                 	db	0
  4043  007AFB                     STR_271:
  4044  007AFB  30                 	db	48	;'0'
  4045  007AFC  31                 	db	49	;'1'
  4046  007AFD  32                 	db	50	;'2'
  4047  007AFE  33                 	db	51	;'3'
  4048  007AFF  34                 	db	52	;'4'
  4049  007B00  35                 	db	53	;'5'
  4050  007B01  36                 	db	54	;'6'
  4051  007B02  37                 	db	55	;'7'
  4052  007B03  38                 	db	56	;'8'
  4053  007B04  39                 	db	57	;'9'
  4054  007B05  41                 	db	65	;'A'
  4055  007B06  42                 	db	66	;'B'
  4056  007B07  43                 	db	67	;'C'
  4057  007B08  44                 	db	68	;'D'
  4058  007B09  45                 	db	69	;'E'
  4059  007B0A  46                 	db	70	;'F'
  4060  007B0B  00                 	db	0
  4061  007B0C                     STR_272:
  4062  007B0C  30                 	db	48	;'0'
  4063  007B0D  31                 	db	49	;'1'
  4064  007B0E  32                 	db	50	;'2'
  4065  007B0F  33                 	db	51	;'3'
  4066  007B10  34                 	db	52	;'4'
  4067  007B11  35                 	db	53	;'5'
  4068  007B12  36                 	db	54	;'6'
  4069  007B13  37                 	db	55	;'7'
  4070  007B14  38                 	db	56	;'8'
  4071  007B15  39                 	db	57	;'9'
  4072  007B16  61                 	db	97	;'a'
  4073  007B17  62                 	db	98	;'b'
  4074  007B18  63                 	db	99	;'c'
  4075  007B19  64                 	db	100	;'d'
  4076  007B1A  65                 	db	101	;'e'
  4077  007B1B  66                 	db	102	;'f'
  4078  007B1C  00                 	db	0
  4079  007B1D                     STR_172:
  4080  007B1D  53                 	db	83	;'S'
  4081  007B1E  65                 	db	101	;'e'
  4082  007B1F  6E                 	db	110	;'n'
  4083  007B20  74                 	db	116	;'t'
  4084  007B21  20                 	db	32
  4085  007B22  43                 	db	67	;'C'
  4086  007B23  41                 	db	65	;'A'
  4087  007B24  4E                 	db	78	;'N'
  4088  007B25  20                 	db	32
  4089  007B26  62                 	db	98	;'b'
  4090  007B27  79                 	db	121	;'y'
  4091  007B28  74                 	db	116	;'t'
  4092  007B29  65                 	db	101	;'e'
  4093  007B2A  73                 	db	115	;'s'
  4094  007B2B  3A                 	db	58	;':'
  4095  007B2C  20                 	db	32
  4096  007B2D  00                 	db	0
  4097  007B2E                     STR_250:
  4098  007B2E  20                 	db	32
  4099  007B2F  6E                 	db	110	;'n'
  4100  007B30  6F                 	db	111	;'o'
  4101  007B31  64                 	db	100	;'d'
  4102  007B32  65                 	db	101	;'e'
  4103  007B33  73                 	db	115	;'s'
  4104  007B34  20                 	db	32
  4105  007B35  66                 	db	102	;'f'
  4106  007B36  6F                 	db	111	;'o'
  4107  007B37  75                 	db	117	;'u'
  4108  007B38  6E                 	db	110	;'n'
  4109  007B39  64                 	db	100	;'d'
  4110  007B3A  0D                 	db	13
  4111  007B3B  0A                 	db	10
  4112  007B3C  00                 	db	0
  4113  007B3D                     STR_58:
  4114  007B3D  56                 	db	86	;'V'
  4115  007B3E  61                 	db	97	;'a'
  4116  007B3F  6C                 	db	108	;'l'
  4117  007B40  75                 	db	117	;'u'
  4118  007B41  65                 	db	101	;'e'
  4119  007B42  20                 	db	32
  4120  007B43  66                 	db	102	;'f'
  4121  007B44  6F                 	db	111	;'o'
  4122  007B45  72                 	db	114	;'r'
  4123  007B46  20                 	db	32
  4124  007B47  72                 	db	114	;'r'
  4125  007B48  65                 	db	101	;'e'
  4126  007B49  67                 	db	103	;'g'
  4127  007B4A  20                 	db	32
  4128  007B4B  00                 	db	0
  4129  007B4C                     STR_256:
  4130  007B4C  4D                 	db	77	;'M'
  4131  007B4D  44                 	db	68	;'D'
  4132  007B4E  46                 	db	70	;'F'
  4133  007B4F  20                 	db	32
  4134  007B50  3D                 	db	61	;'='
  4135  007B51  20                 	db	32
  4136  007B52  68                 	db	104	;'h'
  4137  007B53  74                 	db	116	;'t'
  4138  007B54  74                 	db	116	;'t'
  4139  007B55  70                 	db	112	;'p'
  4140  007B56  3A                 	db	58	;':'
  4141  007B57  2F                 	db	47
  4142  007B58  2F                 	db	47
  4143  007B59  00                 	db	0
  4144  007B5A                     STR_266:
  4145  007B5A  56                 	db	86	;'V'
  4146  007B5B  53                 	db	83	;'S'
  4147  007B5C  43                 	db	67	;'C'
  4148  007B5D  50                 	db	80	;'P'
  4149  007B5E  20                 	db	32
  4150  007B5F  44                 	db	68	;'D'
  4151  007B60  72                 	db	114	;'r'
  4152  007B61  69                 	db	105	;'i'
  4153  007B62  76                 	db	118	;'v'
  4154  007B63  65                 	db	101	;'e'
  4155  007B64  72                 	db	114	;'r'
  4156  007B65  00                 	db	0
  4157  007B66                     STR_126:
  4158  007B66  52                 	db	82	;'R'
  4159  007B67  57                 	db	87	;'W'
  4160  007B68  54                 	db	84	;'T'
  4161  007B69  49                 	db	73	;'I'
  4162  007B6A  4D                 	db	77	;'M'
  4163  007B6B  45                 	db	69	;'E'
  4164  007B6C  4F                 	db	79	;'O'
  4165  007B6D  55                 	db	85	;'U'
  4166  007B6E  54                 	db	84	;'T'
  4167  007B6F  20                 	db	32
  4168  007B70  00                 	db	0
  4169  007B71                     STR_166:
  4170  007B71  2C                 	db	44
  4171  007B72  44                 	db	68	;'D'
  4172  007B73  61                 	db	97	;'a'
  4173  007B74  74                 	db	116	;'t'
  4174  007B75  61                 	db	97	;'a'
  4175  007B76  3D                 	db	61	;'='
  4176  007B77  6E                 	db	110	;'n'
  4177  007B78  6F                 	db	111	;'o'
  4178  007B79  6E                 	db	110	;'n'
  4179  007B7A  65                 	db	101	;'e'
  4180  007B7B  00                 	db	0
  4181  007B7C                     STR_56:
  4182  007B7C  30                 	db	48	;'0'
  4183  007B7D  78                 	db	120	;'x'
  4184  007B7E  25                 	db	37
  4185  007B7F  30                 	db	48	;'0'
  4186  007B80  32                 	db	50	;'2'
  4187  007B81  58                 	db	88	;'X'
  4188  007B82  20                 	db	32
  4189  007B83  2D                 	db	45
  4190  007B84  20                 	db	32
  4191  007B85  00                 	db	0
  4192  007B86                     STR_262:
  4193  007B86  56                 	db	86	;'V'
  4194  007B87  65                 	db	101	;'e'
  4195  007B88  72                 	db	114	;'r'
  4196  007B89  73                 	db	115	;'s'
  4197  007B8A  69                 	db	105	;'i'
  4198  007B8B  6F                 	db	111	;'o'
  4199  007B8C  6E                 	db	110	;'n'
  4200  007B8D  3A                 	db	58	;':'
  4201  007B8E  20                 	db	32
  4202  007B8F  00                 	db	0
  4203  007B90                     STR_268:
  4204  007B90  56                 	db	86	;'V'
  4205  007B91  53                 	db	83	;'S'
  4206  007B92  43                 	db	67	;'C'
  4207  007B93  50                 	db	80	;'P'
  4208  007B94  20                 	db	32
  4209  007B95  4E                 	db	78	;'N'
  4210  007B96  6F                 	db	111	;'o'
  4211  007B97  64                 	db	100	;'d'
  4212  007B98  65                 	db	101	;'e'
  4213  007B99  00                 	db	0
  4214  007B9A                     STR_267:
  4215  007B9A  53                 	db	83	;'S'
  4216  007B9B  4C                 	db	76	;'L'
  4217  007B9C  20                 	db	32
  4218  007B9D  44                 	db	68	;'D'
  4219  007B9E  72                 	db	114	;'r'
  4220  007B9F  69                 	db	105	;'i'
  4221  007BA0  76                 	db	118	;'v'
  4222  007BA1  65                 	db	101	;'e'
  4223  007BA2  72                 	db	114	;'r'
  4224  007BA3  00                 	db	0
  4225  007BA4                     STR_128:
  4226  007BA4  53                 	db	83	;'S'
  4227  007BA5  54                 	db	84	;'T'
  4228  007BA6  41                 	db	65	;'A'
  4229  007BA7  52                 	db	82	;'R'
  4230  007BA8  54                 	db	84	;'T'
  4231  007BA9  49                 	db	73	;'I'
  4232  007BAA  46                 	db	70	;'F'
  4233  007BAB  20                 	db	32
  4234  007BAC  00                 	db	0
  4235  007BAD                     STR_69:
  4236  007BAD  20                 	db	32
  4237  007BAE  6E                 	db	110	;'n'
  4238  007BAF  6F                 	db	111	;'o'
  4239  007BB0  64                 	db	100	;'d'
  4240  007BB1  65                 	db	101	;'e'
  4241  007BB2  69                 	db	105	;'i'
  4242  007BB3  64                 	db	100	;'d'
  4243  007BB4  3D                 	db	61	;'='
  4244  007BB5  00                 	db	0
  4245  007BB6                     STR_156:
  4246  007BB6  2C                 	db	44
  4247  007BB7  6E                 	db	110	;'n'
  4248  007BB8  6F                 	db	111	;'o'
  4249  007BB9  64                 	db	100	;'d'
  4250  007BBA  65                 	db	101	;'e'
  4251  007BBB  69                 	db	105	;'i'
  4252  007BBC  64                 	db	100	;'d'
  4253  007BBD  3D                 	db	61	;'='
  4254  007BBE  00                 	db	0
  4255  007BBF                     STR_14:
  4256  007BBF  4C                 	db	76	;'L'
  4257  007BC0  4F                 	db	79	;'O'
  4258  007BC1  4F                 	db	79	;'O'
  4259  007BC2  50                 	db	80	;'P'
  4260  007BC3  42                 	db	66	;'B'
  4261  007BC4  41                 	db	65	;'A'
  4262  007BC5  43                 	db	67	;'C'
  4263  007BC6  4B                 	db	75	;'K'
  4264  007BC7  00                 	db	0
  4265  007BC8                     STR_142:
  4266  007BC8  56                 	db	86	;'V'
  4267  007BC9  31                 	db	49	;'1'
  4268  007BCA  30                 	db	48	;'0'
  4269  007BCB  31                 	db	49	;'1'
  4270  007BCC  31                 	db	49	;'1'
  4271  007BCD  0D                 	db	13
  4272  007BCE  0A                 	db	10
  4273  007BCF  00                 	db	0
  4274  007BD0                     STR_143:
  4275  007BD0  4E                 	db	78	;'N'
  4276  007BD1  31                 	db	49	;'1'
  4277  007BD2  39                 	db	57	;'9'
  4278  007BD3  37                 	db	55	;'7'
  4279  007BD4  37                 	db	55	;'7'
  4280  007BD5  0D                 	db	13
  4281  007BD6  0A                 	db	10
  4282  007BD7  00                 	db	0
  4283  007BD8                     STR_251:
  4284  007BD8  47                 	db	71	;'G'
  4285  007BD9  55                 	db	85	;'U'
  4286  007BDA  49                 	db	73	;'I'
  4287  007BDB  44                 	db	68	;'D'
  4288  007BDC  20                 	db	32
  4289  007BDD  3D                 	db	61	;'='
  4290  007BDE  20                 	db	32
  4291  007BDF  00                 	db	0
  4292  007BE0                     STR_136:
  4293  007BE0  46                 	db	70	;'F'
  4294  007BE1  49                 	db	73	;'I'
  4295  007BE2  4C                 	db	76	;'L'
  4296  007BE3  54                 	db	84	;'T'
  4297  007BE4  45                 	db	69	;'E'
  4298  007BE5  52                 	db	82	;'R'
  4299  007BE6  20                 	db	32
  4300  007BE7  00                 	db	0
  4301  007BE8                     STR_150:
  4302  007BE8  2C                 	db	44
  4303  007BE9  63                 	db	99	;'c'
  4304  007BEA  6C                 	db	108	;'l'
  4305  007BEB  61                 	db	97	;'a'
  4306  007BEC  73                 	db	115	;'s'
  4307  007BED  73                 	db	115	;'s'
  4308  007BEE  3D                 	db	61	;'='
  4309  007BEF  00                 	db	0
  4310  007BF0                     STR_130:
  4311  007BF0  56                 	db	86	;'V'
  4312  007BF1  45                 	db	69	;'E'
  4313  007BF2  52                 	db	82	;'R'
  4314  007BF3  42                 	db	66	;'B'
  4315  007BF4  4F                 	db	79	;'O'
  4316  007BF5  53                 	db	83	;'S'
  4317  007BF6  45                 	db	69	;'E'
  4318  007BF7  00                 	db	0
  4319  007BF8                     STR_124:
  4320  007BF8  44                 	db	68	;'D'
  4321  007BF9  45                 	db	69	;'E'
  4322  007BFA  43                 	db	67	;'C'
  4323  007BFB  49                 	db	73	;'I'
  4324  007BFC  4D                 	db	77	;'M'
  4325  007BFD  41                 	db	65	;'A'
  4326  007BFE  4C                 	db	76	;'L'
  4327  007BFF  00                 	db	0
  4328  007C00                     STR_18:
  4329  007C00  56                 	db	86	;'V'
  4330  007C01  45                 	db	69	;'E'
  4331  007C02  52                 	db	82	;'R'
  4332  007C03  53                 	db	83	;'S'
  4333  007C04  49                 	db	73	;'I'
  4334  007C05  4F                 	db	79	;'O'
  4335  007C06  4E                 	db	78	;'N'
  4336  007C07  00                 	db	0
  4337  007C08                     STR_185:
  4338  007C08  30                 	db	48	;'0'
  4339  007C09  78                 	db	120	;'x'
  4340  007C0A  25                 	db	37
  4341  007C0B  30                 	db	48	;'0'
  4342  007C0C  38                 	db	56	;'8'
  4343  007C0D  6C                 	db	108	;'l'
  4344  007C0E  58                 	db	88	;'X'
  4345  007C0F  00                 	db	0
  4346  007C10                     STR_265:
  4347  007C10  56                 	db	86	;'V'
  4348  007C11  65                 	db	101	;'e'
  4349  007C12  72                 	db	114	;'r'
  4350  007C13  62                 	db	98	;'b'
  4351  007C14  6F                 	db	111	;'o'
  4352  007C15  73                 	db	115	;'s'
  4353  007C16  65                 	db	101	;'e'
  4354  007C17  00                 	db	0
  4355  007C18                     STR_264:
  4356  007C18  4D                 	db	77	;'M'
  4357  007C19  6F                 	db	111	;'o'
  4358  007C1A  64                 	db	100	;'d'
  4359  007C1B  65                 	db	101	;'e'
  4360  007C1C  3A                 	db	58	;':'
  4361  007C1D  20                 	db	32
  4362  007C1E  00                 	db	0
  4363  007C1F                     STR_162:
  4364  007C1F  2C                 	db	44
  4365  007C20  44                 	db	68	;'D'
  4366  007C21  61                 	db	97	;'a'
  4367  007C22  74                 	db	116	;'t'
  4368  007C23  61                 	db	97	;'a'
  4369  007C24  3D                 	db	61	;'='
  4370  007C25  00                 	db	0
  4371  007C26                     STR_153:
  4372  007C26  2C                 	db	44
  4373  007C27  74                 	db	116	;'t'
  4374  007C28  79                 	db	121	;'y'
  4375  007C29  70                 	db	112	;'p'
  4376  007C2A  65                 	db	101	;'e'
  4377  007C2B  3D                 	db	61	;'='
  4378  007C2C  00                 	db	0
  4379  007C2D                     STR_159:
  4380  007C2D  2C                 	db	44
  4381  007C2E  73                 	db	115	;'s'
  4382  007C2F  69                 	db	105	;'i'
  4383  007C30  7A                 	db	122	;'z'
  4384  007C31  65                 	db	101	;'e'
  4385  007C32  3D                 	db	61	;'='
  4386  007C33  00                 	db	0
  4387  007C34                     STR_147:
  4388  007C34  3C                 	db	60	;'<'
  4389  007C35  50                 	db	80	;'P'
  4390  007C36  72                 	db	114	;'r'
  4391  007C37  69                 	db	105	;'i'
  4392  007C38  6F                 	db	111	;'o'
  4393  007C39  3D                 	db	61	;'='
  4394  007C3A  00                 	db	0
  4395  007C3B                     STR_20:
  4396  007C3B  49                 	db	73	;'I'
  4397  007C3C  46                 	db	70	;'F'
  4398  007C3D  4D                 	db	77	;'M'
  4399  007C3E  4F                 	db	79	;'O'
  4400  007C3F  44                 	db	68	;'D'
  4401  007C40  45                 	db	69	;'E'
  4402  007C41  00                 	db	0
  4403  007C42                     STR_16:
  4404  007C42  4C                 	db	76	;'L'
  4405  007C43  49                 	db	73	;'I'
  4406  007C44  53                 	db	83	;'S'
  4407  007C45  54                 	db	84	;'T'
  4408  007C46  45                 	db	69	;'E'
  4409  007C47  4E                 	db	78	;'N'
  4410  007C48  00                 	db	0
  4411  007C49                     STR_95:
  4412  007C49  46                 	db	70	;'F'
  4413  007C4A  49                 	db	73	;'I'
  4414  007C4B  4C                 	db	76	;'L'
  4415  007C4C  54                 	db	84	;'T'
  4416  007C4D  45                 	db	69	;'E'
  4417  007C4E  52                 	db	82	;'R'
  4418  007C4F  00                 	db	0
  4419  007C50                     STR_10:
  4420  007C50  53                 	db	83	;'S'
  4421  007C51  49                 	db	73	;'I'
  4422  007C52  4C                 	db	76	;'L'
  4423  007C53  45                 	db	69	;'E'
  4424  007C54  4E                 	db	78	;'N'
  4425  007C55  54                 	db	84	;'T'
  4426  007C56  00                 	db	0
  4427  007C57                     STR_59:
  4428  007C57  30                 	db	48	;'0'
  4429  007C58  78                 	db	120	;'x'
  4430  007C59  25                 	db	37
  4431  007C5A  30                 	db	48	;'0'
  4432  007C5B  32                 	db	50	;'2'
  4433  007C5C  58                 	db	88	;'X'
  4434  007C5D  00                 	db	0
  4435  007C5E                     STR_151:
  4436  007C5E  30                 	db	48	;'0'
  4437  007C5F  78                 	db	120	;'x'
  4438  007C60  25                 	db	37
  4439  007C61  30                 	db	48	;'0'
  4440  007C62  34                 	db	52	;'4'
  4441  007C63  58                 	db	88	;'X'
  4442  007C64  00                 	db	0
  4443  007C65                     STR_169:
  4444  007C65  30                 	db	48	;'0'
  4445  007C66  78                 	db	120	;'x'
  4446  007C67  25                 	db	37
  4447  007C68  30                 	db	48	;'0'
  4448  007C69  38                 	db	56	;'8'
  4449  007C6A  58                 	db	88	;'X'
  4450  007C6B  00                 	db	0
  4451  007C6C                     STR_144:
  4452  007C6C  46                 	db	70	;'F'
  4453  007C6D  30                 	db	48	;'0'
  4454  007C6E  30                 	db	48	;'0'
  4455  007C6F  0D                 	db	13
  4456  007C70  0A                 	db	10
  4457  007C71  00                 	db	0
  4458  007C72                     STR_9:
  4459  007C72  2B                 	db	43
  4460  007C73  4F                 	db	79	;'O'
  4461  007C74  4B                 	db	75	;'K'
  4462  007C75  0D                 	db	13
  4463  007C76  0A                 	db	10
  4464  007C77  00                 	db	0
  4465  007C78                     STR_57:
  4466  007C78  25                 	db	37
  4467  007C79  64                 	db	100	;'d'
  4468  007C7A  20                 	db	32
  4469  007C7B  2D                 	db	45
  4470  007C7C  20                 	db	32
  4471  007C7D  00                 	db	0
  4472  007C7E                     STR_129:
  4473  007C7E  4D                 	db	77	;'M'
  4474  007C7F  4F                 	db	79	;'O'
  4475  007C80  44                 	db	68	;'D'
  4476  007C81  45                 	db	69	;'E'
  4477  007C82  20                 	db	32
  4478  007C83  00                 	db	0
  4479  007C84                     STR_137:
  4480  007C84  4D                 	db	77	;'M'
  4481  007C85  41                 	db	65	;'A'
  4482  007C86  53                 	db	83	;'S'
  4483  007C87  4B                 	db	75	;'K'
  4484  007C88  20                 	db	32
  4485  007C89  00                 	db	0
  4486  007C8A                     STR_12:
  4487  007C8A  43                 	db	67	;'C'
  4488  007C8B  4C                 	db	76	;'L'
  4489  007C8C  4F                 	db	79	;'O'
  4490  007C8D  53                 	db	83	;'S'
  4491  007C8E  45                 	db	69	;'E'
  4492  007C8F  00                 	db	0
  4493  007C90                     STR_134:
  4494  007C90  53                 	db	83	;'S'
  4495  007C91  4C                 	db	76	;'L'
  4496  007C92  43                 	db	67	;'C'
  4497  007C93  41                 	db	65	;'A'
  4498  007C94  4E                 	db	78	;'N'
  4499  007C95  00                 	db	0
  4500  007C96                     STR_121:
  4501  007C96  53                 	db	83	;'S'
  4502  007C97  45                 	db	69	;'E'
  4503  007C98  54                 	db	84	;'T'
  4504  007C99  20                 	db	32
  4505  007C9A  00                 	db	0
  4506  007C9B                     STR_47:
  4507  007C9B  46                 	db	70	;'F'
  4508  007C9C  49                 	db	73	;'I'
  4509  007C9D  4E                 	db	78	;'N'
  4510  007C9E  44                 	db	68	;'D'
  4511  007C9F  00                 	db	0
  4512  007CA0                     STR_49:
  4513  007CA0  52                 	db	82	;'R'
  4514  007CA1  52                 	db	82	;'R'
  4515  007CA2  45                 	db	69	;'E'
  4516  007CA3  47                 	db	71	;'G'
  4517  007CA4  00                 	db	0
  4518  007CA5                     STR_80:
  4519  007CA5  57                 	db	87	;'W'
  4520  007CA6  52                 	db	82	;'R'
  4521  007CA7  45                 	db	69	;'E'
  4522  007CA8  47                 	db	71	;'G'
  4523  007CA9  00                 	db	0
  4524  007CAA                     STR_108:
  4525  007CAA  4D                 	db	77	;'M'
  4526  007CAB  41                 	db	65	;'A'
  4527  007CAC  53                 	db	83	;'S'
  4528  007CAD  4B                 	db	75	;'K'
  4529  007CAE  00                 	db	0
  4530  007CAF                     STR_8:
  4531  007CAF  4F                 	db	79	;'O'
  4532  007CB0  50                 	db	80	;'P'
  4533  007CB1  45                 	db	69	;'E'
  4534  007CB2  4E                 	db	78	;'N'
  4535  007CB3  00                 	db	0
  4536  007CB4                     STR_89:
  4537  007CB4  49                 	db	73	;'I'
  4538  007CB5  4E                 	db	78	;'N'
  4539  007CB6  46                 	db	70	;'F'
  4540  007CB7  4F                 	db	79	;'O'
  4541  007CB8  00                 	db	0
  4542  007CB9                     STR_132:
  4543  007CB9  56                 	db	86	;'V'
  4544  007CBA  53                 	db	83	;'S'
  4545  007CBB  43                 	db	67	;'C'
  4546  007CBC  50                 	db	80	;'P'
  4547  007CBD  00                 	db	0
  4548  007CBE                     STR_45:
  4549  007CBE  48                 	db	72	;'H'
  4550  007CBF  45                 	db	69	;'E'
  4551  007CC0  4C                 	db	76	;'L'
  4552  007CC1  50                 	db	80	;'P'
  4553  007CC2  00                 	db	0
  4554  007CC3                     STR_41:
  4555  007CC3  53                 	db	83	;'S'
  4556  007CC4  54                 	db	84	;'T'
  4557  007CC5  41                 	db	65	;'A'
  4558  007CC6  54                 	db	84	;'T'
  4559  007CC7  00                 	db	0
  4560  007CC8                     STR_6:
  4561  007CC8  42                 	db	66	;'B'
  4562  007CC9  4F                 	db	79	;'O'
  4563  007CCA  4F                 	db	79	;'O'
  4564  007CCB  54                 	db	84	;'T'
  4565  007CCC  00                 	db	0
  4566  007CCD                     STR_67:
  4567  007CCD  27                 	db	39
  4568  007CCE  20                 	db	32
  4569  007CCF  09                 	db	9
  4570  007CD0  00                 	db	0
  4571  007CD1                     STR_167:
  4572  007CD1  3E                 	db	62	;'>'
  4573  007CD2  0D                 	db	13
  4574  007CD3  0A                 	db	10
  4575  007CD4  00                 	db	0
  4576  007CD5                     STR_43:
  4577  007CD5  45                 	db	69	;'E'
  4578  007CD6  52                 	db	82	;'R'
  4579  007CD7  52                 	db	82	;'R'
  4580  007CD8  00                 	db	0
  4581  007CD9                     STR_122:
  4582  007CD9  48                 	db	72	;'H'
  4583  007CDA  45                 	db	69	;'E'
  4584  007CDB  58                 	db	88	;'X'
  4585  007CDC  00                 	db	0
  4586  007CDD                     STR_170:
  4587  007CDD  25                 	db	37
  4588  007CDE  6C                 	db	108	;'l'
  4589  007CDF  75                 	db	117	;'u'
  4590  007CE0  00                 	db	0
  4591  007CE1                     STR_66:
  4592  007CE1  09                 	db	9
  4593  007CE2  27                 	db	39
  4594  007CE3  00                 	db	0
  4595  007CE4                     STR_253:
  4596  007CE4  2D                 	db	45
  4597  007CE5  2D                 	db	45
  4598  007CE6  00                 	db	0
  4599  007CE7                     STR_38:
  4600  007CE7  52                 	db	82	;'R'
  4601  007CE8  58                 	db	88	;'X'
  4602  007CE9  00                 	db	0
  4603  007CEA                     STR_29:
  4604  007CEA  54                 	db	84	;'T'
  4605  007CEB  58                 	db	88	;'X'
  4606  007CEC  00                 	db	0
  4607  007CED                     STR_60:
  4608  007CED  25                 	db	37
  4609  007CEE  64                 	db	100	;'d'
  4610  007CEF  00                 	db	0
  4611  007CF0                     STR_146:
  4612  007CF0  07                 	db	7
  4613  007CF1  00                 	db	0
  4614  007CF2                     STR_145:
  4615  007CF2  0D                 	db	13
  4616  007CF3  00                 	db	0
  4617  007CF4                     STR_30:
  4618  007CF4  2C                 	db	44
  4619  007CF5  00                 	db	0
  4620  007CF6                     STR_260:
  4621  007CF6  2E                 	db	46
  4622  007CF7  00                 	db	0
  4623  007CF8                     STR_252:
  4624  007CF8  30                 	db	48	;'0'
  4625  007CF9  00                 	db	0
  4626  007CFA                     STR_254:
  4627  007CFA  3A                 	db	58	;':'
  4628  007CFB  00                 	db	0
  4629  007CFC                     STR_259:
  4630  007CFC  3F                 	db	63	;'?'
  4631  007CFD  00                 	db	0
  4632  007CFE                     __end_of__stringdata:
  4633                           	opt stack 0
  4634                           
  4635                           ; #config settings
  4636  007CFE  00                 	db	0	; dummy byte at the end
  4637  0000                     tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           intcon	equ	0xFF2
  4644                           indf0	equ	0xFEF
  4645                           fsr0h	equ	0xFEA
  4646                           fsr0l	equ	0xFE9
  4647                           wreg	equ	0xFE8
  4648                           indf1	equ	0xFE7
  4649                           postinc1	equ	0xFE6
  4650                           postdec1	equ	0xFE5
  4651                           fsr1h	equ	0xFE2
  4652                           fsr1l	equ	0xFE1
  4653                           indf2	equ	0xFDF
  4654                           postinc2	equ	0xFDE
  4655                           postdec2	equ	0xFDD
  4656                           plusw2	equ	0xFDB
  4657                           fsr2h	equ	0xFDA
  4658                           fsr2l	equ	0xFD9
  4659                           status	equ	0xFD8
  4660                           
  4661                           	psect	nvBANK1
  4662  0001EB                     __pnvBANK1:
  4663                           	opt stack 0
  4664  0001EB                     _caps:
  4665                           	opt stack 0
  4666  0001EB                     	ds	2
  4667  0001ED                     ___DCDelay:
  4668                           	opt stack 0
  4669  0001ED                     	ds	1
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           prodh	equ	0xFF4
  4675                           prodl	equ	0xFF3
  4676                           intcon	equ	0xFF2
  4677                           indf0	equ	0xFEF
  4678                           fsr0h	equ	0xFEA
  4679                           fsr0l	equ	0xFE9
  4680                           wreg	equ	0xFE8
  4681                           indf1	equ	0xFE7
  4682                           postinc1	equ	0xFE6
  4683                           postdec1	equ	0xFE5
  4684                           fsr1h	equ	0xFE2
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           postdec2	equ	0xFDD
  4689                           plusw2	equ	0xFDB
  4690                           fsr2h	equ	0xFDA
  4691                           fsr2l	equ	0xFD9
  4692                           status	equ	0xFD8
  4693                           
  4694                           	psect	cinit
  4695  001D80                     __pcinit:
  4696                           	opt stack 0
  4697  001D80                     start_initialization:
  4698                           	opt stack 0
  4699  001D80                     __initialization:
  4700                           	opt stack 0
  4701                           
  4702                           ; Clear objects allocated to BIGRAM (494 bytes)
  4703  001D80  EE04  F000         	lfsr	0,__pbssBIGRAM
  4704  001D84  EE11 F0EE          	lfsr	1,494
  4705  001D88                     clear_0:
  4706  001D88  6AEE               	clrf	postinc0,c
  4707  001D8A  50E5               	movf	postdec1,w,c
  4708  001D8C  50E1               	movf	fsr1l,w,c
  4709  001D8E  E1FC               	bnz	clear_0
  4710  001D90  50E2               	movf	fsr1h,w,c
  4711  001D92  E1FA               	bnz	clear_0
  4712                           
  4713                           ; Clear objects allocated to BANK3 (256 bytes)
  4714  001D94  EE03  F000         	lfsr	0,__pbssBANK3
  4715  001D98  EE11 F000          	lfsr	1,256
  4716  001D9C                     clear_1:
  4717  001D9C  6AEE               	clrf	postinc0,c
  4718  001D9E  50E5               	movf	postdec1,w,c
  4719  001DA0  50E1               	movf	fsr1l,w,c
  4720  001DA2  E1FC               	bnz	clear_1
  4721  001DA4  50E2               	movf	fsr1h,w,c
  4722  001DA6  E1FA               	bnz	clear_1
  4723                           
  4724                           ; Clear objects allocated to BANK2 (128 bytes)
  4725  001DA8  EE02  F000         	lfsr	0,__pbssBANK2
  4726  001DAC  0E80               	movlw	128
  4727  001DAE                     clear_2:
  4728  001DAE  6AEE               	clrf	postinc0,c
  4729  001DB0  06E8               	decf	wreg,f,c
  4730  001DB2  E1FD               	bnz	clear_2
  4731                           
  4732                           ; Clear objects allocated to BANK1 (235 bytes)
  4733  001DB4  EE01  F000         	lfsr	0,__pbssBANK1
  4734  001DB8  0EEB               	movlw	235
  4735  001DBA                     clear_3:
  4736  001DBA  6AEE               	clrf	postinc0,c
  4737  001DBC  06E8               	decf	wreg,f,c
  4738  001DBE  E1FD               	bnz	clear_3
  4739                           
  4740                           ; Clear objects allocated to BANK0 (5 bytes)
  4741  001DC0  0100               	movlb	0
  4742  001DC2  6BE9               	clrf	(__pbssBANK0+4)& (0+255),b
  4743  001DC4  6BE8               	clrf	(__pbssBANK0+3)& (0+255),b
  4744  001DC6  6BE7               	clrf	(__pbssBANK0+2)& (0+255),b
  4745  001DC8  6BE6               	clrf	(__pbssBANK0+1)& (0+255),b
  4746  001DCA  6BE5               	clrf	__pbssBANK0& (0+255),b
  4747                           
  4748                           ; Clear objects allocated to COMRAM (30 bytes)
  4749  001DCC  EE00  F022         	lfsr	0,__pbssCOMRAM
  4750  001DD0  0E1E               	movlw	30
  4751  001DD2                     clear_4:
  4752  001DD2  6AEE               	clrf	postinc0,c
  4753  001DD4  06E8               	decf	wreg,f,c
  4754  001DD6  E1FD               	bnz	clear_4
  4755  001DD8                     end_of_initialization:
  4756                           	opt stack 0
  4757  001DD8                     __end_of__initialization:
  4758                           	opt stack 0
  4759  001DD8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4760  001DDA  6EF8               	movwf	tblptru,c
  4761  001DDC  0100               	movlb	0
  4762  001DDE  EF6D  F01E         	goto	_main	;jump to C main() function
  4763                           tblptru	equ	0xFF8
  4764                           tblptrh	equ	0xFF7
  4765                           tblptrl	equ	0xFF6
  4766                           tablat	equ	0xFF5
  4767                           prodh	equ	0xFF4
  4768                           prodl	equ	0xFF3
  4769                           intcon	equ	0xFF2
  4770                           indf0	equ	0xFEF
  4771                           postinc0	equ	0xFEE
  4772                           fsr0h	equ	0xFEA
  4773                           fsr0l	equ	0xFE9
  4774                           wreg	equ	0xFE8
  4775                           indf1	equ	0xFE7
  4776                           postinc1	equ	0xFE6
  4777                           postdec1	equ	0xFE5
  4778                           fsr1h	equ	0xFE2
  4779                           fsr1l	equ	0xFE1
  4780                           indf2	equ	0xFDF
  4781                           postinc2	equ	0xFDE
  4782                           postdec2	equ	0xFDD
  4783                           plusw2	equ	0xFDB
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788                           	psect	bssCOMRAM
  4789  000022                     __pbssCOMRAM:
  4790                           	opt stack 0
  4791  000022                     _timekeeper:
  4792                           	opt stack 0
  4793  000022                     	ds	4
  4794  000026                     _status_led_cnt:
  4795                           	opt stack 0
  4796  000026                     	ds	2
  4797  000028                     strtok@sp:
  4798                           	opt stack 0
  4799  000028                     	ds	2
  4800  00002A                     _USART_Status:
  4801                           	opt stack 0
  4802  00002A                     	ds	1
  4803  00002B                     __ECANRxFilterHitInfo:
  4804                           	opt stack 0
  4805  00002B                     	ds	1
  4806  00002C                     __IT_INT_MASK:
  4807                           	opt stack 0
  4808  00002C                     	ds	1
  4809  00002D                     __IT_SAVE_BSR:
  4810                           	opt stack 0
  4811  00002D                     	ds	1
  4812  00002E                     __IT_SAVE_WREG:
  4813                           	opt stack 0
  4814  00002E                     	ds	1
  4815  00002F                     ___DCByte:
  4816                           	opt stack 0
  4817  00002F                     	ds	1
  4818  000030                     _bDLE:
  4819                           	opt stack 0
  4820  000030                     	ds	1
  4821  000031                     _bInitiated:
  4822                           	opt stack 0
  4823  000031                     	ds	1
  4824  000032                     _bOpen:
  4825                           	opt stack 0
  4826  000032                     	ds	1
  4827  000033                     _bSilent:
  4828                           	opt stack 0
  4829  000033                     	ds	1
  4830  000034                     _fifo_canrxcount:
  4831                           	opt stack 0
  4832  000034                     	ds	1
  4833  000035                     _ledFunctionality:
  4834                           	opt stack 0
  4835  000035                     	ds	1
  4836  000036                     _nTimeStamp:
  4837                           	opt stack 0
  4838  000036                     	ds	1
  4839  000037                     _rwtimeout:
  4840                           	opt stack 0
  4841  000037                     	ds	1
  4842  000038                     _sequencyno:
  4843                           	opt stack 0
  4844  000038                     	ds	1
  4845  000039                     _stateVscpDriver:
  4846                           	opt stack 0
  4847  000039                     	ds	1
  4848  00003A                     _vscpClass:
  4849                           	opt stack 0
  4850  00003A                     	ds	2
  4851  00003C                     _dlc:
  4852                           	opt stack 0
  4853  00003C                     	ds	1
  4854  00003D                     _flags:
  4855                           	opt stack 0
  4856  00003D                     	ds	1
  4857  00003E                     _vscpPriority:
  4858                           	opt stack 0
  4859  00003E                     	ds	1
  4860  00003F                     _vscpType:
  4861                           	opt stack 0
  4862  00003F                     	ds	1
  4863                           tblptru	equ	0xFF8
  4864                           tblptrh	equ	0xFF7
  4865                           tblptrl	equ	0xFF6
  4866                           tablat	equ	0xFF5
  4867                           prodh	equ	0xFF4
  4868                           prodl	equ	0xFF3
  4869                           intcon	equ	0xFF2
  4870                           indf0	equ	0xFEF
  4871                           postinc0	equ	0xFEE
  4872                           fsr0h	equ	0xFEA
  4873                           fsr0l	equ	0xFE9
  4874                           wreg	equ	0xFE8
  4875                           indf1	equ	0xFE7
  4876                           postinc1	equ	0xFE6
  4877                           postdec1	equ	0xFE5
  4878                           fsr1h	equ	0xFE2
  4879                           fsr1l	equ	0xFE1
  4880                           indf2	equ	0xFDF
  4881                           postinc2	equ	0xFDE
  4882                           postdec2	equ	0xFDD
  4883                           plusw2	equ	0xFDB
  4884                           fsr2h	equ	0xFDA
  4885                           fsr2l	equ	0xFD9
  4886                           status	equ	0xFD8
  4887                           
  4888                           	psect	bssBANK0
  4889  0000E5                     __pbssBANK0:
  4890                           	opt stack 0
  4891  0000E5                     _bHex:
  4892                           	opt stack 0
  4893  0000E5                     	ds	1
  4894  0000E6                     _mode:
  4895                           	opt stack 0
  4896  0000E6                     	ds	1
  4897  0000E7                     _pos:
  4898                           	opt stack 0
  4899  0000E7                     	ds	1
  4900  0000E8                     _vscpNodeId:
  4901                           	opt stack 0
  4902  0000E8                     	ds	1
  4903  0000E9                     _vscpSize:
  4904                           	opt stack 0
  4905  0000E9                     	ds	1
  4906                           tblptru	equ	0xFF8
  4907                           tblptrh	equ	0xFF7
  4908                           tblptrl	equ	0xFF6
  4909                           tablat	equ	0xFF5
  4910                           prodh	equ	0xFF4
  4911                           prodl	equ	0xFF3
  4912                           intcon	equ	0xFF2
  4913                           indf0	equ	0xFEF
  4914                           postinc0	equ	0xFEE
  4915                           fsr0h	equ	0xFEA
  4916                           fsr0l	equ	0xFE9
  4917                           wreg	equ	0xFE8
  4918                           indf1	equ	0xFE7
  4919                           postinc1	equ	0xFE6
  4920                           postdec1	equ	0xFE5
  4921                           fsr1h	equ	0xFE2
  4922                           fsr1l	equ	0xFE1
  4923                           indf2	equ	0xFDF
  4924                           postinc2	equ	0xFDE
  4925                           postdec2	equ	0xFDD
  4926                           plusw2	equ	0xFDB
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931                           	psect	bssBANK1
  4932  000100                     __pbssBANK1:
  4933                           	opt stack 0
  4934  000100                     _can_receiveOverruns:
  4935                           	opt stack 0
  4936  000100                     	ds	4
  4937  000104                     _can_transmitOverruns:
  4938                           	opt stack 0
  4939  000104                     	ds	4
  4940  000108                     _cntRxBytes:
  4941                           	opt stack 0
  4942  000108                     	ds	4
  4943  00010C                     _cntRxFrames:
  4944                           	opt stack 0
  4945  00010C                     	ds	4
  4946  000110                     _cntTxBytes:
  4947                           	opt stack 0
  4948  000110                     	ds	4
  4949  000114                     _cntTxFrames:
  4950                           	opt stack 0
  4951  000114                     	ds	4
  4952  000118                     _timer:
  4953                           	opt stack 0
  4954  000118                     	ds	4
  4955  00011C                     _uart_receiveOverruns:
  4956                           	opt stack 0
  4957  00011C                     	ds	4
  4958  000120                     _uart_transmitOverruns:
  4959                           	opt stack 0
  4960  000120                     	ds	4
  4961  000124                     _made_table:
  4962                           	opt stack 0
  4963  000124                     	ds	2
  4964  000126                     __IT_SAVE_STATUS:
  4965                           	opt stack 0
  4966  000126                     	ds	1
  4967  000127                     _cmdbuf:
  4968                           	opt stack 0
  4969  000127                     	ds	80
  4970  000177                     _wrkbuf:
  4971                           	opt stack 0
  4972  000177                     	ds	80
  4973  0001C7                     _canInputFifo:
  4974                           	opt stack 0
  4975  0001C7                     	ds	8
  4976  0001CF                     _data:
  4977                           	opt stack 0
  4978  0001CF                     	ds	8
  4979  0001D7                     _serialInputFifo:
  4980                           	opt stack 0
  4981  0001D7                     	ds	8
  4982  0001DF                     _vscpData:
  4983                           	opt stack 0
  4984  0001DF                     	ds	8
  4985  0001E7                     _id:
  4986                           	opt stack 0
  4987  0001E7                     	ds	4
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           indf0	equ	0xFEF
  4996                           postinc0	equ	0xFEE
  4997                           fsr0h	equ	0xFEA
  4998                           fsr0l	equ	0xFE9
  4999                           wreg	equ	0xFE8
  5000                           indf1	equ	0xFE7
  5001                           postinc1	equ	0xFE6
  5002                           postdec1	equ	0xFE5
  5003                           fsr1h	equ	0xFE2
  5004                           fsr1l	equ	0xFE1
  5005                           indf2	equ	0xFDF
  5006                           postinc2	equ	0xFDE
  5007                           postdec2	equ	0xFDD
  5008                           plusw2	equ	0xFDB
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013                           	psect	bssBANK2
  5014  000200                     __pbssBANK2:
  5015                           	opt stack 0
  5016  000200                     _serial_inputBuffer:
  5017                           	opt stack 0
  5018  000200                     	ds	128
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           intcon	equ	0xFF2
  5026                           indf0	equ	0xFEF
  5027                           postinc0	equ	0xFEE
  5028                           fsr0h	equ	0xFEA
  5029                           fsr0l	equ	0xFE9
  5030                           wreg	equ	0xFE8
  5031                           indf1	equ	0xFE7
  5032                           postinc1	equ	0xFE6
  5033                           postdec1	equ	0xFE5
  5034                           fsr1h	equ	0xFE2
  5035                           fsr1l	equ	0xFE1
  5036                           indf2	equ	0xFDF
  5037                           postinc2	equ	0xFDE
  5038                           postdec2	equ	0xFDD
  5039                           plusw2	equ	0xFDB
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044                           	psect	bssBANK3
  5045  000300                     __pbssBANK3:
  5046                           	opt stack 0
  5047  000300                     _crc8_table:
  5048                           	opt stack 0
  5049  000300                     	ds	256
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           indf0	equ	0xFEF
  5058                           postinc0	equ	0xFEE
  5059                           fsr0h	equ	0xFEA
  5060                           fsr0l	equ	0xFE9
  5061                           wreg	equ	0xFE8
  5062                           indf1	equ	0xFE7
  5063                           postinc1	equ	0xFE6
  5064                           postdec1	equ	0xFE5
  5065                           fsr1h	equ	0xFE2
  5066                           fsr1l	equ	0xFE1
  5067                           indf2	equ	0xFDF
  5068                           postinc2	equ	0xFDE
  5069                           postdec2	equ	0xFDD
  5070                           plusw2	equ	0xFDB
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075                           	psect	bssBIGRAM
  5076  000400                     __pbssBIGRAM:
  5077                           	opt stack 0
  5078  000400                     _can_inputBuffer:
  5079                           	opt stack 0
  5080  000400                     	ds	494
  5081                           tblptru	equ	0xFF8
  5082                           tblptrh	equ	0xFF7
  5083                           tblptrl	equ	0xFF6
  5084                           tablat	equ	0xFF5
  5085                           prodh	equ	0xFF4
  5086                           prodl	equ	0xFF3
  5087                           intcon	equ	0xFF2
  5088                           indf0	equ	0xFEF
  5089                           postinc0	equ	0xFEE
  5090                           fsr0h	equ	0xFEA
  5091                           fsr0l	equ	0xFE9
  5092                           wreg	equ	0xFE8
  5093                           indf1	equ	0xFE7
  5094                           postinc1	equ	0xFE6
  5095                           postdec1	equ	0xFE5
  5096                           fsr1h	equ	0xFE2
  5097                           fsr1l	equ	0xFE1
  5098                           indf2	equ	0xFDF
  5099                           postinc2	equ	0xFDE
  5100                           postdec2	equ	0xFDD
  5101                           plusw2	equ	0xFDB
  5102                           fsr2h	equ	0xFDA
  5103                           fsr2l	equ	0xFD9
  5104                           status	equ	0xFD8
  5105                           
  5106                           	psect	cstackBANK2
  5107  000280                     __pcstackBANK2:
  5108                           	opt stack 0
  5109  000280                     doModeVerbose@id:
  5110                           	opt stack 0
  5111                           
  5112                           ; 4 bytes @ 0x0
  5113  000280                     	ds	4
  5114  000284                     doModeVerbose@preg:
  5115                           	opt stack 0
  5116                           
  5117                           ; 2 bytes @ 0x4
  5118  000284                     	ds	2
  5119  000286                     doModeVerbose@preg_1243:
  5120                           	opt stack 0
  5121                           
  5122                           ; 2 bytes @ 0x6
  5123  000286                     	ds	2
  5124  000288                     doModeVerbose@filter_class:
  5125                           	opt stack 0
  5126                           
  5127                           ; 2 bytes @ 0x8
  5128  000288                     	ds	2
  5129  00028A                     doModeVerbose@mask_class:
  5130                           	opt stack 0
  5131                           
  5132                           ; 2 bytes @ 0xA
  5133  00028A                     	ds	2
  5134  00028C                     doModeVerbose@nodeid_1235:
  5135                           	opt stack 0
  5136                           
  5137                           ; 1 bytes @ 0xC
  5138  00028C                     	ds	1
  5139  00028D                     doModeVerbose@filter_priority:
  5140                           	opt stack 0
  5141                           
  5142                           ; 1 bytes @ 0xD
  5143  00028D                     	ds	1
  5144  00028E                     doModeVerbose@filter_type:
  5145                           	opt stack 0
  5146                           
  5147                           ; 1 bytes @ 0xE
  5148  00028E                     	ds	1
  5149  00028F                     doModeVerbose@filter_nodeid:
  5150                           	opt stack 0
  5151                           
  5152                           ; 1 bytes @ 0xF
  5153  00028F                     	ds	1
  5154  000290                     doModeVerbose@mask_priority:
  5155                           	opt stack 0
  5156                           
  5157                           ; 1 bytes @ 0x10
  5158  000290                     	ds	1
  5159  000291                     doModeVerbose@mask_type:
  5160                           	opt stack 0
  5161                           
  5162                           ; 1 bytes @ 0x11
  5163  000291                     	ds	1
  5164  000292                     doModeVerbose@mask_nodeid:
  5165                           	opt stack 0
  5166                           
  5167                           ; 1 bytes @ 0x12
  5168  000292                     	ds	1
  5169  000293                     _doModeVerbose$1191:
  5170                           	opt stack 0
  5171                           
  5172                           ; 2 bytes @ 0x13
  5173  000293                     	ds	2
  5174  000295                     _doModeVerbose$1204:
  5175                           	opt stack 0
  5176                           
  5177                           ; 2 bytes @ 0x15
  5178  000295                     	ds	2
  5179  000297                     _doModeVerbose$1208:
  5180                           	opt stack 0
  5181                           
  5182                           ; 2 bytes @ 0x17
  5183  000297                     	ds	2
  5184  000299                     _doModeVerbose$1213:
  5185                           	opt stack 0
  5186                           
  5187                           ; 2 bytes @ 0x19
  5188  000299                     	ds	2
  5189  00029B                     _doModeVerbose$1221:
  5190                           	opt stack 0
  5191                           
  5192                           ; 2 bytes @ 0x1B
  5193  00029B                     	ds	2
  5194  00029D                     _doModeVerbose$1226:
  5195                           	opt stack 0
  5196                           
  5197                           ; 2 bytes @ 0x1D
  5198  00029D                     	ds	2
  5199  00029F                     _doModeVerbose$1230:
  5200                           	opt stack 0
  5201                           
  5202                           ; 2 bytes @ 0x1F
  5203  00029F                     	ds	2
  5204  0002A1                     _doModeVerbose$1255:
  5205                           	opt stack 0
  5206                           
  5207                           ; 2 bytes @ 0x21
  5208  0002A1                     	ds	2
  5209  0002A3                     doModeVerbose@rv:
  5210                           	opt stack 0
  5211                           
  5212                           ; 1 bytes @ 0x23
  5213  0002A3                     	ds	1
  5214  0002A4                     doModeVerbose@page_1236:
  5215                           	opt stack 0
  5216                           
  5217                           ; 1 bytes @ 0x24
  5218  0002A4                     	ds	1
  5219  0002A5                     doModeVerbose@reg_1237:
  5220                           	opt stack 0
  5221                           
  5222                           ; 1 bytes @ 0x25
  5223  0002A5                     	ds	1
  5224  0002A6                     doModeVerbose@id_1296:
  5225                           	opt stack 0
  5226                           
  5227                           ; 4 bytes @ 0x26
  5228  0002A6                     	ds	4
  5229  0002AA                     doModeVerbose@filterno:
  5230                           	opt stack 0
  5231                           
  5232                           ; 1 bytes @ 0x2A
  5233  0002AA                     	ds	1
  5234  0002AB                     doModeVerbose@maskno:
  5235                           	opt stack 0
  5236                           
  5237                           ; 1 bytes @ 0x2B
  5238  0002AB                     	ds	1
  5239  0002AC                     doModeVerbose@i:
  5240                           	opt stack 0
  5241                           
  5242                           ; 1 bytes @ 0x2C
  5243  0002AC                     	ds	1
  5244  0002AD                     doModeVerbose@value_1238:
  5245                           	opt stack 0
  5246                           
  5247                           ; 1 bytes @ 0x2D
  5248  0002AD                     	ds	1
  5249  0002AE                     doModeVerbose@count:
  5250                           	opt stack 0
  5251                           
  5252                           ; 1 bytes @ 0x2E
  5253  0002AE                     	ds	1
  5254  0002AF                     doModeVerbose@nodeid:
  5255                           	opt stack 0
  5256                           
  5257                           ; 1 bytes @ 0x2F
  5258  0002AF                     	ds	1
  5259  0002B0                     doModeVerbose@c:
  5260                           	opt stack 0
  5261                           
  5262                           ; 1 bytes @ 0x30
  5263  0002B0                     	ds	1
  5264  0002B1                     doModeVerbose@page:
  5265                           	opt stack 0
  5266                           
  5267                           ; 1 bytes @ 0x31
  5268  0002B1                     	ds	1
  5269  0002B2                     doModeVerbose@reg:
  5270                           	opt stack 0
  5271                           
  5272                           ; 1 bytes @ 0x32
  5273  0002B2                     	ds	1
  5274  0002B3                     doModeVerbose@nodeid_1250:
  5275                           	opt stack 0
  5276                           
  5277                           ; 1 bytes @ 0x33
  5278  0002B3                     	ds	1
  5279  0002B4                     doModeVerbose@i_1173:
  5280                           	opt stack 0
  5281                           
  5282                           ; 1 bytes @ 0x34
  5283  0002B4                     	ds	1
  5284  0002B5                     doModeVerbose@value:
  5285                           	opt stack 0
  5286                           
  5287                           ; 1 bytes @ 0x35
  5288  0002B5                     	ds	1
  5289  0002B6                     doModeVerbose@p_1179:
  5290                           	opt stack 0
  5291                           
  5292                           ; 2 bytes @ 0x36
  5293  0002B6                     	ds	2
  5294  0002B8                     doModeVerbose@p_1239:
  5295                           	opt stack 0
  5296                           
  5297                           ; 2 bytes @ 0x38
  5298  0002B8                     	ds	2
  5299  0002BA                     doModeVerbose@ifmode:
  5300                           	opt stack 0
  5301                           
  5302                           ; 1 bytes @ 0x3A
  5303  0002BA                     	ds	1
  5304  0002BB                     doModeVerbose@p:
  5305                           	opt stack 0
  5306                           
  5307                           ; 2 bytes @ 0x3B
  5308  0002BB                     	ds	2
  5309  0002BD                     doModeVerbose@p_1264:
  5310                           	opt stack 0
  5311                           
  5312                           ; 2 bytes @ 0x3D
  5313  0002BD                     	ds	2
  5314  0002BF                     doModeVerbose@p_1284:
  5315                           	opt stack 0
  5316                           
  5317                           ; 2 bytes @ 0x3F
  5318  0002BF                     	ds	2
  5319                           tblptru	equ	0xFF8
  5320                           tblptrh	equ	0xFF7
  5321                           tblptrl	equ	0xFF6
  5322                           tablat	equ	0xFF5
  5323                           prodh	equ	0xFF4
  5324                           prodl	equ	0xFF3
  5325                           intcon	equ	0xFF2
  5326                           indf0	equ	0xFEF
  5327                           postinc0	equ	0xFEE
  5328                           fsr0h	equ	0xFEA
  5329                           fsr0l	equ	0xFE9
  5330                           wreg	equ	0xFE8
  5331                           indf1	equ	0xFE7
  5332                           postinc1	equ	0xFE6
  5333                           postdec1	equ	0xFE5
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           plusw2	equ	0xFDB
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344                           	psect	cstackBANK0
  5345  000060                     __pcstackBANK0:
  5346                           	opt stack 0
  5347  000060                     ?_WriteTimer0:
  5348                           	opt stack 0
  5349  000060                     ?_fifo_init:
  5350                           	opt stack 0
  5351  000060                     ?_OpenUSART:
  5352                           	opt stack 0
  5353  000060                     ?_Write_b_eep:
  5354                           	opt stack 0
  5355  000060                     ?_setFilter:
  5356                           	opt stack 0
  5357  000060                     ?__CANIDToRegs:
  5358                           	opt stack 0
  5359  000060                     ??_isdigit:
  5360  000060                     ?_Read_b_eep:
  5361                           	opt stack 0
  5362  000060                     ?_fifo_read:
  5363                           	opt stack 0
  5364  000060                     ?_memset:
  5365                           	opt stack 0
  5366  000060                     ?_strcpy:
  5367                           	opt stack 0
  5368  000060                     ?_strchr:
  5369                           	opt stack 0
  5370  000060                     ?_strlen:
  5371                           	opt stack 0
  5372  000060                     ?_memcpy:
  5373                           	opt stack 0
  5374  000060                     ?_strcat:
  5375                           	opt stack 0
  5376  000060                     ?___lwdiv:
  5377                           	opt stack 0
  5378  000060                     ?___lwmod:
  5379                           	opt stack 0
  5380  000060                     ?___wmul:
  5381                           	opt stack 0
  5382  000060                     ?___lldiv:
  5383                           	opt stack 0
  5384  000060                     ECANSetOperationMode@mode:
  5385                           	opt stack 0
  5386  000060                     nibbleFromChar@c:
  5387                           	opt stack 0
  5388  000060                     OpenTimer0@config:
  5389                           	opt stack 0
  5390  000060                     WriteUSART@data:
  5391                           	opt stack 0
  5392  000060                     toupper@c:
  5393                           	opt stack 0
  5394  000060                     __CANIDToRegs@ptr:
  5395                           	opt stack 0
  5396  000060                     fifo_init@f:
  5397                           	opt stack 0
  5398  000060                     fifo_read@f:
  5399                           	opt stack 0
  5400  000060                     _init_crc8$2036:
  5401                           	opt stack 0
  5402  000060                     Read_b_eep@badd:
  5403                           	opt stack 0
  5404  000060                     Write_b_eep@badd:
  5405                           	opt stack 0
  5406  000060                     WriteTimer0@timer0:
  5407                           	opt stack 0
  5408  000060                     OpenUSART@spbrg:
  5409                           	opt stack 0
  5410  000060                     ___lwdiv@dividend:
  5411                           	opt stack 0
  5412  000060                     ___lwmod@dividend:
  5413                           	opt stack 0
  5414  000060                     memcpy@d1:
  5415                           	opt stack 0
  5416  000060                     memset@p1:
  5417                           	opt stack 0
  5418  000060                     strcat@to:
  5419                           	opt stack 0
  5420  000060                     strchr@ptr:
  5421                           	opt stack 0
  5422  000060                     strcpy@to:
  5423                           	opt stack 0
  5424  000060                     strlen@s:
  5425                           	opt stack 0
  5426  000060                     ___wmul@multiplier:
  5427                           	opt stack 0
  5428  000060                     setFilter@val:
  5429                           	opt stack 0
  5430  000060                     ___lldiv@dividend:
  5431                           	opt stack 0
  5432                           
  5433                           ; 4 bytes @ 0x0
  5434  000060                     	ds	1
  5435  000061                     ?_putsUSART:
  5436                           	opt stack 0
  5437  000061                     ??_printBinary:
  5438  000061                     ?_strichr:
  5439                           	opt stack 0
  5440  000061                     _isdigit$2953:
  5441                           	opt stack 0
  5442  000061                     putsUSART@data:
  5443                           	opt stack 0
  5444  000061                     strichr@ptr:
  5445                           	opt stack 0
  5446                           
  5447                           ; 2 bytes @ 0x1
  5448  000061                     	ds	1
  5449  000062                     Write_b_eep@bdat:
  5450                           	opt stack 0
  5451  000062                     OpenUSART@config:
  5452                           	opt stack 0
  5453  000062                     isdigit@c:
  5454                           	opt stack 0
  5455  000062                     fifo_init@buf:
  5456                           	opt stack 0
  5457  000062                     fifo_read@buf:
  5458                           	opt stack 0
  5459  000062                     init_crc8@j:
  5460                           	opt stack 0
  5461  000062                     WriteTimer0@timer:
  5462                           	opt stack 0
  5463  000062                     ___lwdiv@divisor:
  5464                           	opt stack 0
  5465  000062                     ___lwmod@divisor:
  5466                           	opt stack 0
  5467  000062                     memcpy@s1:
  5468                           	opt stack 0
  5469  000062                     memset@c:
  5470                           	opt stack 0
  5471  000062                     strcat@from:
  5472                           	opt stack 0
  5473  000062                     strchr@chr:
  5474                           	opt stack 0
  5475  000062                     strcpy@from:
  5476                           	opt stack 0
  5477  000062                     strlen@cp:
  5478                           	opt stack 0
  5479  000062                     ___wmul@multiplicand:
  5480                           	opt stack 0
  5481  000062                     __CANIDToRegs@val:
  5482                           	opt stack 0
  5483                           
  5484                           ; 4 bytes @ 0x2
  5485  000062                     	ds	1
  5486  000063                     ??_putsUSART:
  5487  000063                     printBinary@value:
  5488                           	opt stack 0
  5489  000063                     Write_b_eep@GIE_BIT_VAL:
  5490                           	opt stack 0
  5491  000063                     strichr@chr:
  5492                           	opt stack 0
  5493                           
  5494                           ; 2 bytes @ 0x3
  5495  000063                     	ds	1
  5496  000064                     ??_strchr:
  5497  000064                     ??_setFilter:
  5498  000064                     ?_hexStringToBytes:
  5499                           	opt stack 0
  5500  000064                     ?_strnicmp:
  5501                           	opt stack 0
  5502  000064                     init_app_eeprom@i:
  5503                           	opt stack 0
  5504  000064                     init_crc8@crc:
  5505                           	opt stack 0
  5506  000064                     ___lwdiv@counter:
  5507                           	opt stack 0
  5508  000064                     ___lwmod@counter:
  5509                           	opt stack 0
  5510  000064                     printBinary@i:
  5511                           	opt stack 0
  5512  000064                     fifo_init@size:
  5513                           	opt stack 0
  5514  000064                     fifo_read@nbytes:
  5515                           	opt stack 0
  5516  000064                     hexStringToBytes@buf:
  5517                           	opt stack 0
  5518  000064                     memcpy@n:
  5519                           	opt stack 0
  5520  000064                     memset@n:
  5521                           	opt stack 0
  5522  000064                     strcat@cp:
  5523                           	opt stack 0
  5524  000064                     strcpy@cp:
  5525                           	opt stack 0
  5526  000064                     strnicmp@s1:
  5527                           	opt stack 0
  5528  000064                     ___wmul@product:
  5529                           	opt stack 0
  5530  000064                     ___lldiv@divisor:
  5531                           	opt stack 0
  5532                           
  5533                           ; 4 bytes @ 0x4
  5534  000064                     	ds	1
  5535  000065                     init_crc8@i:
  5536                           	opt stack 0
  5537  000065                     ___lwdiv@quotient:
  5538                           	opt stack 0
  5539                           
  5540                           ; 2 bytes @ 0x5
  5541  000065                     	ds	1
  5542  000066                     ??_fifo_read:
  5543  000066                     ?_atoi:
  5544                           	opt stack 0
  5545  000066                     ?_strspn:
  5546                           	opt stack 0
  5547  000066                     ?_strcspn:
  5548                           	opt stack 0
  5549  000066                     __CANIDToRegs@type:
  5550                           	opt stack 0
  5551  000066                     hexStringToBytes@size:
  5552                           	opt stack 0
  5553  000066                     atoi@s:
  5554                           	opt stack 0
  5555  000066                     memcpy@d:
  5556                           	opt stack 0
  5557  000066                     memset@p:
  5558                           	opt stack 0
  5559  000066                     strnicmp@s2:
  5560                           	opt stack 0
  5561  000066                     strcspn@s1:
  5562                           	opt stack 0
  5563  000066                     strspn@s1:
  5564                           	opt stack 0
  5565                           
  5566                           ; 2 bytes @ 0x6
  5567  000066                     	ds	1
  5568  000067                     ??__CANIDToRegs:
  5569  000067                     ?_crc8:
  5570                           	opt stack 0
  5571  000067                     ?_utoa:
  5572                           	opt stack 0
  5573  000067                     crc8@crc:
  5574                           	opt stack 0
  5575  000067                     hexStringToBytes@inhex:
  5576                           	opt stack 0
  5577  000067                     utoa@buf:
  5578                           	opt stack 0
  5579                           
  5580                           ; 2 bytes @ 0x7
  5581  000067                     	ds	1
  5582  000068                     ??_atoi:
  5583  000068                     ___lldiv@counter:
  5584                           	opt stack 0
  5585  000068                     memcpy@s:
  5586                           	opt stack 0
  5587  000068                     strnicmp@len:
  5588                           	opt stack 0
  5589  000068                     strcspn@s2:
  5590                           	opt stack 0
  5591  000068                     strspn@s2:
  5592                           	opt stack 0
  5593                           
  5594                           ; 2 bytes @ 0x8
  5595  000068                     	ds	1
  5596  000069                     ??_hexStringToBytes:
  5597  000069                     __CANIDToRegs@Value:
  5598                           	opt stack 0
  5599  000069                     crc8@m:
  5600                           	opt stack 0
  5601  000069                     utoa@val:
  5602                           	opt stack 0
  5603  000069                     ___lldiv@quotient:
  5604                           	opt stack 0
  5605                           
  5606                           ; 4 bytes @ 0x9
  5607  000069                     	ds	1
  5608  00006A                     ??_crc8:
  5609  00006A                     ??_strnicmp:
  5610  00006A                     ?_ECANSendMessage:
  5611                           	opt stack 0
  5612  00006A                     setFilter@filter:
  5613                           	opt stack 0
  5614  00006A                     atoi@sign:
  5615                           	opt stack 0
  5616  00006A                     fifo_read@p:
  5617                           	opt stack 0
  5618  00006A                     strcspn@i:
  5619                           	opt stack 0
  5620  00006A                     strspn@i:
  5621                           	opt stack 0
  5622  00006A                     ECANSendMessage@id:
  5623                           	opt stack 0
  5624                           
  5625                           ; 4 bytes @ 0xA
  5626  00006A                     	ds	1
  5627  00006B                     setFilter@sidh:
  5628                           	opt stack 0
  5629  00006B                     atoi@a:
  5630                           	opt stack 0
  5631  00006B                     utoa@base:
  5632                           	opt stack 0
  5633                           
  5634                           ; 2 bytes @ 0xB
  5635  00006B                     	ds	1
  5636  00006C                     ?_sendEscapedUartData:
  5637                           	opt stack 0
  5638  00006C                     ?_calcCRC:
  5639                           	opt stack 0
  5640  00006C                     ?_strtok:
  5641                           	opt stack 0
  5642  00006C                     setFilter@sidl:
  5643                           	opt stack 0
  5644  00006C                     strnicmp@r:
  5645                           	opt stack 0
  5646  00006C                     sendEscapedUartData@pcrc:
  5647                           	opt stack 0
  5648  00006C                     calcCRC@p:
  5649                           	opt stack 0
  5650  00006C                     fifo_read@i:
  5651                           	opt stack 0
  5652  00006C                     hexStringToBytes@len:
  5653                           	opt stack 0
  5654  00006C                     strtok@s1:
  5655                           	opt stack 0
  5656                           
  5657                           ; 2 bytes @ 0xC
  5658  00006C                     	ds	1
  5659  00006D                     ?_stristr:
  5660                           	opt stack 0
  5661  00006D                     ?___llmod:
  5662                           	opt stack 0
  5663  00006D                     setFilter@eidh:
  5664                           	opt stack 0
  5665  00006D                     utoa@v:
  5666                           	opt stack 0
  5667  00006D                     stristr@s1:
  5668                           	opt stack 0
  5669  00006D                     ___llmod@dividend:
  5670                           	opt stack 0
  5671                           
  5672                           ; 4 bytes @ 0xD
  5673  00006D                     	ds	1
  5674  00006E                     ?_getCANFrame:
  5675                           	opt stack 0
  5676  00006E                     sendEscapedUartData@c:
  5677                           	opt stack 0
  5678  00006E                     calcCRC@len:
  5679                           	opt stack 0
  5680  00006E                     setFilter@eidl:
  5681                           	opt stack 0
  5682  00006E                     getCANFrame@pdlc:
  5683                           	opt stack 0
  5684  00006E                     ECANSendMessage@data:
  5685                           	opt stack 0
  5686  00006E                     hexStringToBytes@p:
  5687                           	opt stack 0
  5688  00006E                     strtok@s2:
  5689                           	opt stack 0
  5690                           
  5691                           ; 2 bytes @ 0xE
  5692  00006E                     	ds	1
  5693  00006F                     ?_sendVSCPDriverCommandReply:
  5694                           	opt stack 0
  5695  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5696                           	opt stack 0
  5697  00006F                     sendVSCPDriverAck@crc:
  5698                           	opt stack 0
  5699  00006F                     sendVSCPDriverNack@crc:
  5700                           	opt stack 0
  5701  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5702                           	opt stack 0
  5703  00006F                     sendVSCPModeCapabilities@crc:
  5704                           	opt stack 0
  5705  00006F                     calcCRC@j:
  5706                           	opt stack 0
  5707  00006F                     utoa@c:
  5708                           	opt stack 0
  5709  00006F                     getCANFrame@pdata:
  5710                           	opt stack 0
  5711  00006F                     stristr@s2:
  5712                           	opt stack 0
  5713                           
  5714                           ; 2 bytes @ 0xF
  5715  00006F                     	ds	1
  5716  000070                     ?_itoa:
  5717                           	opt stack 0
  5718  000070                     sendVSCPDriverErrorFrame@crc:
  5719                           	opt stack 0
  5720  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5721                           	opt stack 0
  5722  000070                     calcCRC@crc:
  5723                           	opt stack 0
  5724  000070                     ECANSendMessage@dataLen:
  5725                           	opt stack 0
  5726  000070                     hexStringToBytes@i:
  5727                           	opt stack 0
  5728  000070                     itoa@buf:
  5729                           	opt stack 0
  5730                           
  5731                           ; 2 bytes @ 0x10
  5732  000070                     	ds	1
  5733  000071                     sendVSCPDriverCommandReply@crc:
  5734                           	opt stack 0
  5735  000071                     getCANFrame@pid:
  5736                           	opt stack 0
  5737  000071                     ECANSendMessage@msgFlags:
  5738                           	opt stack 0
  5739  000071                     ___llmod@divisor:
  5740                           	opt stack 0
  5741                           
  5742                           ; 4 bytes @ 0x11
  5743  000071                     	ds	1
  5744  000072                     ??_ECANSendMessage:
  5745  000072                     ?_getVSCPFrame:
  5746                           	opt stack 0
  5747  000072                     getVSCPFrame@pvscptype:
  5748                           	opt stack 0
  5749  000072                     itoa@val:
  5750                           	opt stack 0
  5751  000072                     receiveSendEventCANAL@data:
  5752                           	opt stack 0
  5753  000072                     receiveSendMultiEventCANAL@data:
  5754                           	opt stack 0
  5755                           
  5756                           ; 8 bytes @ 0x12
  5757  000072                     	ds	1
  5758  000073                     getVSCPFrame@pNodeId:
  5759                           	opt stack 0
  5760  000073                     ECANSendMessage@pb:
  5761                           	opt stack 0
  5762                           
  5763                           ; 18 bytes @ 0x13
  5764  000073                     	ds	1
  5765  000074                     getVSCPFrame@pPriority:
  5766                           	opt stack 0
  5767  000074                     itoa@base:
  5768                           	opt stack 0
  5769                           
  5770                           ; 2 bytes @ 0x14
  5771  000074                     	ds	1
  5772  000075                     getVSCPFrame@pSize:
  5773                           	opt stack 0
  5774  000075                     ___llmod@counter:
  5775                           	opt stack 0
  5776                           
  5777                           ; 1 bytes @ 0x15
  5778  000075                     	ds	1
  5779  000076                     ?_sprintf:
  5780                           	opt stack 0
  5781  000076                     ?_ultoa:
  5782                           	opt stack 0
  5783  000076                     getVSCPFrame@pData:
  5784                           	opt stack 0
  5785  000076                     sprintf@sp:
  5786                           	opt stack 0
  5787  000076                     ultoa@buf:
  5788                           	opt stack 0
  5789                           
  5790                           ; 2 bytes @ 0x16
  5791  000076                     	ds	2
  5792  000078                     ??_getVSCPFrame:
  5793  000078                     sprintf@f:
  5794                           	opt stack 0
  5795  000078                     ultoa@val:
  5796                           	opt stack 0
  5797  000078                     printFirmwareVersion@wrkbuf:
  5798                           	opt stack 0
  5799                           
  5800                           ; 20 bytes @ 0x18
  5801  000078                     	ds	2
  5802  00007A                     receiveSendEventCANAL@i:
  5803                           	opt stack 0
  5804  00007A                     receiveSendMultiEventCANAL@msgcount:
  5805                           	opt stack 0
  5806                           
  5807                           ; 1 bytes @ 0x1A
  5808  00007A                     	ds	1
  5809  00007B                     receiveSendMultiEventCANAL@i:
  5810                           	opt stack 0
  5811  00007B                     receiveSendEventCANAL@id:
  5812                           	opt stack 0
  5813                           
  5814                           ; 4 bytes @ 0x1B
  5815  00007B                     	ds	1
  5816  00007C                     getVSCPFrame@pvscpclass:
  5817                           	opt stack 0
  5818  00007C                     ultoa@base:
  5819                           	opt stack 0
  5820  00007C                     receiveSendMultiEventCANAL@id:
  5821                           	opt stack 0
  5822                           
  5823                           ; 4 bytes @ 0x1C
  5824  00007C                     	ds	1
  5825  00007D                     getVSCPFrame@id:
  5826                           	opt stack 0
  5827                           
  5828                           ; 4 bytes @ 0x1D
  5829  00007D                     	ds	1
  5830  00007E                     ??_sprintf:
  5831  00007E                     ultoa@v:
  5832                           	opt stack 0
  5833                           
  5834                           ; 4 bytes @ 0x1E
  5835  00007E                     	ds	1
  5836  00007F                     receiveSendEventCANAL@dlc:
  5837                           	opt stack 0
  5838                           
  5839                           ; 1 bytes @ 0x1F
  5840  00007F                     	ds	1
  5841  000080                     receiveSendEventCANAL@crc:
  5842                           	opt stack 0
  5843  000080                     receiveSendMultiEventCANAL@dlc:
  5844                           	opt stack 0
  5845                           
  5846                           ; 1 bytes @ 0x20
  5847  000080                     	ds	1
  5848  000081                     receiveSendMultiEventCANAL@crc:
  5849                           	opt stack 0
  5850  000081                     sprintf@idx:
  5851                           	opt stack 0
  5852                           
  5853                           ; 1 bytes @ 0x21
  5854  000081                     	ds	1
  5855  000082                     receiveSendMultiEventCANAL@pos:
  5856                           	opt stack 0
  5857  000082                     ultoa@c:
  5858                           	opt stack 0
  5859  000082                     _sprintf$2098:
  5860                           	opt stack 0
  5861                           
  5862                           ; 2 bytes @ 0x22
  5863  000082                     	ds	1
  5864  000083                     ??_receiveSendEventSLCAN:
  5865                           
  5866                           ; 0 bytes @ 0x23
  5867  000083                     	ds	1
  5868  000084                     _sprintf$2099:
  5869                           	opt stack 0
  5870                           
  5871                           ; 2 bytes @ 0x24
  5872  000084                     	ds	1
  5873  000085                     ECANSendMessage@mode:
  5874                           	opt stack 0
  5875                           
  5876                           ; 1 bytes @ 0x25
  5877  000085                     	ds	1
  5878  000086                     ECANSendMessage@buffers:
  5879                           	opt stack 0
  5880  000086                     _sprintf$2105:
  5881                           	opt stack 0
  5882  000086                     receiveSendEventSLCAN@id:
  5883                           	opt stack 0
  5884                           
  5885                           ; 4 bytes @ 0x26
  5886  000086                     	ds	1
  5887  000087                     ECANSendMessage@j:
  5888                           	opt stack 0
  5889                           
  5890                           ; 1 bytes @ 0x27
  5891  000087                     	ds	1
  5892  000088                     ECANSendMessage@tempBSEL0:
  5893                           	opt stack 0
  5894  000088                     sprintf@ap:
  5895                           	opt stack 0
  5896                           
  5897                           ; 1 bytes @ 0x28
  5898  000088                     	ds	1
  5899  000089                     ECANSendMessage@tempPtr:
  5900                           	opt stack 0
  5901  000089                     sprintf@prec:
  5902                           	opt stack 0
  5903                           
  5904                           ; 2 bytes @ 0x29
  5905  000089                     	ds	1
  5906  00008A                     receiveSendEventSLCAN@dlc:
  5907                           	opt stack 0
  5908                           
  5909                           ; 1 bytes @ 0x2A
  5910  00008A                     	ds	1
  5911  00008B                     ECANSendMessage@temp:
  5912                           	opt stack 0
  5913  00008B                     receiveSendEventSLCAN@i:
  5914                           	opt stack 0
  5915  00008B                     sprintf@width:
  5916                           	opt stack 0
  5917                           
  5918                           ; 2 bytes @ 0x2B
  5919  00008B                     	ds	1
  5920  00008C                     ECANSendMessage@i:
  5921                           	opt stack 0
  5922                           
  5923                           ; 1 bytes @ 0x2C
  5924  00008C                     	ds	1
  5925  00008D                     ECANSendMessage@ptr:
  5926                           	opt stack 0
  5927  00008D                     sprintf@_val:
  5928                           	opt stack 0
  5929                           
  5930                           ; 4 bytes @ 0x2D
  5931  00008D                     	ds	2
  5932  00008F                     ?_sendCANFrame:
  5933                           	opt stack 0
  5934  00008F                     sendCANFrame@id:
  5935                           	opt stack 0
  5936                           
  5937                           ; 4 bytes @ 0x2F
  5938  00008F                     	ds	2
  5939  000091                     sprintf@c:
  5940                           	opt stack 0
  5941                           
  5942                           ; 1 bytes @ 0x31
  5943  000091                     	ds	1
  5944  000092                     sprintf@flag:
  5945                           	opt stack 0
  5946                           
  5947                           ; 2 bytes @ 0x32
  5948  000092                     	ds	1
  5949  000093                     sendCANFrame@dlc:
  5950                           	opt stack 0
  5951                           
  5952                           ; 1 bytes @ 0x33
  5953  000093                     	ds	1
  5954  000094                     ??_receivePrintEventVerbose:
  5955  000094                     _printStatistics$1445:
  5956                           	opt stack 0
  5957  000094                     _printErrors$1470:
  5958                           	opt stack 0
  5959  000094                     sendCANFrame@pdata:
  5960                           	opt stack 0
  5961                           
  5962                           ; 2 bytes @ 0x34
  5963  000094                     	ds	2
  5964  000096                     ??_doModeSLCAN:
  5965  000096                     ??_receiveVSCPModeCanalMsg:
  5966  000096                     ?_sendVSCPFrame:
  5967                           	opt stack 0
  5968  000096                     _printStatistics$1451:
  5969                           	opt stack 0
  5970  000096                     _printErrors$1476:
  5971                           	opt stack 0
  5972  000096                     sendVSCPFrame@vscpclass:
  5973                           	opt stack 0
  5974                           
  5975                           ; 2 bytes @ 0x36
  5976  000096                     	ds	2
  5977  000098                     sendVSCPFrame@vscptype:
  5978                           	opt stack 0
  5979  000098                     _printStatistics$1457:
  5980                           	opt stack 0
  5981  000098                     _printErrors$1482:
  5982                           	opt stack 0
  5983                           
  5984                           ; 2 bytes @ 0x38
  5985  000098                     	ds	1
  5986  000099                     sendVSCPFrame@nodeid:
  5987                           	opt stack 0
  5988  000099                     _receivePrintEventVerbose$1352:
  5989                           	opt stack 0
  5990                           
  5991                           ; 2 bytes @ 0x39
  5992  000099                     	ds	1
  5993  00009A                     sendVSCPFrame@priority:
  5994                           	opt stack 0
  5995  00009A                     _printStatistics$1463:
  5996                           	opt stack 0
  5997  00009A                     _printErrors$1488:
  5998                           	opt stack 0
  5999                           
  6000                           ; 2 bytes @ 0x3A
  6001  00009A                     	ds	1
  6002  00009B                     sendVSCPFrame@size:
  6003                           	opt stack 0
  6004  00009B                     _receivePrintEventVerbose$1357:
  6005                           	opt stack 0
  6006                           
  6007                           ; 2 bytes @ 0x3B
  6008  00009B                     	ds	1
  6009  00009C                     _printErrors$1494:
  6010                           	opt stack 0
  6011  00009C                     sendVSCPFrame@pData:
  6012                           	opt stack 0
  6013                           
  6014                           ; 2 bytes @ 0x3C
  6015  00009C                     	ds	1
  6016  00009D                     _receivePrintEventVerbose$1362:
  6017                           	opt stack 0
  6018  00009D                     doModeSLCAN@id:
  6019                           	opt stack 0
  6020                           
  6021                           ; 4 bytes @ 0x3D
  6022  00009D                     	ds	1
  6023  00009E                     ??_sendVSCPFrame:
  6024  00009E                     _printErrors$1503:
  6025                           	opt stack 0
  6026                           
  6027                           ; 2 bytes @ 0x3E
  6028  00009E                     	ds	1
  6029  00009F                     _receivePrintEventVerbose$1367:
  6030                           	opt stack 0
  6031                           
  6032                           ; 2 bytes @ 0x3F
  6033  00009F                     	ds	2
  6034  0000A1                     doModeSLCAN@dlc:
  6035                           	opt stack 0
  6036  0000A1                     _receivePrintEventVerbose$1372:
  6037                           	opt stack 0
  6038                           
  6039                           ; 2 bytes @ 0x41
  6040  0000A1                     	ds	1
  6041  0000A2                     doModeSLCAN@c:
  6042                           	opt stack 0
  6043                           
  6044                           ; 1 bytes @ 0x42
  6045  0000A2                     	ds	1
  6046  0000A3                     doModeSLCAN@rv:
  6047                           	opt stack 0
  6048  0000A3                     _receivePrintEventVerbose$1377:
  6049                           	opt stack 0
  6050                           
  6051                           ; 2 bytes @ 0x43
  6052  0000A3                     	ds	2
  6053  0000A5                     receivePrintEventVerbose@i:
  6054                           	opt stack 0
  6055                           
  6056                           ; 1 bytes @ 0x45
  6057  0000A5                     	ds	5
  6058  0000AA                     receiveVSCPModeCanalMsg@data:
  6059                           	opt stack 0
  6060                           
  6061                           ; 8 bytes @ 0x4A
  6062  0000AA                     	ds	8
  6063  0000B2                     receiveVSCPModeCanalMsg@id:
  6064                           	opt stack 0
  6065  0000B2                     sendVSCPFrame@id:
  6066                           	opt stack 0
  6067                           
  6068                           ; 4 bytes @ 0x52
  6069  0000B2                     	ds	4
  6070  0000B6                     ?_readRegisterExtended:
  6071                           	opt stack 0
  6072  0000B6                     ?_writeRegisterExtended:
  6073                           	opt stack 0
  6074  0000B6                     ?_readRegister:
  6075                           	opt stack 0
  6076  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6077                           	opt stack 0
  6078  0000B6                     readRegister@reg:
  6079                           	opt stack 0
  6080  0000B6                     readRegisterExtended@page:
  6081                           	opt stack 0
  6082  0000B6                     writeRegisterExtended@page:
  6083                           	opt stack 0
  6084                           
  6085                           ; 2 bytes @ 0x56
  6086  0000B6                     	ds	1
  6087  0000B7                     doModeVscp@c:
  6088                           	opt stack 0
  6089  0000B7                     readRegister@timeout:
  6090                           	opt stack 0
  6091                           
  6092                           ; 2 bytes @ 0x57
  6093  0000B7                     	ds	1
  6094  0000B8                     readRegisterExtended@reg:
  6095                           	opt stack 0
  6096  0000B8                     writeRegisterExtended@reg:
  6097                           	opt stack 0
  6098                           
  6099                           ; 1 bytes @ 0x58
  6100  0000B8                     	ds	1
  6101  0000B9                     readRegister@value:
  6102                           	opt stack 0
  6103  0000B9                     readRegisterExtended@timeout:
  6104                           	opt stack 0
  6105  0000B9                     writeRegisterExtended@timeout:
  6106                           	opt stack 0
  6107                           
  6108                           ; 2 bytes @ 0x59
  6109  0000B9                     	ds	1
  6110  0000BA                     ??_readRegister:
  6111                           
  6112                           ; 0 bytes @ 0x5A
  6113  0000BA                     	ds	1
  6114  0000BB                     readRegisterExtended@value:
  6115                           	opt stack 0
  6116  0000BB                     writeRegisterExtended@value:
  6117                           	opt stack 0
  6118                           
  6119                           ; 2 bytes @ 0x5B
  6120  0000BB                     	ds	2
  6121  0000BD                     ??_readRegisterExtended:
  6122  0000BD                     ??_writeRegisterExtended:
  6123                           
  6124                           ; 0 bytes @ 0x5D
  6125  0000BD                     	ds	1
  6126  0000BE                     readRegister@nodeid:
  6127                           	opt stack 0
  6128                           
  6129                           ; 1 bytes @ 0x5E
  6130  0000BE                     	ds	1
  6131  0000BF                     printGUID@nodeid:
  6132                           	opt stack 0
  6133  0000BF                     printMDF@nodeid:
  6134                           	opt stack 0
  6135  0000BF                     printNodeFirmwareVersion@nodeid:
  6136                           	opt stack 0
  6137                           
  6138                           ; 1 bytes @ 0x5F
  6139  0000BF                     	ds	1
  6140  0000C0                     printMDF@value:
  6141                           	opt stack 0
  6142  0000C0                     printGUID@buf:
  6143                           	opt stack 0
  6144  0000C0                     printNodeFirmwareVersion@buf:
  6145                           	opt stack 0
  6146                           
  6147                           ; 3 bytes @ 0x60
  6148  0000C0                     	ds	1
  6149  0000C1                     readRegisterExtended@nodeid:
  6150                           	opt stack 0
  6151  0000C1                     writeRegisterExtended@nodeid:
  6152                           	opt stack 0
  6153  0000C1                     printMDF@p:
  6154                           	opt stack 0
  6155                           
  6156                           ; 2 bytes @ 0x61
  6157  0000C1                     	ds	2
  6158  0000C3                     printGUID@value:
  6159                           	opt stack 0
  6160  0000C3                     printMDF@i:
  6161                           	opt stack 0
  6162  0000C3                     printNodeFirmwareVersion@value:
  6163                           	opt stack 0
  6164                           
  6165                           ; 1 bytes @ 0x63
  6166  0000C3                     	ds	1
  6167  0000C4                     printGUID@i:
  6168                           	opt stack 0
  6169  0000C4                     printNodeFirmwareVersion@i:
  6170                           	opt stack 0
  6171                           
  6172                           ; 1 bytes @ 0x64
  6173  0000C4                     	ds	1
  6174  0000C5                     _findNodes$1547:
  6175                           	opt stack 0
  6176                           
  6177                           ; 2 bytes @ 0x65
  6178  0000C5                     	ds	2
  6179  0000C7                     findNodes@nFound:
  6180                           	opt stack 0
  6181                           
  6182                           ; 1 bytes @ 0x67
  6183  0000C7                     	ds	1
  6184  0000C8                     findNodes@value:
  6185                           	opt stack 0
  6186                           
  6187                           ; 1 bytes @ 0x68
  6188  0000C8                     	ds	1
  6189  0000C9                     findNodes@i:
  6190                           	opt stack 0
  6191                           
  6192                           ; 1 bytes @ 0x69
  6193  0000C9                     	ds	1
  6194  0000CA                     ??_doModeVerbose:
  6195                           
  6196                           ; 0 bytes @ 0x6A
  6197  0000CA                     	ds	20
  6198  0000DE                     
  6199                           ; 2 bytes @ 0x7E
  6200  0000DE                     	ds	2
  6201  0000E0                     
  6202                           ; 3 bytes @ 0x80
  6203  0000E0                     	ds	3
  6204  0000E3                     ??_main:
  6205                           
  6206                           ; 0 bytes @ 0x83
  6207  0000E3                     	ds	1
  6208  0000E4                     main@c:
  6209                           	opt stack 0
  6210                           
  6211                           ; 1 bytes @ 0x84
  6212  0000E4                     	ds	1
  6213                           tblptru	equ	0xFF8
  6214                           tblptrh	equ	0xFF7
  6215                           tblptrl	equ	0xFF6
  6216                           tablat	equ	0xFF5
  6217                           prodh	equ	0xFF4
  6218                           prodl	equ	0xFF3
  6219                           intcon	equ	0xFF2
  6220                           indf0	equ	0xFEF
  6221                           postinc0	equ	0xFEE
  6222                           fsr0h	equ	0xFEA
  6223                           fsr0l	equ	0xFE9
  6224                           wreg	equ	0xFE8
  6225                           indf1	equ	0xFE7
  6226                           postinc1	equ	0xFE6
  6227                           postdec1	equ	0xFE5
  6228                           fsr1h	equ	0xFE2
  6229                           fsr1l	equ	0xFE1
  6230                           indf2	equ	0xFDF
  6231                           postinc2	equ	0xFDE
  6232                           postdec2	equ	0xFDD
  6233                           plusw2	equ	0xFDB
  6234                           fsr2h	equ	0xFDA
  6235                           fsr2l	equ	0xFD9
  6236                           status	equ	0xFD8
  6237                           
  6238                           	psect	cstackCOMRAM
  6239  000001                     __pcstackCOMRAM:
  6240                           	opt stack 0
  6241  000001                     ?__RegsToCANID:
  6242                           	opt stack 0
  6243  000001                     ?i1_WriteTimer0:
  6244                           	opt stack 0
  6245  000001                     ?_fifo_write:
  6246                           	opt stack 0
  6247  000001                     ?_fifo_getFree:
  6248                           	opt stack 0
  6249  000001                     ?__ECANPointBuffer:
  6250                           	opt stack 0
  6251  000001                     ReadUSART@data:
  6252                           	opt stack 0
  6253  000001                     __RegsToCANID@ptr:
  6254                           	opt stack 0
  6255  000001                     fifo_write@f:
  6256                           	opt stack 0
  6257  000001                     fifo_getFree@f:
  6258                           	opt stack 0
  6259  000001                     i1WriteTimer0@timer0:
  6260                           	opt stack 0
  6261                           
  6262                           ; 2 bytes @ 0x0
  6263  000001                     	ds	2
  6264  000003                     ??_fifo_getFree:
  6265  000003                     __RegsToCANID@val:
  6266                           	opt stack 0
  6267  000003                     fifo_write@buf:
  6268                           	opt stack 0
  6269  000003                     i1WriteTimer0@timer:
  6270                           	opt stack 0
  6271                           
  6272                           ; 2 bytes @ 0x2
  6273  000003                     	ds	1
  6274  000004                     __ECANPointBuffer@b:
  6275                           	opt stack 0
  6276                           
  6277                           ; 1 bytes @ 0x3
  6278  000004                     	ds	1
  6279  000005                     __RegsToCANID@type:
  6280                           	opt stack 0
  6281  000005                     __ECANPointBuffer@pt:
  6282                           	opt stack 0
  6283  000005                     fifo_write@nbytes:
  6284                           	opt stack 0
  6285                           
  6286                           ; 4 bytes @ 0x4
  6287  000005                     	ds	1
  6288  000006                     ??__RegsToCANID:
  6289                           
  6290                           ; 0 bytes @ 0x5
  6291  000006                     	ds	2
  6292  000008                     __RegsToCANID@Value:
  6293                           	opt stack 0
  6294                           
  6295                           ; 2 bytes @ 0x7
  6296  000008                     	ds	1
  6297  000009                     ??_fifo_write:
  6298                           
  6299                           ; 0 bytes @ 0x8
  6300  000009                     	ds	1
  6301  00000A                     ?_ECANReceiveMessage:
  6302                           	opt stack 0
  6303  00000A                     ECANReceiveMessage@id:
  6304                           	opt stack 0
  6305                           
  6306                           ; 2 bytes @ 0x9
  6307  00000A                     	ds	2
  6308  00000C                     ECANReceiveMessage@data:
  6309                           	opt stack 0
  6310                           
  6311                           ; 2 bytes @ 0xB
  6312  00000C                     	ds	1
  6313  00000D                     fifo_write@p:
  6314                           	opt stack 0
  6315                           
  6316                           ; 2 bytes @ 0xC
  6317  00000D                     	ds	1
  6318  00000E                     ECANReceiveMessage@dataLen:
  6319                           	opt stack 0
  6320                           
  6321                           ; 1 bytes @ 0xD
  6322  00000E                     	ds	1
  6323  00000F                     ECANReceiveMessage@msgFlags:
  6324                           	opt stack 0
  6325  00000F                     fifo_write@i:
  6326                           	opt stack 0
  6327                           
  6328                           ; 4 bytes @ 0xE
  6329  00000F                     	ds	1
  6330  000010                     ECANReceiveMessage@savedPtr:
  6331                           	opt stack 0
  6332                           
  6333                           ; 2 bytes @ 0xF
  6334  000010                     	ds	2
  6335  000012                     ECANReceiveMessage@i:
  6336                           	opt stack 0
  6337                           
  6338                           ; 1 bytes @ 0x11
  6339  000012                     	ds	1
  6340  000013                     ECANReceiveMessage@mode:
  6341                           	opt stack 0
  6342                           
  6343                           ; 1 bytes @ 0x12
  6344  000013                     	ds	1
  6345  000014                     ECANReceiveMessage@temp:
  6346                           	opt stack 0
  6347                           
  6348                           ; 1 bytes @ 0x13
  6349  000014                     	ds	1
  6350  000015                     ECANReceiveMessage@ptr:
  6351                           	opt stack 0
  6352                           
  6353                           ; 2 bytes @ 0x14
  6354  000015                     	ds	2
  6355  000017                     ??_Interrupt:
  6356                           
  6357                           ; 0 bytes @ 0x16
  6358  000017                     	ds	9
  6359  000020                     Interrupt@c:
  6360                           	opt stack 0
  6361                           
  6362                           ; 1 bytes @ 0x1F
  6363  000020                     	ds	1
  6364  000021                     Interrupt@fail:
  6365                           	opt stack 0
  6366                           
  6367                           ; 1 bytes @ 0x20
  6368  000021                     	ds	1
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           indf0	equ	0xFEF
  6377                           postinc0	equ	0xFEE
  6378                           fsr0h	equ	0xFEA
  6379                           fsr0l	equ	0xFE9
  6380                           wreg	equ	0xFE8
  6381                           indf1	equ	0xFE7
  6382                           postinc1	equ	0xFE6
  6383                           postdec1	equ	0xFE5
  6384                           fsr1h	equ	0xFE2
  6385                           fsr1l	equ	0xFE1
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           postdec2	equ	0xFDD
  6389                           plusw2	equ	0xFDB
  6390                           fsr2h	equ	0xFDA
  6391                           fsr2l	equ	0xFD9
  6392                           status	equ	0xFD8
  6393                           
  6394 ;;
  6395 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6396 ;;
  6397 ;; *************** function _main *****************
  6398 ;; Defined at:
  6399 ;;		line 270 in file "main.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  argc            2  126[BANK0 ] int 
  6402 ;;  argv            3  128[BANK0 ] PTR PTR unsigned char 
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;  c               1  132[BANK0 ] unsigned char 
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  2  126[BANK0 ] int 
  6407 ;; Registers used:
  6408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : F/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6414 ;;      Params:         0       5       0       0       0       0       0
  6415 ;;      Locals:         0       1       0       0       0       0       0
  6416 ;;      Temps:          0       1       0       0       0       0       0
  6417 ;;      Totals:         0       7       0       0       0       0       0
  6418 ;;Total ram usage:        7 bytes
  6419 ;; Hardware stack levels required when called:   11
  6420 ;; This function calls:
  6421 ;;		_fifo_init
  6422 ;;		_init_crc8
  6423 ;;		_Read_b_eep
  6424 ;;		_vscp_restoreDefaults
  6425 ;;		_init
  6426 ;;		_putsUSART
  6427 ;;		_printFirmwareVersion
  6428 ;;		_printMode
  6429 ;;		_fifo_read
  6430 ;;		_doModeVerbose
  6431 ;;		_doModeVscp
  6432 ;;		_doModeSLCAN
  6433 ;;		_doModeVscpNode
  6434 ;; This function is called by:
  6435 ;;		Startup code after reset
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           	psect	text0
  6440  003CDA                     __ptext0:
  6441                           	opt stack 0
  6442  003CDA                     _main:
  6443                           	opt stack 19
  6444                           
  6445                           ;main.c: 272: caps.maxVscpFrames = 1;
  6446                           
  6447                           ;incstack = 0
  6448                           ;incstack = 0
  6449  003CDA  0E01               	movlw	1
  6450  003CDC  0101               	movlb	1	; () banked
  6451  003CDE  6FEB               	movwf	_caps& (0+255),b
  6452                           
  6453                           ;main.c: 273: caps.maxCanalFrames = 1;
  6454  003CE0  6FEC               	movwf	(_caps+1)& (0+255),b
  6455                           
  6456                           ; BSR set to: 1
  6457                           ;main.c: 278: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6458  003CE2  0E01               	movlw	high _serialInputFifo
  6459  003CE4  0100               	movlb	0	; () banked
  6460  003CE6  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6461  003CE8  0ED7               	movlw	low _serialInputFifo
  6462  003CEA  6F60               	movwf	?_fifo_init& (0+255),b
  6463  003CEC  0E02               	movlw	high _serial_inputBuffer
  6464  003CEE  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6465  003CF0  0E00               	movlw	low _serial_inputBuffer
  6466  003CF2  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6467  003CF4  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6468  003CF6  0E80               	movlw	128
  6469  003CF8  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6470  003CFA  EC6D  F00C         	call	_fifo_init	;wreg free
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;main.c: 279: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6474  003CFE  0E01               	movlw	high _canInputFifo
  6475  003D00  0100               	movlb	0	; () banked
  6476  003D02  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6477  003D04  0EC7               	movlw	low _canInputFifo
  6478  003D06  6F60               	movwf	?_fifo_init& (0+255),b
  6479  003D08  0E04               	movlw	high _can_inputBuffer
  6480  003D0A  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6481  003D0C  0E00               	movlw	low _can_inputBuffer
  6482  003D0E  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6483  003D10  0E01               	movlw	1
  6484  003D12  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6485  003D14  0EEE               	movlw	238
  6486  003D16  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6487  003D18  EC6D  F00C         	call	_fifo_init	;wreg free
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;main.c: 282: init_crc8();
  6491  003D1C  EC24  F00F         	call	_init_crc8	;wreg free
  6492                           
  6493                           ; BSR set to: 1
  6494                           ;main.c: 286: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6495                           ;main.c: 287: ( 0xaa != Read_b_eep(0x02) ) ) {
  6496  003D20  0100               	movlb	0	; () banked
  6497  003D22  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6498  003D24  0E01               	movlw	1
  6499  003D26  6F60               	movwf	?_Read_b_eep& (0+255),b
  6500  003D28  ECE1  F00A         	call	_Read_b_eep	;wreg free
  6501  003D2C  0A55               	xorlw	85
  6502  003D2E  E108               	bnz	l13466
  6503  003D30  0100               	movlb	0	; () banked
  6504  003D32  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6505  003D34  0E02               	movlw	2
  6506  003D36  6F60               	movwf	?_Read_b_eep& (0+255),b
  6507  003D38  ECE1  F00A         	call	_Read_b_eep	;wreg free
  6508  003D3C  0AAA               	xorlw	170
  6509  003D3E  A4D8               	btfss	status,2,c
  6510  003D40                     l13466:
  6511                           
  6512                           ;main.c: 288: vscp_restoreDefaults();
  6513  003D40  ECD4  F00A         	call	_vscp_restoreDefaults	;wreg free
  6514                           
  6515                           ;main.c: 289: }
  6516                           ;main.c: 292: init();
  6517  003D44  EC12  F00D         	call	_init	;wreg free
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;main.c: 296: _delay((unsigned long)((10)*(40000000/4000.0)));
  6521  003D48  0E82               	movlw	130
  6522  003D4A  6FE3               	movwf	??_main& (0+255),b
  6523  003D4C  0EDD               	movlw	221
  6524  003D4E                     u22797:
  6525  003D4E  2EE8               	decfsz	wreg,f,c
  6526  003D50  D7FE               	goto	u22797
  6527  003D52  2FE3               	decfsz	??_main& (0+255),f,b
  6528  003D54  D7FC               	goto	u22797
  6529  003D56  D000               	nop2	
  6530                           
  6531                           ;main.c: 300: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6532  003D58  0E76               	movlw	high STR_1
  6533  003D5A  0100               	movlb	0	; () banked
  6534  003D5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6535  003D5E  0E18               	movlw	low STR_1
  6536  003D60  6F61               	movwf	?_putsUSART& (0+255),b
  6537  003D62  ECA8  F00D         	call	_putsUSART	;wreg free
  6538                           
  6539                           ;main.c: 301: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6540  003D66  0E6F               	movlw	high STR_2
  6541  003D68  0100               	movlb	0	; () banked
  6542  003D6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6543  003D6C  0EBA               	movlw	low STR_2
  6544  003D6E  6F61               	movwf	?_putsUSART& (0+255),b
  6545  003D70  ECA8  F00D         	call	_putsUSART	;wreg free
  6546                           
  6547                           ;main.c: 302: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6548  003D74  0E76               	movlw	high STR_3
  6549  003D76  0100               	movlb	0	; () banked
  6550  003D78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6551  003D7A  0E86               	movlw	low STR_3
  6552  003D7C  6F61               	movwf	?_putsUSART& (0+255),b
  6553  003D7E  ECA8  F00D         	call	_putsUSART	;wreg free
  6554                           
  6555                           ;main.c: 303: printFirmwareVersion();
  6556  003D82  ECC8  F010         	call	_printFirmwareVersion	;wreg free
  6557                           
  6558                           ;main.c: 304: printMode();
  6559  003D86  EC97  F00F         	call	_printMode	;wreg free
  6560                           
  6561                           ;main.c: 308: if ( 0 != mode ) {
  6562  003D8A  0100               	movlb	0	; () banked
  6563  003D8C  51E6               	movf	_mode& (0+255),w,b
  6564  003D8E  E036               	bz	l13500
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;main.c: 310: uint8_t c;
  6568                           ;main.c: 312: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6569  003D90  0E70               	movlw	high STR_4
  6570  003D92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6571  003D94  0ED3               	movlw	low STR_4
  6572  003D96  6F61               	movwf	?_putsUSART& (0+255),b
  6573  003D98  ECA8  F00D         	call	_putsUSART	;wreg free
  6574                           
  6575                           ;main.c: 314: timekeeper = 0;
  6576  003D9C  6A22               	clrf	_timekeeper,c	;volatile
  6577  003D9E  6A23               	clrf	_timekeeper+1,c	;volatile
  6578  003DA0  6A24               	clrf	_timekeeper+2,c	;volatile
  6579  003DA2  6A25               	clrf	_timekeeper+3,c	;volatile
  6580                           
  6581                           ;main.c: 315: ledFunctionality = 6;
  6582  003DA4  0E06               	movlw	6
  6583  003DA6  6E35               	movwf	_ledFunctionality,c
  6584                           
  6585                           ;main.c: 316: while (timekeeper < 3000) {
  6586  003DA8  D020               	goto	l13498
  6587  003DAA                     l437:
  6588  003DAA  0004               	clrwdt		;# 
  6589                           
  6590                           ;main.c: 318: (INTCONbits.GIE = 0);
  6591  003DAC  9EF2               	bcf	intcon,7,c	;volatile
  6592                           
  6593                           ;main.c: 319: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6594  003DAE  0E01               	movlw	high _serialInputFifo
  6595  003DB0  0100               	movlb	0	; () banked
  6596  003DB2  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6597  003DB4  0ED7               	movlw	low _serialInputFifo
  6598  003DB6  6F60               	movwf	?_fifo_read& (0+255),b
  6599  003DB8  0E00               	movlw	high main@c
  6600  003DBA  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6601  003DBC  0EE4               	movlw	low main@c
  6602  003DBE  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6603  003DC0  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6604  003DC2  0E01               	movlw	1
  6605  003DC4  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6606  003DC6  ECB6  F015         	call	_fifo_read	;wreg free
  6607  003DCA  0560               	decf	?_fifo_read& (0+255),w,b
  6608  003DCC  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6609  003DCE  E10C               	bnz	l438
  6610                           
  6611                           ; BSR set to: 0
  6612                           ;main.c: 320: (INTCONbits.GIE = 1);
  6613  003DD0  8EF2               	bsf	intcon,7,c	;volatile
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;main.c: 321: if ('v' == c) {
  6617  003DD2  51E4               	movf	main@c& (0+255),w,b
  6618  003DD4  0A76               	xorlw	118
  6619  003DD6  E108               	bnz	l438
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;main.c: 322: mode = 0;
  6623  003DD8  6BE6               	clrf	_mode& (0+255),b
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;main.c: 323: putsUSART((char *) "Temporary verbose mode set\r\n");
  6627  003DDA  0E77               	movlw	high STR_5
  6628  003DDC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6629  003DDE  0EF1               	movlw	low STR_5
  6630  003DE0  6F61               	movwf	?_putsUSART& (0+255),b
  6631  003DE2  ECA8  F00D         	call	_putsUSART	;wreg free
  6632                           
  6633                           ;main.c: 324: break;
  6634  003DE6  D00A               	goto	l13500
  6635  003DE8                     l438:
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;main.c: 325: }
  6639                           ;main.c: 326: }
  6640                           ;main.c: 327: (INTCONbits.GIE = 1);
  6641  003DE8  8EF2               	bsf	intcon,7,c	;volatile
  6642  003DEA                     l13498:
  6643  003DEA  0EB8               	movlw	184
  6644  003DEC  5C22               	subwf	_timekeeper,w,c	;volatile
  6645  003DEE  0E0B               	movlw	11
  6646  003DF0  5823               	subwfb	_timekeeper+1,w,c	;volatile
  6647  003DF2  0E00               	movlw	0
  6648  003DF4  5824               	subwfb	_timekeeper+2,w,c	;volatile
  6649  003DF6  0E00               	movlw	0
  6650  003DF8  5825               	subwfb	_timekeeper+3,w,c	;volatile
  6651  003DFA  E3D7               	bnc	l437
  6652  003DFC                     l13500:
  6653                           
  6654                           ;main.c: 328: }
  6655                           ;main.c: 329: }
  6656                           ;main.c: 331: ledFunctionality = 1;
  6657  003DFC  0E01               	movlw	1
  6658  003DFE  6E35               	movwf	_ledFunctionality,c
  6659  003E00                     l441:
  6660  003E00  0004               	clrwdt		;# 
  6661                           
  6662                           ;main.c: 342: if (COMSTATbits.TXBO) {
  6663  003E02  AA74               	btfss	3956,5,c	;volatile
  6664  003E04  D002               	goto	l442
  6665                           
  6666                           ;main.c: 344: ledFunctionality = 6;
  6667  003E06  0E06               	movlw	6
  6668  003E08  D009               	goto	L1
  6669  003E0A                     l442:
  6670                           
  6671                           ;main.c: 346: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6672  003E0A  B874               	btfsc	3956,4,c	;volatile
  6673  003E0C  D002               	goto	l13508
  6674  003E0E  A674               	btfss	3956,3,c	;volatile
  6675  003E10  D002               	goto	l444
  6676  003E12                     l13508:
  6677                           
  6678                           ;main.c: 348: ledFunctionality = 5;
  6679  003E12  0E05               	movlw	5
  6680  003E14  D003               	goto	L1
  6681  003E16                     l444:
  6682                           
  6683                           ;main.c: 352: ledFunctionality = 4;
  6684  003E16  0E04               	movlw	4
  6685                           
  6686                           ;main.c: 350: else if (COMSTATbits.EWARN) {
  6687  003E18  A074               	btfss	3956,0,c	;volatile
  6688                           
  6689                           ;main.c: 354: else {
  6690                           ;main.c: 356: ledFunctionality = 1;
  6691                           
  6692                           ;main.c: 353: }
  6693  003E1A  0E01               	movlw	1
  6694  003E1C                     L1:
  6695  003E1C  6E35               	movwf	_ledFunctionality,c
  6696                           
  6697                           ;main.c: 357: }
  6698                           ;main.c: 360: if (COMSTATbits.RXBnOVFL) {
  6699  003E1E  AC74               	btfss	3956,6,c	;volatile
  6700  003E20  D007               	goto	l13520
  6701                           
  6702                           ;main.c: 361: can_receiveOverruns++;
  6703  003E22  0101               	movlb	1	; () banked
  6704  003E24  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6705  003E26  0E00               	movlw	0
  6706  003E28  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6707  003E2A  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6708  003E2C  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6709                           
  6710                           ; BSR set to: 1
  6711                           ;main.c: 362: COMSTATbits.RXBnOVFL = 0;
  6712  003E2E  9C74               	bcf	3956,6,c	;volatile
  6713  003E30                     l13520:
  6714                           
  6715                           ;main.c: 363: }
  6716                           ;main.c: 367: if ( RCSTAbits.OERR ) {
  6717  003E30  A2AB               	btfss	4011,1,c	;volatile
  6718  003E32  D002               	goto	l451
  6719                           
  6720                           ;main.c: 368: RCSTAbits.CREN = 0;
  6721  003E34  98AB               	bcf	4011,4,c	;volatile
  6722                           
  6723                           ;main.c: 369: RCSTAbits.CREN = 1;
  6724  003E36  88AB               	bsf	4011,4,c	;volatile
  6725  003E38                     l451:
  6726                           
  6727                           ;main.c: 370: }
  6728                           ;main.c: 372: if (0 == mode) {
  6729  003E38  0100               	movlb	0	; () banked
  6730  003E3A  67E6               	tstfsz	_mode& (0+255),b
  6731  003E3C  D003               	goto	l13526
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;main.c: 373: doModeVerbose();
  6735  003E3E  ECDD  F02B         	call	_doModeVerbose	;wreg free
  6736                           
  6737                           ;main.c: 374: }
  6738  003E42  D7DE               	goto	l441
  6739  003E44                     l13526:
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;main.c: 375: else if (1 == mode) {
  6743  003E44  05E6               	decf	_mode& (0+255),w,b
  6744  003E46  E103               	bnz	l13530
  6745  003E48                     l13528:
  6746                           
  6747                           ; BSR set to: 0
  6748                           ;main.c: 376: doModeVscp();
  6749  003E48  ECDD  F020         	call	_doModeVscp	;wreg free
  6750                           
  6751                           ;main.c: 377: }
  6752  003E4C  D7D9               	goto	l441
  6753  003E4E                     l13530:
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;main.c: 378: else if (2 == mode) {
  6757  003E4E  51E6               	movf	_mode& (0+255),w,b
  6758  003E50  0A02               	xorlw	2
  6759  003E52  E103               	bnz	l13534
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;main.c: 379: doModeSLCAN();
  6763  003E54  EC58  F026         	call	_doModeSLCAN	;wreg free
  6764                           
  6765                           ;main.c: 380: }
  6766  003E58  D7D3               	goto	l441
  6767  003E5A                     l13534:
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;main.c: 381: else if (3 == mode) {
  6771  003E5A  51E6               	movf	_mode& (0+255),w,b
  6772  003E5C  0A03               	xorlw	3
  6773  003E5E  E1F4               	bnz	l13528
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;main.c: 382: doModeVscpNode();
  6777  003E60  ECD0  F00A         	call	_doModeVscpNode	;wreg free
  6778                           
  6779                           ;main.c: 383: }
  6780  003E64  D7CD               	goto	l441
  6781  003E66                     __end_of_main:
  6782                           	opt stack 0
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodh	equ	0xFF4
  6788                           prodl	equ	0xFF3
  6789                           intcon	equ	0xFF2
  6790                           indf0	equ	0xFEF
  6791                           postinc0	equ	0xFEE
  6792                           fsr0h	equ	0xFEA
  6793                           fsr0l	equ	0xFE9
  6794                           wreg	equ	0xFE8
  6795                           indf1	equ	0xFE7
  6796                           postinc1	equ	0xFE6
  6797                           postdec1	equ	0xFE5
  6798                           fsr1h	equ	0xFE2
  6799                           fsr1l	equ	0xFE1
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           plusw2	equ	0xFDB
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _doModeVscpNode *****************
  6809 ;; Defined at:
  6810 ;;		line 1572 in file "main.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;		None
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;		None
  6815 ;; Return value:  Size  Location     Type
  6816 ;;		None               void
  6817 ;; Registers used:
  6818 ;;		None
  6819 ;; Tracked objects:
  6820 ;;		On entry : F/0
  6821 ;;		On exit  : F/0
  6822 ;;		Unchanged: F/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6824 ;;      Params:         0       0       0       0       0       0       0
  6825 ;;      Locals:         0       0       0       0       0       0       0
  6826 ;;      Temps:          0       0       0       0       0       0       0
  6827 ;;      Totals:         0       0       0       0       0       0       0
  6828 ;;Total ram usage:        0 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    3
  6831 ;; This function calls:
  6832 ;;		Nothing
  6833 ;; This function is called by:
  6834 ;;		_main
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           	psect	text1
  6839  0015A0                     __ptext1:
  6840                           	opt stack 0
  6841  0015A0                     _doModeVscpNode:
  6842                           	opt stack 26
  6843                           
  6844                           ; BSR set to: 0
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;incstack = 0
  6848                           ;incstack = 0
  6849  0015A0  0012               	return	
  6850  0015A2                     __end_of_doModeVscpNode:
  6851                           	opt stack 0
  6852                           tblptru	equ	0xFF8
  6853                           tblptrh	equ	0xFF7
  6854                           tblptrl	equ	0xFF6
  6855                           tablat	equ	0xFF5
  6856                           prodh	equ	0xFF4
  6857                           prodl	equ	0xFF3
  6858                           intcon	equ	0xFF2
  6859                           indf0	equ	0xFEF
  6860                           postinc0	equ	0xFEE
  6861                           fsr0h	equ	0xFEA
  6862                           fsr0l	equ	0xFE9
  6863                           wreg	equ	0xFE8
  6864                           indf1	equ	0xFE7
  6865                           postinc1	equ	0xFE6
  6866                           postdec1	equ	0xFE5
  6867                           fsr1h	equ	0xFE2
  6868                           fsr1l	equ	0xFE1
  6869                           indf2	equ	0xFDF
  6870                           postinc2	equ	0xFDE
  6871                           postdec2	equ	0xFDD
  6872                           plusw2	equ	0xFDB
  6873                           fsr2h	equ	0xFDA
  6874                           fsr2l	equ	0xFD9
  6875                           status	equ	0xFD8
  6876                           
  6877 ;; *************** function _doModeSLCAN *****************
  6878 ;; Defined at:
  6879 ;;		line 1354 in file "main.c"
  6880 ;; Parameters:    Size  Location     Type
  6881 ;;		None
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  id              4   61[BANK0 ] unsigned long 
  6884 ;;  dlc             1   65[BANK0 ] unsigned char 
  6885 ;;  rv              1   67[BANK0 ] enum E15660
  6886 ;;  c               1   66[BANK0 ] unsigned char 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;		None               void
  6889 ;; Registers used:
  6890 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6891 ;; Tracked objects:
  6892 ;;		On entry : F/0
  6893 ;;		On exit  : F/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6896 ;;      Params:         0       0       0       0       0       0       0
  6897 ;;      Locals:         0       7       0       0       0       0       0
  6898 ;;      Temps:          0       7       0       0       0       0       0
  6899 ;;      Totals:         0      14       0       0       0       0       0
  6900 ;;Total ram usage:       14 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    7
  6903 ;; This function calls:
  6904 ;;		_putsUSART
  6905 ;;		_fifo_read
  6906 ;;		_Busy_eep
  6907 ;;		_Write_b_eep
  6908 ;;		_ECANSetOperationMode
  6909 ;;		_memset
  6910 ;;		_receiveSendEventSLCAN
  6911 ;;		_strlen
  6912 ;;		_hexStringToBytes
  6913 ;;		_memcpy
  6914 ;;		_sendCANFrame
  6915 ;; This function is called by:
  6916 ;;		_main
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           	psect	text2
  6921  004CB0                     __ptext2:
  6922                           	opt stack 0
  6923  004CB0                     _doModeSLCAN:
  6924                           	opt stack 22
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;main.c: 1355: uint8_t c;
  6928                           ;main.c: 1356: BOOL rv = 0;
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;incstack = 0
  6932                           ;incstack = 0
  6933  004CB0  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;main.c: 1359: receiveSendEventSLCAN();
  6937  004CB2  ECA8  F01D         	call	_receiveSendEventSLCAN	;wreg free
  6938                           
  6939                           ;main.c: 1362: (INTCONbits.GIE = 0);
  6940  004CB6  9EF2               	bcf	intcon,7,c	;volatile
  6941                           
  6942                           ;main.c: 1364: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  6943  004CB8  0E01               	movlw	high _serialInputFifo
  6944  004CBA  0100               	movlb	0	; () banked
  6945  004CBC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6946  004CBE  0ED7               	movlw	low _serialInputFifo
  6947  004CC0  6F60               	movwf	?_fifo_read& (0+255),b
  6948  004CC2  0E00               	movlw	high doModeSLCAN@c
  6949  004CC4  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6950  004CC6  0EA2               	movlw	low doModeSLCAN@c
  6951  004CC8  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6952  004CCA  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6953  004CCC  0E01               	movlw	1
  6954  004CCE  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6955  004CD0  ECB6  F015         	call	_fifo_read	;wreg free
  6956  004CD4  0560               	decf	?_fifo_read& (0+255),w,b
  6957  004CD6  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6958  004CD8  E001 D1C7          	bnz	l14630
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;main.c: 1367: (INTCONbits.GIE = 1);
  6962  004CDC  8EF2               	bsf	intcon,7,c	;volatile
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;main.c: 1369: if (0x0d != c) {
  6966  004CDE  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6967  004CE0  0A0D               	xorlw	13
  6968  004CE2  E101 D176          	bz	l14618
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;main.c: 1370: cmdbuf[ pos ] = c;
  6972  004CE6  ECB7  F021         	call	PL24	;call to abstracted procedure
  6973  004CEA  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;main.c: 1371: pos++;
  6977  004CEE  2BE7               	incf	_pos& (0+255),f,b
  6978  004CF0  D1BD               	goto	l734
  6979  004CF2                     l14490:
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;main.c: 1379: if (1 == strlen(cmdbuf)) {
  6983  004CF2  0E01               	movlw	high _cmdbuf
  6984  004CF4  0100               	movlb	0	; () banked
  6985  004CF6  6F61               	movwf	(?_strlen+1)& (0+255),b
  6986  004CF8  0E27               	movlw	low _cmdbuf
  6987  004CFA  6F60               	movwf	?_strlen& (0+255),b
  6988  004CFC  EC8D  F00C         	call	_strlen	;wreg free
  6989  004D00  0560               	decf	?_strlen& (0+255),w,b
  6990  004D02  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6991  004D04  E001 D194          	bnz	l14620
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;main.c: 1380: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6995  004D08  0E7A               	movlw	high STR_141
  6996  004D0A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6997  004D0C  0E3A               	movlw	low STR_141
  6998  004D0E  6F61               	movwf	?_putsUSART& (0+255),b
  6999  004D10  ECA8  F00D         	call	_putsUSART	;wreg free
  7000  004D14                     l14494:
  7001                           
  7002                           ;main.c: 1381: rv = 1;
  7003  004D14  0E01               	movlw	1
  7004  004D16  D114               	goto	L4
  7005  004D18                     l14496:
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;main.c: 1387: if (1 == strlen(cmdbuf)) {
  7009  004D18  0E01               	movlw	high _cmdbuf
  7010  004D1A  0100               	movlb	0	; () banked
  7011  004D1C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7012  004D1E  0E27               	movlw	low _cmdbuf
  7013  004D20  6F60               	movwf	?_strlen& (0+255),b
  7014  004D22  EC8D  F00C         	call	_strlen	;wreg free
  7015  004D26  0560               	decf	?_strlen& (0+255),w,b
  7016  004D28  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7017  004D2A  E001 D181          	bnz	l14620
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;main.c: 1388: putsUSART((char *) "V1011\r\n");
  7021  004D2E  0E7B               	movlw	high STR_142
  7022  004D30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7023  004D32  0EC8               	movlw	low STR_142
  7024  004D34  6F61               	movwf	?_putsUSART& (0+255),b
  7025  004D36  ECA8  F00D         	call	_putsUSART	;wreg free
  7026  004D3A  D7EC               	goto	l14494
  7027  004D3C                     l14502:
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;main.c: 1395: if (1 == strlen(cmdbuf)) {
  7031  004D3C  0E01               	movlw	high _cmdbuf
  7032  004D3E  0100               	movlb	0	; () banked
  7033  004D40  6F61               	movwf	(?_strlen+1)& (0+255),b
  7034  004D42  0E27               	movlw	low _cmdbuf
  7035  004D44  6F60               	movwf	?_strlen& (0+255),b
  7036  004D46  EC8D  F00C         	call	_strlen	;wreg free
  7037  004D4A  0560               	decf	?_strlen& (0+255),w,b
  7038  004D4C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7039  004D4E  E001 D16F          	bnz	l14620
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;main.c: 1396: putsUSART((char *) "N1977\r\n");
  7043  004D52  0E7B               	movlw	high STR_143
  7044  004D54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7045  004D56  0ED0               	movlw	low STR_143
  7046  004D58  6F61               	movwf	?_putsUSART& (0+255),b
  7047  004D5A  ECA8  F00D         	call	_putsUSART	;wreg free
  7048  004D5E  D7DA               	goto	l14494
  7049  004D60                     l14508:
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;main.c: 1405: bInitiated = 1;
  7053  004D60  0E01               	movlw	1
  7054  004D62  6E31               	movwf	_bInitiated,c
  7055                           
  7056                           ;main.c: 1406: rv = 1;
  7057  004D64  D0B8               	goto	L3
  7058  004D66                     l744:
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;main.c: 1411: if (!bOpen) {
  7062  004D66  6632               	tstfsz	_bOpen,c
  7063  004D68  D003               	goto	l14512
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;main.c: 1412: bInitiated = 1;
  7067  004D6A  0E01               	movlw	1
  7068  004D6C  6E31               	movwf	_bInitiated,c
  7069                           
  7070                           ;main.c: 1413: rv = 1;
  7071  004D6E  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7072  004D70                     l14512:
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;main.c: 1418: if (1 == strlen(cmdbuf)) {
  7076  004D70  0E01               	movlw	high _cmdbuf
  7077  004D72  0100               	movlb	0	; () banked
  7078  004D74  6F61               	movwf	(?_strlen+1)& (0+255),b
  7079  004D76  0E27               	movlw	low _cmdbuf
  7080  004D78  6F60               	movwf	?_strlen& (0+255),b
  7081  004D7A  EC8D  F00C         	call	_strlen	;wreg free
  7082  004D7E  0560               	decf	?_strlen& (0+255),w,b
  7083  004D80  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7084  004D82  E001 D155          	bnz	l14620
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;main.c: 1419: if (!bOpen && bInitiated) {
  7088  004D86  6632               	tstfsz	_bOpen,c
  7089  004D88  D153               	goto	l14620
  7090                           
  7091                           ; BSR set to: 0
  7092  004D8A  5031               	movf	_bInitiated,w,c
  7093  004D8C  E101 D150          	bz	l14620
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;main.c: 1420: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7097  004D90  0E00               	movlw	0
  7098  004D92  EC08  F00B         	call	_ECANSetOperationMode
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;main.c: 1421: bOpen = 1;
  7102  004D96  0E01               	movlw	1
  7103  004D98  6E32               	movwf	_bOpen,c
  7104  004D9A  D7BC               	goto	l14494
  7105  004D9C                     l14524:
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;main.c: 1429: if (1 == strlen(cmdbuf)) {
  7109  004D9C  0E01               	movlw	high _cmdbuf
  7110  004D9E  0100               	movlb	0	; () banked
  7111  004DA0  6F61               	movwf	(?_strlen+1)& (0+255),b
  7112  004DA2  0E27               	movlw	low _cmdbuf
  7113  004DA4  6F60               	movwf	?_strlen& (0+255),b
  7114  004DA6  EC8D  F00C         	call	_strlen	;wreg free
  7115  004DAA  0560               	decf	?_strlen& (0+255),w,b
  7116  004DAC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7117  004DAE  E001 D13F          	bnz	l14620
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;main.c: 1430: if (bOpen) {
  7121  004DB2  5032               	movf	_bOpen,w,c
  7122  004DB4  E0AF               	bz	l14494
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;main.c: 1431: ECANSetOperationMode(0x20);
  7126  004DB6  0E20               	movlw	32
  7127  004DB8  EC08  F00B         	call	_ECANSetOperationMode
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;main.c: 1432: bOpen = 0;
  7131  004DBC  6A32               	clrf	_bOpen,c
  7132  004DBE  D7AA               	goto	l14494
  7133  004DC0                     l14534:
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;main.c: 1445: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7137  004DC0  5032               	movf	_bOpen,w,c
  7138  004DC2  E101 D135          	bz	l14620
  7139                           
  7140                           ; BSR set to: 0
  7141  004DC6  0E01               	movlw	high _cmdbuf
  7142  004DC8  0100               	movlb	0	; () banked
  7143  004DCA  6F61               	movwf	(?_strlen+1)& (0+255),b
  7144  004DCC  0E27               	movlw	low _cmdbuf
  7145  004DCE  6F60               	movwf	?_strlen& (0+255),b
  7146  004DD0  EC8D  F00C         	call	_strlen	;wreg free
  7147  004DD4  0E0A               	movlw	10
  7148  004DD6  5D60               	subwf	?_strlen& (0+255),w,b
  7149  004DD8  0E00               	movlw	0
  7150  004DDA  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7151  004DDC  E201 D128          	bnc	l14620
  7152                           
  7153                           ; BSR set to: 0
  7154                           ;main.c: 1447: uint32_t id;
  7155                           ;main.c: 1448: uint8_t dlc;
  7156                           ;main.c: 1450: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7157  004DE0  0E01               	movlw	high _wrkbuf
  7158  004DE2  0100               	movlb	0	; () banked
  7159  004DE4  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7160  004DE6  0E77               	movlw	low _wrkbuf
  7161  004DE8  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7162  004DEA  0E50               	movlw	80
  7163  004DEC  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7164  004DEE  0E01               	movlw	high _cmdbuf
  7165  004DF0  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7166  004DF2  0E27               	movlw	low _cmdbuf
  7167  004DF4  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7168  004DF6  ECA4  F011         	call	_hexStringToBytes	;wreg free
  7169  004DFA  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7170  004DFC  0E05               	movlw	5
  7171  004DFE  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7172  004E00  E201 D116          	bnc	l14620
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;main.c: 1452: }
  7176                           ;main.c: 1454: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7177  004E04  C17A  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7178  004E08  0E08               	movlw	8
  7179  004E0A  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7180  004E0C  C179  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7181  004E10  0E10               	movlw	16
  7182  004E12  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7183  004E14  C178  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7184  004E18  0E18               	movlw	24
  7185  004E1A  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7186  004E1C  C177  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7187  004E20  0100               	movlb	0	; () banked
  7188  004E22  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7189  004E24  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7190  004E26  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7191  004E28  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7192  004E2A  D001               	goto	u19500
  7193  004E2C                     u19505:
  7194  004E2C  D920               	call	PL78	;call to abstracted procedure
  7195  004E2E                     u19500:
  7196  004E2E  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7197  004E30  D7FD               	goto	u19505
  7198  004E32  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7199  004E34  D001               	goto	u19510
  7200  004E36                     u19515:
  7201  004E36  D91B               	call	PL78	;call to abstracted procedure
  7202  004E38                     u19510:
  7203  004E38  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7204  004E3A  D7FD               	goto	u19515
  7205  004E3C  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7206  004E3E  D001               	goto	u19520
  7207  004E40                     u19525:
  7208  004E40  D916               	call	PL78	;call to abstracted procedure
  7209  004E42                     u19520:
  7210  004E42  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7211  004E44  D7FD               	goto	u19525
  7212  004E46  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7213  004E4A  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7214  004E4E  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7215  004E52  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;main.c: 1455: dlc = vscpData[4];
  7219  004E56  C1E3  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;main.c: 1458: if (dlc > 8) break;
  7223  004E5A  0E08               	movlw	8
  7224  004E5C  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7225  004E5E  D001               	goto	l14550
  7226  004E60  D0E7               	goto	l14620
  7227  004E62                     l14550:
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;main.c: 1459: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7231  004E62  90D8               	bcf	status,0,c
  7232  004E64  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7233  004E66  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7234  004E68  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7235  004E6A  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7236  004E6C  0E0A               	movlw	10
  7237  004E6E  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7238  004E70  0E00               	movlw	0
  7239  004E72  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7240  004E74  0E01               	movlw	high _cmdbuf
  7241  004E76  0100               	movlb	0	; () banked
  7242  004E78  6F61               	movwf	(?_strlen+1)& (0+255),b
  7243  004E7A  0E27               	movlw	low _cmdbuf
  7244  004E7C  6F60               	movwf	?_strlen& (0+255),b
  7245  004E7E  EC8D  F00C         	call	_strlen	;wreg free
  7246  004E82  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7247  004E84  5D60               	subwf	?_strlen& (0+255),w,b
  7248  004E86  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7249  004E88  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7250  004E8A  E201 D0D1          	bnc	l14620
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;main.c: 1461: memcpy(vscpData, vscpData + 5, dlc);
  7254  004E8E  0E01               	movlw	high _vscpData
  7255  004E90  0100               	movlb	0	; () banked
  7256  004E92  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7257  004E94  0EDF               	movlw	low _vscpData
  7258  004E96  6F60               	movwf	?_memcpy& (0+255),b
  7259  004E98  0EE4               	movlw	low (_vscpData+5)
  7260  004E9A  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7261  004E9C  0E01               	movlw	high (_vscpData+5)
  7262  004E9E  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7263  004EA0  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7264  004EA4  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7265  004EA8  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7266  004EAC  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7267  004EAE  ECAD  F00C         	call	_memcpy	;wreg free
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;main.c: 1463: rv = sendCANFrame(id, dlc, vscpData);
  7271  004EB2  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7272  004EB6  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7273  004EBA  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7274  004EBE  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7275  004EC2  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7276  004EC6  0E01               	movlw	high _vscpData
  7277  004EC8  0100               	movlb	0	; () banked
  7278  004ECA  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7279  004ECC  0EDF               	movlw	low _vscpData
  7280  004ECE  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7281  004ED0  ECF3  F00B         	call	_sendCANFrame	;wreg free
  7282  004ED4  D035               	goto	L4
  7283  004ED6                     L3:
  7284  004ED6  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7285  004ED8  D0AB               	goto	l14620
  7286  004EDA                     l14558:
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;main.c: 1478: if (bOpen && (strlen(cmdbuf) == 1)) {
  7290  004EDA  5032               	movf	_bOpen,w,c
  7291  004EDC  E101 D0A8          	bz	l14620
  7292                           
  7293                           ; BSR set to: 0
  7294  004EE0  0E01               	movlw	high _cmdbuf
  7295  004EE2  0100               	movlb	0	; () banked
  7296  004EE4  6F61               	movwf	(?_strlen+1)& (0+255),b
  7297  004EE6  0E27               	movlw	low _cmdbuf
  7298  004EE8  6F60               	movwf	?_strlen& (0+255),b
  7299  004EEA  EC8D  F00C         	call	_strlen	;wreg free
  7300  004EEE  0560               	decf	?_strlen& (0+255),w,b
  7301  004EF0  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7302  004EF2  E001 D09D          	bnz	l14620
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;main.c: 1479: putsUSART((char *) "F00\r\n");
  7306  004EF6  0E7C               	movlw	high STR_144
  7307  004EF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7308  004EFA  0E6C               	movlw	low STR_144
  7309  004EFC  6F61               	movwf	?_putsUSART& (0+255),b
  7310  004EFE  ECA8  F00D         	call	_putsUSART	;wreg free
  7311  004F02  D096               	goto	l14620
  7312  004F04                     l14568:
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;main.c: 1495: if (2 == strlen(cmdbuf)) {
  7316  004F04  0E01               	movlw	high _cmdbuf
  7317  004F06  0100               	movlb	0	; () banked
  7318  004F08  6F61               	movwf	(?_strlen+1)& (0+255),b
  7319  004F0A  0E27               	movlw	low _cmdbuf
  7320  004F0C  6F60               	movwf	?_strlen& (0+255),b
  7321  004F0E  EC8D  F00C         	call	_strlen	;wreg free
  7322  004F12  5160               	movf	?_strlen& (0+255),w,b
  7323  004F14  0A02               	xorlw	2
  7324  004F16  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7325  004F18  E001 D08A          	bnz	l14620
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;main.c: 1496: if (!bOpen) {
  7329  004F1C  6632               	tstfsz	_bOpen,c
  7330  004F1E  D088               	goto	l14620
  7331                           
  7332                           ; BSR set to: 0
  7333                           ;main.c: 1497: if ('0' == cmdbuf[1]) {
  7334  004F20  0101               	movlb	1	; () banked
  7335  004F22  5128               	movf	(_cmdbuf+1)& (0+255),w,b
  7336  004F24  0A30               	xorlw	48
  7337  004F26  E10E               	bnz	l14580
  7338                           
  7339                           ; BSR set to: 1
  7340                           ;main.c: 1498: nTimeStamp = 0;
  7341  004F28  6A36               	clrf	_nTimeStamp,c
  7342                           
  7343                           ; BSR set to: 1
  7344                           ;main.c: 1500: (Busy_eep(), Write_b_eep(0x05,0));
  7345  004F2A  ECD1  F00A         	call	_Busy_eep	;wreg free
  7346  004F2E  0100               	movlb	0	; () banked
  7347  004F30  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7348  004F32  0E05               	movlw	5
  7349  004F34  6F60               	movwf	?_Write_b_eep& (0+255),b
  7350  004F36  0E00               	movlw	0
  7351  004F38  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7352  004F3A  ECA1  F00B         	call	_Write_b_eep	;wreg free
  7353  004F3E  D6EA               	goto	l14494
  7354  004F40                     L4:
  7355  004F40  0100               	movlb	0	; () banked
  7356  004F42  D7C9               	goto	L3
  7357  004F44                     l14580:
  7358                           
  7359                           ; BSR set to: 1
  7360  004F44  5128               	movf	(_cmdbuf+1)& (0+255),w,b
  7361  004F46  0A31               	xorlw	49
  7362  004F48  E10D               	bnz	l769
  7363                           
  7364                           ; BSR set to: 1
  7365                           ;main.c: 1503: nTimeStamp = 1;
  7366  004F4A  0E01               	movlw	1
  7367  004F4C  6E36               	movwf	_nTimeStamp,c
  7368                           
  7369                           ; BSR set to: 1
  7370                           ;main.c: 1505: (Busy_eep(), Write_b_eep(0x05,1));
  7371  004F4E  ECD1  F00A         	call	_Busy_eep	;wreg free
  7372  004F52  0100               	movlb	0	; () banked
  7373  004F54  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7374  004F56  0E05               	movlw	5
  7375  004F58  6F60               	movwf	?_Write_b_eep& (0+255),b
  7376  004F5A  0E01               	movlw	1
  7377  004F5C  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7378  004F5E  ECA1  F00B         	call	_Write_b_eep	;wreg free
  7379  004F62  D6D8               	goto	l14494
  7380  004F64                     l769:
  7381                           
  7382                           ; BSR set to: 1
  7383                           ;main.c: 1509: rv = 0;
  7384  004F64  0100               	movlb	0	; () banked
  7385  004F66  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7386  004F68  D063               	goto	l14620
  7387  004F6A                     l14588:
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;main.c: 1517: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7391  004F6A  ECD1  F00A         	call	_Busy_eep	;wreg free
  7392  004F6E  ECEA  F014         	call	PL60	;call to abstracted procedure
  7393  004F72  ECA1  F00B         	call	_Write_b_eep	;wreg free
  7394  004F76  00FF               	reset		;# 
  7395                           
  7396                           ;main.c: 1519: break;
  7397  004F78  D05B               	goto	l14620
  7398  004F7A                     l14592:
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;main.c: 1523: if ( 'v' == cmdbuf[1] &&
  7402                           ;main.c: 1524: 's' == cmdbuf[2] &&
  7403                           ;main.c: 1525: 'c' == cmdbuf[3] &&
  7404                           ;main.c: 1526: 'p' == cmdbuf[4] ) {
  7405  004F7A  0101               	movlb	1	; () banked
  7406  004F7C  5128               	movf	(_cmdbuf+1)& (0+255),w,b
  7407  004F7E  0A76               	xorlw	118
  7408  004F80  E10D               	bnz	l14602
  7409                           
  7410                           ; BSR set to: 1
  7411  004F82  5129               	movf	(_cmdbuf+2)& (0+255),w,b
  7412  004F84  0A73               	xorlw	115
  7413  004F86  E10A               	bnz	l14602
  7414                           
  7415                           ; BSR set to: 1
  7416  004F88  512A               	movf	(_cmdbuf+3)& (0+255),w,b
  7417  004F8A  0A63               	xorlw	99
  7418  004F8C  E107               	bnz	l14602
  7419                           
  7420                           ; BSR set to: 1
  7421  004F8E  512B               	movf	(_cmdbuf+4)& (0+255),w,b
  7422  004F90  0A70               	xorlw	112
  7423  004F92  E104               	bnz	l14602
  7424                           
  7425                           ; BSR set to: 1
  7426                           ;main.c: 1527: mode = 1;
  7427  004F94  0E01               	movlw	1
  7428  004F96  0100               	movlb	0	; () banked
  7429  004F98  6FE6               	movwf	_mode& (0+255),b
  7430                           
  7431                           ;main.c: 1528: }
  7432  004F9A  D04A               	goto	l14620
  7433  004F9C                     l14602:
  7434                           
  7435                           ; BSR set to: 1
  7436                           ;main.c: 1529: else if ( 'v' == cmdbuf[1] &&
  7437                           ;main.c: 1530: 'e' == cmdbuf[2] &&
  7438                           ;main.c: 1531: 'r' == cmdbuf[3] &&
  7439                           ;main.c: 1532: 'b' == cmdbuf[4] ) {
  7440  004F9C  5128               	movf	(_cmdbuf+1)& (0+255),w,b
  7441  004F9E  0A76               	xorlw	118
  7442  004FA0  E147               	bnz	l14620
  7443                           
  7444                           ; BSR set to: 1
  7445  004FA2  5129               	movf	(_cmdbuf+2)& (0+255),w,b
  7446  004FA4  0A65               	xorlw	101
  7447  004FA6  E144               	bnz	l14620
  7448                           
  7449                           ; BSR set to: 1
  7450  004FA8  512A               	movf	(_cmdbuf+3)& (0+255),w,b
  7451  004FAA  0A72               	xorlw	114
  7452  004FAC  E141               	bnz	l14620
  7453                           
  7454                           ; BSR set to: 1
  7455  004FAE  512B               	movf	(_cmdbuf+4)& (0+255),w,b
  7456  004FB0  0A62               	xorlw	98
  7457  004FB2  E13E               	bnz	l14620
  7458                           
  7459                           ; BSR set to: 1
  7460                           ;main.c: 1533: mode = 0;
  7461  004FB4  0100               	movlb	0	; () banked
  7462  004FB6  6BE6               	clrf	_mode& (0+255),b
  7463  004FB8  D03B               	goto	l14620
  7464  004FBA                     l14612:
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;main.c: 1538: {
  7468                           ;main.c: 1540: if (0 == strlen(cmdbuf)) {
  7469  004FBA  0E01               	movlw	high _cmdbuf
  7470  004FBC  0100               	movlb	0	; () banked
  7471  004FBE  6F61               	movwf	(?_strlen+1)& (0+255),b
  7472  004FC0  0E27               	movlw	low _cmdbuf
  7473  004FC2  6F60               	movwf	?_strlen& (0+255),b
  7474  004FC4  EC8D  F00C         	call	_strlen	;wreg free
  7475  004FC8  5161               	movf	(?_strlen+1)& (0+255),w,b
  7476  004FCA  1160               	iorwf	?_strlen& (0+255),w,b
  7477  004FCC  E101 D6A2          	bz	l14494
  7478  004FD0  D02F               	goto	l14620
  7479  004FD2                     l14618:
  7480                           
  7481                           ; BSR set to: 0
  7482  004FD2  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7483                           
  7484                           ; Switch size 1, requested type "space"
  7485                           ; Number of cases is 17, Range of values is 64 to 116
  7486                           ; switch strategies available:
  7487                           ; Name         Instructions Cycles
  7488                           ; simple_byte           52    27 (average)
  7489                           ;	Chosen strategy is simple_byte
  7490  004FD4  0A40               	xorlw	64	; case 64
  7491  004FD6  E0D1               	bz	l14592
  7492  004FD8  0A02               	xorlw	2	; case 66
  7493  004FDA  E0C7               	bz	l14588
  7494  004FDC  0A01               	xorlw	1	; case 67
  7495  004FDE  E101 D6DD          	bz	l14524
  7496  004FE2  0A05               	xorlw	5	; case 70
  7497  004FE4  E101 D779          	bz	l14558
  7498  004FE8  0A0C               	xorlw	12	; case 74
  7499  004FEA  E101 D682          	bz	l14490
  7500  004FEE  0A07               	xorlw	7	; case 77
  7501  004FF0  E101 D690          	bz	l14494
  7502  004FF4  0A03               	xorlw	3	; case 78
  7503  004FF6  E101 D6A1          	bz	l14502
  7504  004FFA  0A01               	xorlw	1	; case 79
  7505  004FFC  E101 D6B8          	bz	l14512
  7506  005000  0A1D               	xorlw	29	; case 82
  7507  005002  E016               	bz	l14620
  7508  005004  0A01               	xorlw	1	; case 83
  7509  005006  E101 D6AB          	bz	l14508
  7510  00500A  0A07               	xorlw	7	; case 84
  7511  00500C  E101 D6D8          	bz	l14534
  7512  005010  0A02               	xorlw	2	; case 86
  7513  005012  E101 D681          	bz	l14496
  7514  005016  0A0C               	xorlw	12	; case 90
  7515  005018  E101 D774          	bz	l14568
  7516  00501C  0A37               	xorlw	55	; case 109
  7517  00501E  E101 D679          	bz	l14494
  7518  005022  0A1F               	xorlw	31	; case 114
  7519  005024  E005               	bz	l14620
  7520  005026  0A01               	xorlw	1	; case 115
  7521  005028  E101 D69D          	bz	l744
  7522  00502C  0A07               	xorlw	7	; case 116
  7523  00502E  E1C5               	bnz	l14612
  7524  005030                     l14620:
  7525                           
  7526                           ;main.c: 1548: if (rv) {
  7527  005030  0100               	movlb	0	; () banked
  7528  005032  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7529  005034  E007               	bz	l14624
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;main.c: 1550: putsUSART((char *) "\r");
  7533  005036  0E7C               	movlw	high STR_145
  7534  005038  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7535  00503A  0EF2               	movlw	low STR_145
  7536  00503C  6F61               	movwf	?_putsUSART& (0+255),b
  7537  00503E  ECA8  F00D         	call	_putsUSART	;wreg free
  7538                           
  7539                           ;main.c: 1551: }
  7540  005042  D006               	goto	l14626
  7541  005044                     l14624:
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;main.c: 1552: else {
  7545                           ;main.c: 1554: putsUSART((char *) "\a");
  7546  005044  0E7C               	movlw	high STR_146
  7547  005046  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7548  005048  0EF0               	movlw	low STR_146
  7549  00504A  6F61               	movwf	?_putsUSART& (0+255),b
  7550  00504C  ECA8  F00D         	call	_putsUSART	;wreg free
  7551  005050                     l14626:
  7552                           
  7553                           ;main.c: 1555: }
  7554                           ;main.c: 1558: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7555  005050  0E01               	movlw	high _cmdbuf
  7556  005052  0100               	movlb	0	; () banked
  7557  005054  6F61               	movwf	(?_memset+1)& (0+255),b
  7558  005056  0E27               	movlw	low _cmdbuf
  7559  005058  6F60               	movwf	?_memset& (0+255),b
  7560  00505A  6B63               	clrf	(?_memset+3)& (0+255),b
  7561  00505C  6B62               	clrf	(?_memset+2)& (0+255),b
  7562  00505E  6B65               	clrf	(?_memset+5)& (0+255),b
  7563  005060  0E50               	movlw	80
  7564  005062  6F64               	movwf	(?_memset+4)& (0+255),b
  7565  005064  EC43  F00B         	call	_memset	;wreg free
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;main.c: 1559: pos = 0;
  7569  005068  6BE7               	clrf	_pos& (0+255),b
  7570  00506A                     l14630:
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;main.c: 1561: }
  7574                           ;main.c: 1564: (INTCONbits.GIE = 1);
  7575  00506A  8EF2               	bsf	intcon,7,c	;volatile
  7576  00506C                     l734:
  7577                           
  7578                           ; BSR set to: 0
  7579  00506C  0012               	return	
  7580  00506E                     __end_of_doModeSLCAN:
  7581                           	opt stack 0
  7582  00506E                     PL78:
  7583                           	opt stack 22
  7584  00506E  90D8               	bcf	status,0,c
  7585  005070  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7586  005072  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7587  005074  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7588  005076  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7589  005078  0012               	return	
  7590  00507A                     __end_ofPL78:
  7591                           	opt stack 0
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           intcon	equ	0xFF2
  7599                           indf0	equ	0xFEF
  7600                           postinc0	equ	0xFEE
  7601                           fsr0h	equ	0xFEA
  7602                           fsr0l	equ	0xFE9
  7603                           wreg	equ	0xFE8
  7604                           indf1	equ	0xFE7
  7605                           postinc1	equ	0xFE6
  7606                           postdec1	equ	0xFE5
  7607                           fsr1h	equ	0xFE2
  7608                           fsr1l	equ	0xFE1
  7609                           indf2	equ	0xFDF
  7610                           postinc2	equ	0xFDE
  7611                           postdec2	equ	0xFDD
  7612                           plusw2	equ	0xFDB
  7613                           fsr2h	equ	0xFDA
  7614                           fsr2l	equ	0xFD9
  7615                           status	equ	0xFD8
  7616                           
  7617 ;; *************** function _hexStringToBytes *****************
  7618 ;; Defined at:
  7619 ;;		line 35 in file "hexutils.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7622 ;;		 -> wrkbuf(80), 
  7623 ;;  size            1    6[BANK0 ] unsigned char 
  7624 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7625 ;;		 -> cmdbuf(80), 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  i               2   16[BANK0 ] int 
  7628 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7629 ;;		 -> cmdbuf(80), 
  7630 ;;  len             2   12[BANK0 ] int 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;                  1    wreg      unsigned char 
  7633 ;; Registers used:
  7634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : F/0
  7637 ;;		On exit  : F/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7640 ;;      Params:         0       5       0       0       0       0       0
  7641 ;;      Locals:         0       6       0       0       0       0       0
  7642 ;;      Temps:          0       3       0       0       0       0       0
  7643 ;;      Totals:         0      14       0       0       0       0       0
  7644 ;;Total ram usage:       14 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    4
  7647 ;; This function calls:
  7648 ;;		_strlen
  7649 ;;		_nibbleFromChar
  7650 ;; This function is called by:
  7651 ;;		_doModeSLCAN
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text3
  7656  002348                     __ptext3:
  7657                           	opt stack 0
  7658  002348                     _hexStringToBytes:
  7659                           	opt stack 24
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;hexutils.c: 36: uint8_t *p;
  7663                           ;hexutils.c: 37: int len, i;
  7664                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;incstack = 0
  7668                           ;incstack = 0
  7669  002348  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7670  00234C  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7671  002350  EC8D  F00C         	call	_strlen	;wreg free
  7672  002354  90D8               	bcf	status,0,c
  7673  002356  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7674  002358  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7675  00235A  3160               	rrcf	?_strlen& (0+255),w,b
  7676  00235C  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;hexutils.c: 40: if (len > size) return 0;
  7680  00235E  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7681  002360  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7682  002362  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7683  002364  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7684  002366  0A80               	xorlw	128
  7685  002368  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7686  00236A  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7687  00236C  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7688  00236E  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7689  002370  0A80               	xorlw	128
  7690  002372  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7691  002374  E202               	bc	l1602
  7692                           
  7693                           ; BSR set to: 0
  7694  002376  0E00               	movlw	0
  7695  002378  D033               	goto	l1603
  7696  00237A                     l1602:
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7700  00237A  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7701  00237C  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7702  00237E  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7703  002382  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7704  002386  D022               	goto	l16192
  7705  002388                     l16186:
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7709  002388  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7710  00238A  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7711  00238C  6ED9               	movwf	fsr2l,c
  7712  00238E  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7713  002390  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7714  002392  6EDA               	movwf	fsr2h,c
  7715  002394  EE10 F001          	lfsr	1,1
  7716  002398  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7717  00239A  26E1               	addwf	fsr1l,f,c
  7718  00239C  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7719  00239E  22E2               	addwfc	fsr1h,f,c
  7720  0023A0  50E7               	movf	indf1,w,c
  7721  0023A2  EC4E  F00C         	call	_nibbleFromChar
  7722  0023A6  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7723  0023A8  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7724  0023AC  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7725  0023B0  50E7               	movf	indf1,w,c
  7726  0023B2  EC4E  F00C         	call	_nibbleFromChar
  7727  0023B6  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7728  0023B8  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7729  0023BA  0BF0               	andlw	240
  7730  0023BC  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7731  0023BE  6EDF               	movwf	indf2,c
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;hexutils.c: 43: p += 2;
  7735  0023C0  0E02               	movlw	2
  7736  0023C2  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7737  0023C4  0E00               	movlw	0
  7738  0023C6  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7739                           
  7740                           ; BSR set to: 0
  7741  0023C8  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7742  0023CA  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7743  0023CC                     l16192:
  7744                           
  7745                           ; BSR set to: 0
  7746  0023CC  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7747  0023CE  0A80               	xorlw	128
  7748  0023D0  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7749  0023D2  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7750  0023D4  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7751  0023D6  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7752  0023D8  0A80               	xorlw	128
  7753  0023DA  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7754  0023DC  E3D5               	bnc	l16186
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;hexutils.c: 44: }
  7758                           ;hexutils.c: 46: return i;
  7759  0023DE  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7760  0023E0                     l1603:
  7761                           
  7762                           ; BSR set to: 0
  7763  0023E0  0012               	return	
  7764  0023E2                     __end_of_hexStringToBytes:
  7765                           	opt stack 0
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           indf0	equ	0xFEF
  7774                           postinc0	equ	0xFEE
  7775                           fsr0h	equ	0xFEA
  7776                           fsr0l	equ	0xFE9
  7777                           wreg	equ	0xFE8
  7778                           indf1	equ	0xFE7
  7779                           postinc1	equ	0xFE6
  7780                           postdec1	equ	0xFE5
  7781                           fsr1h	equ	0xFE2
  7782                           fsr1l	equ	0xFE1
  7783                           indf2	equ	0xFDF
  7784                           postinc2	equ	0xFDE
  7785                           postdec2	equ	0xFDD
  7786                           plusw2	equ	0xFDB
  7787                           fsr2h	equ	0xFDA
  7788                           fsr2l	equ	0xFD9
  7789                           status	equ	0xFD8
  7790                           
  7791 ;; *************** function _nibbleFromChar *****************
  7792 ;; Defined at:
  7793 ;;		line 20 in file "hexutils.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  c               1    wreg     unsigned char 
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;  c               1    0[BANK0 ] unsigned char 
  7798 ;; Return value:  Size  Location     Type
  7799 ;;                  1    wreg      unsigned char 
  7800 ;; Registers used:
  7801 ;;		wreg, status,2, status,0
  7802 ;; Tracked objects:
  7803 ;;		On entry : F/0
  7804 ;;		On exit  : F/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7807 ;;      Params:         0       0       0       0       0       0       0
  7808 ;;      Locals:         0       1       0       0       0       0       0
  7809 ;;      Temps:          0       0       0       0       0       0       0
  7810 ;;      Totals:         0       1       0       0       0       0       0
  7811 ;;Total ram usage:        1 bytes
  7812 ;; Hardware stack levels used:    1
  7813 ;; Hardware stack levels required when called:    3
  7814 ;; This function calls:
  7815 ;;		Nothing
  7816 ;; This function is called by:
  7817 ;;		_hexStringToBytes
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           	psect	text4
  7822  00189C                     __ptext4:
  7823                           	opt stack 0
  7824  00189C                     _nibbleFromChar:
  7825                           	opt stack 24
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;incstack = 0
  7829                           ;incstack = 0
  7830                           ;nibbleFromChar@c stored from wreg
  7831  00189C  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7835  0018A0  0E2F               	movlw	47
  7836  0018A2  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7837  0018A4  D006               	goto	l16392
  7838                           
  7839                           ; BSR set to: 0
  7840  0018A6  0E3A               	movlw	58
  7841  0018A8  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7842  0018AA  D003               	goto	l16392
  7843                           
  7844                           ; BSR set to: 0
  7845  0018AC  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7846  0018AE  0FD0               	addlw	208
  7847  0018B0  D013               	goto	l1597
  7848  0018B2                     l16392:
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7852  0018B2  0E60               	movlw	96
  7853  0018B4  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7854  0018B6  D006               	goto	l16400
  7855                           
  7856                           ; BSR set to: 0
  7857  0018B8  0E67               	movlw	103
  7858  0018BA  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7859  0018BC  D003               	goto	l16400
  7860                           
  7861                           ; BSR set to: 0
  7862  0018BE  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7863  0018C0  0FA9               	addlw	169
  7864  0018C2  D00A               	goto	l1597
  7865  0018C4                     l16400:
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7869  0018C4  0E40               	movlw	64
  7870  0018C6  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7871  0018C8  D006               	goto	l16408
  7872                           
  7873                           ; BSR set to: 0
  7874  0018CA  0E47               	movlw	71
  7875  0018CC  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7876  0018CE  D003               	goto	l16408
  7877                           
  7878                           ; BSR set to: 0
  7879  0018D0  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7880  0018D2  0FC9               	addlw	201
  7881  0018D4  D001               	goto	l1597
  7882  0018D6                     l16408:
  7883                           
  7884                           ; BSR set to: 0
  7885                           ;hexutils.c: 24: return 255;
  7886  0018D6  0EFF               	movlw	255
  7887  0018D8                     l1597:
  7888                           
  7889                           ; BSR set to: 0
  7890  0018D8  0012               	return	
  7891  0018DA                     __end_of_nibbleFromChar:
  7892                           	opt stack 0
  7893                           tblptru	equ	0xFF8
  7894                           tblptrh	equ	0xFF7
  7895                           tblptrl	equ	0xFF6
  7896                           tablat	equ	0xFF5
  7897                           prodh	equ	0xFF4
  7898                           prodl	equ	0xFF3
  7899                           intcon	equ	0xFF2
  7900                           indf0	equ	0xFEF
  7901                           postinc0	equ	0xFEE
  7902                           fsr0h	equ	0xFEA
  7903                           fsr0l	equ	0xFE9
  7904                           wreg	equ	0xFE8
  7905                           indf1	equ	0xFE7
  7906                           postinc1	equ	0xFE6
  7907                           postdec1	equ	0xFE5
  7908                           fsr1h	equ	0xFE2
  7909                           fsr1l	equ	0xFE1
  7910                           indf2	equ	0xFDF
  7911                           postinc2	equ	0xFDE
  7912                           postdec2	equ	0xFDD
  7913                           plusw2	equ	0xFDB
  7914                           fsr2h	equ	0xFDA
  7915                           fsr2l	equ	0xFD9
  7916                           status	equ	0xFD8
  7917                           
  7918 ;; *************** function _receiveSendEventSLCAN *****************
  7919 ;; Defined at:
  7920 ;;		line 2161 in file "main.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;		None
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  id              4   38[BANK0 ] unsigned long 
  7925 ;;  i               2   43[BANK0 ] int 
  7926 ;;  dlc             1   42[BANK0 ] unsigned char 
  7927 ;; Return value:  Size  Location     Type
  7928 ;;                  1    wreg      enum E15660
  7929 ;; Registers used:
  7930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7931 ;; Tracked objects:
  7932 ;;		On entry : F/0
  7933 ;;		On exit  : 0/0
  7934 ;;		Unchanged: 0/0
  7935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7936 ;;      Params:         0       0       0       0       0       0       0
  7937 ;;      Locals:         0       7       0       0       0       0       0
  7938 ;;      Temps:          0       3       0       0       0       0       0
  7939 ;;      Totals:         0      10       0       0       0       0       0
  7940 ;;Total ram usage:       10 bytes
  7941 ;; Hardware stack levels used:    1
  7942 ;; Hardware stack levels required when called:    6
  7943 ;; This function calls:
  7944 ;;		_putsUSART
  7945 ;;		_WriteUSART
  7946 ;;		_strlen
  7947 ;;		_getCANFrame
  7948 ;;		_ultoa
  7949 ;;		_itoa
  7950 ;; This function is called by:
  7951 ;;		_doModeSLCAN
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           	psect	text5
  7956  003B50                     __ptext5:
  7957                           	opt stack 0
  7958  003B50                     _receiveSendEventSLCAN:
  7959                           	opt stack 22
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;main.c: 2162: int i;
  7963                           ;main.c: 2163: uint8_t dlc;
  7964                           ;main.c: 2164: uint32_t id;
  7965                           ;main.c: 2166: if (getCANFrame(&id, &dlc, vscpData)) {
  7966                           
  7967                           ; BSR set to: 0
  7968                           ;incstack = 0
  7969                           ;incstack = 0
  7970  003B50  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7971  003B52  6F6E               	movwf	?_getCANFrame& (0+255),b
  7972  003B54  0E01               	movlw	high _vscpData
  7973  003B56  0100               	movlb	0	; () banked
  7974  003B58  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  7975  003B5A  0EDF               	movlw	low _vscpData
  7976  003B5C  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  7977  003B5E  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7978  003B60  ECF1  F011         	call	_getCANFrame
  7979  003B64  0900               	iorlw	0
  7980  003B66  E101 D0B0          	bz	l1080
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;main.c: 2169: cntRxFrames++;
  7984  003B6A  0101               	movlb	1	; () banked
  7985  003B6C  2B0C               	incf	_cntRxFrames& (0+255),f,b
  7986  003B6E  0E00               	movlw	0
  7987  003B70  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7988  003B72  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7989  003B74  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7990                           
  7991                           ;main.c: 2170: cntRxBytes += dlc;
  7992  003B76  0100               	movlb	0	; () banked
  7993  003B78  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7994  003B7A  0101               	movlb	1	; () banked
  7995  003B7C  2708               	addwf	_cntRxBytes& (0+255),f,b
  7996  003B7E  0E00               	movlw	0
  7997  003B80  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7998  003B82  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7999  003B84  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8000  003B86                     l1053:
  8001  003B86  A2AC               	btfss	4012,1,c	;volatile
  8002  003B88  D7FE               	goto	l1053
  8003                           
  8004                           ;main.c: 2173: WriteUSART('T');
  8005  003B8A  0E54               	movlw	84
  8006  003B8C  ECF3  F00A         	call	_WriteUSART
  8007                           
  8008                           ;main.c: 2175: ultoa(wrkbuf, id, 16);
  8009  003B90  0E01               	movlw	high _wrkbuf
  8010  003B92  0100               	movlb	0	; () banked
  8011  003B94  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8012  003B96  0E77               	movlw	low _wrkbuf
  8013  003B98  6F76               	movwf	?_ultoa& (0+255),b
  8014  003B9A  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8015  003B9E  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8016  003BA2  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8017  003BA6  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8018  003BAA  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8019  003BAC  0E10               	movlw	16
  8020  003BAE  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8021  003BB0  ECF9  F016         	call	_ultoa	;wreg free
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;main.c: 2177: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8025  003BB4  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8026  003BB6  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8027  003BB8                     l1058:
  8028                           
  8029                           ; BSR set to: 0
  8030  003BB8  A2AC               	btfss	4012,1,c	;volatile
  8031  003BBA  D7FE               	goto	l1058
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;main.c: 2179: WriteUSART('0');
  8035  003BBC  0E30               	movlw	48
  8036  003BBE  ECF3  F00A         	call	_WriteUSART
  8037                           
  8038                           ; BSR set to: 0
  8039  003BC2  D884               	call	PL82	;call to abstracted procedure
  8040  003BC4  B4D8               	btfsc	status,2,c
  8041  003BC6  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8042  003BC8  E3F7               	bnc	l1058
  8043                           
  8044                           ; BSR set to: 0
  8045                           ;main.c: 2180: }
  8046                           ;main.c: 2181: putsUSART(wrkbuf);
  8047  003BCA  0E01               	movlw	high _wrkbuf
  8048  003BCC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8049  003BCE  0E77               	movlw	low _wrkbuf
  8050  003BD0  6F61               	movwf	?_putsUSART& (0+255),b
  8051  003BD2  ECA8  F00D         	call	_putsUSART	;wreg free
  8052                           
  8053                           ;main.c: 2184: itoa(wrkbuf, dlc, 16);
  8054  003BD6  0E01               	movlw	high _wrkbuf
  8055  003BD8  0100               	movlb	0	; () banked
  8056  003BDA  6F71               	movwf	(?_itoa+1)& (0+255),b
  8057  003BDC  0E77               	movlw	low _wrkbuf
  8058  003BDE  6F70               	movwf	?_itoa& (0+255),b
  8059  003BE0  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8060  003BE4  6B73               	clrf	(?_itoa+3)& (0+255),b
  8061  003BE6  6B75               	clrf	(?_itoa+5)& (0+255),b
  8062  003BE8  0E10               	movlw	16
  8063  003BEA  6F74               	movwf	(?_itoa+4)& (0+255),b
  8064  003BEC  ECBB  F00B         	call	_itoa	;wreg free
  8065  003BF0                     l1061:
  8066                           
  8067                           ; BSR set to: 0
  8068  003BF0  A2AC               	btfss	4012,1,c	;volatile
  8069  003BF2  D7FE               	goto	l1061
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;main.c: 2186: WriteUSART(wrkbuf[0]);
  8073  003BF4  0101               	movlb	1	; () banked
  8074  003BF6  5177               	movf	_wrkbuf& (0+255),w,b
  8075  003BF8  ECF3  F00A         	call	_WriteUSART
  8076                           
  8077                           ;main.c: 2189: for (i = 0; i < dlc; i++) {
  8078  003BFC  0100               	movlb	0	; () banked
  8079  003BFE  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8080  003C00  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8081  003C02  D02D               	goto	l16144
  8082  003C04                     l16132:
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;main.c: 2190: itoa(wrkbuf, vscpData[i], 16);
  8086  003C04  0E01               	movlw	high _wrkbuf
  8087  003C06  0100               	movlb	0	; () banked
  8088  003C08  6F71               	movwf	(?_itoa+1)& (0+255),b
  8089  003C0A  0E77               	movlw	low _wrkbuf
  8090  003C0C  6F70               	movwf	?_itoa& (0+255),b
  8091  003C0E  0EDF               	movlw	low _vscpData
  8092  003C10  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8093  003C12  6ED9               	movwf	fsr2l,c
  8094  003C14  0E01               	movlw	high _vscpData
  8095  003C16  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8096  003C18  6EDA               	movwf	fsr2h,c
  8097  003C1A  50DF               	movf	indf2,w,c
  8098  003C1C  6F72               	movwf	(?_itoa+2)& (0+255),b
  8099  003C1E  6B73               	clrf	(?_itoa+3)& (0+255),b
  8100  003C20  6B75               	clrf	(?_itoa+5)& (0+255),b
  8101  003C22  0E10               	movlw	16
  8102  003C24  6F74               	movwf	(?_itoa+4)& (0+255),b
  8103  003C26  ECBB  F00B         	call	_itoa	;wreg free
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;main.c: 2192: if (2 != strlen(wrkbuf)) {
  8107  003C2A  0E01               	movlw	high _wrkbuf
  8108  003C2C  0100               	movlb	0	; () banked
  8109  003C2E  6F61               	movwf	(?_strlen+1)& (0+255),b
  8110  003C30  0E77               	movlw	low _wrkbuf
  8111  003C32  6F60               	movwf	?_strlen& (0+255),b
  8112  003C34  EC8D  F00C         	call	_strlen	;wreg free
  8113  003C38  5160               	movf	?_strlen& (0+255),w,b
  8114  003C3A  0A02               	xorlw	2
  8115  003C3C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8116  003C3E  E005               	bz	l16140
  8117  003C40                     l1067:
  8118                           
  8119                           ; BSR set to: 0
  8120  003C40  A2AC               	btfss	4012,1,c	;volatile
  8121  003C42  D7FE               	goto	l1067
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;main.c: 2194: WriteUSART('0');
  8125  003C44  0E30               	movlw	48
  8126  003C46  ECF3  F00A         	call	_WriteUSART
  8127  003C4A                     l16140:
  8128                           
  8129                           ;main.c: 2195: }
  8130                           ;main.c: 2197: putsUSART(wrkbuf);
  8131  003C4A  0E01               	movlw	high _wrkbuf
  8132  003C4C  0100               	movlb	0	; () banked
  8133  003C4E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8134  003C50  0E77               	movlw	low _wrkbuf
  8135  003C52  6F61               	movwf	?_putsUSART& (0+255),b
  8136  003C54  ECA8  F00D         	call	_putsUSART	;wreg free
  8137  003C58  0100               	movlb	0	; () banked
  8138  003C5A  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8139  003C5C  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8140  003C5E                     l16144:
  8141                           
  8142                           ; BSR set to: 0
  8143  003C5E  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8144  003C60  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8145  003C62  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8146  003C64  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8147  003C66  0A80               	xorlw	128
  8148  003C68  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8149  003C6A  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8150  003C6C  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8151  003C6E  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8152  003C70  0A80               	xorlw	128
  8153  003C72  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8154  003C74  E3C7               	bnc	l16132
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;main.c: 2198: }
  8158                           ;main.c: 2201: if (nTimeStamp) {
  8159  003C76  5036               	movf	_nTimeStamp,w,c
  8160  003C78  E023               	bz	l1077
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;main.c: 2202: ultoa(wrkbuf, timer, 16);
  8164  003C7A  0E01               	movlw	high _wrkbuf
  8165  003C7C  0100               	movlb	0	; () banked
  8166  003C7E  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8167  003C80  0E77               	movlw	low _wrkbuf
  8168  003C82  6F76               	movwf	?_ultoa& (0+255),b
  8169  003C84  C118  F078         	movff	_timer,?_ultoa+2	;volatile
  8170  003C88  C119  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8171  003C8C  C11A  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8172  003C90  C11B  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8173  003C94  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8174  003C96  0E10               	movlw	16
  8175  003C98  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8176  003C9A  ECF9  F016         	call	_ultoa	;wreg free
  8177                           
  8178                           ; BSR set to: 0
  8179                           ;main.c: 2204: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8180  003C9E  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8181  003CA0  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8182  003CA2                     l1074:
  8183                           
  8184                           ; BSR set to: 0
  8185  003CA2  A2AC               	btfss	4012,1,c	;volatile
  8186  003CA4  D7FE               	goto	l1074
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;main.c: 2206: WriteUSART('0');
  8190  003CA6  0E30               	movlw	48
  8191  003CA8  ECF3  F00A         	call	_WriteUSART
  8192                           
  8193                           ; BSR set to: 0
  8194  003CAC  D80F               	call	PL82	;call to abstracted procedure
  8195  003CAE  B4D8               	btfsc	status,2,c
  8196  003CB0  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8197  003CB2  E3F7               	bnc	l1074
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;main.c: 2207: }
  8201                           ;main.c: 2208: putsUSART(wrkbuf);
  8202  003CB4  0E01               	movlw	high _wrkbuf
  8203  003CB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8204  003CB8  0E77               	movlw	low _wrkbuf
  8205  003CBA  6F61               	movwf	?_putsUSART& (0+255),b
  8206  003CBC  ECA8  F00D         	call	_putsUSART	;wreg free
  8207  003CC0                     l1077:
  8208  003CC0  A2AC               	btfss	4012,1,c	;volatile
  8209  003CC2  D7FE               	goto	l1077
  8210                           
  8211                           ;main.c: 2212: WriteUSART(0x0d);
  8212  003CC4  0E0D               	movlw	13
  8213  003CC6  ECF3  F00A         	call	_WriteUSART
  8214  003CCA                     l1080:
  8215  003CCA  0012               	return	
  8216  003CCC                     __end_of_receiveSendEventSLCAN:
  8217                           	opt stack 0
  8218  003CCC                     PL82:
  8219                           	opt stack 22
  8220  003CCC  0100               	movlb	0	; () banked
  8221  003CCE  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8222  003CD0  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8223  003CD2  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8224  003CD4  0A80               	xorlw	128
  8225  003CD6  0F80               	addlw	-128
  8226  003CD8  0CB8               	retlw	184
  8227  003CDA                     __end_ofPL82:
  8228                           	opt stack 0
  8229                           tblptru	equ	0xFF8
  8230                           tblptrh	equ	0xFF7
  8231                           tblptrl	equ	0xFF6
  8232                           tablat	equ	0xFF5
  8233                           prodh	equ	0xFF4
  8234                           prodl	equ	0xFF3
  8235                           intcon	equ	0xFF2
  8236                           indf0	equ	0xFEF
  8237                           postinc0	equ	0xFEE
  8238                           fsr0h	equ	0xFEA
  8239                           fsr0l	equ	0xFE9
  8240                           wreg	equ	0xFE8
  8241                           indf1	equ	0xFE7
  8242                           postinc1	equ	0xFE6
  8243                           postdec1	equ	0xFE5
  8244                           fsr1h	equ	0xFE2
  8245                           fsr1l	equ	0xFE1
  8246                           indf2	equ	0xFDF
  8247                           postinc2	equ	0xFDE
  8248                           postdec2	equ	0xFDD
  8249                           plusw2	equ	0xFDB
  8250                           fsr2h	equ	0xFDA
  8251                           fsr2l	equ	0xFD9
  8252                           status	equ	0xFD8
  8253                           
  8254 ;; *************** function _ultoa *****************
  8255 ;; Defined at:
  8256 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8259 ;;		 -> wrkbuf(80), 
  8260 ;;  val             4   24[BANK0 ] unsigned long 
  8261 ;;  base            2   28[BANK0 ] int 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  v               4   30[BANK0 ] unsigned long 
  8264 ;;  c               1   34[BANK0 ] unsigned char 
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  2   22[BANK0 ] PTR unsigned char 
  8267 ;; Registers used:
  8268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8269 ;; Tracked objects:
  8270 ;;		On entry : F/0
  8271 ;;		On exit  : F/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8274 ;;      Params:         0       8       0       0       0       0       0
  8275 ;;      Locals:         0       5       0       0       0       0       0
  8276 ;;      Temps:          0       0       0       0       0       0       0
  8277 ;;      Totals:         0      13       0       0       0       0       0
  8278 ;;Total ram usage:       13 bytes
  8279 ;; Hardware stack levels used:    1
  8280 ;; Hardware stack levels required when called:    4
  8281 ;; This function calls:
  8282 ;;		___lldiv
  8283 ;;		___llmod
  8284 ;; This function is called by:
  8285 ;;		_receiveSendEventSLCAN
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           	psect	text6
  8290  002DF2                     __ptext6:
  8291                           	opt stack 0
  8292  002DF2                     _ultoa:
  8293                           	opt stack 23
  8294                           
  8295                           ; BSR set to: 0
  8296                           
  8297                           ;incstack = 0
  8298                           ;incstack = 0
  8299  002DF2  C078  F07E         	movff	ultoa@val,ultoa@v
  8300  002DF6  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8301  002DFA  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8302  002DFE  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8303  002E02                     l16306:
  8304                           
  8305                           ; BSR set to: 0
  8306  002E02  C07E  F060         	movff	ultoa@v,?___lldiv
  8307  002E06  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8308  002E0A  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8309  002E0E  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8310  002E12  D858               	call	PL66	;call to abstracted procedure
  8311  002E14  ECD2  F00F         	call	___lldiv	;wreg free
  8312  002E18  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8313  002E1C  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8314  002E20  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8315  002E24  C060  F07E         	movff	?___lldiv,ultoa@v
  8316                           
  8317                           ; BSR set to: 0
  8318  002E28  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8319  002E2A  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8320                           
  8321                           ; BSR set to: 0
  8322  002E2C  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8323  002E2E  117E               	iorwf	ultoa@v& (0+255),w,b
  8324  002E30  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8325  002E32  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8326  002E34  E1E6               	bnz	l16306
  8327                           
  8328                           ; BSR set to: 0
  8329  002E36  C076  FFD9         	movff	ultoa@buf,fsr2l
  8330  002E3A  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8331  002E3E  6ADF               	clrf	indf2,c
  8332                           
  8333                           ; BSR set to: 0
  8334  002E40  0776               	decf	ultoa@buf& (0+255),f,b
  8335  002E42  A0D8               	btfss	status,0,c
  8336  002E44  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8337  002E46                     l16316:
  8338                           
  8339                           ; BSR set to: 0
  8340  002E46  C078  F06D         	movff	ultoa@val,?___llmod
  8341  002E4A  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8342  002E4E  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8343  002E52  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8344  002E56  C07C  F071         	movff	ultoa@base,?___llmod+4
  8345  002E5A  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8346  002E5E  0E00               	movlw	0
  8347  002E60  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8348  002E62  0EFF               	movlw	-1
  8349  002E64  6F73               	movwf	(?___llmod+6)& (0+255),b
  8350  002E66  6F74               	movwf	(?___llmod+7)& (0+255),b
  8351  002E68  EC5E  F00E         	call	___llmod	;wreg free
  8352  002E6C  516D               	movf	?___llmod& (0+255),w,b
  8353  002E6E  6F82               	movwf	ultoa@c& (0+255),b
  8354                           
  8355                           ; BSR set to: 0
  8356  002E70  C078  F060         	movff	ultoa@val,?___lldiv
  8357  002E74  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8358  002E78  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8359  002E7C  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8360  002E80  D821               	call	PL66	;call to abstracted procedure
  8361  002E82  ECD2  F00F         	call	___lldiv	;wreg free
  8362  002E86  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8363  002E8A  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8364  002E8E  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8365  002E92  C060  F078         	movff	?___lldiv,ultoa@val
  8366                           
  8367                           ; BSR set to: 0
  8368  002E96  0E09               	movlw	9
  8369  002E98  6582               	cpfsgt	ultoa@c& (0+255),b
  8370  002E9A  D002               	goto	l2447
  8371                           
  8372                           ; BSR set to: 0
  8373  002E9C  0E07               	movlw	7
  8374  002E9E  2782               	addwf	ultoa@c& (0+255),f,b
  8375  002EA0                     l2447:
  8376                           
  8377                           ; BSR set to: 0
  8378  002EA0  0E30               	movlw	48
  8379  002EA2  2782               	addwf	ultoa@c& (0+255),f,b
  8380                           
  8381                           ; BSR set to: 0
  8382  002EA4  C076  FFD9         	movff	ultoa@buf,fsr2l
  8383  002EA8  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8384  002EAC  C082  FFDF         	movff	ultoa@c,indf2
  8385                           
  8386                           ; BSR set to: 0
  8387  002EB0  0776               	decf	ultoa@buf& (0+255),f,b
  8388  002EB2  A0D8               	btfss	status,0,c
  8389  002EB4  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8390                           
  8391                           ; BSR set to: 0
  8392  002EB6  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8393  002EB8  1178               	iorwf	ultoa@val& (0+255),w,b
  8394  002EBA  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8395  002EBC  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8396  002EBE  B4D8               	btfsc	status,2,c
  8397                           
  8398                           ; BSR set to: 0
  8399  002EC0  0012               	return	
  8400  002EC2  D7C1               	goto	l16316
  8401  002EC4                     __end_of_ultoa:
  8402                           	opt stack 0
  8403  002EC4                     PL66:
  8404                           	opt stack 23
  8405  002EC4  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8406  002EC8  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8407  002ECC  0E00               	movlw	0
  8408  002ECE  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8409  002ED0  0EFF               	movlw	-1
  8410  002ED2  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8411  002ED4  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8412  002ED6  0012               	return	
  8413  002ED8                     __end_ofPL66:
  8414                           	opt stack 0
  8415                           tblptru	equ	0xFF8
  8416                           tblptrh	equ	0xFF7
  8417                           tblptrl	equ	0xFF6
  8418                           tablat	equ	0xFF5
  8419                           prodh	equ	0xFF4
  8420                           prodl	equ	0xFF3
  8421                           intcon	equ	0xFF2
  8422                           indf0	equ	0xFEF
  8423                           postinc0	equ	0xFEE
  8424                           fsr0h	equ	0xFEA
  8425                           fsr0l	equ	0xFE9
  8426                           wreg	equ	0xFE8
  8427                           indf1	equ	0xFE7
  8428                           postinc1	equ	0xFE6
  8429                           postdec1	equ	0xFE5
  8430                           fsr1h	equ	0xFE2
  8431                           fsr1l	equ	0xFE1
  8432                           indf2	equ	0xFDF
  8433                           postinc2	equ	0xFDE
  8434                           postdec2	equ	0xFDD
  8435                           plusw2	equ	0xFDB
  8436                           fsr2h	equ	0xFDA
  8437                           fsr2l	equ	0xFD9
  8438                           status	equ	0xFD8
  8439                           
  8440 ;; *************** function _doModeVscp *****************
  8441 ;; Defined at:
  8442 ;;		line 1125 in file "main.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;		None
  8445 ;; Auto vars:     Size  Location     Type
  8446 ;;  c               1   87[BANK0 ] unsigned char 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;		None               void
  8449 ;; Registers used:
  8450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/0
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8456 ;;      Params:         0       0       0       0       0       0       0
  8457 ;;      Locals:         0       1       0       0       0       0       0
  8458 ;;      Temps:          0       0       0       0       0       0       0
  8459 ;;      Totals:         0       1       0       0       0       0       0
  8460 ;;Total ram usage:        1 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    7
  8463 ;; This function calls:
  8464 ;;		_fifo_read
  8465 ;;		_ECANSetOperationMode
  8466 ;;		_receiveSendMultiEventCANAL
  8467 ;;		_receiveSendEventCANAL
  8468 ;;		_calcCRC
  8469 ;;		_sendVSCPDriverNack
  8470 ;;		_sendVSCPDriverAck
  8471 ;;		_receiveVSCPModeCanalMsg
  8472 ;;		_receiveVSCPModeMultiCanalMsg
  8473 ;;		_sendVSCPModeCapabilities
  8474 ;;		_sendVSCPDriverCommandReply
  8475 ;;		_sendVSCPDriverErrorFrame
  8476 ;; This function is called by:
  8477 ;;		_main
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           	psect	text7
  8482  0041BA                     __ptext7:
  8483                           	opt stack 0
  8484  0041BA                     _doModeVscp:
  8485                           	opt stack 22
  8486                           
  8487                           ;main.c: 1126: uint8_t c;
  8488                           ;main.c: 1129: if ( caps.maxCanalFrames > 1 ) {
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;incstack = 0
  8492                           ;incstack = 0
  8493  0041BA  0101               	movlb	1	; () banked
  8494  0041BC  EE21  F0EC         	lfsr	2,_caps+1
  8495  0041C0  0E01               	movlw	1
  8496  0041C2  64DF               	cpfsgt	indf2,c
  8497  0041C4  D003               	goto	l14320
  8498                           
  8499                           ; BSR set to: 1
  8500                           ;main.c: 1132: receiveSendMultiEventCANAL();
  8501  0041C6  ECE6  F01C         	call	_receiveSendMultiEventCANAL	;wreg free
  8502                           
  8503                           ;main.c: 1133: }
  8504  0041CA  D002               	goto	l14322
  8505  0041CC                     l14320:
  8506                           
  8507                           ; BSR set to: 1
  8508                           ;main.c: 1134: else {
  8509                           ;main.c: 1137: receiveSendEventCANAL();
  8510  0041CC  EC8F  F01B         	call	_receiveSendEventCANAL	;wreg free
  8511  0041D0                     l14322:
  8512                           
  8513                           ;main.c: 1138: }
  8514                           ;main.c: 1141: (INTCONbits.GIE = 0);
  8515  0041D0  9EF2               	bcf	intcon,7,c	;volatile
  8516                           
  8517                           ;main.c: 1143: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8518  0041D2  0E01               	movlw	high _serialInputFifo
  8519  0041D4  0100               	movlb	0	; () banked
  8520  0041D6  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8521  0041D8  0ED7               	movlw	low _serialInputFifo
  8522  0041DA  6F60               	movwf	?_fifo_read& (0+255),b
  8523  0041DC  0E00               	movlw	high doModeVscp@c
  8524  0041DE  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8525  0041E0  0EB7               	movlw	low doModeVscp@c
  8526  0041E2  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8527  0041E4  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8528  0041E6  0E01               	movlw	1
  8529  0041E8  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8530  0041EA  ECB6  F015         	call	_fifo_read	;wreg free
  8531  0041EE  0560               	decf	?_fifo_read& (0+255),w,b
  8532  0041F0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8533  0041F2  E001 D0BA          	bnz	l14470
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;main.c: 1146: (INTCONbits.GIE = 1);
  8537  0041F6  8EF2               	bsf	intcon,7,c	;volatile
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;main.c: 1149: if ( pos >= sizeof( cmdbuf ) ) {
  8541  0041F8  0E4F               	movlw	79
  8542  0041FA  65E7               	cpfsgt	_pos& (0+255),b
  8543  0041FC  D003               	goto	l678
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;main.c: 1151: pos = 0;
  8547  0041FE  6BE7               	clrf	_pos& (0+255),b
  8548                           
  8549                           ;main.c: 1152: bDLE = 0;
  8550  004200  6A30               	clrf	_bDLE,c
  8551                           
  8552                           ;main.c: 1153: stateVscpDriver = 0;
  8553  004202  6A39               	clrf	_stateVscpDriver,c
  8554  004204                     l678:
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;main.c: 1154: }
  8558                           ;main.c: 1156: if ( 0 == stateVscpDriver ) {
  8559  004204  6639               	tstfsz	_stateVscpDriver,c
  8560  004206  D00D               	goto	l14344
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;main.c: 1158: if ( bDLE ) {
  8564  004208  5030               	movf	_bDLE,w,c
  8565  00420A  E008               	bz	l14340
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;main.c: 1160: bDLE = 0;
  8569  00420C  6A30               	clrf	_bDLE,c
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;main.c: 1163: if ( 0x02 == c ) {
  8573  00420E  51B7               	movf	doModeVscp@c& (0+255),w,b
  8574  004210  0A02               	xorlw	2
  8575  004212  E124               	bnz	l14380
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;main.c: 1164: stateVscpDriver = 1;
  8579  004214  0E01               	movlw	1
  8580  004216  6E39               	movwf	_stateVscpDriver,c
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;main.c: 1165: pos = 0;
  8584  004218  6BE7               	clrf	_pos& (0+255),b
  8585  00421A  D020               	goto	l14380
  8586  00421C                     l14340:
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;main.c: 1168: else {
  8590                           ;main.c: 1169: bDLE = 1;
  8591  00421C  0E01               	movlw	1
  8592  00421E  6E30               	movwf	_bDLE,c
  8593  004220  D0A5               	goto	l683
  8594  004222                     l14344:
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;main.c: 1173: else if ( 1 == stateVscpDriver ) {
  8598  004222  0439               	decf	_stateVscpDriver,w,c
  8599  004224  E11B               	bnz	l14380
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;main.c: 1176: if ( bDLE ) {
  8603  004226  5030               	movf	_bDLE,w,c
  8604  004228  E015               	bz	l14364
  8605                           
  8606                           ; BSR set to: 0
  8607                           ;main.c: 1179: bDLE = 0;
  8608  00422A  6A30               	clrf	_bDLE,c
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;main.c: 1182: if ( 0x03 == c ) {
  8612  00422C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8613  00422E  0A03               	xorlw	3
  8614  004230  E103               	bnz	l14354
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;main.c: 1183: stateVscpDriver = 2;
  8618  004232  0E02               	movlw	2
  8619  004234  6E39               	movwf	_stateVscpDriver,c
  8620                           
  8621                           ;main.c: 1184: }
  8622  004236  D012               	goto	l14380
  8623  004238                     l14354:
  8624                           
  8625                           ; BSR set to: 0
  8626                           ;main.c: 1186: else if (0x10 == c) {
  8627  004238  51B7               	movf	doModeVscp@c& (0+255),w,b
  8628  00423A  0A10               	xorlw	16
  8629  00423C  E10F               	bnz	l14380
  8630  00423E                     u19130:
  8631                           
  8632                           ; BSR set to: 0
  8633                           ;main.c: 1188: cmdbuf[ pos++ ] = c;
  8634  00423E  D897               	call	PL24	;call to abstracted procedure
  8635  004240  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8636                           
  8637                           ; BSR set to: 0
  8638  004244  2BE7               	incf	_pos& (0+255),f,b
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;main.c: 1189: if ( pos >= sizeof( cmdbuf ) ) {
  8642  004246  0E4F               	movlw	79
  8643  004248  65E7               	cpfsgt	_pos& (0+255),b
  8644  00424A  D090               	goto	l683
  8645                           
  8646                           ; BSR set to: 0
  8647                           ;main.c: 1192: bDLE = 0;
  8648  00424C  6A30               	clrf	_bDLE,c
  8649                           
  8650                           ;main.c: 1193: pos = 0;
  8651  00424E  6BE7               	clrf	_pos& (0+255),b
  8652                           
  8653                           ;main.c: 1194: stateVscpDriver = 0;
  8654  004250  6A39               	clrf	_stateVscpDriver,c
  8655  004252  D08C               	goto	l683
  8656  004254                     l14364:
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;main.c: 1199: else {
  8660                           ;main.c: 1200: if (0x10 == c) {
  8661  004254  51B7               	movf	doModeVscp@c& (0+255),w,b
  8662  004256  0A10               	xorlw	16
  8663  004258  E0E1               	bz	l14340
  8664  00425A  D7F1               	goto	u19130
  8665  00425C                     l14380:
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;main.c: 1216: }
  8669                           ;main.c: 1217: }
  8670                           ;main.c: 1218: }
  8671                           ;main.c: 1220: if (2 == stateVscpDriver) {
  8672  00425C  5039               	movf	_stateVscpDriver,w,c
  8673  00425E  0A02               	xorlw	2
  8674  004260  E001 D083          	bnz	l14470
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;main.c: 1223: stateVscpDriver = 0;
  8678  004264  6A39               	clrf	_stateVscpDriver,c
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;main.c: 1235: if (calcCRC(cmdbuf, pos)) {
  8682  004266  0E01               	movlw	high _cmdbuf
  8683  004268  0100               	movlb	0	; () banked
  8684  00426A  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8685  00426C  0E27               	movlw	low _cmdbuf
  8686  00426E  6F6C               	movwf	?_calcCRC& (0+255),b
  8687  004270  C0E7  F06E         	movff	_pos,?_calcCRC+2
  8688  004274  EC71  F00B         	call	_calcCRC	;wreg free
  8689  004278  0900               	iorlw	0
  8690  00427A  E003               	bz	l696
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;main.c: 1236: sendVSCPDriverNack();
  8694  00427C  EC90  F012         	call	_sendVSCPDriverNack	;wreg free
  8695  004280  D075               	goto	l683
  8696  004282                     l696:
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;main.c: 1238: }
  8700                           ;main.c: 1241: if (0 ==
  8701                           ;main.c: 1242: cmdbuf[ 0 ]) {
  8702  004282  0101               	movlb	1	; () banked
  8703  004284  6727               	tstfsz	_cmdbuf& (0+255),b
  8704  004286  D003               	goto	l14392
  8705  004288                     l14390:
  8706                           
  8707                           ;main.c: 1243: sendVSCPDriverAck();
  8708  004288  ECE0  F012         	call	_sendVSCPDriverAck	;wreg free
  8709                           
  8710                           ;main.c: 1244: }
  8711  00428C  D06B               	goto	l14466
  8712  00428E                     l14392:
  8713                           
  8714                           ; BSR set to: 1
  8715                           ;main.c: 1246: else if (1 ==
  8716                           ;main.c: 1247: cmdbuf[ 0 ]) {
  8717  00428E  0527               	decf	_cmdbuf& (0+255),w,b
  8718  004290  E103               	bnz	l14396
  8719  004292                     l14394:
  8720                           
  8721                           ;main.c: 1248: sendVSCPDriverNack();
  8722  004292  EC90  F012         	call	_sendVSCPDriverNack	;wreg free
  8723                           
  8724                           ;main.c: 1249: }
  8725  004296  D066               	goto	l14466
  8726  004298                     l14396:
  8727                           
  8728                           ; BSR set to: 1
  8729                           ;main.c: 1251: else if (2 ==
  8730                           ;main.c: 1252: cmdbuf[ 0 ]) {
  8731  004298  5127               	movf	_cmdbuf& (0+255),w,b
  8732  00429A  0A02               	xorlw	2
  8733  00429C  E105               	bnz	l14404
  8734                           
  8735                           ; BSR set to: 1
  8736                           ;main.c: 1253: if ( receiveVSCPModeCanalMsg() ) {
  8737  00429E  EC6C  F017         	call	_receiveVSCPModeCanalMsg	;wreg free
  8738  0042A2  0900               	iorlw	0
  8739  0042A4  E1F1               	bnz	l14390
  8740  0042A6  D7F5               	goto	l14394
  8741  0042A8                     l14404:
  8742                           
  8743                           ; BSR set to: 1
  8744                           ;main.c: 1261: else if (6 ==
  8745                           ;main.c: 1262: cmdbuf[ 0 ]) {
  8746  0042A8  5127               	movf	_cmdbuf& (0+255),w,b
  8747  0042AA  0A06               	xorlw	6
  8748  0042AC  E103               	bnz	l14412
  8749                           
  8750                           ; BSR set to: 1
  8751                           ;main.c: 1263: if (receiveVSCPModeMultiCanalMsg()) {
  8752  0042AE  ECCF  F00A         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8753  0042B2  D7F7               	goto	L5
  8754  0042B4                     l14412:
  8755                           
  8756                           ; BSR set to: 1
  8757                           ;main.c: 1271: else if (6 ==
  8758                           ;main.c: 1272: cmdbuf[ 0 ]) {
  8759  0042B4  5127               	movf	_cmdbuf& (0+255),w,b
  8760  0042B6  0A06               	xorlw	6
  8761  0042B8  E0EC               	bz	l14394
  8762                           
  8763                           ; BSR set to: 1
  8764                           ;main.c: 1276: else if (3 ==
  8765                           ;main.c: 1277: cmdbuf[ 0 ]) {
  8766  0042BA  5127               	movf	_cmdbuf& (0+255),w,b
  8767  0042BC  0A03               	xorlw	3
  8768  0042BE  E0E9               	bz	l14394
  8769                           
  8770                           ; BSR set to: 1
  8771                           ;main.c: 1281: else if (4 ==
  8772                           ;main.c: 1282: cmdbuf[ 0 ]) {
  8773  0042C0  5127               	movf	_cmdbuf& (0+255),w,b
  8774  0042C2  0A04               	xorlw	4
  8775  0042C4  E0E6               	bz	l14394
  8776                           
  8777                           ; BSR set to: 1
  8778                           ;main.c: 1286: else if (8 ==
  8779                           ;main.c: 1287: cmdbuf[ 0 ]) {
  8780  0042C6  5127               	movf	_cmdbuf& (0+255),w,b
  8781  0042C8  0A08               	xorlw	8
  8782  0042CA  E107               	bnz	l14430
  8783                           
  8784                           ; BSR set to: 1
  8785                           ;main.c: 1288: caps.maxVscpFrames = cmdbuf[ 5 ];
  8786  0042CC  C12C  F1EB         	movff	_cmdbuf+5,_caps
  8787                           
  8788                           ;main.c: 1289: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8789  0042D0  C12D  F1EC         	movff	_cmdbuf+6,_caps+1
  8790                           
  8791                           ; BSR set to: 1
  8792                           ;main.c: 1290: sendVSCPModeCapabilities();
  8793  0042D4  EC39  F014         	call	_sendVSCPModeCapabilities	;wreg free
  8794                           
  8795                           ;main.c: 1291: }
  8796  0042D8  D045               	goto	l14466
  8797  0042DA                     l14430:
  8798                           
  8799                           ; BSR set to: 1
  8800                           ;main.c: 1293: else if (255 ==
  8801                           ;main.c: 1294: cmdbuf[ 0 ]) {
  8802  0042DA  2927               	incf	_cmdbuf& (0+255),w,b
  8803  0042DC  E140               	bnz	l14464
  8804                           
  8805                           ; BSR set to: 1
  8806                           ;main.c: 1296: if (cmdbuf[ 5 ] ==
  8807                           ;main.c: 1297: 0) {
  8808  0042DE  672C               	tstfsz	(_cmdbuf+5)& (0+255),b
  8809  0042E0  D006               	goto	l14436
  8810                           
  8811                           ; BSR set to: 1
  8812                           ;main.c: 1298: sendVSCPDriverCommandReply(0, 0);
  8813  0042E2  0E00               	movlw	0
  8814  0042E4  0100               	movlb	0	; () banked
  8815  0042E6  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8816  0042E8  EC1F  F016         	call	_sendVSCPDriverCommandReply
  8817                           
  8818                           ;main.c: 1299: }
  8819  0042EC  D03B               	goto	l14466
  8820  0042EE                     l14436:
  8821                           
  8822                           ; BSR set to: 1
  8823                           ;main.c: 1301: else if (cmdbuf[ 5 ] ==
  8824                           ;main.c: 1302: 1) {
  8825  0042EE  052C               	decf	(_cmdbuf+5)& (0+255),w,b
  8826  0042F0  E109               	bnz	l14442
  8827                           
  8828                           ; BSR set to: 1
  8829                           ;main.c: 1303: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8830  0042F2  0E00               	movlw	0
  8831  0042F4  EC08  F00B         	call	_ECANSetOperationMode
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;main.c: 1304: sendVSCPDriverCommandReply(0, 1);
  8835  0042F8  0E01               	movlw	1
  8836  0042FA  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8837  0042FC  0E00               	movlw	0
  8838  0042FE  EC1F  F016         	call	_sendVSCPDriverCommandReply
  8839                           
  8840                           ;main.c: 1305: }
  8841  004302  D030               	goto	l14466
  8842  004304                     l14442:
  8843                           
  8844                           ; BSR set to: 1
  8845                           ;main.c: 1307: else if (cmdbuf[ 5 ] ==
  8846                           ;main.c: 1308: 2) {
  8847  004304  512C               	movf	(_cmdbuf+5)& (0+255),w,b
  8848  004306  0A02               	xorlw	2
  8849  004308  E109               	bnz	l14448
  8850                           
  8851                           ; BSR set to: 1
  8852                           ;main.c: 1309: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8853  00430A  0E40               	movlw	64
  8854  00430C  EC08  F00B         	call	_ECANSetOperationMode
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;main.c: 1310: sendVSCPDriverCommandReply(0, 2);
  8858  004310  0E02               	movlw	2
  8859  004312  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8860  004314  0E00               	movlw	0
  8861  004316  EC1F  F016         	call	_sendVSCPDriverCommandReply
  8862                           
  8863                           ;main.c: 1311: }
  8864  00431A  D024               	goto	l14466
  8865  00431C                     l14448:
  8866                           
  8867                           ; BSR set to: 1
  8868                           ;main.c: 1313: else if (cmdbuf[ 5 ] ==
  8869                           ;main.c: 1314: 3) {
  8870  00431C  512C               	movf	(_cmdbuf+5)& (0+255),w,b
  8871  00431E  0A03               	xorlw	3
  8872  004320  E109               	bnz	l14454
  8873                           
  8874                           ; BSR set to: 1
  8875                           ;main.c: 1315: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8876  004322  0E60               	movlw	96
  8877  004324  EC08  F00B         	call	_ECANSetOperationMode
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;main.c: 1316: sendVSCPDriverCommandReply(0, 3);
  8881  004328  0E03               	movlw	3
  8882  00432A  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8883  00432C  0E00               	movlw	0
  8884  00432E  EC1F  F016         	call	_sendVSCPDriverCommandReply
  8885                           
  8886                           ;main.c: 1317: }
  8887  004332  D018               	goto	l14466
  8888  004334                     l14454:
  8889                           
  8890                           ; BSR set to: 1
  8891                           ;main.c: 1319: else if (cmdbuf[ 5 ] ==
  8892                           ;main.c: 1320: 4) {
  8893  004334  512C               	movf	(_cmdbuf+5)& (0+255),w,b
  8894  004336  0A04               	xorlw	4
  8895  004338  E109               	bnz	l14460
  8896                           
  8897                           ; BSR set to: 1
  8898                           ;main.c: 1321: ECANSetOperationMode(0x20);
  8899  00433A  0E20               	movlw	32
  8900  00433C  EC08  F00B         	call	_ECANSetOperationMode
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;main.c: 1322: sendVSCPDriverCommandReply(0, 4);
  8904  004340  0E04               	movlw	4
  8905  004342  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8906  004344  0E00               	movlw	0
  8907  004346  EC1F  F016         	call	_sendVSCPDriverCommandReply
  8908                           
  8909                           ;main.c: 1323: }
  8910  00434A  D00C               	goto	l14466
  8911  00434C                     l14460:
  8912                           
  8913                           ; BSR set to: 1
  8914                           ;main.c: 1325: else if (cmdbuf[ 5 ] ==
  8915                           ;main.c: 1326: 5) {
  8916  00434C  512C               	movf	(_cmdbuf+5)& (0+255),w,b
  8917  00434E  0A05               	xorlw	5
  8918  004350  E109               	bnz	l14466
  8919                           
  8920                           ; BSR set to: 1
  8921                           ;main.c: 1327: sendVSCPDriverCommandReply(0, 0);
  8922  004352  0E00               	movlw	0
  8923  004354  0100               	movlb	0	; () banked
  8924  004356  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8925  004358  EC1F  F016         	call	_sendVSCPDriverCommandReply
  8926  00435C  D003               	goto	l14466
  8927  00435E                     l14464:
  8928                           
  8929                           ; BSR set to: 1
  8930                           ;main.c: 1332: else {
  8931                           ;main.c: 1334: sendVSCPDriverErrorFrame(2);
  8932  00435E  0E02               	movlw	2
  8933  004360  ECF0  F014         	call	_sendVSCPDriverErrorFrame
  8934  004364                     l14466:
  8935                           
  8936                           ;main.c: 1335: }
  8937                           ;main.c: 1338: pos = 0;
  8938  004364  0100               	movlb	0	; () banked
  8939  004366  6BE7               	clrf	_pos& (0+255),b
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;main.c: 1339: stateVscpDriver = 0;
  8943  004368  6A39               	clrf	_stateVscpDriver,c
  8944  00436A                     l14470:
  8945                           
  8946                           ; BSR set to: 0
  8947                           ;main.c: 1341: }
  8948                           ;main.c: 1343: }
  8949                           ;main.c: 1346: (INTCONbits.GIE = 1);
  8950  00436A  8EF2               	bsf	intcon,7,c	;volatile
  8951  00436C                     l683:
  8952  00436C  0012               	return	
  8953  00436E                     __end_of_doModeVscp:
  8954                           	opt stack 0
  8955  00436E                     PL24:
  8956                           	opt stack 19
  8957  00436E  0E27               	movlw	low _cmdbuf
  8958  004370  0100               	movlb	0	; () banked
  8959  004372  25E7               	addwf	_pos& (0+255),w,b
  8960  004374  6ED9               	movwf	fsr2l,c
  8961  004376  6ADA               	clrf	fsr2h,c
  8962  004378  0E01               	movlw	high _cmdbuf
  8963  00437A  22DA               	addwfc	fsr2h,f,c
  8964  00437C  0012               	return	
  8965  00437E                     __end_ofPL24:
  8966                           	opt stack 0
  8967                           tblptru	equ	0xFF8
  8968                           tblptrh	equ	0xFF7
  8969                           tblptrl	equ	0xFF6
  8970                           tablat	equ	0xFF5
  8971                           prodh	equ	0xFF4
  8972                           prodl	equ	0xFF3
  8973                           intcon	equ	0xFF2
  8974                           indf0	equ	0xFEF
  8975                           postinc0	equ	0xFEE
  8976                           fsr0h	equ	0xFEA
  8977                           fsr0l	equ	0xFE9
  8978                           wreg	equ	0xFE8
  8979                           indf1	equ	0xFE7
  8980                           postinc1	equ	0xFE6
  8981                           postdec1	equ	0xFE5
  8982                           fsr1h	equ	0xFE2
  8983                           fsr1l	equ	0xFE1
  8984                           indf2	equ	0xFDF
  8985                           postinc2	equ	0xFDE
  8986                           postdec2	equ	0xFDD
  8987                           plusw2	equ	0xFDB
  8988                           fsr2h	equ	0xFDA
  8989                           fsr2l	equ	0xFD9
  8990                           status	equ	0xFD8
  8991                           
  8992 ;; *************** function _sendVSCPDriverErrorFrame *****************
  8993 ;; Defined at:
  8994 ;;		line 1607 in file "main.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  errorcode       1    wreg     unsigned char 
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;  errorcode       1   15[BANK0 ] unsigned char 
  8999 ;;  crc             1   16[BANK0 ] unsigned char 
  9000 ;; Return value:  Size  Location     Type
  9001 ;;		None               void
  9002 ;; Registers used:
  9003 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9004 ;; Tracked objects:
  9005 ;;		On entry : F/1
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9009 ;;      Params:         0       0       0       0       0       0       0
  9010 ;;      Locals:         0       2       0       0       0       0       0
  9011 ;;      Temps:          0       0       0       0       0       0       0
  9012 ;;      Totals:         0       2       0       0       0       0       0
  9013 ;;Total ram usage:        2 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    6
  9016 ;; This function calls:
  9017 ;;		_WriteUSART
  9018 ;;		_sendEscapedUartData
  9019 ;;		_crc8
  9020 ;; This function is called by:
  9021 ;;		_doModeVscp
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text8
  9026  0029E0                     __ptext8:
  9027                           	opt stack 0
  9028  0029E0                     _sendVSCPDriverErrorFrame:
  9029                           	opt stack 22
  9030                           
  9031                           ;incstack = 0
  9032                           ;incstack = 0
  9033                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9034  0029E0  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9035                           
  9036                           ; BSR set to: 1
  9037                           ;main.c: 1608: uint8_t crc = 0;
  9038  0029E4  0100               	movlb	0	; () banked
  9039  0029E6  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9040  0029E8                     l801:
  9041  0029E8  A2AC               	btfss	4012,1,c	;volatile
  9042  0029EA  D7FE               	goto	l801
  9043                           
  9044                           ;main.c: 1612: WriteUSART(0x10);
  9045  0029EC  0E10               	movlw	16
  9046  0029EE  ECF3  F00A         	call	_WriteUSART
  9047  0029F2                     l804:
  9048  0029F2  A2AC               	btfss	4012,1,c	;volatile
  9049  0029F4  D7FE               	goto	l804
  9050                           
  9051                           ;main.c: 1614: WriteUSART(0x02);
  9052  0029F6  0E02               	movlw	2
  9053  0029F8  ECF3  F00A         	call	_WriteUSART
  9054  0029FC                     l807:
  9055  0029FC  A2AC               	btfss	4012,1,c	;volatile
  9056  0029FE  D7FE               	goto	l807
  9057                           
  9058                           ;main.c: 1618: WriteUSART(253);
  9059  002A00  0EFD               	movlw	253
  9060  002A02  ECF3  F00A         	call	_WriteUSART
  9061                           
  9062                           ;main.c: 1619: crc8(&crc, 253);
  9063  002A06  0100               	movlb	0	; () banked
  9064  002A08  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9065  002A0A  6F68               	movwf	(?_crc8+1)& (0+255),b
  9066  002A0C  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9067  002A0E  6F67               	movwf	?_crc8& (0+255),b
  9068  002A10  0EFD               	movlw	253
  9069  002A12  6F69               	movwf	(?_crc8+2)& (0+255),b
  9070  002A14  ECD7  F00B         	call	_crc8	;wreg free
  9071  002A18                     l810:
  9072  002A18  A2AC               	btfss	4012,1,c	;volatile
  9073  002A1A  D7FE               	goto	l810
  9074                           
  9075                           ;main.c: 1623: WriteUSART(0);
  9076  002A1C  0E00               	movlw	0
  9077  002A1E  ECF3  F00A         	call	_WriteUSART
  9078                           
  9079                           ;main.c: 1624: crc8(&crc, 0);
  9080  002A22  D836               	call	PL84	;call to abstracted procedure
  9081  002A24  ECD7  F00B         	call	_crc8	;wreg free
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;main.c: 1627: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9085  002A28  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9086  002A2A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9087  002A2C  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9088  002A2E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9089  002A30  0101               	movlb	1	; () banked
  9090  002A32  5129               	movf	(_cmdbuf+2)& (0+255),w,b
  9091  002A34  EC2E  F00E         	call	_sendEscapedUartData
  9092  002A38                     l813:
  9093  002A38  A2AC               	btfss	4012,1,c	;volatile
  9094  002A3A  D7FE               	goto	l813
  9095                           
  9096                           ;main.c: 1631: WriteUSART(0);
  9097  002A3C  0E00               	movlw	0
  9098  002A3E  ECF3  F00A         	call	_WriteUSART
  9099                           
  9100                           ;main.c: 1632: crc8(&crc, 0);
  9101  002A42  D826               	call	PL84	;call to abstracted procedure
  9102  002A44  ECD7  F00B         	call	_crc8	;wreg free
  9103  002A48                     l816:
  9104  002A48  A2AC               	btfss	4012,1,c	;volatile
  9105  002A4A  D7FE               	goto	l816
  9106                           
  9107                           ;main.c: 1634: WriteUSART(1);
  9108  002A4C  0E01               	movlw	1
  9109  002A4E  ECF3  F00A         	call	_WriteUSART
  9110                           
  9111                           ;main.c: 1635: crc8(&crc, 1);
  9112  002A52  0100               	movlb	0	; () banked
  9113  002A54  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9114  002A56  6F68               	movwf	(?_crc8+1)& (0+255),b
  9115  002A58  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9116  002A5A  6F67               	movwf	?_crc8& (0+255),b
  9117  002A5C  0E01               	movlw	1
  9118  002A5E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9119  002A60  ECD7  F00B         	call	_crc8	;wreg free
  9120                           
  9121                           ; BSR set to: 0
  9122                           ;main.c: 1638: sendEscapedUartData(errorcode, &crc);
  9123  002A64  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9124  002A66  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9125  002A68  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9126  002A6A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9127  002A6C  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9128  002A6E  EC2E  F00E         	call	_sendEscapedUartData
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;main.c: 1641: sendEscapedUartData(crc, (0));
  9132  002A72  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9133  002A74  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9134  002A76  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9135  002A78  EC2E  F00E         	call	_sendEscapedUartData
  9136  002A7C                     l819:
  9137  002A7C  A2AC               	btfss	4012,1,c	;volatile
  9138  002A7E  D7FE               	goto	l819
  9139                           
  9140                           ;main.c: 1645: WriteUSART(0x10);
  9141  002A80  0E10               	movlw	16
  9142  002A82  ECF3  F00A         	call	_WriteUSART
  9143  002A86                     l822:
  9144  002A86  A2AC               	btfss	4012,1,c	;volatile
  9145  002A88  D7FE               	goto	l822
  9146                           
  9147                           ;main.c: 1647: WriteUSART(0x03);
  9148  002A8A  0E03               	movlw	3
  9149  002A8C  EFF3  F00A         	goto	_WriteUSART
  9150  002A90                     __end_of_sendVSCPDriverErrorFrame:
  9151                           	opt stack 0
  9152  002A90                     PL84:
  9153                           	opt stack 22
  9154  002A90  0100               	movlb	0	; () banked
  9155  002A92  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9156  002A94  6F68               	movwf	(?_crc8+1)& (0+255),b
  9157  002A96  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9158  002A98  6F67               	movwf	?_crc8& (0+255),b
  9159  002A9A  6B69               	clrf	(?_crc8+2)& (0+255),b
  9160  002A9C  0C00               	retlw	0
  9161  002A9E                     __end_ofPL84:
  9162                           	opt stack 0
  9163                           tblptru	equ	0xFF8
  9164                           tblptrh	equ	0xFF7
  9165                           tblptrl	equ	0xFF6
  9166                           tablat	equ	0xFF5
  9167                           prodh	equ	0xFF4
  9168                           prodl	equ	0xFF3
  9169                           intcon	equ	0xFF2
  9170                           indf0	equ	0xFEF
  9171                           postinc0	equ	0xFEE
  9172                           fsr0h	equ	0xFEA
  9173                           fsr0l	equ	0xFE9
  9174                           wreg	equ	0xFE8
  9175                           indf1	equ	0xFE7
  9176                           postinc1	equ	0xFE6
  9177                           postdec1	equ	0xFE5
  9178                           fsr1h	equ	0xFE2
  9179                           fsr1l	equ	0xFE1
  9180                           indf2	equ	0xFDF
  9181                           postinc2	equ	0xFDE
  9182                           postdec2	equ	0xFDD
  9183                           plusw2	equ	0xFDB
  9184                           fsr2h	equ	0xFDA
  9185                           fsr2l	equ	0xFD9
  9186                           status	equ	0xFD8
  9187                           
  9188 ;; *************** function _sendVSCPDriverCommandReply *****************
  9189 ;; Defined at:
  9190 ;;		line 1744 in file "main.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;  cmdReplyCode    1    wreg     unsigned char 
  9193 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  9196 ;;  crc             1   17[BANK0 ] unsigned char 
  9197 ;; Return value:  Size  Location     Type
  9198 ;;		None               void
  9199 ;; Registers used:
  9200 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9201 ;; Tracked objects:
  9202 ;;		On entry : F/0
  9203 ;;		On exit  : 0/0
  9204 ;;		Unchanged: 0/0
  9205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9206 ;;      Params:         0       1       0       0       0       0       0
  9207 ;;      Locals:         0       2       0       0       0       0       0
  9208 ;;      Temps:          0       0       0       0       0       0       0
  9209 ;;      Totals:         0       3       0       0       0       0       0
  9210 ;;Total ram usage:        3 bytes
  9211 ;; Hardware stack levels used:    1
  9212 ;; Hardware stack levels required when called:    6
  9213 ;; This function calls:
  9214 ;;		_WriteUSART
  9215 ;;		_sendEscapedUartData
  9216 ;;		_crc8
  9217 ;; This function is called by:
  9218 ;;		_doModeVscp
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           	psect	text9
  9223  002C3E                     __ptext9:
  9224                           	opt stack 0
  9225  002C3E                     _sendVSCPDriverCommandReply:
  9226                           	opt stack 22
  9227                           
  9228                           ;incstack = 0
  9229                           ;incstack = 0
  9230                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  9231  002C3E  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;main.c: 1745: uint8_t crc = 0;
  9235  002C42  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  9236  002C44                     l882:
  9237                           
  9238                           ; BSR set to: 0
  9239  002C44  A2AC               	btfss	4012,1,c	;volatile
  9240  002C46  D7FE               	goto	l882
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;main.c: 1749: WriteUSART(0x10);
  9244  002C48  0E10               	movlw	16
  9245  002C4A  ECF3  F00A         	call	_WriteUSART
  9246  002C4E                     l885:
  9247  002C4E  A2AC               	btfss	4012,1,c	;volatile
  9248  002C50  D7FE               	goto	l885
  9249                           
  9250                           ;main.c: 1751: WriteUSART(0x02);
  9251  002C52  0E02               	movlw	2
  9252  002C54  ECF3  F00A         	call	_WriteUSART
  9253  002C58                     l888:
  9254  002C58  A2AC               	btfss	4012,1,c	;volatile
  9255  002C5A  D7FE               	goto	l888
  9256                           
  9257                           ;main.c: 1755: WriteUSART(254);
  9258  002C5C  0EFE               	movlw	254
  9259  002C5E  ECF3  F00A         	call	_WriteUSART
  9260                           
  9261                           ;main.c: 1756: crc8(&crc, 254);
  9262  002C62  0100               	movlb	0	; () banked
  9263  002C64  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9264  002C66  6F68               	movwf	(?_crc8+1)& (0+255),b
  9265  002C68  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9266  002C6A  6F67               	movwf	?_crc8& (0+255),b
  9267  002C6C  0EFE               	movlw	254
  9268  002C6E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9269  002C70  ECD7  F00B         	call	_crc8	;wreg free
  9270  002C74                     l891:
  9271                           
  9272                           ; BSR set to: 0
  9273  002C74  A2AC               	btfss	4012,1,c	;volatile
  9274  002C76  D7FE               	goto	l891
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;main.c: 1760: WriteUSART(0);
  9278  002C78  0E00               	movlw	0
  9279  002C7A  ECF3  F00A         	call	_WriteUSART
  9280                           
  9281                           ;main.c: 1761: crc8(&crc, 0);
  9282  002C7E  D841               	call	PL86	;call to abstracted procedure
  9283  002C80  ECD7  F00B         	call	_crc8	;wreg free
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;main.c: 1764: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9287  002C84  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9288  002C86  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9289  002C88  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9290  002C8A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9291  002C8C  0101               	movlb	1	; () banked
  9292  002C8E  5129               	movf	(_cmdbuf+2)& (0+255),w,b
  9293  002C90  EC2E  F00E         	call	_sendEscapedUartData
  9294  002C94                     l894:
  9295                           
  9296                           ; BSR set to: 0
  9297  002C94  A2AC               	btfss	4012,1,c	;volatile
  9298  002C96  D7FE               	goto	l894
  9299                           
  9300                           ; BSR set to: 0
  9301                           ;main.c: 1768: WriteUSART(0);
  9302  002C98  0E00               	movlw	0
  9303  002C9A  ECF3  F00A         	call	_WriteUSART
  9304                           
  9305                           ;main.c: 1769: crc8(&crc, 0);
  9306  002C9E  D831               	call	PL86	;call to abstracted procedure
  9307  002CA0  ECD7  F00B         	call	_crc8	;wreg free
  9308  002CA4                     l897:
  9309                           
  9310                           ; BSR set to: 0
  9311  002CA4  A2AC               	btfss	4012,1,c	;volatile
  9312  002CA6  D7FE               	goto	l897
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;main.c: 1771: WriteUSART(2);
  9316  002CA8  0E02               	movlw	2
  9317  002CAA  ECF3  F00A         	call	_WriteUSART
  9318                           
  9319                           ;main.c: 1772: crc8(&crc, 2);
  9320  002CAE  0100               	movlb	0	; () banked
  9321  002CB0  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9322  002CB2  6F68               	movwf	(?_crc8+1)& (0+255),b
  9323  002CB4  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9324  002CB6  6F67               	movwf	?_crc8& (0+255),b
  9325  002CB8  0E02               	movlw	2
  9326  002CBA  6F69               	movwf	(?_crc8+2)& (0+255),b
  9327  002CBC  ECD7  F00B         	call	_crc8	;wreg free
  9328  002CC0                     l900:
  9329                           
  9330                           ; BSR set to: 0
  9331  002CC0  A2AC               	btfss	4012,1,c	;volatile
  9332  002CC2  D7FE               	goto	l900
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;main.c: 1776: sendEscapedUartData(cmdReplyCode, &crc);
  9336  002CC4  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9337  002CC6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9338  002CC8  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9339  002CCA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9340  002CCC  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9341  002CCE  EC2E  F00E         	call	_sendEscapedUartData
  9342  002CD2                     l903:
  9343                           
  9344                           ; BSR set to: 0
  9345  002CD2  A2AC               	btfss	4012,1,c	;volatile
  9346  002CD4  D7FE               	goto	l903
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;main.c: 1780: sendEscapedUartData(cmdCode, &crc);
  9350  002CD6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9351  002CD8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9352  002CDA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9353  002CDC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9354  002CDE  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9355  002CE0  EC2E  F00E         	call	_sendEscapedUartData
  9356                           
  9357                           ;main.c: 1783: sendEscapedUartData(crc, (0));
  9358  002CE4  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9359  002CE6  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9360  002CE8  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9361  002CEA  EC2E  F00E         	call	_sendEscapedUartData
  9362  002CEE                     l906:
  9363                           
  9364                           ; BSR set to: 0
  9365  002CEE  A2AC               	btfss	4012,1,c	;volatile
  9366  002CF0  D7FE               	goto	l906
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;main.c: 1787: WriteUSART(0x10);
  9370  002CF2  0E10               	movlw	16
  9371  002CF4  ECF3  F00A         	call	_WriteUSART
  9372  002CF8                     l909:
  9373  002CF8  A2AC               	btfss	4012,1,c	;volatile
  9374  002CFA  D7FE               	goto	l909
  9375                           
  9376                           ;main.c: 1789: WriteUSART(0x03);
  9377  002CFC  0E03               	movlw	3
  9378  002CFE  EFF3  F00A         	goto	_WriteUSART
  9379  002D02                     __end_of_sendVSCPDriverCommandReply:
  9380                           	opt stack 0
  9381  002D02                     PL86:
  9382                           	opt stack 22
  9383  002D02  0100               	movlb	0	; () banked
  9384  002D04  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9385  002D06  6F68               	movwf	(?_crc8+1)& (0+255),b
  9386  002D08  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9387  002D0A  6F67               	movwf	?_crc8& (0+255),b
  9388  002D0C  6B69               	clrf	(?_crc8+2)& (0+255),b
  9389  002D0E  0C00               	retlw	0
  9390  002D10                     __end_ofPL86:
  9391                           	opt stack 0
  9392                           tblptru	equ	0xFF8
  9393                           tblptrh	equ	0xFF7
  9394                           tblptrl	equ	0xFF6
  9395                           tablat	equ	0xFF5
  9396                           prodh	equ	0xFF4
  9397                           prodl	equ	0xFF3
  9398                           intcon	equ	0xFF2
  9399                           indf0	equ	0xFEF
  9400                           postinc0	equ	0xFEE
  9401                           fsr0h	equ	0xFEA
  9402                           fsr0l	equ	0xFE9
  9403                           wreg	equ	0xFE8
  9404                           indf1	equ	0xFE7
  9405                           postinc1	equ	0xFE6
  9406                           postdec1	equ	0xFE5
  9407                           fsr1h	equ	0xFE2
  9408                           fsr1l	equ	0xFE1
  9409                           indf2	equ	0xFDF
  9410                           postinc2	equ	0xFDE
  9411                           postdec2	equ	0xFDD
  9412                           plusw2	equ	0xFDB
  9413                           fsr2h	equ	0xFDA
  9414                           fsr2l	equ	0xFD9
  9415                           status	equ	0xFD8
  9416                           
  9417 ;; *************** function _sendVSCPModeCapabilities *****************
  9418 ;; Defined at:
  9419 ;;		line 2113 in file "main.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;		None
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;  crc             1   15[BANK0 ] unsigned char 
  9424 ;; Return value:  Size  Location     Type
  9425 ;;                  1    wreg      enum E15660
  9426 ;; Registers used:
  9427 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9428 ;; Tracked objects:
  9429 ;;		On entry : F/1
  9430 ;;		On exit  : 0/0
  9431 ;;		Unchanged: 0/0
  9432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9433 ;;      Params:         0       0       0       0       0       0       0
  9434 ;;      Locals:         0       1       0       0       0       0       0
  9435 ;;      Temps:          0       0       0       0       0       0       0
  9436 ;;      Totals:         0       1       0       0       0       0       0
  9437 ;;Total ram usage:        1 bytes
  9438 ;; Hardware stack levels used:    1
  9439 ;; Hardware stack levels required when called:    6
  9440 ;; This function calls:
  9441 ;;		_WriteUSART
  9442 ;;		_sendEscapedUartData
  9443 ;;		_crc8
  9444 ;; This function is called by:
  9445 ;;		_doModeVscp
  9446 ;; This function uses a non-reentrant model
  9447 ;;
  9448                           
  9449                           	psect	text10
  9450  002872                     __ptext10:
  9451                           	opt stack 0
  9452  002872                     _sendVSCPModeCapabilities:
  9453                           	opt stack 22
  9454                           
  9455                           ; BSR set to: 1
  9456                           ;main.c: 2114: uint8_t crc = 0;
  9457                           
  9458                           ;incstack = 0
  9459                           ;incstack = 0
  9460  002872  0100               	movlb	0	; () banked
  9461  002874  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9462  002876                     l1031:
  9463  002876  A2AC               	btfss	4012,1,c	;volatile
  9464  002878  D7FE               	goto	l1031
  9465                           
  9466                           ;main.c: 2118: WriteUSART(0x10);
  9467  00287A  0E10               	movlw	16
  9468  00287C  ECF3  F00A         	call	_WriteUSART
  9469  002880                     l1034:
  9470  002880  A2AC               	btfss	4012,1,c	;volatile
  9471  002882  D7FE               	goto	l1034
  9472                           
  9473                           ;main.c: 2120: WriteUSART(0x02);
  9474  002884  0E02               	movlw	2
  9475  002886  ECF3  F00A         	call	_WriteUSART
  9476  00288A                     l1037:
  9477  00288A  A2AC               	btfss	4012,1,c	;volatile
  9478  00288C  D7FE               	goto	l1037
  9479                           
  9480                           ;main.c: 2124: WriteUSART(9);
  9481  00288E  0E09               	movlw	9
  9482  002890  ECF3  F00A         	call	_WriteUSART
  9483                           
  9484                           ;main.c: 2125: crc8(&crc, 9);
  9485  002894  0100               	movlb	0	; () banked
  9486  002896  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9487  002898  6F68               	movwf	(?_crc8+1)& (0+255),b
  9488  00289A  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9489  00289C  6F67               	movwf	?_crc8& (0+255),b
  9490  00289E  0E09               	movlw	9
  9491  0028A0  6F69               	movwf	(?_crc8+2)& (0+255),b
  9492  0028A2  ECD7  F00B         	call	_crc8	;wreg free
  9493  0028A6                     l1040:
  9494  0028A6  A2AC               	btfss	4012,1,c	;volatile
  9495  0028A8  D7FE               	goto	l1040
  9496                           
  9497                           ;main.c: 2129: WriteUSART(0);
  9498  0028AA  0E00               	movlw	0
  9499  0028AC  ECF3  F00A         	call	_WriteUSART
  9500                           
  9501                           ;main.c: 2130: crc8(&crc, 0);
  9502  0028B0  0100               	movlb	0	; () banked
  9503  0028B2  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9504  0028B4  6F68               	movwf	(?_crc8+1)& (0+255),b
  9505  0028B6  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9506  0028B8  6F67               	movwf	?_crc8& (0+255),b
  9507  0028BA  0E00               	movlw	0
  9508  0028BC  6B69               	clrf	(?_crc8+2)& (0+255),b
  9509  0028BE  ECD7  F00B         	call	_crc8	;wreg free
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;main.c: 2133: sendEscapedUartData(sequencyno, &crc );
  9513  0028C2  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9514  0028C4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9515  0028C6  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9516  0028C8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9517  0028CA  5038               	movf	_sequencyno,w,c
  9518  0028CC  EC2E  F00E         	call	_sendEscapedUartData
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;main.c: 2134: sequencyno++;
  9522  0028D0  2A38               	incf	_sequencyno,f,c
  9523                           
  9524                           ; BSR set to: 0
  9525                           ;main.c: 2137: sendEscapedUartData( 0, &crc );
  9526  0028D2  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9527  0028D4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9528  0028D6  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9529  0028D8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9530  0028DA  0E00               	movlw	0
  9531  0028DC  EC2E  F00E         	call	_sendEscapedUartData
  9532                           
  9533                           ; BSR set to: 0
  9534                           ;main.c: 2138: sendEscapedUartData( 2, &crc );
  9535  0028E0  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9536  0028E2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9537  0028E4  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9538  0028E6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9539  0028E8  0E02               	movlw	2
  9540  0028EA  EC2E  F00E         	call	_sendEscapedUartData
  9541                           
  9542                           ; BSR set to: 0
  9543                           ;main.c: 2141: sendEscapedUartData( 1, &crc );
  9544  0028EE  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9545  0028F0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9546  0028F2  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9547  0028F4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9548  0028F6  0E01               	movlw	1
  9549  0028F8  EC2E  F00E         	call	_sendEscapedUartData
  9550                           
  9551                           ; BSR set to: 0
  9552                           ;main.c: 2142: sendEscapedUartData( 0, &crc );
  9553  0028FC  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9554  0028FE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9555  002900  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9556  002902  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9557  002904  0E00               	movlw	0
  9558  002906  EC2E  F00E         	call	_sendEscapedUartData
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;main.c: 2145: sendEscapedUartData(crc, (0));
  9562  00290A  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9563  00290C  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9564  00290E  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9565  002910  EC2E  F00E         	call	_sendEscapedUartData
  9566  002914                     l1043:
  9567  002914  A2AC               	btfss	4012,1,c	;volatile
  9568  002916  D7FE               	goto	l1043
  9569                           
  9570                           ;main.c: 2149: WriteUSART(0x10);
  9571  002918  0E10               	movlw	16
  9572  00291A  ECF3  F00A         	call	_WriteUSART
  9573  00291E                     l1046:
  9574  00291E  A2AC               	btfss	4012,1,c	;volatile
  9575  002920  D7FE               	goto	l1046
  9576                           
  9577                           ;main.c: 2151: WriteUSART(0x03);
  9578  002922  0E03               	movlw	3
  9579  002924  EFF3  F00A         	goto	_WriteUSART
  9580  002928                     __end_of_sendVSCPModeCapabilities:
  9581                           	opt stack 0
  9582                           tblptru	equ	0xFF8
  9583                           tblptrh	equ	0xFF7
  9584                           tblptrl	equ	0xFF6
  9585                           tablat	equ	0xFF5
  9586                           prodh	equ	0xFF4
  9587                           prodl	equ	0xFF3
  9588                           intcon	equ	0xFF2
  9589                           indf0	equ	0xFEF
  9590                           postinc0	equ	0xFEE
  9591                           fsr0h	equ	0xFEA
  9592                           fsr0l	equ	0xFE9
  9593                           wreg	equ	0xFE8
  9594                           indf1	equ	0xFE7
  9595                           postinc1	equ	0xFE6
  9596                           postdec1	equ	0xFE5
  9597                           fsr1h	equ	0xFE2
  9598                           fsr1l	equ	0xFE1
  9599                           indf2	equ	0xFDF
  9600                           postinc2	equ	0xFDE
  9601                           postdec2	equ	0xFDD
  9602                           plusw2	equ	0xFDB
  9603                           fsr2h	equ	0xFDA
  9604                           fsr2l	equ	0xFD9
  9605                           status	equ	0xFD8
  9606                           
  9607 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9608 ;; Defined at:
  9609 ;;		line 2247 in file "main.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;		None
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  1    wreg      enum E15660
  9616 ;; Registers used:
  9617 ;;		wreg
  9618 ;; Tracked objects:
  9619 ;;		On entry : F/1
  9620 ;;		On exit  : F/1
  9621 ;;		Unchanged: F/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9623 ;;      Params:         0       0       0       0       0       0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0
  9626 ;;      Totals:         0       0       0       0       0       0       0
  9627 ;;Total ram usage:        0 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    3
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_doModeVscp
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text11
  9638  00159E                     __ptext11:
  9639                           	opt stack 0
  9640  00159E                     _receiveVSCPModeMultiCanalMsg:
  9641                           	opt stack 25
  9642                           
  9643                           ; BSR set to: 1
  9644                           
  9645                           ; BSR set to: 1
  9646                           ;main.c: 2249: return 0;
  9647                           
  9648                           ;incstack = 0
  9649                           ;incstack = 0
  9650  00159E  0C00               	retlw	0
  9651  0015A0                     __end_of_receiveVSCPModeMultiCanalMsg:
  9652                           	opt stack 0
  9653                           tblptru	equ	0xFF8
  9654                           tblptrh	equ	0xFF7
  9655                           tblptrl	equ	0xFF6
  9656                           tablat	equ	0xFF5
  9657                           prodh	equ	0xFF4
  9658                           prodl	equ	0xFF3
  9659                           intcon	equ	0xFF2
  9660                           indf0	equ	0xFEF
  9661                           postinc0	equ	0xFEE
  9662                           fsr0h	equ	0xFEA
  9663                           fsr0l	equ	0xFE9
  9664                           wreg	equ	0xFE8
  9665                           indf1	equ	0xFE7
  9666                           postinc1	equ	0xFE6
  9667                           postdec1	equ	0xFE5
  9668                           fsr1h	equ	0xFE2
  9669                           fsr1l	equ	0xFE1
  9670                           indf2	equ	0xFDF
  9671                           postinc2	equ	0xFDE
  9672                           postdec2	equ	0xFDD
  9673                           plusw2	equ	0xFDB
  9674                           fsr2h	equ	0xFDA
  9675                           fsr2l	equ	0xFD9
  9676                           status	equ	0xFD8
  9677                           
  9678 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9679 ;; Defined at:
  9680 ;;		line 2223 in file "main.c"
  9681 ;; Parameters:    Size  Location     Type
  9682 ;;		None
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;  data            8   74[BANK0 ] unsigned char [8]
  9685 ;;  id              4   82[BANK0 ] unsigned long 
  9686 ;;  dlc             1   86[BANK0 ] unsigned char 
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      enum E15660
  9689 ;; Registers used:
  9690 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9691 ;; Tracked objects:
  9692 ;;		On entry : F/1
  9693 ;;		On exit  : E/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9696 ;;      Params:         0       0       0       0       0       0       0
  9697 ;;      Locals:         0      13       0       0       0       0       0
  9698 ;;      Temps:          0      20       0       0       0       0       0
  9699 ;;      Totals:         0      33       0       0       0       0       0
  9700 ;;Total ram usage:       33 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    6
  9703 ;; This function calls:
  9704 ;;		_memcpy
  9705 ;;		_sendCANFrame
  9706 ;; This function is called by:
  9707 ;;		_doModeVscp
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           	psect	text12
  9712  002ED8                     __ptext12:
  9713                           	opt stack 0
  9714  002ED8                     _receiveVSCPModeCanalMsg:
  9715                           	opt stack 22
  9716                           
  9717                           ; BSR set to: 1
  9718                           ;main.c: 2224: uint32_t id;
  9719                           ;main.c: 2225: uint8_t dlc;
  9720                           ;main.c: 2226: uint8_t data[8];
  9721                           ;main.c: 2228: id = ((uint32_t) cmdbuf[5] << 26) |
  9722                           ;main.c: 2229: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9723                           ;main.c: 2230: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9724                           ;main.c: 2231: cmdbuf[5 + 3];
  9725                           
  9726                           ; BSR set to: 1
  9727                           ;incstack = 0
  9728                           ;incstack = 0
  9729  002ED8  C12E  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9730  002EDC  0100               	movlb	0	; () banked
  9731  002EDE  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9732  002EE0  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9733  002EE2  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9734  002EE4  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9735  002EE8  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9736  002EEC  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9737  002EF0  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9738  002EF2  C12D  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9739  002EF6  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9740  002EF8  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9741  002EFA  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9742  002EFC  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9743  002F00  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9744  002F04  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9745  002F06  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9746  002F08  C12C  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9747  002F0C  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9748  002F0E  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9749  002F10  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9750  002F12  0E1A               	movlw	26
  9751  002F14                     u21745:
  9752  002F14  90D8               	bcf	status,0,c
  9753  002F16  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9754  002F18  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9755  002F1A  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9756  002F1C  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9757  002F1E  2EE8               	decfsz	wreg,f,c
  9758  002F20  D7F9               	goto	u21745
  9759  002F22  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9760  002F24  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9761  002F26  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9762  002F28  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9763  002F2A  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9764  002F2C  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9765  002F2E  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9766  002F30  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9767  002F32  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9768  002F34  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9769  002F36  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9770  002F38  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9771  002F3A  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9772  002F3C  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9773  002F3E  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9774  002F40  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9775  002F42  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9776  002F44  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9777  002F46  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9778  002F48  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9779  002F4A  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9780  002F4C  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9781  002F4E  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9782  002F50  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9783  002F52  0101               	movlb	1	; () banked
  9784  002F54  512F               	movf	(_cmdbuf+8)& (0+255),w,b
  9785  002F56  0100               	movlb	0	; () banked
  9786  002F58  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9787  002F5A  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9788  002F5C  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9789  002F5E  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9790  002F60  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9791  002F62  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9792  002F64  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9793  002F66  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9794                           
  9795                           ;main.c: 2232: dlc = ( cmdbuf[4] - 4 ) & 0x07;
  9796  002F68  0101               	movlb	1	; () banked
  9797  002F6A  512B               	movf	(_cmdbuf+4)& (0+255),w,b
  9798  002F6C  0FFC               	addlw	252
  9799  002F6E  0B07               	andlw	7
  9800  002F70  0100               	movlb	0	; () banked
  9801  002F72  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;main.c: 2233: if ( dlc > 8 ) {
  9805  002F74  0E08               	movlw	8
  9806  002F76  65B6               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9807  002F78  D002               	goto	l15996
  9808                           
  9809                           ; BSR set to: 0
  9810                           ;main.c: 2234: return 0;
  9811  002F7A  0E00               	movlw	0
  9812  002F7C  D021               	goto	l1084
  9813  002F7E                     l15996:
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;main.c: 2235: }
  9817                           ;main.c: 2236: memcpy( data, cmdbuf + 5 + 4, dlc );
  9818  002F7E  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9819  002F80  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9820  002F82  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9821  002F84  6F60               	movwf	?_memcpy& (0+255),b
  9822  002F86  0E30               	movlw	low (_cmdbuf+9)
  9823  002F88  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9824  002F8A  0E01               	movlw	high (_cmdbuf+9)
  9825  002F8C  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9826  002F8E  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9827  002F92  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9828  002F96  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9829  002F9A  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9830  002F9C  ECAD  F00C         	call	_memcpy	;wreg free
  9831                           
  9832                           ; BSR set to: 0
  9833                           ;main.c: 2238: return sendCANFrame(id, dlc, data);
  9834  002FA0  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9835  002FA4  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9836  002FA8  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9837  002FAC  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9838  002FB0  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9839  002FB4  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9840  002FB6  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9841  002FB8  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9842  002FBA  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9843  002FBC  ECF3  F00B         	call	_sendCANFrame	;wreg free
  9844  002FC0                     l1084:
  9845  002FC0  0012               	return	
  9846  002FC2                     __end_of_receiveVSCPModeCanalMsg:
  9847                           	opt stack 0
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           prodh	equ	0xFF4
  9853                           prodl	equ	0xFF3
  9854                           intcon	equ	0xFF2
  9855                           indf0	equ	0xFEF
  9856                           postinc0	equ	0xFEE
  9857                           fsr0h	equ	0xFEA
  9858                           fsr0l	equ	0xFE9
  9859                           wreg	equ	0xFE8
  9860                           indf1	equ	0xFE7
  9861                           postinc1	equ	0xFE6
  9862                           postdec1	equ	0xFE5
  9863                           fsr1h	equ	0xFE2
  9864                           fsr1l	equ	0xFE1
  9865                           indf2	equ	0xFDF
  9866                           postinc2	equ	0xFDE
  9867                           postdec2	equ	0xFDD
  9868                           plusw2	equ	0xFDB
  9869                           fsr2h	equ	0xFDA
  9870                           fsr2l	equ	0xFD9
  9871                           status	equ	0xFD8
  9872                           
  9873 ;; *************** function _memcpy *****************
  9874 ;; Defined at:
  9875 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;  d1              2    0[BANK0 ] PTR void 
  9878 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9879 ;;  s1              2    2[BANK0 ] PTR const void 
  9880 ;;		 -> vscpData(8), cmdbuf(80), 
  9881 ;;  n               2    4[BANK0 ] unsigned int 
  9882 ;; Auto vars:     Size  Location     Type
  9883 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9884 ;;		 -> vscpData(8), cmdbuf(80), 
  9885 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9886 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9887 ;; Return value:  Size  Location     Type
  9888 ;;                  2    0[BANK0 ] PTR void 
  9889 ;; Registers used:
  9890 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9891 ;; Tracked objects:
  9892 ;;		On entry : F/0
  9893 ;;		On exit  : F/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9896 ;;      Params:         0       6       0       0       0       0       0
  9897 ;;      Locals:         0       4       0       0       0       0       0
  9898 ;;      Temps:          0       0       0       0       0       0       0
  9899 ;;      Totals:         0      10       0       0       0       0       0
  9900 ;;Total ram usage:       10 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    3
  9903 ;; This function calls:
  9904 ;;		Nothing
  9905 ;; This function is called by:
  9906 ;;		_doModeSLCAN
  9907 ;;		_receiveVSCPModeCanalMsg
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           	psect	text13
  9912  00195A                     __ptext13:
  9913                           	opt stack 0
  9914  00195A                     _memcpy:
  9915                           	opt stack 25
  9916                           
  9917                           ; BSR set to: 0
  9918                           
  9919                           ;incstack = 0
  9920                           ;incstack = 0
  9921  00195A  C062  F068         	movff	memcpy@s1,memcpy@s
  9922  00195E  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9923  001962  C060  F066         	movff	memcpy@d1,memcpy@d
  9924  001966  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9925  00196A  D00E               	goto	l16206
  9926  00196C                     l16200:
  9927                           
  9928                           ; BSR set to: 0
  9929  00196C  C068  FFD9         	movff	memcpy@s,fsr2l
  9930  001970  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9931  001974  C066  FFE1         	movff	memcpy@d,fsr1l
  9932  001978  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9933  00197C  CFDF FFE7          	movff	indf2,indf1
  9934                           
  9935                           ; BSR set to: 0
  9936  001980  4B68               	infsnz	memcpy@s& (0+255),f,b
  9937  001982  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9938                           
  9939                           ; BSR set to: 0
  9940  001984  4B66               	infsnz	memcpy@d& (0+255),f,b
  9941  001986  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9942  001988                     l16206:
  9943                           
  9944                           ; BSR set to: 0
  9945  001988  0764               	decf	memcpy@n& (0+255),f,b
  9946  00198A  A0D8               	btfss	status,0,c
  9947  00198C  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9948  00198E  0100               	movlb	0	; () banked
  9949  001990  2964               	incf	memcpy@n& (0+255),w,b
  9950  001992  B4D8               	btfsc	status,2,c
  9951  001994  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9952  001996  B4D8               	btfsc	status,2,c
  9953                           
  9954                           ; BSR set to: 0
  9955  001998  0012               	return	
  9956  00199A  D7E8               	goto	l16200
  9957  00199C                     __end_of_memcpy:
  9958                           	opt stack 0
  9959                           tblptru	equ	0xFF8
  9960                           tblptrh	equ	0xFF7
  9961                           tblptrl	equ	0xFF6
  9962                           tablat	equ	0xFF5
  9963                           prodh	equ	0xFF4
  9964                           prodl	equ	0xFF3
  9965                           intcon	equ	0xFF2
  9966                           indf0	equ	0xFEF
  9967                           postinc0	equ	0xFEE
  9968                           fsr0h	equ	0xFEA
  9969                           fsr0l	equ	0xFE9
  9970                           wreg	equ	0xFE8
  9971                           indf1	equ	0xFE7
  9972                           postinc1	equ	0xFE6
  9973                           postdec1	equ	0xFE5
  9974                           fsr1h	equ	0xFE2
  9975                           fsr1l	equ	0xFE1
  9976                           indf2	equ	0xFDF
  9977                           postinc2	equ	0xFDE
  9978                           postdec2	equ	0xFDD
  9979                           plusw2	equ	0xFDB
  9980                           fsr2h	equ	0xFDA
  9981                           fsr2l	equ	0xFD9
  9982                           status	equ	0xFD8
  9983                           
  9984 ;; *************** function _sendVSCPDriverAck *****************
  9985 ;; Defined at:
  9986 ;;		line 1655 in file "main.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;		None
  9989 ;; Auto vars:     Size  Location     Type
  9990 ;;  crc             1   15[BANK0 ] unsigned char 
  9991 ;; Return value:  Size  Location     Type
  9992 ;;		None               void
  9993 ;; Registers used:
  9994 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : E/1
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10000 ;;      Params:         0       0       0       0       0       0       0
 10001 ;;      Locals:         0       1       0       0       0       0       0
 10002 ;;      Temps:          0       0       0       0       0       0       0
 10003 ;;      Totals:         0       1       0       0       0       0       0
 10004 ;;Total ram usage:        1 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:    6
 10007 ;; This function calls:
 10008 ;;		_WriteUSART
 10009 ;;		_sendEscapedUartData
 10010 ;;		_crc8
 10011 ;; This function is called by:
 10012 ;;		_doModeVscp
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           	psect	text14
 10017  0025C0                     __ptext14:
 10018                           	opt stack 0
 10019  0025C0                     _sendVSCPDriverAck:
 10020                           	opt stack 22
 10021                           
 10022                           ;main.c: 1656: uint8_t crc = 0;
 10023                           
 10024                           ; BSR set to: 0
 10025                           ;incstack = 0
 10026                           ;incstack = 0
 10027  0025C0  0100               	movlb	0	; () banked
 10028  0025C2  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
 10029  0025C4                     l828:
 10030  0025C4  A2AC               	btfss	4012,1,c	;volatile
 10031  0025C6  D7FE               	goto	l828
 10032                           
 10033                           ;main.c: 1660: WriteUSART(0x10);
 10034  0025C8  0E10               	movlw	16
 10035  0025CA  ECF3  F00A         	call	_WriteUSART
 10036  0025CE                     l831:
 10037  0025CE  A2AC               	btfss	4012,1,c	;volatile
 10038  0025D0  D7FE               	goto	l831
 10039                           
 10040                           ;main.c: 1662: WriteUSART(0x02);
 10041  0025D2  0E02               	movlw	2
 10042  0025D4  ECF3  F00A         	call	_WriteUSART
 10043  0025D8                     l834:
 10044  0025D8  A2AC               	btfss	4012,1,c	;volatile
 10045  0025DA  D7FE               	goto	l834
 10046                           
 10047                           ;main.c: 1666: WriteUSART(251);
 10048  0025DC  0EFB               	movlw	251
 10049  0025DE  ECF3  F00A         	call	_WriteUSART
 10050                           
 10051                           ;main.c: 1667: crc8(&crc, 251);
 10052  0025E2  0100               	movlb	0	; () banked
 10053  0025E4  0E00               	movlw	high sendVSCPDriverAck@crc
 10054  0025E6  6F68               	movwf	(?_crc8+1)& (0+255),b
 10055  0025E8  0E6F               	movlw	low sendVSCPDriverAck@crc
 10056  0025EA  6F67               	movwf	?_crc8& (0+255),b
 10057  0025EC  0EFB               	movlw	251
 10058  0025EE  6F69               	movwf	(?_crc8+2)& (0+255),b
 10059  0025F0  ECD7  F00B         	call	_crc8	;wreg free
 10060  0025F4                     l837:
 10061  0025F4  A2AC               	btfss	4012,1,c	;volatile
 10062  0025F6  D7FE               	goto	l837
 10063                           
 10064                           ;main.c: 1671: WriteUSART(0);
 10065  0025F8  0E00               	movlw	0
 10066  0025FA  ECF3  F00A         	call	_WriteUSART
 10067                           
 10068                           ;main.c: 1672: crc8(&crc, 0);
 10069  0025FE  D829               	call	PL44	;call to abstracted procedure
 10070  002600  ECD7  F00B         	call	_crc8	;wreg free
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;main.c: 1675: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10074  002604  0E00               	movlw	high sendVSCPDriverAck@crc
 10075  002606  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10076  002608  0E6F               	movlw	low sendVSCPDriverAck@crc
 10077  00260A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10078  00260C  0101               	movlb	1	; () banked
 10079  00260E  5129               	movf	(_cmdbuf+2)& (0+255),w,b
 10080  002610  EC2E  F00E         	call	_sendEscapedUartData
 10081  002614                     l840:
 10082  002614  A2AC               	btfss	4012,1,c	;volatile
 10083  002616  D7FE               	goto	l840
 10084                           
 10085                           ;main.c: 1679: WriteUSART(0);
 10086  002618  0E00               	movlw	0
 10087  00261A  ECF3  F00A         	call	_WriteUSART
 10088                           
 10089                           ;main.c: 1680: crc8(&crc, 0);
 10090  00261E  D819               	call	PL44	;call to abstracted procedure
 10091  002620  ECD7  F00B         	call	_crc8	;wreg free
 10092  002624                     l843:
 10093  002624  A2AC               	btfss	4012,1,c	;volatile
 10094  002626  D7FE               	goto	l843
 10095                           
 10096                           ;main.c: 1682: WriteUSART(0);
 10097  002628  0E00               	movlw	0
 10098  00262A  ECF3  F00A         	call	_WriteUSART
 10099                           
 10100                           ;main.c: 1683: crc8(&crc, 0);
 10101  00262E  D811               	call	PL44	;call to abstracted procedure
 10102  002630  ECD7  F00B         	call	_crc8	;wreg free
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;main.c: 1686: sendEscapedUartData(crc, (0));
 10106  002634  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10107  002636  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10108  002638  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10109  00263A  EC2E  F00E         	call	_sendEscapedUartData
 10110  00263E                     l846:
 10111  00263E  A2AC               	btfss	4012,1,c	;volatile
 10112  002640  D7FE               	goto	l846
 10113                           
 10114                           ;main.c: 1690: WriteUSART(0x10);
 10115  002642  0E10               	movlw	16
 10116  002644  ECF3  F00A         	call	_WriteUSART
 10117  002648                     l849:
 10118  002648  A2AC               	btfss	4012,1,c	;volatile
 10119  00264A  D7FE               	goto	l849
 10120                           
 10121                           ;main.c: 1692: WriteUSART(0x03);
 10122  00264C  0E03               	movlw	3
 10123  00264E  EFF3  F00A         	goto	_WriteUSART
 10124  002652                     __end_of_sendVSCPDriverAck:
 10125                           	opt stack 0
 10126  002652                     PL44:
 10127                           	opt stack 22
 10128  002652  0100               	movlb	0	; () banked
 10129  002654  0E00               	movlw	high sendVSCPDriverAck@crc
 10130  002656  6F68               	movwf	(?_crc8+1)& (0+255),b
 10131  002658  0E6F               	movlw	low sendVSCPDriverAck@crc
 10132  00265A  6F67               	movwf	?_crc8& (0+255),b
 10133  00265C  6B69               	clrf	(?_crc8+2)& (0+255),b
 10134  00265E  0C00               	retlw	0
 10135  002660                     __end_ofPL44:
 10136                           	opt stack 0
 10137                           tblptru	equ	0xFF8
 10138                           tblptrh	equ	0xFF7
 10139                           tblptrl	equ	0xFF6
 10140                           tablat	equ	0xFF5
 10141                           prodh	equ	0xFF4
 10142                           prodl	equ	0xFF3
 10143                           intcon	equ	0xFF2
 10144                           indf0	equ	0xFEF
 10145                           postinc0	equ	0xFEE
 10146                           fsr0h	equ	0xFEA
 10147                           fsr0l	equ	0xFE9
 10148                           wreg	equ	0xFE8
 10149                           indf1	equ	0xFE7
 10150                           postinc1	equ	0xFE6
 10151                           postdec1	equ	0xFE5
 10152                           fsr1h	equ	0xFE2
 10153                           fsr1l	equ	0xFE1
 10154                           indf2	equ	0xFDF
 10155                           postinc2	equ	0xFDE
 10156                           postdec2	equ	0xFDD
 10157                           plusw2	equ	0xFDB
 10158                           fsr2h	equ	0xFDA
 10159                           fsr2l	equ	0xFD9
 10160                           status	equ	0xFD8
 10161                           
 10162 ;; *************** function _sendVSCPDriverNack *****************
 10163 ;; Defined at:
 10164 ;;		line 1699 in file "main.c"
 10165 ;; Parameters:    Size  Location     Type
 10166 ;;		None
 10167 ;; Auto vars:     Size  Location     Type
 10168 ;;  crc             1   15[BANK0 ] unsigned char 
 10169 ;; Return value:  Size  Location     Type
 10170 ;;		None               void
 10171 ;; Registers used:
 10172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10173 ;; Tracked objects:
 10174 ;;		On entry : E/0
 10175 ;;		On exit  : 0/0
 10176 ;;		Unchanged: 0/0
 10177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10178 ;;      Params:         0       0       0       0       0       0       0
 10179 ;;      Locals:         0       1       0       0       0       0       0
 10180 ;;      Temps:          0       0       0       0       0       0       0
 10181 ;;      Totals:         0       1       0       0       0       0       0
 10182 ;;Total ram usage:        1 bytes
 10183 ;; Hardware stack levels used:    1
 10184 ;; Hardware stack levels required when called:    6
 10185 ;; This function calls:
 10186 ;;		_WriteUSART
 10187 ;;		_sendEscapedUartData
 10188 ;;		_crc8
 10189 ;; This function is called by:
 10190 ;;		_doModeVscp
 10191 ;; This function uses a non-reentrant model
 10192 ;;
 10193                           
 10194                           	psect	text15
 10195  002520                     __ptext15:
 10196                           	opt stack 0
 10197  002520                     _sendVSCPDriverNack:
 10198                           	opt stack 22
 10199                           
 10200                           ;main.c: 1700: uint8_t crc = 0;
 10201                           
 10202                           ;incstack = 0
 10203                           ;incstack = 0
 10204  002520  0100               	movlb	0	; () banked
 10205  002522  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10206  002524                     l855:
 10207  002524  A2AC               	btfss	4012,1,c	;volatile
 10208  002526  D7FE               	goto	l855
 10209                           
 10210                           ;main.c: 1704: WriteUSART(0x10);
 10211  002528  0E10               	movlw	16
 10212  00252A  ECF3  F00A         	call	_WriteUSART
 10213  00252E                     l858:
 10214  00252E  A2AC               	btfss	4012,1,c	;volatile
 10215  002530  D7FE               	goto	l858
 10216                           
 10217                           ;main.c: 1706: WriteUSART(0x02);
 10218  002532  0E02               	movlw	2
 10219  002534  ECF3  F00A         	call	_WriteUSART
 10220  002538                     l861:
 10221  002538  A2AC               	btfss	4012,1,c	;volatile
 10222  00253A  D7FE               	goto	l861
 10223                           
 10224                           ;main.c: 1710: WriteUSART(252);
 10225  00253C  0EFC               	movlw	252
 10226  00253E  ECF3  F00A         	call	_WriteUSART
 10227                           
 10228                           ;main.c: 1711: crc8(&crc, 252);
 10229  002542  0100               	movlb	0	; () banked
 10230  002544  0E00               	movlw	high sendVSCPDriverNack@crc
 10231  002546  6F68               	movwf	(?_crc8+1)& (0+255),b
 10232  002548  0E6F               	movlw	low sendVSCPDriverNack@crc
 10233  00254A  6F67               	movwf	?_crc8& (0+255),b
 10234  00254C  0EFC               	movlw	252
 10235  00254E  6F69               	movwf	(?_crc8+2)& (0+255),b
 10236  002550  ECD7  F00B         	call	_crc8	;wreg free
 10237  002554                     l864:
 10238  002554  A2AC               	btfss	4012,1,c	;volatile
 10239  002556  D7FE               	goto	l864
 10240                           
 10241                           ;main.c: 1715: WriteUSART(0);
 10242  002558  0E00               	movlw	0
 10243  00255A  ECF3  F00A         	call	_WriteUSART
 10244                           
 10245                           ;main.c: 1716: crc8(&crc, 0);
 10246  00255E  D829               	call	PL42	;call to abstracted procedure
 10247  002560  ECD7  F00B         	call	_crc8	;wreg free
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;main.c: 1719: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10251  002564  0E00               	movlw	high sendVSCPDriverNack@crc
 10252  002566  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10253  002568  0E6F               	movlw	low sendVSCPDriverNack@crc
 10254  00256A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10255  00256C  0101               	movlb	1	; () banked
 10256  00256E  5129               	movf	(_cmdbuf+2)& (0+255),w,b
 10257  002570  EC2E  F00E         	call	_sendEscapedUartData
 10258  002574                     l867:
 10259  002574  A2AC               	btfss	4012,1,c	;volatile
 10260  002576  D7FE               	goto	l867
 10261                           
 10262                           ;main.c: 1723: WriteUSART(0);
 10263  002578  0E00               	movlw	0
 10264  00257A  ECF3  F00A         	call	_WriteUSART
 10265                           
 10266                           ;main.c: 1724: crc8(&crc, 0);
 10267  00257E  D819               	call	PL42	;call to abstracted procedure
 10268  002580  ECD7  F00B         	call	_crc8	;wreg free
 10269  002584                     l870:
 10270  002584  A2AC               	btfss	4012,1,c	;volatile
 10271  002586  D7FE               	goto	l870
 10272                           
 10273                           ;main.c: 1726: WriteUSART(0);
 10274  002588  0E00               	movlw	0
 10275  00258A  ECF3  F00A         	call	_WriteUSART
 10276                           
 10277                           ;main.c: 1727: crc8(&crc, 0);
 10278  00258E  D811               	call	PL42	;call to abstracted procedure
 10279  002590  ECD7  F00B         	call	_crc8	;wreg free
 10280                           
 10281                           ; BSR set to: 0
 10282                           ;main.c: 1730: sendEscapedUartData(crc, (0));
 10283  002594  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10284  002596  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10285  002598  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10286  00259A  EC2E  F00E         	call	_sendEscapedUartData
 10287  00259E                     l873:
 10288  00259E  A2AC               	btfss	4012,1,c	;volatile
 10289  0025A0  D7FE               	goto	l873
 10290                           
 10291                           ;main.c: 1734: WriteUSART(0x10);
 10292  0025A2  0E10               	movlw	16
 10293  0025A4  ECF3  F00A         	call	_WriteUSART
 10294  0025A8                     l876:
 10295  0025A8  A2AC               	btfss	4012,1,c	;volatile
 10296  0025AA  D7FE               	goto	l876
 10297                           
 10298                           ;main.c: 1736: WriteUSART(0x03);
 10299  0025AC  0E03               	movlw	3
 10300  0025AE  EFF3  F00A         	goto	_WriteUSART
 10301  0025B2                     __end_of_sendVSCPDriverNack:
 10302                           	opt stack 0
 10303  0025B2                     PL42:
 10304                           	opt stack 22
 10305  0025B2  0100               	movlb	0	; () banked
 10306  0025B4  0E00               	movlw	high sendVSCPDriverNack@crc
 10307  0025B6  6F68               	movwf	(?_crc8+1)& (0+255),b
 10308  0025B8  0E6F               	movlw	low sendVSCPDriverNack@crc
 10309  0025BA  6F67               	movwf	?_crc8& (0+255),b
 10310  0025BC  6B69               	clrf	(?_crc8+2)& (0+255),b
 10311  0025BE  0C00               	retlw	0
 10312  0025C0                     __end_ofPL42:
 10313                           	opt stack 0
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           indf0	equ	0xFEF
 10322                           postinc0	equ	0xFEE
 10323                           fsr0h	equ	0xFEA
 10324                           fsr0l	equ	0xFE9
 10325                           wreg	equ	0xFE8
 10326                           indf1	equ	0xFE7
 10327                           postinc1	equ	0xFE6
 10328                           postdec1	equ	0xFE5
 10329                           fsr1h	equ	0xFE2
 10330                           fsr1l	equ	0xFE1
 10331                           indf2	equ	0xFDF
 10332                           postinc2	equ	0xFDE
 10333                           postdec2	equ	0xFDD
 10334                           plusw2	equ	0xFDB
 10335                           fsr2h	equ	0xFDA
 10336                           fsr2l	equ	0xFD9
 10337                           status	equ	0xFD8
 10338                           
 10339 ;; *************** function _calcCRC *****************
 10340 ;; Defined at:
 10341 ;;		line 2459 in file "main.c"
 10342 ;; Parameters:    Size  Location     Type
 10343 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10344 ;;		 -> cmdbuf(80), 
 10345 ;;  len             1   14[BANK0 ] unsigned char 
 10346 ;; Auto vars:     Size  Location     Type
 10347 ;;  crc             1   16[BANK0 ] unsigned char 
 10348 ;;  j               1   15[BANK0 ] unsigned char 
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  1    wreg      unsigned char 
 10351 ;; Registers used:
 10352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10353 ;; Tracked objects:
 10354 ;;		On entry : F/0
 10355 ;;		On exit  : F/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10358 ;;      Params:         0       3       0       0       0       0       0
 10359 ;;      Locals:         0       2       0       0       0       0       0
 10360 ;;      Temps:          0       0       0       0       0       0       0
 10361 ;;      Totals:         0       5       0       0       0       0       0
 10362 ;;Total ram usage:        5 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; Hardware stack levels required when called:    5
 10365 ;; This function calls:
 10366 ;;		_crc8
 10367 ;; This function is called by:
 10368 ;;		_doModeVscp
 10369 ;; This function uses a non-reentrant model
 10370 ;;
 10371                           
 10372                           	psect	text16
 10373  0016E2                     __ptext16:
 10374                           	opt stack 0
 10375  0016E2                     _calcCRC:
 10376                           	opt stack 23
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;main.c: 2460: uint8_t j;
 10380                           ;main.c: 2461: uint8_t crc = 0;
 10381                           
 10382                           ;incstack = 0
 10383                           ;incstack = 0
 10384  0016E2  6B70               	clrf	calcCRC@crc& (0+255),b
 10385                           
 10386                           ;main.c: 2463: for (j = 0; j < len; j++) {
 10387  0016E4  6B6F               	clrf	calcCRC@j& (0+255),b
 10388  0016E6  D00F               	goto	l15922
 10389  0016E8                     l15918:
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;main.c: 2464: crc8(&crc, p[j]);
 10393  0016E8  0E00               	movlw	high calcCRC@crc
 10394  0016EA  6F68               	movwf	(?_crc8+1)& (0+255),b
 10395  0016EC  0E70               	movlw	low calcCRC@crc
 10396  0016EE  6F67               	movwf	?_crc8& (0+255),b
 10397  0016F0  516F               	movf	calcCRC@j& (0+255),w,b
 10398  0016F2  256C               	addwf	calcCRC@p& (0+255),w,b
 10399  0016F4  6ED9               	movwf	fsr2l,c
 10400  0016F6  0E00               	movlw	0
 10401  0016F8  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10402  0016FA  6EDA               	movwf	fsr2h,c
 10403  0016FC  50DF               	movf	indf2,w,c
 10404  0016FE  6F69               	movwf	(?_crc8+2)& (0+255),b
 10405  001700  ECD7  F00B         	call	_crc8	;wreg free
 10406                           
 10407                           ; BSR set to: 0
 10408  001704  2B6F               	incf	calcCRC@j& (0+255),f,b
 10409  001706                     l15922:
 10410                           
 10411                           ; BSR set to: 0
 10412  001706  516E               	movf	calcCRC@len& (0+255),w,b
 10413  001708  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10414  00170A  E3EE               	bnc	l15918
 10415                           
 10416                           ; BSR set to: 0
 10417                           ;main.c: 2465: }
 10418                           ;main.c: 2467: return crc;
 10419  00170C  5170               	movf	calcCRC@crc& (0+255),w,b
 10420                           
 10421                           ; BSR set to: 0
 10422  00170E  0012               	return	
 10423  001710                     __end_of_calcCRC:
 10424                           	opt stack 0
 10425                           tblptru	equ	0xFF8
 10426                           tblptrh	equ	0xFF7
 10427                           tblptrl	equ	0xFF6
 10428                           tablat	equ	0xFF5
 10429                           prodh	equ	0xFF4
 10430                           prodl	equ	0xFF3
 10431                           intcon	equ	0xFF2
 10432                           indf0	equ	0xFEF
 10433                           postinc0	equ	0xFEE
 10434                           fsr0h	equ	0xFEA
 10435                           fsr0l	equ	0xFE9
 10436                           wreg	equ	0xFE8
 10437                           indf1	equ	0xFE7
 10438                           postinc1	equ	0xFE6
 10439                           postdec1	equ	0xFE5
 10440                           fsr1h	equ	0xFE2
 10441                           fsr1l	equ	0xFE1
 10442                           indf2	equ	0xFDF
 10443                           postinc2	equ	0xFDE
 10444                           postdec2	equ	0xFDD
 10445                           plusw2	equ	0xFDB
 10446                           fsr2h	equ	0xFDA
 10447                           fsr2l	equ	0xFD9
 10448                           status	equ	0xFD8
 10449                           
 10450 ;; *************** function _receiveSendEventCANAL *****************
 10451 ;; Defined at:
 10452 ;;		line 1851 in file "main.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;		None
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;  crc             1   32[BANK0 ] unsigned char 
 10457 ;;  data            8   18[BANK0 ] unsigned char [8]
 10458 ;;  id              4   27[BANK0 ] unsigned long 
 10459 ;;  dlc             1   31[BANK0 ] unsigned char 
 10460 ;;  i               1   26[BANK0 ] unsigned char 
 10461 ;; Return value:  Size  Location     Type
 10462 ;;                  1    wreg      enum E15660
 10463 ;; Registers used:
 10464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10465 ;; Tracked objects:
 10466 ;;		On entry : F/1
 10467 ;;		On exit  : 0/0
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10470 ;;      Params:         0       0       0       0       0       0       0
 10471 ;;      Locals:         0      15       0       0       0       0       0
 10472 ;;      Temps:          0       0       0       0       0       0       0
 10473 ;;      Totals:         0      15       0       0       0       0       0
 10474 ;;Total ram usage:       15 bytes
 10475 ;; Hardware stack levels used:    1
 10476 ;; Hardware stack levels required when called:    6
 10477 ;; This function calls:
 10478 ;;		_WriteUSART
 10479 ;;		_sendEscapedUartData
 10480 ;;		_crc8
 10481 ;;		_getCANFrame
 10482 ;; This function is called by:
 10483 ;;		_doModeVscp
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487                           	psect	text17
 10488  00371E                     __ptext17:
 10489                           	opt stack 0
 10490  00371E                     _receiveSendEventCANAL:
 10491                           	opt stack 22
 10492                           
 10493                           ; BSR set to: 1
 10494                           ;main.c: 1852: uint8_t i;
 10495                           ;main.c: 1853: uint32_t id;
 10496                           ;main.c: 1854: uint8_t dlc;
 10497                           ;main.c: 1855: uint8_t data[8];
 10498                           ;main.c: 1857: if ( getCANFrame( &id, &dlc, &data ) ) {
 10499                           
 10500                           ; BSR set to: 0
 10501                           ;incstack = 0
 10502                           ;incstack = 0
 10503  00371E  0100               	movlb	0	; () banked
 10504  003720  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10505  003722  6F6E               	movwf	?_getCANFrame& (0+255),b
 10506  003724  0E00               	movlw	high receiveSendEventCANAL@data
 10507  003726  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10508  003728  0E72               	movlw	low receiveSendEventCANAL@data
 10509  00372A  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10510  00372C  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10511  00372E  ECF1  F011         	call	_getCANFrame
 10512  003732  0900               	iorlw	0
 10513  003734  E101 D092          	bz	l971
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;main.c: 1859: uint8_t crc = 0;
 10517  003738  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;main.c: 1862: cntRxFrames++;
 10521  00373A  0101               	movlb	1	; () banked
 10522  00373C  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10523  00373E  0E00               	movlw	0
 10524  003740  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10525  003742  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10526  003744  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10527                           
 10528                           ;main.c: 1863: cntRxBytes += dlc;
 10529  003746  0100               	movlb	0	; () banked
 10530  003748  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10531  00374A  0101               	movlb	1	; () banked
 10532  00374C  2708               	addwf	_cntRxBytes& (0+255),f,b
 10533  00374E  0E00               	movlw	0
 10534  003750  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10535  003752  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10536  003754  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10537  003756                     l950:
 10538                           
 10539                           ; BSR set to: 1
 10540  003756  A2AC               	btfss	4012,1,c	;volatile
 10541  003758  D7FE               	goto	l950
 10542                           
 10543                           ; BSR set to: 1
 10544                           ;main.c: 1867: WriteUSART(0x10);
 10545  00375A  0E10               	movlw	16
 10546  00375C  ECF3  F00A         	call	_WriteUSART
 10547  003760                     l953:
 10548  003760  A2AC               	btfss	4012,1,c	;volatile
 10549  003762  D7FE               	goto	l953
 10550                           
 10551                           ;main.c: 1869: WriteUSART(0x02);
 10552  003764  0E02               	movlw	2
 10553  003766  ECF3  F00A         	call	_WriteUSART
 10554  00376A                     l956:
 10555  00376A  A2AC               	btfss	4012,1,c	;volatile
 10556  00376C  D7FE               	goto	l956
 10557                           
 10558                           ;main.c: 1873: WriteUSART(2);
 10559  00376E  0E02               	movlw	2
 10560  003770  ECF3  F00A         	call	_WriteUSART
 10561                           
 10562                           ;main.c: 1874: crc8(&crc, 2);
 10563  003774  0100               	movlb	0	; () banked
 10564  003776  0E00               	movlw	high receiveSendEventCANAL@crc
 10565  003778  6F68               	movwf	(?_crc8+1)& (0+255),b
 10566  00377A  0E80               	movlw	low receiveSendEventCANAL@crc
 10567  00377C  6F67               	movwf	?_crc8& (0+255),b
 10568  00377E  0E02               	movlw	2
 10569  003780  6F69               	movwf	(?_crc8+2)& (0+255),b
 10570  003782  ECD7  F00B         	call	_crc8	;wreg free
 10571  003786                     l959:
 10572  003786  A2AC               	btfss	4012,1,c	;volatile
 10573  003788  D7FE               	goto	l959
 10574                           
 10575                           ;main.c: 1878: WriteUSART(0);
 10576  00378A  0E00               	movlw	0
 10577  00378C  ECF3  F00A         	call	_WriteUSART
 10578                           
 10579                           ;main.c: 1879: crc8(&crc, 0);
 10580  003790  0100               	movlb	0	; () banked
 10581  003792  0E00               	movlw	high receiveSendEventCANAL@crc
 10582  003794  6F68               	movwf	(?_crc8+1)& (0+255),b
 10583  003796  0E80               	movlw	low receiveSendEventCANAL@crc
 10584  003798  6F67               	movwf	?_crc8& (0+255),b
 10585  00379A  0E00               	movlw	0
 10586  00379C  6B69               	clrf	(?_crc8+2)& (0+255),b
 10587  00379E  ECD7  F00B         	call	_crc8	;wreg free
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;main.c: 1882: sendEscapedUartData(sequencyno, &crc);
 10591  0037A2  0E00               	movlw	high receiveSendEventCANAL@crc
 10592  0037A4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10593  0037A6  0E80               	movlw	low receiveSendEventCANAL@crc
 10594  0037A8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10595  0037AA  5038               	movf	_sequencyno,w,c
 10596  0037AC  EC2E  F00E         	call	_sendEscapedUartData
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;main.c: 1883: sequencyno++;
 10600  0037B0  2A38               	incf	_sequencyno,f,c
 10601                           
 10602                           ; BSR set to: 0
 10603                           ;main.c: 1886: sendEscapedUartData(0, &crc);
 10604  0037B2  0E00               	movlw	high receiveSendEventCANAL@crc
 10605  0037B4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10606  0037B6  0E80               	movlw	low receiveSendEventCANAL@crc
 10607  0037B8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10608  0037BA  0E00               	movlw	0
 10609  0037BC  EC2E  F00E         	call	_sendEscapedUartData
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;main.c: 1887: sendEscapedUartData(5 + dlc, &crc);
 10613  0037C0  0E00               	movlw	high receiveSendEventCANAL@crc
 10614  0037C2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10615  0037C4  0E80               	movlw	low receiveSendEventCANAL@crc
 10616  0037C6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10617  0037C8  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10618  0037CA  0F05               	addlw	5
 10619  0037CC  EC2E  F00E         	call	_sendEscapedUartData
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;main.c: 1893: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10623  0037D0  0E00               	movlw	high receiveSendEventCANAL@crc
 10624  0037D2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10625  0037D4  0E80               	movlw	low receiveSendEventCANAL@crc
 10626  0037D6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10627  0037D8  0100               	movlb	0	; () banked
 10628  0037DA  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10629  0037DC  EC2E  F00E         	call	_sendEscapedUartData
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;main.c: 1894: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10633  0037E0  0E00               	movlw	high receiveSendEventCANAL@crc
 10634  0037E2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10635  0037E4  0E80               	movlw	low receiveSendEventCANAL@crc
 10636  0037E6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10637  0037E8  0100               	movlb	0	; () banked
 10638  0037EA  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10639  0037EC  EC2E  F00E         	call	_sendEscapedUartData
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;main.c: 1895: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10643  0037F0  0E00               	movlw	high receiveSendEventCANAL@crc
 10644  0037F2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10645  0037F4  0E80               	movlw	low receiveSendEventCANAL@crc
 10646  0037F6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10647  0037F8  0100               	movlb	0	; () banked
 10648  0037FA  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10649  0037FC  EC2E  F00E         	call	_sendEscapedUartData
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;main.c: 1896: sendEscapedUartData((id & 0xff), &crc);
 10653  003800  0E00               	movlw	high receiveSendEventCANAL@crc
 10654  003802  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10655  003804  0E80               	movlw	low receiveSendEventCANAL@crc
 10656  003806  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10657  003808  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10658  00380A  EC2E  F00E         	call	_sendEscapedUartData
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;main.c: 1899: sendEscapedUartData(dlc, &crc);
 10662  00380E  0E00               	movlw	high receiveSendEventCANAL@crc
 10663  003810  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10664  003812  0E80               	movlw	low receiveSendEventCANAL@crc
 10665  003814  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10666  003816  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10667  003818  EC2E  F00E         	call	_sendEscapedUartData
 10668                           
 10669                           ; BSR set to: 0
 10670                           ;main.c: 1902: for (i = 0; i < dlc; i++) {
 10671  00381C  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10672  00381E  D00C               	goto	l15906
 10673  003820                     l15902:
 10674                           
 10675                           ; BSR set to: 0
 10676                           ;main.c: 1903: sendEscapedUartData( data[ i ], &crc );
 10677  003820  0E00               	movlw	high receiveSendEventCANAL@crc
 10678  003822  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10679  003824  0E80               	movlw	low receiveSendEventCANAL@crc
 10680  003826  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10681  003828  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10682  00382A  0F72               	addlw	low receiveSendEventCANAL@data
 10683  00382C  6ED9               	movwf	fsr2l,c
 10684  00382E  6ADA               	clrf	fsr2h,c
 10685  003830  50DF               	movf	indf2,w,c
 10686  003832  EC2E  F00E         	call	_sendEscapedUartData
 10687                           
 10688                           ; BSR set to: 0
 10689  003836  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10690  003838                     l15906:
 10691                           
 10692                           ; BSR set to: 0
 10693  003838  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10694  00383A  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10695  00383C  E3F1               	bnc	l15902
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;main.c: 1904: }
 10699                           ;main.c: 1909: sendEscapedUartData(crc, (0));
 10700  00383E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10701  003840  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10702  003842  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10703  003844  EC2E  F00E         	call	_sendEscapedUartData
 10704  003848                     l965:
 10705  003848  A2AC               	btfss	4012,1,c	;volatile
 10706  00384A  D7FE               	goto	l965
 10707                           
 10708                           ;main.c: 1913: WriteUSART(0x10);
 10709  00384C  0E10               	movlw	16
 10710  00384E  ECF3  F00A         	call	_WriteUSART
 10711  003852                     l968:
 10712  003852  A2AC               	btfss	4012,1,c	;volatile
 10713  003854  D7FE               	goto	l968
 10714                           
 10715                           ;main.c: 1915: WriteUSART(0x03);
 10716  003856  0E03               	movlw	3
 10717  003858  ECF3  F00A         	call	_WriteUSART
 10718  00385C                     l971:
 10719  00385C  0012               	return	
 10720  00385E                     __end_of_receiveSendEventCANAL:
 10721                           	opt stack 0
 10722                           tblptru	equ	0xFF8
 10723                           tblptrh	equ	0xFF7
 10724                           tblptrl	equ	0xFF6
 10725                           tablat	equ	0xFF5
 10726                           prodh	equ	0xFF4
 10727                           prodl	equ	0xFF3
 10728                           intcon	equ	0xFF2
 10729                           indf0	equ	0xFEF
 10730                           postinc0	equ	0xFEE
 10731                           fsr0h	equ	0xFEA
 10732                           fsr0l	equ	0xFE9
 10733                           wreg	equ	0xFE8
 10734                           indf1	equ	0xFE7
 10735                           postinc1	equ	0xFE6
 10736                           postdec1	equ	0xFE5
 10737                           fsr1h	equ	0xFE2
 10738                           fsr1l	equ	0xFE1
 10739                           indf2	equ	0xFDF
 10740                           postinc2	equ	0xFDE
 10741                           postdec2	equ	0xFDD
 10742                           plusw2	equ	0xFDB
 10743                           fsr2h	equ	0xFDA
 10744                           fsr2l	equ	0xFD9
 10745                           status	equ	0xFD8
 10746                           
 10747 ;; *************** function _receiveSendMultiEventCANAL *****************
 10748 ;; Defined at:
 10749 ;;		line 1928 in file "main.c"
 10750 ;; Parameters:    Size  Location     Type
 10751 ;;		None
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  crc             1   33[BANK0 ] unsigned char 
 10754 ;;  data            8   18[BANK0 ] unsigned char [8]
 10755 ;;  id              4   28[BANK0 ] unsigned long 
 10756 ;;  pos             1   34[BANK0 ] unsigned char 
 10757 ;;  dlc             1   32[BANK0 ] unsigned char 
 10758 ;;  i               1   27[BANK0 ] unsigned char 
 10759 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10760 ;; Return value:  Size  Location     Type
 10761 ;;                  1    wreg      enum E15660
 10762 ;; Registers used:
 10763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10764 ;; Tracked objects:
 10765 ;;		On entry : F/1
 10766 ;;		On exit  : 0/0
 10767 ;;		Unchanged: 0/0
 10768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10769 ;;      Params:         0       0       0       0       0       0       0
 10770 ;;      Locals:         0      17       0       0       0       0       0
 10771 ;;      Temps:          0       0       0       0       0       0       0
 10772 ;;      Totals:         0      17       0       0       0       0       0
 10773 ;;Total ram usage:       17 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; Hardware stack levels required when called:    6
 10776 ;; This function calls:
 10777 ;;		_WriteUSART
 10778 ;;		_sendEscapedUartData
 10779 ;;		_crc8
 10780 ;;		_getCANFrame
 10781 ;; This function is called by:
 10782 ;;		_doModeVscp
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           	psect	text18
 10787  0039CC                     __ptext18:
 10788                           	opt stack 0
 10789  0039CC                     _receiveSendMultiEventCANAL:
 10790                           	opt stack 22
 10791                           
 10792                           ; BSR set to: 1
 10793                           ;main.c: 1929: uint8_t i;
 10794                           ;main.c: 1930: uint8_t pos=0;
 10795                           
 10796                           ;incstack = 0
 10797                           ;incstack = 0
 10798  0039CC  0100               	movlb	0	; () banked
 10799  0039CE  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10800                           
 10801                           ;main.c: 1931: uint8_t msgcount=0;
 10802  0039D0  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;main.c: 1932: uint32_t id;
 10806                           ;main.c: 1933: uint8_t dlc;
 10807                           ;main.c: 1934: uint8_t data[8];
 10808                           ;main.c: 1936: if ( getCANFrame( &id, &dlc, &data ) ) {
 10809  0039D2  0E80               	movlw	low receiveSendMultiEventCANAL@dlc
 10810  0039D4  D8B6               	call	PL92	;call to abstracted procedure
 10811  0039D6  ECF1  F011         	call	_getCANFrame
 10812  0039DA  0900               	iorlw	0
 10813  0039DC  E101 D0A8          	bz	l1003
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;main.c: 1938: uint8_t crc = 0;
 10817  0039E0  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;main.c: 1941: cntRxFrames++;
 10821  0039E2  0101               	movlb	1	; () banked
 10822  0039E4  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10823  0039E6  0E00               	movlw	0
 10824  0039E8  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10825  0039EA  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10826  0039EC  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10827                           
 10828                           ;main.c: 1942: cntRxBytes += dlc;
 10829  0039EE  0100               	movlb	0	; () banked
 10830  0039F0  5180               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10831  0039F2  0101               	movlb	1	; () banked
 10832  0039F4  2708               	addwf	_cntRxBytes& (0+255),f,b
 10833  0039F6  0E00               	movlw	0
 10834  0039F8  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10835  0039FA  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10836  0039FC  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10837  0039FE                     l975:
 10838                           
 10839                           ; BSR set to: 1
 10840  0039FE  A2AC               	btfss	4012,1,c	;volatile
 10841  003A00  D7FE               	goto	l975
 10842                           
 10843                           ; BSR set to: 1
 10844                           ;main.c: 1946: WriteUSART(0x10);
 10845  003A02  0E10               	movlw	16
 10846  003A04  ECF3  F00A         	call	_WriteUSART
 10847  003A08                     l978:
 10848  003A08  A2AC               	btfss	4012,1,c	;volatile
 10849  003A0A  D7FE               	goto	l978
 10850                           
 10851                           ;main.c: 1948: WriteUSART(0x02);
 10852  003A0C  0E02               	movlw	2
 10853  003A0E  ECF3  F00A         	call	_WriteUSART
 10854  003A12                     l981:
 10855  003A12  A2AC               	btfss	4012,1,c	;volatile
 10856  003A14  D7FE               	goto	l981
 10857                           
 10858                           ;main.c: 1952: WriteUSART(6);
 10859  003A16  0E06               	movlw	6
 10860  003A18  ECF3  F00A         	call	_WriteUSART
 10861                           
 10862                           ;main.c: 1953: crc8(&crc, 6);
 10863  003A1C  0100               	movlb	0	; () banked
 10864  003A1E  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10865  003A20  6F68               	movwf	(?_crc8+1)& (0+255),b
 10866  003A22  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10867  003A24  6F67               	movwf	?_crc8& (0+255),b
 10868  003A26  0E06               	movlw	6
 10869  003A28  6F69               	movwf	(?_crc8+2)& (0+255),b
 10870  003A2A  ECD7  F00B         	call	_crc8	;wreg free
 10871  003A2E                     l984:
 10872  003A2E  A2AC               	btfss	4012,1,c	;volatile
 10873  003A30  D7FE               	goto	l984
 10874                           
 10875                           ;main.c: 1957: WriteUSART(0);
 10876  003A32  0E00               	movlw	0
 10877  003A34  ECF3  F00A         	call	_WriteUSART
 10878                           
 10879                           ;main.c: 1958: crc8(&crc, 0);
 10880  003A38  0100               	movlb	0	; () banked
 10881  003A3A  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10882  003A3C  6F68               	movwf	(?_crc8+1)& (0+255),b
 10883  003A3E  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10884  003A40  6F67               	movwf	?_crc8& (0+255),b
 10885  003A42  0E00               	movlw	0
 10886  003A44  6B69               	clrf	(?_crc8+2)& (0+255),b
 10887  003A46  ECD7  F00B         	call	_crc8	;wreg free
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;main.c: 1961: sendEscapedUartData(sequencyno, &crc);
 10891  003A4A  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10892  003A4C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10893  003A4E  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10894  003A50  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10895  003A52  5038               	movf	_sequencyno,w,c
 10896  003A54  EC2E  F00E         	call	_sendEscapedUartData
 10897                           
 10898                           ; BSR set to: 0
 10899                           ;main.c: 1962: sequencyno++;
 10900  003A58  2A38               	incf	_sequencyno,f,c
 10901  003A5A                     l15808:
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;main.c: 1972: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10905  003A5A  0E77               	movlw	low _wrkbuf
 10906  003A5C  0100               	movlb	0	; () banked
 10907  003A5E  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10908  003A60  6ED9               	movwf	fsr2l,c
 10909  003A62  6ADA               	clrf	fsr2h,c
 10910  003A64  0E01               	movlw	high _wrkbuf
 10911  003A66  22DA               	addwfc	fsr2h,f,c
 10912  003A68  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10913                           
 10914                           ; BSR set to: 0
 10915                           ;main.c: 1973: pos++;
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;main.c: 1974: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10919  003A6C  D862               	call	PL22	;call to abstracted procedure
 10920  003A6E  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;main.c: 1975: pos++;
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;main.c: 1976: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10927  003A72  D85F               	call	PL22	;call to abstracted procedure
 10928  003A74  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;main.c: 1977: pos++;
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;main.c: 1978: wrkbuf[ pos ] = id & 0xff;
 10935  003A78  D85C               	call	PL22	;call to abstracted procedure
 10936  003A7A  C07C  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10937                           
 10938                           ; BSR set to: 0
 10939                           ;main.c: 1979: pos++;
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;main.c: 1982: wrkbuf[ pos ] = dlc;
 10943  003A7E  D859               	call	PL22	;call to abstracted procedure
 10944  003A80  C080  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;main.c: 1983: pos++;
 10948  003A84  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10949                           
 10950                           ; BSR set to: 0
 10951                           ;main.c: 1986: for (i = 0; i < dlc; i++) {
 10952  003A86  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10953  003A88  D00F               	goto	l15836
 10954  003A8A                     l15830:
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;main.c: 1987: wrkbuf[ pos ] = data[ i ];
 10958  003A8A  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10959  003A8C  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10960  003A8E  6ED9               	movwf	fsr2l,c
 10961  003A90  6ADA               	clrf	fsr2h,c
 10962  003A92  0E77               	movlw	low _wrkbuf
 10963  003A94  0100               	movlb	0	; () banked
 10964  003A96  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10965  003A98  6EE1               	movwf	fsr1l,c
 10966  003A9A  6AE2               	clrf	fsr1h,c
 10967  003A9C  0E01               	movlw	high _wrkbuf
 10968  003A9E  22E2               	addwfc	fsr1h,f,c
 10969  003AA0  CFDF FFE7          	movff	indf2,indf1
 10970                           
 10971                           ; BSR set to: 1
 10972                           ;main.c: 1988: pos++;
 10973  003AA4  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10974                           
 10975                           ; BSR set to: 0
 10976  003AA6  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10977  003AA8                     l15836:
 10978                           
 10979                           ; BSR set to: 0
 10980  003AA8  5180               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10981  003AAA  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10982  003AAC  E3EE               	bnc	l15830
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;main.c: 1989: }
 10986                           ;main.c: 1991: msgcount++;
 10987  003AAE  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10988                           
 10989                           ; BSR set to: 0
 10990                           ;main.c: 1993: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10991                           ;main.c: 1994: ( msgcount < 5 ) &&
 10992                           ;main.c: 1995: getCANFrame( &id, &dlc, &data ) );
 10993  003AB0  0101               	movlb	1	; () banked
 10994  003AB2  51EC               	movf	(_caps+1)& (0+255),w,b
 10995  003AB4  0100               	movlb	0	; () banked
 10996  003AB6  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10997  003AB8  D009               	goto	l15846
 10998                           
 10999                           ; BSR set to: 0
 11000  003ABA  0E05               	movlw	5
 11001  003ABC  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11002  003ABE  D006               	goto	l15846
 11003                           
 11004                           ; BSR set to: 0
 11005  003AC0  0E80               	movlw	low receiveSendMultiEventCANAL@dlc
 11006  003AC2  D83F               	call	PL92	;call to abstracted procedure
 11007  003AC4  ECF1  F011         	call	_getCANFrame
 11008  003AC8  0900               	iorlw	0
 11009  003ACA  E1C7               	bnz	l15808
 11010  003ACC                     l15846:
 11011                           
 11012                           ; BSR set to: 0
 11013                           ;main.c: 2000: sendEscapedUartData(0, &crc);
 11014  003ACC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11015  003ACE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11016  003AD0  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 11017  003AD2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11018  003AD4  0E00               	movlw	0
 11019  003AD6  EC2E  F00E         	call	_sendEscapedUartData
 11020                           
 11021                           ;main.c: 2001: sendEscapedUartData(pos, &crc);
 11022  003ADA  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11023  003ADC  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11024  003ADE  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 11025  003AE0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11026  003AE2  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11027  003AE4  EC2E  F00E         	call	_sendEscapedUartData
 11028                           
 11029                           ; BSR set to: 0
 11030                           ;main.c: 2004: for (i = 0; i < pos; i++) {
 11031  003AE8  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 11032  003AEA  D010               	goto	l15854
 11033  003AEC                     l15850:
 11034                           
 11035                           ; BSR set to: 0
 11036                           ;main.c: 2005: sendEscapedUartData( wrkbuf[ i ], &crc);
 11037  003AEC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11038  003AEE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11039  003AF0  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 11040  003AF2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 11041  003AF4  0E77               	movlw	low _wrkbuf
 11042  003AF6  0100               	movlb	0	; () banked
 11043  003AF8  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11044  003AFA  6ED9               	movwf	fsr2l,c
 11045  003AFC  6ADA               	clrf	fsr2h,c
 11046  003AFE  0101               	movlb	1	; () banked
 11047  003B00  0E01               	movlw	high _wrkbuf
 11048  003B02  22DA               	addwfc	fsr2h,f,c
 11049  003B04  50DF               	movf	indf2,w,c
 11050  003B06  EC2E  F00E         	call	_sendEscapedUartData
 11051                           
 11052                           ; BSR set to: 0
 11053  003B0A  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11054  003B0C                     l15854:
 11055                           
 11056                           ; BSR set to: 0
 11057  003B0C  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11058  003B0E  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11059  003B10  E3ED               	bnc	l15850
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;main.c: 2006: }
 11063                           ;main.c: 2009: sendEscapedUartData(crc, (0));
 11064  003B12  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11065  003B14  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11066  003B16  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11067  003B18  EC2E  F00E         	call	_sendEscapedUartData
 11068  003B1C                     l997:
 11069  003B1C  A2AC               	btfss	4012,1,c	;volatile
 11070  003B1E  D7FE               	goto	l997
 11071                           
 11072                           ;main.c: 2013: WriteUSART(0x10);
 11073  003B20  0E10               	movlw	16
 11074  003B22  ECF3  F00A         	call	_WriteUSART
 11075  003B26                     l1000:
 11076  003B26  A2AC               	btfss	4012,1,c	;volatile
 11077  003B28  D7FE               	goto	l1000
 11078                           
 11079                           ;main.c: 2015: WriteUSART(0x03);
 11080  003B2A  0E03               	movlw	3
 11081  003B2C  ECF3  F00A         	call	_WriteUSART
 11082  003B30                     l1003:
 11083  003B30  0012               	return	
 11084  003B32                     __end_of_receiveSendMultiEventCANAL:
 11085                           	opt stack 0
 11086  003B32                     PL22:
 11087                           	opt stack 22
 11088  003B32  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11089  003B34  0E77               	movlw	low _wrkbuf
 11090  003B36  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11091  003B38  6ED9               	movwf	fsr2l,c
 11092  003B3A  6ADA               	clrf	fsr2h,c
 11093  003B3C  0E01               	movlw	high _wrkbuf
 11094  003B3E  22DA               	addwfc	fsr2h,f,c
 11095  003B40  0012               	return	
 11096  003B42                     __end_ofPL22:
 11097                           	opt stack 0
 11098  003B42                     PL92:
 11099                           	opt stack 22
 11100  003B42  6F6E               	movwf	?_getCANFrame& (0+255),b
 11101  003B44  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11102  003B46  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11103  003B48  0E72               	movlw	low receiveSendMultiEventCANAL@data
 11104  003B4A  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11105  003B4C  0E7C               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11106  003B4E  0012               	return	
 11107  003B50                     __end_ofPL92:
 11108                           	opt stack 0
 11109                           tblptru	equ	0xFF8
 11110                           tblptrh	equ	0xFF7
 11111                           tblptrl	equ	0xFF6
 11112                           tablat	equ	0xFF5
 11113                           prodh	equ	0xFF4
 11114                           prodl	equ	0xFF3
 11115                           intcon	equ	0xFF2
 11116                           indf0	equ	0xFEF
 11117                           postinc0	equ	0xFEE
 11118                           fsr0h	equ	0xFEA
 11119                           fsr0l	equ	0xFE9
 11120                           wreg	equ	0xFE8
 11121                           indf1	equ	0xFE7
 11122                           postinc1	equ	0xFE6
 11123                           postdec1	equ	0xFE5
 11124                           fsr1h	equ	0xFE2
 11125                           fsr1l	equ	0xFE1
 11126                           indf2	equ	0xFDF
 11127                           postinc2	equ	0xFDE
 11128                           postdec2	equ	0xFDD
 11129                           plusw2	equ	0xFDB
 11130                           fsr2h	equ	0xFDA
 11131                           fsr2l	equ	0xFD9
 11132                           status	equ	0xFD8
 11133                           
 11134 ;; *************** function _sendEscapedUartData *****************
 11135 ;; Defined at:
 11136 ;;		line 1581 in file "main.c"
 11137 ;; Parameters:    Size  Location     Type
 11138 ;;  c               1    wreg     unsigned char 
 11139 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11140 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11141 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11142 ;;		 -> NULL(0), 
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;  c               1   14[BANK0 ] unsigned char 
 11145 ;; Return value:  Size  Location     Type
 11146 ;;		None               void
 11147 ;; Registers used:
 11148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11149 ;; Tracked objects:
 11150 ;;		On entry : E/1
 11151 ;;		On exit  : F/0
 11152 ;;		Unchanged: 0/0
 11153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11154 ;;      Params:         0       2       0       0       0       0       0
 11155 ;;      Locals:         0       1       0       0       0       0       0
 11156 ;;      Temps:          0       0       0       0       0       0       0
 11157 ;;      Totals:         0       3       0       0       0       0       0
 11158 ;;Total ram usage:        3 bytes
 11159 ;; Hardware stack levels used:    1
 11160 ;; Hardware stack levels required when called:    5
 11161 ;; This function calls:
 11162 ;;		_WriteUSART
 11163 ;;		_crc8
 11164 ;; This function is called by:
 11165 ;;		_sendVSCPDriverErrorFrame
 11166 ;;		_sendVSCPDriverAck
 11167 ;;		_sendVSCPDriverNack
 11168 ;;		_sendVSCPDriverCommandReply
 11169 ;;		_receiveSendEventCANAL
 11170 ;;		_receiveSendMultiEventCANAL
 11171 ;;		_sendVSCPModeCapabilities
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           	psect	text19
 11176  001C5C                     __ptext19:
 11177                           	opt stack 0
 11178  001C5C                     _sendEscapedUartData:
 11179                           	opt stack 22
 11180                           
 11181                           ;incstack = 0
 11182                           ;incstack = 0
 11183                           ;sendEscapedUartData@c stored from wreg
 11184  001C5C  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11185                           
 11186                           ;main.c: 1582: if (0x10 == c) {
 11187  001C60  0100               	movlb	0	; () banked
 11188  001C62  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11189  001C64  0A10               	xorlw	16
 11190  001C66  E117               	bnz	l794
 11191  001C68                     l786:
 11192  001C68  A2AC               	btfss	4012,1,c	;volatile
 11193  001C6A  D7FE               	goto	l786
 11194                           
 11195                           ;main.c: 1585: WriteUSART(0x10);
 11196  001C6C  0E10               	movlw	16
 11197  001C6E  ECF3  F00A         	call	_WriteUSART
 11198  001C72                     l789:
 11199  001C72  A2AC               	btfss	4012,1,c	;volatile
 11200  001C74  D7FE               	goto	l789
 11201                           
 11202                           ;main.c: 1589: WriteUSART(0x10);
 11203  001C76  0E10               	movlw	16
 11204  001C78  ECF3  F00A         	call	_WriteUSART
 11205                           
 11206                           ;main.c: 1590: if ((0) != pcrc) crc8(pcrc, 0x10);
 11207  001C7C  0100               	movlb	0	; () banked
 11208  001C7E  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11209  001C80  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11210  001C82  E01B               	bz	l798
 11211                           
 11212                           ; BSR set to: 0
 11213  001C84  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11214  001C88  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11215  001C8C  0E10               	movlw	16
 11216  001C8E  6F69               	movwf	(?_crc8+2)& (0+255),b
 11217  001C90  ECD7  F00B         	call	_crc8	;wreg free
 11218  001C94  D012               	goto	l798
 11219  001C96                     l794:
 11220  001C96  A2AC               	btfss	4012,1,c	;volatile
 11221  001C98  D7FE               	goto	l794
 11222                           
 11223                           ;main.c: 1596: WriteUSART(c);
 11224  001C9A  0100               	movlb	0	; () banked
 11225  001C9C  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11226  001C9E  ECF3  F00A         	call	_WriteUSART
 11227                           
 11228                           ;main.c: 1597: if ((0) != pcrc) crc8(pcrc, c);
 11229  001CA2  0100               	movlb	0	; () banked
 11230  001CA4  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11231  001CA6  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11232  001CA8  E008               	bz	l798
 11233                           
 11234                           ; BSR set to: 0
 11235  001CAA  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11236  001CAE  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11237  001CB2  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11238  001CB6  ECD7  F00B         	call	_crc8	;wreg free
 11239  001CBA                     l798:
 11240                           
 11241                           ; BSR set to: 0
 11242  001CBA  0012               	return	
 11243  001CBC                     __end_of_sendEscapedUartData:
 11244                           	opt stack 0
 11245                           tblptru	equ	0xFF8
 11246                           tblptrh	equ	0xFF7
 11247                           tblptrl	equ	0xFF6
 11248                           tablat	equ	0xFF5
 11249                           prodh	equ	0xFF4
 11250                           prodl	equ	0xFF3
 11251                           intcon	equ	0xFF2
 11252                           indf0	equ	0xFEF
 11253                           postinc0	equ	0xFEE
 11254                           fsr0h	equ	0xFEA
 11255                           fsr0l	equ	0xFE9
 11256                           wreg	equ	0xFE8
 11257                           indf1	equ	0xFE7
 11258                           postinc1	equ	0xFE6
 11259                           postdec1	equ	0xFE5
 11260                           fsr1h	equ	0xFE2
 11261                           fsr1l	equ	0xFE1
 11262                           indf2	equ	0xFDF
 11263                           postinc2	equ	0xFDE
 11264                           postdec2	equ	0xFDD
 11265                           plusw2	equ	0xFDB
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270 ;; *************** function _crc8 *****************
 11271 ;; Defined at:
 11272 ;;		line 47 in file "crc8.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11275 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11276 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11277 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11278 ;;  m               1    9[BANK0 ] unsigned char 
 11279 ;; Auto vars:     Size  Location     Type
 11280 ;;		None
 11281 ;; Return value:  Size  Location     Type
 11282 ;;		None               void
 11283 ;; Registers used:
 11284 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11285 ;; Tracked objects:
 11286 ;;		On entry : F/0
 11287 ;;		On exit  : F/0
 11288 ;;		Unchanged: 0/0
 11289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11290 ;;      Params:         0       3       0       0       0       0       0
 11291 ;;      Locals:         0       0       0       0       0       0       0
 11292 ;;      Temps:          0       2       0       0       0       0       0
 11293 ;;      Totals:         0       5       0       0       0       0       0
 11294 ;;Total ram usage:        5 bytes
 11295 ;; Hardware stack levels used:    1
 11296 ;; Hardware stack levels required when called:    4
 11297 ;; This function calls:
 11298 ;;		_init_crc8
 11299 ;; This function is called by:
 11300 ;;		_sendEscapedUartData
 11301 ;;		_sendVSCPDriverErrorFrame
 11302 ;;		_sendVSCPDriverAck
 11303 ;;		_sendVSCPDriverNack
 11304 ;;		_sendVSCPDriverCommandReply
 11305 ;;		_receiveSendEventCANAL
 11306 ;;		_receiveSendMultiEventCANAL
 11307 ;;		_sendVSCPModeCapabilities
 11308 ;;		_calcCRC
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312                           	psect	text20
 11313  0017AE                     __ptext20:
 11314                           	opt stack 0
 11315  0017AE                     _crc8:
 11316                           	opt stack 23
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;crc8.c: 48: if ( !made_table ) {
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;incstack = 0
 11323                           ;incstack = 0
 11324  0017AE  0101               	movlb	1	; () banked
 11325  0017B0  5125               	movf	(_made_table+1)& (0+255),w,b
 11326  0017B2  1124               	iorwf	_made_table& (0+255),w,b
 11327  0017B4  B4D8               	btfsc	status,2,c
 11328                           
 11329                           ; BSR set to: 1
 11330                           ;crc8.c: 49: init_crc8();
 11331  0017B6  EC24  F00F         	call	_init_crc8	;wreg free
 11332                           
 11333                           ; BSR set to: 1
 11334                           ;crc8.c: 50: }
 11335                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11336  0017BA  C067  FFD9         	movff	crc8@crc,fsr2l
 11337  0017BE  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11338  0017C2  50DF               	movf	indf2,w,c
 11339  0017C4  0100               	movlb	0	; () banked
 11340  0017C6  1969               	xorwf	crc8@m& (0+255),w,b
 11341  0017C8  6F6A               	movwf	??_crc8& (0+255),b
 11342  0017CA  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11343  0017CC  0E00               	movlw	low _crc8_table
 11344  0017CE  256A               	addwf	??_crc8& (0+255),w,b
 11345  0017D0  6ED9               	movwf	fsr2l,c
 11346  0017D2  0E03               	movlw	high _crc8_table
 11347  0017D4  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11348  0017D6  6EDA               	movwf	fsr2h,c
 11349  0017D8  C067  FFE1         	movff	crc8@crc,fsr1l
 11350  0017DC  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11351  0017E0  CFDF FFE7          	movff	indf2,indf1
 11352                           
 11353                           ; BSR set to: 0
 11354  0017E4  0012               	return	
 11355  0017E6                     __end_of_crc8:
 11356                           	opt stack 0
 11357                           tblptru	equ	0xFF8
 11358                           tblptrh	equ	0xFF7
 11359                           tblptrl	equ	0xFF6
 11360                           tablat	equ	0xFF5
 11361                           prodh	equ	0xFF4
 11362                           prodl	equ	0xFF3
 11363                           intcon	equ	0xFF2
 11364                           indf0	equ	0xFEF
 11365                           postinc0	equ	0xFEE
 11366                           fsr0h	equ	0xFEA
 11367                           fsr0l	equ	0xFE9
 11368                           wreg	equ	0xFE8
 11369                           indf1	equ	0xFE7
 11370                           postinc1	equ	0xFE6
 11371                           postdec1	equ	0xFE5
 11372                           fsr1h	equ	0xFE2
 11373                           fsr1l	equ	0xFE1
 11374                           indf2	equ	0xFDF
 11375                           postinc2	equ	0xFDE
 11376                           postdec2	equ	0xFDD
 11377                           plusw2	equ	0xFDB
 11378                           fsr2h	equ	0xFDA
 11379                           fsr2l	equ	0xFD9
 11380                           status	equ	0xFD8
 11381                           
 11382 ;; *************** function _init_crc8 *****************
 11383 ;; Defined at:
 11384 ;;		line 25 in file "crc8.c"
 11385 ;; Parameters:    Size  Location     Type
 11386 ;;		None
 11387 ;; Auto vars:     Size  Location     Type
 11388 ;;  i               2    5[BANK0 ] int 
 11389 ;;  j               2    2[BANK0 ] int 
 11390 ;;  crc             1    4[BANK0 ] unsigned char 
 11391 ;; Return value:  Size  Location     Type
 11392 ;;		None               void
 11393 ;; Registers used:
 11394 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11395 ;; Tracked objects:
 11396 ;;		On entry : E/0
 11397 ;;		On exit  : F/1
 11398 ;;		Unchanged: 0/0
 11399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11400 ;;      Params:         0       0       0       0       0       0       0
 11401 ;;      Locals:         0       7       0       0       0       0       0
 11402 ;;      Temps:          0       0       0       0       0       0       0
 11403 ;;      Totals:         0       7       0       0       0       0       0
 11404 ;;Total ram usage:        7 bytes
 11405 ;; Hardware stack levels used:    1
 11406 ;; Hardware stack levels required when called:    3
 11407 ;; This function calls:
 11408 ;;		Nothing
 11409 ;; This function is called by:
 11410 ;;		_main
 11411 ;;		_crc8
 11412 ;; This function uses a non-reentrant model
 11413 ;;
 11414                           
 11415                           	psect	text21
 11416  001E48                     __ptext21:
 11417                           	opt stack 0
 11418  001E48                     _init_crc8:
 11419                           	opt stack 23
 11420                           
 11421                           ;crc8.c: 26: int i,j;
 11422                           ;crc8.c: 27: unsigned char crc;
 11423                           ;crc8.c: 29: if (!made_table) {
 11424                           
 11425                           ; BSR set to: 0
 11426                           ;incstack = 0
 11427                           ;incstack = 0
 11428  001E48  0101               	movlb	1	; () banked
 11429  001E4A  5125               	movf	(_made_table+1)& (0+255),w,b
 11430  001E4C  1124               	iorwf	_made_table& (0+255),w,b
 11431  001E4E  E133               	bnz	l1583
 11432                           
 11433                           ; BSR set to: 1
 11434                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11435  001E50  0100               	movlb	0	; () banked
 11436  001E52  6B65               	clrf	init_crc8@i& (0+255),b
 11437  001E54  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11438  001E56                     l1575:
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;crc8.c: 31: crc = i;
 11442  001E56  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11443                           
 11444                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11445  001E5A  6B62               	clrf	init_crc8@j& (0+255),b
 11446  001E5C  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11447  001E5E                     l1577:
 11448                           
 11449                           ; BSR set to: 0
 11450                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11451  001E5E  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11452  001E60  D003               	goto	l13558
 11453                           
 11454                           ; BSR set to: 0
 11455  001E62  6B60               	clrf	_init_crc8$2036& (0+255),b
 11456  001E64  6B61               	clrf	(_init_crc8$2036+1)& (0+255),b
 11457  001E66  D003               	goto	l13560
 11458  001E68                     l13558:
 11459                           
 11460                           ; BSR set to: 0
 11461  001E68  6B61               	clrf	(_init_crc8$2036+1)& (0+255),b
 11462  001E6A  0E07               	movlw	7
 11463  001E6C  6F60               	movwf	_init_crc8$2036& (0+255),b
 11464  001E6E                     l13560:
 11465                           
 11466                           ; BSR set to: 0
 11467  001E6E  5164               	movf	init_crc8@crc& (0+255),w,b
 11468  001E70  2564               	addwf	init_crc8@crc& (0+255),w,b
 11469  001E72  1960               	xorwf	_init_crc8$2036& (0+255),w,b
 11470  001E74  6F64               	movwf	init_crc8@crc& (0+255),b
 11471                           
 11472                           ; BSR set to: 0
 11473  001E76  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11474  001E78  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11475                           
 11476                           ; BSR set to: 0
 11477  001E7A  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11478  001E7C  0A80               	xorlw	128
 11479  001E7E  0F80               	addlw	-128
 11480  001E80  0E08               	movlw	8
 11481  001E82  B4D8               	btfsc	status,2,c
 11482  001E84  5D62               	subwf	init_crc8@j& (0+255),w,b
 11483  001E86  E3EB               	bnc	l1577
 11484                           
 11485                           ; BSR set to: 0
 11486                           ;crc8.c: 34: }
 11487                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11488  001E88  0E00               	movlw	low _crc8_table
 11489  001E8A  0100               	movlb	0	; () banked
 11490  001E8C  2565               	addwf	init_crc8@i& (0+255),w,b
 11491  001E8E  6ED9               	movwf	fsr2l,c
 11492  001E90  0E03               	movlw	high _crc8_table
 11493  001E92  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11494  001E94  6EDA               	movwf	fsr2h,c
 11495  001E96  C064  FFDF         	movff	init_crc8@crc,indf2
 11496                           
 11497                           ; BSR set to: 0
 11498  001E9A  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11499  001E9C  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11500                           
 11501                           ; BSR set to: 0
 11502  001E9E  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11503  001EA0  0A80               	xorlw	128
 11504  001EA2  0F7F               	addlw	-129
 11505  001EA4  0E00               	movlw	0
 11506  001EA6  B4D8               	btfsc	status,2,c
 11507  001EA8  5D65               	subwf	init_crc8@i& (0+255),w,b
 11508  001EAA  E3D5               	bnc	l1575
 11509                           
 11510                           ; BSR set to: 0
 11511                           ;crc8.c: 37: }
 11512                           ;crc8.c: 38: made_table=1;
 11513  001EAC  0E00               	movlw	0
 11514  001EAE  0101               	movlb	1	; () banked
 11515  001EB0  6F25               	movwf	(_made_table+1)& (0+255),b
 11516  001EB2  0E01               	movlw	1
 11517  001EB4  6F24               	movwf	_made_table& (0+255),b
 11518  001EB6                     l1583:
 11519                           
 11520                           ; BSR set to: 1
 11521  001EB6  0012               	return	
 11522  001EB8                     __end_of_init_crc8:
 11523                           	opt stack 0
 11524                           tblptru	equ	0xFF8
 11525                           tblptrh	equ	0xFF7
 11526                           tblptrl	equ	0xFF6
 11527                           tablat	equ	0xFF5
 11528                           prodh	equ	0xFF4
 11529                           prodl	equ	0xFF3
 11530                           intcon	equ	0xFF2
 11531                           indf0	equ	0xFEF
 11532                           postinc0	equ	0xFEE
 11533                           fsr0h	equ	0xFEA
 11534                           fsr0l	equ	0xFE9
 11535                           wreg	equ	0xFE8
 11536                           indf1	equ	0xFE7
 11537                           postinc1	equ	0xFE6
 11538                           postdec1	equ	0xFE5
 11539                           fsr1h	equ	0xFE2
 11540                           fsr1l	equ	0xFE1
 11541                           indf2	equ	0xFDF
 11542                           postinc2	equ	0xFDE
 11543                           postdec2	equ	0xFDD
 11544                           plusw2	equ	0xFDB
 11545                           fsr2h	equ	0xFDA
 11546                           fsr2l	equ	0xFD9
 11547                           status	equ	0xFD8
 11548                           
 11549 ;; *************** function _doModeVerbose *****************
 11550 ;; Defined at:
 11551 ;;		line 517 in file "main.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;		None
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11556 ;;		 -> STR_118(2), STR_116(2), STR_114(2), STR_112(2), 
 11557 ;;		 -> STR_109(2), STR_105(2), STR_103(2), STR_101(2), 
 11558 ;;		 -> STR_99(2), STR_96(2), STR_85(2), STR_83(2), 
 11559 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 11560 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11561 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11562 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11563 ;;		 -> STR_118(2), STR_116(2), STR_114(2), STR_112(2), 
 11564 ;;		 -> STR_109(2), STR_105(2), STR_103(2), STR_101(2), 
 11565 ;;		 -> STR_99(2), STR_96(2), STR_85(2), STR_83(2), 
 11566 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 11567 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11568 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11569 ;;  id              4   38[BANK2 ] unsigned long 
 11570 ;;  p               2   63[BANK2 ] PTR unsigned char 
 11571 ;;		 -> NULL(0), cmdbuf(80), 
 11572 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11573 ;;  maskno          1   43[BANK2 ] unsigned char 
 11574 ;;  mask_nodeid     1   18[BANK2 ] unsigned char 
 11575 ;;  mask_type       1   17[BANK2 ] unsigned char 
 11576 ;;  mask_priorit    1   16[BANK2 ] unsigned char 
 11577 ;;  id              4    0[BANK2 ] unsigned long 
 11578 ;;  p               2   61[BANK2 ] PTR unsigned char 
 11579 ;;		 -> NULL(0), cmdbuf(80), 
 11580 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11581 ;;  filterno        1   42[BANK2 ] unsigned char 
 11582 ;;  filter_nodei    1   15[BANK2 ] unsigned char 
 11583 ;;  filter_type     1   14[BANK2 ] unsigned char 
 11584 ;;  filter_prior    1   13[BANK2 ] unsigned char 
 11585 ;;  nodeid          1   51[BANK2 ] unsigned char 
 11586 ;;  p               2   56[BANK2 ] PTR unsigned char 
 11587 ;;		 -> NULL(0), cmdbuf(80), 
 11588 ;;  value           1   45[BANK2 ] unsigned char 
 11589 ;;  reg             1   37[BANK2 ] unsigned char 
 11590 ;;  page            1   36[BANK2 ] unsigned char 
 11591 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11592 ;;  p               2   54[BANK2 ] PTR unsigned char 
 11593 ;;		 -> NULL(0), cmdbuf(80), 
 11594 ;;  value           1   53[BANK2 ] unsigned char 
 11595 ;;  i               1   52[BANK2 ] unsigned char 
 11596 ;;  reg             1   50[BANK2 ] unsigned char 
 11597 ;;  page            1   49[BANK2 ] unsigned char 
 11598 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11599 ;;  count           1   46[BANK2 ] unsigned char 
 11600 ;;  rv              1   35[BANK2 ] enum E15660
 11601 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11602 ;;		 -> NULL(0), cmdbuf(80), 
 11603 ;;  ifmode          1   58[BANK2 ] enum E16371
 11604 ;;  c               1   48[BANK2 ] unsigned char 
 11605 ;;  i               1   44[BANK2 ] unsigned char 
 11606 ;; Return value:  Size  Location     Type
 11607 ;;		None               void
 11608 ;; Registers used:
 11609 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11610 ;; Tracked objects:
 11611 ;;		On entry : F/0
 11612 ;;		On exit  : 0/0
 11613 ;;		Unchanged: 0/0
 11614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11615 ;;      Params:         0       0       0       0       0       0       0
 11616 ;;      Locals:         0       0       0      65       0       0       0
 11617 ;;      Temps:          0      20       0       0       0       0       0
 11618 ;;      Totals:         0      20       0      65       0       0       0
 11619 ;;Total ram usage:       85 bytes
 11620 ;; Hardware stack levels used:    1
 11621 ;; Hardware stack levels required when called:   10
 11622 ;; This function calls:
 11623 ;;		_putsUSART
 11624 ;;		_printFirmwareVersion
 11625 ;;		_fifo_read
 11626 ;;		_Busy_eep
 11627 ;;		_Write_b_eep
 11628 ;;		_receivePrintEventVerbose
 11629 ;;		_stristr
 11630 ;;		_ECANSetOperationMode
 11631 ;;		_strtok
 11632 ;;		_atoi
 11633 ;;		_memset
 11634 ;;		_sendVSCPFrame
 11635 ;;		_printStatistics
 11636 ;;		_printErrors
 11637 ;;		_printHelp
 11638 ;;		_findNodes
 11639 ;;		_strcpy
 11640 ;;		_strchr
 11641 ;;		_readRegisterExtended
 11642 ;;		_sprintf
 11643 ;;		_WriteUSART
 11644 ;;		_printBinary
 11645 ;;		_writeRegisterExtended
 11646 ;;		_printNodeFirmwareVersion
 11647 ;;		_printGUID
 11648 ;;		_printMDF
 11649 ;;		_setFilter
 11650 ;;		__CANIDToRegs
 11651 ;; This function is called by:
 11652 ;;		_main
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           	psect	text22
 11657  0057BA                     __ptext22:
 11658                           	opt stack 0
 11659  0057BA                     _doModeVerbose:
 11660                           	opt stack 19
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;main.c: 518: uint8_t c;
 11664                           ;main.c: 519: uint8_t i;
 11665                           ;main.c: 522: if (!bSilent) {
 11666                           
 11667                           ; BSR set to: 1
 11668                           ;incstack = 0
 11669                           ;incstack = 0
 11670  0057BA  6633               	tstfsz	_bSilent,c
 11671  0057BC  D002               	goto	l13670
 11672                           
 11673                           ; BSR set to: 0
 11674                           ;main.c: 523: receivePrintEventVerbose();
 11675  0057BE  ECB4  F023         	call	_receivePrintEventVerbose	;wreg free
 11676  0057C2                     l13670:
 11677                           
 11678                           ;main.c: 524: }
 11679                           ;main.c: 527: (INTCONbits.GIE = 0);
 11680  0057C2  9EF2               	bcf	intcon,7,c	;volatile
 11681                           
 11682                           ;main.c: 529: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11683  0057C4  0E01               	movlw	high _serialInputFifo
 11684  0057C6  0100               	movlb	0	; () banked
 11685  0057C8  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11686  0057CA  0ED7               	movlw	low _serialInputFifo
 11687  0057CC  6F60               	movwf	?_fifo_read& (0+255),b
 11688  0057CE  0E02               	movlw	high doModeVerbose@c
 11689  0057D0  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 11690  0057D2  0EB0               	movlw	low doModeVerbose@c
 11691  0057D4  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11692  0057D6  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 11693  0057D8  0E01               	movlw	1
 11694  0057DA  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 11695  0057DC  ECB6  F015         	call	_fifo_read	;wreg free
 11696  0057E0  0560               	decf	?_fifo_read& (0+255),w,b
 11697  0057E2  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11698  0057E4  E002 EFB0  F035    	bnz	l14314
 11699                           
 11700                           ; BSR set to: 0
 11701                           ;main.c: 532: (INTCONbits.GIE = 1);
 11702  0057EA  8EF2               	bsf	intcon,7,c	;volatile
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;main.c: 535: cmdbuf[ pos++ ] = c;
 11706  0057EC  ECB7  F021         	call	PL24	;call to abstracted procedure
 11707  0057F0  C2B0  FFDF         	movff	doModeVerbose@c,indf2
 11708                           
 11709                           ; BSR set to: 2
 11710  0057F4  2BE7               	incf	_pos& (0+255),f,b
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;main.c: 536: if (pos >= sizeof( cmdbuf ) ) {
 11714  0057F6  0E4F               	movlw	79
 11715  0057F8  65E7               	cpfsgt	_pos& (0+255),b
 11716  0057FA  D001               	goto	l13684
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;main.c: 539: pos = 0;
 11720  0057FC  6BE7               	clrf	_pos& (0+255),b
 11721  0057FE                     l13684:
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;main.c: 540: }
 11725                           ;main.c: 543: if (0x0d == c) {
 11726  0057FE  0102               	movlb	2	; () banked
 11727  005800  51B0               	movf	doModeVerbose@c& (0+255),w,b
 11728  005802  0A0D               	xorlw	13
 11729  005804  E002 EFB0  F035    	bnz	l14314
 11730                           
 11731                           ; BSR set to: 2
 11732                           ;main.c: 545: cmdbuf[ pos ] = 0;
 11733  00580A  ECB7  F021         	call	PL24	;call to abstracted procedure
 11734  00580E  6ADF               	clrf	indf2,c
 11735                           
 11736                           ; BSR set to: 1
 11737                           ;main.c: 548: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11738  005810  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11739  005812  0E27               	movlw	low _cmdbuf
 11740  005814  6F6D               	movwf	?_stristr& (0+255),b
 11741  005816  0E7C               	movlw	high STR_6
 11742  005818  6F70               	movwf	(?_stristr+3)& (0+255),b
 11743  00581A  0EC8               	movlw	low STR_6
 11744  00581C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11745  00581E  EC0D  F010         	call	_stristr	;wreg free
 11746  005822  0E27               	movlw	low _cmdbuf
 11747  005824  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11748  005826  0E01               	movlw	high _cmdbuf
 11749  005828  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11750  00582A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11751  00582C  E102               	bnz	u18115
 11752  00582E  516D               	movf	?_stristr& (0+255),w,b
 11753  005830  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11754  005832                     u18115:
 11755  005832  E112               	bnz	l13696
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;main.c: 549: putsUSART((char *) "Will enter bootloader now...\r\n");
 11759  005834  0E77               	movlw	high STR_7
 11760  005836  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11761  005838  0EB3               	movlw	low STR_7
 11762  00583A  6F61               	movwf	?_putsUSART& (0+255),b
 11763  00583C  ECA8  F00D         	call	_putsUSART	;wreg free
 11764                           
 11765                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x00,0xFF));
 11766  005840  ECD1  F00A         	call	_Busy_eep	;wreg free
 11767  005844  0100               	movlb	0	; () banked
 11768  005846  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 11769  005848  6B60               	clrf	?_Write_b_eep& (0+255),b
 11770  00584A  0EFF               	movlw	255
 11771  00584C  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 11772  00584E  ECA1  F00B         	call	_Write_b_eep	;wreg free
 11773  005852  00FF               	reset		;# 
 11774                           
 11775                           ;main.c: 552: }
 11776  005854  EFA3  F035         	goto	l14310
 11777  005858                     l13696:
 11778                           
 11779                           ; BSR set to: 0
 11780                           ;main.c: 554: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11781  005858  0E01               	movlw	high _cmdbuf
 11782  00585A  0100               	movlb	0	; () banked
 11783  00585C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11784  00585E  0E27               	movlw	low _cmdbuf
 11785  005860  6F6D               	movwf	?_stristr& (0+255),b
 11786  005862  0E7C               	movlw	high STR_8
 11787  005864  6F70               	movwf	(?_stristr+3)& (0+255),b
 11788  005866  0EAF               	movlw	low STR_8
 11789  005868  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11790  00586A  EC0D  F010         	call	_stristr	;wreg free
 11791  00586E  0E27               	movlw	low _cmdbuf
 11792  005870  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11793  005872  0E01               	movlw	high _cmdbuf
 11794  005874  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11795  005876  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11796  005878  E102               	bnz	u18125
 11797  00587A  516D               	movf	?_stristr& (0+255),w,b
 11798  00587C  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11799  00587E                     u18125:
 11800  00587E  E10C               	bnz	l13704
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;main.c: 555: bSilent = 0;
 11804  005880  6A33               	clrf	_bSilent,c
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;main.c: 556: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11808  005882  0E00               	movlw	0
 11809  005884  EC08  F00B         	call	_ECANSetOperationMode
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;main.c: 557: putsUSART((char *) "+OK\r\n");
 11813  005888  0E7C               	movlw	high STR_9
 11814  00588A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11815  00588C  0E72               	movlw	low STR_9
 11816  00588E  6F61               	movwf	?_putsUSART& (0+255),b
 11817  005890  ECA8  F00D         	call	_putsUSART	;wreg free
 11818                           
 11819                           ;main.c: 558: }
 11820  005894  EFA3  F035         	goto	l14310
 11821  005898                     l13704:
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;main.c: 560: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11825  005898  0E01               	movlw	high _cmdbuf
 11826  00589A  0100               	movlb	0	; () banked
 11827  00589C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11828  00589E  0E27               	movlw	low _cmdbuf
 11829  0058A0  6F6D               	movwf	?_stristr& (0+255),b
 11830  0058A2  0E7C               	movlw	high STR_10
 11831  0058A4  6F70               	movwf	(?_stristr+3)& (0+255),b
 11832  0058A6  0E50               	movlw	low STR_10
 11833  0058A8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11834  0058AA  EC0D  F010         	call	_stristr	;wreg free
 11835  0058AE  0E27               	movlw	low _cmdbuf
 11836  0058B0  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11837  0058B2  0E01               	movlw	high _cmdbuf
 11838  0058B4  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11839  0058B6  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11840  0058B8  E102               	bnz	u18135
 11841  0058BA  516D               	movf	?_stristr& (0+255),w,b
 11842  0058BC  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11843  0058BE                     u18135:
 11844  0058BE  E10D               	bnz	l13712
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;main.c: 561: bSilent = 1;
 11848  0058C0  0E01               	movlw	1
 11849  0058C2  6E33               	movwf	_bSilent,c
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;main.c: 562: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11853  0058C4  0E00               	movlw	0
 11854  0058C6  EC08  F00B         	call	_ECANSetOperationMode
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;main.c: 563: putsUSART((char *) "+OK\r\n");
 11858  0058CA  0E7C               	movlw	high STR_9
 11859  0058CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11860  0058CE  0E72               	movlw	low STR_9
 11861  0058D0  6F61               	movwf	?_putsUSART& (0+255),b
 11862  0058D2  ECA8  F00D         	call	_putsUSART	;wreg free
 11863                           
 11864                           ;main.c: 564: }
 11865  0058D6  EFA3  F035         	goto	l14310
 11866  0058DA                     l13712:
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;main.c: 566: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11870  0058DA  0E01               	movlw	high _cmdbuf
 11871  0058DC  0100               	movlb	0	; () banked
 11872  0058DE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11873  0058E0  0E27               	movlw	low _cmdbuf
 11874  0058E2  6F6D               	movwf	?_stristr& (0+255),b
 11875  0058E4  0E7C               	movlw	high STR_12
 11876  0058E6  6F70               	movwf	(?_stristr+3)& (0+255),b
 11877  0058E8  0E8A               	movlw	low STR_12
 11878  0058EA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11879  0058EC  EC0D  F010         	call	_stristr	;wreg free
 11880  0058F0  0E27               	movlw	low _cmdbuf
 11881  0058F2  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11882  0058F4  0E01               	movlw	high _cmdbuf
 11883  0058F6  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11884  0058F8  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11885  0058FA  E102               	bnz	u18145
 11886  0058FC  516D               	movf	?_stristr& (0+255),w,b
 11887  0058FE  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11888  005900                     u18145:
 11889  005900  E10D               	bnz	l13720
 11890                           
 11891                           ; BSR set to: 0
 11892                           ;main.c: 567: bSilent = 1;
 11893  005902  0E01               	movlw	1
 11894  005904  6E33               	movwf	_bSilent,c
 11895                           
 11896                           ; BSR set to: 0
 11897                           ;main.c: 568: ECANSetOperationMode(0x20);
 11898  005906  0E20               	movlw	32
 11899  005908  EC08  F00B         	call	_ECANSetOperationMode
 11900                           
 11901                           ; BSR set to: 0
 11902                           ;main.c: 569: putsUSART((char *) "+OK\r\n");
 11903  00590C  0E7C               	movlw	high STR_9
 11904  00590E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11905  005910  0E72               	movlw	low STR_9
 11906  005912  6F61               	movwf	?_putsUSART& (0+255),b
 11907  005914  ECA8  F00D         	call	_putsUSART	;wreg free
 11908                           
 11909                           ;main.c: 570: }
 11910  005918  EFA3  F035         	goto	l14310
 11911  00591C                     l13720:
 11912                           
 11913                           ; BSR set to: 0
 11914                           ;main.c: 572: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11915  00591C  0E01               	movlw	high _cmdbuf
 11916  00591E  0100               	movlb	0	; () banked
 11917  005920  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11918  005922  0E27               	movlw	low _cmdbuf
 11919  005924  6F6D               	movwf	?_stristr& (0+255),b
 11920  005926  0E7B               	movlw	high STR_14
 11921  005928  6F70               	movwf	(?_stristr+3)& (0+255),b
 11922  00592A  0EBF               	movlw	low STR_14
 11923  00592C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11924  00592E  EC0D  F010         	call	_stristr	;wreg free
 11925  005932  0E27               	movlw	low _cmdbuf
 11926  005934  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11927  005936  0E01               	movlw	high _cmdbuf
 11928  005938  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11929  00593A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11930  00593C  E102               	bnz	u18155
 11931  00593E  516D               	movf	?_stristr& (0+255),w,b
 11932  005940  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11933  005942                     u18155:
 11934  005942  E10C               	bnz	l13728
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;main.c: 573: bSilent = 0;
 11938  005944  6A33               	clrf	_bSilent,c
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;main.c: 574: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11942  005946  0E40               	movlw	64
 11943  005948  EC08  F00B         	call	_ECANSetOperationMode
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;main.c: 575: putsUSART((char *) "+OK\r\n");
 11947  00594C  0E7C               	movlw	high STR_9
 11948  00594E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11949  005950  0E72               	movlw	low STR_9
 11950  005952  6F61               	movwf	?_putsUSART& (0+255),b
 11951  005954  ECA8  F00D         	call	_putsUSART	;wreg free
 11952                           
 11953                           ;main.c: 576: }
 11954  005958  EFA3  F035         	goto	l14310
 11955  00595C                     l13728:
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;main.c: 578: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11959  00595C  0E01               	movlw	high _cmdbuf
 11960  00595E  0100               	movlb	0	; () banked
 11961  005960  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11962  005962  0E27               	movlw	low _cmdbuf
 11963  005964  6F6D               	movwf	?_stristr& (0+255),b
 11964  005966  0E7C               	movlw	high STR_16
 11965  005968  6F70               	movwf	(?_stristr+3)& (0+255),b
 11966  00596A  0E42               	movlw	low STR_16
 11967  00596C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11968  00596E  EC0D  F010         	call	_stristr	;wreg free
 11969  005972  0E27               	movlw	low _cmdbuf
 11970  005974  6FCA               	movwf	??_doModeVerbose& (0+255),b
 11971  005976  0E01               	movlw	high _cmdbuf
 11972  005978  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 11973  00597A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11974  00597C  E102               	bnz	u18165
 11975  00597E  516D               	movf	?_stristr& (0+255),w,b
 11976  005980  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 11977  005982                     u18165:
 11978  005982  E10C               	bnz	l13736
 11979                           
 11980                           ; BSR set to: 0
 11981                           ;main.c: 579: bSilent = 0;
 11982  005984  6A33               	clrf	_bSilent,c
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;main.c: 580: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11986  005986  0E60               	movlw	96
 11987  005988  EC08  F00B         	call	_ECANSetOperationMode
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;main.c: 581: putsUSART((char *) "+OK\r\n");
 11991  00598C  0E7C               	movlw	high STR_9
 11992  00598E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11993  005990  0E72               	movlw	low STR_9
 11994  005992  6F61               	movwf	?_putsUSART& (0+255),b
 11995  005994  ECA8  F00D         	call	_putsUSART	;wreg free
 11996                           
 11997                           ;main.c: 582: }
 11998  005998  EFA3  F035         	goto	l14310
 11999  00599C                     l13736:
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;main.c: 584: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 12003  00599C  0E01               	movlw	high _cmdbuf
 12004  00599E  0100               	movlb	0	; () banked
 12005  0059A0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12006  0059A2  0E27               	movlw	low _cmdbuf
 12007  0059A4  6F6D               	movwf	?_stristr& (0+255),b
 12008  0059A6  0E7C               	movlw	high STR_18
 12009  0059A8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12010  0059AA  0E00               	movlw	low STR_18
 12011  0059AC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12012  0059AE  EC0D  F010         	call	_stristr	;wreg free
 12013  0059B2  0E27               	movlw	low _cmdbuf
 12014  0059B4  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12015  0059B6  0E01               	movlw	high _cmdbuf
 12016  0059B8  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12017  0059BA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12018  0059BC  E102               	bnz	u18175
 12019  0059BE  516D               	movf	?_stristr& (0+255),w,b
 12020  0059C0  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12021  0059C2                     u18175:
 12022  0059C2  E10B               	bnz	l13742
 12023                           
 12024                           ; BSR set to: 0
 12025                           ;main.c: 585: printFirmwareVersion();
 12026  0059C4  ECC8  F010         	call	_printFirmwareVersion	;wreg free
 12027                           
 12028                           ;main.c: 586: putsUSART((char *) "+OK\r\n");
 12029  0059C8  0E7C               	movlw	high STR_9
 12030  0059CA  0100               	movlb	0	; () banked
 12031  0059CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12032  0059CE  0E72               	movlw	low STR_9
 12033  0059D0  6F61               	movwf	?_putsUSART& (0+255),b
 12034  0059D2  ECA8  F00D         	call	_putsUSART	;wreg free
 12035                           
 12036                           ;main.c: 587: }
 12037  0059D6  EFA3  F035         	goto	l14310
 12038  0059DA                     l13742:
 12039                           
 12040                           ; BSR set to: 0
 12041                           ;main.c: 589: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 12042  0059DA  0E01               	movlw	high _cmdbuf
 12043  0059DC  0100               	movlb	0	; () banked
 12044  0059DE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12045  0059E0  0E27               	movlw	low _cmdbuf
 12046  0059E2  6F6D               	movwf	?_stristr& (0+255),b
 12047  0059E4  0E7C               	movlw	high STR_20
 12048  0059E6  6F70               	movwf	(?_stristr+3)& (0+255),b
 12049  0059E8  0E3B               	movlw	low STR_20
 12050  0059EA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12051  0059EC  EC0D  F010         	call	_stristr	;wreg free
 12052  0059F0  0E27               	movlw	low _cmdbuf
 12053  0059F2  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12054  0059F4  0E01               	movlw	high _cmdbuf
 12055  0059F6  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12056  0059F8  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12057  0059FA  E102               	bnz	u18185
 12058  0059FC  516D               	movf	?_stristr& (0+255),w,b
 12059  0059FE  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12060  005A00                     u18185:
 12061  005A00  E165               	bnz	l13778
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;main.c: 590: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12065  005A02  506F               	movf	3951,w,c	;volatile
 12066  005A04  0BE0               	andlw	224
 12067  005A06  0102               	movlb	2	; () banked
 12068  005A08  6FBA               	movwf	doModeVerbose@ifmode& (0+255),b
 12069                           
 12070                           ; BSR set to: 2
 12071                           ;main.c: 591: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12072  005A0A  67BA               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12073  005A0C  D00B               	goto	l13752
 12074                           
 12075                           ; BSR set to: 2
 12076  005A0E  6633               	tstfsz	_bSilent,c
 12077  005A10  D009               	goto	l13752
 12078                           
 12079                           ; BSR set to: 2
 12080                           ;main.c: 592: putsUSART((char *) "+OK - Normal mode\r\n");
 12081  005A12  0E7A               	movlw	high STR_21
 12082  005A14  0100               	movlb	0	; () banked
 12083  005A16  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12084  005A18  0E62               	movlw	low STR_21
 12085  005A1A  6F61               	movwf	?_putsUSART& (0+255),b
 12086  005A1C  ECA8  F00D         	call	_putsUSART	;wreg free
 12087                           
 12088                           ;main.c: 593: }
 12089  005A20  EFA3  F035         	goto	l14310
 12090  005A24                     l13752:
 12091                           
 12092                           ; BSR set to: 2
 12093                           ;main.c: 594: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12094  005A24  51BA               	movf	doModeVerbose@ifmode& (0+255),w,b
 12095  005A26  0E01               	movlw	1
 12096  005A28  A4D8               	btfss	status,2,c
 12097  005A2A  0E00               	movlw	0
 12098  005A2C  1433               	andwf	_bSilent,w,c
 12099  005A2E  E009               	bz	l13756
 12100                           
 12101                           ; BSR set to: 2
 12102                           ;main.c: 595: putsUSART((char *) "+OK - Silent mode\r\n");
 12103  005A30  0E7A               	movlw	high STR_22
 12104  005A32  0100               	movlb	0	; () banked
 12105  005A34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12106  005A36  0E76               	movlw	low STR_22
 12107  005A38  6F61               	movwf	?_putsUSART& (0+255),b
 12108  005A3A  ECA8  F00D         	call	_putsUSART	;wreg free
 12109                           
 12110                           ;main.c: 596: }
 12111  005A3E  EFA3  F035         	goto	l14310
 12112  005A42                     l13756:
 12113                           
 12114                           ; BSR set to: 2
 12115                           ;main.c: 597: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12116  005A42  51BA               	movf	doModeVerbose@ifmode& (0+255),w,b
 12117  005A44  0A20               	xorlw	32
 12118  005A46  E109               	bnz	l13760
 12119                           
 12120                           ; BSR set to: 2
 12121                           ;main.c: 598: putsUSART((char *) "+OK - Sleep mode\r\n");
 12122  005A48  0E7A               	movlw	high STR_23
 12123  005A4A  0100               	movlb	0	; () banked
 12124  005A4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12125  005A4E  0EB2               	movlw	low STR_23
 12126  005A50  6F61               	movwf	?_putsUSART& (0+255),b
 12127  005A52  ECA8  F00D         	call	_putsUSART	;wreg free
 12128                           
 12129                           ;main.c: 599: }
 12130  005A56  EFA3  F035         	goto	l14310
 12131  005A5A                     l13760:
 12132                           
 12133                           ; BSR set to: 2
 12134                           ;main.c: 600: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12135  005A5A  51BA               	movf	doModeVerbose@ifmode& (0+255),w,b
 12136  005A5C  0A40               	xorlw	64
 12137  005A5E  E109               	bnz	l13764
 12138                           
 12139                           ; BSR set to: 2
 12140                           ;main.c: 601: putsUSART((char *) "+OK - Loopback mode\r\n");
 12141  005A60  0E79               	movlw	high STR_24
 12142  005A62  0100               	movlb	0	; () banked
 12143  005A64  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12144  005A66  0EE5               	movlw	low STR_24
 12145  005A68  6F61               	movwf	?_putsUSART& (0+255),b
 12146  005A6A  ECA8  F00D         	call	_putsUSART	;wreg free
 12147                           
 12148                           ;main.c: 602: }
 12149  005A6E  EFA3  F035         	goto	l14310
 12150  005A72                     l13764:
 12151                           
 12152                           ; BSR set to: 2
 12153                           ;main.c: 603: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12154  005A72  51BA               	movf	doModeVerbose@ifmode& (0+255),w,b
 12155  005A74  0A60               	xorlw	96
 12156  005A76  E109               	bnz	l13768
 12157                           
 12158                           ; BSR set to: 2
 12159                           ;main.c: 604: putsUSART((char *) "+OK - Listen only mode\r\n");
 12160  005A78  0E78               	movlw	high STR_25
 12161  005A7A  0100               	movlb	0	; () banked
 12162  005A7C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12163  005A7E  0E95               	movlw	low STR_25
 12164  005A80  6F61               	movwf	?_putsUSART& (0+255),b
 12165  005A82  ECA8  F00D         	call	_putsUSART	;wreg free
 12166                           
 12167                           ;main.c: 605: }
 12168  005A86  EFA3  F035         	goto	l14310
 12169  005A8A                     l13768:
 12170                           
 12171                           ; BSR set to: 2
 12172                           ;main.c: 606: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12173  005A8A  51BA               	movf	doModeVerbose@ifmode& (0+255),w,b
 12174  005A8C  0A80               	xorlw	128
 12175  005A8E  E109               	bnz	l13772
 12176                           
 12177                           ; BSR set to: 2
 12178                           ;main.c: 607: putsUSART((char *) "+OK - Closed mode\r\n");
 12179  005A90  0E7A               	movlw	high STR_26
 12180  005A92  0100               	movlb	0	; () banked
 12181  005A94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12182  005A96  0E4E               	movlw	low STR_26
 12183  005A98  6F61               	movwf	?_putsUSART& (0+255),b
 12184  005A9A  ECA8  F00D         	call	_putsUSART	;wreg free
 12185                           
 12186                           ;main.c: 608: }
 12187  005A9E  EFA3  F035         	goto	l14310
 12188  005AA2                     l13772:
 12189                           
 12190                           ; BSR set to: 2
 12191                           ;main.c: 609: else if (ECAN_OP_MODE_BITS == ifmode) {
 12192  005AA2  51BA               	movf	doModeVerbose@ifmode& (0+255),w,b
 12193  005AA4  0AE0               	xorlw	224
 12194  005AA6  E109               	bnz	l13776
 12195                           
 12196                           ; BSR set to: 2
 12197                           ;main.c: 610: putsUSART((char *) "+OK - Bits mode\r\n");
 12198  005AA8  0E7A               	movlw	high STR_27
 12199  005AAA  0100               	movlb	0	; () banked
 12200  005AAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12201  005AAE  0EC5               	movlw	low STR_27
 12202  005AB0  6F61               	movwf	?_putsUSART& (0+255),b
 12203  005AB2  ECA8  F00D         	call	_putsUSART	;wreg free
 12204                           
 12205                           ;main.c: 611: }
 12206  005AB6  EFA3  F035         	goto	l14310
 12207  005ABA                     l13776:
 12208                           
 12209                           ; BSR set to: 2
 12210                           ;main.c: 612: else {
 12211                           ;main.c: 613: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12212  005ABA  0E79               	movlw	high STR_28
 12213  005ABC  0100               	movlb	0	; () banked
 12214  005ABE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12215  005AC0  0E28               	movlw	low STR_28
 12216  005AC2  6F61               	movwf	?_putsUSART& (0+255),b
 12217  005AC4  ECA8  F00D         	call	_putsUSART	;wreg free
 12218  005AC8  EFA3  F035         	goto	l14310
 12219  005ACC                     l13778:
 12220                           
 12221                           ; BSR set to: 0
 12222                           ;main.c: 618: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12223  005ACC  0E01               	movlw	high _cmdbuf
 12224  005ACE  0100               	movlb	0	; () banked
 12225  005AD0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12226  005AD2  0E27               	movlw	low _cmdbuf
 12227  005AD4  6F6D               	movwf	?_stristr& (0+255),b
 12228  005AD6  0E7C               	movlw	high STR_29
 12229  005AD8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12230  005ADA  0EEA               	movlw	low STR_29
 12231  005ADC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12232  005ADE  EC0D  F010         	call	_stristr	;wreg free
 12233  005AE2  0E27               	movlw	low _cmdbuf
 12234  005AE4  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12235  005AE6  0E01               	movlw	high _cmdbuf
 12236  005AE8  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12237  005AEA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12238  005AEC  E102               	bnz	u18285
 12239  005AEE  516D               	movf	?_stristr& (0+255),w,b
 12240  005AF0  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12241  005AF2                     u18285:
 12242  005AF2  E001 D0D8          	bnz	l13832
 12243                           
 12244                           ; BSR set to: 0
 12245                           ;main.c: 620: char *p = strtok(cmdbuf, ",");
 12246  005AF6  EC01  F036         	call	PL28	;call to abstracted procedure
 12247  005AFA  EC11  F011         	call	_strtok	;wreg free
 12248  005AFE  C06C  F2BB         	movff	?_strtok,doModeVerbose@p
 12249  005B02  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p+1
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;main.c: 623: vscpPriority = 3;
 12253  005B06  0E03               	movlw	3
 12254  005B08  6E3E               	movwf	_vscpPriority,c
 12255                           
 12256                           ; BSR set to: 0
 12257                           ;main.c: 624: if ((0) != p) {
 12258  005B0A  0102               	movlb	2	; () banked
 12259  005B0C  51BC               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12260  005B0E  11BB               	iorwf	doModeVerbose@p& (0+255),w,b
 12261  005B10  E008               	bz	l13788
 12262                           
 12263                           ; BSR set to: 2
 12264                           ;main.c: 625: vscpPriority = atoi(p);
 12265  005B12  C2BB  F066         	movff	doModeVerbose@p,?_atoi
 12266  005B16  C2BC  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12267  005B1A  EC4F  F019         	call	_atoi	;wreg free
 12268  005B1E  5166               	movf	?_atoi& (0+255),w,b
 12269  005B20  6E3E               	movwf	_vscpPriority,c
 12270  005B22                     l13788:
 12271                           
 12272                           ;main.c: 626: }
 12273                           ;main.c: 629: vscpClass = 0;
 12274  005B22  6A3A               	clrf	_vscpClass,c
 12275  005B24  6A3B               	clrf	_vscpClass+1,c
 12276                           
 12277                           ;main.c: 630: if ((0) != (p = strtok((0), ","))) {
 12278  005B26  0100               	movlb	0	; () banked
 12279  005B28  ECC0  F035         	call	PL4	;call to abstracted procedure
 12280  005B2C  EC11  F011         	call	_strtok	;wreg free
 12281  005B30  C06C  F2BB         	movff	?_strtok,doModeVerbose@p
 12282  005B34  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p+1
 12283  005B38  0102               	movlb	2	; () banked
 12284  005B3A  51BC               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12285  005B3C  11BB               	iorwf	doModeVerbose@p& (0+255),w,b
 12286  005B3E  E00A               	bz	l13794
 12287                           
 12288                           ; BSR set to: 2
 12289                           ;main.c: 631: vscpClass = atoi(p);
 12290  005B40  C2BB  F066         	movff	doModeVerbose@p,?_atoi
 12291  005B44  C2BC  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12292  005B48  EC4F  F019         	call	_atoi	;wreg free
 12293  005B4C  C066  F03A         	movff	?_atoi,_vscpClass
 12294  005B50  C067  F03B         	movff	?_atoi+1,_vscpClass+1
 12295  005B54                     l13794:
 12296                           
 12297                           ;main.c: 632: }
 12298                           ;main.c: 635: vscpType = 0;
 12299  005B54  6A3F               	clrf	_vscpType,c
 12300                           
 12301                           ;main.c: 636: if ((0) != (p = strtok((0), ","))) {
 12302  005B56  0100               	movlb	0	; () banked
 12303  005B58  ECC0  F035         	call	PL4	;call to abstracted procedure
 12304  005B5C  EC11  F011         	call	_strtok	;wreg free
 12305  005B60  C06C  F2BB         	movff	?_strtok,doModeVerbose@p
 12306  005B64  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p+1
 12307  005B68  0102               	movlb	2	; () banked
 12308  005B6A  51BC               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12309  005B6C  11BB               	iorwf	doModeVerbose@p& (0+255),w,b
 12310  005B6E  E008               	bz	l13800
 12311                           
 12312                           ; BSR set to: 2
 12313                           ;main.c: 637: vscpType = atoi(p);
 12314  005B70  C2BB  F066         	movff	doModeVerbose@p,?_atoi
 12315  005B74  C2BC  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12316  005B78  EC4F  F019         	call	_atoi	;wreg free
 12317  005B7C  5166               	movf	?_atoi& (0+255),w,b
 12318  005B7E  6E3F               	movwf	_vscpType,c
 12319  005B80                     l13800:
 12320                           
 12321                           ;main.c: 638: }
 12322                           ;main.c: 641: vscpNodeId = 0;
 12323  005B80  0100               	movlb	0	; () banked
 12324  005B82  6BE8               	clrf	_vscpNodeId& (0+255),b
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;main.c: 642: if ((0) != (p = strtok((0), ","))) {
 12328  005B84  ECC0  F035         	call	PL4	;call to abstracted procedure
 12329  005B88  EC11  F011         	call	_strtok	;wreg free
 12330  005B8C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p
 12331  005B90  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p+1
 12332  005B94  0102               	movlb	2	; () banked
 12333  005B96  51BC               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12334  005B98  11BB               	iorwf	doModeVerbose@p& (0+255),w,b
 12335  005B9A  E008               	bz	l13806
 12336                           
 12337                           ; BSR set to: 2
 12338                           ;main.c: 643: vscpNodeId = atoi(p);
 12339  005B9C  C2BB  F066         	movff	doModeVerbose@p,?_atoi
 12340  005BA0  C2BC  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12341  005BA4  EC4F  F019         	call	_atoi	;wreg free
 12342  005BA8  5166               	movf	?_atoi& (0+255),w,b
 12343  005BAA  6FE8               	movwf	_vscpNodeId& (0+255),b
 12344  005BAC                     l13806:
 12345                           
 12346                           ;main.c: 644: }
 12347                           ;main.c: 647: vscpSize = 0;
 12348  005BAC  0100               	movlb	0	; () banked
 12349  005BAE  6BE9               	clrf	_vscpSize& (0+255),b
 12350                           
 12351                           ; BSR set to: 0
 12352                           ;main.c: 648: if ((0) != (p = strtok((0), ","))) {
 12353  005BB0  ECC0  F035         	call	PL4	;call to abstracted procedure
 12354  005BB4  EC11  F011         	call	_strtok	;wreg free
 12355  005BB8  C06C  F2BB         	movff	?_strtok,doModeVerbose@p
 12356  005BBC  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p+1
 12357  005BC0  0102               	movlb	2	; () banked
 12358  005BC2  51BC               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12359  005BC4  11BB               	iorwf	doModeVerbose@p& (0+255),w,b
 12360  005BC6  E008               	bz	l13812
 12361                           
 12362                           ; BSR set to: 2
 12363                           ;main.c: 649: vscpSize = atoi(p);
 12364  005BC8  C2BB  F066         	movff	doModeVerbose@p,?_atoi
 12365  005BCC  C2BC  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12366  005BD0  EC4F  F019         	call	_atoi	;wreg free
 12367  005BD4  5166               	movf	?_atoi& (0+255),w,b
 12368  005BD6  6FE9               	movwf	_vscpSize& (0+255),b
 12369  005BD8                     l13812:
 12370                           
 12371                           ;main.c: 650: }
 12372                           ;main.c: 652: memset( vscpData, 0, 8 );
 12373  005BD8  0E01               	movlw	high _vscpData
 12374  005BDA  0100               	movlb	0	; () banked
 12375  005BDC  6F61               	movwf	(?_memset+1)& (0+255),b
 12376  005BDE  0EDF               	movlw	low _vscpData
 12377  005BE0  6F60               	movwf	?_memset& (0+255),b
 12378  005BE2  6B63               	clrf	(?_memset+3)& (0+255),b
 12379  005BE4  6B62               	clrf	(?_memset+2)& (0+255),b
 12380  005BE6  6B65               	clrf	(?_memset+5)& (0+255),b
 12381  005BE8  0E08               	movlw	8
 12382  005BEA  6F64               	movwf	(?_memset+4)& (0+255),b
 12383  005BEC  EC43  F00B         	call	_memset	;wreg free
 12384                           
 12385                           ; BSR set to: 0
 12386                           ;main.c: 653: for (i = 0; i < vscpSize; i++) {
 12387  005BF0  0102               	movlb	2	; () banked
 12388  005BF2  6BAC               	clrf	doModeVerbose@i& (0+255),b
 12389  005BF4  D01E               	goto	l13822
 12390  005BF6                     l13816:
 12391                           
 12392                           ; BSR set to: 2
 12393                           ;main.c: 654: if ((0) != (p = strtok((0), ","))) {
 12394  005BF6  0100               	movlb	0	; () banked
 12395  005BF8  ECC0  F035         	call	PL4	;call to abstracted procedure
 12396  005BFC  EC11  F011         	call	_strtok	;wreg free
 12397  005C00  C06C  F2BB         	movff	?_strtok,doModeVerbose@p
 12398  005C04  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p+1
 12399  005C08  0102               	movlb	2	; () banked
 12400  005C0A  51BC               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12401  005C0C  11BB               	iorwf	doModeVerbose@p& (0+255),w,b
 12402  005C0E  E016               	bz	l13824
 12403                           
 12404                           ; BSR set to: 2
 12405                           ;main.c: 655: vscpData[ i ] = atoi(p);
 12406  005C10  0EDF               	movlw	low _vscpData
 12407  005C12  25AC               	addwf	doModeVerbose@i& (0+255),w,b
 12408  005C14  6ED9               	movwf	fsr2l,c
 12409  005C16  6ADA               	clrf	fsr2h,c
 12410  005C18  0101               	movlb	1	; () banked
 12411  005C1A  0E01               	movlw	high _vscpData
 12412  005C1C  22DA               	addwfc	fsr2h,f,c
 12413  005C1E  C2BB  F066         	movff	doModeVerbose@p,?_atoi
 12414  005C22  C2BC  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12415  005C26  EC4F  F019         	call	_atoi	;wreg free
 12416  005C2A  5166               	movf	?_atoi& (0+255),w,b
 12417  005C2C  6EDF               	movwf	indf2,c
 12418                           
 12419                           ; BSR set to: 0
 12420                           
 12421                           ;main.c: 656: }
 12422  005C2E  0102               	movlb	2	; () banked
 12423  005C30  2BAC               	incf	doModeVerbose@i& (0+255),f,b
 12424  005C32                     l13822:
 12425                           
 12426                           ; BSR set to: 2
 12427  005C32  0100               	movlb	0	; () banked
 12428  005C34  51E9               	movf	_vscpSize& (0+255),w,b
 12429  005C36  0102               	movlb	2	; () banked
 12430  005C38  5DAC               	subwf	doModeVerbose@i& (0+255),w,b
 12431  005C3A  E3DD               	bnc	l13816
 12432  005C3C                     l13824:
 12433                           
 12434                           ; BSR set to: 2
 12435                           ;main.c: 659: }
 12436                           ;main.c: 660: }
 12437                           ;main.c: 662: if ( sendVSCPFrame(vscpClass,
 12438                           ;main.c: 663: vscpType,
 12439                           ;main.c: 664: vscpNodeId,
 12440                           ;main.c: 665: vscpPriority,
 12441                           ;main.c: 666: vscpSize,
 12442                           ;main.c: 667: vscpData ) ) {
 12443  005C3C  C03A  F096         	movff	_vscpClass,?_sendVSCPFrame
 12444  005C40  C03B  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12445  005C44  C03F  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12446  005C48  C0E8  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12447  005C4C  C03E  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12448  005C50  C0E9  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12449  005C54  0E01               	movlw	high _vscpData
 12450  005C56  0100               	movlb	0	; () banked
 12451  005C58  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12452  005C5A  0EDF               	movlw	low _vscpData
 12453  005C5C  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12454  005C5E  ECDE  F013         	call	_sendVSCPFrame	;wreg free
 12455  005C62  0900               	iorlw	0
 12456  005C64  E017               	bz	l13830
 12457                           
 12458                           ;main.c: 669: cntTxFrames++;
 12459  005C66  0101               	movlb	1	; () banked
 12460  005C68  2B14               	incf	_cntTxFrames& (0+255),f,b
 12461  005C6A  0E00               	movlw	0
 12462  005C6C  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12463  005C6E  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12464  005C70  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12465                           
 12466                           ;main.c: 670: cntTxBytes += vscpSize;
 12467  005C72  0100               	movlb	0	; () banked
 12468  005C74  51E9               	movf	_vscpSize& (0+255),w,b
 12469  005C76  0101               	movlb	1	; () banked
 12470  005C78  2710               	addwf	_cntTxBytes& (0+255),f,b
 12471  005C7A  0E00               	movlw	0
 12472  005C7C  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12473  005C7E  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12474  005C80  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12475                           
 12476                           ; BSR set to: 1
 12477                           ;main.c: 671: putsUSART((char *) "+OK\r\n");
 12478  005C82  0E7C               	movlw	high STR_9
 12479  005C84  0100               	movlb	0	; () banked
 12480  005C86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12481  005C88  0E72               	movlw	low STR_9
 12482  005C8A  6F61               	movwf	?_putsUSART& (0+255),b
 12483  005C8C  ECA8  F00D         	call	_putsUSART	;wreg free
 12484                           
 12485                           ;main.c: 672: }
 12486  005C90  EFA3  F035         	goto	l14310
 12487  005C94                     l13830:
 12488                           
 12489                           ;main.c: 673: else {
 12490                           ;main.c: 674: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12491  005C94  0E77               	movlw	high STR_37
 12492  005C96  0100               	movlb	0	; () banked
 12493  005C98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12494  005C9A  0E0F               	movlw	low STR_37
 12495  005C9C  6F61               	movwf	?_putsUSART& (0+255),b
 12496  005C9E  ECA8  F00D         	call	_putsUSART	;wreg free
 12497  005CA2  EFA3  F035         	goto	l14310
 12498  005CA6                     l13832:
 12499                           
 12500                           ; BSR set to: 0
 12501                           ;main.c: 678: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12502  005CA6  0E01               	movlw	high _cmdbuf
 12503  005CA8  0100               	movlb	0	; () banked
 12504  005CAA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12505  005CAC  0E27               	movlw	low _cmdbuf
 12506  005CAE  6F6D               	movwf	?_stristr& (0+255),b
 12507  005CB0  0E7C               	movlw	high STR_38
 12508  005CB2  6F70               	movwf	(?_stristr+3)& (0+255),b
 12509  005CB4  0EE7               	movlw	low STR_38
 12510  005CB6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12511  005CB8  EC0D  F010         	call	_stristr	;wreg free
 12512  005CBC  0E27               	movlw	low _cmdbuf
 12513  005CBE  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12514  005CC0  0E01               	movlw	high _cmdbuf
 12515  005CC2  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12516  005CC4  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12517  005CC6  E102               	bnz	u18375
 12518  005CC8  516D               	movf	?_stristr& (0+255),w,b
 12519  005CCA  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12520  005CCC                     u18375:
 12521  005CCC  E116               	bnz	l13840
 12522                           
 12523                           ; BSR set to: 0
 12524                           ;main.c: 679: if (receivePrintEventVerbose()) {
 12525  005CCE  ECB4  F023         	call	_receivePrintEventVerbose	;wreg free
 12526  005CD2  0900               	iorlw	0
 12527  005CD4  E009               	bz	l13838
 12528                           
 12529                           ;main.c: 680: putsUSART((char *) "+OK\r\n");
 12530  005CD6  0E7C               	movlw	high STR_9
 12531  005CD8  0100               	movlb	0	; () banked
 12532  005CDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12533  005CDC  0E72               	movlw	low STR_9
 12534  005CDE  6F61               	movwf	?_putsUSART& (0+255),b
 12535  005CE0  ECA8  F00D         	call	_putsUSART	;wreg free
 12536                           
 12537                           ;main.c: 681: }
 12538  005CE4  EFA3  F035         	goto	l14310
 12539  005CE8                     l13838:
 12540                           
 12541                           ;main.c: 682: else {
 12542                           ;main.c: 683: putsUSART((char *) "+OK - no events\r\n");
 12543  005CE8  0E7A               	movlw	high STR_40
 12544  005CEA  0100               	movlb	0	; () banked
 12545  005CEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12546  005CEE  0ED7               	movlw	low STR_40
 12547  005CF0  6F61               	movwf	?_putsUSART& (0+255),b
 12548  005CF2  ECA8  F00D         	call	_putsUSART	;wreg free
 12549  005CF6  EFA3  F035         	goto	l14310
 12550  005CFA                     l13840:
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;main.c: 687: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12554  005CFA  0E01               	movlw	high _cmdbuf
 12555  005CFC  0100               	movlb	0	; () banked
 12556  005CFE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12557  005D00  0E27               	movlw	low _cmdbuf
 12558  005D02  6F6D               	movwf	?_stristr& (0+255),b
 12559  005D04  0E7C               	movlw	high STR_41
 12560  005D06  6F70               	movwf	(?_stristr+3)& (0+255),b
 12561  005D08  0EC3               	movlw	low STR_41
 12562  005D0A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12563  005D0C  EC0D  F010         	call	_stristr	;wreg free
 12564  005D10  0E27               	movlw	low _cmdbuf
 12565  005D12  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12566  005D14  0E01               	movlw	high _cmdbuf
 12567  005D16  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12568  005D18  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12569  005D1A  E102               	bnz	u18395
 12570  005D1C  516D               	movf	?_stristr& (0+255),w,b
 12571  005D1E  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12572  005D20                     u18395:
 12573  005D20  E10B               	bnz	l13846
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;main.c: 688: printStatistics();
 12577  005D22  EC33  F01F         	call	_printStatistics	;wreg free
 12578                           
 12579                           ;main.c: 689: putsUSART((char *) "+OK\r\n");
 12580  005D26  0E7C               	movlw	high STR_9
 12581  005D28  0100               	movlb	0	; () banked
 12582  005D2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12583  005D2C  0E72               	movlw	low STR_9
 12584  005D2E  6F61               	movwf	?_putsUSART& (0+255),b
 12585  005D30  ECA8  F00D         	call	_putsUSART	;wreg free
 12586                           
 12587                           ;main.c: 690: }
 12588  005D34  EFA3  F035         	goto	l14310
 12589  005D38                     l13846:
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;main.c: 692: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12593  005D38  0E01               	movlw	high _cmdbuf
 12594  005D3A  0100               	movlb	0	; () banked
 12595  005D3C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12596  005D3E  0E27               	movlw	low _cmdbuf
 12597  005D40  6F6D               	movwf	?_stristr& (0+255),b
 12598  005D42  0E7C               	movlw	high STR_43
 12599  005D44  6F70               	movwf	(?_stristr+3)& (0+255),b
 12600  005D46  0ED5               	movlw	low STR_43
 12601  005D48  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12602  005D4A  EC0D  F010         	call	_stristr	;wreg free
 12603  005D4E  0E27               	movlw	low _cmdbuf
 12604  005D50  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12605  005D52  0E01               	movlw	high _cmdbuf
 12606  005D54  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12607  005D56  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12608  005D58  E102               	bnz	u18405
 12609  005D5A  516D               	movf	?_stristr& (0+255),w,b
 12610  005D5C  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12611  005D5E                     u18405:
 12612  005D5E  E10B               	bnz	l13852
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;main.c: 693: printErrors();
 12616  005D60  ECFA  F024         	call	_printErrors	;wreg free
 12617                           
 12618                           ;main.c: 694: putsUSART((char *) "+OK\r\n");
 12619  005D64  0E7C               	movlw	high STR_9
 12620  005D66  0100               	movlb	0	; () banked
 12621  005D68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12622  005D6A  0E72               	movlw	low STR_9
 12623  005D6C  6F61               	movwf	?_putsUSART& (0+255),b
 12624  005D6E  ECA8  F00D         	call	_putsUSART	;wreg free
 12625                           
 12626                           ;main.c: 695: }
 12627  005D72  EFA3  F035         	goto	l14310
 12628  005D76                     l13852:
 12629                           
 12630                           ; BSR set to: 0
 12631                           ;main.c: 697: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12632  005D76  0E01               	movlw	high _cmdbuf
 12633  005D78  0100               	movlb	0	; () banked
 12634  005D7A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12635  005D7C  0E27               	movlw	low _cmdbuf
 12636  005D7E  6F6D               	movwf	?_stristr& (0+255),b
 12637  005D80  0E7C               	movlw	high STR_45
 12638  005D82  6F70               	movwf	(?_stristr+3)& (0+255),b
 12639  005D84  0EBE               	movlw	low STR_45
 12640  005D86  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12641  005D88  EC0D  F010         	call	_stristr	;wreg free
 12642  005D8C  0E27               	movlw	low _cmdbuf
 12643  005D8E  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12644  005D90  0E01               	movlw	high _cmdbuf
 12645  005D92  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12646  005D94  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12647  005D96  E102               	bnz	u18415
 12648  005D98  516D               	movf	?_stristr& (0+255),w,b
 12649  005D9A  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12650  005D9C                     u18415:
 12651  005D9C  E10B               	bnz	l13856
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;main.c: 698: printHelp();
 12655  005D9E  ECFE  F01F         	call	_printHelp	;wreg free
 12656                           
 12657                           ;main.c: 699: putsUSART((char *) "+OK\r\n");
 12658  005DA2  0E7C               	movlw	high STR_9
 12659  005DA4  0100               	movlb	0	; () banked
 12660  005DA6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12661  005DA8  0E72               	movlw	low STR_9
 12662  005DAA  6F61               	movwf	?_putsUSART& (0+255),b
 12663  005DAC  ECA8  F00D         	call	_putsUSART	;wreg free
 12664                           
 12665                           ;main.c: 700: }
 12666  005DB0  EFA3  F035         	goto	l14310
 12667  005DB4                     l13856:
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;main.c: 702: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12671  005DB4  0E01               	movlw	high _cmdbuf
 12672  005DB6  0100               	movlb	0	; () banked
 12673  005DB8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12674  005DBA  0E27               	movlw	low _cmdbuf
 12675  005DBC  6F6D               	movwf	?_stristr& (0+255),b
 12676  005DBE  0E7C               	movlw	high STR_47
 12677  005DC0  6F70               	movwf	(?_stristr+3)& (0+255),b
 12678  005DC2  0E9B               	movlw	low STR_47
 12679  005DC4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12680  005DC6  EC0D  F010         	call	_stristr	;wreg free
 12681  005DCA  0E27               	movlw	low _cmdbuf
 12682  005DCC  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12683  005DCE  0E01               	movlw	high _cmdbuf
 12684  005DD0  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12685  005DD2  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12686  005DD4  E102               	bnz	u18425
 12687  005DD6  516D               	movf	?_stristr& (0+255),w,b
 12688  005DD8  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12689  005DDA                     u18425:
 12690  005DDA  E10B               	bnz	l13862
 12691                           
 12692                           ; BSR set to: 0
 12693                           ;main.c: 703: findNodes();
 12694  005DDC  EC57  F018         	call	_findNodes	;wreg free
 12695                           
 12696                           ;main.c: 704: putsUSART((char *) "+OK\r\n");
 12697  005DE0  0E7C               	movlw	high STR_9
 12698  005DE2  0100               	movlb	0	; () banked
 12699  005DE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12700  005DE6  0E72               	movlw	low STR_9
 12701  005DE8  6F61               	movwf	?_putsUSART& (0+255),b
 12702  005DEA  ECA8  F00D         	call	_putsUSART	;wreg free
 12703                           
 12704                           ;main.c: 705: }
 12705  005DEE  EFA3  F035         	goto	l14310
 12706  005DF2                     l13862:
 12707                           
 12708                           ; BSR set to: 0
 12709                           ;main.c: 708: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12710  005DF2  0E01               	movlw	high _cmdbuf
 12711  005DF4  0100               	movlb	0	; () banked
 12712  005DF6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12713  005DF8  0E27               	movlw	low _cmdbuf
 12714  005DFA  6F6D               	movwf	?_stristr& (0+255),b
 12715  005DFC  0E7C               	movlw	high STR_49
 12716  005DFE  6F70               	movwf	(?_stristr+3)& (0+255),b
 12717  005E00  0EA0               	movlw	low STR_49
 12718  005E02  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12719  005E04  EC0D  F010         	call	_stristr	;wreg free
 12720  005E08  0E27               	movlw	low _cmdbuf
 12721  005E0A  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12722  005E0C  0E01               	movlw	high _cmdbuf
 12723  005E0E  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12724  005E10  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12725  005E12  E102               	bnz	u18435
 12726  005E14  516D               	movf	?_stristr& (0+255),w,b
 12727  005E16  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 12728  005E18                     u18435:
 12729  005E18  E001 D20E          	bnz	l14014
 12730                           
 12731                           ; BSR set to: 0
 12732                           ;main.c: 710: uint8_t i;
 12733                           ;main.c: 711: uint8_t nodeid;
 12734                           ;main.c: 712: uint8_t page = 0;
 12735  005E1C  0102               	movlb	2	; () banked
 12736  005E1E  6BB1               	clrf	doModeVerbose@page& (0+255),b
 12737                           
 12738                           ; BSR set to: 2
 12739                           ;main.c: 713: uint8_t reg;
 12740                           ;main.c: 714: uint8_t value;
 12741                           ;main.c: 715: uint8_t count = 1;
 12742  005E20  0E01               	movlw	1
 12743  005E22  6FAE               	movwf	doModeVerbose@count& (0+255),b
 12744                           
 12745                           ; BSR set to: 2
 12746                           ;main.c: 717: strcpy(cmdbuf, cmdbuf + 5);
 12747  005E24  ECB2  F035         	call	PL2	;call to abstracted procedure
 12748  005E28  EC5A  F00B         	call	_strcpy	;wreg free
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;main.c: 718: char *p = strtok(cmdbuf, " ");
 12752  005E2C  0E01               	movlw	high _cmdbuf
 12753  005E2E  EC0B  F036         	call	PL32	;call to abstracted procedure
 12754  005E32  EC11  F011         	call	_strtok	;wreg free
 12755  005E36  C06C  F2B6         	movff	?_strtok,doModeVerbose@p_1179
 12756  005E3A  C06D  F2B7         	movff	?_strtok+1,doModeVerbose@p_1179+1
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;main.c: 719: if ((0) != p) {
 12760  005E3E  0102               	movlb	2	; () banked
 12761  005E40  51B7               	movf	(doModeVerbose@p_1179+1)& (0+255),w,b
 12762  005E42  11B6               	iorwf	doModeVerbose@p_1179& (0+255),w,b
 12763  005E44  E00A               	bz	l13876
 12764                           
 12765                           ; BSR set to: 2
 12766                           ;main.c: 720: nodeid = atoi(p);
 12767  005E46  C2B6  F066         	movff	doModeVerbose@p_1179,?_atoi
 12768  005E4A  C2B7  F067         	movff	doModeVerbose@p_1179+1,?_atoi+1
 12769  005E4E  EC4F  F019         	call	_atoi	;wreg free
 12770  005E52  5166               	movf	?_atoi& (0+255),w,b
 12771  005E54  0102               	movlb	2	; () banked
 12772  005E56  6FAF               	movwf	doModeVerbose@nodeid& (0+255),b
 12773                           
 12774                           ;main.c: 721: }
 12775  005E58  D009               	goto	l13880
 12776  005E5A                     l13876:
 12777                           
 12778                           ; BSR set to: 2
 12779                           ;main.c: 722: else {
 12780                           ;main.c: 723: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12781  005E5A  0E79               	movlw	high STR_51
 12782  005E5C  0100               	movlb	0	; () banked
 12783  005E5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12784  005E60  0E10               	movlw	low STR_51
 12785  005E62  6F61               	movwf	?_putsUSART& (0+255),b
 12786  005E64  ECA8  F00D         	call	_putsUSART	;wreg free
 12787  005E68  EFB1  F035         	goto	l541
 12788  005E6C                     l13880:
 12789                           
 12790                           ; BSR set to: 2
 12791                           ;main.c: 725: }
 12792                           ;main.c: 727: if ((0) != (p = strtok((0), " "))) {
 12793  005E6C  ECF9  F035         	call	PL26	;call to abstracted procedure
 12794  005E70  EC11  F011         	call	_strtok	;wreg free
 12795  005E74  C06C  F2B6         	movff	?_strtok,doModeVerbose@p_1179
 12796  005E78  C06D  F2B7         	movff	?_strtok+1,doModeVerbose@p_1179+1
 12797  005E7C  0102               	movlb	2	; () banked
 12798  005E7E  51B7               	movf	(doModeVerbose@p_1179+1)& (0+255),w,b
 12799  005E80  11B6               	iorwf	doModeVerbose@p_1179& (0+255),w,b
 12800  005E82  E034               	bz	l13888
 12801                           
 12802                           ; BSR set to: 2
 12803                           ;main.c: 729: char *preg;
 12804                           ;main.c: 730: if (preg = strchr(p, ':')) {
 12805  005E84  C2B6  F060         	movff	doModeVerbose@p_1179,?_strchr
 12806  005E88  C2B7  F061         	movff	doModeVerbose@p_1179+1,?_strchr+1
 12807  005E8C  0100               	movlb	0	; () banked
 12808  005E8E  6B63               	clrf	(?_strchr+3)& (0+255),b
 12809  005E90  0E3A               	movlw	58
 12810  005E92  6F62               	movwf	(?_strchr+2)& (0+255),b
 12811  005E94  EC8F  F00E         	call	_strchr	;wreg free
 12812  005E98  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12813  005E9C  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12814  005EA0  0102               	movlb	2	; () banked
 12815  005EA2  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12816  005EA4  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12817  005EA6  E018               	bz	l13886
 12818                           
 12819                           ; BSR set to: 2
 12820                           ;main.c: 731: page = atoi(p);
 12821  005EA8  C2B6  F066         	movff	doModeVerbose@p_1179,?_atoi
 12822  005EAC  C2B7  F067         	movff	doModeVerbose@p_1179+1,?_atoi+1
 12823  005EB0  EC4F  F019         	call	_atoi	;wreg free
 12824  005EB4  5166               	movf	?_atoi& (0+255),w,b
 12825  005EB6  0102               	movlb	2	; () banked
 12826  005EB8  6FB1               	movwf	doModeVerbose@page& (0+255),b
 12827                           
 12828                           ;main.c: 732: reg = atoi(preg + 1);
 12829  005EBA  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12830  005EBC  0100               	movlb	0	; () banked
 12831  005EBE  6FCA               	movwf	??_doModeVerbose& (0+255),b
 12832  005EC0  0E00               	movlw	0
 12833  005EC2  0102               	movlb	2	; () banked
 12834  005EC4  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12835  005EC6  0100               	movlb	0	; () banked
 12836  005EC8  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 12837  005ECA  C0CA  F066         	movff	??_doModeVerbose,?_atoi
 12838  005ECE  C0CB  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12839  005ED2  EC4F  F019         	call	_atoi	;wreg free
 12840  005ED6  D006               	goto	L6
 12841  005ED8                     l13886:
 12842                           
 12843                           ; BSR set to: 2
 12844                           ;main.c: 734: else {
 12845                           ;main.c: 735: reg = atoi(p);
 12846  005ED8  C2B6  F066         	movff	doModeVerbose@p_1179,?_atoi
 12847  005EDC  C2B7  F067         	movff	doModeVerbose@p_1179+1,?_atoi+1
 12848  005EE0  EC4F  F019         	call	_atoi	;wreg free
 12849  005EE4                     L6:
 12850  005EE4  5166               	movf	?_atoi& (0+255),w,b
 12851  005EE6  0102               	movlb	2	; () banked
 12852  005EE8  6FB2               	movwf	doModeVerbose@reg& (0+255),b
 12853  005EEA  D009               	goto	l13892
 12854  005EEC                     l13888:
 12855                           
 12856                           ; BSR set to: 2
 12857                           ;main.c: 739: else {
 12858                           ;main.c: 740: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12859  005EEC  0E77               	movlw	high STR_53
 12860  005EEE  0100               	movlb	0	; () banked
 12861  005EF0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12862  005EF2  0E72               	movlw	low STR_53
 12863  005EF4  6F61               	movwf	?_putsUSART& (0+255),b
 12864  005EF6  ECA8  F00D         	call	_putsUSART	;wreg free
 12865  005EFA  EFB1  F035         	goto	l541
 12866  005EFE                     l13892:
 12867                           
 12868                           ; BSR set to: 2
 12869                           ;main.c: 742: }
 12870                           ;main.c: 745: if ((0) != (p = strtok((0), " "))) {
 12871  005EFE  ECF9  F035         	call	PL26	;call to abstracted procedure
 12872  005F02  EC11  F011         	call	_strtok	;wreg free
 12873  005F06  C06C  F2B6         	movff	?_strtok,doModeVerbose@p_1179
 12874  005F0A  C06D  F2B7         	movff	?_strtok+1,doModeVerbose@p_1179+1
 12875  005F0E  0102               	movlb	2	; () banked
 12876  005F10  51B7               	movf	(doModeVerbose@p_1179+1)& (0+255),w,b
 12877  005F12  11B6               	iorwf	doModeVerbose@p_1179& (0+255),w,b
 12878  005F14  E00D               	bz	l546
 12879                           
 12880                           ; BSR set to: 2
 12881                           ;main.c: 746: count = atoi(p);
 12882  005F16  C2B6  F066         	movff	doModeVerbose@p_1179,?_atoi
 12883  005F1A  C2B7  F067         	movff	doModeVerbose@p_1179+1,?_atoi+1
 12884  005F1E  EC4F  F019         	call	_atoi	;wreg free
 12885  005F22  5166               	movf	?_atoi& (0+255),w,b
 12886  005F24  0102               	movlb	2	; () banked
 12887  005F26  6FAE               	movwf	doModeVerbose@count& (0+255),b
 12888                           
 12889                           ; BSR set to: 2
 12890                           ;main.c: 747: if (0 == count) count = 1;
 12891  005F28  67AE               	tstfsz	doModeVerbose@count& (0+255),b
 12892  005F2A  D002               	goto	l546
 12893                           
 12894                           ; BSR set to: 2
 12895  005F2C  0E01               	movlw	1
 12896  005F2E  6FAE               	movwf	doModeVerbose@count& (0+255),b
 12897  005F30                     l546:
 12898                           
 12899                           ; BSR set to: 2
 12900                           ;main.c: 748: }
 12901                           ;main.c: 750: BOOL rv = 1;
 12902  005F30  0E01               	movlw	1
 12903  005F32  6FA3               	movwf	doModeVerbose@rv& (0+255),b
 12904                           
 12905                           ; BSR set to: 2
 12906                           ;main.c: 751: for (i = 0; i < count; i++) {
 12907  005F34  6BB4               	clrf	doModeVerbose@i_1173& (0+255),b
 12908  005F36  D168               	goto	l14006
 12909  005F38                     l13902:
 12910                           
 12911                           ; BSR set to: 2
 12912                           ;main.c: 753: if (readRegisterExtended(nodeid,
 12913                           ;main.c: 754: page,
 12914                           ;main.c: 755: (reg + i) & 0xff,
 12915                           ;main.c: 756: rwtimeout,
 12916                           ;main.c: 757: &value)) {
 12917  005F38  0100               	movlb	0	; () banked
 12918  005F3A  C2B1  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 12919  005F3E  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12920  005F40  0102               	movlb	2	; () banked
 12921  005F42  51B2               	movf	doModeVerbose@reg& (0+255),w,b
 12922  005F44  25B4               	addwf	doModeVerbose@i_1173& (0+255),w,b
 12923  005F46  0100               	movlb	0	; () banked
 12924  005F48  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12925  005F4A  C037  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12926  005F4E  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12927  005F50  0E02               	movlw	high doModeVerbose@value
 12928  005F52  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12929  005F54  0EB5               	movlw	low doModeVerbose@value
 12930  005F56  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12931  005F58  0102               	movlb	2	; () banked
 12932  005F5A  51AF               	movf	doModeVerbose@nodeid& (0+255),w,b
 12933  005F5C  EC88  F016         	call	_readRegisterExtended
 12934  005F60  0900               	iorlw	0
 12935  005F62  E101 D0CE          	bz	l550
 12936                           
 12937                           ;main.c: 758: putsUSART((char *) "nodeid=");
 12938  005F66  0E7B               	movlw	high (STR_69+1)
 12939  005F68  0100               	movlb	0	; () banked
 12940  005F6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12941  005F6C  0EAE               	movlw	low (STR_69+1)
 12942  005F6E  6F61               	movwf	?_putsUSART& (0+255),b
 12943  005F70  ECA8  F00D         	call	_putsUSART	;wreg free
 12944                           
 12945                           ;main.c: 759: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 12946  005F74  0100               	movlb	0	; () banked
 12947  005F76  67E5               	tstfsz	_bHex& (0+255),b
 12948  005F78  D005               	goto	l13910
 12949                           
 12950                           ; BSR set to: 0
 12951  005F7A  0E7C               	movlw	high STR_57
 12952  005F7C  0102               	movlb	2	; () banked
 12953  005F7E  6F94               	movwf	(_doModeVerbose$1191+1)& (0+255),b
 12954  005F80  0E78               	movlw	low STR_57
 12955  005F82  D004               	goto	L7
 12956  005F84                     l13910:
 12957                           
 12958                           ; BSR set to: 0
 12959  005F84  0E7B               	movlw	high STR_56
 12960  005F86  0102               	movlb	2	; () banked
 12961  005F88  6F94               	movwf	(_doModeVerbose$1191+1)& (0+255),b
 12962  005F8A  0E7C               	movlw	low STR_56
 12963  005F8C                     L7:
 12964  005F8C  6F93               	movwf	_doModeVerbose$1191& (0+255),b
 12965                           
 12966                           ; BSR set to: 2
 12967  005F8E  0E01               	movlw	high _wrkbuf
 12968  005F90  0100               	movlb	0	; () banked
 12969  005F92  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12970  005F94  0E77               	movlw	low _wrkbuf
 12971  005F96  6F76               	movwf	?_sprintf& (0+255),b
 12972  005F98  C293  F078         	movff	_doModeVerbose$1191,?_sprintf+2
 12973  005F9C  C294  F079         	movff	_doModeVerbose$1191+1,?_sprintf+3
 12974  005FA0  C2AF  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 12975  005FA4  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12976  005FA6  EC3D  F028         	call	_sprintf	;wreg free
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;main.c: 760: putsUSART(wrkbuf);
 12980  005FAA  0E01               	movlw	high _wrkbuf
 12981  005FAC  0100               	movlb	0	; () banked
 12982  005FAE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12983  005FB0  0E77               	movlw	low _wrkbuf
 12984  005FB2  6F61               	movwf	?_putsUSART& (0+255),b
 12985  005FB4  ECA8  F00D         	call	_putsUSART	;wreg free
 12986  005FB8                     l555:
 12987  005FB8  A2AC               	btfss	4012,1,c	;volatile
 12988  005FBA  D7FE               	goto	l555
 12989                           
 12990                           ;main.c: 762: putsUSART((char *) "Value for reg ");
 12991  005FBC  0E7B               	movlw	high STR_58
 12992  005FBE  0100               	movlb	0	; () banked
 12993  005FC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12994  005FC2  0E3D               	movlw	low STR_58
 12995  005FC4  6F61               	movwf	?_putsUSART& (0+255),b
 12996  005FC6  ECA8  F00D         	call	_putsUSART	;wreg free
 12997                           
 12998                           ;main.c: 763: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12999  005FCA  0100               	movlb	0	; () banked
 13000  005FCC  67E5               	tstfsz	_bHex& (0+255),b
 13001  005FCE  D005               	goto	l13922
 13002                           
 13003                           ; BSR set to: 0
 13004  005FD0  0E7C               	movlw	high STR_60
 13005  005FD2  0102               	movlb	2	; () banked
 13006  005FD4  6F96               	movwf	(_doModeVerbose$1204+1)& (0+255),b
 13007  005FD6  0EED               	movlw	low STR_60
 13008  005FD8  D004               	goto	L8
 13009  005FDA                     l13922:
 13010                           
 13011                           ; BSR set to: 0
 13012  005FDA  0E7C               	movlw	high STR_59
 13013  005FDC  0102               	movlb	2	; () banked
 13014  005FDE  6F96               	movwf	(_doModeVerbose$1204+1)& (0+255),b
 13015  005FE0  0E57               	movlw	low STR_59
 13016  005FE2                     L8:
 13017  005FE2  6F95               	movwf	_doModeVerbose$1204& (0+255),b
 13018                           
 13019                           ; BSR set to: 2
 13020  005FE4  0E01               	movlw	high _wrkbuf
 13021  005FE6  0100               	movlb	0	; () banked
 13022  005FE8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13023  005FEA  0E77               	movlw	low _wrkbuf
 13024  005FEC  6F76               	movwf	?_sprintf& (0+255),b
 13025  005FEE  C295  F078         	movff	_doModeVerbose$1204,?_sprintf+2
 13026  005FF2  C296  F079         	movff	_doModeVerbose$1204+1,?_sprintf+3
 13027  005FF6  C2B1  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13028  005FFA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13029  005FFC  EC3D  F028         	call	_sprintf	;wreg free
 13030                           
 13031                           ; BSR set to: 0
 13032                           ;main.c: 764: putsUSART(wrkbuf);
 13033  006000  0E01               	movlw	high _wrkbuf
 13034  006002  0100               	movlb	0	; () banked
 13035  006004  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13036  006006  0E77               	movlw	low _wrkbuf
 13037  006008  6F61               	movwf	?_putsUSART& (0+255),b
 13038  00600A  ECA8  F00D         	call	_putsUSART	;wreg free
 13039  00600E                     l562:
 13040  00600E  A2AC               	btfss	4012,1,c	;volatile
 13041  006010  D7FE               	goto	l562
 13042                           
 13043                           ;main.c: 766: WriteUSART(':');
 13044  006012  0E3A               	movlw	58
 13045  006014  ECF3  F00A         	call	_WriteUSART
 13046                           
 13047                           ;main.c: 767: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13048  006018  0100               	movlb	0	; () banked
 13049  00601A  67E5               	tstfsz	_bHex& (0+255),b
 13050  00601C  D005               	goto	l13934
 13051                           
 13052                           ; BSR set to: 0
 13053  00601E  0E7C               	movlw	high STR_60
 13054  006020  0102               	movlb	2	; () banked
 13055  006022  6F98               	movwf	(_doModeVerbose$1208+1)& (0+255),b
 13056  006024  0EED               	movlw	low STR_60
 13057  006026  D004               	goto	L9
 13058  006028                     l13934:
 13059                           
 13060                           ; BSR set to: 0
 13061  006028  0E7C               	movlw	high STR_59
 13062  00602A  0102               	movlb	2	; () banked
 13063  00602C  6F98               	movwf	(_doModeVerbose$1208+1)& (0+255),b
 13064  00602E  0E57               	movlw	low STR_59
 13065  006030                     L9:
 13066  006030  6F97               	movwf	_doModeVerbose$1208& (0+255),b
 13067                           
 13068                           ; BSR set to: 2
 13069  006032  0E01               	movlw	high _wrkbuf
 13070  006034  0100               	movlb	0	; () banked
 13071  006036  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13072  006038  0E77               	movlw	low _wrkbuf
 13073  00603A  6F76               	movwf	?_sprintf& (0+255),b
 13074  00603C  C297  F078         	movff	_doModeVerbose$1208,?_sprintf+2
 13075  006040  C298  F079         	movff	_doModeVerbose$1208+1,?_sprintf+3
 13076  006044  EC21  F036         	call	PL40	;call to abstracted procedure
 13077  006048  EC3D  F028         	call	_sprintf	;wreg free
 13078                           
 13079                           ; BSR set to: 0
 13080                           ;main.c: 768: putsUSART(wrkbuf);
 13081  00604C  0E01               	movlw	high _wrkbuf
 13082  00604E  0100               	movlb	0	; () banked
 13083  006050  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13084  006052  0E77               	movlw	low _wrkbuf
 13085  006054  6F61               	movwf	?_putsUSART& (0+255),b
 13086  006056  ECA8  F00D         	call	_putsUSART	;wreg free
 13087                           
 13088                           ;main.c: 769: putsUSART((char *) " = ");
 13089  00605A  0E7B               	movlw	high (STR_251+4)
 13090  00605C  0100               	movlb	0	; () banked
 13091  00605E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13092  006060  0EDC               	movlw	low (STR_251+4)
 13093  006062  6F61               	movwf	?_putsUSART& (0+255),b
 13094  006064  ECA8  F00D         	call	_putsUSART	;wreg free
 13095                           
 13096                           ;main.c: 770: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 13097  006068  0100               	movlb	0	; () banked
 13098  00606A  67E5               	tstfsz	_bHex& (0+255),b
 13099  00606C  D005               	goto	l13946
 13100                           
 13101                           ; BSR set to: 0
 13102  00606E  0E7C               	movlw	high STR_60
 13103  006070  0102               	movlb	2	; () banked
 13104  006072  6F9A               	movwf	(_doModeVerbose$1213+1)& (0+255),b
 13105  006074  0EED               	movlw	low STR_60
 13106  006076  D004               	goto	L10
 13107  006078                     l13946:
 13108                           
 13109                           ; BSR set to: 0
 13110  006078  0E7C               	movlw	high STR_59
 13111  00607A  0102               	movlb	2	; () banked
 13112  00607C  6F9A               	movwf	(_doModeVerbose$1213+1)& (0+255),b
 13113  00607E  0E57               	movlw	low STR_59
 13114  006080                     L10:
 13115  006080  6F99               	movwf	_doModeVerbose$1213& (0+255),b
 13116                           
 13117                           ; BSR set to: 2
 13118  006082  0E01               	movlw	high _wrkbuf
 13119  006084  0100               	movlb	0	; () banked
 13120  006086  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13121  006088  0E77               	movlw	low _wrkbuf
 13122  00608A  6F76               	movwf	?_sprintf& (0+255),b
 13123  00608C  C299  F078         	movff	_doModeVerbose$1213,?_sprintf+2
 13124  006090  C29A  F079         	movff	_doModeVerbose$1213+1,?_sprintf+3
 13125  006094  C2B5  F07A         	movff	doModeVerbose@value,?_sprintf+4
 13126  006098  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13127  00609A  EC3D  F028         	call	_sprintf	;wreg free
 13128                           
 13129                           ; BSR set to: 0
 13130                           ;main.c: 771: putsUSART(wrkbuf);
 13131  00609E  0E01               	movlw	high _wrkbuf
 13132  0060A0  0100               	movlb	0	; () banked
 13133  0060A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13134  0060A4  0E77               	movlw	low _wrkbuf
 13135  0060A6  6F61               	movwf	?_putsUSART& (0+255),b
 13136  0060A8  ECA8  F00D         	call	_putsUSART	;wreg free
 13137  0060AC                     l573:
 13138  0060AC  A2AC               	btfss	4012,1,c	;volatile
 13139  0060AE  D7FE               	goto	l573
 13140                           
 13141                           ;main.c: 773: putsUSART("\t\'");
 13142  0060B0  0E7C               	movlw	high STR_66
 13143  0060B2  0100               	movlb	0	; () banked
 13144  0060B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13145  0060B6  0EE1               	movlw	low STR_66
 13146  0060B8  6F61               	movwf	?_putsUSART& (0+255),b
 13147  0060BA  ECA8  F00D         	call	_putsUSART	;wreg free
 13148                           
 13149                           ;main.c: 774: if ((value > 32) && (value < 127)) {
 13150  0060BE  0E20               	movlw	32
 13151  0060C0  0102               	movlb	2	; () banked
 13152  0060C2  65B5               	cpfsgt	doModeVerbose@value& (0+255),b
 13153  0060C4  D007               	goto	l13960
 13154                           
 13155                           ; BSR set to: 2
 13156  0060C6  0E7F               	movlw	127
 13157  0060C8  61B5               	cpfslt	doModeVerbose@value& (0+255),b
 13158  0060CA  D004               	goto	l13960
 13159                           
 13160                           ; BSR set to: 2
 13161                           ;main.c: 775: WriteUSART(value);
 13162  0060CC  51B5               	movf	doModeVerbose@value& (0+255),w,b
 13163  0060CE  ECF3  F00A         	call	_WriteUSART
 13164                           
 13165                           ;main.c: 776: }
 13166  0060D2  D003               	goto	l578
 13167  0060D4                     l13960:
 13168                           
 13169                           ; BSR set to: 2
 13170                           ;main.c: 777: else {
 13171                           ;main.c: 778: WriteUSART('.');
 13172  0060D4  0E2E               	movlw	46
 13173  0060D6  ECF3  F00A         	call	_WriteUSART
 13174  0060DA                     l578:
 13175  0060DA  A2AC               	btfss	4012,1,c	;volatile
 13176  0060DC  D7FE               	goto	l578
 13177                           
 13178                           ;main.c: 781: putsUSART("\' \t");
 13179  0060DE  0E7C               	movlw	high STR_67
 13180  0060E0  0100               	movlb	0	; () banked
 13181  0060E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13182  0060E4  0ECD               	movlw	low STR_67
 13183  0060E6  6F61               	movwf	?_putsUSART& (0+255),b
 13184  0060E8  ECA8  F00D         	call	_putsUSART	;wreg free
 13185                           
 13186                           ;main.c: 782: printBinary(value);
 13187  0060EC  0102               	movlb	2	; () banked
 13188  0060EE  51B5               	movf	doModeVerbose@value& (0+255),w,b
 13189  0060F0  EC5C  F00D         	call	_printBinary
 13190                           
 13191                           ; BSR set to: 0
 13192                           ;main.c: 783: putsUSART((char *) "\r\n");
 13193  0060F4  0E71               	movlw	high (STR_205+50)
 13194  0060F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13195  0060F8  0EA8               	movlw	low (STR_205+50)
 13196  0060FA  6F61               	movwf	?_putsUSART& (0+255),b
 13197  0060FC  ECA8  F00D         	call	_putsUSART	;wreg free
 13198                           
 13199                           ;main.c: 784: }
 13200  006100  D081               	goto	l14004
 13201  006102                     l550:
 13202                           
 13203                           ;main.c: 785: else {
 13204                           ;main.c: 786: rv = 0;
 13205  006102  0102               	movlb	2	; () banked
 13206  006104  6BA3               	clrf	doModeVerbose@rv& (0+255),b
 13207                           
 13208                           ; BSR set to: 2
 13209                           ;main.c: 787: putsUSART((char *) " nodeid=");
 13210  006106  0E7B               	movlw	high STR_69
 13211  006108  0100               	movlb	0	; () banked
 13212  00610A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13213  00610C  0EAD               	movlw	low STR_69
 13214  00610E  6F61               	movwf	?_putsUSART& (0+255),b
 13215  006110  ECA8  F00D         	call	_putsUSART	;wreg free
 13216                           
 13217                           ;main.c: 788: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 13218  006114  0100               	movlb	0	; () banked
 13219  006116  67E5               	tstfsz	_bHex& (0+255),b
 13220  006118  D005               	goto	l13974
 13221                           
 13222                           ; BSR set to: 0
 13223  00611A  0E7C               	movlw	high STR_57
 13224  00611C  0102               	movlb	2	; () banked
 13225  00611E  6F9C               	movwf	(_doModeVerbose$1221+1)& (0+255),b
 13226  006120  0E78               	movlw	low STR_57
 13227  006122  D004               	goto	L11
 13228  006124                     l13974:
 13229                           
 13230                           ; BSR set to: 0
 13231  006124  0E7B               	movlw	high STR_56
 13232  006126  0102               	movlb	2	; () banked
 13233  006128  6F9C               	movwf	(_doModeVerbose$1221+1)& (0+255),b
 13234  00612A  0E7C               	movlw	low STR_56
 13235  00612C                     L11:
 13236  00612C  6F9B               	movwf	_doModeVerbose$1221& (0+255),b
 13237                           
 13238                           ; BSR set to: 2
 13239  00612E  0E01               	movlw	high _wrkbuf
 13240  006130  0100               	movlb	0	; () banked
 13241  006132  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13242  006134  0E77               	movlw	low _wrkbuf
 13243  006136  6F76               	movwf	?_sprintf& (0+255),b
 13244  006138  C29B  F078         	movff	_doModeVerbose$1221,?_sprintf+2
 13245  00613C  C29C  F079         	movff	_doModeVerbose$1221+1,?_sprintf+3
 13246  006140  C2AF  F07A         	movff	doModeVerbose@nodeid,?_sprintf+4
 13247  006144  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13248  006146  EC3D  F028         	call	_sprintf	;wreg free
 13249                           
 13250                           ; BSR set to: 0
 13251                           ;main.c: 789: putsUSART(wrkbuf);
 13252  00614A  0E01               	movlw	high _wrkbuf
 13253  00614C  0100               	movlb	0	; () banked
 13254  00614E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13255  006150  0E77               	movlw	low _wrkbuf
 13256  006152  6F61               	movwf	?_putsUSART& (0+255),b
 13257  006154  ECA8  F00D         	call	_putsUSART	;wreg free
 13258                           
 13259                           ;main.c: 790: putsUSART((char *) "Unable to read register ");
 13260  006158  0E78               	movlw	high STR_72
 13261  00615A  0100               	movlb	0	; () banked
 13262  00615C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13263  00615E  0EC7               	movlw	low STR_72
 13264  006160  6F61               	movwf	?_putsUSART& (0+255),b
 13265  006162  ECA8  F00D         	call	_putsUSART	;wreg free
 13266  006166                     l586:
 13267  006166  A2AC               	btfss	4012,1,c	;volatile
 13268  006168  D7FE               	goto	l586
 13269                           
 13270                           ;main.c: 792: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13271  00616A  0100               	movlb	0	; () banked
 13272  00616C  67E5               	tstfsz	_bHex& (0+255),b
 13273  00616E  D005               	goto	l13984
 13274                           
 13275                           ; BSR set to: 0
 13276  006170  0E7C               	movlw	high STR_60
 13277  006172  0102               	movlb	2	; () banked
 13278  006174  6F9E               	movwf	(_doModeVerbose$1226+1)& (0+255),b
 13279  006176  0EED               	movlw	low STR_60
 13280  006178  D004               	goto	L12
 13281  00617A                     l13984:
 13282                           
 13283                           ; BSR set to: 0
 13284  00617A  0E7C               	movlw	high STR_59
 13285  00617C  0102               	movlb	2	; () banked
 13286  00617E  6F9E               	movwf	(_doModeVerbose$1226+1)& (0+255),b
 13287  006180  0E57               	movlw	low STR_59
 13288  006182                     L12:
 13289  006182  6F9D               	movwf	_doModeVerbose$1226& (0+255),b
 13290                           
 13291                           ; BSR set to: 2
 13292  006184  0E01               	movlw	high _wrkbuf
 13293  006186  0100               	movlb	0	; () banked
 13294  006188  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13295  00618A  0E77               	movlw	low _wrkbuf
 13296  00618C  6F76               	movwf	?_sprintf& (0+255),b
 13297  00618E  C29D  F078         	movff	_doModeVerbose$1226,?_sprintf+2
 13298  006192  C29E  F079         	movff	_doModeVerbose$1226+1,?_sprintf+3
 13299  006196  C2B1  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13300  00619A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13301  00619C  EC3D  F028         	call	_sprintf	;wreg free
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;main.c: 793: putsUSART(wrkbuf);
 13305  0061A0  0E01               	movlw	high _wrkbuf
 13306  0061A2  0100               	movlb	0	; () banked
 13307  0061A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13308  0061A6  0E77               	movlw	low _wrkbuf
 13309  0061A8  6F61               	movwf	?_putsUSART& (0+255),b
 13310  0061AA  ECA8  F00D         	call	_putsUSART	;wreg free
 13311                           
 13312                           ;main.c: 794: WriteUSART(':');
 13313  0061AE  0E3A               	movlw	58
 13314  0061B0  ECF3  F00A         	call	_WriteUSART
 13315                           
 13316                           ;main.c: 795: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13317  0061B4  0100               	movlb	0	; () banked
 13318  0061B6  67E5               	tstfsz	_bHex& (0+255),b
 13319  0061B8  D005               	goto	l13996
 13320                           
 13321                           ; BSR set to: 0
 13322  0061BA  0E7C               	movlw	high STR_60
 13323  0061BC  0102               	movlb	2	; () banked
 13324  0061BE  6FA0               	movwf	(_doModeVerbose$1230+1)& (0+255),b
 13325  0061C0  0EED               	movlw	low STR_60
 13326  0061C2  D004               	goto	L13
 13327  0061C4                     l13996:
 13328                           
 13329                           ; BSR set to: 0
 13330  0061C4  0E7C               	movlw	high STR_59
 13331  0061C6  0102               	movlb	2	; () banked
 13332  0061C8  6FA0               	movwf	(_doModeVerbose$1230+1)& (0+255),b
 13333  0061CA  0E57               	movlw	low STR_59
 13334  0061CC                     L13:
 13335  0061CC  6F9F               	movwf	_doModeVerbose$1230& (0+255),b
 13336                           
 13337                           ; BSR set to: 2
 13338  0061CE  0E01               	movlw	high _wrkbuf
 13339  0061D0  0100               	movlb	0	; () banked
 13340  0061D2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13341  0061D4  0E77               	movlw	low _wrkbuf
 13342  0061D6  6F76               	movwf	?_sprintf& (0+255),b
 13343  0061D8  C29F  F078         	movff	_doModeVerbose$1230,?_sprintf+2
 13344  0061DC  C2A0  F079         	movff	_doModeVerbose$1230+1,?_sprintf+3
 13345  0061E0  EC21  F036         	call	PL40	;call to abstracted procedure
 13346  0061E4  EC3D  F028         	call	_sprintf	;wreg free
 13347                           
 13348                           ; BSR set to: 0
 13349                           ;main.c: 796: putsUSART(wrkbuf);
 13350  0061E8  0E01               	movlw	high _wrkbuf
 13351  0061EA  0100               	movlb	0	; () banked
 13352  0061EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13353  0061EE  0E77               	movlw	low _wrkbuf
 13354  0061F0  6F61               	movwf	?_putsUSART& (0+255),b
 13355  0061F2  ECA8  F00D         	call	_putsUSART	;wreg free
 13356                           
 13357                           ;main.c: 798: putsUSART((char *) "\r\n");
 13358  0061F6  0E71               	movlw	high (STR_205+50)
 13359  0061F8  0100               	movlb	0	; () banked
 13360  0061FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13361  0061FC  0EA8               	movlw	low (STR_205+50)
 13362  0061FE  6F61               	movwf	?_putsUSART& (0+255),b
 13363  006200  ECA8  F00D         	call	_putsUSART	;wreg free
 13364  006204                     l14004:
 13365  006204  0102               	movlb	2	; () banked
 13366  006206  2BB4               	incf	doModeVerbose@i_1173& (0+255),f,b
 13367  006208                     l14006:
 13368                           
 13369                           ; BSR set to: 2
 13370  006208  51AE               	movf	doModeVerbose@count& (0+255),w,b
 13371  00620A  5DB4               	subwf	doModeVerbose@i_1173& (0+255),w,b
 13372  00620C  E201 D694          	bnc	l13902
 13373                           
 13374                           ; BSR set to: 2
 13375                           ;main.c: 799: }
 13376                           ;main.c: 800: }
 13377                           ;main.c: 802: if (rv) {
 13378  006210  51A3               	movf	doModeVerbose@rv& (0+255),w,b
 13379  006212  E009               	bz	l14012
 13380                           
 13381                           ; BSR set to: 2
 13382                           ;main.c: 803: putsUSART((char *) "+OK\r\n");
 13383  006214  0E7C               	movlw	high STR_9
 13384  006216  0100               	movlb	0	; () banked
 13385  006218  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13386  00621A  0E72               	movlw	low STR_9
 13387  00621C  6F61               	movwf	?_putsUSART& (0+255),b
 13388  00621E  ECA8  F00D         	call	_putsUSART	;wreg free
 13389                           
 13390                           ;main.c: 804: }
 13391  006222  EFA3  F035         	goto	l14310
 13392  006226                     l14012:
 13393                           
 13394                           ; BSR set to: 2
 13395                           ;main.c: 805: else {
 13396                           ;main.c: 806: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13397  006226  0E71               	movlw	high STR_79
 13398  006228  0100               	movlb	0	; () banked
 13399  00622A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13400  00622C  0E40               	movlw	low STR_79
 13401  00622E  6F61               	movwf	?_putsUSART& (0+255),b
 13402  006230  ECA8  F00D         	call	_putsUSART	;wreg free
 13403  006234  EFA3  F035         	goto	l14310
 13404  006238                     l14014:
 13405                           
 13406                           ; BSR set to: 0
 13407                           ;main.c: 812: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13408  006238  0E01               	movlw	high _cmdbuf
 13409  00623A  0100               	movlb	0	; () banked
 13410  00623C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13411  00623E  0E27               	movlw	low _cmdbuf
 13412  006240  6F6D               	movwf	?_stristr& (0+255),b
 13413  006242  0E7C               	movlw	high STR_80
 13414  006244  6F70               	movwf	(?_stristr+3)& (0+255),b
 13415  006246  0EA5               	movlw	low STR_80
 13416  006248  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13417  00624A  EC0D  F010         	call	_stristr	;wreg free
 13418  00624E  0E27               	movlw	low _cmdbuf
 13419  006250  6FCA               	movwf	??_doModeVerbose& (0+255),b
 13420  006252  0E01               	movlw	high _cmdbuf
 13421  006254  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 13422  006256  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13423  006258  E102               	bnz	u18665
 13424  00625A  516D               	movf	?_stristr& (0+255),w,b
 13425  00625C  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 13426  00625E                     u18665:
 13427  00625E  E001 D0B0          	bnz	l14056
 13428                           
 13429                           ; BSR set to: 0
 13430                           ;main.c: 814: uint8_t nodeid;
 13431                           ;main.c: 815: uint8_t page = 0;
 13432  006262  0102               	movlb	2	; () banked
 13433  006264  6BA4               	clrf	doModeVerbose@page_1236& (0+255),b
 13434                           
 13435                           ; BSR set to: 2
 13436                           ;main.c: 816: uint8_t reg;
 13437                           ;main.c: 817: uint8_t value;
 13438                           ;main.c: 819: strcpy(cmdbuf, cmdbuf + 5);
 13439  006266  ECB2  F035         	call	PL2	;call to abstracted procedure
 13440  00626A  EC5A  F00B         	call	_strcpy	;wreg free
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;main.c: 820: char *p = strtok(cmdbuf, " ");
 13444  00626E  0E01               	movlw	high _cmdbuf
 13445  006270  EC0B  F036         	call	PL32	;call to abstracted procedure
 13446  006274  EC11  F011         	call	_strtok	;wreg free
 13447  006278  C06C  F2B8         	movff	?_strtok,doModeVerbose@p_1239
 13448  00627C  C06D  F2B9         	movff	?_strtok+1,doModeVerbose@p_1239+1
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;main.c: 821: if ((0) != p) {
 13452  006280  0102               	movlb	2	; () banked
 13453  006282  51B9               	movf	(doModeVerbose@p_1239+1)& (0+255),w,b
 13454  006284  11B8               	iorwf	doModeVerbose@p_1239& (0+255),w,b
 13455  006286  E00A               	bz	l14026
 13456                           
 13457                           ; BSR set to: 2
 13458                           ;main.c: 822: nodeid = atoi(p);
 13459  006288  C2B8  F066         	movff	doModeVerbose@p_1239,?_atoi
 13460  00628C  C2B9  F067         	movff	doModeVerbose@p_1239+1,?_atoi+1
 13461  006290  EC4F  F019         	call	_atoi	;wreg free
 13462  006294  5166               	movf	?_atoi& (0+255),w,b
 13463  006296  0102               	movlb	2	; () banked
 13464  006298  6F8C               	movwf	doModeVerbose@nodeid_1235& (0+255),b
 13465                           
 13466                           ;main.c: 823: }
 13467  00629A  D009               	goto	l14030
 13468  00629C                     l14026:
 13469                           
 13470                           ; BSR set to: 2
 13471                           ;main.c: 824: else {
 13472                           ;main.c: 825: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13473  00629C  0E79               	movlw	high STR_51
 13474  00629E  0100               	movlb	0	; () banked
 13475  0062A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13476  0062A2  0E10               	movlw	low STR_51
 13477  0062A4  6F61               	movwf	?_putsUSART& (0+255),b
 13478  0062A6  ECA8  F00D         	call	_putsUSART	;wreg free
 13479  0062AA  EFB1  F035         	goto	l541
 13480  0062AE                     l14030:
 13481                           
 13482                           ; BSR set to: 2
 13483                           ;main.c: 827: }
 13484                           ;main.c: 829: if ( (0) != ( p = strtok((0), " ") ) ) {
 13485  0062AE  ECF9  F035         	call	PL26	;call to abstracted procedure
 13486  0062B2  EC11  F011         	call	_strtok	;wreg free
 13487  0062B6  C06C  F2B8         	movff	?_strtok,doModeVerbose@p_1239
 13488  0062BA  C06D  F2B9         	movff	?_strtok+1,doModeVerbose@p_1239+1
 13489  0062BE  0102               	movlb	2	; () banked
 13490  0062C0  51B9               	movf	(doModeVerbose@p_1239+1)& (0+255),w,b
 13491  0062C2  11B8               	iorwf	doModeVerbose@p_1239& (0+255),w,b
 13492  0062C4  E034               	bz	l14038
 13493                           
 13494                           ; BSR set to: 2
 13495                           ;main.c: 831: char *preg;
 13496                           ;main.c: 832: if (preg = strchr(p, ':')) {
 13497  0062C6  C2B8  F060         	movff	doModeVerbose@p_1239,?_strchr
 13498  0062CA  C2B9  F061         	movff	doModeVerbose@p_1239+1,?_strchr+1
 13499  0062CE  0100               	movlb	0	; () banked
 13500  0062D0  6B63               	clrf	(?_strchr+3)& (0+255),b
 13501  0062D2  0E3A               	movlw	58
 13502  0062D4  6F62               	movwf	(?_strchr+2)& (0+255),b
 13503  0062D6  EC8F  F00E         	call	_strchr	;wreg free
 13504  0062DA  C060  F286         	movff	?_strchr,doModeVerbose@preg_1243
 13505  0062DE  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1243+1
 13506  0062E2  0102               	movlb	2	; () banked
 13507  0062E4  5187               	movf	(doModeVerbose@preg_1243+1)& (0+255),w,b
 13508  0062E6  1186               	iorwf	doModeVerbose@preg_1243& (0+255),w,b
 13509  0062E8  E018               	bz	l14036
 13510                           
 13511                           ; BSR set to: 2
 13512                           ;main.c: 833: page = atoi(p);
 13513  0062EA  C2B8  F066         	movff	doModeVerbose@p_1239,?_atoi
 13514  0062EE  C2B9  F067         	movff	doModeVerbose@p_1239+1,?_atoi+1
 13515  0062F2  EC4F  F019         	call	_atoi	;wreg free
 13516  0062F6  5166               	movf	?_atoi& (0+255),w,b
 13517  0062F8  0102               	movlb	2	; () banked
 13518  0062FA  6FA4               	movwf	doModeVerbose@page_1236& (0+255),b
 13519                           
 13520                           ;main.c: 834: reg = atoi(preg + 1);
 13521  0062FC  2986               	incf	doModeVerbose@preg_1243& (0+255),w,b
 13522  0062FE  0100               	movlb	0	; () banked
 13523  006300  6FCA               	movwf	??_doModeVerbose& (0+255),b
 13524  006302  0E00               	movlw	0
 13525  006304  0102               	movlb	2	; () banked
 13526  006306  2187               	addwfc	(doModeVerbose@preg_1243+1)& (0+255),w,b
 13527  006308  0100               	movlb	0	; () banked
 13528  00630A  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 13529  00630C  C0CA  F066         	movff	??_doModeVerbose,?_atoi
 13530  006310  C0CB  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13531  006314  EC4F  F019         	call	_atoi	;wreg free
 13532  006318  D006               	goto	L14
 13533  00631A                     l14036:
 13534                           
 13535                           ; BSR set to: 2
 13536                           ;main.c: 836: else {
 13537                           ;main.c: 837: reg = atoi(p);
 13538  00631A  C2B8  F066         	movff	doModeVerbose@p_1239,?_atoi
 13539  00631E  C2B9  F067         	movff	doModeVerbose@p_1239+1,?_atoi+1
 13540  006322  EC4F  F019         	call	_atoi	;wreg free
 13541  006326                     L14:
 13542  006326  5166               	movf	?_atoi& (0+255),w,b
 13543  006328  0102               	movlb	2	; () banked
 13544  00632A  6FA5               	movwf	doModeVerbose@reg_1237& (0+255),b
 13545  00632C  D009               	goto	l14042
 13546  00632E                     l14038:
 13547                           
 13548                           ; BSR set to: 2
 13549                           ;main.c: 841: else {
 13550                           ;main.c: 842: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13551  00632E  0E77               	movlw	high STR_53
 13552  006330  0100               	movlb	0	; () banked
 13553  006332  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13554  006334  0E72               	movlw	low STR_53
 13555  006336  6F61               	movwf	?_putsUSART& (0+255),b
 13556  006338  ECA8  F00D         	call	_putsUSART	;wreg free
 13557  00633C  EFB1  F035         	goto	l541
 13558  006340                     l14042:
 13559                           
 13560                           ; BSR set to: 2
 13561                           ;main.c: 844: }
 13562                           ;main.c: 847: if ((0) != (p = strtok((0), " "))) {
 13563  006340  ECF9  F035         	call	PL26	;call to abstracted procedure
 13564  006344  EC11  F011         	call	_strtok	;wreg free
 13565  006348  C06C  F2B8         	movff	?_strtok,doModeVerbose@p_1239
 13566  00634C  C06D  F2B9         	movff	?_strtok+1,doModeVerbose@p_1239+1
 13567  006350  0102               	movlb	2	; () banked
 13568  006352  51B9               	movf	(doModeVerbose@p_1239+1)& (0+255),w,b
 13569  006354  11B8               	iorwf	doModeVerbose@p_1239& (0+255),w,b
 13570  006356  E00A               	bz	l14046
 13571                           
 13572                           ; BSR set to: 2
 13573                           ;main.c: 848: value = atoi(p);
 13574  006358  C2B8  F066         	movff	doModeVerbose@p_1239,?_atoi
 13575  00635C  C2B9  F067         	movff	doModeVerbose@p_1239+1,?_atoi+1
 13576  006360  EC4F  F019         	call	_atoi	;wreg free
 13577  006364  5166               	movf	?_atoi& (0+255),w,b
 13578  006366  0102               	movlb	2	; () banked
 13579  006368  6FAD               	movwf	doModeVerbose@value_1238& (0+255),b
 13580                           
 13581                           ;main.c: 849: }
 13582  00636A  D008               	goto	l14050
 13583  00636C                     l14046:
 13584                           
 13585                           ; BSR set to: 2
 13586                           ;main.c: 850: else {
 13587                           ;main.c: 851: putsUSART((char *) "-ERROR - Need a value\r\n");
 13588  00636C  0E79               	movlw	high STR_86
 13589  00636E  0100               	movlb	0	; () banked
 13590  006370  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13591  006372  0E40               	movlw	low STR_86
 13592  006374  6F61               	movwf	?_putsUSART& (0+255),b
 13593  006376  ECA8  F00D         	call	_putsUSART	;wreg free
 13594  00637A  D3F3               	goto	l541
 13595  00637C                     l14050:
 13596                           
 13597                           ; BSR set to: 2
 13598                           ;main.c: 853: }
 13599                           ;main.c: 855: if (writeRegisterExtended(nodeid,
 13600                           ;main.c: 856: page,
 13601                           ;main.c: 857: reg,
 13602                           ;main.c: 858: rwtimeout,
 13603                           ;main.c: 859: &value)) {
 13604  00637C  0100               	movlb	0	; () banked
 13605  00637E  C2A4  F0B6         	movff	doModeVerbose@page_1236,?_writeRegisterExtended
 13606  006382  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13607  006384  C2A5  F0B8         	movff	doModeVerbose@reg_1237,?_writeRegisterExtended+2
 13608  006388  C037  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 13609  00638C  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13610  00638E  0E02               	movlw	high doModeVerbose@value_1238
 13611  006390  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13612  006392  0EAD               	movlw	low doModeVerbose@value_1238
 13613  006394  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13614  006396  0102               	movlb	2	; () banked
 13615  006398  518C               	movf	doModeVerbose@nodeid_1235& (0+255),w,b
 13616  00639A  ECE1  F017         	call	_writeRegisterExtended
 13617  00639E  0900               	iorlw	0
 13618  0063A0  E008               	bz	l14054
 13619                           
 13620                           ;main.c: 860: putsUSART((char *) "+OK - Value written successfully\r\n");
 13621  0063A2  0E76               	movlw	high STR_87
 13622  0063A4  0100               	movlb	0	; () banked
 13623  0063A6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13624  0063A8  0EA9               	movlw	low STR_87
 13625  0063AA  6F61               	movwf	?_putsUSART& (0+255),b
 13626  0063AC  ECA8  F00D         	call	_putsUSART	;wreg free
 13627                           
 13628                           ;main.c: 861: }
 13629  0063B0  D3CA               	goto	l14310
 13630  0063B2                     l14054:
 13631                           
 13632                           ;main.c: 862: else {
 13633                           ;main.c: 863: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13634  0063B2  0E77               	movlw	high STR_88
 13635  0063B4  0100               	movlb	0	; () banked
 13636  0063B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13637  0063B8  0E51               	movlw	low STR_88
 13638  0063BA  6F61               	movwf	?_putsUSART& (0+255),b
 13639  0063BC  ECA8  F00D         	call	_putsUSART	;wreg free
 13640  0063C0  D3C2               	goto	l14310
 13641  0063C2                     l14056:
 13642                           
 13643                           ; BSR set to: 0
 13644                           ;main.c: 869: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13645  0063C2  0E01               	movlw	high _cmdbuf
 13646  0063C4  0100               	movlb	0	; () banked
 13647  0063C6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13648  0063C8  0E27               	movlw	low _cmdbuf
 13649  0063CA  6F6D               	movwf	?_stristr& (0+255),b
 13650  0063CC  0E7C               	movlw	high STR_89
 13651  0063CE  6F70               	movwf	(?_stristr+3)& (0+255),b
 13652  0063D0  0EB4               	movlw	low STR_89
 13653  0063D2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13654  0063D4  EC0D  F010         	call	_stristr	;wreg free
 13655  0063D8  0E27               	movlw	low _cmdbuf
 13656  0063DA  6FCA               	movwf	??_doModeVerbose& (0+255),b
 13657  0063DC  0E01               	movlw	high _cmdbuf
 13658  0063DE  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 13659  0063E0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13660  0063E2  E102               	bnz	u18725
 13661  0063E4  516D               	movf	?_stristr& (0+255),w,b
 13662  0063E6  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 13663  0063E8                     u18725:
 13664  0063E8  E151               	bnz	l14084
 13665                           
 13666                           ; BSR set to: 0
 13667                           ;main.c: 870: uint8_t nodeid;
 13668                           ;main.c: 872: strcpy(cmdbuf, cmdbuf + 5);
 13669  0063EA  DBBC               	call	PL2	;call to abstracted procedure
 13670  0063EC  EC5A  F00B         	call	_strcpy	;wreg free
 13671                           
 13672                           ; BSR set to: 0
 13673                           ;main.c: 873: nodeid = atoi(cmdbuf);
 13674  0063F0  0E01               	movlw	high _cmdbuf
 13675  0063F2  0100               	movlb	0	; () banked
 13676  0063F4  6F67               	movwf	(?_atoi+1)& (0+255),b
 13677  0063F6  0E27               	movlw	low _cmdbuf
 13678  0063F8  6F66               	movwf	?_atoi& (0+255),b
 13679  0063FA  EC4F  F019         	call	_atoi	;wreg free
 13680  0063FE  5166               	movf	?_atoi& (0+255),w,b
 13681  006400  0102               	movlb	2	; () banked
 13682  006402  6FB3               	movwf	doModeVerbose@nodeid_1250& (0+255),b
 13683                           
 13684                           ; BSR set to: 2
 13685                           ;main.c: 875: putsUSART((char *) "Info for node id = ");
 13686  006404  0E7A               	movlw	high STR_90
 13687  006406  0100               	movlb	0	; () banked
 13688  006408  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13689  00640A  0E8A               	movlw	low STR_90
 13690  00640C  6F61               	movwf	?_putsUSART& (0+255),b
 13691  00640E  ECA8  F00D         	call	_putsUSART	;wreg free
 13692                           
 13693                           ;main.c: 876: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13694  006412  0100               	movlb	0	; () banked
 13695  006414  67E5               	tstfsz	_bHex& (0+255),b
 13696  006416  D005               	goto	l14068
 13697                           
 13698                           ; BSR set to: 0
 13699  006418  0E7C               	movlw	high STR_60
 13700  00641A  0102               	movlb	2	; () banked
 13701  00641C  6FA2               	movwf	(_doModeVerbose$1255+1)& (0+255),b
 13702  00641E  0EED               	movlw	low STR_60
 13703  006420  D004               	goto	L15
 13704  006422                     l14068:
 13705                           
 13706                           ; BSR set to: 0
 13707  006422  0E7C               	movlw	high STR_59
 13708  006424  0102               	movlb	2	; () banked
 13709  006426  6FA2               	movwf	(_doModeVerbose$1255+1)& (0+255),b
 13710  006428  0E57               	movlw	low STR_59
 13711  00642A                     L15:
 13712  00642A  6FA1               	movwf	_doModeVerbose$1255& (0+255),b
 13713                           
 13714                           ; BSR set to: 2
 13715  00642C  0E01               	movlw	high _wrkbuf
 13716  00642E  0100               	movlb	0	; () banked
 13717  006430  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13718  006432  0E77               	movlw	low _wrkbuf
 13719  006434  6F76               	movwf	?_sprintf& (0+255),b
 13720  006436  C2A1  F078         	movff	_doModeVerbose$1255,?_sprintf+2
 13721  00643A  C2A2  F079         	movff	_doModeVerbose$1255+1,?_sprintf+3
 13722  00643E  C2B3  F07A         	movff	doModeVerbose@nodeid_1250,?_sprintf+4
 13723  006442  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13724  006444  EC3D  F028         	call	_sprintf	;wreg free
 13725                           
 13726                           ; BSR set to: 0
 13727                           ;main.c: 877: putsUSART(wrkbuf);
 13728  006448  0E01               	movlw	high _wrkbuf
 13729  00644A  0100               	movlb	0	; () banked
 13730  00644C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13731  00644E  0E77               	movlw	low _wrkbuf
 13732  006450  6F61               	movwf	?_putsUSART& (0+255),b
 13733  006452  ECA8  F00D         	call	_putsUSART	;wreg free
 13734                           
 13735                           ;main.c: 878: putsUSART((char *) "\r\n");
 13736  006456  0E71               	movlw	high (STR_205+50)
 13737  006458  0100               	movlb	0	; () banked
 13738  00645A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13739  00645C  0EA8               	movlw	low (STR_205+50)
 13740  00645E  6F61               	movwf	?_putsUSART& (0+255),b
 13741  006460  ECA8  F00D         	call	_putsUSART	;wreg free
 13742                           
 13743                           ;main.c: 879: printNodeFirmwareVersion(nodeid);
 13744  006464  0102               	movlb	2	; () banked
 13745  006466  51B3               	movf	doModeVerbose@nodeid_1250& (0+255),w,b
 13746  006468  EC4F  F015         	call	_printNodeFirmwareVersion
 13747                           
 13748                           ;main.c: 880: printGUID(nodeid);
 13749  00646C  0102               	movlb	2	; () banked
 13750  00646E  51B3               	movf	doModeVerbose@nodeid_1250& (0+255),w,b
 13751  006470  ECCE  F018         	call	_printGUID
 13752                           
 13753                           ;main.c: 881: printMDF(nodeid);
 13754  006474  0102               	movlb	2	; () banked
 13755  006476  51B3               	movf	doModeVerbose@nodeid_1250& (0+255),w,b
 13756  006478  EC5A  F011         	call	_printMDF
 13757                           
 13758                           ;main.c: 882: putsUSART((char *) "+OK\r\n");
 13759  00647C  0E7C               	movlw	high STR_9
 13760  00647E  0100               	movlb	0	; () banked
 13761  006480  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13762  006482  0E72               	movlw	low STR_9
 13763  006484  6F61               	movwf	?_putsUSART& (0+255),b
 13764  006486  ECA8  F00D         	call	_putsUSART	;wreg free
 13765                           
 13766                           ;main.c: 883: }
 13767  00648A  D35D               	goto	l14310
 13768  00648C                     l14084:
 13769                           
 13770                           ; BSR set to: 0
 13771                           ;main.c: 887: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13772  00648C  0E01               	movlw	high _cmdbuf
 13773  00648E  0100               	movlb	0	; () banked
 13774  006490  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13775  006492  0E27               	movlw	low _cmdbuf
 13776  006494  6F6D               	movwf	?_stristr& (0+255),b
 13777  006496  0E7C               	movlw	high STR_95
 13778  006498  6F70               	movwf	(?_stristr+3)& (0+255),b
 13779  00649A  0E49               	movlw	low STR_95
 13780  00649C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13781  00649E  EC0D  F010         	call	_stristr	;wreg free
 13782  0064A2  0E27               	movlw	low _cmdbuf
 13783  0064A4  6FCA               	movwf	??_doModeVerbose& (0+255),b
 13784  0064A6  0E01               	movlw	high _cmdbuf
 13785  0064A8  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 13786  0064AA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13787  0064AC  E102               	bnz	u18745
 13788  0064AE  516D               	movf	?_stristr& (0+255),w,b
 13789  0064B0  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 13790  0064B2                     u18745:
 13791  0064B2  E001 D0D5          	bnz	l14152
 13792                           
 13793                           ; BSR set to: 0
 13794                           ;main.c: 889: uint8_t filterno;
 13795                           ;main.c: 890: uint8_t filter_priority;
 13796                           ;main.c: 891: uint16_t filter_class;
 13797                           ;main.c: 892: uint8_t filter_type;
 13798                           ;main.c: 893: uint8_t filter_nodeid;
 13799                           ;main.c: 895: strcpy(cmdbuf, cmdbuf + 8);
 13800  0064B6  0E01               	movlw	high _cmdbuf
 13801  0064B8  DB6A               	call	PL6	;call to abstracted procedure
 13802  0064BA  EC5A  F00B         	call	_strcpy	;wreg free
 13803                           
 13804                           ; BSR set to: 0
 13805                           ;main.c: 896: char *p = strtok(cmdbuf, ",");
 13806  0064BE  DBA1               	call	PL28	;call to abstracted procedure
 13807  0064C0  EC11  F011         	call	_strtok	;wreg free
 13808  0064C4  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1264
 13809  0064C8  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1264+1
 13810                           
 13811                           ; BSR set to: 0
 13812                           ;main.c: 897: if ((0) != p) {
 13813  0064CC  0102               	movlb	2	; () banked
 13814  0064CE  51BE               	movf	(doModeVerbose@p_1264+1)& (0+255),w,b
 13815  0064D0  11BD               	iorwf	doModeVerbose@p_1264& (0+255),w,b
 13816  0064D2  E014               	bz	l14100
 13817                           
 13818                           ; BSR set to: 2
 13819                           ;main.c: 898: filterno = atoi(p);
 13820  0064D4  C2BD  F066         	movff	doModeVerbose@p_1264,?_atoi
 13821  0064D8  C2BE  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 13822  0064DC  EC4F  F019         	call	_atoi	;wreg free
 13823  0064E0  5166               	movf	?_atoi& (0+255),w,b
 13824  0064E2  0102               	movlb	2	; () banked
 13825  0064E4  6FAA               	movwf	doModeVerbose@filterno& (0+255),b
 13826                           
 13827                           ; BSR set to: 2
 13828                           ;main.c: 899: if (filterno > 15) {
 13829  0064E6  0E0F               	movlw	15
 13830  0064E8  65AA               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13831  0064EA  D010               	goto	l14104
 13832                           
 13833                           ; BSR set to: 2
 13834                           ;main.c: 900: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13835  0064EC  0E6F               	movlw	high STR_97
 13836  0064EE  0100               	movlb	0	; () banked
 13837  0064F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13838  0064F2  0E00               	movlw	low STR_97
 13839  0064F4  6F61               	movwf	?_putsUSART& (0+255),b
 13840  0064F6  ECA8  F00D         	call	_putsUSART	;wreg free
 13841  0064FA  D333               	goto	l541
 13842  0064FC                     l14100:
 13843                           
 13844                           ; BSR set to: 2
 13845                           ;main.c: 904: else {
 13846                           ;main.c: 905: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13847  0064FC  0E74               	movlw	high STR_98
 13848  0064FE  0100               	movlb	0	; () banked
 13849  006500  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13850  006502  0EE3               	movlw	low STR_98
 13851  006504  6F61               	movwf	?_putsUSART& (0+255),b
 13852  006506  ECA8  F00D         	call	_putsUSART	;wreg free
 13853  00650A  D32B               	goto	l541
 13854  00650C                     l14104:
 13855                           
 13856                           ; BSR set to: 2
 13857                           ;main.c: 907: }
 13858                           ;main.c: 910: p = strtok((0), ",");
 13859  00650C  0100               	movlb	0	; () banked
 13860  00650E  DB38               	call	PL4	;call to abstracted procedure
 13861  006510  EC11  F011         	call	_strtok	;wreg free
 13862  006514  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1264
 13863  006518  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1264+1
 13864                           
 13865                           ; BSR set to: 0
 13866                           ;main.c: 911: if ((0) != p) {
 13867  00651C  0102               	movlb	2	; () banked
 13868  00651E  51BE               	movf	(doModeVerbose@p_1264+1)& (0+255),w,b
 13869  006520  11BD               	iorwf	doModeVerbose@p_1264& (0+255),w,b
 13870  006522  E00A               	bz	l14110
 13871                           
 13872                           ; BSR set to: 2
 13873                           ;main.c: 912: filter_priority = atoi(p);
 13874  006524  C2BD  F066         	movff	doModeVerbose@p_1264,?_atoi
 13875  006528  C2BE  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 13876  00652C  EC4F  F019         	call	_atoi	;wreg free
 13877  006530  5166               	movf	?_atoi& (0+255),w,b
 13878  006532  0102               	movlb	2	; () banked
 13879  006534  6F8D               	movwf	doModeVerbose@filter_priority& (0+255),b
 13880                           
 13881                           ;main.c: 913: }
 13882  006536  D008               	goto	l14114
 13883  006538                     l14110:
 13884                           
 13885                           ; BSR set to: 2
 13886                           ;main.c: 914: else {
 13887                           ;main.c: 915: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13888  006538  0E74               	movlw	high STR_100
 13889  00653A  0100               	movlb	0	; () banked
 13890  00653C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13891  00653E  0E18               	movlw	low STR_100
 13892  006540  6F61               	movwf	?_putsUSART& (0+255),b
 13893  006542  ECA8  F00D         	call	_putsUSART	;wreg free
 13894  006546  D30D               	goto	l541
 13895  006548                     l14114:
 13896                           
 13897                           ; BSR set to: 2
 13898                           ;main.c: 917: }
 13899                           ;main.c: 920: p = strtok((0), ",");
 13900  006548  0100               	movlb	0	; () banked
 13901  00654A  DB1A               	call	PL4	;call to abstracted procedure
 13902  00654C  EC11  F011         	call	_strtok	;wreg free
 13903  006550  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1264
 13904  006554  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1264+1
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;main.c: 921: if ((0) != p) {
 13908  006558  0102               	movlb	2	; () banked
 13909  00655A  51BE               	movf	(doModeVerbose@p_1264+1)& (0+255),w,b
 13910  00655C  11BD               	iorwf	doModeVerbose@p_1264& (0+255),w,b
 13911  00655E  E00B               	bz	l14120
 13912                           
 13913                           ; BSR set to: 2
 13914                           ;main.c: 922: filter_class = atoi(p);
 13915  006560  C2BD  F066         	movff	doModeVerbose@p_1264,?_atoi
 13916  006564  C2BE  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 13917  006568  EC4F  F019         	call	_atoi	;wreg free
 13918  00656C  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13919  006570  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13920                           
 13921                           ;main.c: 923: }
 13922  006574  D008               	goto	l14124
 13923  006576                     l14120:
 13924                           
 13925                           ; BSR set to: 2
 13926                           ;main.c: 924: else {
 13927                           ;main.c: 925: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13928  006576  0E75               	movlw	high STR_102
 13929  006578  0100               	movlb	0	; () banked
 13930  00657A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13931  00657C  0E7F               	movlw	low STR_102
 13932  00657E  6F61               	movwf	?_putsUSART& (0+255),b
 13933  006580  ECA8  F00D         	call	_putsUSART	;wreg free
 13934  006584  D2EE               	goto	l541
 13935  006586                     l14124:
 13936                           
 13937                           ; BSR set to: 0
 13938                           ;main.c: 927: }
 13939                           ;main.c: 930: p = strtok((0), ",");
 13940  006586  DAFC               	call	PL4	;call to abstracted procedure
 13941  006588  EC11  F011         	call	_strtok	;wreg free
 13942  00658C  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1264
 13943  006590  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1264+1
 13944                           
 13945                           ; BSR set to: 0
 13946                           ;main.c: 931: if ((0) != p) {
 13947  006594  0102               	movlb	2	; () banked
 13948  006596  51BE               	movf	(doModeVerbose@p_1264+1)& (0+255),w,b
 13949  006598  11BD               	iorwf	doModeVerbose@p_1264& (0+255),w,b
 13950  00659A  E00A               	bz	l14130
 13951                           
 13952                           ; BSR set to: 2
 13953                           ;main.c: 932: filter_type = atoi(p);
 13954  00659C  C2BD  F066         	movff	doModeVerbose@p_1264,?_atoi
 13955  0065A0  C2BE  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 13956  0065A4  EC4F  F019         	call	_atoi	;wreg free
 13957  0065A8  5166               	movf	?_atoi& (0+255),w,b
 13958  0065AA  0102               	movlb	2	; () banked
 13959  0065AC  6F8E               	movwf	doModeVerbose@filter_type& (0+255),b
 13960                           
 13961                           ;main.c: 933: }
 13962  0065AE  D008               	goto	l14134
 13963  0065B0                     l14130:
 13964                           
 13965                           ; BSR set to: 2
 13966                           ;main.c: 934: else {
 13967                           ;main.c: 935: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13968  0065B0  0E75               	movlw	high STR_104
 13969  0065B2  0100               	movlb	0	; () banked
 13970  0065B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13971  0065B6  0ECD               	movlw	low STR_104
 13972  0065B8  6F61               	movwf	?_putsUSART& (0+255),b
 13973  0065BA  ECA8  F00D         	call	_putsUSART	;wreg free
 13974  0065BE  D2D1               	goto	l541
 13975  0065C0                     l14134:
 13976                           
 13977                           ; BSR set to: 2
 13978                           ;main.c: 937: }
 13979                           ;main.c: 940: p = strtok((0), ",");
 13980  0065C0  0100               	movlb	0	; () banked
 13981  0065C2  DADE               	call	PL4	;call to abstracted procedure
 13982  0065C4  EC11  F011         	call	_strtok	;wreg free
 13983  0065C8  C06C  F2BD         	movff	?_strtok,doModeVerbose@p_1264
 13984  0065CC  C06D  F2BE         	movff	?_strtok+1,doModeVerbose@p_1264+1
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;main.c: 941: if ((0) != p) {
 13988  0065D0  0102               	movlb	2	; () banked
 13989  0065D2  51BE               	movf	(doModeVerbose@p_1264+1)& (0+255),w,b
 13990  0065D4  11BD               	iorwf	doModeVerbose@p_1264& (0+255),w,b
 13991  0065D6  E00A               	bz	l14140
 13992                           
 13993                           ; BSR set to: 2
 13994                           ;main.c: 942: filter_nodeid = atoi(p);
 13995  0065D8  C2BD  F066         	movff	doModeVerbose@p_1264,?_atoi
 13996  0065DC  C2BE  F067         	movff	doModeVerbose@p_1264+1,?_atoi+1
 13997  0065E0  EC4F  F019         	call	_atoi	;wreg free
 13998  0065E4  5166               	movf	?_atoi& (0+255),w,b
 13999  0065E6  0102               	movlb	2	; () banked
 14000  0065E8  6F8F               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 14001                           
 14002                           ;main.c: 943: }
 14003  0065EA  D008               	goto	l14144
 14004  0065EC                     l14140:
 14005                           
 14006                           ; BSR set to: 2
 14007                           ;main.c: 944: else {
 14008                           ;main.c: 945: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 14009  0065EC  0E74               	movlw	high STR_106
 14010  0065EE  0100               	movlb	0	; () banked
 14011  0065F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14012  0065F2  0E42               	movlw	low STR_106
 14013  0065F4  6F61               	movwf	?_putsUSART& (0+255),b
 14014  0065F6  ECA8  F00D         	call	_putsUSART	;wreg free
 14015  0065FA  D2B3               	goto	l541
 14016  0065FC                     l14144:
 14017                           
 14018                           ; BSR set to: 2
 14019                           ;main.c: 947: }
 14020                           ;main.c: 950: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14021  0065FC  0E80               	movlw	128
 14022  0065FE  EC08  F00B         	call	_ECANSetOperationMode
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;main.c: 952: uint32_t id = ((uint32_t) filter_priority << 26) |
 14026                           ;main.c: 953: ((uint32_t) filter_class << 16) |
 14027                           ;main.c: 954: ((uint32_t) filter_type << 8) |
 14028                           ;main.c: 955: filter_nodeid;
 14029  006602  C28E  F0CA         	movff	doModeVerbose@filter_type,??_doModeVerbose
 14030  006606  DB10               	call	PL36	;call to abstracted procedure
 14031  006608  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 14032  00660A  0100               	movlb	0	; () banked
 14033  00660C  6FCE               	movwf	(??_doModeVerbose+4)& (0+255),b
 14034  00660E  0102               	movlb	2	; () banked
 14035  006610  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 14036  006612  DB30               	call	PL54	;call to abstracted procedure
 14037  006614  C28D  F0D2         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 14038  006618  DAC7               	call	PL8	;call to abstracted procedure
 14039  00661A  518F               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 14040  00661C  0100               	movlb	0	; () banked
 14041  00661E  11DA               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14042  006620  0102               	movlb	2	; () banked
 14043  006622  6F80               	movwf	doModeVerbose@id& (0+255),b
 14044  006624  0100               	movlb	0	; () banked
 14045  006626  51DB               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14046  006628  0102               	movlb	2	; () banked
 14047  00662A  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 14048  00662C  0100               	movlb	0	; () banked
 14049  00662E  51DC               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14050  006630  0102               	movlb	2	; () banked
 14051  006632  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 14052  006634  0100               	movlb	0	; () banked
 14053  006636  51DD               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14054  006638  0102               	movlb	2	; () banked
 14055  00663A  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 14056                           
 14057                           ; BSR set to: 2
 14058                           ;main.c: 956: setFilter(filterno, id);
 14059  00663C  C280  F060         	movff	doModeVerbose@id,?_setFilter
 14060  006640  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 14061  006644  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 14062  006648  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 14063  00664C  51AA               	movf	doModeVerbose@filterno& (0+255),w,b
 14064  00664E  ECBF  F021         	call	_setFilter
 14065                           
 14066                           ; BSR set to: 0
 14067                           ;main.c: 957: putsUSART((char *) "+OK\r\n");
 14068  006652  0E7C               	movlw	high STR_9
 14069  006654  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14070  006656  0E72               	movlw	low STR_9
 14071  006658  6F61               	movwf	?_putsUSART& (0+255),b
 14072  00665A  ECA8  F00D         	call	_putsUSART	;wreg free
 14073                           
 14074                           ;main.c: 958: }
 14075  00665E  D273               	goto	l14310
 14076  006660                     l14152:
 14077                           
 14078                           ; BSR set to: 0
 14079                           ;main.c: 962: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 14080  006660  0E01               	movlw	high _cmdbuf
 14081  006662  0100               	movlb	0	; () banked
 14082  006664  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14083  006666  0E27               	movlw	low _cmdbuf
 14084  006668  6F6D               	movwf	?_stristr& (0+255),b
 14085  00666A  0E7C               	movlw	high STR_108
 14086  00666C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14087  00666E  0EAA               	movlw	low STR_108
 14088  006670  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14089  006672  EC0D  F010         	call	_stristr	;wreg free
 14090  006676  0E27               	movlw	low _cmdbuf
 14091  006678  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14092  00667A  0E01               	movlw	high _cmdbuf
 14093  00667C  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14094  00667E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14095  006680  E102               	bnz	u18825
 14096  006682  516D               	movf	?_stristr& (0+255),w,b
 14097  006684  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 14098  006686                     u18825:
 14099  006686  E001 D0DC          	bnz	l14224
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;main.c: 964: uint8_t maskno;
 14103                           ;main.c: 965: uint8_t mask_priority;
 14104                           ;main.c: 966: uint16_t mask_class;
 14105                           ;main.c: 967: uint8_t mask_type;
 14106                           ;main.c: 968: uint8_t mask_nodeid;
 14107                           ;main.c: 970: strcpy(cmdbuf, cmdbuf + 8);
 14108  00668A  0E01               	movlw	high _cmdbuf
 14109  00668C  DA80               	call	PL6	;call to abstracted procedure
 14110  00668E  EC5A  F00B         	call	_strcpy	;wreg free
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;main.c: 971: char *p = strtok(cmdbuf, ",");
 14114  006692  DAB7               	call	PL28	;call to abstracted procedure
 14115  006694  EC11  F011         	call	_strtok	;wreg free
 14116  006698  C06C  F2BF         	movff	?_strtok,doModeVerbose@p_1284
 14117  00669C  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p_1284+1
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;main.c: 972: if ((0) != p) {
 14121  0066A0  0102               	movlb	2	; () banked
 14122  0066A2  51C0               	movf	(doModeVerbose@p_1284+1)& (0+255),w,b
 14123  0066A4  11BF               	iorwf	doModeVerbose@p_1284& (0+255),w,b
 14124  0066A6  E014               	bz	l14168
 14125                           
 14126                           ; BSR set to: 2
 14127                           ;main.c: 973: maskno = atoi(p);
 14128  0066A8  C2BF  F066         	movff	doModeVerbose@p_1284,?_atoi
 14129  0066AC  C2C0  F067         	movff	doModeVerbose@p_1284+1,?_atoi+1
 14130  0066B0  EC4F  F019         	call	_atoi	;wreg free
 14131  0066B4  5166               	movf	?_atoi& (0+255),w,b
 14132  0066B6  0102               	movlb	2	; () banked
 14133  0066B8  6FAB               	movwf	doModeVerbose@maskno& (0+255),b
 14134                           
 14135                           ; BSR set to: 2
 14136                           ;main.c: 974: if (maskno > 1) {
 14137  0066BA  0E01               	movlw	1
 14138  0066BC  65AB               	cpfsgt	doModeVerbose@maskno& (0+255),b
 14139  0066BE  D010               	goto	l14172
 14140                           
 14141                           ; BSR set to: 2
 14142                           ;main.c: 975: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 14143  0066C0  0E72               	movlw	high STR_110
 14144  0066C2  0100               	movlb	0	; () banked
 14145  0066C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14146  0066C6  0E12               	movlw	low STR_110
 14147  0066C8  6F61               	movwf	?_putsUSART& (0+255),b
 14148  0066CA  ECA8  F00D         	call	_putsUSART	;wreg free
 14149  0066CE  D249               	goto	l541
 14150  0066D0                     l14168:
 14151                           
 14152                           ; BSR set to: 2
 14153                           ;main.c: 979: else {
 14154                           ;main.c: 980: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 14155  0066D0  0E75               	movlw	high STR_111
 14156  0066D2  0100               	movlb	0	; () banked
 14157  0066D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14158  0066D6  0EF3               	movlw	low STR_111
 14159  0066D8  6F61               	movwf	?_putsUSART& (0+255),b
 14160  0066DA  ECA8  F00D         	call	_putsUSART	;wreg free
 14161  0066DE  D241               	goto	l541
 14162  0066E0                     l14172:
 14163                           
 14164                           ; BSR set to: 2
 14165                           ;main.c: 982: }
 14166                           ;main.c: 985: p = strtok((0), ",");
 14167  0066E0  0100               	movlb	0	; () banked
 14168  0066E2  DA4E               	call	PL4	;call to abstracted procedure
 14169  0066E4  EC11  F011         	call	_strtok	;wreg free
 14170  0066E8  C06C  F2BF         	movff	?_strtok,doModeVerbose@p_1284
 14171  0066EC  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p_1284+1
 14172                           
 14173                           ; BSR set to: 0
 14174                           ;main.c: 986: if ((0) != p) {
 14175  0066F0  0102               	movlb	2	; () banked
 14176  0066F2  51C0               	movf	(doModeVerbose@p_1284+1)& (0+255),w,b
 14177  0066F4  11BF               	iorwf	doModeVerbose@p_1284& (0+255),w,b
 14178  0066F6  E00A               	bz	l14178
 14179                           
 14180                           ; BSR set to: 2
 14181                           ;main.c: 987: mask_priority = atoi(p);
 14182  0066F8  C2BF  F066         	movff	doModeVerbose@p_1284,?_atoi
 14183  0066FC  C2C0  F067         	movff	doModeVerbose@p_1284+1,?_atoi+1
 14184  006700  EC4F  F019         	call	_atoi	;wreg free
 14185  006704  5166               	movf	?_atoi& (0+255),w,b
 14186  006706  0102               	movlb	2	; () banked
 14187  006708  6F90               	movwf	doModeVerbose@mask_priority& (0+255),b
 14188                           
 14189                           ;main.c: 988: }
 14190  00670A  D008               	goto	l14182
 14191  00670C                     l14178:
 14192                           
 14193                           ; BSR set to: 2
 14194                           ;main.c: 989: else {
 14195                           ;main.c: 990: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14196  00670C  0E74               	movlw	high STR_113
 14197  00670E  0100               	movlb	0	; () banked
 14198  006710  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14199  006712  0E93               	movlw	low STR_113
 14200  006714  6F61               	movwf	?_putsUSART& (0+255),b
 14201  006716  ECA8  F00D         	call	_putsUSART	;wreg free
 14202  00671A  D223               	goto	l541
 14203  00671C                     l14182:
 14204                           
 14205                           ; BSR set to: 2
 14206                           ;main.c: 992: }
 14207                           ;main.c: 995: p = strtok((0), ",");
 14208  00671C  0100               	movlb	0	; () banked
 14209  00671E  DA30               	call	PL4	;call to abstracted procedure
 14210  006720  EC11  F011         	call	_strtok	;wreg free
 14211  006724  C06C  F2BF         	movff	?_strtok,doModeVerbose@p_1284
 14212  006728  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p_1284+1
 14213                           
 14214                           ; BSR set to: 0
 14215                           ;main.c: 996: if ((0) != p) {
 14216  00672C  0102               	movlb	2	; () banked
 14217  00672E  51C0               	movf	(doModeVerbose@p_1284+1)& (0+255),w,b
 14218  006730  11BF               	iorwf	doModeVerbose@p_1284& (0+255),w,b
 14219  006732  E00B               	bz	l14188
 14220                           
 14221                           ; BSR set to: 2
 14222                           ;main.c: 997: mask_class = atoi(p);
 14223  006734  C2BF  F066         	movff	doModeVerbose@p_1284,?_atoi
 14224  006738  C2C0  F067         	movff	doModeVerbose@p_1284+1,?_atoi+1
 14225  00673C  EC4F  F019         	call	_atoi	;wreg free
 14226  006740  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14227  006744  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14228                           
 14229                           ;main.c: 998: }
 14230  006748  D008               	goto	l14192
 14231  00674A                     l14188:
 14232                           
 14233                           ; BSR set to: 2
 14234                           ;main.c: 999: else {
 14235                           ;main.c: 1000: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14236  00674A  0E76               	movlw	high STR_115
 14237  00674C  0100               	movlb	0	; () banked
 14238  00674E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14239  006750  0E3D               	movlw	low STR_115
 14240  006752  6F61               	movwf	?_putsUSART& (0+255),b
 14241  006754  ECA8  F00D         	call	_putsUSART	;wreg free
 14242  006758  D204               	goto	l541
 14243  00675A                     l14192:
 14244                           
 14245                           ; BSR set to: 0
 14246                           ;main.c: 1002: }
 14247                           ;main.c: 1005: p = strtok((0), ",");
 14248  00675A  DA12               	call	PL4	;call to abstracted procedure
 14249  00675C  EC11  F011         	call	_strtok	;wreg free
 14250  006760  C06C  F2BF         	movff	?_strtok,doModeVerbose@p_1284
 14251  006764  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p_1284+1
 14252                           
 14253                           ; BSR set to: 0
 14254                           ;main.c: 1006: if ((0) != p) {
 14255  006768  0102               	movlb	2	; () banked
 14256  00676A  51C0               	movf	(doModeVerbose@p_1284+1)& (0+255),w,b
 14257  00676C  11BF               	iorwf	doModeVerbose@p_1284& (0+255),w,b
 14258  00676E  E00A               	bz	l14198
 14259                           
 14260                           ; BSR set to: 2
 14261                           ;main.c: 1007: mask_type = atoi(p);
 14262  006770  C2BF  F066         	movff	doModeVerbose@p_1284,?_atoi
 14263  006774  C2C0  F067         	movff	doModeVerbose@p_1284+1,?_atoi+1
 14264  006778  EC4F  F019         	call	_atoi	;wreg free
 14265  00677C  5166               	movf	?_atoi& (0+255),w,b
 14266  00677E  0102               	movlb	2	; () banked
 14267  006780  6F91               	movwf	doModeVerbose@mask_type& (0+255),b
 14268                           
 14269                           ;main.c: 1008: }
 14270  006782  D008               	goto	l14202
 14271  006784                     l14198:
 14272                           
 14273                           ; BSR set to: 2
 14274                           ;main.c: 1009: else {
 14275                           ;main.c: 1010: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14276  006784  0E76               	movlw	high STR_117
 14277  006786  0100               	movlb	0	; () banked
 14278  006788  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14279  00678A  0E62               	movlw	low STR_117
 14280  00678C  6F61               	movwf	?_putsUSART& (0+255),b
 14281  00678E  ECA8  F00D         	call	_putsUSART	;wreg free
 14282  006792  D1E7               	goto	l541
 14283  006794                     l14202:
 14284                           
 14285                           ; BSR set to: 2
 14286                           ;main.c: 1012: }
 14287                           ;main.c: 1015: p = strtok((0), ",");
 14288  006794  0100               	movlb	0	; () banked
 14289  006796  D9F4               	call	PL4	;call to abstracted procedure
 14290  006798  EC11  F011         	call	_strtok	;wreg free
 14291  00679C  C06C  F2BF         	movff	?_strtok,doModeVerbose@p_1284
 14292  0067A0  C06D  F2C0         	movff	?_strtok+1,doModeVerbose@p_1284+1
 14293                           
 14294                           ; BSR set to: 0
 14295                           ;main.c: 1016: if ((0) != p) {
 14296  0067A4  0102               	movlb	2	; () banked
 14297  0067A6  51C0               	movf	(doModeVerbose@p_1284+1)& (0+255),w,b
 14298  0067A8  11BF               	iorwf	doModeVerbose@p_1284& (0+255),w,b
 14299  0067AA  E00A               	bz	l14208
 14300                           
 14301                           ; BSR set to: 2
 14302                           ;main.c: 1017: mask_nodeid = atoi(p);
 14303  0067AC  C2BF  F066         	movff	doModeVerbose@p_1284,?_atoi
 14304  0067B0  C2C0  F067         	movff	doModeVerbose@p_1284+1,?_atoi+1
 14305  0067B4  EC4F  F019         	call	_atoi	;wreg free
 14306  0067B8  5166               	movf	?_atoi& (0+255),w,b
 14307  0067BA  0102               	movlb	2	; () banked
 14308  0067BC  6F92               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14309                           
 14310                           ;main.c: 1018: }
 14311  0067BE  D008               	goto	l14212
 14312  0067C0                     l14208:
 14313                           
 14314                           ; BSR set to: 2
 14315                           ;main.c: 1019: else {
 14316                           ;main.c: 1020: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14317  0067C0  0E75               	movlw	high STR_119
 14318  0067C2  0100               	movlb	0	; () banked
 14319  0067C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14320  0067C6  0E58               	movlw	low STR_119
 14321  0067C8  6F61               	movwf	?_putsUSART& (0+255),b
 14322  0067CA  ECA8  F00D         	call	_putsUSART	;wreg free
 14323  0067CE  D1C9               	goto	l541
 14324  0067D0                     l14212:
 14325                           
 14326                           ; BSR set to: 2
 14327                           ;main.c: 1022: }
 14328                           ;main.c: 1024: uint32_t id = ((uint32_t) mask_priority << 26) |
 14329                           ;main.c: 1025: ((uint32_t) mask_class << 16) |
 14330                           ;main.c: 1026: ((uint32_t) mask_type << 8) |
 14331                           ;main.c: 1027: mask_nodeid;
 14332  0067D0  C291  F0CA         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14333  0067D4  DA29               	call	PL36	;call to abstracted procedure
 14334  0067D6  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14335  0067D8  0100               	movlb	0	; () banked
 14336  0067DA  6FCE               	movwf	(??_doModeVerbose+4)& (0+255),b
 14337  0067DC  0102               	movlb	2	; () banked
 14338  0067DE  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14339  0067E0  DA49               	call	PL54	;call to abstracted procedure
 14340  0067E2  C290  F0D2         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14341  0067E6  D9E0               	call	PL8	;call to abstracted procedure
 14342  0067E8  5192               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14343  0067EA  0100               	movlb	0	; () banked
 14344  0067EC  11DA               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14345  0067EE  0102               	movlb	2	; () banked
 14346  0067F0  6FA6               	movwf	doModeVerbose@id_1296& (0+255),b
 14347  0067F2  0100               	movlb	0	; () banked
 14348  0067F4  51DB               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14349  0067F6  0102               	movlb	2	; () banked
 14350  0067F8  6FA7               	movwf	(doModeVerbose@id_1296+1)& (0+255),b
 14351  0067FA  0100               	movlb	0	; () banked
 14352  0067FC  51DC               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14353  0067FE  0102               	movlb	2	; () banked
 14354  006800  6FA8               	movwf	(doModeVerbose@id_1296+2)& (0+255),b
 14355  006802  0100               	movlb	0	; () banked
 14356  006804  51DD               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14357  006806  0102               	movlb	2	; () banked
 14358  006808  6FA9               	movwf	(doModeVerbose@id_1296+3)& (0+255),b
 14359                           
 14360                           ; BSR set to: 2
 14361                           ;main.c: 1030: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14362  00680A  0E80               	movlw	128
 14363  00680C  EC08  F00B         	call	_ECANSetOperationMode
 14364                           
 14365                           ; BSR set to: 0
 14366                           ;main.c: 1032: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14367                           ;main.c: 1033: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14368  006810  0102               	movlb	2	; () banked
 14369  006812  51AB               	movf	doModeVerbose@maskno& (0+255),w,b
 14370  006814  E008               	bz	l14220
 14371                           
 14372                           ; BSR set to: 2
 14373  006816  0E0F               	movlw	15	;volatile
 14374  006818  0100               	movlb	0	; () banked
 14375  00681A  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14376  00681C  0E18               	movlw	24	;volatile
 14377  00681E  DA1E               	call	PL48	;call to abstracted procedure
 14378  006820  ECD2  F019         	call	__CANIDToRegs	;wreg free
 14379  006824  D007               	goto	l14222
 14380  006826                     l14220:
 14381                           
 14382                           ; BSR set to: 2
 14383  006826  0E0F               	movlw	15	;volatile
 14384  006828  0100               	movlb	0	; () banked
 14385  00682A  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14386  00682C  0E1C               	movlw	28	;volatile
 14387  00682E  DA16               	call	PL48	;call to abstracted procedure
 14388  006830  ECD2  F019         	call	__CANIDToRegs	;wreg free
 14389  006834                     l14222:
 14390                           
 14391                           ; BSR set to: 0
 14392                           ;main.c: 1034: putsUSART((char *) "+OK\r\n");
 14393  006834  0E7C               	movlw	high STR_9
 14394  006836  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14395  006838  0E72               	movlw	low STR_9
 14396  00683A  6F61               	movwf	?_putsUSART& (0+255),b
 14397  00683C  ECA8  F00D         	call	_putsUSART	;wreg free
 14398                           
 14399                           ;main.c: 1035: }
 14400  006840  D182               	goto	l14310
 14401  006842                     l14224:
 14402                           
 14403                           ; BSR set to: 0
 14404                           ;main.c: 1042: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14405  006842  0E01               	movlw	high _cmdbuf
 14406  006844  0100               	movlb	0	; () banked
 14407  006846  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14408  006848  0E27               	movlw	low _cmdbuf
 14409  00684A  6F6D               	movwf	?_stristr& (0+255),b
 14410  00684C  0E7C               	movlw	high STR_121
 14411  00684E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14412  006850  0E96               	movlw	low STR_121
 14413  006852  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14414  006854  EC0D  F010         	call	_stristr	;wreg free
 14415  006858  0E27               	movlw	low _cmdbuf
 14416  00685A  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14417  00685C  0E01               	movlw	high _cmdbuf
 14418  00685E  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14419  006860  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14420  006862  E102               	bnz	u18915
 14421  006864  516D               	movf	?_stristr& (0+255),w,b
 14422  006866  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 14423  006868                     u18915:
 14424  006868  E001 D15A          	bnz	l14304
 14425                           
 14426                           ; BSR set to: 0
 14427                           ;main.c: 1045: strcpy(cmdbuf, cmdbuf + 4);
 14428  00686C  0E01               	movlw	high _cmdbuf
 14429  00686E  0100               	movlb	0	; () banked
 14430  006870  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14431  006872  0E27               	movlw	low _cmdbuf
 14432  006874  6F60               	movwf	?_strcpy& (0+255),b
 14433  006876  0E2B               	movlw	low (_cmdbuf+4)
 14434  006878  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14435  00687A  0E01               	movlw	high (_cmdbuf+4)
 14436  00687C  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14437  00687E  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 14438  006882  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14439  006886  EC5A  F00B         	call	_strcpy	;wreg free
 14440                           
 14441                           ; BSR set to: 0
 14442                           ;main.c: 1048: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14443  00688A  0E01               	movlw	high _cmdbuf
 14444  00688C  0100               	movlb	0	; () banked
 14445  00688E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14446  006890  0E27               	movlw	low _cmdbuf
 14447  006892  6F6D               	movwf	?_stristr& (0+255),b
 14448  006894  0E7C               	movlw	high STR_122
 14449  006896  6F70               	movwf	(?_stristr+3)& (0+255),b
 14450  006898  0ED9               	movlw	low STR_122
 14451  00689A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14452  00689C  EC0D  F010         	call	_stristr	;wreg free
 14453  0068A0  0E27               	movlw	low _cmdbuf
 14454  0068A2  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14455  0068A4  0E01               	movlw	high _cmdbuf
 14456  0068A6  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14457  0068A8  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14458  0068AA  E102               	bnz	u18925
 14459  0068AC  516D               	movf	?_stristr& (0+255),w,b
 14460  0068AE  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 14461  0068B0                     u18925:
 14462  0068B0  E114               	bnz	l14236
 14463                           
 14464                           ; BSR set to: 0
 14465                           ;main.c: 1049: bHex = 1;
 14466  0068B2  0E01               	movlw	1
 14467  0068B4  6FE5               	movwf	_bHex& (0+255),b
 14468                           
 14469                           ; BSR set to: 0
 14470                           ;main.c: 1050: (Busy_eep(), Write_b_eep(0x06,1));
 14471  0068B6  ECD1  F00A         	call	_Busy_eep	;wreg free
 14472  0068BA  0100               	movlb	0	; () banked
 14473  0068BC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14474  0068BE  0E06               	movlw	6
 14475  0068C0  6F60               	movwf	?_Write_b_eep& (0+255),b
 14476  0068C2  0E01               	movlw	1
 14477  0068C4  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14478  0068C6  ECA1  F00B         	call	_Write_b_eep	;wreg free
 14479                           
 14480                           ;main.c: 1051: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14481  0068CA  0E73               	movlw	high STR_123
 14482  0068CC  0100               	movlb	0	; () banked
 14483  0068CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14484  0068D0  0EEC               	movlw	low STR_123
 14485  0068D2  6F61               	movwf	?_putsUSART& (0+255),b
 14486  0068D4  ECA8  F00D         	call	_putsUSART	;wreg free
 14487                           
 14488                           ;main.c: 1052: }
 14489  0068D8  D136               	goto	l14310
 14490  0068DA                     l14236:
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;main.c: 1054: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14494  0068DA  0E01               	movlw	high _cmdbuf
 14495  0068DC  0100               	movlb	0	; () banked
 14496  0068DE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14497  0068E0  0E27               	movlw	low _cmdbuf
 14498  0068E2  6F6D               	movwf	?_stristr& (0+255),b
 14499  0068E4  0E7B               	movlw	high STR_124
 14500  0068E6  6F70               	movwf	(?_stristr+3)& (0+255),b
 14501  0068E8  0EF8               	movlw	low STR_124
 14502  0068EA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14503  0068EC  EC0D  F010         	call	_stristr	;wreg free
 14504  0068F0  0E27               	movlw	low _cmdbuf
 14505  0068F2  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14506  0068F4  0E01               	movlw	high _cmdbuf
 14507  0068F6  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14508  0068F8  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14509  0068FA  E102               	bnz	u18935
 14510  0068FC  516D               	movf	?_stristr& (0+255),w,b
 14511  0068FE  19CA               	xorwf	??_doModeVerbose& (0+255),w,b
 14512  006900                     u18935:
 14513  006900  E113               	bnz	l14246
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;main.c: 1055: bHex = 0;
 14517  006902  6BE5               	clrf	_bHex& (0+255),b
 14518                           
 14519                           ; BSR set to: 0
 14520                           ;main.c: 1056: (Busy_eep(), Write_b_eep(0x06,0));
 14521  006904  ECD1  F00A         	call	_Busy_eep	;wreg free
 14522  006908  0100               	movlb	0	; () banked
 14523  00690A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14524  00690C  0E06               	movlw	6
 14525  00690E  6F60               	movwf	?_Write_b_eep& (0+255),b
 14526  006910  0E00               	movlw	0
 14527  006912  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14528  006914  ECA1  F00B         	call	_Write_b_eep	;wreg free
 14529                           
 14530                           ;main.c: 1057: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14531  006918  0E74               	movlw	high STR_125
 14532  00691A  0100               	movlb	0	; () banked
 14533  00691C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14534  00691E  0EBB               	movlw	low STR_125
 14535  006920  6F61               	movwf	?_putsUSART& (0+255),b
 14536  006922  ECA8  F00D         	call	_putsUSART	;wreg free
 14537                           
 14538                           ;main.c: 1058: }
 14539  006926  D10F               	goto	l14310
 14540  006928                     l14246:
 14541                           
 14542                           ; BSR set to: 0
 14543                           ;main.c: 1059: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14544  006928  0E01               	movlw	high _cmdbuf
 14545  00692A  0100               	movlb	0	; () banked
 14546  00692C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14547  00692E  0E27               	movlw	low _cmdbuf
 14548  006930  6F6D               	movwf	?_stristr& (0+255),b
 14549  006932  0E7B               	movlw	high STR_126
 14550  006934  6F70               	movwf	(?_stristr+3)& (0+255),b
 14551  006936  0E66               	movlw	low STR_126
 14552  006938  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14553  00693A  EC0D  F010         	call	_stristr	;wreg free
 14554  00693E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14555  006940  116D               	iorwf	?_stristr& (0+255),w,b
 14556  006942  E02E               	bz	l14260
 14557                           
 14558                           ; BSR set to: 0
 14559                           ;main.c: 1060: strcpy(cmdbuf, cmdbuf + 10);
 14560  006944  0E01               	movlw	high _cmdbuf
 14561  006946  0100               	movlb	0	; () banked
 14562  006948  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14563  00694A  0E27               	movlw	low _cmdbuf
 14564  00694C  6F60               	movwf	?_strcpy& (0+255),b
 14565  00694E  0E31               	movlw	low (_cmdbuf+10)
 14566  006950  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14567  006952  0E01               	movlw	high (_cmdbuf+10)
 14568  006954  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14569  006956  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 14570  00695A  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14571  00695E  EC5A  F00B         	call	_strcpy	;wreg free
 14572                           
 14573                           ; BSR set to: 0
 14574                           ;main.c: 1061: rwtimeout = atoi(cmdbuf);
 14575  006962  0E01               	movlw	high _cmdbuf
 14576  006964  0100               	movlb	0	; () banked
 14577  006966  6F67               	movwf	(?_atoi+1)& (0+255),b
 14578  006968  0E27               	movlw	low _cmdbuf
 14579  00696A  6F66               	movwf	?_atoi& (0+255),b
 14580  00696C  EC4F  F019         	call	_atoi	;wreg free
 14581  006970  5166               	movf	?_atoi& (0+255),w,b
 14582  006972  6E37               	movwf	_rwtimeout,c
 14583                           
 14584                           ; BSR set to: 0
 14585                           ;main.c: 1062: if (rwtimeout < 20u) {
 14586  006974  0E14               	movlw	20
 14587  006976  6037               	cpfslt	_rwtimeout,c
 14588  006978  D001               	goto	l14256
 14589                           
 14590                           ; BSR set to: 0
 14591                           ;main.c: 1063: rwtimeout = 20u;
 14592  00697A  6E37               	movwf	_rwtimeout,c
 14593  00697C                     l14256:
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;main.c: 1064: }
 14597                           ;main.c: 1065: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14598  00697C  ECD1  F00A         	call	_Busy_eep	;wreg free
 14599  006980  0100               	movlb	0	; () banked
 14600  006982  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14601  006984  0E09               	movlw	9
 14602  006986  6F60               	movwf	?_Write_b_eep& (0+255),b
 14603  006988  C037  F062         	movff	_rwtimeout,?_Write_b_eep+2
 14604  00698C  ECA1  F00B         	call	_Write_b_eep	;wreg free
 14605                           
 14606                           ;main.c: 1066: putsUSART((char *) "+OK\r\n");
 14607  006990  0E7C               	movlw	high STR_9
 14608  006992  0100               	movlb	0	; () banked
 14609  006994  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14610  006996  0E72               	movlw	low STR_9
 14611  006998  6F61               	movwf	?_putsUSART& (0+255),b
 14612  00699A  ECA8  F00D         	call	_putsUSART	;wreg free
 14613                           
 14614                           ;main.c: 1067: }
 14615  00699E  D0D3               	goto	l14310
 14616  0069A0                     l14260:
 14617                           
 14618                           ; BSR set to: 0
 14619                           ;main.c: 1068: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14620  0069A0  0E01               	movlw	high _cmdbuf
 14621  0069A2  0100               	movlb	0	; () banked
 14622  0069A4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14623  0069A6  0E27               	movlw	low _cmdbuf
 14624  0069A8  6F6D               	movwf	?_stristr& (0+255),b
 14625  0069AA  0E7B               	movlw	high STR_128
 14626  0069AC  6F70               	movwf	(?_stristr+3)& (0+255),b
 14627  0069AE  0EA4               	movlw	low STR_128
 14628  0069B0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14629  0069B2  EC0D  F010         	call	_stristr	;wreg free
 14630  0069B6  516E               	movf	(?_stristr+1)& (0+255),w,b
 14631  0069B8  116D               	iorwf	?_stristr& (0+255),w,b
 14632  0069BA  E005               	bz	l14264
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;main.c: 1069: strcpy(cmdbuf, cmdbuf + 8);
 14636  0069BC  0E01               	movlw	high _cmdbuf
 14637  0069BE  D8E7               	call	PL6	;call to abstracted procedure
 14638  0069C0  EC5A  F00B         	call	_strcpy	;wreg free
 14639                           
 14640                           ;main.c: 1070: }
 14641  0069C4  D0C0               	goto	l14310
 14642  0069C6                     l14264:
 14643                           
 14644                           ; BSR set to: 0
 14645                           ;main.c: 1071: else if (0 != stristr(cmdbuf, "MODE ")) {
 14646  0069C6  0E01               	movlw	high _cmdbuf
 14647  0069C8  0100               	movlb	0	; () banked
 14648  0069CA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14649  0069CC  0E27               	movlw	low _cmdbuf
 14650  0069CE  6F6D               	movwf	?_stristr& (0+255),b
 14651  0069D0  0E7C               	movlw	high STR_129
 14652  0069D2  6F70               	movwf	(?_stristr+3)& (0+255),b
 14653  0069D4  0E7E               	movlw	low STR_129
 14654  0069D6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14655  0069D8  EC0D  F010         	call	_stristr	;wreg free
 14656  0069DC  516E               	movf	(?_stristr+1)& (0+255),w,b
 14657  0069DE  116D               	iorwf	?_stristr& (0+255),w,b
 14658  0069E0  E068               	bz	l14294
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;main.c: 1072: strcpy(cmdbuf, cmdbuf + 5);
 14662  0069E2  D8C0               	call	PL2	;call to abstracted procedure
 14663  0069E4  EC5A  F00B         	call	_strcpy	;wreg free
 14664                           
 14665                           ; BSR set to: 0
 14666                           ;main.c: 1073: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14667  0069E8  0E01               	movlw	high _cmdbuf
 14668  0069EA  0100               	movlb	0	; () banked
 14669  0069EC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14670  0069EE  0E27               	movlw	low _cmdbuf
 14671  0069F0  6F6D               	movwf	?_stristr& (0+255),b
 14672  0069F2  0E7B               	movlw	high STR_130
 14673  0069F4  6F70               	movwf	(?_stristr+3)& (0+255),b
 14674  0069F6  0EF0               	movlw	low STR_130
 14675  0069F8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14676  0069FA  EC0D  F010         	call	_stristr	;wreg free
 14677  0069FE  516E               	movf	(?_stristr+1)& (0+255),w,b
 14678  006A00  116D               	iorwf	?_stristr& (0+255),w,b
 14679  006A02  E013               	bz	l14278
 14680                           
 14681                           ; BSR set to: 0
 14682                           ;main.c: 1074: mode = 0;
 14683  006A04  6BE6               	clrf	_mode& (0+255),b
 14684                           
 14685                           ; BSR set to: 0
 14686                           ;main.c: 1075: (Busy_eep(), Write_b_eep(0x03,0));
 14687  006A06  ECD1  F00A         	call	_Busy_eep	;wreg free
 14688  006A0A  0100               	movlb	0	; () banked
 14689  006A0C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14690  006A0E  0E03               	movlw	3
 14691  006A10  6F60               	movwf	?_Write_b_eep& (0+255),b
 14692  006A12  0E00               	movlw	0
 14693  006A14  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14694  006A16  ECA1  F00B         	call	_Write_b_eep	;wreg free
 14695                           
 14696                           ;main.c: 1076: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14697  006A1A  0E78               	movlw	high STR_131
 14698  006A1C  0100               	movlb	0	; () banked
 14699  006A1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14700  006A20  0E0E               	movlw	low STR_131
 14701  006A22  6F61               	movwf	?_putsUSART& (0+255),b
 14702  006A24  ECA8  F00D         	call	_putsUSART	;wreg free
 14703                           
 14704                           ;main.c: 1077: }
 14705  006A28  D08E               	goto	l14310
 14706  006A2A                     l14278:
 14707                           
 14708                           ; BSR set to: 0
 14709                           ;main.c: 1078: else if (0 != stristr(cmdbuf, "VSCP")) {
 14710  006A2A  0E01               	movlw	high _cmdbuf
 14711  006A2C  0100               	movlb	0	; () banked
 14712  006A2E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14713  006A30  0E27               	movlw	low _cmdbuf
 14714  006A32  6F6D               	movwf	?_stristr& (0+255),b
 14715  006A34  0E7C               	movlw	high STR_132
 14716  006A36  6F70               	movwf	(?_stristr+3)& (0+255),b
 14717  006A38  0EB9               	movlw	low STR_132
 14718  006A3A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14719  006A3C  EC0D  F010         	call	_stristr	;wreg free
 14720  006A40  516E               	movf	(?_stristr+1)& (0+255),w,b
 14721  006A42  116D               	iorwf	?_stristr& (0+255),w,b
 14722  006A44  E014               	bz	l14286
 14723                           
 14724                           ; BSR set to: 0
 14725                           ;main.c: 1079: mode = 1;
 14726  006A46  0E01               	movlw	1
 14727  006A48  6FE6               	movwf	_mode& (0+255),b
 14728                           
 14729                           ; BSR set to: 0
 14730                           ;main.c: 1080: (Busy_eep(), Write_b_eep(0x03,1));
 14731  006A4A  ECD1  F00A         	call	_Busy_eep	;wreg free
 14732  006A4E  0100               	movlb	0	; () banked
 14733  006A50  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14734  006A52  0E03               	movlw	3
 14735  006A54  6F60               	movwf	?_Write_b_eep& (0+255),b
 14736  006A56  0E01               	movlw	1
 14737  006A58  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14738  006A5A  ECA1  F00B         	call	_Write_b_eep	;wreg free
 14739                           
 14740                           ;main.c: 1081: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14741  006A5E  0E77               	movlw	high STR_133
 14742  006A60  0100               	movlb	0	; () banked
 14743  006A62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14744  006A64  0E93               	movlw	low STR_133
 14745  006A66  6F61               	movwf	?_putsUSART& (0+255),b
 14746  006A68  ECA8  F00D         	call	_putsUSART	;wreg free
 14747                           
 14748                           ;main.c: 1082: }
 14749  006A6C  D06C               	goto	l14310
 14750  006A6E                     l14286:
 14751                           
 14752                           ; BSR set to: 0
 14753                           ;main.c: 1083: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14754  006A6E  0E01               	movlw	high _cmdbuf
 14755  006A70  0100               	movlb	0	; () banked
 14756  006A72  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14757  006A74  0E27               	movlw	low _cmdbuf
 14758  006A76  6F6D               	movwf	?_stristr& (0+255),b
 14759  006A78  0E7C               	movlw	high STR_134
 14760  006A7A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14761  006A7C  0E90               	movlw	low STR_134
 14762  006A7E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14763  006A80  EC0D  F010         	call	_stristr	;wreg free
 14764  006A84  516E               	movf	(?_stristr+1)& (0+255),w,b
 14765  006A86  116D               	iorwf	?_stristr& (0+255),w,b
 14766  006A88  E05E               	bz	l14310
 14767                           
 14768                           ; BSR set to: 0
 14769                           ;main.c: 1084: mode = 2;
 14770  006A8A  0E02               	movlw	2
 14771  006A8C  6FE6               	movwf	_mode& (0+255),b
 14772                           
 14773                           ; BSR set to: 0
 14774                           ;main.c: 1085: (Busy_eep(), Write_b_eep(0x03,2));
 14775  006A8E  ECD1  F00A         	call	_Busy_eep	;wreg free
 14776  006A92  0100               	movlb	0	; () banked
 14777  006A94  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14778  006A96  0E03               	movlw	3
 14779  006A98  6F60               	movwf	?_Write_b_eep& (0+255),b
 14780  006A9A  0E02               	movlw	2
 14781  006A9C  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14782  006A9E  ECA1  F00B         	call	_Write_b_eep	;wreg free
 14783                           
 14784                           ;main.c: 1086: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14785  006AA2  0E78               	movlw	high STR_135
 14786  006AA4  0100               	movlb	0	; () banked
 14787  006AA6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14788  006AA8  0E7B               	movlw	low STR_135
 14789  006AAA  6F61               	movwf	?_putsUSART& (0+255),b
 14790  006AAC  ECA8  F00D         	call	_putsUSART	;wreg free
 14791  006AB0  D04A               	goto	l14310
 14792  006AB2                     l14294:
 14793                           
 14794                           ; BSR set to: 0
 14795                           ;main.c: 1090: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14796  006AB2  0E01               	movlw	high _cmdbuf
 14797  006AB4  0100               	movlb	0	; () banked
 14798  006AB6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14799  006AB8  0E27               	movlw	low _cmdbuf
 14800  006ABA  6F6D               	movwf	?_stristr& (0+255),b
 14801  006ABC  0E7B               	movlw	high STR_136
 14802  006ABE  6F70               	movwf	(?_stristr+3)& (0+255),b
 14803  006AC0  0EE0               	movlw	low STR_136
 14804  006AC2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14805  006AC4  EC0D  F010         	call	_stristr	;wreg free
 14806  006AC8  516E               	movf	(?_stristr+1)& (0+255),w,b
 14807  006ACA  116D               	iorwf	?_stristr& (0+255),w,b
 14808  006ACC  E010               	bz	l14298
 14809                           
 14810                           ; BSR set to: 0
 14811                           ;main.c: 1091: strcpy(cmdbuf, cmdbuf + 7);
 14812  006ACE  0E01               	movlw	high _cmdbuf
 14813  006AD0  0100               	movlb	0	; () banked
 14814  006AD2  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14815  006AD4  0E27               	movlw	low _cmdbuf
 14816  006AD6  6F60               	movwf	?_strcpy& (0+255),b
 14817  006AD8  0E2E               	movlw	low (_cmdbuf+7)
 14818  006ADA  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14819  006ADC  0E01               	movlw	high (_cmdbuf+7)
 14820  006ADE  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14821  006AE0  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 14822  006AE4  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14823  006AE8  EC5A  F00B         	call	_strcpy	;wreg free
 14824                           
 14825                           ;main.c: 1092: }
 14826  006AEC  D02C               	goto	l14310
 14827  006AEE                     l14298:
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;main.c: 1094: else if (0 != stristr(cmdbuf, "MASK ")) {
 14831  006AEE  0E01               	movlw	high _cmdbuf
 14832  006AF0  0100               	movlb	0	; () banked
 14833  006AF2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14834  006AF4  0E27               	movlw	low _cmdbuf
 14835  006AF6  6F6D               	movwf	?_stristr& (0+255),b
 14836  006AF8  0E7C               	movlw	high STR_137
 14837  006AFA  6F70               	movwf	(?_stristr+3)& (0+255),b
 14838  006AFC  0E84               	movlw	low STR_137
 14839  006AFE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14840  006B00  EC0D  F010         	call	_stristr	;wreg free
 14841  006B04  516E               	movf	(?_stristr+1)& (0+255),w,b
 14842  006B06  116D               	iorwf	?_stristr& (0+255),w,b
 14843  006B08  E004               	bz	l14302
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;main.c: 1095: strcpy(cmdbuf, cmdbuf + 5);
 14847  006B0A  D82C               	call	PL2	;call to abstracted procedure
 14848  006B0C  EC5A  F00B         	call	_strcpy	;wreg free
 14849                           
 14850                           ;main.c: 1096: }
 14851  006B10  D01A               	goto	l14310
 14852  006B12                     l14302:
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;main.c: 1097: else {
 14856                           ;main.c: 1098: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14857  006B12  0E77               	movlw	high STR_138
 14858  006B14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14859  006B16  0E30               	movlw	low STR_138
 14860  006B18  6F61               	movwf	?_putsUSART& (0+255),b
 14861  006B1A  ECA8  F00D         	call	_putsUSART	;wreg free
 14862  006B1E  D013               	goto	l14310
 14863  006B20                     l14304:
 14864                           
 14865                           ; BSR set to: 0
 14866                           ;main.c: 1102: else {
 14867                           ;main.c: 1103: if ( 0x0d == cmdbuf[ 0 ] ) {
 14868  006B20  0101               	movlb	1	; () banked
 14869  006B22  5127               	movf	_cmdbuf& (0+255),w,b
 14870  006B24  0A0D               	xorlw	13
 14871  006B26  E108               	bnz	l14308
 14872                           
 14873                           ; BSR set to: 1
 14874                           ;main.c: 1104: putsUSART((char *) "+OK\r\n");
 14875  006B28  0E7C               	movlw	high STR_9
 14876  006B2A  0100               	movlb	0	; () banked
 14877  006B2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14878  006B2E  0E72               	movlw	low STR_9
 14879  006B30  6F61               	movwf	?_putsUSART& (0+255),b
 14880  006B32  ECA8  F00D         	call	_putsUSART	;wreg free
 14881                           
 14882                           ;main.c: 1105: }
 14883  006B36  D007               	goto	l14310
 14884  006B38                     l14308:
 14885                           
 14886                           ; BSR set to: 1
 14887                           ;main.c: 1106: else {
 14888                           ;main.c: 1107: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14889  006B38  0E78               	movlw	high STR_140
 14890  006B3A  0100               	movlb	0	; () banked
 14891  006B3C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14892  006B3E  0E45               	movlw	low STR_140
 14893  006B40  6F61               	movwf	?_putsUSART& (0+255),b
 14894  006B42  ECA8  F00D         	call	_putsUSART	;wreg free
 14895  006B46                     l14310:
 14896                           
 14897                           ;main.c: 1108: }
 14898                           ;main.c: 1109: }
 14899                           ;main.c: 1111: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 14900  006B46  0E01               	movlw	high _cmdbuf
 14901  006B48  0100               	movlb	0	; () banked
 14902  006B4A  6F61               	movwf	(?_memset+1)& (0+255),b
 14903  006B4C  0E27               	movlw	low _cmdbuf
 14904  006B4E  6F60               	movwf	?_memset& (0+255),b
 14905  006B50  6B63               	clrf	(?_memset+3)& (0+255),b
 14906  006B52  6B62               	clrf	(?_memset+2)& (0+255),b
 14907  006B54  6B65               	clrf	(?_memset+5)& (0+255),b
 14908  006B56  0E50               	movlw	80
 14909  006B58  6F64               	movwf	(?_memset+4)& (0+255),b
 14910  006B5A  EC43  F00B         	call	_memset	;wreg free
 14911                           
 14912                           ; BSR set to: 0
 14913                           ;main.c: 1112: pos = 0;
 14914  006B5E  6BE7               	clrf	_pos& (0+255),b
 14915  006B60                     l14314:
 14916                           
 14917                           ;main.c: 1113: }
 14918                           ;main.c: 1114: }
 14919                           ;main.c: 1117: (INTCONbits.GIE = 1);
 14920  006B60  8EF2               	bsf	intcon,7,c	;volatile
 14921  006B62                     l541:
 14922  006B62  0012               	return	
 14923  006B64                     __end_of_doModeVerbose:
 14924                           	opt stack 0
 14925  006B64                     PL2:
 14926                           	opt stack 19
 14927  006B64  0E01               	movlw	high _cmdbuf
 14928  006B66  0100               	movlb	0	; () banked
 14929  006B68  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14930  006B6A  0E27               	movlw	low _cmdbuf
 14931  006B6C  6F60               	movwf	?_strcpy& (0+255),b
 14932  006B6E  0E2C               	movlw	low (_cmdbuf+5)
 14933  006B70  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14934  006B72  0E01               	movlw	high (_cmdbuf+5)
 14935  006B74  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14936  006B76  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 14937  006B7A  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14938  006B7E  0012               	return	
 14939  006B80                     __end_ofPL2:
 14940                           	opt stack 0
 14941  006B80                     PL4:
 14942                           	opt stack 19
 14943  006B80  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14944  006B82  6B6C               	clrf	?_strtok& (0+255),b
 14945  006B84  0E7C               	movlw	high STR_30
 14946  006B86  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14947  006B88  0EF4               	movlw	low STR_30
 14948  006B8A  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14949  006B8C  0012               	return	
 14950  006B8E                     __end_ofPL4:
 14951                           	opt stack 0
 14952  006B8E                     PL6:
 14953                           	opt stack 19
 14954  006B8E  0100               	movlb	0	; () banked
 14955  006B90  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14956  006B92  0E27               	movlw	low _cmdbuf
 14957  006B94  6F60               	movwf	?_strcpy& (0+255),b
 14958  006B96  0E2F               	movlw	low (_cmdbuf+8)
 14959  006B98  6FCA               	movwf	??_doModeVerbose& (0+255),b
 14960  006B9A  0E01               	movlw	high (_cmdbuf+8)
 14961  006B9C  6FCB               	movwf	(??_doModeVerbose+1)& (0+255),b
 14962  006B9E  C0CA  F062         	movff	??_doModeVerbose,?_strcpy+2
 14963  006BA2  C0CB  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14964  006BA6  0012               	return	
 14965  006BA8                     __end_ofPL6:
 14966                           	opt stack 0
 14967  006BA8                     PL8:
 14968                           	opt stack 19
 14969  006BA8  6BD3               	clrf	(??_doModeVerbose+9)& (0+255),b
 14970  006BAA  6BD4               	clrf	(??_doModeVerbose+10)& (0+255),b
 14971  006BAC  6BD5               	clrf	(??_doModeVerbose+11)& (0+255),b
 14972  006BAE  0E1A               	movlw	26
 14973  006BB0                     u18815:
 14974  006BB0  90D8               	bcf	status,0,c
 14975  006BB2  37D2               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14976  006BB4  37D3               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14977  006BB6  37D4               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14978  006BB8  37D5               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14979  006BBA  2EE8               	decfsz	wreg,f,c
 14980  006BBC  D7F9               	goto	u18815
 14981  006BBE  51CE               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14982  006BC0  11D2               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14983  006BC2  6FD6               	movwf	(??_doModeVerbose+12)& (0+255),b
 14984  006BC4  51CF               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14985  006BC6  11D3               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14986  006BC8  6FD7               	movwf	(??_doModeVerbose+13)& (0+255),b
 14987  006BCA  51D0               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14988  006BCC  11D4               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14989  006BCE  6FD8               	movwf	(??_doModeVerbose+14)& (0+255),b
 14990  006BD0  51D1               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14991  006BD2  11D5               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14992  006BD4  6FD9               	movwf	(??_doModeVerbose+15)& (0+255),b
 14993  006BD6  51CA               	movf	??_doModeVerbose& (0+255),w,b
 14994  006BD8  11D6               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14995  006BDA  6FDA               	movwf	(??_doModeVerbose+16)& (0+255),b
 14996  006BDC  51CB               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14997  006BDE  11D7               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14998  006BE0  6FDB               	movwf	(??_doModeVerbose+17)& (0+255),b
 14999  006BE2  51CC               	movf	(??_doModeVerbose+2)& (0+255),w,b
 15000  006BE4  11D8               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 15001  006BE6  6FDC               	movwf	(??_doModeVerbose+18)& (0+255),b
 15002  006BE8  51CD               	movf	(??_doModeVerbose+3)& (0+255),w,b
 15003  006BEA  11D9               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 15004  006BEC  6FDD               	movwf	(??_doModeVerbose+19)& (0+255),b
 15005  006BEE  0102               	movlb	2	; () banked
 15006  006BF0  0012               	return	
 15007  006BF2                     __end_ofPL8:
 15008                           	opt stack 0
 15009  006BF2                     PL26:
 15010                           	opt stack 19
 15011  006BF2  0100               	movlb	0	; () banked
 15012  006BF4  6B6D               	clrf	(?_strtok+1)& (0+255),b
 15013  006BF6  6B6C               	clrf	?_strtok& (0+255),b
 15014  006BF8  0E7B               	movlw	high (STR_56+8)
 15015  006BFA  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15016  006BFC  0E84               	movlw	low (STR_56+8)
 15017  006BFE  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15018  006C00  0012               	return	
 15019  006C02                     __end_ofPL26:
 15020                           	opt stack 0
 15021  006C02                     PL28:
 15022                           	opt stack 19
 15023  006C02  0E01               	movlw	high _cmdbuf
 15024  006C04  0100               	movlb	0	; () banked
 15025  006C06  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15026  006C08  0E27               	movlw	low _cmdbuf
 15027  006C0A  6F6C               	movwf	?_strtok& (0+255),b
 15028  006C0C  0E7C               	movlw	high STR_30
 15029  006C0E  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15030  006C10  0EF4               	movlw	low STR_30
 15031  006C12  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15032  006C14  0012               	return	
 15033  006C16                     __end_ofPL28:
 15034                           	opt stack 0
 15035  006C16                     PL32:
 15036                           	opt stack 19
 15037  006C16  0100               	movlb	0	; () banked
 15038  006C18  6F6D               	movwf	(?_strtok+1)& (0+255),b
 15039  006C1A  0E27               	movlw	low _cmdbuf
 15040  006C1C  6F6C               	movwf	?_strtok& (0+255),b
 15041  006C1E  0E7B               	movlw	high (STR_56+8)
 15042  006C20  6F6F               	movwf	(?_strtok+3)& (0+255),b
 15043  006C22  0E84               	movlw	low (STR_56+8)
 15044  006C24  6F6E               	movwf	(?_strtok+2)& (0+255),b
 15045  006C26  0012               	return	
 15046  006C28                     __end_ofPL32:
 15047                           	opt stack 0
 15048  006C28                     PL36:
 15049                           	opt stack 19
 15050  006C28  0100               	movlb	0	; () banked
 15051  006C2A  6BCB               	clrf	(??_doModeVerbose+1)& (0+255),b
 15052  006C2C  6BCC               	clrf	(??_doModeVerbose+2)& (0+255),b
 15053  006C2E  6BCD               	clrf	(??_doModeVerbose+3)& (0+255),b
 15054  006C30  C0CC  F0CD         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 15055  006C34  C0CB  F0CC         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 15056  006C38  C0CA  F0CB         	movff	??_doModeVerbose,??_doModeVerbose+1
 15057  006C3C  6BCA               	clrf	??_doModeVerbose& (0+255),b
 15058  006C3E  0102               	movlb	2	; () banked
 15059  006C40  0012               	return	
 15060  006C42                     __end_ofPL36:
 15061                           	opt stack 0
 15062  006C42                     PL40:
 15063                           	opt stack 19
 15064  006C42  0102               	movlb	2	; () banked
 15065  006C44  51B4               	movf	doModeVerbose@i_1173& (0+255),w,b
 15066  006C46  C2B2  F0CA         	movff	doModeVerbose@reg,??_doModeVerbose
 15067  006C4A  0100               	movlb	0	; () banked
 15068  006C4C  6BCB               	clrf	(??_doModeVerbose+1)& (0+255),b
 15069  006C4E  27CA               	addwf	??_doModeVerbose& (0+255),f,b
 15070  006C50  0E00               	movlw	0
 15071  006C52  23CB               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 15072  006C54  51CA               	movf	??_doModeVerbose& (0+255),w,b
 15073  006C56  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 15074  006C58  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 15075  006C5A  0012               	return	
 15076  006C5C                     __end_ofPL40:
 15077                           	opt stack 0
 15078  006C5C                     PL48:
 15079                           	opt stack 19
 15080  006C5C  6F60               	movwf	?__CANIDToRegs& (0+255),b
 15081  006C5E  C2A6  F062         	movff	doModeVerbose@id_1296,?__CANIDToRegs+2
 15082  006C62  C2A7  F063         	movff	doModeVerbose@id_1296+1,?__CANIDToRegs+3
 15083  006C66  C2A8  F064         	movff	doModeVerbose@id_1296+2,?__CANIDToRegs+4
 15084  006C6A  C2A9  F065         	movff	doModeVerbose@id_1296+3,?__CANIDToRegs+5
 15085  006C6E  0E01               	movlw	1
 15086  006C70  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 15087  006C72  0C01               	retlw	1
 15088  006C74                     __end_ofPL48:
 15089                           	opt stack 0
 15090  006C74                     PL54:
 15091                           	opt stack 19
 15092  006C74  0100               	movlb	0	; () banked
 15093  006C76  6FCF               	movwf	(??_doModeVerbose+5)& (0+255),b
 15094  006C78  6BD0               	clrf	(??_doModeVerbose+6)& (0+255),b
 15095  006C7A  6BD1               	clrf	(??_doModeVerbose+7)& (0+255),b
 15096  006C7C  C0CF  F0D1         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 15097  006C80  C0CE  F0D0         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 15098  006C84  6BCF               	clrf	(??_doModeVerbose+5)& (0+255),b
 15099  006C86  6BCE               	clrf	(??_doModeVerbose+4)& (0+255),b
 15100  006C88  0012               	return	
 15101  006C8A                     __end_ofPL54:
 15102                           	opt stack 0
 15103                           tblptru	equ	0xFF8
 15104                           tblptrh	equ	0xFF7
 15105                           tblptrl	equ	0xFF6
 15106                           tablat	equ	0xFF5
 15107                           prodh	equ	0xFF4
 15108                           prodl	equ	0xFF3
 15109                           intcon	equ	0xFF2
 15110                           indf0	equ	0xFEF
 15111                           postinc0	equ	0xFEE
 15112                           fsr0h	equ	0xFEA
 15113                           fsr0l	equ	0xFE9
 15114                           wreg	equ	0xFE8
 15115                           indf1	equ	0xFE7
 15116                           postinc1	equ	0xFE6
 15117                           postdec1	equ	0xFE5
 15118                           fsr1h	equ	0xFE2
 15119                           fsr1l	equ	0xFE1
 15120                           indf2	equ	0xFDF
 15121                           postinc2	equ	0xFDE
 15122                           postdec2	equ	0xFDD
 15123                           plusw2	equ	0xFDB
 15124                           fsr2h	equ	0xFDA
 15125                           fsr2l	equ	0xFD9
 15126                           status	equ	0xFD8
 15127                           
 15128 ;; *************** function _setFilter *****************
 15129 ;; Defined at:
 15130 ;;		line 2845 in file "main.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;  filter          1    wreg     unsigned char 
 15133 ;;  val             4    0[BANK0 ] unsigned long 
 15134 ;; Auto vars:     Size  Location     Type
 15135 ;;  filter          1   10[BANK0 ] unsigned char 
 15136 ;;  eidl            1   14[BANK0 ] unsigned char 
 15137 ;;  eidh            1   13[BANK0 ] unsigned char 
 15138 ;;  sidl            1   12[BANK0 ] unsigned char 
 15139 ;;  sidh            1   11[BANK0 ] unsigned char 
 15140 ;; Return value:  Size  Location     Type
 15141 ;;		None               void
 15142 ;; Registers used:
 15143 ;;		wreg, status,2, status,0
 15144 ;; Tracked objects:
 15145 ;;		On entry : F/2
 15146 ;;		On exit  : F/0
 15147 ;;		Unchanged: 0/0
 15148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15149 ;;      Params:         0       4       0       0       0       0       0
 15150 ;;      Locals:         0       5       0       0       0       0       0
 15151 ;;      Temps:          0       6       0       0       0       0       0
 15152 ;;      Totals:         0      15       0       0       0       0       0
 15153 ;;Total ram usage:       15 bytes
 15154 ;; Hardware stack levels used:    1
 15155 ;; Hardware stack levels required when called:    3
 15156 ;; This function calls:
 15157 ;;		Nothing
 15158 ;; This function is called by:
 15159 ;;		_doModeVerbose
 15160 ;; This function uses a non-reentrant model
 15161 ;;
 15162                           
 15163                           	psect	text23
 15164  00437E                     __ptext23:
 15165                           	opt stack 0
 15166  00437E                     _setFilter:
 15167                           	opt stack 25
 15168                           
 15169                           ;incstack = 0
 15170                           ;incstack = 0
 15171                           ;setFilter@filter stored from wreg
 15172  00437E  CFE8 F06A          	movff	wreg,setFilter@filter
 15173                           
 15174                           ; BSR set to: 2
 15175                           ;main.c: 2846: uint8_t sidh = (long) val >> 21L;
 15176  004382  0E15               	movlw	21
 15177  004384  0100               	movlb	0	; () banked
 15178  004386  6F64               	movwf	??_setFilter& (0+255),b
 15179  004388  C060  F065         	movff	setFilter@val,??_setFilter+1
 15180  00438C  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 15181  004390  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 15182  004394  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 15183  004398                     u15915:
 15184  004398  6764               	tstfsz	??_setFilter& (0+255),b
 15185  00439A  D001               	goto	u15916
 15186  00439C  D007               	goto	u15917
 15187  00439E                     u15916:
 15188  00439E  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 15189  0043A0  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15190  0043A2  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15191  0043A4  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15192  0043A6  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 15193  0043A8  2F64               	decfsz	??_setFilter& (0+255),f,b
 15194  0043AA  D7F6               	goto	u15915
 15195  0043AC                     u15917:
 15196  0043AC  5165               	movf	(??_setFilter+1)& (0+255),w,b
 15197  0043AE  6F6B               	movwf	setFilter@sidh& (0+255),b
 15198                           
 15199                           ;main.c: 2847: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 15200                           ;main.c: 2848: ((long) (val) & 0x03L) |
 15201                           ;main.c: 2849: 0x08;
 15202  0043B0  C060  F064         	movff	setFilter@val,??_setFilter
 15203  0043B4  0E03               	movlw	3
 15204  0043B6  1764               	andwf	??_setFilter& (0+255),f,b
 15205  0043B8  0E0D               	movlw	13
 15206  0043BA  6F65               	movwf	(??_setFilter+1)& (0+255),b
 15207  0043BC  C060  F066         	movff	setFilter@val,??_setFilter+2
 15208  0043C0  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 15209  0043C4  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 15210  0043C8  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 15211  0043CC                     u15925:
 15212  0043CC  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 15213  0043CE  D001               	goto	u15926
 15214  0043D0  D007               	goto	u15927
 15215  0043D2                     u15926:
 15216  0043D2  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 15217  0043D4  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 15218  0043D6  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15219  0043D8  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15220  0043DA  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15221  0043DC  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 15222  0043DE  D7F6               	goto	u15925
 15223  0043E0                     u15927:
 15224  0043E0  5166               	movf	(??_setFilter+2)& (0+255),w,b
 15225  0043E2  0BE0               	andlw	224
 15226  0043E4  1164               	iorwf	??_setFilter& (0+255),w,b
 15227  0043E6  0908               	iorlw	8
 15228  0043E8  6F6C               	movwf	setFilter@sidl& (0+255),b
 15229                           
 15230                           ; BSR set to: 0
 15231                           ;main.c: 2850: uint8_t eidh = (long) val >> 8L;
 15232  0043EA  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;main.c: 2851: uint8_t eidl = val;
 15236  0043EE  C060  F06E         	movff	setFilter@val,setFilter@eidl
 15237                           
 15238                           ;main.c: 2853: switch (filter) {
 15239  0043F2  D090               	goto	l12428
 15240  0043F4                     l1262:
 15241                           
 15242                           ; BSR set to: 0
 15243                           ;main.c: 2856: RXF0SIDH = sidh;
 15244  0043F4  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 15245                           
 15246                           ;main.c: 2857: RXF0SIDL = sidl;
 15247  0043F8  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 15248                           
 15249                           ;main.c: 2858: RXF0EIDH = eidh;
 15250  0043FC  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 15251                           
 15252                           ;main.c: 2859: RXF0EIDL = eidl;
 15253  004400  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 15254                           
 15255                           ;main.c: 2860: break;
 15256  004404  D0AA               	goto	l1279
 15257  004406                     l1264:
 15258                           
 15259                           ; BSR set to: 0
 15260                           ;main.c: 2863: RXF1SIDH = sidh;
 15261  004406  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 15262                           
 15263                           ;main.c: 2864: RXF1SIDL = sidl;
 15264  00440A  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 15265                           
 15266                           ;main.c: 2865: RXF1EIDH = eidh;
 15267  00440E  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 15268                           
 15269                           ;main.c: 2866: RXF1EIDL = eidl;
 15270  004412  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 15271                           
 15272                           ;main.c: 2867: break;
 15273  004416  D0A1               	goto	l1279
 15274  004418                     l1265:
 15275                           
 15276                           ; BSR set to: 0
 15277                           ;main.c: 2870: RXF2SIDH = sidh;
 15278  004418  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 15279                           
 15280                           ;main.c: 2871: RXF2SIDL = sidl;
 15281  00441C  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 15282                           
 15283                           ;main.c: 2872: RXF2EIDH = eidh;
 15284  004420  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 15285                           
 15286                           ;main.c: 2873: RXF2EIDL = eidl;
 15287  004424  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 15288                           
 15289                           ;main.c: 2874: break;
 15290  004428  D098               	goto	l1279
 15291  00442A                     l1266:
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;main.c: 2877: RXF3SIDH = sidh;
 15295  00442A  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 15296                           
 15297                           ;main.c: 2878: RXF3SIDL = sidl;
 15298  00442E  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 15299                           
 15300                           ;main.c: 2879: RXF3EIDH = eidh;
 15301  004432  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 15302                           
 15303                           ;main.c: 2880: RXF3EIDL = eidl;
 15304  004436  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 15305                           
 15306                           ;main.c: 2881: break;
 15307  00443A  D08F               	goto	l1279
 15308  00443C                     l1267:
 15309                           
 15310                           ; BSR set to: 0
 15311                           ;main.c: 2884: RXF4SIDH = sidh;
 15312  00443C  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 15313                           
 15314                           ;main.c: 2885: RXF4SIDL = sidl;
 15315  004440  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 15316                           
 15317                           ;main.c: 2886: RXF4EIDH = eidh;
 15318  004444  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 15319                           
 15320                           ;main.c: 2887: RXF4EIDL = eidl;
 15321  004448  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 15322                           
 15323                           ;main.c: 2888: break;
 15324  00444C  D086               	goto	l1279
 15325  00444E                     l1268:
 15326                           
 15327                           ; BSR set to: 0
 15328                           ;main.c: 2891: RXF5SIDH = sidh;
 15329  00444E  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15330                           
 15331                           ;main.c: 2892: RXF5SIDL = sidl;
 15332  004452  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15333                           
 15334                           ;main.c: 2893: RXF5EIDH = eidh;
 15335  004456  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15336                           
 15337                           ;main.c: 2894: RXF5EIDL = eidl;
 15338  00445A  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15339                           
 15340                           ;main.c: 2895: break;
 15341  00445E  D07D               	goto	l1279
 15342  004460                     l1269:
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;main.c: 2898: RXF6SIDH = sidh;
 15346  004460  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15347                           
 15348                           ;main.c: 2899: RXF6SIDL = sidl;
 15349  004464  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15350                           
 15351                           ;main.c: 2900: RXF6EIDH = eidh;
 15352  004468  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15353                           
 15354                           ;main.c: 2901: RXF6EIDL = eidl;
 15355  00446C  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15356                           
 15357                           ;main.c: 2902: break;
 15358  004470  D074               	goto	l1279
 15359  004472                     l1270:
 15360                           
 15361                           ; BSR set to: 0
 15362                           ;main.c: 2905: RXF7SIDH = sidh;
 15363  004472  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15364                           
 15365                           ;main.c: 2906: RXF7SIDL = sidl;
 15366  004476  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15367                           
 15368                           ;main.c: 2907: RXF7EIDH = eidh;
 15369  00447A  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15370                           
 15371                           ;main.c: 2908: RXF7EIDL = eidl;
 15372  00447E  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15373                           
 15374                           ;main.c: 2909: break;
 15375  004482  D06B               	goto	l1279
 15376  004484                     l1271:
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;main.c: 2912: RXF8SIDH = sidh;
 15380  004484  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15381                           
 15382                           ;main.c: 2913: RXF8SIDL = sidl;
 15383  004488  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15384                           
 15385                           ;main.c: 2914: RXF8EIDH = eidh;
 15386  00448C  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15387                           
 15388                           ;main.c: 2915: RXF8EIDL = eidl;
 15389  004490  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15390                           
 15391                           ;main.c: 2916: break;
 15392  004494  D062               	goto	l1279
 15393  004496                     l1272:
 15394                           
 15395                           ; BSR set to: 0
 15396                           ;main.c: 2919: RXF9SIDH = sidh;
 15397  004496  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15398                           
 15399                           ;main.c: 2920: RXF9SIDL = sidl;
 15400  00449A  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15401                           
 15402                           ;main.c: 2921: RXF9EIDH = eidh;
 15403  00449E  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15404                           
 15405                           ;main.c: 2922: RXF9EIDL = eidl;
 15406  0044A2  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15407                           
 15408                           ;main.c: 2923: break;
 15409  0044A6  D059               	goto	l1279
 15410  0044A8                     l1273:
 15411                           
 15412                           ; BSR set to: 0
 15413                           ;main.c: 2926: RXF10SIDH = sidh;
 15414  0044A8  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15415                           
 15416                           ;main.c: 2927: RXF10SIDL = sidl;
 15417  0044AC  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15418                           
 15419                           ;main.c: 2928: RXF10EIDH = eidh;
 15420  0044B0  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15421                           
 15422                           ;main.c: 2929: RXF10EIDL = eidl;
 15423  0044B4  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15424                           
 15425                           ;main.c: 2930: break;
 15426  0044B8  D050               	goto	l1279
 15427  0044BA                     l1274:
 15428                           
 15429                           ; BSR set to: 0
 15430                           ;main.c: 2933: RXF11SIDH = sidh;
 15431  0044BA  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15432                           
 15433                           ;main.c: 2934: RXF11SIDL = sidl;
 15434  0044BE  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15435                           
 15436                           ;main.c: 2935: RXF11EIDH = eidh;
 15437  0044C2  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15438                           
 15439                           ;main.c: 2936: RXF11EIDL = eidl;
 15440  0044C6  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15441                           
 15442                           ;main.c: 2937: break;
 15443  0044CA  D047               	goto	l1279
 15444  0044CC                     l1275:
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;main.c: 2940: RXF12SIDH = sidh;
 15448  0044CC  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15449                           
 15450                           ;main.c: 2941: RXF12SIDL = sidl;
 15451  0044D0  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15452                           
 15453                           ;main.c: 2942: RXF12EIDH = eidh;
 15454  0044D4  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15455                           
 15456                           ;main.c: 2943: RXF12EIDL = eidl;
 15457  0044D8  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15458                           
 15459                           ;main.c: 2944: break;
 15460  0044DC  D03E               	goto	l1279
 15461  0044DE                     l1276:
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;main.c: 2947: RXF13SIDH = sidh;
 15465  0044DE  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15466                           
 15467                           ;main.c: 2948: RXF13SIDL = sidl;
 15468  0044E2  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15469                           
 15470                           ;main.c: 2949: RXF13EIDH = eidh;
 15471  0044E6  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15472                           
 15473                           ;main.c: 2950: RXF13EIDL = eidl;
 15474  0044EA  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15475                           
 15476                           ;main.c: 2951: break;
 15477  0044EE  D035               	goto	l1279
 15478  0044F0                     l1277:
 15479                           
 15480                           ; BSR set to: 0
 15481                           ;main.c: 2954: RXF14SIDH = sidh;
 15482  0044F0  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15483                           
 15484                           ;main.c: 2955: RXF14SIDL = sidl;
 15485  0044F4  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15486                           
 15487                           ;main.c: 2956: RXF14EIDH = eidh;
 15488  0044F8  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15489                           
 15490                           ;main.c: 2957: RXF14EIDL = eidl;
 15491  0044FC  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15492                           
 15493                           ;main.c: 2958: break;
 15494  004500  D02C               	goto	l1279
 15495  004502                     l1278:
 15496                           
 15497                           ; BSR set to: 0
 15498                           ;main.c: 2961: RXF15SIDH = sidh;
 15499  004502  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15500                           
 15501                           ;main.c: 2962: RXF15SIDL = sidl;
 15502  004506  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15503                           
 15504                           ;main.c: 2963: RXF15EIDH = eidh;
 15505  00450A  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15506                           
 15507                           ;main.c: 2964: RXF15EIDL = eidl;
 15508  00450E  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15509                           
 15510                           ;main.c: 2965: break;
 15511  004512  D023               	goto	l1279
 15512  004514                     l12428:
 15513                           
 15514                           ; BSR set to: 0
 15515  004514  516A               	movf	setFilter@filter& (0+255),w,b
 15516                           
 15517                           ; Switch size 1, requested type "space"
 15518                           ; Number of cases is 16, Range of values is 0 to 15
 15519                           ; switch strategies available:
 15520                           ; Name         Instructions Cycles
 15521                           ; simple_byte           49    25 (average)
 15522                           ;	Chosen strategy is simple_byte
 15523  004516  E101 D76D          	bz	l1262
 15524  00451A  0A01               	xorlw	1	; case 1
 15525  00451C  E101 D773          	bz	l1264
 15526  004520  0A03               	xorlw	3	; case 2
 15527  004522  E101 D779          	bz	l1265
 15528  004526  0A01               	xorlw	1	; case 3
 15529  004528  E080               	bz	l1266
 15530  00452A  0A07               	xorlw	7	; case 4
 15531  00452C  E087               	bz	l1267
 15532  00452E  0A01               	xorlw	1	; case 5
 15533  004530  E08E               	bz	l1268
 15534  004532  0A03               	xorlw	3	; case 6
 15535  004534  E095               	bz	l1269
 15536  004536  0A01               	xorlw	1	; case 7
 15537  004538  E09C               	bz	l1270
 15538  00453A  0A0F               	xorlw	15	; case 8
 15539  00453C  E0A3               	bz	l1271
 15540  00453E  0A01               	xorlw	1	; case 9
 15541  004540  E0AA               	bz	l1272
 15542  004542  0A03               	xorlw	3	; case 10
 15543  004544  E0B1               	bz	l1273
 15544  004546  0A01               	xorlw	1	; case 11
 15545  004548  E0B8               	bz	l1274
 15546  00454A  0A07               	xorlw	7	; case 12
 15547  00454C  E0BF               	bz	l1275
 15548  00454E  0A01               	xorlw	1	; case 13
 15549  004550  E0C6               	bz	l1276
 15550  004552  0A03               	xorlw	3	; case 14
 15551  004554  E0CD               	bz	l1277
 15552  004556  0A01               	xorlw	1	; case 15
 15553  004558  E0D4               	bz	l1278
 15554  00455A                     l1279:
 15555                           
 15556                           ; BSR set to: 0
 15557  00455A  0012               	return	
 15558  00455C                     __end_of_setFilter:
 15559                           	opt stack 0
 15560                           tblptru	equ	0xFF8
 15561                           tblptrh	equ	0xFF7
 15562                           tblptrl	equ	0xFF6
 15563                           tablat	equ	0xFF5
 15564                           prodh	equ	0xFF4
 15565                           prodl	equ	0xFF3
 15566                           intcon	equ	0xFF2
 15567                           indf0	equ	0xFEF
 15568                           postinc0	equ	0xFEE
 15569                           fsr0h	equ	0xFEA
 15570                           fsr0l	equ	0xFE9
 15571                           wreg	equ	0xFE8
 15572                           indf1	equ	0xFE7
 15573                           postinc1	equ	0xFE6
 15574                           postdec1	equ	0xFE5
 15575                           fsr1h	equ	0xFE2
 15576                           fsr1l	equ	0xFE1
 15577                           indf2	equ	0xFDF
 15578                           postinc2	equ	0xFDE
 15579                           postdec2	equ	0xFDD
 15580                           plusw2	equ	0xFDB
 15581                           fsr2h	equ	0xFDA
 15582                           fsr2l	equ	0xFD9
 15583                           status	equ	0xFD8
 15584                           
 15585 ;; *************** function _writeRegisterExtended *****************
 15586 ;; Defined at:
 15587 ;;		line 2408 in file "main.c"
 15588 ;; Parameters:    Size  Location     Type
 15589 ;;  nodeid          1    wreg     unsigned char 
 15590 ;;  page            2   86[BANK0 ] unsigned short 
 15591 ;;  reg             1   88[BANK0 ] unsigned char 
 15592 ;;  timeout         2   89[BANK0 ] unsigned short 
 15593 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15594 ;;		 -> doModeVerbose@value_1238(1), 
 15595 ;; Auto vars:     Size  Location     Type
 15596 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15597 ;; Return value:  Size  Location     Type
 15598 ;;                  1    wreg      enum E15660
 15599 ;; Registers used:
 15600 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15601 ;; Tracked objects:
 15602 ;;		On entry : F/2
 15603 ;;		On exit  : E/0
 15604 ;;		Unchanged: 0/0
 15605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15606 ;;      Params:         0       7       0       0       0       0       0
 15607 ;;      Locals:         0       1       0       0       0       0       0
 15608 ;;      Temps:          0       4       0       0       0       0       0
 15609 ;;      Totals:         0      12       0       0       0       0       0
 15610 ;;Total ram usage:       12 bytes
 15611 ;; Hardware stack levels used:    1
 15612 ;; Hardware stack levels required when called:    7
 15613 ;; This function calls:
 15614 ;;		_sendVSCPFrame
 15615 ;;		_getVSCPFrame
 15616 ;; This function is called by:
 15617 ;;		_doModeVerbose
 15618 ;; This function uses a non-reentrant model
 15619 ;;
 15620                           
 15621                           	psect	text24
 15622  002FC2                     __ptext24:
 15623                           	opt stack 0
 15624  002FC2                     _writeRegisterExtended:
 15625                           	opt stack 21
 15626                           
 15627                           ; BSR set to: 0
 15628                           ;incstack = 0
 15629                           ;incstack = 0
 15630                           ;writeRegisterExtended@nodeid stored from wreg
 15631  002FC2  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 15632                           
 15633                           ; BSR set to: 2
 15634                           ;main.c: 2409: vscpData[ 0 ] = nodeid;
 15635  002FC6  C0C1  F1DF         	movff	writeRegisterExtended@nodeid,_vscpData
 15636                           
 15637                           ; BSR set to: 2
 15638                           ;main.c: 2410: vscpData[ 1 ] = page >> 8;
 15639  002FCA  0100               	movlb	0	; () banked
 15640  002FCC  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15641  002FCE  0101               	movlb	1	; () banked
 15642  002FD0  6FE0               	movwf	(_vscpData+1)& (0+255),b
 15643                           
 15644                           ; BSR set to: 1
 15645                           ;main.c: 2411: vscpData[ 2 ] = page & 0xff;
 15646  002FD2  C0B6  F1E1         	movff	writeRegisterExtended@page,_vscpData+2
 15647                           
 15648                           ; BSR set to: 1
 15649                           ;main.c: 2412: vscpData[ 3 ] = reg;
 15650  002FD6  C0B8  F1E2         	movff	writeRegisterExtended@reg,_vscpData+3
 15651                           
 15652                           ; BSR set to: 1
 15653                           ;main.c: 2413: vscpData[ 4 ] = *value;
 15654  002FDA  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15655  002FDE  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15656  002FE2  50DF               	movf	indf2,w,c
 15657  002FE4  6FE3               	movwf	(_vscpData+4)& (0+255),b
 15658                           
 15659                           ; BSR set to: 1
 15660                           ;main.c: 2415: if (sendVSCPFrame(0,
 15661                           ;main.c: 2416: 38,
 15662                           ;main.c: 2417: 0,
 15663                           ;main.c: 2418: 0,
 15664                           ;main.c: 2419: 5,
 15665                           ;main.c: 2420: vscpData)) {
 15666  002FE6  0100               	movlb	0	; () banked
 15667  002FE8  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15668  002FEA  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15669  002FEC  0E26               	movlw	38
 15670  002FEE  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15671  002FF0  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15672  002FF2  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15673  002FF4  0E05               	movlw	5
 15674  002FF6  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15675  002FF8  0E01               	movlw	high _vscpData
 15676  002FFA  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15677  002FFC  0EDF               	movlw	low _vscpData
 15678  002FFE  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15679  003000  ECDE  F013         	call	_sendVSCPFrame	;wreg free
 15680  003004  0900               	iorlw	0
 15681  003006  E051               	bz	l15692
 15682                           
 15683                           ;main.c: 2422: timekeeper = 0;
 15684  003008  6A22               	clrf	_timekeeper,c	;volatile
 15685  00300A  6A23               	clrf	_timekeeper+1,c	;volatile
 15686  00300C  6A24               	clrf	_timekeeper+2,c	;volatile
 15687  00300E  6A25               	clrf	_timekeeper+3,c	;volatile
 15688                           
 15689                           ;main.c: 2423: while (timekeeper < timeout) {
 15690  003010  D03C               	goto	l15690
 15691  003012                     l1119:
 15692                           
 15693                           ; BSR set to: 0
 15694  003012  0004               	clrwdt		;# 
 15695                           
 15696                           ;main.c: 2427: if (getVSCPFrame(&vscpClass,
 15697                           ;main.c: 2428: &vscpType,
 15698                           ;main.c: 2429: &vscpNodeId,
 15699                           ;main.c: 2430: &vscpPriority,
 15700                           ;main.c: 2431: &vscpSize,
 15701                           ;main.c: 2432: vscpData)) {
 15702  003014  0E3F               	movlw	low _vscpType
 15703  003016  0100               	movlb	0	; () banked
 15704  003018  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15705  00301A  0EE8               	movlw	low _vscpNodeId
 15706  00301C  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15707  00301E  0E3E               	movlw	low _vscpPriority
 15708  003020  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15709  003022  0EE9               	movlw	low _vscpSize
 15710  003024  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15711  003026  0E01               	movlw	high _vscpData
 15712  003028  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15713  00302A  0EDF               	movlw	low _vscpData
 15714  00302C  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15715  00302E  0E3A               	movlw	_vscpClass& (0+255)
 15716  003030  EC49  F010         	call	_getVSCPFrame
 15717  003034  0900               	iorlw	0
 15718  003036  E029               	bz	l15690
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;main.c: 2434: if ((nodeid == vscpNodeId) &&
 15722                           ;main.c: 2435: (5 == vscpSize) &&
 15723                           ;main.c: 2436: (0 == vscpData[ 0 ]) &&
 15724                           ;main.c: 2437: ((page >> 8) == vscpData[ 1 ]) &&
 15725                           ;main.c: 2438: ((page & 0xff) == vscpData[ 2 ]) &&
 15726                           ;main.c: 2439: (reg == vscpData[ 3 ]) &&
 15727                           ;main.c: 2440: (*value == vscpData[ 4 ])) {
 15728  003038  51E8               	movf	_vscpNodeId& (0+255),w,b
 15729  00303A  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15730  00303C  D026               	goto	l15690
 15731                           
 15732                           ; BSR set to: 0
 15733  00303E  51E9               	movf	_vscpSize& (0+255),w,b
 15734  003040  0A05               	xorlw	5
 15735  003042  E123               	bnz	l15690
 15736                           
 15737                           ; BSR set to: 0
 15738  003044  0101               	movlb	1	; () banked
 15739  003046  67DF               	tstfsz	_vscpData& (0+255),b
 15740  003048  D020               	goto	l15690
 15741                           
 15742                           ; BSR set to: 1
 15743  00304A  0100               	movlb	0	; () banked
 15744  00304C  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15745  00304E  0101               	movlb	1	; () banked
 15746  003050  19E0               	xorwf	(_vscpData+1)& (0+255),w,b
 15747  003052  E11B               	bnz	l15690
 15748                           
 15749                           ; BSR set to: 1
 15750  003054  0100               	movlb	0	; () banked
 15751  003056  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 15752  003058  EE21  F0E1         	lfsr	2,_vscpData+2
 15753  00305C  62DF               	cpfseq	indf2,c
 15754  00305E  D015               	goto	l15690
 15755                           
 15756                           ; BSR set to: 1
 15757  003060  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 15758  003062  0101               	movlb	1	; () banked
 15759  003064  EE21  F0E2         	lfsr	2,_vscpData+3
 15760  003068  62DF               	cpfseq	indf2,c
 15761  00306A  D00F               	goto	l15690
 15762                           
 15763                           ; BSR set to: 1
 15764  00306C  51E3               	movf	(_vscpData+4)& (0+255),w,b
 15765  00306E  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15766  003072  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15767  003076  62DF               	cpfseq	indf2,c
 15768  003078  D008               	goto	l15690
 15769                           
 15770                           ; BSR set to: 1
 15771                           ;main.c: 2441: *value = vscpData[ 1 ];
 15772  00307A  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15773  00307E  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15774  003082  C1E0  FFDF         	movff	_vscpData+1,indf2
 15775                           
 15776                           ; BSR set to: 1
 15777                           ;main.c: 2442: return 1;
 15778  003086  0E01               	movlw	1
 15779  003088  D011               	goto	l1122
 15780  00308A                     l15690:
 15781  00308A  0100               	movlb	0	; () banked
 15782  00308C  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15783  00308E  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 15784  003090  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15785  003092  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15786  003094  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15787  003096  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15788  003098  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 15789  00309A  5C22               	subwf	_timekeeper,w,c	;volatile
 15790  00309C  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15791  00309E  5823               	subwfb	_timekeeper+1,w,c	;volatile
 15792  0030A0  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15793  0030A2  5824               	subwfb	_timekeeper+2,w,c	;volatile
 15794  0030A4  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15795  0030A6  5825               	subwfb	_timekeeper+3,w,c	;volatile
 15796  0030A8  E3B4               	bnc	l1119
 15797  0030AA                     l15692:
 15798                           
 15799                           ;main.c: 2443: }
 15800                           ;main.c: 2445: }
 15801                           ;main.c: 2447: }
 15802                           ;main.c: 2449: }
 15803                           ;main.c: 2451: return 0;
 15804  0030AA  0E00               	movlw	0
 15805  0030AC                     l1122:
 15806  0030AC  0012               	return	
 15807  0030AE                     __end_of_writeRegisterExtended:
 15808                           	opt stack 0
 15809                           tblptru	equ	0xFF8
 15810                           tblptrh	equ	0xFF7
 15811                           tblptrl	equ	0xFF6
 15812                           tablat	equ	0xFF5
 15813                           prodh	equ	0xFF4
 15814                           prodl	equ	0xFF3
 15815                           intcon	equ	0xFF2
 15816                           indf0	equ	0xFEF
 15817                           postinc0	equ	0xFEE
 15818                           fsr0h	equ	0xFEA
 15819                           fsr0l	equ	0xFE9
 15820                           wreg	equ	0xFE8
 15821                           indf1	equ	0xFE7
 15822                           postinc1	equ	0xFE6
 15823                           postdec1	equ	0xFE5
 15824                           fsr1h	equ	0xFE2
 15825                           fsr1l	equ	0xFE1
 15826                           indf2	equ	0xFDF
 15827                           postinc2	equ	0xFDE
 15828                           postdec2	equ	0xFDD
 15829                           plusw2	equ	0xFDB
 15830                           fsr2h	equ	0xFDA
 15831                           fsr2l	equ	0xFD9
 15832                           status	equ	0xFD8
 15833                           
 15834 ;; *************** function _printBinary *****************
 15835 ;; Defined at:
 15836 ;;		line 2495 in file "main.c"
 15837 ;; Parameters:    Size  Location     Type
 15838 ;;  value           1    wreg     unsigned char 
 15839 ;; Auto vars:     Size  Location     Type
 15840 ;;  value           1    3[BANK0 ] unsigned char 
 15841 ;;  i               2    4[BANK0 ] int 
 15842 ;; Return value:  Size  Location     Type
 15843 ;;		None               void
 15844 ;; Registers used:
 15845 ;;		wreg, status,2, status,0, cstack
 15846 ;; Tracked objects:
 15847 ;;		On entry : F/2
 15848 ;;		On exit  : F/0
 15849 ;;		Unchanged: 0/0
 15850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15851 ;;      Params:         0       0       0       0       0       0       0
 15852 ;;      Locals:         0       3       0       0       0       0       0
 15853 ;;      Temps:          0       2       0       0       0       0       0
 15854 ;;      Totals:         0       5       0       0       0       0       0
 15855 ;;Total ram usage:        5 bytes
 15856 ;; Hardware stack levels used:    1
 15857 ;; Hardware stack levels required when called:    4
 15858 ;; This function calls:
 15859 ;;		_WriteUSART
 15860 ;; This function is called by:
 15861 ;;		_doModeVerbose
 15862 ;; This function uses a non-reentrant model
 15863 ;;
 15864                           
 15865                           	psect	text25
 15866  001AB8                     __ptext25:
 15867                           	opt stack 0
 15868  001AB8                     _printBinary:
 15869                           	opt stack 24
 15870                           
 15871                           ;incstack = 0
 15872                           ;incstack = 0
 15873                           ;printBinary@value stored from wreg
 15874  001AB8  CFE8 F063          	movff	wreg,printBinary@value
 15875                           
 15876                           ; BSR set to: 2
 15877                           ;main.c: 2496: int i;
 15878                           ;main.c: 2498: for (i = 7; i >= 0; i--) {
 15879  001ABC  0100               	movlb	0	; () banked
 15880  001ABE  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15881  001AC0  0E07               	movlw	7
 15882  001AC2  6F64               	movwf	printBinary@i& (0+255),b
 15883  001AC4                     l15642:
 15884                           
 15885                           ; BSR set to: 0
 15886                           ;main.c: 2499: if (value & (1 << i)) {
 15887  001AC4  C064  F061         	movff	printBinary@i,??_printBinary
 15888  001AC8  0E01               	movlw	1
 15889  001ACA  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15890  001ACC  2B61               	incf	??_printBinary& (0+255),f,b
 15891  001ACE  D002               	goto	u21134
 15892  001AD0                     u21135:
 15893  001AD0  90D8               	bcf	status,0,c
 15894  001AD2  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15895  001AD4                     u21134:
 15896  001AD4  2F61               	decfsz	??_printBinary& (0+255),f,b
 15897  001AD6  D7FC               	goto	u21135
 15898  001AD8  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15899  001ADA  1563               	andwf	printBinary@value& (0+255),w,b
 15900  001ADC  E006               	bz	l1142
 15901  001ADE                     l1138:
 15902  001ADE  A2AC               	btfss	4012,1,c	;volatile
 15903  001AE0  D7FE               	goto	l1138
 15904                           
 15905                           ;main.c: 2501: WriteUSART('1');
 15906  001AE2  0E31               	movlw	49
 15907  001AE4  ECF3  F00A         	call	_WriteUSART
 15908                           
 15909                           ;main.c: 2502: } else {
 15910  001AE8  D005               	goto	l15650
 15911  001AEA                     l1142:
 15912  001AEA  A2AC               	btfss	4012,1,c	;volatile
 15913  001AEC  D7FE               	goto	l1142
 15914                           
 15915                           ;main.c: 2504: WriteUSART('0');
 15916  001AEE  0E30               	movlw	48
 15917  001AF0  ECF3  F00A         	call	_WriteUSART
 15918  001AF4                     l15650:
 15919  001AF4  0100               	movlb	0	; () banked
 15920  001AF6  0764               	decf	printBinary@i& (0+255),f,b
 15921  001AF8  A0D8               	btfss	status,0,c
 15922  001AFA  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15923                           
 15924                           ; BSR set to: 0
 15925  001AFC  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15926                           
 15927                           ; BSR set to: 0
 15928  001AFE  0012               	return	
 15929  001B00  D7E1               	goto	l15642
 15930  001B02                     __end_of_printBinary:
 15931                           	opt stack 0
 15932                           tblptru	equ	0xFF8
 15933                           tblptrh	equ	0xFF7
 15934                           tblptrl	equ	0xFF6
 15935                           tablat	equ	0xFF5
 15936                           prodh	equ	0xFF4
 15937                           prodl	equ	0xFF3
 15938                           intcon	equ	0xFF2
 15939                           indf0	equ	0xFEF
 15940                           postinc0	equ	0xFEE
 15941                           fsr0h	equ	0xFEA
 15942                           fsr0l	equ	0xFE9
 15943                           wreg	equ	0xFE8
 15944                           indf1	equ	0xFE7
 15945                           postinc1	equ	0xFE6
 15946                           postdec1	equ	0xFE5
 15947                           fsr1h	equ	0xFE2
 15948                           fsr1l	equ	0xFE1
 15949                           indf2	equ	0xFDF
 15950                           postinc2	equ	0xFDE
 15951                           postdec2	equ	0xFDD
 15952                           plusw2	equ	0xFDB
 15953                           fsr2h	equ	0xFDA
 15954                           fsr2l	equ	0xFD9
 15955                           status	equ	0xFD8
 15956                           
 15957 ;; *************** function _readRegisterExtended *****************
 15958 ;; Defined at:
 15959 ;;		line 2307 in file "main.c"
 15960 ;; Parameters:    Size  Location     Type
 15961 ;;  nodeid          1    wreg     unsigned char 
 15962 ;;  page            2   86[BANK0 ] unsigned short 
 15963 ;;  reg             1   88[BANK0 ] unsigned char 
 15964 ;;  timeout         2   89[BANK0 ] unsigned short 
 15965 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15966 ;;		 -> doModeVerbose@value(1), 
 15967 ;; Auto vars:     Size  Location     Type
 15968 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15969 ;; Return value:  Size  Location     Type
 15970 ;;                  1    wreg      enum E15660
 15971 ;; Registers used:
 15972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15973 ;; Tracked objects:
 15974 ;;		On entry : F/2
 15975 ;;		On exit  : E/0
 15976 ;;		Unchanged: 0/0
 15977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15978 ;;      Params:         0       7       0       0       0       0       0
 15979 ;;      Locals:         0       1       0       0       0       0       0
 15980 ;;      Temps:          0       4       0       0       0       0       0
 15981 ;;      Totals:         0      12       0       0       0       0       0
 15982 ;;Total ram usage:       12 bytes
 15983 ;; Hardware stack levels used:    1
 15984 ;; Hardware stack levels required when called:    7
 15985 ;; This function calls:
 15986 ;;		_sendVSCPFrame
 15987 ;;		_getVSCPFrame
 15988 ;; This function is called by:
 15989 ;;		_doModeVerbose
 15990 ;; This function uses a non-reentrant model
 15991 ;;
 15992                           
 15993                           	psect	text26
 15994  002D10                     __ptext26:
 15995                           	opt stack 0
 15996  002D10                     _readRegisterExtended:
 15997                           	opt stack 21
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;incstack = 0
 16001                           ;incstack = 0
 16002                           ;readRegisterExtended@nodeid stored from wreg
 16003  002D10  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 16004                           
 16005                           ; BSR set to: 2
 16006                           ;main.c: 2308: vscpData[ 0 ] = nodeid;
 16007  002D14  C0C1  F1DF         	movff	readRegisterExtended@nodeid,_vscpData
 16008                           
 16009                           ; BSR set to: 2
 16010                           ;main.c: 2309: vscpData[ 1 ] = page >> 8;
 16011  002D18  0100               	movlb	0	; () banked
 16012  002D1A  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16013  002D1C  0101               	movlb	1	; () banked
 16014  002D1E  6FE0               	movwf	(_vscpData+1)& (0+255),b
 16015                           
 16016                           ; BSR set to: 1
 16017                           ;main.c: 2310: vscpData[ 2 ] = page & 0xff;
 16018  002D20  C0B6  F1E1         	movff	readRegisterExtended@page,_vscpData+2
 16019                           
 16020                           ; BSR set to: 1
 16021                           ;main.c: 2311: vscpData[ 3 ] = reg;
 16022  002D24  C0B8  F1E2         	movff	readRegisterExtended@reg,_vscpData+3
 16023                           
 16024                           ; BSR set to: 1
 16025                           ;main.c: 2312: vscpData[ 4 ] = 1;
 16026  002D28  0E01               	movlw	1
 16027  002D2A  6FE3               	movwf	(_vscpData+4)& (0+255),b
 16028                           
 16029                           ; BSR set to: 1
 16030                           ;main.c: 2314: if (sendVSCPFrame(0,
 16031                           ;main.c: 2315: 37,
 16032                           ;main.c: 2316: 0,
 16033                           ;main.c: 2317: 0,
 16034                           ;main.c: 2318: 5,
 16035                           ;main.c: 2319: vscpData)) {
 16036  002D2C  0100               	movlb	0	; () banked
 16037  002D2E  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16038  002D30  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 16039  002D32  0E25               	movlw	37
 16040  002D34  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16041  002D36  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16042  002D38  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16043  002D3A  0E05               	movlw	5
 16044  002D3C  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16045  002D3E  0E01               	movlw	high _vscpData
 16046  002D40  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16047  002D42  0EDF               	movlw	low _vscpData
 16048  002D44  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16049  002D46  ECDE  F013         	call	_sendVSCPFrame	;wreg free
 16050  002D4A  0900               	iorlw	0
 16051  002D4C  E050               	bz	l15282
 16052                           
 16053                           ;main.c: 2321: timekeeper = 0;
 16054  002D4E  6A22               	clrf	_timekeeper,c	;volatile
 16055  002D50  6A23               	clrf	_timekeeper+1,c	;volatile
 16056  002D52  6A24               	clrf	_timekeeper+2,c	;volatile
 16057  002D54  6A25               	clrf	_timekeeper+3,c	;volatile
 16058                           
 16059                           ;main.c: 2322: while (timekeeper < timeout) {
 16060  002D56  D03B               	goto	l15280
 16061  002D58                     l1101:
 16062                           
 16063                           ; BSR set to: 0
 16064  002D58  0004               	clrwdt		;# 
 16065                           
 16066                           ;main.c: 2326: if (getVSCPFrame(&vscpClass,
 16067                           ;main.c: 2327: &vscpType,
 16068                           ;main.c: 2328: &vscpNodeId,
 16069                           ;main.c: 2329: &vscpPriority,
 16070                           ;main.c: 2330: &vscpSize,
 16071                           ;main.c: 2331: vscpData)) {
 16072  002D5A  0E3F               	movlw	low _vscpType
 16073  002D5C  0100               	movlb	0	; () banked
 16074  002D5E  6F72               	movwf	?_getVSCPFrame& (0+255),b
 16075  002D60  0EE8               	movlw	low _vscpNodeId
 16076  002D62  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16077  002D64  0E3E               	movlw	low _vscpPriority
 16078  002D66  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16079  002D68  0EE9               	movlw	low _vscpSize
 16080  002D6A  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16081  002D6C  0E01               	movlw	high _vscpData
 16082  002D6E  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16083  002D70  0EDF               	movlw	low _vscpData
 16084  002D72  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16085  002D74  0E3A               	movlw	_vscpClass& (0+255)
 16086  002D76  EC49  F010         	call	_getVSCPFrame
 16087  002D7A  0900               	iorlw	0
 16088  002D7C  E028               	bz	l15280
 16089                           
 16090                           ; BSR set to: 0
 16091                           ;main.c: 2332: if ((nodeid == vscpNodeId) &&
 16092                           ;main.c: 2333: (0 == vscpClass) &&
 16093                           ;main.c: 2334: (39 == vscpType) &&
 16094                           ;main.c: 2335: (5 == vscpSize) &&
 16095                           ;main.c: 2336: (0 == vscpData[ 0 ]) &&
 16096                           ;main.c: 2337: ((page >> 8) == vscpData[ 1 ]) &&
 16097                           ;main.c: 2338: ((page & 0xff) == vscpData[ 2 ]) &&
 16098                           ;main.c: 2339: (reg == vscpData[ 3 ])) {
 16099  002D7E  51E8               	movf	_vscpNodeId& (0+255),w,b
 16100  002D80  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 16101  002D82  D025               	goto	l15280
 16102                           
 16103                           ; BSR set to: 0
 16104  002D84  503B               	movf	_vscpClass+1,w,c
 16105  002D86  103A               	iorwf	_vscpClass,w,c
 16106  002D88  E122               	bnz	l15280
 16107                           
 16108                           ; BSR set to: 0
 16109  002D8A  503F               	movf	_vscpType,w,c
 16110  002D8C  0A27               	xorlw	39
 16111  002D8E  E11F               	bnz	l15280
 16112                           
 16113                           ; BSR set to: 0
 16114  002D90  51E9               	movf	_vscpSize& (0+255),w,b
 16115  002D92  0A05               	xorlw	5
 16116  002D94  E11C               	bnz	l15280
 16117                           
 16118                           ; BSR set to: 0
 16119  002D96  0101               	movlb	1	; () banked
 16120  002D98  67DF               	tstfsz	_vscpData& (0+255),b
 16121  002D9A  D019               	goto	l15280
 16122                           
 16123                           ; BSR set to: 1
 16124  002D9C  0100               	movlb	0	; () banked
 16125  002D9E  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 16126  002DA0  0101               	movlb	1	; () banked
 16127  002DA2  19E0               	xorwf	(_vscpData+1)& (0+255),w,b
 16128  002DA4  E114               	bnz	l15280
 16129                           
 16130                           ; BSR set to: 1
 16131  002DA6  0100               	movlb	0	; () banked
 16132  002DA8  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 16133  002DAA  EE21  F0E1         	lfsr	2,_vscpData+2
 16134  002DAE  62DF               	cpfseq	indf2,c
 16135  002DB0  D00E               	goto	l15280
 16136                           
 16137                           ; BSR set to: 1
 16138  002DB2  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 16139  002DB4  0101               	movlb	1	; () banked
 16140  002DB6  EE21  F0E2         	lfsr	2,_vscpData+3
 16141  002DBA  62DF               	cpfseq	indf2,c
 16142  002DBC  D008               	goto	l15280
 16143                           
 16144                           ; BSR set to: 1
 16145                           ;main.c: 2340: *value = vscpData[ 4 ];
 16146  002DBE  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 16147  002DC2  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 16148  002DC6  C1E3  FFDF         	movff	_vscpData+4,indf2
 16149                           
 16150                           ; BSR set to: 1
 16151                           ;main.c: 2341: return 1;
 16152  002DCA  0E01               	movlw	1
 16153  002DCC  D011               	goto	l1104
 16154  002DCE                     l15280:
 16155  002DCE  0100               	movlb	0	; () banked
 16156  002DD0  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 16157  002DD2  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 16158  002DD4  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 16159  002DD6  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 16160  002DD8  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 16161  002DDA  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 16162  002DDC  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 16163  002DDE  5C22               	subwf	_timekeeper,w,c	;volatile
 16164  002DE0  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 16165  002DE2  5823               	subwfb	_timekeeper+1,w,c	;volatile
 16166  002DE4  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 16167  002DE6  5824               	subwfb	_timekeeper+2,w,c	;volatile
 16168  002DE8  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 16169  002DEA  5825               	subwfb	_timekeeper+3,w,c	;volatile
 16170  002DEC  E3B5               	bnc	l1101
 16171  002DEE                     l15282:
 16172                           
 16173                           ;main.c: 2342: }
 16174                           ;main.c: 2343: }
 16175                           ;main.c: 2344: }
 16176                           ;main.c: 2345: }
 16177                           ;main.c: 2347: return 0;
 16178  002DEE  0E00               	movlw	0
 16179  002DF0                     l1104:
 16180  002DF0  0012               	return	
 16181  002DF2                     __end_of_readRegisterExtended:
 16182                           	opt stack 0
 16183                           tblptru	equ	0xFF8
 16184                           tblptrh	equ	0xFF7
 16185                           tblptrl	equ	0xFF6
 16186                           tablat	equ	0xFF5
 16187                           prodh	equ	0xFF4
 16188                           prodl	equ	0xFF3
 16189                           intcon	equ	0xFF2
 16190                           indf0	equ	0xFEF
 16191                           postinc0	equ	0xFEE
 16192                           fsr0h	equ	0xFEA
 16193                           fsr0l	equ	0xFE9
 16194                           wreg	equ	0xFE8
 16195                           indf1	equ	0xFE7
 16196                           postinc1	equ	0xFE6
 16197                           postdec1	equ	0xFE5
 16198                           fsr1h	equ	0xFE2
 16199                           fsr1l	equ	0xFE1
 16200                           indf2	equ	0xFDF
 16201                           postinc2	equ	0xFDE
 16202                           postdec2	equ	0xFDD
 16203                           plusw2	equ	0xFDB
 16204                           fsr2h	equ	0xFDA
 16205                           fsr2l	equ	0xFD9
 16206                           status	equ	0xFD8
 16207                           
 16208 ;; *************** function _strcpy *****************
 16209 ;; Defined at:
 16210 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16211 ;; Parameters:    Size  Location     Type
 16212 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16213 ;;		 -> cmdbuf(80), 
 16214 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16215 ;;		 -> cmdbuf(80), 
 16216 ;; Auto vars:     Size  Location     Type
 16217 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16218 ;;		 -> cmdbuf(80), 
 16219 ;; Return value:  Size  Location     Type
 16220 ;;                  2    0[BANK0 ] PTR unsigned char 
 16221 ;; Registers used:
 16222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16223 ;; Tracked objects:
 16224 ;;		On entry : F/0
 16225 ;;		On exit  : F/0
 16226 ;;		Unchanged: 0/0
 16227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16228 ;;      Params:         0       4       0       0       0       0       0
 16229 ;;      Locals:         0       2       0       0       0       0       0
 16230 ;;      Temps:          0       0       0       0       0       0       0
 16231 ;;      Totals:         0       6       0       0       0       0       0
 16232 ;;Total ram usage:        6 bytes
 16233 ;; Hardware stack levels used:    1
 16234 ;; Hardware stack levels required when called:    3
 16235 ;; This function calls:
 16236 ;;		Nothing
 16237 ;; This function is called by:
 16238 ;;		_doModeVerbose
 16239 ;; This function uses a non-reentrant model
 16240 ;;
 16241                           
 16242                           	psect	text27
 16243  0016B4                     __ptext27:
 16244                           	opt stack 0
 16245  0016B4                     _strcpy:
 16246                           	opt stack 25
 16247                           
 16248                           ; BSR set to: 0
 16249                           
 16250                           ;incstack = 0
 16251                           ;incstack = 0
 16252  0016B4  C060  F064         	movff	strcpy@to,strcpy@cp
 16253  0016B8  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16254  0016BC  D004               	goto	l15240
 16255  0016BE                     l15238:
 16256                           
 16257                           ; BSR set to: 0
 16258  0016BE  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16259  0016C0  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16260  0016C2  4B62               	infsnz	strcpy@from& (0+255),f,b
 16261  0016C4  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16262  0016C6                     l15240:
 16263                           
 16264                           ; BSR set to: 0
 16265  0016C6  C062  FFD9         	movff	strcpy@from,fsr2l
 16266  0016CA  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16267  0016CE  C064  FFE1         	movff	strcpy@cp,fsr1l
 16268  0016D2  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16269  0016D6  CFDF FFE7          	movff	indf2,indf1
 16270  0016DA  50E7               	movf	indf1,w,c
 16271  0016DC  B4D8               	btfsc	status,2,c
 16272                           
 16273                           ; BSR set to: 0
 16274  0016DE  0012               	return	
 16275  0016E0  D7EE               	goto	l15238
 16276  0016E2                     __end_of_strcpy:
 16277                           	opt stack 0
 16278                           tblptru	equ	0xFF8
 16279                           tblptrh	equ	0xFF7
 16280                           tblptrl	equ	0xFF6
 16281                           tablat	equ	0xFF5
 16282                           prodh	equ	0xFF4
 16283                           prodl	equ	0xFF3
 16284                           intcon	equ	0xFF2
 16285                           indf0	equ	0xFEF
 16286                           postinc0	equ	0xFEE
 16287                           fsr0h	equ	0xFEA
 16288                           fsr0l	equ	0xFE9
 16289                           wreg	equ	0xFE8
 16290                           indf1	equ	0xFE7
 16291                           postinc1	equ	0xFE6
 16292                           postdec1	equ	0xFE5
 16293                           fsr1h	equ	0xFE2
 16294                           fsr1l	equ	0xFE1
 16295                           indf2	equ	0xFDF
 16296                           postinc2	equ	0xFDE
 16297                           postdec2	equ	0xFDD
 16298                           plusw2	equ	0xFDB
 16299                           fsr2h	equ	0xFDA
 16300                           fsr2l	equ	0xFD9
 16301                           status	equ	0xFD8
 16302                           
 16303 ;; *************** function _findNodes *****************
 16304 ;; Defined at:
 16305 ;;		line 2646 in file "main.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;		None
 16308 ;; Auto vars:     Size  Location     Type
 16309 ;;  i               1  105[BANK0 ] unsigned char 
 16310 ;;  value           1  104[BANK0 ] unsigned char 
 16311 ;;  nFound          1  103[BANK0 ] unsigned char 
 16312 ;; Return value:  Size  Location     Type
 16313 ;;		None               void
 16314 ;; Registers used:
 16315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16316 ;; Tracked objects:
 16317 ;;		On entry : F/0
 16318 ;;		On exit  : 0/0
 16319 ;;		Unchanged: 0/0
 16320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16321 ;;      Params:         0       0       0       0       0       0       0
 16322 ;;      Locals:         0       5       0       0       0       0       0
 16323 ;;      Temps:          0       0       0       0       0       0       0
 16324 ;;      Totals:         0       5       0       0       0       0       0
 16325 ;;Total ram usage:        5 bytes
 16326 ;; Hardware stack levels used:    1
 16327 ;; Hardware stack levels required when called:    9
 16328 ;; This function calls:
 16329 ;;		_putsUSART
 16330 ;;		_printNodeFirmwareVersion
 16331 ;;		_printGUID
 16332 ;;		_printMDF
 16333 ;;		_itoa
 16334 ;;		_readRegister
 16335 ;; This function is called by:
 16336 ;;		_doModeVerbose
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           	psect	text28
 16341  0030AE                     __ptext28:
 16342                           	opt stack 0
 16343  0030AE                     _findNodes:
 16344                           	opt stack 19
 16345                           
 16346                           ; BSR set to: 0
 16347                           ;main.c: 2647: uint8_t nFound = 0;
 16348                           
 16349                           ; BSR set to: 0
 16350                           ;incstack = 0
 16351                           ;incstack = 0
 16352  0030AE  6BC7               	clrf	findNodes@nFound& (0+255),b
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;main.c: 2648: uint8_t i;
 16356                           ;main.c: 2649: uint8_t value;
 16357                           ;main.c: 2651: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16358  0030B0  0E6E               	movlw	high STR_246
 16359  0030B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16360  0030B4  0E7A               	movlw	low STR_246
 16361  0030B6  6F61               	movwf	?_putsUSART& (0+255),b
 16362  0030B8  ECA8  F00D         	call	_putsUSART	;wreg free
 16363                           
 16364                           ;main.c: 2653: for (i = 1; i != 0; i++) {
 16365  0030BC  0E01               	movlw	1
 16366  0030BE  0100               	movlb	0	; () banked
 16367  0030C0  6FC9               	movwf	findNodes@i& (0+255),b
 16368  0030C2                     l1203:
 16369                           
 16370                           ; BSR set to: 0
 16371  0030C2  0004               	clrwdt		;# 
 16372                           
 16373                           ;main.c: 2657: if (readRegister(i,
 16374                           ;main.c: 2658: 0xE0,
 16375                           ;main.c: 2659: rwtimeout,
 16376                           ;main.c: 2660: &value)) {
 16377  0030C4  0EE0               	movlw	224
 16378  0030C6  0100               	movlb	0	; () banked
 16379  0030C8  6FB6               	movwf	?_readRegister& (0+255),b
 16380  0030CA  C037  F0B7         	movff	_rwtimeout,?_readRegister+1
 16381  0030CE  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16382  0030D0  0EC8               	movlw	low findNodes@value
 16383  0030D2  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16384  0030D4  51C9               	movf	findNodes@i& (0+255),w,b
 16385  0030D6  EC84  F013         	call	_readRegister
 16386  0030DA  0900               	iorlw	0
 16387  0030DC  E041               	bz	l15226
 16388                           
 16389                           ;main.c: 2661: putsUSART((char *) "Node found with node id = ");
 16390  0030DE  0E78               	movlw	high STR_247
 16391  0030E0  0100               	movlb	0	; () banked
 16392  0030E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16393  0030E4  0E60               	movlw	low STR_247
 16394  0030E6  6F61               	movwf	?_putsUSART& (0+255),b
 16395  0030E8  ECA8  F00D         	call	_putsUSART	;wreg free
 16396                           
 16397                           ;main.c: 2662: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16398  0030EC  0100               	movlb	0	; () banked
 16399  0030EE  67E5               	tstfsz	_bHex& (0+255),b
 16400  0030F0  D003               	goto	l15208
 16401                           
 16402                           ; BSR set to: 0
 16403  0030F2  6BC6               	clrf	(_findNodes$1547+1)& (0+255),b
 16404  0030F4  0E0A               	movlw	10
 16405  0030F6  D002               	goto	L16
 16406  0030F8                     l15208:
 16407                           
 16408                           ; BSR set to: 0
 16409  0030F8  6BC6               	clrf	(_findNodes$1547+1)& (0+255),b
 16410  0030FA  0E10               	movlw	16
 16411  0030FC                     L16:
 16412  0030FC  6FC5               	movwf	_findNodes$1547& (0+255),b
 16413                           
 16414                           ; BSR set to: 0
 16415  0030FE  0E01               	movlw	high _wrkbuf
 16416  003100  0100               	movlb	0	; () banked
 16417  003102  6F71               	movwf	(?_itoa+1)& (0+255),b
 16418  003104  0E77               	movlw	low _wrkbuf
 16419  003106  6F70               	movwf	?_itoa& (0+255),b
 16420  003108  C0E8  F072         	movff	_vscpNodeId,?_itoa+2
 16421  00310C  6B73               	clrf	(?_itoa+3)& (0+255),b
 16422  00310E  C0C5  F074         	movff	_findNodes$1547,?_itoa+4
 16423  003112  C0C6  F075         	movff	_findNodes$1547+1,?_itoa+5
 16424  003116  ECBB  F00B         	call	_itoa	;wreg free
 16425                           
 16426                           ; BSR set to: 0
 16427                           ;main.c: 2663: putsUSART(wrkbuf);
 16428  00311A  0E01               	movlw	high _wrkbuf
 16429  00311C  0100               	movlb	0	; () banked
 16430  00311E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16431  003120  0E77               	movlw	low _wrkbuf
 16432  003122  6F61               	movwf	?_putsUSART& (0+255),b
 16433  003124  ECA8  F00D         	call	_putsUSART	;wreg free
 16434                           
 16435                           ;main.c: 2664: putsUSART((char *) "\r\n");
 16436  003128  0E71               	movlw	high (STR_205+50)
 16437  00312A  0100               	movlb	0	; () banked
 16438  00312C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16439  00312E  0EA8               	movlw	low (STR_205+50)
 16440  003130  6F61               	movwf	?_putsUSART& (0+255),b
 16441  003132  ECA8  F00D         	call	_putsUSART	;wreg free
 16442                           
 16443                           ;main.c: 2665: printNodeFirmwareVersion(i);
 16444  003136  0100               	movlb	0	; () banked
 16445  003138  51C9               	movf	findNodes@i& (0+255),w,b
 16446  00313A  EC4F  F015         	call	_printNodeFirmwareVersion
 16447                           
 16448                           ;main.c: 2666: printGUID(i);
 16449  00313E  0100               	movlb	0	; () banked
 16450  003140  51C9               	movf	findNodes@i& (0+255),w,b
 16451  003142  ECCE  F018         	call	_printGUID
 16452                           
 16453                           ;main.c: 2667: printMDF(i);
 16454  003146  0100               	movlb	0	; () banked
 16455  003148  51C9               	movf	findNodes@i& (0+255),w,b
 16456  00314A  EC5A  F011         	call	_printMDF
 16457                           
 16458                           ;main.c: 2668: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16459  00314E  0E6E               	movlw	high STR_246
 16460  003150  0100               	movlb	0	; () banked
 16461  003152  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16462  003154  0E7A               	movlw	low STR_246
 16463  003156  6F61               	movwf	?_putsUSART& (0+255),b
 16464  003158  ECA8  F00D         	call	_putsUSART	;wreg free
 16465                           
 16466                           ;main.c: 2669: nFound++;
 16467  00315C  0100               	movlb	0	; () banked
 16468  00315E  2BC7               	incf	findNodes@nFound& (0+255),f,b
 16469  003160                     l15226:
 16470  003160  0100               	movlb	0	; () banked
 16471  003162  2BC9               	incf	findNodes@i& (0+255),f,b
 16472                           
 16473                           ; BSR set to: 0
 16474  003164  67C9               	tstfsz	findNodes@i& (0+255),b
 16475  003166  D7AD               	goto	l1203
 16476                           
 16477                           ; BSR set to: 0
 16478                           ;main.c: 2670: }
 16479                           ;main.c: 2672: }
 16480                           ;main.c: 2674: itoa(wrkbuf, nFound, 10);
 16481  003168  0E01               	movlw	high _wrkbuf
 16482  00316A  6F71               	movwf	(?_itoa+1)& (0+255),b
 16483  00316C  0E77               	movlw	low _wrkbuf
 16484  00316E  6F70               	movwf	?_itoa& (0+255),b
 16485  003170  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 16486  003174  6B73               	clrf	(?_itoa+3)& (0+255),b
 16487  003176  6B75               	clrf	(?_itoa+5)& (0+255),b
 16488  003178  0E0A               	movlw	10
 16489  00317A  6F74               	movwf	(?_itoa+4)& (0+255),b
 16490  00317C  ECBB  F00B         	call	_itoa	;wreg free
 16491                           
 16492                           ; BSR set to: 0
 16493                           ;main.c: 2675: putsUSART(wrkbuf);
 16494  003180  0E01               	movlw	high _wrkbuf
 16495  003182  0100               	movlb	0	; () banked
 16496  003184  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16497  003186  0E77               	movlw	low _wrkbuf
 16498  003188  6F61               	movwf	?_putsUSART& (0+255),b
 16499  00318A  ECA8  F00D         	call	_putsUSART	;wreg free
 16500                           
 16501                           ;main.c: 2676: putsUSART((char *) " nodes found\r\n");
 16502  00318E  0E7B               	movlw	high STR_250
 16503  003190  0100               	movlb	0	; () banked
 16504  003192  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16505  003194  0E2E               	movlw	low STR_250
 16506  003196  6F61               	movwf	?_putsUSART& (0+255),b
 16507  003198  EFA8  F00D         	goto	_putsUSART	;wreg free
 16508  00319C                     __end_of_findNodes:
 16509                           	opt stack 0
 16510                           tblptru	equ	0xFF8
 16511                           tblptrh	equ	0xFF7
 16512                           tblptrl	equ	0xFF6
 16513                           tablat	equ	0xFF5
 16514                           prodh	equ	0xFF4
 16515                           prodl	equ	0xFF3
 16516                           intcon	equ	0xFF2
 16517                           indf0	equ	0xFEF
 16518                           postinc0	equ	0xFEE
 16519                           fsr0h	equ	0xFEA
 16520                           fsr0l	equ	0xFE9
 16521                           wreg	equ	0xFE8
 16522                           indf1	equ	0xFE7
 16523                           postinc1	equ	0xFE6
 16524                           postdec1	equ	0xFE5
 16525                           fsr1h	equ	0xFE2
 16526                           fsr1l	equ	0xFE1
 16527                           indf2	equ	0xFDF
 16528                           postinc2	equ	0xFDE
 16529                           postdec2	equ	0xFDD
 16530                           plusw2	equ	0xFDB
 16531                           fsr2h	equ	0xFDA
 16532                           fsr2l	equ	0xFD9
 16533                           status	equ	0xFD8
 16534                           
 16535 ;; *************** function _printMDF *****************
 16536 ;; Defined at:
 16537 ;;		line 2727 in file "main.c"
 16538 ;; Parameters:    Size  Location     Type
 16539 ;;  nodeid          1    wreg     unsigned char 
 16540 ;; Auto vars:     Size  Location     Type
 16541 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16542 ;;  p               2   97[BANK0 ] PTR unsigned char 
 16543 ;;		 -> wrkbuf(80), 
 16544 ;;  i               1   99[BANK0 ] unsigned char 
 16545 ;;  value           1   96[BANK0 ] unsigned char 
 16546 ;; Return value:  Size  Location     Type
 16547 ;;		None               void
 16548 ;; Registers used:
 16549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16550 ;; Tracked objects:
 16551 ;;		On entry : D/2
 16552 ;;		On exit  : 0/0
 16553 ;;		Unchanged: 0/0
 16554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16555 ;;      Params:         0       0       0       0       0       0       0
 16556 ;;      Locals:         0       5       0       0       0       0       0
 16557 ;;      Temps:          0       0       0       0       0       0       0
 16558 ;;      Totals:         0       5       0       0       0       0       0
 16559 ;;Total ram usage:        5 bytes
 16560 ;; Hardware stack levels used:    1
 16561 ;; Hardware stack levels required when called:    8
 16562 ;; This function calls:
 16563 ;;		_putsUSART
 16564 ;;		_memset
 16565 ;;		_readRegister
 16566 ;; This function is called by:
 16567 ;;		_doModeVerbose
 16568 ;;		_findNodes
 16569 ;; This function uses a non-reentrant model
 16570 ;;
 16571                           
 16572                           	psect	text29
 16573  0022B4                     __ptext29:
 16574                           	opt stack 0
 16575  0022B4                     _printMDF:
 16576                           	opt stack 20
 16577                           
 16578                           ;incstack = 0
 16579                           ;incstack = 0
 16580                           ;printMDF@nodeid stored from wreg
 16581  0022B4  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 16582                           
 16583                           ;main.c: 2728: uint8_t i;
 16584                           ;main.c: 2729: uint8_t value;
 16585                           ;main.c: 2730: char *p = wrkbuf;
 16586  0022B8  0E01               	movlw	high _wrkbuf
 16587  0022BA  0100               	movlb	0	; () banked
 16588  0022BC  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 16589  0022BE  0E77               	movlw	low _wrkbuf
 16590  0022C0  6FC1               	movwf	printMDF@p& (0+255),b
 16591                           
 16592                           ; BSR set to: 0
 16593                           ;main.c: 2731: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16594  0022C2  0E01               	movlw	high _wrkbuf
 16595  0022C4  6F61               	movwf	(?_memset+1)& (0+255),b
 16596  0022C6  0E77               	movlw	low _wrkbuf
 16597  0022C8  6F60               	movwf	?_memset& (0+255),b
 16598  0022CA  6B63               	clrf	(?_memset+3)& (0+255),b
 16599  0022CC  6B62               	clrf	(?_memset+2)& (0+255),b
 16600  0022CE  6B65               	clrf	(?_memset+5)& (0+255),b
 16601  0022D0  0E50               	movlw	80
 16602  0022D2  6F64               	movwf	(?_memset+4)& (0+255),b
 16603  0022D4  EC43  F00B         	call	_memset	;wreg free
 16604                           
 16605                           ; BSR set to: 0
 16606                           ;main.c: 2732: putsUSART((char *) "MDF = http://");
 16607  0022D8  0E7B               	movlw	high STR_256
 16608  0022DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16609  0022DC  0E4C               	movlw	low STR_256
 16610  0022DE  6F61               	movwf	?_putsUSART& (0+255),b
 16611  0022E0  ECA8  F00D         	call	_putsUSART	;wreg free
 16612                           
 16613                           ;main.c: 2734: for (i = 0; i < 32; i++) {
 16614  0022E4  0100               	movlb	0	; () banked
 16615  0022E6  6BC3               	clrf	printMDF@i& (0+255),b
 16616  0022E8                     l15768:
 16617                           
 16618                           ; BSR set to: 0
 16619                           ;main.c: 2735: if (readRegister(nodeid,
 16620                           ;main.c: 2736: 0xE0 + i,
 16621                           ;main.c: 2737: rwtimeout,
 16622                           ;main.c: 2738: &value)) {
 16623  0022E8  51C3               	movf	printMDF@i& (0+255),w,b
 16624  0022EA  0FE0               	addlw	224
 16625  0022EC  6FB6               	movwf	?_readRegister& (0+255),b
 16626  0022EE  C037  F0B7         	movff	_rwtimeout,?_readRegister+1
 16627  0022F2  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16628  0022F4  0EC0               	movlw	low printMDF@value
 16629  0022F6  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16630  0022F8  51BF               	movf	printMDF@nodeid& (0+255),w,b
 16631  0022FA  EC84  F013         	call	_readRegister
 16632  0022FE  0900               	iorlw	0
 16633  002300  E00A               	bz	l15774
 16634                           
 16635                           ;main.c: 2739: *p = value;
 16636  002302  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16637  002306  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16638  00230A  C0C0  FFDF         	movff	printMDF@value,indf2
 16639  00230E                     l15772:
 16640                           
 16641                           ;main.c: 2740: p++;
 16642  00230E  0100               	movlb	0	; () banked
 16643  002310  4BC1               	infsnz	printMDF@p& (0+255),f,b
 16644  002312  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 16645                           
 16646                           ;main.c: 2742: }
 16647  002314  D007               	goto	l15778
 16648  002316                     l15774:
 16649                           
 16650                           ;main.c: 2743: else {
 16651                           ;main.c: 2744: *p = '?';
 16652  002316  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16653  00231A  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16654  00231E  0E3F               	movlw	63
 16655  002320  6EDF               	movwf	indf2,c
 16656  002322  D7F5               	goto	l15772
 16657  002324                     l15778:
 16658                           
 16659                           ; BSR set to: 0
 16660  002324  2BC3               	incf	printMDF@i& (0+255),f,b
 16661                           
 16662                           ; BSR set to: 0
 16663  002326  0E1F               	movlw	31
 16664  002328  65C3               	cpfsgt	printMDF@i& (0+255),b
 16665  00232A  D7DE               	goto	l15768
 16666                           
 16667                           ; BSR set to: 0
 16668                           ;main.c: 2746: }
 16669                           ;main.c: 2747: }
 16670                           ;main.c: 2749: putsUSART(wrkbuf);
 16671  00232C  0E01               	movlw	high _wrkbuf
 16672  00232E  0100               	movlb	0	; () banked
 16673  002330  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16674  002332  0E77               	movlw	low _wrkbuf
 16675  002334  6F61               	movwf	?_putsUSART& (0+255),b
 16676  002336  ECA8  F00D         	call	_putsUSART	;wreg free
 16677                           
 16678                           ;main.c: 2750: putsUSART((char *) "\r\n");
 16679  00233A  0E71               	movlw	high (STR_205+50)
 16680  00233C  0100               	movlb	0	; () banked
 16681  00233E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16682  002340  0EA8               	movlw	low (STR_205+50)
 16683  002342  6F61               	movwf	?_putsUSART& (0+255),b
 16684  002344  EFA8  F00D         	goto	_putsUSART	;wreg free
 16685  002348                     __end_of_printMDF:
 16686                           	opt stack 0
 16687                           tblptru	equ	0xFF8
 16688                           tblptrh	equ	0xFF7
 16689                           tblptrl	equ	0xFF6
 16690                           tablat	equ	0xFF5
 16691                           prodh	equ	0xFF4
 16692                           prodl	equ	0xFF3
 16693                           intcon	equ	0xFF2
 16694                           indf0	equ	0xFEF
 16695                           postinc0	equ	0xFEE
 16696                           fsr0h	equ	0xFEA
 16697                           fsr0l	equ	0xFE9
 16698                           wreg	equ	0xFE8
 16699                           indf1	equ	0xFE7
 16700                           postinc1	equ	0xFE6
 16701                           postdec1	equ	0xFE5
 16702                           fsr1h	equ	0xFE2
 16703                           fsr1l	equ	0xFE1
 16704                           indf2	equ	0xFDF
 16705                           postinc2	equ	0xFDE
 16706                           postdec2	equ	0xFDD
 16707                           plusw2	equ	0xFDB
 16708                           fsr2h	equ	0xFDA
 16709                           fsr2l	equ	0xFD9
 16710                           status	equ	0xFD8
 16711                           
 16712 ;; *************** function _printGUID *****************
 16713 ;; Defined at:
 16714 ;;		line 2686 in file "main.c"
 16715 ;; Parameters:    Size  Location     Type
 16716 ;;  nodeid          1    wreg     unsigned char 
 16717 ;; Auto vars:     Size  Location     Type
 16718 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16719 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16720 ;;  i               1  100[BANK0 ] unsigned char 
 16721 ;;  value           1   99[BANK0 ] unsigned char 
 16722 ;; Return value:  Size  Location     Type
 16723 ;;		None               void
 16724 ;; Registers used:
 16725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16726 ;; Tracked objects:
 16727 ;;		On entry : D/2
 16728 ;;		On exit  : 0/0
 16729 ;;		Unchanged: 0/0
 16730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16731 ;;      Params:         0       0       0       0       0       0       0
 16732 ;;      Locals:         0       6       0       0       0       0       0
 16733 ;;      Temps:          0       0       0       0       0       0       0
 16734 ;;      Totals:         0       6       0       0       0       0       0
 16735 ;;Total ram usage:        6 bytes
 16736 ;; Hardware stack levels used:    1
 16737 ;; Hardware stack levels required when called:    8
 16738 ;; This function calls:
 16739 ;;		_putsUSART
 16740 ;;		_memset
 16741 ;;		_strlen
 16742 ;;		_itoa
 16743 ;;		_readRegister
 16744 ;;		_strcat
 16745 ;; This function is called by:
 16746 ;;		_doModeVerbose
 16747 ;;		_findNodes
 16748 ;; This function uses a non-reentrant model
 16749 ;;
 16750                           
 16751                           	psect	text30
 16752  00319C                     __ptext30:
 16753                           	opt stack 0
 16754  00319C                     _printGUID:
 16755                           	opt stack 20
 16756                           
 16757                           ;incstack = 0
 16758                           ;incstack = 0
 16759                           ;printGUID@nodeid stored from wreg
 16760  00319C  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 16761                           
 16762                           ;main.c: 2687: uint8_t i;
 16763                           ;main.c: 2688: uint8_t value;
 16764                           ;main.c: 2689: char buf[3];
 16765                           ;main.c: 2691: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16766  0031A0  0E01               	movlw	high _wrkbuf
 16767  0031A2  0100               	movlb	0	; () banked
 16768  0031A4  6F61               	movwf	(?_memset+1)& (0+255),b
 16769  0031A6  0E77               	movlw	low _wrkbuf
 16770  0031A8  6F60               	movwf	?_memset& (0+255),b
 16771  0031AA  6B63               	clrf	(?_memset+3)& (0+255),b
 16772  0031AC  6B62               	clrf	(?_memset+2)& (0+255),b
 16773  0031AE  6B65               	clrf	(?_memset+5)& (0+255),b
 16774  0031B0  0E50               	movlw	80
 16775  0031B2  6F64               	movwf	(?_memset+4)& (0+255),b
 16776  0031B4  EC43  F00B         	call	_memset	;wreg free
 16777                           
 16778                           ; BSR set to: 0
 16779                           ;main.c: 2692: putsUSART((char *) "GUID = ");
 16780  0031B8  0E7B               	movlw	high STR_251
 16781  0031BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16782  0031BC  0ED8               	movlw	low STR_251
 16783  0031BE  6F61               	movwf	?_putsUSART& (0+255),b
 16784  0031C0  ECA8  F00D         	call	_putsUSART	;wreg free
 16785                           
 16786                           ;main.c: 2694: for (i = 0; i < 16; i++) {
 16787  0031C4  0100               	movlb	0	; () banked
 16788  0031C6  6BC4               	clrf	printGUID@i& (0+255),b
 16789  0031C8                     l15734:
 16790                           
 16791                           ; BSR set to: 0
 16792                           ;main.c: 2695: if (readRegister(nodeid,
 16793                           ;main.c: 2696: 0xD0 + i,
 16794                           ;main.c: 2697: rwtimeout,
 16795                           ;main.c: 2698: &value)) {
 16796  0031C8  51C4               	movf	printGUID@i& (0+255),w,b
 16797  0031CA  0FD0               	addlw	208
 16798  0031CC  6FB6               	movwf	?_readRegister& (0+255),b
 16799  0031CE  C037  F0B7         	movff	_rwtimeout,?_readRegister+1
 16800  0031D2  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16801  0031D4  0EC3               	movlw	low printGUID@value
 16802  0031D6  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16803  0031D8  51BF               	movf	printGUID@nodeid& (0+255),w,b
 16804  0031DA  EC84  F013         	call	_readRegister
 16805  0031DE  0900               	iorlw	0
 16806  0031E0  E029               	bz	l15744
 16807                           
 16808                           ;main.c: 2699: itoa(buf, value, 16);
 16809  0031E2  0100               	movlb	0	; () banked
 16810  0031E4  0E00               	movlw	high printGUID@buf
 16811  0031E6  6F71               	movwf	(?_itoa+1)& (0+255),b
 16812  0031E8  0EC0               	movlw	low printGUID@buf
 16813  0031EA  6F70               	movwf	?_itoa& (0+255),b
 16814  0031EC  C0C3  F072         	movff	printGUID@value,?_itoa+2
 16815  0031F0  6B73               	clrf	(?_itoa+3)& (0+255),b
 16816  0031F2  6B75               	clrf	(?_itoa+5)& (0+255),b
 16817  0031F4  0E10               	movlw	16
 16818  0031F6  6F74               	movwf	(?_itoa+4)& (0+255),b
 16819  0031F8  ECBB  F00B         	call	_itoa	;wreg free
 16820                           
 16821                           ; BSR set to: 0
 16822                           ;main.c: 2700: if (1 == strlen(buf)) {
 16823  0031FC  0E00               	movlw	high printGUID@buf
 16824  0031FE  6F61               	movwf	(?_strlen+1)& (0+255),b
 16825  003200  0EC0               	movlw	low printGUID@buf
 16826  003202  6F60               	movwf	?_strlen& (0+255),b
 16827  003204  EC8D  F00C         	call	_strlen	;wreg free
 16828  003208  0560               	decf	?_strlen& (0+255),w,b
 16829  00320A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16830  00320C  E10F               	bnz	l15742
 16831                           
 16832                           ; BSR set to: 0
 16833                           ;main.c: 2701: strcat(wrkbuf, "0");
 16834  00320E  0E01               	movlw	high _wrkbuf
 16835  003210  0100               	movlb	0	; () banked
 16836  003212  6F61               	movwf	(?_strcat+1)& (0+255),b
 16837  003214  0E77               	movlw	low _wrkbuf
 16838  003216  6F60               	movwf	?_strcat& (0+255),b
 16839  003218  0E7C               	movlw	high STR_252
 16840  00321A  6F63               	movwf	(?_strcat+3)& (0+255),b
 16841  00321C  0EF8               	movlw	low STR_252
 16842  00321E  6F62               	movwf	(?_strcat+2)& (0+255),b
 16843  003220  ECD4  F00D         	call	_strcat	;wreg free
 16844                           
 16845                           ;main.c: 2702: strcat(wrkbuf, buf);
 16846  003224  D832               	call	PL68	;call to abstracted procedure
 16847  003226  ECD4  F00D         	call	_strcat	;wreg free
 16848                           
 16849                           ;main.c: 2703: } else {
 16850  00322A  D00F               	goto	l15746
 16851  00322C                     l15742:
 16852                           
 16853                           ; BSR set to: 0
 16854                           ;main.c: 2704: strcat(wrkbuf, buf);
 16855  00322C  D82E               	call	PL68	;call to abstracted procedure
 16856  00322E  ECD4  F00D         	call	_strcat	;wreg free
 16857  003232  D00B               	goto	l15746
 16858  003234                     l15744:
 16859                           
 16860                           ;main.c: 2708: strcat(wrkbuf, "--");
 16861  003234  0E01               	movlw	high _wrkbuf
 16862  003236  0100               	movlb	0	; () banked
 16863  003238  6F61               	movwf	(?_strcat+1)& (0+255),b
 16864  00323A  0E77               	movlw	low _wrkbuf
 16865  00323C  6F60               	movwf	?_strcat& (0+255),b
 16866  00323E  0E7C               	movlw	high STR_253
 16867  003240  6F63               	movwf	(?_strcat+3)& (0+255),b
 16868  003242  0EE4               	movlw	low STR_253
 16869  003244  6F62               	movwf	(?_strcat+2)& (0+255),b
 16870  003246  ECD4  F00D         	call	_strcat	;wreg free
 16871  00324A                     l15746:
 16872                           
 16873                           ;main.c: 2709: }
 16874                           ;main.c: 2711: if (i < 15) {
 16875  00324A  0E0F               	movlw	15
 16876  00324C  0100               	movlb	0	; () banked
 16877  00324E  61C4               	cpfslt	printGUID@i& (0+255),b
 16878  003250  D00A               	goto	l15750
 16879                           
 16880                           ; BSR set to: 0
 16881                           ;main.c: 2712: strcat(wrkbuf, ":");
 16882  003252  0E01               	movlw	high _wrkbuf
 16883  003254  6F61               	movwf	(?_strcat+1)& (0+255),b
 16884  003256  0E77               	movlw	low _wrkbuf
 16885  003258  6F60               	movwf	?_strcat& (0+255),b
 16886  00325A  0E7C               	movlw	high STR_254
 16887  00325C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16888  00325E  0EFA               	movlw	low STR_254
 16889  003260  6F62               	movwf	(?_strcat+2)& (0+255),b
 16890  003262  ECD4  F00D         	call	_strcat	;wreg free
 16891  003266                     l15750:
 16892  003266  0100               	movlb	0	; () banked
 16893  003268  2BC4               	incf	printGUID@i& (0+255),f,b
 16894                           
 16895                           ; BSR set to: 0
 16896  00326A  0E0F               	movlw	15
 16897  00326C  65C4               	cpfsgt	printGUID@i& (0+255),b
 16898  00326E  D7AC               	goto	l15734
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;main.c: 2713: }
 16902                           ;main.c: 2715: }
 16903                           ;main.c: 2717: putsUSART(wrkbuf);
 16904  003270  0E01               	movlw	high _wrkbuf
 16905  003272  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16906  003274  0E77               	movlw	low _wrkbuf
 16907  003276  6F61               	movwf	?_putsUSART& (0+255),b
 16908  003278  ECA8  F00D         	call	_putsUSART	;wreg free
 16909                           
 16910                           ;main.c: 2718: putsUSART((char *) "\r\n");
 16911  00327C  0E71               	movlw	high (STR_205+50)
 16912  00327E  0100               	movlb	0	; () banked
 16913  003280  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16914  003282  0EA8               	movlw	low (STR_205+50)
 16915  003284  6F61               	movwf	?_putsUSART& (0+255),b
 16916  003286  EFA8  F00D         	goto	_putsUSART	;wreg free
 16917  00328A                     __end_of_printGUID:
 16918                           	opt stack 0
 16919  00328A                     PL68:
 16920                           	opt stack 20
 16921  00328A  0E01               	movlw	high _wrkbuf
 16922  00328C  0100               	movlb	0	; () banked
 16923  00328E  6F61               	movwf	(?_strcat+1)& (0+255),b
 16924  003290  0E77               	movlw	low _wrkbuf
 16925  003292  6F60               	movwf	?_strcat& (0+255),b
 16926  003294  0E00               	movlw	high printGUID@buf
 16927  003296  6F63               	movwf	(?_strcat+3)& (0+255),b
 16928  003298  0EC0               	movlw	low printGUID@buf
 16929  00329A  6F62               	movwf	(?_strcat+2)& (0+255),b
 16930  00329C  0012               	return	
 16931  00329E                     __end_ofPL68:
 16932                           	opt stack 0
 16933                           tblptru	equ	0xFF8
 16934                           tblptrh	equ	0xFF7
 16935                           tblptrl	equ	0xFF6
 16936                           tablat	equ	0xFF5
 16937                           prodh	equ	0xFF4
 16938                           prodl	equ	0xFF3
 16939                           intcon	equ	0xFF2
 16940                           indf0	equ	0xFEF
 16941                           postinc0	equ	0xFEE
 16942                           fsr0h	equ	0xFEA
 16943                           fsr0l	equ	0xFE9
 16944                           wreg	equ	0xFE8
 16945                           indf1	equ	0xFE7
 16946                           postinc1	equ	0xFE6
 16947                           postdec1	equ	0xFE5
 16948                           fsr1h	equ	0xFE2
 16949                           fsr1l	equ	0xFE1
 16950                           indf2	equ	0xFDF
 16951                           postinc2	equ	0xFDE
 16952                           postdec2	equ	0xFDD
 16953                           plusw2	equ	0xFDB
 16954                           fsr2h	equ	0xFDA
 16955                           fsr2l	equ	0xFD9
 16956                           status	equ	0xFD8
 16957                           
 16958 ;; *************** function _printNodeFirmwareVersion *****************
 16959 ;; Defined at:
 16960 ;;		line 2758 in file "main.c"
 16961 ;; Parameters:    Size  Location     Type
 16962 ;;  nodeid          1    wreg     unsigned char 
 16963 ;; Auto vars:     Size  Location     Type
 16964 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16965 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16966 ;;  i               1  100[BANK0 ] unsigned char 
 16967 ;;  value           1   99[BANK0 ] unsigned char 
 16968 ;; Return value:  Size  Location     Type
 16969 ;;		None               void
 16970 ;; Registers used:
 16971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16972 ;; Tracked objects:
 16973 ;;		On entry : D/2
 16974 ;;		On exit  : 0/0
 16975 ;;		Unchanged: 0/0
 16976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16977 ;;      Params:         0       0       0       0       0       0       0
 16978 ;;      Locals:         0       6       0       0       0       0       0
 16979 ;;      Temps:          0       0       0       0       0       0       0
 16980 ;;      Totals:         0       6       0       0       0       0       0
 16981 ;;Total ram usage:        6 bytes
 16982 ;; Hardware stack levels used:    1
 16983 ;; Hardware stack levels required when called:    8
 16984 ;; This function calls:
 16985 ;;		_putsUSART
 16986 ;;		_memset
 16987 ;;		_itoa
 16988 ;;		_readRegister
 16989 ;;		_strcat
 16990 ;; This function is called by:
 16991 ;;		_doModeVerbose
 16992 ;;		_findNodes
 16993 ;; This function uses a non-reentrant model
 16994 ;;
 16995                           
 16996                           	psect	text31
 16997  002A9E                     __ptext31:
 16998                           	opt stack 0
 16999  002A9E                     _printNodeFirmwareVersion:
 17000                           	opt stack 20
 17001                           
 17002                           ;incstack = 0
 17003                           ;incstack = 0
 17004                           ;printNodeFirmwareVersion@nodeid stored from wreg
 17005  002A9E  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 17006                           
 17007                           ;main.c: 2759: uint8_t i;
 17008                           ;main.c: 2760: uint8_t value;
 17009                           ;main.c: 2761: char buf[3];
 17010                           ;main.c: 2763: memset( wrkbuf, 0, sizeof(wrkbuf) );
 17011  002AA2  0E01               	movlw	high _wrkbuf
 17012  002AA4  0100               	movlb	0	; () banked
 17013  002AA6  6F61               	movwf	(?_memset+1)& (0+255),b
 17014  002AA8  0E77               	movlw	low _wrkbuf
 17015  002AAA  6F60               	movwf	?_memset& (0+255),b
 17016  002AAC  6B63               	clrf	(?_memset+3)& (0+255),b
 17017  002AAE  6B62               	clrf	(?_memset+2)& (0+255),b
 17018  002AB0  6B65               	clrf	(?_memset+5)& (0+255),b
 17019  002AB2  0E50               	movlw	80
 17020  002AB4  6F64               	movwf	(?_memset+4)& (0+255),b
 17021  002AB6  EC43  F00B         	call	_memset	;wreg free
 17022                           
 17023                           ; BSR set to: 0
 17024                           ;main.c: 2764: putsUSART((char *) "Firmware version = ");
 17025  002ABA  0E7A               	movlw	high STR_258
 17026  002ABC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17027  002ABE  0E9E               	movlw	low STR_258
 17028  002AC0  6F61               	movwf	?_putsUSART& (0+255),b
 17029  002AC2  ECA8  F00D         	call	_putsUSART	;wreg free
 17030                           
 17031                           ;main.c: 2766: for (i = 0; i < 3; i++) {
 17032  002AC6  0100               	movlb	0	; () banked
 17033  002AC8  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 17034  002ACA                     l15706:
 17035                           
 17036                           ; BSR set to: 0
 17037                           ;main.c: 2767: if (readRegister(nodeid,
 17038                           ;main.c: 2768: 0x94 + i,
 17039                           ;main.c: 2769: rwtimeout,
 17040                           ;main.c: 2770: &value)) {
 17041  002ACA  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 17042  002ACC  0F94               	addlw	148
 17043  002ACE  6FB6               	movwf	?_readRegister& (0+255),b
 17044  002AD0  C037  F0B7         	movff	_rwtimeout,?_readRegister+1
 17045  002AD4  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 17046  002AD6  0EC3               	movlw	low printNodeFirmwareVersion@value
 17047  002AD8  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 17048  002ADA  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 17049  002ADC  EC84  F013         	call	_readRegister
 17050  002AE0  0900               	iorlw	0
 17051  002AE2  E019               	bz	l15712
 17052                           
 17053                           ;main.c: 2771: itoa(buf, value, 16);
 17054  002AE4  0100               	movlb	0	; () banked
 17055  002AE6  0E00               	movlw	high printNodeFirmwareVersion@buf
 17056  002AE8  6F71               	movwf	(?_itoa+1)& (0+255),b
 17057  002AEA  0EC0               	movlw	low printNodeFirmwareVersion@buf
 17058  002AEC  6F70               	movwf	?_itoa& (0+255),b
 17059  002AEE  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 17060  002AF2  6B73               	clrf	(?_itoa+3)& (0+255),b
 17061  002AF4  6B75               	clrf	(?_itoa+5)& (0+255),b
 17062  002AF6  0E10               	movlw	16
 17063  002AF8  6F74               	movwf	(?_itoa+4)& (0+255),b
 17064  002AFA  ECBB  F00B         	call	_itoa	;wreg free
 17065                           
 17066                           ; BSR set to: 0
 17067                           ;main.c: 2772: strcat(wrkbuf, buf);
 17068  002AFE  0E01               	movlw	high _wrkbuf
 17069  002B00  0100               	movlb	0	; () banked
 17070  002B02  6F61               	movwf	(?_strcat+1)& (0+255),b
 17071  002B04  0E77               	movlw	low _wrkbuf
 17072  002B06  6F60               	movwf	?_strcat& (0+255),b
 17073  002B08  0E00               	movlw	high printNodeFirmwareVersion@buf
 17074  002B0A  6F63               	movwf	(?_strcat+3)& (0+255),b
 17075  002B0C  0EC0               	movlw	low printNodeFirmwareVersion@buf
 17076  002B0E  6F62               	movwf	(?_strcat+2)& (0+255),b
 17077  002B10  ECD4  F00D         	call	_strcat	;wreg free
 17078                           
 17079                           ;main.c: 2773: }
 17080  002B14  D00B               	goto	l15714
 17081  002B16                     l15712:
 17082                           
 17083                           ;main.c: 2774: else {
 17084                           ;main.c: 2775: strcat(wrkbuf, "?");
 17085  002B16  0E01               	movlw	high _wrkbuf
 17086  002B18  0100               	movlb	0	; () banked
 17087  002B1A  6F61               	movwf	(?_strcat+1)& (0+255),b
 17088  002B1C  0E77               	movlw	low _wrkbuf
 17089  002B1E  6F60               	movwf	?_strcat& (0+255),b
 17090  002B20  0E7C               	movlw	high STR_259
 17091  002B22  6F63               	movwf	(?_strcat+3)& (0+255),b
 17092  002B24  0EFC               	movlw	low STR_259
 17093  002B26  6F62               	movwf	(?_strcat+2)& (0+255),b
 17094  002B28  ECD4  F00D         	call	_strcat	;wreg free
 17095  002B2C                     l15714:
 17096                           
 17097                           ;main.c: 2776: }
 17098                           ;main.c: 2778: if (i < 2) {
 17099  002B2C  0E02               	movlw	2
 17100  002B2E  0100               	movlb	0	; () banked
 17101  002B30  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 17102  002B32  D00A               	goto	l15718
 17103                           
 17104                           ; BSR set to: 0
 17105                           ;main.c: 2779: strcat(wrkbuf, ".");
 17106  002B34  0E01               	movlw	high _wrkbuf
 17107  002B36  6F61               	movwf	(?_strcat+1)& (0+255),b
 17108  002B38  0E77               	movlw	low _wrkbuf
 17109  002B3A  6F60               	movwf	?_strcat& (0+255),b
 17110  002B3C  0E7C               	movlw	high STR_260
 17111  002B3E  6F63               	movwf	(?_strcat+3)& (0+255),b
 17112  002B40  0EF6               	movlw	low STR_260
 17113  002B42  6F62               	movwf	(?_strcat+2)& (0+255),b
 17114  002B44  ECD4  F00D         	call	_strcat	;wreg free
 17115  002B48                     l15718:
 17116  002B48  0100               	movlb	0	; () banked
 17117  002B4A  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 17118                           
 17119                           ; BSR set to: 0
 17120  002B4C  0E02               	movlw	2
 17121  002B4E  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 17122  002B50  D7BC               	goto	l15706
 17123                           
 17124                           ; BSR set to: 0
 17125                           ;main.c: 2780: }
 17126                           ;main.c: 2782: }
 17127                           ;main.c: 2784: putsUSART(wrkbuf);
 17128  002B52  0E01               	movlw	high _wrkbuf
 17129  002B54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17130  002B56  0E77               	movlw	low _wrkbuf
 17131  002B58  6F61               	movwf	?_putsUSART& (0+255),b
 17132  002B5A  ECA8  F00D         	call	_putsUSART	;wreg free
 17133                           
 17134                           ;main.c: 2785: putsUSART((char *) "\r\n");
 17135  002B5E  0E71               	movlw	high (STR_205+50)
 17136  002B60  0100               	movlb	0	; () banked
 17137  002B62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17138  002B64  0EA8               	movlw	low (STR_205+50)
 17139  002B66  6F61               	movwf	?_putsUSART& (0+255),b
 17140  002B68  EFA8  F00D         	goto	_putsUSART	;wreg free
 17141  002B6C                     __end_of_printNodeFirmwareVersion:
 17142                           	opt stack 0
 17143                           tblptru	equ	0xFF8
 17144                           tblptrh	equ	0xFF7
 17145                           tblptrl	equ	0xFF6
 17146                           tablat	equ	0xFF5
 17147                           prodh	equ	0xFF4
 17148                           prodl	equ	0xFF3
 17149                           intcon	equ	0xFF2
 17150                           indf0	equ	0xFEF
 17151                           postinc0	equ	0xFEE
 17152                           fsr0h	equ	0xFEA
 17153                           fsr0l	equ	0xFE9
 17154                           wreg	equ	0xFE8
 17155                           indf1	equ	0xFE7
 17156                           postinc1	equ	0xFE6
 17157                           postdec1	equ	0xFE5
 17158                           fsr1h	equ	0xFE2
 17159                           fsr1l	equ	0xFE1
 17160                           indf2	equ	0xFDF
 17161                           postinc2	equ	0xFDE
 17162                           postdec2	equ	0xFDD
 17163                           plusw2	equ	0xFDB
 17164                           fsr2h	equ	0xFDA
 17165                           fsr2l	equ	0xFD9
 17166                           status	equ	0xFD8
 17167                           
 17168 ;; *************** function _strcat *****************
 17169 ;; Defined at:
 17170 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 17171 ;; Parameters:    Size  Location     Type
 17172 ;;  to              2    0[BANK0 ] PTR unsigned char 
 17173 ;;		 -> wrkbuf(80), 
 17174 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 17175 ;;		 -> STR_260(2), STR_259(2), printNodeFirmwareVersion@buf(3), STR_254(2), 
 17176 ;;		 -> STR_253(3), STR_252(2), printGUID@buf(3), 
 17177 ;; Auto vars:     Size  Location     Type
 17178 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 17179 ;;		 -> wrkbuf(80), 
 17180 ;; Return value:  Size  Location     Type
 17181 ;;                  2    0[BANK0 ] PTR unsigned char 
 17182 ;; Registers used:
 17183 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17184 ;; Tracked objects:
 17185 ;;		On entry : F/0
 17186 ;;		On exit  : 0/0
 17187 ;;		Unchanged: 0/0
 17188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17189 ;;      Params:         0       4       0       0       0       0       0
 17190 ;;      Locals:         0       2       0       0       0       0       0
 17191 ;;      Temps:          0       0       0       0       0       0       0
 17192 ;;      Totals:         0       6       0       0       0       0       0
 17193 ;;Total ram usage:        6 bytes
 17194 ;; Hardware stack levels used:    1
 17195 ;; Hardware stack levels required when called:    3
 17196 ;; This function calls:
 17197 ;;		Nothing
 17198 ;; This function is called by:
 17199 ;;		_printGUID
 17200 ;;		_printNodeFirmwareVersion
 17201 ;; This function uses a non-reentrant model
 17202 ;;
 17203                           
 17204                           	psect	text32
 17205  001BA8                     __ptext32:
 17206                           	opt stack 0
 17207  001BA8                     _strcat:
 17208                           	opt stack 24
 17209                           
 17210                           ; BSR set to: 0
 17211                           
 17212                           ;incstack = 0
 17213                           ;incstack = 0
 17214  001BA8  C060  F064         	movff	strcat@to,strcat@cp
 17215  001BAC  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17216  001BB0  D002               	goto	l16378
 17217  001BB2                     l16376:
 17218                           
 17219                           ; BSR set to: 0
 17220  001BB2  4B64               	infsnz	strcat@cp& (0+255),f,b
 17221  001BB4  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17222  001BB6                     l16378:
 17223                           
 17224                           ; BSR set to: 0
 17225  001BB6  C064  FFD9         	movff	strcat@cp,fsr2l
 17226  001BBA  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17227  001BBE  50DF               	movf	indf2,w,c
 17228  001BC0  E006               	bz	l16382
 17229  001BC2  D7F7               	goto	l16376
 17230  001BC4                     l16380:
 17231  001BC4  0100               	movlb	0	; () banked
 17232  001BC6  4B64               	infsnz	strcat@cp& (0+255),f,b
 17233  001BC8  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17234  001BCA  4B62               	infsnz	strcat@from& (0+255),f,b
 17235  001BCC  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17236  001BCE                     l16382:
 17237                           
 17238                           ; BSR set to: 0
 17239  001BCE  C062  FFF6         	movff	strcat@from,tblptrl
 17240  001BD2  C063  FFF7         	movff	strcat@from+1,tblptrh
 17241  001BD6  6AF8               	clrf	tblptru,c
 17242  001BD8  C064  FFD9         	movff	strcat@cp,fsr2l
 17243  001BDC  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17244  001BE0  0E05               	movlw	(high __ramtop+-1)
 17245  001BE2  64F7               	cpfsgt	tblptrh,c
 17246  001BE4  D003               	bra	u22457
 17247  001BE6  0008               	tblrd		*
 17248  001BE8  50F5               	movf	tablat,w,c
 17249  001BEA  D005               	bra	u22450
 17250  001BEC                     u22457:
 17251  001BEC  CFF6 FFE9          	movff	tblptrl,fsr0l
 17252  001BF0  CFF7 FFEA          	movff	tblptrh,fsr0h
 17253  001BF4  50EF               	movf	indf0,w,c
 17254  001BF6                     u22450:
 17255  001BF6  6EDF               	movwf	indf2,c
 17256  001BF8  50DF               	movf	indf2,w,c
 17257  001BFA  B4D8               	btfsc	status,2,c
 17258  001BFC  0012               	return	
 17259  001BFE  D7E2               	goto	l16380
 17260  001C00                     __end_of_strcat:
 17261                           	opt stack 0
 17262                           tblptru	equ	0xFF8
 17263                           tblptrh	equ	0xFF7
 17264                           tblptrl	equ	0xFF6
 17265                           tablat	equ	0xFF5
 17266                           prodh	equ	0xFF4
 17267                           prodl	equ	0xFF3
 17268                           intcon	equ	0xFF2
 17269                           indf0	equ	0xFEF
 17270                           postinc0	equ	0xFEE
 17271                           fsr0h	equ	0xFEA
 17272                           fsr0l	equ	0xFE9
 17273                           wreg	equ	0xFE8
 17274                           indf1	equ	0xFE7
 17275                           postinc1	equ	0xFE6
 17276                           postdec1	equ	0xFE5
 17277                           fsr1h	equ	0xFE2
 17278                           fsr1l	equ	0xFE1
 17279                           indf2	equ	0xFDF
 17280                           postinc2	equ	0xFDE
 17281                           postdec2	equ	0xFDD
 17282                           plusw2	equ	0xFDB
 17283                           fsr2h	equ	0xFDA
 17284                           fsr2l	equ	0xFD9
 17285                           status	equ	0xFD8
 17286                           
 17287 ;; *************** function _readRegister *****************
 17288 ;; Defined at:
 17289 ;;		line 2261 in file "main.c"
 17290 ;; Parameters:    Size  Location     Type
 17291 ;;  nodeid          1    wreg     unsigned char 
 17292 ;;  reg             1   86[BANK0 ] unsigned char 
 17293 ;;  timeout         2   87[BANK0 ] unsigned short 
 17294 ;;  value           1   89[BANK0 ] PTR unsigned char 
 17295 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17296 ;; Auto vars:     Size  Location     Type
 17297 ;;  nodeid          1   94[BANK0 ] unsigned char 
 17298 ;; Return value:  Size  Location     Type
 17299 ;;                  1    wreg      enum E15660
 17300 ;; Registers used:
 17301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17302 ;; Tracked objects:
 17303 ;;		On entry : F/0
 17304 ;;		On exit  : E/0
 17305 ;;		Unchanged: 0/0
 17306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17307 ;;      Params:         0       4       0       0       0       0       0
 17308 ;;      Locals:         0       1       0       0       0       0       0
 17309 ;;      Temps:          0       4       0       0       0       0       0
 17310 ;;      Totals:         0       9       0       0       0       0       0
 17311 ;;Total ram usage:        9 bytes
 17312 ;; Hardware stack levels used:    1
 17313 ;; Hardware stack levels required when called:    7
 17314 ;; This function calls:
 17315 ;;		_sendVSCPFrame
 17316 ;;		_getVSCPFrame
 17317 ;; This function is called by:
 17318 ;;		_findNodes
 17319 ;;		_printGUID
 17320 ;;		_printMDF
 17321 ;;		_printNodeFirmwareVersion
 17322 ;; This function uses a non-reentrant model
 17323 ;;
 17324                           
 17325                           	psect	text33
 17326  002708                     __ptext33:
 17327                           	opt stack 0
 17328  002708                     _readRegister:
 17329                           	opt stack 20
 17330                           
 17331                           ;incstack = 0
 17332                           ;incstack = 0
 17333                           ;readRegister@nodeid stored from wreg
 17334  002708  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 17335                           
 17336                           ; BSR set to: 0
 17337                           ;main.c: 2262: vscpData[ 0 ] = nodeid;
 17338  00270C  C0BE  F1DF         	movff	readRegister@nodeid,_vscpData
 17339                           
 17340                           ; BSR set to: 0
 17341                           ;main.c: 2263: vscpData[ 1 ] = reg;
 17342  002710  C0B6  F1E0         	movff	readRegister@reg,_vscpData+1
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;main.c: 2265: if (sendVSCPFrame(0,
 17346                           ;main.c: 2266: 9,
 17347                           ;main.c: 2267: 0,
 17348                           ;main.c: 2268: 0,
 17349                           ;main.c: 2269: 2,
 17350                           ;main.c: 2270: vscpData)) {
 17351  002714  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17352  002716  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17353  002718  0E09               	movlw	9
 17354  00271A  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17355  00271C  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17356  00271E  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17357  002720  0E02               	movlw	2
 17358  002722  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17359  002724  0E01               	movlw	high _vscpData
 17360  002726  0100               	movlb	0	; () banked
 17361  002728  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17362  00272A  0EDF               	movlw	low _vscpData
 17363  00272C  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17364  00272E  ECDE  F013         	call	_sendVSCPFrame	;wreg free
 17365  002732  0900               	iorlw	0
 17366  002734  E041               	bz	l16370
 17367                           
 17368                           ;main.c: 2272: timekeeper = 0;
 17369  002736  6A22               	clrf	_timekeeper,c	;volatile
 17370  002738  6A23               	clrf	_timekeeper+1,c	;volatile
 17371  00273A  6A24               	clrf	_timekeeper+2,c	;volatile
 17372  00273C  6A25               	clrf	_timekeeper+3,c	;volatile
 17373                           
 17374                           ;main.c: 2273: while (timekeeper < timeout) {
 17375  00273E  D02C               	goto	l16368
 17376  002740                     l1092:
 17377                           
 17378                           ; BSR set to: 0
 17379  002740  0004               	clrwdt		;# 
 17380                           
 17381                           ;main.c: 2277: if (getVSCPFrame(&vscpClass,
 17382                           ;main.c: 2278: &vscpType,
 17383                           ;main.c: 2279: &vscpNodeId,
 17384                           ;main.c: 2280: &vscpPriority,
 17385                           ;main.c: 2281: &vscpSize,
 17386                           ;main.c: 2282: vscpData)) {
 17387  002742  0E3F               	movlw	low _vscpType
 17388  002744  0100               	movlb	0	; () banked
 17389  002746  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17390  002748  0EE8               	movlw	low _vscpNodeId
 17391  00274A  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17392  00274C  0E3E               	movlw	low _vscpPriority
 17393  00274E  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17394  002750  0EE9               	movlw	low _vscpSize
 17395  002752  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17396  002754  0E01               	movlw	high _vscpData
 17397  002756  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17398  002758  0EDF               	movlw	low _vscpData
 17399  00275A  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17400  00275C  0E3A               	movlw	_vscpClass& (0+255)
 17401  00275E  EC49  F010         	call	_getVSCPFrame
 17402  002762  0900               	iorlw	0
 17403  002764  E019               	bz	l16368
 17404                           
 17405                           ; BSR set to: 0
 17406                           ;main.c: 2283: if ((nodeid == vscpNodeId) &&
 17407                           ;main.c: 2284: (0 == vscpClass) &&
 17408                           ;main.c: 2285: (10 == vscpType) &&
 17409                           ;main.c: 2286: (2 == vscpSize) &&
 17410                           ;main.c: 2287: (reg == vscpData[ 0 ])) {
 17411  002766  51E8               	movf	_vscpNodeId& (0+255),w,b
 17412  002768  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 17413  00276A  D016               	goto	l16368
 17414                           
 17415                           ; BSR set to: 0
 17416  00276C  503B               	movf	_vscpClass+1,w,c
 17417  00276E  103A               	iorwf	_vscpClass,w,c
 17418  002770  E113               	bnz	l16368
 17419                           
 17420                           ; BSR set to: 0
 17421  002772  503F               	movf	_vscpType,w,c
 17422  002774  0A0A               	xorlw	10
 17423  002776  E110               	bnz	l16368
 17424                           
 17425                           ; BSR set to: 0
 17426  002778  51E9               	movf	_vscpSize& (0+255),w,b
 17427  00277A  0A02               	xorlw	2
 17428  00277C  E10D               	bnz	l16368
 17429                           
 17430                           ; BSR set to: 0
 17431  00277E  0101               	movlb	1	; () banked
 17432  002780  51DF               	movf	_vscpData& (0+255),w,b
 17433  002782  0100               	movlb	0	; () banked
 17434  002784  63B6               	cpfseq	readRegister@reg& (0+255),b
 17435  002786  D008               	goto	l16368
 17436                           
 17437                           ; BSR set to: 0
 17438                           ;main.c: 2288: *value = vscpData[ 1 ];
 17439  002788  51B9               	movf	readRegister@value& (0+255),w,b
 17440  00278A  6ED9               	movwf	fsr2l,c
 17441  00278C  6ADA               	clrf	fsr2h,c
 17442  00278E  0101               	movlb	1	; () banked
 17443  002790  C1E0  FFDF         	movff	_vscpData+1,indf2
 17444                           
 17445                           ; BSR set to: 1
 17446                           ;main.c: 2289: return 1;
 17447  002794  0E01               	movlw	1
 17448  002796  D011               	goto	l1095
 17449  002798                     l16368:
 17450  002798  0100               	movlb	0	; () banked
 17451  00279A  51B7               	movf	readRegister@timeout& (0+255),w,b
 17452  00279C  6FBA               	movwf	??_readRegister& (0+255),b
 17453  00279E  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 17454  0027A0  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 17455  0027A2  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 17456  0027A4  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 17457  0027A6  51BA               	movf	??_readRegister& (0+255),w,b
 17458  0027A8  5C22               	subwf	_timekeeper,w,c	;volatile
 17459  0027AA  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 17460  0027AC  5823               	subwfb	_timekeeper+1,w,c	;volatile
 17461  0027AE  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 17462  0027B0  5824               	subwfb	_timekeeper+2,w,c	;volatile
 17463  0027B2  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 17464  0027B4  5825               	subwfb	_timekeeper+3,w,c	;volatile
 17465  0027B6  E3C4               	bnc	l1092
 17466  0027B8                     l16370:
 17467                           
 17468                           ;main.c: 2290: }
 17469                           ;main.c: 2291: }
 17470                           ;main.c: 2292: }
 17471                           ;main.c: 2293: }
 17472                           ;main.c: 2295: return 0;
 17473  0027B8  0E00               	movlw	0
 17474  0027BA                     l1095:
 17475  0027BA  0012               	return	
 17476  0027BC                     __end_of_readRegister:
 17477                           	opt stack 0
 17478                           tblptru	equ	0xFF8
 17479                           tblptrh	equ	0xFF7
 17480                           tblptrl	equ	0xFF6
 17481                           tablat	equ	0xFF5
 17482                           prodh	equ	0xFF4
 17483                           prodl	equ	0xFF3
 17484                           intcon	equ	0xFF2
 17485                           indf0	equ	0xFEF
 17486                           postinc0	equ	0xFEE
 17487                           fsr0h	equ	0xFEA
 17488                           fsr0l	equ	0xFE9
 17489                           wreg	equ	0xFE8
 17490                           indf1	equ	0xFE7
 17491                           postinc1	equ	0xFE6
 17492                           postdec1	equ	0xFE5
 17493                           fsr1h	equ	0xFE2
 17494                           fsr1l	equ	0xFE1
 17495                           indf2	equ	0xFDF
 17496                           postinc2	equ	0xFDE
 17497                           postdec2	equ	0xFDD
 17498                           plusw2	equ	0xFDB
 17499                           fsr2h	equ	0xFDA
 17500                           fsr2l	equ	0xFD9
 17501                           status	equ	0xFD8
 17502                           
 17503 ;; *************** function _sendVSCPFrame *****************
 17504 ;; Defined at:
 17505 ;;		line 2982 in file "main.c"
 17506 ;; Parameters:    Size  Location     Type
 17507 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17508 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17509 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17510 ;;  priority        1   58[BANK0 ] unsigned char 
 17511 ;;  size            1   59[BANK0 ] unsigned char 
 17512 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 17513 ;;		 -> vscpData(8), 
 17514 ;; Auto vars:     Size  Location     Type
 17515 ;;  id              4   82[BANK0 ] unsigned long 
 17516 ;; Return value:  Size  Location     Type
 17517 ;;                  1    wreg      unsigned char 
 17518 ;; Registers used:
 17519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17520 ;; Tracked objects:
 17521 ;;		On entry : F/0
 17522 ;;		On exit  : E/0
 17523 ;;		Unchanged: 0/0
 17524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17525 ;;      Params:         0       8       0       0       0       0       0
 17526 ;;      Locals:         0       4       0       0       0       0       0
 17527 ;;      Temps:          0      20       0       0       0       0       0
 17528 ;;      Totals:         0      32       0       0       0       0       0
 17529 ;;Total ram usage:       32 bytes
 17530 ;; Hardware stack levels used:    1
 17531 ;; Hardware stack levels required when called:    6
 17532 ;; This function calls:
 17533 ;;		_sendCANFrame
 17534 ;; This function is called by:
 17535 ;;		_doModeVerbose
 17536 ;;		_readRegister
 17537 ;;		_readRegisterExtended
 17538 ;;		_writeRegisterExtended
 17539 ;; This function uses a non-reentrant model
 17540 ;;
 17541                           
 17542                           	psect	text34
 17543  0027BC                     __ptext34:
 17544                           	opt stack 0
 17545  0027BC                     _sendVSCPFrame:
 17546                           	opt stack 20
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;main.c: 2983: uint32_t id = ((uint32_t) priority << 26) |
 17550                           ;main.c: 2984: ((uint32_t) vscpclass << 16) |
 17551                           ;main.c: 2985: ((uint32_t) vscptype << 8) |
 17552                           ;main.c: 2986: nodeid;
 17553                           
 17554                           ;incstack = 0
 17555                           ;incstack = 0
 17556  0027BC  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17557  0027C0  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17558  0027C2  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17559  0027C4  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17560  0027C6  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17561  0027CA  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17562  0027CE  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17563  0027D2  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 17564  0027D4  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17565  0027D6  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17566  0027D8  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17567  0027DA  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17568  0027DC  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17569  0027DE  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17570  0027E0  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17571  0027E4  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17572  0027E8  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17573  0027EA  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17574  0027EC  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17575  0027F0  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17576  0027F2  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17577  0027F4  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17578  0027F6  0E1A               	movlw	26
 17579  0027F8                     u20185:
 17580  0027F8  90D8               	bcf	status,0,c
 17581  0027FA  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17582  0027FC  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17583  0027FE  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17584  002800  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17585  002802  2EE8               	decfsz	wreg,f,c
 17586  002804  D7F9               	goto	u20185
 17587  002806  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17588  002808  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17589  00280A  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17590  00280C  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17591  00280E  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17592  002810  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17593  002812  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17594  002814  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17595  002816  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17596  002818  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17597  00281A  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17598  00281C  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17599  00281E  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 17600  002820  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17601  002822  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17602  002824  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17603  002826  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17604  002828  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17605  00282A  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17606  00282C  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17607  00282E  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17608  002830  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17609  002832  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17610  002834  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17611  002836  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17612  002838  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17613  00283A  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 17614  00283C  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17615  00283E  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17616  002840  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17617  002842  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17618  002844  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17619  002846  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17620                           
 17621                           ; BSR set to: 0
 17622                           ;main.c: 2988: if (!sendCANFrame(id, size, pData)) {
 17623  002848  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17624  00284C  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17625  002850  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17626  002854  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17627  002858  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17628  00285C  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17629  002860  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17630  002864  ECF3  F00B         	call	_sendCANFrame	;wreg free
 17631  002868  0900               	iorlw	0
 17632                           
 17633                           ;main.c: 2990: return 0;
 17634  00286A  0E00               	movlw	0
 17635  00286C  A4D8               	btfss	status,2,c
 17636                           
 17637                           ;main.c: 2991: }
 17638                           ;main.c: 2993: return 1;
 17639  00286E  0E01               	movlw	1
 17640  002870  0012               	return	
 17641  002872                     __end_of_sendVSCPFrame:
 17642                           	opt stack 0
 17643                           tblptru	equ	0xFF8
 17644                           tblptrh	equ	0xFF7
 17645                           tblptrl	equ	0xFF6
 17646                           tablat	equ	0xFF5
 17647                           prodh	equ	0xFF4
 17648                           prodl	equ	0xFF3
 17649                           intcon	equ	0xFF2
 17650                           indf0	equ	0xFEF
 17651                           postinc0	equ	0xFEE
 17652                           fsr0h	equ	0xFEA
 17653                           fsr0l	equ	0xFE9
 17654                           wreg	equ	0xFE8
 17655                           indf1	equ	0xFE7
 17656                           postinc1	equ	0xFE6
 17657                           postdec1	equ	0xFE5
 17658                           fsr1h	equ	0xFE2
 17659                           fsr1l	equ	0xFE1
 17660                           indf2	equ	0xFDF
 17661                           postinc2	equ	0xFDE
 17662                           postdec2	equ	0xFDD
 17663                           plusw2	equ	0xFDB
 17664                           fsr2h	equ	0xFDA
 17665                           fsr2l	equ	0xFD9
 17666                           status	equ	0xFD8
 17667                           
 17668 ;; *************** function _sendCANFrame *****************
 17669 ;; Defined at:
 17670 ;;		line 3028 in file "main.c"
 17671 ;; Parameters:    Size  Location     Type
 17672 ;;  id              4   47[BANK0 ] unsigned long 
 17673 ;;  dlc             1   51[BANK0 ] unsigned char 
 17674 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17675 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17676 ;; Auto vars:     Size  Location     Type
 17677 ;;		None
 17678 ;; Return value:  Size  Location     Type
 17679 ;;                  1    wreg      unsigned char 
 17680 ;; Registers used:
 17681 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17682 ;; Tracked objects:
 17683 ;;		On entry : F/0
 17684 ;;		On exit  : E/0
 17685 ;;		Unchanged: 0/0
 17686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17687 ;;      Params:         0       7       0       0       0       0       0
 17688 ;;      Locals:         0       0       0       0       0       0       0
 17689 ;;      Temps:          0       0       0       0       0       0       0
 17690 ;;      Totals:         0       7       0       0       0       0       0
 17691 ;;Total ram usage:        7 bytes
 17692 ;; Hardware stack levels used:    1
 17693 ;; Hardware stack levels required when called:    5
 17694 ;; This function calls:
 17695 ;;		_ECANSendMessage
 17696 ;; This function is called by:
 17697 ;;		_doModeSLCAN
 17698 ;;		_receiveVSCPModeCanalMsg
 17699 ;;		_sendVSCPFrame
 17700 ;; This function uses a non-reentrant model
 17701 ;;
 17702                           
 17703                           	psect	text35
 17704  0017E6                     __ptext35:
 17705                           	opt stack 0
 17706  0017E6                     _sendCANFrame:
 17707                           	opt stack 23
 17708                           
 17709                           ; BSR set to: 0
 17710                           ;main.c: 3029: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17711                           
 17712                           ;incstack = 0
 17713                           ;incstack = 0
 17714  0017E6  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17715  0017EA  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17716  0017EE  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17717  0017F2  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17718  0017F6  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17719  0017FA  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17720  0017FE  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17721  001802  0E20               	movlw	32
 17722  001804  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17723  001806  EC2F  F01C         	call	_ECANSendMessage	;wreg free
 17724  00180A  0900               	iorlw	0
 17725  00180C  E107               	bnz	l16216
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;main.c: 3031: can_transmitOverruns++;
 17729  00180E  0101               	movlb	1	; () banked
 17730  001810  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 17731  001812  0E00               	movlw	0
 17732  001814  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 17733  001816  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 17734  001818  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 17735                           
 17736                           ; BSR set to: 1
 17737                           ;main.c: 3032: return 0;
 17738  00181A  D001               	goto	l1291
 17739  00181C                     l16216:
 17740                           
 17741                           ; BSR set to: 0
 17742                           ;main.c: 3033: }
 17743                           ;main.c: 3035: return 1;
 17744  00181C  0E01               	movlw	1
 17745  00181E                     l1291:
 17746  00181E  0012               	return	
 17747  001820                     __end_of_sendCANFrame:
 17748                           	opt stack 0
 17749                           tblptru	equ	0xFF8
 17750                           tblptrh	equ	0xFF7
 17751                           tblptrl	equ	0xFF6
 17752                           tablat	equ	0xFF5
 17753                           prodh	equ	0xFF4
 17754                           prodl	equ	0xFF3
 17755                           intcon	equ	0xFF2
 17756                           indf0	equ	0xFEF
 17757                           postinc0	equ	0xFEE
 17758                           fsr0h	equ	0xFEA
 17759                           fsr0l	equ	0xFE9
 17760                           wreg	equ	0xFE8
 17761                           indf1	equ	0xFE7
 17762                           postinc1	equ	0xFE6
 17763                           postdec1	equ	0xFE5
 17764                           fsr1h	equ	0xFE2
 17765                           fsr1l	equ	0xFE1
 17766                           indf2	equ	0xFDF
 17767                           postinc2	equ	0xFDE
 17768                           postdec2	equ	0xFDD
 17769                           plusw2	equ	0xFDB
 17770                           fsr2h	equ	0xFDA
 17771                           fsr2l	equ	0xFD9
 17772                           status	equ	0xFD8
 17773                           
 17774 ;; *************** function _ECANSendMessage *****************
 17775 ;; Defined at:
 17776 ;;		line 617 in file "ECAN.c"
 17777 ;; Parameters:    Size  Location     Type
 17778 ;;  id              4   10[BANK0 ] unsigned long 
 17779 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17780 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17781 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17782 ;;  msgFlags        1   17[BANK0 ] enum E16315
 17783 ;; Auto vars:     Size  Location     Type
 17784 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17785 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17786 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17787 ;;		 -> B0CON(1), 
 17788 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17789 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17790 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17791 ;;		 -> B0CON(1), 
 17792 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17793 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17794 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17795 ;;		 -> B0CON(1), 
 17796 ;;  i               1   44[BANK0 ] unsigned char 
 17797 ;;  temp            1   43[BANK0 ] unsigned char 
 17798 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17799 ;;  j               1   39[BANK0 ] unsigned char 
 17800 ;;  buffers         1   38[BANK0 ] unsigned char 
 17801 ;;  mode            1   37[BANK0 ] unsigned char 
 17802 ;; Return value:  Size  Location     Type
 17803 ;;                  1    wreg      enum E15660
 17804 ;; Registers used:
 17805 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17806 ;; Tracked objects:
 17807 ;;		On entry : F/0
 17808 ;;		On exit  : F/0
 17809 ;;		Unchanged: 0/0
 17810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17811 ;;      Params:         0       8       0       0       0       0       0
 17812 ;;      Locals:         0      28       0       0       0       0       0
 17813 ;;      Temps:          0       1       0       0       0       0       0
 17814 ;;      Totals:         0      37       0       0       0       0       0
 17815 ;;Total ram usage:       37 bytes
 17816 ;; Hardware stack levels used:    1
 17817 ;; Hardware stack levels required when called:    4
 17818 ;; This function calls:
 17819 ;;		__CANIDToRegs
 17820 ;; This function is called by:
 17821 ;;		_sendCANFrame
 17822 ;; This function uses a non-reentrant model
 17823 ;;
 17824                           
 17825                           	psect	text36
 17826  00385E                     __ptext36:
 17827                           	opt stack 0
 17828  00385E                     _ECANSendMessage:
 17829                           	opt stack 23
 17830                           
 17831                           ; BSR set to: 0
 17832                           ;ECAN.c: 619: BYTE mode;
 17833                           ;ECAN.c: 620: BYTE buffers;
 17834                           ;ECAN.c: 628: BYTE i,j;
 17835                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17836                           ;ECAN.c: 630: BYTE* pb[9];
 17837                           ;ECAN.c: 631: BYTE temp;
 17838                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17839                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17840                           
 17841                           ;incstack = 0
 17842                           ;incstack = 0
 17843  00385E  0E0F               	movlw	15	;volatile
 17844  003860  0100               	movlb	0	; () banked
 17845  003862  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17846  003864  0E40               	movlw	64	;volatile
 17847  003866  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17848                           
 17849                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17850  003868  0E0F               	movlw	15	;volatile
 17851  00386A  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17852  00386C  0E30               	movlw	48	;volatile
 17853  00386E  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17854                           
 17855                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17856  003870  0E0F               	movlw	15	;volatile
 17857  003872  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17858  003874  0E20               	movlw	32	;volatile
 17859  003876  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17860                           
 17861                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17862  003878  0E0E               	movlw	14	;volatile
 17863  00387A  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17864  00387C  0E20               	movlw	32	;volatile
 17865  00387E  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17866                           
 17867                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17868  003880  0E0E               	movlw	14	;volatile
 17869  003882  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17870  003884  0E30               	movlw	48	;volatile
 17871  003886  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17872                           
 17873                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17874  003888  0E0E               	movlw	14	;volatile
 17875  00388A  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17876  00388C  0E40               	movlw	64	;volatile
 17877  00388E  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17878                           
 17879                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17880  003890  0E0E               	movlw	14	;volatile
 17881  003892  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17882  003894  0E50               	movlw	80	;volatile
 17883  003896  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17884                           
 17885                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17886  003898  0E0E               	movlw	14	;volatile
 17887  00389A  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17888  00389C  0E60               	movlw	96	;volatile
 17889  00389E  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17890                           
 17891                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17892  0038A0  0E0E               	movlw	14	;volatile
 17893  0038A2  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17894  0038A4  0E70               	movlw	112	;volatile
 17895  0038A6  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17899  0038A8  5077               	movf	3959,w,c	;volatile
 17900  0038AA  0BC0               	andlw	192
 17901  0038AC  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17902                           
 17903                           ; BSR set to: 0
 17904                           ;ECAN.c: 660: if ( mode == 0x00 )
 17905  0038AE  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17906  0038B0  D002               	goto	l13064
 17907                           
 17908                           ; BSR set to: 0
 17909                           ;ECAN.c: 661: buffers = 2;
 17910  0038B2  0E02               	movlw	2
 17911  0038B4  D001               	goto	L17
 17912  0038B6                     l13064:
 17913                           
 17914                           ; BSR set to: 0
 17915                           ;ECAN.c: 662: else
 17916                           ;ECAN.c: 663: buffers = 8;
 17917  0038B6  0E08               	movlw	8
 17918  0038B8                     L17:
 17919  0038B8  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17920                           
 17921                           ; BSR set to: 0
 17922                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17923  0038BA  010D               	movlb	13	; () banked
 17924  0038BC  90D8               	bcf	status,0,c
 17925  0038BE  31F8               	rrcf	248,w,b	;volatile
 17926  0038C0  0100               	movlb	0	; () banked
 17927  0038C2  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17931  0038C4  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17932  0038C6  D07D               	goto	l13124
 17933  0038C8                     l13070:
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;ECAN.c: 688: {
 17937                           ;ECAN.c: 693: ptr = pb[i];
 17938  0038C8  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17939  0038CA  0D02               	mullw	2
 17940  0038CC  50F3               	movf	prodl,w,c
 17941  0038CE  0F73               	addlw	low ECANSendMessage@pb
 17942  0038D0  6ED9               	movwf	fsr2l,c
 17943  0038D2  6ADA               	clrf	fsr2h,c
 17944  0038D4  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17945  0038D8  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;ECAN.c: 694: tempPtr = ptr;
 17949  0038DC  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17950  0038E0  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17951                           
 17952                           ; BSR set to: 0
 17953                           ;ECAN.c: 702: if ( i > 2 )
 17954  0038E4  0E02               	movlw	2
 17955  0038E6  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17956  0038E8  D004               	goto	l13082
 17957                           
 17958                           ; BSR set to: 0
 17959                           ;ECAN.c: 703: {
 17960                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17961  0038EA  90D8               	bcf	status,0,c
 17962  0038EC  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17966  0038EE  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17967  0038F0  D067               	goto	l13122
 17968  0038F2                     l13082:
 17969                           
 17970                           ; BSR set to: 0
 17971                           ;ECAN.c: 714: }
 17972                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17973  0038F2  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17974  0038F6  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17975  0038FA  50DF               	movf	indf2,w,c
 17976  0038FC  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17977  0038FE  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17978  003900  D05F               	goto	l13122
 17979                           
 17980                           ; BSR set to: 0
 17981                           ;ECAN.c: 721: {
 17982                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17983  003902  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17984  003906  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17985  00390A  0EFC               	movlw	252
 17986  00390C  16DF               	andwf	indf2,f,c
 17987                           
 17988                           ; BSR set to: 0
 17989                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17990  00390E  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17991  003912  0E03               	movlw	3
 17992  003914  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17993  003916  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17994  00391A  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17995  00391E  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17996  003920  12DF               	iorwf	indf2,f,c
 17997                           
 17998                           ; BSR set to: 0
 17999                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 18000  003922  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 18001  003924  D004               	goto	l1459
 18002                           
 18003                           ; BSR set to: 0
 18004                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 18005  003926  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18006  003928  0940               	iorlw	64
 18007  00392A  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 18008  00392C  D002               	goto	l13092
 18009  00392E                     l1459:
 18010                           
 18011                           ; BSR set to: 0
 18012                           ;ECAN.c: 729: else
 18013                           ;ECAN.c: 730: temp = dataLen;
 18014  00392E  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 18015  003932                     l13092:
 18016                           
 18017                           ; BSR set to: 0
 18018                           ;ECAN.c: 732: *(ptr+5) = temp;
 18019  003932  EE20 F005          	lfsr	2,5
 18020  003936  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 18021  003938  26D9               	addwf	fsr2l,f,c
 18022  00393A  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 18023  00393C  22DA               	addwfc	fsr2h,f,c
 18024  00393E  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 18025                           
 18026                           ; BSR set to: 0
 18027                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 18028  003942  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 18029  003944  D003               	goto	l1461
 18030                           
 18031                           ; BSR set to: 0
 18032                           ;ECAN.c: 736: temp = 1;
 18033  003946  0E01               	movlw	1
 18034  003948  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 18035  00394A  D001               	goto	l13098
 18036  00394C                     l1461:
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;ECAN.c: 738: else
 18040                           ;ECAN.c: 739: temp = 0;
 18041  00394C  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 18042  00394E                     l13098:
 18043                           
 18044                           ; BSR set to: 0
 18045                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 18046  00394E  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 18047  003950  6F60               	movwf	?__CANIDToRegs& (0+255),b
 18048  003952  0E00               	movlw	0
 18049  003954  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 18050  003956  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 18051  003958  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 18052  00395C  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 18053  003960  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 18054  003964  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 18055  003968  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 18056  00396C  ECD2  F019         	call	__CANIDToRegs	;wreg free
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;ECAN.c: 745: ptr += 6;
 18060  003970  0E06               	movlw	6
 18061  003972  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 18062  003974  0E00               	movlw	0
 18063  003976  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 18064                           
 18065                           ; BSR set to: 0
 18066                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 18067  003978  6B87               	clrf	ECANSendMessage@j& (0+255),b
 18068  00397A  D00F               	goto	l13112
 18069  00397C                     l13104:
 18070                           
 18071                           ; BSR set to: 0
 18072                           ;ECAN.c: 748: *ptr++ = *data++;
 18073  00397C  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 18074  003980  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 18075  003984  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 18076  003988  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 18077  00398C  CFDF FFE7          	movff	indf2,indf1
 18078                           
 18079                           ; BSR set to: 0
 18080  003990  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 18081  003992  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 18082                           
 18083                           ; BSR set to: 0
 18084  003994  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 18085  003996  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 18086                           
 18087                           ; BSR set to: 0
 18088  003998  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 18089  00399A                     l13112:
 18090                           
 18091                           ; BSR set to: 0
 18092  00399A  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 18093  00399C  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 18094  00399E  E3EE               	bnc	l13104
 18095                           
 18096                           ; BSR set to: 0
 18097                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 18098  0039A0  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18099  0039A4  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18100  0039A8  50DF               	movf	indf2,w,c
 18101  0039AA  6F72               	movwf	??_ECANSendMessage& (0+255),b
 18102  0039AC  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 18103  0039AE  D006               	goto	l13118
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;ECAN.c: 753: *tempPtr |= 0x08;
 18107  0039B0  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 18108  0039B4  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 18109  0039B8  0E00               	movlw	0
 18110  0039BA  86DB               	bsf	plusw2,3,c
 18111  0039BC                     l13118:
 18112                           
 18113                           ; BSR set to: 0
 18114                           ;ECAN.c: 755: return TRUE;
 18115  0039BC  0E01               	movlw	1
 18116  0039BE  D005               	goto	l1467
 18117  0039C0                     l13122:
 18118                           
 18119                           ; BSR set to: 0
 18120  0039C0  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 18121  0039C2                     l13124:
 18122                           
 18123                           ; BSR set to: 0
 18124  0039C2  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 18125  0039C4  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 18126  0039C6  E380               	bnc	l13070
 18127                           
 18128                           ; BSR set to: 0
 18129                           ;ECAN.c: 756: }
 18130                           ;ECAN.c: 757: }
 18131                           ;ECAN.c: 760: return FALSE;
 18132  0039C8  0E00               	movlw	0
 18133  0039CA                     l1467:
 18134                           
 18135                           ; BSR set to: 0
 18136  0039CA  0012               	return	
 18137  0039CC                     __end_of_ECANSendMessage:
 18138                           	opt stack 0
 18139                           tblptru	equ	0xFF8
 18140                           tblptrh	equ	0xFF7
 18141                           tblptrl	equ	0xFF6
 18142                           tablat	equ	0xFF5
 18143                           prodh	equ	0xFF4
 18144                           prodl	equ	0xFF3
 18145                           intcon	equ	0xFF2
 18146                           indf0	equ	0xFEF
 18147                           postinc0	equ	0xFEE
 18148                           fsr0h	equ	0xFEA
 18149                           fsr0l	equ	0xFE9
 18150                           wreg	equ	0xFE8
 18151                           indf1	equ	0xFE7
 18152                           postinc1	equ	0xFE6
 18153                           postdec1	equ	0xFE5
 18154                           fsr1h	equ	0xFE2
 18155                           fsr1l	equ	0xFE1
 18156                           indf2	equ	0xFDF
 18157                           postinc2	equ	0xFDE
 18158                           postdec2	equ	0xFDD
 18159                           plusw2	equ	0xFDB
 18160                           fsr2h	equ	0xFDA
 18161                           fsr2l	equ	0xFD9
 18162                           status	equ	0xFD8
 18163                           
 18164 ;; *************** function __CANIDToRegs *****************
 18165 ;; Defined at:
 18166 ;;		line 1101 in file "ECAN.c"
 18167 ;; Parameters:    Size  Location     Type
 18168 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 18169 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 18170 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 18171 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 18172 ;;  val             4    2[BANK0 ] unsigned long 
 18173 ;;  type            1    6[BANK0 ] unsigned char 
 18174 ;; Auto vars:     Size  Location     Type
 18175 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 18176 ;;		 -> _CANIDToRegs@val(4), 
 18177 ;; Return value:  Size  Location     Type
 18178 ;;		None               void
 18179 ;; Registers used:
 18180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 18181 ;; Tracked objects:
 18182 ;;		On entry : F/0
 18183 ;;		On exit  : F/0
 18184 ;;		Unchanged: 0/0
 18185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18186 ;;      Params:         0       7       0       0       0       0       0
 18187 ;;      Locals:         0       1       0       0       0       0       0
 18188 ;;      Temps:          0       2       0       0       0       0       0
 18189 ;;      Totals:         0      10       0       0       0       0       0
 18190 ;;Total ram usage:       10 bytes
 18191 ;; Hardware stack levels used:    1
 18192 ;; Hardware stack levels required when called:    3
 18193 ;; This function calls:
 18194 ;;		Nothing
 18195 ;; This function is called by:
 18196 ;;		_doModeVerbose
 18197 ;;		_ECANSendMessage
 18198 ;; This function uses a non-reentrant model
 18199 ;;
 18200                           
 18201                           	psect	text37
 18202  0033A4                     __ptext37:
 18203                           	opt stack 0
 18204  0033A4                     __CANIDToRegs:
 18205                           	opt stack 23
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 18209                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 18210                           
 18211                           ; BSR set to: 0
 18212                           ;incstack = 0
 18213                           ;incstack = 0
 18214  0033A4  0E62               	movlw	low __CANIDToRegs@val
 18215  0033A6  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 18216                           
 18217                           ; BSR set to: 0
 18218                           ;ECAN.c: 1106: if ( type == 0 )
 18219  0033A8  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 18220  0033AA  D022               	goto	l12440
 18221                           
 18222                           ; BSR set to: 0
 18223                           ;ECAN.c: 1107: {
 18224                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 18225  0033AC  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18226  0033AE  6ED9               	movwf	fsr2l,c
 18227  0033B0  6ADA               	clrf	fsr2h,c
 18228  0033B2  50DF               	movf	indf2,w,c
 18229  0033B4  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18230  0033B6  90D8               	bcf	status,0,c
 18231  0033B8  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18232  0033BA  90D8               	bcf	status,0,c
 18233  0033BC  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18234  0033BE  90D8               	bcf	status,0,c
 18235  0033C0  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 18236                           
 18237                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 18238  0033C2  D862               	call	PL50	;call to abstracted procedure
 18239  0033C4  2AD9               	incf	fsr2l,f,c
 18240  0033C6  6ADA               	clrf	fsr2h,c
 18241  0033C8  D872               	call	PL96	;call to abstracted procedure
 18242  0033CA                     u15945:
 18243  0033CA  90D8               	bcf	status,0,c
 18244  0033CC  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18245  0033CE  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18246  0033D0  D7FC               	goto	u15945
 18247  0033D2  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18248                           
 18249                           ; BSR set to: 0
 18250                           ;ECAN.c: 1111: ptr++;
 18251                           
 18252                           ; BSR set to: 0
 18253                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 18254  0033D6  D846               	call	PL30	;call to abstracted procedure
 18255  0033D8  D86A               	call	PL96	;call to abstracted procedure
 18256  0033DA                     u15955:
 18257  0033DA  90D8               	bcf	status,0,c
 18258  0033DC  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18259  0033DE  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18260  0033E0  D7FC               	goto	u15955
 18261  0033E2  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18262  0033E4  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18263  0033E8  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18264  0033EC  6EDF               	movwf	indf2,c
 18265                           
 18266                           ;ECAN.c: 1113: }
 18267  0033EE  D039               	goto	l1521
 18268  0033F0                     l12440:
 18269                           
 18270                           ; BSR set to: 0
 18271                           ;ECAN.c: 1114: else
 18272                           ;ECAN.c: 1115: {
 18273                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18274  0033F0  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18275  0033F2  D842               	call	PL46	;call to abstracted procedure
 18276  0033F4  0E05               	movlw	5
 18277  0033F6  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18278  0033F8                     u15965:
 18279  0033F8  90D8               	bcf	status,0,c
 18280  0033FA  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18281  0033FC  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18282  0033FE  D7FC               	goto	u15965
 18283  003400  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18284                           
 18285                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18286  003402  D842               	call	PL50	;call to abstracted procedure
 18287  003404  0E03               	movlw	3
 18288  003406  D849               	call	PL70	;call to abstracted procedure
 18289  003408  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18290  00340A  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18291                           
 18292                           ; BSR set to: 0
 18293                           ;ECAN.c: 1119: ptr++;
 18294                           
 18295                           ; BSR set to: 0
 18296                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18297  00340E  D82A               	call	PL30	;call to abstracted procedure
 18298  003410  0E02               	movlw	2
 18299  003412  D843               	call	PL70	;call to abstracted procedure
 18300  003414  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18301  003416  0BE0               	andlw	224
 18302  003418  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18303  00341C  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18304  003420  6EDF               	movwf	indf2,c
 18305                           
 18306                           ; BSR set to: 0
 18307                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18308  003422  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18309  003426  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18310  00342A  0E00               	movlw	0
 18311  00342C  86DB               	bsf	plusw2,3,c
 18312                           
 18313                           ; BSR set to: 0
 18314                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18315  00342E  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18316  003430  D823               	call	PL46	;call to abstracted procedure
 18317  003432  0E03               	movlw	3
 18318  003434  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18319  003436  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18320                           
 18321                           ;ECAN.c: 1124: ptr++;
 18322                           
 18323                           ; BSR set to: 0
 18324                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18325  00343A  D814               	call	PL30	;call to abstracted procedure
 18326  00343C  2AD9               	incf	fsr2l,f,c
 18327  00343E  6ADA               	clrf	fsr2h,c
 18328  003440  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18329  003444  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18330  003448  CFDF FFE7          	movff	indf2,indf1
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;ECAN.c: 1126: ptr++;
 18334  00344C  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18335  00344E  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18336                           
 18337                           ; BSR set to: 0
 18338                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18339  003450  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18340  003452  6ED9               	movwf	fsr2l,c
 18341  003454  6ADA               	clrf	fsr2h,c
 18342  003456  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18343  00345A  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18344  00345E  CFDF FFE7          	movff	indf2,indf1
 18345  003462                     l1521:
 18346                           
 18347                           ; BSR set to: 0
 18348  003462  0012               	return	
 18349  003464                     __end_of__CANIDToRegs:
 18350                           	opt stack 0
 18351  003464                     PL30:
 18352                           	opt stack 23
 18353  003464  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18354  003468  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18355  00346A  12DF               	iorwf	indf2,f,c
 18356  00346C  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18357  00346E  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18358  003470  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18359  003472  6ED9               	movwf	fsr2l,c
 18360  003474  6ADA               	clrf	fsr2h,c
 18361  003476  0012               	return	
 18362  003478                     __end_ofPL30:
 18363                           	opt stack 0
 18364  003478                     PL46:
 18365                           	opt stack 23
 18366  003478  6ED9               	movwf	fsr2l,c
 18367  00347A  6ADA               	clrf	fsr2h,c
 18368  00347C  0E02               	movlw	2
 18369  00347E  26D9               	addwf	fsr2l,f,c
 18370  003480  6ADA               	clrf	fsr2h,c
 18371  003482  50DF               	movf	indf2,w,c
 18372  003484  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18373  003486  0012               	return	
 18374  003488                     __end_ofPL46:
 18375                           	opt stack 0
 18376  003488                     PL50:
 18377                           	opt stack 23
 18378  003488  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18379  00348C  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18380  003490  6EDF               	movwf	indf2,c
 18381  003492  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18382  003494  6ED9               	movwf	fsr2l,c
 18383  003496  6ADA               	clrf	fsr2h,c
 18384  003498  0012               	return	
 18385  00349A                     __end_ofPL50:
 18386                           	opt stack 0
 18387  00349A                     PL70:
 18388                           	opt stack 23
 18389  00349A  26D9               	addwf	fsr2l,f,c
 18390  00349C  6ADA               	clrf	fsr2h,c
 18391  00349E  50DF               	movf	indf2,w,c
 18392  0034A0  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18393  0034A2  90D8               	bcf	status,0,c
 18394  0034A4  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18395  0034A6  90D8               	bcf	status,0,c
 18396  0034A8  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18397  0034AA  90D8               	bcf	status,0,c
 18398  0034AC  0012               	return	
 18399  0034AE                     __end_ofPL70:
 18400                           	opt stack 0
 18401  0034AE                     PL96:
 18402                           	opt stack 23
 18403  0034AE  50DF               	movf	indf2,w,c
 18404  0034B0  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18405  0034B2  0E05               	movlw	5
 18406  0034B4  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18407  0034B6  0C05               	retlw	5
 18408  0034B8                     __end_ofPL96:
 18409                           	opt stack 0
 18410                           tblptru	equ	0xFF8
 18411                           tblptrh	equ	0xFF7
 18412                           tblptrl	equ	0xFF6
 18413                           tablat	equ	0xFF5
 18414                           prodh	equ	0xFF4
 18415                           prodl	equ	0xFF3
 18416                           intcon	equ	0xFF2
 18417                           indf0	equ	0xFEF
 18418                           postinc0	equ	0xFEE
 18419                           fsr0h	equ	0xFEA
 18420                           fsr0l	equ	0xFE9
 18421                           wreg	equ	0xFE8
 18422                           indf1	equ	0xFE7
 18423                           postinc1	equ	0xFE6
 18424                           postdec1	equ	0xFE5
 18425                           fsr1h	equ	0xFE2
 18426                           fsr1l	equ	0xFE1
 18427                           indf2	equ	0xFDF
 18428                           postinc2	equ	0xFDE
 18429                           postdec2	equ	0xFDD
 18430                           plusw2	equ	0xFDB
 18431                           fsr2h	equ	0xFDA
 18432                           fsr2l	equ	0xFD9
 18433                           status	equ	0xFD8
 18434                           
 18435 ;; *************** function _memset *****************
 18436 ;; Defined at:
 18437 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18438 ;; Parameters:    Size  Location     Type
 18439 ;;  p1              2    0[BANK0 ] PTR void 
 18440 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18441 ;;  c               2    2[BANK0 ] int 
 18442 ;;  n               2    4[BANK0 ] unsigned int 
 18443 ;; Auto vars:     Size  Location     Type
 18444 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18445 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18446 ;; Return value:  Size  Location     Type
 18447 ;;                  2    0[BANK0 ] PTR void 
 18448 ;; Registers used:
 18449 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18450 ;; Tracked objects:
 18451 ;;		On entry : F/0
 18452 ;;		On exit  : F/0
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18455 ;;      Params:         0       6       0       0       0       0       0
 18456 ;;      Locals:         0       2       0       0       0       0       0
 18457 ;;      Temps:          0       0       0       0       0       0       0
 18458 ;;      Totals:         0       8       0       0       0       0       0
 18459 ;;Total ram usage:        8 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; Hardware stack levels required when called:    3
 18462 ;; This function calls:
 18463 ;;		Nothing
 18464 ;; This function is called by:
 18465 ;;		_doModeVerbose
 18466 ;;		_doModeSLCAN
 18467 ;;		_printGUID
 18468 ;;		_printMDF
 18469 ;;		_printNodeFirmwareVersion
 18470 ;; This function uses a non-reentrant model
 18471 ;;
 18472                           
 18473                           	psect	text38
 18474  001686                     __ptext38:
 18475                           	opt stack 0
 18476  001686                     _memset:
 18477                           	opt stack 25
 18478                           
 18479                           ; BSR set to: 0
 18480                           
 18481                           ; BSR set to: 0
 18482                           ;incstack = 0
 18483                           ;incstack = 0
 18484  001686  C060  F066         	movff	memset@p1,memset@p
 18485  00168A  C061  F067         	movff	memset@p1+1,memset@p+1
 18486  00168E  D008               	goto	l15012
 18487  001690                     l15008:
 18488                           
 18489                           ; BSR set to: 0
 18490  001690  C066  FFD9         	movff	memset@p,fsr2l
 18491  001694  C067  FFDA         	movff	memset@p+1,fsr2h
 18492  001698  C062  FFDF         	movff	memset@c,indf2
 18493                           
 18494                           ; BSR set to: 0
 18495  00169C  4B66               	infsnz	memset@p& (0+255),f,b
 18496  00169E  2B67               	incf	(memset@p+1)& (0+255),f,b
 18497  0016A0                     l15012:
 18498                           
 18499                           ; BSR set to: 0
 18500  0016A0  0764               	decf	memset@n& (0+255),f,b
 18501  0016A2  A0D8               	btfss	status,0,c
 18502  0016A4  0765               	decf	(memset@n+1)& (0+255),f,b
 18503  0016A6  0100               	movlb	0	; () banked
 18504  0016A8  2964               	incf	memset@n& (0+255),w,b
 18505  0016AA  B4D8               	btfsc	status,2,c
 18506  0016AC  2965               	incf	(memset@n+1)& (0+255),w,b
 18507  0016AE  B4D8               	btfsc	status,2,c
 18508                           
 18509                           ; BSR set to: 0
 18510  0016B0  0012               	return	
 18511  0016B2  D7EE               	goto	l15008
 18512  0016B4                     __end_of_memset:
 18513                           	opt stack 0
 18514                           tblptru	equ	0xFF8
 18515                           tblptrh	equ	0xFF7
 18516                           tblptrl	equ	0xFF6
 18517                           tablat	equ	0xFF5
 18518                           prodh	equ	0xFF4
 18519                           prodl	equ	0xFF3
 18520                           intcon	equ	0xFF2
 18521                           indf0	equ	0xFEF
 18522                           postinc0	equ	0xFEE
 18523                           fsr0h	equ	0xFEA
 18524                           fsr0l	equ	0xFE9
 18525                           wreg	equ	0xFE8
 18526                           indf1	equ	0xFE7
 18527                           postinc1	equ	0xFE6
 18528                           postdec1	equ	0xFE5
 18529                           fsr1h	equ	0xFE2
 18530                           fsr1l	equ	0xFE1
 18531                           indf2	equ	0xFDF
 18532                           postinc2	equ	0xFDE
 18533                           postdec2	equ	0xFDD
 18534                           plusw2	equ	0xFDB
 18535                           fsr2h	equ	0xFDA
 18536                           fsr2l	equ	0xFD9
 18537                           status	equ	0xFD8
 18538                           
 18539 ;; *************** function _printHelp *****************
 18540 ;; Defined at:
 18541 ;;		line 2605 in file "main.c"
 18542 ;; Parameters:    Size  Location     Type
 18543 ;;		None
 18544 ;; Auto vars:     Size  Location     Type
 18545 ;;		None
 18546 ;; Return value:  Size  Location     Type
 18547 ;;		None               void
 18548 ;; Registers used:
 18549 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18550 ;; Tracked objects:
 18551 ;;		On entry : F/0
 18552 ;;		On exit  : 0/0
 18553 ;;		Unchanged: 0/0
 18554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18555 ;;      Params:         0       0       0       0       0       0       0
 18556 ;;      Locals:         0       0       0       0       0       0       0
 18557 ;;      Temps:          0       0       0       0       0       0       0
 18558 ;;      Totals:         0       0       0       0       0       0       0
 18559 ;;Total ram usage:        0 bytes
 18560 ;; Hardware stack levels used:    1
 18561 ;; Hardware stack levels required when called:    5
 18562 ;; This function calls:
 18563 ;;		_putsUSART
 18564 ;; This function is called by:
 18565 ;;		_doModeVerbose
 18566 ;; This function uses a non-reentrant model
 18567 ;;
 18568                           
 18569                           	psect	text39
 18570  003FFC                     __ptext39:
 18571                           	opt stack 0
 18572  003FFC                     _printHelp:
 18573                           	opt stack 23
 18574                           
 18575                           ; BSR set to: 0
 18576                           ;main.c: 2606: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18577                           
 18578                           ; BSR set to: 0
 18579                           ;incstack = 0
 18580                           ;incstack = 0
 18581  003FFC  0E75               	movlw	high STR_214
 18582  003FFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18583  004000  0E31               	movlw	low STR_214
 18584  004002  6F61               	movwf	?_putsUSART& (0+255),b
 18585  004004  ECA8  F00D         	call	_putsUSART	;wreg free
 18586                           
 18587                           ;main.c: 2607: putsUSART((char *) "------------------------------------\r\n");
 18588  004008  0E6E               	movlw	high (STR_246+28)
 18589  00400A  0100               	movlb	0	; () banked
 18590  00400C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18591  00400E  0E96               	movlw	low (STR_246+28)
 18592  004010  6F61               	movwf	?_putsUSART& (0+255),b
 18593  004012  ECA8  F00D         	call	_putsUSART	;wreg free
 18594                           
 18595                           ;main.c: 2608: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18596  004016  0E78               	movlw	high STR_216
 18597  004018  0100               	movlb	0	; () banked
 18598  00401A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18599  00401C  0E2A               	movlw	low STR_216
 18600  00401E  6F61               	movwf	?_putsUSART& (0+255),b
 18601  004020  ECA8  F00D         	call	_putsUSART	;wreg free
 18602                           
 18603                           ;main.c: 2609: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18604  004024  0E73               	movlw	high STR_217
 18605  004026  0100               	movlb	0	; () banked
 18606  004028  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18607  00402A  0EC0               	movlw	low STR_217
 18608  00402C  6F61               	movwf	?_putsUSART& (0+255),b
 18609  00402E  ECA8  F00D         	call	_putsUSART	;wreg free
 18610                           
 18611                           ;main.c: 2610: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18612  004032  0E73               	movlw	high STR_218
 18613  004034  0100               	movlb	0	; () banked
 18614  004036  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18615  004038  0E66               	movlw	low STR_218
 18616  00403A  6F61               	movwf	?_putsUSART& (0+255),b
 18617  00403C  ECA8  F00D         	call	_putsUSART	;wreg free
 18618                           
 18619                           ;main.c: 2611: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18620  004040  0E71               	movlw	high STR_219
 18621  004042  0100               	movlb	0	; () banked
 18622  004044  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18623  004046  0EDF               	movlw	low STR_219
 18624  004048  6F61               	movwf	?_putsUSART& (0+255),b
 18625  00404A  ECA8  F00D         	call	_putsUSART	;wreg free
 18626                           
 18627                           ;main.c: 2612: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18628  00404E  0E72               	movlw	high STR_220
 18629  004050  0100               	movlb	0	; () banked
 18630  004052  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18631  004054  0E44               	movlw	low STR_220
 18632  004056  6F61               	movwf	?_putsUSART& (0+255),b
 18633  004058  ECA8  F00D         	call	_putsUSART	;wreg free
 18634                           
 18635                           ;main.c: 2613: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18636  00405C  0E77               	movlw	high STR_221
 18637  00405E  0100               	movlb	0	; () banked
 18638  004060  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18639  004062  0ED2               	movlw	low STR_221
 18640  004064  6F61               	movwf	?_putsUSART& (0+255),b
 18641  004066  ECA8  F00D         	call	_putsUSART	;wreg free
 18642                           
 18643                           ;main.c: 2614: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18644  00406A  0E72               	movlw	high STR_222
 18645  00406C  0100               	movlb	0	; () banked
 18646  00406E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18647  004070  0E76               	movlw	low STR_222
 18648  004072  6F61               	movwf	?_putsUSART& (0+255),b
 18649  004074  ECA8  F00D         	call	_putsUSART	;wreg free
 18650                           
 18651                           ;main.c: 2615: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18652  004078  0E73               	movlw	high STR_223
 18653  00407A  0100               	movlb	0	; () banked
 18654  00407C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18655  00407E  0E94               	movlw	low STR_223
 18656  004080  6F61               	movwf	?_putsUSART& (0+255),b
 18657  004082  ECA8  F00D         	call	_putsUSART	;wreg free
 18658                           
 18659                           ;main.c: 2616: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18660  004086  0E78               	movlw	high STR_224
 18661  004088  0100               	movlb	0	; () banked
 18662  00408A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18663  00408C  0EE0               	movlw	low STR_224
 18664  00408E  6F61               	movwf	?_putsUSART& (0+255),b
 18665  004090  ECA8  F00D         	call	_putsUSART	;wreg free
 18666                           
 18667                           ;main.c: 2617: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18668  004094  0E70               	movlw	high STR_225
 18669  004096  0100               	movlb	0	; () banked
 18670  004098  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18671  00409A  0E2D               	movlw	low STR_225
 18672  00409C  6F61               	movwf	?_putsUSART& (0+255),b
 18673  00409E  ECA8  F00D         	call	_putsUSART	;wreg free
 18674                           
 18675                           ;main.c: 2618: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18676  0040A2  0E79               	movlw	high STR_226
 18677  0040A4  0100               	movlb	0	; () banked
 18678  0040A6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18679  0040A8  0EA0               	movlw	low STR_226
 18680  0040AA  6F61               	movwf	?_putsUSART& (0+255),b
 18681  0040AC  ECA8  F00D         	call	_putsUSART	;wreg free
 18682                           
 18683                           ;main.c: 2619: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18684  0040B0  0E76               	movlw	high STR_227
 18685  0040B2  0100               	movlb	0	; () banked
 18686  0040B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18687  0040B6  0EEE               	movlw	low STR_227
 18688  0040B8  6F61               	movwf	?_putsUSART& (0+255),b
 18689  0040BA  ECA8  F00D         	call	_putsUSART	;wreg free
 18690                           
 18691                           ;main.c: 2620: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18692  0040BE  0E75               	movlw	high STR_228
 18693  0040C0  0100               	movlb	0	; () banked
 18694  0040C2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18695  0040C4  0E0A               	movlw	low STR_228
 18696  0040C6  6F61               	movwf	?_putsUSART& (0+255),b
 18697  0040C8  ECA8  F00D         	call	_putsUSART	;wreg free
 18698                           
 18699                           ;main.c: 2621: putsUSART((char *) "HELP - Display this help information.\r\n");
 18700  0040CC  0E74               	movlw	high STR_229
 18701  0040CE  0100               	movlb	0	; () banked
 18702  0040D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18703  0040D2  0E6B               	movlw	low STR_229
 18704  0040D4  6F61               	movwf	?_putsUSART& (0+255),b
 18705  0040D6  ECA8  F00D         	call	_putsUSART	;wreg free
 18706                           
 18707                           ;main.c: 2622: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18708  0040DA  0E73               	movlw	high STR_230
 18709  0040DC  0100               	movlb	0	; () banked
 18710  0040DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18711  0040E0  0E37               	movlw	low STR_230
 18712  0040E2  6F61               	movwf	?_putsUSART& (0+255),b
 18713  0040E4  ECA8  F00D         	call	_putsUSART	;wreg free
 18714                           
 18715                           ;main.c: 2623: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 18716  0040E8  0E6D               	movlw	high STR_231
 18717  0040EA  0100               	movlb	0	; () banked
 18718  0040EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18719  0040EE  0E9D               	movlw	low STR_231
 18720  0040F0  6F61               	movwf	?_putsUSART& (0+255),b
 18721  0040F2  ECA8  F00D         	call	_putsUSART	;wreg free
 18722                           
 18723                           ;main.c: 2624: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 18724  0040F6  0E6D               	movlw	high STR_232
 18725  0040F8  0100               	movlb	0	; () banked
 18726  0040FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18727  0040FC  0EE9               	movlw	low STR_232
 18728  0040FE  6F61               	movwf	?_putsUSART& (0+255),b
 18729  004100  ECA8  F00D         	call	_putsUSART	;wreg free
 18730                           
 18731                           ;main.c: 2625: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18732  004104  0E6D               	movlw	high STR_233
 18733  004106  0100               	movlb	0	; () banked
 18734  004108  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18735  00410A  0E50               	movlw	low STR_233
 18736  00410C  6F61               	movwf	?_putsUSART& (0+255),b
 18737  00410E  ECA8  F00D         	call	_putsUSART	;wreg free
 18738                           
 18739                           ;main.c: 2626: putsUSART((char *) "FILTER - Set filter .\r\n");
 18740  004112  0E78               	movlw	high STR_234
 18741  004114  0100               	movlb	0	; () banked
 18742  004116  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18743  004118  0EF8               	movlw	low STR_234
 18744  00411A  6F61               	movwf	?_putsUSART& (0+255),b
 18745  00411C  ECA8  F00D         	call	_putsUSART	;wreg free
 18746                           
 18747                           ;main.c: 2627: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18748  004120  0E6D               	movlw	high STR_235
 18749  004122  0100               	movlb	0	; () banked
 18750  004124  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18751  004126  0E02               	movlw	low STR_235
 18752  004128  6F61               	movwf	?_putsUSART& (0+255),b
 18753  00412A  ECA8  F00D         	call	_putsUSART	;wreg free
 18754                           
 18755                           ;main.c: 2628: putsUSART((char *) "MASK - Set mask .\r\n");
 18756  00412E  0E7A               	movlw	high STR_236
 18757  004130  0100               	movlb	0	; () banked
 18758  004132  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18759  004134  0E26               	movlw	low STR_236
 18760  004136  6F61               	movwf	?_putsUSART& (0+255),b
 18761  004138  ECA8  F00D         	call	_putsUSART	;wreg free
 18762                           
 18763                           ;main.c: 2629: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18764  00413C  0E6E               	movlw	high STR_237
 18765  00413E  0100               	movlb	0	; () banked
 18766  004140  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18767  004142  0E33               	movlw	low STR_237
 18768  004144  6F61               	movwf	?_putsUSART& (0+255),b
 18769  004146  ECA8  F00D         	call	_putsUSART	;wreg free
 18770                           
 18771                           ;main.c: 2630: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18772  00414A  0E76               	movlw	high STR_238
 18773  00414C  0100               	movlb	0	; () banked
 18774  00414E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18775  004150  0ECC               	movlw	low STR_238
 18776  004152  6F61               	movwf	?_putsUSART& (0+255),b
 18777  004154  ECA8  F00D         	call	_putsUSART	;wreg free
 18778                           
 18779                           ;main.c: 2631: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18780  004158  0E73               	movlw	high STR_239
 18781  00415A  0100               	movlb	0	; () banked
 18782  00415C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18783  00415E  0E08               	movlw	low STR_239
 18784  004160  6F61               	movwf	?_putsUSART& (0+255),b
 18785  004162  ECA8  F00D         	call	_putsUSART	;wreg free
 18786                           
 18787                           ;main.c: 2632: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18788  004166  0E72               	movlw	high STR_240
 18789  004168  0100               	movlb	0	; () banked
 18790  00416A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18791  00416C  0ED9               	movlw	low STR_240
 18792  00416E  6F61               	movwf	?_putsUSART& (0+255),b
 18793  004170  ECA8  F00D         	call	_putsUSART	;wreg free
 18794                           
 18795                           ;main.c: 2633: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18796  004174  0E6E               	movlw	high STR_241
 18797  004176  0100               	movlb	0	; () banked
 18798  004178  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18799  00417A  0EBD               	movlw	low STR_241
 18800  00417C  6F61               	movwf	?_putsUSART& (0+255),b
 18801  00417E  ECA8  F00D         	call	_putsUSART	;wreg free
 18802                           
 18803                           ;main.c: 2634: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18804  004182  0E72               	movlw	high STR_242
 18805  004184  0100               	movlb	0	; () banked
 18806  004186  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18807  004188  0EA8               	movlw	low STR_242
 18808  00418A  6F61               	movwf	?_putsUSART& (0+255),b
 18809  00418C  ECA8  F00D         	call	_putsUSART	;wreg free
 18810                           
 18811                           ;main.c: 2635: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18812  004190  0E70               	movlw	high STR_243
 18813  004192  0100               	movlb	0	; () banked
 18814  004194  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18815  004196  0E9C               	movlw	low STR_243
 18816  004198  6F61               	movwf	?_putsUSART& (0+255),b
 18817  00419A  ECA8  F00D         	call	_putsUSART	;wreg free
 18818                           
 18819                           ;main.c: 2636: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18820  00419E  0E6F               	movlw	high STR_244
 18821  0041A0  0100               	movlb	0	; () banked
 18822  0041A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18823  0041A4  0E42               	movlw	low STR_244
 18824  0041A6  6F61               	movwf	?_putsUSART& (0+255),b
 18825  0041A8  ECA8  F00D         	call	_putsUSART	;wreg free
 18826                           
 18827                           ;main.c: 2637: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18828  0041AC  0E75               	movlw	high STR_245
 18829  0041AE  0100               	movlb	0	; () banked
 18830  0041B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18831  0041B2  0EA6               	movlw	low STR_245
 18832  0041B4  6F61               	movwf	?_putsUSART& (0+255),b
 18833  0041B6  EFA8  F00D         	goto	_putsUSART	;wreg free
 18834  0041BA                     __end_of_printHelp:
 18835                           	opt stack 0
 18836                           tblptru	equ	0xFF8
 18837                           tblptrh	equ	0xFF7
 18838                           tblptrl	equ	0xFF6
 18839                           tablat	equ	0xFF5
 18840                           prodh	equ	0xFF4
 18841                           prodl	equ	0xFF3
 18842                           intcon	equ	0xFF2
 18843                           indf0	equ	0xFEF
 18844                           postinc0	equ	0xFEE
 18845                           fsr0h	equ	0xFEA
 18846                           fsr0l	equ	0xFE9
 18847                           wreg	equ	0xFE8
 18848                           indf1	equ	0xFE7
 18849                           postinc1	equ	0xFE6
 18850                           postdec1	equ	0xFE5
 18851                           fsr1h	equ	0xFE2
 18852                           fsr1l	equ	0xFE1
 18853                           indf2	equ	0xFDF
 18854                           postinc2	equ	0xFDE
 18855                           postdec2	equ	0xFDD
 18856                           plusw2	equ	0xFDB
 18857                           fsr2h	equ	0xFDA
 18858                           fsr2l	equ	0xFD9
 18859                           status	equ	0xFD8
 18860                           
 18861 ;; *************** function _printErrors *****************
 18862 ;; Defined at:
 18863 ;;		line 2541 in file "main.c"
 18864 ;; Parameters:    Size  Location     Type
 18865 ;;		None
 18866 ;; Auto vars:     Size  Location     Type
 18867 ;;		None
 18868 ;; Return value:  Size  Location     Type
 18869 ;;		None               void
 18870 ;; Registers used:
 18871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18872 ;; Tracked objects:
 18873 ;;		On entry : F/0
 18874 ;;		On exit  : 0/0
 18875 ;;		Unchanged: 0/0
 18876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18877 ;;      Params:         0       0       0       0       0       0       0
 18878 ;;      Locals:         0      12       0       0       0       0       0
 18879 ;;      Temps:          0       0       0       0       0       0       0
 18880 ;;      Totals:         0      12       0       0       0       0       0
 18881 ;;Total ram usage:       12 bytes
 18882 ;; Hardware stack levels used:    1
 18883 ;; Hardware stack levels required when called:    5
 18884 ;; This function calls:
 18885 ;;		_putsUSART
 18886 ;;		_sprintf
 18887 ;; This function is called by:
 18888 ;;		_doModeVerbose
 18889 ;; This function uses a non-reentrant model
 18890 ;;
 18891                           
 18892                           	psect	text40
 18893  0049F4                     __ptext40:
 18894                           	opt stack 0
 18895  0049F4                     _printErrors:
 18896                           	opt stack 23
 18897                           
 18898                           ; BSR set to: 0
 18899                           ;main.c: 2542: putsUSART((char *) "CAN Receive overruns: ");
 18900                           
 18901                           ;incstack = 0
 18902                           ;incstack = 0
 18903  0049F4  0E79               	movlw	high STR_184
 18904  0049F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18905  0049F8  0EB7               	movlw	low STR_184
 18906  0049FA  6F61               	movwf	?_putsUSART& (0+255),b
 18907  0049FC  ECA8  F00D         	call	_putsUSART	;wreg free
 18908                           
 18909                           ;main.c: 2543: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18910  004A00  0100               	movlb	0	; () banked
 18911  004A02  67E5               	tstfsz	_bHex& (0+255),b
 18912  004A04  D004               	goto	l15088
 18913                           
 18914                           ; BSR set to: 0
 18915  004A06  0E7C               	movlw	high STR_170
 18916  004A08  6F95               	movwf	(_printErrors$1470+1)& (0+255),b
 18917  004A0A  0EDD               	movlw	low STR_170
 18918  004A0C  D003               	goto	L18
 18919  004A0E                     l15088:
 18920                           
 18921                           ; BSR set to: 0
 18922  004A0E  0E7C               	movlw	high STR_185
 18923  004A10  6F95               	movwf	(_printErrors$1470+1)& (0+255),b
 18924  004A12  0E08               	movlw	low STR_185
 18925  004A14                     L18:
 18926  004A14  6F94               	movwf	_printErrors$1470& (0+255),b
 18927                           
 18928                           ; BSR set to: 0
 18929  004A16  0E01               	movlw	high _wrkbuf
 18930  004A18  0100               	movlb	0	; () banked
 18931  004A1A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18932  004A1C  0E77               	movlw	low _wrkbuf
 18933  004A1E  6F76               	movwf	?_sprintf& (0+255),b
 18934  004A20  C094  F078         	movff	_printErrors$1470,?_sprintf+2
 18935  004A24  C095  F079         	movff	_printErrors$1470+1,?_sprintf+3
 18936  004A28  C100  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18937  004A2C  C101  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18938  004A30  C102  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18939  004A34  C103  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18940  004A38  EC3D  F028         	call	_sprintf	;wreg free
 18941                           
 18942                           ; BSR set to: 0
 18943                           ;main.c: 2544: putsUSART(wrkbuf);
 18944  004A3C  0E01               	movlw	high _wrkbuf
 18945  004A3E  0100               	movlb	0	; () banked
 18946  004A40  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18947  004A42  0E77               	movlw	low _wrkbuf
 18948  004A44  6F61               	movwf	?_putsUSART& (0+255),b
 18949  004A46  ECA8  F00D         	call	_putsUSART	;wreg free
 18950                           
 18951                           ;main.c: 2545: putsUSART((char *) "\r\n");
 18952  004A4A  0E71               	movlw	high (STR_205+50)
 18953  004A4C  0100               	movlb	0	; () banked
 18954  004A4E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18955  004A50  0EA8               	movlw	low (STR_205+50)
 18956  004A52  6F61               	movwf	?_putsUSART& (0+255),b
 18957  004A54  ECA8  F00D         	call	_putsUSART	;wreg free
 18958                           
 18959                           ;main.c: 2547: putsUSART((char *) "CAN Transmit overruns: ");
 18960  004A58  0E79               	movlw	high STR_188
 18961  004A5A  0100               	movlb	0	; () banked
 18962  004A5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18963  004A5E  0E88               	movlw	low STR_188
 18964  004A60  6F61               	movwf	?_putsUSART& (0+255),b
 18965  004A62  ECA8  F00D         	call	_putsUSART	;wreg free
 18966                           
 18967                           ;main.c: 2548: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18968  004A66  0100               	movlb	0	; () banked
 18969  004A68  67E5               	tstfsz	_bHex& (0+255),b
 18970  004A6A  D004               	goto	l15102
 18971                           
 18972                           ; BSR set to: 0
 18973  004A6C  0E7C               	movlw	high STR_170
 18974  004A6E  6F97               	movwf	(_printErrors$1476+1)& (0+255),b
 18975  004A70  0EDD               	movlw	low STR_170
 18976  004A72  D003               	goto	L19
 18977  004A74                     l15102:
 18978                           
 18979                           ; BSR set to: 0
 18980  004A74  0E7C               	movlw	high STR_185
 18981  004A76  6F97               	movwf	(_printErrors$1476+1)& (0+255),b
 18982  004A78  0E08               	movlw	low STR_185
 18983  004A7A                     L19:
 18984  004A7A  6F96               	movwf	_printErrors$1476& (0+255),b
 18985                           
 18986                           ; BSR set to: 0
 18987  004A7C  0E01               	movlw	high _wrkbuf
 18988  004A7E  0100               	movlb	0	; () banked
 18989  004A80  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18990  004A82  0E77               	movlw	low _wrkbuf
 18991  004A84  6F76               	movwf	?_sprintf& (0+255),b
 18992  004A86  C096  F078         	movff	_printErrors$1476,?_sprintf+2
 18993  004A8A  C097  F079         	movff	_printErrors$1476+1,?_sprintf+3
 18994  004A8E  C104  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18995  004A92  C105  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18996  004A96  C106  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18997  004A9A  C107  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18998  004A9E  EC3D  F028         	call	_sprintf	;wreg free
 18999                           
 19000                           ; BSR set to: 0
 19001                           ;main.c: 2549: putsUSART(wrkbuf);
 19002  004AA2  0E01               	movlw	high _wrkbuf
 19003  004AA4  0100               	movlb	0	; () banked
 19004  004AA6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19005  004AA8  0E77               	movlw	low _wrkbuf
 19006  004AAA  6F61               	movwf	?_putsUSART& (0+255),b
 19007  004AAC  ECA8  F00D         	call	_putsUSART	;wreg free
 19008                           
 19009                           ;main.c: 2550: putsUSART((char *) "\r\n");
 19010  004AB0  0E71               	movlw	high (STR_205+50)
 19011  004AB2  0100               	movlb	0	; () banked
 19012  004AB4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19013  004AB6  0EA8               	movlw	low (STR_205+50)
 19014  004AB8  6F61               	movwf	?_putsUSART& (0+255),b
 19015  004ABA  ECA8  F00D         	call	_putsUSART	;wreg free
 19016                           
 19017                           ;main.c: 2552: putsUSART((char *) "UART Receive overruns: ");
 19018  004ABE  0E79               	movlw	high STR_192
 19019  004AC0  0100               	movlb	0	; () banked
 19020  004AC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19021  004AC4  0E70               	movlw	low STR_192
 19022  004AC6  6F61               	movwf	?_putsUSART& (0+255),b
 19023  004AC8  ECA8  F00D         	call	_putsUSART	;wreg free
 19024                           
 19025                           ;main.c: 2553: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 19026  004ACC  0100               	movlb	0	; () banked
 19027  004ACE  67E5               	tstfsz	_bHex& (0+255),b
 19028  004AD0  D004               	goto	l15116
 19029                           
 19030                           ; BSR set to: 0
 19031  004AD2  0E7C               	movlw	high STR_170
 19032  004AD4  6F99               	movwf	(_printErrors$1482+1)& (0+255),b
 19033  004AD6  0EDD               	movlw	low STR_170
 19034  004AD8  D003               	goto	L20
 19035  004ADA                     l15116:
 19036                           
 19037                           ; BSR set to: 0
 19038  004ADA  0E7C               	movlw	high STR_185
 19039  004ADC  6F99               	movwf	(_printErrors$1482+1)& (0+255),b
 19040  004ADE  0E08               	movlw	low STR_185
 19041  004AE0                     L20:
 19042  004AE0  6F98               	movwf	_printErrors$1482& (0+255),b
 19043                           
 19044                           ; BSR set to: 0
 19045  004AE2  0E01               	movlw	high _wrkbuf
 19046  004AE4  0100               	movlb	0	; () banked
 19047  004AE6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19048  004AE8  0E77               	movlw	low _wrkbuf
 19049  004AEA  6F76               	movwf	?_sprintf& (0+255),b
 19050  004AEC  C098  F078         	movff	_printErrors$1482,?_sprintf+2
 19051  004AF0  C099  F079         	movff	_printErrors$1482+1,?_sprintf+3
 19052  004AF4  C11C  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 19053  004AF8  C11D  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 19054  004AFC  C11E  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 19055  004B00  C11F  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 19056  004B04  EC3D  F028         	call	_sprintf	;wreg free
 19057                           
 19058                           ; BSR set to: 0
 19059                           ;main.c: 2554: putsUSART(wrkbuf);
 19060  004B08  0E01               	movlw	high _wrkbuf
 19061  004B0A  0100               	movlb	0	; () banked
 19062  004B0C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19063  004B0E  0E77               	movlw	low _wrkbuf
 19064  004B10  6F61               	movwf	?_putsUSART& (0+255),b
 19065  004B12  ECA8  F00D         	call	_putsUSART	;wreg free
 19066                           
 19067                           ;main.c: 2555: putsUSART((char *) "\r\n");
 19068  004B16  0E71               	movlw	high (STR_205+50)
 19069  004B18  0100               	movlb	0	; () banked
 19070  004B1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19071  004B1C  0EA8               	movlw	low (STR_205+50)
 19072  004B1E  6F61               	movwf	?_putsUSART& (0+255),b
 19073  004B20  ECA8  F00D         	call	_putsUSART	;wreg free
 19074                           
 19075                           ;main.c: 2557: putsUSART((char *) "UART Receive overruns: ");
 19076  004B24  0E79               	movlw	high STR_192
 19077  004B26  0100               	movlb	0	; () banked
 19078  004B28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19079  004B2A  0E70               	movlw	low STR_192
 19080  004B2C  6F61               	movwf	?_putsUSART& (0+255),b
 19081  004B2E  ECA8  F00D         	call	_putsUSART	;wreg free
 19082                           
 19083                           ;main.c: 2558: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 19084  004B32  0100               	movlb	0	; () banked
 19085  004B34  67E5               	tstfsz	_bHex& (0+255),b
 19086  004B36  D004               	goto	l15130
 19087                           
 19088                           ; BSR set to: 0
 19089  004B38  0E7C               	movlw	high STR_170
 19090  004B3A  6F9B               	movwf	(_printErrors$1488+1)& (0+255),b
 19091  004B3C  0EDD               	movlw	low STR_170
 19092  004B3E  D003               	goto	L21
 19093  004B40                     l15130:
 19094                           
 19095                           ; BSR set to: 0
 19096  004B40  0E7C               	movlw	high STR_185
 19097  004B42  6F9B               	movwf	(_printErrors$1488+1)& (0+255),b
 19098  004B44  0E08               	movlw	low STR_185
 19099  004B46                     L21:
 19100  004B46  6F9A               	movwf	_printErrors$1488& (0+255),b
 19101                           
 19102                           ; BSR set to: 0
 19103  004B48  0E01               	movlw	high _wrkbuf
 19104  004B4A  0100               	movlb	0	; () banked
 19105  004B4C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19106  004B4E  0E77               	movlw	low _wrkbuf
 19107  004B50  6F76               	movwf	?_sprintf& (0+255),b
 19108  004B52  C09A  F078         	movff	_printErrors$1488,?_sprintf+2
 19109  004B56  C09B  F079         	movff	_printErrors$1488+1,?_sprintf+3
 19110  004B5A  C120  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 19111  004B5E  C121  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 19112  004B62  C122  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 19113  004B66  C123  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 19114  004B6A  EC3D  F028         	call	_sprintf	;wreg free
 19115                           
 19116                           ; BSR set to: 0
 19117                           ;main.c: 2559: putsUSART(wrkbuf);
 19118  004B6E  0E01               	movlw	high _wrkbuf
 19119  004B70  0100               	movlb	0	; () banked
 19120  004B72  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19121  004B74  0E77               	movlw	low _wrkbuf
 19122  004B76  6F61               	movwf	?_putsUSART& (0+255),b
 19123  004B78  ECA8  F00D         	call	_putsUSART	;wreg free
 19124                           
 19125                           ;main.c: 2560: putsUSART((char *) "\r\n");
 19126  004B7C  0E71               	movlw	high (STR_205+50)
 19127  004B7E  0100               	movlb	0	; () banked
 19128  004B80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19129  004B82  0EA8               	movlw	low (STR_205+50)
 19130  004B84  6F61               	movwf	?_putsUSART& (0+255),b
 19131  004B86  ECA8  F00D         	call	_putsUSART	;wreg free
 19132                           
 19133                           ;main.c: 2562: putsUSART((char *) "Transmit Error Counter: ");
 19134  004B8A  0E78               	movlw	high STR_200
 19135  004B8C  0100               	movlb	0	; () banked
 19136  004B8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19137  004B90  0EAE               	movlw	low STR_200
 19138  004B92  6F61               	movwf	?_putsUSART& (0+255),b
 19139  004B94  ECA8  F00D         	call	_putsUSART	;wreg free
 19140                           
 19141                           ;main.c: 2563: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 19142  004B98  0100               	movlb	0	; () banked
 19143  004B9A  67E5               	tstfsz	_bHex& (0+255),b
 19144  004B9C  D004               	goto	l15144
 19145                           
 19146                           ; BSR set to: 0
 19147  004B9E  0E7C               	movlw	high STR_60
 19148  004BA0  6F9D               	movwf	(_printErrors$1494+1)& (0+255),b
 19149  004BA2  0EED               	movlw	low STR_60
 19150  004BA4  D003               	goto	L22
 19151  004BA6                     l15144:
 19152                           
 19153                           ; BSR set to: 0
 19154  004BA6  0E7C               	movlw	high STR_59
 19155  004BA8  6F9D               	movwf	(_printErrors$1494+1)& (0+255),b
 19156  004BAA  0E57               	movlw	low STR_59
 19157  004BAC                     L22:
 19158  004BAC  6F9C               	movwf	_printErrors$1494& (0+255),b
 19159                           
 19160                           ; BSR set to: 0
 19161  004BAE  0E01               	movlw	high _wrkbuf
 19162  004BB0  0100               	movlb	0	; () banked
 19163  004BB2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19164  004BB4  0E77               	movlw	low _wrkbuf
 19165  004BB6  6F76               	movwf	?_sprintf& (0+255),b
 19166  004BB8  C09C  F078         	movff	_printErrors$1494,?_sprintf+2
 19167  004BBC  C09D  F079         	movff	_printErrors$1494+1,?_sprintf+3
 19168  004BC0  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 19169  004BC4  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19170  004BC6  EC3D  F028         	call	_sprintf	;wreg free
 19171                           
 19172                           ; BSR set to: 0
 19173                           ;main.c: 2564: putsUSART(wrkbuf);
 19174  004BCA  0E01               	movlw	high _wrkbuf
 19175  004BCC  0100               	movlb	0	; () banked
 19176  004BCE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19177  004BD0  0E77               	movlw	low _wrkbuf
 19178  004BD2  6F61               	movwf	?_putsUSART& (0+255),b
 19179  004BD4  ECA8  F00D         	call	_putsUSART	;wreg free
 19180                           
 19181                           ;main.c: 2565: putsUSART((char *) "\r\n");
 19182  004BD8  0E71               	movlw	high (STR_205+50)
 19183  004BDA  0100               	movlb	0	; () banked
 19184  004BDC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19185  004BDE  0EA8               	movlw	low (STR_205+50)
 19186  004BE0  6F61               	movwf	?_putsUSART& (0+255),b
 19187  004BE2  ECA8  F00D         	call	_putsUSART	;wreg free
 19188                           
 19189                           ;main.c: 2567: if (COMSTATbits.TXWARN) {
 19190  004BE6  A474               	btfss	3956,2,c	;volatile
 19191  004BE8  D007               	goto	l15156
 19192                           
 19193                           ;main.c: 2568: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19194  004BEA  0E6F               	movlw	high STR_204
 19195  004BEC  0100               	movlb	0	; () banked
 19196  004BEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19197  004BF0  0E80               	movlw	low STR_204
 19198  004BF2  6F61               	movwf	?_putsUSART& (0+255),b
 19199  004BF4  ECA8  F00D         	call	_putsUSART	;wreg free
 19200  004BF8                     l15156:
 19201                           
 19202                           ;main.c: 2569: }
 19203                           ;main.c: 2571: if (COMSTATbits.TXBO) {
 19204  004BF8  AA74               	btfss	3956,5,c	;volatile
 19205  004BFA  D007               	goto	l15160
 19206                           
 19207                           ;main.c: 2572: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19208  004BFC  0E71               	movlw	high STR_205
 19209  004BFE  0100               	movlb	0	; () banked
 19210  004C00  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19211  004C02  0E76               	movlw	low STR_205
 19212  004C04  6F61               	movwf	?_putsUSART& (0+255),b
 19213  004C06  ECA8  F00D         	call	_putsUSART	;wreg free
 19214  004C0A                     l15160:
 19215                           
 19216                           ;main.c: 2573: }
 19217                           ;main.c: 2575: if (COMSTATbits.TXBP) {
 19218  004C0A  A874               	btfss	3956,4,c	;volatile
 19219  004C0C  D007               	goto	l1189
 19220                           
 19221                           ;main.c: 2576: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19222  004C0E  0E6F               	movlw	high STR_206
 19223  004C10  0100               	movlb	0	; () banked
 19224  004C12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19225  004C14  0EF4               	movlw	low STR_206
 19226  004C16  6F61               	movwf	?_putsUSART& (0+255),b
 19227  004C18  ECA8  F00D         	call	_putsUSART	;wreg free
 19228  004C1C                     l1189:
 19229                           
 19230                           ;main.c: 2577: }
 19231                           ;main.c: 2580: putsUSART((char *) "Receive Error Counter: ");
 19232  004C1C  0E79               	movlw	high STR_207
 19233  004C1E  0100               	movlb	0	; () banked
 19234  004C20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19235  004C22  0E58               	movlw	low STR_207
 19236  004C24  6F61               	movwf	?_putsUSART& (0+255),b
 19237  004C26  ECA8  F00D         	call	_putsUSART	;wreg free
 19238                           
 19239                           ;main.c: 2581: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19240  004C2A  0100               	movlb	0	; () banked
 19241  004C2C  67E5               	tstfsz	_bHex& (0+255),b
 19242  004C2E  D004               	goto	l15168
 19243                           
 19244                           ; BSR set to: 0
 19245  004C30  0E7C               	movlw	high STR_60
 19246  004C32  6F9F               	movwf	(_printErrors$1503+1)& (0+255),b
 19247  004C34  0EED               	movlw	low STR_60
 19248  004C36  D003               	goto	L23
 19249  004C38                     l15168:
 19250                           
 19251                           ; BSR set to: 0
 19252  004C38  0E7C               	movlw	high STR_59
 19253  004C3A  6F9F               	movwf	(_printErrors$1503+1)& (0+255),b
 19254  004C3C  0E57               	movlw	low STR_59
 19255  004C3E                     L23:
 19256  004C3E  6F9E               	movwf	_printErrors$1503& (0+255),b
 19257                           
 19258                           ; BSR set to: 0
 19259  004C40  0E01               	movlw	high _wrkbuf
 19260  004C42  0100               	movlb	0	; () banked
 19261  004C44  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19262  004C46  0E77               	movlw	low _wrkbuf
 19263  004C48  6F76               	movwf	?_sprintf& (0+255),b
 19264  004C4A  C09E  F078         	movff	_printErrors$1503,?_sprintf+2
 19265  004C4E  C09F  F079         	movff	_printErrors$1503+1,?_sprintf+3
 19266  004C52  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19267  004C56  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19268  004C58  EC3D  F028         	call	_sprintf	;wreg free
 19269                           
 19270                           ; BSR set to: 0
 19271                           ;main.c: 2582: putsUSART(wrkbuf);
 19272  004C5C  0E01               	movlw	high _wrkbuf
 19273  004C5E  0100               	movlb	0	; () banked
 19274  004C60  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19275  004C62  0E77               	movlw	low _wrkbuf
 19276  004C64  6F61               	movwf	?_putsUSART& (0+255),b
 19277  004C66  ECA8  F00D         	call	_putsUSART	;wreg free
 19278                           
 19279                           ;main.c: 2583: putsUSART((char *) "\r\n");
 19280  004C6A  0E71               	movlw	high (STR_205+50)
 19281  004C6C  0100               	movlb	0	; () banked
 19282  004C6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19283  004C70  0EA8               	movlw	low (STR_205+50)
 19284  004C72  6F61               	movwf	?_putsUSART& (0+255),b
 19285  004C74  ECA8  F00D         	call	_putsUSART	;wreg free
 19286                           
 19287                           ;main.c: 2585: if (COMSTATbits.RXWARN) {
 19288  004C78  A274               	btfss	3956,1,c	;volatile
 19289  004C7A  D007               	goto	l15180
 19290                           
 19291                           ;main.c: 2586: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19292  004C7C  0E70               	movlw	high STR_211
 19293  004C7E  0100               	movlb	0	; () banked
 19294  004C80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19295  004C82  0E65               	movlw	low STR_211
 19296  004C84  6F61               	movwf	?_putsUSART& (0+255),b
 19297  004C86  ECA8  F00D         	call	_putsUSART	;wreg free
 19298  004C8A                     l15180:
 19299                           
 19300                           ;main.c: 2587: }
 19301                           ;main.c: 2589: if (COMSTATbits.RXBP) {
 19302  004C8A  A674               	btfss	3956,3,c	;volatile
 19303  004C8C  D007               	goto	l15184
 19304                           
 19305                           ;main.c: 2590: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19306  004C8E  0E71               	movlw	high STR_212
 19307  004C90  0100               	movlb	0	; () banked
 19308  004C92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19309  004C94  0E0A               	movlw	low STR_212
 19310  004C96  6F61               	movwf	?_putsUSART& (0+255),b
 19311  004C98  ECA8  F00D         	call	_putsUSART	;wreg free
 19312  004C9C                     l15184:
 19313                           
 19314                           ;main.c: 2591: }
 19315                           ;main.c: 2593: if (COMSTATbits.EWARN) {
 19316  004C9C  A074               	btfss	3956,0,c	;volatile
 19317  004C9E  D007               	goto	l1197
 19318                           
 19319                           ;main.c: 2594: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19320  004CA0  0E71               	movlw	high STR_213
 19321  004CA2  0100               	movlb	0	; () banked
 19322  004CA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19323  004CA6  0EAB               	movlw	low STR_213
 19324  004CA8  6F61               	movwf	?_putsUSART& (0+255),b
 19325  004CAA  ECA8  F00D         	call	_putsUSART	;wreg free
 19326  004CAE                     l1197:
 19327  004CAE  0012               	return	
 19328  004CB0                     __end_of_printErrors:
 19329                           	opt stack 0
 19330                           tblptru	equ	0xFF8
 19331                           tblptrh	equ	0xFF7
 19332                           tblptrl	equ	0xFF6
 19333                           tablat	equ	0xFF5
 19334                           prodh	equ	0xFF4
 19335                           prodl	equ	0xFF3
 19336                           intcon	equ	0xFF2
 19337                           indf0	equ	0xFEF
 19338                           postinc0	equ	0xFEE
 19339                           fsr0h	equ	0xFEA
 19340                           fsr0l	equ	0xFE9
 19341                           wreg	equ	0xFE8
 19342                           indf1	equ	0xFE7
 19343                           postinc1	equ	0xFE6
 19344                           postdec1	equ	0xFE5
 19345                           fsr1h	equ	0xFE2
 19346                           fsr1l	equ	0xFE1
 19347                           indf2	equ	0xFDF
 19348                           postinc2	equ	0xFDE
 19349                           postdec2	equ	0xFDD
 19350                           plusw2	equ	0xFDB
 19351                           fsr2h	equ	0xFDA
 19352                           fsr2l	equ	0xFD9
 19353                           status	equ	0xFD8
 19354                           
 19355 ;; *************** function _printStatistics *****************
 19356 ;; Defined at:
 19357 ;;		line 2514 in file "main.c"
 19358 ;; Parameters:    Size  Location     Type
 19359 ;;		None
 19360 ;; Auto vars:     Size  Location     Type
 19361 ;;		None
 19362 ;; Return value:  Size  Location     Type
 19363 ;;		None               void
 19364 ;; Registers used:
 19365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19366 ;; Tracked objects:
 19367 ;;		On entry : F/0
 19368 ;;		On exit  : 0/0
 19369 ;;		Unchanged: 0/0
 19370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19371 ;;      Params:         0       0       0       0       0       0       0
 19372 ;;      Locals:         0       8       0       0       0       0       0
 19373 ;;      Temps:          0       0       0       0       0       0       0
 19374 ;;      Totals:         0       8       0       0       0       0       0
 19375 ;;Total ram usage:        8 bytes
 19376 ;; Hardware stack levels used:    1
 19377 ;; Hardware stack levels required when called:    5
 19378 ;; This function calls:
 19379 ;;		_putsUSART
 19380 ;;		_sprintf
 19381 ;; This function is called by:
 19382 ;;		_doModeVerbose
 19383 ;; This function uses a non-reentrant model
 19384 ;;
 19385                           
 19386                           	psect	text41
 19387  003E66                     __ptext41:
 19388                           	opt stack 0
 19389  003E66                     _printStatistics:
 19390                           	opt stack 23
 19391                           
 19392                           ; BSR set to: 0
 19393                           ;main.c: 2515: putsUSART((char *) "Sent CAN frames: ");
 19394                           
 19395                           ;incstack = 0
 19396                           ;incstack = 0
 19397  003E66  0E7A               	movlw	high STR_168
 19398  003E68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19399  003E6A  0EE9               	movlw	low STR_168
 19400  003E6C  6F61               	movwf	?_putsUSART& (0+255),b
 19401  003E6E  ECA8  F00D         	call	_putsUSART	;wreg free
 19402                           
 19403                           ;main.c: 2516: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19404  003E72  0100               	movlb	0	; () banked
 19405  003E74  67E5               	tstfsz	_bHex& (0+255),b
 19406  003E76  D004               	goto	l15032
 19407                           
 19408                           ; BSR set to: 0
 19409  003E78  0E7C               	movlw	high STR_170
 19410  003E7A  6F95               	movwf	(_printStatistics$1445+1)& (0+255),b
 19411  003E7C  0EDD               	movlw	low STR_170
 19412  003E7E  D003               	goto	L24
 19413  003E80                     l15032:
 19414                           
 19415                           ; BSR set to: 0
 19416  003E80  0E7C               	movlw	high STR_169
 19417  003E82  6F95               	movwf	(_printStatistics$1445+1)& (0+255),b
 19418  003E84  0E65               	movlw	low STR_169
 19419  003E86                     L24:
 19420  003E86  6F94               	movwf	_printStatistics$1445& (0+255),b
 19421                           
 19422                           ; BSR set to: 0
 19423  003E88  0E01               	movlw	high _wrkbuf
 19424  003E8A  0100               	movlb	0	; () banked
 19425  003E8C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19426  003E8E  0E77               	movlw	low _wrkbuf
 19427  003E90  6F76               	movwf	?_sprintf& (0+255),b
 19428  003E92  C094  F078         	movff	_printStatistics$1445,?_sprintf+2
 19429  003E96  C095  F079         	movff	_printStatistics$1445+1,?_sprintf+3
 19430  003E9A  C114  F07A         	movff	_cntTxFrames,?_sprintf+4
 19431  003E9E  C115  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19432  003EA2  C116  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19433  003EA6  C117  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19434  003EAA  EC3D  F028         	call	_sprintf	;wreg free
 19435                           
 19436                           ; BSR set to: 0
 19437                           ;main.c: 2517: putsUSART(wrkbuf);
 19438  003EAE  0E01               	movlw	high _wrkbuf
 19439  003EB0  0100               	movlb	0	; () banked
 19440  003EB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19441  003EB4  0E77               	movlw	low _wrkbuf
 19442  003EB6  6F61               	movwf	?_putsUSART& (0+255),b
 19443  003EB8  ECA8  F00D         	call	_putsUSART	;wreg free
 19444                           
 19445                           ;main.c: 2518: putsUSART((char *) "\r\n");
 19446  003EBC  0E71               	movlw	high (STR_205+50)
 19447  003EBE  0100               	movlb	0	; () banked
 19448  003EC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19449  003EC2  0EA8               	movlw	low (STR_205+50)
 19450  003EC4  6F61               	movwf	?_putsUSART& (0+255),b
 19451  003EC6  ECA8  F00D         	call	_putsUSART	;wreg free
 19452                           
 19453                           ;main.c: 2520: putsUSART((char *) "Sent CAN bytes: ");
 19454  003ECA  0E7B               	movlw	high STR_172
 19455  003ECC  0100               	movlb	0	; () banked
 19456  003ECE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19457  003ED0  0E1D               	movlw	low STR_172
 19458  003ED2  6F61               	movwf	?_putsUSART& (0+255),b
 19459  003ED4  ECA8  F00D         	call	_putsUSART	;wreg free
 19460                           
 19461                           ;main.c: 2521: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19462  003ED8  0100               	movlb	0	; () banked
 19463  003EDA  67E5               	tstfsz	_bHex& (0+255),b
 19464  003EDC  D004               	goto	l15046
 19465                           
 19466                           ; BSR set to: 0
 19467  003EDE  0E7C               	movlw	high STR_170
 19468  003EE0  6F97               	movwf	(_printStatistics$1451+1)& (0+255),b
 19469  003EE2  0EDD               	movlw	low STR_170
 19470  003EE4  D003               	goto	L25
 19471  003EE6                     l15046:
 19472                           
 19473                           ; BSR set to: 0
 19474  003EE6  0E7C               	movlw	high STR_169
 19475  003EE8  6F97               	movwf	(_printStatistics$1451+1)& (0+255),b
 19476  003EEA  0E65               	movlw	low STR_169
 19477  003EEC                     L25:
 19478  003EEC  6F96               	movwf	_printStatistics$1451& (0+255),b
 19479                           
 19480                           ; BSR set to: 0
 19481  003EEE  0E01               	movlw	high _wrkbuf
 19482  003EF0  0100               	movlb	0	; () banked
 19483  003EF2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19484  003EF4  0E77               	movlw	low _wrkbuf
 19485  003EF6  6F76               	movwf	?_sprintf& (0+255),b
 19486  003EF8  C096  F078         	movff	_printStatistics$1451,?_sprintf+2
 19487  003EFC  C097  F079         	movff	_printStatistics$1451+1,?_sprintf+3
 19488  003F00  C110  F07A         	movff	_cntTxBytes,?_sprintf+4
 19489  003F04  C111  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19490  003F08  C112  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19491  003F0C  C113  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19492  003F10  EC3D  F028         	call	_sprintf	;wreg free
 19493                           
 19494                           ; BSR set to: 0
 19495                           ;main.c: 2522: putsUSART(wrkbuf);
 19496  003F14  0E01               	movlw	high _wrkbuf
 19497  003F16  0100               	movlb	0	; () banked
 19498  003F18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19499  003F1A  0E77               	movlw	low _wrkbuf
 19500  003F1C  6F61               	movwf	?_putsUSART& (0+255),b
 19501  003F1E  ECA8  F00D         	call	_putsUSART	;wreg free
 19502                           
 19503                           ;main.c: 2523: putsUSART((char *) "\r\n");
 19504  003F22  0E71               	movlw	high (STR_205+50)
 19505  003F24  0100               	movlb	0	; () banked
 19506  003F26  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19507  003F28  0EA8               	movlw	low (STR_205+50)
 19508  003F2A  6F61               	movwf	?_putsUSART& (0+255),b
 19509  003F2C  ECA8  F00D         	call	_putsUSART	;wreg free
 19510                           
 19511                           ;main.c: 2525: putsUSART((char *) "Received CAN frames: ");
 19512  003F30  0E79               	movlw	high STR_176
 19513  003F32  0100               	movlb	0	; () banked
 19514  003F34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19515  003F36  0EFB               	movlw	low STR_176
 19516  003F38  6F61               	movwf	?_putsUSART& (0+255),b
 19517  003F3A  ECA8  F00D         	call	_putsUSART	;wreg free
 19518                           
 19519                           ;main.c: 2526: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19520  003F3E  0100               	movlb	0	; () banked
 19521  003F40  67E5               	tstfsz	_bHex& (0+255),b
 19522  003F42  D004               	goto	l15060
 19523                           
 19524                           ; BSR set to: 0
 19525  003F44  0E7C               	movlw	high STR_170
 19526  003F46  6F99               	movwf	(_printStatistics$1457+1)& (0+255),b
 19527  003F48  0EDD               	movlw	low STR_170
 19528  003F4A  D003               	goto	L26
 19529  003F4C                     l15060:
 19530                           
 19531                           ; BSR set to: 0
 19532  003F4C  0E7C               	movlw	high STR_169
 19533  003F4E  6F99               	movwf	(_printStatistics$1457+1)& (0+255),b
 19534  003F50  0E65               	movlw	low STR_169
 19535  003F52                     L26:
 19536  003F52  6F98               	movwf	_printStatistics$1457& (0+255),b
 19537                           
 19538                           ; BSR set to: 0
 19539  003F54  0E01               	movlw	high _wrkbuf
 19540  003F56  0100               	movlb	0	; () banked
 19541  003F58  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19542  003F5A  0E77               	movlw	low _wrkbuf
 19543  003F5C  6F76               	movwf	?_sprintf& (0+255),b
 19544  003F5E  C098  F078         	movff	_printStatistics$1457,?_sprintf+2
 19545  003F62  C099  F079         	movff	_printStatistics$1457+1,?_sprintf+3
 19546  003F66  C10C  F07A         	movff	_cntRxFrames,?_sprintf+4
 19547  003F6A  C10D  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19548  003F6E  C10E  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19549  003F72  C10F  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19550  003F76  EC3D  F028         	call	_sprintf	;wreg free
 19551                           
 19552                           ; BSR set to: 0
 19553                           ;main.c: 2527: putsUSART(wrkbuf);
 19554  003F7A  0E01               	movlw	high _wrkbuf
 19555  003F7C  0100               	movlb	0	; () banked
 19556  003F7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19557  003F80  0E77               	movlw	low _wrkbuf
 19558  003F82  6F61               	movwf	?_putsUSART& (0+255),b
 19559  003F84  ECA8  F00D         	call	_putsUSART	;wreg free
 19560                           
 19561                           ;main.c: 2528: putsUSART((char *) "\r\n");
 19562  003F88  0E71               	movlw	high (STR_205+50)
 19563  003F8A  0100               	movlb	0	; () banked
 19564  003F8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19565  003F8E  0EA8               	movlw	low (STR_205+50)
 19566  003F90  6F61               	movwf	?_putsUSART& (0+255),b
 19567  003F92  ECA8  F00D         	call	_putsUSART	;wreg free
 19568                           
 19569                           ;main.c: 2530: putsUSART((char *) "Received CAN bytes: ");
 19570  003F96  0E7A               	movlw	high STR_180
 19571  003F98  0100               	movlb	0	; () banked
 19572  003F9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19573  003F9C  0E11               	movlw	low STR_180
 19574  003F9E  6F61               	movwf	?_putsUSART& (0+255),b
 19575  003FA0  ECA8  F00D         	call	_putsUSART	;wreg free
 19576                           
 19577                           ;main.c: 2531: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19578  003FA4  0100               	movlb	0	; () banked
 19579  003FA6  67E5               	tstfsz	_bHex& (0+255),b
 19580  003FA8  D004               	goto	l15074
 19581                           
 19582                           ; BSR set to: 0
 19583  003FAA  0E7C               	movlw	high STR_170
 19584  003FAC  6F9B               	movwf	(_printStatistics$1463+1)& (0+255),b
 19585  003FAE  0EDD               	movlw	low STR_170
 19586  003FB0  D003               	goto	L27
 19587  003FB2                     l15074:
 19588                           
 19589                           ; BSR set to: 0
 19590  003FB2  0E7C               	movlw	high STR_169
 19591  003FB4  6F9B               	movwf	(_printStatistics$1463+1)& (0+255),b
 19592  003FB6  0E65               	movlw	low STR_169
 19593  003FB8                     L27:
 19594  003FB8  6F9A               	movwf	_printStatistics$1463& (0+255),b
 19595                           
 19596                           ; BSR set to: 0
 19597  003FBA  0E01               	movlw	high _wrkbuf
 19598  003FBC  0100               	movlb	0	; () banked
 19599  003FBE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19600  003FC0  0E77               	movlw	low _wrkbuf
 19601  003FC2  6F76               	movwf	?_sprintf& (0+255),b
 19602  003FC4  C09A  F078         	movff	_printStatistics$1463,?_sprintf+2
 19603  003FC8  C09B  F079         	movff	_printStatistics$1463+1,?_sprintf+3
 19604  003FCC  C108  F07A         	movff	_cntRxBytes,?_sprintf+4
 19605  003FD0  C109  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19606  003FD4  C10A  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19607  003FD8  C10B  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19608  003FDC  EC3D  F028         	call	_sprintf	;wreg free
 19609                           
 19610                           ; BSR set to: 0
 19611                           ;main.c: 2532: putsUSART(wrkbuf);
 19612  003FE0  0E01               	movlw	high _wrkbuf
 19613  003FE2  0100               	movlb	0	; () banked
 19614  003FE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19615  003FE6  0E77               	movlw	low _wrkbuf
 19616  003FE8  6F61               	movwf	?_putsUSART& (0+255),b
 19617  003FEA  ECA8  F00D         	call	_putsUSART	;wreg free
 19618                           
 19619                           ;main.c: 2533: putsUSART((char *) "\r\n");
 19620  003FEE  0E71               	movlw	high (STR_205+50)
 19621  003FF0  0100               	movlb	0	; () banked
 19622  003FF2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19623  003FF4  0EA8               	movlw	low (STR_205+50)
 19624  003FF6  6F61               	movwf	?_putsUSART& (0+255),b
 19625  003FF8  EFA8  F00D         	goto	_putsUSART	;wreg free
 19626  003FFC                     __end_of_printStatistics:
 19627                           	opt stack 0
 19628                           tblptru	equ	0xFF8
 19629                           tblptrh	equ	0xFF7
 19630                           tblptrl	equ	0xFF6
 19631                           tablat	equ	0xFF5
 19632                           prodh	equ	0xFF4
 19633                           prodl	equ	0xFF3
 19634                           intcon	equ	0xFF2
 19635                           indf0	equ	0xFEF
 19636                           postinc0	equ	0xFEE
 19637                           fsr0h	equ	0xFEA
 19638                           fsr0l	equ	0xFE9
 19639                           wreg	equ	0xFE8
 19640                           indf1	equ	0xFE7
 19641                           postinc1	equ	0xFE6
 19642                           postdec1	equ	0xFE5
 19643                           fsr1h	equ	0xFE2
 19644                           fsr1l	equ	0xFE1
 19645                           indf2	equ	0xFDF
 19646                           postinc2	equ	0xFDE
 19647                           postdec2	equ	0xFDD
 19648                           plusw2	equ	0xFDB
 19649                           fsr2h	equ	0xFDA
 19650                           fsr2l	equ	0xFD9
 19651                           status	equ	0xFD8
 19652                           
 19653 ;; *************** function _atoi *****************
 19654 ;; Defined at:
 19655 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19656 ;; Parameters:    Size  Location     Type
 19657 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19658 ;;		 -> STR_118(2), STR_116(2), STR_114(2), STR_112(2), 
 19659 ;;		 -> STR_109(2), STR_105(2), STR_103(2), STR_101(2), 
 19660 ;;		 -> STR_99(2), STR_96(2), STR_85(2), STR_83(2), 
 19661 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 19662 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19663 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19664 ;; Auto vars:     Size  Location     Type
 19665 ;;  a               2   11[BANK0 ] int 
 19666 ;;  sign            1   10[BANK0 ] unsigned char 
 19667 ;; Return value:  Size  Location     Type
 19668 ;;                  2    6[BANK0 ] int 
 19669 ;; Registers used:
 19670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19671 ;; Tracked objects:
 19672 ;;		On entry : C/2
 19673 ;;		On exit  : F/0
 19674 ;;		Unchanged: 0/0
 19675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19676 ;;      Params:         0       2       0       0       0       0       0
 19677 ;;      Locals:         0       3       0       0       0       0       0
 19678 ;;      Temps:          0       2       0       0       0       0       0
 19679 ;;      Totals:         0       7       0       0       0       0       0
 19680 ;;Total ram usage:        7 bytes
 19681 ;; Hardware stack levels used:    1
 19682 ;; Hardware stack levels required when called:    4
 19683 ;; This function calls:
 19684 ;;		_isdigit
 19685 ;;		___wmul
 19686 ;; This function is called by:
 19687 ;;		_doModeVerbose
 19688 ;; This function uses a non-reentrant model
 19689 ;;
 19690                           
 19691                           	psect	text42
 19692  00329E                     __ptext42:
 19693                           	opt stack 0
 19694  00329E                     _atoi:
 19695                           	opt stack 24
 19696                           
 19697                           ;incstack = 0
 19698                           ;incstack = 0
 19699  00329E  D003               	goto	l14984
 19700  0032A0                     l14982:
 19701  0032A0  0100               	movlb	0	; () banked
 19702  0032A2  4B66               	infsnz	atoi@s& (0+255),f,b
 19703  0032A4  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19704  0032A6                     l14984:
 19705  0032A6  0100               	movlb	0	; () banked
 19706  0032A8  D876               	call	PL16	;call to abstracted procedure
 19707  0032AA  64EA               	cpfsgt	fsr0h,c
 19708  0032AC  D003               	bra	u20057
 19709  0032AE  6EEA               	movwf	fsr0h,c
 19710  0032B0  50EF               	movf	indf0,w,c
 19711  0032B2  D003               	bra	u20050
 19712  0032B4                     u20057:
 19713  0032B4  6EF7               	movwf	tblptrh,c
 19714  0032B6  0008               	tblrd		*
 19715  0032B8  50F5               	movf	tablat,w,c
 19716  0032BA                     u20050:
 19717  0032BA  0A20               	xorlw	32
 19718  0032BC  E0F1               	bz	l14982
 19719  0032BE  0100               	movlb	0	; () banked
 19720  0032C0  D86A               	call	PL16	;call to abstracted procedure
 19721  0032C2  64EA               	cpfsgt	fsr0h,c
 19722  0032C4  D003               	bra	u20077
 19723  0032C6  6EEA               	movwf	fsr0h,c
 19724  0032C8  50EF               	movf	indf0,w,c
 19725  0032CA  D003               	bra	u20070
 19726  0032CC                     u20077:
 19727  0032CC  6EF7               	movwf	tblptrh,c
 19728  0032CE  0008               	tblrd		*
 19729  0032D0  50F5               	movf	tablat,w,c
 19730  0032D2                     u20070:
 19731  0032D2  0A09               	xorlw	9
 19732  0032D4  E0E5               	bz	l14982
 19733  0032D6  0100               	movlb	0	; () banked
 19734  0032D8  6B6B               	clrf	atoi@a& (0+255),b
 19735  0032DA  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19736  0032DC  6B6A               	clrf	atoi@sign& (0+255),b
 19737                           
 19738                           ; BSR set to: 0
 19739  0032DE  D85B               	call	PL16	;call to abstracted procedure
 19740  0032E0  64EA               	cpfsgt	fsr0h,c
 19741  0032E2  D003               	bra	u20097
 19742  0032E4  6EEA               	movwf	fsr0h,c
 19743  0032E6  50EF               	movf	indf0,w,c
 19744  0032E8  D003               	bra	u20090
 19745  0032EA                     u20097:
 19746  0032EA  6EF7               	movwf	tblptrh,c
 19747  0032EC  0008               	tblrd		*
 19748  0032EE  50F5               	movf	tablat,w,c
 19749  0032F0                     u20090:
 19750  0032F0  0A2D               	xorlw	45
 19751  0032F2  E103               	bnz	l14992
 19752  0032F4  0100               	movlb	0	; () banked
 19753  0032F6  2B6A               	incf	atoi@sign& (0+255),f,b
 19754  0032F8  D00D               	goto	L28
 19755  0032FA                     l14992:
 19756  0032FA  0100               	movlb	0	; () banked
 19757  0032FC  D84C               	call	PL16	;call to abstracted procedure
 19758  0032FE  64EA               	cpfsgt	fsr0h,c
 19759  003300  D003               	bra	u20117
 19760  003302  6EEA               	movwf	fsr0h,c
 19761  003304  50EF               	movf	indf0,w,c
 19762  003306  D003               	bra	u20110
 19763  003308                     u20117:
 19764  003308  6EF7               	movwf	tblptrh,c
 19765  00330A  0008               	tblrd		*
 19766  00330C  50F5               	movf	tablat,w,c
 19767  00330E                     u20110:
 19768  00330E  0A2B               	xorlw	43
 19769  003310  E121               	bnz	l15000
 19770  003312                     l14994:
 19771  003312  0100               	movlb	0	; () banked
 19772  003314                     L28:
 19773  003314  4B66               	infsnz	atoi@s& (0+255),f,b
 19774  003316  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19775  003318  D01D               	goto	l15000
 19776  00331A                     l14996:
 19777                           
 19778                           ; BSR set to: 0
 19779  00331A  C06B  F060         	movff	atoi@a,?___wmul
 19780  00331E  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19781  003322  6B63               	clrf	(?___wmul+3)& (0+255),b
 19782  003324  0E0A               	movlw	10
 19783  003326  6F62               	movwf	(?___wmul+2)& (0+255),b
 19784  003328  EC88  F00B         	call	___wmul	;wreg free
 19785  00332C  D834               	call	PL16	;call to abstracted procedure
 19786  00332E  64EA               	cpfsgt	fsr0h,c
 19787  003330  D003               	bra	u20137
 19788  003332  6EEA               	movwf	fsr0h,c
 19789  003334  50EF               	movf	indf0,w,c
 19790  003336  D003               	bra	u20130
 19791  003338                     u20137:
 19792  003338  6EF7               	movwf	tblptrh,c
 19793  00333A  0008               	tblrd		*
 19794  00333C  50F5               	movf	tablat,w,c
 19795  00333E                     u20130:
 19796  00333E  0100               	movlb	0	; () banked
 19797  003340  2760               	addwf	?___wmul& (0+255),f,b
 19798  003342  0E00               	movlw	0
 19799  003344  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19800  003346  0ED0               	movlw	208
 19801  003348  2560               	addwf	?___wmul& (0+255),w,b
 19802  00334A  6F6B               	movwf	atoi@a& (0+255),b
 19803  00334C  0EFF               	movlw	255
 19804  00334E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19805  003350  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19806  003352  D7DF               	goto	l14994
 19807  003354                     l15000:
 19808  003354  0100               	movlb	0	; () banked
 19809  003356  D81F               	call	PL16	;call to abstracted procedure
 19810  003358  64EA               	cpfsgt	fsr0h,c
 19811  00335A  D003               	bra	u20147
 19812  00335C  6EEA               	movwf	fsr0h,c
 19813  00335E  50EF               	movf	indf0,w,c
 19814  003360  D003               	bra	u20140
 19815  003362                     u20147:
 19816  003362  6EF7               	movwf	tblptrh,c
 19817  003364  0008               	tblrd		*
 19818  003366  50F5               	movf	tablat,w,c
 19819  003368                     u20140:
 19820  003368  EC33  F00B         	call	_isdigit
 19821  00336C  E2D6               	bc	l14996
 19822                           
 19823                           ; BSR set to: 0
 19824  00336E  516A               	movf	atoi@sign& (0+255),w,b
 19825  003370  E00D               	bz	l2072
 19826                           
 19827                           ; BSR set to: 0
 19828  003372  C06B  F068         	movff	atoi@a,??_atoi
 19829  003376  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19830  00337A  1F68               	comf	??_atoi& (0+255),f,b
 19831  00337C  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19832  00337E  4B68               	infsnz	??_atoi& (0+255),f,b
 19833  003380  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19834  003382  C068  F066         	movff	??_atoi,?_atoi
 19835  003386  C069  F067         	movff	??_atoi+1,?_atoi+1
 19836  00338A  D004               	goto	l2073
 19837  00338C                     l2072:
 19838                           
 19839                           ; BSR set to: 0
 19840  00338C  C06B  F066         	movff	atoi@a,?_atoi
 19841  003390  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19842  003394                     l2073:
 19843                           
 19844                           ; BSR set to: 0
 19845  003394  0012               	return	
 19846  003396                     __end_of_atoi:
 19847                           	opt stack 0
 19848  003396                     PL16:
 19849                           	opt stack 24
 19850  003396  5166               	movf	atoi@s& (0+255),w,b
 19851  003398  6EF6               	movwf	tblptrl,c
 19852  00339A  6EE9               	movwf	fsr0l,c
 19853  00339C  0E05               	movlw	(high __ramtop+-1)
 19854  00339E  6EEA               	movwf	fsr0h,c
 19855  0033A0  5167               	movf	(atoi@s+1)& (0+255),w,b
 19856  0033A2  0012               	return	
 19857  0033A4                     __end_ofPL16:
 19858                           	opt stack 0
 19859                           tblptru	equ	0xFF8
 19860                           tblptrh	equ	0xFF7
 19861                           tblptrl	equ	0xFF6
 19862                           tablat	equ	0xFF5
 19863                           prodh	equ	0xFF4
 19864                           prodl	equ	0xFF3
 19865                           intcon	equ	0xFF2
 19866                           indf0	equ	0xFEF
 19867                           postinc0	equ	0xFEE
 19868                           fsr0h	equ	0xFEA
 19869                           fsr0l	equ	0xFE9
 19870                           wreg	equ	0xFE8
 19871                           indf1	equ	0xFE7
 19872                           postinc1	equ	0xFE6
 19873                           postdec1	equ	0xFE5
 19874                           fsr1h	equ	0xFE2
 19875                           fsr1l	equ	0xFE1
 19876                           indf2	equ	0xFDF
 19877                           postinc2	equ	0xFDE
 19878                           postdec2	equ	0xFDD
 19879                           plusw2	equ	0xFDB
 19880                           fsr2h	equ	0xFDA
 19881                           fsr2l	equ	0xFD9
 19882                           status	equ	0xFD8
 19883                           
 19884 ;; *************** function _strtok *****************
 19885 ;; Defined at:
 19886 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19887 ;; Parameters:    Size  Location     Type
 19888 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19889 ;;		 -> NULL(0), cmdbuf(80), 
 19890 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19891 ;;		 -> STR_118(2), STR_116(2), STR_114(2), STR_112(2), 
 19892 ;;		 -> STR_109(2), STR_105(2), STR_103(2), STR_101(2), 
 19893 ;;		 -> STR_99(2), STR_96(2), STR_85(2), STR_83(2), 
 19894 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 19895 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19896 ;;		 -> STR_31(2), STR_30(2), 
 19897 ;; Auto vars:     Size  Location     Type
 19898 ;;		None
 19899 ;; Return value:  Size  Location     Type
 19900 ;;                  2   12[BANK0 ] PTR unsigned char 
 19901 ;; Registers used:
 19902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19903 ;; Tracked objects:
 19904 ;;		On entry : F/0
 19905 ;;		On exit  : F/0
 19906 ;;		Unchanged: 0/0
 19907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19908 ;;      Params:         0       4       0       0       0       0       0
 19909 ;;      Locals:         0       0       0       0       0       0       0
 19910 ;;      Temps:          0       0       0       0       0       0       0
 19911 ;;      Totals:         0       4       0       0       0       0       0
 19912 ;;Total ram usage:        4 bytes
 19913 ;; Hardware stack levels used:    1
 19914 ;; Hardware stack levels required when called:    5
 19915 ;; This function calls:
 19916 ;;		_strspn
 19917 ;;		_strcspn
 19918 ;; This function is called by:
 19919 ;;		_doModeVerbose
 19920 ;; This function uses a non-reentrant model
 19921 ;;
 19922                           
 19923                           	psect	text43
 19924  002222                     __ptext43:
 19925                           	opt stack 0
 19926  002222                     _strtok:
 19927                           	opt stack 23
 19928                           
 19929                           ; BSR set to: 0
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;incstack = 0
 19933                           ;incstack = 0
 19934  002222  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19935  002224  116C               	iorwf	strtok@s1& (0+255),w,b
 19936  002226  E104               	bnz	l14962
 19937                           
 19938                           ; BSR set to: 0
 19939  002228  C028  F06C         	movff	strtok@sp,strtok@s1
 19940  00222C  C029  F06D         	movff	strtok@sp+1,strtok@s1+1
 19941  002230                     l14962:
 19942                           
 19943                           ; BSR set to: 0
 19944  002230  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19945  002232  116C               	iorwf	strtok@s1& (0+255),w,b
 19946  002234  E016               	bz	L29
 19947                           
 19948                           ; BSR set to: 0
 19949                           
 19950                           ; BSR set to: 0
 19951  002236  C06C  F066         	movff	strtok@s1,?_strspn
 19952  00223A  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19953  00223E  C06E  F068         	movff	strtok@s2,?_strspn+2
 19954  002242  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19955  002246  ECCE  F00C         	call	_strspn	;wreg free
 19956  00224A  5166               	movf	?_strspn& (0+255),w,b
 19957  00224C  276C               	addwf	strtok@s1& (0+255),f,b
 19958  00224E  5167               	movf	(?_strspn+1)& (0+255),w,b
 19959  002250  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19960                           
 19961                           ; BSR set to: 0
 19962  002252  C06C  FFD9         	movff	strtok@s1,fsr2l
 19963  002256  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19964  00225A  50DF               	movf	indf2,w,c
 19965  00225C  E105               	bnz	l14972
 19966                           
 19967                           ; BSR set to: 0
 19968  00225E  6A28               	clrf	strtok@sp,c
 19969  002260  6A29               	clrf	strtok@sp+1,c
 19970  002262                     L29:
 19971  002262  6B6C               	clrf	?_strtok& (0+255),b
 19972  002264  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19973  002266  D025               	goto	l2565
 19974  002268                     l14972:
 19975                           
 19976                           ; BSR set to: 0
 19977  002268  C06C  F066         	movff	strtok@s1,?_strcspn
 19978  00226C  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19979  002270  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19980  002274  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19981  002278  ECF0  F00C         	call	_strcspn	;wreg free
 19982  00227C  5166               	movf	?_strcspn& (0+255),w,b
 19983  00227E  256C               	addwf	strtok@s1& (0+255),w,b
 19984  002280  6E28               	movwf	strtok@sp,c
 19985  002282  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19986  002284  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19987  002286  6E29               	movwf	strtok@sp+1,c
 19988                           
 19989                           ; BSR set to: 0
 19990  002288  C028  FFD9         	movff	strtok@sp,fsr2l
 19991  00228C  C029  FFDA         	movff	strtok@sp+1,fsr2h
 19992  002290  50DF               	movf	indf2,w,c
 19993  002292  E009               	bz	l2567
 19994                           
 19995                           ; BSR set to: 0
 19996  002294  C028  FFD9         	movff	strtok@sp,fsr2l
 19997  002298  C029  FFDA         	movff	strtok@sp+1,fsr2h
 19998  00229C  0E00               	movlw	0
 19999  00229E  6EDF               	movwf	indf2,c
 20000                           
 20001                           ; BSR set to: 0
 20002  0022A0  4A28               	infsnz	strtok@sp,f,c
 20003  0022A2  2A29               	incf	strtok@sp+1,f,c
 20004  0022A4  D002               	goto	l2568
 20005  0022A6                     l2567:
 20006                           
 20007                           ; BSR set to: 0
 20008  0022A6  6A28               	clrf	strtok@sp,c
 20009  0022A8  6A29               	clrf	strtok@sp+1,c
 20010  0022AA                     l2568:
 20011                           
 20012                           ; BSR set to: 0
 20013  0022AA  C06C  F06C         	movff	strtok@s1,?_strtok
 20014  0022AE  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 20015  0022B2                     l2565:
 20016                           
 20017                           ; BSR set to: 0
 20018  0022B2  0012               	return	
 20019  0022B4                     __end_of_strtok:
 20020                           	opt stack 0
 20021                           tblptru	equ	0xFF8
 20022                           tblptrh	equ	0xFF7
 20023                           tblptrl	equ	0xFF6
 20024                           tablat	equ	0xFF5
 20025                           prodh	equ	0xFF4
 20026                           prodl	equ	0xFF3
 20027                           intcon	equ	0xFF2
 20028                           indf0	equ	0xFEF
 20029                           postinc0	equ	0xFEE
 20030                           fsr0h	equ	0xFEA
 20031                           fsr0l	equ	0xFE9
 20032                           wreg	equ	0xFE8
 20033                           indf1	equ	0xFE7
 20034                           postinc1	equ	0xFE6
 20035                           postdec1	equ	0xFE5
 20036                           fsr1h	equ	0xFE2
 20037                           fsr1l	equ	0xFE1
 20038                           indf2	equ	0xFDF
 20039                           postinc2	equ	0xFDE
 20040                           postdec2	equ	0xFDD
 20041                           plusw2	equ	0xFDB
 20042                           fsr2h	equ	0xFDA
 20043                           fsr2l	equ	0xFD9
 20044                           status	equ	0xFD8
 20045                           
 20046 ;; *************** function _strcspn *****************
 20047 ;; Defined at:
 20048 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 20049 ;; Parameters:    Size  Location     Type
 20050 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20051 ;;		 -> NULL(0), cmdbuf(80), 
 20052 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20053 ;;		 -> STR_118(2), STR_116(2), STR_114(2), STR_112(2), 
 20054 ;;		 -> STR_109(2), STR_105(2), STR_103(2), STR_101(2), 
 20055 ;;		 -> STR_99(2), STR_96(2), STR_85(2), STR_83(2), 
 20056 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 20057 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20058 ;;		 -> STR_31(2), STR_30(2), 
 20059 ;; Auto vars:     Size  Location     Type
 20060 ;;  i               2   10[BANK0 ] unsigned int 
 20061 ;; Return value:  Size  Location     Type
 20062 ;;                  2    6[BANK0 ] unsigned int 
 20063 ;; Registers used:
 20064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20065 ;; Tracked objects:
 20066 ;;		On entry : F/0
 20067 ;;		On exit  : F/0
 20068 ;;		Unchanged: 0/0
 20069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20070 ;;      Params:         0       4       0       0       0       0       0
 20071 ;;      Locals:         0       2       0       0       0       0       0
 20072 ;;      Temps:          0       0       0       0       0       0       0
 20073 ;;      Totals:         0       6       0       0       0       0       0
 20074 ;;Total ram usage:        6 bytes
 20075 ;; Hardware stack levels used:    1
 20076 ;; Hardware stack levels required when called:    4
 20077 ;; This function calls:
 20078 ;;		_strchr
 20079 ;; This function is called by:
 20080 ;;		_strtok
 20081 ;; This function uses a non-reentrant model
 20082 ;;
 20083                           
 20084                           	psect	text44
 20085  0019E0                     __ptext44:
 20086                           	opt stack 0
 20087  0019E0                     _strcspn:
 20088                           	opt stack 23
 20089                           
 20090                           ; BSR set to: 0
 20091                           
 20092                           ; BSR set to: 0
 20093                           ;incstack = 0
 20094                           ;incstack = 0
 20095  0019E0  6B6A               	clrf	strcspn@i& (0+255),b
 20096  0019E2  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 20097  0019E4  D004               	goto	l16564
 20098  0019E6                     l16562:
 20099                           
 20100                           ; BSR set to: 0
 20101  0019E6  4B66               	infsnz	strcspn@s1& (0+255),f,b
 20102  0019E8  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 20103  0019EA  4B6A               	infsnz	strcspn@i& (0+255),f,b
 20104  0019EC  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 20105  0019EE                     l16564:
 20106                           
 20107                           ; BSR set to: 0
 20108  0019EE  C066  FFD9         	movff	strcspn@s1,fsr2l
 20109  0019F2  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20110  0019F6  50DF               	movf	indf2,w,c
 20111  0019F8  E010               	bz	l2592
 20112                           
 20113                           ; BSR set to: 0
 20114  0019FA  C068  F060         	movff	strcspn@s2,?_strchr
 20115  0019FE  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 20116  001A02  C066  FFD9         	movff	strcspn@s1,fsr2l
 20117  001A06  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 20118  001A0A  50DF               	movf	indf2,w,c
 20119  001A0C  6F62               	movwf	(?_strchr+2)& (0+255),b
 20120  001A0E  6B63               	clrf	(?_strchr+3)& (0+255),b
 20121  001A10  EC8F  F00E         	call	_strchr	;wreg free
 20122  001A14  5161               	movf	(?_strchr+1)& (0+255),w,b
 20123  001A16  1160               	iorwf	?_strchr& (0+255),w,b
 20124  001A18  E0E6               	bz	l16562
 20125  001A1A                     l2592:
 20126                           
 20127                           ; BSR set to: 0
 20128  001A1A  C06A  F066         	movff	strcspn@i,?_strcspn
 20129  001A1E  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 20130                           
 20131                           ; BSR set to: 0
 20132  001A22  0012               	return	
 20133  001A24                     __end_of_strcspn:
 20134                           	opt stack 0
 20135                           tblptru	equ	0xFF8
 20136                           tblptrh	equ	0xFF7
 20137                           tblptrl	equ	0xFF6
 20138                           tablat	equ	0xFF5
 20139                           prodh	equ	0xFF4
 20140                           prodl	equ	0xFF3
 20141                           intcon	equ	0xFF2
 20142                           indf0	equ	0xFEF
 20143                           postinc0	equ	0xFEE
 20144                           fsr0h	equ	0xFEA
 20145                           fsr0l	equ	0xFE9
 20146                           wreg	equ	0xFE8
 20147                           indf1	equ	0xFE7
 20148                           postinc1	equ	0xFE6
 20149                           postdec1	equ	0xFE5
 20150                           fsr1h	equ	0xFE2
 20151                           fsr1l	equ	0xFE1
 20152                           indf2	equ	0xFDF
 20153                           postinc2	equ	0xFDE
 20154                           postdec2	equ	0xFDD
 20155                           plusw2	equ	0xFDB
 20156                           fsr2h	equ	0xFDA
 20157                           fsr2l	equ	0xFD9
 20158                           status	equ	0xFD8
 20159                           
 20160 ;; *************** function _strspn *****************
 20161 ;; Defined at:
 20162 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 20163 ;; Parameters:    Size  Location     Type
 20164 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20165 ;;		 -> NULL(0), cmdbuf(80), 
 20166 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20167 ;;		 -> STR_118(2), STR_116(2), STR_114(2), STR_112(2), 
 20168 ;;		 -> STR_109(2), STR_105(2), STR_103(2), STR_101(2), 
 20169 ;;		 -> STR_99(2), STR_96(2), STR_85(2), STR_83(2), 
 20170 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 20171 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20172 ;;		 -> STR_31(2), STR_30(2), 
 20173 ;; Auto vars:     Size  Location     Type
 20174 ;;  i               2   10[BANK0 ] unsigned int 
 20175 ;; Return value:  Size  Location     Type
 20176 ;;                  2    6[BANK0 ] unsigned int 
 20177 ;; Registers used:
 20178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20179 ;; Tracked objects:
 20180 ;;		On entry : F/0
 20181 ;;		On exit  : F/0
 20182 ;;		Unchanged: 0/0
 20183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20184 ;;      Params:         0       4       0       0       0       0       0
 20185 ;;      Locals:         0       2       0       0       0       0       0
 20186 ;;      Temps:          0       0       0       0       0       0       0
 20187 ;;      Totals:         0       6       0       0       0       0       0
 20188 ;;Total ram usage:        6 bytes
 20189 ;; Hardware stack levels used:    1
 20190 ;; Hardware stack levels required when called:    4
 20191 ;; This function calls:
 20192 ;;		_strchr
 20193 ;; This function is called by:
 20194 ;;		_strtok
 20195 ;; This function uses a non-reentrant model
 20196 ;;
 20197                           
 20198                           	psect	text45
 20199  00199C                     __ptext45:
 20200                           	opt stack 0
 20201  00199C                     _strspn:
 20202                           	opt stack 23
 20203                           
 20204                           ; BSR set to: 0
 20205                           
 20206                           ; BSR set to: 0
 20207                           ;incstack = 0
 20208                           ;incstack = 0
 20209  00199C  6B6A               	clrf	strspn@i& (0+255),b
 20210  00199E  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20211  0019A0  D004               	goto	l16556
 20212  0019A2                     l16554:
 20213                           
 20214                           ; BSR set to: 0
 20215  0019A2  4B66               	infsnz	strspn@s1& (0+255),f,b
 20216  0019A4  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20217  0019A6  4B6A               	infsnz	strspn@i& (0+255),f,b
 20218  0019A8  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20219  0019AA                     l16556:
 20220                           
 20221                           ; BSR set to: 0
 20222  0019AA  C066  FFD9         	movff	strspn@s1,fsr2l
 20223  0019AE  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20224  0019B2  50DF               	movf	indf2,w,c
 20225  0019B4  E010               	bz	l2611
 20226                           
 20227                           ; BSR set to: 0
 20228  0019B6  C068  F060         	movff	strspn@s2,?_strchr
 20229  0019BA  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20230  0019BE  C066  FFD9         	movff	strspn@s1,fsr2l
 20231  0019C2  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20232  0019C6  50DF               	movf	indf2,w,c
 20233  0019C8  6F62               	movwf	(?_strchr+2)& (0+255),b
 20234  0019CA  6B63               	clrf	(?_strchr+3)& (0+255),b
 20235  0019CC  EC8F  F00E         	call	_strchr	;wreg free
 20236  0019D0  5161               	movf	(?_strchr+1)& (0+255),w,b
 20237  0019D2  1160               	iorwf	?_strchr& (0+255),w,b
 20238  0019D4  E1E6               	bnz	l16554
 20239  0019D6                     l2611:
 20240                           
 20241                           ; BSR set to: 0
 20242  0019D6  C06A  F066         	movff	strspn@i,?_strspn
 20243  0019DA  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20244                           
 20245                           ; BSR set to: 0
 20246  0019DE  0012               	return	
 20247  0019E0                     __end_of_strspn:
 20248                           	opt stack 0
 20249                           tblptru	equ	0xFF8
 20250                           tblptrh	equ	0xFF7
 20251                           tblptrl	equ	0xFF6
 20252                           tablat	equ	0xFF5
 20253                           prodh	equ	0xFF4
 20254                           prodl	equ	0xFF3
 20255                           intcon	equ	0xFF2
 20256                           indf0	equ	0xFEF
 20257                           postinc0	equ	0xFEE
 20258                           fsr0h	equ	0xFEA
 20259                           fsr0l	equ	0xFE9
 20260                           wreg	equ	0xFE8
 20261                           indf1	equ	0xFE7
 20262                           postinc1	equ	0xFE6
 20263                           postdec1	equ	0xFE5
 20264                           fsr1h	equ	0xFE2
 20265                           fsr1l	equ	0xFE1
 20266                           indf2	equ	0xFDF
 20267                           postinc2	equ	0xFDE
 20268                           postdec2	equ	0xFDD
 20269                           plusw2	equ	0xFDB
 20270                           fsr2h	equ	0xFDA
 20271                           fsr2l	equ	0xFD9
 20272                           status	equ	0xFD8
 20273                           
 20274 ;; *************** function _strchr *****************
 20275 ;; Defined at:
 20276 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20277 ;; Parameters:    Size  Location     Type
 20278 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20279 ;;		 -> STR_118(2), STR_116(2), STR_114(2), STR_112(2), 
 20280 ;;		 -> STR_109(2), STR_105(2), STR_103(2), STR_101(2), 
 20281 ;;		 -> STR_99(2), STR_96(2), STR_85(2), STR_83(2), 
 20282 ;;		 -> STR_81(2), STR_54(2), STR_52(2), STR_50(2), 
 20283 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20284 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20285 ;;  chr             2    2[BANK0 ] int 
 20286 ;; Auto vars:     Size  Location     Type
 20287 ;;		None
 20288 ;; Return value:  Size  Location     Type
 20289 ;;                  2    0[BANK0 ] PTR unsigned char 
 20290 ;; Registers used:
 20291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20292 ;; Tracked objects:
 20293 ;;		On entry : F/0
 20294 ;;		On exit  : F/0
 20295 ;;		Unchanged: 0/0
 20296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20297 ;;      Params:         0       4       0       0       0       0       0
 20298 ;;      Locals:         0       0       0       0       0       0       0
 20299 ;;      Temps:          0       2       0       0       0       0       0
 20300 ;;      Totals:         0       6       0       0       0       0       0
 20301 ;;Total ram usage:        6 bytes
 20302 ;; Hardware stack levels used:    1
 20303 ;; Hardware stack levels required when called:    3
 20304 ;; This function calls:
 20305 ;;		Nothing
 20306 ;; This function is called by:
 20307 ;;		_doModeVerbose
 20308 ;;		_strcspn
 20309 ;;		_strspn
 20310 ;; This function uses a non-reentrant model
 20311 ;;
 20312                           
 20313                           	psect	text46
 20314  001D1E                     __ptext46:
 20315                           	opt stack 0
 20316  001D1E                     _strchr:
 20317                           	opt stack 25
 20318  001D1E                     l2513:
 20319                           
 20320                           ; BSR set to: 0
 20321  001D1E  0100               	movlb	0	; () banked
 20322  001D20  5160               	movf	strchr@ptr& (0+255),w,b
 20323  001D22  6EF6               	movwf	tblptrl,c
 20324  001D24  6EE9               	movwf	fsr0l,c
 20325  001D26  0E05               	movlw	(high __ramtop+-1)
 20326  001D28  6EEA               	movwf	fsr0h,c
 20327  001D2A  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20328  001D2C  64EA               	cpfsgt	fsr0h,c
 20329  001D2E  D003               	bra	u14907
 20330  001D30  6EEA               	movwf	fsr0h,c
 20331  001D32  50EF               	movf	indf0,w,c
 20332  001D34  D003               	bra	u14900
 20333  001D36                     u14907:
 20334  001D36  6EF7               	movwf	tblptrh,c
 20335  001D38  0008               	tblrd		*
 20336  001D3A  50F5               	movf	tablat,w,c
 20337  001D3C                     u14900:
 20338  001D3C  0100               	movlb	0	; () banked
 20339  001D3E  1962               	xorwf	strchr@chr& (0+255),w,b
 20340  001D40  E105               	bnz	l11876
 20341                           
 20342                           ; BSR set to: 0
 20343  001D42  C060  F060         	movff	strchr@ptr,?_strchr
 20344  001D46  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20345  001D4A  D019               	goto	l2515
 20346  001D4C                     l11876:
 20347                           
 20348                           ; BSR set to: 0
 20349  001D4C  5160               	movf	strchr@ptr& (0+255),w,b
 20350  001D4E  6F64               	movwf	??_strchr& (0+255),b
 20351  001D50  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20352  001D52  6F65               	movwf	(??_strchr+1)& (0+255),b
 20353  001D54  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20354  001D56  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20355  001D58  5164               	movf	??_strchr& (0+255),w,b
 20356  001D5A  6EF6               	movwf	tblptrl,c
 20357  001D5C  6EE9               	movwf	fsr0l,c
 20358  001D5E  0E05               	movlw	(high __ramtop+-1)
 20359  001D60  6EEA               	movwf	fsr0h,c
 20360  001D62  5165               	movf	(??_strchr+1)& (0+255),w,b
 20361  001D64  64EA               	cpfsgt	fsr0h,c
 20362  001D66  D003               	bra	u14927
 20363  001D68  6EEA               	movwf	fsr0h,c
 20364  001D6A  50EF               	movf	indf0,w,c
 20365  001D6C  D003               	bra	u14920
 20366  001D6E                     u14927:
 20367  001D6E  6EF7               	movwf	tblptrh,c
 20368  001D70  0008               	tblrd		*
 20369  001D72  50F5               	movf	tablat,w,c
 20370  001D74                     u14920:
 20371  001D74  0900               	iorlw	0
 20372  001D76  E1D3               	bnz	l2513
 20373  001D78  0100               	movlb	0	; () banked
 20374  001D7A  6B60               	clrf	?_strchr& (0+255),b
 20375  001D7C  6B61               	clrf	(?_strchr+1)& (0+255),b
 20376  001D7E                     l2515:
 20377                           
 20378                           ; BSR set to: 0
 20379  001D7E  0012               	return	
 20380  001D80                     __end_of_strchr:
 20381                           	opt stack 0
 20382                           tblptru	equ	0xFF8
 20383                           tblptrh	equ	0xFF7
 20384                           tblptrl	equ	0xFF6
 20385                           tablat	equ	0xFF5
 20386                           prodh	equ	0xFF4
 20387                           prodl	equ	0xFF3
 20388                           intcon	equ	0xFF2
 20389                           indf0	equ	0xFEF
 20390                           postinc0	equ	0xFEE
 20391                           fsr0h	equ	0xFEA
 20392                           fsr0l	equ	0xFE9
 20393                           wreg	equ	0xFE8
 20394                           indf1	equ	0xFE7
 20395                           postinc1	equ	0xFE6
 20396                           postdec1	equ	0xFE5
 20397                           fsr1h	equ	0xFE2
 20398                           fsr1l	equ	0xFE1
 20399                           indf2	equ	0xFDF
 20400                           postinc2	equ	0xFDE
 20401                           postdec2	equ	0xFDD
 20402                           plusw2	equ	0xFDB
 20403                           fsr2h	equ	0xFDA
 20404                           fsr2l	equ	0xFD9
 20405                           status	equ	0xFD8
 20406                           
 20407 ;; *************** function _stristr *****************
 20408 ;; Defined at:
 20409 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20410 ;; Parameters:    Size  Location     Type
 20411 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20412 ;;		 -> NULL(0), cmdbuf(80), 
 20413 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20414 ;;		 -> STR_137(6), STR_136(8), STR_134(6), STR_132(5), 
 20415 ;;		 -> STR_130(8), STR_129(6), STR_128(9), STR_126(11), 
 20416 ;;		 -> STR_124(8), STR_122(4), STR_121(5), STR_108(5), 
 20417 ;;		 -> STR_95(7), STR_89(5), STR_80(5), STR_49(5), 
 20418 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20419 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20420 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20421 ;;		 -> STR_8(5), STR_6(5), 
 20422 ;; Auto vars:     Size  Location     Type
 20423 ;;		None
 20424 ;; Return value:  Size  Location     Type
 20425 ;;                  2   13[BANK0 ] PTR unsigned char 
 20426 ;; Registers used:
 20427 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20428 ;; Tracked objects:
 20429 ;;		On entry : F/0
 20430 ;;		On exit  : F/0
 20431 ;;		Unchanged: 0/0
 20432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20433 ;;      Params:         0       4       0       0       0       0       0
 20434 ;;      Locals:         0       0       0       0       0       0       0
 20435 ;;      Temps:          0       0       0       0       0       0       0
 20436 ;;      Totals:         0       4       0       0       0       0       0
 20437 ;;Total ram usage:        4 bytes
 20438 ;; Hardware stack levels used:    1
 20439 ;; Hardware stack levels required when called:    5
 20440 ;; This function calls:
 20441 ;;		_strlen
 20442 ;;		_strnicmp
 20443 ;;		_strichr
 20444 ;; This function is called by:
 20445 ;;		_doModeVerbose
 20446 ;; This function uses a non-reentrant model
 20447 ;;
 20448                           
 20449                           	psect	text47
 20450  00201A                     __ptext47:
 20451                           	opt stack 0
 20452  00201A                     _stristr:
 20453                           	opt stack 23
 20454                           
 20455                           ; BSR set to: 0
 20456                           
 20457                           ; BSR set to: 0
 20458                           ;incstack = 0
 20459                           ;incstack = 0
 20460  00201A  D02F               	goto	l14950
 20461  00201C                     l14944:
 20462                           
 20463                           ; BSR set to: 0
 20464  00201C  C06D  F064         	movff	stristr@s1,?_strnicmp
 20465  002020  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20466  002024  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20467  002028  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20468  00202C  C06F  F060         	movff	stristr@s2,?_strlen
 20469  002030  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20470  002034  EC8D  F00C         	call	_strlen	;wreg free
 20471  002038  C060  F068         	movff	?_strlen,?_strnicmp+4
 20472  00203C  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20473  002040  ECF1  F00E         	call	_strnicmp	;wreg free
 20474  002044  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20475  002046  1164               	iorwf	?_strnicmp& (0+255),w,b
 20476  002048  E105               	bnz	l14948
 20477                           
 20478                           ; BSR set to: 0
 20479  00204A  C06D  F06D         	movff	stristr@s1,?_stristr
 20480  00204E  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20481  002052  D01E               	goto	l2534
 20482  002054                     l14948:
 20483                           
 20484                           ; BSR set to: 0
 20485  002054  296D               	incf	stristr@s1& (0+255),w,b
 20486  002056  6F61               	movwf	?_strichr& (0+255),b
 20487  002058  0E00               	movlw	0
 20488  00205A  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20489  00205C  6F62               	movwf	(?_strichr+1)& (0+255),b
 20490  00205E  C06F  FFF6         	movff	stristr@s2,tblptrl
 20491  002062  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20492  002066  0008               	tblrd		*
 20493  002068  50F5               	movf	tablat,w,c
 20494  00206A  6F63               	movwf	(?_strichr+2)& (0+255),b
 20495  00206C  6B64               	clrf	(?_strichr+3)& (0+255),b
 20496  00206E  EC2F  F00C         	call	_strichr	;wreg free
 20497  002072  C061  F06D         	movff	?_strichr,stristr@s1
 20498  002076  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20499  00207A                     l14950:
 20500                           
 20501                           ; BSR set to: 0
 20502  00207A  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20503  00207C  116D               	iorwf	stristr@s1& (0+255),w,b
 20504  00207E  E006               	bz	l2537
 20505                           
 20506                           ; BSR set to: 0
 20507  002080  C06D  FFD9         	movff	stristr@s1,fsr2l
 20508  002084  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20509  002088  50DF               	movf	indf2,w,c
 20510  00208A  E1C8               	bnz	l14944
 20511  00208C                     l2537:
 20512                           
 20513                           ; BSR set to: 0
 20514  00208C  6B6D               	clrf	?_stristr& (0+255),b
 20515  00208E  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20516  002090                     l2534:
 20517                           
 20518                           ; BSR set to: 0
 20519  002090  0012               	return	
 20520  002092                     __end_of_stristr:
 20521                           	opt stack 0
 20522                           tblptru	equ	0xFF8
 20523                           tblptrh	equ	0xFF7
 20524                           tblptrl	equ	0xFF6
 20525                           tablat	equ	0xFF5
 20526                           prodh	equ	0xFF4
 20527                           prodl	equ	0xFF3
 20528                           intcon	equ	0xFF2
 20529                           indf0	equ	0xFEF
 20530                           postinc0	equ	0xFEE
 20531                           fsr0h	equ	0xFEA
 20532                           fsr0l	equ	0xFE9
 20533                           wreg	equ	0xFE8
 20534                           indf1	equ	0xFE7
 20535                           postinc1	equ	0xFE6
 20536                           postdec1	equ	0xFE5
 20537                           fsr1h	equ	0xFE2
 20538                           fsr1l	equ	0xFE1
 20539                           indf2	equ	0xFDF
 20540                           postinc2	equ	0xFDE
 20541                           postdec2	equ	0xFDD
 20542                           plusw2	equ	0xFDB
 20543                           fsr2h	equ	0xFDA
 20544                           fsr2l	equ	0xFD9
 20545                           status	equ	0xFD8
 20546                           
 20547 ;; *************** function _strichr *****************
 20548 ;; Defined at:
 20549 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20550 ;; Parameters:    Size  Location     Type
 20551 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20552 ;;		 -> NULL(0), cmdbuf(80), 
 20553 ;;  chr             2    3[BANK0 ] int 
 20554 ;; Auto vars:     Size  Location     Type
 20555 ;;		None
 20556 ;; Return value:  Size  Location     Type
 20557 ;;                  2    1[BANK0 ] PTR unsigned char 
 20558 ;; Registers used:
 20559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20560 ;; Tracked objects:
 20561 ;;		On entry : F/0
 20562 ;;		On exit  : F/0
 20563 ;;		Unchanged: 0/0
 20564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20565 ;;      Params:         0       4       0       0       0       0       0
 20566 ;;      Locals:         0       0       0       0       0       0       0
 20567 ;;      Temps:          0       0       0       0       0       0       0
 20568 ;;      Totals:         0       4       0       0       0       0       0
 20569 ;;Total ram usage:        4 bytes
 20570 ;; Hardware stack levels used:    1
 20571 ;; Hardware stack levels required when called:    4
 20572 ;; This function calls:
 20573 ;;		_toupper
 20574 ;; This function is called by:
 20575 ;;		_stristr
 20576 ;; This function uses a non-reentrant model
 20577 ;;
 20578                           
 20579                           	psect	text48
 20580  00185E                     __ptext48:
 20581                           	opt stack 0
 20582  00185E                     _strichr:
 20583                           	opt stack 23
 20584                           
 20585                           ; BSR set to: 0
 20586                           
 20587                           ; BSR set to: 0
 20588                           ;incstack = 0
 20589                           ;incstack = 0
 20590  00185E  5163               	movf	strichr@chr& (0+255),w,b
 20591  001860  ECFD  F00A         	call	_toupper
 20592  001864  6F63               	movwf	strichr@chr& (0+255),b
 20593  001866  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20594  001868  D010               	goto	l16540
 20595  00186A                     l16534:
 20596                           
 20597                           ; BSR set to: 0
 20598  00186A  C061  FFD9         	movff	strichr@ptr,fsr2l
 20599  00186E  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20600  001872  50DF               	movf	indf2,w,c
 20601  001874  ECFD  F00A         	call	_toupper
 20602  001878  1963               	xorwf	strichr@chr& (0+255),w,b
 20603  00187A  E105               	bnz	l16538
 20604                           
 20605                           ; BSR set to: 0
 20606  00187C  C061  F061         	movff	strichr@ptr,?_strichr
 20607  001880  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20608  001884  D00A               	goto	l2601
 20609  001886                     l16538:
 20610                           
 20611                           ; BSR set to: 0
 20612  001886  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20613  001888  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20614  00188A                     l16540:
 20615                           
 20616                           ; BSR set to: 0
 20617  00188A  C061  FFD9         	movff	strichr@ptr,fsr2l
 20618  00188E  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20619  001892  50DF               	movf	indf2,w,c
 20620  001894  E1EA               	bnz	l16534
 20621                           
 20622                           ; BSR set to: 0
 20623  001896  6B61               	clrf	?_strichr& (0+255),b
 20624  001898  6B62               	clrf	(?_strichr+1)& (0+255),b
 20625  00189A                     l2601:
 20626                           
 20627                           ; BSR set to: 0
 20628  00189A  0012               	return	
 20629  00189C                     __end_of_strichr:
 20630                           	opt stack 0
 20631                           tblptru	equ	0xFF8
 20632                           tblptrh	equ	0xFF7
 20633                           tblptrl	equ	0xFF6
 20634                           tablat	equ	0xFF5
 20635                           prodh	equ	0xFF4
 20636                           prodl	equ	0xFF3
 20637                           intcon	equ	0xFF2
 20638                           indf0	equ	0xFEF
 20639                           postinc0	equ	0xFEE
 20640                           fsr0h	equ	0xFEA
 20641                           fsr0l	equ	0xFE9
 20642                           wreg	equ	0xFE8
 20643                           indf1	equ	0xFE7
 20644                           postinc1	equ	0xFE6
 20645                           postdec1	equ	0xFE5
 20646                           fsr1h	equ	0xFE2
 20647                           fsr1l	equ	0xFE1
 20648                           indf2	equ	0xFDF
 20649                           postinc2	equ	0xFDE
 20650                           postdec2	equ	0xFDD
 20651                           plusw2	equ	0xFDB
 20652                           fsr2h	equ	0xFDA
 20653                           fsr2l	equ	0xFD9
 20654                           status	equ	0xFD8
 20655                           
 20656 ;; *************** function _strnicmp *****************
 20657 ;; Defined at:
 20658 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20659 ;; Parameters:    Size  Location     Type
 20660 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20661 ;;		 -> NULL(0), cmdbuf(80), 
 20662 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20663 ;;		 -> STR_137(6), STR_136(8), STR_134(6), STR_132(5), 
 20664 ;;		 -> STR_130(8), STR_129(6), STR_128(9), STR_126(11), 
 20665 ;;		 -> STR_124(8), STR_122(4), STR_121(5), STR_108(5), 
 20666 ;;		 -> STR_95(7), STR_89(5), STR_80(5), STR_49(5), 
 20667 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20668 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20669 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20670 ;;		 -> STR_8(5), STR_6(5), 
 20671 ;;  len             2    8[BANK0 ] unsigned int 
 20672 ;; Auto vars:     Size  Location     Type
 20673 ;;  r               1   12[BANK0 ] char 
 20674 ;; Return value:  Size  Location     Type
 20675 ;;                  2    4[BANK0 ] int 
 20676 ;; Registers used:
 20677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20678 ;; Tracked objects:
 20679 ;;		On entry : F/0
 20680 ;;		On exit  : F/0
 20681 ;;		Unchanged: 0/0
 20682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20683 ;;      Params:         0       6       0       0       0       0       0
 20684 ;;      Locals:         0       1       0       0       0       0       0
 20685 ;;      Temps:          0       2       0       0       0       0       0
 20686 ;;      Totals:         0       9       0       0       0       0       0
 20687 ;;Total ram usage:        9 bytes
 20688 ;; Hardware stack levels used:    1
 20689 ;; Hardware stack levels required when called:    4
 20690 ;; This function calls:
 20691 ;;		_toupper
 20692 ;; This function is called by:
 20693 ;;		_stristr
 20694 ;; This function uses a non-reentrant model
 20695 ;;
 20696                           
 20697                           	psect	text49
 20698  001DE2                     __ptext49:
 20699                           	opt stack 0
 20700  001DE2                     _strnicmp:
 20701                           	opt stack 23
 20702                           
 20703                           ; BSR set to: 0
 20704                           
 20705                           ; BSR set to: 0
 20706                           ;incstack = 0
 20707                           ;incstack = 0
 20708  001DE2  D027               	goto	l16530
 20709  001DE4                     l16520:
 20710                           
 20711                           ; BSR set to: 0
 20712  001DE4  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20713  001DE8  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20714  001DEC  0008               	tblrd		*
 20715  001DEE  50F5               	movf	tablat,w,c
 20716  001DF0  ECFD  F00A         	call	_toupper
 20717  001DF4  6F6A               	movwf	??_strnicmp& (0+255),b
 20718  001DF6  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20719  001DFA  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20720  001DFE  50DF               	movf	indf2,w,c
 20721  001E00  ECFD  F00A         	call	_toupper
 20722  001E04  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20723  001E06  516A               	movf	??_strnicmp& (0+255),w,b
 20724  001E08  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20725  001E0A  6F6C               	movwf	strnicmp@r& (0+255),b
 20726  001E0C  0100               	movlb	0	; () banked
 20727  001E0E  676C               	tstfsz	strnicmp@r& (0+255),b
 20728  001E10  D006               	goto	l16524
 20729                           
 20730                           ; BSR set to: 0
 20731  001E12  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20732  001E16  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20733  001E1A  50DF               	movf	indf2,w,c
 20734  001E1C  E106               	bnz	l16528
 20735  001E1E                     l16524:
 20736                           
 20737                           ; BSR set to: 0
 20738  001E1E  516C               	movf	strnicmp@r& (0+255),w,b
 20739  001E20  6F64               	movwf	?_strnicmp& (0+255),b
 20740  001E22  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20741  001E24  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20742  001E26  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20743  001E28  D00E               	goto	l2553
 20744  001E2A                     l16528:
 20745                           
 20746                           ; BSR set to: 0
 20747  001E2A  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20748  001E2C  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20749  001E2E  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20750  001E30  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20751  001E32                     l16530:
 20752                           
 20753                           ; BSR set to: 0
 20754  001E32  0768               	decf	strnicmp@len& (0+255),f,b
 20755  001E34  A0D8               	btfss	status,0,c
 20756  001E36  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20757  001E38  0100               	movlb	0	; () banked
 20758  001E3A  2968               	incf	strnicmp@len& (0+255),w,b
 20759  001E3C  B4D8               	btfsc	status,2,c
 20760  001E3E  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20761  001E40  E1D1               	bnz	l16520
 20762                           
 20763                           ; BSR set to: 0
 20764  001E42  6B64               	clrf	?_strnicmp& (0+255),b
 20765  001E44  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20766  001E46                     l2553:
 20767                           
 20768                           ; BSR set to: 0
 20769  001E46  0012               	return	
 20770  001E48                     __end_of_strnicmp:
 20771                           	opt stack 0
 20772                           tblptru	equ	0xFF8
 20773                           tblptrh	equ	0xFF7
 20774                           tblptrl	equ	0xFF6
 20775                           tablat	equ	0xFF5
 20776                           prodh	equ	0xFF4
 20777                           prodl	equ	0xFF3
 20778                           intcon	equ	0xFF2
 20779                           indf0	equ	0xFEF
 20780                           postinc0	equ	0xFEE
 20781                           fsr0h	equ	0xFEA
 20782                           fsr0l	equ	0xFE9
 20783                           wreg	equ	0xFE8
 20784                           indf1	equ	0xFE7
 20785                           postinc1	equ	0xFE6
 20786                           postdec1	equ	0xFE5
 20787                           fsr1h	equ	0xFE2
 20788                           fsr1l	equ	0xFE1
 20789                           indf2	equ	0xFDF
 20790                           postinc2	equ	0xFDE
 20791                           postdec2	equ	0xFDD
 20792                           plusw2	equ	0xFDB
 20793                           fsr2h	equ	0xFDA
 20794                           fsr2l	equ	0xFD9
 20795                           status	equ	0xFD8
 20796                           
 20797 ;; *************** function _toupper *****************
 20798 ;; Defined at:
 20799 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20800 ;; Parameters:    Size  Location     Type
 20801 ;;  c               1    wreg     unsigned char 
 20802 ;; Auto vars:     Size  Location     Type
 20803 ;;  c               1    0[BANK0 ] unsigned char 
 20804 ;; Return value:  Size  Location     Type
 20805 ;;                  1    wreg      unsigned char 
 20806 ;; Registers used:
 20807 ;;		wreg, status,2, status,0
 20808 ;; Tracked objects:
 20809 ;;		On entry : F/0
 20810 ;;		On exit  : F/0
 20811 ;;		Unchanged: 0/0
 20812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20813 ;;      Params:         0       0       0       0       0       0       0
 20814 ;;      Locals:         0       1       0       0       0       0       0
 20815 ;;      Temps:          0       0       0       0       0       0       0
 20816 ;;      Totals:         0       1       0       0       0       0       0
 20817 ;;Total ram usage:        1 bytes
 20818 ;; Hardware stack levels used:    1
 20819 ;; Hardware stack levels required when called:    3
 20820 ;; This function calls:
 20821 ;;		Nothing
 20822 ;; This function is called by:
 20823 ;;		_strnicmp
 20824 ;;		_strichr
 20825 ;; This function uses a non-reentrant model
 20826 ;;
 20827                           
 20828                           	psect	text50
 20829  0015FA                     __ptext50:
 20830                           	opt stack 0
 20831  0015FA                     _toupper:
 20832                           	opt stack 23
 20833                           
 20834                           ; BSR set to: 0
 20835                           ;incstack = 0
 20836                           ;incstack = 0
 20837                           ;toupper@c stored from wreg
 20838  0015FA  CFE8 F060          	movff	wreg,toupper@c
 20839                           
 20840                           ; BSR set to: 0
 20841  0015FE  0E7B               	movlw	123
 20842  001600  6160               	cpfslt	toupper@c& (0+255),b
 20843  001602  D004               	goto	l16548
 20844                           
 20845                           ; BSR set to: 0
 20846  001604  0E60               	movlw	96
 20847  001606  6560               	cpfsgt	toupper@c& (0+255),b
 20848  001608  D001               	goto	l16548
 20849                           
 20850                           ; BSR set to: 0
 20851  00160A  9B60               	bcf	toupper@c& (0+255),5,b
 20852  00160C                     l16548:
 20853                           
 20854                           ; BSR set to: 0
 20855  00160C  5160               	movf	toupper@c& (0+255),w,b
 20856                           
 20857                           ; BSR set to: 0
 20858  00160E  0012               	return	
 20859  001610                     __end_of_toupper:
 20860                           	opt stack 0
 20861                           tblptru	equ	0xFF8
 20862                           tblptrh	equ	0xFF7
 20863                           tblptrl	equ	0xFF6
 20864                           tablat	equ	0xFF5
 20865                           prodh	equ	0xFF4
 20866                           prodl	equ	0xFF3
 20867                           intcon	equ	0xFF2
 20868                           indf0	equ	0xFEF
 20869                           postinc0	equ	0xFEE
 20870                           fsr0h	equ	0xFEA
 20871                           fsr0l	equ	0xFE9
 20872                           wreg	equ	0xFE8
 20873                           indf1	equ	0xFE7
 20874                           postinc1	equ	0xFE6
 20875                           postdec1	equ	0xFE5
 20876                           fsr1h	equ	0xFE2
 20877                           fsr1l	equ	0xFE1
 20878                           indf2	equ	0xFDF
 20879                           postinc2	equ	0xFDE
 20880                           postdec2	equ	0xFDD
 20881                           plusw2	equ	0xFDB
 20882                           fsr2h	equ	0xFDA
 20883                           fsr2l	equ	0xFD9
 20884                           status	equ	0xFD8
 20885                           
 20886 ;; *************** function _strlen *****************
 20887 ;; Defined at:
 20888 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20889 ;; Parameters:    Size  Location     Type
 20890 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20891 ;;		 -> printGUID@buf(3), STR_137(6), STR_136(8), STR_134(6), 
 20892 ;;		 -> STR_132(5), STR_130(8), STR_129(6), STR_128(9), 
 20893 ;;		 -> STR_126(11), STR_124(8), STR_122(4), STR_121(5), 
 20894 ;;		 -> STR_108(5), STR_95(7), STR_89(5), STR_80(5), 
 20895 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20896 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20897 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20898 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20899 ;;		 -> cmdbuf(80), 
 20900 ;; Auto vars:     Size  Location     Type
 20901 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20902 ;;		 -> printGUID@buf(3), STR_137(6), STR_136(8), STR_134(6), 
 20903 ;;		 -> STR_132(5), STR_130(8), STR_129(6), STR_128(9), 
 20904 ;;		 -> STR_126(11), STR_124(8), STR_122(4), STR_121(5), 
 20905 ;;		 -> STR_108(5), STR_95(7), STR_89(5), STR_80(5), 
 20906 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20907 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20908 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20909 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20910 ;;		 -> cmdbuf(80), 
 20911 ;; Return value:  Size  Location     Type
 20912 ;;                  2    0[BANK0 ] unsigned int 
 20913 ;; Registers used:
 20914 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20915 ;; Tracked objects:
 20916 ;;		On entry : F/0
 20917 ;;		On exit  : F/0
 20918 ;;		Unchanged: 0/0
 20919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20920 ;;      Params:         0       2       0       0       0       0       0
 20921 ;;      Locals:         0       2       0       0       0       0       0
 20922 ;;      Temps:          0       0       0       0       0       0       0
 20923 ;;      Totals:         0       4       0       0       0       0       0
 20924 ;;Total ram usage:        4 bytes
 20925 ;; Hardware stack levels used:    1
 20926 ;; Hardware stack levels required when called:    3
 20927 ;; This function calls:
 20928 ;;		Nothing
 20929 ;; This function is called by:
 20930 ;;		_doModeSLCAN
 20931 ;;		_receiveSendEventSLCAN
 20932 ;;		_printGUID
 20933 ;;		_hexStringToBytes
 20934 ;;		_stristr
 20935 ;; This function uses a non-reentrant model
 20936 ;;
 20937                           
 20938                           	psect	text51
 20939  00191A                     __ptext51:
 20940                           	opt stack 0
 20941  00191A                     _strlen:
 20942                           	opt stack 24
 20943                           
 20944                           ; BSR set to: 0
 20945                           
 20946                           ; BSR set to: 0
 20947                           ;incstack = 0
 20948                           ;incstack = 0
 20949  00191A  C060  F062         	movff	strlen@s,strlen@cp
 20950  00191E  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20951  001922  D003               	goto	l16172
 20952  001924                     l16170:
 20953  001924  0100               	movlb	0	; () banked
 20954  001926  4B62               	infsnz	strlen@cp& (0+255),f,b
 20955  001928  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20956  00192A                     l16172:
 20957                           
 20958                           ; BSR set to: 0
 20959  00192A  5162               	movf	strlen@cp& (0+255),w,b
 20960  00192C  6EF6               	movwf	tblptrl,c
 20961  00192E  6EE9               	movwf	fsr0l,c
 20962  001930  0E05               	movlw	(high __ramtop+-1)
 20963  001932  6EEA               	movwf	fsr0h,c
 20964  001934  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20965  001936  64EA               	cpfsgt	fsr0h,c
 20966  001938  D003               	bra	u22127
 20967  00193A  6EEA               	movwf	fsr0h,c
 20968  00193C  50EF               	movf	indf0,w,c
 20969  00193E  D003               	bra	u22120
 20970  001940                     u22127:
 20971  001940  6EF7               	movwf	tblptrh,c
 20972  001942  0008               	tblrd		*
 20973  001944  50F5               	movf	tablat,w,c
 20974  001946                     u22120:
 20975  001946  0900               	iorlw	0
 20976  001948  E1ED               	bnz	l16170
 20977  00194A  0100               	movlb	0	; () banked
 20978  00194C  5160               	movf	strlen@s& (0+255),w,b
 20979  00194E  5D62               	subwf	strlen@cp& (0+255),w,b
 20980  001950  6F60               	movwf	?_strlen& (0+255),b
 20981  001952  5161               	movf	(strlen@s+1)& (0+255),w,b
 20982  001954  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20983  001956  6F61               	movwf	(?_strlen+1)& (0+255),b
 20984                           
 20985                           ; BSR set to: 0
 20986  001958  0012               	return	
 20987  00195A                     __end_of_strlen:
 20988                           	opt stack 0
 20989                           tblptru	equ	0xFF8
 20990                           tblptrh	equ	0xFF7
 20991                           tblptrl	equ	0xFF6
 20992                           tablat	equ	0xFF5
 20993                           prodh	equ	0xFF4
 20994                           prodl	equ	0xFF3
 20995                           intcon	equ	0xFF2
 20996                           indf0	equ	0xFEF
 20997                           postinc0	equ	0xFEE
 20998                           fsr0h	equ	0xFEA
 20999                           fsr0l	equ	0xFE9
 21000                           wreg	equ	0xFE8
 21001                           indf1	equ	0xFE7
 21002                           postinc1	equ	0xFE6
 21003                           postdec1	equ	0xFE5
 21004                           fsr1h	equ	0xFE2
 21005                           fsr1l	equ	0xFE1
 21006                           indf2	equ	0xFDF
 21007                           postinc2	equ	0xFDE
 21008                           postdec2	equ	0xFDD
 21009                           plusw2	equ	0xFDB
 21010                           fsr2h	equ	0xFDA
 21011                           fsr2l	equ	0xFD9
 21012                           status	equ	0xFD8
 21013                           
 21014 ;; *************** function _receivePrintEventVerbose *****************
 21015 ;; Defined at:
 21016 ;;		line 1797 in file "main.c"
 21017 ;; Parameters:    Size  Location     Type
 21018 ;;		None
 21019 ;; Auto vars:     Size  Location     Type
 21020 ;;  i               1   69[BANK0 ] unsigned char 
 21021 ;; Return value:  Size  Location     Type
 21022 ;;                  1    wreg      enum E15660
 21023 ;; Registers used:
 21024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21025 ;; Tracked objects:
 21026 ;;		On entry : F/0
 21027 ;;		On exit  : 0/0
 21028 ;;		Unchanged: 0/0
 21029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21030 ;;      Params:         0       0       0       0       0       0       0
 21031 ;;      Locals:         0      13       0       0       0       0       0
 21032 ;;      Temps:          0       5       0       0       0       0       0
 21033 ;;      Totals:         0      18       0       0       0       0       0
 21034 ;;Total ram usage:       18 bytes
 21035 ;; Hardware stack levels used:    1
 21036 ;; Hardware stack levels required when called:    6
 21037 ;; This function calls:
 21038 ;;		_putsUSART
 21039 ;;		_sprintf
 21040 ;;		_getVSCPFrame
 21041 ;; This function is called by:
 21042 ;;		_doModeVerbose
 21043 ;; This function uses a non-reentrant model
 21044 ;;
 21045                           
 21046                           	psect	text52
 21047  004768                     __ptext52:
 21048                           	opt stack 0
 21049  004768                     _receivePrintEventVerbose:
 21050                           	opt stack 22
 21051                           
 21052                           ; BSR set to: 0
 21053                           ;main.c: 1798: uint8_t i;
 21054                           ;main.c: 1800: if (getVSCPFrame(&vscpClass,
 21055                           ;main.c: 1801: &vscpType,
 21056                           ;main.c: 1802: &vscpNodeId,
 21057                           ;main.c: 1803: &vscpPriority,
 21058                           ;main.c: 1804: &vscpSize,
 21059                           ;main.c: 1805: vscpData)) {
 21060                           
 21061                           ; BSR set to: 0
 21062                           ;incstack = 0
 21063                           ;incstack = 0
 21064  004768  0E3F               	movlw	low _vscpType
 21065  00476A  6F72               	movwf	?_getVSCPFrame& (0+255),b
 21066  00476C  0EE8               	movlw	low _vscpNodeId
 21067  00476E  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 21068  004770  0E3E               	movlw	low _vscpPriority
 21069  004772  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 21070  004774  0EE9               	movlw	low _vscpSize
 21071  004776  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 21072  004778  0E01               	movlw	high _vscpData
 21073  00477A  0100               	movlb	0	; () banked
 21074  00477C  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 21075  00477E  0EDF               	movlw	low _vscpData
 21076  004780  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 21077  004782  0E3A               	movlw	_vscpClass& (0+255)
 21078  004784  EC49  F010         	call	_getVSCPFrame
 21079  004788  0900               	iorlw	0
 21080  00478A  E101 D131          	bz	l14938
 21081                           
 21082                           ; BSR set to: 0
 21083                           ;main.c: 1808: cntRxFrames++;
 21084  00478E  0101               	movlb	1	; () banked
 21085  004790  2B0C               	incf	_cntRxFrames& (0+255),f,b
 21086  004792  0E00               	movlw	0
 21087  004794  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 21088  004796  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 21089  004798  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 21090                           
 21091                           ;main.c: 1809: cntRxBytes += vscpSize;
 21092  00479A  0100               	movlb	0	; () banked
 21093  00479C  51E9               	movf	_vscpSize& (0+255),w,b
 21094  00479E  0101               	movlb	1	; () banked
 21095  0047A0  2708               	addwf	_cntRxBytes& (0+255),f,b
 21096  0047A2  0E00               	movlw	0
 21097  0047A4  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 21098  0047A6  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 21099  0047A8  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 21100                           
 21101                           ; BSR set to: 1
 21102                           ;main.c: 1811: putsUSART((char *) "<Prio=");
 21103  0047AA  0E7C               	movlw	high STR_147
 21104  0047AC  0100               	movlb	0	; () banked
 21105  0047AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21106  0047B0  0E34               	movlw	low STR_147
 21107  0047B2  6F61               	movwf	?_putsUSART& (0+255),b
 21108  0047B4  ECA8  F00D         	call	_putsUSART	;wreg free
 21109                           
 21110                           ;main.c: 1812: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 21111  0047B8  0100               	movlb	0	; () banked
 21112  0047BA  67E5               	tstfsz	_bHex& (0+255),b
 21113  0047BC  D004               	goto	l14856
 21114                           
 21115                           ; BSR set to: 0
 21116  0047BE  0E7C               	movlw	high STR_60
 21117  0047C0  6F9A               	movwf	(_receivePrintEventVerbose$1352+1)& (0+255),b
 21118  0047C2  0EED               	movlw	low STR_60
 21119  0047C4  D003               	goto	L30
 21120  0047C6                     l14856:
 21121                           
 21122                           ; BSR set to: 0
 21123  0047C6  0E7C               	movlw	high STR_59
 21124  0047C8  6F9A               	movwf	(_receivePrintEventVerbose$1352+1)& (0+255),b
 21125  0047CA  0E57               	movlw	low STR_59
 21126  0047CC                     L30:
 21127  0047CC  6F99               	movwf	_receivePrintEventVerbose$1352& (0+255),b
 21128                           
 21129                           ; BSR set to: 0
 21130  0047CE  0E01               	movlw	high _wrkbuf
 21131  0047D0  0100               	movlb	0	; () banked
 21132  0047D2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21133  0047D4  0E77               	movlw	low _wrkbuf
 21134  0047D6  6F76               	movwf	?_sprintf& (0+255),b
 21135  0047D8  C099  F078         	movff	_receivePrintEventVerbose$1352,?_sprintf+2
 21136  0047DC  C09A  F079         	movff	_receivePrintEventVerbose$1352+1,?_sprintf+3
 21137  0047E0  C03E  F07A         	movff	_vscpPriority,?_sprintf+4
 21138  0047E4  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21139  0047E6  EC3D  F028         	call	_sprintf	;wreg free
 21140                           
 21141                           ; BSR set to: 0
 21142                           ;main.c: 1813: putsUSART(wrkbuf);
 21143  0047EA  0E01               	movlw	high _wrkbuf
 21144  0047EC  0100               	movlb	0	; () banked
 21145  0047EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21146  0047F0  0E77               	movlw	low _wrkbuf
 21147  0047F2  6F61               	movwf	?_putsUSART& (0+255),b
 21148  0047F4  ECA8  F00D         	call	_putsUSART	;wreg free
 21149                           
 21150                           ;main.c: 1814: putsUSART((char *) ",class=");
 21151  0047F8  0E7B               	movlw	high STR_150
 21152  0047FA  0100               	movlb	0	; () banked
 21153  0047FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21154  0047FE  0EE8               	movlw	low STR_150
 21155  004800  6F61               	movwf	?_putsUSART& (0+255),b
 21156  004802  ECA8  F00D         	call	_putsUSART	;wreg free
 21157                           
 21158                           ;main.c: 1815: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 21159  004806  0100               	movlb	0	; () banked
 21160  004808  67E5               	tstfsz	_bHex& (0+255),b
 21161  00480A  D004               	goto	l14868
 21162                           
 21163                           ; BSR set to: 0
 21164  00480C  0E7C               	movlw	high STR_60
 21165  00480E  6F9C               	movwf	(_receivePrintEventVerbose$1357+1)& (0+255),b
 21166  004810  0EED               	movlw	low STR_60
 21167  004812  D003               	goto	L31
 21168  004814                     l14868:
 21169                           
 21170                           ; BSR set to: 0
 21171  004814  0E7C               	movlw	high STR_151
 21172  004816  6F9C               	movwf	(_receivePrintEventVerbose$1357+1)& (0+255),b
 21173  004818  0E5E               	movlw	low STR_151
 21174  00481A                     L31:
 21175  00481A  6F9B               	movwf	_receivePrintEventVerbose$1357& (0+255),b
 21176                           
 21177                           ; BSR set to: 0
 21178  00481C  0E01               	movlw	high _wrkbuf
 21179  00481E  0100               	movlb	0	; () banked
 21180  004820  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21181  004822  0E77               	movlw	low _wrkbuf
 21182  004824  6F76               	movwf	?_sprintf& (0+255),b
 21183  004826  C09B  F078         	movff	_receivePrintEventVerbose$1357,?_sprintf+2
 21184  00482A  C09C  F079         	movff	_receivePrintEventVerbose$1357+1,?_sprintf+3
 21185  00482E  C03A  F07A         	movff	_vscpClass,?_sprintf+4
 21186  004832  C03B  F07B         	movff	_vscpClass+1,?_sprintf+5
 21187  004836  EC3D  F028         	call	_sprintf	;wreg free
 21188                           
 21189                           ; BSR set to: 0
 21190                           ;main.c: 1816: putsUSART(wrkbuf);
 21191  00483A  0E01               	movlw	high _wrkbuf
 21192  00483C  0100               	movlb	0	; () banked
 21193  00483E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21194  004840  0E77               	movlw	low _wrkbuf
 21195  004842  6F61               	movwf	?_putsUSART& (0+255),b
 21196  004844  ECA8  F00D         	call	_putsUSART	;wreg free
 21197                           
 21198                           ;main.c: 1817: putsUSART((char *) ",type=");
 21199  004848  0E7C               	movlw	high STR_153
 21200  00484A  0100               	movlb	0	; () banked
 21201  00484C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21202  00484E  0E26               	movlw	low STR_153
 21203  004850  6F61               	movwf	?_putsUSART& (0+255),b
 21204  004852  ECA8  F00D         	call	_putsUSART	;wreg free
 21205                           
 21206                           ;main.c: 1818: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21207  004856  0100               	movlb	0	; () banked
 21208  004858  67E5               	tstfsz	_bHex& (0+255),b
 21209  00485A  D004               	goto	l14880
 21210                           
 21211                           ; BSR set to: 0
 21212  00485C  0E7C               	movlw	high STR_60
 21213  00485E  6F9E               	movwf	(_receivePrintEventVerbose$1362+1)& (0+255),b
 21214  004860  0EED               	movlw	low STR_60
 21215  004862  D003               	goto	L32
 21216  004864                     l14880:
 21217                           
 21218                           ; BSR set to: 0
 21219  004864  0E7C               	movlw	high STR_59
 21220  004866  6F9E               	movwf	(_receivePrintEventVerbose$1362+1)& (0+255),b
 21221  004868  0E57               	movlw	low STR_59
 21222  00486A                     L32:
 21223  00486A  6F9D               	movwf	_receivePrintEventVerbose$1362& (0+255),b
 21224                           
 21225                           ; BSR set to: 0
 21226  00486C  0E01               	movlw	high _wrkbuf
 21227  00486E  0100               	movlb	0	; () banked
 21228  004870  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21229  004872  0E77               	movlw	low _wrkbuf
 21230  004874  6F76               	movwf	?_sprintf& (0+255),b
 21231  004876  C09D  F078         	movff	_receivePrintEventVerbose$1362,?_sprintf+2
 21232  00487A  C09E  F079         	movff	_receivePrintEventVerbose$1362+1,?_sprintf+3
 21233  00487E  C03F  F07A         	movff	_vscpType,?_sprintf+4
 21234  004882  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21235  004884  EC3D  F028         	call	_sprintf	;wreg free
 21236                           
 21237                           ; BSR set to: 0
 21238                           ;main.c: 1819: putsUSART(wrkbuf);
 21239  004888  0E01               	movlw	high _wrkbuf
 21240  00488A  0100               	movlb	0	; () banked
 21241  00488C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21242  00488E  0E77               	movlw	low _wrkbuf
 21243  004890  6F61               	movwf	?_putsUSART& (0+255),b
 21244  004892  ECA8  F00D         	call	_putsUSART	;wreg free
 21245                           
 21246                           ;main.c: 1820: putsUSART((char *) ",nodeid=");
 21247  004896  0E7B               	movlw	high STR_156
 21248  004898  0100               	movlb	0	; () banked
 21249  00489A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21250  00489C  0EB6               	movlw	low STR_156
 21251  00489E  6F61               	movwf	?_putsUSART& (0+255),b
 21252  0048A0  ECA8  F00D         	call	_putsUSART	;wreg free
 21253                           
 21254                           ;main.c: 1821: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21255  0048A4  0100               	movlb	0	; () banked
 21256  0048A6  67E5               	tstfsz	_bHex& (0+255),b
 21257  0048A8  D004               	goto	l14892
 21258                           
 21259                           ; BSR set to: 0
 21260  0048AA  0E7C               	movlw	high STR_60
 21261  0048AC  6FA0               	movwf	(_receivePrintEventVerbose$1367+1)& (0+255),b
 21262  0048AE  0EED               	movlw	low STR_60
 21263  0048B0  D003               	goto	L33
 21264  0048B2                     l14892:
 21265                           
 21266                           ; BSR set to: 0
 21267  0048B2  0E7C               	movlw	high STR_59
 21268  0048B4  6FA0               	movwf	(_receivePrintEventVerbose$1367+1)& (0+255),b
 21269  0048B6  0E57               	movlw	low STR_59
 21270  0048B8                     L33:
 21271  0048B8  6F9F               	movwf	_receivePrintEventVerbose$1367& (0+255),b
 21272                           
 21273                           ; BSR set to: 0
 21274  0048BA  0E01               	movlw	high _wrkbuf
 21275  0048BC  0100               	movlb	0	; () banked
 21276  0048BE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21277  0048C0  0E77               	movlw	low _wrkbuf
 21278  0048C2  6F76               	movwf	?_sprintf& (0+255),b
 21279  0048C4  C09F  F078         	movff	_receivePrintEventVerbose$1367,?_sprintf+2
 21280  0048C8  C0A0  F079         	movff	_receivePrintEventVerbose$1367+1,?_sprintf+3
 21281  0048CC  C0E8  F07A         	movff	_vscpNodeId,?_sprintf+4
 21282  0048D0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21283  0048D2  EC3D  F028         	call	_sprintf	;wreg free
 21284                           
 21285                           ; BSR set to: 0
 21286                           ;main.c: 1822: putsUSART(wrkbuf);
 21287  0048D6  0E01               	movlw	high _wrkbuf
 21288  0048D8  0100               	movlb	0	; () banked
 21289  0048DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21290  0048DC  0E77               	movlw	low _wrkbuf
 21291  0048DE  6F61               	movwf	?_putsUSART& (0+255),b
 21292  0048E0  ECA8  F00D         	call	_putsUSART	;wreg free
 21293                           
 21294                           ;main.c: 1823: putsUSART((char *) ",size=");
 21295  0048E4  0E7C               	movlw	high STR_159
 21296  0048E6  0100               	movlb	0	; () banked
 21297  0048E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21298  0048EA  0E2D               	movlw	low STR_159
 21299  0048EC  6F61               	movwf	?_putsUSART& (0+255),b
 21300  0048EE  ECA8  F00D         	call	_putsUSART	;wreg free
 21301                           
 21302                           ;main.c: 1824: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21303  0048F2  0100               	movlb	0	; () banked
 21304  0048F4  67E5               	tstfsz	_bHex& (0+255),b
 21305  0048F6  D004               	goto	l14904
 21306                           
 21307                           ; BSR set to: 0
 21308  0048F8  0E7C               	movlw	high STR_60
 21309  0048FA  6FA2               	movwf	(_receivePrintEventVerbose$1372+1)& (0+255),b
 21310  0048FC  0EED               	movlw	low STR_60
 21311  0048FE  D003               	goto	L34
 21312  004900                     l14904:
 21313                           
 21314                           ; BSR set to: 0
 21315  004900  0E7C               	movlw	high STR_59
 21316  004902  6FA2               	movwf	(_receivePrintEventVerbose$1372+1)& (0+255),b
 21317  004904  0E57               	movlw	low STR_59
 21318  004906                     L34:
 21319  004906  6FA1               	movwf	_receivePrintEventVerbose$1372& (0+255),b
 21320                           
 21321                           ; BSR set to: 0
 21322  004908  0E01               	movlw	high _wrkbuf
 21323  00490A  0100               	movlb	0	; () banked
 21324  00490C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21325  00490E  0E77               	movlw	low _wrkbuf
 21326  004910  6F76               	movwf	?_sprintf& (0+255),b
 21327  004912  C0A1  F078         	movff	_receivePrintEventVerbose$1372,?_sprintf+2
 21328  004916  C0A2  F079         	movff	_receivePrintEventVerbose$1372+1,?_sprintf+3
 21329  00491A  C0E9  F07A         	movff	_vscpSize,?_sprintf+4
 21330  00491E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21331  004920  EC3D  F028         	call	_sprintf	;wreg free
 21332                           
 21333                           ; BSR set to: 0
 21334                           ;main.c: 1825: putsUSART(wrkbuf);
 21335  004924  0E01               	movlw	high _wrkbuf
 21336  004926  0100               	movlb	0	; () banked
 21337  004928  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21338  00492A  0E77               	movlw	low _wrkbuf
 21339  00492C  6F61               	movwf	?_putsUSART& (0+255),b
 21340  00492E  ECA8  F00D         	call	_putsUSART	;wreg free
 21341                           
 21342                           ;main.c: 1826: if (vscpSize > 0) {
 21343  004932  0100               	movlb	0	; () banked
 21344  004934  51E9               	movf	_vscpSize& (0+255),w,b
 21345  004936  E04D               	bz	l14932
 21346                           
 21347                           ; BSR set to: 0
 21348                           ;main.c: 1827: putsUSART((char *) ",Data=");
 21349  004938  0E7C               	movlw	high STR_162
 21350  00493A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21351  00493C  0E1F               	movlw	low STR_162
 21352  00493E  6F61               	movwf	?_putsUSART& (0+255),b
 21353  004940  ECA8  F00D         	call	_putsUSART	;wreg free
 21354                           
 21355                           ;main.c: 1828: for (i = 0; i < vscpSize; i++) {
 21356  004944  0100               	movlb	0	; () banked
 21357  004946  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21358  004948  D040               	goto	l14930
 21359  00494A                     l938:
 21360                           
 21361                           ; BSR set to: 0
 21362                           ;main.c: 1830: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21363  00494A  67E5               	tstfsz	_bHex& (0+255),b
 21364  00494C  D004               	goto	l14918
 21365                           
 21366                           ; BSR set to: 0
 21367  00494E  0E7C               	movlw	high STR_60
 21368  004950  6FA4               	movwf	(_receivePrintEventVerbose$1377+1)& (0+255),b
 21369  004952  0EED               	movlw	low STR_60
 21370  004954  D003               	goto	L35
 21371  004956                     l14918:
 21372                           
 21373                           ; BSR set to: 0
 21374  004956  0E7C               	movlw	high STR_59
 21375  004958  6FA4               	movwf	(_receivePrintEventVerbose$1377+1)& (0+255),b
 21376  00495A  0E57               	movlw	low STR_59
 21377  00495C                     L35:
 21378  00495C  6FA3               	movwf	_receivePrintEventVerbose$1377& (0+255),b
 21379                           
 21380                           ; BSR set to: 0
 21381  00495E  0E01               	movlw	high _wrkbuf
 21382  004960  0100               	movlb	0	; () banked
 21383  004962  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21384  004964  0E77               	movlw	low _wrkbuf
 21385  004966  6F76               	movwf	?_sprintf& (0+255),b
 21386  004968  C0A3  F078         	movff	_receivePrintEventVerbose$1377,?_sprintf+2
 21387  00496C  C0A4  F079         	movff	_receivePrintEventVerbose$1377+1,?_sprintf+3
 21388  004970  0EDF               	movlw	low _vscpData
 21389  004972  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21390  004974  6ED9               	movwf	fsr2l,c
 21391  004976  6ADA               	clrf	fsr2h,c
 21392  004978  0E01               	movlw	high _vscpData
 21393  00497A  22DA               	addwfc	fsr2h,f,c
 21394  00497C  50DF               	movf	indf2,w,c
 21395  00497E  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21396  004980  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21397  004982  EC3D  F028         	call	_sprintf	;wreg free
 21398                           
 21399                           ; BSR set to: 0
 21400                           ;main.c: 1831: putsUSART(wrkbuf);
 21401  004986  0E01               	movlw	high _wrkbuf
 21402  004988  0100               	movlb	0	; () banked
 21403  00498A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21404  00498C  0E77               	movlw	low _wrkbuf
 21405  00498E  6F61               	movwf	?_putsUSART& (0+255),b
 21406  004990  ECA8  F00D         	call	_putsUSART	;wreg free
 21407                           
 21408                           ;main.c: 1832: if (i < (vscpSize - 1)) {
 21409  004994  0EFF               	movlw	255
 21410  004996  0100               	movlb	0	; () banked
 21411  004998  25E9               	addwf	_vscpSize& (0+255),w,b
 21412  00499A  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21413  00499C  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21414  00499E  0EFF               	movlw	255
 21415  0049A0  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21416  0049A2  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21417  0049A4  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21418  0049A6  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21419  0049A8  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21420  0049AA  0A80               	xorlw	128
 21421  0049AC  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21422  0049AE  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21423  0049B0  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21424  0049B2  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21425  0049B4  0A80               	xorlw	128
 21426  0049B6  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21427  0049B8  E206               	bc	l14928
 21428                           
 21429                           ; BSR set to: 0
 21430                           ;main.c: 1833: putsUSART((char *) ",");
 21431  0049BA  0E7C               	movlw	high STR_30
 21432  0049BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21433  0049BE  0EF4               	movlw	low STR_30
 21434  0049C0  6F61               	movwf	?_putsUSART& (0+255),b
 21435  0049C2  ECA8  F00D         	call	_putsUSART	;wreg free
 21436  0049C6                     l14928:
 21437  0049C6  0100               	movlb	0	; () banked
 21438  0049C8  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21439  0049CA                     l14930:
 21440                           
 21441                           ; BSR set to: 0
 21442  0049CA  51E9               	movf	_vscpSize& (0+255),w,b
 21443  0049CC  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21444  0049CE  E207               	bc	l945
 21445  0049D0  D7BC               	goto	l938
 21446  0049D2                     l14932:
 21447                           
 21448                           ; BSR set to: 0
 21449                           ;main.c: 1837: putsUSART((char *) ",Data=none");
 21450  0049D2  0E7B               	movlw	high STR_166
 21451  0049D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21452  0049D6  0E71               	movlw	low STR_166
 21453  0049D8  6F61               	movwf	?_putsUSART& (0+255),b
 21454  0049DA  ECA8  F00D         	call	_putsUSART	;wreg free
 21455  0049DE                     l945:
 21456                           
 21457                           ;main.c: 1838: }
 21458                           ;main.c: 1839: putsUSART((char *) ">\r\n");
 21459  0049DE  0E7C               	movlw	high STR_167
 21460  0049E0  0100               	movlb	0	; () banked
 21461  0049E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21462  0049E4  0ED1               	movlw	low STR_167
 21463  0049E6  6F61               	movwf	?_putsUSART& (0+255),b
 21464  0049E8  ECA8  F00D         	call	_putsUSART	;wreg free
 21465                           
 21466                           ;main.c: 1840: return 1;
 21467  0049EC  0E01               	movlw	1
 21468  0049EE  D001               	goto	l946
 21469  0049F0                     l14938:
 21470                           
 21471                           ; BSR set to: 0
 21472                           ;main.c: 1841: }
 21473                           ;main.c: 1843: return 0;
 21474  0049F0  0E00               	movlw	0
 21475  0049F2                     l946:
 21476  0049F2  0012               	return	
 21477  0049F4                     __end_of_receivePrintEventVerbose:
 21478                           	opt stack 0
 21479                           tblptru	equ	0xFF8
 21480                           tblptrh	equ	0xFF7
 21481                           tblptrl	equ	0xFF6
 21482                           tablat	equ	0xFF5
 21483                           prodh	equ	0xFF4
 21484                           prodl	equ	0xFF3
 21485                           intcon	equ	0xFF2
 21486                           indf0	equ	0xFEF
 21487                           postinc0	equ	0xFEE
 21488                           fsr0h	equ	0xFEA
 21489                           fsr0l	equ	0xFE9
 21490                           wreg	equ	0xFE8
 21491                           indf1	equ	0xFE7
 21492                           postinc1	equ	0xFE6
 21493                           postdec1	equ	0xFE5
 21494                           fsr1h	equ	0xFE2
 21495                           fsr1l	equ	0xFE1
 21496                           indf2	equ	0xFDF
 21497                           postinc2	equ	0xFDE
 21498                           postdec2	equ	0xFDD
 21499                           plusw2	equ	0xFDB
 21500                           fsr2h	equ	0xFDA
 21501                           fsr2l	equ	0xFD9
 21502                           status	equ	0xFD8
 21503                           
 21504 ;; *************** function _getVSCPFrame *****************
 21505 ;; Defined at:
 21506 ;;		line 3007 in file "main.c"
 21507 ;; Parameters:    Size  Location     Type
 21508 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21509 ;;		 -> vscpClass(2), 
 21510 ;;  pvscptype       1   18[BANK0 ] PTR unsigned char 
 21511 ;;		 -> vscpType(1), 
 21512 ;;  pNodeId         1   19[BANK0 ] PTR unsigned char 
 21513 ;;		 -> vscpNodeId(1), 
 21514 ;;  pPriority       1   20[BANK0 ] PTR unsigned char 
 21515 ;;		 -> vscpPriority(1), 
 21516 ;;  pSize           1   21[BANK0 ] PTR unsigned char 
 21517 ;;		 -> vscpSize(1), 
 21518 ;;  pData           2   22[BANK0 ] PTR unsigned char 
 21519 ;;		 -> vscpData(8), 
 21520 ;; Auto vars:     Size  Location     Type
 21521 ;;  pvscpclass      1   28[BANK0 ] PTR unsigned short 
 21522 ;;		 -> vscpClass(2), 
 21523 ;;  id              4   29[BANK0 ] unsigned long 
 21524 ;; Return value:  Size  Location     Type
 21525 ;;                  1    wreg      unsigned char 
 21526 ;; Registers used:
 21527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21528 ;; Tracked objects:
 21529 ;;		On entry : F/0
 21530 ;;		On exit  : F/0
 21531 ;;		Unchanged: 0/0
 21532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21533 ;;      Params:         0       6       0       0       0       0       0
 21534 ;;      Locals:         0       5       0       0       0       0       0
 21535 ;;      Temps:          0       4       0       0       0       0       0
 21536 ;;      Totals:         0      15       0       0       0       0       0
 21537 ;;Total ram usage:       15 bytes
 21538 ;; Hardware stack levels used:    1
 21539 ;; Hardware stack levels required when called:    5
 21540 ;; This function calls:
 21541 ;;		_getCANFrame
 21542 ;; This function is called by:
 21543 ;;		_receivePrintEventVerbose
 21544 ;;		_readRegister
 21545 ;;		_readRegisterExtended
 21546 ;;		_writeRegisterExtended
 21547 ;; This function uses a non-reentrant model
 21548 ;;
 21549                           
 21550                           	psect	text53
 21551  002092                     __ptext53:
 21552                           	opt stack 0
 21553  002092                     _getVSCPFrame:
 21554                           	opt stack 21
 21555                           
 21556                           ;incstack = 0
 21557                           ;incstack = 0
 21558                           ;getVSCPFrame@pvscpclass stored from wreg
 21559  002092  CFE8 F07C          	movff	wreg,getVSCPFrame@pvscpclass
 21560                           
 21561                           ; BSR set to: 0
 21562                           ;main.c: 3008: uint32_t id;
 21563                           ;main.c: 3010: if (!getCANFrame(&id, pSize, pData)) {
 21564  002096  C075  F06E         	movff	getVSCPFrame@pSize,?_getCANFrame
 21565  00209A  C076  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+1
 21566  00209E  C077  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+2
 21567  0020A2  0E7D               	movlw	getVSCPFrame@id& (0+255)
 21568  0020A4  ECF1  F011         	call	_getCANFrame
 21569  0020A8  0900               	iorlw	0
 21570  0020AA  E102               	bnz	l16250
 21571                           
 21572                           ; BSR set to: 0
 21573                           ;main.c: 3011: return 0;
 21574  0020AC  0E00               	movlw	0
 21575  0020AE  D02F               	goto	l1287
 21576  0020B0                     l16250:
 21577                           
 21578                           ; BSR set to: 0
 21579                           ;main.c: 3012: }
 21580                           ;main.c: 3014: *pNodeId = id & 0x0ff;
 21581  0020B0  5173               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21582  0020B2  6ED9               	movwf	fsr2l,c
 21583  0020B4  6ADA               	clrf	fsr2h,c
 21584  0020B6  C07D  FFDF         	movff	getVSCPFrame@id,indf2
 21585                           
 21586                           ;main.c: 3015: *pvscptype = (id >> 8) & 0xff;
 21587  0020BA  5172               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21588  0020BC  6ED9               	movwf	fsr2l,c
 21589  0020BE  6ADA               	clrf	fsr2h,c
 21590  0020C0  C07E  FFDF         	movff	getVSCPFrame@id+1,indf2
 21591                           
 21592                           ; BSR set to: 0
 21593                           ;main.c: 3016: *pvscpclass = (id >> 16) & 0x1ff;
 21594  0020C4  0100               	movlb	0	; () banked
 21595  0020C6  517F               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21596  0020C8  6F78               	movwf	??_getVSCPFrame& (0+255),b
 21597  0020CA  0E01               	movlw	1
 21598  0020CC  1580               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21599  0020CE  6F79               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21600  0020D0  517C               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21601  0020D2  6ED9               	movwf	fsr2l,c
 21602  0020D4  6ADA               	clrf	fsr2h,c
 21603  0020D6  C078  FFDE         	movff	??_getVSCPFrame,postinc2
 21604  0020DA  C079  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21605                           
 21606                           ; BSR set to: 0
 21607                           ;main.c: 3017: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21608  0020DE  5174               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21609  0020E0  6ED9               	movwf	fsr2l,c
 21610  0020E2  6ADA               	clrf	fsr2h,c
 21611  0020E4  C07D  F078         	movff	getVSCPFrame@id,??_getVSCPFrame
 21612  0020E8  C07E  F079         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21613  0020EC  C07F  F07A         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21614  0020F0  C080  F07B         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21615  0020F4  0E1B               	movlw	27
 21616  0020F6  D005               	goto	u22260
 21617  0020F8                     u22265:
 21618  0020F8  90D8               	bcf	status,0,c
 21619  0020FA  337B               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21620  0020FC  337A               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21621  0020FE  3379               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21622  002100  3378               	rrcf	??_getVSCPFrame& (0+255),f,b
 21623  002102                     u22260:
 21624  002102  2EE8               	decfsz	wreg,f,c
 21625  002104  D7F9               	goto	u22265
 21626  002106  5178               	movf	??_getVSCPFrame& (0+255),w,b
 21627  002108  0B07               	andlw	7
 21628  00210A  6EDF               	movwf	indf2,c
 21629                           
 21630                           ; BSR set to: 0
 21631                           ;main.c: 3019: return 1;
 21632  00210C  0E01               	movlw	1
 21633  00210E                     l1287:
 21634                           
 21635                           ; BSR set to: 0
 21636  00210E  0012               	return	
 21637  002110                     __end_of_getVSCPFrame:
 21638                           	opt stack 0
 21639                           tblptru	equ	0xFF8
 21640                           tblptrh	equ	0xFF7
 21641                           tblptrl	equ	0xFF6
 21642                           tablat	equ	0xFF5
 21643                           prodh	equ	0xFF4
 21644                           prodl	equ	0xFF3
 21645                           intcon	equ	0xFF2
 21646                           indf0	equ	0xFEF
 21647                           postinc0	equ	0xFEE
 21648                           fsr0h	equ	0xFEA
 21649                           fsr0l	equ	0xFE9
 21650                           wreg	equ	0xFE8
 21651                           indf1	equ	0xFE7
 21652                           postinc1	equ	0xFE6
 21653                           postdec1	equ	0xFE5
 21654                           fsr1h	equ	0xFE2
 21655                           fsr1l	equ	0xFE1
 21656                           indf2	equ	0xFDF
 21657                           postinc2	equ	0xFDE
 21658                           postdec2	equ	0xFDD
 21659                           plusw2	equ	0xFDB
 21660                           fsr2h	equ	0xFDA
 21661                           fsr2l	equ	0xFD9
 21662                           status	equ	0xFD8
 21663                           
 21664 ;; *************** function _getCANFrame *****************
 21665 ;; Defined at:
 21666 ;;		line 3043 in file "main.c"
 21667 ;; Parameters:    Size  Location     Type
 21668 ;;  pid             1    wreg     PTR unsigned long 
 21669 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21670 ;;  pdlc            1   14[BANK0 ] PTR unsigned char 
 21671 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21672 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21673 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21674 ;; Auto vars:     Size  Location     Type
 21675 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21676 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21677 ;; Return value:  Size  Location     Type
 21678 ;;                  1    wreg      unsigned char 
 21679 ;; Registers used:
 21680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21681 ;; Tracked objects:
 21682 ;;		On entry : F/0
 21683 ;;		On exit  : F/0
 21684 ;;		Unchanged: 0/0
 21685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21686 ;;      Params:         0       3       0       0       0       0       0
 21687 ;;      Locals:         0       1       0       0       0       0       0
 21688 ;;      Temps:          0       0       0       0       0       0       0
 21689 ;;      Totals:         0       4       0       0       0       0       0
 21690 ;;Total ram usage:        4 bytes
 21691 ;; Hardware stack levels used:    1
 21692 ;; Hardware stack levels required when called:    4
 21693 ;; This function calls:
 21694 ;;		_fifo_read
 21695 ;; This function is called by:
 21696 ;;		_receiveSendEventCANAL
 21697 ;;		_receiveSendMultiEventCANAL
 21698 ;;		_receiveSendEventSLCAN
 21699 ;;		_getVSCPFrame
 21700 ;; This function uses a non-reentrant model
 21701 ;;
 21702                           
 21703                           	psect	text54
 21704  0023E2                     __ptext54:
 21705                           	opt stack 0
 21706  0023E2                     _getCANFrame:
 21707                           	opt stack 23
 21708                           
 21709                           ; BSR set to: 0
 21710                           ;incstack = 0
 21711                           ;incstack = 0
 21712                           ;getCANFrame@pid stored from wreg
 21713  0023E2  CFE8 F071          	movff	wreg,getCANFrame@pid
 21714                           
 21715                           ; BSR set to: 0
 21716                           ;main.c: 3064: if ( fifo_canrxcount ) {
 21717  0023E6  5034               	movf	_fifo_canrxcount,w,c	;volatile
 21718  0023E8  E013               	bz	l16268
 21719                           
 21720                           ; BSR set to: 0
 21721                           ;main.c: 3067: (INTCONbits.GIE = 0);
 21722  0023EA  9EF2               	bcf	intcon,7,c	;volatile
 21723                           
 21724                           ; BSR set to: 0
 21725                           ;main.c: 3068: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21726  0023EC  0E01               	movlw	high _canInputFifo
 21727  0023EE  0100               	movlb	0	; () banked
 21728  0023F0  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21729  0023F2  0EC7               	movlw	low _canInputFifo
 21730  0023F4  6F60               	movwf	?_fifo_read& (0+255),b
 21731  0023F6  C071  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21732  0023FA  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21733  0023FC  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21734  0023FE  0E04               	movlw	4
 21735  002400  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21736  002402  ECB6  F015         	call	_fifo_read	;wreg free
 21737  002406  5160               	movf	?_fifo_read& (0+255),w,b
 21738  002408  0A04               	xorlw	4
 21739  00240A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21740  00240C  E003               	bz	l16272
 21741  00240E                     l16266:
 21742                           
 21743                           ; BSR set to: 0
 21744                           ;main.c: 3069: (INTCONbits.GIE = 1);
 21745  00240E  8EF2               	bsf	intcon,7,c	;volatile
 21746  002410                     l16268:
 21747                           
 21748                           ; BSR set to: 0
 21749                           ;main.c: 3070: return 0;
 21750  002410  0E00               	movlw	0
 21751  002412  D035               	goto	l1296
 21752  002414                     l16272:
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;main.c: 3071: }
 21756                           ;main.c: 3074: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21757  002414  0E01               	movlw	high _canInputFifo
 21758  002416  0100               	movlb	0	; () banked
 21759  002418  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21760  00241A  0EC7               	movlw	low _canInputFifo
 21761  00241C  6F60               	movwf	?_fifo_read& (0+255),b
 21762  00241E  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21763  002422  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21764  002424  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21765  002426  0E01               	movlw	1
 21766  002428  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21767  00242A  ECB6  F015         	call	_fifo_read	;wreg free
 21768  00242E  0560               	decf	?_fifo_read& (0+255),w,b
 21769  002430  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21770  002432  E1ED               	bnz	l16266
 21771                           
 21772                           ; BSR set to: 0
 21773                           ;main.c: 3077: }
 21774                           ;main.c: 3080: if ( *pdlc > 8 ) {
 21775  002434  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21776  002436  6ED9               	movwf	fsr2l,c
 21777  002438  6ADA               	clrf	fsr2h,c
 21778  00243A  0E08               	movlw	8
 21779  00243C  64DF               	cpfsgt	indf2,c
 21780  00243E  D004               	goto	l16284
 21781                           
 21782                           ; BSR set to: 0
 21783                           ;main.c: 3081: *pdlc = 0;
 21784  002440  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21785  002442  6ED9               	movwf	fsr2l,c
 21786  002444  6ADA               	clrf	fsr2h,c
 21787  002446  6ADF               	clrf	indf2,c
 21788  002448                     l16284:
 21789                           
 21790                           ; BSR set to: 0
 21791                           ;main.c: 3082: }
 21792                           ;main.c: 3085: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21793  002448  0E01               	movlw	high _canInputFifo
 21794  00244A  0100               	movlb	0	; () banked
 21795  00244C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21796  00244E  0EC7               	movlw	low _canInputFifo
 21797  002450  6F60               	movwf	?_fifo_read& (0+255),b
 21798  002452  C06F  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21799  002456  C070  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21800  00245A  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21801  00245C  6ED9               	movwf	fsr2l,c
 21802  00245E  6ADA               	clrf	fsr2h,c
 21803  002460  50DF               	movf	indf2,w,c
 21804  002462  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21805  002464  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21806  002466  ECB6  F015         	call	_fifo_read	;wreg free
 21807  00246A  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21808  00246C  6ED9               	movwf	fsr2l,c
 21809  00246E  6ADA               	clrf	fsr2h,c
 21810  002470  50DF               	movf	indf2,w,c
 21811  002472  1960               	xorwf	?_fifo_read& (0+255),w,b
 21812  002474  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21813  002476  E1CB               	bnz	l16266
 21814                           
 21815                           ; BSR set to: 0
 21816                           ;main.c: 3088: }
 21817                           ;main.c: 3090: fifo_canrxcount--;
 21818  002478  0634               	decf	_fifo_canrxcount,f,c	;volatile
 21819                           
 21820                           ; BSR set to: 0
 21821                           ;main.c: 3092: (INTCONbits.GIE = 1);
 21822  00247A  8EF2               	bsf	intcon,7,c	;volatile
 21823                           
 21824                           ; BSR set to: 0
 21825                           ;main.c: 3094: return 1;
 21826  00247C  0E01               	movlw	1
 21827  00247E                     l1296:
 21828                           
 21829                           ; BSR set to: 0
 21830  00247E  0012               	return	
 21831  002480                     __end_of_getCANFrame:
 21832                           	opt stack 0
 21833                           tblptru	equ	0xFF8
 21834                           tblptrh	equ	0xFF7
 21835                           tblptrl	equ	0xFF6
 21836                           tablat	equ	0xFF5
 21837                           prodh	equ	0xFF4
 21838                           prodl	equ	0xFF3
 21839                           intcon	equ	0xFF2
 21840                           indf0	equ	0xFEF
 21841                           postinc0	equ	0xFEE
 21842                           fsr0h	equ	0xFEA
 21843                           fsr0l	equ	0xFE9
 21844                           wreg	equ	0xFE8
 21845                           indf1	equ	0xFE7
 21846                           postinc1	equ	0xFE6
 21847                           postdec1	equ	0xFE5
 21848                           fsr1h	equ	0xFE2
 21849                           fsr1l	equ	0xFE1
 21850                           indf2	equ	0xFDF
 21851                           postinc2	equ	0xFDE
 21852                           postdec2	equ	0xFDD
 21853                           plusw2	equ	0xFDB
 21854                           fsr2h	equ	0xFDA
 21855                           fsr2l	equ	0xFD9
 21856                           status	equ	0xFD8
 21857                           
 21858 ;; *************** function _fifo_read *****************
 21859 ;; Defined at:
 21860 ;;		line 29 in file "fifo.c"
 21861 ;; Parameters:    Size  Location     Type
 21862 ;;  f               2    0[BANK0 ] PTR struct .
 21863 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21864 ;;  buf             2    2[BANK0 ] PTR const void 
 21865 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21866 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21867 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21868 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21869 ;;  nbytes          2    4[BANK0 ] unsigned short 
 21870 ;; Auto vars:     Size  Location     Type
 21871 ;;  i               2   12[BANK0 ] unsigned short 
 21872 ;;  p               2   10[BANK0 ] PTR unsigned char 
 21873 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21874 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21875 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21876 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21877 ;; Return value:  Size  Location     Type
 21878 ;;                  2    0[BANK0 ] unsigned short 
 21879 ;; Registers used:
 21880 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21881 ;; Tracked objects:
 21882 ;;		On entry : F/0
 21883 ;;		On exit  : F/0
 21884 ;;		Unchanged: 0/0
 21885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21886 ;;      Params:         0       6       0       0       0       0       0
 21887 ;;      Locals:         0       4       0       0       0       0       0
 21888 ;;      Temps:          0       4       0       0       0       0       0
 21889 ;;      Totals:         0      14       0       0       0       0       0
 21890 ;;Total ram usage:       14 bytes
 21891 ;; Hardware stack levels used:    1
 21892 ;; Hardware stack levels required when called:    3
 21893 ;; This function calls:
 21894 ;;		Nothing
 21895 ;; This function is called by:
 21896 ;;		_main
 21897 ;;		_doModeVerbose
 21898 ;;		_doModeVscp
 21899 ;;		_doModeSLCAN
 21900 ;;		_getCANFrame
 21901 ;; This function uses a non-reentrant model
 21902 ;;
 21903                           
 21904                           	psect	text55
 21905  002B6C                     __ptext55:
 21906                           	opt stack 0
 21907  002B6C                     _fifo_read:
 21908                           	opt stack 23
 21909                           
 21910                           ; BSR set to: 0
 21911                           ;fifo.c: 30: uint16_t i;
 21912                           ;fifo.c: 31: uint8_t *p;
 21913                           ;fifo.c: 32: p = buf;
 21914                           
 21915                           ; BSR set to: 0
 21916                           ;incstack = 0
 21917                           ;incstack = 0
 21918  002B6C  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 21919  002B70  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 21920                           
 21921                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21922  002B74  6B6C               	clrf	fifo_read@i& (0+255),b
 21923  002B76  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 21924  002B78  D04A               	goto	l10292
 21925  002B7A                     l10278:
 21926                           
 21927                           ; BSR set to: 0
 21928                           ;fifo.c: 36: if ( f->tail != f->head ) {
 21929  002B7A  EE20 F002          	lfsr	2,2
 21930  002B7E  D851               	call	PL34	;call to abstracted procedure
 21931  002B80  18E5               	xorwf	postdec1,w,c
 21932  002B82  CFDF FFE8          	movff	indf2,wreg
 21933  002B86  B4D8               	btfsc	status,2,c
 21934  002B88  18E7               	xorwf	indf1,w,c
 21935  002B8A  E03A               	bz	l1547
 21936                           
 21937                           ; BSR set to: 0
 21938                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21939  002B8C  EE20 F004          	lfsr	2,4
 21940  002B90  5160               	movf	fifo_read@f& (0+255),w,b
 21941  002B92  26D9               	addwf	fsr2l,f,c
 21942  002B94  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21943  002B96  22DA               	addwfc	fsr2h,f,c
 21944  002B98  CFDE F066          	movff	postinc2,??_fifo_read
 21945  002B9C  CFDD F067          	movff	postdec2,??_fifo_read+1
 21946  002BA0  C060  FFD9         	movff	fifo_read@f,fsr2l
 21947  002BA4  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 21948  002BA8  CFDE F068          	movff	postinc2,??_fifo_read+2
 21949  002BAC  CFDD F069          	movff	postdec2,??_fifo_read+3
 21950  002BB0  5166               	movf	??_fifo_read& (0+255),w,b
 21951  002BB2  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 21952  002BB4  6ED9               	movwf	fsr2l,c
 21953  002BB6  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 21954  002BB8  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21955  002BBA  6EDA               	movwf	fsr2h,c
 21956  002BBC  C06A  FFE1         	movff	fifo_read@p,fsr1l
 21957  002BC0  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 21958  002BC4  CFDF FFE7          	movff	indf2,indf1
 21959                           
 21960                           ; BSR set to: 0
 21961  002BC8  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 21962  002BCA  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 21963                           
 21964                           ; BSR set to: 0
 21965                           ;fifo.c: 38: f->tail++;
 21966  002BCC  EE20 F004          	lfsr	2,4
 21967  002BD0  5160               	movf	fifo_read@f& (0+255),w,b
 21968  002BD2  26D9               	addwf	fsr2l,f,c
 21969  002BD4  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21970  002BD6  22DA               	addwfc	fsr2h,f,c
 21971  002BD8  2ADE               	incf	postinc2,f,c
 21972  002BDA  0E00               	movlw	0
 21973  002BDC  22DD               	addwfc	postdec2,f,c
 21974                           
 21975                           ; BSR set to: 0
 21976                           ;fifo.c: 39: if (f->tail >= f->size) {
 21977  002BDE  EE20 F006          	lfsr	2,6
 21978  002BE2  D81F               	call	PL34	;call to abstracted procedure
 21979  002BE4  5CE5               	subwf	postdec1,w,c
 21980  002BE6  E102               	bnz	u12555
 21981  002BE8  50DF               	movf	indf2,w,c
 21982  002BEA  5CE7               	subwf	indf1,w,c
 21983  002BEC                     u12555:
 21984  002BEC  E30E               	bnc	l10290
 21985                           
 21986                           ; BSR set to: 0
 21987                           ;fifo.c: 40: f->tail = 0;
 21988  002BEE  EE20 F004          	lfsr	2,4
 21989  002BF2  5160               	movf	fifo_read@f& (0+255),w,b
 21990  002BF4  26D9               	addwf	fsr2l,f,c
 21991  002BF6  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21992  002BF8  22DA               	addwfc	fsr2h,f,c
 21993  002BFA  6ADE               	clrf	postinc2,c
 21994  002BFC  6ADD               	clrf	postdec2,c
 21995  002BFE  D005               	goto	l10290
 21996  002C00                     l1547:
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;fifo.c: 43: else {
 22000                           ;fifo.c: 44: return i;
 22001  002C00  C06C  F060         	movff	fifo_read@i,?_fifo_read
 22002  002C04  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 22003  002C08  D00B               	goto	l1550
 22004  002C0A                     l10290:
 22005                           
 22006                           ; BSR set to: 0
 22007  002C0A  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 22008  002C0C  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 22009  002C0E                     l10292:
 22010                           
 22011                           ; BSR set to: 0
 22012  002C0E  5164               	movf	fifo_read@nbytes& (0+255),w,b
 22013  002C10  5D6C               	subwf	fifo_read@i& (0+255),w,b
 22014  002C12  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 22015  002C14  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 22016  002C16  E3B1               	bnc	l10278
 22017                           
 22018                           ; BSR set to: 0
 22019                           ;fifo.c: 45: }
 22020                           ;fifo.c: 47: }
 22021                           ;fifo.c: 49: return nbytes;
 22022  002C18  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 22023  002C1C  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 22024  002C20                     l1550:
 22025                           
 22026                           ; BSR set to: 0
 22027  002C20  0012               	return	
 22028  002C22                     __end_of_fifo_read:
 22029                           	opt stack 0
 22030  002C22                     PL34:
 22031                           	opt stack 23
 22032  002C22  5160               	movf	fifo_read@f& (0+255),w,b
 22033  002C24  26D9               	addwf	fsr2l,f,c
 22034  002C26  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22035  002C28  22DA               	addwfc	fsr2h,f,c
 22036  002C2A  EE10 F004          	lfsr	1,4
 22037  002C2E  5160               	movf	fifo_read@f& (0+255),w,b
 22038  002C30  26E1               	addwf	fsr1l,f,c
 22039  002C32  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 22040  002C34  22E2               	addwfc	fsr1h,f,c
 22041  002C36  52E6               	movf	postinc1,f,c
 22042  002C38  52DE               	movf	postinc2,f,c
 22043  002C3A  50DD               	movf	postdec2,w,c
 22044  002C3C  0012               	return	
 22045  002C3E                     __end_ofPL34:
 22046                           	opt stack 0
 22047                           tblptru	equ	0xFF8
 22048                           tblptrh	equ	0xFF7
 22049                           tblptrl	equ	0xFF6
 22050                           tablat	equ	0xFF5
 22051                           prodh	equ	0xFF4
 22052                           prodl	equ	0xFF3
 22053                           intcon	equ	0xFF2
 22054                           indf0	equ	0xFEF
 22055                           postinc0	equ	0xFEE
 22056                           fsr0h	equ	0xFEA
 22057                           fsr0l	equ	0xFE9
 22058                           wreg	equ	0xFE8
 22059                           indf1	equ	0xFE7
 22060                           postinc1	equ	0xFE6
 22061                           postdec1	equ	0xFE5
 22062                           fsr1h	equ	0xFE2
 22063                           fsr1l	equ	0xFE1
 22064                           indf2	equ	0xFDF
 22065                           postinc2	equ	0xFDE
 22066                           postdec2	equ	0xFDD
 22067                           plusw2	equ	0xFDB
 22068                           fsr2h	equ	0xFDA
 22069                           fsr2l	equ	0xFD9
 22070                           status	equ	0xFD8
 22071                           
 22072 ;; *************** function _sprintf *****************
 22073 ;; Defined at:
 22074 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 22075 ;; Parameters:    Size  Location     Type
 22076 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 22077 ;;		 -> wrkbuf(80), 
 22078 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 22079 ;;		 -> STR_209(3), STR_208(7), STR_202(3), STR_201(7), 
 22080 ;;		 -> STR_198(4), STR_197(8), STR_194(4), STR_193(8), 
 22081 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 22082 ;;		 -> STR_182(4), STR_181(7), STR_178(4), STR_177(7), 
 22083 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 22084 ;;		 -> STR_164(3), STR_163(7), STR_161(3), STR_160(7), 
 22085 ;;		 -> STR_158(3), STR_157(7), STR_155(3), STR_154(7), 
 22086 ;;		 -> STR_152(3), STR_151(7), STR_149(3), STR_148(7), 
 22087 ;;		 -> STR_92(3), STR_91(7), STR_76(3), STR_75(7), 
 22088 ;;		 -> STR_74(3), STR_73(7), STR_71(6), STR_70(10), 
 22089 ;;		 -> STR_65(3), STR_64(7), STR_62(3), STR_61(7), 
 22090 ;;		 -> STR_60(3), STR_59(7), STR_57(6), STR_56(10), 
 22091 ;; Auto vars:     Size  Location     Type
 22092 ;;  idx             1   33[BANK0 ] unsigned char 
 22093 ;;  _val            4   45[BANK0 ] struct .
 22094 ;;  flag            2   50[BANK0 ] unsigned short 
 22095 ;;  width           2   43[BANK0 ] int 
 22096 ;;  prec            2   41[BANK0 ] int 
 22097 ;;  c               1   49[BANK0 ] char 
 22098 ;;  ap              1   40[BANK0 ] PTR void [1]
 22099 ;;		 -> ?_sprintf(2), 
 22100 ;; Return value:  Size  Location     Type
 22101 ;;                  2   22[BANK0 ] int 
 22102 ;; Registers used:
 22103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22104 ;; Tracked objects:
 22105 ;;		On entry : F/0
 22106 ;;		On exit  : F/0
 22107 ;;		Unchanged: 0/0
 22108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22109 ;;      Params:         0       8       0       0       0       0       0
 22110 ;;      Locals:         0      19       0       0       0       0       0
 22111 ;;      Temps:          0       3       0       0       0       0       0
 22112 ;;      Totals:         0      30       0       0       0       0       0
 22113 ;;Total ram usage:       30 bytes
 22114 ;; Hardware stack levels used:    1
 22115 ;; Hardware stack levels required when called:    4
 22116 ;; This function calls:
 22117 ;;		_isdigit
 22118 ;;		___lldiv
 22119 ;;		___llmod
 22120 ;;		___wmul
 22121 ;; This function is called by:
 22122 ;;		_doModeVerbose
 22123 ;;		_receivePrintEventVerbose
 22124 ;;		_printStatistics
 22125 ;;		_printErrors
 22126 ;; This function uses a non-reentrant model
 22127 ;;
 22128                           
 22129                           	psect	text56
 22130  00507A                     __ptext56:
 22131                           	opt stack 0
 22132  00507A                     _sprintf:
 22133                           	opt stack 24
 22134                           
 22135                           ; BSR set to: 0
 22136                           ;doprnt.c: 494: va_list ap;
 22137                           ;doprnt.c: 499: signed char c;
 22138                           ;doprnt.c: 501: int width;
 22139                           ;doprnt.c: 504: int prec;
 22140                           ;doprnt.c: 508: unsigned short flag;
 22141                           ;doprnt.c: 527: union {
 22142                           ;doprnt.c: 528: unsigned long _val;
 22143                           ;doprnt.c: 529: struct {
 22144                           ;doprnt.c: 530: const char * _cp;
 22145                           ;doprnt.c: 531: unsigned _len;
 22146                           ;doprnt.c: 532: } _str;
 22147                           ;doprnt.c: 533: } _val;
 22148                           ;doprnt.c: 542: *ap = __va_start();
 22149                           
 22150                           ; BSR set to: 0
 22151                           ;incstack = 0
 22152                           ;incstack = 0
 22153  00507A  0E7A               	movlw	low (?_sprintf+4)
 22154  00507C  6F88               	movwf	sprintf@ap& (0+255),b
 22155                           
 22156                           ;doprnt.c: 545: while(c = *f++) {
 22157  00507E  D32C               	goto	l15622
 22158  005080                     l15288:
 22159                           
 22160                           ; BSR set to: 0
 22161                           ;doprnt.c: 547: if(c != '%')
 22162  005080  5191               	movf	sprintf@c& (0+255),w,b
 22163  005082  0A25               	xorlw	37
 22164  005084  E009               	bz	l1634
 22165                           
 22166                           ; BSR set to: 0
 22167                           ;doprnt.c: 549: {
 22168                           ;doprnt.c: 550: ((*sp++ = (c)));
 22169  005086  C076  FFD9         	movff	sprintf@sp,fsr2l
 22170  00508A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22171  00508E  C091  FFDF         	movff	sprintf@c,indf2
 22172                           
 22173                           ; BSR set to: 0
 22174  005092  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22175  005094  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22176                           
 22177                           ;doprnt.c: 551: continue;
 22178  005096  D320               	goto	l15622
 22179  005098                     l1634:
 22180                           
 22181                           ; BSR set to: 0
 22182                           ;doprnt.c: 552: }
 22183                           ;doprnt.c: 555: width = 0;
 22184  005098  6B8B               	clrf	sprintf@width& (0+255),b
 22185  00509A  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22186                           
 22187                           ;doprnt.c: 557: flag = 0;
 22188  00509C  6B92               	clrf	sprintf@flag& (0+255),b
 22189  00509E  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22190  0050A0  D009               	goto	l15304
 22191  0050A2                     l15294:
 22192                           
 22193                           ; BSR set to: 0
 22194                           ;doprnt.c: 563: flag |= 0x08;
 22195  0050A2  8792               	bsf	sprintf@flag& (0+255),3,b
 22196  0050A4  D005               	goto	L36
 22197  0050A6                     l15296:
 22198                           
 22199                           ; BSR set to: 0
 22200                           ;doprnt.c: 570: flag |= 0x01;
 22201  0050A6  8192               	bsf	sprintf@flag& (0+255),0,b
 22202  0050A8  D003               	goto	L36
 22203  0050AA                     l15298:
 22204                           
 22205                           ; BSR set to: 0
 22206                           ;doprnt.c: 583: flag |= 0x800;
 22207  0050AA  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22208  0050AC  D001               	goto	L36
 22209  0050AE                     l15300:
 22210                           
 22211                           ; BSR set to: 0
 22212                           ;doprnt.c: 589: flag |= 0x04;
 22213  0050AE  8592               	bsf	sprintf@flag& (0+255),2,b
 22214  0050B0                     L36:
 22215                           
 22216                           ;doprnt.c: 590: f++;
 22217  0050B0  4B78               	infsnz	sprintf@f& (0+255),f,b
 22218  0050B2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22219  0050B4                     l15304:
 22220                           
 22221                           ; BSR set to: 0
 22222  0050B4  C078  FFF6         	movff	sprintf@f,tblptrl
 22223  0050B8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22224  0050BC  0008               	tblrd		*
 22225  0050BE  50F5               	movf	tablat,w,c
 22226                           
 22227                           ; Switch size 1, requested type "space"
 22228                           ; Number of cases is 4, Range of values is 32 to 48
 22229                           ; switch strategies available:
 22230                           ; Name         Instructions Cycles
 22231                           ; simple_byte           13     7 (average)
 22232                           ;	Chosen strategy is simple_byte
 22233  0050C0  0A20               	xorlw	32	; case 32
 22234  0050C2  E0F1               	bz	l15296
 22235  0050C4  0A03               	xorlw	3	; case 35
 22236  0050C6  E0F1               	bz	l15298
 22237  0050C8  0A0E               	xorlw	14	; case 45
 22238  0050CA  E0EB               	bz	l15294
 22239  0050CC  0A1D               	xorlw	29	; case 48
 22240  0050CE  E0EF               	bz	l15300
 22241                           
 22242                           ; BSR set to: 0
 22243                           ;doprnt.c: 602: if(flag & 0x08)
 22244  0050D0  B792               	btfsc	sprintf@flag& (0+255),3,b
 22245                           
 22246                           ; BSR set to: 0
 22247                           ;doprnt.c: 603: flag &= ~0x04;
 22248  0050D2  9592               	bcf	sprintf@flag& (0+255),2,b
 22249                           
 22250                           ; BSR set to: 0
 22251                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22252  0050D4  C078  FFF6         	movff	sprintf@f,tblptrl
 22253  0050D8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22254  0050DC  0008               	tblrd		*
 22255  0050DE  50F5               	movf	tablat,w,c
 22256  0050E0  EC33  F00B         	call	_isdigit
 22257  0050E4  E325               	bnc	l15320
 22258                           
 22259                           ; BSR set to: 0
 22260                           ;doprnt.c: 607: width = 0;
 22261  0050E6  6B8B               	clrf	sprintf@width& (0+255),b
 22262  0050E8  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22263  0050EA                     l15312:
 22264                           
 22265                           ; BSR set to: 0
 22266                           ;doprnt.c: 609: width *= 10;
 22267  0050EA  C08B  F060         	movff	sprintf@width,?___wmul
 22268  0050EE  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22269  0050F2  6B63               	clrf	(?___wmul+3)& (0+255),b
 22270  0050F4  0E0A               	movlw	10
 22271  0050F6  6F62               	movwf	(?___wmul+2)& (0+255),b
 22272  0050F8  EC88  F00B         	call	___wmul	;wreg free
 22273  0050FC  C060  F08B         	movff	?___wmul,sprintf@width
 22274  005100  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22275                           
 22276                           ; BSR set to: 0
 22277                           ;doprnt.c: 610: width += *f++ - '0';
 22278  005104  C078  FFF6         	movff	sprintf@f,tblptrl
 22279  005108  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22280  00510C  0008               	tblrd		*
 22281  00510E  CFF5 F07E          	movff	tablat,??_sprintf
 22282  005112  0ED0               	movlw	208
 22283  005114  257E               	addwf	??_sprintf& (0+255),w,b
 22284  005116  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22285  005118  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22286  00511A  0EFF               	movlw	255
 22287  00511C  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22288  00511E  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22289  005120  278B               	addwf	sprintf@width& (0+255),f,b
 22290  005122  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22291  005124  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22292                           
 22293                           ; BSR set to: 0
 22294                           
 22295                           ; BSR set to: 0
 22296                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22297  005126  DB36               	call	PL76	;call to abstracted procedure
 22298  005128  EC33  F00B         	call	_isdigit
 22299  00512C  E314               	bnc	l15328
 22300  00512E  D7DD               	goto	l15312
 22301  005130                     l15320:
 22302                           
 22303                           ; BSR set to: 0
 22304  005130  C078  FFF6         	movff	sprintf@f,tblptrl
 22305  005134  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22306  005138  0008               	tblrd		*
 22307  00513A  50F5               	movf	tablat,w,c
 22308  00513C  0A2A               	xorlw	42
 22309  00513E  E10B               	bnz	l15328
 22310                           
 22311                           ; BSR set to: 0
 22312                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22313  005140  5188               	movf	sprintf@ap& (0+255),w,b
 22314  005142  6ED9               	movwf	fsr2l,c
 22315  005144  6ADA               	clrf	fsr2h,c
 22316  005146  CFDE F08B          	movff	postinc2,sprintf@width
 22317  00514A  CFDD F08C          	movff	postdec2,sprintf@width+1
 22318                           
 22319                           ; BSR set to: 0
 22320  00514E  0E02               	movlw	2
 22321  005150  2788               	addwf	sprintf@ap& (0+255),f,b
 22322                           
 22323                           ; BSR set to: 0
 22324                           ;doprnt.c: 615: f++;
 22325  005152  4B78               	infsnz	sprintf@f& (0+255),f,b
 22326  005154  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22327  005156                     l15328:
 22328                           
 22329                           ; BSR set to: 0
 22330                           ;doprnt.c: 617: }
 22331                           ;doprnt.c: 620: if(*f == '.') {
 22332  005156  C078  FFF6         	movff	sprintf@f,tblptrl
 22333  00515A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22334  00515E  0008               	tblrd		*
 22335  005160  50F5               	movf	tablat,w,c
 22336  005162  0A2E               	xorlw	46
 22337  005164  E137               	bnz	l1650
 22338                           
 22339                           ; BSR set to: 0
 22340                           ;doprnt.c: 621: flag |= 0x4000;
 22341  005166  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22342                           
 22343                           ;doprnt.c: 622: f++;
 22344                           
 22345                           ; BSR set to: 0
 22346                           ;doprnt.c: 624: if(*f == '*') {
 22347  005168  DB15               	call	PL76	;call to abstracted procedure
 22348  00516A  0A2A               	xorlw	42
 22349  00516C  E10C               	bnz	l1651
 22350                           
 22351                           ; BSR set to: 0
 22352                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22353  00516E  5188               	movf	sprintf@ap& (0+255),w,b
 22354  005170  6ED9               	movwf	fsr2l,c
 22355  005172  6ADA               	clrf	fsr2h,c
 22356  005174  CFDE F089          	movff	postinc2,sprintf@prec
 22357  005178  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22358                           
 22359                           ; BSR set to: 0
 22360  00517C  0E02               	movlw	2
 22361  00517E  2788               	addwf	sprintf@ap& (0+255),f,b
 22362                           
 22363                           ; BSR set to: 0
 22364                           ;doprnt.c: 626: f++;
 22365  005180  4B78               	infsnz	sprintf@f& (0+255),f,b
 22366  005182  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22367                           
 22368                           ;doprnt.c: 627: } else
 22369  005184  D088               	goto	l15398
 22370  005186                     l1651:
 22371                           
 22372                           ; BSR set to: 0
 22373                           ;doprnt.c: 629: {
 22374                           ;doprnt.c: 630: prec = 0;
 22375  005186  6B89               	clrf	sprintf@prec& (0+255),b
 22376  005188  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22377                           
 22378                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22379  00518A  D01A               	goto	l15344
 22380  00518C                     l15340:
 22381                           
 22382                           ; BSR set to: 0
 22383                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22384  00518C  C089  F060         	movff	sprintf@prec,?___wmul
 22385  005190  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22386  005194  6B63               	clrf	(?___wmul+3)& (0+255),b
 22387  005196  0E0A               	movlw	10
 22388  005198  6F62               	movwf	(?___wmul+2)& (0+255),b
 22389  00519A  EC88  F00B         	call	___wmul	;wreg free
 22390  00519E  C078  FFF6         	movff	sprintf@f,tblptrl
 22391  0051A2  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22392  0051A6  0008               	tblrd		*
 22393  0051A8  50F5               	movf	tablat,w,c
 22394  0051AA  2760               	addwf	?___wmul& (0+255),f,b
 22395  0051AC  0E00               	movlw	0
 22396  0051AE  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22397  0051B0  0ED0               	movlw	208
 22398  0051B2  2560               	addwf	?___wmul& (0+255),w,b
 22399  0051B4  6F89               	movwf	sprintf@prec& (0+255),b
 22400  0051B6  0EFF               	movlw	255
 22401  0051B8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22402  0051BA  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22403                           
 22404                           ; BSR set to: 0
 22405  0051BC  4B78               	infsnz	sprintf@f& (0+255),f,b
 22406  0051BE  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22407  0051C0                     l15344:
 22408                           
 22409                           ; BSR set to: 0
 22410  0051C0  C078  FFF6         	movff	sprintf@f,tblptrl
 22411  0051C4  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22412  0051C8  0008               	tblrd		*
 22413  0051CA  50F5               	movf	tablat,w,c
 22414  0051CC  EC33  F00B         	call	_isdigit
 22415  0051D0  E362               	bnc	l15398
 22416  0051D2  D7DC               	goto	l15340
 22417  0051D4                     l1650:
 22418                           
 22419                           ; BSR set to: 0
 22420                           ;doprnt.c: 635: prec = 0;
 22421  0051D4  6B89               	clrf	sprintf@prec& (0+255),b
 22422  0051D6  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22423  0051D8  D05E               	goto	l15398
 22424  0051DA                     l15346:
 22425                           
 22426                           ; BSR set to: 0
 22427                           ;doprnt.c: 652: flag |= 0x10;
 22428  0051DA  8992               	bsf	sprintf@flag& (0+255),4,b
 22429                           
 22430                           ;doprnt.c: 653: goto loop;
 22431  0051DC  D05C               	goto	l15398
 22432  0051DE                     l15348:
 22433                           
 22434                           ; BSR set to: 0
 22435                           ;doprnt.c: 700: flag |= 0x40;
 22436  0051DE  8D92               	bsf	sprintf@flag& (0+255),6,b
 22437                           
 22438                           ;doprnt.c: 702: break;
 22439  0051E0  D06F               	goto	l15400
 22440  0051E2                     l15350:
 22441                           
 22442                           ; BSR set to: 0
 22443                           ;doprnt.c: 723: flag |= 0x20;
 22444  0051E2  8B92               	bsf	sprintf@flag& (0+255),5,b
 22445  0051E4                     l1667:
 22446                           
 22447                           ; BSR set to: 0
 22448                           ;doprnt.c: 730: flag |= 0x80;
 22449  0051E4  8F92               	bsf	sprintf@flag& (0+255),7,b
 22450                           
 22451                           ;doprnt.c: 732: break;
 22452  0051E6  D06C               	goto	l15400
 22453  0051E8                     l15352:
 22454                           
 22455                           ; BSR set to: 0
 22456                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22457  0051E8  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22458  0051EA  1189               	iorwf	sprintf@prec& (0+255),w,b
 22459  0051EC  E009               	bz	l15358
 22460                           
 22461                           ; BSR set to: 0
 22462  0051EE  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22463  0051F0  5D89               	subwf	sprintf@prec& (0+255),w,b
 22464  0051F2  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22465  0051F4  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22466  0051F6  E204               	bc	l15358
 22467                           
 22468                           ; BSR set to: 0
 22469                           ;doprnt.c: 763: _val._str._len = prec;
 22470  0051F8  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22471  0051FC  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22472  005200                     l15358:
 22473                           
 22474                           ; BSR set to: 0
 22475                           ;doprnt.c: 766: if(width > _val._str._len)
 22476  005200  518B               	movf	sprintf@width& (0+255),w,b
 22477  005202  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22478  005204  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22479  005206  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22480  005208  E207               	bc	l1670
 22481                           
 22482                           ; BSR set to: 0
 22483                           ;doprnt.c: 767: width -= _val._str._len;
 22484  00520A  EE20  F08E         	lfsr	2,sprintf@_val+1
 22485  00520E  50DE               	movf	postinc2,w,c
 22486  005210  5F8B               	subwf	sprintf@width& (0+255),f,b
 22487  005212  50DD               	movf	postdec2,w,c
 22488  005214  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22489  005216  D002               	goto	l1671
 22490  005218                     l1670:
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;doprnt.c: 768: else
 22494                           ;doprnt.c: 769: width = 0;
 22495  005218  6B8B               	clrf	sprintf@width& (0+255),b
 22496  00521A  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22497  00521C                     l1671:
 22498                           
 22499                           ; BSR set to: 0
 22500                           ;doprnt.c: 771: if(!(flag & 0x08))
 22501  00521C  A792               	btfss	sprintf@flag& (0+255),3,b
 22502  00521E  D004               	goto	l15368
 22503  005220  D015               	goto	l15376
 22504  005222                     l15364:
 22505                           
 22506                           ; BSR set to: 0
 22507                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22508  005222  DAB1               	call	PL62	;call to abstracted procedure
 22509                           
 22510                           ; BSR set to: 0
 22511  005224  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22512  005226  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22513  005228                     l15368:
 22514                           
 22515                           ; BSR set to: 0
 22516  005228  078B               	decf	sprintf@width& (0+255),f,b
 22517  00522A  DAC2               	call	PL98	;call to abstracted procedure
 22518  00522C  B4D8               	btfsc	status,2,c
 22519  00522E  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22520  005230  E00D               	bz	l15376
 22521  005232  D7F7               	goto	l15364
 22522  005234                     l15370:
 22523                           
 22524                           ; BSR set to: 0
 22525                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22526  005234  518D               	movf	sprintf@_val& (0+255),w,b
 22527  005236  6ED9               	movwf	fsr2l,c
 22528  005238  6ADA               	clrf	fsr2h,c
 22529  00523A  C076  FFE1         	movff	sprintf@sp,fsr1l
 22530  00523E  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22531  005242  CFDF FFE7          	movff	indf2,indf1
 22532                           
 22533                           ; BSR set to: 0
 22534  005246  2B8D               	incf	sprintf@_val& (0+255),f,b
 22535                           
 22536                           ; BSR set to: 0
 22537  005248  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22538  00524A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22539  00524C                     l15376:
 22540                           
 22541                           ; BSR set to: 0
 22542  00524C  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22543  00524E  A0D8               	btfss	status,0,c
 22544  005250  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22545  005252  0100               	movlb	0	; () banked
 22546  005254  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22547  005256  B4D8               	btfsc	status,2,c
 22548  005258  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22549  00525A  E1EC               	bnz	l15370
 22550                           
 22551                           ; BSR set to: 0
 22552                           ;doprnt.c: 779: if(flag & 0x08)
 22553  00525C  B792               	btfsc	sprintf@flag& (0+255),3,b
 22554  00525E  D004               	goto	l15384
 22555  005260  D23B               	goto	l15622
 22556  005262                     l15380:
 22557                           
 22558                           ; BSR set to: 0
 22559                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22560  005262  DA91               	call	PL62	;call to abstracted procedure
 22561                           
 22562                           ; BSR set to: 0
 22563  005264  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22564  005266  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22565  005268                     l15384:
 22566                           
 22567                           ; BSR set to: 0
 22568  005268  078B               	decf	sprintf@width& (0+255),f,b
 22569  00526A  DAA2               	call	PL98	;call to abstracted procedure
 22570  00526C  B4D8               	btfsc	status,2,c
 22571  00526E  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22572  005270  E101 D232          	bz	l15622
 22573  005274  D7F6               	goto	l15380
 22574  005276                     l15386:
 22575                           
 22576                           ; BSR set to: 0
 22577                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22578  005276  5188               	movf	sprintf@ap& (0+255),w,b
 22579  005278  6ED9               	movwf	fsr2l,c
 22580  00527A  6ADA               	clrf	fsr2h,c
 22581  00527C  50DF               	movf	indf2,w,c
 22582  00527E  6F91               	movwf	sprintf@c& (0+255),b
 22583                           
 22584                           ; BSR set to: 0
 22585  005280  0E02               	movlw	2
 22586  005282  2788               	addwf	sprintf@ap& (0+255),f,b
 22587  005284                     l15390:
 22588                           
 22589                           ; BSR set to: 0
 22590                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22591  005284  0E91               	movlw	low sprintf@c
 22592  005286  6F8D               	movwf	sprintf@_val& (0+255),b
 22593                           
 22594                           ; BSR set to: 0
 22595                           ;doprnt.c: 815: _val._str._len = 1;
 22596  005288  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22597  00528A  0E01               	movlw	1
 22598  00528C  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22599                           
 22600                           ;doprnt.c: 816: goto dostring;
 22601  00528E  D7AC               	goto	l15352
 22602  005290                     l15394:
 22603                           
 22604                           ; BSR set to: 0
 22605                           ;doprnt.c: 827: flag |= 0xC0;
 22606  005290  0EC0               	movlw	192
 22607  005292  1392               	iorwf	sprintf@flag& (0+255),f,b
 22608                           
 22609                           ;doprnt.c: 828: break;
 22610  005294  D015               	goto	l15400
 22611  005296                     l15398:
 22612                           
 22613                           ; BSR set to: 0
 22614  005296  DA6C               	call	PL58	;call to abstracted procedure
 22615  005298  5191               	movf	sprintf@c& (0+255),w,b
 22616                           
 22617                           ; Switch size 1, requested type "space"
 22618                           ; Number of cases is 9, Range of values is 0 to 120
 22619                           ; switch strategies available:
 22620                           ; Name         Instructions Cycles
 22621                           ; simple_byte           28    15 (average)
 22622                           ;	Chosen strategy is simple_byte
 22623  00529A  E101 D220          	bz	l15624
 22624  00529E  0A58               	xorlw	88	; case 88
 22625  0052A0  E0A0               	bz	l15350
 22626  0052A2  0A3B               	xorlw	59	; case 99
 22627  0052A4  E0E8               	bz	l15386
 22628  0052A6  0A07               	xorlw	7	; case 100
 22629  0052A8  E00B               	bz	l15400
 22630  0052AA  0A0D               	xorlw	13	; case 105
 22631  0052AC  E009               	bz	l15400
 22632  0052AE  0A05               	xorlw	5	; case 108
 22633  0052B0  E094               	bz	l15346
 22634  0052B2  0A03               	xorlw	3	; case 111
 22635  0052B4  E094               	bz	l15348
 22636  0052B6  0A1A               	xorlw	26	; case 117
 22637  0052B8  E0EB               	bz	l15394
 22638  0052BA  0A0D               	xorlw	13	; case 120
 22639  0052BC  E093               	bz	l1667
 22640  0052BE  D7E2               	goto	l15390
 22641  0052C0                     l15400:
 22642                           
 22643                           ; BSR set to: 0
 22644                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22645  0052C0  5192               	movf	sprintf@flag& (0+255),w,b
 22646  0052C2  0BC0               	andlw	192
 22647  0052C4  E120               	bnz	l1686
 22648                           
 22649                           ; BSR set to: 0
 22650                           ;doprnt.c: 1260: {
 22651                           ;doprnt.c: 1262: if(flag & 0x10)
 22652  0052C6  A992               	btfss	sprintf@flag& (0+255),4,b
 22653  0052C8  D003               	goto	l15408
 22654                           
 22655                           ; BSR set to: 0
 22656                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22657  0052CA  5188               	movf	sprintf@ap& (0+255),w,b
 22658                           
 22659                           ; BSR set to: 0
 22660  0052CC  DA46               	call	PL52	;call to abstracted procedure
 22661  0052CE  D00D               	goto	L37
 22662  0052D0                     l15408:
 22663                           
 22664                           ; BSR set to: 0
 22665                           ;doprnt.c: 1264: else
 22666                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22667  0052D0  5188               	movf	sprintf@ap& (0+255),w,b
 22668  0052D2  6ED9               	movwf	fsr2l,c
 22669  0052D4  6ADA               	clrf	fsr2h,c
 22670  0052D6  CFDE F08D          	movff	postinc2,sprintf@_val
 22671  0052DA  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22672  0052DE  0E00               	movlw	0
 22673  0052E0  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22674  0052E2  0EFF               	movlw	-1
 22675  0052E4  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22676  0052E6  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22677                           
 22678                           ; BSR set to: 0
 22679  0052E8  0E02               	movlw	2
 22680  0052EA                     L37:
 22681  0052EA  2788               	addwf	sprintf@ap& (0+255),f,b
 22682                           
 22683                           ; BSR set to: 0
 22684                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22685  0052EC  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22686  0052EE  D01F               	goto	l15426
 22687                           
 22688                           ; BSR set to: 0
 22689                           ;doprnt.c: 1269: flag |= 0x03;
 22690  0052F0  0E03               	movlw	3
 22691  0052F2  1392               	iorwf	sprintf@flag& (0+255),f,b
 22692                           
 22693                           ; BSR set to: 0
 22694                           ;doprnt.c: 1270: _val._val = -_val._val;
 22695  0052F4  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22696  0052F6  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22697  0052F8  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22698  0052FA  6D8D               	negf	sprintf@_val& (0+255),b
 22699  0052FC  0E00               	movlw	0
 22700  0052FE  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22701  005300  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22702  005302  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22703  005304  D014               	goto	l15426
 22704  005306                     l1686:
 22705                           
 22706                           ; BSR set to: 0
 22707                           ;doprnt.c: 1275: else
 22708                           ;doprnt.c: 1280: {
 22709                           ;doprnt.c: 1288: if(flag & 0x10)
 22710  005306  A992               	btfss	sprintf@flag& (0+255),4,b
 22711  005308  D003               	goto	l15422
 22712                           
 22713                           ; BSR set to: 0
 22714                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22715  00530A  5188               	movf	sprintf@ap& (0+255),w,b
 22716                           
 22717                           ; BSR set to: 0
 22718  00530C  DA26               	call	PL52	;call to abstracted procedure
 22719  00530E  D00E               	goto	L38
 22720  005310                     l15422:
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;doprnt.c: 1290: else
 22724                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22725  005310  5188               	movf	sprintf@ap& (0+255),w,b
 22726  005312  6ED9               	movwf	fsr2l,c
 22727  005314  6ADA               	clrf	fsr2h,c
 22728  005316  CFDE F07E          	movff	postinc2,??_sprintf
 22729  00531A  CFDD F07F          	movff	postdec2,??_sprintf+1
 22730  00531E  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22731  005322  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22732  005326  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22733  005328  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22734                           
 22735                           ; BSR set to: 0
 22736  00532A  0E02               	movlw	2
 22737  00532C                     L38:
 22738  00532C  2788               	addwf	sprintf@ap& (0+255),f,b
 22739  00532E                     l15426:
 22740                           
 22741                           ; BSR set to: 0
 22742                           ;doprnt.c: 1294: }
 22743                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22744  00532E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22745  005330  1189               	iorwf	sprintf@prec& (0+255),w,b
 22746  005332  E15C               	bnz	l15476
 22747                           
 22748                           ; BSR set to: 0
 22749  005334  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22750  005336  118D               	iorwf	sprintf@_val& (0+255),w,b
 22751  005338  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22752  00533A  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22753  00533C  E157               	bnz	l15476
 22754                           
 22755                           ; BSR set to: 0
 22756                           ;doprnt.c: 1298: prec++;
 22757  00533E  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22758  005340  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22759  005342  D054               	goto	l15476
 22760  005344                     l15432:
 22761                           
 22762                           ; BSR set to: 0
 22763                           ;doprnt.c: 1309: case 0xC0:
 22764                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22765  005344  0E01               	movlw	1
 22766  005346  6F91               	movwf	sprintf@c& (0+255),b
 22767  005348                     l15434:
 22768                           
 22769                           ; BSR set to: 0
 22770  005348  5191               	movf	sprintf@c& (0+255),w,b
 22771  00534A  0A0A               	xorlw	10
 22772  00534C  E058               	bz	l15478
 22773                           
 22774                           ; BSR set to: 0
 22775                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22776  00534E  5191               	movf	sprintf@c& (0+255),w,b
 22777  005350  0D04               	mullw	4
 22778  005352  0EBA               	movlw	low _dpowers
 22779  005354  24F3               	addwf	prodl,w,c
 22780  005356  6EF6               	movwf	tblptrl,c
 22781  005358  0E6C               	movlw	high _dpowers
 22782  00535A  20F4               	addwfc	prodh,w,c
 22783  00535C  6EF7               	movwf	tblptrh,c
 22784  00535E  0009               	tblrd		*+
 22785  005360  50F5               	movf	tablat,w,c
 22786  005362  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22787  005364  0009               	tblrd		*+
 22788  005366  50F5               	movf	tablat,w,c
 22789  005368  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22790  00536A  0009               	tblrd		*+
 22791  00536C  50F5               	movf	tablat,w,c
 22792  00536E  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22793  005370  0009               	tblrd		*+
 22794  005372  50F5               	movf	tablat,w,c
 22795  005374  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22796  005376  E343               	bnc	l15478
 22797                           
 22798                           ; BSR set to: 0
 22799  005378  2B91               	incf	sprintf@c& (0+255),f,b
 22800  00537A  D7E6               	goto	l15434
 22801  00537C                     l15446:
 22802                           
 22803                           ; BSR set to: 0
 22804                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22805  00537C  0E01               	movlw	1
 22806  00537E  6F91               	movwf	sprintf@c& (0+255),b
 22807  005380                     l15448:
 22808                           
 22809                           ; BSR set to: 0
 22810  005380  5191               	movf	sprintf@c& (0+255),w,b
 22811  005382  0A08               	xorlw	8
 22812  005384  E03C               	bz	l15478
 22813                           
 22814                           ; BSR set to: 0
 22815                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22816  005386  5191               	movf	sprintf@c& (0+255),w,b
 22817  005388  0D04               	mullw	4
 22818  00538A  0EE2               	movlw	low _hexpowers
 22819  00538C  24F3               	addwf	prodl,w,c
 22820  00538E  6EF6               	movwf	tblptrl,c
 22821  005390  0E6C               	movlw	high _hexpowers
 22822  005392  20F4               	addwfc	prodh,w,c
 22823  005394  6EF7               	movwf	tblptrh,c
 22824  005396  0009               	tblrd		*+
 22825  005398  50F5               	movf	tablat,w,c
 22826  00539A  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22827  00539C  0009               	tblrd		*+
 22828  00539E  50F5               	movf	tablat,w,c
 22829  0053A0  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22830  0053A2  0009               	tblrd		*+
 22831  0053A4  50F5               	movf	tablat,w,c
 22832  0053A6  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22833  0053A8  0009               	tblrd		*+
 22834  0053AA  50F5               	movf	tablat,w,c
 22835  0053AC  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22836  0053AE  E327               	bnc	l15478
 22837                           
 22838                           ; BSR set to: 0
 22839  0053B0  2B91               	incf	sprintf@c& (0+255),f,b
 22840  0053B2  D7E6               	goto	l15448
 22841  0053B4                     l15460:
 22842                           
 22843                           ; BSR set to: 0
 22844                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22845  0053B4  0E01               	movlw	1
 22846  0053B6  6F91               	movwf	sprintf@c& (0+255),b
 22847  0053B8                     l15462:
 22848                           
 22849                           ; BSR set to: 0
 22850  0053B8  5191               	movf	sprintf@c& (0+255),w,b
 22851  0053BA  0A0C               	xorlw	12
 22852  0053BC  E020               	bz	l15478
 22853                           
 22854                           ; BSR set to: 0
 22855                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22856  0053BE  5191               	movf	sprintf@c& (0+255),w,b
 22857  0053C0  0D04               	mullw	4
 22858  0053C2  0E8A               	movlw	low _octpowers
 22859  0053C4  24F3               	addwf	prodl,w,c
 22860  0053C6  6EF6               	movwf	tblptrl,c
 22861  0053C8  0E6C               	movlw	high _octpowers
 22862  0053CA  20F4               	addwfc	prodh,w,c
 22863  0053CC  6EF7               	movwf	tblptrh,c
 22864  0053CE  0009               	tblrd		*+
 22865  0053D0  50F5               	movf	tablat,w,c
 22866  0053D2  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22867  0053D4  0009               	tblrd		*+
 22868  0053D6  50F5               	movf	tablat,w,c
 22869  0053D8  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22870  0053DA  0009               	tblrd		*+
 22871  0053DC  50F5               	movf	tablat,w,c
 22872  0053DE  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22873  0053E0  0009               	tblrd		*+
 22874  0053E2  50F5               	movf	tablat,w,c
 22875  0053E4  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22876  0053E6  E30B               	bnc	l15478
 22877                           
 22878                           ; BSR set to: 0
 22879  0053E8  2B91               	incf	sprintf@c& (0+255),f,b
 22880  0053EA  D7E6               	goto	l15462
 22881  0053EC                     l15476:
 22882                           
 22883                           ; BSR set to: 0
 22884  0053EC  5192               	movf	sprintf@flag& (0+255),w,b
 22885  0053EE  0BC0               	andlw	192
 22886                           
 22887                           ; Switch size 1, requested type "space"
 22888                           ; Number of cases is 4, Range of values is 0 to 192
 22889                           ; switch strategies available:
 22890                           ; Name         Instructions Cycles
 22891                           ; simple_byte           13     7 (average)
 22892                           ;	Chosen strategy is simple_byte
 22893  0053F0  E0A9               	bz	l15432
 22894  0053F2  0A40               	xorlw	64	; case 64
 22895  0053F4  E0DF               	bz	l15460
 22896  0053F6  0AC0               	xorlw	192	; case 128
 22897  0053F8  E0C1               	bz	l15446
 22898  0053FA  0A40               	xorlw	64	; case 192
 22899  0053FC  E0A3               	bz	l15432
 22900  0053FE                     l15478:
 22901                           
 22902                           ; BSR set to: 0
 22903                           ;doprnt.c: 1346: if(c < prec)
 22904  0053FE  0E80               	movlw	128
 22905  005400  BF91               	btfsc	sprintf@c& (0+255),7,b
 22906  005402  0E7F               	movlw	127
 22907  005404  6F7E               	movwf	??_sprintf& (0+255),b
 22908  005406  5189               	movf	sprintf@prec& (0+255),w,b
 22909  005408  5D91               	subwf	sprintf@c& (0+255),w,b
 22910  00540A  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22911  00540C  0A80               	xorlw	128
 22912  00540E  597E               	subwfb	??_sprintf& (0+255),w,b
 22913  005410  E203               	bc	l15482
 22914                           
 22915                           ; BSR set to: 0
 22916                           ;doprnt.c: 1347: c = prec;
 22917  005412  C089  F091         	movff	sprintf@prec,sprintf@c
 22918  005416  D00F               	goto	l15486
 22919  005418                     l15482:
 22920                           
 22921                           ; BSR set to: 0
 22922                           ;doprnt.c: 1348: else if(prec < c)
 22923  005418  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22924  00541A  0A80               	xorlw	128
 22925  00541C  6F7E               	movwf	??_sprintf& (0+255),b
 22926  00541E  5191               	movf	sprintf@c& (0+255),w,b
 22927  005420  5D89               	subwf	sprintf@prec& (0+255),w,b
 22928  005422  0E80               	movlw	128
 22929  005424  BF91               	btfsc	sprintf@c& (0+255),7,b
 22930  005426  0E7F               	movlw	127
 22931  005428  597E               	subwfb	??_sprintf& (0+255),w,b
 22932  00542A  E205               	bc	l15486
 22933                           
 22934                           ; BSR set to: 0
 22935                           ;doprnt.c: 1349: prec = c;
 22936  00542C  5191               	movf	sprintf@c& (0+255),w,b
 22937  00542E  6F89               	movwf	sprintf@prec& (0+255),b
 22938  005430  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22939  005432  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22940  005434  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22941  005436                     l15486:
 22942                           
 22943                           ; BSR set to: 0
 22944                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22945  005436  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22946  005438  118B               	iorwf	sprintf@width& (0+255),w,b
 22947  00543A  E006               	bz	l15492
 22948                           
 22949                           ; BSR set to: 0
 22950  00543C  5192               	movf	sprintf@flag& (0+255),w,b
 22951  00543E  0B03               	andlw	3
 22952  005440  E003               	bz	l15492
 22953                           
 22954                           ; BSR set to: 0
 22955                           ;doprnt.c: 1353: width--;
 22956  005442  078B               	decf	sprintf@width& (0+255),f,b
 22957  005444  A0D8               	btfss	status,0,c
 22958  005446  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22959  005448                     l15492:
 22960                           
 22961                           ; BSR set to: 0
 22962                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22963  005448  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22964  00544A  D010               	goto	l15498
 22965                           
 22966                           ; BSR set to: 0
 22967                           ;doprnt.c: 1356: if(width > prec)
 22968  00544C  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22969  00544E  0A80               	xorlw	128
 22970  005450  6F7E               	movwf	??_sprintf& (0+255),b
 22971  005452  518B               	movf	sprintf@width& (0+255),w,b
 22972  005454  5D89               	subwf	sprintf@prec& (0+255),w,b
 22973  005456  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22974  005458  0A80               	xorlw	128
 22975  00545A  597E               	subwfb	??_sprintf& (0+255),w,b
 22976  00545C  E205               	bc	l1714
 22977                           
 22978                           ; BSR set to: 0
 22979                           ;doprnt.c: 1357: width -= prec;
 22980  00545E  5189               	movf	sprintf@prec& (0+255),w,b
 22981  005460  5F8B               	subwf	sprintf@width& (0+255),f,b
 22982  005462  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22983  005464  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22984  005466  D002               	goto	l15498
 22985  005468                     l1714:
 22986                           
 22987                           ; BSR set to: 0
 22988                           ;doprnt.c: 1358: else
 22989                           ;doprnt.c: 1359: width = 0;
 22990  005468  6B8B               	clrf	sprintf@width& (0+255),b
 22991  00546A  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22992  00546C                     l15498:
 22993                           
 22994                           ; BSR set to: 0
 22995                           ;doprnt.c: 1360: }
 22996                           ;doprnt.c: 1364: if((flag & (
 22997                           ;doprnt.c: 1366: 0x04|
 22998                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22999  00546C  0EC4               	movlw	196
 23000  00546E  D94D               	call	PL14	;call to abstracted procedure
 23001  005470  0E40               	movlw	64
 23002  005472  B4D8               	btfsc	status,2,c
 23003  005474  197E               	xorwf	??_sprintf& (0+255),w,b
 23004  005476  E107               	bnz	l15504
 23005                           
 23006                           ; BSR set to: 0
 23007                           ;doprnt.c: 1369: if(width)
 23008  005478  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23009  00547A  118B               	iorwf	sprintf@width& (0+255),w,b
 23010  00547C  E018               	bz	l15510
 23011                           
 23012                           ; BSR set to: 0
 23013                           ;doprnt.c: 1370: width--;
 23014  00547E  078B               	decf	sprintf@width& (0+255),f,b
 23015  005480  A0D8               	btfss	status,0,c
 23016  005482  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23017  005484  D014               	goto	l15510
 23018  005486                     l15504:
 23019                           
 23020                           ; BSR set to: 0
 23021                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23022  005486  0EC0               	movlw	192
 23023  005488  D940               	call	PL14	;call to abstracted procedure
 23024  00548A  0E80               	movlw	128
 23025  00548C  B4D8               	btfsc	status,2,c
 23026  00548E  197E               	xorwf	??_sprintf& (0+255),w,b
 23027  005490  E10E               	bnz	l15510
 23028                           
 23029                           ; BSR set to: 0
 23030                           ;doprnt.c: 1379: if(width > 2)
 23031  005492  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23032  005494  0A80               	xorlw	128
 23033  005496  0F80               	addlw	-128
 23034  005498  0E03               	movlw	3
 23035  00549A  B4D8               	btfsc	status,2,c
 23036  00549C  5D8B               	subwf	sprintf@width& (0+255),w,b
 23037  00549E  E305               	bnc	l1720
 23038                           
 23039                           ; BSR set to: 0
 23040                           ;doprnt.c: 1380: width -= 2;
 23041  0054A0  0EFE               	movlw	254
 23042  0054A2  278B               	addwf	sprintf@width& (0+255),f,b
 23043  0054A4  0EFF               	movlw	255
 23044  0054A6  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 23045  0054A8  D002               	goto	l15510
 23046  0054AA                     l1720:
 23047                           
 23048                           ; BSR set to: 0
 23049                           ;doprnt.c: 1381: else
 23050                           ;doprnt.c: 1382: width = 0;
 23051  0054AA  6B8B               	clrf	sprintf@width& (0+255),b
 23052  0054AC  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23053  0054AE                     l15510:
 23054                           
 23055                           ; BSR set to: 0
 23056                           ;doprnt.c: 1383: }
 23057                           ;doprnt.c: 1388: if(width > c)
 23058  0054AE  0E80               	movlw	128
 23059  0054B0  BF91               	btfsc	sprintf@c& (0+255),7,b
 23060  0054B2  0E7F               	movlw	127
 23061  0054B4  6F7E               	movwf	??_sprintf& (0+255),b
 23062  0054B6  518B               	movf	sprintf@width& (0+255),w,b
 23063  0054B8  5D91               	subwf	sprintf@c& (0+255),w,b
 23064  0054BA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23065  0054BC  0A80               	xorlw	128
 23066  0054BE  597E               	subwfb	??_sprintf& (0+255),w,b
 23067  0054C0  E207               	bc	l1722
 23068                           
 23069                           ; BSR set to: 0
 23070                           ;doprnt.c: 1389: width -= c;
 23071  0054C2  5191               	movf	sprintf@c& (0+255),w,b
 23072  0054C4  5F8B               	subwf	sprintf@width& (0+255),f,b
 23073  0054C6  0E00               	movlw	0
 23074  0054C8  BF91               	btfsc	sprintf@c& (0+255),7,b
 23075  0054CA  0EFF               	movlw	255
 23076  0054CC  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 23077  0054CE  D002               	goto	l1723
 23078  0054D0                     l1722:
 23079                           
 23080                           ; BSR set to: 0
 23081                           ;doprnt.c: 1390: else
 23082                           ;doprnt.c: 1391: width = 0;
 23083  0054D0  6B8B               	clrf	sprintf@width& (0+255),b
 23084  0054D2  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 23085  0054D4                     l1723:
 23086                           
 23087                           ; BSR set to: 0
 23088                           ;doprnt.c: 1394: if(flag & 0x04) {
 23089  0054D4  A592               	btfss	sprintf@flag& (0+255),2,b
 23090  0054D6  D03C               	goto	l15548
 23091                           
 23092                           ; BSR set to: 0
 23093                           ;doprnt.c: 1399: if(flag & 0x03)
 23094  0054D8  5192               	movf	sprintf@flag& (0+255),w,b
 23095  0054DA  0B03               	andlw	3
 23096  0054DC  E009               	bz	l1725
 23097                           
 23098                           ; BSR set to: 0
 23099                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 23100  0054DE  C076  FFD9         	movff	sprintf@sp,fsr2l
 23101  0054E2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23102  0054E6  0E2D               	movlw	45
 23103  0054E8  6EDF               	movwf	indf2,c
 23104  0054EA                     l15518:
 23105                           
 23106                           ; BSR set to: 0
 23107  0054EA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23108  0054EC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23109  0054EE  D022               	goto	l15540
 23110  0054F0                     l1725:
 23111                           
 23112                           ; BSR set to: 0
 23113                           ;doprnt.c: 1403: else
 23114                           ;doprnt.c: 1406: if(flag & 0x01)
 23115  0054F0  A192               	btfss	sprintf@flag& (0+255),0,b
 23116  0054F2  D006               	goto	l15524
 23117                           
 23118                           ; BSR set to: 0
 23119                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 23120  0054F4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23121  0054F8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23122  0054FC  0E20               	movlw	32
 23123  0054FE  D7F4               	goto	L39
 23124  005500                     l15524:
 23125                           
 23126                           ; BSR set to: 0
 23127                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23128  005500  0EC0               	movlw	192
 23129  005502  D903               	call	PL14	;call to abstracted procedure
 23130  005504  0E80               	movlw	128
 23131  005506  B4D8               	btfsc	status,2,c
 23132  005508  197E               	xorwf	??_sprintf& (0+255),w,b
 23133  00550A  E114               	bnz	l15540
 23134                           
 23135                           ; BSR set to: 0
 23136                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 23137  00550C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23138  005510  D94A               	call	PL88	;call to abstracted procedure
 23139                           
 23140                           ; BSR set to: 0
 23141  005512  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23142  005514  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23143                           
 23144                           ; BSR set to: 0
 23145                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23146  005516  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23147  005518  D003               	goto	l15534
 23148                           
 23149                           ; BSR set to: 0
 23150  00551A  6B83               	clrf	(_sprintf$2098+1)& (0+255),b
 23151  00551C  0E78               	movlw	120
 23152  00551E  D002               	goto	L40
 23153  005520                     l15534:
 23154                           
 23155                           ; BSR set to: 0
 23156  005520  6B83               	clrf	(_sprintf$2098+1)& (0+255),b
 23157  005522  0E58               	movlw	88
 23158  005524                     L40:
 23159  005524  6F82               	movwf	_sprintf$2098& (0+255),b
 23160                           
 23161                           ; BSR set to: 0
 23162  005526  C076  FFD9         	movff	sprintf@sp,fsr2l
 23163  00552A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23164  00552E  C082  FFDF         	movff	_sprintf$2098,indf2
 23165  005532  D7DB               	goto	l15518
 23166  005534                     l15540:
 23167                           
 23168                           ; BSR set to: 0
 23169                           ;doprnt.c: 1419: }
 23170                           ;doprnt.c: 1422: if(width)
 23171  005534  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23172  005536  118B               	iorwf	sprintf@width& (0+255),w,b
 23173  005538  E101 D0B9          	bz	l15612
 23174                           
 23175                           ; BSR set to: 0
 23176                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 23177  00553C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23178  005540  D932               	call	PL88	;call to abstracted procedure
 23179                           
 23180                           ; BSR set to: 0
 23181  005542  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23182  005544  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23183                           
 23184                           ; BSR set to: 0
 23185                           ;doprnt.c: 1425: while(--width);
 23186  005546  078B               	decf	sprintf@width& (0+255),f,b
 23187  005548  A0D8               	btfss	status,0,c
 23188  00554A  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23189  00554C  0100               	movlb	0	; () banked
 23190  00554E  D7F2               	goto	l15540
 23191  005550                     l15548:
 23192                           
 23193                           ; BSR set to: 0
 23194                           ;doprnt.c: 1429: {
 23195                           ;doprnt.c: 1431: if(width
 23196                           ;doprnt.c: 1433: && !(flag & 0x08)
 23197                           ;doprnt.c: 1435: )
 23198  005550  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23199  005552  118B               	iorwf	sprintf@width& (0+255),w,b
 23200  005554  A4D8               	btfss	status,2,c
 23201                           
 23202                           ; BSR set to: 0
 23203  005556  B792               	btfsc	sprintf@flag& (0+255),3,b
 23204  005558  D004               	goto	l15558
 23205  00555A                     l15552:
 23206                           
 23207                           ; BSR set to: 0
 23208                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23209  00555A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23210                           
 23211                           ; BSR set to: 0
 23212                           
 23213                           ; BSR set to: 0
 23214                           ;doprnt.c: 1438: while(--width);
 23215  00555E  D8F0               	call	PL38	;call to abstracted procedure
 23216  005560  E1FC               	bnz	l15552
 23217  005562                     l15558:
 23218                           
 23219                           ; BSR set to: 0
 23220                           ;doprnt.c: 1445: if(flag & 0x03)
 23221  005562  5192               	movf	sprintf@flag& (0+255),w,b
 23222  005564  0B03               	andlw	3
 23223  005566  E009               	bz	l1741
 23224                           
 23225                           ; BSR set to: 0
 23226                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23227  005568  C076  FFD9         	movff	sprintf@sp,fsr2l
 23228  00556C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23229  005570  0E2D               	movlw	45
 23230  005572  6EDF               	movwf	indf2,c
 23231                           
 23232                           ; BSR set to: 0
 23233  005574  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23234  005576  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23235  005578  D008               	goto	l15568
 23236  00557A                     l1741:
 23237                           
 23238                           ; BSR set to: 0
 23239                           ;doprnt.c: 1450: else if(flag & 0x01)
 23240  00557A  A192               	btfss	sprintf@flag& (0+255),0,b
 23241  00557C  D006               	goto	l15568
 23242                           
 23243                           ; BSR set to: 0
 23244                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23245  00557E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23246  005582  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23247  005586  0E20               	movlw	32
 23248  005588  D7F4               	goto	L41
 23249  00558A                     l15568:
 23250                           
 23251                           ; BSR set to: 0
 23252                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23253  00558A  0EC0               	movlw	192
 23254  00558C  D8BE               	call	PL14	;call to abstracted procedure
 23255  00558E  0E40               	movlw	64
 23256  005590  B4D8               	btfsc	status,2,c
 23257  005592  197E               	xorwf	??_sprintf& (0+255),w,b
 23258  005594  E106               	bnz	l15574
 23259                           
 23260                           ; BSR set to: 0
 23261                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23262  005596  C076  FFD9         	movff	sprintf@sp,fsr2l
 23263  00559A  D905               	call	PL88	;call to abstracted procedure
 23264  00559C                     l15572:
 23265                           
 23266                           ; BSR set to: 0
 23267  00559C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23268  00559E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23269  0055A0  D086               	goto	l15612
 23270  0055A2                     l15574:
 23271                           
 23272                           ; BSR set to: 0
 23273                           ;doprnt.c: 1457: else
 23274                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23275  0055A2  0EC0               	movlw	192
 23276  0055A4  D8B2               	call	PL14	;call to abstracted procedure
 23277  0055A6  0E80               	movlw	128
 23278  0055A8  B4D8               	btfsc	status,2,c
 23279  0055AA  197E               	xorwf	??_sprintf& (0+255),w,b
 23280  0055AC  E001 D07F          	bnz	l15612
 23281                           
 23282                           ; BSR set to: 0
 23283                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23284  0055B0  C076  FFD9         	movff	sprintf@sp,fsr2l
 23285  0055B4  D8F8               	call	PL88	;call to abstracted procedure
 23286                           
 23287                           ; BSR set to: 0
 23288  0055B6  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23289  0055B8  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23290                           
 23291                           ; BSR set to: 0
 23292                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23293  0055BA  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23294  0055BC  D003               	goto	l15584
 23295                           
 23296                           ; BSR set to: 0
 23297  0055BE  6B85               	clrf	(_sprintf$2099+1)& (0+255),b
 23298  0055C0  0E78               	movlw	120
 23299  0055C2  D002               	goto	L42
 23300  0055C4                     l15584:
 23301                           
 23302                           ; BSR set to: 0
 23303  0055C4  6B85               	clrf	(_sprintf$2099+1)& (0+255),b
 23304  0055C6  0E58               	movlw	88
 23305  0055C8                     L42:
 23306  0055C8  6F84               	movwf	_sprintf$2099& (0+255),b
 23307                           
 23308                           ; BSR set to: 0
 23309  0055CA  C076  FFD9         	movff	sprintf@sp,fsr2l
 23310  0055CE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23311  0055D2  C084  FFDF         	movff	_sprintf$2099,indf2
 23312  0055D6  D7E2               	goto	l15572
 23313  0055D8                     l15590:
 23314                           
 23315                           ; BSR set to: 0
 23316                           ;doprnt.c: 1493: case 0xC0:
 23317                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23318  0055D8  C089  F07E         	movff	sprintf@prec,??_sprintf
 23319  0055DC  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23320  0055E0  90D8               	bcf	status,0,c
 23321  0055E2  377E               	rlcf	??_sprintf& (0+255),f,b
 23322  0055E4  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23323  0055E6  90D8               	bcf	status,0,c
 23324  0055E8  377E               	rlcf	??_sprintf& (0+255),f,b
 23325  0055EA  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23326  0055EC  0EBA               	movlw	low _dpowers
 23327  0055EE  257E               	addwf	??_sprintf& (0+255),w,b
 23328  0055F0  6EF6               	movwf	tblptrl,c
 23329  0055F2  0E6C               	movlw	high _dpowers
 23330  0055F4  D87B               	call	PL10	;call to abstracted procedure
 23331  0055F6  C08D  F060         	movff	sprintf@_val,?___lldiv
 23332  0055FA  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23333  0055FE  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23334  005602  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23335  005606  ECD2  F00F         	call	___lldiv	;wreg free
 23336  00560A  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23337  00560E  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23338  005612  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23339  005616  C060  F06D         	movff	?___lldiv,?___llmod
 23340  00561A  0E0A               	movlw	10
 23341  00561C  6F71               	movwf	(?___llmod+4)& (0+255),b
 23342  00561E  0E00               	movlw	0
 23343  005620  6B72               	clrf	(?___llmod+5)& (0+255),b
 23344  005622  6B73               	clrf	(?___llmod+6)& (0+255),b
 23345  005624  6B74               	clrf	(?___llmod+7)& (0+255),b
 23346  005626  EC5E  F00E         	call	___llmod	;wreg free
 23347  00562A  516D               	movf	?___llmod& (0+255),w,b
 23348  00562C  D02D               	goto	L43
 23349  00562E                     l15592:
 23350                           
 23351                           ; BSR set to: 0
 23352                           ;doprnt.c: 1506: {
 23353                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23354  00562E  D875               	call	PL18	;call to abstracted procedure
 23355  005630  0EE2               	movlw	low _hexpowers
 23356  005632  257E               	addwf	??_sprintf& (0+255),w,b
 23357  005634  6EF6               	movwf	tblptrl,c
 23358  005636  0E6C               	movlw	high _hexpowers
 23359  005638  D859               	call	PL10	;call to abstracted procedure
 23360  00563A  ECD2  F00F         	call	___lldiv	;wreg free
 23361  00563E  5160               	movf	?___lldiv& (0+255),w,b
 23362  005640  0B0F               	andlw	15
 23363  005642  6F81               	movwf	sprintf@idx& (0+255),b
 23364                           
 23365                           ; BSR set to: 0
 23366                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23367  005644  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23368  005646  D004               	goto	l15598
 23369                           
 23370                           ; BSR set to: 0
 23371  005648  0E7B               	movlw	high STR_272
 23372  00564A  6F87               	movwf	(_sprintf$2105+1)& (0+255),b
 23373  00564C  0E0C               	movlw	low STR_272
 23374  00564E  D003               	goto	L44
 23375  005650                     l15598:
 23376                           
 23377                           ; BSR set to: 0
 23378  005650  0E7A               	movlw	high STR_271
 23379  005652  6F87               	movwf	(_sprintf$2105+1)& (0+255),b
 23380  005654  0EFB               	movlw	low STR_271
 23381  005656                     L44:
 23382  005656  6F86               	movwf	_sprintf$2105& (0+255),b
 23383                           
 23384                           ; BSR set to: 0
 23385  005658  5181               	movf	sprintf@idx& (0+255),w,b
 23386  00565A  2586               	addwf	_sprintf$2105& (0+255),w,b
 23387  00565C  6F7E               	movwf	??_sprintf& (0+255),b
 23388  00565E  0E00               	movlw	0
 23389  005660  2187               	addwfc	(_sprintf$2105+1)& (0+255),w,b
 23390  005662  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23391  005664  C07E  FFF6         	movff	??_sprintf,tblptrl
 23392  005668  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23393  00566C  0008               	tblrd		*
 23394  00566E  CFF5 F091          	movff	tablat,sprintf@c
 23395                           
 23396                           ;doprnt.c: 1515: }
 23397                           ;doprnt.c: 1517: break;
 23398  005672  D016               	goto	l15608
 23399  005674                     l15602:
 23400                           
 23401                           ; BSR set to: 0
 23402                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23403  005674  D852               	call	PL18	;call to abstracted procedure
 23404  005676  0E8A               	movlw	low _octpowers
 23405  005678  257E               	addwf	??_sprintf& (0+255),w,b
 23406  00567A  6EF6               	movwf	tblptrl,c
 23407  00567C  0E6C               	movlw	high _octpowers
 23408  00567E  D836               	call	PL10	;call to abstracted procedure
 23409  005680  ECD2  F00F         	call	___lldiv	;wreg free
 23410  005684  5160               	movf	?___lldiv& (0+255),w,b
 23411  005686  0B07               	andlw	7
 23412  005688                     L43:
 23413  005688  0F30               	addlw	48
 23414  00568A  6F91               	movwf	sprintf@c& (0+255),b
 23415                           
 23416                           ;doprnt.c: 1527: break;
 23417  00568C  D009               	goto	l15608
 23418  00568E                     l15606:
 23419                           
 23420                           ; BSR set to: 0
 23421  00568E  5192               	movf	sprintf@flag& (0+255),w,b
 23422  005690  0BC0               	andlw	192
 23423                           
 23424                           ; Switch size 1, requested type "space"
 23425                           ; Number of cases is 4, Range of values is 0 to 192
 23426                           ; switch strategies available:
 23427                           ; Name         Instructions Cycles
 23428                           ; simple_byte           13     7 (average)
 23429                           ;	Chosen strategy is simple_byte
 23430  005692  E0A2               	bz	l15590
 23431  005694  0A40               	xorlw	64	; case 64
 23432  005696  E0EE               	bz	l15602
 23433  005698  0AC0               	xorlw	192	; case 128
 23434  00569A  E0C9               	bz	l15592
 23435  00569C  0A40               	xorlw	64	; case 192
 23436  00569E  E09C               	bz	l15590
 23437  0056A0                     l15608:
 23438                           
 23439                           ; BSR set to: 0
 23440                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23441  0056A0  C076  FFD9         	movff	sprintf@sp,fsr2l
 23442  0056A4  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23443  0056A8  C091  FFDF         	movff	sprintf@c,indf2
 23444  0056AC  D777               	goto	l15572
 23445  0056AE                     l15612:
 23446                           
 23447                           ; BSR set to: 0
 23448  0056AE  0789               	decf	sprintf@prec& (0+255),f,b
 23449  0056B0  A0D8               	btfss	status,0,c
 23450  0056B2  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23451  0056B4  0100               	movlb	0	; () banked
 23452  0056B6  2989               	incf	sprintf@prec& (0+255),w,b
 23453  0056B8  B4D8               	btfsc	status,2,c
 23454  0056BA  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23455  0056BC  E1E8               	bnz	l15606
 23456                           
 23457                           ; BSR set to: 0
 23458                           ;doprnt.c: 1532: }
 23459                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23460  0056BE  A792               	btfss	sprintf@flag& (0+255),3,b
 23461  0056C0  D00B               	goto	l15622
 23462                           
 23463                           ; BSR set to: 0
 23464  0056C2  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23465  0056C4  0A80               	xorlw	128
 23466  0056C6  0F80               	addlw	-128
 23467  0056C8  0E01               	movlw	1
 23468  0056CA  B4D8               	btfsc	status,2,c
 23469  0056CC  5D8B               	subwf	sprintf@width& (0+255),w,b
 23470  0056CE  E304               	bnc	l15622
 23471  0056D0                     l15616:
 23472                           
 23473                           ; BSR set to: 0
 23474                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23475  0056D0  C076  FFD9         	movff	sprintf@sp,fsr2l
 23476                           
 23477                           ; BSR set to: 0
 23478                           
 23479                           ; BSR set to: 0
 23480                           ;doprnt.c: 1538: while(--width);
 23481  0056D4  D835               	call	PL38	;call to abstracted procedure
 23482  0056D6  E1FC               	bnz	l15616
 23483  0056D8                     l15622:
 23484                           
 23485                           ; BSR set to: 0
 23486  0056D8  D84B               	call	PL58	;call to abstracted procedure
 23487  0056DA  6791               	tstfsz	sprintf@c& (0+255),b
 23488  0056DC  D4D1               	goto	l15288
 23489  0056DE                     l15624:
 23490                           
 23491                           ; BSR set to: 0
 23492                           ;doprnt.c: 1545: *sp = 0;
 23493  0056DE  C076  FFD9         	movff	sprintf@sp,fsr2l
 23494  0056E2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23495  0056E6  0E00               	movlw	0
 23496  0056E8  6EDF               	movwf	indf2,c
 23497                           
 23498                           ; BSR set to: 0
 23499  0056EA  0C00               	retlw	0
 23500  0056EC                     __end_of_sprintf:
 23501                           	opt stack 0
 23502  0056EC                     PL10:
 23503                           	opt stack 24
 23504  0056EC  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23505  0056EE  6EF7               	movwf	tblptrh,c
 23506  0056F0  0009               	tblrd		*+
 23507  0056F2  CFF5 F064          	movff	tablat,?___lldiv+4
 23508  0056F6  0009               	tblrd		*+
 23509  0056F8  CFF5 F065          	movff	tablat,?___lldiv+5
 23510  0056FC  0009               	tblrd		*+
 23511  0056FE  CFF5 F066          	movff	tablat,?___lldiv+6
 23512  005702  000A               	tblrd		*-
 23513  005704  CFF5 F067          	movff	tablat,?___lldiv+7
 23514  005708  0012               	return	
 23515  00570A                     __end_ofPL10:
 23516                           	opt stack 0
 23517  00570A                     PL14:
 23518                           	opt stack 24
 23519  00570A  1592               	andwf	sprintf@flag& (0+255),w,b
 23520  00570C  6F7E               	movwf	??_sprintf& (0+255),b
 23521  00570E  0E08               	movlw	8
 23522  005710  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23523  005712  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23524  005714  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23525  005716  0A08               	xorlw	8
 23526  005718  0012               	return	
 23527  00571A                     __end_ofPL14:
 23528                           	opt stack 0
 23529  00571A                     PL18:
 23530                           	opt stack 24
 23531  00571A  C08D  F060         	movff	sprintf@_val,?___lldiv
 23532  00571E  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23533  005722  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23534  005726  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23535  00572A  C089  F07E         	movff	sprintf@prec,??_sprintf
 23536  00572E  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23537  005732  90D8               	bcf	status,0,c
 23538  005734  377E               	rlcf	??_sprintf& (0+255),f,b
 23539  005736  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23540  005738  90D8               	bcf	status,0,c
 23541  00573A  377E               	rlcf	??_sprintf& (0+255),f,b
 23542  00573C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23543  00573E  0012               	return	
 23544  005740                     __end_ofPL18:
 23545                           	opt stack 0
 23546  005740                     PL38:
 23547                           	opt stack 24
 23548  005740  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23549  005744  0E20               	movlw	32
 23550  005746  6EDF               	movwf	indf2,c
 23551  005748  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23552  00574A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23553  00574C  078B               	decf	sprintf@width& (0+255),f,b
 23554  00574E  A0D8               	btfss	status,0,c
 23555  005750  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23556  005752  0100               	movlb	0	; () banked
 23557  005754  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23558  005756  118B               	iorwf	sprintf@width& (0+255),w,b
 23559  005758  0012               	return	
 23560  00575A                     __end_ofPL38:
 23561                           	opt stack 0
 23562  00575A                     PL52:
 23563                           	opt stack 24
 23564  00575A  6ED9               	movwf	fsr2l,c
 23565  00575C  6ADA               	clrf	fsr2h,c
 23566  00575E  CFDE F08D          	movff	postinc2,sprintf@_val
 23567  005762  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23568  005766  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23569  00576A  CFDE F090          	movff	postinc2,sprintf@_val+3
 23570  00576E  0C04               	retlw	4
 23571  005770                     __end_ofPL52:
 23572                           	opt stack 0
 23573  005770                     PL58:
 23574                           	opt stack 24
 23575  005770  C078  FFF6         	movff	sprintf@f,tblptrl
 23576  005774  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23577  005778  4B78               	infsnz	sprintf@f& (0+255),f,b
 23578  00577A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23579  00577C  0008               	tblrd		*
 23580  00577E  CFF5 F091          	movff	tablat,sprintf@c
 23581  005782  0100               	movlb	0	; () banked
 23582  005784  0012               	return	
 23583  005786                     __end_ofPL58:
 23584                           	opt stack 0
 23585  005786                     PL62:
 23586                           	opt stack 24
 23587  005786  C076  FFD9         	movff	sprintf@sp,fsr2l
 23588  00578A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23589  00578E  0E20               	movlw	32
 23590  005790  6EDF               	movwf	indf2,c
 23591  005792  0C20               	retlw	32
 23592  005794                     __end_ofPL62:
 23593                           	opt stack 0
 23594  005794                     PL76:
 23595                           	opt stack 24
 23596  005794  4B78               	infsnz	sprintf@f& (0+255),f,b
 23597  005796  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23598  005798  C078  FFF6         	movff	sprintf@f,tblptrl
 23599  00579C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23600  0057A0  0008               	tblrd		*
 23601  0057A2  50F5               	movf	tablat,w,c
 23602  0057A4  0012               	return	
 23603  0057A6                     __end_ofPL76:
 23604                           	opt stack 0
 23605  0057A6                     PL88:
 23606                           	opt stack 24
 23607  0057A6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23608  0057AA  0E30               	movlw	48
 23609  0057AC  6EDF               	movwf	indf2,c
 23610  0057AE  0C30               	retlw	48
 23611  0057B0                     __end_ofPL88:
 23612                           	opt stack 0
 23613  0057B0                     PL98:
 23614                           	opt stack 24
 23615  0057B0  A0D8               	btfss	status,0,c
 23616  0057B2  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23617  0057B4  0100               	movlb	0	; () banked
 23618  0057B6  298B               	incf	sprintf@width& (0+255),w,b
 23619  0057B8  0012               	return	
 23620  0057BA                     __end_ofPL98:
 23621                           	opt stack 0
 23622                           tblptru	equ	0xFF8
 23623                           tblptrh	equ	0xFF7
 23624                           tblptrl	equ	0xFF6
 23625                           tablat	equ	0xFF5
 23626                           prodh	equ	0xFF4
 23627                           prodl	equ	0xFF3
 23628                           intcon	equ	0xFF2
 23629                           indf0	equ	0xFEF
 23630                           postinc0	equ	0xFEE
 23631                           fsr0h	equ	0xFEA
 23632                           fsr0l	equ	0xFE9
 23633                           wreg	equ	0xFE8
 23634                           indf1	equ	0xFE7
 23635                           postinc1	equ	0xFE6
 23636                           postdec1	equ	0xFE5
 23637                           fsr1h	equ	0xFE2
 23638                           fsr1l	equ	0xFE1
 23639                           indf2	equ	0xFDF
 23640                           postinc2	equ	0xFDE
 23641                           postdec2	equ	0xFDD
 23642                           plusw2	equ	0xFDB
 23643                           fsr2h	equ	0xFDA
 23644                           fsr2l	equ	0xFD9
 23645                           status	equ	0xFD8
 23646                           
 23647 ;; *************** function ___wmul *****************
 23648 ;; Defined at:
 23649 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23650 ;; Parameters:    Size  Location     Type
 23651 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23652 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23653 ;; Auto vars:     Size  Location     Type
 23654 ;;  product         2    4[BANK0 ] unsigned int 
 23655 ;; Return value:  Size  Location     Type
 23656 ;;                  2    0[BANK0 ] unsigned int 
 23657 ;; Registers used:
 23658 ;;		wreg, status,2, status,0, prodl, prodh
 23659 ;; Tracked objects:
 23660 ;;		On entry : F/0
 23661 ;;		On exit  : F/0
 23662 ;;		Unchanged: 0/0
 23663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23664 ;;      Params:         0       4       0       0       0       0       0
 23665 ;;      Locals:         0       2       0       0       0       0       0
 23666 ;;      Temps:          0       0       0       0       0       0       0
 23667 ;;      Totals:         0       6       0       0       0       0       0
 23668 ;;Total ram usage:        6 bytes
 23669 ;; Hardware stack levels used:    1
 23670 ;; Hardware stack levels required when called:    3
 23671 ;; This function calls:
 23672 ;;		Nothing
 23673 ;; This function is called by:
 23674 ;;		_sprintf
 23675 ;;		_atoi
 23676 ;; This function uses a non-reentrant model
 23677 ;;
 23678                           
 23679                           	psect	text57
 23680  001710                     __ptext57:
 23681                           	opt stack 0
 23682  001710                     ___wmul:
 23683                           	opt stack 24
 23684                           
 23685                           ; BSR set to: 0
 23686                           
 23687                           ; BSR set to: 0
 23688                           ;incstack = 0
 23689                           ;incstack = 0
 23690  001710  5160               	movf	___wmul@multiplier& (0+255),w,b
 23691  001712  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23692  001714  CFF3 F064          	movff	prodl,___wmul@product
 23693  001718  CFF4 F065          	movff	prodh,___wmul@product+1
 23694  00171C  5160               	movf	___wmul@multiplier& (0+255),w,b
 23695  00171E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23696  001720  D808               	call	PL80	;call to abstracted procedure
 23697  001722  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23698  001724  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23699  001726  D805               	call	PL80	;call to abstracted procedure
 23700                           
 23701                           ; BSR set to: 0
 23702  001728  C064  F060         	movff	___wmul@product,?___wmul
 23703  00172C  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23704                           
 23705                           ; BSR set to: 0
 23706  001730  0012               	return	
 23707  001732                     __end_of___wmul:
 23708                           	opt stack 0
 23709  001732                     PL80:
 23710                           	opt stack 24
 23711  001732  CFF3 FFF4          	movff	prodl,prodh
 23712  001736  6AF3               	clrf	prodl,c
 23713  001738  50F3               	movf	prodl,w,c
 23714  00173A  2764               	addwf	___wmul@product& (0+255),f,b
 23715  00173C  50F4               	movf	prodh,w,c
 23716  00173E  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23717  001740  0012               	return	
 23718  001742                     __end_ofPL80:
 23719                           	opt stack 0
 23720                           tblptru	equ	0xFF8
 23721                           tblptrh	equ	0xFF7
 23722                           tblptrl	equ	0xFF6
 23723                           tablat	equ	0xFF5
 23724                           prodh	equ	0xFF4
 23725                           prodl	equ	0xFF3
 23726                           intcon	equ	0xFF2
 23727                           indf0	equ	0xFEF
 23728                           postinc0	equ	0xFEE
 23729                           fsr0h	equ	0xFEA
 23730                           fsr0l	equ	0xFE9
 23731                           wreg	equ	0xFE8
 23732                           indf1	equ	0xFE7
 23733                           postinc1	equ	0xFE6
 23734                           postdec1	equ	0xFE5
 23735                           fsr1h	equ	0xFE2
 23736                           fsr1l	equ	0xFE1
 23737                           indf2	equ	0xFDF
 23738                           postinc2	equ	0xFDE
 23739                           postdec2	equ	0xFDD
 23740                           plusw2	equ	0xFDB
 23741                           fsr2h	equ	0xFDA
 23742                           fsr2l	equ	0xFD9
 23743                           status	equ	0xFD8
 23744                           
 23745 ;; *************** function ___llmod *****************
 23746 ;; Defined at:
 23747 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23748 ;; Parameters:    Size  Location     Type
 23749 ;;  dividend        4   13[BANK0 ] unsigned long 
 23750 ;;  divisor         4   17[BANK0 ] unsigned long 
 23751 ;; Auto vars:     Size  Location     Type
 23752 ;;  counter         1   21[BANK0 ] unsigned char 
 23753 ;; Return value:  Size  Location     Type
 23754 ;;                  4   13[BANK0 ] unsigned long 
 23755 ;; Registers used:
 23756 ;;		wreg, status,2, status,0
 23757 ;; Tracked objects:
 23758 ;;		On entry : F/0
 23759 ;;		On exit  : F/0
 23760 ;;		Unchanged: 0/0
 23761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23762 ;;      Params:         0       8       0       0       0       0       0
 23763 ;;      Locals:         0       1       0       0       0       0       0
 23764 ;;      Temps:          0       0       0       0       0       0       0
 23765 ;;      Totals:         0       9       0       0       0       0       0
 23766 ;;Total ram usage:        9 bytes
 23767 ;; Hardware stack levels used:    1
 23768 ;; Hardware stack levels required when called:    3
 23769 ;; This function calls:
 23770 ;;		Nothing
 23771 ;; This function is called by:
 23772 ;;		_sprintf
 23773 ;;		_ultoa
 23774 ;; This function uses a non-reentrant model
 23775 ;;
 23776                           
 23777                           	psect	text58
 23778  001CBC                     __ptext58:
 23779                           	opt stack 0
 23780  001CBC                     ___llmod:
 23781                           	opt stack 23
 23782                           
 23783                           ; BSR set to: 0
 23784                           
 23785                           ; BSR set to: 0
 23786                           ;incstack = 0
 23787                           ;incstack = 0
 23788  001CBC  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23789  001CBE  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23790  001CC0  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23791  001CC2  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23792  001CC4  E023               	bz	l2389
 23793                           
 23794                           ; BSR set to: 0
 23795  001CC6  0E01               	movlw	1
 23796  001CC8  6F75               	movwf	___llmod@counter& (0+255),b
 23797  001CCA  D006               	goto	l16470
 23798  001CCC                     l16468:
 23799                           
 23800                           ; BSR set to: 0
 23801  001CCC  90D8               	bcf	status,0,c
 23802  001CCE  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23803  001CD0  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23804  001CD2  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23805  001CD4  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23806  001CD6  2B75               	incf	___llmod@counter& (0+255),f,b
 23807  001CD8                     l16470:
 23808                           
 23809                           ; BSR set to: 0
 23810  001CD8  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23811  001CDA  D7F8               	goto	l16468
 23812  001CDC                     l16472:
 23813                           
 23814                           ; BSR set to: 0
 23815  001CDC  5171               	movf	___llmod@divisor& (0+255),w,b
 23816  001CDE  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23817  001CE0  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23818  001CE2  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23819  001CE4  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23820  001CE6  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23821  001CE8  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23822  001CEA  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23823  001CEC  E308               	bnc	l16476
 23824                           
 23825                           ; BSR set to: 0
 23826  001CEE  5171               	movf	___llmod@divisor& (0+255),w,b
 23827  001CF0  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23828  001CF2  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23829  001CF4  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23830  001CF6  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23831  001CF8  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23832  001CFA  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23833  001CFC  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23834  001CFE                     l16476:
 23835                           
 23836                           ; BSR set to: 0
 23837  001CFE  90D8               	bcf	status,0,c
 23838  001D00  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23839  001D02  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23840  001D04  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23841  001D06  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23842                           
 23843                           ; BSR set to: 0
 23844  001D08  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23845  001D0A  D7E8               	goto	l16472
 23846  001D0C                     l2389:
 23847                           
 23848                           ; BSR set to: 0
 23849  001D0C  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23850  001D10  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23851  001D14  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23852  001D18  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23853                           
 23854                           ; BSR set to: 0
 23855  001D1C  0012               	return	
 23856  001D1E                     __end_of___llmod:
 23857                           	opt stack 0
 23858                           tblptru	equ	0xFF8
 23859                           tblptrh	equ	0xFF7
 23860                           tblptrl	equ	0xFF6
 23861                           tablat	equ	0xFF5
 23862                           prodh	equ	0xFF4
 23863                           prodl	equ	0xFF3
 23864                           intcon	equ	0xFF2
 23865                           indf0	equ	0xFEF
 23866                           postinc0	equ	0xFEE
 23867                           fsr0h	equ	0xFEA
 23868                           fsr0l	equ	0xFE9
 23869                           wreg	equ	0xFE8
 23870                           indf1	equ	0xFE7
 23871                           postinc1	equ	0xFE6
 23872                           postdec1	equ	0xFE5
 23873                           fsr1h	equ	0xFE2
 23874                           fsr1l	equ	0xFE1
 23875                           indf2	equ	0xFDF
 23876                           postinc2	equ	0xFDE
 23877                           postdec2	equ	0xFDD
 23878                           plusw2	equ	0xFDB
 23879                           fsr2h	equ	0xFDA
 23880                           fsr2l	equ	0xFD9
 23881                           status	equ	0xFD8
 23882                           
 23883 ;; *************** function ___lldiv *****************
 23884 ;; Defined at:
 23885 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23886 ;; Parameters:    Size  Location     Type
 23887 ;;  dividend        4    0[BANK0 ] unsigned long 
 23888 ;;  divisor         4    4[BANK0 ] unsigned long 
 23889 ;; Auto vars:     Size  Location     Type
 23890 ;;  quotient        4    9[BANK0 ] unsigned long 
 23891 ;;  counter         1    8[BANK0 ] unsigned char 
 23892 ;; Return value:  Size  Location     Type
 23893 ;;                  4    0[BANK0 ] unsigned long 
 23894 ;; Registers used:
 23895 ;;		wreg, status,2, status,0
 23896 ;; Tracked objects:
 23897 ;;		On entry : F/0
 23898 ;;		On exit  : F/0
 23899 ;;		Unchanged: 0/0
 23900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23901 ;;      Params:         0       8       0       0       0       0       0
 23902 ;;      Locals:         0       5       0       0       0       0       0
 23903 ;;      Temps:          0       0       0       0       0       0       0
 23904 ;;      Totals:         0      13       0       0       0       0       0
 23905 ;;Total ram usage:       13 bytes
 23906 ;; Hardware stack levels used:    1
 23907 ;; Hardware stack levels required when called:    3
 23908 ;; This function calls:
 23909 ;;		Nothing
 23910 ;; This function is called by:
 23911 ;;		_sprintf
 23912 ;;		_ultoa
 23913 ;; This function uses a non-reentrant model
 23914 ;;
 23915                           
 23916                           	psect	text59
 23917  001FA4                     __ptext59:
 23918                           	opt stack 0
 23919  001FA4                     ___lldiv:
 23920                           	opt stack 23
 23921                           
 23922                           ; BSR set to: 0
 23923                           
 23924                           ; BSR set to: 0
 23925                           ;incstack = 0
 23926                           ;incstack = 0
 23927  001FA4  6B69               	clrf	___lldiv@quotient& (0+255),b
 23928  001FA6  6B6A               	clrf	(___lldiv@quotient+1)& (0+255),b
 23929  001FA8  6B6B               	clrf	(___lldiv@quotient+2)& (0+255),b
 23930  001FAA  6B6C               	clrf	(___lldiv@quotient+3)& (0+255),b
 23931                           
 23932                           ; BSR set to: 0
 23933  001FAC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23934  001FAE  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23935  001FB0  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23936  001FB2  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23937  001FB4  E029               	bz	l2379
 23938                           
 23939                           ; BSR set to: 0
 23940  001FB6  0E01               	movlw	1
 23941  001FB8  6F68               	movwf	___lldiv@counter& (0+255),b
 23942  001FBA  D006               	goto	l16450
 23943  001FBC                     l16448:
 23944                           
 23945                           ; BSR set to: 0
 23946  001FBC  90D8               	bcf	status,0,c
 23947  001FBE  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23948  001FC0  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23949  001FC2  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23950  001FC4  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23951  001FC6  2B68               	incf	___lldiv@counter& (0+255),f,b
 23952  001FC8                     l16450:
 23953                           
 23954                           ; BSR set to: 0
 23955  001FC8  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23956  001FCA  D7F8               	goto	l16448
 23957  001FCC                     l16452:
 23958                           
 23959                           ; BSR set to: 0
 23960  001FCC  90D8               	bcf	status,0,c
 23961  001FCE  3769               	rlcf	___lldiv@quotient& (0+255),f,b
 23962  001FD0  376A               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23963  001FD2  376B               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23964  001FD4  376C               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23965                           
 23966                           ; BSR set to: 0
 23967  001FD6  5164               	movf	___lldiv@divisor& (0+255),w,b
 23968  001FD8  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23969  001FDA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23970  001FDC  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23971  001FDE  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23972  001FE0  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23973  001FE2  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23974  001FE4  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23975  001FE6  E309               	bnc	l16460
 23976                           
 23977                           ; BSR set to: 0
 23978  001FE8  5164               	movf	___lldiv@divisor& (0+255),w,b
 23979  001FEA  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23980  001FEC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23981  001FEE  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23982  001FF0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23983  001FF2  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23984  001FF4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23985  001FF6  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23986                           
 23987                           ; BSR set to: 0
 23988  001FF8  8169               	bsf	___lldiv@quotient& (0+255),0,b
 23989  001FFA                     l16460:
 23990                           
 23991                           ; BSR set to: 0
 23992  001FFA  90D8               	bcf	status,0,c
 23993  001FFC  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23994  001FFE  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23995  002000  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23996  002002  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23997                           
 23998                           ; BSR set to: 0
 23999  002004  2F68               	decfsz	___lldiv@counter& (0+255),f,b
 24000  002006  D7E2               	goto	l16452
 24001  002008                     l2379:
 24002                           
 24003                           ; BSR set to: 0
 24004  002008  C069  F060         	movff	___lldiv@quotient,?___lldiv
 24005  00200C  C06A  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 24006  002010  C06B  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 24007  002014  C06C  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 24008                           
 24009                           ; BSR set to: 0
 24010  002018  0012               	return	
 24011  00201A                     __end_of___lldiv:
 24012                           	opt stack 0
 24013                           tblptru	equ	0xFF8
 24014                           tblptrh	equ	0xFF7
 24015                           tblptrl	equ	0xFF6
 24016                           tablat	equ	0xFF5
 24017                           prodh	equ	0xFF4
 24018                           prodl	equ	0xFF3
 24019                           intcon	equ	0xFF2
 24020                           indf0	equ	0xFEF
 24021                           postinc0	equ	0xFEE
 24022                           fsr0h	equ	0xFEA
 24023                           fsr0l	equ	0xFE9
 24024                           wreg	equ	0xFE8
 24025                           indf1	equ	0xFE7
 24026                           postinc1	equ	0xFE6
 24027                           postdec1	equ	0xFE5
 24028                           fsr1h	equ	0xFE2
 24029                           fsr1l	equ	0xFE1
 24030                           indf2	equ	0xFDF
 24031                           postinc2	equ	0xFDE
 24032                           postdec2	equ	0xFDD
 24033                           plusw2	equ	0xFDB
 24034                           fsr2h	equ	0xFDA
 24035                           fsr2l	equ	0xFD9
 24036                           status	equ	0xFD8
 24037                           
 24038 ;; *************** function _isdigit *****************
 24039 ;; Defined at:
 24040 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 24041 ;; Parameters:    Size  Location     Type
 24042 ;;  c               1    wreg     unsigned char 
 24043 ;; Auto vars:     Size  Location     Type
 24044 ;;  c               1    2[BANK0 ] unsigned char 
 24045 ;; Return value:  Size  Location     Type
 24046 ;;		None               void
 24047 ;; Registers used:
 24048 ;;		wreg, status,2, status,0
 24049 ;; Tracked objects:
 24050 ;;		On entry : 0/0
 24051 ;;		On exit  : F/0
 24052 ;;		Unchanged: 0/0
 24053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24054 ;;      Params:         0       0       0       0       0       0       0
 24055 ;;      Locals:         0       2       0       0       0       0       0
 24056 ;;      Temps:          0       1       0       0       0       0       0
 24057 ;;      Totals:         0       3       0       0       0       0       0
 24058 ;;Total ram usage:        3 bytes
 24059 ;; Hardware stack levels used:    1
 24060 ;; Hardware stack levels required when called:    3
 24061 ;; This function calls:
 24062 ;;		Nothing
 24063 ;; This function is called by:
 24064 ;;		_sprintf
 24065 ;;		_atoi
 24066 ;; This function uses a non-reentrant model
 24067 ;;
 24068                           
 24069                           	psect	text60
 24070  001666                     __ptext60:
 24071                           	opt stack 0
 24072  001666                     _isdigit:
 24073                           	opt stack 24
 24074                           
 24075                           ; BSR set to: 0
 24076                           ;incstack = 0
 24077                           ;incstack = 0
 24078                           ;isdigit@c stored from wreg
 24079  001666  CFE8 F062          	movff	wreg,isdigit@c
 24080  00166A  0100               	movlb	0	; () banked
 24081  00166C  6B61               	clrf	_isdigit$2953& (0+255),b
 24082                           
 24083                           ; BSR set to: 0
 24084  00166E  0E3A               	movlw	58
 24085  001670  6162               	cpfslt	isdigit@c& (0+255),b
 24086  001672  D005               	goto	l13166
 24087                           
 24088                           ; BSR set to: 0
 24089  001674  0E2F               	movlw	47
 24090  001676  6562               	cpfsgt	isdigit@c& (0+255),b
 24091  001678  D002               	goto	l13166
 24092                           
 24093                           ; BSR set to: 0
 24094  00167A  0E01               	movlw	1
 24095  00167C  6F61               	movwf	_isdigit$2953& (0+255),b
 24096  00167E                     l13166:
 24097                           
 24098                           ; BSR set to: 0
 24099  00167E  C061  F060         	movff	_isdigit$2953,??_isdigit
 24100  001682  3160               	rrcf	??_isdigit& (0+255),w,b
 24101                           
 24102                           ; BSR set to: 0
 24103  001684  0012               	return	
 24104  001686                     __end_of_isdigit:
 24105                           	opt stack 0
 24106                           tblptru	equ	0xFF8
 24107                           tblptrh	equ	0xFF7
 24108                           tblptrl	equ	0xFF6
 24109                           tablat	equ	0xFF5
 24110                           prodh	equ	0xFF4
 24111                           prodl	equ	0xFF3
 24112                           intcon	equ	0xFF2
 24113                           indf0	equ	0xFEF
 24114                           postinc0	equ	0xFEE
 24115                           fsr0h	equ	0xFEA
 24116                           fsr0l	equ	0xFE9
 24117                           wreg	equ	0xFE8
 24118                           indf1	equ	0xFE7
 24119                           postinc1	equ	0xFE6
 24120                           postdec1	equ	0xFE5
 24121                           fsr1h	equ	0xFE2
 24122                           fsr1l	equ	0xFE1
 24123                           indf2	equ	0xFDF
 24124                           postinc2	equ	0xFDE
 24125                           postdec2	equ	0xFDD
 24126                           plusw2	equ	0xFDB
 24127                           fsr2h	equ	0xFDA
 24128                           fsr2l	equ	0xFD9
 24129                           status	equ	0xFD8
 24130                           
 24131 ;; *************** function _printFirmwareVersion *****************
 24132 ;; Defined at:
 24133 ;;		line 2803 in file "main.c"
 24134 ;; Parameters:    Size  Location     Type
 24135 ;;		None
 24136 ;; Auto vars:     Size  Location     Type
 24137 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 24138 ;; Return value:  Size  Location     Type
 24139 ;;		None               void
 24140 ;; Registers used:
 24141 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24142 ;; Tracked objects:
 24143 ;;		On entry : 0/0
 24144 ;;		On exit  : 0/0
 24145 ;;		Unchanged: 0/0
 24146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24147 ;;      Params:         0       0       0       0       0       0       0
 24148 ;;      Locals:         0      20       0       0       0       0       0
 24149 ;;      Temps:          0       0       0       0       0       0       0
 24150 ;;      Totals:         0      20       0       0       0       0       0
 24151 ;;Total ram usage:       20 bytes
 24152 ;; Hardware stack levels used:    1
 24153 ;; Hardware stack levels required when called:    6
 24154 ;; This function calls:
 24155 ;;		_putsUSART
 24156 ;;		_WriteUSART
 24157 ;;		_itoa
 24158 ;; This function is called by:
 24159 ;;		_main
 24160 ;;		_doModeVerbose
 24161 ;; This function uses a non-reentrant model
 24162 ;;
 24163                           
 24164                           	psect	text61
 24165  002190                     __ptext61:
 24166                           	opt stack 0
 24167  002190                     _printFirmwareVersion:
 24168                           	opt stack 22
 24169                           
 24170                           ;main.c: 2804: char wrkbuf[20];
 24171                           ;main.c: 2805: putsUSART((char *) "Version: ");
 24172                           
 24173                           ; BSR set to: 0
 24174                           ;incstack = 0
 24175                           ;incstack = 0
 24176  002190  0E7B               	movlw	high STR_262
 24177  002192  0100               	movlb	0	; () banked
 24178  002194  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24179  002196  0E86               	movlw	low STR_262
 24180  002198  6F61               	movwf	?_putsUSART& (0+255),b
 24181  00219A  ECA8  F00D         	call	_putsUSART	;wreg free
 24182                           
 24183                           ;main.c: 2806: itoa(wrkbuf, 1, 10);
 24184  00219E  0100               	movlb	0	; () banked
 24185  0021A0  D835               	call	PL56	;call to abstracted procedure
 24186  0021A2  ECBB  F00B         	call	_itoa	;wreg free
 24187                           
 24188                           ; BSR set to: 0
 24189                           ;main.c: 2807: putsUSART(wrkbuf);
 24190  0021A6  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24191  0021A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24192  0021AA  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24193  0021AC  6F61               	movwf	?_putsUSART& (0+255),b
 24194  0021AE  ECA8  F00D         	call	_putsUSART	;wreg free
 24195  0021B2                     l1241:
 24196  0021B2  A2AC               	btfss	4012,1,c	;volatile
 24197  0021B4  D7FE               	goto	l1241
 24198                           
 24199                           ;main.c: 2809: WriteUSART('.');
 24200  0021B6  0E2E               	movlw	46
 24201  0021B8  ECF3  F00A         	call	_WriteUSART
 24202                           
 24203                           ;main.c: 2810: itoa(wrkbuf, 1, 10);
 24204  0021BC  0100               	movlb	0	; () banked
 24205  0021BE  D826               	call	PL56	;call to abstracted procedure
 24206  0021C0  ECBB  F00B         	call	_itoa	;wreg free
 24207                           
 24208                           ; BSR set to: 0
 24209                           ;main.c: 2811: putsUSART(wrkbuf);
 24210  0021C4  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24211  0021C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24212  0021C8  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24213  0021CA  6F61               	movwf	?_putsUSART& (0+255),b
 24214  0021CC  ECA8  F00D         	call	_putsUSART	;wreg free
 24215  0021D0                     l1244:
 24216  0021D0  A2AC               	btfss	4012,1,c	;volatile
 24217  0021D2  D7FE               	goto	l1244
 24218                           
 24219                           ;main.c: 2813: WriteUSART('.');
 24220  0021D4  0E2E               	movlw	46
 24221  0021D6  ECF3  F00A         	call	_WriteUSART
 24222                           
 24223                           ;main.c: 2814: itoa(wrkbuf, 0, 10);
 24224  0021DA  0100               	movlb	0	; () banked
 24225  0021DC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24226  0021DE  6F71               	movwf	(?_itoa+1)& (0+255),b
 24227  0021E0  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24228  0021E2  6F70               	movwf	?_itoa& (0+255),b
 24229  0021E4  6B73               	clrf	(?_itoa+3)& (0+255),b
 24230  0021E6  6B72               	clrf	(?_itoa+2)& (0+255),b
 24231  0021E8  6B75               	clrf	(?_itoa+5)& (0+255),b
 24232  0021EA  0E0A               	movlw	10
 24233  0021EC  6F74               	movwf	(?_itoa+4)& (0+255),b
 24234  0021EE  ECBB  F00B         	call	_itoa	;wreg free
 24235                           
 24236                           ; BSR set to: 0
 24237                           ;main.c: 2815: putsUSART(wrkbuf);
 24238  0021F2  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24239  0021F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24240  0021F6  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24241  0021F8  6F61               	movwf	?_putsUSART& (0+255),b
 24242  0021FA  ECA8  F00D         	call	_putsUSART	;wreg free
 24243                           
 24244                           ;main.c: 2816: putsUSART((char *) "\r\n");
 24245  0021FE  0E71               	movlw	high (STR_205+50)
 24246  002200  0100               	movlb	0	; () banked
 24247  002202  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24248  002204  0EA8               	movlw	low (STR_205+50)
 24249  002206  6F61               	movwf	?_putsUSART& (0+255),b
 24250  002208  EFA8  F00D         	goto	_putsUSART	;wreg free
 24251  00220C                     __end_of_printFirmwareVersion:
 24252                           	opt stack 0
 24253  00220C                     PL56:
 24254                           	opt stack 22
 24255  00220C  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24256  00220E  6F71               	movwf	(?_itoa+1)& (0+255),b
 24257  002210  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24258  002212  6F70               	movwf	?_itoa& (0+255),b
 24259  002214  6B73               	clrf	(?_itoa+3)& (0+255),b
 24260  002216  0E01               	movlw	1
 24261  002218  6F72               	movwf	(?_itoa+2)& (0+255),b
 24262  00221A  6B75               	clrf	(?_itoa+5)& (0+255),b
 24263  00221C  0E0A               	movlw	10
 24264  00221E  6F74               	movwf	(?_itoa+4)& (0+255),b
 24265  002220  0C0A               	retlw	10
 24266  002222                     __end_ofPL56:
 24267                           	opt stack 0
 24268                           tblptru	equ	0xFF8
 24269                           tblptrh	equ	0xFF7
 24270                           tblptrl	equ	0xFF6
 24271                           tablat	equ	0xFF5
 24272                           prodh	equ	0xFF4
 24273                           prodl	equ	0xFF3
 24274                           intcon	equ	0xFF2
 24275                           indf0	equ	0xFEF
 24276                           postinc0	equ	0xFEE
 24277                           fsr0h	equ	0xFEA
 24278                           fsr0l	equ	0xFE9
 24279                           wreg	equ	0xFE8
 24280                           indf1	equ	0xFE7
 24281                           postinc1	equ	0xFE6
 24282                           postdec1	equ	0xFE5
 24283                           fsr1h	equ	0xFE2
 24284                           fsr1l	equ	0xFE1
 24285                           indf2	equ	0xFDF
 24286                           postinc2	equ	0xFDE
 24287                           postdec2	equ	0xFDD
 24288                           plusw2	equ	0xFDB
 24289                           fsr2h	equ	0xFDA
 24290                           fsr2l	equ	0xFD9
 24291                           status	equ	0xFD8
 24292                           
 24293 ;; *************** function _itoa *****************
 24294 ;; Defined at:
 24295 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24296 ;; Parameters:    Size  Location     Type
 24297 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24298 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24299 ;;  val             2   18[BANK0 ] int 
 24300 ;;  base            2   20[BANK0 ] int 
 24301 ;; Auto vars:     Size  Location     Type
 24302 ;;  cp              2    0        PTR unsigned char 
 24303 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24304 ;; Return value:  Size  Location     Type
 24305 ;;                  2   16[BANK0 ] PTR unsigned char 
 24306 ;; Registers used:
 24307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24308 ;; Tracked objects:
 24309 ;;		On entry : F/0
 24310 ;;		On exit  : F/0
 24311 ;;		Unchanged: 0/0
 24312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24313 ;;      Params:         0       6       0       0       0       0       0
 24314 ;;      Locals:         0       2       0       0       0       0       0
 24315 ;;      Temps:          0       0       0       0       0       0       0
 24316 ;;      Totals:         0       8       0       0       0       0       0
 24317 ;;Total ram usage:        8 bytes
 24318 ;; Hardware stack levels used:    1
 24319 ;; Hardware stack levels required when called:    5
 24320 ;; This function calls:
 24321 ;;		_utoa
 24322 ;; This function is called by:
 24323 ;;		_receiveSendEventSLCAN
 24324 ;;		_findNodes
 24325 ;;		_printGUID
 24326 ;;		_printNodeFirmwareVersion
 24327 ;;		_printFirmwareVersion
 24328 ;; This function uses a non-reentrant model
 24329 ;;
 24330                           
 24331                           	psect	text62
 24332  001776                     __ptext62:
 24333                           	opt stack 0
 24334  001776                     _itoa:
 24335                           	opt stack 22
 24336                           
 24337                           ; BSR set to: 0
 24338                           
 24339                           ;incstack = 0
 24340                           ;incstack = 0
 24341  001776  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24342  001778  D00C               	goto	l16338
 24343                           
 24344                           ; BSR set to: 0
 24345  00177A  C070  FFD9         	movff	itoa@buf,fsr2l
 24346  00177E  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24347  001782  0E2D               	movlw	45
 24348  001784  6EDF               	movwf	indf2,c
 24349                           
 24350                           ; BSR set to: 0
 24351  001786  4B70               	infsnz	itoa@buf& (0+255),f,b
 24352  001788  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24353                           
 24354                           ; BSR set to: 0
 24355  00178A  6D72               	negf	itoa@val& (0+255),b
 24356  00178C  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24357  00178E  B0D8               	btfsc	status,0,c
 24358  001790  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24359  001792                     l16338:
 24360                           
 24361                           ; BSR set to: 0
 24362  001792  C070  F067         	movff	itoa@buf,?_utoa
 24363  001796  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24364  00179A  C072  F069         	movff	itoa@val,?_utoa+2
 24365  00179E  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24366  0017A2  C074  F06B         	movff	itoa@base,?_utoa+4
 24367  0017A6  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24368  0017AA  EF40  F012         	goto	_utoa	;wreg free
 24369  0017AE                     __end_of_itoa:
 24370                           	opt stack 0
 24371                           tblptru	equ	0xFF8
 24372                           tblptrh	equ	0xFF7
 24373                           tblptrl	equ	0xFF6
 24374                           tablat	equ	0xFF5
 24375                           prodh	equ	0xFF4
 24376                           prodl	equ	0xFF3
 24377                           intcon	equ	0xFF2
 24378                           indf0	equ	0xFEF
 24379                           postinc0	equ	0xFEE
 24380                           fsr0h	equ	0xFEA
 24381                           fsr0l	equ	0xFE9
 24382                           wreg	equ	0xFE8
 24383                           indf1	equ	0xFE7
 24384                           postinc1	equ	0xFE6
 24385                           postdec1	equ	0xFE5
 24386                           fsr1h	equ	0xFE2
 24387                           fsr1l	equ	0xFE1
 24388                           indf2	equ	0xFDF
 24389                           postinc2	equ	0xFDE
 24390                           postdec2	equ	0xFDD
 24391                           plusw2	equ	0xFDB
 24392                           fsr2h	equ	0xFDA
 24393                           fsr2l	equ	0xFD9
 24394                           status	equ	0xFD8
 24395                           
 24396 ;; *************** function _utoa *****************
 24397 ;; Defined at:
 24398 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24399 ;; Parameters:    Size  Location     Type
 24400 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24401 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24402 ;;  val             2    9[BANK0 ] unsigned int 
 24403 ;;  base            2   11[BANK0 ] int 
 24404 ;; Auto vars:     Size  Location     Type
 24405 ;;  v               2   13[BANK0 ] unsigned int 
 24406 ;;  c               1   15[BANK0 ] unsigned char 
 24407 ;; Return value:  Size  Location     Type
 24408 ;;                  2    7[BANK0 ] PTR unsigned char 
 24409 ;; Registers used:
 24410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24411 ;; Tracked objects:
 24412 ;;		On entry : F/0
 24413 ;;		On exit  : F/0
 24414 ;;		Unchanged: 0/0
 24415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24416 ;;      Params:         0       6       0       0       0       0       0
 24417 ;;      Locals:         0       3       0       0       0       0       0
 24418 ;;      Temps:          0       0       0       0       0       0       0
 24419 ;;      Totals:         0       9       0       0       0       0       0
 24420 ;;Total ram usage:        9 bytes
 24421 ;; Hardware stack levels used:    1
 24422 ;; Hardware stack levels required when called:    4
 24423 ;; This function calls:
 24424 ;;		___lwdiv
 24425 ;;		___lwmod
 24426 ;; This function is called by:
 24427 ;;		_itoa
 24428 ;; This function uses a non-reentrant model
 24429 ;;
 24430                           
 24431                           	psect	text63
 24432  002480                     __ptext63:
 24433                           	opt stack 0
 24434  002480                     _utoa:
 24435                           	opt stack 22
 24436                           
 24437                           ; BSR set to: 0
 24438                           
 24439                           ; BSR set to: 0
 24440                           ;incstack = 0
 24441                           ;incstack = 0
 24442  002480  C069  F06D         	movff	utoa@val,utoa@v
 24443  002484  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24444  002488                     l16414:
 24445                           
 24446                           ; BSR set to: 0
 24447  002488  C06D  F060         	movff	utoa@v,?___lwdiv
 24448  00248C  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24449  002490  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24450  002494  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24451  002498  EC37  F00D         	call	___lwdiv	;wreg free
 24452  00249C  C060  F06D         	movff	?___lwdiv,utoa@v
 24453  0024A0  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24454                           
 24455                           ; BSR set to: 0
 24456  0024A4  4B67               	infsnz	utoa@buf& (0+255),f,b
 24457  0024A6  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24458                           
 24459                           ; BSR set to: 0
 24460  0024A8  516E               	movf	(utoa@v+1)& (0+255),w,b
 24461  0024AA  116D               	iorwf	utoa@v& (0+255),w,b
 24462  0024AC  E1ED               	bnz	l16414
 24463                           
 24464                           ; BSR set to: 0
 24465  0024AE  C067  FFD9         	movff	utoa@buf,fsr2l
 24466  0024B2  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24467  0024B6  0E00               	movlw	0
 24468  0024B8  6ADF               	clrf	indf2,c
 24469                           
 24470                           ; BSR set to: 0
 24471  0024BA  0767               	decf	utoa@buf& (0+255),f,b
 24472  0024BC  A0D8               	btfss	status,0,c
 24473  0024BE  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24474  0024C0                     l16424:
 24475                           
 24476                           ; BSR set to: 0
 24477  0024C0  C069  F060         	movff	utoa@val,?___lwmod
 24478  0024C4  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24479  0024C8  C06B  F062         	movff	utoa@base,?___lwmod+2
 24480  0024CC  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24481  0024D0  EC10  F00C         	call	___lwmod	;wreg free
 24482  0024D4  5160               	movf	?___lwmod& (0+255),w,b
 24483  0024D6  6F6F               	movwf	utoa@c& (0+255),b
 24484                           
 24485                           ; BSR set to: 0
 24486  0024D8  C069  F060         	movff	utoa@val,?___lwdiv
 24487  0024DC  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24488  0024E0  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24489  0024E4  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24490  0024E8  EC37  F00D         	call	___lwdiv	;wreg free
 24491  0024EC  C060  F069         	movff	?___lwdiv,utoa@val
 24492  0024F0  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24493                           
 24494                           ; BSR set to: 0
 24495  0024F4  0E09               	movlw	9
 24496  0024F6  656F               	cpfsgt	utoa@c& (0+255),b
 24497  0024F8  D002               	goto	l2348
 24498                           
 24499                           ; BSR set to: 0
 24500  0024FA  0E07               	movlw	7
 24501  0024FC  276F               	addwf	utoa@c& (0+255),f,b
 24502  0024FE                     l2348:
 24503                           
 24504                           ; BSR set to: 0
 24505  0024FE  0E30               	movlw	48
 24506  002500  276F               	addwf	utoa@c& (0+255),f,b
 24507                           
 24508                           ; BSR set to: 0
 24509  002502  C067  FFD9         	movff	utoa@buf,fsr2l
 24510  002506  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24511  00250A  C06F  FFDF         	movff	utoa@c,indf2
 24512                           
 24513                           ; BSR set to: 0
 24514  00250E  0767               	decf	utoa@buf& (0+255),f,b
 24515  002510  A0D8               	btfss	status,0,c
 24516  002512  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24517                           
 24518                           ; BSR set to: 0
 24519  002514  516A               	movf	(utoa@val+1)& (0+255),w,b
 24520  002516  1169               	iorwf	utoa@val& (0+255),w,b
 24521  002518  E1D3               	bnz	l16424
 24522                           
 24523                           ; BSR set to: 0
 24524                           ;	Return value of _utoa is never used
 24525  00251A  4B67               	infsnz	utoa@buf& (0+255),f,b
 24526  00251C  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24527                           
 24528                           ; BSR set to: 0
 24529  00251E  0012               	return	
 24530  002520                     __end_of_utoa:
 24531                           	opt stack 0
 24532                           tblptru	equ	0xFF8
 24533                           tblptrh	equ	0xFF7
 24534                           tblptrl	equ	0xFF6
 24535                           tablat	equ	0xFF5
 24536                           prodh	equ	0xFF4
 24537                           prodl	equ	0xFF3
 24538                           intcon	equ	0xFF2
 24539                           indf0	equ	0xFEF
 24540                           postinc0	equ	0xFEE
 24541                           fsr0h	equ	0xFEA
 24542                           fsr0l	equ	0xFE9
 24543                           wreg	equ	0xFE8
 24544                           indf1	equ	0xFE7
 24545                           postinc1	equ	0xFE6
 24546                           postdec1	equ	0xFE5
 24547                           fsr1h	equ	0xFE2
 24548                           fsr1l	equ	0xFE1
 24549                           indf2	equ	0xFDF
 24550                           postinc2	equ	0xFDE
 24551                           postdec2	equ	0xFDD
 24552                           plusw2	equ	0xFDB
 24553                           fsr2h	equ	0xFDA
 24554                           fsr2l	equ	0xFD9
 24555                           status	equ	0xFD8
 24556                           
 24557 ;; *************** function ___lwmod *****************
 24558 ;; Defined at:
 24559 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24560 ;; Parameters:    Size  Location     Type
 24561 ;;  dividend        2    0[BANK0 ] unsigned int 
 24562 ;;  divisor         2    2[BANK0 ] unsigned int 
 24563 ;; Auto vars:     Size  Location     Type
 24564 ;;  counter         1    4[BANK0 ] unsigned char 
 24565 ;; Return value:  Size  Location     Type
 24566 ;;                  2    0[BANK0 ] unsigned int 
 24567 ;; Registers used:
 24568 ;;		wreg, status,2, status,0
 24569 ;; Tracked objects:
 24570 ;;		On entry : F/0
 24571 ;;		On exit  : F/0
 24572 ;;		Unchanged: 0/0
 24573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24574 ;;      Params:         0       4       0       0       0       0       0
 24575 ;;      Locals:         0       1       0       0       0       0       0
 24576 ;;      Temps:          0       0       0       0       0       0       0
 24577 ;;      Totals:         0       5       0       0       0       0       0
 24578 ;;Total ram usage:        5 bytes
 24579 ;; Hardware stack levels used:    1
 24580 ;; Hardware stack levels required when called:    3
 24581 ;; This function calls:
 24582 ;;		Nothing
 24583 ;; This function is called by:
 24584 ;;		_utoa
 24585 ;; This function uses a non-reentrant model
 24586 ;;
 24587                           
 24588                           	psect	text64
 24589  001820                     __ptext64:
 24590                           	opt stack 0
 24591  001820                     ___lwmod:
 24592                           	opt stack 22
 24593                           
 24594                           ; BSR set to: 0
 24595                           
 24596                           ; BSR set to: 0
 24597                           ;incstack = 0
 24598                           ;incstack = 0
 24599  001820  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24600  001822  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24601  001824  E017               	bz	l2472
 24602                           
 24603                           ; BSR set to: 0
 24604  001826  0E01               	movlw	1
 24605  001828  6F64               	movwf	___lwmod@counter& (0+255),b
 24606  00182A  D004               	goto	l16508
 24607  00182C                     l16506:
 24608                           
 24609                           ; BSR set to: 0
 24610  00182C  90D8               	bcf	status,0,c
 24611  00182E  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24612  001830  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24613  001832  2B64               	incf	___lwmod@counter& (0+255),f,b
 24614  001834                     l16508:
 24615                           
 24616                           ; BSR set to: 0
 24617  001834  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24618  001836  D7FA               	goto	l16506
 24619  001838                     l16510:
 24620                           
 24621                           ; BSR set to: 0
 24622  001838  5162               	movf	___lwmod@divisor& (0+255),w,b
 24623  00183A  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24624  00183C  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24625  00183E  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24626  001840  E304               	bnc	l16514
 24627                           
 24628                           ; BSR set to: 0
 24629  001842  5162               	movf	___lwmod@divisor& (0+255),w,b
 24630  001844  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24631  001846  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24632  001848  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24633  00184A                     l16514:
 24634                           
 24635                           ; BSR set to: 0
 24636  00184A  90D8               	bcf	status,0,c
 24637  00184C  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24638  00184E  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24639                           
 24640                           ; BSR set to: 0
 24641  001850  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24642  001852  D7F2               	goto	l16510
 24643  001854                     l2472:
 24644                           
 24645                           ; BSR set to: 0
 24646  001854  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24647  001858  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24648                           
 24649                           ; BSR set to: 0
 24650  00185C  0012               	return	
 24651  00185E                     __end_of___lwmod:
 24652                           	opt stack 0
 24653                           tblptru	equ	0xFF8
 24654                           tblptrh	equ	0xFF7
 24655                           tblptrl	equ	0xFF6
 24656                           tablat	equ	0xFF5
 24657                           prodh	equ	0xFF4
 24658                           prodl	equ	0xFF3
 24659                           intcon	equ	0xFF2
 24660                           indf0	equ	0xFEF
 24661                           postinc0	equ	0xFEE
 24662                           fsr0h	equ	0xFEA
 24663                           fsr0l	equ	0xFE9
 24664                           wreg	equ	0xFE8
 24665                           indf1	equ	0xFE7
 24666                           postinc1	equ	0xFE6
 24667                           postdec1	equ	0xFE5
 24668                           fsr1h	equ	0xFE2
 24669                           fsr1l	equ	0xFE1
 24670                           indf2	equ	0xFDF
 24671                           postinc2	equ	0xFDE
 24672                           postdec2	equ	0xFDD
 24673                           plusw2	equ	0xFDB
 24674                           fsr2h	equ	0xFDA
 24675                           fsr2l	equ	0xFD9
 24676                           status	equ	0xFD8
 24677                           
 24678 ;; *************** function ___lwdiv *****************
 24679 ;; Defined at:
 24680 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24681 ;; Parameters:    Size  Location     Type
 24682 ;;  dividend        2    0[BANK0 ] unsigned int 
 24683 ;;  divisor         2    2[BANK0 ] unsigned int 
 24684 ;; Auto vars:     Size  Location     Type
 24685 ;;  quotient        2    5[BANK0 ] unsigned int 
 24686 ;;  counter         1    4[BANK0 ] unsigned char 
 24687 ;; Return value:  Size  Location     Type
 24688 ;;                  2    0[BANK0 ] unsigned int 
 24689 ;; Registers used:
 24690 ;;		wreg, status,2, status,0
 24691 ;; Tracked objects:
 24692 ;;		On entry : F/0
 24693 ;;		On exit  : F/0
 24694 ;;		Unchanged: 0/0
 24695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24696 ;;      Params:         0       4       0       0       0       0       0
 24697 ;;      Locals:         0       3       0       0       0       0       0
 24698 ;;      Temps:          0       0       0       0       0       0       0
 24699 ;;      Totals:         0       7       0       0       0       0       0
 24700 ;;Total ram usage:        7 bytes
 24701 ;; Hardware stack levels used:    1
 24702 ;; Hardware stack levels required when called:    3
 24703 ;; This function calls:
 24704 ;;		Nothing
 24705 ;; This function is called by:
 24706 ;;		_utoa
 24707 ;; This function uses a non-reentrant model
 24708 ;;
 24709                           
 24710                           	psect	text65
 24711  001A6E                     __ptext65:
 24712                           	opt stack 0
 24713  001A6E                     ___lwdiv:
 24714                           	opt stack 22
 24715                           
 24716                           ; BSR set to: 0
 24717                           
 24718                           ; BSR set to: 0
 24719                           ;incstack = 0
 24720                           ;incstack = 0
 24721  001A6E  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24722  001A70  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24723                           
 24724                           ; BSR set to: 0
 24725  001A72  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24726  001A74  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24727  001A76  E01B               	bz	l2462
 24728                           
 24729                           ; BSR set to: 0
 24730  001A78  0E01               	movlw	1
 24731  001A7A  6F64               	movwf	___lwdiv@counter& (0+255),b
 24732  001A7C  D004               	goto	l16488
 24733  001A7E                     l16486:
 24734                           
 24735                           ; BSR set to: 0
 24736  001A7E  90D8               	bcf	status,0,c
 24737  001A80  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24738  001A82  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24739  001A84  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24740  001A86                     l16488:
 24741                           
 24742                           ; BSR set to: 0
 24743  001A86  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24744  001A88  D7FA               	goto	l16486
 24745  001A8A                     l16490:
 24746                           
 24747                           ; BSR set to: 0
 24748  001A8A  90D8               	bcf	status,0,c
 24749  001A8C  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24750  001A8E  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24751                           
 24752                           ; BSR set to: 0
 24753  001A90  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24754  001A92  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24755  001A94  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24756  001A96  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24757  001A98  E305               	bnc	l16498
 24758                           
 24759                           ; BSR set to: 0
 24760  001A9A  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24761  001A9C  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24762  001A9E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24763  001AA0  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24764                           
 24765                           ; BSR set to: 0
 24766  001AA2  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24767  001AA4                     l16498:
 24768                           
 24769                           ; BSR set to: 0
 24770  001AA4  90D8               	bcf	status,0,c
 24771  001AA6  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24772  001AA8  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24773                           
 24774                           ; BSR set to: 0
 24775  001AAA  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24776  001AAC  D7EE               	goto	l16490
 24777  001AAE                     l2462:
 24778                           
 24779                           ; BSR set to: 0
 24780  001AAE  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24781  001AB2  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24782                           
 24783                           ; BSR set to: 0
 24784  001AB6  0012               	return	
 24785  001AB8                     __end_of___lwdiv:
 24786                           	opt stack 0
 24787                           tblptru	equ	0xFF8
 24788                           tblptrh	equ	0xFF7
 24789                           tblptrl	equ	0xFF6
 24790                           tablat	equ	0xFF5
 24791                           prodh	equ	0xFF4
 24792                           prodl	equ	0xFF3
 24793                           intcon	equ	0xFF2
 24794                           indf0	equ	0xFEF
 24795                           postinc0	equ	0xFEE
 24796                           fsr0h	equ	0xFEA
 24797                           fsr0l	equ	0xFE9
 24798                           wreg	equ	0xFE8
 24799                           indf1	equ	0xFE7
 24800                           postinc1	equ	0xFE6
 24801                           postdec1	equ	0xFE5
 24802                           fsr1h	equ	0xFE2
 24803                           fsr1l	equ	0xFE1
 24804                           indf2	equ	0xFDF
 24805                           postinc2	equ	0xFDE
 24806                           postdec2	equ	0xFDD
 24807                           plusw2	equ	0xFDB
 24808                           fsr2h	equ	0xFDA
 24809                           fsr2l	equ	0xFD9
 24810                           status	equ	0xFD8
 24811                           
 24812 ;; *************** function _printMode *****************
 24813 ;; Defined at:
 24814 ;;		line 2824 in file "main.c"
 24815 ;; Parameters:    Size  Location     Type
 24816 ;;		None
 24817 ;; Auto vars:     Size  Location     Type
 24818 ;;		None
 24819 ;; Return value:  Size  Location     Type
 24820 ;;		None               void
 24821 ;; Registers used:
 24822 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24823 ;; Tracked objects:
 24824 ;;		On entry : 0/0
 24825 ;;		On exit  : 0/0
 24826 ;;		Unchanged: 0/0
 24827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24828 ;;      Params:         0       0       0       0       0       0       0
 24829 ;;      Locals:         0       0       0       0       0       0       0
 24830 ;;      Temps:          0       0       0       0       0       0       0
 24831 ;;      Totals:         0       0       0       0       0       0       0
 24832 ;;Total ram usage:        0 bytes
 24833 ;; Hardware stack levels used:    1
 24834 ;; Hardware stack levels required when called:    5
 24835 ;; This function calls:
 24836 ;;		_putsUSART
 24837 ;; This function is called by:
 24838 ;;		_main
 24839 ;; This function uses a non-reentrant model
 24840 ;;
 24841                           
 24842                           	psect	text66
 24843  001F2E                     __ptext66:
 24844                           	opt stack 0
 24845  001F2E                     _printMode:
 24846                           	opt stack 24
 24847                           
 24848                           ;main.c: 2825: putsUSART((char *) "Mode: ");
 24849                           
 24850                           ; BSR set to: 0
 24851                           ;incstack = 0
 24852                           ;incstack = 0
 24853  001F2E  0E7C               	movlw	high STR_264
 24854  001F30  0100               	movlb	0	; () banked
 24855  001F32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24856  001F34  0E18               	movlw	low STR_264
 24857  001F36  6F61               	movwf	?_putsUSART& (0+255),b
 24858  001F38  ECA8  F00D         	call	_putsUSART	;wreg free
 24859                           
 24860                           ;main.c: 2826: if (0 == mode) {
 24861  001F3C  0100               	movlb	0	; () banked
 24862  001F3E  67E6               	tstfsz	_mode& (0+255),b
 24863  001F40  D007               	goto	l13652
 24864                           
 24865                           ; BSR set to: 0
 24866                           ;main.c: 2827: putsUSART((char *) "Verbose");
 24867  001F42  0E7C               	movlw	high STR_265
 24868  001F44  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24869  001F46  0E10               	movlw	low STR_265
 24870  001F48  6F61               	movwf	?_putsUSART& (0+255),b
 24871  001F4A  ECA8  F00D         	call	_putsUSART	;wreg free
 24872                           
 24873                           ;main.c: 2828: } else if (1 == mode) {
 24874  001F4E  D023               	goto	l1251
 24875  001F50                     l13652:
 24876                           
 24877                           ; BSR set to: 0
 24878  001F50  05E6               	decf	_mode& (0+255),w,b
 24879  001F52  E107               	bnz	l13656
 24880                           
 24881                           ; BSR set to: 0
 24882                           ;main.c: 2829: putsUSART((char *) "VSCP Driver");
 24883  001F54  0E7B               	movlw	high STR_266
 24884  001F56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24885  001F58  0E5A               	movlw	low STR_266
 24886  001F5A  6F61               	movwf	?_putsUSART& (0+255),b
 24887  001F5C  ECA8  F00D         	call	_putsUSART	;wreg free
 24888                           
 24889                           ;main.c: 2830: } else if (2 == mode) {
 24890  001F60  D01A               	goto	l1251
 24891  001F62                     l13656:
 24892                           
 24893                           ; BSR set to: 0
 24894  001F62  51E6               	movf	_mode& (0+255),w,b
 24895  001F64  0A02               	xorlw	2
 24896  001F66  E107               	bnz	l13660
 24897                           
 24898                           ; BSR set to: 0
 24899                           ;main.c: 2831: putsUSART((char *) "SL Driver");
 24900  001F68  0E7B               	movlw	high STR_267
 24901  001F6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24902  001F6C  0E9A               	movlw	low STR_267
 24903  001F6E  6F61               	movwf	?_putsUSART& (0+255),b
 24904  001F70  ECA8  F00D         	call	_putsUSART	;wreg free
 24905                           
 24906                           ;main.c: 2832: } else if (3 == mode) {
 24907  001F74  D010               	goto	l1251
 24908  001F76                     l13660:
 24909                           
 24910                           ; BSR set to: 0
 24911  001F76  51E6               	movf	_mode& (0+255),w,b
 24912  001F78  0A03               	xorlw	3
 24913  001F7A  E107               	bnz	l13664
 24914                           
 24915                           ; BSR set to: 0
 24916                           ;main.c: 2833: putsUSART((char *) "VSCP Node");
 24917  001F7C  0E7B               	movlw	high STR_268
 24918  001F7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24919  001F80  0E90               	movlw	low STR_268
 24920  001F82  6F61               	movwf	?_putsUSART& (0+255),b
 24921  001F84  ECA8  F00D         	call	_putsUSART	;wreg free
 24922                           
 24923                           ;main.c: 2834: } else {
 24924  001F88  D006               	goto	l1251
 24925  001F8A                     l13664:
 24926                           
 24927                           ; BSR set to: 0
 24928                           ;main.c: 2835: putsUSART((char *) "Unknown (Verbose used)");
 24929  001F8A  0E79               	movlw	high STR_269
 24930  001F8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24931  001F8E  0ECE               	movlw	low STR_269
 24932  001F90  6F61               	movwf	?_putsUSART& (0+255),b
 24933  001F92  ECA8  F00D         	call	_putsUSART	;wreg free
 24934  001F96                     l1251:
 24935                           
 24936                           ;main.c: 2836: }
 24937                           ;main.c: 2837: putsUSART((char *) "\r\n");
 24938  001F96  0E71               	movlw	high (STR_205+50)
 24939  001F98  0100               	movlb	0	; () banked
 24940  001F9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24941  001F9C  0EA8               	movlw	low (STR_205+50)
 24942  001F9E  6F61               	movwf	?_putsUSART& (0+255),b
 24943  001FA0  EFA8  F00D         	goto	_putsUSART	;wreg free
 24944  001FA4                     __end_of_printMode:
 24945                           	opt stack 0
 24946                           tblptru	equ	0xFF8
 24947                           tblptrh	equ	0xFF7
 24948                           tblptrl	equ	0xFF6
 24949                           tablat	equ	0xFF5
 24950                           prodh	equ	0xFF4
 24951                           prodl	equ	0xFF3
 24952                           intcon	equ	0xFF2
 24953                           indf0	equ	0xFEF
 24954                           postinc0	equ	0xFEE
 24955                           fsr0h	equ	0xFEA
 24956                           fsr0l	equ	0xFE9
 24957                           wreg	equ	0xFE8
 24958                           indf1	equ	0xFE7
 24959                           postinc1	equ	0xFE6
 24960                           postdec1	equ	0xFE5
 24961                           fsr1h	equ	0xFE2
 24962                           fsr1l	equ	0xFE1
 24963                           indf2	equ	0xFDF
 24964                           postinc2	equ	0xFDE
 24965                           postdec2	equ	0xFDD
 24966                           plusw2	equ	0xFDB
 24967                           fsr2h	equ	0xFDA
 24968                           fsr2l	equ	0xFD9
 24969                           status	equ	0xFD8
 24970                           
 24971 ;; *************** function _putsUSART *****************
 24972 ;; Defined at:
 24973 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24974 ;; Parameters:    Size  Location     Type
 24975 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24976 ;;		 -> STR_270(3), STR_269(23), STR_268(10), STR_267(10), 
 24977 ;;		 -> STR_266(12), STR_265(8), STR_264(7), STR_263(3), 
 24978 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_262(10), STR_261(3), STR_258(20), 
 24979 ;;		 -> STR_257(3), STR_256(14), STR_255(3), STR_251(8), 
 24980 ;;		 -> STR_250(15), STR_249(67), STR_248(3), STR_247(27), 
 24981 ;;		 -> STR_246(67), STR_245(39), STR_244(62), STR_243(55), 
 24982 ;;		 -> STR_242(49), STR_241(67), STR_240(47), STR_239(47), 
 24983 ;;		 -> STR_238(34), STR_237(71), STR_236(20), STR_235(78), 
 24984 ;;		 -> STR_234(24), STR_233(77), STR_232(74), STR_231(76), 
 24985 ;;		 -> STR_230(47), STR_229(40), STR_228(39), STR_227(33), 
 24986 ;;		 -> STR_226(23), STR_225(56), STR_224(24), STR_223(44), 
 24987 ;;		 -> STR_222(50), STR_221(31), STR_220(50), STR_219(51), 
 24988 ;;		 -> STR_218(46), STR_217(44), STR_216(27), STR_215(39), 
 24989 ;;		 -> STR_214(39), STR_213(52), STR_212(54), STR_211(55), 
 24990 ;;		 -> STR_210(3), STR_207(24), STR_206(57), STR_205(53), 
 24991 ;;		 -> STR_204(58), STR_203(3), STR_200(25), STR_199(3), 
 24992 ;;		 -> STR_196(24), STR_195(3), STR_192(24), STR_191(3), 
 24993 ;;		 -> STR_188(24), STR_187(3), STR_184(23), STR_183(3), 
 24994 ;;		 -> STR_180(21), STR_179(3), STR_176(22), STR_175(3), 
 24995 ;;		 -> STR_172(17), STR_171(3), STR_168(18), STR_167(4), 
 24996 ;;		 -> STR_166(11), STR_165(2), STR_162(7), STR_159(7), 
 24997 ;;		 -> STR_156(9), STR_153(7), STR_150(8), STR_147(7), 
 24998 ;;		 -> STR_146(2), STR_145(2), STR_144(6), STR_143(8), 
 24999 ;;		 -> STR_142(8), STR_141(20), STR_140(27), STR_139(6), 
 25000 ;;		 -> STR_138(33), STR_135(26), STR_133(32), STR_131(28), 
 25001 ;;		 -> STR_127(6), STR_125(40), STR_123(44), STR_120(6), 
 25002 ;;		 -> STR_119(39), STR_117(36), STR_115(37), STR_113(40), 
 25003 ;;		 -> STR_111(37), STR_110(50), STR_107(6), STR_106(41), 
 25004 ;;		 -> STR_104(38), STR_102(39), STR_100(42), STR_98(39), 
 25005 ;;		 -> STR_97(66), STR_94(6), STR_93(3), STR_90(20), 
 25006 ;;		 -> STR_88(33), STR_87(35), STR_86(24), STR_84(33), 
 25007 ;;		 -> STR_82(24), STR_79(54), STR_78(6), STR_77(3), 
 25008 ;;		 -> STR_72(25), STR_69(9), STR_68(3), STR_67(4), 
 25009 ;;		 -> STR_66(3), STR_63(4), STR_58(15), wrkbuf(80), 
 25010 ;;		 -> STR_55(8), STR_53(33), STR_51(24), STR_48(6), 
 25011 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 25012 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 25013 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 25014 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 25015 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 25016 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 25017 ;;		 -> STR_3(35), STR_2(58), STR_1(37), 
 25018 ;; Auto vars:     Size  Location     Type
 25019 ;;		None
 25020 ;; Return value:  Size  Location     Type
 25021 ;;		None               void
 25022 ;; Registers used:
 25023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25024 ;; Tracked objects:
 25025 ;;		On entry : F/0
 25026 ;;		On exit  : 0/0
 25027 ;;		Unchanged: 0/0
 25028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25029 ;;      Params:         0       2       0       0       0       0       0
 25030 ;;      Locals:         0       0       0       0       0       0       0
 25031 ;;      Temps:          0       2       0       0       0       0       0
 25032 ;;      Totals:         0       4       0       0       0       0       0
 25033 ;;Total ram usage:        4 bytes
 25034 ;; Hardware stack levels used:    1
 25035 ;; Hardware stack levels required when called:    4
 25036 ;; This function calls:
 25037 ;;		_WriteUSART
 25038 ;; This function is called by:
 25039 ;;		_main
 25040 ;;		_doModeVerbose
 25041 ;;		_doModeSLCAN
 25042 ;;		_receivePrintEventVerbose
 25043 ;;		_receiveSendEventSLCAN
 25044 ;;		_printStatistics
 25045 ;;		_printErrors
 25046 ;;		_printHelp
 25047 ;;		_findNodes
 25048 ;;		_printGUID
 25049 ;;		_printMDF
 25050 ;;		_printNodeFirmwareVersion
 25051 ;;		_printFirmwareVersion
 25052 ;;		_printMode
 25053 ;; This function uses a non-reentrant model
 25054 ;;
 25055                           
 25056                           	psect	text67
 25057  001B50                     __ptext67:
 25058                           	opt stack 0
 25059  001B50                     _putsUSART:
 25060                           	opt stack 23
 25061  001B50                     l1864:
 25062  001B50  A2AC               	btfss	4012,1,c	;volatile
 25063  001B52  D7FE               	goto	l1864
 25064  001B54  0100               	movlb	0	; () banked
 25065  001B56  5161               	movf	putsUSART@data& (0+255),w,b
 25066  001B58  6EF6               	movwf	tblptrl,c
 25067  001B5A  6EE9               	movwf	fsr0l,c
 25068  001B5C  0E05               	movlw	(high __ramtop+-1)
 25069  001B5E  6EEA               	movwf	fsr0h,c
 25070  001B60  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25071  001B62  64EA               	cpfsgt	fsr0h,c
 25072  001B64  D003               	bra	u17987
 25073  001B66  6EEA               	movwf	fsr0h,c
 25074  001B68  50EF               	movf	indf0,w,c
 25075  001B6A  D003               	bra	u17980
 25076  001B6C                     u17987:
 25077  001B6C  6EF7               	movwf	tblptrh,c
 25078  001B6E  0008               	tblrd		*
 25079  001B70  50F5               	movf	tablat,w,c
 25080  001B72                     u17980:
 25081  001B72  ECF3  F00A         	call	_WriteUSART
 25082  001B76  0100               	movlb	0	; () banked
 25083  001B78  5161               	movf	putsUSART@data& (0+255),w,b
 25084  001B7A  6F63               	movwf	??_putsUSART& (0+255),b
 25085  001B7C  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 25086  001B7E  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 25087  001B80  4B61               	infsnz	putsUSART@data& (0+255),f,b
 25088  001B82  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 25089  001B84  5163               	movf	??_putsUSART& (0+255),w,b
 25090  001B86  6EF6               	movwf	tblptrl,c
 25091  001B88  6EE9               	movwf	fsr0l,c
 25092  001B8A  0E05               	movlw	(high __ramtop+-1)
 25093  001B8C  6EEA               	movwf	fsr0h,c
 25094  001B8E  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 25095  001B90  64EA               	cpfsgt	fsr0h,c
 25096  001B92  D003               	bra	u17997
 25097  001B94  6EEA               	movwf	fsr0h,c
 25098  001B96  50EF               	movf	indf0,w,c
 25099  001B98  D003               	bra	u17990
 25100  001B9A                     u17997:
 25101  001B9A  6EF7               	movwf	tblptrh,c
 25102  001B9C  0008               	tblrd		*
 25103  001B9E  50F5               	movf	tablat,w,c
 25104  001BA0                     u17990:
 25105  001BA0  0900               	iorlw	0
 25106  001BA2  B4D8               	btfsc	status,2,c
 25107  001BA4  0012               	return	
 25108  001BA6  D7D4               	goto	l1864
 25109  001BA8                     __end_of_putsUSART:
 25110                           	opt stack 0
 25111                           tblptru	equ	0xFF8
 25112                           tblptrh	equ	0xFF7
 25113                           tblptrl	equ	0xFF6
 25114                           tablat	equ	0xFF5
 25115                           prodh	equ	0xFF4
 25116                           prodl	equ	0xFF3
 25117                           intcon	equ	0xFF2
 25118                           indf0	equ	0xFEF
 25119                           postinc0	equ	0xFEE
 25120                           fsr0h	equ	0xFEA
 25121                           fsr0l	equ	0xFE9
 25122                           wreg	equ	0xFE8
 25123                           indf1	equ	0xFE7
 25124                           postinc1	equ	0xFE6
 25125                           postdec1	equ	0xFE5
 25126                           fsr1h	equ	0xFE2
 25127                           fsr1l	equ	0xFE1
 25128                           indf2	equ	0xFDF
 25129                           postinc2	equ	0xFDE
 25130                           postdec2	equ	0xFDD
 25131                           plusw2	equ	0xFDB
 25132                           fsr2h	equ	0xFDA
 25133                           fsr2l	equ	0xFD9
 25134                           status	equ	0xFD8
 25135                           
 25136 ;; *************** function _WriteUSART *****************
 25137 ;; Defined at:
 25138 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 25139 ;; Parameters:    Size  Location     Type
 25140 ;;  data            1    wreg     unsigned char 
 25141 ;; Auto vars:     Size  Location     Type
 25142 ;;  data            1    0[BANK0 ] unsigned char 
 25143 ;; Return value:  Size  Location     Type
 25144 ;;		None               void
 25145 ;; Registers used:
 25146 ;;		wreg
 25147 ;; Tracked objects:
 25148 ;;		On entry : 0/1
 25149 ;;		On exit  : 0/0
 25150 ;;		Unchanged: 0/0
 25151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25152 ;;      Params:         0       0       0       0       0       0       0
 25153 ;;      Locals:         0       1       0       0       0       0       0
 25154 ;;      Temps:          0       0       0       0       0       0       0
 25155 ;;      Totals:         0       1       0       0       0       0       0
 25156 ;;Total ram usage:        1 bytes
 25157 ;; Hardware stack levels used:    1
 25158 ;; Hardware stack levels required when called:    3
 25159 ;; This function calls:
 25160 ;;		Nothing
 25161 ;; This function is called by:
 25162 ;;		_doModeVerbose
 25163 ;;		_sendEscapedUartData
 25164 ;;		_sendVSCPDriverErrorFrame
 25165 ;;		_sendVSCPDriverAck
 25166 ;;		_sendVSCPDriverNack
 25167 ;;		_sendVSCPDriverCommandReply
 25168 ;;		_receiveSendEventCANAL
 25169 ;;		_receiveSendMultiEventCANAL
 25170 ;;		_sendVSCPModeCapabilities
 25171 ;;		_receiveSendEventSLCAN
 25172 ;;		_printBinary
 25173 ;;		_printFirmwareVersion
 25174 ;;		_putsUSART
 25175 ;; This function uses a non-reentrant model
 25176 ;;
 25177                           
 25178                           	psect	text68
 25179  0015E6                     __ptext68:
 25180                           	opt stack 0
 25181  0015E6                     _WriteUSART:
 25182                           	opt stack 24
 25183                           
 25184                           ;incstack = 0
 25185                           ;incstack = 0
 25186                           ;WriteUSART@data stored from wreg
 25187  0015E6  CFE8 F060          	movff	wreg,WriteUSART@data
 25188  0015EA  ACAC               	btfss	4012,6,c	;volatile
 25189  0015EC  D003               	goto	l15634
 25190  0015EE  90AC               	bcf	4012,0,c	;volatile
 25191  0015F0  B22A               	btfsc	_USART_Status,1,c
 25192  0015F2  80AC               	bsf	4012,0,c	;volatile
 25193  0015F4                     l15634:
 25194  0015F4  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25195  0015F8  0012               	return	
 25196  0015FA                     __end_of_WriteUSART:
 25197                           	opt stack 0
 25198                           tblptru	equ	0xFF8
 25199                           tblptrh	equ	0xFF7
 25200                           tblptrl	equ	0xFF6
 25201                           tablat	equ	0xFF5
 25202                           prodh	equ	0xFF4
 25203                           prodl	equ	0xFF3
 25204                           intcon	equ	0xFF2
 25205                           indf0	equ	0xFEF
 25206                           postinc0	equ	0xFEE
 25207                           fsr0h	equ	0xFEA
 25208                           fsr0l	equ	0xFE9
 25209                           wreg	equ	0xFE8
 25210                           indf1	equ	0xFE7
 25211                           postinc1	equ	0xFE6
 25212                           postdec1	equ	0xFE5
 25213                           fsr1h	equ	0xFE2
 25214                           fsr1l	equ	0xFE1
 25215                           indf2	equ	0xFDF
 25216                           postinc2	equ	0xFDE
 25217                           postdec2	equ	0xFDD
 25218                           plusw2	equ	0xFDB
 25219                           fsr2h	equ	0xFDA
 25220                           fsr2l	equ	0xFD9
 25221                           status	equ	0xFD8
 25222                           
 25223 ;; *************** function _init *****************
 25224 ;; Defined at:
 25225 ;;		line 400 in file "main.c"
 25226 ;; Parameters:    Size  Location     Type
 25227 ;;		None
 25228 ;; Auto vars:     Size  Location     Type
 25229 ;;		None
 25230 ;; Return value:  Size  Location     Type
 25231 ;;		None               void
 25232 ;; Registers used:
 25233 ;;		wreg, status,2, status,0, cstack
 25234 ;; Tracked objects:
 25235 ;;		On entry : 0/1
 25236 ;;		On exit  : F/0
 25237 ;;		Unchanged: 0/0
 25238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25239 ;;      Params:         0       0       0       0       0       0       0
 25240 ;;      Locals:         0       0       0       0       0       0       0
 25241 ;;      Temps:          0       0       0       0       0       0       0
 25242 ;;      Totals:         0       0       0       0       0       0       0
 25243 ;;Total ram usage:        0 bytes
 25244 ;; Hardware stack levels used:    1
 25245 ;; Hardware stack levels required when called:    5
 25246 ;; This function calls:
 25247 ;;		_WriteTimer0
 25248 ;;		_init_app_ram
 25249 ;;		_OpenUSART
 25250 ;;		_OpenTimer0
 25251 ;;		_ECANInitialize
 25252 ;; This function is called by:
 25253 ;;		_main
 25254 ;; This function uses a non-reentrant model
 25255 ;;
 25256                           
 25257                           	psect	text69
 25258  001A24                     __ptext69:
 25259                           	opt stack 0
 25260  001A24                     _init:
 25261                           	opt stack 24
 25262                           
 25263                           ;main.c: 402: init_app_ram();
 25264                           
 25265                           ;incstack = 0
 25266                           ;incstack = 0
 25267  001A24  EC81  F00D         	call	_init_app_ram	;wreg free
 25268                           
 25269                           ;main.c: 405: OSCCONbits.IRCF0 = 1;
 25270  001A28  88D3               	bsf	4051,4,c	;volatile
 25271                           
 25272                           ;main.c: 406: OSCCONbits.IRCF1 = 1;
 25273  001A2A  8AD3               	bsf	4051,5,c	;volatile
 25274                           
 25275                           ;main.c: 407: OSCCONbits.IRCF2 = 1;
 25276  001A2C  8CD3               	bsf	4051,6,c	;volatile
 25277                           
 25278                           ;main.c: 408: OSCTUNEbits.PLLEN = 1;
 25279  001A2E  8C9B               	bsf	3995,6,c	;volatile
 25280                           
 25281                           ;main.c: 410: TRISBbits.RB2 = 0;
 25282  001A30  9493               	bcf	3987,2,c	;volatile
 25283                           
 25284                           ;main.c: 411: TRISBbits.RB3 = 1;
 25285  001A32  8693               	bsf	3987,3,c	;volatile
 25286                           
 25287                           ;main.c: 413: TRISCbits.RC1 = 0;
 25288  001A34  9294               	bcf	3988,1,c	;volatile
 25289                           
 25290                           ;main.c: 414: TRISCbits.RC6 = 0;
 25291  001A36  9C94               	bcf	3988,6,c	;volatile
 25292                           
 25293                           ;main.c: 415: TRISCbits.RC7 = 1;
 25294  001A38  8E94               	bsf	3988,7,c	;volatile
 25295                           
 25296                           ;main.c: 419: OpenUSART( 0b01111111 &
 25297                           ;main.c: 420: 0b11111111 &
 25298                           ;main.c: 421: 0b11111110 &
 25299                           ;main.c: 422: 0b11111101 &
 25300                           ;main.c: 423: 0b11111111,
 25301                           ;main.c: 424: 21 );
 25302  001A3A  0100               	movlb	0	; () banked
 25303  001A3C  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25304  001A3E  0E15               	movlw	21
 25305  001A40  6F60               	movwf	?_OpenUSART& (0+255),b
 25306  001A42  0E7C               	movlw	124
 25307  001A44  EC00  F00E         	call	_OpenUSART
 25308                           
 25309                           ; BSR set to: 0
 25310                           ;main.c: 426: RCIF = 0;
 25311  001A48  9A9E               	bcf	3998,5,c	;volatile
 25312                           
 25313                           ; BSR set to: 0
 25314                           ;main.c: 427: RCIP = 0;
 25315  001A4A  9A9F               	bcf	3999,5,c	;volatile
 25316                           
 25317                           ; BSR set to: 0
 25318                           ;main.c: 428: RCIE = 1;
 25319  001A4C  8A9D               	bsf	3997,5,c	;volatile
 25320                           
 25321                           ; BSR set to: 0
 25322                           ;main.c: 429: PEIE = 1;
 25323  001A4E  8CF2               	bsf	intcon,6,c	;volatile
 25324                           
 25325                           ; BSR set to: 0
 25326                           ;main.c: 432: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25327  001A50  0E92               	movlw	146
 25328  001A52  EC24  F00B         	call	_OpenTimer0
 25329                           
 25330                           ; BSR set to: 0
 25331                           ;main.c: 433: WriteTimer0(0xfb1d);
 25332  001A56  0EFB               	movlw	251
 25333  001A58  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25334  001A5A  0E1D               	movlw	29
 25335  001A5C  6F60               	movwf	?_WriteTimer0& (0+255),b
 25336  001A5E  ECEA  F00A         	call	_WriteTimer0	;wreg free
 25337                           
 25338                           ;main.c: 436: ECANInitialize();
 25339  001A62  EC88  F010         	call	_ECANInitialize	;wreg free
 25340                           
 25341                           ; BSR set to: 0
 25342                           ;main.c: 460: RXBnIE = 1;
 25343  001A66  82A3               	bsf	4003,1,c	;volatile
 25344                           
 25345                           ; BSR set to: 0
 25346                           ;main.c: 461: ERRIE = 1;
 25347  001A68  8AA3               	bsf	4003,5,c	;volatile
 25348                           
 25349                           ; BSR set to: 0
 25350                           ;main.c: 463: (INTCONbits.GIE = 1);
 25351  001A6A  8EF2               	bsf	intcon,7,c	;volatile
 25352                           
 25353                           ; BSR set to: 0
 25354  001A6C  0012               	return	
 25355  001A6E                     __end_of_init:
 25356                           	opt stack 0
 25357                           tblptru	equ	0xFF8
 25358                           tblptrh	equ	0xFF7
 25359                           tblptrl	equ	0xFF6
 25360                           tablat	equ	0xFF5
 25361                           prodh	equ	0xFF4
 25362                           prodl	equ	0xFF3
 25363                           intcon	equ	0xFF2
 25364                           indf0	equ	0xFEF
 25365                           postinc0	equ	0xFEE
 25366                           fsr0h	equ	0xFEA
 25367                           fsr0l	equ	0xFE9
 25368                           wreg	equ	0xFE8
 25369                           indf1	equ	0xFE7
 25370                           postinc1	equ	0xFE6
 25371                           postdec1	equ	0xFE5
 25372                           fsr1h	equ	0xFE2
 25373                           fsr1l	equ	0xFE1
 25374                           indf2	equ	0xFDF
 25375                           postinc2	equ	0xFDE
 25376                           postdec2	equ	0xFDD
 25377                           plusw2	equ	0xFDB
 25378                           fsr2h	equ	0xFDA
 25379                           fsr2l	equ	0xFD9
 25380                           status	equ	0xFD8
 25381                           
 25382 ;; *************** function _ECANInitialize *****************
 25383 ;; Defined at:
 25384 ;;		line 168 in file "ECAN.c"
 25385 ;; Parameters:    Size  Location     Type
 25386 ;;		None
 25387 ;; Auto vars:     Size  Location     Type
 25388 ;;		None
 25389 ;; Return value:  Size  Location     Type
 25390 ;;		None               void
 25391 ;; Registers used:
 25392 ;;		wreg, status,2, status,0, cstack
 25393 ;; Tracked objects:
 25394 ;;		On entry : F/0
 25395 ;;		On exit  : F/0
 25396 ;;		Unchanged: 0/0
 25397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25398 ;;      Params:         0       0       0       0       0       0       0
 25399 ;;      Locals:         0       0       0       0       0       0       0
 25400 ;;      Temps:          0       0       0       0       0       0       0
 25401 ;;      Totals:         0       0       0       0       0       0       0
 25402 ;;Total ram usage:        0 bytes
 25403 ;; Hardware stack levels used:    1
 25404 ;; Hardware stack levels required when called:    4
 25405 ;; This function calls:
 25406 ;;		_ECANSetOperationMode
 25407 ;; This function is called by:
 25408 ;;		_init
 25409 ;; This function uses a non-reentrant model
 25410 ;;
 25411                           
 25412                           	psect	text70
 25413  002110                     __ptext70:
 25414                           	opt stack 0
 25415  002110                     _ECANInitialize:
 25416                           	opt stack 24
 25417                           
 25418                           ; BSR set to: 0
 25419                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25420                           
 25421                           ; BSR set to: 0
 25422                           ;incstack = 0
 25423                           ;incstack = 0
 25424  002110  0E80               	movlw	128
 25425  002112  EC08  F00B         	call	_ECANSetOperationMode
 25426                           
 25427                           ; BSR set to: 0
 25428                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25429  002116  0E09               	movlw	9
 25430  002118  6E70               	movwf	3952,c	;volatile
 25431                           
 25432                           ; BSR set to: 0
 25433                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25434  00211A  0EFC               	movlw	252
 25435  00211C  6E71               	movwf	3953,c	;volatile
 25436                           
 25437                           ; BSR set to: 0
 25438                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25439                           ;ECAN.c: 181: (0 << 6) |
 25440                           ;ECAN.c: 182: (2-1);
 25441  00211E  0E01               	movlw	1
 25442  002120  6E72               	movwf	3954,c	;volatile
 25443                           
 25444                           ; BSR set to: 0
 25445                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25446  002122  0E20               	movlw	32
 25447  002124  6E73               	movwf	3955,c	;volatile
 25448                           
 25449                           ; BSR set to: 0
 25450                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25451  002126  8E77               	bsf	3959,7,c	;volatile
 25452                           
 25453                           ; BSR set to: 0
 25454                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25455  002128  9C77               	bcf	3959,6,c	;volatile
 25456                           
 25457                           ; BSR set to: 0
 25458                           ;ECAN.c: 205: RXB0CON = 0;
 25459  00212A  6A60               	clrf	3936,c	;volatile
 25460                           
 25461                           ; BSR set to: 0
 25462                           ;ECAN.c: 211: RXB1CON = 0;
 25463  00212C  010F               	movlb	15	; () banked
 25464  00212E  6B50               	clrf	80,b	;volatile
 25465                           
 25466                           ; BSR set to: 15
 25467                           ;ECAN.c: 221: B0CON = 0;
 25468  002130  010E               	movlb	14	; () banked
 25469  002132  6B20               	clrf	32,b	;volatile
 25470                           
 25471                           ; BSR set to: 14
 25472                           ;ECAN.c: 231: B1CON = 0;
 25473  002134  6B30               	clrf	48,b	;volatile
 25474                           
 25475                           ; BSR set to: 14
 25476                           ;ECAN.c: 241: B2CON = 0;
 25477  002136  6B40               	clrf	64,b	;volatile
 25478                           
 25479                           ; BSR set to: 14
 25480                           ;ECAN.c: 251: B3CON = 0;
 25481  002138  6B50               	clrf	80,b	;volatile
 25482                           
 25483                           ; BSR set to: 14
 25484                           ;ECAN.c: 261: B4CON = 0;
 25485  00213A  6B60               	clrf	96,b	;volatile
 25486                           
 25487                           ; BSR set to: 14
 25488                           ;ECAN.c: 271: B5CON = 0;
 25489  00213C  6B70               	clrf	112,b	;volatile
 25490                           
 25491                           ; BSR set to: 14
 25492                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25493  00213E  010D               	movlb	13	; () banked
 25494  002140  6BF8               	clrf	248,b	;volatile
 25495                           
 25496                           ; BSR set to: 13
 25497                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25498  002142  010F               	movlb	15	; () banked
 25499  002144  6B00               	clrf	0,b	;volatile
 25500                           
 25501                           ; BSR set to: 15
 25502  002146  0E08               	movlw	8
 25503  002148  6F01               	movwf	1,b	;volatile
 25504                           
 25505                           ; BSR set to: 15
 25506  00214A  6B02               	clrf	2,b	;volatile
 25507                           
 25508                           ; BSR set to: 15
 25509  00214C  6B03               	clrf	3,b	;volatile
 25510                           
 25511                           ; BSR set to: 15
 25512                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25513  00214E  0E01               	movlw	1
 25514  002150  010D               	movlb	13	; () banked
 25515  002152  6FD4               	movwf	212,b	;volatile
 25516                           
 25517                           ; BSR set to: 13
 25518                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25519  002154  6BD5               	clrf	213,b	;volatile
 25520                           
 25521                           ; BSR set to: 13
 25522                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25523  002156  6BE0               	clrf	224,b	;volatile
 25524                           
 25525                           ; BSR set to: 13
 25526                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25527  002158  0E11               	movlw	17
 25528  00215A  6FE1               	movwf	225,b	;volatile
 25529                           
 25530                           ; BSR set to: 13
 25531                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25532  00215C  6FE2               	movwf	226,b	;volatile
 25533                           
 25534                           ; BSR set to: 13
 25535                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25536  00215E  6BE3               	clrf	227,b	;volatile
 25537                           
 25538                           ; BSR set to: 13
 25539                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25540  002160  6BE4               	clrf	228,b	;volatile
 25541                           
 25542                           ; BSR set to: 13
 25543                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25544  002162  6BE5               	clrf	229,b	;volatile
 25545                           
 25546                           ; BSR set to: 13
 25547                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25548  002164  6BE6               	clrf	230,b	;volatile
 25549                           
 25550                           ; BSR set to: 13
 25551                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25552  002166  6BE7               	clrf	231,b	;volatile
 25553                           
 25554                           ; BSR set to: 13
 25555                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25556  002168  0E54               	movlw	84
 25557  00216A  6FF0               	movwf	240,b	;volatile
 25558                           
 25559                           ; BSR set to: 13
 25560                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25561  00216C  0E05               	movlw	5
 25562  00216E  6FF1               	movwf	241,b	;volatile
 25563                           
 25564                           ; BSR set to: 13
 25565                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25566  002170  6BF2               	clrf	242,b	;volatile
 25567                           
 25568                           ; BSR set to: 13
 25569                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25570  002172  6BF2               	clrf	242,b	;volatile
 25571                           
 25572                           ; BSR set to: 13
 25573                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25574  002174  010F               	movlb	15	; () banked
 25575  002176  6B18               	clrf	24,b	;volatile
 25576                           
 25577                           ; BSR set to: 15
 25578  002178  6B19               	clrf	25,b	;volatile
 25579                           
 25580                           ; BSR set to: 15
 25581  00217A  6B1A               	clrf	26,b	;volatile
 25582                           
 25583                           ; BSR set to: 15
 25584  00217C  6B1B               	clrf	27,b	;volatile
 25585                           
 25586                           ; BSR set to: 15
 25587                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25588  00217E  8719               	bsf	25,3,b	;volatile
 25589                           
 25590                           ; BSR set to: 15
 25591                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25592  002180  6B1C               	clrf	28,b	;volatile
 25593                           
 25594                           ; BSR set to: 15
 25595  002182  6B1D               	clrf	29,b	;volatile
 25596                           
 25597                           ; BSR set to: 15
 25598  002184  6B1E               	clrf	30,b	;volatile
 25599                           
 25600                           ; BSR set to: 15
 25601  002186  6B1F               	clrf	31,b	;volatile
 25602                           
 25603                           ; BSR set to: 15
 25604                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25605  002188  871D               	bsf	29,3,b	;volatile
 25606                           
 25607                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25608  00218A  0E20               	movlw	32
 25609  00218C  EF08  F00B         	goto	_ECANSetOperationMode
 25610  002190                     __end_of_ECANInitialize:
 25611                           	opt stack 0
 25612                           tblptru	equ	0xFF8
 25613                           tblptrh	equ	0xFF7
 25614                           tblptrl	equ	0xFF6
 25615                           tablat	equ	0xFF5
 25616                           prodh	equ	0xFF4
 25617                           prodl	equ	0xFF3
 25618                           intcon	equ	0xFF2
 25619                           indf0	equ	0xFEF
 25620                           postinc0	equ	0xFEE
 25621                           fsr0h	equ	0xFEA
 25622                           fsr0l	equ	0xFE9
 25623                           wreg	equ	0xFE8
 25624                           indf1	equ	0xFE7
 25625                           postinc1	equ	0xFE6
 25626                           postdec1	equ	0xFE5
 25627                           fsr1h	equ	0xFE2
 25628                           fsr1l	equ	0xFE1
 25629                           indf2	equ	0xFDF
 25630                           postinc2	equ	0xFDE
 25631                           postdec2	equ	0xFDD
 25632                           plusw2	equ	0xFDB
 25633                           fsr2h	equ	0xFDA
 25634                           fsr2l	equ	0xFD9
 25635                           status	equ	0xFD8
 25636                           
 25637 ;; *************** function _ECANSetOperationMode *****************
 25638 ;; Defined at:
 25639 ;;		line 1014 in file "ECAN.c"
 25640 ;; Parameters:    Size  Location     Type
 25641 ;;  mode            1    wreg     enum E16346
 25642 ;; Auto vars:     Size  Location     Type
 25643 ;;  mode            1    0[BANK0 ] enum E16346
 25644 ;; Return value:  Size  Location     Type
 25645 ;;		None               void
 25646 ;; Registers used:
 25647 ;;		wreg, status,2, status,0
 25648 ;; Tracked objects:
 25649 ;;		On entry : 0/0
 25650 ;;		On exit  : F/0
 25651 ;;		Unchanged: 0/0
 25652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25653 ;;      Params:         0       0       0       0       0       0       0
 25654 ;;      Locals:         0       1       0       0       0       0       0
 25655 ;;      Temps:          0       0       0       0       0       0       0
 25656 ;;      Totals:         0       1       0       0       0       0       0
 25657 ;;Total ram usage:        1 bytes
 25658 ;; Hardware stack levels used:    1
 25659 ;; Hardware stack levels required when called:    3
 25660 ;; This function calls:
 25661 ;;		Nothing
 25662 ;; This function is called by:
 25663 ;;		_doModeVerbose
 25664 ;;		_doModeVscp
 25665 ;;		_doModeSLCAN
 25666 ;;		_ECANInitialize
 25667 ;; This function uses a non-reentrant model
 25668 ;;
 25669                           
 25670                           	psect	text71
 25671  001610                     __ptext71:
 25672                           	opt stack 0
 25673  001610                     _ECANSetOperationMode:
 25674                           	opt stack 25
 25675                           
 25676                           ; BSR set to: 0
 25677                           ;incstack = 0
 25678                           ;incstack = 0
 25679                           ;ECANSetOperationMode@mode stored from wreg
 25680  001610  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25681                           
 25682                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25683  001614  0E1F               	movlw	31
 25684  001616  166F               	andwf	3951,f,c	;volatile
 25685                           
 25686                           ;ECAN.c: 1016: CANCON |= mode;
 25687  001618  0100               	movlb	0	; () banked
 25688  00161A  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25689  00161C  126F               	iorwf	3951,f,c	;volatile
 25690  00161E                     l14956:
 25691                           
 25692                           ; BSR set to: 0
 25693  00161E  506F               	movf	3951,w,c	;volatile
 25694  001620  0BE0               	andlw	224
 25695  001622  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25696  001624  B4D8               	btfsc	status,2,c
 25697                           
 25698                           ; BSR set to: 0
 25699  001626  0012               	return	
 25700  001628  D7FA               	goto	l14956
 25701  00162A                     __end_of_ECANSetOperationMode:
 25702                           	opt stack 0
 25703                           tblptru	equ	0xFF8
 25704                           tblptrh	equ	0xFF7
 25705                           tblptrl	equ	0xFF6
 25706                           tablat	equ	0xFF5
 25707                           prodh	equ	0xFF4
 25708                           prodl	equ	0xFF3
 25709                           intcon	equ	0xFF2
 25710                           indf0	equ	0xFEF
 25711                           postinc0	equ	0xFEE
 25712                           fsr0h	equ	0xFEA
 25713                           fsr0l	equ	0xFE9
 25714                           wreg	equ	0xFE8
 25715                           indf1	equ	0xFE7
 25716                           postinc1	equ	0xFE6
 25717                           postdec1	equ	0xFE5
 25718                           fsr1h	equ	0xFE2
 25719                           fsr1l	equ	0xFE1
 25720                           indf2	equ	0xFDF
 25721                           postinc2	equ	0xFDE
 25722                           postdec2	equ	0xFDD
 25723                           plusw2	equ	0xFDB
 25724                           fsr2h	equ	0xFDA
 25725                           fsr2l	equ	0xFD9
 25726                           status	equ	0xFD8
 25727                           
 25728 ;; *************** function _OpenTimer0 *****************
 25729 ;; Defined at:
 25730 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25731 ;; Parameters:    Size  Location     Type
 25732 ;;  config          1    wreg     unsigned char 
 25733 ;; Auto vars:     Size  Location     Type
 25734 ;;  config          1    0[BANK0 ] unsigned char 
 25735 ;; Return value:  Size  Location     Type
 25736 ;;		None               void
 25737 ;; Registers used:
 25738 ;;		wreg, status,2, status,0
 25739 ;; Tracked objects:
 25740 ;;		On entry : F/0
 25741 ;;		On exit  : F/0
 25742 ;;		Unchanged: 0/0
 25743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25744 ;;      Params:         0       0       0       0       0       0       0
 25745 ;;      Locals:         0       1       0       0       0       0       0
 25746 ;;      Temps:          0       0       0       0       0       0       0
 25747 ;;      Totals:         0       1       0       0       0       0       0
 25748 ;;Total ram usage:        1 bytes
 25749 ;; Hardware stack levels used:    1
 25750 ;; Hardware stack levels required when called:    3
 25751 ;; This function calls:
 25752 ;;		Nothing
 25753 ;; This function is called by:
 25754 ;;		_init
 25755 ;; This function uses a non-reentrant model
 25756 ;;
 25757                           
 25758                           	psect	text72
 25759  001648                     __ptext72:
 25760                           	opt stack 0
 25761  001648                     _OpenTimer0:
 25762                           	opt stack 25
 25763                           
 25764                           ; BSR set to: 0
 25765                           ;incstack = 0
 25766                           ;incstack = 0
 25767                           ;OpenTimer0@config stored from wreg
 25768  001648  CFE8 F060          	movff	wreg,OpenTimer0@config
 25769                           
 25770                           ; BSR set to: 0
 25771  00164C  5160               	movf	OpenTimer0@config& (0+255),w,b
 25772  00164E  0B7F               	andlw	127
 25773  001650  6ED5               	movwf	4053,c	;volatile
 25774                           
 25775                           ; BSR set to: 0
 25776  001652  6AD7               	clrf	4055,c	;volatile
 25777                           
 25778                           ; BSR set to: 0
 25779  001654  6AD6               	clrf	4054,c	;volatile
 25780                           
 25781                           ; BSR set to: 0
 25782  001656  94F2               	bcf	intcon,2,c	;volatile
 25783                           
 25784                           ; BSR set to: 0
 25785  001658  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25786  00165A  D002               	goto	l1814
 25787                           
 25788                           ; BSR set to: 0
 25789  00165C  8AF2               	bsf	intcon,5,c	;volatile
 25790  00165E  D001               	goto	l1815
 25791  001660                     l1814:
 25792                           
 25793                           ; BSR set to: 0
 25794  001660  9AF2               	bcf	intcon,5,c	;volatile
 25795  001662                     l1815:
 25796                           
 25797                           ; BSR set to: 0
 25798  001662  8ED5               	bsf	4053,7,c	;volatile
 25799                           
 25800                           ; BSR set to: 0
 25801  001664  0012               	return	
 25802  001666                     __end_of_OpenTimer0:
 25803                           	opt stack 0
 25804                           tblptru	equ	0xFF8
 25805                           tblptrh	equ	0xFF7
 25806                           tblptrl	equ	0xFF6
 25807                           tablat	equ	0xFF5
 25808                           prodh	equ	0xFF4
 25809                           prodl	equ	0xFF3
 25810                           intcon	equ	0xFF2
 25811                           indf0	equ	0xFEF
 25812                           postinc0	equ	0xFEE
 25813                           fsr0h	equ	0xFEA
 25814                           fsr0l	equ	0xFE9
 25815                           wreg	equ	0xFE8
 25816                           indf1	equ	0xFE7
 25817                           postinc1	equ	0xFE6
 25818                           postdec1	equ	0xFE5
 25819                           fsr1h	equ	0xFE2
 25820                           fsr1l	equ	0xFE1
 25821                           indf2	equ	0xFDF
 25822                           postinc2	equ	0xFDE
 25823                           postdec2	equ	0xFDD
 25824                           plusw2	equ	0xFDB
 25825                           fsr2h	equ	0xFDA
 25826                           fsr2l	equ	0xFD9
 25827                           status	equ	0xFD8
 25828                           
 25829 ;; *************** function _OpenUSART *****************
 25830 ;; Defined at:
 25831 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25832 ;; Parameters:    Size  Location     Type
 25833 ;;  config          1    wreg     unsigned char 
 25834 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25835 ;; Auto vars:     Size  Location     Type
 25836 ;;  config          1    2[BANK0 ] unsigned char 
 25837 ;; Return value:  Size  Location     Type
 25838 ;;		None               void
 25839 ;; Registers used:
 25840 ;;		wreg, status,2
 25841 ;; Tracked objects:
 25842 ;;		On entry : F/0
 25843 ;;		On exit  : F/0
 25844 ;;		Unchanged: 0/0
 25845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25846 ;;      Params:         0       2       0       0       0       0       0
 25847 ;;      Locals:         0       1       0       0       0       0       0
 25848 ;;      Temps:          0       0       0       0       0       0       0
 25849 ;;      Totals:         0       3       0       0       0       0       0
 25850 ;;Total ram usage:        3 bytes
 25851 ;; Hardware stack levels used:    1
 25852 ;; Hardware stack levels required when called:    3
 25853 ;; This function calls:
 25854 ;;		Nothing
 25855 ;; This function is called by:
 25856 ;;		_init
 25857 ;; This function uses a non-reentrant model
 25858 ;;
 25859                           
 25860                           	psect	text73
 25861  001C00                     __ptext73:
 25862                           	opt stack 0
 25863  001C00                     _OpenUSART:
 25864                           	opt stack 25
 25865                           
 25866                           ; BSR set to: 0
 25867                           ;incstack = 0
 25868                           ;incstack = 0
 25869                           ;OpenUSART@config stored from wreg
 25870  001C00  CFE8 F062          	movff	wreg,OpenUSART@config
 25871                           
 25872                           ; BSR set to: 0
 25873  001C04  6AAC               	clrf	4012,c	;volatile
 25874  001C06  6AAB               	clrf	4011,c	;volatile
 25875                           
 25876                           ; BSR set to: 0
 25877  001C08  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25878                           
 25879                           ; BSR set to: 0
 25880  001C0A  88AC               	bsf	4012,4,c	;volatile
 25881                           
 25882                           ; BSR set to: 0
 25883  001C0C  A362               	btfss	OpenUSART@config& (0+255),1,b
 25884  001C0E  D002               	goto	l14646
 25885                           
 25886                           ; BSR set to: 0
 25887  001C10  8CAC               	bsf	4012,6,c	;volatile
 25888  001C12  8CAB               	bsf	4011,6,c	;volatile
 25889  001C14                     l14646:
 25890                           
 25891                           ; BSR set to: 0
 25892  001C14  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25893                           
 25894                           ; BSR set to: 0
 25895  001C16  8EAC               	bsf	4012,7,c	;volatile
 25896                           
 25897                           ; BSR set to: 0
 25898  001C18  A762               	btfss	OpenUSART@config& (0+255),3,b
 25899  001C1A  D002               	goto	l1847
 25900                           
 25901                           ; BSR set to: 0
 25902  001C1C  88AB               	bsf	4011,4,c	;volatile
 25903  001C1E  D001               	goto	l14654
 25904  001C20                     l1847:
 25905                           
 25906                           ; BSR set to: 0
 25907  001C20  8AAB               	bsf	4011,5,c	;volatile
 25908  001C22                     l14654:
 25909                           
 25910                           ; BSR set to: 0
 25911  001C22  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25912                           
 25913                           ; BSR set to: 0
 25914  001C24  84AC               	bsf	4012,2,c	;volatile
 25915                           
 25916                           ; BSR set to: 0
 25917  001C26  989E               	bcf	3998,4,c	;volatile
 25918                           
 25919                           ; BSR set to: 0
 25920  001C28  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25921                           
 25922                           ; BSR set to: 0
 25923  001C2A  86AB               	bsf	4011,3,c	;volatile
 25924                           
 25925                           ; BSR set to: 0
 25926  001C2C  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25927  001C2E  D002               	goto	l1851
 25928                           
 25929                           ; BSR set to: 0
 25930  001C30  8A9D               	bsf	3997,5,c	;volatile
 25931  001C32  D001               	goto	l1852
 25932  001C34                     l1851:
 25933                           
 25934                           ; BSR set to: 0
 25935  001C34  9A9D               	bcf	3997,5,c	;volatile
 25936  001C36                     l1852:
 25937                           
 25938                           ; BSR set to: 0
 25939  001C36  9A9E               	bcf	3998,5,c	;volatile
 25940                           
 25941                           ; BSR set to: 0
 25942  001C38  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25943  001C3A  D002               	goto	l1853
 25944                           
 25945                           ; BSR set to: 0
 25946  001C3C  889D               	bsf	3997,4,c	;volatile
 25947  001C3E  D001               	goto	l1854
 25948  001C40                     l1853:
 25949                           
 25950                           ; BSR set to: 0
 25951  001C40  989D               	bcf	3997,4,c	;volatile
 25952  001C42                     l1854:
 25953                           
 25954                           ; BSR set to: 0
 25955  001C42  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25956                           
 25957                           ; BSR set to: 0
 25958  001C46  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25959  001C48  6EB0               	movwf	4016,c	;volatile
 25960                           
 25961                           ; BSR set to: 0
 25962  001C4A  8AAC               	bsf	4012,5,c	;volatile
 25963                           
 25964                           ; BSR set to: 0
 25965  001C4C  8EAB               	bsf	4011,7,c	;volatile
 25966                           
 25967                           ; BSR set to: 0
 25968  001C4E  9C94               	bcf	3988,6,c	;volatile
 25969                           
 25970                           ; BSR set to: 0
 25971  001C50  8E94               	bsf	3988,7,c	;volatile
 25972                           
 25973                           ; BSR set to: 0
 25974  001C52  B8AC               	btfsc	4012,4,c	;volatile
 25975                           
 25976                           ; BSR set to: 0
 25977  001C54  BEAC               	btfsc	4012,7,c	;volatile
 25978  001C56  D001               	goto	l1856
 25979                           
 25980                           ; BSR set to: 0
 25981  001C58  8C94               	bsf	3988,6,c	;volatile
 25982  001C5A                     l1856:
 25983                           
 25984                           ; BSR set to: 0
 25985  001C5A  0012               	return	
 25986  001C5C                     __end_of_OpenUSART:
 25987                           	opt stack 0
 25988                           tblptru	equ	0xFF8
 25989                           tblptrh	equ	0xFF7
 25990                           tblptrl	equ	0xFF6
 25991                           tablat	equ	0xFF5
 25992                           prodh	equ	0xFF4
 25993                           prodl	equ	0xFF3
 25994                           intcon	equ	0xFF2
 25995                           indf0	equ	0xFEF
 25996                           postinc0	equ	0xFEE
 25997                           fsr0h	equ	0xFEA
 25998                           fsr0l	equ	0xFE9
 25999                           wreg	equ	0xFE8
 26000                           indf1	equ	0xFE7
 26001                           postinc1	equ	0xFE6
 26002                           postdec1	equ	0xFE5
 26003                           fsr1h	equ	0xFE2
 26004                           fsr1l	equ	0xFE1
 26005                           indf2	equ	0xFDF
 26006                           postinc2	equ	0xFDE
 26007                           postdec2	equ	0xFDD
 26008                           plusw2	equ	0xFDB
 26009                           fsr2h	equ	0xFDA
 26010                           fsr2l	equ	0xFD9
 26011                           status	equ	0xFD8
 26012                           
 26013 ;; *************** function _WriteTimer0 *****************
 26014 ;; Defined at:
 26015 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 26016 ;; Parameters:    Size  Location     Type
 26017 ;;  timer0          2    0[BANK0 ] unsigned int 
 26018 ;; Auto vars:     Size  Location     Type
 26019 ;;  timer           2    2[BANK0 ] struct Timers
 26020 ;; Return value:  Size  Location     Type
 26021 ;;		None               void
 26022 ;; Registers used:
 26023 ;;		None
 26024 ;; Tracked objects:
 26025 ;;		On entry : F/0
 26026 ;;		On exit  : F/0
 26027 ;;		Unchanged: F/0
 26028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26029 ;;      Params:         0       2       0       0       0       0       0
 26030 ;;      Locals:         0       2       0       0       0       0       0
 26031 ;;      Temps:          0       0       0       0       0       0       0
 26032 ;;      Totals:         0       4       0       0       0       0       0
 26033 ;;Total ram usage:        4 bytes
 26034 ;; Hardware stack levels used:    1
 26035 ;; Hardware stack levels required when called:    3
 26036 ;; This function calls:
 26037 ;;		Nothing
 26038 ;; This function is called by:
 26039 ;;		_init
 26040 ;; This function uses a non-reentrant model
 26041 ;;
 26042                           
 26043                           	psect	text74
 26044  0015D4                     __ptext74:
 26045                           	opt stack 0
 26046  0015D4                     _WriteTimer0:
 26047                           	opt stack 25
 26048                           
 26049                           ; BSR set to: 0
 26050                           
 26051                           ; BSR set to: 0
 26052                           ;incstack = 0
 26053                           ;incstack = 0
 26054  0015D4  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 26055  0015D8  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 26056  0015DC  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 26057  0015E0  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 26058                           
 26059                           ; BSR set to: 0
 26060  0015E4  0012               	return	
 26061  0015E6                     __end_of_WriteTimer0:
 26062                           	opt stack 0
 26063                           tblptru	equ	0xFF8
 26064                           tblptrh	equ	0xFF7
 26065                           tblptrl	equ	0xFF6
 26066                           tablat	equ	0xFF5
 26067                           prodh	equ	0xFF4
 26068                           prodl	equ	0xFF3
 26069                           intcon	equ	0xFF2
 26070                           indf0	equ	0xFEF
 26071                           postinc0	equ	0xFEE
 26072                           fsr0h	equ	0xFEA
 26073                           fsr0l	equ	0xFE9
 26074                           wreg	equ	0xFE8
 26075                           indf1	equ	0xFE7
 26076                           postinc1	equ	0xFE6
 26077                           postdec1	equ	0xFE5
 26078                           fsr1h	equ	0xFE2
 26079                           fsr1l	equ	0xFE1
 26080                           indf2	equ	0xFDF
 26081                           postinc2	equ	0xFDE
 26082                           postdec2	equ	0xFDD
 26083                           plusw2	equ	0xFDB
 26084                           fsr2h	equ	0xFDA
 26085                           fsr2l	equ	0xFD9
 26086                           status	equ	0xFD8
 26087                           
 26088 ;; *************** function _vscp_restoreDefaults *****************
 26089 ;; Defined at:
 26090 ;;		line 2793 in file "main.c"
 26091 ;; Parameters:    Size  Location     Type
 26092 ;;		None
 26093 ;; Auto vars:     Size  Location     Type
 26094 ;;		None
 26095 ;; Return value:  Size  Location     Type
 26096 ;;		None               void
 26097 ;; Registers used:
 26098 ;;		wreg, status,2, status,0, cstack
 26099 ;; Tracked objects:
 26100 ;;		On entry : 0/1
 26101 ;;		On exit  : 0/0
 26102 ;;		Unchanged: 0/0
 26103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26104 ;;      Params:         0       0       0       0       0       0       0
 26105 ;;      Locals:         0       0       0       0       0       0       0
 26106 ;;      Temps:          0       0       0       0       0       0       0
 26107 ;;      Totals:         0       0       0       0       0       0       0
 26108 ;;Total ram usage:        0 bytes
 26109 ;; Hardware stack levels used:    1
 26110 ;; Hardware stack levels required when called:    5
 26111 ;; This function calls:
 26112 ;;		_init_app_ram
 26113 ;;		_init_app_eeprom
 26114 ;; This function is called by:
 26115 ;;		_main
 26116 ;; This function uses a non-reentrant model
 26117 ;;
 26118                           
 26119                           	psect	text75
 26120  0015A8                     __ptext75:
 26121                           	opt stack 0
 26122  0015A8                     _vscp_restoreDefaults:
 26123                           	opt stack 24
 26124                           
 26125                           ;main.c: 2794: init_app_eeprom();
 26126                           
 26127                           ; BSR set to: 0
 26128                           ;incstack = 0
 26129                           ;incstack = 0
 26130  0015A8  EC94  F014         	call	_init_app_eeprom	;wreg free
 26131                           
 26132                           ; BSR set to: 0
 26133                           ;main.c: 2795: init_app_ram();
 26134  0015AC  EF81  F00D         	goto	_init_app_ram	;wreg free
 26135  0015B0                     __end_of_vscp_restoreDefaults:
 26136                           	opt stack 0
 26137                           tblptru	equ	0xFF8
 26138                           tblptrh	equ	0xFF7
 26139                           tblptrl	equ	0xFF6
 26140                           tablat	equ	0xFF5
 26141                           prodh	equ	0xFF4
 26142                           prodl	equ	0xFF3
 26143                           intcon	equ	0xFF2
 26144                           indf0	equ	0xFEF
 26145                           postinc0	equ	0xFEE
 26146                           fsr0h	equ	0xFEA
 26147                           fsr0l	equ	0xFE9
 26148                           wreg	equ	0xFE8
 26149                           indf1	equ	0xFE7
 26150                           postinc1	equ	0xFE6
 26151                           postdec1	equ	0xFE5
 26152                           fsr1h	equ	0xFE2
 26153                           fsr1l	equ	0xFE1
 26154                           indf2	equ	0xFDF
 26155                           postinc2	equ	0xFDE
 26156                           postdec2	equ	0xFDD
 26157                           plusw2	equ	0xFDB
 26158                           fsr2h	equ	0xFDA
 26159                           fsr2l	equ	0xFD9
 26160                           status	equ	0xFD8
 26161                           
 26162 ;; *************** function _init_app_eeprom *****************
 26163 ;; Defined at:
 26164 ;;		line 490 in file "main.c"
 26165 ;; Parameters:    Size  Location     Type
 26166 ;;		None
 26167 ;; Auto vars:     Size  Location     Type
 26168 ;;  i               1    4[BANK0 ] unsigned char 
 26169 ;; Return value:  Size  Location     Type
 26170 ;;		None               void
 26171 ;; Registers used:
 26172 ;;		wreg, status,2, status,0, cstack
 26173 ;; Tracked objects:
 26174 ;;		On entry : 0/1
 26175 ;;		On exit  : F/0
 26176 ;;		Unchanged: 0/0
 26177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26178 ;;      Params:         0       0       0       0       0       0       0
 26179 ;;      Locals:         0       1       0       0       0       0       0
 26180 ;;      Temps:          0       0       0       0       0       0       0
 26181 ;;      Totals:         0       1       0       0       0       0       0
 26182 ;;Total ram usage:        1 bytes
 26183 ;; Hardware stack levels used:    1
 26184 ;; Hardware stack levels required when called:    4
 26185 ;; This function calls:
 26186 ;;		_Busy_eep
 26187 ;;		_Write_b_eep
 26188 ;; This function is called by:
 26189 ;;		_vscp_restoreDefaults
 26190 ;; This function uses a non-reentrant model
 26191 ;;
 26192                           
 26193                           	psect	text76
 26194  002928                     __ptext76:
 26195                           	opt stack 0
 26196  002928                     _init_app_eeprom:
 26197                           	opt stack 24
 26198                           
 26199                           ;main.c: 491: uint8_t i;
 26200                           ;main.c: 493: (Busy_eep(), Write_b_eep(0x01,0x55));
 26201                           
 26202                           ;incstack = 0
 26203                           ;incstack = 0
 26204  002928  ECD1  F00A         	call	_Busy_eep	;wreg free
 26205  00292C  0100               	movlb	0	; () banked
 26206  00292E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26207  002930  0E01               	movlw	1
 26208  002932  6F60               	movwf	?_Write_b_eep& (0+255),b
 26209  002934  0E55               	movlw	85
 26210  002936  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26211  002938  ECA1  F00B         	call	_Write_b_eep	;wreg free
 26212                           
 26213                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x02,0xAA));
 26214  00293C  ECD1  F00A         	call	_Busy_eep	;wreg free
 26215  002940  0100               	movlb	0	; () banked
 26216  002942  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26217  002944  0E02               	movlw	2
 26218  002946  6F60               	movwf	?_Write_b_eep& (0+255),b
 26219  002948  0EAA               	movlw	170
 26220  00294A  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26221  00294C  ECA1  F00B         	call	_Write_b_eep	;wreg free
 26222                           
 26223                           ;main.c: 495: (Busy_eep(), Write_b_eep(0x03,0));
 26224  002950  ECD1  F00A         	call	_Busy_eep	;wreg free
 26225  002954  0100               	movlb	0	; () banked
 26226  002956  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26227  002958  0E03               	movlw	3
 26228  00295A  6F60               	movwf	?_Write_b_eep& (0+255),b
 26229  00295C  0E00               	movlw	0
 26230  00295E  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26231  002960  ECA1  F00B         	call	_Write_b_eep	;wreg free
 26232                           
 26233                           ;main.c: 496: (Busy_eep(), Write_b_eep(0x05,0));
 26234  002964  ECD1  F00A         	call	_Busy_eep	;wreg free
 26235  002968  0100               	movlb	0	; () banked
 26236  00296A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26237  00296C  0E05               	movlw	5
 26238  00296E  6F60               	movwf	?_Write_b_eep& (0+255),b
 26239  002970  0E00               	movlw	0
 26240  002972  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26241  002974  ECA1  F00B         	call	_Write_b_eep	;wreg free
 26242                           
 26243                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x06,0));
 26244  002978  ECD1  F00A         	call	_Busy_eep	;wreg free
 26245  00297C  0100               	movlb	0	; () banked
 26246  00297E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26247  002980  0E06               	movlw	6
 26248  002982  6F60               	movwf	?_Write_b_eep& (0+255),b
 26249  002984  0E00               	movlw	0
 26250  002986  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26251  002988  ECA1  F00B         	call	_Write_b_eep	;wreg free
 26252                           
 26253                           ;main.c: 498: (Busy_eep(), Write_b_eep(0x09,20u));
 26254  00298C  ECD1  F00A         	call	_Busy_eep	;wreg free
 26255  002990  0100               	movlb	0	; () banked
 26256  002992  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26257  002994  0E09               	movlw	9
 26258  002996  6F60               	movwf	?_Write_b_eep& (0+255),b
 26259  002998  0E14               	movlw	20
 26260  00299A  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26261  00299C  ECA1  F00B         	call	_Write_b_eep	;wreg free
 26262                           
 26263                           ;main.c: 501: for (i = 0x20; i < (0x5C + 4); i++) {
 26264  0029A0  0E20               	movlw	32
 26265  0029A2  0100               	movlb	0	; () banked
 26266  0029A4  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26267  0029A6                     l14810:
 26268                           
 26269                           ; BSR set to: 0
 26270                           ;main.c: 502: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26271  0029A6  ECD1  F00A         	call	_Busy_eep	;wreg free
 26272  0029AA  D814               	call	PL60	;call to abstracted procedure
 26273  0029AC  ECA1  F00B         	call	_Write_b_eep	;wreg free
 26274  0029B0  0100               	movlb	0	; () banked
 26275  0029B2  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26276                           
 26277                           ; BSR set to: 0
 26278  0029B4  0E5F               	movlw	95
 26279  0029B6  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26280  0029B8  D7F6               	goto	l14810
 26281                           
 26282                           ; BSR set to: 0
 26283                           ;main.c: 503: }
 26284                           ;main.c: 506: for (i = 0x60; i < (0x64 + 4); i++) {
 26285  0029BA  0E60               	movlw	96
 26286  0029BC  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26287  0029BE                     l14824:
 26288                           
 26289                           ; BSR set to: 0
 26290                           ;main.c: 507: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26291  0029BE  ECD1  F00A         	call	_Busy_eep	;wreg free
 26292  0029C2  D808               	call	PL60	;call to abstracted procedure
 26293  0029C4  ECA1  F00B         	call	_Write_b_eep	;wreg free
 26294  0029C8  0100               	movlb	0	; () banked
 26295  0029CA  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26296                           
 26297                           ; BSR set to: 0
 26298  0029CC  0E67               	movlw	103
 26299  0029CE  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26300  0029D0  D7F6               	goto	l14824
 26301                           
 26302                           ; BSR set to: 0
 26303  0029D2  0C67               	retlw	103
 26304  0029D4                     __end_of_init_app_eeprom:
 26305                           	opt stack 0
 26306  0029D4                     PL60:
 26307                           	opt stack 24
 26308  0029D4  0100               	movlb	0	; () banked
 26309  0029D6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26310  0029D8  0E01               	movlw	1
 26311  0029DA  6F60               	movwf	?_Write_b_eep& (0+255),b
 26312  0029DC  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 26313  0029DE  0CFF               	retlw	255
 26314  0029E0                     __end_ofPL60:
 26315                           	opt stack 0
 26316                           tblptru	equ	0xFF8
 26317                           tblptrh	equ	0xFF7
 26318                           tblptrl	equ	0xFF6
 26319                           tablat	equ	0xFF5
 26320                           prodh	equ	0xFF4
 26321                           prodl	equ	0xFF3
 26322                           intcon	equ	0xFF2
 26323                           indf0	equ	0xFEF
 26324                           postinc0	equ	0xFEE
 26325                           fsr0h	equ	0xFEA
 26326                           fsr0l	equ	0xFE9
 26327                           wreg	equ	0xFE8
 26328                           indf1	equ	0xFE7
 26329                           postinc1	equ	0xFE6
 26330                           postdec1	equ	0xFE5
 26331                           fsr1h	equ	0xFE2
 26332                           fsr1l	equ	0xFE1
 26333                           indf2	equ	0xFDF
 26334                           postinc2	equ	0xFDE
 26335                           postdec2	equ	0xFDD
 26336                           plusw2	equ	0xFDB
 26337                           fsr2h	equ	0xFDA
 26338                           fsr2l	equ	0xFD9
 26339                           status	equ	0xFD8
 26340                           
 26341 ;; *************** function _Write_b_eep *****************
 26342 ;; Defined at:
 26343 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 26344 ;; Parameters:    Size  Location     Type
 26345 ;;  badd            2    0[BANK0 ] unsigned int 
 26346 ;;  bdat            1    2[BANK0 ] unsigned char 
 26347 ;; Auto vars:     Size  Location     Type
 26348 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 26349 ;; Return value:  Size  Location     Type
 26350 ;;		None               void
 26351 ;; Registers used:
 26352 ;;		wreg, status,2
 26353 ;; Tracked objects:
 26354 ;;		On entry : F/0
 26355 ;;		On exit  : 0/0
 26356 ;;		Unchanged: 0/0
 26357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26358 ;;      Params:         0       3       0       0       0       0       0
 26359 ;;      Locals:         0       1       0       0       0       0       0
 26360 ;;      Temps:          0       0       0       0       0       0       0
 26361 ;;      Totals:         0       4       0       0       0       0       0
 26362 ;;Total ram usage:        4 bytes
 26363 ;; Hardware stack levels used:    1
 26364 ;; Hardware stack levels required when called:    3
 26365 ;; This function calls:
 26366 ;;		Nothing
 26367 ;; This function is called by:
 26368 ;;		_init_app_eeprom
 26369 ;;		_doModeVerbose
 26370 ;;		_doModeSLCAN
 26371 ;; This function uses a non-reentrant model
 26372 ;;
 26373                           
 26374                           	psect	text77
 26375  001742                     __ptext77:
 26376                           	opt stack 0
 26377  001742                     _Write_b_eep:
 26378                           	opt stack 25
 26379                           
 26380                           ; BSR set to: 0
 26381                           
 26382                           ; BSR set to: 0
 26383                           ;incstack = 0
 26384                           ;incstack = 0
 26385  001742  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 26386  001746  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 26387  00174A  9EA6               	bcf	4006,7,c	;volatile
 26388  00174C  9CA6               	bcf	4006,6,c	;volatile
 26389  00174E  84A6               	bsf	4006,2,c	;volatile
 26390                           
 26391                           ; BSR set to: 0
 26392  001750  0E00               	movlw	0
 26393  001752  BEF2               	btfsc	intcon,7,c	;volatile
 26394  001754  0E01               	movlw	1
 26395  001756  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 26396                           
 26397                           ; BSR set to: 0
 26398  001758  9EF2               	bcf	intcon,7,c	;volatile
 26399                           
 26400                           ; BSR set to: 0
 26401  00175A  0E55               	movlw	85
 26402  00175C  6EA7               	movwf	4007,c	;volatile
 26403                           
 26404                           ; BSR set to: 0
 26405  00175E  0EAA               	movlw	170
 26406  001760  6EA7               	movwf	4007,c	;volatile
 26407                           
 26408                           ; BSR set to: 0
 26409  001762  82A6               	bsf	4006,1,c	;volatile
 26410  001764                     l1798:
 26411                           
 26412                           ; BSR set to: 0
 26413  001764  B2A6               	btfsc	4006,1,c	;volatile
 26414  001766  D7FE               	goto	l1798
 26415                           
 26416                           ; BSR set to: 0
 26417  001768  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 26418  00176A  D002               	bra	u19865
 26419  00176C  9EF2               	bcf	intcon,7,c	;volatile
 26420  00176E  D001               	bra	u19866
 26421  001770                     u19865:
 26422  001770  8EF2               	bsf	intcon,7,c	;volatile
 26423  001772                     u19866:
 26424  001772  94A6               	bcf	4006,2,c	;volatile
 26425  001774  0012               	return	
 26426  001776                     __end_of_Write_b_eep:
 26427                           	opt stack 0
 26428                           tblptru	equ	0xFF8
 26429                           tblptrh	equ	0xFF7
 26430                           tblptrl	equ	0xFF6
 26431                           tablat	equ	0xFF5
 26432                           prodh	equ	0xFF4
 26433                           prodl	equ	0xFF3
 26434                           intcon	equ	0xFF2
 26435                           indf0	equ	0xFEF
 26436                           postinc0	equ	0xFEE
 26437                           fsr0h	equ	0xFEA
 26438                           fsr0l	equ	0xFE9
 26439                           wreg	equ	0xFE8
 26440                           indf1	equ	0xFE7
 26441                           postinc1	equ	0xFE6
 26442                           postdec1	equ	0xFE5
 26443                           fsr1h	equ	0xFE2
 26444                           fsr1l	equ	0xFE1
 26445                           indf2	equ	0xFDF
 26446                           postinc2	equ	0xFDE
 26447                           postdec2	equ	0xFDD
 26448                           plusw2	equ	0xFDB
 26449                           fsr2h	equ	0xFDA
 26450                           fsr2l	equ	0xFD9
 26451                           status	equ	0xFD8
 26452                           
 26453 ;; *************** function _Busy_eep *****************
 26454 ;; Defined at:
 26455 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 26456 ;; Parameters:    Size  Location     Type
 26457 ;;		None
 26458 ;; Auto vars:     Size  Location     Type
 26459 ;;		None
 26460 ;; Return value:  Size  Location     Type
 26461 ;;		None               void
 26462 ;; Registers used:
 26463 ;;		None
 26464 ;; Tracked objects:
 26465 ;;		On entry : 0/1
 26466 ;;		On exit  : 0/0
 26467 ;;		Unchanged: 0/0
 26468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26469 ;;      Params:         0       0       0       0       0       0       0
 26470 ;;      Locals:         0       0       0       0       0       0       0
 26471 ;;      Temps:          0       0       0       0       0       0       0
 26472 ;;      Totals:         0       0       0       0       0       0       0
 26473 ;;Total ram usage:        0 bytes
 26474 ;; Hardware stack levels used:    1
 26475 ;; Hardware stack levels required when called:    3
 26476 ;; This function calls:
 26477 ;;		Nothing
 26478 ;; This function is called by:
 26479 ;;		_init_app_eeprom
 26480 ;;		_doModeVerbose
 26481 ;;		_doModeSLCAN
 26482 ;; This function uses a non-reentrant model
 26483 ;;
 26484                           
 26485                           	psect	text78
 26486  0015A2                     __ptext78:
 26487                           	opt stack 0
 26488  0015A2                     _Busy_eep:
 26489                           	opt stack 25
 26490  0015A2                     l1773:
 26491  0015A2  A2A6               	btfss	4006,1,c	;volatile
 26492  0015A4  0012               	return	
 26493  0015A6  D7FD               	goto	l1773
 26494  0015A8                     __end_of_Busy_eep:
 26495                           	opt stack 0
 26496                           tblptru	equ	0xFF8
 26497                           tblptrh	equ	0xFF7
 26498                           tblptrl	equ	0xFF6
 26499                           tablat	equ	0xFF5
 26500                           prodh	equ	0xFF4
 26501                           prodl	equ	0xFF3
 26502                           intcon	equ	0xFF2
 26503                           indf0	equ	0xFEF
 26504                           postinc0	equ	0xFEE
 26505                           fsr0h	equ	0xFEA
 26506                           fsr0l	equ	0xFE9
 26507                           wreg	equ	0xFE8
 26508                           indf1	equ	0xFE7
 26509                           postinc1	equ	0xFE6
 26510                           postdec1	equ	0xFE5
 26511                           fsr1h	equ	0xFE2
 26512                           fsr1l	equ	0xFE1
 26513                           indf2	equ	0xFDF
 26514                           postinc2	equ	0xFDE
 26515                           postdec2	equ	0xFDD
 26516                           plusw2	equ	0xFDB
 26517                           fsr2h	equ	0xFDA
 26518                           fsr2l	equ	0xFD9
 26519                           status	equ	0xFD8
 26520                           
 26521 ;; *************** function _init_app_ram *****************
 26522 ;; Defined at:
 26523 ;;		line 472 in file "main.c"
 26524 ;; Parameters:    Size  Location     Type
 26525 ;;		None
 26526 ;; Auto vars:     Size  Location     Type
 26527 ;;		None
 26528 ;; Return value:  Size  Location     Type
 26529 ;;		None               void
 26530 ;; Registers used:
 26531 ;;		wreg, status,2, cstack
 26532 ;; Tracked objects:
 26533 ;;		On entry : 0/1
 26534 ;;		On exit  : 0/0
 26535 ;;		Unchanged: 0/0
 26536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26537 ;;      Params:         0       0       0       0       0       0       0
 26538 ;;      Locals:         0       0       0       0       0       0       0
 26539 ;;      Temps:          0       0       0       0       0       0       0
 26540 ;;      Totals:         0       0       0       0       0       0       0
 26541 ;;Total ram usage:        0 bytes
 26542 ;; Hardware stack levels used:    1
 26543 ;; Hardware stack levels required when called:    4
 26544 ;; This function calls:
 26545 ;;		_Read_b_eep
 26546 ;; This function is called by:
 26547 ;;		_init
 26548 ;;		_vscp_restoreDefaults
 26549 ;; This function uses a non-reentrant model
 26550 ;;
 26551                           
 26552                           	psect	text79
 26553  001B02                     __ptext79:
 26554                           	opt stack 0
 26555  001B02                     _init_app_ram:
 26556                           	opt stack 24
 26557                           
 26558                           ;main.c: 474: can_receiveOverruns = 0;
 26559                           
 26560                           ;incstack = 0
 26561                           ;incstack = 0
 26562  001B02  0101               	movlb	1	; () banked
 26563  001B04  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26564  001B06  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26565  001B08  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26566  001B0A  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26567                           
 26568                           ;main.c: 475: can_transmitOverruns = 0;
 26569  001B0C  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26570  001B0E  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26571  001B10  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26572  001B12  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26573                           
 26574                           ;main.c: 476: uart_receiveOverruns = 0;
 26575  001B14  6B1C               	clrf	_uart_receiveOverruns& (0+255),b
 26576  001B16  6B1D               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26577  001B18  6B1E               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26578  001B1A  6B1F               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26579                           
 26580                           ;main.c: 477: uart_transmitOverruns = 0;
 26581  001B1C  6B20               	clrf	_uart_transmitOverruns& (0+255),b
 26582  001B1E  6B21               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26583  001B20  6B22               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26584  001B22  6B23               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26585                           
 26586                           ; BSR set to: 1
 26587                           ;main.c: 479: bHex = Read_b_eep(0x06);
 26588  001B24  0100               	movlb	0	; () banked
 26589  001B26  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26590  001B28  0E06               	movlw	6
 26591  001B2A  6F60               	movwf	?_Read_b_eep& (0+255),b
 26592  001B2C  ECE1  F00A         	call	_Read_b_eep	;wreg free
 26593  001B30  0100               	movlb	0	; () banked
 26594  001B32  6FE5               	movwf	_bHex& (0+255),b
 26595                           
 26596                           ;main.c: 480: mode = Read_b_eep(0x03);
 26597  001B34  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26598  001B36  0E03               	movlw	3
 26599  001B38  6F60               	movwf	?_Read_b_eep& (0+255),b
 26600  001B3A  ECE1  F00A         	call	_Read_b_eep	;wreg free
 26601  001B3E  0100               	movlb	0	; () banked
 26602  001B40  6FE6               	movwf	_mode& (0+255),b
 26603                           
 26604                           ;main.c: 482: rwtimeout = Read_b_eep(0x09);
 26605  001B42  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26606  001B44  0E09               	movlw	9
 26607  001B46  6F60               	movwf	?_Read_b_eep& (0+255),b
 26608  001B48  ECE1  F00A         	call	_Read_b_eep	;wreg free
 26609  001B4C  6E37               	movwf	_rwtimeout,c
 26610  001B4E  0012               	return	
 26611  001B50                     __end_of_init_app_ram:
 26612                           	opt stack 0
 26613                           tblptru	equ	0xFF8
 26614                           tblptrh	equ	0xFF7
 26615                           tblptrl	equ	0xFF6
 26616                           tablat	equ	0xFF5
 26617                           prodh	equ	0xFF4
 26618                           prodl	equ	0xFF3
 26619                           intcon	equ	0xFF2
 26620                           indf0	equ	0xFEF
 26621                           postinc0	equ	0xFEE
 26622                           fsr0h	equ	0xFEA
 26623                           fsr0l	equ	0xFE9
 26624                           wreg	equ	0xFE8
 26625                           indf1	equ	0xFE7
 26626                           postinc1	equ	0xFE6
 26627                           postdec1	equ	0xFE5
 26628                           fsr1h	equ	0xFE2
 26629                           fsr1l	equ	0xFE1
 26630                           indf2	equ	0xFDF
 26631                           postinc2	equ	0xFDE
 26632                           postdec2	equ	0xFDD
 26633                           plusw2	equ	0xFDB
 26634                           fsr2h	equ	0xFDA
 26635                           fsr2l	equ	0xFD9
 26636                           status	equ	0xFD8
 26637                           
 26638 ;; *************** function _Read_b_eep *****************
 26639 ;; Defined at:
 26640 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 26641 ;; Parameters:    Size  Location     Type
 26642 ;;  badd            2    0[BANK0 ] unsigned int 
 26643 ;; Auto vars:     Size  Location     Type
 26644 ;;		None
 26645 ;; Return value:  Size  Location     Type
 26646 ;;                  1    wreg      unsigned char 
 26647 ;; Registers used:
 26648 ;;		wreg, status,2
 26649 ;; Tracked objects:
 26650 ;;		On entry : F/0
 26651 ;;		On exit  : 0/0
 26652 ;;		Unchanged: 0/0
 26653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26654 ;;      Params:         0       2       0       0       0       0       0
 26655 ;;      Locals:         0       0       0       0       0       0       0
 26656 ;;      Temps:          0       0       0       0       0       0       0
 26657 ;;      Totals:         0       2       0       0       0       0       0
 26658 ;;Total ram usage:        2 bytes
 26659 ;; Hardware stack levels used:    1
 26660 ;; Hardware stack levels required when called:    3
 26661 ;; This function calls:
 26662 ;;		Nothing
 26663 ;; This function is called by:
 26664 ;;		_main
 26665 ;;		_init_app_ram
 26666 ;; This function uses a non-reentrant model
 26667 ;;
 26668                           
 26669                           	psect	text80
 26670  0015C2                     __ptext80:
 26671                           	opt stack 0
 26672  0015C2                     _Read_b_eep:
 26673                           	opt stack 24
 26674                           
 26675                           ; BSR set to: 0
 26676                           
 26677                           ;incstack = 0
 26678                           ;incstack = 0
 26679  0015C2  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 26680  0015C6  9CA6               	bcf	4006,6,c	;volatile
 26681  0015C8  9EA6               	bcf	4006,7,c	;volatile
 26682  0015CA  80A6               	bsf	4006,0,c	;volatile
 26683  0015CC  F000               	nop		;# 
 26684  0015CE  F000               	nop		;# 
 26685  0015D0  50A8               	movf	4008,w,c	;volatile
 26686  0015D2  0012               	return	
 26687  0015D4                     __end_of_Read_b_eep:
 26688                           	opt stack 0
 26689                           tblptru	equ	0xFF8
 26690                           tblptrh	equ	0xFF7
 26691                           tblptrl	equ	0xFF6
 26692                           tablat	equ	0xFF5
 26693                           prodh	equ	0xFF4
 26694                           prodl	equ	0xFF3
 26695                           intcon	equ	0xFF2
 26696                           indf0	equ	0xFEF
 26697                           postinc0	equ	0xFEE
 26698                           fsr0h	equ	0xFEA
 26699                           fsr0l	equ	0xFE9
 26700                           wreg	equ	0xFE8
 26701                           indf1	equ	0xFE7
 26702                           postinc1	equ	0xFE6
 26703                           postdec1	equ	0xFE5
 26704                           fsr1h	equ	0xFE2
 26705                           fsr1l	equ	0xFE1
 26706                           indf2	equ	0xFDF
 26707                           postinc2	equ	0xFDE
 26708                           postdec2	equ	0xFDD
 26709                           plusw2	equ	0xFDB
 26710                           fsr2h	equ	0xFDA
 26711                           fsr2l	equ	0xFD9
 26712                           status	equ	0xFD8
 26713                           
 26714 ;; *************** function _fifo_init *****************
 26715 ;; Defined at:
 26716 ;;		line 14 in file "fifo.c"
 26717 ;; Parameters:    Size  Location     Type
 26718 ;;  f               2    0[BANK0 ] PTR struct .
 26719 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26720 ;;  buf             2    2[BANK0 ] PTR const void 
 26721 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 26722 ;;  size            2    4[BANK0 ] unsigned short 
 26723 ;; Auto vars:     Size  Location     Type
 26724 ;;		None
 26725 ;; Return value:  Size  Location     Type
 26726 ;;		None               void
 26727 ;; Registers used:
 26728 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26729 ;; Tracked objects:
 26730 ;;		On entry : F/0
 26731 ;;		On exit  : F/0
 26732 ;;		Unchanged: 0/0
 26733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26734 ;;      Params:         0       6       0       0       0       0       0
 26735 ;;      Locals:         0       0       0       0       0       0       0
 26736 ;;      Temps:          0       0       0       0       0       0       0
 26737 ;;      Totals:         0       6       0       0       0       0       0
 26738 ;;Total ram usage:        6 bytes
 26739 ;; Hardware stack levels used:    1
 26740 ;; Hardware stack levels required when called:    3
 26741 ;; This function calls:
 26742 ;;		Nothing
 26743 ;; This function is called by:
 26744 ;;		_main
 26745 ;; This function uses a non-reentrant model
 26746 ;;
 26747                           
 26748                           	psect	text81
 26749  0018DA                     __ptext81:
 26750                           	opt stack 0
 26751  0018DA                     _fifo_init:
 26752                           	opt stack 26
 26753                           
 26754                           ; BSR set to: 0
 26755                           ;fifo.c: 15: f->head = 0;
 26756                           
 26757                           ;incstack = 0
 26758                           ;incstack = 0
 26759  0018DA  EE20 F002          	lfsr	2,2
 26760  0018DE  D816               	call	PL90	;call to abstracted procedure
 26761                           
 26762                           ;fifo.c: 16: f->tail = 0;
 26763  0018E0  EE20 F004          	lfsr	2,4
 26764  0018E4  D813               	call	PL90	;call to abstracted procedure
 26765                           
 26766                           ;fifo.c: 17: f->size = size;
 26767  0018E6  EE20 F006          	lfsr	2,6
 26768  0018EA  5160               	movf	fifo_init@f& (0+255),w,b
 26769  0018EC  26D9               	addwf	fsr2l,f,c
 26770  0018EE  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26771  0018F0  22DA               	addwfc	fsr2h,f,c
 26772  0018F2  C064  FFDE         	movff	fifo_init@size,postinc2
 26773  0018F6  C065  FFDD         	movff	fifo_init@size+1,postdec2
 26774                           
 26775                           ; BSR set to: 0
 26776                           ;fifo.c: 18: f->buf = buf;
 26777  0018FA  C060  FFD9         	movff	fifo_init@f,fsr2l
 26778  0018FE  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 26779  001902  C062  FFDE         	movff	fifo_init@buf,postinc2
 26780  001906  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 26781                           
 26782                           ; BSR set to: 0
 26783  00190A  0012               	return	
 26784  00190C                     __end_of_fifo_init:
 26785                           	opt stack 0
 26786  00190C                     PL90:
 26787                           	opt stack 26
 26788  00190C  5160               	movf	fifo_init@f& (0+255),w,b
 26789  00190E  26D9               	addwf	fsr2l,f,c
 26790  001910  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26791  001912  22DA               	addwfc	fsr2h,f,c
 26792  001914  6ADE               	clrf	postinc2,c
 26793  001916  6ADD               	clrf	postdec2,c
 26794  001918  0012               	return	
 26795  00191A                     __end_ofPL90:
 26796                           	opt stack 0
 26797                           tblptru	equ	0xFF8
 26798                           tblptrh	equ	0xFF7
 26799                           tblptrl	equ	0xFF6
 26800                           tablat	equ	0xFF5
 26801                           prodh	equ	0xFF4
 26802                           prodl	equ	0xFF3
 26803                           intcon	equ	0xFF2
 26804                           indf0	equ	0xFEF
 26805                           postinc0	equ	0xFEE
 26806                           fsr0h	equ	0xFEA
 26807                           fsr0l	equ	0xFE9
 26808                           wreg	equ	0xFE8
 26809                           indf1	equ	0xFE7
 26810                           postinc1	equ	0xFE6
 26811                           postdec1	equ	0xFE5
 26812                           fsr1h	equ	0xFE2
 26813                           fsr1l	equ	0xFE1
 26814                           indf2	equ	0xFDF
 26815                           postinc2	equ	0xFDE
 26816                           postdec2	equ	0xFDD
 26817                           plusw2	equ	0xFDB
 26818                           fsr2h	equ	0xFDA
 26819                           fsr2l	equ	0xFD9
 26820                           status	equ	0xFD8
 26821                           
 26822 ;; *************** function _Interrupt *****************
 26823 ;; Defined at:
 26824 ;;		line 144 in file "main.c"
 26825 ;; Parameters:    Size  Location     Type
 26826 ;;		None
 26827 ;; Auto vars:     Size  Location     Type
 26828 ;;  fail            1   32[COMRAM] unsigned char 
 26829 ;;  c               1   31[COMRAM] unsigned char 
 26830 ;; Return value:  Size  Location     Type
 26831 ;;		None               void
 26832 ;; Registers used:
 26833 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26834 ;; Tracked objects:
 26835 ;;		On entry : 0/0
 26836 ;;		On exit  : 0/0
 26837 ;;		Unchanged: 0/0
 26838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26839 ;;      Params:         0       0       0       0       0       0       0
 26840 ;;      Locals:         2       0       0       0       0       0       0
 26841 ;;      Temps:          9       0       0       0       0       0       0
 26842 ;;      Totals:        11       0       0       0       0       0       0
 26843 ;;Total ram usage:       11 bytes
 26844 ;; Hardware stack levels used:    1
 26845 ;; Hardware stack levels required when called:    2
 26846 ;; This function calls:
 26847 ;;		_ReadUSART
 26848 ;;		_fifo_write
 26849 ;;		_ECANReceiveMessage
 26850 ;;		_fifo_getFree
 26851 ;;		i1_WriteTimer0
 26852 ;; This function is called by:
 26853 ;;		Interrupt level 1
 26854 ;; This function uses a non-reentrant model
 26855 ;;
 26856                           
 26857                           	psect	intcodelo
 26858  000018                     __pintcodelo:
 26859                           	opt stack 0
 26860  000018                     _Interrupt:
 26861                           	opt stack 19
 26862                           
 26863                           ; BSR set to: 0
 26864                           ;incstack = 0
 26865  000018  CFD8 F019          	movff	status,??_Interrupt+2
 26866  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 26867  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 26868  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 26869  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 26870  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 26871  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 26872  000034                     
 26873                           ;main.c: 145: uint8_t c;
 26874                           ;main.c: 148: if ( 1 == PIR1bits.RCIF ) {
 26875  000034  AA9E               	btfss	3998,5,c	;volatile
 26876  000036  D001               	goto	i1u1750_21
 26877  000038  D001               	goto	i1u1750_20
 26878  00003A                     i1u1750_21:
 26879  00003A  D02B               	goto	i1l399
 26880  00003C                     i1u1750_20:
 26881  00003C                     
 26882                           ;main.c: 150: c = ReadUSART();
 26883  00003C  EC15  F00B         	call	_ReadUSART	;wreg free
 26884  000040  6E20               	movwf	Interrupt@c,c
 26885  000042                     
 26886                           ;main.c: 152: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 26887  000042  0101               	movlb	1	; () banked
 26888  000044  0E01               	movlw	high _serialInputFifo
 26889  000046  6E02               	movwf	?_fifo_write+1,c
 26890  000048  0ED7               	movlw	low _serialInputFifo
 26891  00004A  6E01               	movwf	?_fifo_write,c
 26892  00004C  0E20               	movlw	low Interrupt@c
 26893  00004E  6E03               	movwf	?_fifo_write+2,c
 26894  000050  0E00               	movlw	high Interrupt@c
 26895  000052  6E04               	movwf	?_fifo_write+3,c
 26896  000054  0E0F               	movlw	15
 26897  000056  6E04               	movwf	?_fifo_write+3,c
 26898  000058  0E5F               	movlw	__accesstop+-1
 26899  00005A  6403               	cpfsgt	?_fifo_write+2,c
 26900  00005C  6A04               	clrf	?_fifo_write+3,c
 26901  00005E  0E01               	movlw	1
 26902  000060  6E05               	movwf	?_fifo_write+4,c
 26903  000062  0E00               	movlw	0
 26904  000064  6E06               	movwf	?_fifo_write+5,c
 26905  000066  0E00               	movlw	0
 26906  000068  6E07               	movwf	?_fifo_write+6,c
 26907  00006A  0E00               	movlw	0
 26908  00006C  6E08               	movwf	?_fifo_write+7,c
 26909  00006E  EC5C  F01A         	call	_fifo_write	;wreg free
 26910  000072  0401               	decf	?_fifo_write,w,c
 26911  000074  1002               	iorwf	?_fifo_write+1,w,c
 26912  000076  B4D8               	btfsc	status,2,c
 26913  000078  D001               	goto	i1u1751_21
 26914  00007A  D001               	goto	i1u1751_20
 26915  00007C                     i1u1751_21:
 26916  00007C  D008               	goto	i1l13342
 26917  00007E                     i1u1751_20:
 26918  00007E                     
 26919                           ; BSR set to: 1
 26920                           ;main.c: 154: uart_receiveOverruns++;
 26921  00007E  0E01               	movlw	1
 26922  000080  271C               	addwf	_uart_receiveOverruns& (0+255),f,b
 26923  000082  0E00               	movlw	0
 26924  000084  231D               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 26925  000086  0E00               	movlw	0
 26926  000088  231E               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 26927  00008A  0E00               	movlw	0
 26928  00008C  231F               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 26929  00008E                     i1l13342:
 26930                           
 26931                           ; BSR set to: 1
 26932                           ;main.c: 155: }
 26933                           ;main.c: 158: PIR1bits.RCIF = 0;
 26934  00008E  9A9E               	bcf	3998,5,c	;volatile
 26935                           
 26936                           ;main.c: 160: }
 26937  000090  D07D               	goto	i1l401
 26938  000092                     i1l399:
 26939                           
 26940                           ;main.c: 162: else if (1 == INTCONbits.TMR0IF) {
 26941  000092  A4F2               	btfss	intcon,2,c	;volatile
 26942  000094  D001               	goto	i1u1752_21
 26943  000096  D001               	goto	i1u1752_20
 26944  000098                     i1u1752_21:
 26945  000098  D079               	goto	i1l401
 26946  00009A                     i1u1752_20:
 26947  00009A                     
 26948                           ;main.c: 164: WriteTimer0(0xfb1d);
 26949  00009A  0EFB               	movlw	251
 26950  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 26951  00009E  0E1D               	movlw	29
 26952  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 26953  0000A2  ECD8  F00A         	call	i1_WriteTimer0	;wreg free
 26954  0000A6                     
 26955                           ;main.c: 166: timer++;
 26956  0000A6  0E01               	movlw	1
 26957  0000A8  0101               	movlb	1	; () banked
 26958  0000AA  2718               	addwf	_timer& (0+255),f,b	;volatile
 26959  0000AC  0E00               	movlw	0
 26960  0000AE  2319               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26961  0000B0  0E00               	movlw	0
 26962  0000B2  231A               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26963  0000B4  0E00               	movlw	0
 26964  0000B6  231B               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26965  0000B8                     
 26966                           ; BSR set to: 1
 26967                           ;main.c: 167: timekeeper++;
 26968  0000B8  0E01               	movlw	1
 26969  0000BA  2622               	addwf	_timekeeper,f,c	;volatile
 26970  0000BC  0E00               	movlw	0
 26971  0000BE  2223               	addwfc	_timekeeper+1,f,c	;volatile
 26972  0000C0  0E00               	movlw	0
 26973  0000C2  2224               	addwfc	_timekeeper+2,f,c	;volatile
 26974  0000C4  0E00               	movlw	0
 26975  0000C6  2225               	addwfc	_timekeeper+3,f,c	;volatile
 26976  0000C8                     
 26977                           ; BSR set to: 1
 26978                           ;main.c: 170: status_led_cnt++;
 26979  0000C8  4A26               	infsnz	_status_led_cnt,f,c	;volatile
 26980  0000CA  2A27               	incf	_status_led_cnt+1,f,c	;volatile
 26981  0000CC                     
 26982                           ; BSR set to: 1
 26983                           ;main.c: 171: if ((2 == ledFunctionality) &&
 26984                           ;main.c: 172: (status_led_cnt > 1000)) {
 26985  0000CC  5035               	movf	_ledFunctionality,w,c
 26986  0000CE  0A02               	xorlw	2
 26987  0000D0  A4D8               	btfss	status,2,c
 26988  0000D2  D001               	goto	i1u1753_21
 26989  0000D4  D001               	goto	i1u1753_20
 26990  0000D6                     i1u1753_21:
 26991  0000D6  D00C               	goto	i1l13358
 26992  0000D8                     i1u1753_20:
 26993  0000D8                     
 26994                           ; BSR set to: 1
 26995  0000D8  0EE9               	movlw	233
 26996  0000DA  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26997  0000DC  0E03               	movlw	3
 26998  0000DE  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26999  0000E0  A0D8               	btfss	status,0,c
 27000  0000E2  D001               	goto	i1u1754_21
 27001  0000E4  D001               	goto	i1u1754_20
 27002  0000E6                     i1u1754_21:
 27003  0000E6  D004               	goto	i1l13358
 27004  0000E8                     i1u1754_20:
 27005  0000E8                     i1l13356:
 27006                           
 27007                           ; BSR set to: 1
 27008                           ;main.c: 173: LATC1 = ~LATC1;
 27009  0000E8  728B               	btg	3979,1,c	;volatile
 27010                           
 27011                           ;main.c: 174: status_led_cnt = 0;
 27012  0000EA  6A26               	clrf	_status_led_cnt,c	;volatile
 27013  0000EC  6A27               	clrf	_status_led_cnt+1,c	;volatile
 27014                           
 27015                           ;main.c: 175: }
 27016  0000EE  D04D               	goto	i1l404
 27017  0000F0                     i1l13358:
 27018                           
 27019                           ; BSR set to: 1
 27020                           ;main.c: 176: else if ((3 == ledFunctionality) &&
 27021                           ;main.c: 177: (status_led_cnt > 400)) {
 27022  0000F0  5035               	movf	_ledFunctionality,w,c
 27023  0000F2  0A03               	xorlw	3
 27024  0000F4  A4D8               	btfss	status,2,c
 27025  0000F6  D001               	goto	i1u1755_21
 27026  0000F8  D001               	goto	i1u1755_20
 27027  0000FA                     i1u1755_21:
 27028  0000FA  D009               	goto	i1l13364
 27029  0000FC                     i1u1755_20:
 27030  0000FC                     
 27031                           ; BSR set to: 1
 27032  0000FC  0E91               	movlw	145
 27033  0000FE  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27034  000100  0E01               	movlw	1
 27035  000102  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27036  000104  A0D8               	btfss	status,0,c
 27037  000106  D001               	goto	i1u1756_21
 27038  000108  D001               	goto	i1u1756_20
 27039  00010A                     i1u1756_21:
 27040  00010A  D001               	goto	i1l13364
 27041  00010C                     i1u1756_20:
 27042  00010C  D7ED               	goto	i1l13356
 27043  00010E                     i1l13364:
 27044                           
 27045                           ; BSR set to: 1
 27046                           ;main.c: 181: else if ((4 == ledFunctionality) &&
 27047                           ;main.c: 182: (status_led_cnt > 100)) {
 27048  00010E  5035               	movf	_ledFunctionality,w,c
 27049  000110  0A04               	xorlw	4
 27050  000112  A4D8               	btfss	status,2,c
 27051  000114  D001               	goto	i1u1757_21
 27052  000116  D001               	goto	i1u1757_20
 27053  000118                     i1u1757_21:
 27054  000118  D009               	goto	i1l13370
 27055  00011A                     i1u1757_20:
 27056  00011A                     
 27057                           ; BSR set to: 1
 27058  00011A  0E65               	movlw	101
 27059  00011C  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27060  00011E  0E00               	movlw	0
 27061  000120  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27062  000122  A0D8               	btfss	status,0,c
 27063  000124  D001               	goto	i1u1758_21
 27064  000126  D001               	goto	i1u1758_20
 27065  000128                     i1u1758_21:
 27066  000128  D001               	goto	i1l13370
 27067  00012A                     i1u1758_20:
 27068  00012A  D7DE               	goto	i1l13356
 27069  00012C                     i1l13370:
 27070                           
 27071                           ; BSR set to: 1
 27072                           ;main.c: 186: else if ((5 == ledFunctionality) &&
 27073                           ;main.c: 187: (status_led_cnt > 70)) {
 27074  00012C  5035               	movf	_ledFunctionality,w,c
 27075  00012E  0A05               	xorlw	5
 27076  000130  A4D8               	btfss	status,2,c
 27077  000132  D001               	goto	i1u1759_21
 27078  000134  D001               	goto	i1u1759_20
 27079  000136                     i1u1759_21:
 27080  000136  D009               	goto	i1l13376
 27081  000138                     i1u1759_20:
 27082  000138                     
 27083                           ; BSR set to: 1
 27084  000138  0E47               	movlw	71
 27085  00013A  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27086  00013C  0E00               	movlw	0
 27087  00013E  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27088  000140  A0D8               	btfss	status,0,c
 27089  000142  D001               	goto	i1u1760_21
 27090  000144  D001               	goto	i1u1760_20
 27091  000146                     i1u1760_21:
 27092  000146  D001               	goto	i1l13376
 27093  000148                     i1u1760_20:
 27094  000148  D7CF               	goto	i1l13356
 27095  00014A                     i1l13376:
 27096                           
 27097                           ; BSR set to: 1
 27098                           ;main.c: 191: else if ((6 == ledFunctionality) &&
 27099                           ;main.c: 192: (status_led_cnt > 40)) {
 27100  00014A  5035               	movf	_ledFunctionality,w,c
 27101  00014C  0A06               	xorlw	6
 27102  00014E  A4D8               	btfss	status,2,c
 27103  000150  D001               	goto	i1u1761_21
 27104  000152  D001               	goto	i1u1761_20
 27105  000154                     i1u1761_21:
 27106  000154  D009               	goto	i1l13382
 27107  000156                     i1u1761_20:
 27108  000156                     
 27109                           ; BSR set to: 1
 27110  000156  0E29               	movlw	41
 27111  000158  5C26               	subwf	_status_led_cnt,w,c	;volatile
 27112  00015A  0E00               	movlw	0
 27113  00015C  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 27114  00015E  A0D8               	btfss	status,0,c
 27115  000160  D001               	goto	i1u1762_21
 27116  000162  D001               	goto	i1u1762_20
 27117  000164                     i1u1762_21:
 27118  000164  D001               	goto	i1l13382
 27119  000166                     i1u1762_20:
 27120  000166  D7C0               	goto	i1l13356
 27121  000168                     i1l13382:
 27122                           
 27123                           ; BSR set to: 1
 27124                           ;main.c: 196: else if (1 == ledFunctionality) {
 27125  000168  0435               	decf	_ledFunctionality,w,c
 27126  00016A  A4D8               	btfss	status,2,c
 27127  00016C  D001               	goto	i1u1763_21
 27128  00016E  D001               	goto	i1u1763_20
 27129  000170                     i1u1763_21:
 27130  000170  D004               	goto	i1l413
 27131  000172                     i1u1763_20:
 27132  000172                     
 27133                           ; BSR set to: 1
 27134                           ;main.c: 197: LATC1 = 1;
 27135  000172  828B               	bsf	3979,1,c	;volatile
 27136                           
 27137                           ;main.c: 198: status_led_cnt = 0;
 27138  000174  6A26               	clrf	_status_led_cnt,c	;volatile
 27139  000176  6A27               	clrf	_status_led_cnt+1,c	;volatile
 27140                           
 27141                           ;main.c: 199: }
 27142  000178  D008               	goto	i1l404
 27143  00017A                     i1l413:
 27144                           
 27145                           ; BSR set to: 1
 27146                           ;main.c: 200: else if (0 == ledFunctionality) {
 27147  00017A  6635               	tstfsz	_ledFunctionality,c
 27148  00017C  D001               	goto	i1u1764_21
 27149  00017E  D001               	goto	i1u1764_20
 27150  000180                     i1u1764_21:
 27151  000180  D004               	goto	i1l410
 27152  000182                     i1u1764_20:
 27153  000182                     
 27154                           ; BSR set to: 1
 27155                           ;main.c: 201: LATC1 = 0;
 27156  000182  928B               	bcf	3979,1,c	;volatile
 27157                           
 27158                           ;main.c: 202: status_led_cnt = 0;
 27159  000184  6A26               	clrf	_status_led_cnt,c	;volatile
 27160  000186  6A27               	clrf	_status_led_cnt+1,c	;volatile
 27161  000188  D000               	goto	i1l404
 27162  00018A                     i1l410:
 27163  00018A                     i1l404:
 27164                           
 27165                           ; BSR set to: 1
 27166                           ;main.c: 203: }
 27167                           ;main.c: 205: INTCONbits.TMR0IF = 0;
 27168  00018A  94F2               	bcf	intcon,2,c	;volatile
 27169  00018C                     i1l401:
 27170                           
 27171                           ;main.c: 206: }
 27172                           ;main.c: 209: if ( 1 == IRXIF ) {
 27173  00018C  AEA4               	btfss	4004,7,c	;volatile
 27174  00018E  D001               	goto	i1u1765_21
 27175  000190  D001               	goto	i1u1765_20
 27176  000192                     i1u1765_21:
 27177  000192  D001               	goto	i1l416
 27178  000194                     i1u1765_20:
 27179  000194                     
 27180                           ;main.c: 211: IRXIF = 0;
 27181  000194  9EA4               	bcf	4004,7,c	;volatile
 27182  000196                     i1l416:
 27183                           
 27184                           ;main.c: 212: }
 27185                           ;main.c: 215: if ( RXBnIF ) {
 27186  000196  A2A4               	btfss	4004,1,c	;volatile
 27187  000198  D001               	goto	i1u1766_21
 27188  00019A  D001               	goto	i1u1766_20
 27189  00019C                     i1u1766_21:
 27190  00019C  D09F               	goto	i1l429
 27191  00019E                     i1u1766_20:
 27192  00019E                     
 27193                           ;main.c: 217: if ( ECANReceiveMessage((unsigned long *)&id,
 27194                           ;main.c: 218: (BYTE*)&data,
 27195                           ;main.c: 219: (BYTE*)&dlc,
 27196                           ;main.c: 220: &flags) ) {
 27197  00019E  0101               	movlb	1	; () banked
 27198  0001A0  0E01               	movlw	high _id
 27199  0001A2  6E0B               	movwf	?_ECANReceiveMessage+1,c
 27200  0001A4  0EE7               	movlw	low _id
 27201  0001A6  6E0A               	movwf	?_ECANReceiveMessage,c
 27202  0001A8  0E01               	movlw	high _data
 27203  0001AA  6E0D               	movwf	?_ECANReceiveMessage+3,c
 27204  0001AC  0ECF               	movlw	low _data
 27205  0001AE  6E0C               	movwf	?_ECANReceiveMessage+2,c
 27206  0001B0  0E3C               	movlw	low _dlc
 27207  0001B2  6E0E               	movwf	?_ECANReceiveMessage+4,c
 27208  0001B4  0E3D               	movlw	low _flags
 27209  0001B6  6E0F               	movwf	?_ECANReceiveMessage+5,c
 27210  0001B8  ECAE  F022         	call	_ECANReceiveMessage	;wreg free
 27211  0001BC  0900               	iorlw	0
 27212  0001BE  B4D8               	btfsc	status,2,c
 27213  0001C0  D001               	goto	i1u1767_21
 27214  0001C2  D001               	goto	i1u1767_20
 27215  0001C4                     i1u1767_21:
 27216  0001C4  D08A               	goto	i1l13424
 27217  0001C6                     i1u1767_20:
 27218  0001C6                     
 27219                           ;main.c: 223: if ( flags & ECAN_RX_OVERFLOW ) {
 27220  0001C6  A63D               	btfss	_flags,3,c
 27221  0001C8  D001               	goto	i1u1768_21
 27222  0001CA  D001               	goto	i1u1768_20
 27223  0001CC                     i1u1768_21:
 27224  0001CC  D00E               	goto	i1l419
 27225  0001CE                     i1u1768_20:
 27226  0001CE                     
 27227                           ;main.c: 224: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 27228  0001CE  AA3D               	btfss	_flags,5,c
 27229  0001D0  D001               	goto	i1u1769_21
 27230  0001D2  D001               	goto	i1u1769_20
 27231  0001D4                     i1u1769_21:
 27232  0001D4  D082               	goto	i1l13424
 27233  0001D6                     i1u1769_20:
 27234  0001D6                     i1l13396:
 27235  0001D6  0E01               	movlw	1
 27236  0001D8  0101               	movlb	1	; () banked
 27237  0001DA  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 27238  0001DC  0E00               	movlw	0
 27239  0001DE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 27240  0001E0  0E00               	movlw	0
 27241  0001E2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 27242  0001E4  0E00               	movlw	0
 27243  0001E6  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 27244  0001E8  D078               	goto	i1l13424
 27245  0001EA                     i1l419:
 27246                           
 27247                           ;main.c: 226: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 27248                           ;main.c: 227: ( flags & ECAN_RX_XTD_FRAME ) ) {
 27249  0001EA  BC3D               	btfsc	_flags,6,c
 27250  0001EC  D001               	goto	i1u1770_21
 27251  0001EE  D001               	goto	i1u1770_20
 27252  0001F0                     i1u1770_21:
 27253  0001F0  D074               	goto	i1l13424
 27254  0001F2                     i1u1770_20:
 27255  0001F2  AA3D               	btfss	_flags,5,c
 27256  0001F4  D001               	goto	i1u1771_21
 27257  0001F6  D001               	goto	i1u1771_20
 27258  0001F8                     i1u1771_21:
 27259  0001F8  D070               	goto	i1l13424
 27260  0001FA                     i1u1771_20:
 27261  0001FA                     
 27262                           ;main.c: 229: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 27263  0001FA  503C               	movf	_dlc,w,c
 27264  0001FC  6E17               	movwf	??_Interrupt& (0+255),c
 27265  0001FE  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 27266  000200  0E05               	movlw	5
 27267  000202  2617               	addwf	??_Interrupt,f,c
 27268  000204  0E00               	movlw	0
 27269  000206  2218               	addwfc	??_Interrupt+1,f,c
 27270  000208  0101               	movlb	1	; () banked
 27271  00020A  0E01               	movlw	high _canInputFifo
 27272  00020C  6E02               	movwf	?_fifo_getFree+1,c
 27273  00020E  0EC7               	movlw	low _canInputFifo
 27274  000210  6E01               	movwf	?_fifo_getFree,c
 27275  000212  EC30  F013         	call	_fifo_getFree	;wreg free
 27276  000216  5017               	movf	??_Interrupt,w,c
 27277  000218  5C01               	subwf	?_fifo_getFree,w,c
 27278  00021A  5018               	movf	??_Interrupt+1,w,c
 27279  00021C  5802               	subwfb	?_fifo_getFree+1,w,c
 27280  00021E  A0D8               	btfss	status,0,c
 27281  000220  D001               	goto	i1u1772_21
 27282  000222  D001               	goto	i1u1772_20
 27283  000224                     i1u1772_21:
 27284  000224  D7D8               	goto	i1l13396
 27285  000226                     i1u1772_20:
 27286  000226                     
 27287                           ; BSR set to: 1
 27288                           ;main.c: 230: uint8_t fail = 0;
 27289  000226  6A21               	clrf	Interrupt@fail,c
 27290  000228                     
 27291                           ; BSR set to: 1
 27292                           ;main.c: 231: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 27293  000228  0E01               	movlw	high _canInputFifo
 27294  00022A  6E02               	movwf	?_fifo_write+1,c
 27295  00022C  0EC7               	movlw	low _canInputFifo
 27296  00022E  6E01               	movwf	?_fifo_write,c
 27297  000230  0E01               	movlw	high _id
 27298  000232  6E04               	movwf	?_fifo_write+3,c
 27299  000234  0EE7               	movlw	low _id
 27300  000236  6E03               	movwf	?_fifo_write+2,c
 27301  000238  0E04               	movlw	4
 27302  00023A  6E05               	movwf	?_fifo_write+4,c
 27303  00023C  0E00               	movlw	0
 27304  00023E  6E06               	movwf	?_fifo_write+5,c
 27305  000240  0E00               	movlw	0
 27306  000242  6E07               	movwf	?_fifo_write+6,c
 27307  000244  0E00               	movlw	0
 27308  000246  6E08               	movwf	?_fifo_write+7,c
 27309  000248  EC5C  F01A         	call	_fifo_write	;wreg free
 27310  00024C  5001               	movf	?_fifo_write,w,c
 27311  00024E  0A04               	xorlw	4
 27312  000250  1002               	iorwf	?_fifo_write+1,w,c
 27313  000252  B4D8               	btfsc	status,2,c
 27314  000254  D001               	goto	i1u1773_21
 27315  000256  D001               	goto	i1u1773_20
 27316  000258                     i1u1773_21:
 27317  000258  D002               	goto	i1l13408
 27318  00025A                     i1u1773_20:
 27319  00025A                     
 27320                           ; BSR set to: 1
 27321                           ;main.c: 232: fail = 1;
 27322  00025A  0E01               	movlw	1
 27323  00025C  6E21               	movwf	Interrupt@fail,c
 27324  00025E                     i1l13408:
 27325                           
 27326                           ; BSR set to: 1
 27327                           ;main.c: 233: }
 27328                           ;main.c: 234: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 27329  00025E  0E01               	movlw	high _canInputFifo
 27330  000260  6E02               	movwf	?_fifo_write+1,c
 27331  000262  0EC7               	movlw	low _canInputFifo
 27332  000264  6E01               	movwf	?_fifo_write,c
 27333  000266  0E3C               	movlw	low _dlc
 27334  000268  6E03               	movwf	?_fifo_write+2,c
 27335  00026A  0E00               	movlw	high _dlc
 27336  00026C  6E04               	movwf	?_fifo_write+3,c
 27337  00026E  0E0F               	movlw	15
 27338  000270  6E04               	movwf	?_fifo_write+3,c
 27339  000272  0E5F               	movlw	__accesstop+-1
 27340  000274  6403               	cpfsgt	?_fifo_write+2,c
 27341  000276  6A04               	clrf	?_fifo_write+3,c
 27342  000278  0E01               	movlw	1
 27343  00027A  6E05               	movwf	?_fifo_write+4,c
 27344  00027C  0E00               	movlw	0
 27345  00027E  6E06               	movwf	?_fifo_write+5,c
 27346  000280  0E00               	movlw	0
 27347  000282  6E07               	movwf	?_fifo_write+6,c
 27348  000284  0E00               	movlw	0
 27349  000286  6E08               	movwf	?_fifo_write+7,c
 27350  000288  EC5C  F01A         	call	_fifo_write	;wreg free
 27351  00028C  0401               	decf	?_fifo_write,w,c
 27352  00028E  1002               	iorwf	?_fifo_write+1,w,c
 27353  000290  B4D8               	btfsc	status,2,c
 27354  000292  D001               	goto	i1u1774_21
 27355  000294  D001               	goto	i1u1774_20
 27356  000296                     i1u1774_21:
 27357  000296  D002               	goto	i1l13412
 27358  000298                     i1u1774_20:
 27359  000298                     
 27360                           ; BSR set to: 1
 27361                           ;main.c: 235: fail = 1;
 27362  000298  0E01               	movlw	1
 27363  00029A  6E21               	movwf	Interrupt@fail,c
 27364  00029C                     i1l13412:
 27365                           
 27366                           ; BSR set to: 1
 27367                           ;main.c: 236: }
 27368                           ;main.c: 237: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 27369  00029C  0E01               	movlw	high _canInputFifo
 27370  00029E  6E02               	movwf	?_fifo_write+1,c
 27371  0002A0  0EC7               	movlw	low _canInputFifo
 27372  0002A2  6E01               	movwf	?_fifo_write,c
 27373  0002A4  0E01               	movlw	high _data
 27374  0002A6  6E04               	movwf	?_fifo_write+3,c
 27375  0002A8  0ECF               	movlw	low _data
 27376  0002AA  6E03               	movwf	?_fifo_write+2,c
 27377  0002AC  503C               	movf	_dlc,w,c
 27378  0002AE  6E05               	movwf	?_fifo_write+4,c
 27379  0002B0  6A06               	clrf	?_fifo_write+5,c
 27380  0002B2  6A07               	clrf	?_fifo_write+6,c
 27381  0002B4  6A08               	clrf	?_fifo_write+7,c
 27382  0002B6  EC5C  F01A         	call	_fifo_write	;wreg free
 27383  0002BA  503C               	movf	_dlc,w,c
 27384  0002BC  1801               	xorwf	?_fifo_write,w,c
 27385  0002BE  1002               	iorwf	?_fifo_write+1,w,c
 27386  0002C0  B4D8               	btfsc	status,2,c
 27387  0002C2  D001               	goto	i1u1775_21
 27388  0002C4  D001               	goto	i1u1775_20
 27389  0002C6                     i1u1775_21:
 27390  0002C6  D002               	goto	i1l13416
 27391  0002C8                     i1u1775_20:
 27392  0002C8                     
 27393                           ; BSR set to: 1
 27394                           ;main.c: 238: fail = 1;
 27395  0002C8  0E01               	movlw	1
 27396  0002CA  6E21               	movwf	Interrupt@fail,c
 27397  0002CC                     i1l13416:
 27398                           
 27399                           ; BSR set to: 1
 27400                           ;main.c: 239: }
 27401                           ;main.c: 241: fifo_canrxcount++;
 27402  0002CC  2A34               	incf	_fifo_canrxcount,f,c	;volatile
 27403  0002CE                     
 27404                           ; BSR set to: 1
 27405                           ;main.c: 243: if ( fail ) {
 27406  0002CE  5021               	movf	Interrupt@fail,w,c
 27407  0002D0  B4D8               	btfsc	status,2,c
 27408  0002D2  D001               	goto	i1u1776_21
 27409  0002D4  D001               	goto	i1u1776_20
 27410  0002D6                     i1u1776_21:
 27411  0002D6  D001               	goto	i1l13424
 27412  0002D8                     i1u1776_20:
 27413  0002D8  D77E               	goto	i1l13396
 27414  0002DA                     i1l13424:
 27415                           
 27416                           ;main.c: 250: }
 27417                           ;main.c: 252: }
 27418                           ;main.c: 254: }
 27419                           ;main.c: 257: RXBnIF = 0;
 27420  0002DA  92A4               	bcf	4004,1,c	;volatile
 27421  0002DC                     i1l429:
 27422  0002DC  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 27423  0002E0  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 27424  0002E4  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 27425  0002E8  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 27426  0002EC  C01B  FFE0         	movff	??_Interrupt+4,bsr
 27427  0002F0  C01A  FFE8         	movff	??_Interrupt+3,wreg
 27428  0002F4  C019  FFD8         	movff	??_Interrupt+2,status
 27429  0002F8  0010               	retfie	
 27430  0002FA                     __end_of_Interrupt:
 27431                           	opt stack 0
 27432                           tblptru	equ	0xFF8
 27433                           tblptrh	equ	0xFF7
 27434                           tblptrl	equ	0xFF6
 27435                           tablat	equ	0xFF5
 27436                           prodh	equ	0xFF4
 27437                           prodl	equ	0xFF3
 27438                           intcon	equ	0xFF2
 27439                           indf0	equ	0xFEF
 27440                           postinc0	equ	0xFEE
 27441                           fsr0h	equ	0xFEA
 27442                           fsr0l	equ	0xFE9
 27443                           wreg	equ	0xFE8
 27444                           indf1	equ	0xFE7
 27445                           postinc1	equ	0xFE6
 27446                           postdec1	equ	0xFE5
 27447                           fsr1h	equ	0xFE2
 27448                           fsr1l	equ	0xFE1
 27449                           bsr	equ	0xFE0
 27450                           indf2	equ	0xFDF
 27451                           postinc2	equ	0xFDE
 27452                           postdec2	equ	0xFDD
 27453                           plusw2	equ	0xFDB
 27454                           fsr2h	equ	0xFDA
 27455                           fsr2l	equ	0xFD9
 27456                           status	equ	0xFD8
 27457                           
 27458 ;; *************** function i1_WriteTimer0 *****************
 27459 ;; Defined at:
 27460 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27461 ;; Parameters:    Size  Location     Type
 27462 ;;  timer0          2    0[COMRAM] unsigned int 
 27463 ;; Auto vars:     Size  Location     Type
 27464 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27465 ;; Return value:  Size  Location     Type
 27466 ;;		None               void
 27467 ;; Registers used:
 27468 ;;		None
 27469 ;; Tracked objects:
 27470 ;;		On entry : 0/0
 27471 ;;		On exit  : 0/0
 27472 ;;		Unchanged: 0/0
 27473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27474 ;;      Params:         2       0       0       0       0       0       0
 27475 ;;      Locals:         2       0       0       0       0       0       0
 27476 ;;      Temps:          0       0       0       0       0       0       0
 27477 ;;      Totals:         4       0       0       0       0       0       0
 27478 ;;Total ram usage:        4 bytes
 27479 ;; Hardware stack levels used:    1
 27480 ;; This function calls:
 27481 ;;		Nothing
 27482 ;; This function is called by:
 27483 ;;		_Interrupt
 27484 ;; This function uses a non-reentrant model
 27485 ;;
 27486                           
 27487                           	psect	text83
 27488  0015B0                     __ptext83:
 27489                           	opt stack 0
 27490  0015B0                     i1_WriteTimer0:
 27491                           	opt stack 20
 27492                           
 27493                           ;incstack = 0
 27494                           ;incstack = 0
 27495  0015B0  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27496  0015B4  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27497  0015B8  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27498  0015BC  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27499  0015C0  0012               	return	
 27500  0015C2                     __end_ofi1_WriteTimer0:
 27501                           	opt stack 0
 27502                           tblptru	equ	0xFF8
 27503                           tblptrh	equ	0xFF7
 27504                           tblptrl	equ	0xFF6
 27505                           tablat	equ	0xFF5
 27506                           prodh	equ	0xFF4
 27507                           prodl	equ	0xFF3
 27508                           intcon	equ	0xFF2
 27509                           indf0	equ	0xFEF
 27510                           postinc0	equ	0xFEE
 27511                           fsr0h	equ	0xFEA
 27512                           fsr0l	equ	0xFE9
 27513                           wreg	equ	0xFE8
 27514                           indf1	equ	0xFE7
 27515                           postinc1	equ	0xFE6
 27516                           postdec1	equ	0xFE5
 27517                           fsr1h	equ	0xFE2
 27518                           fsr1l	equ	0xFE1
 27519                           bsr	equ	0xFE0
 27520                           indf2	equ	0xFDF
 27521                           postinc2	equ	0xFDE
 27522                           postdec2	equ	0xFDD
 27523                           plusw2	equ	0xFDB
 27524                           fsr2h	equ	0xFDA
 27525                           fsr2l	equ	0xFD9
 27526                           status	equ	0xFD8
 27527                           
 27528 ;; *************** function _fifo_getFree *****************
 27529 ;; Defined at:
 27530 ;;		line 97 in file "fifo.c"
 27531 ;; Parameters:    Size  Location     Type
 27532 ;;  f               2    0[COMRAM] PTR struct .
 27533 ;;		 -> canInputFifo(8), 
 27534 ;; Auto vars:     Size  Location     Type
 27535 ;;		None
 27536 ;; Return value:  Size  Location     Type
 27537 ;;                  2    0[COMRAM] unsigned short 
 27538 ;; Registers used:
 27539 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27540 ;; Tracked objects:
 27541 ;;		On entry : F/1
 27542 ;;		On exit  : F/1
 27543 ;;		Unchanged: F/0
 27544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27545 ;;      Params:         2       0       0       0       0       0       0
 27546 ;;      Locals:         0       0       0       0       0       0       0
 27547 ;;      Temps:          8       0       0       0       0       0       0
 27548 ;;      Totals:        10       0       0       0       0       0       0
 27549 ;;Total ram usage:       10 bytes
 27550 ;; Hardware stack levels used:    1
 27551 ;; This function calls:
 27552 ;;		Nothing
 27553 ;; This function is called by:
 27554 ;;		_Interrupt
 27555 ;; This function uses a non-reentrant model
 27556 ;;
 27557                           
 27558                           	psect	text84
 27559  002660                     __ptext84:
 27560                           	opt stack 0
 27561  002660                     _fifo_getFree:
 27562                           	opt stack 20
 27563                           
 27564                           ; BSR set to: 1
 27565                           ;fifo.c: 98: if (f->head < f->tail) {
 27566                           
 27567                           ;incstack = 0
 27568                           ;incstack = 0
 27569  002660  EE20 F004          	lfsr	2,4
 27570  002664  5001               	movf	fifo_getFree@f,w,c
 27571  002666  26D9               	addwf	fsr2l,f,c
 27572  002668  5002               	movf	fifo_getFree@f+1,w,c
 27573  00266A  22DA               	addwfc	fsr2h,f,c
 27574  00266C  EE10 F002          	lfsr	1,2
 27575  002670  5001               	movf	fifo_getFree@f,w,c
 27576  002672  26E1               	addwf	fsr1l,f,c
 27577  002674  5002               	movf	fifo_getFree@f+1,w,c
 27578  002676  22E2               	addwfc	fsr1h,f,c
 27579  002678  52E6               	movf	postinc1,f,c
 27580  00267A  52DE               	movf	postinc2,f,c
 27581  00267C  50DD               	movf	postdec2,w,c
 27582  00267E  5CE5               	subwf	postdec1,w,c
 27583  002680  E102               	bnz	i1u637_25
 27584  002682  50DF               	movf	indf2,w,c
 27585  002684  5CE7               	subwf	indf1,w,c
 27586  002686                     i1u637_25:
 27587  002686  E213               	bc	i1l6482
 27588                           
 27589                           ; BSR set to: 1
 27590                           ;fifo.c: 99: return (f->tail - f->head);
 27591  002688  EE20 F002          	lfsr	2,2
 27592  00268C  D834               	call	PL74	;call to abstracted procedure
 27593  00268E  EE20 F004          	lfsr	2,4
 27594  002692  5001               	movf	fifo_getFree@f,w,c
 27595  002694  26D9               	addwf	fsr2l,f,c
 27596  002696  5002               	movf	fifo_getFree@f+1,w,c
 27597  002698  22DA               	addwfc	fsr2h,f,c
 27598  00269A  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27599  00269E  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27600  0026A2  5003               	movf	??_fifo_getFree,w,c
 27601  0026A4  5C05               	subwf	??_fifo_getFree+2,w,c
 27602  0026A6  6E01               	movwf	?_fifo_getFree,c
 27603  0026A8  5004               	movf	??_fifo_getFree+1,w,c
 27604  0026AA  5806               	subwfb	??_fifo_getFree+3,w,c
 27605  0026AC  D022               	goto	L45
 27606  0026AE                     i1l6482:
 27607                           
 27608                           ; BSR set to: 1
 27609                           ;fifo.c: 101: else {
 27610                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 27611  0026AE  EE20 F004          	lfsr	2,4
 27612  0026B2  D821               	call	PL74	;call to abstracted procedure
 27613  0026B4  EE20 F002          	lfsr	2,2
 27614  0026B8  5001               	movf	fifo_getFree@f,w,c
 27615  0026BA  26D9               	addwf	fsr2l,f,c
 27616  0026BC  5002               	movf	fifo_getFree@f+1,w,c
 27617  0026BE  22DA               	addwfc	fsr2h,f,c
 27618  0026C0  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27619  0026C4  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27620  0026C8  EE20 F006          	lfsr	2,6
 27621  0026CC  5001               	movf	fifo_getFree@f,w,c
 27622  0026CE  26D9               	addwf	fsr2l,f,c
 27623  0026D0  5002               	movf	fifo_getFree@f+1,w,c
 27624  0026D2  22DA               	addwfc	fsr2h,f,c
 27625  0026D4  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27626  0026D8  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27627  0026DC  5005               	movf	??_fifo_getFree+2,w,c
 27628  0026DE  5C07               	subwf	??_fifo_getFree+4,w,c
 27629  0026E0  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27630  0026E2  5006               	movf	??_fifo_getFree+3,w,c
 27631  0026E4  5808               	subwfb	??_fifo_getFree+5,w,c
 27632  0026E6  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27633  0026E8  5003               	movf	??_fifo_getFree,w,c
 27634  0026EA  2409               	addwf	??_fifo_getFree+6,w,c
 27635  0026EC  6E01               	movwf	?_fifo_getFree,c
 27636  0026EE  5004               	movf	??_fifo_getFree+1,w,c
 27637  0026F0  200A               	addwfc	??_fifo_getFree+7,w,c
 27638  0026F2                     L45:
 27639  0026F2  6E02               	movwf	?_fifo_getFree+1,c
 27640                           
 27641                           ; BSR set to: 1
 27642  0026F4  0012               	return	
 27643  0026F6                     __end_of_fifo_getFree:
 27644                           	opt stack 0
 27645  0026F6                     PL74:
 27646                           	opt stack 20
 27647  0026F6  5001               	movf	fifo_getFree@f,w,c
 27648  0026F8  26D9               	addwf	fsr2l,f,c
 27649  0026FA  5002               	movf	fifo_getFree@f+1,w,c
 27650  0026FC  22DA               	addwfc	fsr2h,f,c
 27651  0026FE  CFDE F003          	movff	postinc2,??_fifo_getFree
 27652  002702  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27653  002706  0012               	return	
 27654  002708                     __end_ofPL74:
 27655                           	opt stack 0
 27656                           tblptru	equ	0xFF8
 27657                           tblptrh	equ	0xFF7
 27658                           tblptrl	equ	0xFF6
 27659                           tablat	equ	0xFF5
 27660                           prodh	equ	0xFF4
 27661                           prodl	equ	0xFF3
 27662                           intcon	equ	0xFF2
 27663                           indf0	equ	0xFEF
 27664                           postinc0	equ	0xFEE
 27665                           fsr0h	equ	0xFEA
 27666                           fsr0l	equ	0xFE9
 27667                           wreg	equ	0xFE8
 27668                           indf1	equ	0xFE7
 27669                           postinc1	equ	0xFE6
 27670                           postdec1	equ	0xFE5
 27671                           fsr1h	equ	0xFE2
 27672                           fsr1l	equ	0xFE1
 27673                           bsr	equ	0xFE0
 27674                           indf2	equ	0xFDF
 27675                           postinc2	equ	0xFDE
 27676                           postdec2	equ	0xFDD
 27677                           plusw2	equ	0xFDB
 27678                           fsr2h	equ	0xFDA
 27679                           fsr2l	equ	0xFD9
 27680                           status	equ	0xFD8
 27681                           
 27682 ;; *************** function _ECANReceiveMessage *****************
 27683 ;; Defined at:
 27684 ;;		line 803 in file "ECAN.c"
 27685 ;; Parameters:    Size  Location     Type
 27686 ;;  id              2    9[COMRAM] PTR unsigned long 
 27687 ;;		 -> id(4), 
 27688 ;;  data            2   11[COMRAM] PTR unsigned char 
 27689 ;;		 -> data(8), 
 27690 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 27691 ;;		 -> dlc(1), 
 27692 ;;  msgFlags        1   14[COMRAM] PTR enum E16333
 27693 ;;		 -> flags(1), 
 27694 ;; Auto vars:     Size  Location     Type
 27695 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 27696 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27697 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27698 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 27699 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27700 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27701 ;;  temp            1   19[COMRAM] struct .
 27702 ;;  mode            1   18[COMRAM] unsigned char 
 27703 ;;  i               1   17[COMRAM] unsigned char 
 27704 ;; Return value:  Size  Location     Type
 27705 ;;                  1    wreg      enum E15660
 27706 ;; Registers used:
 27707 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27708 ;; Tracked objects:
 27709 ;;		On entry : F/1
 27710 ;;		On exit  : 0/0
 27711 ;;		Unchanged: 0/0
 27712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27713 ;;      Params:         6       0       0       0       0       0       0
 27714 ;;      Locals:         7       0       0       0       0       0       0
 27715 ;;      Temps:          0       0       0       0       0       0       0
 27716 ;;      Totals:        13       0       0       0       0       0       0
 27717 ;;Total ram usage:       13 bytes
 27718 ;; Hardware stack levels used:    1
 27719 ;; Hardware stack levels required when called:    1
 27720 ;; This function calls:
 27721 ;;		__ECANPointBuffer
 27722 ;;		__RegsToCANID
 27723 ;; This function is called by:
 27724 ;;		_Interrupt
 27725 ;; This function uses a non-reentrant model
 27726 ;;
 27727                           
 27728                           	psect	text85
 27729  00455C                     __ptext85:
 27730                           	opt stack 0
 27731  00455C                     _ECANReceiveMessage:
 27732                           	opt stack 19
 27733                           
 27734                           ; BSR set to: 1
 27735                           ;ECAN.c: 805: BYTE mode;
 27736                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27737                           ;ECAN.c: 809: char i;
 27738                           ;ECAN.c: 810: BYTE_VAL temp;
 27739                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27740                           
 27741                           ; BSR set to: 1
 27742                           ;incstack = 0
 27743                           ;incstack = 0
 27744  00455C  6A2B               	clrf	__ECANRxFilterHitInfo,c
 27745                           
 27746                           ; BSR set to: 1
 27747                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27748  00455E  5077               	movf	3959,w,c	;volatile
 27749  004560  0BC0               	andlw	192
 27750  004562  6E13               	movwf	ECANReceiveMessage@mode,c
 27751                           
 27752                           ; BSR set to: 1
 27753                           ;ECAN.c: 816: if ( mode == 0x00 )
 27754  004564  6613               	tstfsz	ECANReceiveMessage@mode,c
 27755  004566  D032               	goto	i1l9840
 27756                           
 27757                           ; BSR set to: 1
 27758                           ;ECAN.c: 822: {
 27759                           ;ECAN.c: 824: if ( RXB0FUL )
 27760  004568  AE60               	btfss	3936,7,c	;volatile
 27761  00456A  D012               	goto	i1l1472
 27762                           
 27763                           ; BSR set to: 1
 27764                           ;ECAN.c: 825: {
 27765                           ;ECAN.c: 827: RXB0IF = 0;
 27766  00456C  90A4               	bcf	4004,0,c	;volatile
 27767                           
 27768                           ;ECAN.c: 830: if ( RXB0OVFL )
 27769  00456E  AE74               	btfss	3956,7,c	;volatile
 27770  004570  D006               	goto	i1l9816
 27771                           
 27772                           ; BSR set to: 1
 27773                           ;ECAN.c: 831: {
 27774                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27775  004572  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27776  004574  6ED9               	movwf	fsr2l,c
 27777  004576  6ADA               	clrf	fsr2h,c
 27778  004578  0E00               	movlw	0
 27779  00457A  86DB               	bsf	plusw2,3,c
 27780                           
 27781                           ; BSR set to: 1
 27782                           ;ECAN.c: 833: RXB0OVFL = 0;
 27783  00457C  9E74               	bcf	3956,7,c	;volatile
 27784  00457E                     i1l9816:
 27785                           
 27786                           ; BSR set to: 1
 27787                           ;ECAN.c: 834: }
 27788                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27789  00457E  A060               	btfss	3936,0,c	;volatile
 27790  004580  D002               	bra	i1u1171_25
 27791  004582  802B               	bsf	__ECANRxFilterHitInfo,0,c
 27792  004584  D001               	bra	i1u1171_27
 27793  004586                     i1u1171_25:
 27794  004586  902B               	bcf	__ECANRxFilterHitInfo,0,c
 27795  004588                     i1u1171_27:
 27796                           
 27797                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27798  004588  0E0F               	movlw	15	;volatile
 27799  00458A  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27800  00458C  0E60               	movlw	96	;volatile
 27801  00458E  D01A               	goto	L46
 27802  004590                     i1l1472:
 27803                           
 27804                           ; BSR set to: 1
 27805                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27806  004590  010F               	movlb	15	; () banked
 27807  004592  AF50               	btfss	80,7,b	;volatile
 27808  004594  D019               	goto	i1l9834
 27809                           
 27810                           ; BSR set to: 15
 27811                           ;ECAN.c: 842: {
 27812                           ;ECAN.c: 844: RXB1IF = 0;
 27813  004596  92A4               	bcf	4004,1,c	;volatile
 27814                           
 27815                           ;ECAN.c: 847: if ( RXB1OVFL )
 27816  004598  AC74               	btfss	3956,6,c	;volatile
 27817  00459A  D006               	goto	i1l9826
 27818                           
 27819                           ; BSR set to: 15
 27820                           ;ECAN.c: 848: {
 27821                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27822  00459C  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27823  00459E  6ED9               	movwf	fsr2l,c
 27824  0045A0  6ADA               	clrf	fsr2h,c
 27825  0045A2  0E00               	movlw	0
 27826  0045A4  86DB               	bsf	plusw2,3,c
 27827                           
 27828                           ; BSR set to: 15
 27829                           ;ECAN.c: 850: RXB1OVFL = 0;
 27830  0045A6  9C74               	bcf	3956,6,c	;volatile
 27831  0045A8                     i1l9826:
 27832                           
 27833                           ; BSR set to: 15
 27834                           ;ECAN.c: 851: }
 27835                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27836  0045A8  5150               	movf	80,w,b	;volatile
 27837  0045AA  0B07               	andlw	7
 27838  0045AC  6E2B               	movwf	__ECANRxFilterHitInfo,c
 27839                           
 27840                           ; BSR set to: 15
 27841                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27842  0045AE  0E02               	movlw	2
 27843  0045B0  602B               	cpfslt	__ECANRxFilterHitInfo,c
 27844  0045B2  D005               	goto	i1l9832
 27845                           
 27846                           ; BSR set to: 15
 27847                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27848  0045B4  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27849  0045B6  6ED9               	movwf	fsr2l,c
 27850  0045B8  6ADA               	clrf	fsr2h,c
 27851  0045BA  0E00               	movlw	0
 27852  0045BC  8EDB               	bsf	plusw2,7,c
 27853  0045BE                     i1l9832:
 27854                           
 27855                           ; BSR set to: 15
 27856                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27857  0045BE  0E0F               	movlw	15	;volatile
 27858  0045C0  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27859  0045C2  0E50               	movlw	80	;volatile
 27860  0045C4                     L46:
 27861  0045C4  6E15               	movwf	ECANReceiveMessage@ptr,c
 27862                           
 27863                           ;ECAN.c: 860: }
 27864  0045C6  D065               	goto	i1l9894
 27865  0045C8                     i1l9834:
 27866                           
 27867                           ;ECAN.c: 861: else
 27868                           ;ECAN.c: 862: return FALSE;
 27869  0045C8  0E00               	movlw	0
 27870  0045CA  D0C6               	goto	i1l1479
 27871  0045CC                     i1l9840:
 27872                           
 27873                           ; BSR set to: 1
 27874                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27875  0045CC  5013               	movf	ECANReceiveMessage@mode,w,c
 27876  0045CE  0A40               	xorlw	64
 27877  0045D0  E146               	bnz	i1l1482
 27878                           
 27879                           ; BSR set to: 1
 27880                           ;ECAN.c: 875: {
 27881                           ;ECAN.c: 876: if ( RXB0FUL )
 27882  0045D2  AE60               	btfss	3936,7,c	;volatile
 27883  0045D4  D004               	goto	i1l1483
 27884                           
 27885                           ; BSR set to: 1
 27886                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27887  0045D6  0E0F               	movlw	15	;volatile
 27888  0045D8  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27889  0045DA  0E60               	movlw	96	;volatile
 27890  0045DC  D03E               	goto	L53
 27891  0045DE                     i1l1483:
 27892                           
 27893                           ; BSR set to: 1
 27894                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27895  0045DE  010F               	movlb	15	; () banked
 27896  0045E0  AF50               	btfss	80,7,b	;volatile
 27897  0045E2  D004               	goto	i1l1485
 27898                           
 27899                           ; BSR set to: 15
 27900                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27901  0045E4  0E0F               	movlw	15	;volatile
 27902  0045E6  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27903  0045E8  0E50               	movlw	80	;volatile
 27904  0045EA  D037               	goto	L53
 27905  0045EC                     i1l1485:
 27906                           
 27907                           ; BSR set to: 15
 27908                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27909  0045EC  010D               	movlb	13
 27910  0045EE  B5F8               	btfsc	248,2,b	;volatile
 27911  0045F0  D007               	goto	i1l1487
 27912  0045F2  010E               	movlb	14
 27913  0045F4  AF20               	btfss	32,7,b	;volatile
 27914  0045F6  D004               	goto	i1l1487
 27915                           
 27916                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27917  0045F8  0E0E               	movlw	14	;volatile
 27918  0045FA  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27919  0045FC  0E20               	movlw	32	;volatile
 27920  0045FE  D02D               	goto	L53
 27921  004600                     i1l1487:
 27922                           
 27923                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27924  004600  010D               	movlb	13
 27925  004602  B7F8               	btfsc	248,3,b	;volatile
 27926  004604  D007               	goto	i1l1489
 27927  004606  010E               	movlb	14
 27928  004608  AF30               	btfss	48,7,b	;volatile
 27929  00460A  D004               	goto	i1l1489
 27930                           
 27931                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27932  00460C  0E0E               	movlw	14	;volatile
 27933  00460E  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27934  004610  0E30               	movlw	48	;volatile
 27935  004612  D023               	goto	L53
 27936  004614                     i1l1489:
 27937                           
 27938                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27939  004614  010D               	movlb	13
 27940  004616  B9F8               	btfsc	248,4,b	;volatile
 27941  004618  D007               	goto	i1l1491
 27942  00461A  010E               	movlb	14
 27943  00461C  AF40               	btfss	64,7,b	;volatile
 27944  00461E  D004               	goto	i1l1491
 27945                           
 27946                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27947  004620  0E0E               	movlw	14	;volatile
 27948  004622  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27949  004624  0E40               	movlw	64	;volatile
 27950  004626  D019               	goto	L53
 27951  004628                     i1l1491:
 27952                           
 27953                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27954  004628  010D               	movlb	13
 27955  00462A  BBF8               	btfsc	248,5,b	;volatile
 27956  00462C  D005               	goto	i1l1493
 27957  00462E  010E               	movlb	14
 27958  004630  AF50               	btfss	80,7,b	;volatile
 27959  004632  D002               	goto	i1l1493
 27960                           
 27961                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27962  004634  0E0E               	movlw	14	;volatile
 27963  004636  D7D7               	goto	L54
 27964  004638                     i1l1493:
 27965                           
 27966                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27967  004638  010D               	movlb	13
 27968  00463A  BDF8               	btfsc	248,6,b	;volatile
 27969  00463C  D005               	goto	i1l1495
 27970  00463E  010E               	movlb	14
 27971  004640  AF60               	btfss	96,7,b	;volatile
 27972  004642  D002               	goto	i1l1495
 27973                           
 27974                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27975  004644  0E0E               	movlw	14	;volatile
 27976  004646  D7C8               	goto	L55
 27977  004648                     i1l1495:
 27978                           
 27979                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27980  004648  010D               	movlb	13
 27981  00464A  BFF8               	btfsc	248,7,b	;volatile
 27982  00464C  D7BD               	goto	i1l9834
 27983  00464E  010E               	movlb	14
 27984  004650  AF70               	btfss	112,7,b	;volatile
 27985  004652  D7BA               	goto	i1l9834
 27986                           
 27987                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27988  004654  0E0E               	movlw	14	;volatile
 27989  004656  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27990  004658  0E70               	movlw	112	;volatile
 27991  00465A                     L53:
 27992  00465A  6E15               	movwf	ECANReceiveMessage@ptr,c
 27993  00465C  D00A               	goto	i1l9884
 27994  00465E                     i1l1482:
 27995                           
 27996                           ; BSR set to: 1
 27997                           ;ECAN.c: 910: else
 27998                           ;ECAN.c: 915: {
 27999                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 28000  00465E  AE74               	btfss	3956,7,c	;volatile
 28001  004660  D7B3               	goto	i1l9834
 28002                           
 28003                           ; BSR set to: 1
 28004                           ;ECAN.c: 919: {
 28005                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 28006  004662  506F               	movf	3951,w,c	;volatile
 28007  004664  0B07               	andlw	7
 28008  004666  EC5C  F00F         	call	__ECANPointBuffer
 28009  00466A  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 28010  00466E  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 28011  004672                     i1l9884:
 28012                           
 28013                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 28014  004672  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 28015  004676  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 28016  00467A  50DF               	movf	indf2,w,c
 28017  00467C  0B1F               	andlw	31
 28018  00467E  6E2B               	movwf	__ECANRxFilterHitInfo,c
 28019                           
 28020                           ;ECAN.c: 934: RXB1IF = 0;
 28021  004680  92A4               	bcf	4004,1,c	;volatile
 28022                           
 28023                           ;ECAN.c: 936: if ( RXB1OVFL )
 28024  004682  AC74               	btfss	3956,6,c	;volatile
 28025  004684  D006               	goto	i1l9894
 28026                           
 28027                           ;ECAN.c: 937: {
 28028                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 28029  004686  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28030  004688  6ED9               	movwf	fsr2l,c
 28031  00468A  6ADA               	clrf	fsr2h,c
 28032  00468C  0E00               	movlw	0
 28033  00468E  86DB               	bsf	plusw2,3,c
 28034                           
 28035                           ;ECAN.c: 939: RXB1OVFL = 0;
 28036  004690  9C74               	bcf	3956,6,c	;volatile
 28037  004692                     i1l9894:
 28038                           
 28039                           ;ECAN.c: 944: savedPtr = ptr;
 28040  004692  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 28041  004696  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 28042                           
 28043                           ;ECAN.c: 945: *msgFlags = 0;
 28044  00469A  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28045  00469C  6ED9               	movwf	fsr2l,c
 28046  00469E  6ADA               	clrf	fsr2h,c
 28047  0046A0  6ADF               	clrf	indf2,c
 28048                           
 28049                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 28050  0046A2  EE20 F005          	lfsr	2,5
 28051  0046A6  D859               	call	PL94	;call to abstracted procedure
 28052                           
 28053                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 28054  0046A8  500E               	movf	ECANReceiveMessage@dataLen,w,c
 28055  0046AA  6ED9               	movwf	fsr2l,c
 28056  0046AC  6ADA               	clrf	fsr2h,c
 28057  0046AE  5014               	movf	ECANReceiveMessage@temp,w,c
 28058  0046B0  0B0F               	andlw	15
 28059  0046B2  6EDF               	movwf	indf2,c
 28060                           
 28061                           ;ECAN.c: 952: if ( temp.bits.b6 )
 28062  0046B4  AC14               	btfss	ECANReceiveMessage@temp,6,c
 28063  0046B6  D005               	goto	i1l1503
 28064                           
 28065                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 28066  0046B8  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28067  0046BA  6ED9               	movwf	fsr2l,c
 28068  0046BC  6ADA               	clrf	fsr2h,c
 28069  0046BE  0E00               	movlw	0
 28070  0046C0  8CDB               	bsf	plusw2,6,c
 28071  0046C2                     i1l1503:
 28072                           
 28073                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 28074  0046C2  EE20 F002          	lfsr	2,2
 28075  0046C6  D849               	call	PL94	;call to abstracted procedure
 28076                           
 28077                           ;ECAN.c: 957: if ( temp.bits.b3 )
 28078  0046C8  A614               	btfss	ECANReceiveMessage@temp,3,c
 28079  0046CA  D008               	goto	i1l1504
 28080                           
 28081                           ;ECAN.c: 958: {
 28082                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 28083  0046CC  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28084  0046CE  6ED9               	movwf	fsr2l,c
 28085  0046D0  6ADA               	clrf	fsr2h,c
 28086  0046D2  0E00               	movlw	0
 28087  0046D4  8ADB               	bsf	plusw2,5,c
 28088                           
 28089                           ;ECAN.c: 960: temp.Val = 1;
 28090  0046D6  0E01               	movlw	1
 28091  0046D8  6E14               	movwf	ECANReceiveMessage@temp,c
 28092                           
 28093                           ;ECAN.c: 961: }
 28094  0046DA  D001               	goto	i1l9912
 28095  0046DC                     i1l1504:
 28096                           
 28097                           ;ECAN.c: 962: else
 28098                           ;ECAN.c: 963: temp.Val = 0;
 28099  0046DC  6A14               	clrf	ECANReceiveMessage@temp,c
 28100  0046DE                     i1l9912:
 28101                           
 28102                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 28103  0046DE  2815               	incf	ECANReceiveMessage@ptr,w,c
 28104  0046E0  6E01               	movwf	?__RegsToCANID,c
 28105  0046E2  0E00               	movlw	0
 28106  0046E4  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 28107  0046E6  6E02               	movwf	?__RegsToCANID+1,c
 28108  0046E8  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 28109  0046EC  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 28110  0046F0  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 28111  0046F4  ECF2  F01A         	call	__RegsToCANID	;wreg free
 28112                           
 28113                           ;ECAN.c: 968: ptr += 6;
 28114  0046F8  0E06               	movlw	6
 28115  0046FA  2615               	addwf	ECANReceiveMessage@ptr,f,c
 28116  0046FC  0E00               	movlw	0
 28117  0046FE  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 28118                           
 28119                           ;ECAN.c: 969: temp.Val = *dataLen;
 28120  004700  500E               	movf	ECANReceiveMessage@dataLen,w,c
 28121  004702  6ED9               	movwf	fsr2l,c
 28122  004704  6ADA               	clrf	fsr2h,c
 28123  004706  50DF               	movf	indf2,w,c
 28124  004708  6E14               	movwf	ECANReceiveMessage@temp,c
 28125                           
 28126                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 28127  00470A  6A12               	clrf	ECANReceiveMessage@i,c
 28128  00470C  D00F               	goto	i1l9928
 28129  00470E                     i1l9920:
 28130                           
 28131                           ;ECAN.c: 971: *data++ = *ptr++;
 28132  00470E  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 28133  004712  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 28134  004716  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 28135  00471A  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 28136  00471E  CFDF FFE7          	movff	indf2,indf1
 28137  004722  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 28138  004724  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 28139  004726  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 28140  004728  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 28141  00472A  2A12               	incf	ECANReceiveMessage@i,f,c
 28142  00472C                     i1l9928:
 28143  00472C  5014               	movf	ECANReceiveMessage@temp,w,c
 28144  00472E  5C12               	subwf	ECANReceiveMessage@i,w,c
 28145  004730  E3EE               	bnc	i1l9920
 28146                           
 28147                           ;ECAN.c: 974: if ( IRXIF )
 28148  004732  AEA4               	btfss	4004,7,c	;volatile
 28149  004734  D006               	goto	i1l9934
 28150                           
 28151                           ;ECAN.c: 975: {
 28152                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 28153  004736  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 28154  004738  6ED9               	movwf	fsr2l,c
 28155  00473A  6ADA               	clrf	fsr2h,c
 28156  00473C  0E00               	movlw	0
 28157  00473E  88DB               	bsf	plusw2,4,c
 28158                           
 28159                           ;ECAN.c: 977: IRXIF = 0;
 28160  004740  9EA4               	bcf	4004,7,c	;volatile
 28161  004742                     i1l9934:
 28162                           
 28163                           ;ECAN.c: 978: }
 28164                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 28165  004742  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 28166  004746  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 28167  00474A  0E7F               	movlw	127
 28168  00474C  16DF               	andwf	indf2,f,c
 28169                           
 28170                           ;ECAN.c: 985: if ( mode == 0x80 )
 28171  00474E  5013               	movf	ECANReceiveMessage@mode,w,c
 28172  004750  0A80               	xorlw	128
 28173  004752  B4D8               	btfsc	status,2,c
 28174                           
 28175                           ;ECAN.c: 986: FIFOEMPTY = 0;
 28176  004754  9E74               	bcf	3956,7,c	;volatile
 28177                           
 28178                           ;ECAN.c: 992: return TRUE;
 28179  004756  0E01               	movlw	1
 28180  004758                     i1l1479:
 28181  004758  0012               	return	
 28182  00475A                     __end_of_ECANReceiveMessage:
 28183                           	opt stack 0
 28184  00475A                     PL94:
 28185                           	opt stack 19
 28186  00475A  5015               	movf	ECANReceiveMessage@ptr,w,c
 28187  00475C  26D9               	addwf	fsr2l,f,c
 28188  00475E  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 28189  004760  22DA               	addwfc	fsr2h,f,c
 28190  004762  50DF               	movf	indf2,w,c
 28191  004764  6E14               	movwf	ECANReceiveMessage@temp,c
 28192  004766  0012               	return	
 28193  004768                     __end_ofPL94:
 28194                           	opt stack 0
 28195                           tblptru	equ	0xFF8
 28196                           tblptrh	equ	0xFF7
 28197                           tblptrl	equ	0xFF6
 28198                           tablat	equ	0xFF5
 28199                           prodh	equ	0xFF4
 28200                           prodl	equ	0xFF3
 28201                           intcon	equ	0xFF2
 28202                           indf0	equ	0xFEF
 28203                           postinc0	equ	0xFEE
 28204                           fsr0h	equ	0xFEA
 28205                           fsr0l	equ	0xFE9
 28206                           wreg	equ	0xFE8
 28207                           indf1	equ	0xFE7
 28208                           postinc1	equ	0xFE6
 28209                           postdec1	equ	0xFE5
 28210                           fsr1h	equ	0xFE2
 28211                           fsr1l	equ	0xFE1
 28212                           bsr	equ	0xFE0
 28213                           indf2	equ	0xFDF
 28214                           postinc2	equ	0xFDE
 28215                           postdec2	equ	0xFDD
 28216                           plusw2	equ	0xFDB
 28217                           fsr2h	equ	0xFDA
 28218                           fsr2l	equ	0xFD9
 28219                           status	equ	0xFD8
 28220                           
 28221 ;; *************** function __RegsToCANID *****************
 28222 ;; Defined at:
 28223 ;;		line 1158 in file "ECAN.c"
 28224 ;; Parameters:    Size  Location     Type
 28225 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 28226 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28227 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28228 ;;  val             2    2[COMRAM] PTR unsigned long 
 28229 ;;		 -> id(4), 
 28230 ;;  type            1    4[COMRAM] unsigned char 
 28231 ;; Auto vars:     Size  Location     Type
 28232 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 28233 ;;		 -> id(4), 
 28234 ;; Return value:  Size  Location     Type
 28235 ;;		None               void
 28236 ;; Registers used:
 28237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28238 ;; Tracked objects:
 28239 ;;		On entry : 0/1
 28240 ;;		On exit  : 0/0
 28241 ;;		Unchanged: 0/0
 28242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28243 ;;      Params:         5       0       0       0       0       0       0
 28244 ;;      Locals:         2       0       0       0       0       0       0
 28245 ;;      Temps:          2       0       0       0       0       0       0
 28246 ;;      Totals:         9       0       0       0       0       0       0
 28247 ;;Total ram usage:        9 bytes
 28248 ;; Hardware stack levels used:    1
 28249 ;; This function calls:
 28250 ;;		Nothing
 28251 ;; This function is called by:
 28252 ;;		_ECANReceiveMessage
 28253 ;; This function uses a non-reentrant model
 28254 ;;
 28255                           
 28256                           	psect	text86
 28257  0035E4                     __ptext86:
 28258                           	opt stack 0
 28259  0035E4                     __RegsToCANID:
 28260                           	opt stack 19
 28261                           
 28262                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 28263                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 28264                           
 28265                           ;incstack = 0
 28266                           ;incstack = 0
 28267  0035E4  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 28268  0035E8  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 28269                           
 28270                           ;ECAN.c: 1163: if ( type == 0 )
 28271  0035EC  6605               	tstfsz	__RegsToCANID@type,c
 28272  0035EE  D038               	goto	i1l9584
 28273                           
 28274                           ;ECAN.c: 1164: {
 28275                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 28276  0035F0  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28277  0035F4  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28278  0035F8  50DF               	movf	indf2,w,c
 28279  0035FA  6E06               	movwf	??__RegsToCANID& (0+255),c
 28280  0035FC  90D8               	bcf	status,0,c
 28281  0035FE  3606               	rlcf	??__RegsToCANID,f,c
 28282  003600  90D8               	bcf	status,0,c
 28283  003602  3606               	rlcf	??__RegsToCANID,f,c
 28284  003604  90D8               	bcf	status,0,c
 28285  003606  3406               	rlcf	??__RegsToCANID,w,c
 28286  003608  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28287  00360C  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28288  003610  6EDF               	movwf	indf2,c
 28289                           
 28290                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 28291  003612  EE20 F001          	lfsr	2,1
 28292  003616  D864               	call	PL20	;call to abstracted procedure
 28293  003618  0E05               	movlw	5
 28294  00361A  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28295  00361C                     i1u1131_25:
 28296  00361C  90D8               	bcf	status,0,c
 28297  00361E  3206               	rrcf	??__RegsToCANID,f,c
 28298  003620  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28299  003622  D7FC               	goto	i1u1131_25
 28300  003624  5006               	movf	??__RegsToCANID,w,c
 28301                           
 28302                           ;ECAN.c: 1168: ptr++;
 28303                           
 28304                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 28305  003626  D867               	call	PL64	;call to abstracted procedure
 28306  003628  0E05               	movlw	5
 28307  00362A  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28308  00362C                     i1u1132_25:
 28309  00362C  90D8               	bcf	status,0,c
 28310  00362E  3206               	rrcf	??__RegsToCANID,f,c
 28311  003630  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28312  003632  D7FC               	goto	i1u1132_25
 28313  003634  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28314  003638  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28315  00363C  5006               	movf	??__RegsToCANID,w,c
 28316  00363E  12DF               	iorwf	indf2,f,c
 28317                           
 28318                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 28319  003640  EE20 F002          	lfsr	2,2
 28320  003644  5008               	movf	__RegsToCANID@Value,w,c
 28321  003646  26D9               	addwf	fsr2l,f,c
 28322  003648  5009               	movf	__RegsToCANID@Value+1,w,c
 28323  00364A  22DA               	addwfc	fsr2h,f,c
 28324  00364C  6ADF               	clrf	indf2,c
 28325                           
 28326                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 28327  00364E  EE20 F003          	lfsr	2,3
 28328  003652  5008               	movf	__RegsToCANID@Value,w,c
 28329  003654  26D9               	addwf	fsr2l,f,c
 28330  003656  5009               	movf	__RegsToCANID@Value+1,w,c
 28331  003658  22DA               	addwfc	fsr2h,f,c
 28332  00365A  0E00               	movlw	0
 28333  00365C  6EDF               	movwf	indf2,c
 28334                           
 28335                           ;ECAN.c: 1172: }
 28336  00365E  D03F               	goto	i1l1526
 28337  003660                     i1l9584:
 28338                           
 28339                           ;ECAN.c: 1173: else
 28340                           ;ECAN.c: 1174: {
 28341                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 28342  003660  EE20 F002          	lfsr	2,2
 28343  003664  D83D               	call	PL20	;call to abstracted procedure
 28344  003666  0E05               	movlw	5
 28345  003668  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28346  00366A                     i1u1133_25:
 28347  00366A  90D8               	bcf	status,0,c
 28348  00366C  3606               	rlcf	??__RegsToCANID,f,c
 28349  00366E  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28350  003670  D7FC               	goto	i1u1133_25
 28351  003672  5006               	movf	??__RegsToCANID,w,c
 28352  003674  6EDF               	movwf	indf2,c
 28353                           
 28354                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 28355  003676  EE20 F003          	lfsr	2,3
 28356  00367A  D832               	call	PL20	;call to abstracted procedure
 28357  00367C  90D8               	bcf	status,0,c
 28358  00367E  3206               	rrcf	??__RegsToCANID,f,c
 28359  003680  90D8               	bcf	status,0,c
 28360  003682  3206               	rrcf	??__RegsToCANID,f,c
 28361  003684  90D8               	bcf	status,0,c
 28362  003686  3006               	rrcf	??__RegsToCANID,w,c
 28363                           
 28364                           ;ECAN.c: 1178: ptr++;
 28365                           
 28366                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 28367  003688  D836               	call	PL64	;call to abstracted procedure
 28368  00368A  0E03               	movlw	3
 28369  00368C  D83E               	call	PL72	;call to abstracted procedure
 28370                           
 28371                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 28372  00368E  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28373  003692  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28374  003696  50DF               	movf	indf2,w,c
 28375  003698  6E06               	movwf	??__RegsToCANID& (0+255),c
 28376  00369A  90D8               	bcf	status,0,c
 28377  00369C  3206               	rrcf	??__RegsToCANID,f,c
 28378  00369E  90D8               	bcf	status,0,c
 28379  0036A0  3206               	rrcf	??__RegsToCANID,f,c
 28380  0036A2  90D8               	bcf	status,0,c
 28381  0036A4  3206               	rrcf	??__RegsToCANID,f,c
 28382  0036A6  0E1C               	movlw	28
 28383  0036A8  D830               	call	PL72	;call to abstracted procedure
 28384                           
 28385                           ;ECAN.c: 1182: ptr++;
 28386  0036AA  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28387  0036AC  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28388                           
 28389                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 28390  0036AE  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28391  0036B2  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28392  0036B6  EE10 F001          	lfsr	1,1
 28393  0036BA  5008               	movf	__RegsToCANID@Value,w,c
 28394  0036BC  26E1               	addwf	fsr1l,f,c
 28395  0036BE  5009               	movf	__RegsToCANID@Value+1,w,c
 28396  0036C0  22E2               	addwfc	fsr1h,f,c
 28397  0036C2  CFDF FFE7          	movff	indf2,indf1
 28398                           
 28399                           ;ECAN.c: 1184: ptr++;
 28400  0036C6  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28401  0036C8  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28402                           
 28403                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 28404  0036CA  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28405  0036CE  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28406  0036D2  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 28407  0036D6  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 28408  0036DA  CFDF FFE7          	movff	indf2,indf1
 28409  0036DE                     i1l1526:
 28410  0036DE  0012               	return	
 28411  0036E0                     __end_of__RegsToCANID:
 28412                           	opt stack 0
 28413  0036E0                     PL20:
 28414                           	opt stack 19
 28415  0036E0  5008               	movf	__RegsToCANID@Value,w,c
 28416  0036E2  26D9               	addwf	fsr2l,f,c
 28417  0036E4  5009               	movf	__RegsToCANID@Value+1,w,c
 28418  0036E6  22DA               	addwfc	fsr2h,f,c
 28419  0036E8  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28420  0036EC  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28421  0036F0  50E7               	movf	indf1,w,c
 28422  0036F2  6E06               	movwf	??__RegsToCANID& (0+255),c
 28423  0036F4  0012               	return	
 28424  0036F6                     __end_ofPL20:
 28425                           	opt stack 0
 28426  0036F6                     PL64:
 28427                           	opt stack 19
 28428  0036F6  6EDF               	movwf	indf2,c
 28429  0036F8  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28430  0036FA  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28431  0036FC  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28432  003700  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28433  003704  50DF               	movf	indf2,w,c
 28434  003706  6E06               	movwf	??__RegsToCANID& (0+255),c
 28435  003708  0012               	return	
 28436  00370A                     __end_ofPL64:
 28437                           	opt stack 0
 28438  00370A                     PL72:
 28439                           	opt stack 19
 28440  00370A  1606               	andwf	??__RegsToCANID,f,c
 28441  00370C  EE20 F002          	lfsr	2,2
 28442  003710  5008               	movf	__RegsToCANID@Value,w,c
 28443  003712  26D9               	addwf	fsr2l,f,c
 28444  003714  5009               	movf	__RegsToCANID@Value+1,w,c
 28445  003716  22DA               	addwfc	fsr2h,f,c
 28446  003718  5006               	movf	??__RegsToCANID,w,c
 28447  00371A  12DF               	iorwf	indf2,f,c
 28448  00371C  0012               	return	
 28449  00371E                     __end_ofPL72:
 28450                           	opt stack 0
 28451                           tblptru	equ	0xFF8
 28452                           tblptrh	equ	0xFF7
 28453                           tblptrl	equ	0xFF6
 28454                           tablat	equ	0xFF5
 28455                           prodh	equ	0xFF4
 28456                           prodl	equ	0xFF3
 28457                           intcon	equ	0xFF2
 28458                           indf0	equ	0xFEF
 28459                           postinc0	equ	0xFEE
 28460                           fsr0h	equ	0xFEA
 28461                           fsr0l	equ	0xFE9
 28462                           wreg	equ	0xFE8
 28463                           indf1	equ	0xFE7
 28464                           postinc1	equ	0xFE6
 28465                           postdec1	equ	0xFE5
 28466                           fsr1h	equ	0xFE2
 28467                           fsr1l	equ	0xFE1
 28468                           bsr	equ	0xFE0
 28469                           indf2	equ	0xFDF
 28470                           postinc2	equ	0xFDE
 28471                           postdec2	equ	0xFDD
 28472                           plusw2	equ	0xFDB
 28473                           fsr2h	equ	0xFDA
 28474                           fsr2l	equ	0xFD9
 28475                           status	equ	0xFD8
 28476                           
 28477 ;; *************** function __ECANPointBuffer *****************
 28478 ;; Defined at:
 28479 ;;		line 1209 in file "ECAN.c"
 28480 ;; Parameters:    Size  Location     Type
 28481 ;;  b               1    wreg     unsigned char 
 28482 ;; Auto vars:     Size  Location     Type
 28483 ;;  b               1    3[COMRAM] unsigned char 
 28484 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28485 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28486 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28487 ;; Return value:  Size  Location     Type
 28488 ;;                  2    0[COMRAM] PTR unsigned char 
 28489 ;; Registers used:
 28490 ;;		wreg, status,2, status,0
 28491 ;; Tracked objects:
 28492 ;;		On entry : F/1
 28493 ;;		On exit  : 0/0
 28494 ;;		Unchanged: 0/0
 28495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28496 ;;      Params:         3       0       0       0       0       0       0
 28497 ;;      Locals:         3       0       0       0       0       0       0
 28498 ;;      Temps:          0       0       0       0       0       0       0
 28499 ;;      Totals:         6       0       0       0       0       0       0
 28500 ;;Total ram usage:        6 bytes
 28501 ;; Hardware stack levels used:    1
 28502 ;; This function calls:
 28503 ;;		Nothing
 28504 ;; This function is called by:
 28505 ;;		_ECANReceiveMessage
 28506 ;; This function uses a non-reentrant model
 28507 ;;
 28508                           
 28509                           	psect	text87
 28510  001EB8                     __ptext87:
 28511                           	opt stack 0
 28512  001EB8                     __ECANPointBuffer:
 28513                           	opt stack 19
 28514                           
 28515                           ;incstack = 0
 28516                           ;incstack = 0
 28517                           ;__ECANPointBuffer@b stored from wreg
 28518  001EB8  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28519                           
 28520                           ; BSR set to: 1
 28521                           ;ECAN.c: 1210: BYTE* pt;
 28522                           ;ECAN.c: 1212: switch(b)
 28523  001EBC  D024               	goto	i1l9568
 28524  001EBE                     i1l9550:
 28525                           
 28526                           ; BSR set to: 1
 28527                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28528  001EBE  0E0F               	movlw	15	;volatile
 28529  001EC0  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28530  001EC2  0E60               	movlw	96	;volatile
 28531  001EC4  D01E               	goto	L62
 28532  001EC6                     i1l9552:
 28533                           
 28534                           ; BSR set to: 1
 28535                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28536  001EC6  010F               	movlb	15	; () banked
 28537  001EC8  0E0F               	movlw	15	;volatile
 28538  001ECA  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28539  001ECC  0E50               	movlw	80	;volatile
 28540  001ECE  D019               	goto	L62
 28541  001ED0                     i1l9554:
 28542                           
 28543                           ; BSR set to: 1
 28544                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28545  001ED0  010E               	movlb	14	; () banked
 28546  001ED2  0E0E               	movlw	14	;volatile
 28547  001ED4  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28548  001ED6  0E20               	movlw	32	;volatile
 28549  001ED8  D014               	goto	L62
 28550  001EDA                     i1l9556:
 28551                           
 28552                           ; BSR set to: 1
 28553                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28554  001EDA  010E               	movlb	14	; () banked
 28555  001EDC  0E0E               	movlw	14	;volatile
 28556  001EDE  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28557  001EE0  0E30               	movlw	48	;volatile
 28558  001EE2  D00F               	goto	L62
 28559  001EE4                     i1l9558:
 28560                           
 28561                           ; BSR set to: 1
 28562                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28563  001EE4  010E               	movlb	14	; () banked
 28564  001EE6  0E0E               	movlw	14	;volatile
 28565  001EE8  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28566  001EEA  0E40               	movlw	64	;volatile
 28567  001EEC  D00A               	goto	L62
 28568  001EEE                     i1l9560:
 28569                           
 28570                           ; BSR set to: 1
 28571                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28572  001EEE  010E               	movlb	14	; () banked
 28573  001EF0  0E0E               	movlw	14	;volatile
 28574  001EF2  D7EB               	goto	L63
 28575  001EF4                     i1l9562:
 28576                           
 28577                           ; BSR set to: 1
 28578                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28579  001EF4  010E               	movlb	14	; () banked
 28580  001EF6  0E0E               	movlw	14	;volatile
 28581  001EF8  D7E3               	goto	L64
 28582  001EFA                     i1l9564:
 28583                           
 28584                           ; BSR set to: 1
 28585                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28586  001EFA  010E               	movlb	14	; () banked
 28587  001EFC  0E0E               	movlw	14	;volatile
 28588  001EFE  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28589  001F00  0E70               	movlw	112	;volatile
 28590  001F02                     L62:
 28591  001F02  6E05               	movwf	__ECANPointBuffer@pt,c
 28592                           
 28593                           ;ECAN.c: 1237: break;
 28594  001F04  D00F               	goto	i1l1531
 28595  001F06                     i1l9568:
 28596                           
 28597                           ; BSR set to: 1
 28598  001F06  5004               	movf	__ECANPointBuffer@b,w,c
 28599                           
 28600                           ; Switch size 1, requested type "space"
 28601                           ; Number of cases is 7, Range of values is 0 to 6
 28602                           ; switch strategies available:
 28603                           ; Name         Instructions Cycles
 28604                           ; simple_byte           22    12 (average)
 28605                           ;	Chosen strategy is simple_byte
 28606  001F08  E0DA               	bz	i1l9550
 28607  001F0A  0A01               	xorlw	1	; case 1
 28608  001F0C  E0DC               	bz	i1l9552
 28609  001F0E  0A03               	xorlw	3	; case 2
 28610  001F10  E0DF               	bz	i1l9554
 28611  001F12  0A01               	xorlw	1	; case 3
 28612  001F14  E0E2               	bz	i1l9556
 28613  001F16  0A07               	xorlw	7	; case 4
 28614  001F18  E0E5               	bz	i1l9558
 28615  001F1A  0A01               	xorlw	1	; case 5
 28616  001F1C  E0E8               	bz	i1l9560
 28617  001F1E  0A03               	xorlw	3	; case 6
 28618  001F20  E0E9               	bz	i1l9562
 28619  001F22  D7EB               	goto	i1l9564
 28620  001F24                     i1l1531:
 28621                           
 28622                           ;ECAN.c: 1239: return (pt);
 28623  001F24  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28624  001F28  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28625  001F2C  0012               	return	
 28626  001F2E                     __end_of__ECANPointBuffer:
 28627                           	opt stack 0
 28628                           tblptru	equ	0xFF8
 28629                           tblptrh	equ	0xFF7
 28630                           tblptrl	equ	0xFF6
 28631                           tablat	equ	0xFF5
 28632                           prodh	equ	0xFF4
 28633                           prodl	equ	0xFF3
 28634                           intcon	equ	0xFF2
 28635                           indf0	equ	0xFEF
 28636                           postinc0	equ	0xFEE
 28637                           fsr0h	equ	0xFEA
 28638                           fsr0l	equ	0xFE9
 28639                           wreg	equ	0xFE8
 28640                           indf1	equ	0xFE7
 28641                           postinc1	equ	0xFE6
 28642                           postdec1	equ	0xFE5
 28643                           fsr1h	equ	0xFE2
 28644                           fsr1l	equ	0xFE1
 28645                           bsr	equ	0xFE0
 28646                           indf2	equ	0xFDF
 28647                           postinc2	equ	0xFDE
 28648                           postdec2	equ	0xFDD
 28649                           plusw2	equ	0xFDB
 28650                           fsr2h	equ	0xFDA
 28651                           fsr2l	equ	0xFD9
 28652                           status	equ	0xFD8
 28653                           
 28654 ;; *************** function _fifo_write *****************
 28655 ;; Defined at:
 28656 ;;		line 61 in file "fifo.c"
 28657 ;; Parameters:    Size  Location     Type
 28658 ;;  f               2    0[COMRAM] PTR struct .
 28659 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28660 ;;  buf             2    2[COMRAM] PTR const void 
 28661 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 28662 ;;  nbytes          4    4[COMRAM] unsigned long 
 28663 ;; Auto vars:     Size  Location     Type
 28664 ;;  i               4   14[COMRAM] unsigned long 
 28665 ;;  p               2   12[COMRAM] PTR const unsigned char 
 28666 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 28667 ;; Return value:  Size  Location     Type
 28668 ;;                  2    0[COMRAM] unsigned short 
 28669 ;; Registers used:
 28670 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28671 ;; Tracked objects:
 28672 ;;		On entry : F/1
 28673 ;;		On exit  : F/1
 28674 ;;		Unchanged: F/0
 28675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28676 ;;      Params:         8       0       0       0       0       0       0
 28677 ;;      Locals:         6       0       0       0       0       0       0
 28678 ;;      Temps:          4       0       0       0       0       0       0
 28679 ;;      Totals:        18       0       0       0       0       0       0
 28680 ;;Total ram usage:       18 bytes
 28681 ;; Hardware stack levels used:    1
 28682 ;; This function calls:
 28683 ;;		Nothing
 28684 ;; This function is called by:
 28685 ;;		_Interrupt
 28686 ;; This function uses a non-reentrant model
 28687 ;;
 28688                           
 28689                           	psect	text88
 28690  0034B8                     __ptext88:
 28691                           	opt stack 0
 28692  0034B8                     _fifo_write:
 28693                           	opt stack 20
 28694                           
 28695                           ; BSR set to: 1
 28696                           ;fifo.c: 62: uint32_t i;
 28697                           ;fifo.c: 63: const uint8_t *p;
 28698                           ;fifo.c: 64: p = buf;
 28699                           
 28700                           ;incstack = 0
 28701                           ;incstack = 0
 28702  0034B8  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 28703  0034BC  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 28704                           
 28705                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28706  0034C0  6A0F               	clrf	fifo_write@i,c
 28707  0034C2  6A10               	clrf	fifo_write@i+1,c
 28708  0034C4  6A11               	clrf	fifo_write@i+2,c
 28709  0034C6  6A12               	clrf	fifo_write@i+3,c
 28710  0034C8  D068               	goto	i1l6470
 28711  0034CA                     i1l6450:
 28712                           
 28713                           ; BSR set to: 1
 28714                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 28715                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 28716  0034CA  EE20 F004          	lfsr	2,4
 28717  0034CE  5001               	movf	fifo_write@f,w,c
 28718  0034D0  D872               	call	PL12	;call to abstracted procedure
 28719  0034D2  E102               	bnz	i1u632_25
 28720  0034D4  5009               	movf	??_fifo_write,w,c
 28721  0034D6  180B               	xorwf	??_fifo_write+2,w,c
 28722  0034D8                     i1u632_25:
 28723  0034D8  E011               	bz	i1l1558
 28724                           
 28725                           ; BSR set to: 1
 28726  0034DA  EE20 F006          	lfsr	2,6
 28727  0034DE  5001               	movf	fifo_write@f,w,c
 28728  0034E0  D86A               	call	PL12	;call to abstracted procedure
 28729  0034E2  E102               	bnz	i1u633_25
 28730  0034E4  5009               	movf	??_fifo_write,w,c
 28731  0034E6  180B               	xorwf	??_fifo_write+2,w,c
 28732  0034E8                     i1u633_25:
 28733  0034E8  E10E               	bnz	i1l6458
 28734                           
 28735                           ; BSR set to: 1
 28736  0034EA  EE20 F004          	lfsr	2,4
 28737  0034EE  5001               	movf	fifo_write@f,w,c
 28738  0034F0  26D9               	addwf	fsr2l,f,c
 28739  0034F2  5002               	movf	fifo_write@f+1,w,c
 28740  0034F4  22DA               	addwfc	fsr2h,f,c
 28741  0034F6  50DE               	movf	postinc2,w,c
 28742  0034F8  10DD               	iorwf	postdec2,w,c
 28743  0034FA  E105               	bnz	i1l6458
 28744  0034FC                     i1l1558:
 28745                           
 28746                           ; BSR set to: 1
 28747                           ;fifo.c: 71: return i;
 28748  0034FC  C00F  F001         	movff	fifo_write@i,?_fifo_write
 28749  003500  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28750  003504  D057               	goto	i1l1559
 28751  003506                     i1l6458:
 28752                           
 28753                           ; BSR set to: 1
 28754                           ;fifo.c: 73: else {
 28755                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28756  003506  C00D  FFD9         	movff	fifo_write@p,fsr2l
 28757  00350A  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 28758  00350E  EE10 F002          	lfsr	1,2
 28759  003512  5001               	movf	fifo_write@f,w,c
 28760  003514  26E1               	addwf	fsr1l,f,c
 28761  003516  5002               	movf	fifo_write@f+1,w,c
 28762  003518  22E2               	addwfc	fsr1h,f,c
 28763  00351A  CFE6 F009          	movff	postinc1,??_fifo_write
 28764  00351E  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 28765  003522  C001  FFE1         	movff	fifo_write@f,fsr1l
 28766  003526  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 28767  00352A  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 28768  00352E  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 28769  003532  5009               	movf	??_fifo_write,w,c
 28770  003534  240B               	addwf	??_fifo_write+2,w,c
 28771  003536  6EE1               	movwf	fsr1l,c
 28772  003538  500A               	movf	??_fifo_write+1,w,c
 28773  00353A  200C               	addwfc	??_fifo_write+3,w,c
 28774  00353C  6EE2               	movwf	fsr1h,c
 28775  00353E  CFDF FFE7          	movff	indf2,indf1
 28776                           
 28777                           ; BSR set to: 1
 28778  003542  4A0D               	infsnz	fifo_write@p,f,c
 28779  003544  2A0E               	incf	fifo_write@p+1,f,c
 28780                           
 28781                           ; BSR set to: 1
 28782                           ;fifo.c: 75: f->head++;
 28783  003546  EE20 F002          	lfsr	2,2
 28784  00354A  5001               	movf	fifo_write@f,w,c
 28785  00354C  26D9               	addwf	fsr2l,f,c
 28786  00354E  5002               	movf	fifo_write@f+1,w,c
 28787  003550  22DA               	addwfc	fsr2h,f,c
 28788  003552  2ADE               	incf	postinc2,f,c
 28789  003554  0E00               	movlw	0
 28790  003556  22DD               	addwfc	postdec2,f,c
 28791                           
 28792                           ; BSR set to: 1
 28793                           ;fifo.c: 77: if (f->head >= f->size) {
 28794  003558  EE20 F006          	lfsr	2,6
 28795  00355C  5001               	movf	fifo_write@f,w,c
 28796  00355E  26D9               	addwf	fsr2l,f,c
 28797  003560  5002               	movf	fifo_write@f+1,w,c
 28798  003562  22DA               	addwfc	fsr2h,f,c
 28799  003564  EE10 F002          	lfsr	1,2
 28800  003568  5001               	movf	fifo_write@f,w,c
 28801  00356A  26E1               	addwf	fsr1l,f,c
 28802  00356C  5002               	movf	fifo_write@f+1,w,c
 28803  00356E  22E2               	addwfc	fsr1h,f,c
 28804  003570  52E6               	movf	postinc1,f,c
 28805  003572  52DE               	movf	postinc2,f,c
 28806  003574  50DD               	movf	postdec2,w,c
 28807  003576  5CE5               	subwf	postdec1,w,c
 28808  003578  E102               	bnz	i1u635_25
 28809  00357A  50DF               	movf	indf2,w,c
 28810  00357C  5CE7               	subwf	indf1,w,c
 28811  00357E                     i1u635_25:
 28812  00357E  E308               	bnc	i1l6468
 28813                           
 28814                           ; BSR set to: 1
 28815                           ;fifo.c: 78: f->head = 0;
 28816  003580  EE20 F002          	lfsr	2,2
 28817  003584  5001               	movf	fifo_write@f,w,c
 28818  003586  26D9               	addwf	fsr2l,f,c
 28819  003588  5002               	movf	fifo_write@f+1,w,c
 28820  00358A  22DA               	addwfc	fsr2h,f,c
 28821  00358C  6ADE               	clrf	postinc2,c
 28822  00358E  6ADD               	clrf	postdec2,c
 28823  003590                     i1l6468:
 28824                           
 28825                           ; BSR set to: 1
 28826  003590  2A0F               	incf	fifo_write@i,f,c
 28827  003592  0E00               	movlw	0
 28828  003594  2210               	addwfc	fifo_write@i+1,f,c
 28829  003596  2211               	addwfc	fifo_write@i+2,f,c
 28830  003598  2212               	addwfc	fifo_write@i+3,f,c
 28831  00359A                     i1l6470:
 28832                           
 28833                           ; BSR set to: 1
 28834  00359A  5005               	movf	fifo_write@nbytes,w,c
 28835  00359C  5C0F               	subwf	fifo_write@i,w,c
 28836  00359E  5006               	movf	fifo_write@nbytes+1,w,c
 28837  0035A0  5810               	subwfb	fifo_write@i+1,w,c
 28838  0035A2  5007               	movf	fifo_write@nbytes+2,w,c
 28839  0035A4  5811               	subwfb	fifo_write@i+2,w,c
 28840  0035A6  5008               	movf	fifo_write@nbytes+3,w,c
 28841  0035A8  5812               	subwfb	fifo_write@i+3,w,c
 28842  0035AA  E38F               	bnc	i1l6450
 28843                           
 28844                           ; BSR set to: 1
 28845                           ;fifo.c: 79: }
 28846                           ;fifo.c: 80: }
 28847                           ;fifo.c: 82: }
 28848                           ;fifo.c: 84: return nbytes;
 28849  0035AC  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 28850  0035B0  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28851  0035B4                     i1l1559:
 28852                           
 28853                           ; BSR set to: 1
 28854  0035B4  0012               	return	
 28855  0035B6                     __end_of_fifo_write:
 28856                           	opt stack 0
 28857  0035B6                     PL12:
 28858                           	opt stack 20
 28859  0035B6  26D9               	addwf	fsr2l,f,c
 28860  0035B8  5002               	movf	fifo_write@f+1,w,c
 28861  0035BA  22DA               	addwfc	fsr2h,f,c
 28862  0035BC  CFDE F009          	movff	postinc2,??_fifo_write
 28863  0035C0  CFDD F00A          	movff	postdec2,??_fifo_write+1
 28864  0035C4  EE20 F002          	lfsr	2,2
 28865  0035C8  5001               	movf	fifo_write@f,w,c
 28866  0035CA  26D9               	addwf	fsr2l,f,c
 28867  0035CC  5002               	movf	fifo_write@f+1,w,c
 28868  0035CE  22DA               	addwfc	fsr2h,f,c
 28869  0035D0  CFDE F00B          	movff	postinc2,??_fifo_write+2
 28870  0035D4  CFDD F00C          	movff	postdec2,??_fifo_write+3
 28871  0035D8  2A0B               	incf	??_fifo_write+2,f,c
 28872  0035DA  0E00               	movlw	0
 28873  0035DC  220C               	addwfc	??_fifo_write+3,f,c
 28874  0035DE  500A               	movf	??_fifo_write+1,w,c
 28875  0035E0  180C               	xorwf	??_fifo_write+3,w,c
 28876  0035E2  0012               	return	
 28877  0035E4                     __end_ofPL12:
 28878                           	opt stack 0
 28879                           tblptru	equ	0xFF8
 28880                           tblptrh	equ	0xFF7
 28881                           tblptrl	equ	0xFF6
 28882                           tablat	equ	0xFF5
 28883                           prodh	equ	0xFF4
 28884                           prodl	equ	0xFF3
 28885                           intcon	equ	0xFF2
 28886                           indf0	equ	0xFEF
 28887                           postinc0	equ	0xFEE
 28888                           fsr0h	equ	0xFEA
 28889                           fsr0l	equ	0xFE9
 28890                           wreg	equ	0xFE8
 28891                           indf1	equ	0xFE7
 28892                           postinc1	equ	0xFE6
 28893                           postdec1	equ	0xFE5
 28894                           fsr1h	equ	0xFE2
 28895                           fsr1l	equ	0xFE1
 28896                           bsr	equ	0xFE0
 28897                           indf2	equ	0xFDF
 28898                           postinc2	equ	0xFDE
 28899                           postdec2	equ	0xFDD
 28900                           plusw2	equ	0xFDB
 28901                           fsr2h	equ	0xFDA
 28902                           fsr2l	equ	0xFD9
 28903                           status	equ	0xFD8
 28904                           
 28905 ;; *************** function _ReadUSART *****************
 28906 ;; Defined at:
 28907 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28908 ;; Parameters:    Size  Location     Type
 28909 ;;		None
 28910 ;; Auto vars:     Size  Location     Type
 28911 ;;  data            1    0[COMRAM] unsigned char 
 28912 ;; Return value:  Size  Location     Type
 28913 ;;                  1    wreg      unsigned char 
 28914 ;; Registers used:
 28915 ;;		wreg, status,2, status,0
 28916 ;; Tracked objects:
 28917 ;;		On entry : 0/0
 28918 ;;		On exit  : 0/0
 28919 ;;		Unchanged: 0/0
 28920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28921 ;;      Params:         0       0       0       0       0       0       0
 28922 ;;      Locals:         1       0       0       0       0       0       0
 28923 ;;      Temps:          0       0       0       0       0       0       0
 28924 ;;      Totals:         1       0       0       0       0       0       0
 28925 ;;Total ram usage:        1 bytes
 28926 ;; Hardware stack levels used:    1
 28927 ;; This function calls:
 28928 ;;		Nothing
 28929 ;; This function is called by:
 28930 ;;		_Interrupt
 28931 ;; This function uses a non-reentrant model
 28932 ;;
 28933                           
 28934                           	psect	text89
 28935  00162A                     __ptext89:
 28936                           	opt stack 0
 28937  00162A                     _ReadUSART:
 28938                           	opt stack 20
 28939                           
 28940                           ; BSR set to: 1
 28941                           ;incstack = 0
 28942                           ;incstack = 0
 28943  00162A  0EF2               	movlw	242
 28944  00162C  162A               	andwf	_USART_Status,f,c
 28945  00162E  ACAB               	btfss	4011,6,c	;volatile
 28946  001630  D003               	goto	i1l1877
 28947  001632  902A               	bcf	_USART_Status,0,c
 28948  001634  B0AB               	btfsc	4011,0,c	;volatile
 28949  001636  802A               	bsf	_USART_Status,0,c
 28950  001638                     i1l1877:
 28951  001638  B4AB               	btfsc	4011,2,c	;volatile
 28952  00163A  842A               	bsf	_USART_Status,2,c
 28953  00163C  B2AB               	btfsc	4011,1,c	;volatile
 28954  00163E  862A               	bsf	_USART_Status,3,c
 28955  001640  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28956  001644  5001               	movf	ReadUSART@data,w,c
 28957  001646  0012               	return	
 28958  001648                     __end_of_ReadUSART:
 28959                           	opt stack 0
 28960                           tblptru	equ	0xFF8
 28961                           tblptrh	equ	0xFF7
 28962                           tblptrl	equ	0xFF6
 28963                           tablat	equ	0xFF5
 28964                           prodh	equ	0xFF4
 28965                           prodl	equ	0xFF3
 28966                           intcon	equ	0xFF2
 28967                           indf0	equ	0xFEF
 28968                           postinc0	equ	0xFEE
 28969                           fsr0h	equ	0xFEA
 28970                           fsr0l	equ	0xFE9
 28971                           wreg	equ	0xFE8
 28972                           indf1	equ	0xFE7
 28973                           postinc1	equ	0xFE6
 28974                           postdec1	equ	0xFE5
 28975                           fsr1h	equ	0xFE2
 28976                           fsr1l	equ	0xFE1
 28977                           bsr	equ	0xFE0
 28978                           indf2	equ	0xFDF
 28979                           postinc2	equ	0xFDE
 28980                           postdec2	equ	0xFDD
 28981                           plusw2	equ	0xFDB
 28982                           fsr2h	equ	0xFDA
 28983                           fsr2l	equ	0xFD9
 28984                           status	equ	0xFD8
 28985                           tblptru	equ	0xFF8
 28986                           tblptrh	equ	0xFF7
 28987                           tblptrl	equ	0xFF6
 28988                           tablat	equ	0xFF5
 28989                           prodh	equ	0xFF4
 28990                           prodl	equ	0xFF3
 28991                           intcon	equ	0xFF2
 28992                           indf0	equ	0xFEF
 28993                           postinc0	equ	0xFEE
 28994                           fsr0h	equ	0xFEA
 28995                           fsr0l	equ	0xFE9
 28996                           wreg	equ	0xFE8
 28997                           indf1	equ	0xFE7
 28998                           postinc1	equ	0xFE6
 28999                           postdec1	equ	0xFE5
 29000                           fsr1h	equ	0xFE2
 29001                           fsr1l	equ	0xFE1
 29002                           bsr	equ	0xFE0
 29003                           indf2	equ	0xFDF
 29004                           postinc2	equ	0xFDE
 29005                           postdec2	equ	0xFDD
 29006                           plusw2	equ	0xFDB
 29007                           fsr2h	equ	0xFDA
 29008                           fsr2l	equ	0xFD9
 29009                           status	equ	0xFD8
 29010                           
 29011                           	psect	rparam
 29012  0000                     tblptru	equ	0xFF8
 29013                           tblptrh	equ	0xFF7
 29014                           tblptrl	equ	0xFF6
 29015                           tablat	equ	0xFF5
 29016                           prodh	equ	0xFF4
 29017                           prodl	equ	0xFF3
 29018                           intcon	equ	0xFF2
 29019                           indf0	equ	0xFEF
 29020                           postinc0	equ	0xFEE
 29021                           fsr0h	equ	0xFEA
 29022                           fsr0l	equ	0xFE9
 29023                           wreg	equ	0xFE8
 29024                           indf1	equ	0xFE7
 29025                           postinc1	equ	0xFE6
 29026                           postdec1	equ	0xFE5
 29027                           fsr1h	equ	0xFE2
 29028                           fsr1l	equ	0xFE1
 29029                           bsr	equ	0xFE0
 29030                           indf2	equ	0xFDF
 29031                           postinc2	equ	0xFDE
 29032                           postdec2	equ	0xFDD
 29033                           plusw2	equ	0xFDB
 29034                           fsr2h	equ	0xFDA
 29035                           fsr2l	equ	0xFD9
 29036                           status	equ	0xFD8
 29037                           tblptru	equ	0xFF8
 29038                           tblptrh	equ	0xFF7
 29039                           tblptrl	equ	0xFF6
 29040                           tablat	equ	0xFF5
 29041                           prodh	equ	0xFF4
 29042                           prodl	equ	0xFF3
 29043                           intcon	equ	0xFF2
 29044                           indf0	equ	0xFEF
 29045                           postinc0	equ	0xFEE
 29046                           fsr0h	equ	0xFEA
 29047                           fsr0l	equ	0xFE9
 29048                           wreg	equ	0xFE8
 29049                           indf1	equ	0xFE7
 29050                           postinc1	equ	0xFE6
 29051                           postdec1	equ	0xFE5
 29052                           fsr1h	equ	0xFE2
 29053                           fsr1l	equ	0xFE1
 29054                           bsr	equ	0xFE0
 29055                           indf2	equ	0xFDF
 29056                           postinc2	equ	0xFDE
 29057                           postdec2	equ	0xFDD
 29058                           plusw2	equ	0xFDB
 29059                           fsr2h	equ	0xFDA
 29060                           fsr2l	equ	0xFD9
 29061                           status	equ	0xFD8


Data Sizes:
    Strings     4092
    Constant    120
    Data        0
    BSS         1148
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      63
    BANK0           160    133     138
    BANK1           256      0     238
    BANK2           256     65     193
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_137(CODE[6]), STR_136(CODE[8]), STR_134(CODE[6]), 
		 -> STR_132(CODE[5]), STR_130(CODE[8]), STR_129(CODE[6]), STR_128(CODE[9]), 
		 -> STR_126(CODE[11]), STR_124(CODE[8]), STR_122(CODE[4]), STR_121(CODE[5]), 
		 -> STR_108(CODE[5]), STR_95(CODE[7]), STR_89(CODE[5]), STR_80(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_137(CODE[6]), STR_136(CODE[8]), STR_134(CODE[6]), STR_132(CODE[5]), 
		 -> STR_130(CODE[8]), STR_129(CODE[6]), STR_128(CODE[9]), STR_126(CODE[11]), 
		 -> STR_124(CODE[8]), STR_122(CODE[4]), STR_121(CODE[5]), STR_108(CODE[5]), 
		 -> STR_95(CODE[7]), STR_89(CODE[5]), STR_80(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_137(CODE[6]), STR_136(CODE[8]), STR_134(CODE[6]), 
		 -> STR_132(CODE[5]), STR_130(CODE[8]), STR_129(CODE[6]), STR_128(CODE[9]), 
		 -> STR_126(CODE[11]), STR_124(CODE[8]), STR_122(CODE[4]), STR_121(CODE[5]), 
		 -> STR_108(CODE[5]), STR_95(CODE[7]), STR_89(CODE[5]), STR_80(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_137(CODE[6]), STR_136(CODE[8]), STR_134(CODE[6]), 
		 -> STR_132(CODE[5]), STR_130(CODE[8]), STR_129(CODE[6]), STR_128(CODE[9]), 
		 -> STR_126(CODE[11]), STR_124(CODE[8]), STR_122(CODE[4]), STR_121(CODE[5]), 
		 -> STR_108(CODE[5]), STR_95(CODE[7]), STR_89(CODE[5]), STR_80(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_137(CODE[6]), STR_136(CODE[8]), STR_134(CODE[6]), STR_132(CODE[5]), 
		 -> STR_130(CODE[8]), STR_129(CODE[6]), STR_128(CODE[9]), STR_126(CODE[11]), 
		 -> STR_124(CODE[8]), STR_122(CODE[4]), STR_121(CODE[5]), STR_108(CODE[5]), 
		 -> STR_95(CODE[7]), STR_89(CODE[5]), STR_80(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_260(CODE[2]), STR_259(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_254(CODE[2]), 
		 -> STR_253(CODE[3]), STR_252(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_270(CODE[3]), STR_269(CODE[23]), STR_268(CODE[10]), STR_267(CODE[10]), 
		 -> STR_266(CODE[12]), STR_265(CODE[8]), STR_264(CODE[7]), STR_263(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_262(CODE[10]), STR_261(CODE[3]), STR_258(CODE[20]), 
		 -> STR_257(CODE[3]), STR_256(CODE[14]), STR_255(CODE[3]), STR_251(CODE[8]), 
		 -> STR_250(CODE[15]), STR_249(CODE[67]), STR_248(CODE[3]), STR_247(CODE[27]), 
		 -> STR_246(CODE[67]), STR_245(CODE[39]), STR_244(CODE[62]), STR_243(CODE[55]), 
		 -> STR_242(CODE[49]), STR_241(CODE[67]), STR_240(CODE[47]), STR_239(CODE[47]), 
		 -> STR_238(CODE[34]), STR_237(CODE[71]), STR_236(CODE[20]), STR_235(CODE[78]), 
		 -> STR_234(CODE[24]), STR_233(CODE[77]), STR_232(CODE[74]), STR_231(CODE[76]), 
		 -> STR_230(CODE[47]), STR_229(CODE[40]), STR_228(CODE[39]), STR_227(CODE[33]), 
		 -> STR_226(CODE[23]), STR_225(CODE[56]), STR_224(CODE[24]), STR_223(CODE[44]), 
		 -> STR_222(CODE[50]), STR_221(CODE[31]), STR_220(CODE[50]), STR_219(CODE[51]), 
		 -> STR_218(CODE[46]), STR_217(CODE[44]), STR_216(CODE[27]), STR_215(CODE[39]), 
		 -> STR_214(CODE[39]), STR_213(CODE[52]), STR_212(CODE[54]), STR_211(CODE[55]), 
		 -> STR_210(CODE[3]), STR_207(CODE[24]), STR_206(CODE[57]), STR_205(CODE[53]), 
		 -> STR_204(CODE[58]), STR_203(CODE[3]), STR_200(CODE[25]), STR_199(CODE[3]), 
		 -> STR_196(CODE[24]), STR_195(CODE[3]), STR_192(CODE[24]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[23]), STR_183(CODE[3]), 
		 -> STR_180(CODE[21]), STR_179(CODE[3]), STR_176(CODE[22]), STR_175(CODE[3]), 
		 -> STR_172(CODE[17]), STR_171(CODE[3]), STR_168(CODE[18]), STR_167(CODE[4]), 
		 -> STR_166(CODE[11]), STR_165(CODE[2]), STR_162(CODE[7]), STR_159(CODE[7]), 
		 -> STR_156(CODE[9]), STR_153(CODE[7]), STR_150(CODE[8]), STR_147(CODE[7]), 
		 -> STR_146(CODE[2]), STR_145(CODE[2]), STR_144(CODE[6]), STR_143(CODE[8]), 
		 -> STR_142(CODE[8]), STR_141(CODE[20]), STR_140(CODE[27]), STR_139(CODE[6]), 
		 -> STR_138(CODE[33]), STR_135(CODE[26]), STR_133(CODE[32]), STR_131(CODE[28]), 
		 -> STR_127(CODE[6]), STR_125(CODE[40]), STR_123(CODE[44]), STR_120(CODE[6]), 
		 -> STR_119(CODE[39]), STR_117(CODE[36]), STR_115(CODE[37]), STR_113(CODE[40]), 
		 -> STR_111(CODE[37]), STR_110(CODE[50]), STR_107(CODE[6]), STR_106(CODE[41]), 
		 -> STR_104(CODE[38]), STR_102(CODE[39]), STR_100(CODE[42]), STR_98(CODE[39]), 
		 -> STR_97(CODE[66]), STR_94(CODE[6]), STR_93(CODE[3]), STR_90(CODE[20]), 
		 -> STR_88(CODE[33]), STR_87(CODE[35]), STR_86(CODE[24]), STR_84(CODE[33]), 
		 -> STR_82(CODE[24]), STR_79(CODE[54]), STR_78(CODE[6]), STR_77(CODE[3]), 
		 -> STR_72(CODE[25]), STR_69(CODE[9]), STR_68(CODE[3]), STR_67(CODE[4]), 
		 -> STR_66(CODE[3]), STR_63(CODE[4]), STR_58(CODE[15]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[8]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2105	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_272(CODE[17]), STR_271(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_209(CODE[3]), STR_208(CODE[7]), STR_202(CODE[3]), STR_201(CODE[7]), 
		 -> STR_198(CODE[4]), STR_197(CODE[8]), STR_194(CODE[4]), STR_193(CODE[8]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[7]), STR_178(CODE[4]), STR_177(CODE[7]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_164(CODE[3]), STR_163(CODE[7]), STR_161(CODE[3]), STR_160(CODE[7]), 
		 -> STR_158(CODE[3]), STR_157(CODE[7]), STR_155(CODE[3]), STR_154(CODE[7]), 
		 -> STR_152(CODE[3]), STR_151(CODE[7]), STR_149(CODE[3]), STR_148(CODE[7]), 
		 -> STR_92(CODE[3]), STR_91(CODE[7]), STR_76(CODE[3]), STR_75(CODE[7]), 
		 -> STR_74(CODE[3]), STR_73(CODE[7]), STR_71(CODE[6]), STR_70(CODE[10]), 
		 -> STR_65(CODE[3]), STR_64(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_60(CODE[3]), STR_59(CODE[7]), STR_57(CODE[6]), STR_56(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2085$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(COMRAM[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(COMRAM[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(BANK0[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(BANK0[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1503	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_209(CODE[3]), STR_208(CODE[7]), 

    printErrors$1494	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_202(CODE[3]), STR_201(CODE[7]), 

    printErrors$1488	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_198(CODE[4]), STR_197(CODE[8]), 

    printErrors$1482	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_194(CODE[4]), STR_193(CODE[8]), 

    printErrors$1476	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1470	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printStatistics$1463	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_182(CODE[4]), STR_181(CODE[7]), 

    printStatistics$1457	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_178(CODE[4]), STR_177(CODE[7]), 

    printStatistics$1451	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1445	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1238(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1377	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_164(CODE[3]), STR_163(CODE[7]), 

    receivePrintEventVerbose$1372	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_161(CODE[3]), STR_160(CODE[7]), 

    receivePrintEventVerbose$1367	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_158(CODE[3]), STR_157(CODE[7]), 

    receivePrintEventVerbose$1362	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_155(CODE[3]), STR_154(CODE[7]), 

    receivePrintEventVerbose$1357	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_152(CODE[3]), STR_151(CODE[7]), 

    receivePrintEventVerbose$1352	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_149(CODE[3]), STR_148(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1284	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1264	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1255	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_92(CODE[3]), STR_91(CODE[7]), 

    doModeVerbose@preg_1243	PTR unsigned char  size(2) Largest target is 80
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1239	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1230	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_76(CODE[3]), STR_75(CODE[7]), 

    doModeVerbose$1226	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_74(CODE[3]), STR_73(CODE[7]), 

    doModeVerbose$1221	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_71(CODE[6]), STR_70(CODE[10]), 

    doModeVerbose$1213	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_65(CODE[3]), STR_64(CODE[7]), 

    doModeVerbose$1208	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1204	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_60(CODE[3]), STR_59(CODE[7]), 

    doModeVerbose$1191	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_57(CODE[6]), STR_56(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_118(CODE[2]), STR_116(CODE[2]), STR_114(CODE[2]), STR_112(CODE[2]), 
		 -> STR_109(CODE[2]), STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), 
		 -> STR_99(CODE[2]), STR_96(CODE[2]), STR_85(CODE[2]), STR_83(CODE[2]), 
		 -> STR_81(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1179	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _init_app_ram->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  132273
                                            126 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9556
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1050
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4556
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   21256
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2536
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3506
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3950
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       85    85      0   96688
                                            106 BANK0     20    20      0
                                              0 BANK2     65    65      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4030
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3946
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   23342
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    4470
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6606
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6336
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3778
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2312
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2012
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7545
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7437
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1010
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1236
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     180
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8897
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1214
                                             18 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     1      3     740
                                             14 BANK0      4     1      3
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     446
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7095
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     777
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     420
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     147
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     372
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     330
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      42
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     252
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2084
                                             22 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     41      C1       8       75.4%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      EE       6       93.0%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     85      8A       4       86.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      3F       1       66.3%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     378      15        0.0%
DATA                 0      0     574      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Oct 05 23:09:09 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 6B64  
                          printBinary@i 0064                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 2872  
            doModeVerbose@filter_nodeid 028F                                      PL2 6B64  
                                    PL4 6B80                                      PL6 6B8E  
                                    PL8 6BA8                                      _id 01E7  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 15A2  
                                   PL10 56EC                                     PL20 36E0  
                                   PL12 35B6                                     PL30 3464  
                                   PL22 3B32                                     PL14 570A  
                                   PL40 6C42                                     PL32 6C16  
                                   PL24 436E                                     PL16 3396  
                                   PL50 3488                                     PL42 25B2  
                                   PL34 2C22                                     PL26 6BF2  
                                   PL18 571A                                     PL60 29D4  
                                   PL52 575A                                     PL44 2652  
                                   PL36 6C28                                     PL28 6C02  
                                   PL70 349A                                     PL62 5786  
                                   PL54 6C74                                     PL46 3478  
                                   PL38 5740                                     PL80 1732  
                                   PL72 370A                                     PL64 36F6  
                                   PL56 220C                                     PL48 6C5C  
                                   PL90 190C                                     PL82 3CCC  
                                   PL74 26F6                                     PL66 2EC4  
                                   PL58 5770                                     PL92 3B42  
                                   PL84 2A90                                     PL76 5794  
                                   PL68 328A                                     PL94 475A  
                                   PL86 2D02                                     PL78 506E  
                                   PL96 34AE                                     PL88 57A6  
                                   PL98 57B0                 sendEscapedUartData@pcrc 006C  
                                   l441 3E00                                     l442 3E0A  
                                   l451 3E38                                     l444 3E16  
                                   l541 6B62                                     l437 3DAA  
                                   l550 6102                                     l438 3DE8  
                                   l801 29E8                                     l562 600E  
                                   l546 5F30                                     l810 2A18  
                                   l555 5FB8                                     l900 2CC0  
                                   l804 29F2                                     l573 60AC  
                                   l813 2A38                                     l822 2A86  
                                   l734 506C                                     l831 25CE  
                                   l903 2CD2                                     l807 29FC  
                                   l840 2614                                     l816 2A48  
                                   l744 4D66                                     l586 6166  
                                   l578 60DA                                     l834 25D8  
                                   l906 2CEE                                     l843 2624  
                                   l819 2A7C                                     l683 436C  
                                   l828 25C4                                     l861 2538  
                                   l837 25F4                                     l909 2CF8  
                                   l950 3756                                     l870 2584  
                                   l846 263E                                     l678 4204  
                                   l855 2524                                     l864 2554  
                                   l696 4282                                     l945 49DE  
                                   l953 3760                                     l873 259E  
                                   l849 2648                                     l769 4F64  
                                   l946 49F2                                     l938 494A  
                                   l786 1C68                                     l794 1C96  
                                   l858 252E                                     l882 2C44  
                                   l971 385C                                     l867 2574  
                                   l891 2C74                                     l956 376A  
                                   l876 25A8                                     l789 1C72  
                                   l981 3A12                                     l965 3848  
                                   l885 2C4E                                     l798 1CBA  
                                   l894 2C94                                     l975 39FE  
                                   l959 3786                                     l984 3A2E  
                                   l968 3852                                     l888 2C58  
                                   l897 2CA4                                     l978 3A08  
                                   l997 3B1C                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 007D                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _dlc 003C                                     _pos 00E7  
                  __size_of_Write_b_eep 0034          __size_of_writeRegisterExtended 00EC  
                                   wreg 000FE8           __end_of_writeRegisterExtended 30AE  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1000 3B26                                    l1003 3B30  
                                  l1101 2D58                                    l1031 2876  
                                  l1104 2DF0                                    l1040 28A6  
                                  l1122 30AC                                    l1034 2880  
                                  l1203 30C2                                    l1043 2914  
                                  l1037 288A                                    l1061 3BF0  
                                  l1053 3B86                                    l1142 1AEA  
                                  l1046 291E                                    l1119 3012  
                                  l1080 3CCA                                    l1241 21B2  
                                  l1138 1ADE                                    l1074 3CA2  
                                  l1058 3BB8                                    l1251 1F96  
                                  l1067 3C40                                    l1244 21D0  
                                  l1092 2740                                    l1084 2FC0  
                                  l1077 3CC0                                    l1270 4472  
                                  l1262 43F4                                    l1095 27BA  
                                  l1271 4484                                    l2072 338C  
                                  l1272 4496                                    l1264 4406  
                                  l2073 3394                                    l1521 3462  
                                  l1273 44A8                                    l1265 4418  
                                  l1274 44BA                                    l1266 442A  
                                  l1602 237A                                    l1291 181E  
                                  l1275 44CC                                    l1267 443C  
                                  l1603 23E0                                    l1276 44DE  
                                  l1268 444E                                    l1197 4CAE  
                                  l1189 4C1C                                    l1461 394C  
                                  l1277 44F0                                    l1269 4460  
                                  l1550 2C20                                    l1278 4502  
                                  l1287 210E                                    l1279 455A  
                                  l1720 54AA                                    l1296 247E  
                                  l2601 189A                                    l2513 1D1E  
                                  l1722 54D0                                    l1714 5468  
                                  l1650 51D4                                    l1634 5098  
                                  l1723 54D4                                    l1651 5186  
                                  l1547 2C00                                    l2515 1D7E  
                                  l2611 19D6                                    l1467 39CA  
                                  l1459 392E                                    l2348 24FE  
                                  l1741 557A                                    l1725 54F0  
                                  l1814 1660                                    l2462 1AAE  
                                  l1670 5218                                    l2534 2090  
                                  l1815 1662                                    l1671 521C  
                                  l1575 1E56                                    l1583 1EB6  
                                  l2447 2EA0                                    l2472 1854  
                                  l2553 1E46                                    l2537 208C  
                                  l1577 1E5E                                    l1851 1C34  
                                  l2379 2008                                    l1667 51E4  
                                  l1852 1C36                                    l1773 15A2  
                                  l1853 1C40                                    l2389 1D0C  
                                  l2565 22B2                                    l1597 18D8  
                                  l1854 1C42                                    l1686 5306  
                                  l1847 1C20                                    l2567 22A6  
                                  l1856 1C5A                                    l1864 1B50  
                                  l2592 1A1A                                    l2568 22AA  
                                  l1798 1764                                    STR_1 7618  
                                  STR_2 6FBA                                    STR_3 7686  
                                  STR_4 70D3                                    STR_5 77F1  
                                  STR_6 7CC8                                    STR_7 77B3  
                                  STR_8 7CAF                                    STR_9 7C72  
                                  _PEIE 007F96                          sendCANFrame@id 008F  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0061  
                                  _bDLE 0030                            __CFG_PWRT$ON 000000  
                                  ___IT 000101              __end_of_sendVSCPDriverNack 25B2  
                                  _bHex 00E5            doModeVerbose@filter_priority 028D  
                                  _crc8 17AE                                    _data 01CF  
                                  _caps 01EB                                    _atoi 329E  
                                  _main 3CDA                                    _init 1A24  
                                  _mode 00E6                                    _itoa 1776  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 2480  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 02FA  
                          _sprintf$2105 0086                            _sprintf$2098 0082  
                          _sprintf$2099 0084            receiveSendMultiEventCANAL@id 007C  
             ECANReceiveMessage@dataLen 000E      __end_of_receiveSendMultiEventCANAL 3B32  
            _receiveSendMultiEventCANAL 39CC                      doModeVerbose@count 02AE  
                 getVSCPFrame@pPriority 0074                      doModeVerbose@value 02B5  
                  __end_of_getVSCPFrame 2110                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 009E  
              ?_receiveVSCPModeCanalMsg 0001                         ?_doModeVscpNode 0001  
                                 _B0CON 000E20                                   l10290 2C0A  
                                 l10292 2C0E                                   l10278 2B7A  
                                 l13104 397C                                   l13112 399A  
                                 _B1CON 000E30                                   l13122 39C0  
                                 l13124 39C2                                   l14100 64FC  
                                 l14012 6226                                   l14004 6204  
                                 l13118 39BC                                   l13070 38C8  
                                 l14110 6538                                   l14030 62AE  
                                 l14006 6208                                   l14014 6238  
                                 l15000 3354                                   l12440 33F0  
                                 l13064 38B6                                   l14120 6576  
                                 l14104 650C                                   _B2CON 000E40  
                                 l13082 38F2                                   l14202 6794  
                                 l14130 65B0                                   l14114 6548  
                                 l14050 637C                                   l14042 6340  
                                 l14026 629C                                   l15012 16A0  
                                 l13092 3932                                   l12428 4514  
                                 l14220 6826                                   l14212 67D0  
                                 l14140 65EC                                   l14124 6586  
                                 l14036 631A                                   l13500 3DFC  
                                 l13166 167E                                   l15102 4A74  
                                 l14302 6B12                                   l14222 6834  
                                 l14134 65C0                                   l14054 63B2  
                                 l14046 636C                                   l14038 632E  
                                 l14310 6B46                                   l15032 3E80  
                                 l15008 1690                                   l14304 6B20  
                                 l14208 67C0                                   l14224 6842  
                                 l14144 65FC                                   l14152 6660  
                                 l14056 63C2                                   l14320 41CC  
                                 l13520 3E30                                   _B3CON 000E50  
                                 l15130 4B40                                   l13098 394E  
                                 l14314 6B60                                   l14322 41D0  
                                 l13530 3E4E                                   l15300 50AE  
                                 l15060 3F4C                                   l15116 4ADA  
                                 l14308 6B38                                   l14260 69A0  
                                 l14236 68DA                                   l14172 66E0  
                                 l14068 6422                                   l14084 648C  
                                 l14412 42B4                                   l14404 42A8  
                                 l14340 421C                                   l13508 3E12  
                                 l15046 3EE6                                   l14246 6928  
                                 l14182 671C                                   l14430 42DA  
                                 l14502 4D3C                                   l13534 3E5A  
                                 l13526 3E44                                   l15400 52C0  
                                 l15312 50EA                                   l15320 5130  
                                 l15304 50B4                                   l15160 4C0A  
                                 l15144 4BA6                                   l15208 30F8  
                                 l15240 16C6                                   l14264 69C6  
                                 l14256 697C                                   l14192 675A  
                                 l14168 66D0                                   l13800 5B80  
                                 l13720 591C                                   l13712 58DA  
                                 l13704 5898                                   l13560 1E6E  
                                 l16200 196C                                   l14344 4222  
                                 l14512 4D70                                   l13528 3E48  
                                 _B4CON 000E60                                   l15074 3FB2  
                                 l15226 3160                                   l14178 670C  
                                 l14442 4304                                   l14354 4238  
                                 l14602 4F9C                                   l13466 3D40  
                                 l13660 1F76                                   l13652 1F50  
                                 l15340 518C                                   l11876 1D4C  
                                 l15180 4C8A                                   l15156 4BF8  
                                 l14188 674A                                   l13812 5BD8  
                                 l14460 434C                                   l14436 42EE  
                                 l14364 4254                                   l14380 425C  
                                 l16140 3C4A                                   l16132 3C04  
                                 l14612 4FBA                                   l14524 4D9C  
                                 l14508 4D60                                   l14620 5030  
                                 l15510 54AE                                   l15422 5310  
                                 l15350 51E2                                   l15238 16BE  
                                 l14286 6A6E                                   l14278 6A2A  
                                 l14294 6AB2                                   l14198 6784  
                                 l13910 5F84                                   l13902 5F38  
                                 l13830 5C94                                   l13822 5C32  
                                 l13806 5BAC                                   l13742 59DA  
                                 l13670 57C2                                   l13558 1E68  
                                 l16206 1988                                   l14454 4334  
                                 l14390 4288                                   l14470 436A  
                                 l14550 4E62                                   l14534 4DC0  
                                 l14630 506A                                   l13664 1F8A  
                                 l13656 1F62                                   l15504 5486  
                                 l15432 5344                                   l15408 52D0  
                                 l15352 51E8                                   l15344 51C0  
                                 l15328 5156                                   l15184 4C9C  
                                 l15168 4C38                                   l15088 4A0E  
                                 l16216 181C                                   l15280 2DCE  
                                 l13840 5CFA                                   l13824 5C3C  
                                 l13816 5BF6                                   l13832 5CA6  
                                 l13760 5A5A                                   l13752 5A24  
                                 l13736 599C                                   l13728 595C  
                                 l14448 431C                                   l14464 435E  
                                 l14392 428E                                   l16144 3C5E  
                                 l16400 18C4                                   l14624 5044  
                                 _B5CON 000E70                                   l14810 29A6  
                                 l15602 5674                                   l15434 5348  
                                 l15426 532E                                   l15370 5234  
                                 l15346 51DA                                   l16250 20B0  
                                 l16170 1924                                   l15282 2DEE  
                                 l14298 6AEE                                   l13922 5FDA  
                                 l14394 4292                                   l14466 4364  
                                 l16306 2E02                                   l14626 5050  
                                 l14490 4CF2                                   l14618 4FD2  
                                 l13498 3DEA                                   l15612 56AE  
                                 l15524 5500                                   l15540 5534  
                                 l15460 53B4                                   l15380 5262  
                                 l15364 5222                                   l15348 51DE  
                                 l16172 192A                                   l13852 5D76  
                                 l13772 5AA2                                   l13764 5A72  
                                 l13756 5A42                                   l13684 57FE  
                                 l14396 4298                                   l16316 2E46  
                                 l14580 4F44                                   l14654 1C22  
                                 l14646 1C14                                   l16510 1838  
                                 l16414 2488                                   l15606 568E  
                                 l15534 5520                                   l15518 54EA  
                                 l15462 53B8                                   l15446 537C  
                                 l15390 5284                                   l15358 5200  
                                 l15294 50A2                                   l15622 56D8  
                                 l13934 6028                                   l13862 5DF2  
                                 l13846 5D38                                   l13838 5CE8  
                                 l14558 4EDA                                   l14494 4D14  
                                 l14824 29BE                                   l16424 24C0  
                                 l15616 56D0                                   l15608 56A0  
                                 l15552 555A                                   l15448 5380  
                                 l15624 56DE                                   l15384 5268  
                                 l15368 5228                                   l15376 524C  
                                 l15296 50A6                                   l15288 5080  
                                 l16272 2414                                   l14904 4900  
                                 l16520 1DE4                                   l15712 2B16  
                                 l13960 60D4                                   l13880 5E6C  
                                 l13856 5DB4                                   l13776 5ABA  
                                 l13768 5A8A                                   l13696 5858  
                                 l16408 18D6                                   l16192 23CC  
                                 l14592 4F7A                                   l14568 4F04  
                                 l14496 4D18                                   l15634 15F4  
                                 l16514 184A                                   l16506 182C  
                                 l16338 1792                                   l16450 1FC8  
                                 l15482 5418                                   l15394 5290  
                                 l15386 5276                                   l15298 50AA  
                                 l16266 240E                                   l14930 49CA  
                                 l16530 1E32                                   l16370 27B8  
                                 l15714 2B2C                                   l15706 2ACA  
                                 l15650 1AF4                                   l15642 1AC4  
                                 l13946 6078                                   l13794 5B54  
                                 l13778 5ACC                                   l16186 2388  
                                 l16508 1834                                   l16460 1FFA  
                                 l16452 1FCC                                   l15572 559C  
                                 l15548 5550                                   l15492 5448  
                                 l15476 53EC                                   l16284 2448  
                                 l16268 2410                                   l14932 49D2  
                                 l16524 1E1E                                   l16540 188A  
                                 l16380 1BC4                                   l13892 5EFE  
                                 l13876 5E5A                                   l13788 5B22  
                                 l14588 4F6A                                   l16470 1CD8  
                                 l15590 55D8                                   l15574 55A2  
                                 l15558 5562                                   l15486 5436  
                                 l15478 53FE                                   l15398 5296  
                                 l14918 4956                                   l16534 186A  
                                 l14950 207A                                   l16382 1BCE  
                                 l15718 2B48                                   l15750 3266  
                                 l15742 322C                                   l15734 31C8  
                                 l13974 6124                                   l13886 5ED8  
                                 l15830 3A8A                                   l15902 3820  
                                 ?_crc8 0067                                   l16448 1FBC  
                                 l16472 1CDC                                   l15592 562E  
                                 l15584 55C4                                   l15568 558A  
                                 l14928 49C6                                   l14880 4864  
                                 l14856 47C6                                   l16528 1E2A  
                                 l14944 201C                                   l16368 2798  
                                 l16376 1BB2                                   l15744 3234  
                                 l13984 617A                                   l13888 5EEC  
                                 l15808 3A5A                                   l16392 18B2  
                                 l16490 1A8A                                   l15498 546C  
                                 l14938 49F0                                   l16538 1886  
                                 l16554 19A2                                   l16562 19E6  
                                 l14962 2230                                   l16378 1BB6  
                                 l15746 324A                                   l15690 308A  
                                 l15850 3AEC                                   l15906 3838  
                                 l15922 1706                                   l14956 161E  
                                 l16476 1CFE                                   l16468 1CCC  
                                 l14892 48B2                                   l14868 4814  
                                 l16548 160C                                   l14948 2054  
                                 l16556 19AA                                   l16564 19EE  
                                 l14972 2268                                   l15772 230E  
                                 l15692 30AA                                   l13996 61C4  
                                 l15836 3AA8                                   l16486 1A7E  
                                 l15598 5650                                   l14982 32A0  
                                 l15774 2316                                   l15854 3B0C  
                                 l15846 3ACC                                   l15918 16E8  
                                 l16488 1A86                                   l14992 32FA  
                                 l14984 32A6                                   l15768 22E8  
                                 l16498 1AA4                                   l14994 3312  
                                 l15778 2324                                   l14996 331A  
                  __size_of_doModeSLCAN 03BE                                   l15996 2F7E  
                                 ?_atoi 0066                                   ?_main 00DE  
                                 ?_init 0001                                   ?_itoa 0070  
                         i1_WriteTimer0 15B0                                   _EEADR 000FA9  
                                 STR_10 7C50                                   STR_11 7C72  
                                 STR_12 7C8A                                   STR_20 7C3B  
                                 STR_13 7C72                                   STR_21 7A62  
                                 STR_30 7CF4                                   STR_14 7BBF  
                                 STR_22 7A76                                   STR_15 7C72  
                                 STR_31 7CF4                                   STR_23 7AB2  
                                 STR_32 7CF4                                   STR_16 7C42  
                                 STR_40 7AD7                                   STR_24 79E5  
                                 STR_17 7C72                                   STR_33 7CF4  
                                 STR_41 7CC3                                   STR_25 7895  
                                 STR_42 7C72                                   STR_50 7B84  
                                 STR_34 7CF4                                   STR_18 7C00  
                                 STR_26 7A4E                                   STR_19 7C72  
                                 STR_35 7CF4                                   STR_43 7CD5  
                                 STR_27 7AC5                                   STR_51 7910  
                                 STR_44 7C72                                   STR_36 7C72  
                                 STR_52 7B84                                   STR_60 7CED  
                                 STR_28 7928                                   STR_61 7C57  
                                 STR_29 7CEA                                   STR_45 7CBE  
                                 STR_53 7772                                   STR_37 770F  
                                 STR_46 7C72                                   STR_54 7B84  
                                 STR_70 7B7C                                   STR_62 7CED  
                                 STR_38 7CE7                                   STR_39 7C72  
                                 STR_71 7C78                                   STR_63 7BDC  
                                 STR_55 7BAE                                   STR_47 7C9B  
                                 STR_48 7C72                                   STR_64 7C57  
                                 STR_80 7CA5                                   STR_56 7B7C  
                                 STR_72 78C7                                   STR_81 7B84  
                                 STR_73 7C57                                   STR_65 7CED  
                                 STR_49 7CA0                                   STR_57 7C78  
                                 STR_82 7910                                   STR_74 7CED  
                                 STR_66 7CE1                                   STR_58 7B3D  
                                 STR_90 7A8A                                   STR_83 7B84  
                                 STR_91 7C57                                   STR_75 7C57  
                                 STR_67 7CCD                                   STR_59 7C57  
                                 STR_68 71A8                                   STR_84 7772  
                                 STR_92 7CED                                   STR_76 7CED  
                                 STR_93 71A8                                   STR_77 71A8  
                                 STR_85 7B84                                   STR_69 7BAD  
                                 STR_94 7C72                                   STR_78 7C72  
                                 STR_86 7940                                   STR_95 7C49  
                                 STR_87 76A9                                   STR_79 7140  
                                 STR_96 7CF4                                   STR_88 7751  
                                 STR_89 7CB4                                   STR_97 6F00  
                                 STR_98 74E3                                   STR_99 7CF4  
          __end_of_printFirmwareVersion 220C                                   _BSEL0 000DF8  
                       __end_of___lldiv 201A                                   ?_utoa 0067  
                                 u20110 330E                         __end_of_calcCRC 1710  
                                 _T0CON 000FD5                                   u20130 333E  
                                 u20050 32BA                                   u20140 3368  
                                 u20117 3308                                   u20070 32D2  
                       __end_of___llmod 1D1E                                   u20137 3338  
                                 u20057 32B4                                   u20090 32F0  
                                 u20147 3362                                   u20077 32CC  
                                 u21134 1AD4                                   u21135 1AD0  
                                 u22120 1946                                   u20097 32EA  
                                 u20185 27F8                                   u22127 1940  
                                 _LATC1 007C59                                   u12555 2BEC  
                                 u22260 2102                                   u22265 20F8  
                                 u22450 1BF6                                   u22457 1BEC  
                                 u21745 2F14                                   u14900 1D3C  
                                 u14920 1D74                                   u14907 1D36  
                                 u18115 5832                                   u18125 587E  
                                 u14927 1D6E                                   u18135 58BE  
                                 u18145 5900                                   u19130 423E  
                                 u15915 4398                                   u18155 5942  
                                 u15916 439E                                   u15925 43CC  
                                 u15917 43AC                                   u18405 5D5E  
                                 u18165 5982                                   u22797 3D4E  
                                 u15926 43D2                                   u15927 43E0  
                                 u18415 5D9C                                   u18175 59C2  
                                 u15945 33CA                                   u18425 5DDA  
                                 u18185 5A00                         __end_of___lwdiv 1AB8  
                                 u15955 33DA                                   u18435 5E18  
                                 u19500 4E2E                                   u15965 33F8  
                                 u18285 5AF2                                   u19510 4E38  
                                 u18375 5CCC                                   _ERRIE 007D1D  
                                 u19520 4E42                                   u19505 4E2C  
                                 u18395 5D20                                   u19515 4E36  
                                 u18725 63E8                                   u19525 4E40  
                                 u18815 6BB0                                   u18825 6686  
                                 u18745 64B2                                   u18665 625E  
                                 u18915 6868                                   u17980 1B72  
                                 u18925 68B0                                   u17990 1BA0  
                                 u18935 6900                            _vscpPriority 003E  
                                 i1l401 018C                                   i1l410 018A  
                                 u17987 1B6C                                   i1l404 018A  
                                 i1l413 017A                                   u17997 1B9A  
                                 i1l416 0196                                   u19865 1770  
                       __end_of___lwmod 185E                                   u19866 1772  
                                 i1l419 01EA                                   i1l429 02DC  
                                 i1l399 0092                         sendCANFrame@dlc 0093  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0063                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B8                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 0032  
               readRegisterExtended@reg 00B8                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 0060                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 2348                                   crc8@m 0069  
                                 _flags 003D                         __end_of_dpowers 6CE2  
                Write_b_eep@GIE_BIT_VAL 0063                         __end_of_isdigit 1686  
                                 _timer 0118                                   atoi@a 006B  
                                 atoi@s 0066                                   main@c 00E4  
                                 _ultoa 2DF2                              Interrupt@c 0020  
            ??_printNodeFirmwareVersion 00BF                        _printErrors$1503 009E  
                      _printErrors$1470 0094                                   tablat 000FF5  
                      _printErrors$1482 0098                        _printErrors$1476 0096  
                      _printErrors$1494 009C                        _printErrors$1488 009A  
               ??_receiveSendEventCANAL 0072             __end_of_sendEscapedUartData 1CBC  
                                 plusw2 000FDB                                   utoa@c 006F  
                                 utoa@v 006D                                   status 000FD8  
                       __end_of_sprintf 56EC                 ??_receiveSendEventSLCAN 0083  
                       __end_of_strichr 189C                         __end_of_strcspn 1A24  
                       __end_of_toupper 1610                         __end_of_stristr 2092  
     __size_of_receivePrintEventVerbose 028C                     doModeVerbose@i_1173 02B4  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1239 02B8  
                   doModeVerbose@p_1264 02BD                     doModeVerbose@p_1179 02B6  
                   doModeVerbose@p_1284 02BF                          WriteUSART@data 0060  
                  _ECANSetOperationMode 1610                            _canInputFifo 01C7  
                       __initialization 1D80                  doModeVerbose@page_1236 02A4  
         receiveSendMultiEventCANAL@dlc 0080                            __end_of_crc8 17E6  
         receiveSendMultiEventCANAL@crc 0081                            __end_of_atoi 3396  
         receiveSendMultiEventCANAL@pos 0082                            __end_of_main 3E66  
                          __end_of_init 1A6E                            __end_of_itoa 17AE  
                          __end_of_utoa 2520                     doModeVerbose@ifmode 02BA  
                            _Read_b_eep 15C2                     doModeVerbose@maskno 02AB  
                      __end_of_Busy_eep 15A8                     doModeVerbose@nodeid 02AF  
                         doModeSLCAN@id 009D                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 00A3                       ??_ECANSendMessage 0072  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00BB  
                                ??_crc8 006A                   getVSCPFrame@pvscptype 0072  
                                ??_atoi 0068                  ??_vscp_restoreDefaults 0065  
                                ??_main 00E3                       readRegister@value 00B9  
                                ??_init 0064                                  ??_itoa 0076  
                                ??_utoa 006D                  doModeVerbose@mask_type 0291  
                         __activetblptr 000002                         _stateVscpDriver 0039  
                     __RegsToCANID@type 0005                    _can_transmitOverruns 0104  
            ECANReceiveMessage@msgFlags 000F                           ?_readRegister 00B6  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1243 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00B9              ECANReceiveMessage@savedPtr 0010  
                                _CANCON 000F6F                        ___llmod@dividend 006D  
                                STR_100 7418                                  STR_101 7CF4  
                                STR_102 757F                                  STR_110 7212  
                                STR_103 7CF4                                  STR_111 75F3  
                                STR_120 7C72                                  STR_112 7CF4  
                                STR_200 78AE                                  STR_104 75CD  
                                STR_105 7CF4                                  STR_201 7C57  
                                STR_121 7C96                                  STR_113 7493  
                                STR_210 71A8                                  STR_114 7CF4  
                                STR_202 7CED                                  STR_122 7CD9  
                                STR_130 7BF0                                  STR_106 7442  
                                STR_203 71A8                                  STR_107 7C72  
                                STR_131 780E                                  STR_115 763D  
                                STR_123 73EC                                  STR_211 7065  
                                STR_116 7CF4                                  STR_132 7CB9  
                                STR_108 7CAA                                  STR_124 7BF8  
                                STR_140 7845                                  STR_220 7244  
                                STR_212 710A                                  STR_204 6F80  
                                STR_109 7CF4                                  STR_141 7A3A  
                                STR_221 77D2                                  STR_133 7793  
                                STR_117 7662                                  STR_125 74BB  
                                STR_213 71AB                                  STR_205 7176  
                                STR_118 7CF4                                  STR_134 7C90  
                                STR_150 7BE8                                  STR_142 7BC8  
                                STR_126 7B66                                  STR_214 7531  
                                STR_230 7337                                  STR_222 7276  
                                STR_206 6FF4                                  STR_215 6E96  
                                STR_127 7C72                                  STR_151 7C5E  
                                STR_143 7BD0                                  STR_207 7958  
                                STR_135 787B                                  STR_119 7558  
                                STR_223 7394                                  STR_231 6D9D  
                                STR_208 7C57                                  STR_160 7C57  
                                STR_152 7CED                                  STR_144 7C6C  
                                STR_136 7BE0                                  STR_128 7BA4  
                                STR_224 78E0                                  STR_216 782A  
                                STR_240 72D9                                  STR_232 6DE9  
                                STR_209 7CED                                  STR_161 7CED  
                                STR_145 7CF2                                  STR_137 7C84  
                                STR_129 7C7E                                  STR_153 7C26  
                                STR_217 73C0                                  STR_225 702D  
                                STR_241 6EBD                                  STR_233 6D50  
                                STR_154 7C57                                  STR_146 7CF0  
                                STR_170 7CDD                                  STR_162 7C1F  
                                STR_250 7B2E                                  STR_226 79A0  
                                STR_234 78F8                                  STR_138 7730  
                                STR_218 7366                                  STR_242 72A8  
                                STR_171 71A8                                  STR_139 7C72  
                                STR_163 7C57                                  STR_155 7CED  
                                STR_147 7C34                                  STR_251 7BD8  
                                STR_227 76EE                                  STR_219 71DF  
                                STR_243 709C                                  STR_235 6D02  
                                STR_148 7C57                                  STR_164 7CED  
                                STR_252 7CF8                                  STR_260 7CF6  
                                STR_156 7BB6                                  STR_172 7B1D  
                                STR_236 7A26                                  STR_180 7A11  
                                STR_228 750A                                  STR_244 6F42  
                                STR_261 71A8                                  STR_165 7CF4  
                                STR_157 7C57                                  STR_181 7C65  
                                STR_173 7C65                                  STR_149 7CED  
                                STR_253 7CE4                                  STR_245 75A6  
                                STR_229 746B                                  STR_237 6E33  
                                _EEDATA 000FA8                                  STR_270 71A8  
                                STR_158 7CED                                  STR_190 7CDD  
                                STR_182 7CDD                                  STR_174 7CDD  
                                STR_254 7CFA                                  STR_262 7B86  
                                STR_166 7B71                                  STR_238 76CC  
                                STR_246 6E7A                                  STR_263 71A8  
                                STR_255 71A8                                  STR_191 71A8  
                                STR_183 71A8                                  STR_175 71A8  
                                STR_167 7CD1                                  STR_159 7C2D  
                                STR_271 7AFB                                  STR_247 7860  
                                STR_239 7308                                  STR_248 71A8  
                                STR_264 7C18                                  STR_256 7B4C  
                                STR_272 7B0C                                  STR_168 7AE9  
                                STR_176 79FB                                  STR_184 79B7  
                                STR_192 7970                                  STR_257 71A8  
                                STR_249 6E7A                                  STR_177 7C65  
                                STR_193 7C08                                  STR_169 7C65  
                                STR_265 7C10                                  STR_185 7C08  
                                STR_194 7CDD                                  STR_186 7CDD  
                                STR_178 7CDD                                  STR_266 7B5A  
                                STR_258 7A9E                                  STR_195 71A8  
                                STR_187 71A8                                  STR_179 71A8  
                                STR_259 7CFC                                  STR_267 7B9A  
                                STR_196 7970                                  STR_268 7B90  
                                STR_188 7988                                  STR_197 7C08  
                                STR_189 7C08                                  STR_269 79CE  
                                STR_198 7CDD                                  STR_199 71A8  
                                _EECON2 000FA7            __end_of_readRegisterExtended 2DF2  
                                _CIOCON 000F73                                  ?_ultoa 0076  
          ??_sendVSCPDriverCommandReply 0070                    __end_of_fifo_getFree 26F6  
                                i1l1503 46C2                                  i1l1504 46DC  
                         ?_init_app_ram 0001                                  i1l1531 1F24  
                                _MDSEL0 007BBE                                  _MDSEL1 007BBF  
                                i1l1526 36DE                                  i1l1472 4590  
                                i1l1482 465E                                  i1l1491 4628  
                                i1l1483 45DE                                  i1l1493 4638  
                                i1l1485 45EC                                  i1l1558 34FC  
                                i1l1559 35B4                                  i1l1495 4648  
                                i1l1487 4600                                  i1l1479 4758  
                                i1l1489 4614                                  i1l1877 1638  
                            _OpenTimer0 1648                                  i1l6450 34CA  
                                i1l6470 359A                                  i1l6458 3506  
                                i1l6482 26AE                                  i1l6468 3590  
                                i1l9550 1EBE                                  i1l9560 1EEE  
                                i1l9552 1EC6                                  i1l9562 1EF4  
                                i1l9554 1ED0                                  i1l9564 1EFA  
                                i1l9556 1EDA                                  i1l9558 1EE4  
                                i1l9568 1F06                                  i1l9584 3660  
                                i1l9920 470E                                  i1l9912 46DE  
                                i1l9832 45BE                                  i1l9816 457E  
                                i1l9840 45CC                                  i1l9826 45A8  
                                i1l9834 45C8                                  i1l9934 4742  
                                i1l9928 472C                                  i1l9884 4672  
                                i1l9894 4692                         _init_app_eeprom 2928  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 000C                  ECANReceiveMessage@mode 0013  
                ECANReceiveMessage@temp 0014                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 0076  
            ??_sendVSCPDriverErrorFrame 006F                       getVSCPFrame@pSize 0075  
                    _doModeVerbose$1204 0295                      _doModeVerbose$1221 029B  
                    _doModeVerbose$1213 0299                      _doModeVerbose$1230 029F  
                    _doModeVerbose$1208 0297                      _doModeVerbose$1226 029D  
                    _doModeVerbose$1255 02A1                      _doModeVerbose$1191 0293  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0069  
                    __size_of_Interrupt 02E2                readRegisterExtended@page 00B6  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0005  
                        getCANFrame@pid 0071                                  ___wmul 1710  
                            _bInitiated 0031                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0068                               ??_calcCRC 006F  
                                _cmdbuf 0127                               ??___llmod 0075  
                      OpenTimer0@config 0060                  receiveSendEventCANAL@i 007A  
                             ??___lwdiv 0064                               ??___lwmod 0064  
         _receivePrintEventVerbose$1352 0099           _receivePrintEventVerbose$1362 009D  
         _receivePrintEventVerbose$1372 00A1           _receivePrintEventVerbose$1357 009B  
         _receivePrintEventVerbose$1367 009F           _receivePrintEventVerbose$1377 00A3  
                                _memcpy 195A                                  _memset 1686  
                                clear_0 1D88                                  clear_1 1D9C  
                                clear_2 1DAE                                  clear_3 1DBA  
                                clear_4 1DD2                           ?_sendCANFrame 008F  
                                _strcat 1BA8                                  _strchr 1D1E  
                                _strcpy 16B4                                  _strlen 191A  
                                _wrkbuf 0177                                  _strtok 2222  
                                _strspn 199C     __size_of_sendVSCPDriverCommandReply 00C4  
                             ??_isdigit 0060                  receiveSendEventSLCAN@i 008B  
                      __end_of_printMDF 2348                            __mediumconst 6C8A  
                        ??_readRegister 00BA                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0062  
                             ??_stristr 0071              ??_sendVSCPModeCapabilities 006F  
            doModeVerbose@mask_priority 0290                        __end_of_strnicmp 1E48  
                            __accesstop 0060                 __end_of__initialization 1DD8  
                  _printFirmwareVersion 2190                   __size_of_getVSCPFrame 007E  
             receiveSendEventCANAL@data 0072                    doModeVerbose@id_1296 02A6  
                            _WriteUSART 15E6                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0196                    _printStatistics$1451 0096  
                  _printStatistics$1445 0094                    _printStatistics$1463 009A  
                  _printStatistics$1457 0098                   _uart_transmitOverruns 0120  
                           ?_Read_b_eep 0060                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 2EC4                              __end_ofPL2 6B80  
                            __end_ofPL4 6B8E                              __end_ofPL6 6BA8  
                            __end_ofPL8 6BF2                          ??_sendCANFrame 0096  
                     __end_of_ReadUSART 1648                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 009C  
                       readRegister@reg 00B6                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00EE                          doModeSLCAN@dlc 00A1  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00B6  
                getVSCPFrame@pvscpclass 007C                         _fifo_canrxcount 0034  
               __end_of_init_app_eeprom 29D4                       __end_of_Interrupt 02FA  
                         ReadUSART@data 0001                      readRegister@nodeid 00BE  
                        _status_led_cnt 0026                      __RegsToCANID@Value 0008  
                            _crc8_table 0300                       __end_of_OpenUSART 1C5C  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C4  
                       setFilter@filter 006A                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 2B6C                              _doModeVscp 41BA  
                               ??_ultoa 007E                            _getVSCPFrame 2092  
                            __pbssBANK0 00E5                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                             ?_Busy_eep 0001                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 0070                            __IT_INT_MASK 002C  
                         setFilter@eidh 006D                           setFilter@eidl 006E  
                          __IT_SAVE_BSR 002D                           setFilter@sidh 006B  
                         setFilter@sidl 006C                        ??_doModeVscpNode 0060  
                            _nTimeStamp 0036             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 23E2                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 002B                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 2520                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 2D10                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0062                          ??__RegsToCANID 0006  
                         ??_Write_b_eep 0063                   sendVSCPFrame@priority 009A  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 0108  
                            _cntTxBytes 0110                      __size_of_printGUID 00EE  
                               i1l13400 01FA                     ?_sendVSCPDriverNack 0001  
                               i1l13410 0298                                 i1l13402 0226  
                               i1l13412 029C                                 i1l13404 0228  
                               i1l13340 007E                                 i1l13414 02C8  
                               i1l13406 025A                                 i1l13350 00C8  
                               i1l13342 008E                                 i1l13334 0034  
                               i1l13416 02CC                                 i1l13408 025E  
                               i1l13424 02DA                                 i1l13360 00FC  
                               i1l13352 00CC                                 i1l13344 009A  
                               i1l13336 003C                                 i1l13418 02CE  
                               i1l13370 012C                                 i1l13354 00D8  
                               i1l13346 00A6                                 i1l13338 0042  
                               i1l13372 0138                                 i1l13364 010E  
                               i1l13356 00E8                                 i1l13348 00B8  
                               i1l13390 019E                                 i1l13382 0168  
                               i1l13366 011A                                 i1l13358 00F0  
                               i1l13392 01C6                                 i1l13384 0172  
                               i1l13376 014A                                 i1l13394 01CE  
                               i1l13386 0182                                 i1l13378 0156  
                               i1l13396 01D6                                 i1l13388 0194  
                               i1l13398 01F2                              _fifo_write 34B8  
                    __size_of_printHelp 01BE                      __size_of_printMode 0076  
                 sendVSCPFrame@vscptype 0098                   __size_of_fifo_getFree 0096  
               doModeVerbose@value_1238 02AD                       sendCANFrame@pdata 0094  
                            _made_table 0124                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 1EB8                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 2D02  
            _sendVSCPDriverCommandReply 2C3E                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 2FC2  
      __size_of_receiveVSCPModeCanalMsg 00EA                  __size_of_doModeVerbose 13AA  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00B6  
                   __size_of_Read_b_eep 0012                              ??_Busy_eep 0060  
      __end_of_sendVSCPDriverErrorFrame 2A90          __size_of_receiveSendEventCANAL 0140  
         __end_of_receiveSendEventCANAL 385E                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 017C  
                       _ECANSendMessage 385E           __end_of_receiveSendEventSLCAN 3CCC  
                               __Hparam 0000                       __end_of_findNodes 319C  
                               __Lparam 0000                       __end_of_fifo_init 190C  
                     __end_of_fifo_read 2C22                           ??_getCANFrame 0071  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 27BC                               ?_printMDF 0001  
                               _bSilent 0033               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 1FA4  
                       __size_of___wmul 0022                                 _calcCRC 16E2  
                       getCANFrame@pdlc 006E                                 ___llmod 1CBC  
                               ___lwdiv 1A6E                               _FIFOEMPTY 007BA7  
                               ___lwmod 1820                   ?_readRegisterExtended 00B6  
           printNodeFirmwareVersion@buf 00C0                    __end_of_init_app_ram 1B50  
                          _fifo_getFree 2660                            init_crc8@crc 0064  
                               __pcinit 1D80                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3CDA                                 __ptext1 15A0  
                               __ptext2 4CB0                                 __ptext3 2348  
                               __ptext4 189C                 receiveSendEventCANAL@id 007B  
                               __ptext5 3B50                                 __ptext6 2DF2  
                               __ptext7 41BA                                 __ptext8 29E0  
                               __ptext9 2C3E                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C3                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 002E  
                       __size_of_strlen 0040                       __end_of_hexpowers 6D02  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6CBA                       __end_of_init_crc8 1EB8  
                               _isdigit 1666          printNodeFirmwareVersion@nodeid 00BF  
                   __end_of_WriteTimer0 15E6                          _nibbleFromChar 189C  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 1776  
                               _sprintf 507A        __end_of_sendVSCPModeCapabilities 2928  
                     __end_of_setFilter 455C                                 _strichr 185E  
                        doModeVerbose@c 02B0                          doModeVerbose@i 02AC  
                        doModeVerbose@p 02BB                                 _strcspn 19E0  
                               _toupper 15FA                             ?_doModeVscp 0001  
                               _stristr 201A                    __size_of_printBinary 004A  
                  end_of_initialization 1DD8                       __end_of_octpowers 6CBA  
                  __size_of_printErrors 02BC                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                             i1u1131_25 361C                               i1u1132_25 362C  
                               memset@c 0062                               i1u1133_25 366A  
                               itoa@val 0072                                 memset@n 0064  
                               memset@p 0066                           __Lmediumconst 6C8A  
                             i1u1171_25 4586                               i1u1171_27 4588  
                  __end_of_sendCANFrame 1820                               i1u1750_20 003C  
                             i1u1750_21 003A                               i1u1751_20 007E  
                             i1u1751_21 007C                               i1u1760_20 0148  
                             i1u1752_20 009A                               i1u1760_21 0146  
                             i1u1752_21 0098                               i1u1761_20 0156  
                             i1u1753_20 00D8                               i1u1761_21 0154  
                             i1u1753_21 00D6                               i1u1770_20 01F2  
                             i1u1762_20 0166                               i1u1754_20 00E8  
                             i1u1770_21 01F0                               i1u1762_21 0164  
                             i1u1754_21 00E6                               i1u1771_20 01FA  
                             i1u1763_20 0172                               i1u1755_20 00FC  
                             i1u1771_21 01F8                               i1u1763_21 0170  
                             i1u1755_21 00FA                               i1u1772_20 0226  
                             i1u1764_20 0182                               i1u1756_20 010C  
                             i1u1772_21 0224                               i1u1764_21 0180  
                             i1u1756_21 010A                               i1u1773_20 025A  
                             i1u1765_20 0194                               i1u1757_20 011A  
                             i1u1773_21 0258                               i1u1765_21 0192  
                             i1u1757_21 0118                               i1u1774_20 0298  
                             i1u1766_20 019E                               i1u1758_20 012A  
                             i1u1774_21 0296                               i1u1766_21 019C  
                             i1u1758_21 0128                               i1u1775_20 02C8  
                             i1u1767_20 01C6                               i1u1759_20 0138  
                             i1u1775_21 02C6                               i1u1767_21 01C4  
                             i1u1759_21 0136                               i1u1776_20 02D8  
                             i1u1768_20 01CE                               i1u1776_21 02D6  
                             i1u1768_21 01CC                               i1u1769_20 01D6  
                             i1u1769_21 01D4                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 328A  
                       ___lldiv@divisor 0064                       __end_of_printHelp 41BA  
                       ___lldiv@counter 0068                       __end_of_printMode 1FA4  
                     ECANSendMessage@id 006A                       ECANSendMessage@pb 0073  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00BF  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 1BA8  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 57BA  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00CE  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 27BC                                 strlen@s 0060  
                            _sequencyno 0038                              _timekeeper 0022  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 2480  
                            findNodes@i 00C9                  __end_of_nibbleFromChar 18DA  
                   __end_of_doModeSLCAN 506E                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 006C  
                            fifo_read@p 006A                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B6  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 39CC  
                  _uart_receiveOverruns 011C                _receivePrintEventVerbose 4768  
                            _vscpNodeId 00E8                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 36E0                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02B1  
                     doModeVerbose@preg 0284                          _init_crc8$2036 0060  
                ??_readRegisterExtended 00BD                          ?_doModeVerbose 0001  
                          ??_Read_b_eep 0062                          ?_sendVSCPFrame 0096  
                        __end_of___wmul 1732                     __size_of_doModeVscp 01B4  
                           _WriteTimer0 15D4                             _Write_b_eep 1742  
                        __end_of_memcpy 199C                          __end_of_memset 16B4  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                               ___DCDelay 01ED  
                        __end_of_strcat 1C00                          __end_of_strchr 1D80  
                        __end_of_strcpy 16E2                          __end_of_strlen 195A  
              doModeVerbose@filter_type 028E                          __end_of_strtok 22B4  
                        __end_of_strspn 19E0                             __end_ofPL10 570A  
                           __end_ofPL20 36F6                             __end_ofPL12 35E4  
                           __end_ofPL30 3478                             __end_ofPL22 3B42  
                           __end_ofPL14 571A                             __end_ofPL40 6C5C  
                           __end_ofPL32 6C28                             __end_ofPL24 437E  
                           __end_ofPL16 33A4                             __end_ofPL50 349A  
                           __end_ofPL42 25C0                             __end_ofPL34 2C3E  
                           __end_ofPL26 6C02                             __end_ofPL18 5740  
                           __end_ofPL60 29E0                             __end_ofPL52 5770  
                           __end_ofPL44 2660                             __end_ofPL36 6C42  
                           __end_ofPL28 6C16                             __end_ofPL70 34AE  
                           __end_ofPL62 5794                             __end_ofPL54 6C8A  
                           __end_ofPL46 3488                             __end_ofPL38 575A  
                           __end_ofPL80 1742                             __end_ofPL72 371E  
                           __end_ofPL64 370A                             __end_ofPL56 2222  
                           __end_ofPL48 6C74                             __end_ofPL90 191A  
                           __end_ofPL82 3CDA                             __end_ofPL74 2708  
                           __end_ofPL66 2ED8                             __end_ofPL58 5786  
                           __end_ofPL92 3B50                             __end_ofPL84 2A9E  
                           __end_ofPL76 57A6                             __end_ofPL68 329E  
                           __end_ofPL94 4768                             __end_ofPL86 2D10  
                           __end_ofPL78 507A                             __end_ofPL96 34B8  
                           __end_ofPL88 57B0                             __end_ofPL98 57BA  
                   start_initialization 1D80                               _ReadUSART 162A  
                       findNodes@nFound 00C7                   doModeVerbose@reg_1237 02A5  
                 doModeVerbose@filterno 02AA                 _receiveVSCPModeCanalMsg 2ED8  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A2  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0067  
            readRegisterExtended@nodeid 00C1                               _OpenUSART 1C00  
                    __end_of_Read_b_eep 15D4                     sendVSCPFrame@nodeid 0099  
                       ___llmod@divisor 0071                   __size_of_readRegister 00B4  
                       ___llmod@counter 0075                       __size_of_Busy_eep 0006  
                 ECANReceiveMessage@ptr 0015                     __size_of_fifo_write 00FE  
                 __size_of_init_app_ram 004E                          _findNodes$1547 00C5  
              __end_of__ECANPointBuffer 1F2E                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 23E2                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 4CB0               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 475A                                ??_memcpy 0066  
                   readRegister@timeout 00B7                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0292  
                 __end_ofi1_WriteTimer0 15C2                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 1666                                ??_strtok 0070  
                              ??_strspn 006A                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0022                              ?_ReadUSART 0001  
                       __IT_SAVE_STATUS 0126                           __pcstackBANK0 0060  
                         __pcstackBANK2 0280                     __end_of__stringdata 7CFE  
                          _readRegister 2708                   __size_of_sendCANFrame 003A  
                          _isdigit$2953 0061             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006A  
                     sendVSCPFrame@size 009B                            _init_app_ram 1B02  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK1 01EB  
                         __IT_SAVE_WREG 002E                        _ledFunctionality 0035  
              doModeVerbose@nodeid_1250 02B3                doModeVerbose@nodeid_1235 028C  
                          setFilter@val 0060                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 00CA           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 3E66                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 009E                          _ECANInitialize 2110  
                     _sendVSCPDriverAck 25C0                           __pmediumconst 6C8A  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 30AE  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 18DA                               _fifo_read 2B6C  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0094  
                           __pintcodelo 0018                            _sendCANFrame 17E6  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0096  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00BF                     _sendEscapedUartData 1C5C  
                             _hexpowers 6CE2                        ___lwdiv@quotient 0065  
                             _init_crc8 1E48                   __size_of__RegsToCANID 00FC  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 010C  
                          ??_doModeVscp 00B7                                ?_strcspn 0066  
                              ?_toupper 0001                                ?_stristr 006D  
                    __end_of_WriteUSART 15FA                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                         _can_inputBuffer 0400  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0096  
                             _setFilter 437E                             strnicmp@len 0068  
                             _octpowers 6C8A                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 2190  
             __end_of_sendVSCPDriverAck 2652                                i1u632_25 34D8  
                              i1u633_25 34E8                                i1u635_25 357E  
                              i1u637_25 2686                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 371E                        ECANSendMessage@i 008C  
                      ECANSendMessage@j 0087                    ?_sendEscapedUartData 006C  
                 _receiveSendEventSLCAN 3B50                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007B                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0070                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006E  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 319C                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C4  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 3FFC  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 1F2E                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 436E                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 3464                               _putsUSART 1B50  
                           __stringdata 6D02                       ___wmul@multiplier 0060  
                          __RegsToCANID 35E4                               _vscpClass 003A  
               ??_writeRegisterExtended 00BD                         Write_b_eep@badd 0060  
                       Write_b_eep@bdat 0062                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0094  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0073  
                         ??_printBinary 0061                        doModeVerbose@reg 02B2  
                         ??_printErrors 0094                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 0037  
             writeRegisterExtended@page 00B6                                ___DCByte 002F  
  __end_of_receiveVSCPModeMultiCanalMsg 15A0   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 159E                             ??_Interrupt 0017  
               __end_of_printStatistics 3FFC                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B9                                _Busy_eep 15A2  
              __size_of_init_app_eeprom 00AC                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C8  
          __end_of_vscp_restoreDefaults 15B0                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 007C         __end_of_receiveVSCPModeCanalMsg 2FC2  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000A                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 35B6                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                          ?_Write_b_eep 0060                              ?_putsUSART 0061  
                       fifo_read@nbytes 0064                              sprintf@idx 0081  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 2872  
                              __ptext11 159E                                __ptext20 17AE  
                              __ptext12 2ED8                                __ptext21 1E48  
                              __ptext13 195A                                __ptext30 319C  
                              __ptext22 57BA                                __ptext14 25C0  
                              __ptext31 2A9E                                __ptext23 437E  
                              __ptext15 2520                                __ptext40 49F4  
                              __ptext32 1BA8                                __ptext24 2FC2  
                              __ptext16 16E2                                __ptext41 3E66  
                              __ptext33 2708                                __ptext25 1AB8  
                              __ptext17 371E                                __ptext50 15FA  
                              __ptext42 329E                                __ptext34 27BC  
                              __ptext26 2D10                                __ptext18 39CC  
                              __ptext51 191A                                __ptext43 2222  
                              __ptext35 17E6                                __ptext27 16B4  
                              __ptext19 1C5C                                __ptext60 1666  
                              __ptext52 4768                                __ptext44 19E0  
                              __ptext36 385E                                __ptext28 30AE  
                              __ptext61 2190                                __ptext53 2092  
                              __ptext45 199C                                __ptext37 33A4  
                              __ptext29 22B4                                __ptext70 2110  
                              __ptext62 1776                                __ptext54 23E2  
                              __ptext46 1D1E                                __ptext38 1686  
                              __ptext71 1610                                __ptext63 2480  
                              __ptext55 2B6C                                __ptext47 201A  
                              __ptext39 3FFC                                __ptext80 15C2  
                              __ptext72 1648                                __ptext64 1820  
                              __ptext56 507A                                __ptext48 185E  
                              __ptext81 18DA                                __ptext73 1C00  
                              __ptext65 1A6E                                __ptext57 1710  
                              __ptext49 1DE2                                __ptext74 15D4  
                              __ptext66 1F2E                                __ptext58 1CBC  
                              __ptext83 15B0                                __ptext75 15A8  
                              __ptext67 1B50                                __ptext59 1FA4  
                              __ptext84 2660                                __ptext76 2928  
                              __ptext68 15E6                                __ptext85 455C  
                              __ptext77 1742                                __ptext69 1A24  
                              __ptext86 35E4                                __ptext78 15A2  
                              __ptext87 1EB8                                __ptext79 1B02  
                              __ptext88 34B8                                __ptext89 162A  
              receiveSendEventCANAL@dlc 007F                receiveSendEventCANAL@crc 0080  
                        printMDF@nodeid 00BF                           ?_getVSCPFrame 0072  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C3                     __end_of_printBinary 1B02  
                         __size_of_crc8 0038                           __size_of_atoi 00F8  
                         __size_of_main 018C                           __size_of_init 004A  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 4CB0                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066              __size_of_sendVSCPDriverAck 0092  
        receiveSendMultiEventCANAL@data 0072                  ?_receiveSendEventSLCAN 0001  
              _printNodeFirmwareVersion 2A9E                     ECANSendMessage@data 006E  
              ECANSendMessage@tempBSEL0 0088                                _printMDF 22B4  
                             printMDF@i 00C3                               printMDF@p 00C1  
                          ?_getCANFrame 006E                     ECANSendMessage@mode 0085  
                   ECANSendMessage@temp 008B                       ?__ECANPointBuffer 0001  
          ??_receiveSendMultiEventCANAL 0072                                atoi@sign 006A  
                           ??_findNodes 00C5                            ?_doModeSLCAN 0001  
                           ??_fifo_init 0066                             ??_fifo_read 0066  
                              _vscpData 01DF           __size_of_readRegisterExtended 00E2  
                              main@argc 00DE                                main@argv 00E0  
                              _vscpSize 00E9                      ??__ECANPointBuffer 0004  
                              _vscpType 003F                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006F                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A3                                _strnicmp 1DE2  
                      init_app_eeprom@i 0064             writeRegisterExtended@nodeid 00C1  
                         Interrupt@fail 0021                         _serialInputFifo 01D7  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 0060  
                   ECANReceiveMessage@i 0012                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A5  
                              itoa@base 0074                                isdigit@c 0062  
                    _ECANReceiveMessage 455C                                memset@p1 0060  
                           ??_init_crc8 0060                               ultoa@base 007C  
                        ??_getVSCPFrame 0078               __size_of_hexStringToBytes 009A  
                       sendVSCPFrame@id 00B2                                intlevel1 0000  
                             sprintf@ap 0088                               sprintf@sp 0076  
                  hexStringToBytes@size 0066                               strchr@chr 0062  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 008A  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 000A                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00C0  
   __size_of_receiveSendMultiEventCANAL 0166                           fifo_getFree@f 0001  
                             strcspn@s1 0066                               strcspn@s2 0068  
    receiveSendMultiEventCANAL@msgcount 007A                 ECANSendMessage@msgFlags 0071  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008D                       ??_init_app_eeprom 0064  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 00BF  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 29E0                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0070                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 0010                             ??_putsUSART 0063  
                              utoa@base 006B                                ultoa@buf 0076  
                              ultoa@val 0078                           fifo_init@size 0064  
                              sprintf@c 0091                                sprintf@f 0078  
                   hexStringToBytes@buf 0064                                strcat@cp 0064  
                   hexStringToBytes@len 006C                          _doModeVscpNode 15A0  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 49F4  
                ECANSendMessage@buffers 0086                        ___lldiv@quotient 0069  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 162A  
                  _vscp_restoreDefaults 15A8                            printGUID@buf 00C0  
                              strcpy@cp 0064                                strlen@cp 0062  
                              strcpy@to 0060                         ___lwmod@counter 0064  
                              strcspn@i 006A                                toupper@c 0060  
                           _printBinary 1AB8                                strtok@s1 006C  
                              strtok@s2 006E                                strspn@s1 0066  
                              strspn@s2 0068                              _RXM1EXIDEN 0078EB  
                              strtok@sp 0028                  ECANSendMessage@tempPtr 0089  
                           _printErrors 49F4                            fifo_init@buf 0062  
                          fifo_read@buf 0062           sendVSCPDriverCommandReply@crc 0071  
                          __CANIDToRegs 33A4                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 002A               readRegisterExtended@value 00BB  
              _sendVSCPModeCapabilities 2872                __size_of_ECANSendMessage 016E  
