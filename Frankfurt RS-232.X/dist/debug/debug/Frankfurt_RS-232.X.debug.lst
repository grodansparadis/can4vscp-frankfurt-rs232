

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Mar 16 21:32:59 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   110                           	psect	pa_nodes,global,class=CODE,delta=1
   111  0000                     tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           prodh	equ	0xFF4
   116                           prodl	equ	0xFF3
   117                           intcon	equ	0xFF2
   118                           indf0	equ	0xFEF
   119                           fsr0h	equ	0xFEA
   120                           fsr0l	equ	0xFE9
   121                           wreg	equ	0xFE8
   122                           indf1	equ	0xFE7
   123                           postinc1	equ	0xFE6
   124                           postdec1	equ	0xFE5
   125                           fsr1h	equ	0xFE2
   126                           fsr1l	equ	0xFE1
   127                           indf2	equ	0xFDF
   128                           postinc2	equ	0xFDE
   129                           postdec2	equ	0xFDD
   130                           plusw2	equ	0xFDB
   131                           fsr2h	equ	0xFDA
   132                           fsr2l	equ	0xFD9
   133                           status	equ	0xFD8
   134                           
   135                           	psect	mediumconst
   136  006CB4                     __pmediumconst:
   137                           	opt stack 0
   138  006CB4                     _octpowers:
   139                           	opt stack 0
   140  006CB4  0001               	dw	1
   141  006CB6  0000               	dw	0
   142  006CB8  0008               	dw	8
   143  006CBA  0000               	dw	0
   144  006CBC  0040               	dw	64
   145  006CBE  0000               	dw	0
   146  006CC0  0200               	dw	512
   147  006CC2  0000               	dw	0
   148  006CC4  1000               	dw	4096
   149  006CC6  0000               	dw	0
   150  006CC8  8000               	dw	32768
   151  006CCA  0000               	dw	0
   152  006CCC  0000               	dw	0
   153  006CCE  0004               	dw	4
   154  006CD0  0000               	dw	0
   155  006CD2  0020               	dw	32
   156  006CD4  0000               	dw	0
   157  006CD6  0100               	dw	256
   158  006CD8  0000               	dw	0
   159  006CDA  0800               	dw	2048
   160  006CDC  0000               	dw	0
   161  006CDE  4000               	dw	16384
   162  006CE0  0000               	dw	0
   163  006CE2  0000               	dw	0
   164  006CE4                     __end_of_octpowers:
   165                           	opt stack 0
   166  006CE4                     _dpowers:
   167                           	opt stack 0
   168  006CE4  0001               	dw	1
   169  006CE6  0000               	dw	0
   170  006CE8  000A               	dw	10
   171  006CEA  0000               	dw	0
   172  006CEC  0064               	dw	100
   173  006CEE  0000               	dw	0
   174  006CF0  03E8               	dw	1000
   175  006CF2  0000               	dw	0
   176  006CF4  2710               	dw	10000
   177  006CF6  0000               	dw	0
   178  006CF8  86A0               	dw	34464
   179  006CFA  0001               	dw	1
   180  006CFC  4240               	dw	16960
   181  006CFE  000F               	dw	15
   182  006D00  9680               	dw	38528
   183  006D02  0098               	dw	152
   184  006D04  E100               	dw	57600
   185  006D06  05F5               	dw	1525
   186  006D08  CA00               	dw	51712
   187  006D0A  3B9A               	dw	15258
   188  006D0C                     __end_of_dpowers:
   189                           	opt stack 0
   190  006D0C                     _hexpowers:
   191                           	opt stack 0
   192  006D0C  0001               	dw	1
   193  006D0E  0000               	dw	0
   194  006D10  0010               	dw	16
   195  006D12  0000               	dw	0
   196  006D14  0100               	dw	256
   197  006D16  0000               	dw	0
   198  006D18  1000               	dw	4096
   199  006D1A  0000               	dw	0
   200  006D1C  0000               	dw	0
   201  006D1E  0001               	dw	1
   202  006D20  0000               	dw	0
   203  006D22  0010               	dw	16
   204  006D24  0000               	dw	0
   205  006D26  0100               	dw	256
   206  006D28  0000               	dw	0
   207  006D2A  1000               	dw	4096
   208  006D2C                     __end_of_hexpowers:
   209                           	opt stack 0
   210  0000                     _BRGCON1	set	3952
   211  0000                     _BRGCON2	set	3953
   212  0000                     _BRGCON3	set	3954
   213  0000                     _BSEL0	set	3576
   214  0000                     _CANCON	set	3951
   215  0000                     _CIOCON	set	3955
   216  0000                     _COMSTATbits	set	3956
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _OSCCONbits	set	4051
   227  0000                     _OSCTUNEbits	set	3995
   228  0000                     _PIE1bits	set	3997
   229  0000                     _PIR1bits	set	3998
   230  0000                     _PIR2bits	set	4001
   231  0000                     _RCREG	set	4014
   232  0000                     _RCSTA	set	4011
   233  0000                     _RCSTAbits	set	4011
   234  0000                     _RXB1CONbits	set	3920
   235  0000                     _RXERRCNT	set	3957
   236  0000                     _RXF0EIDH	set	3842
   237  0000                     _RXF0EIDL	set	3843
   238  0000                     _RXF0SIDH	set	3840
   239  0000                     _RXF0SIDL	set	3841
   240  0000                     _RXF10EIDH	set	3446
   241  0000                     _RXF10EIDL	set	3447
   242  0000                     _RXF10SIDH	set	3444
   243  0000                     _RXF10SIDL	set	3445
   244  0000                     _RXF11EIDH	set	3450
   245  0000                     _RXF11EIDL	set	3451
   246  0000                     _RXF11SIDH	set	3448
   247  0000                     _RXF11SIDL	set	3449
   248  0000                     _RXF12EIDH	set	3458
   249  0000                     _RXF12EIDL	set	3459
   250  0000                     _RXF12SIDH	set	3456
   251  0000                     _RXF12SIDL	set	3457
   252  0000                     _RXF13EIDH	set	3462
   253  0000                     _RXF13EIDL	set	3463
   254  0000                     _RXF13SIDH	set	3460
   255  0000                     _RXF13SIDL	set	3461
   256  0000                     _RXF14EIDH	set	3466
   257  0000                     _RXF14EIDL	set	3467
   258  0000                     _RXF14SIDH	set	3464
   259  0000                     _RXF14SIDL	set	3465
   260  0000                     _RXF15EIDH	set	3474
   261  0000                     _RXF15EIDL	set	3475
   262  0000                     _RXF15SIDH	set	3472
   263  0000                     _RXF15SIDL	set	3473
   264  0000                     _RXF1EIDH	set	3846
   265  0000                     _RXF1EIDL	set	3847
   266  0000                     _RXF1SIDH	set	3844
   267  0000                     _RXF1SIDL	set	3845
   268  0000                     _RXF2EIDH	set	3850
   269  0000                     _RXF2EIDL	set	3851
   270  0000                     _RXF2SIDH	set	3848
   271  0000                     _RXF2SIDL	set	3849
   272  0000                     _RXF3EIDH	set	3854
   273  0000                     _RXF3EIDL	set	3855
   274  0000                     _RXF3SIDH	set	3852
   275  0000                     _RXF3SIDL	set	3853
   276  0000                     _RXF4EIDH	set	3858
   277  0000                     _RXF4EIDL	set	3859
   278  0000                     _RXF4SIDH	set	3856
   279  0000                     _RXF4SIDL	set	3857
   280  0000                     _RXF5EIDH	set	3862
   281  0000                     _RXF5EIDL	set	3863
   282  0000                     _RXF5SIDH	set	3860
   283  0000                     _RXF5SIDL	set	3861
   284  0000                     _RXF6EIDH	set	3426
   285  0000                     _RXF6EIDL	set	3427
   286  0000                     _RXF6SIDH	set	3424
   287  0000                     _RXF6SIDL	set	3425
   288  0000                     _RXF7EIDH	set	3430
   289  0000                     _RXF7EIDL	set	3431
   290  0000                     _RXF7SIDH	set	3428
   291  0000                     _RXF7SIDL	set	3429
   292  0000                     _RXF8EIDH	set	3434
   293  0000                     _RXF8EIDL	set	3435
   294  0000                     _RXF8SIDH	set	3432
   295  0000                     _RXF8SIDL	set	3433
   296  0000                     _RXF9EIDH	set	3442
   297  0000                     _RXF9EIDL	set	3443
   298  0000                     _RXF9SIDH	set	3440
   299  0000                     _RXF9SIDL	set	3441
   300  0000                     _RXFBCON0	set	3552
   301  0000                     _RXFBCON1	set	3553
   302  0000                     _RXFBCON2	set	3554
   303  0000                     _RXFBCON3	set	3555
   304  0000                     _RXFBCON4	set	3556
   305  0000                     _RXFBCON5	set	3557
   306  0000                     _RXFBCON6	set	3558
   307  0000                     _RXFBCON7	set	3559
   308  0000                     _RXFCON0	set	3540
   309  0000                     _RXFCON1	set	3541
   310  0000                     _RXM0EIDH	set	3866
   311  0000                     _RXM0EIDL	set	3867
   312  0000                     _RXM0SIDL	set	3865
   313  0000                     _RXM1EIDH	set	3870
   314  0000                     _RXM1EIDL	set	3871
   315  0000                     _RXM1SIDL	set	3869
   316  0000                     _SPBRG	set	4015
   317  0000                     _SPBRGH	set	4016
   318  0000                     _T0CON	set	4053
   319  0000                     _T0CONbits	set	4053
   320  0000                     _TMR0H	set	4055
   321  0000                     _TMR0L	set	4054
   322  0000                     _TRISBbits	set	3987
   323  0000                     _TRISCbits	set	3988
   324  0000                     _TXERRCNT	set	3958
   325  0000                     _TXREG	set	4013
   326  0000                     _TXSTA	set	4012
   327  0000                     _TXSTAbits	set	4012
   328  0000                     _B0RXFUL	set	28935
   329  0000                     _B0TXEN	set	28610
   330  0000                     _B1RXFUL	set	29063
   331  0000                     _B1TXEN	set	28611
   332  0000                     _B2RXFUL	set	29191
   333  0000                     _B2TXEN	set	28612
   334  0000                     _B3RXFUL	set	29319
   335  0000                     _B3TXEN	set	28613
   336  0000                     _B4RXFUL	set	29447
   337  0000                     _B4TXEN	set	28614
   338  0000                     _B5RXFUL	set	29575
   339  0000                     _B5TXEN	set	28615
   340  0000                     _ERRIE	set	32029
   341  0000                     _FIFOEMPTY	set	31655
   342  0000                     _IRXIF	set	32039
   343  0000                     _LATC1	set	31833
   344  0000                     _MDSEL0	set	31678
   345  0000                     _MDSEL1	set	31679
   346  0000                     _PEIE	set	32662
   347  0000                     _RCIE	set	31981
   348  0000                     _RCIF	set	31989
   349  0000                     _RCIP	set	31997
   350  0000                     _RXB0FILHIT0	set	31488
   351  0000                     _RXB0FUL	set	31495
   352  0000                     _RXB0IF	set	32032
   353  0000                     _RXB0OVFL	set	31655
   354  0000                     _RXB1IF	set	32033
   355  0000                     _RXB1OVFL	set	31654
   356  0000                     _RXBnIE	set	32025
   357  0000                     _RXBnIF	set	32033
   358  0000                     _RXM0EXIDM	set	30923
   359  0000                     _RXM1EXIDEN	set	30955
   360  0000                     _B0CON	set	3616
   361  0000                     _B1CON	set	3632
   362  0000                     _B2CON	set	3648
   363  0000                     _B3CON	set	3664
   364  0000                     _B4CON	set	3680
   365  0000                     _B5CON	set	3696
   366  0000                     _RXB0CON	set	3936
   367  0000                     _RXB1CON	set	3920
   368  0000                     _RXM0SIDH	set	3864
   369  0000                     _RXM1SIDH	set	3868
   370  0000                     _TXB0CON	set	3904
   371  0000                     _TXB1CON	set	3888
   372  0000                     _TXB2CON	set	3872
   373  006D2C                     __stringdata:
   374                           	opt stack 0
   375  006D2C                     STR_227:
   376  006D2C  20                 	db	32
   377  006D2D  20                 	db	32
   378  006D2E  20                 	db	32
   379  006D2F  20                 	db	32
   380  006D30  20                 	db	32
   381  006D31  20                 	db	32
   382  006D32  20                 	db	32
   383  006D33  20                 	db	32
   384  006D34  20                 	db	32
   385  006D35  46                 	db	70	;'F'
   386  006D36  6F                 	db	111	;'o'
   387  006D37  72                 	db	114	;'r'
   388  006D38  6D                 	db	109	;'m'
   389  006D39  61                 	db	97	;'a'
   390  006D3A  74                 	db	116	;'t'
   391  006D3B  3A                 	db	58	;':'
   392  006D3C  20                 	db	32
   393  006D3D  66                 	db	102	;'f'
   394  006D3E  69                 	db	105	;'i'
   395  006D3F  6C                 	db	108	;'l'
   396  006D40  74                 	db	116	;'t'
   397  006D41  65                 	db	101	;'e'
   398  006D42  72                 	db	114	;'r'
   399  006D43  20                 	db	32
   400  006D44  66                 	db	102	;'f'
   401  006D45  69                 	db	105	;'i'
   402  006D46  6C                 	db	108	;'l'
   403  006D47  74                 	db	116	;'t'
   404  006D48  65                 	db	101	;'e'
   405  006D49  72                 	db	114	;'r'
   406  006D4A  6E                 	db	110	;'n'
   407  006D4B  6F                 	db	111	;'o'
   408  006D4C  2C                 	db	44
   409  006D4D  70                 	db	112	;'p'
   410  006D4E  72                 	db	114	;'r'
   411  006D4F  69                 	db	105	;'i'
   412  006D50  6F                 	db	111	;'o'
   413  006D51  2C                 	db	44
   414  006D52  63                 	db	99	;'c'
   415  006D53  6C                 	db	108	;'l'
   416  006D54  61                 	db	97	;'a'
   417  006D55  73                 	db	115	;'s'
   418  006D56  73                 	db	115	;'s'
   419  006D57  2C                 	db	44
   420  006D58  74                 	db	116	;'t'
   421  006D59  79                 	db	121	;'y'
   422  006D5A  70                 	db	112	;'p'
   423  006D5B  65                 	db	101	;'e'
   424  006D5C  2C                 	db	44
   425  006D5D  6E                 	db	110	;'n'
   426  006D5E  6F                 	db	111	;'o'
   427  006D5F  64                 	db	100	;'d'
   428  006D60  65                 	db	101	;'e'
   429  006D61  69                 	db	105	;'i'
   430  006D62  64                 	db	100	;'d'
   431  006D63  20                 	db	32
   432  006D64  20                 	db	32
   433  006D65  28                 	db	40
   434  006D66  66                 	db	102	;'f'
   435  006D67  69                 	db	105	;'i'
   436  006D68  6C                 	db	108	;'l'
   437  006D69  74                 	db	116	;'t'
   438  006D6A  65                 	db	101	;'e'
   439  006D6B  72                 	db	114	;'r'
   440  006D6C  6E                 	db	110	;'n'
   441  006D6D  6F                 	db	111	;'o'
   442  006D6E  20                 	db	32
   443  006D6F  3D                 	db	61	;'='
   444  006D70  20                 	db	32
   445  006D71  30                 	db	48	;'0'
   446  006D72  2D                 	db	45
   447  006D73  31                 	db	49	;'1'
   448  006D74  35                 	db	53	;'5'
   449  006D75  29                 	db	41
   450  006D76  2E                 	db	46
   451  006D77  0D                 	db	13
   452  006D78  0A                 	db	10
   453  006D79  00                 	db	0
   454  006D7A                     STR_225:
   455  006D7A  49                 	db	73	;'I'
   456  006D7B  4E                 	db	78	;'N'
   457  006D7C  46                 	db	70	;'F'
   458  006D7D  4F                 	db	79	;'O'
   459  006D7E  20                 	db	32
   460  006D7F  2D                 	db	45
   461  006D80  20                 	db	32
   462  006D81  47                 	db	71	;'G'
   463  006D82  65                 	db	101	;'e'
   464  006D83  74                 	db	116	;'t'
   465  006D84  20                 	db	32
   466  006D85  69                 	db	105	;'i'
   467  006D86  6E                 	db	110	;'n'
   468  006D87  66                 	db	102	;'f'
   469  006D88  6F                 	db	111	;'o'
   470  006D89  20                 	db	32
   471  006D8A  61                 	db	97	;'a'
   472  006D8B  62                 	db	98	;'b'
   473  006D8C  6F                 	db	111	;'o'
   474  006D8D  75                 	db	117	;'u'
   475  006D8E  74                 	db	116	;'t'
   476  006D8F  20                 	db	32
   477  006D90  61                 	db	97	;'a'
   478  006D91  6E                 	db	110	;'n'
   479  006D92  20                 	db	32
   480  006D93  65                 	db	101	;'e'
   481  006D94  78                 	db	120	;'x'
   482  006D95  69                 	db	105	;'i'
   483  006D96  73                 	db	115	;'s'
   484  006D97  74                 	db	116	;'t'
   485  006D98  65                 	db	101	;'e'
   486  006D99  6E                 	db	110	;'n'
   487  006D9A  74                 	db	116	;'t'
   488  006D9B  20                 	db	32
   489  006D9C  6E                 	db	110	;'n'
   490  006D9D  6F                 	db	111	;'o'
   491  006D9E  64                 	db	100	;'d'
   492  006D9F  65                 	db	101	;'e'
   493  006DA0  20                 	db	32
   494  006DA1  6F                 	db	111	;'o'
   495  006DA2  6E                 	db	110	;'n'
   496  006DA3  20                 	db	32
   497  006DA4  74                 	db	116	;'t'
   498  006DA5  68                 	db	104	;'h'
   499  006DA6  65                 	db	101	;'e'
   500  006DA7  20                 	db	32
   501  006DA8  62                 	db	98	;'b'
   502  006DA9  75                 	db	117	;'u'
   503  006DAA  73                 	db	115	;'s'
   504  006DAB  20                 	db	32
   505  006DAC  28                 	db	40
   506  006DAD  46                 	db	70	;'F'
   507  006DAE  6F                 	db	111	;'o'
   508  006DAF  72                 	db	114	;'r'
   509  006DB0  6D                 	db	109	;'m'
   510  006DB1  61                 	db	97	;'a'
   511  006DB2  74                 	db	116	;'t'
   512  006DB3  3A                 	db	58	;':'
   513  006DB4  20                 	db	32
   514  006DB5  69                 	db	105	;'i'
   515  006DB6  6E                 	db	110	;'n'
   516  006DB7  66                 	db	102	;'f'
   517  006DB8  6F                 	db	111	;'o'
   518  006DB9  20                 	db	32
   519  006DBA  6E                 	db	110	;'n'
   520  006DBB  69                 	db	105	;'i'
   521  006DBC  63                 	db	99	;'c'
   522  006DBD  6B                 	db	107	;'k'
   523  006DBE  6E                 	db	110	;'n'
   524  006DBF  61                 	db	97	;'a'
   525  006DC0  6D                 	db	109	;'m'
   526  006DC1  65                 	db	101	;'e'
   527  006DC2  29                 	db	41
   528  006DC3  2E                 	db	46
   529  006DC4  0D                 	db	13
   530  006DC5  0A                 	db	10
   531  006DC6  00                 	db	0
   532  006DC7                     STR_229:
   533  006DC7  20                 	db	32
   534  006DC8  20                 	db	32
   535  006DC9  20                 	db	32
   536  006DCA  20                 	db	32
   537  006DCB  20                 	db	32
   538  006DCC  20                 	db	32
   539  006DCD  20                 	db	32
   540  006DCE  46                 	db	70	;'F'
   541  006DCF  6F                 	db	111	;'o'
   542  006DD0  72                 	db	114	;'r'
   543  006DD1  6D                 	db	109	;'m'
   544  006DD2  61                 	db	97	;'a'
   545  006DD3  74                 	db	116	;'t'
   546  006DD4  3A                 	db	58	;':'
   547  006DD5  20                 	db	32
   548  006DD6  6D                 	db	109	;'m'
   549  006DD7  61                 	db	97	;'a'
   550  006DD8  73                 	db	115	;'s'
   551  006DD9  6B                 	db	107	;'k'
   552  006DDA  20                 	db	32
   553  006DDB  6D                 	db	109	;'m'
   554  006DDC  61                 	db	97	;'a'
   555  006DDD  73                 	db	115	;'s'
   556  006DDE  6B                 	db	107	;'k'
   557  006DDF  6E                 	db	110	;'n'
   558  006DE0  6F                 	db	111	;'o'
   559  006DE1  2C                 	db	44
   560  006DE2  70                 	db	112	;'p'
   561  006DE3  72                 	db	114	;'r'
   562  006DE4  69                 	db	105	;'i'
   563  006DE5  6F                 	db	111	;'o'
   564  006DE6  2C                 	db	44
   565  006DE7  63                 	db	99	;'c'
   566  006DE8  6C                 	db	108	;'l'
   567  006DE9  61                 	db	97	;'a'
   568  006DEA  73                 	db	115	;'s'
   569  006DEB  73                 	db	115	;'s'
   570  006DEC  2C                 	db	44
   571  006DED  74                 	db	116	;'t'
   572  006DEE  79                 	db	121	;'y'
   573  006DEF  70                 	db	112	;'p'
   574  006DF0  65                 	db	101	;'e'
   575  006DF1  2C                 	db	44
   576  006DF2  6E                 	db	110	;'n'
   577  006DF3  6F                 	db	111	;'o'
   578  006DF4  64                 	db	100	;'d'
   579  006DF5  65                 	db	101	;'e'
   580  006DF6  69                 	db	105	;'i'
   581  006DF7  64                 	db	100	;'d'
   582  006DF8  20                 	db	32
   583  006DF9  28                 	db	40
   584  006DFA  6D                 	db	109	;'m'
   585  006DFB  61                 	db	97	;'a'
   586  006DFC  73                 	db	115	;'s'
   587  006DFD  6B                 	db	107	;'k'
   588  006DFE  6E                 	db	110	;'n'
   589  006DFF  6F                 	db	111	;'o'
   590  006E00  20                 	db	32
   591  006E01  3D                 	db	61	;'='
   592  006E02  20                 	db	32
   593  006E03  30                 	db	48	;'0'
   594  006E04  20                 	db	32
   595  006E05  6F                 	db	111	;'o'
   596  006E06  72                 	db	114	;'r'
   597  006E07  20                 	db	32
   598  006E08  31                 	db	49	;'1'
   599  006E09  29                 	db	41
   600  006E0A  2E                 	db	46
   601  006E0B  0D                 	db	13
   602  006E0C  0A                 	db	10
   603  006E0D  00                 	db	0
   604  006E0E                     STR_223:
   605  006E0E  52                 	db	82	;'R'
   606  006E0F  52                 	db	82	;'R'
   607  006E10  45                 	db	69	;'E'
   608  006E11  47                 	db	71	;'G'
   609  006E12  20                 	db	32
   610  006E13  2D                 	db	45
   611  006E14  20                 	db	32
   612  006E15  52                 	db	82	;'R'
   613  006E16  65                 	db	101	;'e'
   614  006E17  61                 	db	97	;'a'
   615  006E18  64                 	db	100	;'d'
   616  006E19  20                 	db	32
   617  006E1A  72                 	db	114	;'r'
   618  006E1B  65                 	db	101	;'e'
   619  006E1C  67                 	db	103	;'g'
   620  006E1D  69                 	db	105	;'i'
   621  006E1E  73                 	db	115	;'s'
   622  006E1F  74                 	db	116	;'t'
   623  006E20  65                 	db	101	;'e'
   624  006E21  72                 	db	114	;'r'
   625  006E22  28                 	db	40
   626  006E23  73                 	db	115	;'s'
   627  006E24  29                 	db	41
   628  006E25  20                 	db	32
   629  006E26  6F                 	db	111	;'o'
   630  006E27  66                 	db	102	;'f'
   631  006E28  20                 	db	32
   632  006E29  6E                 	db	110	;'n'
   633  006E2A  6F                 	db	111	;'o'
   634  006E2B  64                 	db	100	;'d'
   635  006E2C  65                 	db	101	;'e'
   636  006E2D  20                 	db	32
   637  006E2E  28                 	db	40
   638  006E2F  46                 	db	70	;'F'
   639  006E30  6F                 	db	111	;'o'
   640  006E31  72                 	db	114	;'r'
   641  006E32  6D                 	db	109	;'m'
   642  006E33  61                 	db	97	;'a'
   643  006E34  74                 	db	116	;'t'
   644  006E35  3A                 	db	58	;':'
   645  006E36  20                 	db	32
   646  006E37  72                 	db	114	;'r'
   647  006E38  72                 	db	114	;'r'
   648  006E39  65                 	db	101	;'e'
   649  006E3A  67                 	db	103	;'g'
   650  006E3B  20                 	db	32
   651  006E3C  5B                 	db	91	;'['
   652  006E3D  70                 	db	112	;'p'
   653  006E3E  61                 	db	97	;'a'
   654  006E3F  67                 	db	103	;'g'
   655  006E40  65                 	db	101	;'e'
   656  006E41  3A                 	db	58	;':'
   657  006E42  5D                 	db	93	;']'
   658  006E43  72                 	db	114	;'r'
   659  006E44  65                 	db	101	;'e'
   660  006E45  67                 	db	103	;'g'
   661  006E46  20                 	db	32
   662  006E47  5B                 	db	91	;'['
   663  006E48  63                 	db	99	;'c'
   664  006E49  6F                 	db	111	;'o'
   665  006E4A  75                 	db	117	;'u'
   666  006E4B  6E                 	db	110	;'n'
   667  006E4C  74                 	db	116	;'t'
   668  006E4D  5D                 	db	93	;']'
   669  006E4E  29                 	db	41
   670  006E4F  2E                 	db	46
   671  006E50  0D                 	db	13
   672  006E51  0A                 	db	10
   673  006E52  00                 	db	0
   674  006E53                     STR_238:
   675  006E53  2D                 	db	45
   676  006E54  2D                 	db	45
   677  006E55  2D                 	db	45
   678  006E56  2D                 	db	45
   679  006E57  2D                 	db	45
   680  006E58  2D                 	db	45
   681  006E59  2D                 	db	45
   682  006E5A  2D                 	db	45
   683  006E5B  2D                 	db	45
   684  006E5C  2D                 	db	45
   685  006E5D  2D                 	db	45
   686  006E5E  2D                 	db	45
   687  006E5F  2D                 	db	45
   688  006E60  2D                 	db	45
   689  006E61  2D                 	db	45
   690  006E62  2D                 	db	45
   691  006E63  2D                 	db	45
   692  006E64  2D                 	db	45
   693  006E65  2D                 	db	45
   694  006E66  2D                 	db	45
   695  006E67  2D                 	db	45
   696  006E68  2D                 	db	45
   697  006E69  2D                 	db	45
   698  006E6A  2D                 	db	45
   699  006E6B  2D                 	db	45
   700  006E6C  2D                 	db	45
   701  006E6D  2D                 	db	45
   702  006E6E  2D                 	db	45
   703  006E6F  2D                 	db	45
   704  006E70  2D                 	db	45
   705  006E71  2D                 	db	45
   706  006E72  2D                 	db	45
   707  006E73  2D                 	db	45
   708  006E74  2D                 	db	45
   709  006E75  2D                 	db	45
   710  006E76  2D                 	db	45
   711  006E77  2D                 	db	45
   712  006E78  2D                 	db	45
   713  006E79  2D                 	db	45
   714  006E7A  2D                 	db	45
   715  006E7B  2D                 	db	45
   716  006E7C  2D                 	db	45
   717  006E7D  2D                 	db	45
   718  006E7E  2D                 	db	45
   719  006E7F  2D                 	db	45
   720  006E80  2D                 	db	45
   721  006E81  2D                 	db	45
   722  006E82  2D                 	db	45
   723  006E83  2D                 	db	45
   724  006E84  2D                 	db	45
   725  006E85  2D                 	db	45
   726  006E86  2D                 	db	45
   727  006E87  2D                 	db	45
   728  006E88  2D                 	db	45
   729  006E89  2D                 	db	45
   730  006E8A  2D                 	db	45
   731  006E8B  2D                 	db	45
   732  006E8C  2D                 	db	45
   733  006E8D  2D                 	db	45
   734  006E8E  2D                 	db	45
   735  006E8F  2D                 	db	45
   736  006E90  2D                 	db	45
   737  006E91  2D                 	db	45
   738  006E92  2D                 	db	45
   739  006E93  0D                 	db	13
   740  006E94  0A                 	db	10
   741  006E95  00                 	db	0
   742  006E96                     STR_233:
   743  006E96  20                 	db	32
   744  006E97  20                 	db	32
   745  006E98  20                 	db	32
   746  006E99  20                 	db	32
   747  006E9A  52                 	db	82	;'R'
   748  006E9B  57                 	db	87	;'W'
   749  006E9C  54                 	db	84	;'T'
   750  006E9D  49                 	db	73	;'I'
   751  006E9E  4D                 	db	77	;'M'
   752  006E9F  45                 	db	69	;'E'
   753  006EA0  4F                 	db	79	;'O'
   754  006EA1  55                 	db	85	;'U'
   755  006EA2  54                 	db	84	;'T'
   756  006EA3  20                 	db	32
   757  006EA4  2D                 	db	45
   758  006EA5  20                 	db	32
   759  006EA6  53                 	db	83	;'S'
   760  006EA7  65                 	db	101	;'e'
   761  006EA8  74                 	db	116	;'t'
   762  006EA9  20                 	db	32
   763  006EAA  72                 	db	114	;'r'
   764  006EAB  65                 	db	101	;'e'
   765  006EAC  67                 	db	103	;'g'
   766  006EAD  69                 	db	105	;'i'
   767  006EAE  73                 	db	115	;'s'
   768  006EAF  74                 	db	116	;'t'
   769  006EB0  65                 	db	101	;'e'
   770  006EB1  72                 	db	114	;'r'
   771  006EB2  20                 	db	32
   772  006EB3  72                 	db	114	;'r'
   773  006EB4  65                 	db	101	;'e'
   774  006EB5  61                 	db	97	;'a'
   775  006EB6  64                 	db	100	;'d'
   776  006EB7  2F                 	db	47
   777  006EB8  77                 	db	119	;'w'
   778  006EB9  72                 	db	114	;'r'
   779  006EBA  69                 	db	105	;'i'
   780  006EBB  74                 	db	116	;'t'
   781  006EBC  65                 	db	101	;'e'
   782  006EBD  20                 	db	32
   783  006EBE  74                 	db	116	;'t'
   784  006EBF  69                 	db	105	;'i'
   785  006EC0  6D                 	db	109	;'m'
   786  006EC1  65                 	db	101	;'e'
   787  006EC2  6F                 	db	111	;'o'
   788  006EC3  75                 	db	117	;'u'
   789  006EC4  74                 	db	116	;'t'
   790  006EC5  2E                 	db	46
   791  006EC6  20                 	db	32
   792  006EC7  44                 	db	68	;'D'
   793  006EC8  65                 	db	101	;'e'
   794  006EC9  66                 	db	102	;'f'
   795  006ECA  61                 	db	97	;'a'
   796  006ECB  75                 	db	117	;'u'
   797  006ECC  6C                 	db	108	;'l'
   798  006ECD  74                 	db	116	;'t'
   799  006ECE  3D                 	db	61	;'='
   800  006ECF  31                 	db	49	;'1'
   801  006ED0  30                 	db	48	;'0'
   802  006ED1  20                 	db	32
   803  006ED2  6D                 	db	109	;'m'
   804  006ED3  73                 	db	115	;'s'
   805  006ED4  20                 	db	32
   806  006ED5  2E                 	db	46
   807  006ED6  0D                 	db	13
   808  006ED7  0A                 	db	10
   809  006ED8  00                 	db	0
   810  006ED9                     STR_224:
   811  006ED9  57                 	db	87	;'W'
   812  006EDA  52                 	db	82	;'R'
   813  006EDB  45                 	db	69	;'E'
   814  006EDC  47                 	db	71	;'G'
   815  006EDD  20                 	db	32
   816  006EDE  2D                 	db	45
   817  006EDF  20                 	db	32
   818  006EE0  57                 	db	87	;'W'
   819  006EE1  72                 	db	114	;'r'
   820  006EE2  69                 	db	105	;'i'
   821  006EE3  74                 	db	116	;'t'
   822  006EE4  65                 	db	101	;'e'
   823  006EE5  20                 	db	32
   824  006EE6  72                 	db	114	;'r'
   825  006EE7  65                 	db	101	;'e'
   826  006EE8  67                 	db	103	;'g'
   827  006EE9  69                 	db	105	;'i'
   828  006EEA  73                 	db	115	;'s'
   829  006EEB  74                 	db	116	;'t'
   830  006EEC  65                 	db	101	;'e'
   831  006EED  72                 	db	114	;'r'
   832  006EEE  20                 	db	32
   833  006EEF  6F                 	db	111	;'o'
   834  006EF0  66                 	db	102	;'f'
   835  006EF1  20                 	db	32
   836  006EF2  6E                 	db	110	;'n'
   837  006EF3  6F                 	db	111	;'o'
   838  006EF4  64                 	db	100	;'d'
   839  006EF5  65                 	db	101	;'e'
   840  006EF6  20                 	db	32
   841  006EF7  28                 	db	40
   842  006EF8  46                 	db	70	;'F'
   843  006EF9  6F                 	db	111	;'o'
   844  006EFA  72                 	db	114	;'r'
   845  006EFB  6D                 	db	109	;'m'
   846  006EFC  61                 	db	97	;'a'
   847  006EFD  74                 	db	116	;'t'
   848  006EFE  3A                 	db	58	;':'
   849  006EFF  20                 	db	32
   850  006F00  77                 	db	119	;'w'
   851  006F01  72                 	db	114	;'r'
   852  006F02  65                 	db	101	;'e'
   853  006F03  67                 	db	103	;'g'
   854  006F04  20                 	db	32
   855  006F05  5B                 	db	91	;'['
   856  006F06  70                 	db	112	;'p'
   857  006F07  61                 	db	97	;'a'
   858  006F08  67                 	db	103	;'g'
   859  006F09  65                 	db	101	;'e'
   860  006F0A  3A                 	db	58	;':'
   861  006F0B  5D                 	db	93	;']'
   862  006F0C  72                 	db	114	;'r'
   863  006F0D  65                 	db	101	;'e'
   864  006F0E  67                 	db	103	;'g'
   865  006F0F  20                 	db	32
   866  006F10  63                 	db	99	;'c'
   867  006F11  6F                 	db	111	;'o'
   868  006F12  6E                 	db	110	;'n'
   869  006F13  74                 	db	116	;'t'
   870  006F14  65                 	db	101	;'e'
   871  006F15  6E                 	db	110	;'n'
   872  006F16  74                 	db	116	;'t'
   873  006F17  29                 	db	41
   874  006F18  2E                 	db	46
   875  006F19  0D                 	db	13
   876  006F1A  0A                 	db	10
   877  006F1B  00                 	db	0
   878  006F1C                     STR_89:
   879  006F1C  2D                 	db	45
   880  006F1D  45                 	db	69	;'E'
   881  006F1E  52                 	db	82	;'R'
   882  006F1F  52                 	db	82	;'R'
   883  006F20  4F                 	db	79	;'O'
   884  006F21  52                 	db	82	;'R'
   885  006F22  20                 	db	32
   886  006F23  2D                 	db	45
   887  006F24  20                 	db	32
   888  006F25  46                 	db	70	;'F'
   889  006F26  69                 	db	105	;'i'
   890  006F27  6C                 	db	108	;'l'
   891  006F28  74                 	db	116	;'t'
   892  006F29  65                 	db	101	;'e'
   893  006F2A  72                 	db	114	;'r'
   894  006F2B  20                 	db	32
   895  006F2C  6E                 	db	110	;'n'
   896  006F2D  75                 	db	117	;'u'
   897  006F2E  6D                 	db	109	;'m'
   898  006F2F  62                 	db	98	;'b'
   899  006F30  65                 	db	101	;'e'
   900  006F31  72                 	db	114	;'r'
   901  006F32  20                 	db	32
   902  006F33  63                 	db	99	;'c'
   903  006F34  61                 	db	97	;'a'
   904  006F35  6E                 	db	110	;'n'
   905  006F36  20                 	db	32
   906  006F37  6F                 	db	111	;'o'
   907  006F38  6E                 	db	110	;'n'
   908  006F39  6C                 	db	108	;'l'
   909  006F3A  79                 	db	121	;'y'
   910  006F3B  20                 	db	32
   911  006F3C  62                 	db	98	;'b'
   912  006F3D  65                 	db	101	;'e'
   913  006F3E  20                 	db	32
   914  006F3F  73                 	db	115	;'s'
   915  006F40  65                 	db	101	;'e'
   916  006F41  74                 	db	116	;'t'
   917  006F42  20                 	db	32
   918  006F43  74                 	db	116	;'t'
   919  006F44  6F                 	db	111	;'o'
   920  006F45  20                 	db	32
   921  006F46  61                 	db	97	;'a'
   922  006F47  20                 	db	32
   923  006F48  76                 	db	118	;'v'
   924  006F49  61                 	db	97	;'a'
   925  006F4A  6C                 	db	108	;'l'
   926  006F4B  75                 	db	117	;'u'
   927  006F4C  65                 	db	101	;'e'
   928  006F4D  20                 	db	32
   929  006F4E  62                 	db	98	;'b'
   930  006F4F  65                 	db	101	;'e'
   931  006F50  74                 	db	116	;'t'
   932  006F51  77                 	db	119	;'w'
   933  006F52  65                 	db	101	;'e'
   934  006F53  65                 	db	101	;'e'
   935  006F54  6E                 	db	110	;'n'
   936  006F55  20                 	db	32
   937  006F56  30                 	db	48	;'0'
   938  006F57  2D                 	db	45
   939  006F58  31                 	db	49	;'1'
   940  006F59  35                 	db	53	;'5'
   941  006F5A  2E                 	db	46
   942  006F5B  0D                 	db	13
   943  006F5C  0A                 	db	10
   944  006F5D  00                 	db	0
   945  006F5E                     STR_236:
   946  006F5E  20                 	db	32
   947  006F5F  20                 	db	32
   948  006F60  20                 	db	32
   949  006F61  20                 	db	32
   950  006F62  4D                 	db	77	;'M'
   951  006F63  4F                 	db	79	;'O'
   952  006F64  44                 	db	68	;'D'
   953  006F65  45                 	db	69	;'E'
   954  006F66  20                 	db	32
   955  006F67  2D                 	db	45
   956  006F68  20                 	db	32
   957  006F69  53                 	db	83	;'S'
   958  006F6A  65                 	db	101	;'e'
   959  006F6B  74                 	db	116	;'t'
   960  006F6C  20                 	db	32
   961  006F6D  61                 	db	97	;'a'
   962  006F6E  64                 	db	100	;'d'
   963  006F6F  61                 	db	97	;'a'
   964  006F70  70                 	db	112	;'p'
   965  006F71  74                 	db	116	;'t'
   966  006F72  65                 	db	101	;'e'
   967  006F73  72                 	db	114	;'r'
   968  006F74  20                 	db	32
   969  006F75  6D                 	db	109	;'m'
   970  006F76  6F                 	db	111	;'o'
   971  006F77  64                 	db	100	;'d'
   972  006F78  65                 	db	101	;'e'
   973  006F79  20                 	db	32
   974  006F7A  74                 	db	116	;'t'
   975  006F7B  68                 	db	104	;'h'
   976  006F7C  61                 	db	97	;'a'
   977  006F7D  74                 	db	116	;'t'
   978  006F7E  20                 	db	32
   979  006F7F  73                 	db	115	;'s'
   980  006F80  68                 	db	104	;'h'
   981  006F81  6F                 	db	111	;'o'
   982  006F82  75                 	db	117	;'u'
   983  006F83  6C                 	db	108	;'l'
   984  006F84  64                 	db	100	;'d'
   985  006F85  20                 	db	32
   986  006F86  62                 	db	98	;'b'
   987  006F87  65                 	db	101	;'e'
   988  006F88  20                 	db	32
   989  006F89  75                 	db	117	;'u'
   990  006F8A  73                 	db	115	;'s'
   991  006F8B  65                 	db	101	;'e'
   992  006F8C  64                 	db	100	;'d'
   993  006F8D  20                 	db	32
   994  006F8E  6F                 	db	111	;'o'
   995  006F8F  6E                 	db	110	;'n'
   996  006F90  20                 	db	32
   997  006F91  73                 	db	115	;'s'
   998  006F92  74                 	db	116	;'t'
   999  006F93  61                 	db	97	;'a'
  1000  006F94  72                 	db	114	;'r'
  1001  006F95  74                 	db	116	;'t'
  1002  006F96  75                 	db	117	;'u'
  1003  006F97  70                 	db	112	;'p'
  1004  006F98  2E                 	db	46
  1005  006F99  0D                 	db	13
  1006  006F9A  0A                 	db	10
  1007  006F9B  00                 	db	0
  1008  006F9C                     STR_196:
  1009  006F9C  54                 	db	84	;'T'
  1010  006F9D  72                 	db	114	;'r'
  1011  006F9E  61                 	db	97	;'a'
  1012  006F9F  6E                 	db	110	;'n'
  1013  006FA0  73                 	db	115	;'s'
  1014  006FA1  6D                 	db	109	;'m'
  1015  006FA2  69                 	db	105	;'i'
  1016  006FA3  74                 	db	116	;'t'
  1017  006FA4  74                 	db	116	;'t'
  1018  006FA5  65                 	db	101	;'e'
  1019  006FA6  72                 	db	114	;'r'
  1020  006FA7  20                 	db	32
  1021  006FA8  69                 	db	105	;'i'
  1022  006FA9  6E                 	db	110	;'n'
  1023  006FAA  20                 	db	32
  1024  006FAB  45                 	db	69	;'E'
  1025  006FAC  72                 	db	114	;'r'
  1026  006FAD  72                 	db	114	;'r'
  1027  006FAE  6F                 	db	111	;'o'
  1028  006FAF  72                 	db	114	;'r'
  1029  006FB0  20                 	db	32
  1030  006FB1  53                 	db	83	;'S'
  1031  006FB2  74                 	db	116	;'t'
  1032  006FB3  61                 	db	97	;'a'
  1033  006FB4  74                 	db	116	;'t'
  1034  006FB5  65                 	db	101	;'e'
  1035  006FB6  20                 	db	32
  1036  006FB7  57                 	db	87	;'W'
  1037  006FB8  61                 	db	97	;'a'
  1038  006FB9  72                 	db	114	;'r'
  1039  006FBA  6E                 	db	110	;'n'
  1040  006FBB  69                 	db	105	;'i'
  1041  006FBC  6E                 	db	110	;'n'
  1042  006FBD  67                 	db	103	;'g'
  1043  006FBE  20                 	db	32
  1044  006FBF  28                 	db	40
  1045  006FC0  31                 	db	49	;'1'
  1046  006FC1  32                 	db	50	;'2'
  1047  006FC2  38                 	db	56	;'8'
  1048  006FC3  20                 	db	32
  1049  006FC4  3E                 	db	62	;'>'
  1050  006FC5  20                 	db	32
  1051  006FC6  54                 	db	84	;'T'
  1052  006FC7  45                 	db	69	;'E'
  1053  006FC8  52                 	db	82	;'R'
  1054  006FC9  52                 	db	82	;'R'
  1055  006FCA  43                 	db	67	;'C'
  1056  006FCB  4E                 	db	78	;'N'
  1057  006FCC  54                 	db	84	;'T'
  1058  006FCD  20                 	db	32
  1059  006FCE  3F                 	db	63	;'?'
  1060  006FCF  20                 	db	32
  1061  006FD0  39                 	db	57	;'9'
  1062  006FD1  36                 	db	54	;'6'
  1063  006FD2  29                 	db	41
  1064  006FD3  0D                 	db	13
  1065  006FD4  0A                 	db	10
  1066  006FD5  00                 	db	0
  1067  006FD6                     STR_198:
  1068  006FD6  54                 	db	84	;'T'
  1069  006FD7  72                 	db	114	;'r'
  1070  006FD8  61                 	db	97	;'a'
  1071  006FD9  6E                 	db	110	;'n'
  1072  006FDA  73                 	db	115	;'s'
  1073  006FDB  6D                 	db	109	;'m'
  1074  006FDC  69                 	db	105	;'i'
  1075  006FDD  74                 	db	116	;'t'
  1076  006FDE  74                 	db	116	;'t'
  1077  006FDF  65                 	db	101	;'e'
  1078  006FE0  72                 	db	114	;'r'
  1079  006FE1  20                 	db	32
  1080  006FE2  69                 	db	105	;'i'
  1081  006FE3  6E                 	db	110	;'n'
  1082  006FE4  20                 	db	32
  1083  006FE5  45                 	db	69	;'E'
  1084  006FE6  72                 	db	114	;'r'
  1085  006FE7  72                 	db	114	;'r'
  1086  006FE8  6F                 	db	111	;'o'
  1087  006FE9  72                 	db	114	;'r'
  1088  006FEA  20                 	db	32
  1089  006FEB  53                 	db	83	;'S'
  1090  006FEC  74                 	db	116	;'t'
  1091  006FED  61                 	db	97	;'a'
  1092  006FEE  74                 	db	116	;'t'
  1093  006FEF  65                 	db	101	;'e'
  1094  006FF0  20                 	db	32
  1095  006FF1  42                 	db	66	;'B'
  1096  006FF2  75                 	db	117	;'u'
  1097  006FF3  73                 	db	115	;'s'
  1098  006FF4  20                 	db	32
  1099  006FF5  50                 	db	80	;'P'
  1100  006FF6  61                 	db	97	;'a'
  1101  006FF7  73                 	db	115	;'s'
  1102  006FF8  73                 	db	115	;'s'
  1103  006FF9  69                 	db	105	;'i'
  1104  006FFA  76                 	db	118	;'v'
  1105  006FFB  65                 	db	101	;'e'
  1106  006FFC  20                 	db	32
  1107  006FFD  28                 	db	40
  1108  006FFE  54                 	db	84	;'T'
  1109  006FFF  45                 	db	69	;'E'
  1110  007000  52                 	db	82	;'R'
  1111  007001  52                 	db	82	;'R'
  1112  007002  43                 	db	67	;'C'
  1113  007003  4E                 	db	78	;'N'
  1114  007004  54                 	db	84	;'T'
  1115  007005  20                 	db	32
  1116  007006  3F                 	db	63	;'?'
  1117  007007  20                 	db	32
  1118  007008  31                 	db	49	;'1'
  1119  007009  32                 	db	50	;'2'
  1120  00700A  38                 	db	56	;'8'
  1121  00700B  29                 	db	41
  1122  00700C  0D                 	db	13
  1123  00700D  0A                 	db	10
  1124  00700E  00                 	db	0
  1125  00700F                     STR_217:
  1126  00700F  20                 	db	32
  1127  007010  20                 	db	32
  1128  007011  20                 	db	32
  1129  007012  20                 	db	32
  1130  007013  20                 	db	32
  1131  007014  46                 	db	70	;'F'
  1132  007015  6F                 	db	111	;'o'
  1133  007016  72                 	db	114	;'r'
  1134  007017  6D                 	db	109	;'m'
  1135  007018  61                 	db	97	;'a'
  1136  007019  74                 	db	116	;'t'
  1137  00701A  3A                 	db	58	;':'
  1138  00701B  20                 	db	32
  1139  00701C  70                 	db	112	;'p'
  1140  00701D  72                 	db	114	;'r'
  1141  00701E  69                 	db	105	;'i'
  1142  00701F  6F                 	db	111	;'o'
  1143  007020  72                 	db	114	;'r'
  1144  007021  69                 	db	105	;'i'
  1145  007022  74                 	db	116	;'t'
  1146  007023  79                 	db	121	;'y'
  1147  007024  2C                 	db	44
  1148  007025  63                 	db	99	;'c'
  1149  007026  6C                 	db	108	;'l'
  1150  007027  61                 	db	97	;'a'
  1151  007028  73                 	db	115	;'s'
  1152  007029  73                 	db	115	;'s'
  1153  00702A  2C                 	db	44
  1154  00702B  74                 	db	116	;'t'
  1155  00702C  79                 	db	121	;'y'
  1156  00702D  70                 	db	112	;'p'
  1157  00702E  65                 	db	101	;'e'
  1158  00702F  2C                 	db	44
  1159  007030  6E                 	db	110	;'n'
  1160  007031  6F                 	db	111	;'o'
  1161  007032  64                 	db	100	;'d'
  1162  007033  65                 	db	101	;'e'
  1163  007034  69                 	db	105	;'i'
  1164  007035  64                 	db	100	;'d'
  1165  007036  2C                 	db	44
  1166  007037  63                 	db	99	;'c'
  1167  007038  6F                 	db	111	;'o'
  1168  007039  75                 	db	117	;'u'
  1169  00703A  6E                 	db	110	;'n'
  1170  00703B  74                 	db	116	;'t'
  1171  00703C  2C                 	db	44
  1172  00703D  64                 	db	100	;'d'
  1173  00703E  61                 	db	97	;'a'
  1174  00703F  74                 	db	116	;'t'
  1175  007040  61                 	db	97	;'a'
  1176  007041  2C                 	db	44
  1177  007042  2C                 	db	44
  1178  007043  2C                 	db	44
  1179  007044  0D                 	db	13
  1180  007045  0A                 	db	10
  1181  007046  00                 	db	0
  1182  007047                     STR_203:
  1183  007047  52                 	db	82	;'R'
  1184  007048  65                 	db	101	;'e'
  1185  007049  63                 	db	99	;'c'
  1186  00704A  65                 	db	101	;'e'
  1187  00704B  69                 	db	105	;'i'
  1188  00704C  76                 	db	118	;'v'
  1189  00704D  65                 	db	101	;'e'
  1190  00704E  72                 	db	114	;'r'
  1191  00704F  20                 	db	32
  1192  007050  69                 	db	105	;'i'
  1193  007051  6E                 	db	110	;'n'
  1194  007052  20                 	db	32
  1195  007053  45                 	db	69	;'E'
  1196  007054  72                 	db	114	;'r'
  1197  007055  72                 	db	114	;'r'
  1198  007056  6F                 	db	111	;'o'
  1199  007057  72                 	db	114	;'r'
  1200  007058  20                 	db	32
  1201  007059  53                 	db	83	;'S'
  1202  00705A  74                 	db	116	;'t'
  1203  00705B  61                 	db	97	;'a'
  1204  00705C  74                 	db	116	;'t'
  1205  00705D  65                 	db	101	;'e'
  1206  00705E  20                 	db	32
  1207  00705F  57                 	db	87	;'W'
  1208  007060  61                 	db	97	;'a'
  1209  007061  72                 	db	114	;'r'
  1210  007062  6E                 	db	110	;'n'
  1211  007063  69                 	db	105	;'i'
  1212  007064  6E                 	db	110	;'n'
  1213  007065  67                 	db	103	;'g'
  1214  007066  20                 	db	32
  1215  007067  28                 	db	40
  1216  007068  31                 	db	49	;'1'
  1217  007069  32                 	db	50	;'2'
  1218  00706A  38                 	db	56	;'8'
  1219  00706B  20                 	db	32
  1220  00706C  3E                 	db	62	;'>'
  1221  00706D  20                 	db	32
  1222  00706E  52                 	db	82	;'R'
  1223  00706F  45                 	db	69	;'E'
  1224  007070  52                 	db	82	;'R'
  1225  007071  52                 	db	82	;'R'
  1226  007072  43                 	db	67	;'C'
  1227  007073  4E                 	db	78	;'N'
  1228  007074  54                 	db	84	;'T'
  1229  007075  20                 	db	32
  1230  007076  3F                 	db	63	;'?'
  1231  007077  20                 	db	32
  1232  007078  39                 	db	57	;'9'
  1233  007079  36                 	db	54	;'6'
  1234  00707A  29                 	db	41
  1235  00707B  0D                 	db	13
  1236  00707C  0A                 	db	10
  1237  00707D  00                 	db	0
  1238  00707E                     STR_235:
  1239  00707E  20                 	db	32
  1240  00707F  20                 	db	32
  1241  007080  20                 	db	32
  1242  007081  20                 	db	32
  1243  007082  53                 	db	83	;'S'
  1244  007083  54                 	db	84	;'T'
  1245  007084  41                 	db	65	;'A'
  1246  007085  52                 	db	82	;'R'
  1247  007086  54                 	db	84	;'T'
  1248  007087  49                 	db	73	;'I'
  1249  007088  46                 	db	70	;'F'
  1250  007089  20                 	db	32
  1251  00708A  2D                 	db	45
  1252  00708B  20                 	db	32
  1253  00708C  53                 	db	83	;'S'
  1254  00708D  65                 	db	101	;'e'
  1255  00708E  74                 	db	116	;'t'
  1256  00708F  20                 	db	32
  1257  007090  69                 	db	105	;'i'
  1258  007091  6E                 	db	110	;'n'
  1259  007092  74                 	db	116	;'t'
  1260  007093  65                 	db	101	;'e'
  1261  007094  72                 	db	114	;'r'
  1262  007095  66                 	db	102	;'f'
  1263  007096  61                 	db	97	;'a'
  1264  007097  63                 	db	99	;'c'
  1265  007098  65                 	db	101	;'e'
  1266  007099  20                 	db	32
  1267  00709A  73                 	db	115	;'s'
  1268  00709B  74                 	db	116	;'t'
  1269  00709C  61                 	db	97	;'a'
  1270  00709D  74                 	db	116	;'t'
  1271  00709E  65                 	db	101	;'e'
  1272  00709F  20                 	db	32
  1273  0070A0  74                 	db	116	;'t'
  1274  0070A1  6F                 	db	111	;'o'
  1275  0070A2  20                 	db	32
  1276  0070A3  75                 	db	117	;'u'
  1277  0070A4  73                 	db	115	;'s'
  1278  0070A5  65                 	db	101	;'e'
  1279  0070A6  20                 	db	32
  1280  0070A7  6F                 	db	111	;'o'
  1281  0070A8  6E                 	db	110	;'n'
  1282  0070A9  20                 	db	32
  1283  0070AA  73                 	db	115	;'s'
  1284  0070AB  74                 	db	116	;'t'
  1285  0070AC  61                 	db	97	;'a'
  1286  0070AD  72                 	db	114	;'r'
  1287  0070AE  74                 	db	116	;'t'
  1288  0070AF  75                 	db	117	;'u'
  1289  0070B0  70                 	db	112	;'p'
  1290  0070B1  2E                 	db	46
  1291  0070B2  0D                 	db	13
  1292  0070B3  0A                 	db	10
  1293  0070B4  00                 	db	0
  1294  0070B5                     STR_4:
  1295  0070B5  50                 	db	80	;'P'
  1296  0070B6  72                 	db	114	;'r'
  1297  0070B7  65                 	db	101	;'e'
  1298  0070B8  73                 	db	115	;'s'
  1299  0070B9  73                 	db	115	;'s'
  1300  0070BA  20                 	db	32
  1301  0070BB  27                 	db	39
  1302  0070BC  76                 	db	118	;'v'
  1303  0070BD  27                 	db	39
  1304  0070BE  20                 	db	32
  1305  0070BF  77                 	db	119	;'w'
  1306  0070C0  69                 	db	105	;'i'
  1307  0070C1  74                 	db	116	;'t'
  1308  0070C2  68                 	db	104	;'h'
  1309  0070C3  69                 	db	105	;'i'
  1310  0070C4  6E                 	db	110	;'n'
  1311  0070C5  20                 	db	32
  1312  0070C6  74                 	db	116	;'t'
  1313  0070C7  68                 	db	104	;'h'
  1314  0070C8  72                 	db	114	;'r'
  1315  0070C9  65                 	db	101	;'e'
  1316  0070CA  65                 	db	101	;'e'
  1317  0070CB  20                 	db	32
  1318  0070CC  73                 	db	115	;'s'
  1319  0070CD  65                 	db	101	;'e'
  1320  0070CE  63                 	db	99	;'c'
  1321  0070CF  6F                 	db	111	;'o'
  1322  0070D0  6E                 	db	110	;'n'
  1323  0070D1  64                 	db	100	;'d'
  1324  0070D2  73                 	db	115	;'s'
  1325  0070D3  20                 	db	32
  1326  0070D4  74                 	db	116	;'t'
  1327  0070D5  6F                 	db	111	;'o'
  1328  0070D6  20                 	db	32
  1329  0070D7  65                 	db	101	;'e'
  1330  0070D8  6E                 	db	110	;'n'
  1331  0070D9  74                 	db	116	;'t'
  1332  0070DA  65                 	db	101	;'e'
  1333  0070DB  72                 	db	114	;'r'
  1334  0070DC  20                 	db	32
  1335  0070DD  76                 	db	118	;'v'
  1336  0070DE  65                 	db	101	;'e'
  1337  0070DF  72                 	db	114	;'r'
  1338  0070E0  62                 	db	98	;'b'
  1339  0070E1  6F                 	db	111	;'o'
  1340  0070E2  73                 	db	115	;'s'
  1341  0070E3  65                 	db	101	;'e'
  1342  0070E4  20                 	db	32
  1343  0070E5  6D                 	db	109	;'m'
  1344  0070E6  6F                 	db	111	;'o'
  1345  0070E7  64                 	db	100	;'d'
  1346  0070E8  65                 	db	101	;'e'
  1347  0070E9  0D                 	db	13
  1348  0070EA  0A                 	db	10
  1349  0070EB  00                 	db	0
  1350  0070EC                     STR_204:
  1351  0070EC  52                 	db	82	;'R'
  1352  0070ED  65                 	db	101	;'e'
  1353  0070EE  63                 	db	99	;'c'
  1354  0070EF  65                 	db	101	;'e'
  1355  0070F0  69                 	db	105	;'i'
  1356  0070F1  76                 	db	118	;'v'
  1357  0070F2  65                 	db	101	;'e'
  1358  0070F3  72                 	db	114	;'r'
  1359  0070F4  20                 	db	32
  1360  0070F5  69                 	db	105	;'i'
  1361  0070F6  6E                 	db	110	;'n'
  1362  0070F7  20                 	db	32
  1363  0070F8  45                 	db	69	;'E'
  1364  0070F9  72                 	db	114	;'r'
  1365  0070FA  72                 	db	114	;'r'
  1366  0070FB  6F                 	db	111	;'o'
  1367  0070FC  72                 	db	114	;'r'
  1368  0070FD  20                 	db	32
  1369  0070FE  53                 	db	83	;'S'
  1370  0070FF  74                 	db	116	;'t'
  1371  007100  61                 	db	97	;'a'
  1372  007101  74                 	db	116	;'t'
  1373  007102  65                 	db	101	;'e'
  1374  007103  20                 	db	32
  1375  007104  42                 	db	66	;'B'
  1376  007105  75                 	db	117	;'u'
  1377  007106  73                 	db	115	;'s'
  1378  007107  20                 	db	32
  1379  007108  50                 	db	80	;'P'
  1380  007109  61                 	db	97	;'a'
  1381  00710A  73                 	db	115	;'s'
  1382  00710B  73                 	db	115	;'s'
  1383  00710C  69                 	db	105	;'i'
  1384  00710D  76                 	db	118	;'v'
  1385  00710E  65                 	db	101	;'e'
  1386  00710F  20                 	db	32
  1387  007110  28                 	db	40
  1388  007111  52                 	db	82	;'R'
  1389  007112  45                 	db	69	;'E'
  1390  007113  52                 	db	82	;'R'
  1391  007114  52                 	db	82	;'R'
  1392  007115  43                 	db	67	;'C'
  1393  007116  4E                 	db	78	;'N'
  1394  007117  54                 	db	84	;'T'
  1395  007118  20                 	db	32
  1396  007119  3F                 	db	63	;'?'
  1397  00711A  20                 	db	32
  1398  00711B  31                 	db	49	;'1'
  1399  00711C  32                 	db	50	;'2'
  1400  00711D  38                 	db	56	;'8'
  1401  00711E  29                 	db	41
  1402  00711F  0D                 	db	13
  1403  007120  0A                 	db	10
  1404  007121  00                 	db	0
  1405  007122                     STR_71:
  1406  007122  2D                 	db	45
  1407  007123  45                 	db	69	;'E'
  1408  007124  52                 	db	82	;'R'
  1409  007125  52                 	db	82	;'R'
  1410  007126  4F                 	db	79	;'O'
  1411  007127  52                 	db	82	;'R'
  1412  007128  20                 	db	32
  1413  007129  2D                 	db	45
  1414  00712A  20                 	db	32
  1415  00712B  4F                 	db	79	;'O'
  1416  00712C  6E                 	db	110	;'n'
  1417  00712D  65                 	db	101	;'e'
  1418  00712E  20                 	db	32
  1419  00712F  6F                 	db	111	;'o'
  1420  007130  72                 	db	114	;'r'
  1421  007131  20                 	db	32
  1422  007132  6D                 	db	109	;'m'
  1423  007133  6F                 	db	111	;'o'
  1424  007134  72                 	db	114	;'r'
  1425  007135  65                 	db	101	;'e'
  1426  007136  20                 	db	32
  1427  007137  72                 	db	114	;'r'
  1428  007138  65                 	db	101	;'e'
  1429  007139  67                 	db	103	;'g'
  1430  00713A  69                 	db	105	;'i'
  1431  00713B  73                 	db	115	;'s'
  1432  00713C  74                 	db	116	;'t'
  1433  00713D  65                 	db	101	;'e'
  1434  00713E  72                 	db	114	;'r'
  1435  00713F  28                 	db	40
  1436  007140  73                 	db	115	;'s'
  1437  007141  29                 	db	41
  1438  007142  20                 	db	32
  1439  007143  63                 	db	99	;'c'
  1440  007144  6F                 	db	111	;'o'
  1441  007145  75                 	db	117	;'u'
  1442  007146  6C                 	db	108	;'l'
  1443  007147  64                 	db	100	;'d'
  1444  007148  20                 	db	32
  1445  007149  6E                 	db	110	;'n'
  1446  00714A  6F                 	db	111	;'o'
  1447  00714B  74                 	db	116	;'t'
  1448  00714C  20                 	db	32
  1449  00714D  62                 	db	98	;'b'
  1450  00714E  65                 	db	101	;'e'
  1451  00714F  20                 	db	32
  1452  007150  72                 	db	114	;'r'
  1453  007151  65                 	db	101	;'e'
  1454  007152  61                 	db	97	;'a'
  1455  007153  64                 	db	100	;'d'
  1456  007154  2E                 	db	46
  1457  007155  0D                 	db	13
  1458  007156  0A                 	db	10
  1459  007157  00                 	db	0
  1460  007158                     STR_197:
  1461  007158  54                 	db	84	;'T'
  1462  007159  72                 	db	114	;'r'
  1463  00715A  61                 	db	97	;'a'
  1464  00715B  6E                 	db	110	;'n'
  1465  00715C  73                 	db	115	;'s'
  1466  00715D  6D                 	db	109	;'m'
  1467  00715E  69                 	db	105	;'i'
  1468  00715F  74                 	db	116	;'t'
  1469  007160  74                 	db	116	;'t'
  1470  007161  65                 	db	101	;'e'
  1471  007162  72                 	db	114	;'r'
  1472  007163  20                 	db	32
  1473  007164  69                 	db	105	;'i'
  1474  007165  6E                 	db	110	;'n'
  1475  007166  20                 	db	32
  1476  007167  45                 	db	69	;'E'
  1477  007168  72                 	db	114	;'r'
  1478  007169  72                 	db	114	;'r'
  1479  00716A  6F                 	db	111	;'o'
  1480  00716B  72                 	db	114	;'r'
  1481  00716C  20                 	db	32
  1482  00716D  53                 	db	83	;'S'
  1483  00716E  74                 	db	116	;'t'
  1484  00716F  61                 	db	97	;'a'
  1485  007170  74                 	db	116	;'t'
  1486  007171  65                 	db	101	;'e'
  1487  007172  20                 	db	32
  1488  007173  42                 	db	66	;'B'
  1489  007174  75                 	db	117	;'u'
  1490  007175  73                 	db	115	;'s'
  1491  007176  20                 	db	32
  1492  007177  4F                 	db	79	;'O'
  1493  007178  46                 	db	70	;'F'
  1494  007179  46                 	db	70	;'F'
  1495  00717A  20                 	db	32
  1496  00717B  28                 	db	40
  1497  00717C  54                 	db	84	;'T'
  1498  00717D  45                 	db	69	;'E'
  1499  00717E  52                 	db	82	;'R'
  1500  00717F  52                 	db	82	;'R'
  1501  007180  43                 	db	67	;'C'
  1502  007181  4E                 	db	78	;'N'
  1503  007182  54                 	db	84	;'T'
  1504  007183  20                 	db	32
  1505  007184  3F                 	db	63	;'?'
  1506  007185  20                 	db	32
  1507  007186  32                 	db	50	;'2'
  1508  007187  35                 	db	53	;'5'
  1509  007188  36                 	db	54	;'6'
  1510  007189  29                 	db	41
  1511  00718A  0D                 	db	13
  1512  00718B  0A                 	db	10
  1513  00718C  00                 	db	0
  1514  00718D                     STR_2:
  1515  00718D  43                 	db	67	;'C'
  1516  00718E  6F                 	db	111	;'o'
  1517  00718F  70                 	db	112	;'p'
  1518  007190  79                 	db	121	;'y'
  1519  007191  72                 	db	114	;'r'
  1520  007192  69                 	db	105	;'i'
  1521  007193  67                 	db	103	;'g'
  1522  007194  68                 	db	104	;'h'
  1523  007195  74                 	db	116	;'t'
  1524  007196  20                 	db	32
  1525  007197  28                 	db	40
  1526  007198  43                 	db	67	;'C'
  1527  007199  29                 	db	41
  1528  00719A  20                 	db	32
  1529  00719B  32                 	db	50	;'2'
  1530  00719C  30                 	db	48	;'0'
  1531  00719D  31                 	db	49	;'1'
  1532  00719E  34                 	db	52	;'4'
  1533  00719F  2D                 	db	45
  1534  0071A0  32                 	db	50	;'2'
  1535  0071A1  30                 	db	48	;'0'
  1536  0071A2  31                 	db	49	;'1'
  1537  0071A3  35                 	db	53	;'5'
  1538  0071A4  20                 	db	32
  1539  0071A5  47                 	db	71	;'G'
  1540  0071A6  72                 	db	114	;'r'
  1541  0071A7  6F                 	db	111	;'o'
  1542  0071A8  64                 	db	100	;'d'
  1543  0071A9  61                 	db	97	;'a'
  1544  0071AA  6E                 	db	110	;'n'
  1545  0071AB  73                 	db	115	;'s'
  1546  0071AC  20                 	db	32
  1547  0071AD  50                 	db	80	;'P'
  1548  0071AE  61                 	db	97	;'a'
  1549  0071AF  72                 	db	114	;'r'
  1550  0071B0  61                 	db	97	;'a'
  1551  0071B1  64                 	db	100	;'d'
  1552  0071B2  69                 	db	105	;'i'
  1553  0071B3  73                 	db	115	;'s'
  1554  0071B4  20                 	db	32
  1555  0071B5  41                 	db	65	;'A'
  1556  0071B6  42                 	db	66	;'B'
  1557  0071B7  2C                 	db	44
  1558  0071B8  20                 	db	32
  1559  0071B9  53                 	db	83	;'S'
  1560  0071BA  77                 	db	119	;'w'
  1561  0071BB  65                 	db	101	;'e'
  1562  0071BC  64                 	db	100	;'d'
  1563  0071BD  65                 	db	101	;'e'
  1564  0071BE  6E                 	db	110	;'n'
  1565  0071BF  0D                 	db	13
  1566  0071C0  0A                 	db	10
  1567  0071C1  00                 	db	0
  1568  0071C2                     STR_205:
  1569  0071C2  54                 	db	84	;'T'
  1570  0071C3  72                 	db	114	;'r'
  1571  0071C4  61                 	db	97	;'a'
  1572  0071C5  6E                 	db	110	;'n'
  1573  0071C6  73                 	db	115	;'s'
  1574  0071C7  6D                 	db	109	;'m'
  1575  0071C8  69                 	db	105	;'i'
  1576  0071C9  74                 	db	116	;'t'
  1577  0071CA  74                 	db	116	;'t'
  1578  0071CB  65                 	db	101	;'e'
  1579  0071CC  72                 	db	114	;'r'
  1580  0071CD  20                 	db	32
  1581  0071CE  6F                 	db	111	;'o'
  1582  0071CF  72                 	db	114	;'r'
  1583  0071D0  20                 	db	32
  1584  0071D1  52                 	db	82	;'R'
  1585  0071D2  65                 	db	101	;'e'
  1586  0071D3  63                 	db	99	;'c'
  1587  0071D4  65                 	db	101	;'e'
  1588  0071D5  69                 	db	105	;'i'
  1589  0071D6  76                 	db	118	;'v'
  1590  0071D7  65                 	db	101	;'e'
  1591  0071D8  72                 	db	114	;'r'
  1592  0071D9  20                 	db	32
  1593  0071DA  69                 	db	105	;'i'
  1594  0071DB  73                 	db	115	;'s'
  1595  0071DC  20                 	db	32
  1596  0071DD  69                 	db	105	;'i'
  1597  0071DE  6E                 	db	110	;'n'
  1598  0071DF  20                 	db	32
  1599  0071E0  45                 	db	69	;'E'
  1600  0071E1  72                 	db	114	;'r'
  1601  0071E2  72                 	db	114	;'r'
  1602  0071E3  6F                 	db	111	;'o'
  1603  0071E4  72                 	db	114	;'r'
  1604  0071E5  20                 	db	32
  1605  0071E6  53                 	db	83	;'S'
  1606  0071E7  74                 	db	116	;'t'
  1607  0071E8  61                 	db	97	;'a'
  1608  0071E9  74                 	db	116	;'t'
  1609  0071EA  65                 	db	101	;'e'
  1610  0071EB  20                 	db	32
  1611  0071EC  57                 	db	87	;'W'
  1612  0071ED  61                 	db	97	;'a'
  1613  0071EE  72                 	db	114	;'r'
  1614  0071EF  6E                 	db	110	;'n'
  1615  0071F0  69                 	db	105	;'i'
  1616  0071F1  6E                 	db	110	;'n'
  1617  0071F2  67                 	db	103	;'g'
  1618  0071F3  0D                 	db	13
  1619  0071F4  0A                 	db	10
  1620  0071F5  00                 	db	0
  1621  0071F6                     STR_211:
  1622  0071F6  4C                 	db	76	;'L'
  1623  0071F7  49                 	db	73	;'I'
  1624  0071F8  53                 	db	83	;'S'
  1625  0071F9  54                 	db	84	;'T'
  1626  0071FA  45                 	db	69	;'E'
  1627  0071FB  4E                 	db	78	;'N'
  1628  0071FC  20                 	db	32
  1629  0071FD  2D                 	db	45
  1630  0071FE  20                 	db	32
  1631  0071FF  4F                 	db	79	;'O'
  1632  007200  70                 	db	112	;'p'
  1633  007201  65                 	db	101	;'e'
  1634  007202  6E                 	db	110	;'n'
  1635  007203  20                 	db	32
  1636  007204  43                 	db	67	;'C'
  1637  007205  41                 	db	65	;'A'
  1638  007206  4E                 	db	78	;'N'
  1639  007207  20                 	db	32
  1640  007208  69                 	db	105	;'i'
  1641  007209  6E                 	db	110	;'n'
  1642  00720A  74                 	db	116	;'t'
  1643  00720B  65                 	db	101	;'e'
  1644  00720C  72                 	db	114	;'r'
  1645  00720D  66                 	db	102	;'f'
  1646  00720E  61                 	db	97	;'a'
  1647  00720F  63                 	db	99	;'c'
  1648  007210  65                 	db	101	;'e'
  1649  007211  20                 	db	32
  1650  007212  69                 	db	105	;'i'
  1651  007213  6E                 	db	110	;'n'
  1652  007214  20                 	db	32
  1653  007215  6C                 	db	108	;'l'
  1654  007216  69                 	db	105	;'i'
  1655  007217  73                 	db	115	;'s'
  1656  007218  74                 	db	116	;'t'
  1657  007219  65                 	db	101	;'e'
  1658  00721A  6E                 	db	110	;'n'
  1659  00721B  20                 	db	32
  1660  00721C  6F                 	db	111	;'o'
  1661  00721D  6E                 	db	110	;'n'
  1662  00721E  6C                 	db	108	;'l'
  1663  00721F  79                 	db	121	;'y'
  1664  007220  20                 	db	32
  1665  007221  6D                 	db	109	;'m'
  1666  007222  6F                 	db	111	;'o'
  1667  007223  64                 	db	100	;'d'
  1668  007224  65                 	db	101	;'e'
  1669  007225  2E                 	db	46
  1670  007226  0D                 	db	13
  1671  007227  0A                 	db	10
  1672  007228  00                 	db	0
  1673  007229                     STR_102:
  1674  007229  2D                 	db	45
  1675  00722A  45                 	db	69	;'E'
  1676  00722B  52                 	db	82	;'R'
  1677  00722C  52                 	db	82	;'R'
  1678  00722D  4F                 	db	79	;'O'
  1679  00722E  52                 	db	82	;'R'
  1680  00722F  20                 	db	32
  1681  007230  2D                 	db	45
  1682  007231  20                 	db	32
  1683  007232  4D                 	db	77	;'M'
  1684  007233  61                 	db	97	;'a'
  1685  007234  73                 	db	115	;'s'
  1686  007235  6B                 	db	107	;'k'
  1687  007236  20                 	db	32
  1688  007237  6E                 	db	110	;'n'
  1689  007238  75                 	db	117	;'u'
  1690  007239  6D                 	db	109	;'m'
  1691  00723A  62                 	db	98	;'b'
  1692  00723B  65                 	db	101	;'e'
  1693  00723C  72                 	db	114	;'r'
  1694  00723D  20                 	db	32
  1695  00723E  63                 	db	99	;'c'
  1696  00723F  61                 	db	97	;'a'
  1697  007240  6E                 	db	110	;'n'
  1698  007241  20                 	db	32
  1699  007242  6F                 	db	111	;'o'
  1700  007243  6E                 	db	110	;'n'
  1701  007244  6C                 	db	108	;'l'
  1702  007245  79                 	db	121	;'y'
  1703  007246  20                 	db	32
  1704  007247  62                 	db	98	;'b'
  1705  007248  65                 	db	101	;'e'
  1706  007249  20                 	db	32
  1707  00724A  73                 	db	115	;'s'
  1708  00724B  65                 	db	101	;'e'
  1709  00724C  74                 	db	116	;'t'
  1710  00724D  20                 	db	32
  1711  00724E  61                 	db	97	;'a'
  1712  00724F  73                 	db	115	;'s'
  1713  007250  20                 	db	32
  1714  007251  30                 	db	48	;'0'
  1715  007252  20                 	db	32
  1716  007253  6F                 	db	111	;'o'
  1717  007254  72                 	db	114	;'r'
  1718  007255  20                 	db	32
  1719  007256  31                 	db	49	;'1'
  1720  007257  2E                 	db	46
  1721  007258  0D                 	db	13
  1722  007259  0A                 	db	10
  1723  00725A  00                 	db	0
  1724  00725B                     STR_212:
  1725  00725B  4C                 	db	76	;'L'
  1726  00725C  4F                 	db	79	;'O'
  1727  00725D  4F                 	db	79	;'O'
  1728  00725E  50                 	db	80	;'P'
  1729  00725F  42                 	db	66	;'B'
  1730  007260  41                 	db	65	;'A'
  1731  007261  43                 	db	67	;'C'
  1732  007262  4B                 	db	75	;'K'
  1733  007263  20                 	db	32
  1734  007264  2D                 	db	45
  1735  007265  20                 	db	32
  1736  007266  4F                 	db	79	;'O'
  1737  007267  70                 	db	112	;'p'
  1738  007268  65                 	db	101	;'e'
  1739  007269  6E                 	db	110	;'n'
  1740  00726A  20                 	db	32
  1741  00726B  43                 	db	67	;'C'
  1742  00726C  41                 	db	65	;'A'
  1743  00726D  4E                 	db	78	;'N'
  1744  00726E  20                 	db	32
  1745  00726F  69                 	db	105	;'i'
  1746  007270  6E                 	db	110	;'n'
  1747  007271  74                 	db	116	;'t'
  1748  007272  65                 	db	101	;'e'
  1749  007273  72                 	db	114	;'r'
  1750  007274  66                 	db	102	;'f'
  1751  007275  61                 	db	97	;'a'
  1752  007276  63                 	db	99	;'c'
  1753  007277  65                 	db	101	;'e'
  1754  007278  20                 	db	32
  1755  007279  69                 	db	105	;'i'
  1756  00727A  6E                 	db	110	;'n'
  1757  00727B  20                 	db	32
  1758  00727C  6C                 	db	108	;'l'
  1759  00727D  6F                 	db	111	;'o'
  1760  00727E  6F                 	db	111	;'o'
  1761  00727F  70                 	db	112	;'p'
  1762  007280  62                 	db	98	;'b'
  1763  007281  61                 	db	97	;'a'
  1764  007282  63                 	db	99	;'c'
  1765  007283  6B                 	db	107	;'k'
  1766  007284  20                 	db	32
  1767  007285  6D                 	db	109	;'m'
  1768  007286  6F                 	db	111	;'o'
  1769  007287  64                 	db	100	;'d'
  1770  007288  65                 	db	101	;'e'
  1771  007289  2E                 	db	46
  1772  00728A  0D                 	db	13
  1773  00728B  0A                 	db	10
  1774  00728C  00                 	db	0
  1775  00728D                     STR_214:
  1776  00728D  56                 	db	86	;'V'
  1777  00728E  45                 	db	69	;'E'
  1778  00728F  52                 	db	82	;'R'
  1779  007290  53                 	db	83	;'S'
  1780  007291  49                 	db	73	;'I'
  1781  007292  4F                 	db	79	;'O'
  1782  007293  4E                 	db	78	;'N'
  1783  007294  20                 	db	32
  1784  007295  2D                 	db	45
  1785  007296  20                 	db	32
  1786  007297  44                 	db	68	;'D'
  1787  007298  69                 	db	105	;'i'
  1788  007299  73                 	db	115	;'s'
  1789  00729A  70                 	db	112	;'p'
  1790  00729B  6C                 	db	108	;'l'
  1791  00729C  61                 	db	97	;'a'
  1792  00729D  79                 	db	121	;'y'
  1793  00729E  20                 	db	32
  1794  00729F  66                 	db	102	;'f'
  1795  0072A0  69                 	db	105	;'i'
  1796  0072A1  72                 	db	114	;'r'
  1797  0072A2  6D                 	db	109	;'m'
  1798  0072A3  77                 	db	119	;'w'
  1799  0072A4  61                 	db	97	;'a'
  1800  0072A5  72                 	db	114	;'r'
  1801  0072A6  65                 	db	101	;'e'
  1802  0072A7  20                 	db	32
  1803  0072A8  76                 	db	118	;'v'
  1804  0072A9  65                 	db	101	;'e'
  1805  0072AA  72                 	db	114	;'r'
  1806  0072AB  73                 	db	115	;'s'
  1807  0072AC  69                 	db	105	;'i'
  1808  0072AD  6F                 	db	111	;'o'
  1809  0072AE  6E                 	db	110	;'n'
  1810  0072AF  20                 	db	32
  1811  0072B0  69                 	db	105	;'i'
  1812  0072B1  6E                 	db	110	;'n'
  1813  0072B2  66                 	db	102	;'f'
  1814  0072B3  6F                 	db	111	;'o'
  1815  0072B4  72                 	db	114	;'r'
  1816  0072B5  6D                 	db	109	;'m'
  1817  0072B6  61                 	db	97	;'a'
  1818  0072B7  74                 	db	116	;'t'
  1819  0072B8  69                 	db	105	;'i'
  1820  0072B9  6F                 	db	111	;'o'
  1821  0072BA  6E                 	db	110	;'n'
  1822  0072BB  2E                 	db	46
  1823  0072BC  0D                 	db	13
  1824  0072BD  0A                 	db	10
  1825  0072BE  00                 	db	0
  1826  0072BF                     STR_234:
  1827  0072BF  20                 	db	32
  1828  0072C0  20                 	db	32
  1829  0072C1  20                 	db	32
  1830  0072C2  20                 	db	32
  1831  0072C3  20                 	db	32
  1832  0072C4  20                 	db	32
  1833  0072C5  20                 	db	32
  1834  0072C6  20                 	db	32
  1835  0072C7  20                 	db	32
  1836  0072C8  20                 	db	32
  1837  0072C9  20                 	db	32
  1838  0072CA  20                 	db	32
  1839  0072CB  20                 	db	32
  1840  0072CC  20                 	db	32
  1841  0072CD  20                 	db	32
  1842  0072CE  20                 	db	32
  1843  0072CF  46                 	db	70	;'F'
  1844  0072D0  6F                 	db	111	;'o'
  1845  0072D1  72                 	db	114	;'r'
  1846  0072D2  6D                 	db	109	;'m'
  1847  0072D3  61                 	db	97	;'a'
  1848  0072D4  74                 	db	116	;'t'
  1849  0072D5  3A                 	db	58	;':'
  1850  0072D6  20                 	db	32
  1851  0072D7  73                 	db	115	;'s'
  1852  0072D8  65                 	db	101	;'e'
  1853  0072D9  74                 	db	116	;'t'
  1854  0072DA  20                 	db	32
  1855  0072DB  72                 	db	114	;'r'
  1856  0072DC  77                 	db	119	;'w'
  1857  0072DD  74                 	db	116	;'t'
  1858  0072DE  69                 	db	105	;'i'
  1859  0072DF  6D                 	db	109	;'m'
  1860  0072E0  65                 	db	101	;'e'
  1861  0072E1  6F                 	db	111	;'o'
  1862  0072E2  75                 	db	117	;'u'
  1863  0072E3  74                 	db	116	;'t'
  1864  0072E4  20                 	db	32
  1865  0072E5  74                 	db	116	;'t'
  1866  0072E6  69                 	db	105	;'i'
  1867  0072E7  6D                 	db	109	;'m'
  1868  0072E8  65                 	db	101	;'e'
  1869  0072E9  6F                 	db	111	;'o'
  1870  0072EA  75                 	db	117	;'u'
  1871  0072EB  74                 	db	116	;'t'
  1872  0072EC  2E                 	db	46
  1873  0072ED  0D                 	db	13
  1874  0072EE  0A                 	db	10
  1875  0072EF  00                 	db	0
  1876  0072F0                     STR_232:
  1877  0072F0  20                 	db	32
  1878  0072F1  20                 	db	32
  1879  0072F2  20                 	db	32
  1880  0072F3  20                 	db	32
  1881  0072F4  44                 	db	68	;'D'
  1882  0072F5  45                 	db	69	;'E'
  1883  0072F6  43                 	db	67	;'C'
  1884  0072F7  49                 	db	73	;'I'
  1885  0072F8  4D                 	db	77	;'M'
  1886  0072F9  41                 	db	65	;'A'
  1887  0072FA  4C                 	db	76	;'L'
  1888  0072FB  20                 	db	32
  1889  0072FC  2D                 	db	45
  1890  0072FD  20                 	db	32
  1891  0072FE  44                 	db	68	;'D'
  1892  0072FF  69                 	db	105	;'i'
  1893  007300  73                 	db	115	;'s'
  1894  007301  70                 	db	112	;'p'
  1895  007302  6C                 	db	108	;'l'
  1896  007303  61                 	db	97	;'a'
  1897  007304  79                 	db	121	;'y'
  1898  007305  20                 	db	32
  1899  007306  6E                 	db	110	;'n'
  1900  007307  75                 	db	117	;'u'
  1901  007308  6D                 	db	109	;'m'
  1902  007309  65                 	db	101	;'e'
  1903  00730A  72                 	db	114	;'r'
  1904  00730B  69                 	db	105	;'i'
  1905  00730C  63                 	db	99	;'c'
  1906  00730D  61                 	db	97	;'a'
  1907  00730E  6C                 	db	108	;'l'
  1908  00730F  73                 	db	115	;'s'
  1909  007310  20                 	db	32
  1910  007311  69                 	db	105	;'i'
  1911  007312  6E                 	db	110	;'n'
  1912  007313  20                 	db	32
  1913  007314  64                 	db	100	;'d'
  1914  007315  65                 	db	101	;'e'
  1915  007316  63                 	db	99	;'c'
  1916  007317  69                 	db	105	;'i'
  1917  007318  6D                 	db	109	;'m'
  1918  007319  61                 	db	97	;'a'
  1919  00731A  6C                 	db	108	;'l'
  1920  00731B  2E                 	db	46
  1921  00731C  0D                 	db	13
  1922  00731D  0A                 	db	10
  1923  00731E  00                 	db	0
  1924  00731F                     STR_231:
  1925  00731F  20                 	db	32
  1926  007320  20                 	db	32
  1927  007321  20                 	db	32
  1928  007322  20                 	db	32
  1929  007323  48                 	db	72	;'H'
  1930  007324  45                 	db	69	;'E'
  1931  007325  58                 	db	88	;'X'
  1932  007326  20                 	db	32
  1933  007327  2D                 	db	45
  1934  007328  20                 	db	32
  1935  007329  44                 	db	68	;'D'
  1936  00732A  69                 	db	105	;'i'
  1937  00732B  73                 	db	115	;'s'
  1938  00732C  70                 	db	112	;'p'
  1939  00732D  6C                 	db	108	;'l'
  1940  00732E  61                 	db	97	;'a'
  1941  00732F  79                 	db	121	;'y'
  1942  007330  20                 	db	32
  1943  007331  6E                 	db	110	;'n'
  1944  007332  75                 	db	117	;'u'
  1945  007333  6D                 	db	109	;'m'
  1946  007334  65                 	db	101	;'e'
  1947  007335  72                 	db	114	;'r'
  1948  007336  69                 	db	105	;'i'
  1949  007337  63                 	db	99	;'c'
  1950  007338  61                 	db	97	;'a'
  1951  007339  6C                 	db	108	;'l'
  1952  00733A  73                 	db	115	;'s'
  1953  00733B  20                 	db	32
  1954  00733C  69                 	db	105	;'i'
  1955  00733D  6E                 	db	110	;'n'
  1956  00733E  20                 	db	32
  1957  00733F  68                 	db	104	;'h'
  1958  007340  65                 	db	101	;'e'
  1959  007341  78                 	db	120	;'x'
  1960  007342  61                 	db	97	;'a'
  1961  007343  64                 	db	100	;'d'
  1962  007344  65                 	db	101	;'e'
  1963  007345  63                 	db	99	;'c'
  1964  007346  69                 	db	105	;'i'
  1965  007347  6D                 	db	109	;'m'
  1966  007348  61                 	db	97	;'a'
  1967  007349  6C                 	db	108	;'l'
  1968  00734A  2E                 	db	46
  1969  00734B  0D                 	db	13
  1970  00734C  0A                 	db	10
  1971  00734D  00                 	db	0
  1972  00734E                     STR_222:
  1973  00734E  46                 	db	70	;'F'
  1974  00734F  49                 	db	73	;'I'
  1975  007350  4E                 	db	78	;'N'
  1976  007351  44                 	db	68	;'D'
  1977  007352  20                 	db	32
  1978  007353  2D                 	db	45
  1979  007354  20                 	db	32
  1980  007355  46                 	db	70	;'F'
  1981  007356  69                 	db	105	;'i'
  1982  007357  6E                 	db	110	;'n'
  1983  007358  64                 	db	100	;'d'
  1984  007359  20                 	db	32
  1985  00735A  61                 	db	97	;'a'
  1986  00735B  76                 	db	118	;'v'
  1987  00735C  61                 	db	97	;'a'
  1988  00735D  69                 	db	105	;'i'
  1989  00735E  6C                 	db	108	;'l'
  1990  00735F  61                 	db	97	;'a'
  1991  007360  62                 	db	98	;'b'
  1992  007361  6C                 	db	108	;'l'
  1993  007362  65                 	db	101	;'e'
  1994  007363  20                 	db	32
  1995  007364  43                 	db	67	;'C'
  1996  007365  41                 	db	65	;'A'
  1997  007366  4E                 	db	78	;'N'
  1998  007367  34                 	db	52	;'4'
  1999  007368  56                 	db	86	;'V'
  2000  007369  53                 	db	83	;'S'
  2001  00736A  43                 	db	67	;'C'
  2002  00736B  50                 	db	80	;'P'
  2003  00736C  20                 	db	32
  2004  00736D  6E                 	db	110	;'n'
  2005  00736E  6F                 	db	111	;'o'
  2006  00736F  64                 	db	100	;'d'
  2007  007370  65                 	db	101	;'e'
  2008  007371  73                 	db	115	;'s'
  2009  007372  20                 	db	32
  2010  007373  6F                 	db	111	;'o'
  2011  007374  6E                 	db	110	;'n'
  2012  007375  20                 	db	32
  2013  007376  62                 	db	98	;'b'
  2014  007377  75                 	db	117	;'u'
  2015  007378  73                 	db	115	;'s'
  2016  007379  2E                 	db	46
  2017  00737A  0D                 	db	13
  2018  00737B  0A                 	db	10
  2019  00737C  00                 	db	0
  2020  00737D                     STR_210:
  2021  00737D  53                 	db	83	;'S'
  2022  00737E  49                 	db	73	;'I'
  2023  00737F  4C                 	db	76	;'L'
  2024  007380  45                 	db	69	;'E'
  2025  007381  4E                 	db	78	;'N'
  2026  007382  54                 	db	84	;'T'
  2027  007383  20                 	db	32
  2028  007384  2D                 	db	45
  2029  007385  20                 	db	32
  2030  007386  4F                 	db	79	;'O'
  2031  007387  70                 	db	112	;'p'
  2032  007388  65                 	db	101	;'e'
  2033  007389  6E                 	db	110	;'n'
  2034  00738A  20                 	db	32
  2035  00738B  43                 	db	67	;'C'
  2036  00738C  41                 	db	65	;'A'
  2037  00738D  4E                 	db	78	;'N'
  2038  00738E  20                 	db	32
  2039  00738F  69                 	db	105	;'i'
  2040  007390  6E                 	db	110	;'n'
  2041  007391  74                 	db	116	;'t'
  2042  007392  65                 	db	101	;'e'
  2043  007393  72                 	db	114	;'r'
  2044  007394  66                 	db	102	;'f'
  2045  007395  61                 	db	97	;'a'
  2046  007396  63                 	db	99	;'c'
  2047  007397  65                 	db	101	;'e'
  2048  007398  20                 	db	32
  2049  007399  69                 	db	105	;'i'
  2050  00739A  6E                 	db	110	;'n'
  2051  00739B  20                 	db	32
  2052  00739C  73                 	db	115	;'s'
  2053  00739D  69                 	db	105	;'i'
  2054  00739E  6C                 	db	108	;'l'
  2055  00739F  65                 	db	101	;'e'
  2056  0073A0  6E                 	db	110	;'n'
  2057  0073A1  74                 	db	116	;'t'
  2058  0073A2  20                 	db	32
  2059  0073A3  6D                 	db	109	;'m'
  2060  0073A4  6F                 	db	111	;'o'
  2061  0073A5  64                 	db	100	;'d'
  2062  0073A6  65                 	db	101	;'e'
  2063  0073A7  2E                 	db	46
  2064  0073A8  0D                 	db	13
  2065  0073A9  0A                 	db	10
  2066  0073AA  00                 	db	0
  2067  0073AB                     STR_215:
  2068  0073AB  49                 	db	73	;'I'
  2069  0073AC  46                 	db	70	;'F'
  2070  0073AD  4D                 	db	77	;'M'
  2071  0073AE  4F                 	db	79	;'O'
  2072  0073AF  44                 	db	68	;'D'
  2073  0073B0  45                 	db	69	;'E'
  2074  0073B1  20                 	db	32
  2075  0073B2  2D                 	db	45
  2076  0073B3  20                 	db	32
  2077  0073B4  44                 	db	68	;'D'
  2078  0073B5  69                 	db	105	;'i'
  2079  0073B6  73                 	db	115	;'s'
  2080  0073B7  70                 	db	112	;'p'
  2081  0073B8  6C                 	db	108	;'l'
  2082  0073B9  61                 	db	97	;'a'
  2083  0073BA  79                 	db	121	;'y'
  2084  0073BB  20                 	db	32
  2085  0073BC  73                 	db	115	;'s'
  2086  0073BD  65                 	db	101	;'e'
  2087  0073BE  6C                 	db	108	;'l'
  2088  0073BF  65                 	db	101	;'e'
  2089  0073C0  63                 	db	99	;'c'
  2090  0073C1  74                 	db	116	;'t'
  2091  0073C2  65                 	db	101	;'e'
  2092  0073C3  64                 	db	100	;'d'
  2093  0073C4  20                 	db	32
  2094  0073C5  69                 	db	105	;'i'
  2095  0073C6  6E                 	db	110	;'n'
  2096  0073C7  74                 	db	116	;'t'
  2097  0073C8  65                 	db	101	;'e'
  2098  0073C9  72                 	db	114	;'r'
  2099  0073CA  66                 	db	102	;'f'
  2100  0073CB  61                 	db	97	;'a'
  2101  0073CC  63                 	db	99	;'c'
  2102  0073CD  65                 	db	101	;'e'
  2103  0073CE  20                 	db	32
  2104  0073CF  6D                 	db	109	;'m'
  2105  0073D0  6F                 	db	111	;'o'
  2106  0073D1  64                 	db	100	;'d'
  2107  0073D2  65                 	db	101	;'e'
  2108  0073D3  2E                 	db	46
  2109  0073D4  0D                 	db	13
  2110  0073D5  0A                 	db	10
  2111  0073D6  00                 	db	0
  2112  0073D7                     STR_209:
  2113  0073D7  4F                 	db	79	;'O'
  2114  0073D8  50                 	db	80	;'P'
  2115  0073D9  45                 	db	69	;'E'
  2116  0073DA  4E                 	db	78	;'N'
  2117  0073DB  20                 	db	32
  2118  0073DC  2D                 	db	45
  2119  0073DD  20                 	db	32
  2120  0073DE  4F                 	db	79	;'O'
  2121  0073DF  70                 	db	112	;'p'
  2122  0073E0  65                 	db	101	;'e'
  2123  0073E1  6E                 	db	110	;'n'
  2124  0073E2  20                 	db	32
  2125  0073E3  43                 	db	67	;'C'
  2126  0073E4  41                 	db	65	;'A'
  2127  0073E5  4E                 	db	78	;'N'
  2128  0073E6  20                 	db	32
  2129  0073E7  69                 	db	105	;'i'
  2130  0073E8  6E                 	db	110	;'n'
  2131  0073E9  74                 	db	116	;'t'
  2132  0073EA  65                 	db	101	;'e'
  2133  0073EB  72                 	db	114	;'r'
  2134  0073EC  66                 	db	102	;'f'
  2135  0073ED  61                 	db	97	;'a'
  2136  0073EE  63                 	db	99	;'c'
  2137  0073EF  65                 	db	101	;'e'
  2138  0073F0  20                 	db	32
  2139  0073F1  69                 	db	105	;'i'
  2140  0073F2  6E                 	db	110	;'n'
  2141  0073F3  20                 	db	32
  2142  0073F4  6E                 	db	110	;'n'
  2143  0073F5  6F                 	db	111	;'o'
  2144  0073F6  72                 	db	114	;'r'
  2145  0073F7  6D                 	db	109	;'m'
  2146  0073F8  61                 	db	97	;'a'
  2147  0073F9  6C                 	db	108	;'l'
  2148  0073FA  20                 	db	32
  2149  0073FB  6D                 	db	109	;'m'
  2150  0073FC  6F                 	db	111	;'o'
  2151  0073FD  64                 	db	100	;'d'
  2152  0073FE  65                 	db	101	;'e'
  2153  0073FF  2E                 	db	46
  2154  007400  0D                 	db	13
  2155  007401  0A                 	db	10
  2156  007402  00                 	db	0
  2157  007403                     STR_115:
  2158  007403  2B                 	db	43
  2159  007404  4F                 	db	79	;'O'
  2160  007405  4B                 	db	75	;'K'
  2161  007406  20                 	db	32
  2162  007407  2D                 	db	45
  2163  007408  20                 	db	32
  2164  007409  4E                 	db	78	;'N'
  2165  00740A  75                 	db	117	;'u'
  2166  00740B  6D                 	db	109	;'m'
  2167  00740C  65                 	db	101	;'e'
  2168  00740D  72                 	db	114	;'r'
  2169  00740E  69                 	db	105	;'i'
  2170  00740F  63                 	db	99	;'c'
  2171  007410  61                 	db	97	;'a'
  2172  007411  6C                 	db	108	;'l'
  2173  007412  20                 	db	32
  2174  007413  6F                 	db	111	;'o'
  2175  007414  75                 	db	117	;'u'
  2176  007415  74                 	db	116	;'t'
  2177  007416  70                 	db	112	;'p'
  2178  007417  75                 	db	117	;'u'
  2179  007418  74                 	db	116	;'t'
  2180  007419  20                 	db	32
  2181  00741A  6E                 	db	110	;'n'
  2182  00741B  6F                 	db	111	;'o'
  2183  00741C  77                 	db	119	;'w'
  2184  00741D  20                 	db	32
  2185  00741E  69                 	db	105	;'i'
  2186  00741F  6E                 	db	110	;'n'
  2187  007420  20                 	db	32
  2188  007421  68                 	db	104	;'h'
  2189  007422  65                 	db	101	;'e'
  2190  007423  78                 	db	120	;'x'
  2191  007424  61                 	db	97	;'a'
  2192  007425  64                 	db	100	;'d'
  2193  007426  65                 	db	101	;'e'
  2194  007427  63                 	db	99	;'c'
  2195  007428  69                 	db	105	;'i'
  2196  007429  6D                 	db	109	;'m'
  2197  00742A  61                 	db	97	;'a'
  2198  00742B  6C                 	db	108	;'l'
  2199  00742C  0D                 	db	13
  2200  00742D  0A                 	db	10
  2201  00742E  00                 	db	0
  2202  00742F                     STR_92:
  2203  00742F  2D                 	db	45
  2204  007430  45                 	db	69	;'E'
  2205  007431  52                 	db	82	;'R'
  2206  007432  52                 	db	82	;'R'
  2207  007433  4F                 	db	79	;'O'
  2208  007434  52                 	db	82	;'R'
  2209  007435  20                 	db	32
  2210  007436  2D                 	db	45
  2211  007437  20                 	db	32
  2212  007438  66                 	db	102	;'f'
  2213  007439  69                 	db	105	;'i'
  2214  00743A  6C                 	db	108	;'l'
  2215  00743B  74                 	db	116	;'t'
  2216  00743C  65                 	db	101	;'e'
  2217  00743D  72                 	db	114	;'r'
  2218  00743E  20                 	db	32
  2219  00743F  66                 	db	102	;'f'
  2220  007440  6F                 	db	111	;'o'
  2221  007441  72                 	db	114	;'r'
  2222  007442  20                 	db	32
  2223  007443  70                 	db	112	;'p'
  2224  007444  72                 	db	114	;'r'
  2225  007445  69                 	db	105	;'i'
  2226  007446  6F                 	db	111	;'o'
  2227  007447  72                 	db	114	;'r'
  2228  007448  69                 	db	105	;'i'
  2229  007449  74                 	db	116	;'t'
  2230  00744A  79                 	db	121	;'y'
  2231  00744B  20                 	db	32
  2232  00744C  69                 	db	105	;'i'
  2233  00744D  73                 	db	115	;'s'
  2234  00744E  20                 	db	32
  2235  00744F  6D                 	db	109	;'m'
  2236  007450  69                 	db	105	;'i'
  2237  007451  73                 	db	115	;'s'
  2238  007452  73                 	db	115	;'s'
  2239  007453  69                 	db	105	;'i'
  2240  007454  6E                 	db	110	;'n'
  2241  007455  67                 	db	103	;'g'
  2242  007456  0D                 	db	13
  2243  007457  0A                 	db	10
  2244  007458  00                 	db	0
  2245  007459                     STR_98:
  2246  007459  2D                 	db	45
  2247  00745A  45                 	db	69	;'E'
  2248  00745B  52                 	db	82	;'R'
  2249  00745C  52                 	db	82	;'R'
  2250  00745D  4F                 	db	79	;'O'
  2251  00745E  52                 	db	82	;'R'
  2252  00745F  20                 	db	32
  2253  007460  2D                 	db	45
  2254  007461  20                 	db	32
  2255  007462  66                 	db	102	;'f'
  2256  007463  69                 	db	105	;'i'
  2257  007464  6C                 	db	108	;'l'
  2258  007465  74                 	db	116	;'t'
  2259  007466  65                 	db	101	;'e'
  2260  007467  72                 	db	114	;'r'
  2261  007468  20                 	db	32
  2262  007469  66                 	db	102	;'f'
  2263  00746A  6F                 	db	111	;'o'
  2264  00746B  72                 	db	114	;'r'
  2265  00746C  20                 	db	32
  2266  00746D  6E                 	db	110	;'n'
  2267  00746E  69                 	db	105	;'i'
  2268  00746F  64                 	db	100	;'d'
  2269  007470  65                 	db	101	;'e'
  2270  007471  20                 	db	32
  2271  007472  69                 	db	105	;'i'
  2272  007473  64                 	db	100	;'d'
  2273  007474  20                 	db	32
  2274  007475  69                 	db	105	;'i'
  2275  007476  73                 	db	115	;'s'
  2276  007477  20                 	db	32
  2277  007478  6D                 	db	109	;'m'
  2278  007479  69                 	db	105	;'i'
  2279  00747A  73                 	db	115	;'s'
  2280  00747B  73                 	db	115	;'s'
  2281  00747C  69                 	db	105	;'i'
  2282  00747D  6E                 	db	110	;'n'
  2283  00747E  67                 	db	103	;'g'
  2284  00747F  0D                 	db	13
  2285  007480  0A                 	db	10
  2286  007481  00                 	db	0
  2287  007482                     STR_221:
  2288  007482  48                 	db	72	;'H'
  2289  007483  45                 	db	69	;'E'
  2290  007484  4C                 	db	76	;'L'
  2291  007485  50                 	db	80	;'P'
  2292  007486  20                 	db	32
  2293  007487  2D                 	db	45
  2294  007488  20                 	db	32
  2295  007489  44                 	db	68	;'D'
  2296  00748A  69                 	db	105	;'i'
  2297  00748B  73                 	db	115	;'s'
  2298  00748C  70                 	db	112	;'p'
  2299  00748D  6C                 	db	108	;'l'
  2300  00748E  61                 	db	97	;'a'
  2301  00748F  79                 	db	121	;'y'
  2302  007490  20                 	db	32
  2303  007491  74                 	db	116	;'t'
  2304  007492  68                 	db	104	;'h'
  2305  007493  69                 	db	105	;'i'
  2306  007494  73                 	db	115	;'s'
  2307  007495  20                 	db	32
  2308  007496  68                 	db	104	;'h'
  2309  007497  65                 	db	101	;'e'
  2310  007498  6C                 	db	108	;'l'
  2311  007499  70                 	db	112	;'p'
  2312  00749A  20                 	db	32
  2313  00749B  69                 	db	105	;'i'
  2314  00749C  6E                 	db	110	;'n'
  2315  00749D  66                 	db	102	;'f'
  2316  00749E  6F                 	db	111	;'o'
  2317  00749F  72                 	db	114	;'r'
  2318  0074A0  6D                 	db	109	;'m'
  2319  0074A1  61                 	db	97	;'a'
  2320  0074A2  74                 	db	116	;'t'
  2321  0074A3  69                 	db	105	;'i'
  2322  0074A4  6F                 	db	111	;'o'
  2323  0074A5  6E                 	db	110	;'n'
  2324  0074A6  2E                 	db	46
  2325  0074A7  0D                 	db	13
  2326  0074A8  0A                 	db	10
  2327  0074A9  00                 	db	0
  2328  0074AA                     STR_105:
  2329  0074AA  2D                 	db	45
  2330  0074AB  45                 	db	69	;'E'
  2331  0074AC  52                 	db	82	;'R'
  2332  0074AD  52                 	db	82	;'R'
  2333  0074AE  4F                 	db	79	;'O'
  2334  0074AF  52                 	db	82	;'R'
  2335  0074B0  20                 	db	32
  2336  0074B1  2D                 	db	45
  2337  0074B2  20                 	db	32
  2338  0074B3  6D                 	db	109	;'m'
  2339  0074B4  61                 	db	97	;'a'
  2340  0074B5  73                 	db	115	;'s'
  2341  0074B6  6B                 	db	107	;'k'
  2342  0074B7  20                 	db	32
  2343  0074B8  66                 	db	102	;'f'
  2344  0074B9  6F                 	db	111	;'o'
  2345  0074BA  72                 	db	114	;'r'
  2346  0074BB  20                 	db	32
  2347  0074BC  70                 	db	112	;'p'
  2348  0074BD  72                 	db	114	;'r'
  2349  0074BE  69                 	db	105	;'i'
  2350  0074BF  6F                 	db	111	;'o'
  2351  0074C0  72                 	db	114	;'r'
  2352  0074C1  69                 	db	105	;'i'
  2353  0074C2  74                 	db	116	;'t'
  2354  0074C3  79                 	db	121	;'y'
  2355  0074C4  20                 	db	32
  2356  0074C5  69                 	db	105	;'i'
  2357  0074C6  73                 	db	115	;'s'
  2358  0074C7  20                 	db	32
  2359  0074C8  6D                 	db	109	;'m'
  2360  0074C9  69                 	db	105	;'i'
  2361  0074CA  73                 	db	115	;'s'
  2362  0074CB  73                 	db	115	;'s'
  2363  0074CC  69                 	db	105	;'i'
  2364  0074CD  6E                 	db	110	;'n'
  2365  0074CE  67                 	db	103	;'g'
  2366  0074CF  0D                 	db	13
  2367  0074D0  0A                 	db	10
  2368  0074D1  00                 	db	0
  2369  0074D2                     STR_117:
  2370  0074D2  2B                 	db	43
  2371  0074D3  4F                 	db	79	;'O'
  2372  0074D4  4B                 	db	75	;'K'
  2373  0074D5  20                 	db	32
  2374  0074D6  2D                 	db	45
  2375  0074D7  20                 	db	32
  2376  0074D8  4E                 	db	78	;'N'
  2377  0074D9  75                 	db	117	;'u'
  2378  0074DA  6D                 	db	109	;'m'
  2379  0074DB  65                 	db	101	;'e'
  2380  0074DC  72                 	db	114	;'r'
  2381  0074DD  69                 	db	105	;'i'
  2382  0074DE  63                 	db	99	;'c'
  2383  0074DF  61                 	db	97	;'a'
  2384  0074E0  6C                 	db	108	;'l'
  2385  0074E1  20                 	db	32
  2386  0074E2  6F                 	db	111	;'o'
  2387  0074E3  75                 	db	117	;'u'
  2388  0074E4  74                 	db	116	;'t'
  2389  0074E5  70                 	db	112	;'p'
  2390  0074E6  75                 	db	117	;'u'
  2391  0074E7  74                 	db	116	;'t'
  2392  0074E8  20                 	db	32
  2393  0074E9  6E                 	db	110	;'n'
  2394  0074EA  6F                 	db	111	;'o'
  2395  0074EB  77                 	db	119	;'w'
  2396  0074EC  20                 	db	32
  2397  0074ED  69                 	db	105	;'i'
  2398  0074EE  6E                 	db	110	;'n'
  2399  0074EF  20                 	db	32
  2400  0074F0  64                 	db	100	;'d'
  2401  0074F1  65                 	db	101	;'e'
  2402  0074F2  63                 	db	99	;'c'
  2403  0074F3  69                 	db	105	;'i'
  2404  0074F4  6D                 	db	109	;'m'
  2405  0074F5  61                 	db	97	;'a'
  2406  0074F6  6C                 	db	108	;'l'
  2407  0074F7  0D                 	db	13
  2408  0074F8  0A                 	db	10
  2409  0074F9  00                 	db	0
  2410  0074FA                     STR_90:
  2411  0074FA  2D                 	db	45
  2412  0074FB  45                 	db	69	;'E'
  2413  0074FC  52                 	db	82	;'R'
  2414  0074FD  52                 	db	82	;'R'
  2415  0074FE  4F                 	db	79	;'O'
  2416  0074FF  52                 	db	82	;'R'
  2417  007500  20                 	db	32
  2418  007501  2D                 	db	45
  2419  007502  20                 	db	32
  2420  007503  4E                 	db	78	;'N'
  2421  007504  6F                 	db	111	;'o'
  2422  007505  20                 	db	32
  2423  007506  66                 	db	102	;'f'
  2424  007507  69                 	db	105	;'i'
  2425  007508  6C                 	db	108	;'l'
  2426  007509  74                 	db	116	;'t'
  2427  00750A  65                 	db	101	;'e'
  2428  00750B  72                 	db	114	;'r'
  2429  00750C  20                 	db	32
  2430  00750D  6E                 	db	110	;'n'
  2431  00750E  75                 	db	117	;'u'
  2432  00750F  6D                 	db	109	;'m'
  2433  007510  62                 	db	98	;'b'
  2434  007511  65                 	db	101	;'e'
  2435  007512  72                 	db	114	;'r'
  2436  007513  20                 	db	32
  2437  007514  73                 	db	115	;'s'
  2438  007515  70                 	db	112	;'p'
  2439  007516  65                 	db	101	;'e'
  2440  007517  63                 	db	99	;'c'
  2441  007518  69                 	db	105	;'i'
  2442  007519  66                 	db	102	;'f'
  2443  00751A  69                 	db	105	;'i'
  2444  00751B  65                 	db	101	;'e'
  2445  00751C  64                 	db	100	;'d'
  2446  00751D  2E                 	db	46
  2447  00751E  0D                 	db	13
  2448  00751F  0A                 	db	10
  2449  007520  00                 	db	0
  2450  007521                     STR_220:
  2451  007521  45                 	db	69	;'E'
  2452  007522  52                 	db	82	;'R'
  2453  007523  52                 	db	82	;'R'
  2454  007524  20                 	db	32
  2455  007525  2D                 	db	45
  2456  007526  20                 	db	32
  2457  007527  44                 	db	68	;'D'
  2458  007528  69                 	db	105	;'i'
  2459  007529  73                 	db	115	;'s'
  2460  00752A  70                 	db	112	;'p'
  2461  00752B  6C                 	db	108	;'l'
  2462  00752C  61                 	db	97	;'a'
  2463  00752D  79                 	db	121	;'y'
  2464  00752E  20                 	db	32
  2465  00752F  43                 	db	67	;'C'
  2466  007530  41                 	db	65	;'A'
  2467  007531  4E                 	db	78	;'N'
  2468  007532  20                 	db	32
  2469  007533  65                 	db	101	;'e'
  2470  007534  72                 	db	114	;'r'
  2471  007535  72                 	db	114	;'r'
  2472  007536  6F                 	db	111	;'o'
  2473  007537  72                 	db	114	;'r'
  2474  007538  20                 	db	32
  2475  007539  69                 	db	105	;'i'
  2476  00753A  6E                 	db	110	;'n'
  2477  00753B  66                 	db	102	;'f'
  2478  00753C  6F                 	db	111	;'o'
  2479  00753D  72                 	db	114	;'r'
  2480  00753E  6D                 	db	109	;'m'
  2481  00753F  61                 	db	97	;'a'
  2482  007540  74                 	db	116	;'t'
  2483  007541  69                 	db	105	;'i'
  2484  007542  6F                 	db	111	;'o'
  2485  007543  6E                 	db	110	;'n'
  2486  007544  2E                 	db	46
  2487  007545  0D                 	db	13
  2488  007546  0A                 	db	10
  2489  007547  00                 	db	0
  2490  007548                     STR_206:
  2491  007548  48                 	db	72	;'H'
  2492  007549  65                 	db	101	;'e'
  2493  00754A  6C                 	db	108	;'l'
  2494  00754B  70                 	db	112	;'p'
  2495  00754C  20                 	db	32
  2496  00754D  66                 	db	102	;'f'
  2497  00754E  6F                 	db	111	;'o'
  2498  00754F  72                 	db	114	;'r'
  2499  007550  20                 	db	32
  2500  007551  74                 	db	116	;'t'
  2501  007552  68                 	db	104	;'h'
  2502  007553  65                 	db	101	;'e'
  2503  007554  20                 	db	32
  2504  007555  46                 	db	70	;'F'
  2505  007556  72                 	db	114	;'r'
  2506  007557  61                 	db	97	;'a'
  2507  007558  6E                 	db	110	;'n'
  2508  007559  6B                 	db	107	;'k'
  2509  00755A  66                 	db	102	;'f'
  2510  00755B  75                 	db	117	;'u'
  2511  00755C  72                 	db	114	;'r'
  2512  00755D  74                 	db	116	;'t'
  2513  00755E  20                 	db	32
  2514  00755F  52                 	db	82	;'R'
  2515  007560  53                 	db	83	;'S'
  2516  007561  2D                 	db	45
  2517  007562  32                 	db	50	;'2'
  2518  007563  33                 	db	51	;'3'
  2519  007564  32                 	db	50	;'2'
  2520  007565  20                 	db	32
  2521  007566  6D                 	db	109	;'m'
  2522  007567  6F                 	db	111	;'o'
  2523  007568  64                 	db	100	;'d'
  2524  007569  75                 	db	117	;'u'
  2525  00756A  6C                 	db	108	;'l'
  2526  00756B  65                 	db	101	;'e'
  2527  00756C  0D                 	db	13
  2528  00756D  0A                 	db	10
  2529  00756E  00                 	db	0
  2530  00756F                     STR_111:
  2531  00756F  2D                 	db	45
  2532  007570  45                 	db	69	;'E'
  2533  007571  52                 	db	82	;'R'
  2534  007572  52                 	db	82	;'R'
  2535  007573  4F                 	db	79	;'O'
  2536  007574  52                 	db	82	;'R'
  2537  007575  20                 	db	32
  2538  007576  2D                 	db	45
  2539  007577  20                 	db	32
  2540  007578  6D                 	db	109	;'m'
  2541  007579  61                 	db	97	;'a'
  2542  00757A  73                 	db	115	;'s'
  2543  00757B  6B                 	db	107	;'k'
  2544  00757C  20                 	db	32
  2545  00757D  66                 	db	102	;'f'
  2546  00757E  6F                 	db	111	;'o'
  2547  00757F  72                 	db	114	;'r'
  2548  007580  20                 	db	32
  2549  007581  6E                 	db	110	;'n'
  2550  007582  69                 	db	105	;'i'
  2551  007583  64                 	db	100	;'d'
  2552  007584  65                 	db	101	;'e'
  2553  007585  20                 	db	32
  2554  007586  69                 	db	105	;'i'
  2555  007587  64                 	db	100	;'d'
  2556  007588  20                 	db	32
  2557  007589  69                 	db	105	;'i'
  2558  00758A  73                 	db	115	;'s'
  2559  00758B  20                 	db	32
  2560  00758C  6D                 	db	109	;'m'
  2561  00758D  69                 	db	105	;'i'
  2562  00758E  73                 	db	115	;'s'
  2563  00758F  73                 	db	115	;'s'
  2564  007590  69                 	db	105	;'i'
  2565  007591  6E                 	db	110	;'n'
  2566  007592  67                 	db	103	;'g'
  2567  007593  0D                 	db	13
  2568  007594  0A                 	db	10
  2569  007595  00                 	db	0
  2570  007596                     STR_94:
  2571  007596  2D                 	db	45
  2572  007597  45                 	db	69	;'E'
  2573  007598  52                 	db	82	;'R'
  2574  007599  52                 	db	82	;'R'
  2575  00759A  4F                 	db	79	;'O'
  2576  00759B  52                 	db	82	;'R'
  2577  00759C  20                 	db	32
  2578  00759D  2D                 	db	45
  2579  00759E  20                 	db	32
  2580  00759F  66                 	db	102	;'f'
  2581  0075A0  69                 	db	105	;'i'
  2582  0075A1  6C                 	db	108	;'l'
  2583  0075A2  74                 	db	116	;'t'
  2584  0075A3  65                 	db	101	;'e'
  2585  0075A4  72                 	db	114	;'r'
  2586  0075A5  20                 	db	32
  2587  0075A6  66                 	db	102	;'f'
  2588  0075A7  6F                 	db	111	;'o'
  2589  0075A8  72                 	db	114	;'r'
  2590  0075A9  20                 	db	32
  2591  0075AA  63                 	db	99	;'c'
  2592  0075AB  6C                 	db	108	;'l'
  2593  0075AC  61                 	db	97	;'a'
  2594  0075AD  73                 	db	115	;'s'
  2595  0075AE  73                 	db	115	;'s'
  2596  0075AF  20                 	db	32
  2597  0075B0  69                 	db	105	;'i'
  2598  0075B1  73                 	db	115	;'s'
  2599  0075B2  20                 	db	32
  2600  0075B3  6D                 	db	109	;'m'
  2601  0075B4  69                 	db	105	;'i'
  2602  0075B5  73                 	db	115	;'s'
  2603  0075B6  73                 	db	115	;'s'
  2604  0075B7  69                 	db	105	;'i'
  2605  0075B8  6E                 	db	110	;'n'
  2606  0075B9  67                 	db	103	;'g'
  2607  0075BA  0D                 	db	13
  2608  0075BB  0A                 	db	10
  2609  0075BC  00                 	db	0
  2610  0075BD                     STR_237:
  2611  0075BD  20                 	db	32
  2612  0075BE  20                 	db	32
  2613  0075BF  20                 	db	32
  2614  0075C0  20                 	db	32
  2615  0075C1  20                 	db	32
  2616  0075C2  20                 	db	32
  2617  0075C3  20                 	db	32
  2618  0075C4  20                 	db	32
  2619  0075C5  20                 	db	32
  2620  0075C6  20                 	db	32
  2621  0075C7  20                 	db	32
  2622  0075C8  4D                 	db	77	;'M'
  2623  0075C9  6F                 	db	111	;'o'
  2624  0075CA  64                 	db	100	;'d'
  2625  0075CB  65                 	db	101	;'e'
  2626  0075CC  73                 	db	115	;'s'
  2627  0075CD  3A                 	db	58	;':'
  2628  0075CE  20                 	db	32
  2629  0075CF  76                 	db	118	;'v'
  2630  0075D0  65                 	db	101	;'e'
  2631  0075D1  72                 	db	114	;'r'
  2632  0075D2  62                 	db	98	;'b'
  2633  0075D3  6F                 	db	111	;'o'
  2634  0075D4  73                 	db	115	;'s'
  2635  0075D5  65                 	db	101	;'e'
  2636  0075D6  7C                 	db	124
  2637  0075D7  76                 	db	118	;'v'
  2638  0075D8  73                 	db	115	;'s'
  2639  0075D9  63                 	db	99	;'c'
  2640  0075DA  70                 	db	112	;'p'
  2641  0075DB  7C                 	db	124
  2642  0075DC  73                 	db	115	;'s'
  2643  0075DD  6C                 	db	108	;'l'
  2644  0075DE  63                 	db	99	;'c'
  2645  0075DF  61                 	db	97	;'a'
  2646  0075E0  6E                 	db	110	;'n'
  2647  0075E1  0D                 	db	13
  2648  0075E2  0A                 	db	10
  2649  0075E3  00                 	db	0
  2650  0075E4                     STR_96:
  2651  0075E4  2D                 	db	45
  2652  0075E5  45                 	db	69	;'E'
  2653  0075E6  52                 	db	82	;'R'
  2654  0075E7  52                 	db	82	;'R'
  2655  0075E8  4F                 	db	79	;'O'
  2656  0075E9  52                 	db	82	;'R'
  2657  0075EA  20                 	db	32
  2658  0075EB  2D                 	db	45
  2659  0075EC  20                 	db	32
  2660  0075ED  66                 	db	102	;'f'
  2661  0075EE  69                 	db	105	;'i'
  2662  0075EF  6C                 	db	108	;'l'
  2663  0075F0  74                 	db	116	;'t'
  2664  0075F1  65                 	db	101	;'e'
  2665  0075F2  72                 	db	114	;'r'
  2666  0075F3  20                 	db	32
  2667  0075F4  66                 	db	102	;'f'
  2668  0075F5  6F                 	db	111	;'o'
  2669  0075F6  72                 	db	114	;'r'
  2670  0075F7  20                 	db	32
  2671  0075F8  74                 	db	116	;'t'
  2672  0075F9  79                 	db	121	;'y'
  2673  0075FA  70                 	db	112	;'p'
  2674  0075FB  65                 	db	101	;'e'
  2675  0075FC  20                 	db	32
  2676  0075FD  69                 	db	105	;'i'
  2677  0075FE  73                 	db	115	;'s'
  2678  0075FF  20                 	db	32
  2679  007600  6D                 	db	109	;'m'
  2680  007601  69                 	db	105	;'i'
  2681  007602  73                 	db	115	;'s'
  2682  007603  73                 	db	115	;'s'
  2683  007604  69                 	db	105	;'i'
  2684  007605  6E                 	db	110	;'n'
  2685  007606  67                 	db	103	;'g'
  2686  007607  0D                 	db	13
  2687  007608  0A                 	db	10
  2688  007609  00                 	db	0
  2689  00760A                     STR_103:
  2690  00760A  2D                 	db	45
  2691  00760B  45                 	db	69	;'E'
  2692  00760C  52                 	db	82	;'R'
  2693  00760D  52                 	db	82	;'R'
  2694  00760E  4F                 	db	79	;'O'
  2695  00760F  52                 	db	82	;'R'
  2696  007610  20                 	db	32
  2697  007611  2D                 	db	45
  2698  007612  20                 	db	32
  2699  007613  4E                 	db	78	;'N'
  2700  007614  6F                 	db	111	;'o'
  2701  007615  20                 	db	32
  2702  007616  6D                 	db	109	;'m'
  2703  007617  61                 	db	97	;'a'
  2704  007618  73                 	db	115	;'s'
  2705  007619  6B                 	db	107	;'k'
  2706  00761A  20                 	db	32
  2707  00761B  6E                 	db	110	;'n'
  2708  00761C  75                 	db	117	;'u'
  2709  00761D  6D                 	db	109	;'m'
  2710  00761E  62                 	db	98	;'b'
  2711  00761F  65                 	db	101	;'e'
  2712  007620  72                 	db	114	;'r'
  2713  007621  20                 	db	32
  2714  007622  73                 	db	115	;'s'
  2715  007623  70                 	db	112	;'p'
  2716  007624  65                 	db	101	;'e'
  2717  007625  63                 	db	99	;'c'
  2718  007626  69                 	db	105	;'i'
  2719  007627  66                 	db	102	;'f'
  2720  007628  69                 	db	105	;'i'
  2721  007629  65                 	db	101	;'e'
  2722  00762A  64                 	db	100	;'d'
  2723  00762B  2E                 	db	46
  2724  00762C  0D                 	db	13
  2725  00762D  0A                 	db	10
  2726  00762E  00                 	db	0
  2727  00762F                     STR_1:
  2728  00762F  0D                 	db	13
  2729  007630  0A                 	db	10
  2730  007631  46                 	db	70	;'F'
  2731  007632  72                 	db	114	;'r'
  2732  007633  61                 	db	97	;'a'
  2733  007634  6E                 	db	110	;'n'
  2734  007635  6B                 	db	107	;'k'
  2735  007636  66                 	db	102	;'f'
  2736  007637  75                 	db	117	;'u'
  2737  007638  72                 	db	114	;'r'
  2738  007639  74                 	db	116	;'t'
  2739  00763A  20                 	db	32
  2740  00763B  52                 	db	82	;'R'
  2741  00763C  53                 	db	83	;'S'
  2742  00763D  2D                 	db	45
  2743  00763E  32                 	db	50	;'2'
  2744  00763F  33                 	db	51	;'3'
  2745  007640  32                 	db	50	;'2'
  2746  007641  20                 	db	32
  2747  007642  43                 	db	67	;'C'
  2748  007643  41                 	db	65	;'A'
  2749  007644  4E                 	db	78	;'N'
  2750  007645  34                 	db	52	;'4'
  2751  007646  56                 	db	86	;'V'
  2752  007647  53                 	db	83	;'S'
  2753  007648  43                 	db	67	;'C'
  2754  007649  50                 	db	80	;'P'
  2755  00764A  20                 	db	32
  2756  00764B  6D                 	db	109	;'m'
  2757  00764C  6F                 	db	111	;'o'
  2758  00764D  64                 	db	100	;'d'
  2759  00764E  75                 	db	117	;'u'
  2760  00764F  6C                 	db	108	;'l'
  2761  007650  65                 	db	101	;'e'
  2762  007651  0D                 	db	13
  2763  007652  0A                 	db	10
  2764  007653  00                 	db	0
  2765  007654                     STR_107:
  2766  007654  2D                 	db	45
  2767  007655  45                 	db	69	;'E'
  2768  007656  52                 	db	82	;'R'
  2769  007657  52                 	db	82	;'R'
  2770  007658  4F                 	db	79	;'O'
  2771  007659  52                 	db	82	;'R'
  2772  00765A  20                 	db	32
  2773  00765B  2D                 	db	45
  2774  00765C  20                 	db	32
  2775  00765D  6D                 	db	109	;'m'
  2776  00765E  61                 	db	97	;'a'
  2777  00765F  73                 	db	115	;'s'
  2778  007660  6B                 	db	107	;'k'
  2779  007661  20                 	db	32
  2780  007662  66                 	db	102	;'f'
  2781  007663  6F                 	db	111	;'o'
  2782  007664  72                 	db	114	;'r'
  2783  007665  20                 	db	32
  2784  007666  63                 	db	99	;'c'
  2785  007667  6C                 	db	108	;'l'
  2786  007668  61                 	db	97	;'a'
  2787  007669  73                 	db	115	;'s'
  2788  00766A  73                 	db	115	;'s'
  2789  00766B  20                 	db	32
  2790  00766C  69                 	db	105	;'i'
  2791  00766D  73                 	db	115	;'s'
  2792  00766E  20                 	db	32
  2793  00766F  6D                 	db	109	;'m'
  2794  007670  69                 	db	105	;'i'
  2795  007671  73                 	db	115	;'s'
  2796  007672  73                 	db	115	;'s'
  2797  007673  69                 	db	105	;'i'
  2798  007674  6E                 	db	110	;'n'
  2799  007675  67                 	db	103	;'g'
  2800  007676  0D                 	db	13
  2801  007677  0A                 	db	10
  2802  007678  00                 	db	0
  2803  007679                     STR_109:
  2804  007679  2D                 	db	45
  2805  00767A  45                 	db	69	;'E'
  2806  00767B  52                 	db	82	;'R'
  2807  00767C  52                 	db	82	;'R'
  2808  00767D  4F                 	db	79	;'O'
  2809  00767E  52                 	db	82	;'R'
  2810  00767F  20                 	db	32
  2811  007680  2D                 	db	45
  2812  007681  20                 	db	32
  2813  007682  6D                 	db	109	;'m'
  2814  007683  61                 	db	97	;'a'
  2815  007684  73                 	db	115	;'s'
  2816  007685  6B                 	db	107	;'k'
  2817  007686  20                 	db	32
  2818  007687  66                 	db	102	;'f'
  2819  007688  6F                 	db	111	;'o'
  2820  007689  72                 	db	114	;'r'
  2821  00768A  20                 	db	32
  2822  00768B  74                 	db	116	;'t'
  2823  00768C  79                 	db	121	;'y'
  2824  00768D  70                 	db	112	;'p'
  2825  00768E  65                 	db	101	;'e'
  2826  00768F  20                 	db	32
  2827  007690  69                 	db	105	;'i'
  2828  007691  73                 	db	115	;'s'
  2829  007692  20                 	db	32
  2830  007693  6D                 	db	109	;'m'
  2831  007694  69                 	db	105	;'i'
  2832  007695  73                 	db	115	;'s'
  2833  007696  73                 	db	115	;'s'
  2834  007697  69                 	db	105	;'i'
  2835  007698  6E                 	db	110	;'n'
  2836  007699  67                 	db	103	;'g'
  2837  00769A  0D                 	db	13
  2838  00769B  0A                 	db	10
  2839  00769C  00                 	db	0
  2840  00769D                     STR_3:
  2841  00769D  68                 	db	104	;'h'
  2842  00769E  74                 	db	116	;'t'
  2843  00769F  74                 	db	116	;'t'
  2844  0076A0  70                 	db	112	;'p'
  2845  0076A1  3A                 	db	58	;':'
  2846  0076A2  2F                 	db	47
  2847  0076A3  2F                 	db	47
  2848  0076A4  77                 	db	119	;'w'
  2849  0076A5  77                 	db	119	;'w'
  2850  0076A6  77                 	db	119	;'w'
  2851  0076A7  2E                 	db	46
  2852  0076A8  70                 	db	112	;'p'
  2853  0076A9  61                 	db	97	;'a'
  2854  0076AA  72                 	db	114	;'r'
  2855  0076AB  61                 	db	97	;'a'
  2856  0076AC  64                 	db	100	;'d'
  2857  0076AD  69                 	db	105	;'i'
  2858  0076AE  73                 	db	115	;'s'
  2859  0076AF  65                 	db	101	;'e'
  2860  0076B0  6F                 	db	111	;'o'
  2861  0076B1  66                 	db	102	;'f'
  2862  0076B2  74                 	db	116	;'t'
  2863  0076B3  68                 	db	104	;'h'
  2864  0076B4  65                 	db	101	;'e'
  2865  0076B5  66                 	db	102	;'f'
  2866  0076B6  72                 	db	114	;'r'
  2867  0076B7  6F                 	db	111	;'o'
  2868  0076B8  67                 	db	103	;'g'
  2869  0076B9  2E                 	db	46
  2870  0076BA  63                 	db	99	;'c'
  2871  0076BB  6F                 	db	111	;'o'
  2872  0076BC  6D                 	db	109	;'m'
  2873  0076BD  0D                 	db	13
  2874  0076BE  0A                 	db	10
  2875  0076BF  00                 	db	0
  2876  0076C0                     STR_79:
  2877  0076C0  2B                 	db	43
  2878  0076C1  4F                 	db	79	;'O'
  2879  0076C2  4B                 	db	75	;'K'
  2880  0076C3  20                 	db	32
  2881  0076C4  2D                 	db	45
  2882  0076C5  20                 	db	32
  2883  0076C6  56                 	db	86	;'V'
  2884  0076C7  61                 	db	97	;'a'
  2885  0076C8  6C                 	db	108	;'l'
  2886  0076C9  75                 	db	117	;'u'
  2887  0076CA  65                 	db	101	;'e'
  2888  0076CB  20                 	db	32
  2889  0076CC  77                 	db	119	;'w'
  2890  0076CD  72                 	db	114	;'r'
  2891  0076CE  69                 	db	105	;'i'
  2892  0076CF  74                 	db	116	;'t'
  2893  0076D0  74                 	db	116	;'t'
  2894  0076D1  65                 	db	101	;'e'
  2895  0076D2  6E                 	db	110	;'n'
  2896  0076D3  20                 	db	32
  2897  0076D4  73                 	db	115	;'s'
  2898  0076D5  75                 	db	117	;'u'
  2899  0076D6  63                 	db	99	;'c'
  2900  0076D7  63                 	db	99	;'c'
  2901  0076D8  65                 	db	101	;'e'
  2902  0076D9  73                 	db	115	;'s'
  2903  0076DA  73                 	db	115	;'s'
  2904  0076DB  66                 	db	102	;'f'
  2905  0076DC  75                 	db	117	;'u'
  2906  0076DD  6C                 	db	108	;'l'
  2907  0076DE  6C                 	db	108	;'l'
  2908  0076DF  79                 	db	121	;'y'
  2909  0076E0  0D                 	db	13
  2910  0076E1  0A                 	db	10
  2911  0076E2  00                 	db	0
  2912  0076E3                     STR_230:
  2913  0076E3  53                 	db	83	;'S'
  2914  0076E4  45                 	db	69	;'E'
  2915  0076E5  54                 	db	84	;'T'
  2916  0076E6  20                 	db	32
  2917  0076E7  2D                 	db	45
  2918  0076E8  20                 	db	32
  2919  0076E9  50                 	db	80	;'P'
  2920  0076EA  65                 	db	101	;'e'
  2921  0076EB  72                 	db	114	;'r'
  2922  0076EC  73                 	db	115	;'s'
  2923  0076ED  69                 	db	105	;'i'
  2924  0076EE  73                 	db	115	;'s'
  2925  0076EF  74                 	db	116	;'t'
  2926  0076F0  65                 	db	101	;'e'
  2927  0076F1  6E                 	db	110	;'n'
  2928  0076F2  74                 	db	116	;'t'
  2929  0076F3  20                 	db	32
  2930  0076F4  66                 	db	102	;'f'
  2931  0076F5  75                 	db	117	;'u'
  2932  0076F6  6E                 	db	110	;'n'
  2933  0076F7  63                 	db	99	;'c'
  2934  0076F8  74                 	db	116	;'t'
  2935  0076F9  69                 	db	105	;'i'
  2936  0076FA  6F                 	db	111	;'o'
  2937  0076FB  6E                 	db	110	;'n'
  2938  0076FC  61                 	db	97	;'a'
  2939  0076FD  6C                 	db	108	;'l'
  2940  0076FE  69                 	db	105	;'i'
  2941  0076FF  74                 	db	116	;'t'
  2942  007700  79                 	db	121	;'y'
  2943  007701  2E                 	db	46
  2944  007702  0D                 	db	13
  2945  007703  0A                 	db	10
  2946  007704  00                 	db	0
  2947  007705                     STR_64:
  2948  007705  2D                 	db	45
  2949  007706  45                 	db	69	;'E'
  2950  007707  52                 	db	82	;'R'
  2951  007708  52                 	db	82	;'R'
  2952  007709  4F                 	db	79	;'O'
  2953  00770A  52                 	db	82	;'R'
  2954  00770B  20                 	db	32
  2955  00770C  2D                 	db	45
  2956  00770D  20                 	db	32
  2957  00770E  55                 	db	85	;'U'
  2958  00770F  6E                 	db	110	;'n'
  2959  007710  61                 	db	97	;'a'
  2960  007711  62                 	db	98	;'b'
  2961  007712  6C                 	db	108	;'l'
  2962  007713  65                 	db	101	;'e'
  2963  007714  20                 	db	32
  2964  007715  74                 	db	116	;'t'
  2965  007716  6F                 	db	111	;'o'
  2966  007717  20                 	db	32
  2967  007718  72                 	db	114	;'r'
  2968  007719  65                 	db	101	;'e'
  2969  00771A  61                 	db	97	;'a'
  2970  00771B  64                 	db	100	;'d'
  2971  00771C  20                 	db	32
  2972  00771D  72                 	db	114	;'r'
  2973  00771E  65                 	db	101	;'e'
  2974  00771F  67                 	db	103	;'g'
  2975  007720  69                 	db	105	;'i'
  2976  007721  73                 	db	115	;'s'
  2977  007722  74                 	db	116	;'t'
  2978  007723  65                 	db	101	;'e'
  2979  007724  72                 	db	114	;'r'
  2980  007725  20                 	db	32
  2981  007726  00                 	db	0
  2982  007727                     STR_219:
  2983  007727  53                 	db	83	;'S'
  2984  007728  54                 	db	84	;'T'
  2985  007729  41                 	db	65	;'A'
  2986  00772A  54                 	db	84	;'T'
  2987  00772B  20                 	db	32
  2988  00772C  2D                 	db	45
  2989  00772D  20                 	db	32
  2990  00772E  44                 	db	68	;'D'
  2991  00772F  69                 	db	105	;'i'
  2992  007730  73                 	db	115	;'s'
  2993  007731  70                 	db	112	;'p'
  2994  007732  6C                 	db	108	;'l'
  2995  007733  61                 	db	97	;'a'
  2996  007734  79                 	db	121	;'y'
  2997  007735  20                 	db	32
  2998  007736  43                 	db	67	;'C'
  2999  007737  41                 	db	65	;'A'
  3000  007738  4E                 	db	78	;'N'
  3001  007739  20                 	db	32
  3002  00773A  73                 	db	115	;'s'
  3003  00773B  74                 	db	116	;'t'
  3004  00773C  61                 	db	97	;'a'
  3005  00773D  74                 	db	116	;'t'
  3006  00773E  69                 	db	105	;'i'
  3007  00773F  73                 	db	115	;'s'
  3008  007740  74                 	db	116	;'t'
  3009  007741  69                 	db	105	;'i'
  3010  007742  63                 	db	99	;'c'
  3011  007743  73                 	db	115	;'s'
  3012  007744  2E                 	db	46
  3013  007745  0D                 	db	13
  3014  007746  0A                 	db	10
  3015  007747  00                 	db	0
  3016  007748                     STR_37:
  3017  007748  2D                 	db	45
  3018  007749  45                 	db	69	;'E'
  3019  00774A  52                 	db	82	;'R'
  3020  00774B  52                 	db	82	;'R'
  3021  00774C  4F                 	db	79	;'O'
  3022  00774D  52                 	db	82	;'R'
  3023  00774E  20                 	db	32
  3024  00774F  2D                 	db	45
  3025  007750  20                 	db	32
  3026  007751  46                 	db	70	;'F'
  3027  007752  61                 	db	97	;'a'
  3028  007753  69                 	db	105	;'i'
  3029  007754  6C                 	db	108	;'l'
  3030  007755  65                 	db	101	;'e'
  3031  007756  64                 	db	100	;'d'
  3032  007757  20                 	db	32
  3033  007758  74                 	db	116	;'t'
  3034  007759  6F                 	db	111	;'o'
  3035  00775A  20                 	db	32
  3036  00775B  73                 	db	115	;'s'
  3037  00775C  65                 	db	101	;'e'
  3038  00775D  6E                 	db	110	;'n'
  3039  00775E  64                 	db	100	;'d'
  3040  00775F  20                 	db	32
  3041  007760  65                 	db	101	;'e'
  3042  007761  76                 	db	118	;'v'
  3043  007762  65                 	db	101	;'e'
  3044  007763  6E                 	db	110	;'n'
  3045  007764  74                 	db	116	;'t'
  3046  007765  2E                 	db	46
  3047  007766  0D                 	db	13
  3048  007767  0A                 	db	10
  3049  007768  00                 	db	0
  3050  007769                     STR_130:
  3051  007769  2D                 	db	45
  3052  00776A  45                 	db	69	;'E'
  3053  00776B  52                 	db	82	;'R'
  3054  00776C  52                 	db	82	;'R'
  3055  00776D  4F                 	db	79	;'O'
  3056  00776E  52                 	db	82	;'R'
  3057  00776F  20                 	db	32
  3058  007770  2D                 	db	45
  3059  007771  20                 	db	32
  3060  007772  55                 	db	85	;'U'
  3061  007773  6E                 	db	110	;'n'
  3062  007774  6B                 	db	107	;'k'
  3063  007775  6E                 	db	110	;'n'
  3064  007776  6F                 	db	111	;'o'
  3065  007777  77                 	db	119	;'w'
  3066  007778  6E                 	db	110	;'n'
  3067  007779  20                 	db	32
  3068  00777A  27                 	db	39
  3069  00777B  53                 	db	83	;'S'
  3070  00777C  45                 	db	69	;'E'
  3071  00777D  54                 	db	84	;'T'
  3072  00777E  27                 	db	39
  3073  00777F  20                 	db	32
  3074  007780  63                 	db	99	;'c'
  3075  007781  6F                 	db	111	;'o'
  3076  007782  6D                 	db	109	;'m'
  3077  007783  6D                 	db	109	;'m'
  3078  007784  61                 	db	97	;'a'
  3079  007785  6E                 	db	110	;'n'
  3080  007786  64                 	db	100	;'d'
  3081  007787  0D                 	db	13
  3082  007788  0A                 	db	10
  3083  007789  00                 	db	0
  3084  00778A                     STR_80:
  3085  00778A  2D                 	db	45
  3086  00778B  45                 	db	69	;'E'
  3087  00778C  52                 	db	82	;'R'
  3088  00778D  52                 	db	82	;'R'
  3089  00778E  4F                 	db	79	;'O'
  3090  00778F  52                 	db	82	;'R'
  3091  007790  20                 	db	32
  3092  007791  2D                 	db	45
  3093  007792  20                 	db	32
  3094  007793  46                 	db	70	;'F'
  3095  007794  61                 	db	97	;'a'
  3096  007795  69                 	db	105	;'i'
  3097  007796  6C                 	db	108	;'l'
  3098  007797  65                 	db	101	;'e'
  3099  007798  64                 	db	100	;'d'
  3100  007799  20                 	db	32
  3101  00779A  74                 	db	116	;'t'
  3102  00779B  6F                 	db	111	;'o'
  3103  00779C  20                 	db	32
  3104  00779D  77                 	db	119	;'w'
  3105  00779E  72                 	db	114	;'r'
  3106  00779F  69                 	db	105	;'i'
  3107  0077A0  74                 	db	116	;'t'
  3108  0077A1  65                 	db	101	;'e'
  3109  0077A2  20                 	db	32
  3110  0077A3  76                 	db	118	;'v'
  3111  0077A4  61                 	db	97	;'a'
  3112  0077A5  6C                 	db	108	;'l'
  3113  0077A6  75                 	db	117	;'u'
  3114  0077A7  65                 	db	101	;'e'
  3115  0077A8  0D                 	db	13
  3116  0077A9  0A                 	db	10
  3117  0077AA  00                 	db	0
  3118  0077AB                     STR_53:
  3119  0077AB  2D                 	db	45
  3120  0077AC  45                 	db	69	;'E'
  3121  0077AD  52                 	db	82	;'R'
  3122  0077AE  52                 	db	82	;'R'
  3123  0077AF  4F                 	db	79	;'O'
  3124  0077B0  52                 	db	82	;'R'
  3125  0077B1  20                 	db	32
  3126  0077B2  2D                 	db	45
  3127  0077B3  20                 	db	32
  3128  0077B4  4E                 	db	78	;'N'
  3129  0077B5  65                 	db	101	;'e'
  3130  0077B6  65                 	db	101	;'e'
  3131  0077B7  64                 	db	100	;'d'
  3132  0077B8  73                 	db	115	;'s'
  3133  0077B9  20                 	db	32
  3134  0077BA  5B                 	db	91	;'['
  3135  0077BB  70                 	db	112	;'p'
  3136  0077BC  61                 	db	97	;'a'
  3137  0077BD  67                 	db	103	;'g'
  3138  0077BE  65                 	db	101	;'e'
  3139  0077BF  3A                 	db	58	;':'
  3140  0077C0  5D                 	db	93	;']'
  3141  0077C1  72                 	db	114	;'r'
  3142  0077C2  65                 	db	101	;'e'
  3143  0077C3  67                 	db	103	;'g'
  3144  0077C4  69                 	db	105	;'i'
  3145  0077C5  73                 	db	115	;'s'
  3146  0077C6  74                 	db	116	;'t'
  3147  0077C7  65                 	db	101	;'e'
  3148  0077C8  72                 	db	114	;'r'
  3149  0077C9  0D                 	db	13
  3150  0077CA  0A                 	db	10
  3151  0077CB  00                 	db	0
  3152  0077CC                     STR_125:
  3153  0077CC  2B                 	db	43
  3154  0077CD  4F                 	db	79	;'O'
  3155  0077CE  4B                 	db	75	;'K'
  3156  0077CF  20                 	db	32
  3157  0077D0  2D                 	db	45
  3158  0077D1  20                 	db	32
  3159  0077D2  4D                 	db	77	;'M'
  3160  0077D3  6F                 	db	111	;'o'
  3161  0077D4  64                 	db	100	;'d'
  3162  0077D5  65                 	db	101	;'e'
  3163  0077D6  20                 	db	32
  3164  0077D7  69                 	db	105	;'i'
  3165  0077D8  73                 	db	115	;'s'
  3166  0077D9  20                 	db	32
  3167  0077DA  6E                 	db	110	;'n'
  3168  0077DB  6F                 	db	111	;'o'
  3169  0077DC  77                 	db	119	;'w'
  3170  0077DD  20                 	db	32
  3171  0077DE  56                 	db	86	;'V'
  3172  0077DF  53                 	db	83	;'S'
  3173  0077E0  43                 	db	67	;'C'
  3174  0077E1  50                 	db	80	;'P'
  3175  0077E2  20                 	db	32
  3176  0077E3  44                 	db	68	;'D'
  3177  0077E4  72                 	db	114	;'r'
  3178  0077E5  69                 	db	105	;'i'
  3179  0077E6  76                 	db	118	;'v'
  3180  0077E7  65                 	db	101	;'e'
  3181  0077E8  72                 	db	114	;'r'
  3182  0077E9  0D                 	db	13
  3183  0077EA  0A                 	db	10
  3184  0077EB  00                 	db	0
  3185  0077EC                     STR_7:
  3186  0077EC  57                 	db	87	;'W'
  3187  0077ED  69                 	db	105	;'i'
  3188  0077EE  6C                 	db	108	;'l'
  3189  0077EF  6C                 	db	108	;'l'
  3190  0077F0  20                 	db	32
  3191  0077F1  65                 	db	101	;'e'
  3192  0077F2  6E                 	db	110	;'n'
  3193  0077F3  74                 	db	116	;'t'
  3194  0077F4  65                 	db	101	;'e'
  3195  0077F5  72                 	db	114	;'r'
  3196  0077F6  20                 	db	32
  3197  0077F7  62                 	db	98	;'b'
  3198  0077F8  6F                 	db	111	;'o'
  3199  0077F9  6F                 	db	111	;'o'
  3200  0077FA  74                 	db	116	;'t'
  3201  0077FB  6C                 	db	108	;'l'
  3202  0077FC  6F                 	db	111	;'o'
  3203  0077FD  61                 	db	97	;'a'
  3204  0077FE  64                 	db	100	;'d'
  3205  0077FF  65                 	db	101	;'e'
  3206  007800  72                 	db	114	;'r'
  3207  007801  20                 	db	32
  3208  007802  6E                 	db	110	;'n'
  3209  007803  6F                 	db	111	;'o'
  3210  007804  77                 	db	119	;'w'
  3211  007805  2E                 	db	46
  3212  007806  2E                 	db	46
  3213  007807  2E                 	db	46
  3214  007808  0D                 	db	13
  3215  007809  0A                 	db	10
  3216  00780A  00                 	db	0
  3217  00780B                     STR_213:
  3218  00780B  43                 	db	67	;'C'
  3219  00780C  4C                 	db	76	;'L'
  3220  00780D  4F                 	db	79	;'O'
  3221  00780E  53                 	db	83	;'S'
  3222  00780F  45                 	db	69	;'E'
  3223  007810  20                 	db	32
  3224  007811  2D                 	db	45
  3225  007812  20                 	db	32
  3226  007813  43                 	db	67	;'C'
  3227  007814  6C                 	db	108	;'l'
  3228  007815  6F                 	db	111	;'o'
  3229  007816  73                 	db	115	;'s'
  3230  007817  65                 	db	101	;'e'
  3231  007818  20                 	db	32
  3232  007819  43                 	db	67	;'C'
  3233  00781A  41                 	db	65	;'A'
  3234  00781B  4E                 	db	78	;'N'
  3235  00781C  20                 	db	32
  3236  00781D  69                 	db	105	;'i'
  3237  00781E  6E                 	db	110	;'n'
  3238  00781F  74                 	db	116	;'t'
  3239  007820  65                 	db	101	;'e'
  3240  007821  72                 	db	114	;'r'
  3241  007822  66                 	db	102	;'f'
  3242  007823  61                 	db	97	;'a'
  3243  007824  63                 	db	99	;'c'
  3244  007825  65                 	db	101	;'e'
  3245  007826  2E                 	db	46
  3246  007827  0D                 	db	13
  3247  007828  0A                 	db	10
  3248  007829  00                 	db	0
  3249  00782A                     STR_5:
  3250  00782A  54                 	db	84	;'T'
  3251  00782B  65                 	db	101	;'e'
  3252  00782C  6D                 	db	109	;'m'
  3253  00782D  70                 	db	112	;'p'
  3254  00782E  6F                 	db	111	;'o'
  3255  00782F  72                 	db	114	;'r'
  3256  007830  61                 	db	97	;'a'
  3257  007831  72                 	db	114	;'r'
  3258  007832  79                 	db	121	;'y'
  3259  007833  20                 	db	32
  3260  007834  76                 	db	118	;'v'
  3261  007835  65                 	db	101	;'e'
  3262  007836  72                 	db	114	;'r'
  3263  007837  62                 	db	98	;'b'
  3264  007838  6F                 	db	111	;'o'
  3265  007839  73                 	db	115	;'s'
  3266  00783A  65                 	db	101	;'e'
  3267  00783B  20                 	db	32
  3268  00783C  6D                 	db	109	;'m'
  3269  00783D  6F                 	db	111	;'o'
  3270  00783E  64                 	db	100	;'d'
  3271  00783F  65                 	db	101	;'e'
  3272  007840  20                 	db	32
  3273  007841  73                 	db	115	;'s'
  3274  007842  65                 	db	101	;'e'
  3275  007843  74                 	db	116	;'t'
  3276  007844  0D                 	db	13
  3277  007845  0A                 	db	10
  3278  007846  00                 	db	0
  3279  007847                     STR_123:
  3280  007847  2B                 	db	43
  3281  007848  4F                 	db	79	;'O'
  3282  007849  4B                 	db	75	;'K'
  3283  00784A  20                 	db	32
  3284  00784B  2D                 	db	45
  3285  00784C  20                 	db	32
  3286  00784D  4D                 	db	77	;'M'
  3287  00784E  6F                 	db	111	;'o'
  3288  00784F  64                 	db	100	;'d'
  3289  007850  65                 	db	101	;'e'
  3290  007851  20                 	db	32
  3291  007852  69                 	db	105	;'i'
  3292  007853  73                 	db	115	;'s'
  3293  007854  20                 	db	32
  3294  007855  6E                 	db	110	;'n'
  3295  007856  6F                 	db	111	;'o'
  3296  007857  77                 	db	119	;'w'
  3297  007858  20                 	db	32
  3298  007859  76                 	db	118	;'v'
  3299  00785A  65                 	db	101	;'e'
  3300  00785B  72                 	db	114	;'r'
  3301  00785C  62                 	db	98	;'b'
  3302  00785D  6F                 	db	111	;'o'
  3303  00785E  73                 	db	115	;'s'
  3304  00785F  65                 	db	101	;'e'
  3305  007860  0D                 	db	13
  3306  007861  0A                 	db	10
  3307  007862  00                 	db	0
  3308  007863                     STR_208:
  3309  007863  42                 	db	66	;'B'
  3310  007864  4F                 	db	79	;'O'
  3311  007865  4F                 	db	79	;'O'
  3312  007866  54                 	db	84	;'T'
  3313  007867  20                 	db	32
  3314  007868  2D                 	db	45
  3315  007869  20                 	db	32
  3316  00786A  45                 	db	69	;'E'
  3317  00786B  6E                 	db	110	;'n'
  3318  00786C  74                 	db	116	;'t'
  3319  00786D  65                 	db	101	;'e'
  3320  00786E  72                 	db	114	;'r'
  3321  00786F  20                 	db	32
  3322  007870  62                 	db	98	;'b'
  3323  007871  6F                 	db	111	;'o'
  3324  007872  6F                 	db	111	;'o'
  3325  007873  74                 	db	116	;'t'
  3326  007874  6C                 	db	108	;'l'
  3327  007875  6F                 	db	111	;'o'
  3328  007876  61                 	db	97	;'a'
  3329  007877  64                 	db	100	;'d'
  3330  007878  65                 	db	101	;'e'
  3331  007879  72                 	db	114	;'r'
  3332  00787A  2E                 	db	46
  3333  00787B  0D                 	db	13
  3334  00787C  0A                 	db	10
  3335  00787D  00                 	db	0
  3336  00787E                     STR_132:
  3337  00787E  2D                 	db	45
  3338  00787F  45                 	db	69	;'E'
  3339  007880  52                 	db	82	;'R'
  3340  007881  52                 	db	82	;'R'
  3341  007882  4F                 	db	79	;'O'
  3342  007883  52                 	db	82	;'R'
  3343  007884  20                 	db	32
  3344  007885  2D                 	db	45
  3345  007886  20                 	db	32
  3346  007887  55                 	db	85	;'U'
  3347  007888  6E                 	db	110	;'n'
  3348  007889  6B                 	db	107	;'k'
  3349  00788A  6E                 	db	110	;'n'
  3350  00788B  6F                 	db	111	;'o'
  3351  00788C  77                 	db	119	;'w'
  3352  00788D  6E                 	db	110	;'n'
  3353  00788E  20                 	db	32
  3354  00788F  63                 	db	99	;'c'
  3355  007890  6F                 	db	111	;'o'
  3356  007891  6D                 	db	109	;'m'
  3357  007892  6D                 	db	109	;'m'
  3358  007893  61                 	db	97	;'a'
  3359  007894  6E                 	db	110	;'n'
  3360  007895  64                 	db	100	;'d'
  3361  007896  0D                 	db	13
  3362  007897  0A                 	db	10
  3363  007898  00                 	db	0
  3364  007899                     STR_239:
  3365  007899  4E                 	db	78	;'N'
  3366  00789A  6F                 	db	111	;'o'
  3367  00789B  64                 	db	100	;'d'
  3368  00789C  65                 	db	101	;'e'
  3369  00789D  20                 	db	32
  3370  00789E  66                 	db	102	;'f'
  3371  00789F  6F                 	db	111	;'o'
  3372  0078A0  75                 	db	117	;'u'
  3373  0078A1  6E                 	db	110	;'n'
  3374  0078A2  64                 	db	100	;'d'
  3375  0078A3  20                 	db	32
  3376  0078A4  77                 	db	119	;'w'
  3377  0078A5  69                 	db	105	;'i'
  3378  0078A6  74                 	db	116	;'t'
  3379  0078A7  68                 	db	104	;'h'
  3380  0078A8  20                 	db	32
  3381  0078A9  6E                 	db	110	;'n'
  3382  0078AA  6F                 	db	111	;'o'
  3383  0078AB  64                 	db	100	;'d'
  3384  0078AC  65                 	db	101	;'e'
  3385  0078AD  20                 	db	32
  3386  0078AE  69                 	db	105	;'i'
  3387  0078AF  64                 	db	100	;'d'
  3388  0078B0  20                 	db	32
  3389  0078B1  3D                 	db	61	;'='
  3390  0078B2  20                 	db	32
  3391  0078B3  00                 	db	0
  3392  0078B4                     STR_127:
  3393  0078B4  2B                 	db	43
  3394  0078B5  4F                 	db	79	;'O'
  3395  0078B6  4B                 	db	75	;'K'
  3396  0078B7  20                 	db	32
  3397  0078B8  2D                 	db	45
  3398  0078B9  20                 	db	32
  3399  0078BA  4D                 	db	77	;'M'
  3400  0078BB  6F                 	db	111	;'o'
  3401  0078BC  64                 	db	100	;'d'
  3402  0078BD  65                 	db	101	;'e'
  3403  0078BE  20                 	db	32
  3404  0078BF  69                 	db	105	;'i'
  3405  0078C0  73                 	db	115	;'s'
  3406  0078C1  20                 	db	32
  3407  0078C2  6E                 	db	110	;'n'
  3408  0078C3  6F                 	db	111	;'o'
  3409  0078C4  77                 	db	119	;'w'
  3410  0078C5  20                 	db	32
  3411  0078C6  53                 	db	83	;'S'
  3412  0078C7  4C                 	db	76	;'L'
  3413  0078C8  43                 	db	67	;'C'
  3414  0078C9  41                 	db	65	;'A'
  3415  0078CA  4E                 	db	78	;'N'
  3416  0078CB  0D                 	db	13
  3417  0078CC  0A                 	db	10
  3418  0078CD  00                 	db	0
  3419  0078CE                     STR_25:
  3420  0078CE  2B                 	db	43
  3421  0078CF  4F                 	db	79	;'O'
  3422  0078D0  4B                 	db	75	;'K'
  3423  0078D1  20                 	db	32
  3424  0078D2  2D                 	db	45
  3425  0078D3  20                 	db	32
  3426  0078D4  4C                 	db	76	;'L'
  3427  0078D5  69                 	db	105	;'i'
  3428  0078D6  73                 	db	115	;'s'
  3429  0078D7  74                 	db	116	;'t'
  3430  0078D8  65                 	db	101	;'e'
  3431  0078D9  6E                 	db	110	;'n'
  3432  0078DA  20                 	db	32
  3433  0078DB  6F                 	db	111	;'o'
  3434  0078DC  6E                 	db	110	;'n'
  3435  0078DD  6C                 	db	108	;'l'
  3436  0078DE  79                 	db	121	;'y'
  3437  0078DF  20                 	db	32
  3438  0078E0  6D                 	db	109	;'m'
  3439  0078E1  6F                 	db	111	;'o'
  3440  0078E2  64                 	db	100	;'d'
  3441  0078E3  65                 	db	101	;'e'
  3442  0078E4  0D                 	db	13
  3443  0078E5  0A                 	db	10
  3444  0078E6  00                 	db	0
  3445  0078E7                     STR_192:
  3446  0078E7  54                 	db	84	;'T'
  3447  0078E8  72                 	db	114	;'r'
  3448  0078E9  61                 	db	97	;'a'
  3449  0078EA  6E                 	db	110	;'n'
  3450  0078EB  73                 	db	115	;'s'
  3451  0078EC  6D                 	db	109	;'m'
  3452  0078ED  69                 	db	105	;'i'
  3453  0078EE  74                 	db	116	;'t'
  3454  0078EF  20                 	db	32
  3455  0078F0  45                 	db	69	;'E'
  3456  0078F1  72                 	db	114	;'r'
  3457  0078F2  72                 	db	114	;'r'
  3458  0078F3  6F                 	db	111	;'o'
  3459  0078F4  72                 	db	114	;'r'
  3460  0078F5  20                 	db	32
  3461  0078F6  43                 	db	67	;'C'
  3462  0078F7  6F                 	db	111	;'o'
  3463  0078F8  75                 	db	117	;'u'
  3464  0078F9  6E                 	db	110	;'n'
  3465  0078FA  74                 	db	116	;'t'
  3466  0078FB  65                 	db	101	;'e'
  3467  0078FC  72                 	db	114	;'r'
  3468  0078FD  3A                 	db	58	;':'
  3469  0078FE  20                 	db	32
  3470  0078FF  00                 	db	0
  3471  007900                     STR_216:
  3472  007900  54                 	db	84	;'T'
  3473  007901  58                 	db	88	;'X'
  3474  007902  20                 	db	32
  3475  007903  2D                 	db	45
  3476  007904  20                 	db	32
  3477  007905  53                 	db	83	;'S'
  3478  007906  65                 	db	101	;'e'
  3479  007907  6E                 	db	110	;'n'
  3480  007908  64                 	db	100	;'d'
  3481  007909  20                 	db	32
  3482  00790A  43                 	db	67	;'C'
  3483  00790B  41                 	db	65	;'A'
  3484  00790C  4E                 	db	78	;'N'
  3485  00790D  20                 	db	32
  3486  00790E  66                 	db	102	;'f'
  3487  00790F  72                 	db	114	;'r'
  3488  007910  61                 	db	97	;'a'
  3489  007911  6D                 	db	109	;'m'
  3490  007912  65                 	db	101	;'e'
  3491  007913  20                 	db	32
  3492  007914  2E                 	db	46
  3493  007915  0D                 	db	13
  3494  007916  0A                 	db	10
  3495  007917  00                 	db	0
  3496  007918                     STR_226:
  3497  007918  46                 	db	70	;'F'
  3498  007919  49                 	db	73	;'I'
  3499  00791A  4C                 	db	76	;'L'
  3500  00791B  54                 	db	84	;'T'
  3501  00791C  45                 	db	69	;'E'
  3502  00791D  52                 	db	82	;'R'
  3503  00791E  20                 	db	32
  3504  00791F  2D                 	db	45
  3505  007920  20                 	db	32
  3506  007921  53                 	db	83	;'S'
  3507  007922  65                 	db	101	;'e'
  3508  007923  74                 	db	116	;'t'
  3509  007924  20                 	db	32
  3510  007925  66                 	db	102	;'f'
  3511  007926  69                 	db	105	;'i'
  3512  007927  6C                 	db	108	;'l'
  3513  007928  74                 	db	116	;'t'
  3514  007929  65                 	db	101	;'e'
  3515  00792A  72                 	db	114	;'r'
  3516  00792B  20                 	db	32
  3517  00792C  2E                 	db	46
  3518  00792D  0D                 	db	13
  3519  00792E  0A                 	db	10
  3520  00792F  00                 	db	0
  3521  007930                     STR_51:
  3522  007930  2D                 	db	45
  3523  007931  45                 	db	69	;'E'
  3524  007932  52                 	db	82	;'R'
  3525  007933  52                 	db	82	;'R'
  3526  007934  4F                 	db	79	;'O'
  3527  007935  52                 	db	82	;'R'
  3528  007936  20                 	db	32
  3529  007937  2D                 	db	45
  3530  007938  20                 	db	32
  3531  007939  4E                 	db	78	;'N'
  3532  00793A  65                 	db	101	;'e'
  3533  00793B  65                 	db	101	;'e'
  3534  00793C  64                 	db	100	;'d'
  3535  00793D  73                 	db	115	;'s'
  3536  00793E  20                 	db	32
  3537  00793F  6E                 	db	110	;'n'
  3538  007940  6F                 	db	111	;'o'
  3539  007941  64                 	db	100	;'d'
  3540  007942  65                 	db	101	;'e'
  3541  007943  69                 	db	105	;'i'
  3542  007944  64                 	db	100	;'d'
  3543  007945  0D                 	db	13
  3544  007946  0A                 	db	10
  3545  007947  00                 	db	0
  3546  007948                     STR_28:
  3547  007948  2D                 	db	45
  3548  007949  45                 	db	69	;'E'
  3549  00794A  52                 	db	82	;'R'
  3550  00794B  52                 	db	82	;'R'
  3551  00794C  4F                 	db	79	;'O'
  3552  00794D  52                 	db	82	;'R'
  3553  00794E  20                 	db	32
  3554  00794F  2D                 	db	45
  3555  007950  20                 	db	32
  3556  007951  55                 	db	85	;'U'
  3557  007952  6E                 	db	110	;'n'
  3558  007953  6B                 	db	107	;'k'
  3559  007954  6E                 	db	110	;'n'
  3560  007955  6F                 	db	111	;'o'
  3561  007956  77                 	db	119	;'w'
  3562  007957  6E                 	db	110	;'n'
  3563  007958  20                 	db	32
  3564  007959  6D                 	db	109	;'m'
  3565  00795A  6F                 	db	111	;'o'
  3566  00795B  64                 	db	100	;'d'
  3567  00795C  65                 	db	101	;'e'
  3568  00795D  0D                 	db	13
  3569  00795E  0A                 	db	10
  3570  00795F  00                 	db	0
  3571  007960                     STR_78:
  3572  007960  2D                 	db	45
  3573  007961  45                 	db	69	;'E'
  3574  007962  52                 	db	82	;'R'
  3575  007963  52                 	db	82	;'R'
  3576  007964  4F                 	db	79	;'O'
  3577  007965  52                 	db	82	;'R'
  3578  007966  20                 	db	32
  3579  007967  2D                 	db	45
  3580  007968  20                 	db	32
  3581  007969  4E                 	db	78	;'N'
  3582  00796A  65                 	db	101	;'e'
  3583  00796B  65                 	db	101	;'e'
  3584  00796C  64                 	db	100	;'d'
  3585  00796D  20                 	db	32
  3586  00796E  61                 	db	97	;'a'
  3587  00796F  20                 	db	32
  3588  007970  76                 	db	118	;'v'
  3589  007971  61                 	db	97	;'a'
  3590  007972  6C                 	db	108	;'l'
  3591  007973  75                 	db	117	;'u'
  3592  007974  65                 	db	101	;'e'
  3593  007975  0D                 	db	13
  3594  007976  0A                 	db	10
  3595  007977  00                 	db	0
  3596  007978                     STR_199:
  3597  007978  52                 	db	82	;'R'
  3598  007979  65                 	db	101	;'e'
  3599  00797A  63                 	db	99	;'c'
  3600  00797B  65                 	db	101	;'e'
  3601  00797C  69                 	db	105	;'i'
  3602  00797D  76                 	db	118	;'v'
  3603  00797E  65                 	db	101	;'e'
  3604  00797F  20                 	db	32
  3605  007980  45                 	db	69	;'E'
  3606  007981  72                 	db	114	;'r'
  3607  007982  72                 	db	114	;'r'
  3608  007983  6F                 	db	111	;'o'
  3609  007984  72                 	db	114	;'r'
  3610  007985  20                 	db	32
  3611  007986  43                 	db	67	;'C'
  3612  007987  6F                 	db	111	;'o'
  3613  007988  75                 	db	117	;'u'
  3614  007989  6E                 	db	110	;'n'
  3615  00798A  74                 	db	116	;'t'
  3616  00798B  65                 	db	101	;'e'
  3617  00798C  72                 	db	114	;'r'
  3618  00798D  3A                 	db	58	;':'
  3619  00798E  20                 	db	32
  3620  00798F  00                 	db	0
  3621  007990                     STR_184:
  3622  007990  55                 	db	85	;'U'
  3623  007991  41                 	db	65	;'A'
  3624  007992  52                 	db	82	;'R'
  3625  007993  54                 	db	84	;'T'
  3626  007994  20                 	db	32
  3627  007995  52                 	db	82	;'R'
  3628  007996  65                 	db	101	;'e'
  3629  007997  63                 	db	99	;'c'
  3630  007998  65                 	db	101	;'e'
  3631  007999  69                 	db	105	;'i'
  3632  00799A  76                 	db	118	;'v'
  3633  00799B  65                 	db	101	;'e'
  3634  00799C  20                 	db	32
  3635  00799D  6F                 	db	111	;'o'
  3636  00799E  76                 	db	118	;'v'
  3637  00799F  65                 	db	101	;'e'
  3638  0079A0  72                 	db	114	;'r'
  3639  0079A1  72                 	db	114	;'r'
  3640  0079A2  75                 	db	117	;'u'
  3641  0079A3  6E                 	db	110	;'n'
  3642  0079A4  73                 	db	115	;'s'
  3643  0079A5  3A                 	db	58	;':'
  3644  0079A6  20                 	db	32
  3645  0079A7  00                 	db	0
  3646  0079A8                     STR_180:
  3647  0079A8  43                 	db	67	;'C'
  3648  0079A9  41                 	db	65	;'A'
  3649  0079AA  4E                 	db	78	;'N'
  3650  0079AB  20                 	db	32
  3651  0079AC  54                 	db	84	;'T'
  3652  0079AD  72                 	db	114	;'r'
  3653  0079AE  61                 	db	97	;'a'
  3654  0079AF  6E                 	db	110	;'n'
  3655  0079B0  73                 	db	115	;'s'
  3656  0079B1  6D                 	db	109	;'m'
  3657  0079B2  69                 	db	105	;'i'
  3658  0079B3  74                 	db	116	;'t'
  3659  0079B4  20                 	db	32
  3660  0079B5  6F                 	db	111	;'o'
  3661  0079B6  76                 	db	118	;'v'
  3662  0079B7  65                 	db	101	;'e'
  3663  0079B8  72                 	db	114	;'r'
  3664  0079B9  72                 	db	114	;'r'
  3665  0079BA  75                 	db	117	;'u'
  3666  0079BB  6E                 	db	110	;'n'
  3667  0079BC  73                 	db	115	;'s'
  3668  0079BD  3A                 	db	58	;':'
  3669  0079BE  20                 	db	32
  3670  0079BF  00                 	db	0
  3671  0079C0                     STR_218:
  3672  0079C0  52                 	db	82	;'R'
  3673  0079C1  58                 	db	88	;'X'
  3674  0079C2  20                 	db	32
  3675  0079C3  2D                 	db	45
  3676  0079C4  20                 	db	32
  3677  0079C5  52                 	db	82	;'R'
  3678  0079C6  65                 	db	101	;'e'
  3679  0079C7  61                 	db	97	;'a'
  3680  0079C8  64                 	db	100	;'d'
  3681  0079C9  20                 	db	32
  3682  0079CA  43                 	db	67	;'C'
  3683  0079CB  41                 	db	65	;'A'
  3684  0079CC  4E                 	db	78	;'N'
  3685  0079CD  20                 	db	32
  3686  0079CE  66                 	db	102	;'f'
  3687  0079CF  72                 	db	114	;'r'
  3688  0079D0  61                 	db	97	;'a'
  3689  0079D1  6D                 	db	109	;'m'
  3690  0079D2  65                 	db	101	;'e'
  3691  0079D3  2E                 	db	46
  3692  0079D4  0D                 	db	13
  3693  0079D5  0A                 	db	10
  3694  0079D6  00                 	db	0
  3695  0079D7                     STR_176:
  3696  0079D7  43                 	db	67	;'C'
  3697  0079D8  41                 	db	65	;'A'
  3698  0079D9  4E                 	db	78	;'N'
  3699  0079DA  20                 	db	32
  3700  0079DB  52                 	db	82	;'R'
  3701  0079DC  65                 	db	101	;'e'
  3702  0079DD  63                 	db	99	;'c'
  3703  0079DE  65                 	db	101	;'e'
  3704  0079DF  69                 	db	105	;'i'
  3705  0079E0  76                 	db	118	;'v'
  3706  0079E1  65                 	db	101	;'e'
  3707  0079E2  20                 	db	32
  3708  0079E3  6F                 	db	111	;'o'
  3709  0079E4  76                 	db	118	;'v'
  3710  0079E5  65                 	db	101	;'e'
  3711  0079E6  72                 	db	114	;'r'
  3712  0079E7  72                 	db	114	;'r'
  3713  0079E8  75                 	db	117	;'u'
  3714  0079E9  6E                 	db	110	;'n'
  3715  0079EA  73                 	db	115	;'s'
  3716  0079EB  3A                 	db	58	;':'
  3717  0079EC  20                 	db	32
  3718  0079ED  00                 	db	0
  3719  0079EE                     STR_261:
  3720  0079EE  55                 	db	85	;'U'
  3721  0079EF  6E                 	db	110	;'n'
  3722  0079F0  6B                 	db	107	;'k'
  3723  0079F1  6E                 	db	110	;'n'
  3724  0079F2  6F                 	db	111	;'o'
  3725  0079F3  77                 	db	119	;'w'
  3726  0079F4  6E                 	db	110	;'n'
  3727  0079F5  20                 	db	32
  3728  0079F6  28                 	db	40
  3729  0079F7  56                 	db	86	;'V'
  3730  0079F8  65                 	db	101	;'e'
  3731  0079F9  72                 	db	114	;'r'
  3732  0079FA  62                 	db	98	;'b'
  3733  0079FB  6F                 	db	111	;'o'
  3734  0079FC  73                 	db	115	;'s'
  3735  0079FD  65                 	db	101	;'e'
  3736  0079FE  20                 	db	32
  3737  0079FF  75                 	db	117	;'u'
  3738  007A00  73                 	db	115	;'s'
  3739  007A01  65                 	db	101	;'e'
  3740  007A02  64                 	db	100	;'d'
  3741  007A03  29                 	db	41
  3742  007A04  00                 	db	0
  3743  007A05                     STR_24:
  3744  007A05  2B                 	db	43
  3745  007A06  4F                 	db	79	;'O'
  3746  007A07  4B                 	db	75	;'K'
  3747  007A08  20                 	db	32
  3748  007A09  2D                 	db	45
  3749  007A0A  20                 	db	32
  3750  007A0B  4C                 	db	76	;'L'
  3751  007A0C  6F                 	db	111	;'o'
  3752  007A0D  6F                 	db	111	;'o'
  3753  007A0E  70                 	db	112	;'p'
  3754  007A0F  62                 	db	98	;'b'
  3755  007A10  61                 	db	97	;'a'
  3756  007A11  63                 	db	99	;'c'
  3757  007A12  6B                 	db	107	;'k'
  3758  007A13  20                 	db	32
  3759  007A14  6D                 	db	109	;'m'
  3760  007A15  6F                 	db	111	;'o'
  3761  007A16  64                 	db	100	;'d'
  3762  007A17  65                 	db	101	;'e'
  3763  007A18  0D                 	db	13
  3764  007A19  0A                 	db	10
  3765  007A1A  00                 	db	0
  3766  007A1B                     STR_168:
  3767  007A1B  52                 	db	82	;'R'
  3768  007A1C  65                 	db	101	;'e'
  3769  007A1D  63                 	db	99	;'c'
  3770  007A1E  65                 	db	101	;'e'
  3771  007A1F  69                 	db	105	;'i'
  3772  007A20  76                 	db	118	;'v'
  3773  007A21  65                 	db	101	;'e'
  3774  007A22  64                 	db	100	;'d'
  3775  007A23  20                 	db	32
  3776  007A24  43                 	db	67	;'C'
  3777  007A25  41                 	db	65	;'A'
  3778  007A26  4E                 	db	78	;'N'
  3779  007A27  20                 	db	32
  3780  007A28  66                 	db	102	;'f'
  3781  007A29  72                 	db	114	;'r'
  3782  007A2A  61                 	db	97	;'a'
  3783  007A2B  6D                 	db	109	;'m'
  3784  007A2C  65                 	db	101	;'e'
  3785  007A2D  73                 	db	115	;'s'
  3786  007A2E  3A                 	db	58	;':'
  3787  007A2F  20                 	db	32
  3788  007A30  00                 	db	0
  3789  007A31                     STR_172:
  3790  007A31  52                 	db	82	;'R'
  3791  007A32  65                 	db	101	;'e'
  3792  007A33  63                 	db	99	;'c'
  3793  007A34  65                 	db	101	;'e'
  3794  007A35  69                 	db	105	;'i'
  3795  007A36  76                 	db	118	;'v'
  3796  007A37  65                 	db	101	;'e'
  3797  007A38  64                 	db	100	;'d'
  3798  007A39  20                 	db	32
  3799  007A3A  43                 	db	67	;'C'
  3800  007A3B  41                 	db	65	;'A'
  3801  007A3C  4E                 	db	78	;'N'
  3802  007A3D  20                 	db	32
  3803  007A3E  62                 	db	98	;'b'
  3804  007A3F  79                 	db	121	;'y'
  3805  007A40  74                 	db	116	;'t'
  3806  007A41  65                 	db	101	;'e'
  3807  007A42  73                 	db	115	;'s'
  3808  007A43  3A                 	db	58	;':'
  3809  007A44  20                 	db	32
  3810  007A45  00                 	db	0
  3811  007A46                     STR_228:
  3812  007A46  4D                 	db	77	;'M'
  3813  007A47  41                 	db	65	;'A'
  3814  007A48  53                 	db	83	;'S'
  3815  007A49  4B                 	db	75	;'K'
  3816  007A4A  20                 	db	32
  3817  007A4B  2D                 	db	45
  3818  007A4C  20                 	db	32
  3819  007A4D  53                 	db	83	;'S'
  3820  007A4E  65                 	db	101	;'e'
  3821  007A4F  74                 	db	116	;'t'
  3822  007A50  20                 	db	32
  3823  007A51  6D                 	db	109	;'m'
  3824  007A52  61                 	db	97	;'a'
  3825  007A53  73                 	db	115	;'s'
  3826  007A54  6B                 	db	107	;'k'
  3827  007A55  20                 	db	32
  3828  007A56  2E                 	db	46
  3829  007A57  0D                 	db	13
  3830  007A58  0A                 	db	10
  3831  007A59  00                 	db	0
  3832  007A5A                     STR_133:
  3833  007A5A  4A                 	db	74	;'J'
  3834  007A5B  46                 	db	70	;'F'
  3835  007A5C  72                 	db	114	;'r'
  3836  007A5D  61                 	db	97	;'a'
  3837  007A5E  6E                 	db	110	;'n'
  3838  007A5F  6B                 	db	107	;'k'
  3839  007A60  66                 	db	102	;'f'
  3840  007A61  75                 	db	117	;'u'
  3841  007A62  72                 	db	114	;'r'
  3842  007A63  74                 	db	116	;'t'
  3843  007A64  20                 	db	32
  3844  007A65  52                 	db	82	;'R'
  3845  007A66  53                 	db	83	;'S'
  3846  007A67  2D                 	db	45
  3847  007A68  32                 	db	50	;'2'
  3848  007A69  33                 	db	51	;'3'
  3849  007A6A  32                 	db	50	;'2'
  3850  007A6B  0D                 	db	13
  3851  007A6C  0A                 	db	10
  3852  007A6D  00                 	db	0
  3853  007A6E                     STR_26:
  3854  007A6E  2B                 	db	43
  3855  007A6F  4F                 	db	79	;'O'
  3856  007A70  4B                 	db	75	;'K'
  3857  007A71  20                 	db	32
  3858  007A72  2D                 	db	45
  3859  007A73  20                 	db	32
  3860  007A74  43                 	db	67	;'C'
  3861  007A75  6C                 	db	108	;'l'
  3862  007A76  6F                 	db	111	;'o'
  3863  007A77  73                 	db	115	;'s'
  3864  007A78  65                 	db	101	;'e'
  3865  007A79  64                 	db	100	;'d'
  3866  007A7A  20                 	db	32
  3867  007A7B  6D                 	db	109	;'m'
  3868  007A7C  6F                 	db	111	;'o'
  3869  007A7D  64                 	db	100	;'d'
  3870  007A7E  65                 	db	101	;'e'
  3871  007A7F  0D                 	db	13
  3872  007A80  0A                 	db	10
  3873  007A81  00                 	db	0
  3874  007A82                     STR_21:
  3875  007A82  2B                 	db	43
  3876  007A83  4F                 	db	79	;'O'
  3877  007A84  4B                 	db	75	;'K'
  3878  007A85  20                 	db	32
  3879  007A86  2D                 	db	45
  3880  007A87  20                 	db	32
  3881  007A88  4E                 	db	78	;'N'
  3882  007A89  6F                 	db	111	;'o'
  3883  007A8A  72                 	db	114	;'r'
  3884  007A8B  6D                 	db	109	;'m'
  3885  007A8C  61                 	db	97	;'a'
  3886  007A8D  6C                 	db	108	;'l'
  3887  007A8E  20                 	db	32
  3888  007A8F  6D                 	db	109	;'m'
  3889  007A90  6F                 	db	111	;'o'
  3890  007A91  64                 	db	100	;'d'
  3891  007A92  65                 	db	101	;'e'
  3892  007A93  0D                 	db	13
  3893  007A94  0A                 	db	10
  3894  007A95  00                 	db	0
  3895  007A96                     STR_22:
  3896  007A96  2B                 	db	43
  3897  007A97  4F                 	db	79	;'O'
  3898  007A98  4B                 	db	75	;'K'
  3899  007A99  20                 	db	32
  3900  007A9A  2D                 	db	45
  3901  007A9B  20                 	db	32
  3902  007A9C  53                 	db	83	;'S'
  3903  007A9D  69                 	db	105	;'i'
  3904  007A9E  6C                 	db	108	;'l'
  3905  007A9F  65                 	db	101	;'e'
  3906  007AA0  6E                 	db	110	;'n'
  3907  007AA1  74                 	db	116	;'t'
  3908  007AA2  20                 	db	32
  3909  007AA3  6D                 	db	109	;'m'
  3910  007AA4  6F                 	db	111	;'o'
  3911  007AA5  64                 	db	100	;'d'
  3912  007AA6  65                 	db	101	;'e'
  3913  007AA7  0D                 	db	13
  3914  007AA8  0A                 	db	10
  3915  007AA9  00                 	db	0
  3916  007AAA                     STR_82:
  3917  007AAA  49                 	db	73	;'I'
  3918  007AAB  6E                 	db	110	;'n'
  3919  007AAC  66                 	db	102	;'f'
  3920  007AAD  6F                 	db	111	;'o'
  3921  007AAE  20                 	db	32
  3922  007AAF  66                 	db	102	;'f'
  3923  007AB0  6F                 	db	111	;'o'
  3924  007AB1  72                 	db	114	;'r'
  3925  007AB2  20                 	db	32
  3926  007AB3  6E                 	db	110	;'n'
  3927  007AB4  6F                 	db	111	;'o'
  3928  007AB5  64                 	db	100	;'d'
  3929  007AB6  65                 	db	101	;'e'
  3930  007AB7  20                 	db	32
  3931  007AB8  69                 	db	105	;'i'
  3932  007AB9  64                 	db	100	;'d'
  3933  007ABA  20                 	db	32
  3934  007ABB  3D                 	db	61	;'='
  3935  007ABC  20                 	db	32
  3936  007ABD  00                 	db	0
  3937  007ABE                     STR_250:
  3938  007ABE  46                 	db	70	;'F'
  3939  007ABF  69                 	db	105	;'i'
  3940  007AC0  72                 	db	114	;'r'
  3941  007AC1  6D                 	db	109	;'m'
  3942  007AC2  77                 	db	119	;'w'
  3943  007AC3  61                 	db	97	;'a'
  3944  007AC4  72                 	db	114	;'r'
  3945  007AC5  65                 	db	101	;'e'
  3946  007AC6  20                 	db	32
  3947  007AC7  76                 	db	118	;'v'
  3948  007AC8  65                 	db	101	;'e'
  3949  007AC9  72                 	db	114	;'r'
  3950  007ACA  73                 	db	115	;'s'
  3951  007ACB  69                 	db	105	;'i'
  3952  007ACC  6F                 	db	111	;'o'
  3953  007ACD  6E                 	db	110	;'n'
  3954  007ACE  20                 	db	32
  3955  007ACF  3D                 	db	61	;'='
  3956  007AD0  20                 	db	32
  3957  007AD1  00                 	db	0
  3958  007AD2                     STR_23:
  3959  007AD2  2B                 	db	43
  3960  007AD3  4F                 	db	79	;'O'
  3961  007AD4  4B                 	db	75	;'K'
  3962  007AD5  20                 	db	32
  3963  007AD6  2D                 	db	45
  3964  007AD7  20                 	db	32
  3965  007AD8  53                 	db	83	;'S'
  3966  007AD9  6C                 	db	108	;'l'
  3967  007ADA  65                 	db	101	;'e'
  3968  007ADB  65                 	db	101	;'e'
  3969  007ADC  70                 	db	112	;'p'
  3970  007ADD  20                 	db	32
  3971  007ADE  6D                 	db	109	;'m'
  3972  007ADF  6F                 	db	111	;'o'
  3973  007AE0  64                 	db	100	;'d'
  3974  007AE1  65                 	db	101	;'e'
  3975  007AE2  0D                 	db	13
  3976  007AE3  0A                 	db	10
  3977  007AE4  00                 	db	0
  3978  007AE5                     STR_27:
  3979  007AE5  2B                 	db	43
  3980  007AE6  4F                 	db	79	;'O'
  3981  007AE7  4B                 	db	75	;'K'
  3982  007AE8  20                 	db	32
  3983  007AE9  2D                 	db	45
  3984  007AEA  20                 	db	32
  3985  007AEB  42                 	db	66	;'B'
  3986  007AEC  69                 	db	105	;'i'
  3987  007AED  74                 	db	116	;'t'
  3988  007AEE  73                 	db	115	;'s'
  3989  007AEF  20                 	db	32
  3990  007AF0  6D                 	db	109	;'m'
  3991  007AF1  6F                 	db	111	;'o'
  3992  007AF2  64                 	db	100	;'d'
  3993  007AF3  65                 	db	101	;'e'
  3994  007AF4  0D                 	db	13
  3995  007AF5  0A                 	db	10
  3996  007AF6  00                 	db	0
  3997  007AF7                     STR_40:
  3998  007AF7  2B                 	db	43
  3999  007AF8  4F                 	db	79	;'O'
  4000  007AF9  4B                 	db	75	;'K'
  4001  007AFA  20                 	db	32
  4002  007AFB  2D                 	db	45
  4003  007AFC  20                 	db	32
  4004  007AFD  6E                 	db	110	;'n'
  4005  007AFE  6F                 	db	111	;'o'
  4006  007AFF  20                 	db	32
  4007  007B00  65                 	db	101	;'e'
  4008  007B01  76                 	db	118	;'v'
  4009  007B02  65                 	db	101	;'e'
  4010  007B03  6E                 	db	110	;'n'
  4011  007B04  74                 	db	116	;'t'
  4012  007B05  73                 	db	115	;'s'
  4013  007B06  0D                 	db	13
  4014  007B07  0A                 	db	10
  4015  007B08  00                 	db	0
  4016  007B09                     STR_160:
  4017  007B09  53                 	db	83	;'S'
  4018  007B0A  65                 	db	101	;'e'
  4019  007B0B  6E                 	db	110	;'n'
  4020  007B0C  74                 	db	116	;'t'
  4021  007B0D  20                 	db	32
  4022  007B0E  43                 	db	67	;'C'
  4023  007B0F  41                 	db	65	;'A'
  4024  007B10  4E                 	db	78	;'N'
  4025  007B11  20                 	db	32
  4026  007B12  66                 	db	102	;'f'
  4027  007B13  72                 	db	114	;'r'
  4028  007B14  61                 	db	97	;'a'
  4029  007B15  6D                 	db	109	;'m'
  4030  007B16  65                 	db	101	;'e'
  4031  007B17  73                 	db	115	;'s'
  4032  007B18  3A                 	db	58	;':'
  4033  007B19  20                 	db	32
  4034  007B1A  00                 	db	0
  4035  007B1B                     STR_263:
  4036  007B1B  30                 	db	48	;'0'
  4037  007B1C  31                 	db	49	;'1'
  4038  007B1D  32                 	db	50	;'2'
  4039  007B1E  33                 	db	51	;'3'
  4040  007B1F  34                 	db	52	;'4'
  4041  007B20  35                 	db	53	;'5'
  4042  007B21  36                 	db	54	;'6'
  4043  007B22  37                 	db	55	;'7'
  4044  007B23  38                 	db	56	;'8'
  4045  007B24  39                 	db	57	;'9'
  4046  007B25  41                 	db	65	;'A'
  4047  007B26  42                 	db	66	;'B'
  4048  007B27  43                 	db	67	;'C'
  4049  007B28  44                 	db	68	;'D'
  4050  007B29  45                 	db	69	;'E'
  4051  007B2A  46                 	db	70	;'F'
  4052  007B2B  00                 	db	0
  4053  007B2C                     STR_264:
  4054  007B2C  30                 	db	48	;'0'
  4055  007B2D  31                 	db	49	;'1'
  4056  007B2E  32                 	db	50	;'2'
  4057  007B2F  33                 	db	51	;'3'
  4058  007B30  34                 	db	52	;'4'
  4059  007B31  35                 	db	53	;'5'
  4060  007B32  36                 	db	54	;'6'
  4061  007B33  37                 	db	55	;'7'
  4062  007B34  38                 	db	56	;'8'
  4063  007B35  39                 	db	57	;'9'
  4064  007B36  61                 	db	97	;'a'
  4065  007B37  62                 	db	98	;'b'
  4066  007B38  63                 	db	99	;'c'
  4067  007B39  64                 	db	100	;'d'
  4068  007B3A  65                 	db	101	;'e'
  4069  007B3B  66                 	db	102	;'f'
  4070  007B3C  00                 	db	0
  4071  007B3D                     STR_164:
  4072  007B3D  53                 	db	83	;'S'
  4073  007B3E  65                 	db	101	;'e'
  4074  007B3F  6E                 	db	110	;'n'
  4075  007B40  74                 	db	116	;'t'
  4076  007B41  20                 	db	32
  4077  007B42  43                 	db	67	;'C'
  4078  007B43  41                 	db	65	;'A'
  4079  007B44  4E                 	db	78	;'N'
  4080  007B45  20                 	db	32
  4081  007B46  62                 	db	98	;'b'
  4082  007B47  79                 	db	121	;'y'
  4083  007B48  74                 	db	116	;'t'
  4084  007B49  65                 	db	101	;'e'
  4085  007B4A  73                 	db	115	;'s'
  4086  007B4B  3A                 	db	58	;':'
  4087  007B4C  20                 	db	32
  4088  007B4D  00                 	db	0
  4089  007B4E                     STR_242:
  4090  007B4E  20                 	db	32
  4091  007B4F  6E                 	db	110	;'n'
  4092  007B50  6F                 	db	111	;'o'
  4093  007B51  64                 	db	100	;'d'
  4094  007B52  65                 	db	101	;'e'
  4095  007B53  73                 	db	115	;'s'
  4096  007B54  20                 	db	32
  4097  007B55  66                 	db	102	;'f'
  4098  007B56  6F                 	db	111	;'o'
  4099  007B57  75                 	db	117	;'u'
  4100  007B58  6E                 	db	110	;'n'
  4101  007B59  64                 	db	100	;'d'
  4102  007B5A  0D                 	db	13
  4103  007B5B  0A                 	db	10
  4104  007B5C  00                 	db	0
  4105  007B5D                     STR_55:
  4106  007B5D  56                 	db	86	;'V'
  4107  007B5E  61                 	db	97	;'a'
  4108  007B5F  6C                 	db	108	;'l'
  4109  007B60  75                 	db	117	;'u'
  4110  007B61  65                 	db	101	;'e'
  4111  007B62  20                 	db	32
  4112  007B63  66                 	db	102	;'f'
  4113  007B64  6F                 	db	111	;'o'
  4114  007B65  72                 	db	114	;'r'
  4115  007B66  20                 	db	32
  4116  007B67  72                 	db	114	;'r'
  4117  007B68  65                 	db	101	;'e'
  4118  007B69  67                 	db	103	;'g'
  4119  007B6A  20                 	db	32
  4120  007B6B  00                 	db	0
  4121  007B6C                     STR_248:
  4122  007B6C  4D                 	db	77	;'M'
  4123  007B6D  44                 	db	68	;'D'
  4124  007B6E  46                 	db	70	;'F'
  4125  007B6F  20                 	db	32
  4126  007B70  3D                 	db	61	;'='
  4127  007B71  20                 	db	32
  4128  007B72  68                 	db	104	;'h'
  4129  007B73  74                 	db	116	;'t'
  4130  007B74  74                 	db	116	;'t'
  4131  007B75  70                 	db	112	;'p'
  4132  007B76  3A                 	db	58	;':'
  4133  007B77  2F                 	db	47
  4134  007B78  2F                 	db	47
  4135  007B79  00                 	db	0
  4136  007B7A                     STR_258:
  4137  007B7A  56                 	db	86	;'V'
  4138  007B7B  53                 	db	83	;'S'
  4139  007B7C  43                 	db	67	;'C'
  4140  007B7D  50                 	db	80	;'P'
  4141  007B7E  20                 	db	32
  4142  007B7F  44                 	db	68	;'D'
  4143  007B80  72                 	db	114	;'r'
  4144  007B81  69                 	db	105	;'i'
  4145  007B82  76                 	db	118	;'v'
  4146  007B83  65                 	db	101	;'e'
  4147  007B84  72                 	db	114	;'r'
  4148  007B85  00                 	db	0
  4149  007B86                     STR_118:
  4150  007B86  52                 	db	82	;'R'
  4151  007B87  57                 	db	87	;'W'
  4152  007B88  54                 	db	84	;'T'
  4153  007B89  49                 	db	73	;'I'
  4154  007B8A  4D                 	db	77	;'M'
  4155  007B8B  45                 	db	69	;'E'
  4156  007B8C  4F                 	db	79	;'O'
  4157  007B8D  55                 	db	85	;'U'
  4158  007B8E  54                 	db	84	;'T'
  4159  007B8F  20                 	db	32
  4160  007B90  00                 	db	0
  4161  007B91                     STR_158:
  4162  007B91  2C                 	db	44
  4163  007B92  44                 	db	68	;'D'
  4164  007B93  61                 	db	97	;'a'
  4165  007B94  74                 	db	116	;'t'
  4166  007B95  61                 	db	97	;'a'
  4167  007B96  3D                 	db	61	;'='
  4168  007B97  6E                 	db	110	;'n'
  4169  007B98  6F                 	db	111	;'o'
  4170  007B99  6E                 	db	110	;'n'
  4171  007B9A  65                 	db	101	;'e'
  4172  007B9B  00                 	db	0
  4173  007B9C                     STR_254:
  4174  007B9C  56                 	db	86	;'V'
  4175  007B9D  65                 	db	101	;'e'
  4176  007B9E  72                 	db	114	;'r'
  4177  007B9F  73                 	db	115	;'s'
  4178  007BA0  69                 	db	105	;'i'
  4179  007BA1  6F                 	db	111	;'o'
  4180  007BA2  6E                 	db	110	;'n'
  4181  007BA3  3A                 	db	58	;':'
  4182  007BA4  20                 	db	32
  4183  007BA5  00                 	db	0
  4184  007BA6                     STR_260:
  4185  007BA6  56                 	db	86	;'V'
  4186  007BA7  53                 	db	83	;'S'
  4187  007BA8  43                 	db	67	;'C'
  4188  007BA9  50                 	db	80	;'P'
  4189  007BAA  20                 	db	32
  4190  007BAB  4E                 	db	78	;'N'
  4191  007BAC  6F                 	db	111	;'o'
  4192  007BAD  64                 	db	100	;'d'
  4193  007BAE  65                 	db	101	;'e'
  4194  007BAF  00                 	db	0
  4195  007BB0                     STR_259:
  4196  007BB0  53                 	db	83	;'S'
  4197  007BB1  4C                 	db	76	;'L'
  4198  007BB2  20                 	db	32
  4199  007BB3  44                 	db	68	;'D'
  4200  007BB4  72                 	db	114	;'r'
  4201  007BB5  69                 	db	105	;'i'
  4202  007BB6  76                 	db	118	;'v'
  4203  007BB7  65                 	db	101	;'e'
  4204  007BB8  72                 	db	114	;'r'
  4205  007BB9  00                 	db	0
  4206  007BBA                     STR_120:
  4207  007BBA  53                 	db	83	;'S'
  4208  007BBB  54                 	db	84	;'T'
  4209  007BBC  41                 	db	65	;'A'
  4210  007BBD  52                 	db	82	;'R'
  4211  007BBE  54                 	db	84	;'T'
  4212  007BBF  49                 	db	73	;'I'
  4213  007BC0  46                 	db	70	;'F'
  4214  007BC1  20                 	db	32
  4215  007BC2  00                 	db	0
  4216  007BC3                     STR_148:
  4217  007BC3  2C                 	db	44
  4218  007BC4  6E                 	db	110	;'n'
  4219  007BC5  6F                 	db	111	;'o'
  4220  007BC6  64                 	db	100	;'d'
  4221  007BC7  65                 	db	101	;'e'
  4222  007BC8  69                 	db	105	;'i'
  4223  007BC9  64                 	db	100	;'d'
  4224  007BCA  3D                 	db	61	;'='
  4225  007BCB  00                 	db	0
  4226  007BCC                     STR_14:
  4227  007BCC  4C                 	db	76	;'L'
  4228  007BCD  4F                 	db	79	;'O'
  4229  007BCE  4F                 	db	79	;'O'
  4230  007BCF  50                 	db	80	;'P'
  4231  007BD0  42                 	db	66	;'B'
  4232  007BD1  41                 	db	65	;'A'
  4233  007BD2  43                 	db	67	;'C'
  4234  007BD3  4B                 	db	75	;'K'
  4235  007BD4  00                 	db	0
  4236  007BD5                     STR_134:
  4237  007BD5  56                 	db	86	;'V'
  4238  007BD6  31                 	db	49	;'1'
  4239  007BD7  30                 	db	48	;'0'
  4240  007BD8  31                 	db	49	;'1'
  4241  007BD9  31                 	db	49	;'1'
  4242  007BDA  0D                 	db	13
  4243  007BDB  0A                 	db	10
  4244  007BDC  00                 	db	0
  4245  007BDD                     STR_135:
  4246  007BDD  4E                 	db	78	;'N'
  4247  007BDE  31                 	db	49	;'1'
  4248  007BDF  39                 	db	57	;'9'
  4249  007BE0  37                 	db	55	;'7'
  4250  007BE1  37                 	db	55	;'7'
  4251  007BE2  0D                 	db	13
  4252  007BE3  0A                 	db	10
  4253  007BE4  00                 	db	0
  4254  007BE5                     STR_243:
  4255  007BE5  47                 	db	71	;'G'
  4256  007BE6  55                 	db	85	;'U'
  4257  007BE7  49                 	db	73	;'I'
  4258  007BE8  44                 	db	68	;'D'
  4259  007BE9  20                 	db	32
  4260  007BEA  3D                 	db	61	;'='
  4261  007BEB  20                 	db	32
  4262  007BEC  00                 	db	0
  4263  007BED                     STR_128:
  4264  007BED  46                 	db	70	;'F'
  4265  007BEE  49                 	db	73	;'I'
  4266  007BEF  4C                 	db	76	;'L'
  4267  007BF0  54                 	db	84	;'T'
  4268  007BF1  45                 	db	69	;'E'
  4269  007BF2  52                 	db	82	;'R'
  4270  007BF3  20                 	db	32
  4271  007BF4  00                 	db	0
  4272  007BF5                     STR_142:
  4273  007BF5  2C                 	db	44
  4274  007BF6  63                 	db	99	;'c'
  4275  007BF7  6C                 	db	108	;'l'
  4276  007BF8  61                 	db	97	;'a'
  4277  007BF9  73                 	db	115	;'s'
  4278  007BFA  73                 	db	115	;'s'
  4279  007BFB  3D                 	db	61	;'='
  4280  007BFC  00                 	db	0
  4281  007BFD                     STR_122:
  4282  007BFD  56                 	db	86	;'V'
  4283  007BFE  45                 	db	69	;'E'
  4284  007BFF  52                 	db	82	;'R'
  4285  007C00  42                 	db	66	;'B'
  4286  007C01  4F                 	db	79	;'O'
  4287  007C02  53                 	db	83	;'S'
  4288  007C03  45                 	db	69	;'E'
  4289  007C04  00                 	db	0
  4290  007C05                     STR_116:
  4291  007C05  44                 	db	68	;'D'
  4292  007C06  45                 	db	69	;'E'
  4293  007C07  43                 	db	67	;'C'
  4294  007C08  49                 	db	73	;'I'
  4295  007C09  4D                 	db	77	;'M'
  4296  007C0A  41                 	db	65	;'A'
  4297  007C0B  4C                 	db	76	;'L'
  4298  007C0C  00                 	db	0
  4299  007C0D                     STR_18:
  4300  007C0D  56                 	db	86	;'V'
  4301  007C0E  45                 	db	69	;'E'
  4302  007C0F  52                 	db	82	;'R'
  4303  007C10  53                 	db	83	;'S'
  4304  007C11  49                 	db	73	;'I'
  4305  007C12  4F                 	db	79	;'O'
  4306  007C13  4E                 	db	78	;'N'
  4307  007C14  00                 	db	0
  4308  007C15                     STR_177:
  4309  007C15  30                 	db	48	;'0'
  4310  007C16  78                 	db	120	;'x'
  4311  007C17  25                 	db	37
  4312  007C18  30                 	db	48	;'0'
  4313  007C19  38                 	db	56	;'8'
  4314  007C1A  6C                 	db	108	;'l'
  4315  007C1B  58                 	db	88	;'X'
  4316  007C1C  00                 	db	0
  4317  007C1D                     STR_257:
  4318  007C1D  56                 	db	86	;'V'
  4319  007C1E  65                 	db	101	;'e'
  4320  007C1F  72                 	db	114	;'r'
  4321  007C20  62                 	db	98	;'b'
  4322  007C21  6F                 	db	111	;'o'
  4323  007C22  73                 	db	115	;'s'
  4324  007C23  65                 	db	101	;'e'
  4325  007C24  00                 	db	0
  4326  007C25                     STR_256:
  4327  007C25  4D                 	db	77	;'M'
  4328  007C26  6F                 	db	111	;'o'
  4329  007C27  64                 	db	100	;'d'
  4330  007C28  65                 	db	101	;'e'
  4331  007C29  3A                 	db	58	;':'
  4332  007C2A  20                 	db	32
  4333  007C2B  00                 	db	0
  4334  007C2C                     STR_154:
  4335  007C2C  2C                 	db	44
  4336  007C2D  44                 	db	68	;'D'
  4337  007C2E  61                 	db	97	;'a'
  4338  007C2F  74                 	db	116	;'t'
  4339  007C30  61                 	db	97	;'a'
  4340  007C31  3D                 	db	61	;'='
  4341  007C32  00                 	db	0
  4342  007C33                     STR_145:
  4343  007C33  2C                 	db	44
  4344  007C34  74                 	db	116	;'t'
  4345  007C35  79                 	db	121	;'y'
  4346  007C36  70                 	db	112	;'p'
  4347  007C37  65                 	db	101	;'e'
  4348  007C38  3D                 	db	61	;'='
  4349  007C39  00                 	db	0
  4350  007C3A                     STR_151:
  4351  007C3A  2C                 	db	44
  4352  007C3B  73                 	db	115	;'s'
  4353  007C3C  69                 	db	105	;'i'
  4354  007C3D  7A                 	db	122	;'z'
  4355  007C3E  65                 	db	101	;'e'
  4356  007C3F  3D                 	db	61	;'='
  4357  007C40  00                 	db	0
  4358  007C41                     STR_139:
  4359  007C41  3C                 	db	60	;'<'
  4360  007C42  50                 	db	80	;'P'
  4361  007C43  72                 	db	114	;'r'
  4362  007C44  69                 	db	105	;'i'
  4363  007C45  6F                 	db	111	;'o'
  4364  007C46  3D                 	db	61	;'='
  4365  007C47  00                 	db	0
  4366  007C48                     STR_20:
  4367  007C48  49                 	db	73	;'I'
  4368  007C49  46                 	db	70	;'F'
  4369  007C4A  4D                 	db	77	;'M'
  4370  007C4B  4F                 	db	79	;'O'
  4371  007C4C  44                 	db	68	;'D'
  4372  007C4D  45                 	db	69	;'E'
  4373  007C4E  00                 	db	0
  4374  007C4F                     STR_16:
  4375  007C4F  4C                 	db	76	;'L'
  4376  007C50  49                 	db	73	;'I'
  4377  007C51  53                 	db	83	;'S'
  4378  007C52  54                 	db	84	;'T'
  4379  007C53  45                 	db	69	;'E'
  4380  007C54  4E                 	db	78	;'N'
  4381  007C55  00                 	db	0
  4382  007C56                     STR_87:
  4383  007C56  46                 	db	70	;'F'
  4384  007C57  49                 	db	73	;'I'
  4385  007C58  4C                 	db	76	;'L'
  4386  007C59  54                 	db	84	;'T'
  4387  007C5A  45                 	db	69	;'E'
  4388  007C5B  52                 	db	82	;'R'
  4389  007C5C  00                 	db	0
  4390  007C5D                     STR_10:
  4391  007C5D  53                 	db	83	;'S'
  4392  007C5E  49                 	db	73	;'I'
  4393  007C5F  4C                 	db	76	;'L'
  4394  007C60  45                 	db	69	;'E'
  4395  007C61  4E                 	db	78	;'N'
  4396  007C62  54                 	db	84	;'T'
  4397  007C63  00                 	db	0
  4398  007C64                     STR_56:
  4399  007C64  30                 	db	48	;'0'
  4400  007C65  78                 	db	120	;'x'
  4401  007C66  25                 	db	37
  4402  007C67  30                 	db	48	;'0'
  4403  007C68  32                 	db	50	;'2'
  4404  007C69  58                 	db	88	;'X'
  4405  007C6A  00                 	db	0
  4406  007C6B                     STR_143:
  4407  007C6B  30                 	db	48	;'0'
  4408  007C6C  78                 	db	120	;'x'
  4409  007C6D  25                 	db	37
  4410  007C6E  30                 	db	48	;'0'
  4411  007C6F  34                 	db	52	;'4'
  4412  007C70  58                 	db	88	;'X'
  4413  007C71  00                 	db	0
  4414  007C72                     STR_161:
  4415  007C72  30                 	db	48	;'0'
  4416  007C73  78                 	db	120	;'x'
  4417  007C74  25                 	db	37
  4418  007C75  30                 	db	48	;'0'
  4419  007C76  38                 	db	56	;'8'
  4420  007C77  58                 	db	88	;'X'
  4421  007C78  00                 	db	0
  4422  007C79                     STR_136:
  4423  007C79  46                 	db	70	;'F'
  4424  007C7A  30                 	db	48	;'0'
  4425  007C7B  30                 	db	48	;'0'
  4426  007C7C  0D                 	db	13
  4427  007C7D  0A                 	db	10
  4428  007C7E  00                 	db	0
  4429  007C7F                     STR_9:
  4430  007C7F  2B                 	db	43
  4431  007C80  4F                 	db	79	;'O'
  4432  007C81  4B                 	db	75	;'K'
  4433  007C82  0D                 	db	13
  4434  007C83  0A                 	db	10
  4435  007C84  00                 	db	0
  4436  007C85                     STR_121:
  4437  007C85  4D                 	db	77	;'M'
  4438  007C86  4F                 	db	79	;'O'
  4439  007C87  44                 	db	68	;'D'
  4440  007C88  45                 	db	69	;'E'
  4441  007C89  20                 	db	32
  4442  007C8A  00                 	db	0
  4443  007C8B                     STR_129:
  4444  007C8B  4D                 	db	77	;'M'
  4445  007C8C  41                 	db	65	;'A'
  4446  007C8D  53                 	db	83	;'S'
  4447  007C8E  4B                 	db	75	;'K'
  4448  007C8F  20                 	db	32
  4449  007C90  00                 	db	0
  4450  007C91                     STR_12:
  4451  007C91  43                 	db	67	;'C'
  4452  007C92  4C                 	db	76	;'L'
  4453  007C93  4F                 	db	79	;'O'
  4454  007C94  53                 	db	83	;'S'
  4455  007C95  45                 	db	69	;'E'
  4456  007C96  00                 	db	0
  4457  007C97                     STR_126:
  4458  007C97  53                 	db	83	;'S'
  4459  007C98  4C                 	db	76	;'L'
  4460  007C99  43                 	db	67	;'C'
  4461  007C9A  41                 	db	65	;'A'
  4462  007C9B  4E                 	db	78	;'N'
  4463  007C9C  00                 	db	0
  4464  007C9D                     STR_113:
  4465  007C9D  53                 	db	83	;'S'
  4466  007C9E  45                 	db	69	;'E'
  4467  007C9F  54                 	db	84	;'T'
  4468  007CA0  20                 	db	32
  4469  007CA1  00                 	db	0
  4470  007CA2                     STR_47:
  4471  007CA2  46                 	db	70	;'F'
  4472  007CA3  49                 	db	73	;'I'
  4473  007CA4  4E                 	db	78	;'N'
  4474  007CA5  44                 	db	68	;'D'
  4475  007CA6  00                 	db	0
  4476  007CA7                     STR_49:
  4477  007CA7  52                 	db	82	;'R'
  4478  007CA8  52                 	db	82	;'R'
  4479  007CA9  45                 	db	69	;'E'
  4480  007CAA  47                 	db	71	;'G'
  4481  007CAB  00                 	db	0
  4482  007CAC                     STR_72:
  4483  007CAC  57                 	db	87	;'W'
  4484  007CAD  52                 	db	82	;'R'
  4485  007CAE  45                 	db	69	;'E'
  4486  007CAF  47                 	db	71	;'G'
  4487  007CB0  00                 	db	0
  4488  007CB1                     STR_100:
  4489  007CB1  4D                 	db	77	;'M'
  4490  007CB2  41                 	db	65	;'A'
  4491  007CB3  53                 	db	83	;'S'
  4492  007CB4  4B                 	db	75	;'K'
  4493  007CB5  00                 	db	0
  4494  007CB6                     STR_8:
  4495  007CB6  4F                 	db	79	;'O'
  4496  007CB7  50                 	db	80	;'P'
  4497  007CB8  45                 	db	69	;'E'
  4498  007CB9  4E                 	db	78	;'N'
  4499  007CBA  00                 	db	0
  4500  007CBB                     STR_81:
  4501  007CBB  49                 	db	73	;'I'
  4502  007CBC  4E                 	db	78	;'N'
  4503  007CBD  46                 	db	70	;'F'
  4504  007CBE  4F                 	db	79	;'O'
  4505  007CBF  00                 	db	0
  4506  007CC0                     STR_124:
  4507  007CC0  56                 	db	86	;'V'
  4508  007CC1  53                 	db	83	;'S'
  4509  007CC2  43                 	db	67	;'C'
  4510  007CC3  50                 	db	80	;'P'
  4511  007CC4  00                 	db	0
  4512  007CC5                     STR_45:
  4513  007CC5  48                 	db	72	;'H'
  4514  007CC6  45                 	db	69	;'E'
  4515  007CC7  4C                 	db	76	;'L'
  4516  007CC8  50                 	db	80	;'P'
  4517  007CC9  00                 	db	0
  4518  007CCA                     STR_41:
  4519  007CCA  53                 	db	83	;'S'
  4520  007CCB  54                 	db	84	;'T'
  4521  007CCC  41                 	db	65	;'A'
  4522  007CCD  54                 	db	84	;'T'
  4523  007CCE  00                 	db	0
  4524  007CCF                     STR_6:
  4525  007CCF  42                 	db	66	;'B'
  4526  007CD0  4F                 	db	79	;'O'
  4527  007CD1  4F                 	db	79	;'O'
  4528  007CD2  54                 	db	84	;'T'
  4529  007CD3  00                 	db	0
  4530  007CD4                     STR_159:
  4531  007CD4  3E                 	db	62	;'>'
  4532  007CD5  0D                 	db	13
  4533  007CD6  0A                 	db	10
  4534  007CD7  00                 	db	0
  4535  007CD8                     STR_43:
  4536  007CD8  45                 	db	69	;'E'
  4537  007CD9  52                 	db	82	;'R'
  4538  007CDA  52                 	db	82	;'R'
  4539  007CDB  00                 	db	0
  4540  007CDC                     STR_114:
  4541  007CDC  48                 	db	72	;'H'
  4542  007CDD  45                 	db	69	;'E'
  4543  007CDE  58                 	db	88	;'X'
  4544  007CDF  00                 	db	0
  4545  007CE0                     STR_162:
  4546  007CE0  25                 	db	37
  4547  007CE1  6C                 	db	108	;'l'
  4548  007CE2  75                 	db	117	;'u'
  4549  007CE3  00                 	db	0
  4550  007CE4                     STR_245:
  4551  007CE4  2D                 	db	45
  4552  007CE5  2D                 	db	45
  4553  007CE6  00                 	db	0
  4554  007CE7                     STR_38:
  4555  007CE7  52                 	db	82	;'R'
  4556  007CE8  58                 	db	88	;'X'
  4557  007CE9  00                 	db	0
  4558  007CEA                     STR_29:
  4559  007CEA  54                 	db	84	;'T'
  4560  007CEB  58                 	db	88	;'X'
  4561  007CEC  00                 	db	0
  4562  007CED                     STR_57:
  4563  007CED  25                 	db	37
  4564  007CEE  64                 	db	100	;'d'
  4565  007CEF  00                 	db	0
  4566  007CF0                     STR_138:
  4567  007CF0  07                 	db	7
  4568  007CF1  00                 	db	0
  4569  007CF2                     STR_137:
  4570  007CF2  0D                 	db	13
  4571  007CF3  00                 	db	0
  4572  007CF4                     STR_30:
  4573  007CF4  2C                 	db	44
  4574  007CF5  00                 	db	0
  4575  007CF6                     STR_252:
  4576  007CF6  2E                 	db	46
  4577  007CF7  00                 	db	0
  4578  007CF8                     STR_244:
  4579  007CF8  30                 	db	48	;'0'
  4580  007CF9  00                 	db	0
  4581  007CFA                     STR_246:
  4582  007CFA  3A                 	db	58	;':'
  4583  007CFB  00                 	db	0
  4584  007CFC                     STR_251:
  4585  007CFC  3F                 	db	63	;'?'
  4586  007CFD  00                 	db	0
  4587  007CFE                     __end_of__stringdata:
  4588                           	opt stack 0
  4589                           
  4590                           ; #config settings
  4591  007CFE  00                 	db	0	; dummy byte at the end
  4592  0000                     tblptru	equ	0xFF8
  4593                           tblptrh	equ	0xFF7
  4594                           tblptrl	equ	0xFF6
  4595                           tablat	equ	0xFF5
  4596                           prodh	equ	0xFF4
  4597                           prodl	equ	0xFF3
  4598                           intcon	equ	0xFF2
  4599                           indf0	equ	0xFEF
  4600                           fsr0h	equ	0xFEA
  4601                           fsr0l	equ	0xFE9
  4602                           wreg	equ	0xFE8
  4603                           indf1	equ	0xFE7
  4604                           postinc1	equ	0xFE6
  4605                           postdec1	equ	0xFE5
  4606                           fsr1h	equ	0xFE2
  4607                           fsr1l	equ	0xFE1
  4608                           indf2	equ	0xFDF
  4609                           postinc2	equ	0xFDE
  4610                           postdec2	equ	0xFDD
  4611                           plusw2	equ	0xFDB
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616                           	psect	nvCOMRAM
  4617  000055                     __pnvCOMRAM:
  4618                           	opt stack 0
  4619  000055                     ___DCDelay:
  4620                           	opt stack 0
  4621  000055                     	ds	1
  4622                           tblptru	equ	0xFF8
  4623                           tblptrh	equ	0xFF7
  4624                           tblptrl	equ	0xFF6
  4625                           tablat	equ	0xFF5
  4626                           prodh	equ	0xFF4
  4627                           prodl	equ	0xFF3
  4628                           intcon	equ	0xFF2
  4629                           indf0	equ	0xFEF
  4630                           fsr0h	equ	0xFEA
  4631                           fsr0l	equ	0xFE9
  4632                           wreg	equ	0xFE8
  4633                           indf1	equ	0xFE7
  4634                           postinc1	equ	0xFE6
  4635                           postdec1	equ	0xFE5
  4636                           fsr1h	equ	0xFE2
  4637                           fsr1l	equ	0xFE1
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           plusw2	equ	0xFDB
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646                           	psect	nvBANK0
  4647  0000F5                     __pnvBANK0:
  4648                           	opt stack 0
  4649  0000F5                     _caps:
  4650                           	opt stack 0
  4651  0000F5                     	ds	2
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           prodh	equ	0xFF4
  4657                           prodl	equ	0xFF3
  4658                           intcon	equ	0xFF2
  4659                           indf0	equ	0xFEF
  4660                           fsr0h	equ	0xFEA
  4661                           fsr0l	equ	0xFE9
  4662                           wreg	equ	0xFE8
  4663                           indf1	equ	0xFE7
  4664                           postinc1	equ	0xFE6
  4665                           postdec1	equ	0xFE5
  4666                           fsr1h	equ	0xFE2
  4667                           fsr1l	equ	0xFE1
  4668                           indf2	equ	0xFDF
  4669                           postinc2	equ	0xFDE
  4670                           postdec2	equ	0xFDD
  4671                           plusw2	equ	0xFDB
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676                           	psect	cinit
  4677  001F0C                     __pcinit:
  4678                           	opt stack 0
  4679  001F0C                     start_initialization:
  4680                           	opt stack 0
  4681  001F0C                     __initialization:
  4682                           	opt stack 0
  4683                           
  4684                           ; Clear objects allocated to BIGRAM (494 bytes)
  4685  001F0C  EE04  F000         	lfsr	0,__pbssBIGRAM
  4686  001F10  EE11 F0EE          	lfsr	1,494
  4687  001F14                     clear_0:
  4688  001F14  6AEE               	clrf	postinc0,c
  4689  001F16  50E5               	movf	postdec1,w,c
  4690  001F18  50E1               	movf	fsr1l,w,c
  4691  001F1A  E1FC               	bnz	clear_0
  4692  001F1C  50E2               	movf	fsr1h,w,c
  4693  001F1E  E1FA               	bnz	clear_0
  4694                           
  4695                           ; Clear objects allocated to BANK3 (256 bytes)
  4696  001F20  EE03  F000         	lfsr	0,__pbssBANK3
  4697  001F24  EE11 F000          	lfsr	1,256
  4698  001F28                     clear_1:
  4699  001F28  6AEE               	clrf	postinc0,c
  4700  001F2A  50E5               	movf	postdec1,w,c
  4701  001F2C  50E1               	movf	fsr1l,w,c
  4702  001F2E  E1FC               	bnz	clear_1
  4703  001F30  50E2               	movf	fsr1h,w,c
  4704  001F32  E1FA               	bnz	clear_1
  4705                           
  4706                           ; Clear objects allocated to BANK2 (128 bytes)
  4707  001F34  EE02  F000         	lfsr	0,__pbssBANK2
  4708  001F38  0E80               	movlw	128
  4709  001F3A                     clear_2:
  4710  001F3A  6AEE               	clrf	postinc0,c
  4711  001F3C  06E8               	decf	wreg,f,c
  4712  001F3E  E1FD               	bnz	clear_2
  4713                           
  4714                           ; Clear objects allocated to BANK1 (178 bytes)
  4715  001F40  EE01  F000         	lfsr	0,__pbssBANK1
  4716  001F44  0EB2               	movlw	178
  4717  001F46                     clear_3:
  4718  001F46  6AEE               	clrf	postinc0,c
  4719  001F48  06E8               	decf	wreg,f,c
  4720  001F4A  E1FD               	bnz	clear_3
  4721                           
  4722                           ; Clear objects allocated to BANK0 (36 bytes)
  4723  001F4C  EE00  F0D1         	lfsr	0,__pbssBANK0
  4724  001F50  0E24               	movlw	36
  4725  001F52                     clear_4:
  4726  001F52  6AEE               	clrf	postinc0,c
  4727  001F54  06E8               	decf	wreg,f,c
  4728  001F56  E1FD               	bnz	clear_4
  4729                           
  4730                           ; Clear objects allocated to COMRAM (42 bytes)
  4731  001F58  EE00  F001         	lfsr	0,__pbssCOMRAM
  4732  001F5C  0E2A               	movlw	42
  4733  001F5E                     clear_5:
  4734  001F5E  6AEE               	clrf	postinc0,c
  4735  001F60  06E8               	decf	wreg,f,c
  4736  001F62  E1FD               	bnz	clear_5
  4737  001F64                     end_of_initialization:
  4738                           	opt stack 0
  4739  001F64                     __end_of__initialization:
  4740                           	opt stack 0
  4741  001F64  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4742  001F66  6EF8               	movwf	tblptru,c
  4743  001F68  0100               	movlb	0
  4744  001F6A  EFD2  F01C         	goto	_main	;jump to C main() function
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           indf0	equ	0xFEF
  4753                           postinc0	equ	0xFEE
  4754                           fsr0h	equ	0xFEA
  4755                           fsr0l	equ	0xFE9
  4756                           wreg	equ	0xFE8
  4757                           indf1	equ	0xFE7
  4758                           postinc1	equ	0xFE6
  4759                           postdec1	equ	0xFE5
  4760                           fsr1h	equ	0xFE2
  4761                           fsr1l	equ	0xFE1
  4762                           indf2	equ	0xFDF
  4763                           postinc2	equ	0xFDE
  4764                           postdec2	equ	0xFDD
  4765                           plusw2	equ	0xFDB
  4766                           fsr2h	equ	0xFDA
  4767                           fsr2l	equ	0xFD9
  4768                           status	equ	0xFD8
  4769                           
  4770                           	psect	bssCOMRAM
  4771  000001                     __pbssCOMRAM:
  4772                           	opt stack 0
  4773  000001                     _can_transmitOverruns:
  4774                           	opt stack 0
  4775  000001                     	ds	4
  4776  000005                     _uart_receiveOverruns:
  4777                           	opt stack 0
  4778  000005                     	ds	4
  4779  000009                     _uart_transmitOverruns:
  4780                           	opt stack 0
  4781  000009                     	ds	4
  4782  00000D                     _made_table:
  4783                           	opt stack 0
  4784  00000D                     	ds	2
  4785  00000F                     _status_led_cnt:
  4786                           	opt stack 0
  4787  00000F                     	ds	2
  4788  000011                     strtok@sp:
  4789                           	opt stack 0
  4790  000011                     	ds	2
  4791  000013                     _USART_Status:
  4792                           	opt stack 0
  4793  000013                     	ds	1
  4794  000014                     __ECANRxFilterHitInfo:
  4795                           	opt stack 0
  4796  000014                     	ds	1
  4797  000015                     __IT_INT_MASK:
  4798                           	opt stack 0
  4799  000015                     	ds	1
  4800  000016                     __IT_SAVE_BSR:
  4801                           	opt stack 0
  4802  000016                     	ds	1
  4803  000017                     __IT_SAVE_STATUS:
  4804                           	opt stack 0
  4805  000017                     	ds	1
  4806  000018                     __IT_SAVE_WREG:
  4807                           	opt stack 0
  4808  000018                     	ds	1
  4809  000019                     ___DCByte:
  4810                           	opt stack 0
  4811  000019                     	ds	1
  4812  00001A                     _ledFunctionality:
  4813                           	opt stack 0
  4814  00001A                     	ds	1
  4815  00001B                     _canInputFifo:
  4816                           	opt stack 0
  4817  00001B                     	ds	8
  4818  000023                     _serialInputFifo:
  4819                           	opt stack 0
  4820  000023                     	ds	8
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           indf0	equ	0xFEF
  4829                           postinc0	equ	0xFEE
  4830                           fsr0h	equ	0xFEA
  4831                           fsr0l	equ	0xFE9
  4832                           wreg	equ	0xFE8
  4833                           indf1	equ	0xFE7
  4834                           postinc1	equ	0xFE6
  4835                           postdec1	equ	0xFE5
  4836                           fsr1h	equ	0xFE2
  4837                           fsr1l	equ	0xFE1
  4838                           indf2	equ	0xFDF
  4839                           postinc2	equ	0xFDE
  4840                           postdec2	equ	0xFDD
  4841                           plusw2	equ	0xFDB
  4842                           fsr2h	equ	0xFDA
  4843                           fsr2l	equ	0xFD9
  4844                           status	equ	0xFD8
  4845                           
  4846                           	psect	bssBANK0
  4847  0000D1                     __pbssBANK0:
  4848                           	opt stack 0
  4849  0000D1                     _can_receiveOverruns:
  4850                           	opt stack 0
  4851  0000D1                     	ds	4
  4852  0000D5                     _cntRxBytes:
  4853                           	opt stack 0
  4854  0000D5                     	ds	4
  4855  0000D9                     _cntRxFrames:
  4856                           	opt stack 0
  4857  0000D9                     	ds	4
  4858  0000DD                     _cntTxBytes:
  4859                           	opt stack 0
  4860  0000DD                     	ds	4
  4861  0000E1                     _cntTxFrames:
  4862                           	opt stack 0
  4863  0000E1                     	ds	4
  4864  0000E5                     _timekeeper:
  4865                           	opt stack 0
  4866  0000E5                     	ds	4
  4867  0000E9                     _timer:
  4868                           	opt stack 0
  4869  0000E9                     	ds	4
  4870  0000ED                     _bDLE:
  4871                           	opt stack 0
  4872  0000ED                     	ds	1
  4873  0000EE                     _bInitiated:
  4874                           	opt stack 0
  4875  0000EE                     	ds	1
  4876  0000EF                     _bOpen:
  4877                           	opt stack 0
  4878  0000EF                     	ds	1
  4879  0000F0                     _canrxcount:
  4880                           	opt stack 0
  4881  0000F0                     	ds	1
  4882  0000F1                     _mode:
  4883                           	opt stack 0
  4884  0000F1                     	ds	1
  4885  0000F2                     _nTimeStamp:
  4886                           	opt stack 0
  4887  0000F2                     	ds	1
  4888  0000F3                     _sequencyno:
  4889                           	opt stack 0
  4890  0000F3                     	ds	1
  4891  0000F4                     _stateVscpDriver:
  4892                           	opt stack 0
  4893  0000F4                     	ds	1
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           intcon	equ	0xFF2
  4901                           indf0	equ	0xFEF
  4902                           postinc0	equ	0xFEE
  4903                           fsr0h	equ	0xFEA
  4904                           fsr0l	equ	0xFE9
  4905                           wreg	equ	0xFE8
  4906                           indf1	equ	0xFE7
  4907                           postinc1	equ	0xFE6
  4908                           postdec1	equ	0xFE5
  4909                           fsr1h	equ	0xFE2
  4910                           fsr1l	equ	0xFE1
  4911                           indf2	equ	0xFDF
  4912                           postinc2	equ	0xFDE
  4913                           postdec2	equ	0xFDD
  4914                           plusw2	equ	0xFDB
  4915                           fsr2h	equ	0xFDA
  4916                           fsr2l	equ	0xFD9
  4917                           status	equ	0xFD8
  4918                           
  4919                           	psect	bssBANK1
  4920  000100                     __pbssBANK1:
  4921                           	opt stack 0
  4922  000100                     _bHex:
  4923                           	opt stack 0
  4924  000100                     	ds	1
  4925  000101                     _bSilent:
  4926                           	opt stack 0
  4927  000101                     	ds	1
  4928  000102                     _pos:
  4929                           	opt stack 0
  4930  000102                     	ds	1
  4931  000103                     _rwtimeout:
  4932                           	opt stack 0
  4933  000103                     	ds	1
  4934  000104                     _cmdbuf:
  4935                           	opt stack 0
  4936  000104                     	ds	80
  4937  000154                     _wrkbuf:
  4938                           	opt stack 0
  4939  000154                     	ds	80
  4940  0001A4                     _vscpData:
  4941                           	opt stack 0
  4942  0001A4                     	ds	8
  4943  0001AC                     _vscpClass:
  4944                           	opt stack 0
  4945  0001AC                     	ds	2
  4946  0001AE                     _vscpNodeId:
  4947                           	opt stack 0
  4948  0001AE                     	ds	1
  4949  0001AF                     _vscpPriority:
  4950                           	opt stack 0
  4951  0001AF                     	ds	1
  4952  0001B0                     _vscpSize:
  4953                           	opt stack 0
  4954  0001B0                     	ds	1
  4955  0001B1                     _vscpType:
  4956                           	opt stack 0
  4957  0001B1                     	ds	1
  4958                           tblptru	equ	0xFF8
  4959                           tblptrh	equ	0xFF7
  4960                           tblptrl	equ	0xFF6
  4961                           tablat	equ	0xFF5
  4962                           prodh	equ	0xFF4
  4963                           prodl	equ	0xFF3
  4964                           intcon	equ	0xFF2
  4965                           indf0	equ	0xFEF
  4966                           postinc0	equ	0xFEE
  4967                           fsr0h	equ	0xFEA
  4968                           fsr0l	equ	0xFE9
  4969                           wreg	equ	0xFE8
  4970                           indf1	equ	0xFE7
  4971                           postinc1	equ	0xFE6
  4972                           postdec1	equ	0xFE5
  4973                           fsr1h	equ	0xFE2
  4974                           fsr1l	equ	0xFE1
  4975                           indf2	equ	0xFDF
  4976                           postinc2	equ	0xFDE
  4977                           postdec2	equ	0xFDD
  4978                           plusw2	equ	0xFDB
  4979                           fsr2h	equ	0xFDA
  4980                           fsr2l	equ	0xFD9
  4981                           status	equ	0xFD8
  4982                           
  4983                           	psect	bssBANK2
  4984  000200                     __pbssBANK2:
  4985                           	opt stack 0
  4986  000200                     _inputBuffer:
  4987                           	opt stack 0
  4988  000200                     	ds	128
  4989                           tblptru	equ	0xFF8
  4990                           tblptrh	equ	0xFF7
  4991                           tblptrl	equ	0xFF6
  4992                           tablat	equ	0xFF5
  4993                           prodh	equ	0xFF4
  4994                           prodl	equ	0xFF3
  4995                           intcon	equ	0xFF2
  4996                           indf0	equ	0xFEF
  4997                           postinc0	equ	0xFEE
  4998                           fsr0h	equ	0xFEA
  4999                           fsr0l	equ	0xFE9
  5000                           wreg	equ	0xFE8
  5001                           indf1	equ	0xFE7
  5002                           postinc1	equ	0xFE6
  5003                           postdec1	equ	0xFE5
  5004                           fsr1h	equ	0xFE2
  5005                           fsr1l	equ	0xFE1
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           plusw2	equ	0xFDB
  5010                           fsr2h	equ	0xFDA
  5011                           fsr2l	equ	0xFD9
  5012                           status	equ	0xFD8
  5013                           
  5014                           	psect	bssBANK3
  5015  000300                     __pbssBANK3:
  5016                           	opt stack 0
  5017  000300                     _crc8_table:
  5018                           	opt stack 0
  5019  000300                     	ds	256
  5020                           tblptru	equ	0xFF8
  5021                           tblptrh	equ	0xFF7
  5022                           tblptrl	equ	0xFF6
  5023                           tablat	equ	0xFF5
  5024                           prodh	equ	0xFF4
  5025                           prodl	equ	0xFF3
  5026                           intcon	equ	0xFF2
  5027                           indf0	equ	0xFEF
  5028                           postinc0	equ	0xFEE
  5029                           fsr0h	equ	0xFEA
  5030                           fsr0l	equ	0xFE9
  5031                           wreg	equ	0xFE8
  5032                           indf1	equ	0xFE7
  5033                           postinc1	equ	0xFE6
  5034                           postdec1	equ	0xFE5
  5035                           fsr1h	equ	0xFE2
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           plusw2	equ	0xFDB
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045                           	psect	bssBIGRAM
  5046  000400                     __pbssBIGRAM:
  5047                           	opt stack 0
  5048  000400                     _caninputBuffer:
  5049                           	opt stack 0
  5050  000400                     	ds	494
  5051                           tblptru	equ	0xFF8
  5052                           tblptrh	equ	0xFF7
  5053                           tblptrl	equ	0xFF6
  5054                           tablat	equ	0xFF5
  5055                           prodh	equ	0xFF4
  5056                           prodl	equ	0xFF3
  5057                           intcon	equ	0xFF2
  5058                           indf0	equ	0xFEF
  5059                           postinc0	equ	0xFEE
  5060                           fsr0h	equ	0xFEA
  5061                           fsr0l	equ	0xFE9
  5062                           wreg	equ	0xFE8
  5063                           indf1	equ	0xFE7
  5064                           postinc1	equ	0xFE6
  5065                           postdec1	equ	0xFE5
  5066                           fsr1h	equ	0xFE2
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           plusw2	equ	0xFDB
  5072                           fsr2h	equ	0xFDA
  5073                           fsr2l	equ	0xFD9
  5074                           status	equ	0xFD8
  5075                           
  5076                           	psect	cstackBANK2
  5077  000280                     __pcstackBANK2:
  5078                           	opt stack 0
  5079  000280                     doModeVerbose@id:
  5080                           	opt stack 0
  5081                           
  5082                           ; 4 bytes @ 0x0
  5083  000280                     	ds	4
  5084  000284                     doModeVerbose@preg:
  5085                           	opt stack 0
  5086                           
  5087                           ; 2 bytes @ 0x4
  5088  000284                     	ds	2
  5089  000286                     doModeVerbose@preg_1164:
  5090                           	opt stack 0
  5091                           
  5092                           ; 2 bytes @ 0x6
  5093  000286                     	ds	2
  5094  000288                     doModeVerbose@filter_class:
  5095                           	opt stack 0
  5096                           
  5097                           ; 2 bytes @ 0x8
  5098  000288                     	ds	2
  5099  00028A                     doModeVerbose@mask_class:
  5100                           	opt stack 0
  5101                           
  5102                           ; 2 bytes @ 0xA
  5103  00028A                     	ds	2
  5104  00028C                     doModeVerbose@nodeid:
  5105                           	opt stack 0
  5106                           
  5107                           ; 1 bytes @ 0xC
  5108  00028C                     	ds	1
  5109  00028D                     doModeVerbose@nodeid_1156:
  5110                           	opt stack 0
  5111                           
  5112                           ; 1 bytes @ 0xD
  5113  00028D                     	ds	1
  5114  00028E                     doModeVerbose@filter_priority:
  5115                           	opt stack 0
  5116                           
  5117                           ; 1 bytes @ 0xE
  5118  00028E                     	ds	1
  5119  00028F                     doModeVerbose@filter_type:
  5120                           	opt stack 0
  5121                           
  5122                           ; 1 bytes @ 0xF
  5123  00028F                     	ds	1
  5124  000290                     doModeVerbose@filter_nodeid:
  5125                           	opt stack 0
  5126                           
  5127                           ; 1 bytes @ 0x10
  5128  000290                     	ds	1
  5129  000291                     doModeVerbose@mask_priority:
  5130                           	opt stack 0
  5131                           
  5132                           ; 1 bytes @ 0x11
  5133  000291                     	ds	1
  5134  000292                     doModeVerbose@mask_type:
  5135                           	opt stack 0
  5136                           
  5137                           ; 1 bytes @ 0x12
  5138  000292                     	ds	1
  5139  000293                     doModeVerbose@mask_nodeid:
  5140                           	opt stack 0
  5141                           
  5142                           ; 1 bytes @ 0x13
  5143  000293                     	ds	1
  5144  000294                     _doModeVerbose$1124:
  5145                           	opt stack 0
  5146                           
  5147                           ; 2 bytes @ 0x14
  5148  000294                     	ds	2
  5149  000296                     _doModeVerbose$1136:
  5150                           	opt stack 0
  5151                           
  5152                           ; 2 bytes @ 0x16
  5153  000296                     	ds	2
  5154  000298                     _doModeVerbose$1141:
  5155                           	opt stack 0
  5156                           
  5157                           ; 2 bytes @ 0x18
  5158  000298                     	ds	2
  5159  00029A                     _doModeVerbose$1147:
  5160                           	opt stack 0
  5161                           
  5162                           ; 2 bytes @ 0x1A
  5163  00029A                     	ds	2
  5164  00029C                     _doModeVerbose$1151:
  5165                           	opt stack 0
  5166                           
  5167                           ; 2 bytes @ 0x1C
  5168  00029C                     	ds	2
  5169  00029E                     _doModeVerbose$1176:
  5170                           	opt stack 0
  5171                           
  5172                           ; 2 bytes @ 0x1E
  5173  00029E                     	ds	2
  5174  0002A0                     doModeVerbose@rv:
  5175                           	opt stack 0
  5176                           
  5177                           ; 1 bytes @ 0x20
  5178  0002A0                     	ds	1
  5179  0002A1                     doModeVerbose@page_1157:
  5180                           	opt stack 0
  5181                           
  5182                           ; 1 bytes @ 0x21
  5183  0002A1                     	ds	1
  5184  0002A2                     doModeVerbose@reg_1158:
  5185                           	opt stack 0
  5186                           
  5187                           ; 1 bytes @ 0x22
  5188  0002A2                     	ds	1
  5189  0002A3                     doModeVerbose@id_1217:
  5190                           	opt stack 0
  5191                           
  5192                           ; 4 bytes @ 0x23
  5193  0002A3                     	ds	4
  5194  0002A7                     doModeVerbose@filterno:
  5195                           	opt stack 0
  5196                           
  5197                           ; 1 bytes @ 0x27
  5198  0002A7                     	ds	1
  5199  0002A8                     doModeVerbose@maskno:
  5200                           	opt stack 0
  5201                           
  5202                           ; 1 bytes @ 0x28
  5203  0002A8                     	ds	1
  5204  0002A9                     doModeVerbose@value_1159:
  5205                           	opt stack 0
  5206                           
  5207                           ; 1 bytes @ 0x29
  5208  0002A9                     	ds	1
  5209  0002AA                     doModeVerbose@i:
  5210                           	opt stack 0
  5211                           
  5212                           ; 1 bytes @ 0x2A
  5213  0002AA                     	ds	1
  5214  0002AB                     doModeVerbose@count:
  5215                           	opt stack 0
  5216                           
  5217                           ; 1 bytes @ 0x2B
  5218  0002AB                     	ds	1
  5219  0002AC                     doModeVerbose@c:
  5220                           	opt stack 0
  5221                           
  5222                           ; 1 bytes @ 0x2C
  5223  0002AC                     	ds	1
  5224  0002AD                     doModeVerbose@page:
  5225                           	opt stack 0
  5226                           
  5227                           ; 1 bytes @ 0x2D
  5228  0002AD                     	ds	1
  5229  0002AE                     doModeVerbose@reg:
  5230                           	opt stack 0
  5231                           
  5232                           ; 1 bytes @ 0x2E
  5233  0002AE                     	ds	1
  5234  0002AF                     doModeVerbose@nodeid_1171:
  5235                           	opt stack 0
  5236                           
  5237                           ; 1 bytes @ 0x2F
  5238  0002AF                     	ds	1
  5239  0002B0                     doModeVerbose@i_1106:
  5240                           	opt stack 0
  5241                           
  5242                           ; 1 bytes @ 0x30
  5243  0002B0                     	ds	1
  5244  0002B1                     doModeVerbose@value:
  5245                           	opt stack 0
  5246                           
  5247                           ; 1 bytes @ 0x31
  5248  0002B1                     	ds	1
  5249  0002B2                     doModeVerbose@p_1112:
  5250                           	opt stack 0
  5251                           
  5252                           ; 2 bytes @ 0x32
  5253  0002B2                     	ds	2
  5254  0002B4                     doModeVerbose@p_1160:
  5255                           	opt stack 0
  5256                           
  5257                           ; 2 bytes @ 0x34
  5258  0002B4                     	ds	2
  5259  0002B6                     doModeVerbose@ifmode:
  5260                           	opt stack 0
  5261                           
  5262                           ; 1 bytes @ 0x36
  5263  0002B6                     	ds	1
  5264  0002B7                     doModeVerbose@p:
  5265                           	opt stack 0
  5266                           
  5267                           ; 2 bytes @ 0x37
  5268  0002B7                     	ds	2
  5269  0002B9                     doModeVerbose@p_1185:
  5270                           	opt stack 0
  5271                           
  5272                           ; 2 bytes @ 0x39
  5273  0002B9                     	ds	2
  5274  0002BB                     doModeVerbose@p_1205:
  5275                           	opt stack 0
  5276                           
  5277                           ; 2 bytes @ 0x3B
  5278  0002BB                     	ds	2
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           intcon	equ	0xFF2
  5286                           indf0	equ	0xFEF
  5287                           postinc0	equ	0xFEE
  5288                           fsr0h	equ	0xFEA
  5289                           fsr0l	equ	0xFE9
  5290                           wreg	equ	0xFE8
  5291                           indf1	equ	0xFE7
  5292                           postinc1	equ	0xFE6
  5293                           postdec1	equ	0xFE5
  5294                           fsr1h	equ	0xFE2
  5295                           fsr1l	equ	0xFE1
  5296                           indf2	equ	0xFDF
  5297                           postinc2	equ	0xFDE
  5298                           postdec2	equ	0xFDD
  5299                           plusw2	equ	0xFDB
  5300                           fsr2h	equ	0xFDA
  5301                           fsr2l	equ	0xFD9
  5302                           status	equ	0xFD8
  5303                           
  5304                           	psect	cstackBANK1
  5305  0001B2                     __pcstackBANK1:
  5306                           	opt stack 0
  5307  0001B2                     ??_doModeVerbose:
  5308                           
  5309                           ; 0 bytes @ 0x0
  5310  0001B2                     	ds	20
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           prodh	equ	0xFF4
  5316                           prodl	equ	0xFF3
  5317                           intcon	equ	0xFF2
  5318                           indf0	equ	0xFEF
  5319                           postinc0	equ	0xFEE
  5320                           fsr0h	equ	0xFEA
  5321                           fsr0l	equ	0xFE9
  5322                           wreg	equ	0xFE8
  5323                           indf1	equ	0xFE7
  5324                           postinc1	equ	0xFE6
  5325                           postdec1	equ	0xFE5
  5326                           fsr1h	equ	0xFE2
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           plusw2	equ	0xFDB
  5332                           fsr2h	equ	0xFDA
  5333                           fsr2l	equ	0xFD9
  5334                           status	equ	0xFD8
  5335                           
  5336                           	psect	cstackBANK0
  5337  000060                     __pcstackBANK0:
  5338                           	opt stack 0
  5339  000060                     ?_WriteTimer0:
  5340                           	opt stack 0
  5341  000060                     ?_fifo_init:
  5342                           	opt stack 0
  5343  000060                     ?_OpenUSART:
  5344                           	opt stack 0
  5345  000060                     ?_writeEEPROM:
  5346                           	opt stack 0
  5347  000060                     ?_setFilter:
  5348                           	opt stack 0
  5349  000060                     ?__CANIDToRegs:
  5350                           	opt stack 0
  5351  000060                     ??_isdigit:
  5352  000060                     ?_readEEPROM:
  5353                           	opt stack 0
  5354  000060                     ?_fifo_read:
  5355                           	opt stack 0
  5356  000060                     ?_memset:
  5357                           	opt stack 0
  5358  000060                     ?_strcpy:
  5359                           	opt stack 0
  5360  000060                     ?_strchr:
  5361                           	opt stack 0
  5362  000060                     ?_strlen:
  5363                           	opt stack 0
  5364  000060                     ?_memcpy:
  5365                           	opt stack 0
  5366  000060                     ?_strcat:
  5367                           	opt stack 0
  5368  000060                     ?___lwdiv:
  5369                           	opt stack 0
  5370  000060                     ?___lwmod:
  5371                           	opt stack 0
  5372  000060                     ?___wmul:
  5373                           	opt stack 0
  5374  000060                     ?___lldiv:
  5375                           	opt stack 0
  5376  000060                     ECANSetOperationMode@mode:
  5377                           	opt stack 0
  5378  000060                     nibbleFromChar@c:
  5379                           	opt stack 0
  5380  000060                     OpenTimer0@config:
  5381                           	opt stack 0
  5382  000060                     WriteUSART@data:
  5383                           	opt stack 0
  5384  000060                     toupper@c:
  5385                           	opt stack 0
  5386  000060                     __CANIDToRegs@ptr:
  5387                           	opt stack 0
  5388  000060                     fifo_init@buf:
  5389                           	opt stack 0
  5390  000060                     fifo_read@buf:
  5391                           	opt stack 0
  5392  000060                     writeEEPROM@address:
  5393                           	opt stack 0
  5394  000060                     readEEPROM@address:
  5395                           	opt stack 0
  5396  000060                     _init_crc8$2082:
  5397                           	opt stack 0
  5398  000060                     WriteTimer0@timer0:
  5399                           	opt stack 0
  5400  000060                     OpenUSART@spbrg:
  5401                           	opt stack 0
  5402  000060                     ___lwdiv@dividend:
  5403                           	opt stack 0
  5404  000060                     ___lwmod@dividend:
  5405                           	opt stack 0
  5406  000060                     memcpy@d1:
  5407                           	opt stack 0
  5408  000060                     memset@p1:
  5409                           	opt stack 0
  5410  000060                     strcat@to:
  5411                           	opt stack 0
  5412  000060                     strchr@ptr:
  5413                           	opt stack 0
  5414  000060                     strcpy@to:
  5415                           	opt stack 0
  5416  000060                     strlen@s:
  5417                           	opt stack 0
  5418  000060                     ___wmul@multiplier:
  5419                           	opt stack 0
  5420  000060                     setFilter@val:
  5421                           	opt stack 0
  5422  000060                     ___lldiv@dividend:
  5423                           	opt stack 0
  5424                           
  5425                           ; 4 bytes @ 0x0
  5426  000060                     	ds	1
  5427  000061                     ?_putsUSART:
  5428                           	opt stack 0
  5429  000061                     ??_printBinary:
  5430  000061                     ?_strichr:
  5431                           	opt stack 0
  5432  000061                     _isdigit$2903:
  5433                           	opt stack 0
  5434  000061                     putsUSART@data:
  5435                           	opt stack 0
  5436  000061                     strichr@ptr:
  5437                           	opt stack 0
  5438                           
  5439                           ; 2 bytes @ 0x1
  5440  000061                     	ds	1
  5441  000062                     writeEEPROM@data:
  5442                           	opt stack 0
  5443  000062                     readEEPROM@data:
  5444                           	opt stack 0
  5445  000062                     OpenUSART@config:
  5446                           	opt stack 0
  5447  000062                     isdigit@c:
  5448                           	opt stack 0
  5449  000062                     fifo_init@size:
  5450                           	opt stack 0
  5451  000062                     fifo_read@nbytes:
  5452                           	opt stack 0
  5453  000062                     init_crc8@j:
  5454                           	opt stack 0
  5455  000062                     WriteTimer0@timer:
  5456                           	opt stack 0
  5457  000062                     ___lwdiv@divisor:
  5458                           	opt stack 0
  5459  000062                     ___lwmod@divisor:
  5460                           	opt stack 0
  5461  000062                     memcpy@s1:
  5462                           	opt stack 0
  5463  000062                     memset@c:
  5464                           	opt stack 0
  5465  000062                     strcat@from:
  5466                           	opt stack 0
  5467  000062                     strchr@chr:
  5468                           	opt stack 0
  5469  000062                     strcpy@from:
  5470                           	opt stack 0
  5471  000062                     strlen@cp:
  5472                           	opt stack 0
  5473  000062                     ___wmul@multiplicand:
  5474                           	opt stack 0
  5475  000062                     __CANIDToRegs@val:
  5476                           	opt stack 0
  5477                           
  5478                           ; 4 bytes @ 0x2
  5479  000062                     	ds	1
  5480  000063                     ??_putsUSART:
  5481  000063                     init_app_eeprom@i:
  5482                           	opt stack 0
  5483  000063                     printBinary@value:
  5484                           	opt stack 0
  5485  000063                     strichr@chr:
  5486                           	opt stack 0
  5487                           
  5488                           ; 2 bytes @ 0x3
  5489  000063                     	ds	1
  5490  000064                     ??_fifo_read:
  5491  000064                     ??_strchr:
  5492  000064                     ??_setFilter:
  5493  000064                     ?_hexStringToBytes:
  5494                           	opt stack 0
  5495  000064                     ?_strnicmp:
  5496                           	opt stack 0
  5497  000064                     fifo_init@f:
  5498                           	opt stack 0
  5499  000064                     init_crc8@crc:
  5500                           	opt stack 0
  5501  000064                     ___lwdiv@counter:
  5502                           	opt stack 0
  5503  000064                     ___lwmod@counter:
  5504                           	opt stack 0
  5505  000064                     printBinary@i:
  5506                           	opt stack 0
  5507  000064                     hexStringToBytes@buf:
  5508                           	opt stack 0
  5509  000064                     memcpy@n:
  5510                           	opt stack 0
  5511  000064                     memset@n:
  5512                           	opt stack 0
  5513  000064                     strcat@cp:
  5514                           	opt stack 0
  5515  000064                     strcpy@cp:
  5516                           	opt stack 0
  5517  000064                     strnicmp@s1:
  5518                           	opt stack 0
  5519  000064                     ___wmul@product:
  5520                           	opt stack 0
  5521  000064                     ___lldiv@divisor:
  5522                           	opt stack 0
  5523                           
  5524                           ; 4 bytes @ 0x4
  5525  000064                     	ds	1
  5526  000065                     init_crc8@i:
  5527                           	opt stack 0
  5528  000065                     ___lwdiv@quotient:
  5529                           	opt stack 0
  5530                           
  5531                           ; 2 bytes @ 0x5
  5532  000065                     	ds	1
  5533  000066                     ?_atoi:
  5534                           	opt stack 0
  5535  000066                     ?_strspn:
  5536                           	opt stack 0
  5537  000066                     ?_strcspn:
  5538                           	opt stack 0
  5539  000066                     __CANIDToRegs@type:
  5540                           	opt stack 0
  5541  000066                     hexStringToBytes@size:
  5542                           	opt stack 0
  5543  000066                     atoi@s:
  5544                           	opt stack 0
  5545  000066                     memcpy@d:
  5546                           	opt stack 0
  5547  000066                     memset@p:
  5548                           	opt stack 0
  5549  000066                     strnicmp@s2:
  5550                           	opt stack 0
  5551  000066                     strcspn@s1:
  5552                           	opt stack 0
  5553  000066                     strspn@s1:
  5554                           	opt stack 0
  5555                           
  5556                           ; 2 bytes @ 0x6
  5557  000066                     	ds	1
  5558  000067                     ??__CANIDToRegs:
  5559  000067                     ?_crc8:
  5560                           	opt stack 0
  5561  000067                     ?_utoa:
  5562                           	opt stack 0
  5563  000067                     crc8@crc:
  5564                           	opt stack 0
  5565  000067                     hexStringToBytes@inhex:
  5566                           	opt stack 0
  5567  000067                     utoa@buf:
  5568                           	opt stack 0
  5569                           
  5570                           ; 2 bytes @ 0x7
  5571  000067                     	ds	1
  5572  000068                     ??_atoi:
  5573  000068                     fifo_read@p:
  5574                           	opt stack 0
  5575  000068                     memcpy@s:
  5576                           	opt stack 0
  5577  000068                     strnicmp@len:
  5578                           	opt stack 0
  5579  000068                     strcspn@s2:
  5580                           	opt stack 0
  5581  000068                     strspn@s2:
  5582                           	opt stack 0
  5583  000068                     ___lldiv@quotient:
  5584                           	opt stack 0
  5585                           
  5586                           ; 4 bytes @ 0x8
  5587  000068                     	ds	1
  5588  000069                     ??_hexStringToBytes:
  5589  000069                     __CANIDToRegs@Value:
  5590                           	opt stack 0
  5591  000069                     crc8@m:
  5592                           	opt stack 0
  5593  000069                     utoa@val:
  5594                           	opt stack 0
  5595                           
  5596                           ; 2 bytes @ 0x9
  5597  000069                     	ds	1
  5598  00006A                     ??_crc8:
  5599  00006A                     ??_strnicmp:
  5600  00006A                     ?_ECANSendMessage:
  5601                           	opt stack 0
  5602  00006A                     setFilter@filter:
  5603                           	opt stack 0
  5604  00006A                     atoi@sign:
  5605                           	opt stack 0
  5606  00006A                     fifo_read@i:
  5607                           	opt stack 0
  5608  00006A                     strcspn@i:
  5609                           	opt stack 0
  5610  00006A                     strspn@i:
  5611                           	opt stack 0
  5612  00006A                     ECANSendMessage@id:
  5613                           	opt stack 0
  5614                           
  5615                           ; 4 bytes @ 0xA
  5616  00006A                     	ds	1
  5617  00006B                     setFilter@sidh:
  5618                           	opt stack 0
  5619  00006B                     atoi@a:
  5620                           	opt stack 0
  5621  00006B                     utoa@base:
  5622                           	opt stack 0
  5623                           
  5624                           ; 2 bytes @ 0xB
  5625  00006B                     	ds	1
  5626  00006C                     ?_sendEscapedUartData:
  5627                           	opt stack 0
  5628  00006C                     ?_calcCRC:
  5629                           	opt stack 0
  5630  00006C                     ?_strtok:
  5631                           	opt stack 0
  5632  00006C                     setFilter@sidl:
  5633                           	opt stack 0
  5634  00006C                     fifo_read@f:
  5635                           	opt stack 0
  5636  00006C                     ___lldiv@counter:
  5637                           	opt stack 0
  5638  00006C                     strnicmp@r:
  5639                           	opt stack 0
  5640  00006C                     sendEscapedUartData@pcrc:
  5641                           	opt stack 0
  5642  00006C                     calcCRC@p:
  5643                           	opt stack 0
  5644  00006C                     hexStringToBytes@len:
  5645                           	opt stack 0
  5646  00006C                     strtok@s1:
  5647                           	opt stack 0
  5648                           
  5649                           ; 2 bytes @ 0xC
  5650  00006C                     	ds	1
  5651  00006D                     ?_getCANFrame:
  5652                           	opt stack 0
  5653  00006D                     ?_stristr:
  5654                           	opt stack 0
  5655  00006D                     ?___llmod:
  5656                           	opt stack 0
  5657  00006D                     setFilter@eidh:
  5658                           	opt stack 0
  5659  00006D                     getCANFrame@pdlc:
  5660                           	opt stack 0
  5661  00006D                     utoa@v:
  5662                           	opt stack 0
  5663  00006D                     stristr@s1:
  5664                           	opt stack 0
  5665  00006D                     ___llmod@dividend:
  5666                           	opt stack 0
  5667                           
  5668                           ; 4 bytes @ 0xD
  5669  00006D                     	ds	1
  5670  00006E                     sendEscapedUartData@c:
  5671                           	opt stack 0
  5672  00006E                     calcCRC@len:
  5673                           	opt stack 0
  5674  00006E                     setFilter@eidl:
  5675                           	opt stack 0
  5676  00006E                     ECANSendMessage@data:
  5677                           	opt stack 0
  5678  00006E                     hexStringToBytes@p:
  5679                           	opt stack 0
  5680  00006E                     strtok@s2:
  5681                           	opt stack 0
  5682                           
  5683                           ; 2 bytes @ 0xE
  5684  00006E                     	ds	1
  5685  00006F                     ?_sendVSCPDriverCommandReply:
  5686                           	opt stack 0
  5687  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5688                           	opt stack 0
  5689  00006F                     sendVSCPDriverAck@crc:
  5690                           	opt stack 0
  5691  00006F                     sendVSCPDriverNack@crc:
  5692                           	opt stack 0
  5693  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5694                           	opt stack 0
  5695  00006F                     sendVSCPModeCapabilities@crc:
  5696                           	opt stack 0
  5697  00006F                     calcCRC@j:
  5698                           	opt stack 0
  5699  00006F                     utoa@c:
  5700                           	opt stack 0
  5701  00006F                     getCANFrame@pdata:
  5702                           	opt stack 0
  5703  00006F                     stristr@s2:
  5704                           	opt stack 0
  5705                           
  5706                           ; 2 bytes @ 0xF
  5707  00006F                     	ds	1
  5708  000070                     ?_itoa:
  5709                           	opt stack 0
  5710  000070                     sendVSCPDriverErrorFrame@crc:
  5711                           	opt stack 0
  5712  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5713                           	opt stack 0
  5714  000070                     calcCRC@crc:
  5715                           	opt stack 0
  5716  000070                     ECANSendMessage@dataLen:
  5717                           	opt stack 0
  5718  000070                     hexStringToBytes@i:
  5719                           	opt stack 0
  5720  000070                     itoa@buf:
  5721                           	opt stack 0
  5722                           
  5723                           ; 2 bytes @ 0x10
  5724  000070                     	ds	1
  5725  000071                     sendVSCPDriverCommandReply@crc:
  5726                           	opt stack 0
  5727  000071                     getCANFrame@pid:
  5728                           	opt stack 0
  5729  000071                     ECANSendMessage@msgFlags:
  5730                           	opt stack 0
  5731  000071                     ___llmod@divisor:
  5732                           	opt stack 0
  5733                           
  5734                           ; 4 bytes @ 0x11
  5735  000071                     	ds	1
  5736  000072                     ??_ECANSendMessage:
  5737  000072                     ?_getVSCPFrame:
  5738                           	opt stack 0
  5739  000072                     getVSCPFrame@pvscpclass:
  5740                           	opt stack 0
  5741  000072                     itoa@val:
  5742                           	opt stack 0
  5743  000072                     receiveSendEventCANAL@data:
  5744                           	opt stack 0
  5745  000072                     receiveSendMultiEventCANAL@data:
  5746                           	opt stack 0
  5747                           
  5748                           ; 8 bytes @ 0x12
  5749  000072                     	ds	1
  5750  000073                     ECANSendMessage@pb:
  5751                           	opt stack 0
  5752                           
  5753                           ; 18 bytes @ 0x13
  5754  000073                     	ds	1
  5755  000074                     getVSCPFrame@pvscptype:
  5756                           	opt stack 0
  5757  000074                     itoa@base:
  5758                           	opt stack 0
  5759                           
  5760                           ; 2 bytes @ 0x14
  5761  000074                     	ds	1
  5762  000075                     ___llmod@counter:
  5763                           	opt stack 0
  5764                           
  5765                           ; 1 bytes @ 0x15
  5766  000075                     	ds	1
  5767  000076                     ?_sprintf:
  5768                           	opt stack 0
  5769  000076                     ?_ultoa:
  5770                           	opt stack 0
  5771  000076                     getVSCPFrame@pNodeId:
  5772                           	opt stack 0
  5773  000076                     sprintf@sp:
  5774                           	opt stack 0
  5775  000076                     ultoa@buf:
  5776                           	opt stack 0
  5777                           
  5778                           ; 2 bytes @ 0x16
  5779  000076                     	ds	2
  5780  000078                     getVSCPFrame@pPriority:
  5781                           	opt stack 0
  5782  000078                     sprintf@f:
  5783                           	opt stack 0
  5784  000078                     ultoa@val:
  5785                           	opt stack 0
  5786  000078                     printFirmwareVersion@wrkbuf:
  5787                           	opt stack 0
  5788                           
  5789                           ; 20 bytes @ 0x18
  5790  000078                     	ds	2
  5791  00007A                     receiveSendEventCANAL@i:
  5792                           	opt stack 0
  5793  00007A                     receiveSendMultiEventCANAL@msgcount:
  5794                           	opt stack 0
  5795  00007A                     getVSCPFrame@pSize:
  5796                           	opt stack 0
  5797                           
  5798                           ; 2 bytes @ 0x1A
  5799  00007A                     	ds	1
  5800  00007B                     receiveSendMultiEventCANAL@i:
  5801                           	opt stack 0
  5802  00007B                     receiveSendEventCANAL@id:
  5803                           	opt stack 0
  5804                           
  5805                           ; 4 bytes @ 0x1B
  5806  00007B                     	ds	1
  5807  00007C                     receiveSendMultiEventCANAL@dlc:
  5808                           	opt stack 0
  5809  00007C                     getVSCPFrame@pData:
  5810                           	opt stack 0
  5811  00007C                     ultoa@base:
  5812                           	opt stack 0
  5813                           
  5814                           ; 2 bytes @ 0x1C
  5815  00007C                     	ds	1
  5816  00007D                     receiveSendMultiEventCANAL@id:
  5817                           	opt stack 0
  5818                           
  5819                           ; 4 bytes @ 0x1D
  5820  00007D                     	ds	1
  5821  00007E                     ??_sprintf:
  5822  00007E                     ??_getVSCPFrame:
  5823  00007E                     ultoa@v:
  5824                           	opt stack 0
  5825                           
  5826                           ; 4 bytes @ 0x1E
  5827  00007E                     	ds	1
  5828  00007F                     receiveSendEventCANAL@dlc:
  5829                           	opt stack 0
  5830                           
  5831                           ; 1 bytes @ 0x1F
  5832  00007F                     	ds	1
  5833  000080                     receiveSendEventCANAL@crc:
  5834                           	opt stack 0
  5835                           
  5836                           ; 1 bytes @ 0x20
  5837  000080                     	ds	1
  5838  000081                     receiveSendMultiEventCANAL@crc:
  5839                           	opt stack 0
  5840  000081                     sprintf@idx:
  5841                           	opt stack 0
  5842                           
  5843                           ; 1 bytes @ 0x21
  5844  000081                     	ds	1
  5845  000082                     receiveSendMultiEventCANAL@pos:
  5846                           	opt stack 0
  5847  000082                     ultoa@c:
  5848                           	opt stack 0
  5849  000082                     _sprintf$2144:
  5850                           	opt stack 0
  5851  000082                     getVSCPFrame@id:
  5852                           	opt stack 0
  5853                           
  5854                           ; 4 bytes @ 0x22
  5855  000082                     	ds	1
  5856  000083                     ??_receiveSendEventSLCAN:
  5857                           
  5858                           ; 0 bytes @ 0x23
  5859  000083                     	ds	1
  5860  000084                     _sprintf$2145:
  5861                           	opt stack 0
  5862                           
  5863                           ; 2 bytes @ 0x24
  5864  000084                     	ds	1
  5865  000085                     ECANSendMessage@mode:
  5866                           	opt stack 0
  5867                           
  5868                           ; 1 bytes @ 0x25
  5869  000085                     	ds	1
  5870  000086                     ECANSendMessage@buffers:
  5871                           	opt stack 0
  5872  000086                     _sprintf$2151:
  5873                           	opt stack 0
  5874  000086                     receiveSendEventSLCAN@id:
  5875                           	opt stack 0
  5876                           
  5877                           ; 4 bytes @ 0x26
  5878  000086                     	ds	1
  5879  000087                     ECANSendMessage@j:
  5880                           	opt stack 0
  5881                           
  5882                           ; 1 bytes @ 0x27
  5883  000087                     	ds	1
  5884  000088                     ECANSendMessage@tempBSEL0:
  5885                           	opt stack 0
  5886  000088                     sprintf@ap:
  5887                           	opt stack 0
  5888                           
  5889                           ; 1 bytes @ 0x28
  5890  000088                     	ds	1
  5891  000089                     ECANSendMessage@tempPtr:
  5892                           	opt stack 0
  5893  000089                     sprintf@prec:
  5894                           	opt stack 0
  5895                           
  5896                           ; 2 bytes @ 0x29
  5897  000089                     	ds	1
  5898  00008A                     receiveSendEventSLCAN@dlc:
  5899                           	opt stack 0
  5900                           
  5901                           ; 1 bytes @ 0x2A
  5902  00008A                     	ds	1
  5903  00008B                     ECANSendMessage@temp:
  5904                           	opt stack 0
  5905  00008B                     receiveSendEventSLCAN@i:
  5906                           	opt stack 0
  5907  00008B                     sprintf@width:
  5908                           	opt stack 0
  5909                           
  5910                           ; 2 bytes @ 0x2B
  5911  00008B                     	ds	1
  5912  00008C                     ECANSendMessage@i:
  5913                           	opt stack 0
  5914                           
  5915                           ; 1 bytes @ 0x2C
  5916  00008C                     	ds	1
  5917  00008D                     ECANSendMessage@ptr:
  5918                           	opt stack 0
  5919  00008D                     sprintf@_val:
  5920                           	opt stack 0
  5921                           
  5922                           ; 4 bytes @ 0x2D
  5923  00008D                     	ds	2
  5924  00008F                     ?_sendCANFrame:
  5925                           	opt stack 0
  5926  00008F                     sendCANFrame@id:
  5927                           	opt stack 0
  5928                           
  5929                           ; 4 bytes @ 0x2F
  5930  00008F                     	ds	2
  5931  000091                     sprintf@c:
  5932                           	opt stack 0
  5933                           
  5934                           ; 1 bytes @ 0x31
  5935  000091                     	ds	1
  5936  000092                     sprintf@flag:
  5937                           	opt stack 0
  5938                           
  5939                           ; 2 bytes @ 0x32
  5940  000092                     	ds	1
  5941  000093                     sendCANFrame@dlc:
  5942                           	opt stack 0
  5943                           
  5944                           ; 1 bytes @ 0x33
  5945  000093                     	ds	1
  5946  000094                     ??_receivePrintEventVerbose:
  5947  000094                     _printStatistics$1366:
  5948                           	opt stack 0
  5949  000094                     _printErrors$1391:
  5950                           	opt stack 0
  5951  000094                     sendCANFrame@pdata:
  5952                           	opt stack 0
  5953                           
  5954                           ; 2 bytes @ 0x34
  5955  000094                     	ds	2
  5956  000096                     ??_doModeSLCAN:
  5957  000096                     ??_receiveVSCPModeCanalMsg:
  5958  000096                     ?_sendVSCPFrame:
  5959                           	opt stack 0
  5960  000096                     _printStatistics$1372:
  5961                           	opt stack 0
  5962  000096                     _printErrors$1397:
  5963                           	opt stack 0
  5964  000096                     sendVSCPFrame@vscpclass:
  5965                           	opt stack 0
  5966                           
  5967                           ; 2 bytes @ 0x36
  5968  000096                     	ds	2
  5969  000098                     sendVSCPFrame@vscptype:
  5970                           	opt stack 0
  5971  000098                     _printStatistics$1378:
  5972                           	opt stack 0
  5973  000098                     _printErrors$1403:
  5974                           	opt stack 0
  5975                           
  5976                           ; 2 bytes @ 0x38
  5977  000098                     	ds	1
  5978  000099                     sendVSCPFrame@nodeid:
  5979                           	opt stack 0
  5980  000099                     _receivePrintEventVerbose$1273:
  5981                           	opt stack 0
  5982                           
  5983                           ; 2 bytes @ 0x39
  5984  000099                     	ds	1
  5985  00009A                     sendVSCPFrame@priority:
  5986                           	opt stack 0
  5987  00009A                     _printStatistics$1384:
  5988                           	opt stack 0
  5989  00009A                     _printErrors$1409:
  5990                           	opt stack 0
  5991                           
  5992                           ; 2 bytes @ 0x3A
  5993  00009A                     	ds	1
  5994  00009B                     sendVSCPFrame@size:
  5995                           	opt stack 0
  5996  00009B                     _receivePrintEventVerbose$1278:
  5997                           	opt stack 0
  5998                           
  5999                           ; 2 bytes @ 0x3B
  6000  00009B                     	ds	1
  6001  00009C                     _printErrors$1415:
  6002                           	opt stack 0
  6003  00009C                     sendVSCPFrame@pData:
  6004                           	opt stack 0
  6005                           
  6006                           ; 2 bytes @ 0x3C
  6007  00009C                     	ds	1
  6008  00009D                     _receivePrintEventVerbose$1283:
  6009                           	opt stack 0
  6010  00009D                     doModeSLCAN@id:
  6011                           	opt stack 0
  6012                           
  6013                           ; 4 bytes @ 0x3D
  6014  00009D                     	ds	1
  6015  00009E                     ??_sendVSCPFrame:
  6016  00009E                     _printErrors$1424:
  6017                           	opt stack 0
  6018                           
  6019                           ; 2 bytes @ 0x3E
  6020  00009E                     	ds	1
  6021  00009F                     _receivePrintEventVerbose$1288:
  6022                           	opt stack 0
  6023                           
  6024                           ; 2 bytes @ 0x3F
  6025  00009F                     	ds	2
  6026  0000A1                     doModeSLCAN@dlc:
  6027                           	opt stack 0
  6028  0000A1                     _receivePrintEventVerbose$1293:
  6029                           	opt stack 0
  6030                           
  6031                           ; 2 bytes @ 0x41
  6032  0000A1                     	ds	1
  6033  0000A2                     doModeSLCAN@c:
  6034                           	opt stack 0
  6035                           
  6036                           ; 1 bytes @ 0x42
  6037  0000A2                     	ds	1
  6038  0000A3                     doModeSLCAN@rv:
  6039                           	opt stack 0
  6040  0000A3                     _receivePrintEventVerbose$1298:
  6041                           	opt stack 0
  6042                           
  6043                           ; 2 bytes @ 0x43
  6044  0000A3                     	ds	2
  6045  0000A5                     receivePrintEventVerbose@i:
  6046                           	opt stack 0
  6047                           
  6048                           ; 1 bytes @ 0x45
  6049  0000A5                     	ds	5
  6050  0000AA                     receiveVSCPModeCanalMsg@data:
  6051                           	opt stack 0
  6052                           
  6053                           ; 8 bytes @ 0x4A
  6054  0000AA                     	ds	8
  6055  0000B2                     receiveVSCPModeCanalMsg@id:
  6056                           	opt stack 0
  6057  0000B2                     sendVSCPFrame@id:
  6058                           	opt stack 0
  6059                           
  6060                           ; 4 bytes @ 0x52
  6061  0000B2                     	ds	4
  6062  0000B6                     ?_readRegisterExtended:
  6063                           	opt stack 0
  6064  0000B6                     ?_writeRegisterExtended:
  6065                           	opt stack 0
  6066  0000B6                     ?_readRegister:
  6067                           	opt stack 0
  6068  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6069                           	opt stack 0
  6070  0000B6                     readRegister@reg:
  6071                           	opt stack 0
  6072  0000B6                     readRegisterExtended@page:
  6073                           	opt stack 0
  6074  0000B6                     writeRegisterExtended@page:
  6075                           	opt stack 0
  6076                           
  6077                           ; 2 bytes @ 0x56
  6078  0000B6                     	ds	1
  6079  0000B7                     doModeVscp@c:
  6080                           	opt stack 0
  6081  0000B7                     readRegister@timeout:
  6082                           	opt stack 0
  6083                           
  6084                           ; 2 bytes @ 0x57
  6085  0000B7                     	ds	1
  6086  0000B8                     readRegisterExtended@reg:
  6087                           	opt stack 0
  6088  0000B8                     writeRegisterExtended@reg:
  6089                           	opt stack 0
  6090                           
  6091                           ; 1 bytes @ 0x58
  6092  0000B8                     	ds	1
  6093  0000B9                     readRegister@value:
  6094                           	opt stack 0
  6095  0000B9                     readRegisterExtended@timeout:
  6096                           	opt stack 0
  6097  0000B9                     writeRegisterExtended@timeout:
  6098                           	opt stack 0
  6099                           
  6100                           ; 2 bytes @ 0x59
  6101  0000B9                     	ds	1
  6102  0000BA                     ??_readRegister:
  6103                           
  6104                           ; 0 bytes @ 0x5A
  6105  0000BA                     	ds	1
  6106  0000BB                     readRegisterExtended@value:
  6107                           	opt stack 0
  6108  0000BB                     writeRegisterExtended@value:
  6109                           	opt stack 0
  6110                           
  6111                           ; 2 bytes @ 0x5B
  6112  0000BB                     	ds	2
  6113  0000BD                     ??_readRegisterExtended:
  6114  0000BD                     ??_writeRegisterExtended:
  6115                           
  6116                           ; 0 bytes @ 0x5D
  6117  0000BD                     	ds	1
  6118  0000BE                     readRegister@nodeid:
  6119                           	opt stack 0
  6120                           
  6121                           ; 1 bytes @ 0x5E
  6122  0000BE                     	ds	1
  6123  0000BF                     printGUID@nodeid:
  6124                           	opt stack 0
  6125  0000BF                     printMDF@nodeid:
  6126                           	opt stack 0
  6127  0000BF                     printNodeFirmwareVersion@nodeid:
  6128                           	opt stack 0
  6129                           
  6130                           ; 1 bytes @ 0x5F
  6131  0000BF                     	ds	1
  6132  0000C0                     printMDF@value:
  6133                           	opt stack 0
  6134  0000C0                     printGUID@buf:
  6135                           	opt stack 0
  6136  0000C0                     printNodeFirmwareVersion@buf:
  6137                           	opt stack 0
  6138                           
  6139                           ; 3 bytes @ 0x60
  6140  0000C0                     	ds	1
  6141  0000C1                     readRegisterExtended@nodeid:
  6142                           	opt stack 0
  6143  0000C1                     writeRegisterExtended@nodeid:
  6144                           	opt stack 0
  6145  0000C1                     printMDF@p:
  6146                           	opt stack 0
  6147                           
  6148                           ; 2 bytes @ 0x61
  6149  0000C1                     	ds	2
  6150  0000C3                     printGUID@value:
  6151                           	opt stack 0
  6152  0000C3                     printMDF@i:
  6153                           	opt stack 0
  6154  0000C3                     printNodeFirmwareVersion@value:
  6155                           	opt stack 0
  6156                           
  6157                           ; 1 bytes @ 0x63
  6158  0000C3                     	ds	1
  6159  0000C4                     printGUID@i:
  6160                           	opt stack 0
  6161  0000C4                     printNodeFirmwareVersion@i:
  6162                           	opt stack 0
  6163                           
  6164                           ; 1 bytes @ 0x64
  6165  0000C4                     	ds	1
  6166  0000C5                     _findNodes$1468:
  6167                           	opt stack 0
  6168                           
  6169                           ; 2 bytes @ 0x65
  6170  0000C5                     	ds	2
  6171  0000C7                     findNodes@nFound:
  6172                           	opt stack 0
  6173                           
  6174                           ; 1 bytes @ 0x67
  6175  0000C7                     	ds	1
  6176  0000C8                     findNodes@value:
  6177                           	opt stack 0
  6178                           
  6179                           ; 1 bytes @ 0x68
  6180  0000C8                     	ds	1
  6181  0000C9                     findNodes@i:
  6182                           	opt stack 0
  6183                           
  6184                           ; 1 bytes @ 0x69
  6185  0000C9                     	ds	1
  6186  0000CA                     
  6187                           ; 2 bytes @ 0x6A
  6188  0000CA                     	ds	2
  6189  0000CC                     
  6190                           ; 3 bytes @ 0x6C
  6191  0000CC                     	ds	3
  6192  0000CF                     ??_main:
  6193                           
  6194                           ; 0 bytes @ 0x6F
  6195  0000CF                     	ds	1
  6196  0000D0                     main@c:
  6197                           	opt stack 0
  6198                           
  6199                           ; 1 bytes @ 0x70
  6200  0000D0                     	ds	1
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           indf0	equ	0xFEF
  6209                           postinc0	equ	0xFEE
  6210                           fsr0h	equ	0xFEA
  6211                           fsr0l	equ	0xFE9
  6212                           wreg	equ	0xFE8
  6213                           indf1	equ	0xFE7
  6214                           postinc1	equ	0xFE6
  6215                           postdec1	equ	0xFE5
  6216                           fsr1h	equ	0xFE2
  6217                           fsr1l	equ	0xFE1
  6218                           indf2	equ	0xFDF
  6219                           postinc2	equ	0xFDE
  6220                           postdec2	equ	0xFDD
  6221                           plusw2	equ	0xFDB
  6222                           fsr2h	equ	0xFDA
  6223                           fsr2l	equ	0xFD9
  6224                           status	equ	0xFD8
  6225                           
  6226                           	psect	cstackCOMRAM
  6227  00002B                     __pcstackCOMRAM:
  6228                           	opt stack 0
  6229  00002B                     ?__RegsToCANID:
  6230                           	opt stack 0
  6231  00002B                     ?i1_WriteTimer0:
  6232                           	opt stack 0
  6233  00002B                     ?_fifo_write:
  6234                           	opt stack 0
  6235  00002B                     ?_fifo_getFree:
  6236                           	opt stack 0
  6237  00002B                     ?__ECANPointBuffer:
  6238                           	opt stack 0
  6239  00002B                     fifo_write@buf:
  6240                           	opt stack 0
  6241  00002B                     ReadUSART@data:
  6242                           	opt stack 0
  6243  00002B                     __RegsToCANID@ptr:
  6244                           	opt stack 0
  6245  00002B                     i1WriteTimer0@timer0:
  6246                           	opt stack 0
  6247                           
  6248                           ; 2 bytes @ 0x0
  6249  00002B                     	ds	1
  6250  00002C                     fifo_write@nbytes:
  6251                           	opt stack 0
  6252                           
  6253                           ; 4 bytes @ 0x1
  6254  00002C                     	ds	1
  6255  00002D                     ??_fifo_getFree:
  6256  00002D                     __RegsToCANID@val:
  6257                           	opt stack 0
  6258  00002D                     i1WriteTimer0@timer:
  6259                           	opt stack 0
  6260                           
  6261                           ; 2 bytes @ 0x2
  6262  00002D                     	ds	1
  6263  00002E                     __RegsToCANID@type:
  6264                           	opt stack 0
  6265  00002E                     __ECANPointBuffer@b:
  6266                           	opt stack 0
  6267                           
  6268                           ; 1 bytes @ 0x3
  6269  00002E                     	ds	1
  6270  00002F                     ??__RegsToCANID:
  6271  00002F                     __ECANPointBuffer@pt:
  6272                           	opt stack 0
  6273                           
  6274                           ; 2 bytes @ 0x4
  6275  00002F                     	ds	1
  6276  000030                     ??_fifo_write:
  6277                           
  6278                           ; 0 bytes @ 0x5
  6279  000030                     	ds	1
  6280  000031                     __RegsToCANID@Value:
  6281                           	opt stack 0
  6282                           
  6283                           ; 1 bytes @ 0x6
  6284  000031                     	ds	1
  6285  000032                     ?_ECANReceiveMessage:
  6286                           	opt stack 0
  6287  000032                     ECANReceiveMessage@data:
  6288                           	opt stack 0
  6289                           
  6290                           ; 1 bytes @ 0x7
  6291  000032                     	ds	1
  6292  000033                     ECANReceiveMessage@dataLen:
  6293                           	opt stack 0
  6294                           
  6295                           ; 1 bytes @ 0x8
  6296  000033                     	ds	1
  6297  000034                     ECANReceiveMessage@msgFlags:
  6298                           	opt stack 0
  6299  000034                     fifo_write@p:
  6300                           	opt stack 0
  6301                           
  6302                           ; 1 bytes @ 0x9
  6303  000034                     	ds	1
  6304  000035                     fifo_getFree@f:
  6305                           	opt stack 0
  6306  000035                     ECANReceiveMessage@savedPtr:
  6307                           	opt stack 0
  6308  000035                     fifo_write@i:
  6309                           	opt stack 0
  6310                           
  6311                           ; 4 bytes @ 0xA
  6312  000035                     	ds	2
  6313  000037                     ECANReceiveMessage@id:
  6314                           	opt stack 0
  6315                           
  6316                           ; 1 bytes @ 0xC
  6317  000037                     	ds	1
  6318  000038                     ECANReceiveMessage@i:
  6319                           	opt stack 0
  6320                           
  6321                           ; 1 bytes @ 0xD
  6322  000038                     	ds	1
  6323  000039                     ECANReceiveMessage@mode:
  6324                           	opt stack 0
  6325  000039                     fifo_write@f:
  6326                           	opt stack 0
  6327                           
  6328                           ; 1 bytes @ 0xE
  6329  000039                     	ds	1
  6330  00003A                     ECANReceiveMessage@temp:
  6331                           	opt stack 0
  6332                           
  6333                           ; 1 bytes @ 0xF
  6334  00003A                     	ds	1
  6335  00003B                     ECANReceiveMessage@ptr:
  6336                           	opt stack 0
  6337                           
  6338                           ; 2 bytes @ 0x10
  6339  00003B                     	ds	2
  6340  00003D                     ??_Interrupt:
  6341                           
  6342                           ; 0 bytes @ 0x12
  6343  00003D                     	ds	9
  6344  000046                     Interrupt@data:
  6345                           	opt stack 0
  6346                           
  6347                           ; 8 bytes @ 0x1B
  6348  000046                     	ds	8
  6349  00004E                     Interrupt@c:
  6350                           	opt stack 0
  6351                           
  6352                           ; 1 bytes @ 0x23
  6353  00004E                     	ds	1
  6354  00004F                     Interrupt@dlc:
  6355                           	opt stack 0
  6356                           
  6357                           ; 1 bytes @ 0x24
  6358  00004F                     	ds	1
  6359  000050                     Interrupt@id:
  6360                           	opt stack 0
  6361                           
  6362                           ; 4 bytes @ 0x25
  6363  000050                     	ds	4
  6364  000054                     Interrupt@flags:
  6365                           	opt stack 0
  6366                           
  6367                           ; 1 bytes @ 0x29
  6368  000054                     	ds	1
  6369                           tblptru	equ	0xFF8
  6370                           tblptrh	equ	0xFF7
  6371                           tblptrl	equ	0xFF6
  6372                           tablat	equ	0xFF5
  6373                           prodh	equ	0xFF4
  6374                           prodl	equ	0xFF3
  6375                           intcon	equ	0xFF2
  6376                           indf0	equ	0xFEF
  6377                           postinc0	equ	0xFEE
  6378                           fsr0h	equ	0xFEA
  6379                           fsr0l	equ	0xFE9
  6380                           wreg	equ	0xFE8
  6381                           indf1	equ	0xFE7
  6382                           postinc1	equ	0xFE6
  6383                           postdec1	equ	0xFE5
  6384                           fsr1h	equ	0xFE2
  6385                           fsr1l	equ	0xFE1
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           postdec2	equ	0xFDD
  6389                           plusw2	equ	0xFDB
  6390                           fsr2h	equ	0xFDA
  6391                           fsr2l	equ	0xFD9
  6392                           status	equ	0xFD8
  6393                           
  6394 ;;
  6395 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6396 ;;
  6397 ;; *************** function _main *****************
  6398 ;; Defined at:
  6399 ;;		line 255 in file "main.c"
  6400 ;; Parameters:    Size  Location     Type
  6401 ;;  argc            2  106[BANK0 ] int 
  6402 ;;  argv            3  108[BANK0 ] PTR PTR unsigned char 
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;  c               1  112[BANK0 ] unsigned char 
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  2  106[BANK0 ] int 
  6407 ;; Registers used:
  6408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : F/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6414 ;;      Params:         0       5       0       0       0       0       0
  6415 ;;      Locals:         0       1       0       0       0       0       0
  6416 ;;      Temps:          0       1       0       0       0       0       0
  6417 ;;      Totals:         0       7       0       0       0       0       0
  6418 ;;Total ram usage:        7 bytes
  6419 ;; Hardware stack levels required when called:   11
  6420 ;; This function calls:
  6421 ;;		_fifo_init
  6422 ;;		_init_crc8
  6423 ;;		_readEEPROM
  6424 ;;		_vscp_restoreDefaults
  6425 ;;		_init
  6426 ;;		_putsUSART
  6427 ;;		_printFirmwareVersion
  6428 ;;		_printMode
  6429 ;;		_fifo_read
  6430 ;;		_doModeVerbose
  6431 ;;		_doModeVscp
  6432 ;;		_doModeSLCAN
  6433 ;;		_doModeVscpNode
  6434 ;; This function is called by:
  6435 ;;		Startup code after reset
  6436 ;; This function uses a non-reentrant model
  6437 ;;
  6438                           
  6439                           	psect	text0
  6440  0039A4                     __ptext0:
  6441                           	opt stack 0
  6442  0039A4                     _main:
  6443                           	opt stack 19
  6444                           
  6445                           ;main.c: 257: caps.maxVscpFrames = 1;
  6446                           
  6447                           ;incstack = 0
  6448                           ;incstack = 0
  6449  0039A4  0E01               	movlw	1
  6450  0039A6  0100               	movlb	0	; () banked
  6451  0039A8  6FF5               	movwf	_caps& (0+255),b
  6452                           
  6453                           ;main.c: 258: caps.maxCanalFrames = 1;
  6454  0039AA  6FF6               	movwf	(_caps+1)& (0+255),b
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;main.c: 263: fifo_init( &serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6458  0039AC  0E02               	movlw	high _inputBuffer
  6459  0039AE  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6460  0039B0  0E00               	movlw	low _inputBuffer
  6461  0039B2  6F60               	movwf	?_fifo_init& (0+255),b
  6462  0039B4  6B63               	clrf	(?_fifo_init+3)& (0+255),b
  6463  0039B6  0E80               	movlw	128
  6464  0039B8  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6465  0039BA  0E23               	movlw	_serialInputFifo& (0+255)
  6466  0039BC  EC33  F00D         	call	_fifo_init
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;main.c: 264: fifo_init( &canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6470  0039C0  0E04               	movlw	high _caninputBuffer
  6471  0039C2  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6472  0039C4  0E00               	movlw	low _caninputBuffer
  6473  0039C6  6F60               	movwf	?_fifo_init& (0+255),b
  6474  0039C8  0E01               	movlw	1
  6475  0039CA  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6476  0039CC  0EEE               	movlw	238
  6477  0039CE  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6478  0039D0  0E1B               	movlw	_canInputFifo& (0+255)
  6479  0039D2  EC33  F00D         	call	_fifo_init
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;main.c: 267: init_crc8();
  6483  0039D6  ECEA  F00F         	call	_init_crc8	;wreg free
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;main.c: 271: if ( ( 0x55 != readEEPROM(0x01) ) ||
  6487                           ;main.c: 272: ( 0xaa != readEEPROM(0x02) ) ) {
  6488  0039DA  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6489  0039DC  0E01               	movlw	1
  6490  0039DE  6F60               	movwf	?_readEEPROM& (0+255),b
  6491  0039E0  ECAF  F00B         	call	_readEEPROM	;wreg free
  6492  0039E4  0A55               	xorlw	85
  6493  0039E6  E107               	bnz	l9831
  6494                           
  6495                           ; BSR set to: 0
  6496  0039E8  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6497  0039EA  0E02               	movlw	2
  6498  0039EC  6F60               	movwf	?_readEEPROM& (0+255),b
  6499  0039EE  ECAF  F00B         	call	_readEEPROM	;wreg free
  6500  0039F2  0AAA               	xorlw	170
  6501  0039F4  A4D8               	btfss	status,2,c
  6502  0039F6                     l9831:
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;main.c: 273: vscp_restoreDefaults();
  6506  0039F6  ECA2  F00B         	call	_vscp_restoreDefaults	;wreg free
  6507                           
  6508                           ;main.c: 274: }
  6509                           ;main.c: 277: init();
  6510  0039FA  ECD8  F00D         	call	_init	;wreg free
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;main.c: 281: _delay((unsigned long)((10)*(40000000/4000.0)));
  6514  0039FE  0E82               	movlw	130
  6515  003A00  6FCF               	movwf	??_main& (0+255),b
  6516  003A02  0EDD               	movlw	221
  6517  003A04                     u17137:
  6518  003A04  2EE8               	decfsz	wreg,f,c
  6519  003A06  D7FE               	goto	u17137
  6520  003A08  2FCF               	decfsz	??_main& (0+255),f,b
  6521  003A0A  D7FC               	goto	u17137
  6522  003A0C  D000               	nop2	
  6523                           
  6524                           ;main.c: 285: putsUSART((char *) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6525  003A0E  0E76               	movlw	high STR_1
  6526  003A10  0100               	movlb	0	; () banked
  6527  003A12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6528  003A14  0E2F               	movlw	low STR_1
  6529  003A16  6F61               	movwf	?_putsUSART& (0+255),b
  6530  003A18  EC6E  F00E         	call	_putsUSART	;wreg free
  6531                           
  6532                           ;main.c: 286: putsUSART((char *) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n
      +                          ");
  6533  003A1C  0E71               	movlw	high STR_2
  6534  003A1E  0100               	movlb	0	; () banked
  6535  003A20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6536  003A22  0E8D               	movlw	low STR_2
  6537  003A24  6F61               	movwf	?_putsUSART& (0+255),b
  6538  003A26  EC6E  F00E         	call	_putsUSART	;wreg free
  6539                           
  6540                           ;main.c: 287: putsUSART((char *) "http://www.paradiseofthefrog.com\r\n");
  6541  003A2A  0E76               	movlw	high STR_3
  6542  003A2C  0100               	movlb	0	; () banked
  6543  003A2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6544  003A30  0E9D               	movlw	low STR_3
  6545  003A32  6F61               	movwf	?_putsUSART& (0+255),b
  6546  003A34  EC6E  F00E         	call	_putsUSART	;wreg free
  6547                           
  6548                           ;main.c: 288: printFirmwareVersion();
  6549  003A38  EC10  F012         	call	_printFirmwareVersion	;wreg free
  6550                           
  6551                           ;main.c: 289: printMode();
  6552  003A3C  EC5A  F010         	call	_printMode	;wreg free
  6553                           
  6554                           ;main.c: 293: if ( 0 != mode ) {
  6555  003A40  0100               	movlb	0	; () banked
  6556  003A42  51F1               	movf	_mode& (0+255),w,b
  6557  003A44  E034               	bz	l9865
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;main.c: 295: uint8_t c;
  6561                           ;main.c: 297: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6562  003A46  0E70               	movlw	high STR_4
  6563  003A48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6564  003A4A  0EB5               	movlw	low STR_4
  6565  003A4C  6F61               	movwf	?_putsUSART& (0+255),b
  6566  003A4E  EC6E  F00E         	call	_putsUSART	;wreg free
  6567                           
  6568                           ;main.c: 299: timekeeper = 0;
  6569  003A52  0100               	movlb	0	; () banked
  6570  003A54  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
  6571  003A56  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  6572  003A58  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  6573  003A5A  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;main.c: 300: ledFunctionality = 6;
  6577  003A5C  0E06               	movlw	6
  6578  003A5E  6E1A               	movwf	_ledFunctionality,c
  6579                           
  6580                           ;main.c: 301: while (timekeeper < 3000) {
  6581  003A60  D01D               	goto	l9863
  6582  003A62                     l421:
  6583                           
  6584                           ; BSR set to: 0
  6585  003A62  0004               	clrwdt		;# 
  6586                           
  6587                           ;main.c: 303: (INTCONbits.GIE = 0);
  6588  003A64  9EF2               	bcf	intcon,7,c	;volatile
  6589                           
  6590                           ;main.c: 304: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6591  003A66  0100               	movlb	0	; () banked
  6592  003A68  0E00               	movlw	high main@c
  6593  003A6A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6594  003A6C  0ED0               	movlw	low main@c
  6595  003A6E  6F60               	movwf	?_fifo_read& (0+255),b
  6596  003A70  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6597  003A72  0E01               	movlw	1
  6598  003A74  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6599  003A76  0E23               	movlw	_serialInputFifo& (0+255)
  6600  003A78  EC8D  F015         	call	_fifo_read
  6601  003A7C  0560               	decf	?_fifo_read& (0+255),w,b
  6602  003A7E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6603  003A80  E10C               	bnz	l422
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;main.c: 305: (INTCONbits.GIE = 1);
  6607  003A82  8EF2               	bsf	intcon,7,c	;volatile
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;main.c: 306: if ('v' == c) {
  6611  003A84  51D0               	movf	main@c& (0+255),w,b
  6612  003A86  0A76               	xorlw	118
  6613  003A88  E108               	bnz	l422
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;main.c: 307: mode = 0;
  6617  003A8A  6BF1               	clrf	_mode& (0+255),b
  6618                           
  6619                           ; BSR set to: 0
  6620                           ;main.c: 308: putsUSART((char *) "Temporary verbose mode set\r\n");
  6621  003A8C  0E78               	movlw	high STR_5
  6622  003A8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6623  003A90  0E2A               	movlw	low STR_5
  6624  003A92  6F61               	movwf	?_putsUSART& (0+255),b
  6625  003A94  EC6E  F00E         	call	_putsUSART	;wreg free
  6626                           
  6627                           ;main.c: 309: break;
  6628  003A98  D00A               	goto	l9865
  6629  003A9A                     l422:
  6630                           
  6631                           ; BSR set to: 0
  6632                           ;main.c: 310: }
  6633                           ;main.c: 311: }
  6634                           ;main.c: 312: (INTCONbits.GIE = 1);
  6635  003A9A  8EF2               	bsf	intcon,7,c	;volatile
  6636  003A9C                     l9863:
  6637                           
  6638                           ; BSR set to: 0
  6639  003A9C  0EB8               	movlw	184
  6640  003A9E  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
  6641  003AA0  0E0B               	movlw	11
  6642  003AA2  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6643  003AA4  0E00               	movlw	0
  6644  003AA6  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6645  003AA8  0E00               	movlw	0
  6646  003AAA  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6647  003AAC  E3DA               	bnc	l421
  6648  003AAE                     l9865:
  6649                           
  6650                           ;main.c: 313: }
  6651                           ;main.c: 314: }
  6652                           ;main.c: 316: ledFunctionality = 1;
  6653  003AAE  0E01               	movlw	1
  6654  003AB0  6E1A               	movwf	_ledFunctionality,c
  6655  003AB2                     l425:
  6656  003AB2  0004               	clrwdt		;# 
  6657                           
  6658                           ;main.c: 324: if (COMSTATbits.TXBO) {
  6659  003AB4  AA74               	btfss	3956,5,c	;volatile
  6660  003AB6  D002               	goto	l426
  6661                           
  6662                           ;main.c: 326: ledFunctionality = 6;
  6663  003AB8  0E06               	movlw	6
  6664  003ABA  D009               	goto	L1
  6665  003ABC                     l426:
  6666                           
  6667                           ;main.c: 328: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6668  003ABC  B874               	btfsc	3956,4,c	;volatile
  6669  003ABE  D002               	goto	l9873
  6670  003AC0  A674               	btfss	3956,3,c	;volatile
  6671  003AC2  D002               	goto	l428
  6672  003AC4                     l9873:
  6673                           
  6674                           ;main.c: 330: ledFunctionality = 5;
  6675  003AC4  0E05               	movlw	5
  6676  003AC6  D003               	goto	L1
  6677  003AC8                     l428:
  6678                           
  6679                           ;main.c: 334: ledFunctionality = 4;
  6680  003AC8  0E04               	movlw	4
  6681                           
  6682                           ;main.c: 332: else if (COMSTATbits.EWARN) {
  6683  003ACA  A074               	btfss	3956,0,c	;volatile
  6684                           
  6685                           ;main.c: 336: else {
  6686                           ;main.c: 338: ledFunctionality = 1;
  6687                           
  6688                           ;main.c: 335: }
  6689  003ACC  0E01               	movlw	1
  6690  003ACE                     L1:
  6691  003ACE  6E1A               	movwf	_ledFunctionality,c
  6692                           
  6693                           ;main.c: 339: }
  6694                           ;main.c: 342: if (COMSTATbits.RXBnOVFL) {
  6695  003AD0  AC74               	btfss	3956,6,c	;volatile
  6696  003AD2  D007               	goto	l9885
  6697                           
  6698                           ;main.c: 343: can_receiveOverruns++;
  6699  003AD4  0100               	movlb	0	; () banked
  6700  003AD6  2BD1               	incf	_can_receiveOverruns& (0+255),f,b
  6701  003AD8  0E00               	movlw	0
  6702  003ADA  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6703  003ADC  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6704  003ADE  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6705                           
  6706                           ; BSR set to: 0
  6707                           ;main.c: 344: COMSTATbits.RXBnOVFL = 0;
  6708  003AE0  9C74               	bcf	3956,6,c	;volatile
  6709  003AE2                     l9885:
  6710                           
  6711                           ;main.c: 345: }
  6712                           ;main.c: 347: if (0 == mode) {
  6713  003AE2  0100               	movlb	0	; () banked
  6714  003AE4  67F1               	tstfsz	_mode& (0+255),b
  6715  003AE6  D003               	goto	l9889
  6716  003AE8                     l9887:
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;main.c: 348: doModeVerbose();
  6720  003AE8  EC68  F02C         	call	_doModeVerbose	;wreg free
  6721                           
  6722                           ;main.c: 349: }
  6723  003AEC  D7E2               	goto	l425
  6724  003AEE                     l9889:
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;main.c: 350: else if (1 == mode) {
  6728  003AEE  05F1               	decf	_mode& (0+255),w,b
  6729  003AF0  E103               	bnz	l9893
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;main.c: 351: doModeVscp();
  6733  003AF2  EC95  F020         	call	_doModeVscp	;wreg free
  6734                           
  6735                           ;main.c: 352: }
  6736  003AF6  D7DD               	goto	l425
  6737  003AF8                     l9893:
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;main.c: 353: else if (2 == mode) {
  6741  003AF8  51F1               	movf	_mode& (0+255),w,b
  6742  003AFA  0A02               	xorlw	2
  6743  003AFC  E103               	bnz	l9897
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;main.c: 354: doModeSLCAN();
  6747  003AFE  EC11  F027         	call	_doModeSLCAN	;wreg free
  6748                           
  6749                           ;main.c: 355: }
  6750  003B02  D7D7               	goto	l425
  6751  003B04                     l9897:
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;main.c: 356: else if (3 == mode) {
  6755  003B04  51F1               	movf	_mode& (0+255),w,b
  6756  003B06  0A03               	xorlw	3
  6757  003B08  E1EF               	bnz	l9887
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;main.c: 357: doModeVscpNode();
  6761  003B0A  ECA1  F00B         	call	_doModeVscpNode	;wreg free
  6762                           
  6763                           ;main.c: 358: }
  6764  003B0E  D7D1               	goto	l425
  6765  003B10                     __end_of_main:
  6766                           	opt stack 0
  6767                           tblptru	equ	0xFF8
  6768                           tblptrh	equ	0xFF7
  6769                           tblptrl	equ	0xFF6
  6770                           tablat	equ	0xFF5
  6771                           prodh	equ	0xFF4
  6772                           prodl	equ	0xFF3
  6773                           intcon	equ	0xFF2
  6774                           indf0	equ	0xFEF
  6775                           postinc0	equ	0xFEE
  6776                           fsr0h	equ	0xFEA
  6777                           fsr0l	equ	0xFE9
  6778                           wreg	equ	0xFE8
  6779                           indf1	equ	0xFE7
  6780                           postinc1	equ	0xFE6
  6781                           postdec1	equ	0xFE5
  6782                           fsr1h	equ	0xFE2
  6783                           fsr1l	equ	0xFE1
  6784                           indf2	equ	0xFDF
  6785                           postinc2	equ	0xFDE
  6786                           postdec2	equ	0xFDD
  6787                           plusw2	equ	0xFDB
  6788                           fsr2h	equ	0xFDA
  6789                           fsr2l	equ	0xFD9
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function _doModeVscpNode *****************
  6793 ;; Defined at:
  6794 ;;		line 1506 in file "main.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;		None
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;		None
  6799 ;; Return value:  Size  Location     Type
  6800 ;;		None               void
  6801 ;; Registers used:
  6802 ;;		None
  6803 ;; Tracked objects:
  6804 ;;		On entry : F/0
  6805 ;;		On exit  : F/0
  6806 ;;		Unchanged: F/0
  6807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6808 ;;      Params:         0       0       0       0       0       0       0
  6809 ;;      Locals:         0       0       0       0       0       0       0
  6810 ;;      Temps:          0       0       0       0       0       0       0
  6811 ;;      Totals:         0       0       0       0       0       0       0
  6812 ;;Total ram usage:        0 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; Hardware stack levels required when called:    3
  6815 ;; This function calls:
  6816 ;;		Nothing
  6817 ;; This function is called by:
  6818 ;;		_main
  6819 ;; This function uses a non-reentrant model
  6820 ;;
  6821                           
  6822                           	psect	text1
  6823  001742                     __ptext1:
  6824                           	opt stack 0
  6825  001742                     _doModeVscpNode:
  6826                           	opt stack 26
  6827                           
  6828                           ; BSR set to: 0
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;incstack = 0
  6832                           ;incstack = 0
  6833  001742  0012               	return	
  6834  001744                     __end_of_doModeVscpNode:
  6835                           	opt stack 0
  6836                           tblptru	equ	0xFF8
  6837                           tblptrh	equ	0xFF7
  6838                           tblptrl	equ	0xFF6
  6839                           tablat	equ	0xFF5
  6840                           prodh	equ	0xFF4
  6841                           prodl	equ	0xFF3
  6842                           intcon	equ	0xFF2
  6843                           indf0	equ	0xFEF
  6844                           postinc0	equ	0xFEE
  6845                           fsr0h	equ	0xFEA
  6846                           fsr0l	equ	0xFE9
  6847                           wreg	equ	0xFE8
  6848                           indf1	equ	0xFE7
  6849                           postinc1	equ	0xFE6
  6850                           postdec1	equ	0xFE5
  6851                           fsr1h	equ	0xFE2
  6852                           fsr1l	equ	0xFE1
  6853                           indf2	equ	0xFDF
  6854                           postinc2	equ	0xFDE
  6855                           postdec2	equ	0xFDD
  6856                           plusw2	equ	0xFDB
  6857                           fsr2h	equ	0xFDA
  6858                           fsr2l	equ	0xFD9
  6859                           status	equ	0xFD8
  6860                           
  6861 ;; *************** function _doModeSLCAN *****************
  6862 ;; Defined at:
  6863 ;;		line 1304 in file "main.c"
  6864 ;; Parameters:    Size  Location     Type
  6865 ;;		None
  6866 ;; Auto vars:     Size  Location     Type
  6867 ;;  id              4   61[BANK0 ] unsigned long 
  6868 ;;  dlc             1   65[BANK0 ] unsigned char 
  6869 ;;  rv              1   67[BANK0 ] enum E15660
  6870 ;;  c               1   66[BANK0 ] unsigned char 
  6871 ;; Return value:  Size  Location     Type
  6872 ;;		None               void
  6873 ;; Registers used:
  6874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6875 ;; Tracked objects:
  6876 ;;		On entry : F/0
  6877 ;;		On exit  : E/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6880 ;;      Params:         0       0       0       0       0       0       0
  6881 ;;      Locals:         0       7       0       0       0       0       0
  6882 ;;      Temps:          0       7       0       0       0       0       0
  6883 ;;      Totals:         0      14       0       0       0       0       0
  6884 ;;Total ram usage:       14 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:    7
  6887 ;; This function calls:
  6888 ;;		_putsUSART
  6889 ;;		_fifo_read
  6890 ;;		_writeEEPROM
  6891 ;;		_ECANSetOperationMode
  6892 ;;		_memset
  6893 ;;		_receiveSendEventSLCAN
  6894 ;;		_strlen
  6895 ;;		_hexStringToBytes
  6896 ;;		_memcpy
  6897 ;;		_sendCANFrame
  6898 ;; This function is called by:
  6899 ;;		_main
  6900 ;; This function uses a non-reentrant model
  6901 ;;
  6902                           
  6903                           	psect	text2
  6904  004E22                     __ptext2:
  6905                           	opt stack 0
  6906  004E22                     _doModeSLCAN:
  6907                           	opt stack 22
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;main.c: 1305: uint8_t c;
  6911                           ;main.c: 1306: BOOL rv = 0;
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;incstack = 0
  6915                           ;incstack = 0
  6916  004E22  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;main.c: 1309: receiveSendEventSLCAN();
  6920  004E24  ECFD  F01E         	call	_receiveSendEventSLCAN	;wreg free
  6921                           
  6922                           ;main.c: 1312: (INTCONbits.GIE = 0);
  6923  004E28  9EF2               	bcf	intcon,7,c	;volatile
  6924                           
  6925                           ;main.c: 1314: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6926  004E2A  0100               	movlb	0	; () banked
  6927  004E2C  0E00               	movlw	high doModeSLCAN@c
  6928  004E2E  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6929  004E30  0EA2               	movlw	low doModeSLCAN@c
  6930  004E32  6F60               	movwf	?_fifo_read& (0+255),b
  6931  004E34  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6932  004E36  0E01               	movlw	1
  6933  004E38  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6934  004E3A  0E23               	movlw	_serialInputFifo& (0+255)
  6935  004E3C  EC8D  F015         	call	_fifo_read
  6936  004E40  0560               	decf	?_fifo_read& (0+255),w,b
  6937  004E42  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6938  004E44  E001 D19C          	bnz	l10957
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;main.c: 1317: (INTCONbits.GIE = 1);
  6942  004E48  8EF2               	bsf	intcon,7,c	;volatile
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;main.c: 1319: if (0x0d != c) {
  6946  004E4A  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6947  004E4C  0A0D               	xorlw	13
  6948  004E4E  E101 D14E          	bz	l10945
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;main.c: 1320: cmdbuf[ pos ] = c;
  6952  004E52  EC6A  F021         	call	PL20	;call to abstracted procedure
  6953  004E56  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;main.c: 1321: pos++;
  6957  004E5A  2B02               	incf	_pos& (0+255),f,b
  6958  004E5C  D192               	goto	l707
  6959  004E5E                     l10839:
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;main.c: 1329: if (1 == strlen(cmdbuf)) {
  6963  004E5E  0E01               	movlw	high _cmdbuf
  6964  004E60  0100               	movlb	0	; () banked
  6965  004E62  6F61               	movwf	(?_strlen+1)& (0+255),b
  6966  004E64  0E04               	movlw	low _cmdbuf
  6967  004E66  6F60               	movwf	?_strlen& (0+255),b
  6968  004E68  EC53  F00D         	call	_strlen	;wreg free
  6969  004E6C  0560               	decf	?_strlen& (0+255),w,b
  6970  004E6E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6971  004E70  E001 D168          	bnz	l10947
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;main.c: 1330: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6975  004E74  0E7A               	movlw	high STR_133
  6976  004E76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6977  004E78  0E5A               	movlw	low STR_133
  6978  004E7A  6F61               	movwf	?_putsUSART& (0+255),b
  6979  004E7C  EC6E  F00E         	call	_putsUSART	;wreg free
  6980  004E80                     l10843:
  6981                           
  6982                           ;main.c: 1331: rv = 1;
  6983  004E80  0E01               	movlw	1
  6984  004E82  0100               	movlb	0	; () banked
  6985  004E84  D0DE               	goto	L3
  6986  004E86                     l10845:
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;main.c: 1337: if (1 == strlen(cmdbuf)) {
  6990  004E86  0E01               	movlw	high _cmdbuf
  6991  004E88  0100               	movlb	0	; () banked
  6992  004E8A  6F61               	movwf	(?_strlen+1)& (0+255),b
  6993  004E8C  0E04               	movlw	low _cmdbuf
  6994  004E8E  6F60               	movwf	?_strlen& (0+255),b
  6995  004E90  EC53  F00D         	call	_strlen	;wreg free
  6996  004E94  0560               	decf	?_strlen& (0+255),w,b
  6997  004E96  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6998  004E98  E001 D154          	bnz	l10947
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;main.c: 1338: putsUSART((char *) "V1011\r\n");
  7002  004E9C  0E7B               	movlw	high STR_134
  7003  004E9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7004  004EA0  0ED5               	movlw	low STR_134
  7005  004EA2  6F61               	movwf	?_putsUSART& (0+255),b
  7006  004EA4  EC6E  F00E         	call	_putsUSART	;wreg free
  7007  004EA8  D7EB               	goto	l10843
  7008  004EAA                     l10851:
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;main.c: 1345: if (1 == strlen(cmdbuf)) {
  7012  004EAA  0E01               	movlw	high _cmdbuf
  7013  004EAC  0100               	movlb	0	; () banked
  7014  004EAE  6F61               	movwf	(?_strlen+1)& (0+255),b
  7015  004EB0  0E04               	movlw	low _cmdbuf
  7016  004EB2  6F60               	movwf	?_strlen& (0+255),b
  7017  004EB4  EC53  F00D         	call	_strlen	;wreg free
  7018  004EB8  0560               	decf	?_strlen& (0+255),w,b
  7019  004EBA  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7020  004EBC  E001 D142          	bnz	l10947
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;main.c: 1346: putsUSART((char *) "N1977\r\n");
  7024  004EC0  0E7B               	movlw	high STR_135
  7025  004EC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7026  004EC4  0EDD               	movlw	low STR_135
  7027  004EC6  6F61               	movwf	?_putsUSART& (0+255),b
  7028  004EC8  EC6E  F00E         	call	_putsUSART	;wreg free
  7029  004ECC  D7D9               	goto	l10843
  7030  004ECE                     l10857:
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;main.c: 1355: bInitiated = 1;
  7034  004ECE  0E01               	movlw	1
  7035  004ED0  6FEE               	movwf	_bInitiated& (0+255),b
  7036                           
  7037                           ;main.c: 1356: rv = 1;
  7038  004ED2  D0B7               	goto	L3
  7039  004ED4                     l717:
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;main.c: 1361: if (!bOpen) {
  7043  004ED4  67EF               	tstfsz	_bOpen& (0+255),b
  7044  004ED6  D003               	goto	l10861
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;main.c: 1362: bInitiated = 1;
  7048  004ED8  0E01               	movlw	1
  7049  004EDA  6FEE               	movwf	_bInitiated& (0+255),b
  7050                           
  7051                           ;main.c: 1363: rv = 1;
  7052  004EDC  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7053  004EDE                     l10861:
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;main.c: 1368: if (1 == strlen(cmdbuf)) {
  7057  004EDE  0E01               	movlw	high _cmdbuf
  7058  004EE0  0100               	movlb	0	; () banked
  7059  004EE2  6F61               	movwf	(?_strlen+1)& (0+255),b
  7060  004EE4  0E04               	movlw	low _cmdbuf
  7061  004EE6  6F60               	movwf	?_strlen& (0+255),b
  7062  004EE8  EC53  F00D         	call	_strlen	;wreg free
  7063  004EEC  0560               	decf	?_strlen& (0+255),w,b
  7064  004EEE  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7065  004EF0  E001 D128          	bnz	l10947
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;main.c: 1369: if (!bOpen && bInitiated) {
  7069  004EF4  67EF               	tstfsz	_bOpen& (0+255),b
  7070  004EF6  D126               	goto	l10947
  7071                           
  7072                           ; BSR set to: 0
  7073  004EF8  51EE               	movf	_bInitiated& (0+255),w,b
  7074  004EFA  E101 D123          	bz	l10947
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;main.c: 1370: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7078  004EFE  0E00               	movlw	0
  7079  004F00  ECD6  F00B         	call	_ECANSetOperationMode
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;main.c: 1371: bOpen = 1;
  7083  004F04  0E01               	movlw	1
  7084  004F06  6FEF               	movwf	_bOpen& (0+255),b
  7085  004F08  D7BB               	goto	l10843
  7086  004F0A                     l10873:
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;main.c: 1379: if (1 == strlen(cmdbuf)) {
  7090  004F0A  0E01               	movlw	high _cmdbuf
  7091  004F0C  0100               	movlb	0	; () banked
  7092  004F0E  6F61               	movwf	(?_strlen+1)& (0+255),b
  7093  004F10  0E04               	movlw	low _cmdbuf
  7094  004F12  6F60               	movwf	?_strlen& (0+255),b
  7095  004F14  EC53  F00D         	call	_strlen	;wreg free
  7096  004F18  0560               	decf	?_strlen& (0+255),w,b
  7097  004F1A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7098  004F1C  E001 D112          	bnz	l10947
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;main.c: 1380: if (bOpen) {
  7102  004F20  51EF               	movf	_bOpen& (0+255),w,b
  7103  004F22  E0AE               	bz	l10843
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;main.c: 1381: ECANSetOperationMode(0x20);
  7107  004F24  0E20               	movlw	32
  7108  004F26  ECD6  F00B         	call	_ECANSetOperationMode
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;main.c: 1382: bOpen = 0;
  7112  004F2A  6BEF               	clrf	_bOpen& (0+255),b
  7113  004F2C  D7A9               	goto	l10843
  7114  004F2E                     l10883:
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;main.c: 1395: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7118  004F2E  51EF               	movf	_bOpen& (0+255),w,b
  7119  004F30  E101 D108          	bz	l10947
  7120                           
  7121                           ; BSR set to: 0
  7122  004F34  0E01               	movlw	high _cmdbuf
  7123  004F36  0100               	movlb	0	; () banked
  7124  004F38  6F61               	movwf	(?_strlen+1)& (0+255),b
  7125  004F3A  0E04               	movlw	low _cmdbuf
  7126  004F3C  6F60               	movwf	?_strlen& (0+255),b
  7127  004F3E  EC53  F00D         	call	_strlen	;wreg free
  7128  004F42  0E0A               	movlw	10
  7129  004F44  5D60               	subwf	?_strlen& (0+255),w,b
  7130  004F46  0E00               	movlw	0
  7131  004F48  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7132  004F4A  E201 D0FB          	bnc	l10947
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;main.c: 1397: uint32_t id;
  7136                           ;main.c: 1398: uint8_t dlc;
  7137                           ;main.c: 1400: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7138  004F4E  0E01               	movlw	high _wrkbuf
  7139  004F50  0100               	movlb	0	; () banked
  7140  004F52  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7141  004F54  0E54               	movlw	low _wrkbuf
  7142  004F56  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7143  004F58  0E50               	movlw	80
  7144  004F5A  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7145  004F5C  0E01               	movlw	high _cmdbuf
  7146  004F5E  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7147  004F60  0E04               	movlw	low _cmdbuf
  7148  004F62  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7149  004F64  ECEB  F012         	call	_hexStringToBytes	;wreg free
  7150  004F68  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7151  004F6A  0E05               	movlw	5
  7152  004F6C  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7153  004F6E  E201 D0E9          	bnc	l10947
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;main.c: 1402: }
  7157                           ;main.c: 1404: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7158  004F72  C157  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7159  004F76  0E08               	movlw	8
  7160  004F78  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7161  004F7A  C156  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7162  004F7E  0E10               	movlw	16
  7163  004F80  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7164  004F82  C155  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7165  004F86  0E18               	movlw	24
  7166  004F88  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7167  004F8A  C154  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7168  004F8E  0100               	movlb	0	; () banked
  7169  004F90  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7170  004F92  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7171  004F94  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7172  004F96  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7173  004F98  D001               	goto	u13520
  7174  004F9A                     u13525:
  7175  004F9A  D8F4               	call	PL88	;call to abstracted procedure
  7176  004F9C                     u13520:
  7177  004F9C  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7178  004F9E  D7FD               	goto	u13525
  7179  004FA0  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7180  004FA2  D001               	goto	u13530
  7181  004FA4                     u13535:
  7182  004FA4  D8EF               	call	PL88	;call to abstracted procedure
  7183  004FA6                     u13530:
  7184  004FA6  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7185  004FA8  D7FD               	goto	u13535
  7186  004FAA  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7187  004FAC  D001               	goto	u13540
  7188  004FAE                     u13545:
  7189  004FAE  D8EA               	call	PL88	;call to abstracted procedure
  7190  004FB0                     u13540:
  7191  004FB0  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7192  004FB2  D7FD               	goto	u13545
  7193  004FB4  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7194  004FB8  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7195  004FBC  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7196  004FC0  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;main.c: 1405: dlc = vscpData[4];
  7200  004FC4  C1A8  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;main.c: 1408: if (dlc > 8) break;
  7204  004FC8  0E08               	movlw	8
  7205  004FCA  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7206  004FCC  D001               	goto	l10899
  7207  004FCE  D0BA               	goto	l10947
  7208  004FD0                     l10899:
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;main.c: 1409: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7212  004FD0  90D8               	bcf	status,0,c
  7213  004FD2  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7214  004FD4  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7215  004FD6  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7216  004FD8  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7217  004FDA  0E0A               	movlw	10
  7218  004FDC  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7219  004FDE  0E00               	movlw	0
  7220  004FE0  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7221  004FE2  0E01               	movlw	high _cmdbuf
  7222  004FE4  0100               	movlb	0	; () banked
  7223  004FE6  6F61               	movwf	(?_strlen+1)& (0+255),b
  7224  004FE8  0E04               	movlw	low _cmdbuf
  7225  004FEA  6F60               	movwf	?_strlen& (0+255),b
  7226  004FEC  EC53  F00D         	call	_strlen	;wreg free
  7227  004FF0  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7228  004FF2  5D60               	subwf	?_strlen& (0+255),w,b
  7229  004FF4  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7230  004FF6  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7231  004FF8  E201 D0A4          	bnc	l10947
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;main.c: 1411: memcpy(vscpData, vscpData + 5, dlc);
  7235  004FFC  0E01               	movlw	high _vscpData
  7236  004FFE  0100               	movlb	0	; () banked
  7237  005000  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7238  005002  0EA4               	movlw	low _vscpData
  7239  005004  6F60               	movwf	?_memcpy& (0+255),b
  7240  005006  0EA9               	movlw	low (_vscpData+5)
  7241  005008  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7242  00500A  0E01               	movlw	high (_vscpData+5)
  7243  00500C  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7244  00500E  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7245  005012  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7246  005016  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7247  00501A  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7248  00501C  EC73  F00D         	call	_memcpy	;wreg free
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;main.c: 1413: rv = sendCANFrame(id, dlc, vscpData);
  7252  005020  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7253  005024  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7254  005028  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7255  00502C  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7256  005030  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7257  005034  0E01               	movlw	high _vscpData
  7258  005036  0100               	movlb	0	; () banked
  7259  005038  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7260  00503A  0EA4               	movlw	low _vscpData
  7261  00503C  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7262  00503E  ECBA  F00C         	call	_sendCANFrame	;wreg free
  7263  005042                     L3:
  7264  005042  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7265  005044  D07F               	goto	l10947
  7266  005046                     l10907:
  7267                           
  7268                           ; BSR set to: 0
  7269                           ;main.c: 1428: if (bOpen && (strlen(cmdbuf) == 1)) {
  7270  005046  51EF               	movf	_bOpen& (0+255),w,b
  7271  005048  E07D               	bz	l10947
  7272                           
  7273                           ; BSR set to: 0
  7274  00504A  0E01               	movlw	high _cmdbuf
  7275  00504C  0100               	movlb	0	; () banked
  7276  00504E  6F61               	movwf	(?_strlen+1)& (0+255),b
  7277  005050  0E04               	movlw	low _cmdbuf
  7278  005052  6F60               	movwf	?_strlen& (0+255),b
  7279  005054  EC53  F00D         	call	_strlen	;wreg free
  7280  005058  0560               	decf	?_strlen& (0+255),w,b
  7281  00505A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7282  00505C  E173               	bnz	l10947
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;main.c: 1429: putsUSART((char *) "F00\r\n");
  7286  00505E  0E7C               	movlw	high STR_136
  7287  005060  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7288  005062  0E79               	movlw	low STR_136
  7289  005064  6F61               	movwf	?_putsUSART& (0+255),b
  7290  005066  EC6E  F00E         	call	_putsUSART	;wreg free
  7291  00506A  D06C               	goto	l10947
  7292  00506C                     l10917:
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;main.c: 1445: if (2 == strlen(cmdbuf)) {
  7296  00506C  0E01               	movlw	high _cmdbuf
  7297  00506E  0100               	movlb	0	; () banked
  7298  005070  6F61               	movwf	(?_strlen+1)& (0+255),b
  7299  005072  0E04               	movlw	low _cmdbuf
  7300  005074  6F60               	movwf	?_strlen& (0+255),b
  7301  005076  EC53  F00D         	call	_strlen	;wreg free
  7302  00507A  5160               	movf	?_strlen& (0+255),w,b
  7303  00507C  0A02               	xorlw	2
  7304  00507E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7305  005080  E161               	bnz	l10947
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;main.c: 1446: if (!bOpen) {
  7309  005082  67EF               	tstfsz	_bOpen& (0+255),b
  7310  005084  D05F               	goto	l10947
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;main.c: 1447: if ('0' == cmdbuf[1]) {
  7314  005086  0101               	movlb	1	; () banked
  7315  005088  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7316  00508A  0A30               	xorlw	48
  7317  00508C  E10A               	bnz	l10929
  7318                           
  7319                           ; BSR set to: 1
  7320                           ;main.c: 1448: nTimeStamp = 0;
  7321  00508E  0100               	movlb	0	; () banked
  7322  005090  6BF2               	clrf	_nTimeStamp& (0+255),b
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;main.c: 1450: writeEEPROM(0x05, 0);
  7326  005092  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7327  005094  0E05               	movlw	5
  7328  005096  6F60               	movwf	?_writeEEPROM& (0+255),b
  7329  005098  0E00               	movlw	0
  7330  00509A  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
  7331  00509C  EC11  F00C         	call	_writeEEPROM	;wreg free
  7332  0050A0  D6EF               	goto	l10843
  7333  0050A2                     l10929:
  7334                           
  7335                           ; BSR set to: 1
  7336  0050A2  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7337  0050A4  0A31               	xorlw	49
  7338  0050A6  E10B               	bnz	l742
  7339                           
  7340                           ; BSR set to: 1
  7341                           ;main.c: 1453: nTimeStamp = 1;
  7342  0050A8  0E01               	movlw	1
  7343  0050AA  0100               	movlb	0	; () banked
  7344  0050AC  6FF2               	movwf	_nTimeStamp& (0+255),b
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;main.c: 1455: writeEEPROM(0x05,
  7348                           ;main.c: 1456: 1);
  7349  0050AE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7350  0050B0  0E05               	movlw	5
  7351  0050B2  6F60               	movwf	?_writeEEPROM& (0+255),b
  7352  0050B4  0E01               	movlw	1
  7353  0050B6  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
  7354  0050B8  EC11  F00C         	call	_writeEEPROM	;wreg free
  7355  0050BC  D6E1               	goto	l10843
  7356  0050BE                     l742:
  7357                           
  7358                           ; BSR set to: 1
  7359                           ;main.c: 1459: rv = 0;
  7360  0050BE  0100               	movlb	0	; () banked
  7361  0050C0  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7362  0050C2  D040               	goto	l10947
  7363  0050C4                     l10937:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;main.c: 1467: writeEEPROM(0x01, 0xFF);
  7367  0050C4  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7368  0050C6  0E01               	movlw	1
  7369  0050C8  6F60               	movwf	?_writeEEPROM& (0+255),b
  7370  0050CA  0EFF               	movlw	255
  7371  0050CC  6962               	setf	(?_writeEEPROM+2)& (0+255),b
  7372  0050CE  EC11  F00C         	call	_writeEEPROM	;wreg free
  7373  0050D2  00FF               	reset		;# 
  7374                           
  7375                           ;main.c: 1469: break;
  7376  0050D4  D037               	goto	l10947
  7377  0050D6                     l10939:
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;main.c: 1472: {
  7381                           ;main.c: 1474: if (0 == strlen(cmdbuf)) {
  7382  0050D6  0E01               	movlw	high _cmdbuf
  7383  0050D8  0100               	movlb	0	; () banked
  7384  0050DA  6F61               	movwf	(?_strlen+1)& (0+255),b
  7385  0050DC  0E04               	movlw	low _cmdbuf
  7386  0050DE  6F60               	movwf	?_strlen& (0+255),b
  7387  0050E0  EC53  F00D         	call	_strlen	;wreg free
  7388  0050E4  5161               	movf	(?_strlen+1)& (0+255),w,b
  7389  0050E6  1160               	iorwf	?_strlen& (0+255),w,b
  7390  0050E8  E101 D6CA          	bz	l10843
  7391  0050EC  D02B               	goto	l10947
  7392  0050EE                     l10945:
  7393                           
  7394                           ; BSR set to: 0
  7395  0050EE  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7396                           
  7397                           ; Switch size 1, requested type "space"
  7398                           ; Number of cases is 16, Range of values is 66 to 116
  7399                           ; switch strategies available:
  7400                           ; Name         Instructions Cycles
  7401                           ; simple_byte           49    25 (average)
  7402                           ;	Chosen strategy is simple_byte
  7403  0050F0  0A42               	xorlw	66	; case 66
  7404  0050F2  E0E8               	bz	l10937
  7405  0050F4  0A01               	xorlw	1	; case 67
  7406  0050F6  E101 D708          	bz	l10873
  7407  0050FA  0A05               	xorlw	5	; case 70
  7408  0050FC  E0A4               	bz	l10907
  7409  0050FE  0A0C               	xorlw	12	; case 74
  7410  005100  E101 D6AD          	bz	l10839
  7411  005104  0A07               	xorlw	7	; case 77
  7412  005106  E101 D6BB          	bz	l10843
  7413  00510A  0A03               	xorlw	3	; case 78
  7414  00510C  E101 D6CD          	bz	l10851
  7415  005110  0A01               	xorlw	1	; case 79
  7416  005112  E101 D6E4          	bz	l10861
  7417  005116  0A1D               	xorlw	29	; case 82
  7418  005118  E015               	bz	l10947
  7419  00511A  0A01               	xorlw	1	; case 83
  7420  00511C  E101 D6D7          	bz	l10857
  7421  005120  0A07               	xorlw	7	; case 84
  7422  005122  E101 D704          	bz	l10883
  7423  005126  0A02               	xorlw	2	; case 86
  7424  005128  E101 D6AD          	bz	l10845
  7425  00512C  0A0C               	xorlw	12	; case 90
  7426  00512E  E09E               	bz	l10917
  7427  005130  0A37               	xorlw	55	; case 109
  7428  005132  E101 D6A5          	bz	l10843
  7429  005136  0A1F               	xorlw	31	; case 114
  7430  005138  E005               	bz	l10947
  7431  00513A  0A01               	xorlw	1	; case 115
  7432  00513C  E101 D6CA          	bz	l717
  7433  005140  0A07               	xorlw	7	; case 116
  7434  005142  E1C9               	bnz	l10939
  7435  005144                     l10947:
  7436                           
  7437                           ;main.c: 1482: if (rv) {
  7438  005144  0100               	movlb	0	; () banked
  7439  005146  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7440  005148  E007               	bz	l10951
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;main.c: 1484: putsUSART((char *) "\r");
  7444  00514A  0E7C               	movlw	high STR_137
  7445  00514C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7446  00514E  0EF2               	movlw	low STR_137
  7447  005150  6F61               	movwf	?_putsUSART& (0+255),b
  7448  005152  EC6E  F00E         	call	_putsUSART	;wreg free
  7449                           
  7450                           ;main.c: 1485: }
  7451  005156  D006               	goto	l10953
  7452  005158                     l10951:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;main.c: 1486: else {
  7456                           ;main.c: 1488: putsUSART((char *) "\a");
  7457  005158  0E7C               	movlw	high STR_138
  7458  00515A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7459  00515C  0EF0               	movlw	low STR_138
  7460  00515E  6F61               	movwf	?_putsUSART& (0+255),b
  7461  005160  EC6E  F00E         	call	_putsUSART	;wreg free
  7462  005164                     l10953:
  7463                           
  7464                           ;main.c: 1489: }
  7465                           ;main.c: 1492: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7466  005164  0E01               	movlw	high _cmdbuf
  7467  005166  0100               	movlb	0	; () banked
  7468  005168  6F61               	movwf	(?_memset+1)& (0+255),b
  7469  00516A  0E04               	movlw	low _cmdbuf
  7470  00516C  6F60               	movwf	?_memset& (0+255),b
  7471  00516E  6B63               	clrf	(?_memset+3)& (0+255),b
  7472  005170  6B62               	clrf	(?_memset+2)& (0+255),b
  7473  005172  6B65               	clrf	(?_memset+5)& (0+255),b
  7474  005174  0E50               	movlw	80
  7475  005176  6F64               	movwf	(?_memset+4)& (0+255),b
  7476  005178  EC24  F00C         	call	_memset	;wreg free
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;main.c: 1493: pos = 0;
  7480  00517C  0101               	movlb	1	; () banked
  7481  00517E  6B02               	clrf	_pos& (0+255),b
  7482  005180                     l10957:
  7483                           
  7484                           ;main.c: 1495: }
  7485                           ;main.c: 1498: (INTCONbits.GIE = 1);
  7486  005180  8EF2               	bsf	intcon,7,c	;volatile
  7487  005182                     l707:
  7488  005182  0012               	return	
  7489  005184                     __end_of_doModeSLCAN:
  7490                           	opt stack 0
  7491  005184                     PL88:
  7492                           	opt stack 22
  7493  005184  90D8               	bcf	status,0,c
  7494  005186  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7495  005188  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7496  00518A  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7497  00518C  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7498  00518E  0012               	return	
  7499  005190                     __end_ofPL88:
  7500                           	opt stack 0
  7501                           tblptru	equ	0xFF8
  7502                           tblptrh	equ	0xFF7
  7503                           tblptrl	equ	0xFF6
  7504                           tablat	equ	0xFF5
  7505                           prodh	equ	0xFF4
  7506                           prodl	equ	0xFF3
  7507                           intcon	equ	0xFF2
  7508                           indf0	equ	0xFEF
  7509                           postinc0	equ	0xFEE
  7510                           fsr0h	equ	0xFEA
  7511                           fsr0l	equ	0xFE9
  7512                           wreg	equ	0xFE8
  7513                           indf1	equ	0xFE7
  7514                           postinc1	equ	0xFE6
  7515                           postdec1	equ	0xFE5
  7516                           fsr1h	equ	0xFE2
  7517                           fsr1l	equ	0xFE1
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           postdec2	equ	0xFDD
  7521                           plusw2	equ	0xFDB
  7522                           fsr2h	equ	0xFDA
  7523                           fsr2l	equ	0xFD9
  7524                           status	equ	0xFD8
  7525                           
  7526 ;; *************** function _hexStringToBytes *****************
  7527 ;; Defined at:
  7528 ;;		line 35 in file "hexutils.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7531 ;;		 -> wrkbuf(80), 
  7532 ;;  size            1    6[BANK0 ] unsigned char 
  7533 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7534 ;;		 -> cmdbuf(80), 
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;  i               2   16[BANK0 ] int 
  7537 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7538 ;;		 -> cmdbuf(80), 
  7539 ;;  len             2   12[BANK0 ] int 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      unsigned char 
  7542 ;; Registers used:
  7543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7544 ;; Tracked objects:
  7545 ;;		On entry : F/0
  7546 ;;		On exit  : F/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7549 ;;      Params:         0       5       0       0       0       0       0
  7550 ;;      Locals:         0       6       0       0       0       0       0
  7551 ;;      Temps:          0       3       0       0       0       0       0
  7552 ;;      Totals:         0      14       0       0       0       0       0
  7553 ;;Total ram usage:       14 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    4
  7556 ;; This function calls:
  7557 ;;		_strlen
  7558 ;;		_nibbleFromChar
  7559 ;; This function is called by:
  7560 ;;		_doModeSLCAN
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text3
  7565  0025D6                     __ptext3:
  7566                           	opt stack 0
  7567  0025D6                     _hexStringToBytes:
  7568                           	opt stack 24
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;hexutils.c: 36: uint8_t *p;
  7572                           ;hexutils.c: 37: int len, i;
  7573                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7574                           
  7575                           ;incstack = 0
  7576                           ;incstack = 0
  7577  0025D6  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7578  0025DA  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7579  0025DE  EC53  F00D         	call	_strlen	;wreg free
  7580  0025E2  90D8               	bcf	status,0,c
  7581  0025E4  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7582  0025E6  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7583  0025E8  3160               	rrcf	?_strlen& (0+255),w,b
  7584  0025EA  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;hexutils.c: 40: if (len > size) return 0;
  7588  0025EC  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7589  0025EE  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7590  0025F0  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7591  0025F2  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7592  0025F4  0A80               	xorlw	128
  7593  0025F6  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7594  0025F8  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7595  0025FA  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7596  0025FC  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7597  0025FE  0A80               	xorlw	128
  7598  002600  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7599  002602  E202               	bc	l1590
  7600                           
  7601                           ; BSR set to: 0
  7602  002604  0E00               	movlw	0
  7603  002606  D033               	goto	l1591
  7604  002608                     l1590:
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7608  002608  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7609  00260A  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7610  00260C  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7611  002610  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7612  002614  D022               	goto	l12529
  7613  002616                     l12523:
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7617  002616  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7618  002618  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7619  00261A  6ED9               	movwf	fsr2l,c
  7620  00261C  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7621  00261E  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7622  002620  6EDA               	movwf	fsr2h,c
  7623  002622  EE10 F001          	lfsr	1,1
  7624  002626  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7625  002628  26E1               	addwf	fsr1l,f,c
  7626  00262A  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7627  00262C  22E2               	addwfc	fsr1h,f,c
  7628  00262E  50E7               	movf	indf1,w,c
  7629  002630  EC14  F00D         	call	_nibbleFromChar
  7630  002634  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7631  002636  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7632  00263A  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7633  00263E  50E7               	movf	indf1,w,c
  7634  002640  EC14  F00D         	call	_nibbleFromChar
  7635  002644  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7636  002646  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7637  002648  0BF0               	andlw	240
  7638  00264A  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7639  00264C  6EDF               	movwf	indf2,c
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;hexutils.c: 43: p += 2;
  7643  00264E  0E02               	movlw	2
  7644  002650  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7645  002652  0E00               	movlw	0
  7646  002654  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7647                           
  7648                           ; BSR set to: 0
  7649  002656  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7650  002658  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7651  00265A                     l12529:
  7652                           
  7653                           ; BSR set to: 0
  7654  00265A  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7655  00265C  0A80               	xorlw	128
  7656  00265E  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7657  002660  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7658  002662  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7659  002664  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7660  002666  0A80               	xorlw	128
  7661  002668  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7662  00266A  E3D5               	bnc	l12523
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;hexutils.c: 44: }
  7666                           ;hexutils.c: 46: return i;
  7667  00266C  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7668  00266E                     l1591:
  7669                           
  7670                           ; BSR set to: 0
  7671  00266E  0012               	return	
  7672  002670                     __end_of_hexStringToBytes:
  7673                           	opt stack 0
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           intcon	equ	0xFF2
  7681                           indf0	equ	0xFEF
  7682                           postinc0	equ	0xFEE
  7683                           fsr0h	equ	0xFEA
  7684                           fsr0l	equ	0xFE9
  7685                           wreg	equ	0xFE8
  7686                           indf1	equ	0xFE7
  7687                           postinc1	equ	0xFE6
  7688                           postdec1	equ	0xFE5
  7689                           fsr1h	equ	0xFE2
  7690                           fsr1l	equ	0xFE1
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           postdec2	equ	0xFDD
  7694                           plusw2	equ	0xFDB
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function _nibbleFromChar *****************
  7700 ;; Defined at:
  7701 ;;		line 20 in file "hexutils.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  c               1    wreg     unsigned char 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  c               1    0[BANK0 ] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      unsigned char 
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0
  7710 ;; Tracked objects:
  7711 ;;		On entry : F/0
  7712 ;;		On exit  : F/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7715 ;;      Params:         0       0       0       0       0       0       0
  7716 ;;      Locals:         0       1       0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0
  7718 ;;      Totals:         0       1       0       0       0       0       0
  7719 ;;Total ram usage:        1 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:    3
  7722 ;; This function calls:
  7723 ;;		Nothing
  7724 ;; This function is called by:
  7725 ;;		_hexStringToBytes
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           	psect	text4
  7730  001A28                     __ptext4:
  7731                           	opt stack 0
  7732  001A28                     _nibbleFromChar:
  7733                           	opt stack 24
  7734                           
  7735                           ; BSR set to: 0
  7736                           ;incstack = 0
  7737                           ;incstack = 0
  7738                           ;nibbleFromChar@c stored from wreg
  7739  001A28  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7743  001A2C  0E2F               	movlw	47
  7744  001A2E  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7745  001A30  D006               	goto	l12799
  7746                           
  7747                           ; BSR set to: 0
  7748  001A32  0E3A               	movlw	58
  7749  001A34  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7750  001A36  D003               	goto	l12799
  7751                           
  7752                           ; BSR set to: 0
  7753  001A38  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7754  001A3A  0FD0               	addlw	208
  7755  001A3C  D013               	goto	l1585
  7756  001A3E                     l12799:
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7760  001A3E  0E60               	movlw	96
  7761  001A40  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7762  001A42  D006               	goto	l12807
  7763                           
  7764                           ; BSR set to: 0
  7765  001A44  0E67               	movlw	103
  7766  001A46  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7767  001A48  D003               	goto	l12807
  7768                           
  7769                           ; BSR set to: 0
  7770  001A4A  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7771  001A4C  0FA9               	addlw	169
  7772  001A4E  D00A               	goto	l1585
  7773  001A50                     l12807:
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7777  001A50  0E40               	movlw	64
  7778  001A52  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7779  001A54  D006               	goto	l12815
  7780                           
  7781                           ; BSR set to: 0
  7782  001A56  0E47               	movlw	71
  7783  001A58  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7784  001A5A  D003               	goto	l12815
  7785                           
  7786                           ; BSR set to: 0
  7787  001A5C  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7788  001A5E  0FC9               	addlw	201
  7789  001A60  D001               	goto	l1585
  7790  001A62                     l12815:
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;hexutils.c: 24: return 255;
  7794  001A62  0EFF               	movlw	255
  7795  001A64                     l1585:
  7796                           
  7797                           ; BSR set to: 0
  7798  001A64  0012               	return	
  7799  001A66                     __end_of_nibbleFromChar:
  7800                           	opt stack 0
  7801                           tblptru	equ	0xFF8
  7802                           tblptrh	equ	0xFF7
  7803                           tblptrl	equ	0xFF6
  7804                           tablat	equ	0xFF5
  7805                           prodh	equ	0xFF4
  7806                           prodl	equ	0xFF3
  7807                           intcon	equ	0xFF2
  7808                           indf0	equ	0xFEF
  7809                           postinc0	equ	0xFEE
  7810                           fsr0h	equ	0xFEA
  7811                           fsr0l	equ	0xFE9
  7812                           wreg	equ	0xFE8
  7813                           indf1	equ	0xFE7
  7814                           postinc1	equ	0xFE6
  7815                           postdec1	equ	0xFE5
  7816                           fsr1h	equ	0xFE2
  7817                           fsr1l	equ	0xFE1
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           plusw2	equ	0xFDB
  7822                           fsr2h	equ	0xFDA
  7823                           fsr2l	equ	0xFD9
  7824                           status	equ	0xFD8
  7825                           
  7826 ;; *************** function _receiveSendEventSLCAN *****************
  7827 ;; Defined at:
  7828 ;;		line 2095 in file "main.c"
  7829 ;; Parameters:    Size  Location     Type
  7830 ;;		None
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;  id              4   38[BANK0 ] unsigned long 
  7833 ;;  i               2   43[BANK0 ] int 
  7834 ;;  dlc             1   42[BANK0 ] unsigned char 
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      enum E15660
  7837 ;; Registers used:
  7838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : F/0
  7841 ;;		On exit  : 0/0
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7844 ;;      Params:         0       0       0       0       0       0       0
  7845 ;;      Locals:         0       7       0       0       0       0       0
  7846 ;;      Temps:          0       3       0       0       0       0       0
  7847 ;;      Totals:         0      10       0       0       0       0       0
  7848 ;;Total ram usage:       10 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    6
  7851 ;; This function calls:
  7852 ;;		_putsUSART
  7853 ;;		_WriteUSART
  7854 ;;		_strlen
  7855 ;;		_getCANFrame
  7856 ;;		_ultoa
  7857 ;;		_itoa
  7858 ;; This function is called by:
  7859 ;;		_doModeSLCAN
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text5
  7864  003DFA                     __ptext5:
  7865                           	opt stack 0
  7866  003DFA                     _receiveSendEventSLCAN:
  7867                           	opt stack 22
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;main.c: 2096: int i;
  7871                           ;main.c: 2097: uint8_t dlc;
  7872                           ;main.c: 2098: uint32_t id;
  7873                           ;main.c: 2100: if (getCANFrame(&id, &dlc, vscpData)) {
  7874                           
  7875                           ; BSR set to: 0
  7876                           ;incstack = 0
  7877                           ;incstack = 0
  7878  003DFA  0E00               	movlw	high receiveSendEventSLCAN@dlc
  7879  003DFC  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  7880  003DFE  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7881  003E00  6F6D               	movwf	?_getCANFrame& (0+255),b
  7882  003E02  0E01               	movlw	high _vscpData
  7883  003E04  0100               	movlb	0	; () banked
  7884  003E06  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  7885  003E08  0EA4               	movlw	low _vscpData
  7886  003E0A  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  7887  003E0C  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7888  003E0E  ECD0  F010         	call	_getCANFrame
  7889  003E12  0900               	iorlw	0
  7890  003E14  E101 D0AD          	bz	l1049
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;main.c: 2103: cntRxFrames++;
  7894  003E18  2BD9               	incf	_cntRxFrames& (0+255),f,b
  7895  003E1A  0E00               	movlw	0
  7896  003E1C  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7897  003E1E  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7898  003E20  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7899                           
  7900                           ;main.c: 2104: cntRxBytes += dlc;
  7901  003E22  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7902  003E24  27D5               	addwf	_cntRxBytes& (0+255),f,b
  7903  003E26  0E00               	movlw	0
  7904  003E28  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7905  003E2A  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7906  003E2C  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7907  003E2E                     l1022:
  7908                           
  7909                           ; BSR set to: 0
  7910  003E2E  A2AC               	btfss	4012,1,c	;volatile
  7911  003E30  D7FE               	goto	l1022
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;main.c: 2107: WriteUSART('T');
  7915  003E32  0E54               	movlw	84
  7916  003E34  ECC1  F00B         	call	_WriteUSART
  7917                           
  7918                           ;main.c: 2109: ultoa(wrkbuf, id, 16);
  7919  003E38  0E01               	movlw	high _wrkbuf
  7920  003E3A  0100               	movlb	0	; () banked
  7921  003E3C  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7922  003E3E  0E54               	movlw	low _wrkbuf
  7923  003E40  6F76               	movwf	?_ultoa& (0+255),b
  7924  003E42  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7925  003E46  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7926  003E4A  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7927  003E4E  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7928  003E52  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7929  003E54  0E10               	movlw	16
  7930  003E56  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7931  003E58  EC9A  F017         	call	_ultoa	;wreg free
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;main.c: 2111: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7935  003E5C  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7936  003E5E  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7937  003E60                     l1027:
  7938                           
  7939                           ; BSR set to: 0
  7940  003E60  A2AC               	btfss	4012,1,c	;volatile
  7941  003E62  D7FE               	goto	l1027
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;main.c: 2113: WriteUSART('0');
  7945  003E64  0E30               	movlw	48
  7946  003E66  ECC1  F00B         	call	_WriteUSART
  7947                           
  7948                           ; BSR set to: 0
  7949  003E6A  D884               	call	PL96	;call to abstracted procedure
  7950  003E6C  B4D8               	btfsc	status,2,c
  7951  003E6E  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7952  003E70  E3F7               	bnc	l1027
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;main.c: 2114: }
  7956                           ;main.c: 2115: putsUSART(wrkbuf);
  7957  003E72  0E01               	movlw	high _wrkbuf
  7958  003E74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7959  003E76  0E54               	movlw	low _wrkbuf
  7960  003E78  6F61               	movwf	?_putsUSART& (0+255),b
  7961  003E7A  EC6E  F00E         	call	_putsUSART	;wreg free
  7962                           
  7963                           ;main.c: 2118: itoa(wrkbuf, dlc, 16);
  7964  003E7E  0E01               	movlw	high _wrkbuf
  7965  003E80  0100               	movlb	0	; () banked
  7966  003E82  6F71               	movwf	(?_itoa+1)& (0+255),b
  7967  003E84  0E54               	movlw	low _wrkbuf
  7968  003E86  6F70               	movwf	?_itoa& (0+255),b
  7969  003E88  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  7970  003E8C  6B73               	clrf	(?_itoa+3)& (0+255),b
  7971  003E8E  6B75               	clrf	(?_itoa+5)& (0+255),b
  7972  003E90  0E10               	movlw	16
  7973  003E92  6F74               	movwf	(?_itoa+4)& (0+255),b
  7974  003E94  EC9E  F00C         	call	_itoa	;wreg free
  7975  003E98                     l1030:
  7976                           
  7977                           ; BSR set to: 0
  7978  003E98  A2AC               	btfss	4012,1,c	;volatile
  7979  003E9A  D7FE               	goto	l1030
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;main.c: 2120: WriteUSART(wrkbuf[0]);
  7983  003E9C  0101               	movlb	1	; () banked
  7984  003E9E  5154               	movf	_wrkbuf& (0+255),w,b
  7985  003EA0  ECC1  F00B         	call	_WriteUSART
  7986                           
  7987                           ;main.c: 2123: for (i = 0; i < dlc; i++) {
  7988  003EA4  0100               	movlb	0	; () banked
  7989  003EA6  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7990  003EA8  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7991  003EAA  D02D               	goto	l12481
  7992  003EAC                     l12469:
  7993                           
  7994                           ; BSR set to: 0
  7995                           ;main.c: 2124: itoa(wrkbuf, vscpData[i], 16);
  7996  003EAC  0E01               	movlw	high _wrkbuf
  7997  003EAE  0100               	movlb	0	; () banked
  7998  003EB0  6F71               	movwf	(?_itoa+1)& (0+255),b
  7999  003EB2  0E54               	movlw	low _wrkbuf
  8000  003EB4  6F70               	movwf	?_itoa& (0+255),b
  8001  003EB6  0EA4               	movlw	low _vscpData
  8002  003EB8  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8003  003EBA  6ED9               	movwf	fsr2l,c
  8004  003EBC  0E01               	movlw	high _vscpData
  8005  003EBE  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8006  003EC0  6EDA               	movwf	fsr2h,c
  8007  003EC2  50DF               	movf	indf2,w,c
  8008  003EC4  6F72               	movwf	(?_itoa+2)& (0+255),b
  8009  003EC6  6B73               	clrf	(?_itoa+3)& (0+255),b
  8010  003EC8  6B75               	clrf	(?_itoa+5)& (0+255),b
  8011  003ECA  0E10               	movlw	16
  8012  003ECC  6F74               	movwf	(?_itoa+4)& (0+255),b
  8013  003ECE  EC9E  F00C         	call	_itoa	;wreg free
  8014                           
  8015                           ; BSR set to: 0
  8016                           ;main.c: 2126: if (2 != strlen(wrkbuf)) {
  8017  003ED2  0E01               	movlw	high _wrkbuf
  8018  003ED4  0100               	movlb	0	; () banked
  8019  003ED6  6F61               	movwf	(?_strlen+1)& (0+255),b
  8020  003ED8  0E54               	movlw	low _wrkbuf
  8021  003EDA  6F60               	movwf	?_strlen& (0+255),b
  8022  003EDC  EC53  F00D         	call	_strlen	;wreg free
  8023  003EE0  5160               	movf	?_strlen& (0+255),w,b
  8024  003EE2  0A02               	xorlw	2
  8025  003EE4  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8026  003EE6  E005               	bz	l12477
  8027  003EE8                     l1036:
  8028                           
  8029                           ; BSR set to: 0
  8030  003EE8  A2AC               	btfss	4012,1,c	;volatile
  8031  003EEA  D7FE               	goto	l1036
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;main.c: 2128: WriteUSART('0');
  8035  003EEC  0E30               	movlw	48
  8036  003EEE  ECC1  F00B         	call	_WriteUSART
  8037  003EF2                     l12477:
  8038                           
  8039                           ;main.c: 2129: }
  8040                           ;main.c: 2131: putsUSART(wrkbuf);
  8041  003EF2  0E01               	movlw	high _wrkbuf
  8042  003EF4  0100               	movlb	0	; () banked
  8043  003EF6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8044  003EF8  0E54               	movlw	low _wrkbuf
  8045  003EFA  6F61               	movwf	?_putsUSART& (0+255),b
  8046  003EFC  EC6E  F00E         	call	_putsUSART	;wreg free
  8047  003F00  0100               	movlb	0	; () banked
  8048  003F02  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8049  003F04  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8050  003F06                     l12481:
  8051                           
  8052                           ; BSR set to: 0
  8053  003F06  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8054  003F08  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8055  003F0A  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8056  003F0C  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8057  003F0E  0A80               	xorlw	128
  8058  003F10  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8059  003F12  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8060  003F14  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8061  003F16  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8062  003F18  0A80               	xorlw	128
  8063  003F1A  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8064  003F1C  E3C7               	bnc	l12469
  8065                           
  8066                           ; BSR set to: 0
  8067                           ;main.c: 2132: }
  8068                           ;main.c: 2135: if (nTimeStamp) {
  8069  003F1E  51F2               	movf	_nTimeStamp& (0+255),w,b
  8070  003F20  E023               	bz	l1046
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;main.c: 2136: ultoa(wrkbuf, timer, 16);
  8074  003F22  0E01               	movlw	high _wrkbuf
  8075  003F24  0100               	movlb	0	; () banked
  8076  003F26  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8077  003F28  0E54               	movlw	low _wrkbuf
  8078  003F2A  6F76               	movwf	?_ultoa& (0+255),b
  8079  003F2C  C0E9  F078         	movff	_timer,?_ultoa+2	;volatile
  8080  003F30  C0EA  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8081  003F34  C0EB  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8082  003F38  C0EC  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8083  003F3C  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8084  003F3E  0E10               	movlw	16
  8085  003F40  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8086  003F42  EC9A  F017         	call	_ultoa	;wreg free
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;main.c: 2138: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8090  003F46  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8091  003F48  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8092  003F4A                     l1043:
  8093                           
  8094                           ; BSR set to: 0
  8095  003F4A  A2AC               	btfss	4012,1,c	;volatile
  8096  003F4C  D7FE               	goto	l1043
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;main.c: 2140: WriteUSART('0');
  8100  003F4E  0E30               	movlw	48
  8101  003F50  ECC1  F00B         	call	_WriteUSART
  8102                           
  8103                           ; BSR set to: 0
  8104  003F54  D80F               	call	PL96	;call to abstracted procedure
  8105  003F56  B4D8               	btfsc	status,2,c
  8106  003F58  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8107  003F5A  E3F7               	bnc	l1043
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;main.c: 2141: }
  8111                           ;main.c: 2142: putsUSART(wrkbuf);
  8112  003F5C  0E01               	movlw	high _wrkbuf
  8113  003F5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8114  003F60  0E54               	movlw	low _wrkbuf
  8115  003F62  6F61               	movwf	?_putsUSART& (0+255),b
  8116  003F64  EC6E  F00E         	call	_putsUSART	;wreg free
  8117  003F68                     l1046:
  8118  003F68  A2AC               	btfss	4012,1,c	;volatile
  8119  003F6A  D7FE               	goto	l1046
  8120                           
  8121                           ;main.c: 2146: WriteUSART(0x0d);
  8122  003F6C  0E0D               	movlw	13
  8123  003F6E  ECC1  F00B         	call	_WriteUSART
  8124  003F72                     l1049:
  8125  003F72  0012               	return	
  8126  003F74                     __end_of_receiveSendEventSLCAN:
  8127                           	opt stack 0
  8128  003F74                     PL96:
  8129                           	opt stack 22
  8130  003F74  0100               	movlb	0	; () banked
  8131  003F76  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8132  003F78  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8133  003F7A  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8134  003F7C  0A80               	xorlw	128
  8135  003F7E  0F80               	addlw	-128
  8136  003F80  0CB8               	retlw	184
  8137  003F82                     __end_ofPL96:
  8138                           	opt stack 0
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           prodh	equ	0xFF4
  8144                           prodl	equ	0xFF3
  8145                           intcon	equ	0xFF2
  8146                           indf0	equ	0xFEF
  8147                           postinc0	equ	0xFEE
  8148                           fsr0h	equ	0xFEA
  8149                           fsr0l	equ	0xFE9
  8150                           wreg	equ	0xFE8
  8151                           indf1	equ	0xFE7
  8152                           postinc1	equ	0xFE6
  8153                           postdec1	equ	0xFE5
  8154                           fsr1h	equ	0xFE2
  8155                           fsr1l	equ	0xFE1
  8156                           indf2	equ	0xFDF
  8157                           postinc2	equ	0xFDE
  8158                           postdec2	equ	0xFDD
  8159                           plusw2	equ	0xFDB
  8160                           fsr2h	equ	0xFDA
  8161                           fsr2l	equ	0xFD9
  8162                           status	equ	0xFD8
  8163                           
  8164 ;; *************** function _ultoa *****************
  8165 ;; Defined at:
  8166 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8167 ;; Parameters:    Size  Location     Type
  8168 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8169 ;;		 -> wrkbuf(80), 
  8170 ;;  val             4   24[BANK0 ] unsigned long 
  8171 ;;  base            2   28[BANK0 ] int 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;  v               4   30[BANK0 ] unsigned long 
  8174 ;;  c               1   34[BANK0 ] unsigned char 
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  2   22[BANK0 ] PTR unsigned char 
  8177 ;; Registers used:
  8178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : F/0
  8181 ;;		On exit  : F/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8184 ;;      Params:         0       8       0       0       0       0       0
  8185 ;;      Locals:         0       5       0       0       0       0       0
  8186 ;;      Temps:          0       0       0       0       0       0       0
  8187 ;;      Totals:         0      13       0       0       0       0       0
  8188 ;;Total ram usage:       13 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    4
  8191 ;; This function calls:
  8192 ;;		___lldiv
  8193 ;;		___llmod
  8194 ;; This function is called by:
  8195 ;;		_receiveSendEventSLCAN
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           	psect	text6
  8200  002F34                     __ptext6:
  8201                           	opt stack 0
  8202  002F34                     _ultoa:
  8203                           	opt stack 23
  8204                           
  8205                           ; BSR set to: 0
  8206                           
  8207                           ;incstack = 0
  8208                           ;incstack = 0
  8209  002F34  C078  F07E         	movff	ultoa@val,ultoa@v
  8210  002F38  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8211  002F3C  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8212  002F40  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8213  002F44                     l12639:
  8214                           
  8215                           ; BSR set to: 0
  8216  002F44  C07E  F060         	movff	ultoa@v,?___lldiv
  8217  002F48  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8218  002F4C  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8219  002F50  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8220  002F54  D858               	call	PL74	;call to abstracted procedure
  8221  002F56  EC95  F010         	call	___lldiv	;wreg free
  8222  002F5A  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8223  002F5E  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8224  002F62  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8225  002F66  C060  F07E         	movff	?___lldiv,ultoa@v
  8226                           
  8227                           ; BSR set to: 0
  8228  002F6A  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8229  002F6C  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8230                           
  8231                           ; BSR set to: 0
  8232  002F6E  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8233  002F70  117E               	iorwf	ultoa@v& (0+255),w,b
  8234  002F72  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8235  002F74  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8236  002F76  E1E6               	bnz	l12639
  8237                           
  8238                           ; BSR set to: 0
  8239  002F78  C076  FFD9         	movff	ultoa@buf,fsr2l
  8240  002F7C  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8241  002F80  6ADF               	clrf	indf2,c
  8242                           
  8243                           ; BSR set to: 0
  8244  002F82  0776               	decf	ultoa@buf& (0+255),f,b
  8245  002F84  A0D8               	btfss	status,0,c
  8246  002F86  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8247  002F88                     l12649:
  8248                           
  8249                           ; BSR set to: 0
  8250  002F88  C078  F06D         	movff	ultoa@val,?___llmod
  8251  002F8C  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8252  002F90  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8253  002F94  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8254  002F98  C07C  F071         	movff	ultoa@base,?___llmod+4
  8255  002F9C  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8256  002FA0  0E00               	movlw	0
  8257  002FA2  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8258  002FA4  0EFF               	movlw	-1
  8259  002FA6  6F73               	movwf	(?___llmod+6)& (0+255),b
  8260  002FA8  6F74               	movwf	(?___llmod+7)& (0+255),b
  8261  002FAA  EC24  F00F         	call	___llmod	;wreg free
  8262  002FAE  516D               	movf	?___llmod& (0+255),w,b
  8263  002FB0  6F82               	movwf	ultoa@c& (0+255),b
  8264                           
  8265                           ; BSR set to: 0
  8266  002FB2  C078  F060         	movff	ultoa@val,?___lldiv
  8267  002FB6  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8268  002FBA  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8269  002FBE  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8270  002FC2  D821               	call	PL74	;call to abstracted procedure
  8271  002FC4  EC95  F010         	call	___lldiv	;wreg free
  8272  002FC8  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8273  002FCC  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8274  002FD0  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8275  002FD4  C060  F078         	movff	?___lldiv,ultoa@val
  8276                           
  8277                           ; BSR set to: 0
  8278  002FD8  0E09               	movlw	9
  8279  002FDA  6582               	cpfsgt	ultoa@c& (0+255),b
  8280  002FDC  D002               	goto	l2402
  8281                           
  8282                           ; BSR set to: 0
  8283  002FDE  0E07               	movlw	7
  8284  002FE0  2782               	addwf	ultoa@c& (0+255),f,b
  8285  002FE2                     l2402:
  8286                           
  8287                           ; BSR set to: 0
  8288  002FE2  0E30               	movlw	48
  8289  002FE4  2782               	addwf	ultoa@c& (0+255),f,b
  8290                           
  8291                           ; BSR set to: 0
  8292  002FE6  C076  FFD9         	movff	ultoa@buf,fsr2l
  8293  002FEA  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8294  002FEE  C082  FFDF         	movff	ultoa@c,indf2
  8295                           
  8296                           ; BSR set to: 0
  8297  002FF2  0776               	decf	ultoa@buf& (0+255),f,b
  8298  002FF4  A0D8               	btfss	status,0,c
  8299  002FF6  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8300                           
  8301                           ; BSR set to: 0
  8302  002FF8  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8303  002FFA  1178               	iorwf	ultoa@val& (0+255),w,b
  8304  002FFC  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8305  002FFE  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8306  003000  B4D8               	btfsc	status,2,c
  8307                           
  8308                           ; BSR set to: 0
  8309  003002  0012               	return	
  8310  003004  D7C1               	goto	l12649
  8311  003006                     __end_of_ultoa:
  8312                           	opt stack 0
  8313  003006                     PL74:
  8314                           	opt stack 23
  8315  003006  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8316  00300A  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8317  00300E  0E00               	movlw	0
  8318  003010  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8319  003012  0EFF               	movlw	-1
  8320  003014  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8321  003016  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8322  003018  0012               	return	
  8323  00301A                     __end_ofPL74:
  8324                           	opt stack 0
  8325                           tblptru	equ	0xFF8
  8326                           tblptrh	equ	0xFF7
  8327                           tblptrl	equ	0xFF6
  8328                           tablat	equ	0xFF5
  8329                           prodh	equ	0xFF4
  8330                           prodl	equ	0xFF3
  8331                           intcon	equ	0xFF2
  8332                           indf0	equ	0xFEF
  8333                           postinc0	equ	0xFEE
  8334                           fsr0h	equ	0xFEA
  8335                           fsr0l	equ	0xFE9
  8336                           wreg	equ	0xFE8
  8337                           indf1	equ	0xFE7
  8338                           postinc1	equ	0xFE6
  8339                           postdec1	equ	0xFE5
  8340                           fsr1h	equ	0xFE2
  8341                           fsr1l	equ	0xFE1
  8342                           indf2	equ	0xFDF
  8343                           postinc2	equ	0xFDE
  8344                           postdec2	equ	0xFDD
  8345                           plusw2	equ	0xFDB
  8346                           fsr2h	equ	0xFDA
  8347                           fsr2l	equ	0xFD9
  8348                           status	equ	0xFD8
  8349                           
  8350 ;; *************** function _doModeVscp *****************
  8351 ;; Defined at:
  8352 ;;		line 1094 in file "main.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;		None
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  c               1   87[BANK0 ] unsigned char 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;		None               void
  8359 ;; Registers used:
  8360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : F/0
  8363 ;;		On exit  : E/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8366 ;;      Params:         0       0       0       0       0       0       0
  8367 ;;      Locals:         0       1       0       0       0       0       0
  8368 ;;      Temps:          0       0       0       0       0       0       0
  8369 ;;      Totals:         0       1       0       0       0       0       0
  8370 ;;Total ram usage:        1 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    7
  8373 ;; This function calls:
  8374 ;;		_fifo_read
  8375 ;;		_ECANSetOperationMode
  8376 ;;		_receiveSendMultiEventCANAL
  8377 ;;		_receiveSendEventCANAL
  8378 ;;		_calcCRC
  8379 ;;		_sendVSCPDriverErrorFrame
  8380 ;;		_sendVSCPDriverAck
  8381 ;;		_receiveVSCPModeCanalMsg
  8382 ;;		_sendVSCPDriverNack
  8383 ;;		_receiveVSCPModeMultiCanalMsg
  8384 ;;		_sendVSCPModeCapabilities
  8385 ;;		_sendVSCPDriverCommandReply
  8386 ;; This function is called by:
  8387 ;;		_main
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           	psect	text7
  8392  00412A                     __ptext7:
  8393                           	opt stack 0
  8394  00412A                     _doModeVscp:
  8395                           	opt stack 22
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;main.c: 1095: uint8_t c;
  8399                           ;main.c: 1098: if ( caps.maxCanalFrames > 1 ) {
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;incstack = 0
  8403                           ;incstack = 0
  8404  00412A  EE20  F0F6         	lfsr	2,_caps+1
  8405  00412E  0E01               	movlw	1
  8406  004130  64DF               	cpfsgt	indf2,c
  8407  004132  D003               	goto	l10673
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;main.c: 1101: receiveSendMultiEventCANAL();
  8411  004134  EC3F  F01E         	call	_receiveSendMultiEventCANAL	;wreg free
  8412                           
  8413                           ;main.c: 1102: }
  8414  004138  D002               	goto	l10675
  8415  00413A                     l10673:
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;main.c: 1103: else {
  8419                           ;main.c: 1106: receiveSendEventCANAL();
  8420  00413A  EC34  F01C         	call	_receiveSendEventCANAL	;wreg free
  8421  00413E                     l10675:
  8422                           
  8423                           ;main.c: 1107: }
  8424                           ;main.c: 1110: (INTCONbits.GIE = 0);
  8425  00413E  9EF2               	bcf	intcon,7,c	;volatile
  8426                           
  8427                           ;main.c: 1112: if ( 1 == fifo_read(&serialInputFifo, &c, 1 ) ) {
  8428  004140  0100               	movlb	0	; () banked
  8429  004142  0E00               	movlw	high doModeVscp@c
  8430  004144  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8431  004146  0EB7               	movlw	low doModeVscp@c
  8432  004148  6F60               	movwf	?_fifo_read& (0+255),b
  8433  00414A  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  8434  00414C  0E01               	movlw	1
  8435  00414E  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8436  004150  0E23               	movlw	_serialInputFifo& (0+255)
  8437  004152  EC8D  F015         	call	_fifo_read
  8438  004156  0560               	decf	?_fifo_read& (0+255),w,b
  8439  004158  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8440  00415A  E001 D0B9          	bnz	l10819
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;main.c: 1115: (INTCONbits.GIE = 1);
  8444  00415E  8EF2               	bsf	intcon,7,c	;volatile
  8445                           
  8446                           ;main.c: 1117: if ( 0 == stateVscpDriver ) {
  8447  004160  67F4               	tstfsz	_stateVscpDriver& (0+255),b
  8448  004162  D00E               	goto	l10695
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;main.c: 1118: if ( bDLE ) {
  8452  004164  51ED               	movf	_bDLE& (0+255),w,b
  8453  004166  E009               	bz	l10691
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;main.c: 1119: bDLE = 0;
  8457  004168  6BED               	clrf	_bDLE& (0+255),b
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;main.c: 1122: if ( 0x02 == c ) {
  8461  00416A  51B7               	movf	doModeVscp@c& (0+255),w,b
  8462  00416C  0A02               	xorlw	2
  8463  00416E  E129               	bnz	l10729
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;main.c: 1123: stateVscpDriver = 1;
  8467  004170  0E01               	movlw	1
  8468  004172  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;main.c: 1124: pos = 0;
  8472  004174  0101               	movlb	1	; () banked
  8473  004176  6B02               	clrf	_pos& (0+255),b
  8474  004178  D024               	goto	l10729
  8475  00417A                     l10691:
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;main.c: 1127: else {
  8479                           ;main.c: 1128: bDLE = 1;
  8480  00417A  0E01               	movlw	1
  8481  00417C  6FED               	movwf	_bDLE& (0+255),b
  8482  00417E  D0A9               	goto	l657
  8483  004180                     l10695:
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;main.c: 1132: else if ( 1 == stateVscpDriver ) {
  8487  004180  05F4               	decf	_stateVscpDriver& (0+255),w,b
  8488  004182  E11F               	bnz	l10729
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;main.c: 1133: if (bDLE) {
  8492  004184  51ED               	movf	_bDLE& (0+255),w,b
  8493  004186  E00F               	bz	l10713
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;main.c: 1135: bDLE = 0;
  8497  004188  6BED               	clrf	_bDLE& (0+255),b
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;main.c: 1138: if (0x03 == c) {
  8501  00418A  51B7               	movf	doModeVscp@c& (0+255),w,b
  8502  00418C  0A03               	xorlw	3
  8503  00418E  E103               	bnz	l10705
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;main.c: 1139: stateVscpDriver = 2;
  8507  004190  0E02               	movlw	2
  8508  004192  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8509                           
  8510                           ;main.c: 1140: }
  8511  004194  D016               	goto	l10729
  8512  004196                     l10705:
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 1141: else if (0x10 == c) {
  8516  004196  51B7               	movf	doModeVscp@c& (0+255),w,b
  8517  004198  0A10               	xorlw	16
  8518  00419A  E113               	bnz	l10729
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;main.c: 1143: cmdbuf[ pos++ ] = c;
  8522  00419C  D89B               	call	PL20	;call to abstracted procedure
  8523  00419E  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8524                           
  8525                           ; BSR set to: 0
  8526  0041A2  2B02               	incf	_pos& (0+255),f,b
  8527  0041A4  D096               	goto	l657
  8528  0041A6                     l10713:
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;main.c: 1147: else {
  8532                           ;main.c: 1148: if (0x10 == c) {
  8533  0041A6  51B7               	movf	doModeVscp@c& (0+255),w,b
  8534  0041A8  0A10               	xorlw	16
  8535  0041AA  E0E7               	bz	l10691
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;main.c: 1152: else {
  8539                           ;main.c: 1154: cmdbuf[ pos++ ] = c;
  8540  0041AC  D893               	call	PL20	;call to abstracted procedure
  8541  0041AE  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8542                           
  8543                           ; BSR set to: 0
  8544  0041B2  2B02               	incf	_pos& (0+255),f,b
  8545                           
  8546                           ; BSR set to: 1
  8547                           ;main.c: 1156: if (pos >= 128u) {
  8548  0041B4  0E7F               	movlw	127
  8549  0041B6  6502               	cpfsgt	_pos& (0+255),b
  8550  0041B8  D08C               	goto	l657
  8551                           
  8552                           ; BSR set to: 1
  8553                           ;main.c: 1159: pos = 0;
  8554  0041BA  6B02               	clrf	_pos& (0+255),b
  8555                           
  8556                           ;main.c: 1160: stateVscpDriver = 0;
  8557  0041BC  0100               	movlb	0	; () banked
  8558  0041BE  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8559  0041C0  D088               	goto	l657
  8560  0041C2                     l10729:
  8561                           
  8562                           ;main.c: 1164: }
  8563                           ;main.c: 1165: }
  8564                           ;main.c: 1166: }
  8565                           ;main.c: 1171: if (2 == stateVscpDriver) {
  8566  0041C2  0100               	movlb	0	; () banked
  8567  0041C4  51F4               	movf	_stateVscpDriver& (0+255),w,b
  8568  0041C6  0A02               	xorlw	2
  8569  0041C8  E001 D082          	bnz	l10819
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;main.c: 1174: stateVscpDriver = 0;
  8573  0041CC  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;main.c: 1187: if (calcCRC(cmdbuf, pos)) {
  8577  0041CE  0E01               	movlw	high _cmdbuf
  8578  0041D0  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8579  0041D2  0E04               	movlw	low _cmdbuf
  8580  0041D4  6F6C               	movwf	?_calcCRC& (0+255),b
  8581  0041D6  C102  F06E         	movff	_pos,?_calcCRC+2
  8582  0041DA  EC3B  F00C         	call	_calcCRC	;wreg free
  8583  0041DE  0900               	iorlw	0
  8584  0041E0  E003               	bz	l10737
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;main.c: 1188: sendVSCPDriverErrorFrame(1);
  8588  0041E2  0E01               	movlw	1
  8589  0041E4  EC2E  F015         	call	_sendVSCPDriverErrorFrame
  8590  0041E8                     l10737:
  8591                           
  8592                           ;main.c: 1189: }
  8593                           ;main.c: 1192: if (0 ==
  8594                           ;main.c: 1193: cmdbuf[ 0 ]) {
  8595  0041E8  0101               	movlb	1	; () banked
  8596  0041EA  6704               	tstfsz	_cmdbuf& (0+255),b
  8597  0041EC  D003               	goto	l10741
  8598  0041EE                     l10739:
  8599                           
  8600                           ;main.c: 1194: sendVSCPDriverAck();
  8601  0041EE  ECD8  F013         	call	_sendVSCPDriverAck	;wreg free
  8602                           
  8603                           ;main.c: 1195: }
  8604  0041F2  D06A               	goto	l10815
  8605  0041F4                     l10741:
  8606                           
  8607                           ; BSR set to: 1
  8608                           ;main.c: 1197: else if (1 ==
  8609                           ;main.c: 1198: cmdbuf[ 0 ]) {
  8610  0041F4  0504               	decf	_cmdbuf& (0+255),w,b
  8611  0041F6  E068               	bz	l10815
  8612                           
  8613                           ; BSR set to: 1
  8614                           ;main.c: 1202: else if (2 ==
  8615                           ;main.c: 1203: cmdbuf[ 0 ]) {
  8616  0041F8  5104               	movf	_cmdbuf& (0+255),w,b
  8617  0041FA  0A02               	xorlw	2
  8618  0041FC  E107               	bnz	l10753
  8619                           
  8620                           ; BSR set to: 1
  8621                           ;main.c: 1204: if ( receiveVSCPModeCanalMsg() ) {
  8622  0041FE  EC2C  F017         	call	_receiveVSCPModeCanalMsg	;wreg free
  8623  004202  0900               	iorlw	0
  8624  004204  E1F4               	bnz	l10739
  8625  004206                     l10751:
  8626                           
  8627                           ;main.c: 1207: else {
  8628                           ;main.c: 1208: sendVSCPDriverNack();
  8629  004206  EC28  F014         	call	_sendVSCPDriverNack	;wreg free
  8630  00420A  D05E               	goto	l10815
  8631  00420C                     l10753:
  8632                           
  8633                           ; BSR set to: 1
  8634                           ;main.c: 1212: else if (6 ==
  8635                           ;main.c: 1213: cmdbuf[ 0 ]) {
  8636  00420C  5104               	movf	_cmdbuf& (0+255),w,b
  8637  00420E  0A06               	xorlw	6
  8638  004210  E103               	bnz	l10761
  8639                           
  8640                           ; BSR set to: 1
  8641                           ;main.c: 1214: if (receiveVSCPModeMultiCanalMsg()) {
  8642  004212  ECA0  F00B         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8643  004216  D7F5               	goto	L4
  8644  004218                     l10761:
  8645                           
  8646                           ; BSR set to: 1
  8647                           ;main.c: 1222: else if (6 ==
  8648                           ;main.c: 1223: cmdbuf[ 0 ]) {
  8649  004218  5104               	movf	_cmdbuf& (0+255),w,b
  8650  00421A  0A06               	xorlw	6
  8651  00421C  E0F4               	bz	l10751
  8652                           
  8653                           ; BSR set to: 1
  8654                           ;main.c: 1227: else if (3 ==
  8655                           ;main.c: 1228: cmdbuf[ 0 ]) {
  8656  00421E  5104               	movf	_cmdbuf& (0+255),w,b
  8657  004220  0A03               	xorlw	3
  8658  004222  E0F1               	bz	l10751
  8659                           
  8660                           ; BSR set to: 1
  8661                           ;main.c: 1232: else if (4 ==
  8662                           ;main.c: 1233: cmdbuf[ 0 ]) {
  8663  004224  5104               	movf	_cmdbuf& (0+255),w,b
  8664  004226  0A04               	xorlw	4
  8665  004228  E0EE               	bz	l10751
  8666                           
  8667                           ; BSR set to: 1
  8668                           ;main.c: 1237: else if (8 ==
  8669                           ;main.c: 1238: cmdbuf[ 0 ]) {
  8670  00422A  5104               	movf	_cmdbuf& (0+255),w,b
  8671  00422C  0A08               	xorlw	8
  8672  00422E  E107               	bnz	l10779
  8673                           
  8674                           ; BSR set to: 1
  8675                           ;main.c: 1239: caps.maxVscpFrames = cmdbuf[ 5 ];
  8676  004230  C109  F0F5         	movff	_cmdbuf+5,_caps
  8677                           
  8678                           ;main.c: 1240: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8679  004234  C10A  F0F6         	movff	_cmdbuf+6,_caps+1
  8680                           
  8681                           ; BSR set to: 1
  8682                           ;main.c: 1241: sendVSCPModeCapabilities();
  8683  004238  ECD3  F014         	call	_sendVSCPModeCapabilities	;wreg free
  8684                           
  8685                           ;main.c: 1242: }
  8686  00423C  D045               	goto	l10815
  8687  00423E                     l10779:
  8688                           
  8689                           ; BSR set to: 1
  8690                           ;main.c: 1244: else if (255 ==
  8691                           ;main.c: 1245: cmdbuf[ 0 ]) {
  8692  00423E  2904               	incf	_cmdbuf& (0+255),w,b
  8693  004240  E140               	bnz	l10813
  8694                           
  8695                           ; BSR set to: 1
  8696                           ;main.c: 1247: if (cmdbuf[ 5 ] ==
  8697                           ;main.c: 1248: 0) {
  8698  004242  6709               	tstfsz	(_cmdbuf+5)& (0+255),b
  8699  004244  D006               	goto	l10785
  8700                           
  8701                           ; BSR set to: 1
  8702                           ;main.c: 1249: sendVSCPDriverCommandReply(0, 0);
  8703  004246  0E00               	movlw	0
  8704  004248  0100               	movlb	0	; () banked
  8705  00424A  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8706  00424C  ECC3  F016         	call	_sendVSCPDriverCommandReply
  8707                           
  8708                           ;main.c: 1250: }
  8709  004250  D03B               	goto	l10815
  8710  004252                     l10785:
  8711                           
  8712                           ; BSR set to: 1
  8713                           ;main.c: 1252: else if (cmdbuf[ 5 ] ==
  8714                           ;main.c: 1253: 1) {
  8715  004252  0509               	decf	(_cmdbuf+5)& (0+255),w,b
  8716  004254  E109               	bnz	l10791
  8717                           
  8718                           ; BSR set to: 1
  8719                           ;main.c: 1254: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8720  004256  0E00               	movlw	0
  8721  004258  ECD6  F00B         	call	_ECANSetOperationMode
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;main.c: 1255: sendVSCPDriverCommandReply(0, 1);
  8725  00425C  0E01               	movlw	1
  8726  00425E  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8727  004260  0E00               	movlw	0
  8728  004262  ECC3  F016         	call	_sendVSCPDriverCommandReply
  8729                           
  8730                           ;main.c: 1256: }
  8731  004266  D030               	goto	l10815
  8732  004268                     l10791:
  8733                           
  8734                           ; BSR set to: 1
  8735                           ;main.c: 1258: else if (cmdbuf[ 5 ] ==
  8736                           ;main.c: 1259: 2) {
  8737  004268  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8738  00426A  0A02               	xorlw	2
  8739  00426C  E109               	bnz	l10797
  8740                           
  8741                           ; BSR set to: 1
  8742                           ;main.c: 1260: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8743  00426E  0E40               	movlw	64
  8744  004270  ECD6  F00B         	call	_ECANSetOperationMode
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1261: sendVSCPDriverCommandReply(0, 2);
  8748  004274  0E02               	movlw	2
  8749  004276  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8750  004278  0E00               	movlw	0
  8751  00427A  ECC3  F016         	call	_sendVSCPDriverCommandReply
  8752                           
  8753                           ;main.c: 1262: }
  8754  00427E  D024               	goto	l10815
  8755  004280                     l10797:
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;main.c: 1264: else if (cmdbuf[ 5 ] ==
  8759                           ;main.c: 1265: 3) {
  8760  004280  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8761  004282  0A03               	xorlw	3
  8762  004284  E109               	bnz	l10803
  8763                           
  8764                           ; BSR set to: 1
  8765                           ;main.c: 1266: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8766  004286  0E60               	movlw	96
  8767  004288  ECD6  F00B         	call	_ECANSetOperationMode
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;main.c: 1267: sendVSCPDriverCommandReply(0, 3);
  8771  00428C  0E03               	movlw	3
  8772  00428E  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8773  004290  0E00               	movlw	0
  8774  004292  ECC3  F016         	call	_sendVSCPDriverCommandReply
  8775                           
  8776                           ;main.c: 1268: }
  8777  004296  D018               	goto	l10815
  8778  004298                     l10803:
  8779                           
  8780                           ; BSR set to: 1
  8781                           ;main.c: 1270: else if (cmdbuf[ 5 ] ==
  8782                           ;main.c: 1271: 4) {
  8783  004298  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8784  00429A  0A04               	xorlw	4
  8785  00429C  E109               	bnz	l10809
  8786                           
  8787                           ; BSR set to: 1
  8788                           ;main.c: 1272: ECANSetOperationMode(0x20);
  8789  00429E  0E20               	movlw	32
  8790  0042A0  ECD6  F00B         	call	_ECANSetOperationMode
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;main.c: 1273: sendVSCPDriverCommandReply(0, 4);
  8794  0042A4  0E04               	movlw	4
  8795  0042A6  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8796  0042A8  0E00               	movlw	0
  8797  0042AA  ECC3  F016         	call	_sendVSCPDriverCommandReply
  8798                           
  8799                           ;main.c: 1274: }
  8800  0042AE  D00C               	goto	l10815
  8801  0042B0                     l10809:
  8802                           
  8803                           ; BSR set to: 1
  8804                           ;main.c: 1276: else if (cmdbuf[ 5 ] ==
  8805                           ;main.c: 1277: 5) {
  8806  0042B0  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8807  0042B2  0A05               	xorlw	5
  8808  0042B4  E109               	bnz	l10815
  8809                           
  8810                           ; BSR set to: 1
  8811                           ;main.c: 1278: sendVSCPDriverCommandReply(0, 0);
  8812  0042B6  0E00               	movlw	0
  8813  0042B8  0100               	movlb	0	; () banked
  8814  0042BA  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8815  0042BC  ECC3  F016         	call	_sendVSCPDriverCommandReply
  8816  0042C0  D003               	goto	l10815
  8817  0042C2                     l10813:
  8818                           
  8819                           ; BSR set to: 1
  8820                           ;main.c: 1282: else {
  8821                           ;main.c: 1284: sendVSCPDriverErrorFrame(2);
  8822  0042C2  0E02               	movlw	2
  8823  0042C4  EC2E  F015         	call	_sendVSCPDriverErrorFrame
  8824  0042C8                     l10815:
  8825                           
  8826                           ;main.c: 1285: }
  8827                           ;main.c: 1288: pos = 0;
  8828  0042C8  0101               	movlb	1	; () banked
  8829  0042CA  6B02               	clrf	_pos& (0+255),b
  8830                           
  8831                           ; BSR set to: 1
  8832                           ;main.c: 1289: stateVscpDriver = 0;
  8833  0042CC  0100               	movlb	0	; () banked
  8834  0042CE  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8835  0042D0                     l10819:
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;main.c: 1291: }
  8839                           ;main.c: 1293: }
  8840                           ;main.c: 1296: (INTCONbits.GIE = 1);
  8841  0042D0  8EF2               	bsf	intcon,7,c	;volatile
  8842  0042D2                     l657:
  8843  0042D2  0012               	return	
  8844  0042D4                     __end_of_doModeVscp:
  8845                           	opt stack 0
  8846  0042D4                     PL20:
  8847                           	opt stack 19
  8848  0042D4  0101               	movlb	1	; () banked
  8849  0042D6  0E04               	movlw	low _cmdbuf
  8850  0042D8  2502               	addwf	_pos& (0+255),w,b
  8851  0042DA  6ED9               	movwf	fsr2l,c
  8852  0042DC  6ADA               	clrf	fsr2h,c
  8853  0042DE  0E01               	movlw	high _cmdbuf
  8854  0042E0  22DA               	addwfc	fsr2h,f,c
  8855  0042E2  0012               	return	
  8856  0042E4                     __end_ofPL20:
  8857                           	opt stack 0
  8858                           tblptru	equ	0xFF8
  8859                           tblptrh	equ	0xFF7
  8860                           tblptrl	equ	0xFF6
  8861                           tablat	equ	0xFF5
  8862                           prodh	equ	0xFF4
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           indf0	equ	0xFEF
  8866                           postinc0	equ	0xFEE
  8867                           fsr0h	equ	0xFEA
  8868                           fsr0l	equ	0xFE9
  8869                           wreg	equ	0xFE8
  8870                           indf1	equ	0xFE7
  8871                           postinc1	equ	0xFE6
  8872                           postdec1	equ	0xFE5
  8873                           fsr1h	equ	0xFE2
  8874                           fsr1l	equ	0xFE1
  8875                           indf2	equ	0xFDF
  8876                           postinc2	equ	0xFDE
  8877                           postdec2	equ	0xFDD
  8878                           plusw2	equ	0xFDB
  8879                           fsr2h	equ	0xFDA
  8880                           fsr2l	equ	0xFD9
  8881                           status	equ	0xFD8
  8882                           
  8883 ;; *************** function _sendVSCPDriverCommandReply *****************
  8884 ;; Defined at:
  8885 ;;		line 1678 in file "main.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;  cmdReplyCode    1    wreg     unsigned char 
  8888 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  8891 ;;  crc             1   17[BANK0 ] unsigned char 
  8892 ;; Return value:  Size  Location     Type
  8893 ;;		None               void
  8894 ;; Registers used:
  8895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8896 ;; Tracked objects:
  8897 ;;		On entry : F/0
  8898 ;;		On exit  : 0/0
  8899 ;;		Unchanged: 0/0
  8900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8901 ;;      Params:         0       1       0       0       0       0       0
  8902 ;;      Locals:         0       2       0       0       0       0       0
  8903 ;;      Temps:          0       0       0       0       0       0       0
  8904 ;;      Totals:         0       3       0       0       0       0       0
  8905 ;;Total ram usage:        3 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    6
  8908 ;; This function calls:
  8909 ;;		_WriteUSART
  8910 ;;		_sendEscapedUartData
  8911 ;;		_crc8
  8912 ;; This function is called by:
  8913 ;;		_doModeVscp
  8914 ;; This function uses a non-reentrant model
  8915 ;;
  8916                           
  8917                           	psect	text8
  8918  002D86                     __ptext8:
  8919                           	opt stack 0
  8920  002D86                     _sendVSCPDriverCommandReply:
  8921                           	opt stack 22
  8922                           
  8923                           ;incstack = 0
  8924                           ;incstack = 0
  8925                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8926  002D86  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;main.c: 1679: uint8_t crc = 0;
  8930  002D8A  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8931  002D8C                     l851:
  8932                           
  8933                           ; BSR set to: 0
  8934  002D8C  A2AC               	btfss	4012,1,c	;volatile
  8935  002D8E  D7FE               	goto	l851
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;main.c: 1683: WriteUSART(0x10);
  8939  002D90  0E10               	movlw	16
  8940  002D92  ECC1  F00B         	call	_WriteUSART
  8941  002D96                     l854:
  8942  002D96  A2AC               	btfss	4012,1,c	;volatile
  8943  002D98  D7FE               	goto	l854
  8944                           
  8945                           ;main.c: 1685: WriteUSART(0x02);
  8946  002D9A  0E02               	movlw	2
  8947  002D9C  ECC1  F00B         	call	_WriteUSART
  8948  002DA0                     l857:
  8949  002DA0  A2AC               	btfss	4012,1,c	;volatile
  8950  002DA2  D7FE               	goto	l857
  8951                           
  8952                           ;main.c: 1689: WriteUSART(254);
  8953  002DA4  0EFE               	movlw	254
  8954  002DA6  ECC1  F00B         	call	_WriteUSART
  8955                           
  8956                           ;main.c: 1690: crc8(&crc, 254);
  8957  002DAA  0100               	movlb	0	; () banked
  8958  002DAC  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8959  002DAE  6F68               	movwf	(?_crc8+1)& (0+255),b
  8960  002DB0  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8961  002DB2  6F67               	movwf	?_crc8& (0+255),b
  8962  002DB4  0EFE               	movlw	254
  8963  002DB6  6F69               	movwf	(?_crc8+2)& (0+255),b
  8964  002DB8  EC83  F00C         	call	_crc8	;wreg free
  8965  002DBC                     l860:
  8966                           
  8967                           ; BSR set to: 0
  8968  002DBC  A2AC               	btfss	4012,1,c	;volatile
  8969  002DBE  D7FE               	goto	l860
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;main.c: 1694: WriteUSART(0);
  8973  002DC0  0E00               	movlw	0
  8974  002DC2  ECC1  F00B         	call	_WriteUSART
  8975                           
  8976                           ;main.c: 1695: crc8(&crc, 0);
  8977  002DC6  D841               	call	PL100	;call to abstracted procedure
  8978  002DC8  EC83  F00C         	call	_crc8	;wreg free
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;main.c: 1698: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8982  002DCC  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8983  002DCE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8984  002DD0  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8985  002DD2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8986  002DD4  0101               	movlb	1	; () banked
  8987  002DD6  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  8988  002DD8  ECF4  F00E         	call	_sendEscapedUartData
  8989  002DDC                     l863:
  8990                           
  8991                           ; BSR set to: 0
  8992  002DDC  A2AC               	btfss	4012,1,c	;volatile
  8993  002DDE  D7FE               	goto	l863
  8994                           
  8995                           ; BSR set to: 0
  8996                           ;main.c: 1702: WriteUSART(0);
  8997  002DE0  0E00               	movlw	0
  8998  002DE2  ECC1  F00B         	call	_WriteUSART
  8999                           
  9000                           ;main.c: 1703: crc8(&crc, 0);
  9001  002DE6  D831               	call	PL100	;call to abstracted procedure
  9002  002DE8  EC83  F00C         	call	_crc8	;wreg free
  9003  002DEC                     l866:
  9004                           
  9005                           ; BSR set to: 0
  9006  002DEC  A2AC               	btfss	4012,1,c	;volatile
  9007  002DEE  D7FE               	goto	l866
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;main.c: 1705: WriteUSART(2);
  9011  002DF0  0E02               	movlw	2
  9012  002DF2  ECC1  F00B         	call	_WriteUSART
  9013                           
  9014                           ;main.c: 1706: crc8(&crc, 2);
  9015  002DF6  0100               	movlb	0	; () banked
  9016  002DF8  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9017  002DFA  6F68               	movwf	(?_crc8+1)& (0+255),b
  9018  002DFC  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9019  002DFE  6F67               	movwf	?_crc8& (0+255),b
  9020  002E00  0E02               	movlw	2
  9021  002E02  6F69               	movwf	(?_crc8+2)& (0+255),b
  9022  002E04  EC83  F00C         	call	_crc8	;wreg free
  9023  002E08                     l869:
  9024                           
  9025                           ; BSR set to: 0
  9026  002E08  A2AC               	btfss	4012,1,c	;volatile
  9027  002E0A  D7FE               	goto	l869
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;main.c: 1710: sendEscapedUartData(cmdReplyCode, &crc);
  9031  002E0C  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9032  002E0E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9033  002E10  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9034  002E12  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9035  002E14  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9036  002E16  ECF4  F00E         	call	_sendEscapedUartData
  9037  002E1A                     l872:
  9038                           
  9039                           ; BSR set to: 0
  9040  002E1A  A2AC               	btfss	4012,1,c	;volatile
  9041  002E1C  D7FE               	goto	l872
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;main.c: 1714: sendEscapedUartData(cmdCode, &crc);
  9045  002E1E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9046  002E20  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9047  002E22  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9048  002E24  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9049  002E26  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9050  002E28  ECF4  F00E         	call	_sendEscapedUartData
  9051                           
  9052                           ;main.c: 1717: sendEscapedUartData(crc, (0));
  9053  002E2C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9054  002E2E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9055  002E30  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9056  002E32  ECF4  F00E         	call	_sendEscapedUartData
  9057  002E36                     l875:
  9058                           
  9059                           ; BSR set to: 0
  9060  002E36  A2AC               	btfss	4012,1,c	;volatile
  9061  002E38  D7FE               	goto	l875
  9062                           
  9063                           ; BSR set to: 0
  9064                           ;main.c: 1721: WriteUSART(0x10);
  9065  002E3A  0E10               	movlw	16
  9066  002E3C  ECC1  F00B         	call	_WriteUSART
  9067  002E40                     l878:
  9068  002E40  A2AC               	btfss	4012,1,c	;volatile
  9069  002E42  D7FE               	goto	l878
  9070                           
  9071                           ;main.c: 1723: WriteUSART(0x03);
  9072  002E44  0E03               	movlw	3
  9073  002E46  EFC1  F00B         	goto	_WriteUSART
  9074  002E4A                     __end_of_sendVSCPDriverCommandReply:
  9075                           	opt stack 0
  9076  002E4A                     PL100:
  9077                           	opt stack 22
  9078  002E4A  0100               	movlb	0	; () banked
  9079  002E4C  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9080  002E4E  6F68               	movwf	(?_crc8+1)& (0+255),b
  9081  002E50  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9082  002E52  6F67               	movwf	?_crc8& (0+255),b
  9083  002E54  6B69               	clrf	(?_crc8+2)& (0+255),b
  9084  002E56  0C00               	retlw	0
  9085  002E58                     __end_ofPL100:
  9086                           	opt stack 0
  9087                           tblptru	equ	0xFF8
  9088                           tblptrh	equ	0xFF7
  9089                           tblptrl	equ	0xFF6
  9090                           tablat	equ	0xFF5
  9091                           prodh	equ	0xFF4
  9092                           prodl	equ	0xFF3
  9093                           intcon	equ	0xFF2
  9094                           indf0	equ	0xFEF
  9095                           postinc0	equ	0xFEE
  9096                           fsr0h	equ	0xFEA
  9097                           fsr0l	equ	0xFE9
  9098                           wreg	equ	0xFE8
  9099                           indf1	equ	0xFE7
  9100                           postinc1	equ	0xFE6
  9101                           postdec1	equ	0xFE5
  9102                           fsr1h	equ	0xFE2
  9103                           fsr1l	equ	0xFE1
  9104                           indf2	equ	0xFDF
  9105                           postinc2	equ	0xFDE
  9106                           postdec2	equ	0xFDD
  9107                           plusw2	equ	0xFDB
  9108                           fsr2h	equ	0xFDA
  9109                           fsr2l	equ	0xFD9
  9110                           status	equ	0xFD8
  9111                           
  9112 ;; *************** function _sendVSCPModeCapabilities *****************
  9113 ;; Defined at:
  9114 ;;		line 2047 in file "main.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;		None
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;  crc             1   15[BANK0 ] unsigned char 
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  1    wreg      enum E15660
  9121 ;; Registers used:
  9122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : F/1
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9128 ;;      Params:         0       0       0       0       0       0       0
  9129 ;;      Locals:         0       1       0       0       0       0       0
  9130 ;;      Temps:          0       0       0       0       0       0       0
  9131 ;;      Totals:         0       1       0       0       0       0       0
  9132 ;;Total ram usage:        1 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:    6
  9135 ;; This function calls:
  9136 ;;		_WriteUSART
  9137 ;;		_sendEscapedUartData
  9138 ;;		_crc8
  9139 ;; This function is called by:
  9140 ;;		_doModeVscp
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text9
  9145  0029A6                     __ptext9:
  9146                           	opt stack 0
  9147  0029A6                     _sendVSCPModeCapabilities:
  9148                           	opt stack 22
  9149                           
  9150                           ; BSR set to: 1
  9151                           ;main.c: 2048: uint8_t crc = 0;
  9152                           
  9153                           ;incstack = 0
  9154                           ;incstack = 0
  9155  0029A6  0100               	movlb	0	; () banked
  9156  0029A8  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9157  0029AA                     l1000:
  9158  0029AA  A2AC               	btfss	4012,1,c	;volatile
  9159  0029AC  D7FE               	goto	l1000
  9160                           
  9161                           ;main.c: 2052: WriteUSART(0x10);
  9162  0029AE  0E10               	movlw	16
  9163  0029B0  ECC1  F00B         	call	_WriteUSART
  9164  0029B4                     l1003:
  9165  0029B4  A2AC               	btfss	4012,1,c	;volatile
  9166  0029B6  D7FE               	goto	l1003
  9167                           
  9168                           ;main.c: 2054: WriteUSART(0x02);
  9169  0029B8  0E02               	movlw	2
  9170  0029BA  ECC1  F00B         	call	_WriteUSART
  9171  0029BE                     l1006:
  9172  0029BE  A2AC               	btfss	4012,1,c	;volatile
  9173  0029C0  D7FE               	goto	l1006
  9174                           
  9175                           ;main.c: 2058: WriteUSART(9);
  9176  0029C2  0E09               	movlw	9
  9177  0029C4  ECC1  F00B         	call	_WriteUSART
  9178                           
  9179                           ;main.c: 2059: crc8(&crc, 9);
  9180  0029C8  0100               	movlb	0	; () banked
  9181  0029CA  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9182  0029CC  6F68               	movwf	(?_crc8+1)& (0+255),b
  9183  0029CE  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9184  0029D0  6F67               	movwf	?_crc8& (0+255),b
  9185  0029D2  0E09               	movlw	9
  9186  0029D4  6F69               	movwf	(?_crc8+2)& (0+255),b
  9187  0029D6  EC83  F00C         	call	_crc8	;wreg free
  9188  0029DA                     l1009:
  9189  0029DA  A2AC               	btfss	4012,1,c	;volatile
  9190  0029DC  D7FE               	goto	l1009
  9191                           
  9192                           ;main.c: 2063: WriteUSART(0);
  9193  0029DE  0E00               	movlw	0
  9194  0029E0  ECC1  F00B         	call	_WriteUSART
  9195                           
  9196                           ;main.c: 2064: crc8(&crc, 0);
  9197  0029E4  0100               	movlb	0	; () banked
  9198  0029E6  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9199  0029E8  6F68               	movwf	(?_crc8+1)& (0+255),b
  9200  0029EA  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9201  0029EC  6F67               	movwf	?_crc8& (0+255),b
  9202  0029EE  0E00               	movlw	0
  9203  0029F0  6B69               	clrf	(?_crc8+2)& (0+255),b
  9204  0029F2  EC83  F00C         	call	_crc8	;wreg free
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;main.c: 2067: sendEscapedUartData(sequencyno, &crc );
  9208  0029F6  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9209  0029F8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9210  0029FA  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9211  0029FC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9212  0029FE  51F3               	movf	_sequencyno& (0+255),w,b
  9213  002A00  ECF4  F00E         	call	_sendEscapedUartData
  9214                           
  9215                           ; BSR set to: 0
  9216                           ;main.c: 2068: sequencyno++;
  9217  002A04  2BF3               	incf	_sequencyno& (0+255),f,b
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;main.c: 2071: sendEscapedUartData( 0, &crc );
  9221  002A06  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9222  002A08  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9223  002A0A  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9224  002A0C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9225  002A0E  0E00               	movlw	0
  9226  002A10  ECF4  F00E         	call	_sendEscapedUartData
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;main.c: 2072: sendEscapedUartData( 2, &crc );
  9230  002A14  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9231  002A16  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9232  002A18  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9233  002A1A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9234  002A1C  0E02               	movlw	2
  9235  002A1E  ECF4  F00E         	call	_sendEscapedUartData
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;main.c: 2075: sendEscapedUartData( 1, &crc );
  9239  002A22  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9240  002A24  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9241  002A26  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9242  002A28  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9243  002A2A  0E01               	movlw	1
  9244  002A2C  ECF4  F00E         	call	_sendEscapedUartData
  9245                           
  9246                           ; BSR set to: 0
  9247                           ;main.c: 2076: sendEscapedUartData( 0, &crc );
  9248  002A30  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9249  002A32  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9250  002A34  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9251  002A36  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9252  002A38  0E00               	movlw	0
  9253  002A3A  ECF4  F00E         	call	_sendEscapedUartData
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;main.c: 2079: sendEscapedUartData(crc, (0));
  9257  002A3E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9258  002A40  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9259  002A42  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9260  002A44  ECF4  F00E         	call	_sendEscapedUartData
  9261  002A48                     l1012:
  9262  002A48  A2AC               	btfss	4012,1,c	;volatile
  9263  002A4A  D7FE               	goto	l1012
  9264                           
  9265                           ;main.c: 2083: WriteUSART(0x10);
  9266  002A4C  0E10               	movlw	16
  9267  002A4E  ECC1  F00B         	call	_WriteUSART
  9268  002A52                     l1015:
  9269  002A52  A2AC               	btfss	4012,1,c	;volatile
  9270  002A54  D7FE               	goto	l1015
  9271                           
  9272                           ;main.c: 2085: WriteUSART(0x03);
  9273  002A56  0E03               	movlw	3
  9274  002A58  EFC1  F00B         	goto	_WriteUSART
  9275  002A5C                     __end_of_sendVSCPModeCapabilities:
  9276                           	opt stack 0
  9277                           tblptru	equ	0xFF8
  9278                           tblptrh	equ	0xFF7
  9279                           tblptrl	equ	0xFF6
  9280                           tablat	equ	0xFF5
  9281                           prodh	equ	0xFF4
  9282                           prodl	equ	0xFF3
  9283                           intcon	equ	0xFF2
  9284                           indf0	equ	0xFEF
  9285                           postinc0	equ	0xFEE
  9286                           fsr0h	equ	0xFEA
  9287                           fsr0l	equ	0xFE9
  9288                           wreg	equ	0xFE8
  9289                           indf1	equ	0xFE7
  9290                           postinc1	equ	0xFE6
  9291                           postdec1	equ	0xFE5
  9292                           fsr1h	equ	0xFE2
  9293                           fsr1l	equ	0xFE1
  9294                           indf2	equ	0xFDF
  9295                           postinc2	equ	0xFDE
  9296                           postdec2	equ	0xFDD
  9297                           plusw2	equ	0xFDB
  9298                           fsr2h	equ	0xFDA
  9299                           fsr2l	equ	0xFD9
  9300                           status	equ	0xFD8
  9301                           
  9302 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9303 ;; Defined at:
  9304 ;;		line 2178 in file "main.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;		None
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;		None
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  1    wreg      enum E15660
  9311 ;; Registers used:
  9312 ;;		wreg
  9313 ;; Tracked objects:
  9314 ;;		On entry : F/1
  9315 ;;		On exit  : F/1
  9316 ;;		Unchanged: F/0
  9317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9318 ;;      Params:         0       0       0       0       0       0       0
  9319 ;;      Locals:         0       0       0       0       0       0       0
  9320 ;;      Temps:          0       0       0       0       0       0       0
  9321 ;;      Totals:         0       0       0       0       0       0       0
  9322 ;;Total ram usage:        0 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:    3
  9325 ;; This function calls:
  9326 ;;		Nothing
  9327 ;; This function is called by:
  9328 ;;		_doModeVscp
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           	psect	text10
  9333  001740                     __ptext10:
  9334                           	opt stack 0
  9335  001740                     _receiveVSCPModeMultiCanalMsg:
  9336                           	opt stack 25
  9337                           
  9338                           ; BSR set to: 1
  9339                           
  9340                           ; BSR set to: 1
  9341                           ;main.c: 2180: return 0;
  9342                           
  9343                           ;incstack = 0
  9344                           ;incstack = 0
  9345  001740  0C00               	retlw	0
  9346  001742                     __end_of_receiveVSCPModeMultiCanalMsg:
  9347                           	opt stack 0
  9348                           tblptru	equ	0xFF8
  9349                           tblptrh	equ	0xFF7
  9350                           tblptrl	equ	0xFF6
  9351                           tablat	equ	0xFF5
  9352                           prodh	equ	0xFF4
  9353                           prodl	equ	0xFF3
  9354                           intcon	equ	0xFF2
  9355                           indf0	equ	0xFEF
  9356                           postinc0	equ	0xFEE
  9357                           fsr0h	equ	0xFEA
  9358                           fsr0l	equ	0xFE9
  9359                           wreg	equ	0xFE8
  9360                           indf1	equ	0xFE7
  9361                           postinc1	equ	0xFE6
  9362                           postdec1	equ	0xFE5
  9363                           fsr1h	equ	0xFE2
  9364                           fsr1l	equ	0xFE1
  9365                           indf2	equ	0xFDF
  9366                           postinc2	equ	0xFDE
  9367                           postdec2	equ	0xFDD
  9368                           plusw2	equ	0xFDB
  9369                           fsr2h	equ	0xFDA
  9370                           fsr2l	equ	0xFD9
  9371                           status	equ	0xFD8
  9372                           
  9373 ;; *************** function _sendVSCPDriverNack *****************
  9374 ;; Defined at:
  9375 ;;		line 1633 in file "main.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;		None
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;  crc             1   15[BANK0 ] unsigned char 
  9380 ;; Return value:  Size  Location     Type
  9381 ;;		None               void
  9382 ;; Registers used:
  9383 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9384 ;; Tracked objects:
  9385 ;;		On entry : E/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9389 ;;      Params:         0       0       0       0       0       0       0
  9390 ;;      Locals:         0       1       0       0       0       0       0
  9391 ;;      Temps:          0       0       0       0       0       0       0
  9392 ;;      Totals:         0       1       0       0       0       0       0
  9393 ;;Total ram usage:        1 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    6
  9396 ;; This function calls:
  9397 ;;		_WriteUSART
  9398 ;;		_sendEscapedUartData
  9399 ;;		_crc8
  9400 ;; This function is called by:
  9401 ;;		_doModeVscp
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text11
  9406  002850                     __ptext11:
  9407                           	opt stack 0
  9408  002850                     _sendVSCPDriverNack:
  9409                           	opt stack 22
  9410                           
  9411                           ;main.c: 1634: uint8_t crc = 0;
  9412                           
  9413                           ; BSR set to: 1
  9414                           ;incstack = 0
  9415                           ;incstack = 0
  9416  002850  0100               	movlb	0	; () banked
  9417  002852  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
  9418  002854                     l824:
  9419  002854  A2AC               	btfss	4012,1,c	;volatile
  9420  002856  D7FE               	goto	l824
  9421                           
  9422                           ;main.c: 1638: WriteUSART(0x10);
  9423  002858  0E10               	movlw	16
  9424  00285A  ECC1  F00B         	call	_WriteUSART
  9425  00285E                     l827:
  9426  00285E  A2AC               	btfss	4012,1,c	;volatile
  9427  002860  D7FE               	goto	l827
  9428                           
  9429                           ;main.c: 1640: WriteUSART(0x02);
  9430  002862  0E02               	movlw	2
  9431  002864  ECC1  F00B         	call	_WriteUSART
  9432  002868                     l830:
  9433  002868  A2AC               	btfss	4012,1,c	;volatile
  9434  00286A  D7FE               	goto	l830
  9435                           
  9436                           ;main.c: 1644: WriteUSART(252);
  9437  00286C  0EFC               	movlw	252
  9438  00286E  ECC1  F00B         	call	_WriteUSART
  9439                           
  9440                           ;main.c: 1645: crc8(&crc, 252);
  9441  002872  0100               	movlb	0	; () banked
  9442  002874  0E00               	movlw	high sendVSCPDriverNack@crc
  9443  002876  6F68               	movwf	(?_crc8+1)& (0+255),b
  9444  002878  0E6F               	movlw	low sendVSCPDriverNack@crc
  9445  00287A  6F67               	movwf	?_crc8& (0+255),b
  9446  00287C  0EFC               	movlw	252
  9447  00287E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9448  002880  EC83  F00C         	call	_crc8	;wreg free
  9449  002884                     l833:
  9450  002884  A2AC               	btfss	4012,1,c	;volatile
  9451  002886  D7FE               	goto	l833
  9452                           
  9453                           ;main.c: 1649: WriteUSART(0);
  9454  002888  0E00               	movlw	0
  9455  00288A  ECC1  F00B         	call	_WriteUSART
  9456                           
  9457                           ;main.c: 1650: crc8(&crc, 0);
  9458  00288E  D829               	call	PL48	;call to abstracted procedure
  9459  002890  EC83  F00C         	call	_crc8	;wreg free
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;main.c: 1653: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9463  002894  0E00               	movlw	high sendVSCPDriverNack@crc
  9464  002896  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9465  002898  0E6F               	movlw	low sendVSCPDriverNack@crc
  9466  00289A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9467  00289C  0101               	movlb	1	; () banked
  9468  00289E  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9469  0028A0  ECF4  F00E         	call	_sendEscapedUartData
  9470  0028A4                     l836:
  9471  0028A4  A2AC               	btfss	4012,1,c	;volatile
  9472  0028A6  D7FE               	goto	l836
  9473                           
  9474                           ;main.c: 1657: WriteUSART(0);
  9475  0028A8  0E00               	movlw	0
  9476  0028AA  ECC1  F00B         	call	_WriteUSART
  9477                           
  9478                           ;main.c: 1658: crc8(&crc, 0);
  9479  0028AE  D819               	call	PL48	;call to abstracted procedure
  9480  0028B0  EC83  F00C         	call	_crc8	;wreg free
  9481  0028B4                     l839:
  9482  0028B4  A2AC               	btfss	4012,1,c	;volatile
  9483  0028B6  D7FE               	goto	l839
  9484                           
  9485                           ;main.c: 1660: WriteUSART(0);
  9486  0028B8  0E00               	movlw	0
  9487  0028BA  ECC1  F00B         	call	_WriteUSART
  9488                           
  9489                           ;main.c: 1661: crc8(&crc, 0);
  9490  0028BE  D811               	call	PL48	;call to abstracted procedure
  9491  0028C0  EC83  F00C         	call	_crc8	;wreg free
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;main.c: 1664: sendEscapedUartData(crc, (0));
  9495  0028C4  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9496  0028C6  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9497  0028C8  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
  9498  0028CA  ECF4  F00E         	call	_sendEscapedUartData
  9499  0028CE                     l842:
  9500  0028CE  A2AC               	btfss	4012,1,c	;volatile
  9501  0028D0  D7FE               	goto	l842
  9502                           
  9503                           ;main.c: 1668: WriteUSART(0x10);
  9504  0028D2  0E10               	movlw	16
  9505  0028D4  ECC1  F00B         	call	_WriteUSART
  9506  0028D8                     l845:
  9507  0028D8  A2AC               	btfss	4012,1,c	;volatile
  9508  0028DA  D7FE               	goto	l845
  9509                           
  9510                           ;main.c: 1670: WriteUSART(0x03);
  9511  0028DC  0E03               	movlw	3
  9512  0028DE  EFC1  F00B         	goto	_WriteUSART
  9513  0028E2                     __end_of_sendVSCPDriverNack:
  9514                           	opt stack 0
  9515  0028E2                     PL48:
  9516                           	opt stack 22
  9517  0028E2  0100               	movlb	0	; () banked
  9518  0028E4  0E00               	movlw	high sendVSCPDriverNack@crc
  9519  0028E6  6F68               	movwf	(?_crc8+1)& (0+255),b
  9520  0028E8  0E6F               	movlw	low sendVSCPDriverNack@crc
  9521  0028EA  6F67               	movwf	?_crc8& (0+255),b
  9522  0028EC  6B69               	clrf	(?_crc8+2)& (0+255),b
  9523  0028EE  0C00               	retlw	0
  9524  0028F0                     __end_ofPL48:
  9525                           	opt stack 0
  9526                           tblptru	equ	0xFF8
  9527                           tblptrh	equ	0xFF7
  9528                           tblptrl	equ	0xFF6
  9529                           tablat	equ	0xFF5
  9530                           prodh	equ	0xFF4
  9531                           prodl	equ	0xFF3
  9532                           intcon	equ	0xFF2
  9533                           indf0	equ	0xFEF
  9534                           postinc0	equ	0xFEE
  9535                           fsr0h	equ	0xFEA
  9536                           fsr0l	equ	0xFE9
  9537                           wreg	equ	0xFE8
  9538                           indf1	equ	0xFE7
  9539                           postinc1	equ	0xFE6
  9540                           postdec1	equ	0xFE5
  9541                           fsr1h	equ	0xFE2
  9542                           fsr1l	equ	0xFE1
  9543                           indf2	equ	0xFDF
  9544                           postinc2	equ	0xFDE
  9545                           postdec2	equ	0xFDD
  9546                           plusw2	equ	0xFDB
  9547                           fsr2h	equ	0xFDA
  9548                           fsr2l	equ	0xFD9
  9549                           status	equ	0xFD8
  9550                           
  9551 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9552 ;; Defined at:
  9553 ;;		line 2157 in file "main.c"
  9554 ;; Parameters:    Size  Location     Type
  9555 ;;		None
  9556 ;; Auto vars:     Size  Location     Type
  9557 ;;  data            8   74[BANK0 ] unsigned char [8]
  9558 ;;  id              4   82[BANK0 ] unsigned long 
  9559 ;;  dlc             1   86[BANK0 ] unsigned char 
  9560 ;; Return value:  Size  Location     Type
  9561 ;;                  1    wreg      enum E15660
  9562 ;; Registers used:
  9563 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9564 ;; Tracked objects:
  9565 ;;		On entry : F/1
  9566 ;;		On exit  : F/0
  9567 ;;		Unchanged: 0/0
  9568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9569 ;;      Params:         0       0       0       0       0       0       0
  9570 ;;      Locals:         0      13       0       0       0       0       0
  9571 ;;      Temps:          0      20       0       0       0       0       0
  9572 ;;      Totals:         0      33       0       0       0       0       0
  9573 ;;Total ram usage:       33 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    6
  9576 ;; This function calls:
  9577 ;;		_memcpy
  9578 ;;		_sendCANFrame
  9579 ;; This function is called by:
  9580 ;;		_doModeVscp
  9581 ;; This function uses a non-reentrant model
  9582 ;;
  9583                           
  9584                           	psect	text12
  9585  002E58                     __ptext12:
  9586                           	opt stack 0
  9587  002E58                     _receiveVSCPModeCanalMsg:
  9588                           	opt stack 22
  9589                           
  9590                           ; BSR set to: 1
  9591                           ;main.c: 2158: uint32_t id;
  9592                           ;main.c: 2159: uint8_t dlc;
  9593                           ;main.c: 2160: uint8_t data[8];
  9594                           ;main.c: 2162: id = ((uint32_t) cmdbuf[5] << 26) |
  9595                           ;main.c: 2163: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9596                           ;main.c: 2164: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9597                           ;main.c: 2165: cmdbuf[5 + 3];
  9598                           
  9599                           ;incstack = 0
  9600                           ;incstack = 0
  9601  002E58  C10B  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9602  002E5C  0100               	movlb	0	; () banked
  9603  002E5E  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9604  002E60  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9605  002E62  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9606  002E64  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9607  002E68  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9608  002E6C  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9609  002E70  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9610  002E72  C10A  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9611  002E76  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9612  002E78  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9613  002E7A  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9614  002E7C  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9615  002E80  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9616  002E84  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9617  002E86  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9618  002E88  C109  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9619  002E8C  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9620  002E8E  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9621  002E90  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9622  002E92  0E1A               	movlw	26
  9623  002E94                     u15765:
  9624  002E94  90D8               	bcf	status,0,c
  9625  002E96  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9626  002E98  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9627  002E9A  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9628  002E9C  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9629  002E9E  2EE8               	decfsz	wreg,f,c
  9630  002EA0  D7F9               	goto	u15765
  9631  002EA2  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9632  002EA4  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9633  002EA6  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9634  002EA8  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9635  002EAA  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9636  002EAC  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9637  002EAE  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9638  002EB0  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9639  002EB2  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9640  002EB4  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9641  002EB6  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9642  002EB8  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9643  002EBA  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9644  002EBC  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9645  002EBE  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9646  002EC0  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9647  002EC2  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9648  002EC4  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9649  002EC6  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9650  002EC8  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9651  002ECA  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9652  002ECC  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9653  002ECE  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9654  002ED0  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9655  002ED2  0101               	movlb	1	; () banked
  9656  002ED4  510C               	movf	(_cmdbuf+8)& (0+255),w,b
  9657  002ED6  0100               	movlb	0	; () banked
  9658  002ED8  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9659  002EDA  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9660  002EDC  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9661  002EDE  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9662  002EE0  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9663  002EE2  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9664  002EE4  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9665  002EE6  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9666                           
  9667                           ;main.c: 2166: dlc = cmdbuf[4] - 4;
  9668  002EE8  0101               	movlb	1	; () banked
  9669  002EEA  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  9670  002EEC  0FFC               	addlw	252
  9671  002EEE  0100               	movlb	0	; () banked
  9672  002EF0  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;main.c: 2167: memcpy(data, cmdbuf + 5 + 4, dlc);
  9676  002EF2  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9677  002EF4  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9678  002EF6  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9679  002EF8  6F60               	movwf	?_memcpy& (0+255),b
  9680  002EFA  0E0D               	movlw	low (_cmdbuf+9)
  9681  002EFC  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9682  002EFE  0E01               	movlw	high (_cmdbuf+9)
  9683  002F00  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9684  002F02  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9685  002F06  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9686  002F0A  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9687  002F0E  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9688  002F10  EC73  F00D         	call	_memcpy	;wreg free
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;main.c: 2169: return sendCANFrame(id, dlc, data);
  9692  002F14  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9693  002F18  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9694  002F1C  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9695  002F20  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9696  002F24  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9697  002F28  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9698  002F2A  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9699  002F2C  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9700  002F2E  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9701  002F30  EFBA  F00C         	goto	_sendCANFrame	;wreg free
  9702  002F34                     __end_of_receiveVSCPModeCanalMsg:
  9703                           	opt stack 0
  9704                           tblptru	equ	0xFF8
  9705                           tblptrh	equ	0xFF7
  9706                           tblptrl	equ	0xFF6
  9707                           tablat	equ	0xFF5
  9708                           prodh	equ	0xFF4
  9709                           prodl	equ	0xFF3
  9710                           intcon	equ	0xFF2
  9711                           indf0	equ	0xFEF
  9712                           postinc0	equ	0xFEE
  9713                           fsr0h	equ	0xFEA
  9714                           fsr0l	equ	0xFE9
  9715                           wreg	equ	0xFE8
  9716                           indf1	equ	0xFE7
  9717                           postinc1	equ	0xFE6
  9718                           postdec1	equ	0xFE5
  9719                           fsr1h	equ	0xFE2
  9720                           fsr1l	equ	0xFE1
  9721                           indf2	equ	0xFDF
  9722                           postinc2	equ	0xFDE
  9723                           postdec2	equ	0xFDD
  9724                           plusw2	equ	0xFDB
  9725                           fsr2h	equ	0xFDA
  9726                           fsr2l	equ	0xFD9
  9727                           status	equ	0xFD8
  9728                           
  9729 ;; *************** function _memcpy *****************
  9730 ;; Defined at:
  9731 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;  d1              2    0[BANK0 ] PTR void 
  9734 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9735 ;;  s1              2    2[BANK0 ] PTR const void 
  9736 ;;		 -> vscpData(8), cmdbuf(80), 
  9737 ;;  n               2    4[BANK0 ] unsigned int 
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9740 ;;		 -> vscpData(8), cmdbuf(80), 
  9741 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9742 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9743 ;; Return value:  Size  Location     Type
  9744 ;;                  2    0[BANK0 ] PTR void 
  9745 ;; Registers used:
  9746 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9747 ;; Tracked objects:
  9748 ;;		On entry : F/0
  9749 ;;		On exit  : F/0
  9750 ;;		Unchanged: 0/0
  9751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9752 ;;      Params:         0       6       0       0       0       0       0
  9753 ;;      Locals:         0       4       0       0       0       0       0
  9754 ;;      Temps:          0       0       0       0       0       0       0
  9755 ;;      Totals:         0      10       0       0       0       0       0
  9756 ;;Total ram usage:       10 bytes
  9757 ;; Hardware stack levels used:    1
  9758 ;; Hardware stack levels required when called:    3
  9759 ;; This function calls:
  9760 ;;		Nothing
  9761 ;; This function is called by:
  9762 ;;		_doModeSLCAN
  9763 ;;		_receiveVSCPModeCanalMsg
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           	psect	text13
  9768  001AE6                     __ptext13:
  9769                           	opt stack 0
  9770  001AE6                     _memcpy:
  9771                           	opt stack 25
  9772                           
  9773                           ; BSR set to: 0
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;incstack = 0
  9777                           ;incstack = 0
  9778  001AE6  C062  F068         	movff	memcpy@s1,memcpy@s
  9779  001AEA  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9780  001AEE  C060  F066         	movff	memcpy@d1,memcpy@d
  9781  001AF2  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9782  001AF6  D00E               	goto	l12543
  9783  001AF8                     l12537:
  9784                           
  9785                           ; BSR set to: 0
  9786  001AF8  C068  FFD9         	movff	memcpy@s,fsr2l
  9787  001AFC  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9788  001B00  C066  FFE1         	movff	memcpy@d,fsr1l
  9789  001B04  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9790  001B08  CFDF FFE7          	movff	indf2,indf1
  9791                           
  9792                           ; BSR set to: 0
  9793  001B0C  4B68               	infsnz	memcpy@s& (0+255),f,b
  9794  001B0E  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9795                           
  9796                           ; BSR set to: 0
  9797  001B10  4B66               	infsnz	memcpy@d& (0+255),f,b
  9798  001B12  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9799  001B14                     l12543:
  9800                           
  9801                           ; BSR set to: 0
  9802  001B14  0764               	decf	memcpy@n& (0+255),f,b
  9803  001B16  A0D8               	btfss	status,0,c
  9804  001B18  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9805  001B1A  0100               	movlb	0	; () banked
  9806  001B1C  2964               	incf	memcpy@n& (0+255),w,b
  9807  001B1E  B4D8               	btfsc	status,2,c
  9808  001B20  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9809  001B22  B4D8               	btfsc	status,2,c
  9810                           
  9811                           ; BSR set to: 0
  9812  001B24  0012               	return	
  9813  001B26  D7E8               	goto	l12537
  9814  001B28                     __end_of_memcpy:
  9815                           	opt stack 0
  9816                           tblptru	equ	0xFF8
  9817                           tblptrh	equ	0xFF7
  9818                           tblptrl	equ	0xFF6
  9819                           tablat	equ	0xFF5
  9820                           prodh	equ	0xFF4
  9821                           prodl	equ	0xFF3
  9822                           intcon	equ	0xFF2
  9823                           indf0	equ	0xFEF
  9824                           postinc0	equ	0xFEE
  9825                           fsr0h	equ	0xFEA
  9826                           fsr0l	equ	0xFE9
  9827                           wreg	equ	0xFE8
  9828                           indf1	equ	0xFE7
  9829                           postinc1	equ	0xFE6
  9830                           postdec1	equ	0xFE5
  9831                           fsr1h	equ	0xFE2
  9832                           fsr1l	equ	0xFE1
  9833                           indf2	equ	0xFDF
  9834                           postinc2	equ	0xFDE
  9835                           postdec2	equ	0xFDD
  9836                           plusw2	equ	0xFDB
  9837                           fsr2h	equ	0xFDA
  9838                           fsr2l	equ	0xFD9
  9839                           status	equ	0xFD8
  9840                           
  9841 ;; *************** function _sendVSCPDriverAck *****************
  9842 ;; Defined at:
  9843 ;;		line 1589 in file "main.c"
  9844 ;; Parameters:    Size  Location     Type
  9845 ;;		None
  9846 ;; Auto vars:     Size  Location     Type
  9847 ;;  crc             1   15[BANK0 ] unsigned char 
  9848 ;; Return value:  Size  Location     Type
  9849 ;;		None               void
  9850 ;; Registers used:
  9851 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9852 ;; Tracked objects:
  9853 ;;		On entry : E/1
  9854 ;;		On exit  : 0/0
  9855 ;;		Unchanged: 0/0
  9856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9857 ;;      Params:         0       0       0       0       0       0       0
  9858 ;;      Locals:         0       1       0       0       0       0       0
  9859 ;;      Temps:          0       0       0       0       0       0       0
  9860 ;;      Totals:         0       1       0       0       0       0       0
  9861 ;;Total ram usage:        1 bytes
  9862 ;; Hardware stack levels used:    1
  9863 ;; Hardware stack levels required when called:    6
  9864 ;; This function calls:
  9865 ;;		_WriteUSART
  9866 ;;		_sendEscapedUartData
  9867 ;;		_crc8
  9868 ;; This function is called by:
  9869 ;;		_doModeVscp
  9870 ;; This function uses a non-reentrant model
  9871 ;;
  9872                           
  9873                           	psect	text14
  9874  0027B0                     __ptext14:
  9875                           	opt stack 0
  9876  0027B0                     _sendVSCPDriverAck:
  9877                           	opt stack 22
  9878                           
  9879                           ;main.c: 1590: uint8_t crc = 0;
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;incstack = 0
  9883                           ;incstack = 0
  9884  0027B0  0100               	movlb	0	; () banked
  9885  0027B2  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9886  0027B4                     l797:
  9887  0027B4  A2AC               	btfss	4012,1,c	;volatile
  9888  0027B6  D7FE               	goto	l797
  9889                           
  9890                           ;main.c: 1594: WriteUSART(0x10);
  9891  0027B8  0E10               	movlw	16
  9892  0027BA  ECC1  F00B         	call	_WriteUSART
  9893  0027BE                     l800:
  9894  0027BE  A2AC               	btfss	4012,1,c	;volatile
  9895  0027C0  D7FE               	goto	l800
  9896                           
  9897                           ;main.c: 1596: WriteUSART(0x02);
  9898  0027C2  0E02               	movlw	2
  9899  0027C4  ECC1  F00B         	call	_WriteUSART
  9900  0027C8                     l803:
  9901  0027C8  A2AC               	btfss	4012,1,c	;volatile
  9902  0027CA  D7FE               	goto	l803
  9903                           
  9904                           ;main.c: 1600: WriteUSART(251);
  9905  0027CC  0EFB               	movlw	251
  9906  0027CE  ECC1  F00B         	call	_WriteUSART
  9907                           
  9908                           ;main.c: 1601: crc8(&crc, 251);
  9909  0027D2  0100               	movlb	0	; () banked
  9910  0027D4  0E00               	movlw	high sendVSCPDriverAck@crc
  9911  0027D6  6F68               	movwf	(?_crc8+1)& (0+255),b
  9912  0027D8  0E6F               	movlw	low sendVSCPDriverAck@crc
  9913  0027DA  6F67               	movwf	?_crc8& (0+255),b
  9914  0027DC  0EFB               	movlw	251
  9915  0027DE  6F69               	movwf	(?_crc8+2)& (0+255),b
  9916  0027E0  EC83  F00C         	call	_crc8	;wreg free
  9917  0027E4                     l806:
  9918  0027E4  A2AC               	btfss	4012,1,c	;volatile
  9919  0027E6  D7FE               	goto	l806
  9920                           
  9921                           ;main.c: 1605: WriteUSART(0);
  9922  0027E8  0E00               	movlw	0
  9923  0027EA  ECC1  F00B         	call	_WriteUSART
  9924                           
  9925                           ;main.c: 1606: crc8(&crc, 0);
  9926  0027EE  D829               	call	PL50	;call to abstracted procedure
  9927  0027F0  EC83  F00C         	call	_crc8	;wreg free
  9928                           
  9929                           ; BSR set to: 0
  9930                           ;main.c: 1609: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9931  0027F4  0E00               	movlw	high sendVSCPDriverAck@crc
  9932  0027F6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9933  0027F8  0E6F               	movlw	low sendVSCPDriverAck@crc
  9934  0027FA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9935  0027FC  0101               	movlb	1	; () banked
  9936  0027FE  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9937  002800  ECF4  F00E         	call	_sendEscapedUartData
  9938  002804                     l809:
  9939  002804  A2AC               	btfss	4012,1,c	;volatile
  9940  002806  D7FE               	goto	l809
  9941                           
  9942                           ;main.c: 1613: WriteUSART(0);
  9943  002808  0E00               	movlw	0
  9944  00280A  ECC1  F00B         	call	_WriteUSART
  9945                           
  9946                           ;main.c: 1614: crc8(&crc, 0);
  9947  00280E  D819               	call	PL50	;call to abstracted procedure
  9948  002810  EC83  F00C         	call	_crc8	;wreg free
  9949  002814                     l812:
  9950  002814  A2AC               	btfss	4012,1,c	;volatile
  9951  002816  D7FE               	goto	l812
  9952                           
  9953                           ;main.c: 1616: WriteUSART(0);
  9954  002818  0E00               	movlw	0
  9955  00281A  ECC1  F00B         	call	_WriteUSART
  9956                           
  9957                           ;main.c: 1617: crc8(&crc, 0);
  9958  00281E  D811               	call	PL50	;call to abstracted procedure
  9959  002820  EC83  F00C         	call	_crc8	;wreg free
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;main.c: 1620: sendEscapedUartData(crc, (0));
  9963  002824  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9964  002826  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9965  002828  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9966  00282A  ECF4  F00E         	call	_sendEscapedUartData
  9967  00282E                     l815:
  9968  00282E  A2AC               	btfss	4012,1,c	;volatile
  9969  002830  D7FE               	goto	l815
  9970                           
  9971                           ;main.c: 1624: WriteUSART(0x10);
  9972  002832  0E10               	movlw	16
  9973  002834  ECC1  F00B         	call	_WriteUSART
  9974  002838                     l818:
  9975  002838  A2AC               	btfss	4012,1,c	;volatile
  9976  00283A  D7FE               	goto	l818
  9977                           
  9978                           ;main.c: 1626: WriteUSART(0x03);
  9979  00283C  0E03               	movlw	3
  9980  00283E  EFC1  F00B         	goto	_WriteUSART
  9981  002842                     __end_of_sendVSCPDriverAck:
  9982                           	opt stack 0
  9983  002842                     PL50:
  9984                           	opt stack 22
  9985  002842  0100               	movlb	0	; () banked
  9986  002844  0E00               	movlw	high sendVSCPDriverAck@crc
  9987  002846  6F68               	movwf	(?_crc8+1)& (0+255),b
  9988  002848  0E6F               	movlw	low sendVSCPDriverAck@crc
  9989  00284A  6F67               	movwf	?_crc8& (0+255),b
  9990  00284C  6B69               	clrf	(?_crc8+2)& (0+255),b
  9991  00284E  0C00               	retlw	0
  9992  002850                     __end_ofPL50:
  9993                           	opt stack 0
  9994                           tblptru	equ	0xFF8
  9995                           tblptrh	equ	0xFF7
  9996                           tblptrl	equ	0xFF6
  9997                           tablat	equ	0xFF5
  9998                           prodh	equ	0xFF4
  9999                           prodl	equ	0xFF3
 10000                           intcon	equ	0xFF2
 10001                           indf0	equ	0xFEF
 10002                           postinc0	equ	0xFEE
 10003                           fsr0h	equ	0xFEA
 10004                           fsr0l	equ	0xFE9
 10005                           wreg	equ	0xFE8
 10006                           indf1	equ	0xFE7
 10007                           postinc1	equ	0xFE6
 10008                           postdec1	equ	0xFE5
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           plusw2	equ	0xFDB
 10015                           fsr2h	equ	0xFDA
 10016                           fsr2l	equ	0xFD9
 10017                           status	equ	0xFD8
 10018                           
 10019 ;; *************** function _sendVSCPDriverErrorFrame *****************
 10020 ;; Defined at:
 10021 ;;		line 1541 in file "main.c"
 10022 ;; Parameters:    Size  Location     Type
 10023 ;;  errorcode       1    wreg     unsigned char 
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  errorcode       1   15[BANK0 ] unsigned char 
 10026 ;;  crc             1   16[BANK0 ] unsigned char 
 10027 ;; Return value:  Size  Location     Type
 10028 ;;		None               void
 10029 ;; Registers used:
 10030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10031 ;; Tracked objects:
 10032 ;;		On entry : E/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10036 ;;      Params:         0       0       0       0       0       0       0
 10037 ;;      Locals:         0       2       0       0       0       0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0
 10039 ;;      Totals:         0       2       0       0       0       0       0
 10040 ;;Total ram usage:        2 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    6
 10043 ;; This function calls:
 10044 ;;		_WriteUSART
 10045 ;;		_sendEscapedUartData
 10046 ;;		_crc8
 10047 ;; This function is called by:
 10048 ;;		_doModeVscp
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text15
 10053  002A5C                     __ptext15:
 10054                           	opt stack 0
 10055  002A5C                     _sendVSCPDriverErrorFrame:
 10056                           	opt stack 22
 10057                           
 10058                           ;incstack = 0
 10059                           ;incstack = 0
 10060                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
 10061  002A5C  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
 10062                           
 10063                           ;main.c: 1542: uint8_t crc = 0;
 10064  002A60  0100               	movlb	0	; () banked
 10065  002A62  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
 10066  002A64                     l770:
 10067  002A64  A2AC               	btfss	4012,1,c	;volatile
 10068  002A66  D7FE               	goto	l770
 10069                           
 10070                           ;main.c: 1546: WriteUSART(0x10);
 10071  002A68  0E10               	movlw	16
 10072  002A6A  ECC1  F00B         	call	_WriteUSART
 10073  002A6E                     l773:
 10074  002A6E  A2AC               	btfss	4012,1,c	;volatile
 10075  002A70  D7FE               	goto	l773
 10076                           
 10077                           ;main.c: 1548: WriteUSART(0x02);
 10078  002A72  0E02               	movlw	2
 10079  002A74  ECC1  F00B         	call	_WriteUSART
 10080  002A78                     l776:
 10081  002A78  A2AC               	btfss	4012,1,c	;volatile
 10082  002A7A  D7FE               	goto	l776
 10083                           
 10084                           ;main.c: 1552: WriteUSART(253);
 10085  002A7C  0EFD               	movlw	253
 10086  002A7E  ECC1  F00B         	call	_WriteUSART
 10087                           
 10088                           ;main.c: 1553: crc8(&crc, 253);
 10089  002A82  0100               	movlb	0	; () banked
 10090  002A84  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10091  002A86  6F68               	movwf	(?_crc8+1)& (0+255),b
 10092  002A88  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10093  002A8A  6F67               	movwf	?_crc8& (0+255),b
 10094  002A8C  0EFD               	movlw	253
 10095  002A8E  6F69               	movwf	(?_crc8+2)& (0+255),b
 10096  002A90  EC83  F00C         	call	_crc8	;wreg free
 10097  002A94                     l779:
 10098  002A94  A2AC               	btfss	4012,1,c	;volatile
 10099  002A96  D7FE               	goto	l779
 10100                           
 10101                           ;main.c: 1557: WriteUSART(0);
 10102  002A98  0E00               	movlw	0
 10103  002A9A  ECC1  F00B         	call	_WriteUSART
 10104                           
 10105                           ;main.c: 1558: crc8(&crc, 0);
 10106  002A9E  D836               	call	PL98	;call to abstracted procedure
 10107  002AA0  EC83  F00C         	call	_crc8	;wreg free
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;main.c: 1561: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10111  002AA4  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10112  002AA6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10113  002AA8  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10114  002AAA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10115  002AAC  0101               	movlb	1	; () banked
 10116  002AAE  5106               	movf	(_cmdbuf+2)& (0+255),w,b
 10117  002AB0  ECF4  F00E         	call	_sendEscapedUartData
 10118  002AB4                     l782:
 10119  002AB4  A2AC               	btfss	4012,1,c	;volatile
 10120  002AB6  D7FE               	goto	l782
 10121                           
 10122                           ;main.c: 1565: WriteUSART(0);
 10123  002AB8  0E00               	movlw	0
 10124  002ABA  ECC1  F00B         	call	_WriteUSART
 10125                           
 10126                           ;main.c: 1566: crc8(&crc, 0);
 10127  002ABE  D826               	call	PL98	;call to abstracted procedure
 10128  002AC0  EC83  F00C         	call	_crc8	;wreg free
 10129  002AC4                     l785:
 10130  002AC4  A2AC               	btfss	4012,1,c	;volatile
 10131  002AC6  D7FE               	goto	l785
 10132                           
 10133                           ;main.c: 1568: WriteUSART(1);
 10134  002AC8  0E01               	movlw	1
 10135  002ACA  ECC1  F00B         	call	_WriteUSART
 10136                           
 10137                           ;main.c: 1569: crc8(&crc, 1);
 10138  002ACE  0100               	movlb	0	; () banked
 10139  002AD0  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10140  002AD2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10141  002AD4  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10142  002AD6  6F67               	movwf	?_crc8& (0+255),b
 10143  002AD8  0E01               	movlw	1
 10144  002ADA  6F69               	movwf	(?_crc8+2)& (0+255),b
 10145  002ADC  EC83  F00C         	call	_crc8	;wreg free
 10146                           
 10147                           ; BSR set to: 0
 10148                           ;main.c: 1572: sendEscapedUartData(errorcode, &crc);
 10149  002AE0  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10150  002AE2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10151  002AE4  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10152  002AE6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10153  002AE8  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10154  002AEA  ECF4  F00E         	call	_sendEscapedUartData
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;main.c: 1575: sendEscapedUartData(crc, (0));
 10158  002AEE  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10159  002AF0  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10160  002AF2  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10161  002AF4  ECF4  F00E         	call	_sendEscapedUartData
 10162  002AF8                     l788:
 10163  002AF8  A2AC               	btfss	4012,1,c	;volatile
 10164  002AFA  D7FE               	goto	l788
 10165                           
 10166                           ;main.c: 1579: WriteUSART(0x10);
 10167  002AFC  0E10               	movlw	16
 10168  002AFE  ECC1  F00B         	call	_WriteUSART
 10169  002B02                     l791:
 10170  002B02  A2AC               	btfss	4012,1,c	;volatile
 10171  002B04  D7FE               	goto	l791
 10172                           
 10173                           ;main.c: 1581: WriteUSART(0x03);
 10174  002B06  0E03               	movlw	3
 10175  002B08  EFC1  F00B         	goto	_WriteUSART
 10176  002B0C                     __end_of_sendVSCPDriverErrorFrame:
 10177                           	opt stack 0
 10178  002B0C                     PL98:
 10179                           	opt stack 22
 10180  002B0C  0100               	movlb	0	; () banked
 10181  002B0E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10182  002B10  6F68               	movwf	(?_crc8+1)& (0+255),b
 10183  002B12  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10184  002B14  6F67               	movwf	?_crc8& (0+255),b
 10185  002B16  6B69               	clrf	(?_crc8+2)& (0+255),b
 10186  002B18  0C00               	retlw	0
 10187  002B1A                     __end_ofPL98:
 10188                           	opt stack 0
 10189                           tblptru	equ	0xFF8
 10190                           tblptrh	equ	0xFF7
 10191                           tblptrl	equ	0xFF6
 10192                           tablat	equ	0xFF5
 10193                           prodh	equ	0xFF4
 10194                           prodl	equ	0xFF3
 10195                           intcon	equ	0xFF2
 10196                           indf0	equ	0xFEF
 10197                           postinc0	equ	0xFEE
 10198                           fsr0h	equ	0xFEA
 10199                           fsr0l	equ	0xFE9
 10200                           wreg	equ	0xFE8
 10201                           indf1	equ	0xFE7
 10202                           postinc1	equ	0xFE6
 10203                           postdec1	equ	0xFE5
 10204                           fsr1h	equ	0xFE2
 10205                           fsr1l	equ	0xFE1
 10206                           indf2	equ	0xFDF
 10207                           postinc2	equ	0xFDE
 10208                           postdec2	equ	0xFDD
 10209                           plusw2	equ	0xFDB
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8
 10213                           
 10214 ;; *************** function _calcCRC *****************
 10215 ;; Defined at:
 10216 ;;		line 2390 in file "main.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10219 ;;		 -> cmdbuf(80), 
 10220 ;;  len             1   14[BANK0 ] unsigned char 
 10221 ;; Auto vars:     Size  Location     Type
 10222 ;;  crc             1   16[BANK0 ] unsigned char 
 10223 ;;  j               1   15[BANK0 ] unsigned char 
 10224 ;; Return value:  Size  Location     Type
 10225 ;;                  1    wreg      unsigned char 
 10226 ;; Registers used:
 10227 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10228 ;; Tracked objects:
 10229 ;;		On entry : F/0
 10230 ;;		On exit  : F/0
 10231 ;;		Unchanged: 0/0
 10232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10233 ;;      Params:         0       3       0       0       0       0       0
 10234 ;;      Locals:         0       2       0       0       0       0       0
 10235 ;;      Temps:          0       0       0       0       0       0       0
 10236 ;;      Totals:         0       5       0       0       0       0       0
 10237 ;;Total ram usage:        5 bytes
 10238 ;; Hardware stack levels used:    1
 10239 ;; Hardware stack levels required when called:    5
 10240 ;; This function calls:
 10241 ;;		_crc8
 10242 ;; This function is called by:
 10243 ;;		_doModeVscp
 10244 ;; This function uses a non-reentrant model
 10245 ;;
 10246                           
 10247                           	psect	text16
 10248  001876                     __ptext16:
 10249                           	opt stack 0
 10250  001876                     _calcCRC:
 10251                           	opt stack 23
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;main.c: 2391: uint8_t j;
 10255                           ;main.c: 2392: uint8_t crc = 0;
 10256                           
 10257                           ;incstack = 0
 10258                           ;incstack = 0
 10259  001876  6B70               	clrf	calcCRC@crc& (0+255),b
 10260                           
 10261                           ;main.c: 2394: for (j = 0; j < len; j++) {
 10262  001878  6B6F               	clrf	calcCRC@j& (0+255),b
 10263  00187A  D00F               	goto	l12265
 10264  00187C                     l12261:
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;main.c: 2395: crc8(&crc, p[j]);
 10268  00187C  0E00               	movlw	high calcCRC@crc
 10269  00187E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10270  001880  0E70               	movlw	low calcCRC@crc
 10271  001882  6F67               	movwf	?_crc8& (0+255),b
 10272  001884  516F               	movf	calcCRC@j& (0+255),w,b
 10273  001886  256C               	addwf	calcCRC@p& (0+255),w,b
 10274  001888  6ED9               	movwf	fsr2l,c
 10275  00188A  0E00               	movlw	0
 10276  00188C  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10277  00188E  6EDA               	movwf	fsr2h,c
 10278  001890  50DF               	movf	indf2,w,c
 10279  001892  6F69               	movwf	(?_crc8+2)& (0+255),b
 10280  001894  EC83  F00C         	call	_crc8	;wreg free
 10281                           
 10282                           ; BSR set to: 0
 10283  001898  2B6F               	incf	calcCRC@j& (0+255),f,b
 10284  00189A                     l12265:
 10285                           
 10286                           ; BSR set to: 0
 10287  00189A  516E               	movf	calcCRC@len& (0+255),w,b
 10288  00189C  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10289  00189E  E3EE               	bnc	l12261
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;main.c: 2396: }
 10293                           ;main.c: 2398: return crc;
 10294  0018A0  5170               	movf	calcCRC@crc& (0+255),w,b
 10295                           
 10296                           ; BSR set to: 0
 10297  0018A2  0012               	return	
 10298  0018A4                     __end_of_calcCRC:
 10299                           	opt stack 0
 10300                           tblptru	equ	0xFF8
 10301                           tblptrh	equ	0xFF7
 10302                           tblptrl	equ	0xFF6
 10303                           tablat	equ	0xFF5
 10304                           prodh	equ	0xFF4
 10305                           prodl	equ	0xFF3
 10306                           intcon	equ	0xFF2
 10307                           indf0	equ	0xFEF
 10308                           postinc0	equ	0xFEE
 10309                           fsr0h	equ	0xFEA
 10310                           fsr0l	equ	0xFE9
 10311                           wreg	equ	0xFE8
 10312                           indf1	equ	0xFE7
 10313                           postinc1	equ	0xFE6
 10314                           postdec1	equ	0xFE5
 10315                           fsr1h	equ	0xFE2
 10316                           fsr1l	equ	0xFE1
 10317                           indf2	equ	0xFDF
 10318                           postinc2	equ	0xFDE
 10319                           postdec2	equ	0xFDD
 10320                           plusw2	equ	0xFDB
 10321                           fsr2h	equ	0xFDA
 10322                           fsr2l	equ	0xFD9
 10323                           status	equ	0xFD8
 10324                           
 10325 ;; *************** function _receiveSendEventCANAL *****************
 10326 ;; Defined at:
 10327 ;;		line 1785 in file "main.c"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;		None
 10330 ;; Auto vars:     Size  Location     Type
 10331 ;;  crc             1   32[BANK0 ] unsigned char 
 10332 ;;  data            8   18[BANK0 ] unsigned char [8]
 10333 ;;  id              4   27[BANK0 ] unsigned long 
 10334 ;;  dlc             1   31[BANK0 ] unsigned char 
 10335 ;;  i               1   26[BANK0 ] unsigned char 
 10336 ;; Return value:  Size  Location     Type
 10337 ;;                  1    wreg      enum E15660
 10338 ;; Registers used:
 10339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10340 ;; Tracked objects:
 10341 ;;		On entry : F/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10345 ;;      Params:         0       0       0       0       0       0       0
 10346 ;;      Locals:         0      15       0       0       0       0       0
 10347 ;;      Temps:          0       0       0       0       0       0       0
 10348 ;;      Totals:         0      15       0       0       0       0       0
 10349 ;;Total ram usage:       15 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    6
 10352 ;; This function calls:
 10353 ;;		_WriteUSART
 10354 ;;		_sendEscapedUartData
 10355 ;;		_crc8
 10356 ;;		_getCANFrame
 10357 ;; This function is called by:
 10358 ;;		_doModeVscp
 10359 ;; This function uses a non-reentrant model
 10360 ;;
 10361                           
 10362                           	psect	text17
 10363  003868                     __ptext17:
 10364                           	opt stack 0
 10365  003868                     _receiveSendEventCANAL:
 10366                           	opt stack 22
 10367                           
 10368                           ; BSR set to: 0
 10369                           ;main.c: 1786: uint8_t i;
 10370                           ;main.c: 1787: uint32_t id;
 10371                           ;main.c: 1788: uint8_t dlc;
 10372                           ;main.c: 1789: uint8_t data[8];
 10373                           ;main.c: 1791: if ( getCANFrame( &id, &dlc, &data ) ) {
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;incstack = 0
 10377                           ;incstack = 0
 10378  003868  0E00               	movlw	high receiveSendEventCANAL@dlc
 10379  00386A  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10380  00386C  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10381  00386E  6F6D               	movwf	?_getCANFrame& (0+255),b
 10382  003870  0E00               	movlw	high receiveSendEventCANAL@data
 10383  003872  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10384  003874  0E72               	movlw	low receiveSendEventCANAL@data
 10385  003876  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10386  003878  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10387  00387A  ECD0  F010         	call	_getCANFrame
 10388  00387E  0900               	iorlw	0
 10389  003880  E101 D08F          	bz	l940
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;main.c: 1793: uint8_t crc = 0;
 10393  003884  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;main.c: 1796: cntRxFrames++;
 10397  003886  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10398  003888  0E00               	movlw	0
 10399  00388A  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10400  00388C  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10401  00388E  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10402                           
 10403                           ;main.c: 1797: cntRxBytes += dlc;
 10404  003890  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10405  003892  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10406  003894  0E00               	movlw	0
 10407  003896  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10408  003898  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10409  00389A  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10410  00389C                     l919:
 10411                           
 10412                           ; BSR set to: 0
 10413  00389C  A2AC               	btfss	4012,1,c	;volatile
 10414  00389E  D7FE               	goto	l919
 10415                           
 10416                           ; BSR set to: 0
 10417                           ;main.c: 1801: WriteUSART(0x10);
 10418  0038A0  0E10               	movlw	16
 10419  0038A2  ECC1  F00B         	call	_WriteUSART
 10420  0038A6                     l922:
 10421  0038A6  A2AC               	btfss	4012,1,c	;volatile
 10422  0038A8  D7FE               	goto	l922
 10423                           
 10424                           ;main.c: 1803: WriteUSART(0x02);
 10425  0038AA  0E02               	movlw	2
 10426  0038AC  ECC1  F00B         	call	_WriteUSART
 10427  0038B0                     l925:
 10428  0038B0  A2AC               	btfss	4012,1,c	;volatile
 10429  0038B2  D7FE               	goto	l925
 10430                           
 10431                           ;main.c: 1807: WriteUSART(2);
 10432  0038B4  0E02               	movlw	2
 10433  0038B6  ECC1  F00B         	call	_WriteUSART
 10434                           
 10435                           ;main.c: 1808: crc8(&crc, 2);
 10436  0038BA  0100               	movlb	0	; () banked
 10437  0038BC  0E00               	movlw	high receiveSendEventCANAL@crc
 10438  0038BE  6F68               	movwf	(?_crc8+1)& (0+255),b
 10439  0038C0  0E80               	movlw	low receiveSendEventCANAL@crc
 10440  0038C2  6F67               	movwf	?_crc8& (0+255),b
 10441  0038C4  0E02               	movlw	2
 10442  0038C6  6F69               	movwf	(?_crc8+2)& (0+255),b
 10443  0038C8  EC83  F00C         	call	_crc8	;wreg free
 10444  0038CC                     l928:
 10445                           
 10446                           ; BSR set to: 0
 10447  0038CC  A2AC               	btfss	4012,1,c	;volatile
 10448  0038CE  D7FE               	goto	l928
 10449                           
 10450                           ; BSR set to: 0
 10451                           ;main.c: 1812: WriteUSART(0);
 10452  0038D0  0E00               	movlw	0
 10453  0038D2  ECC1  F00B         	call	_WriteUSART
 10454                           
 10455                           ;main.c: 1813: crc8(&crc, 0);
 10456  0038D6  0100               	movlb	0	; () banked
 10457  0038D8  0E00               	movlw	high receiveSendEventCANAL@crc
 10458  0038DA  6F68               	movwf	(?_crc8+1)& (0+255),b
 10459  0038DC  0E80               	movlw	low receiveSendEventCANAL@crc
 10460  0038DE  6F67               	movwf	?_crc8& (0+255),b
 10461  0038E0  0E00               	movlw	0
 10462  0038E2  6B69               	clrf	(?_crc8+2)& (0+255),b
 10463  0038E4  EC83  F00C         	call	_crc8	;wreg free
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;main.c: 1816: sendEscapedUartData(sequencyno, &crc);
 10467  0038E8  0E00               	movlw	high receiveSendEventCANAL@crc
 10468  0038EA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10469  0038EC  0E80               	movlw	low receiveSendEventCANAL@crc
 10470  0038EE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10471  0038F0  51F3               	movf	_sequencyno& (0+255),w,b
 10472  0038F2  ECF4  F00E         	call	_sendEscapedUartData
 10473                           
 10474                           ; BSR set to: 0
 10475                           ;main.c: 1817: sequencyno++;
 10476  0038F6  2BF3               	incf	_sequencyno& (0+255),f,b
 10477                           
 10478                           ; BSR set to: 0
 10479                           ;main.c: 1820: sendEscapedUartData(0, &crc);
 10480  0038F8  0E00               	movlw	high receiveSendEventCANAL@crc
 10481  0038FA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10482  0038FC  0E80               	movlw	low receiveSendEventCANAL@crc
 10483  0038FE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10484  003900  0E00               	movlw	0
 10485  003902  ECF4  F00E         	call	_sendEscapedUartData
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;main.c: 1821: sendEscapedUartData(5 + dlc, &crc);
 10489  003906  0E00               	movlw	high receiveSendEventCANAL@crc
 10490  003908  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10491  00390A  0E80               	movlw	low receiveSendEventCANAL@crc
 10492  00390C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10493  00390E  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10494  003910  0F05               	addlw	5
 10495  003912  ECF4  F00E         	call	_sendEscapedUartData
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;main.c: 1827: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10499  003916  0E00               	movlw	high receiveSendEventCANAL@crc
 10500  003918  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10501  00391A  0E80               	movlw	low receiveSendEventCANAL@crc
 10502  00391C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10503  00391E  0100               	movlb	0	; () banked
 10504  003920  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10505  003922  ECF4  F00E         	call	_sendEscapedUartData
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;main.c: 1828: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10509  003926  0E00               	movlw	high receiveSendEventCANAL@crc
 10510  003928  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10511  00392A  0E80               	movlw	low receiveSendEventCANAL@crc
 10512  00392C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10513  00392E  0100               	movlb	0	; () banked
 10514  003930  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10515  003932  ECF4  F00E         	call	_sendEscapedUartData
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;main.c: 1829: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10519  003936  0E00               	movlw	high receiveSendEventCANAL@crc
 10520  003938  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10521  00393A  0E80               	movlw	low receiveSendEventCANAL@crc
 10522  00393C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10523  00393E  0100               	movlb	0	; () banked
 10524  003940  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10525  003942  ECF4  F00E         	call	_sendEscapedUartData
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;main.c: 1830: sendEscapedUartData((id & 0xff), &crc);
 10529  003946  0E00               	movlw	high receiveSendEventCANAL@crc
 10530  003948  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10531  00394A  0E80               	movlw	low receiveSendEventCANAL@crc
 10532  00394C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10533  00394E  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10534  003950  ECF4  F00E         	call	_sendEscapedUartData
 10535                           
 10536                           ; BSR set to: 0
 10537                           ;main.c: 1833: sendEscapedUartData(dlc, &crc);
 10538  003954  0E00               	movlw	high receiveSendEventCANAL@crc
 10539  003956  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10540  003958  0E80               	movlw	low receiveSendEventCANAL@crc
 10541  00395A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10542  00395C  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10543  00395E  ECF4  F00E         	call	_sendEscapedUartData
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;main.c: 1836: for (i = 0; i < dlc; i++) {
 10547  003962  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10548  003964  D00C               	goto	l12249
 10549  003966                     l12245:
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;main.c: 1837: sendEscapedUartData( data[ i ], &crc );
 10553  003966  0E00               	movlw	high receiveSendEventCANAL@crc
 10554  003968  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10555  00396A  0E80               	movlw	low receiveSendEventCANAL@crc
 10556  00396C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10557  00396E  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10558  003970  0F72               	addlw	low receiveSendEventCANAL@data
 10559  003972  6ED9               	movwf	fsr2l,c
 10560  003974  6ADA               	clrf	fsr2h,c
 10561  003976  50DF               	movf	indf2,w,c
 10562  003978  ECF4  F00E         	call	_sendEscapedUartData
 10563                           
 10564                           ; BSR set to: 0
 10565  00397C  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10566  00397E                     l12249:
 10567                           
 10568                           ; BSR set to: 0
 10569  00397E  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10570  003980  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10571  003982  E3F1               	bnc	l12245
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;main.c: 1838: }
 10575                           ;main.c: 1843: sendEscapedUartData(crc, (0));
 10576  003984  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10577  003986  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10578  003988  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10579  00398A  ECF4  F00E         	call	_sendEscapedUartData
 10580  00398E                     l934:
 10581                           
 10582                           ; BSR set to: 0
 10583  00398E  A2AC               	btfss	4012,1,c	;volatile
 10584  003990  D7FE               	goto	l934
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;main.c: 1847: WriteUSART(0x10);
 10588  003992  0E10               	movlw	16
 10589  003994  ECC1  F00B         	call	_WriteUSART
 10590  003998                     l937:
 10591  003998  A2AC               	btfss	4012,1,c	;volatile
 10592  00399A  D7FE               	goto	l937
 10593                           
 10594                           ;main.c: 1849: WriteUSART(0x03);
 10595  00399C  0E03               	movlw	3
 10596  00399E  ECC1  F00B         	call	_WriteUSART
 10597  0039A2                     l940:
 10598  0039A2  0012               	return	
 10599  0039A4                     __end_of_receiveSendEventCANAL:
 10600                           	opt stack 0
 10601                           tblptru	equ	0xFF8
 10602                           tblptrh	equ	0xFF7
 10603                           tblptrl	equ	0xFF6
 10604                           tablat	equ	0xFF5
 10605                           prodh	equ	0xFF4
 10606                           prodl	equ	0xFF3
 10607                           intcon	equ	0xFF2
 10608                           indf0	equ	0xFEF
 10609                           postinc0	equ	0xFEE
 10610                           fsr0h	equ	0xFEA
 10611                           fsr0l	equ	0xFE9
 10612                           wreg	equ	0xFE8
 10613                           indf1	equ	0xFE7
 10614                           postinc1	equ	0xFE6
 10615                           postdec1	equ	0xFE5
 10616                           fsr1h	equ	0xFE2
 10617                           fsr1l	equ	0xFE1
 10618                           indf2	equ	0xFDF
 10619                           postinc2	equ	0xFDE
 10620                           postdec2	equ	0xFDD
 10621                           plusw2	equ	0xFDB
 10622                           fsr2h	equ	0xFDA
 10623                           fsr2l	equ	0xFD9
 10624                           status	equ	0xFD8
 10625                           
 10626 ;; *************** function _receiveSendMultiEventCANAL *****************
 10627 ;; Defined at:
 10628 ;;		line 1862 in file "main.c"
 10629 ;; Parameters:    Size  Location     Type
 10630 ;;		None
 10631 ;; Auto vars:     Size  Location     Type
 10632 ;;  crc             1   33[BANK0 ] unsigned char 
 10633 ;;  data            8   18[BANK0 ] unsigned char [8]
 10634 ;;  id              4   29[BANK0 ] unsigned long 
 10635 ;;  pos             1   34[BANK0 ] unsigned char 
 10636 ;;  dlc             1   28[BANK0 ] unsigned char 
 10637 ;;  i               1   27[BANK0 ] unsigned char 
 10638 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10639 ;; Return value:  Size  Location     Type
 10640 ;;                  1    wreg      enum E15660
 10641 ;; Registers used:
 10642 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10643 ;; Tracked objects:
 10644 ;;		On entry : F/0
 10645 ;;		On exit  : 0/0
 10646 ;;		Unchanged: 0/0
 10647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10648 ;;      Params:         0       0       0       0       0       0       0
 10649 ;;      Locals:         0      17       0       0       0       0       0
 10650 ;;      Temps:          0       0       0       0       0       0       0
 10651 ;;      Totals:         0      17       0       0       0       0       0
 10652 ;;Total ram usage:       17 bytes
 10653 ;; Hardware stack levels used:    1
 10654 ;; Hardware stack levels required when called:    6
 10655 ;; This function calls:
 10656 ;;		_WriteUSART
 10657 ;;		_sendEscapedUartData
 10658 ;;		_crc8
 10659 ;;		_getCANFrame
 10660 ;; This function is called by:
 10661 ;;		_doModeVscp
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           	psect	text18
 10666  003C7E                     __ptext18:
 10667                           	opt stack 0
 10668  003C7E                     _receiveSendMultiEventCANAL:
 10669                           	opt stack 22
 10670                           
 10671                           ; BSR set to: 0
 10672                           ;main.c: 1863: uint8_t i;
 10673                           ;main.c: 1864: uint8_t pos=0;
 10674                           
 10675                           ;incstack = 0
 10676                           ;incstack = 0
 10677  003C7E  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10678                           
 10679                           ;main.c: 1865: uint8_t msgcount=0;
 10680  003C80  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;main.c: 1866: uint32_t id;
 10684                           ;main.c: 1867: uint8_t dlc;
 10685                           ;main.c: 1868: uint8_t data[8];
 10686                           ;main.c: 1870: if ( getCANFrame( &id, &dlc, &data ) ) {
 10687  003C82  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10688  003C84  D8B1               	call	PL82	;call to abstracted procedure
 10689  003C86  ECD0  F010         	call	_getCANFrame
 10690  003C8A  0900               	iorlw	0
 10691  003C8C  E101 D0A3          	bz	l972
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;main.c: 1872: uint8_t crc = 0;
 10695  003C90  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;main.c: 1875: cntRxFrames++;
 10699  003C92  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10700  003C94  0E00               	movlw	0
 10701  003C96  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10702  003C98  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10703  003C9A  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10704                           
 10705                           ;main.c: 1876: cntRxBytes += dlc;
 10706  003C9C  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10707  003C9E  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10708  003CA0  0E00               	movlw	0
 10709  003CA2  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10710  003CA4  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10711  003CA6  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10712  003CA8                     l944:
 10713                           
 10714                           ; BSR set to: 0
 10715  003CA8  A2AC               	btfss	4012,1,c	;volatile
 10716  003CAA  D7FE               	goto	l944
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;main.c: 1880: WriteUSART(0x10);
 10720  003CAC  0E10               	movlw	16
 10721  003CAE  ECC1  F00B         	call	_WriteUSART
 10722  003CB2                     l947:
 10723  003CB2  A2AC               	btfss	4012,1,c	;volatile
 10724  003CB4  D7FE               	goto	l947
 10725                           
 10726                           ;main.c: 1882: WriteUSART(0x02);
 10727  003CB6  0E02               	movlw	2
 10728  003CB8  ECC1  F00B         	call	_WriteUSART
 10729  003CBC                     l950:
 10730  003CBC  A2AC               	btfss	4012,1,c	;volatile
 10731  003CBE  D7FE               	goto	l950
 10732                           
 10733                           ;main.c: 1886: WriteUSART(6);
 10734  003CC0  0E06               	movlw	6
 10735  003CC2  ECC1  F00B         	call	_WriteUSART
 10736                           
 10737                           ;main.c: 1887: crc8(&crc, 6);
 10738  003CC6  0100               	movlb	0	; () banked
 10739  003CC8  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10740  003CCA  6F68               	movwf	(?_crc8+1)& (0+255),b
 10741  003CCC  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10742  003CCE  6F67               	movwf	?_crc8& (0+255),b
 10743  003CD0  0E06               	movlw	6
 10744  003CD2  6F69               	movwf	(?_crc8+2)& (0+255),b
 10745  003CD4  EC83  F00C         	call	_crc8	;wreg free
 10746  003CD8                     l953:
 10747                           
 10748                           ; BSR set to: 0
 10749  003CD8  A2AC               	btfss	4012,1,c	;volatile
 10750  003CDA  D7FE               	goto	l953
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;main.c: 1891: WriteUSART(0);
 10754  003CDC  0E00               	movlw	0
 10755  003CDE  ECC1  F00B         	call	_WriteUSART
 10756                           
 10757                           ;main.c: 1892: crc8(&crc, 0);
 10758  003CE2  0100               	movlb	0	; () banked
 10759  003CE4  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10760  003CE6  6F68               	movwf	(?_crc8+1)& (0+255),b
 10761  003CE8  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10762  003CEA  6F67               	movwf	?_crc8& (0+255),b
 10763  003CEC  0E00               	movlw	0
 10764  003CEE  6B69               	clrf	(?_crc8+2)& (0+255),b
 10765  003CF0  EC83  F00C         	call	_crc8	;wreg free
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;main.c: 1895: sendEscapedUartData(sequencyno, &crc);
 10769  003CF4  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10770  003CF6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10771  003CF8  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10772  003CFA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10773  003CFC  51F3               	movf	_sequencyno& (0+255),w,b
 10774  003CFE  ECF4  F00E         	call	_sendEscapedUartData
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;main.c: 1896: sequencyno++;
 10778  003D02  2BF3               	incf	_sequencyno& (0+255),f,b
 10779  003D04                     l12151:
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;main.c: 1906: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10783  003D04  0E54               	movlw	low _wrkbuf
 10784  003D06  0100               	movlb	0	; () banked
 10785  003D08  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10786  003D0A  6ED9               	movwf	fsr2l,c
 10787  003D0C  6ADA               	clrf	fsr2h,c
 10788  003D0E  0E01               	movlw	high _wrkbuf
 10789  003D10  22DA               	addwfc	fsr2h,f,c
 10790  003D12  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;main.c: 1907: pos++;
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;main.c: 1908: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10797  003D16  D860               	call	PL26	;call to abstracted procedure
 10798  003D18  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;main.c: 1909: pos++;
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;main.c: 1910: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10805  003D1C  D85D               	call	PL26	;call to abstracted procedure
 10806  003D1E  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;main.c: 1911: pos++;
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;main.c: 1912: wrkbuf[ pos ] = id & 0xff;
 10813  003D22  D85A               	call	PL26	;call to abstracted procedure
 10814  003D24  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;main.c: 1913: pos++;
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;main.c: 1916: wrkbuf[ pos ] = dlc;
 10821  003D28  D857               	call	PL26	;call to abstracted procedure
 10822  003D2A  C07C  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;main.c: 1917: pos++;
 10826  003D2E  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;main.c: 1920: for (i = 0; i < dlc; i++) {
 10830  003D30  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10831  003D32  D00F               	goto	l12179
 10832  003D34                     l12173:
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;main.c: 1921: wrkbuf[ pos ] = data[ i ];
 10836  003D34  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10837  003D36  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10838  003D38  6ED9               	movwf	fsr2l,c
 10839  003D3A  6ADA               	clrf	fsr2h,c
 10840  003D3C  0E54               	movlw	low _wrkbuf
 10841  003D3E  0100               	movlb	0	; () banked
 10842  003D40  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10843  003D42  6EE1               	movwf	fsr1l,c
 10844  003D44  6AE2               	clrf	fsr1h,c
 10845  003D46  0E01               	movlw	high _wrkbuf
 10846  003D48  22E2               	addwfc	fsr1h,f,c
 10847  003D4A  CFDF FFE7          	movff	indf2,indf1
 10848                           
 10849                           ; BSR set to: 1
 10850                           ;main.c: 1922: pos++;
 10851  003D4E  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10852                           
 10853                           ; BSR set to: 0
 10854  003D50  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10855  003D52                     l12179:
 10856                           
 10857                           ; BSR set to: 0
 10858  003D52  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10859  003D54  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10860  003D56  E3EE               	bnc	l12173
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;main.c: 1923: }
 10864                           ;main.c: 1925: msgcount++;
 10865  003D58  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;main.c: 1927: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10869                           ;main.c: 1928: ( msgcount < 5 ) &&
 10870                           ;main.c: 1929: getCANFrame( &id, &dlc, &data ) );
 10871  003D5A  51F6               	movf	(_caps+1)& (0+255),w,b
 10872  003D5C  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10873  003D5E  D009               	goto	l12189
 10874                           
 10875                           ; BSR set to: 0
 10876  003D60  0E05               	movlw	5
 10877  003D62  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10878  003D64  D006               	goto	l12189
 10879                           
 10880                           ; BSR set to: 0
 10881  003D66  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10882  003D68  D83F               	call	PL82	;call to abstracted procedure
 10883  003D6A  ECD0  F010         	call	_getCANFrame
 10884  003D6E  0900               	iorlw	0
 10885  003D70  E1C9               	bnz	l12151
 10886  003D72                     l12189:
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;main.c: 1934: sendEscapedUartData(0, &crc);
 10890  003D72  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10891  003D74  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10892  003D76  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10893  003D78  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10894  003D7A  0E00               	movlw	0
 10895  003D7C  ECF4  F00E         	call	_sendEscapedUartData
 10896                           
 10897                           ;main.c: 1935: sendEscapedUartData(pos, &crc);
 10898  003D80  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10899  003D82  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10900  003D84  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10901  003D86  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10902  003D88  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10903  003D8A  ECF4  F00E         	call	_sendEscapedUartData
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;main.c: 1938: for (i = 0; i < pos; i++) {
 10907  003D8E  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10908  003D90  D010               	goto	l12197
 10909  003D92                     l12193:
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;main.c: 1939: sendEscapedUartData( wrkbuf[ i ], &crc);
 10913  003D92  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10914  003D94  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10915  003D96  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10916  003D98  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10917  003D9A  0E54               	movlw	low _wrkbuf
 10918  003D9C  0100               	movlb	0	; () banked
 10919  003D9E  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10920  003DA0  6ED9               	movwf	fsr2l,c
 10921  003DA2  6ADA               	clrf	fsr2h,c
 10922  003DA4  0101               	movlb	1	; () banked
 10923  003DA6  0E01               	movlw	high _wrkbuf
 10924  003DA8  22DA               	addwfc	fsr2h,f,c
 10925  003DAA  50DF               	movf	indf2,w,c
 10926  003DAC  ECF4  F00E         	call	_sendEscapedUartData
 10927                           
 10928                           ; BSR set to: 0
 10929  003DB0  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10930  003DB2                     l12197:
 10931                           
 10932                           ; BSR set to: 0
 10933  003DB2  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10934  003DB4  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10935  003DB6  E3ED               	bnc	l12193
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;main.c: 1940: }
 10939                           ;main.c: 1943: sendEscapedUartData(crc, (0));
 10940  003DB8  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10941  003DBA  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10942  003DBC  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 10943  003DBE  ECF4  F00E         	call	_sendEscapedUartData
 10944  003DC2                     l966:
 10945                           
 10946                           ; BSR set to: 0
 10947  003DC2  A2AC               	btfss	4012,1,c	;volatile
 10948  003DC4  D7FE               	goto	l966
 10949                           
 10950                           ; BSR set to: 0
 10951                           ;main.c: 1947: WriteUSART(0x10);
 10952  003DC6  0E10               	movlw	16
 10953  003DC8  ECC1  F00B         	call	_WriteUSART
 10954  003DCC                     l969:
 10955  003DCC  A2AC               	btfss	4012,1,c	;volatile
 10956  003DCE  D7FE               	goto	l969
 10957                           
 10958                           ;main.c: 1949: WriteUSART(0x03);
 10959  003DD0  0E03               	movlw	3
 10960  003DD2  ECC1  F00B         	call	_WriteUSART
 10961  003DD6                     l972:
 10962  003DD6  0012               	return	
 10963  003DD8                     __end_of_receiveSendMultiEventCANAL:
 10964                           	opt stack 0
 10965  003DD8                     PL26:
 10966                           	opt stack 22
 10967  003DD8  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10968  003DDA  0E54               	movlw	low _wrkbuf
 10969  003DDC  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10970  003DDE  6ED9               	movwf	fsr2l,c
 10971  003DE0  6ADA               	clrf	fsr2h,c
 10972  003DE2  0E01               	movlw	high _wrkbuf
 10973  003DE4  22DA               	addwfc	fsr2h,f,c
 10974  003DE6  0012               	return	
 10975  003DE8                     __end_ofPL26:
 10976                           	opt stack 0
 10977  003DE8                     PL82:
 10978                           	opt stack 22
 10979  003DE8  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10980  003DEA  0E7C               	movlw	low receiveSendMultiEventCANAL@dlc
 10981  003DEC  6F6D               	movwf	?_getCANFrame& (0+255),b
 10982  003DEE  0E00               	movlw	high receiveSendMultiEventCANAL@data
 10983  003DF0  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10984  003DF2  0E72               	movlw	low receiveSendMultiEventCANAL@data
 10985  003DF4  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10986  003DF6  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 10987  003DF8  0012               	return	
 10988  003DFA                     __end_ofPL82:
 10989                           	opt stack 0
 10990                           tblptru	equ	0xFF8
 10991                           tblptrh	equ	0xFF7
 10992                           tblptrl	equ	0xFF6
 10993                           tablat	equ	0xFF5
 10994                           prodh	equ	0xFF4
 10995                           prodl	equ	0xFF3
 10996                           intcon	equ	0xFF2
 10997                           indf0	equ	0xFEF
 10998                           postinc0	equ	0xFEE
 10999                           fsr0h	equ	0xFEA
 11000                           fsr0l	equ	0xFE9
 11001                           wreg	equ	0xFE8
 11002                           indf1	equ	0xFE7
 11003                           postinc1	equ	0xFE6
 11004                           postdec1	equ	0xFE5
 11005                           fsr1h	equ	0xFE2
 11006                           fsr1l	equ	0xFE1
 11007                           indf2	equ	0xFDF
 11008                           postinc2	equ	0xFDE
 11009                           postdec2	equ	0xFDD
 11010                           plusw2	equ	0xFDB
 11011                           fsr2h	equ	0xFDA
 11012                           fsr2l	equ	0xFD9
 11013                           status	equ	0xFD8
 11014                           
 11015 ;; *************** function _sendEscapedUartData *****************
 11016 ;; Defined at:
 11017 ;;		line 1515 in file "main.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  c               1    wreg     unsigned char 
 11020 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11021 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11022 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11023 ;;		 -> NULL(0), 
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;  c               1   14[BANK0 ] unsigned char 
 11026 ;; Return value:  Size  Location     Type
 11027 ;;		None               void
 11028 ;; Registers used:
 11029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11030 ;; Tracked objects:
 11031 ;;		On entry : E/1
 11032 ;;		On exit  : F/0
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11035 ;;      Params:         0       2       0       0       0       0       0
 11036 ;;      Locals:         0       1       0       0       0       0       0
 11037 ;;      Temps:          0       0       0       0       0       0       0
 11038 ;;      Totals:         0       3       0       0       0       0       0
 11039 ;;Total ram usage:        3 bytes
 11040 ;; Hardware stack levels used:    1
 11041 ;; Hardware stack levels required when called:    5
 11042 ;; This function calls:
 11043 ;;		_WriteUSART
 11044 ;;		_crc8
 11045 ;; This function is called by:
 11046 ;;		_sendVSCPDriverErrorFrame
 11047 ;;		_sendVSCPDriverAck
 11048 ;;		_sendVSCPDriverNack
 11049 ;;		_sendVSCPDriverCommandReply
 11050 ;;		_receiveSendEventCANAL
 11051 ;;		_receiveSendMultiEventCANAL
 11052 ;;		_sendVSCPModeCapabilities
 11053 ;; This function uses a non-reentrant model
 11054 ;;
 11055                           
 11056                           	psect	text19
 11057  001DE8                     __ptext19:
 11058                           	opt stack 0
 11059  001DE8                     _sendEscapedUartData:
 11060                           	opt stack 22
 11061                           
 11062                           ;incstack = 0
 11063                           ;incstack = 0
 11064                           ;sendEscapedUartData@c stored from wreg
 11065  001DE8  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11066                           
 11067                           ;main.c: 1516: if (0x10 == c) {
 11068  001DEC  0100               	movlb	0	; () banked
 11069  001DEE  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11070  001DF0  0A10               	xorlw	16
 11071  001DF2  E117               	bnz	l763
 11072  001DF4                     l755:
 11073  001DF4  A2AC               	btfss	4012,1,c	;volatile
 11074  001DF6  D7FE               	goto	l755
 11075                           
 11076                           ;main.c: 1519: WriteUSART(0x10);
 11077  001DF8  0E10               	movlw	16
 11078  001DFA  ECC1  F00B         	call	_WriteUSART
 11079  001DFE                     l758:
 11080  001DFE  A2AC               	btfss	4012,1,c	;volatile
 11081  001E00  D7FE               	goto	l758
 11082                           
 11083                           ;main.c: 1523: WriteUSART(0x10);
 11084  001E02  0E10               	movlw	16
 11085  001E04  ECC1  F00B         	call	_WriteUSART
 11086                           
 11087                           ;main.c: 1524: if ((0) != pcrc) crc8(pcrc, 0x10);
 11088  001E08  0100               	movlb	0	; () banked
 11089  001E0A  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11090  001E0C  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11091  001E0E  E01B               	bz	l767
 11092                           
 11093                           ; BSR set to: 0
 11094  001E10  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11095  001E14  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11096  001E18  0E10               	movlw	16
 11097  001E1A  6F69               	movwf	(?_crc8+2)& (0+255),b
 11098  001E1C  EC83  F00C         	call	_crc8	;wreg free
 11099  001E20  D012               	goto	l767
 11100  001E22                     l763:
 11101  001E22  A2AC               	btfss	4012,1,c	;volatile
 11102  001E24  D7FE               	goto	l763
 11103                           
 11104                           ;main.c: 1530: WriteUSART(c);
 11105  001E26  0100               	movlb	0	; () banked
 11106  001E28  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11107  001E2A  ECC1  F00B         	call	_WriteUSART
 11108                           
 11109                           ;main.c: 1531: if ((0) != pcrc) crc8(pcrc, c);
 11110  001E2E  0100               	movlb	0	; () banked
 11111  001E30  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11112  001E32  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11113  001E34  E008               	bz	l767
 11114                           
 11115                           ; BSR set to: 0
 11116  001E36  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11117  001E3A  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11118  001E3E  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11119  001E42  EC83  F00C         	call	_crc8	;wreg free
 11120  001E46                     l767:
 11121                           
 11122                           ; BSR set to: 0
 11123  001E46  0012               	return	
 11124  001E48                     __end_of_sendEscapedUartData:
 11125                           	opt stack 0
 11126                           tblptru	equ	0xFF8
 11127                           tblptrh	equ	0xFF7
 11128                           tblptrl	equ	0xFF6
 11129                           tablat	equ	0xFF5
 11130                           prodh	equ	0xFF4
 11131                           prodl	equ	0xFF3
 11132                           intcon	equ	0xFF2
 11133                           indf0	equ	0xFEF
 11134                           postinc0	equ	0xFEE
 11135                           fsr0h	equ	0xFEA
 11136                           fsr0l	equ	0xFE9
 11137                           wreg	equ	0xFE8
 11138                           indf1	equ	0xFE7
 11139                           postinc1	equ	0xFE6
 11140                           postdec1	equ	0xFE5
 11141                           fsr1h	equ	0xFE2
 11142                           fsr1l	equ	0xFE1
 11143                           indf2	equ	0xFDF
 11144                           postinc2	equ	0xFDE
 11145                           postdec2	equ	0xFDD
 11146                           plusw2	equ	0xFDB
 11147                           fsr2h	equ	0xFDA
 11148                           fsr2l	equ	0xFD9
 11149                           status	equ	0xFD8
 11150                           
 11151 ;; *************** function _crc8 *****************
 11152 ;; Defined at:
 11153 ;;		line 47 in file "crc8.c"
 11154 ;; Parameters:    Size  Location     Type
 11155 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11156 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11157 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11158 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11159 ;;  m               1    9[BANK0 ] unsigned char 
 11160 ;; Auto vars:     Size  Location     Type
 11161 ;;		None
 11162 ;; Return value:  Size  Location     Type
 11163 ;;		None               void
 11164 ;; Registers used:
 11165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11166 ;; Tracked objects:
 11167 ;;		On entry : F/0
 11168 ;;		On exit  : F/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11171 ;;      Params:         0       3       0       0       0       0       0
 11172 ;;      Locals:         0       0       0       0       0       0       0
 11173 ;;      Temps:          0       2       0       0       0       0       0
 11174 ;;      Totals:         0       5       0       0       0       0       0
 11175 ;;Total ram usage:        5 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:    4
 11178 ;; This function calls:
 11179 ;;		_init_crc8
 11180 ;; This function is called by:
 11181 ;;		_sendEscapedUartData
 11182 ;;		_sendVSCPDriverErrorFrame
 11183 ;;		_sendVSCPDriverAck
 11184 ;;		_sendVSCPDriverNack
 11185 ;;		_sendVSCPDriverCommandReply
 11186 ;;		_receiveSendEventCANAL
 11187 ;;		_receiveSendMultiEventCANAL
 11188 ;;		_sendVSCPModeCapabilities
 11189 ;;		_calcCRC
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193                           	psect	text20
 11194  001906                     __ptext20:
 11195                           	opt stack 0
 11196  001906                     _crc8:
 11197                           	opt stack 23
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;crc8.c: 48: if ( !made_table ) {
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;incstack = 0
 11204                           ;incstack = 0
 11205  001906  500E               	movf	_made_table+1,w,c
 11206  001908  100D               	iorwf	_made_table,w,c
 11207  00190A  B4D8               	btfsc	status,2,c
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;crc8.c: 49: init_crc8();
 11211  00190C  ECEA  F00F         	call	_init_crc8	;wreg free
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;crc8.c: 50: }
 11215                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11216  001910  C067  FFD9         	movff	crc8@crc,fsr2l
 11217  001914  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11218  001918  50DF               	movf	indf2,w,c
 11219  00191A  1969               	xorwf	crc8@m& (0+255),w,b
 11220  00191C  6F6A               	movwf	??_crc8& (0+255),b
 11221  00191E  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11222  001920  0E00               	movlw	low _crc8_table
 11223  001922  0100               	movlb	0	; () banked
 11224  001924  256A               	addwf	??_crc8& (0+255),w,b
 11225  001926  6ED9               	movwf	fsr2l,c
 11226  001928  0E03               	movlw	high _crc8_table
 11227  00192A  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11228  00192C  6EDA               	movwf	fsr2h,c
 11229  00192E  C067  FFE1         	movff	crc8@crc,fsr1l
 11230  001932  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11231  001936  CFDF FFE7          	movff	indf2,indf1
 11232                           
 11233                           ; BSR set to: 0
 11234  00193A  0012               	return	
 11235  00193C                     __end_of_crc8:
 11236                           	opt stack 0
 11237                           tblptru	equ	0xFF8
 11238                           tblptrh	equ	0xFF7
 11239                           tblptrl	equ	0xFF6
 11240                           tablat	equ	0xFF5
 11241                           prodh	equ	0xFF4
 11242                           prodl	equ	0xFF3
 11243                           intcon	equ	0xFF2
 11244                           indf0	equ	0xFEF
 11245                           postinc0	equ	0xFEE
 11246                           fsr0h	equ	0xFEA
 11247                           fsr0l	equ	0xFE9
 11248                           wreg	equ	0xFE8
 11249                           indf1	equ	0xFE7
 11250                           postinc1	equ	0xFE6
 11251                           postdec1	equ	0xFE5
 11252                           fsr1h	equ	0xFE2
 11253                           fsr1l	equ	0xFE1
 11254                           indf2	equ	0xFDF
 11255                           postinc2	equ	0xFDE
 11256                           postdec2	equ	0xFDD
 11257                           plusw2	equ	0xFDB
 11258                           fsr2h	equ	0xFDA
 11259                           fsr2l	equ	0xFD9
 11260                           status	equ	0xFD8
 11261                           
 11262 ;; *************** function _init_crc8 *****************
 11263 ;; Defined at:
 11264 ;;		line 25 in file "crc8.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;		None
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;  i               2    5[BANK0 ] int 
 11269 ;;  j               2    2[BANK0 ] int 
 11270 ;;  crc             1    4[BANK0 ] unsigned char 
 11271 ;; Return value:  Size  Location     Type
 11272 ;;		None               void
 11273 ;; Registers used:
 11274 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11275 ;; Tracked objects:
 11276 ;;		On entry : F/0
 11277 ;;		On exit  : F/0
 11278 ;;		Unchanged: 0/0
 11279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11280 ;;      Params:         0       0       0       0       0       0       0
 11281 ;;      Locals:         0       7       0       0       0       0       0
 11282 ;;      Temps:          0       0       0       0       0       0       0
 11283 ;;      Totals:         0       7       0       0       0       0       0
 11284 ;;Total ram usage:        7 bytes
 11285 ;; Hardware stack levels used:    1
 11286 ;; Hardware stack levels required when called:    3
 11287 ;; This function calls:
 11288 ;;		Nothing
 11289 ;; This function is called by:
 11290 ;;		_main
 11291 ;;		_crc8
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           	psect	text21
 11296  001FD4                     __ptext21:
 11297                           	opt stack 0
 11298  001FD4                     _init_crc8:
 11299                           	opt stack 23
 11300                           
 11301                           ; BSR set to: 0
 11302                           ;crc8.c: 26: int i,j;
 11303                           ;crc8.c: 27: unsigned char crc;
 11304                           ;crc8.c: 29: if (!made_table) {
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;incstack = 0
 11308                           ;incstack = 0
 11309  001FD4  500E               	movf	_made_table+1,w,c
 11310  001FD6  100D               	iorwf	_made_table,w,c
 11311  001FD8  E131               	bnz	l1571
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11315  001FDA  6B65               	clrf	init_crc8@i& (0+255),b
 11316  001FDC  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11317  001FDE                     l1563:
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;crc8.c: 31: crc = i;
 11321  001FDE  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11322                           
 11323                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11324  001FE2  6B62               	clrf	init_crc8@j& (0+255),b
 11325  001FE4  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11326  001FE6                     l1565:
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11330  001FE6  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11331  001FE8  D003               	goto	l9921
 11332                           
 11333                           ; BSR set to: 0
 11334  001FEA  6B60               	clrf	_init_crc8$2082& (0+255),b
 11335  001FEC  6B61               	clrf	(_init_crc8$2082+1)& (0+255),b
 11336  001FEE  D003               	goto	l9923
 11337  001FF0                     l9921:
 11338                           
 11339                           ; BSR set to: 0
 11340  001FF0  6B61               	clrf	(_init_crc8$2082+1)& (0+255),b
 11341  001FF2  0E07               	movlw	7
 11342  001FF4  6F60               	movwf	_init_crc8$2082& (0+255),b
 11343  001FF6                     l9923:
 11344                           
 11345                           ; BSR set to: 0
 11346  001FF6  5164               	movf	init_crc8@crc& (0+255),w,b
 11347  001FF8  2564               	addwf	init_crc8@crc& (0+255),w,b
 11348  001FFA  1960               	xorwf	_init_crc8$2082& (0+255),w,b
 11349  001FFC  6F64               	movwf	init_crc8@crc& (0+255),b
 11350                           
 11351                           ; BSR set to: 0
 11352  001FFE  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11353  002000  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11354                           
 11355                           ; BSR set to: 0
 11356  002002  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11357  002004  0A80               	xorlw	128
 11358  002006  0F80               	addlw	-128
 11359  002008  0E08               	movlw	8
 11360  00200A  B4D8               	btfsc	status,2,c
 11361  00200C  5D62               	subwf	init_crc8@j& (0+255),w,b
 11362  00200E  E3EB               	bnc	l1565
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;crc8.c: 34: }
 11366                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11367  002010  0E00               	movlw	low _crc8_table
 11368  002012  0100               	movlb	0	; () banked
 11369  002014  2565               	addwf	init_crc8@i& (0+255),w,b
 11370  002016  6ED9               	movwf	fsr2l,c
 11371  002018  0E03               	movlw	high _crc8_table
 11372  00201A  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11373  00201C  6EDA               	movwf	fsr2h,c
 11374  00201E  C064  FFDF         	movff	init_crc8@crc,indf2
 11375                           
 11376                           ; BSR set to: 0
 11377  002022  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11378  002024  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11379                           
 11380                           ; BSR set to: 0
 11381  002026  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11382  002028  0A80               	xorlw	128
 11383  00202A  0F7F               	addlw	-129
 11384  00202C  0E00               	movlw	0
 11385  00202E  B4D8               	btfsc	status,2,c
 11386  002030  5D65               	subwf	init_crc8@i& (0+255),w,b
 11387  002032  E3D5               	bnc	l1563
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;crc8.c: 37: }
 11391                           ;crc8.c: 38: made_table=1;
 11392  002034  0E00               	movlw	0
 11393  002036  6E0E               	movwf	_made_table+1,c
 11394  002038  0E01               	movlw	1
 11395  00203A  6E0D               	movwf	_made_table,c
 11396  00203C                     l1571:
 11397                           
 11398                           ; BSR set to: 0
 11399  00203C  0012               	return	
 11400  00203E                     __end_of_init_crc8:
 11401                           	opt stack 0
 11402                           tblptru	equ	0xFF8
 11403                           tblptrh	equ	0xFF7
 11404                           tblptrl	equ	0xFF6
 11405                           tablat	equ	0xFF5
 11406                           prodh	equ	0xFF4
 11407                           prodl	equ	0xFF3
 11408                           intcon	equ	0xFF2
 11409                           indf0	equ	0xFEF
 11410                           postinc0	equ	0xFEE
 11411                           fsr0h	equ	0xFEA
 11412                           fsr0l	equ	0xFE9
 11413                           wreg	equ	0xFE8
 11414                           indf1	equ	0xFE7
 11415                           postinc1	equ	0xFE6
 11416                           postdec1	equ	0xFE5
 11417                           fsr1h	equ	0xFE2
 11418                           fsr1l	equ	0xFE1
 11419                           indf2	equ	0xFDF
 11420                           postinc2	equ	0xFDE
 11421                           postdec2	equ	0xFDD
 11422                           plusw2	equ	0xFDB
 11423                           fsr2h	equ	0xFDA
 11424                           fsr2l	equ	0xFD9
 11425                           status	equ	0xFD8
 11426                           
 11427 ;; *************** function _doModeVerbose *****************
 11428 ;; Defined at:
 11429 ;;		line 492 in file "main.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11434 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11435 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11436 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11437 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11438 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11439 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11440 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11441 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11442 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11443 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11444 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11445 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11446 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11447 ;;  id              4   35[BANK2 ] unsigned long 
 11448 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11449 ;;		 -> NULL(0), cmdbuf(80), 
 11450 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11451 ;;  maskno          1   40[BANK2 ] unsigned char 
 11452 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11453 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11454 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11455 ;;  id              4    0[BANK2 ] unsigned long 
 11456 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11457 ;;		 -> NULL(0), cmdbuf(80), 
 11458 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11459 ;;  filterno        1   39[BANK2 ] unsigned char 
 11460 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11461 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11462 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11463 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11464 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11465 ;;		 -> NULL(0), cmdbuf(80), 
 11466 ;;  value           1   41[BANK2 ] unsigned char 
 11467 ;;  reg             1   34[BANK2 ] unsigned char 
 11468 ;;  page            1   33[BANK2 ] unsigned char 
 11469 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11470 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11471 ;;		 -> NULL(0), cmdbuf(80), 
 11472 ;;  value           1   49[BANK2 ] unsigned char 
 11473 ;;  i               1   48[BANK2 ] unsigned char 
 11474 ;;  reg             1   46[BANK2 ] unsigned char 
 11475 ;;  page            1   45[BANK2 ] unsigned char 
 11476 ;;  count           1   43[BANK2 ] unsigned char 
 11477 ;;  rv              1   32[BANK2 ] enum E15660
 11478 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11479 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11480 ;;		 -> NULL(0), cmdbuf(80), 
 11481 ;;  ifmode          1   54[BANK2 ] enum E16371
 11482 ;;  c               1   44[BANK2 ] unsigned char 
 11483 ;;  i               1   42[BANK2 ] unsigned char 
 11484 ;; Return value:  Size  Location     Type
 11485 ;;		None               void
 11486 ;; Registers used:
 11487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11493 ;;      Params:         0       0       0       0       0       0       0
 11494 ;;      Locals:         0       0       0      61       0       0       0
 11495 ;;      Temps:          0       0      20       0       0       0       0
 11496 ;;      Totals:         0       0      20      61       0       0       0
 11497 ;;Total ram usage:       81 bytes
 11498 ;; Hardware stack levels used:    1
 11499 ;; Hardware stack levels required when called:   10
 11500 ;; This function calls:
 11501 ;;		_putsUSART
 11502 ;;		_printFirmwareVersion
 11503 ;;		_fifo_read
 11504 ;;		_writeEEPROM
 11505 ;;		_receivePrintEventVerbose
 11506 ;;		_stristr
 11507 ;;		_ECANSetOperationMode
 11508 ;;		_strtok
 11509 ;;		_atoi
 11510 ;;		_memset
 11511 ;;		_sendVSCPFrame
 11512 ;;		_printStatistics
 11513 ;;		_printErrors
 11514 ;;		_printHelp
 11515 ;;		_findNodes
 11516 ;;		_strcpy
 11517 ;;		_strchr
 11518 ;;		_readRegisterExtended
 11519 ;;		_sprintf
 11520 ;;		_WriteUSART
 11521 ;;		_printBinary
 11522 ;;		_writeRegisterExtended
 11523 ;;		_printNodeFirmwareVersion
 11524 ;;		_printGUID
 11525 ;;		_printMDF
 11526 ;;		_setFilter
 11527 ;;		__CANIDToRegs
 11528 ;; This function is called by:
 11529 ;;		_main
 11530 ;; This function uses a non-reentrant model
 11531 ;;
 11532                           
 11533                           	psect	text22
 11534  0058D0                     __ptext22:
 11535                           	opt stack 0
 11536  0058D0                     _doModeVerbose:
 11537                           	opt stack 19
 11538                           
 11539                           ;main.c: 493: uint8_t c;
 11540                           ;main.c: 494: uint8_t i;
 11541                           ;main.c: 497: if (!bSilent) {
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;incstack = 0
 11545                           ;incstack = 0
 11546  0058D0  0101               	movlb	1	; () banked
 11547  0058D2  6701               	tstfsz	_bSilent& (0+255),b
 11548  0058D4  D002               	goto	l10051
 11549                           
 11550                           ; BSR set to: 1
 11551                           ;main.c: 498: receivePrintEventVerbose();
 11552  0058D6  EC45  F024         	call	_receivePrintEventVerbose	;wreg free
 11553  0058DA                     l10051:
 11554                           
 11555                           ;main.c: 499: }
 11556                           ;main.c: 502: (INTCONbits.GIE = 0);
 11557  0058DA  9EF2               	bcf	intcon,7,c	;volatile
 11558                           
 11559                           ;main.c: 504: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11560  0058DC  0E02               	movlw	high doModeVerbose@c
 11561  0058DE  0100               	movlb	0	; () banked
 11562  0058E0  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11563  0058E2  0EAC               	movlw	low doModeVerbose@c
 11564  0058E4  6F60               	movwf	?_fifo_read& (0+255),b
 11565  0058E6  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 11566  0058E8  0E01               	movlw	1
 11567  0058EA  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11568  0058EC  0E23               	movlw	_serialInputFifo& (0+255)
 11569  0058EE  EC8D  F015         	call	_fifo_read
 11570  0058F2  0560               	decf	?_fifo_read& (0+255),w,b
 11571  0058F4  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11572  0058F6  E002 EFB0  F035    	bnz	l10667
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;main.c: 507: (INTCONbits.GIE = 1);
 11576  0058FC  8EF2               	bsf	intcon,7,c	;volatile
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;main.c: 510: cmdbuf[ pos ] = c;
 11580  0058FE  EC6A  F021         	call	PL20	;call to abstracted procedure
 11581  005902  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11582                           
 11583                           ; BSR set to: 2
 11584                           ;main.c: 511: pos++;
 11585  005906  2B02               	incf	_pos& (0+255),f,b
 11586                           
 11587                           ; BSR set to: 1
 11588                           ;main.c: 513: if (pos >= 128u) {
 11589  005908  0E7F               	movlw	127
 11590  00590A  6502               	cpfsgt	_pos& (0+255),b
 11591  00590C  D001               	goto	l10065
 11592                           
 11593                           ; BSR set to: 1
 11594                           ;main.c: 517: pos = 0;
 11595  00590E  6B02               	clrf	_pos& (0+255),b
 11596  005910                     l10065:
 11597                           
 11598                           ; BSR set to: 1
 11599                           ;main.c: 519: }
 11600                           ;main.c: 522: if (0x0d == c) {
 11601  005910  0102               	movlb	2	; () banked
 11602  005912  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11603  005914  0A0D               	xorlw	13
 11604  005916  E002 EFB0  F035    	bnz	l10667
 11605                           
 11606                           ; BSR set to: 2
 11607                           ;main.c: 524: cmdbuf[ pos ] = 0;
 11608  00591C  EC6A  F021         	call	PL20	;call to abstracted procedure
 11609  005920  6ADF               	clrf	indf2,c
 11610                           
 11611                           ; BSR set to: 1
 11612                           ;main.c: 527: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11613  005922  0100               	movlb	0	; () banked
 11614  005924  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11615  005926  0E04               	movlw	low _cmdbuf
 11616  005928  6F6D               	movwf	?_stristr& (0+255),b
 11617  00592A  0E7C               	movlw	high STR_6
 11618  00592C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11619  00592E  0ECF               	movlw	low STR_6
 11620  005930  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11621  005932  EC0C  F011         	call	_stristr	;wreg free
 11622  005936  ECB2  F035         	call	PL2	;call to abstracted procedure
 11623  00593A  E104               	bnz	u12175
 11624  00593C  0100               	movlb	0	; () banked
 11625  00593E  516D               	movf	?_stristr& (0+255),w,b
 11626  005940  0101               	movlb	1	; () banked
 11627  005942  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11628  005944                     u12175:
 11629  005944  E111               	bnz	l10075
 11630                           
 11631                           ; BSR set to: 1
 11632                           ;main.c: 528: putsUSART((char *) "Will enter bootloader now...\r\n");
 11633  005946  0E77               	movlw	high STR_7
 11634  005948  0100               	movlb	0	; () banked
 11635  00594A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11636  00594C  0EEC               	movlw	low STR_7
 11637  00594E  6F61               	movwf	?_putsUSART& (0+255),b
 11638  005950  EC6E  F00E         	call	_putsUSART	;wreg free
 11639                           
 11640                           ;main.c: 529: writeEEPROM(0x00, 0xFF);
 11641  005954  0100               	movlb	0	; () banked
 11642  005956  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 11643  005958  6B60               	clrf	?_writeEEPROM& (0+255),b
 11644  00595A  0EFF               	movlw	255
 11645  00595C  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 11646  00595E  EC11  F00C         	call	_writeEEPROM	;wreg free
 11647  005962  00FF               	reset		;# 
 11648                           
 11649                           ;main.c: 531: }
 11650  005964  EFA2  F035         	goto	l10663
 11651  005968                     l10075:
 11652                           
 11653                           ; BSR set to: 1
 11654                           ;main.c: 533: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11655  005968  0E01               	movlw	high _cmdbuf
 11656  00596A  0100               	movlb	0	; () banked
 11657  00596C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11658  00596E  0E04               	movlw	low _cmdbuf
 11659  005970  6F6D               	movwf	?_stristr& (0+255),b
 11660  005972  0E7C               	movlw	high STR_8
 11661  005974  6F70               	movwf	(?_stristr+3)& (0+255),b
 11662  005976  0EB6               	movlw	low STR_8
 11663  005978  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11664  00597A  EC0C  F011         	call	_stristr	;wreg free
 11665  00597E  ECB2  F035         	call	PL2	;call to abstracted procedure
 11666  005982  E104               	bnz	u12185
 11667  005984  0100               	movlb	0	; () banked
 11668  005986  516D               	movf	?_stristr& (0+255),w,b
 11669  005988  0101               	movlb	1	; () banked
 11670  00598A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11671  00598C                     u12185:
 11672  00598C  E10C               	bnz	l10083
 11673                           
 11674                           ; BSR set to: 1
 11675                           ;main.c: 534: bSilent = 0;
 11676  00598E  6B01               	clrf	_bSilent& (0+255),b
 11677                           
 11678                           ; BSR set to: 1
 11679                           ;main.c: 535: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11680  005990  0E00               	movlw	0
 11681  005992  ECD6  F00B         	call	_ECANSetOperationMode
 11682                           
 11683                           ; BSR set to: 0
 11684                           ;main.c: 536: putsUSART((char *) "+OK\r\n");
 11685  005996  0E7C               	movlw	high STR_9
 11686  005998  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11687  00599A  0E7F               	movlw	low STR_9
 11688  00599C  6F61               	movwf	?_putsUSART& (0+255),b
 11689  00599E  EC6E  F00E         	call	_putsUSART	;wreg free
 11690                           
 11691                           ;main.c: 537: }
 11692  0059A2  EFA2  F035         	goto	l10663
 11693  0059A6                     l10083:
 11694                           
 11695                           ; BSR set to: 1
 11696                           ;main.c: 539: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11697  0059A6  0E01               	movlw	high _cmdbuf
 11698  0059A8  0100               	movlb	0	; () banked
 11699  0059AA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11700  0059AC  0E04               	movlw	low _cmdbuf
 11701  0059AE  6F6D               	movwf	?_stristr& (0+255),b
 11702  0059B0  0E7C               	movlw	high STR_10
 11703  0059B2  6F70               	movwf	(?_stristr+3)& (0+255),b
 11704  0059B4  0E5D               	movlw	low STR_10
 11705  0059B6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11706  0059B8  EC0C  F011         	call	_stristr	;wreg free
 11707  0059BC  ECB2  F035         	call	PL2	;call to abstracted procedure
 11708  0059C0  E104               	bnz	u12195
 11709  0059C2  0100               	movlb	0	; () banked
 11710  0059C4  516D               	movf	?_stristr& (0+255),w,b
 11711  0059C6  0101               	movlb	1	; () banked
 11712  0059C8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11713  0059CA                     u12195:
 11714  0059CA  E10D               	bnz	l10091
 11715                           
 11716                           ; BSR set to: 1
 11717                           ;main.c: 540: bSilent = 1;
 11718  0059CC  0E01               	movlw	1
 11719  0059CE  6F01               	movwf	_bSilent& (0+255),b
 11720                           
 11721                           ; BSR set to: 1
 11722                           ;main.c: 541: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11723  0059D0  0E00               	movlw	0
 11724  0059D2  ECD6  F00B         	call	_ECANSetOperationMode
 11725                           
 11726                           ; BSR set to: 0
 11727                           ;main.c: 542: putsUSART((char *) "+OK\r\n");
 11728  0059D6  0E7C               	movlw	high STR_9
 11729  0059D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11730  0059DA  0E7F               	movlw	low STR_9
 11731  0059DC  6F61               	movwf	?_putsUSART& (0+255),b
 11732  0059DE  EC6E  F00E         	call	_putsUSART	;wreg free
 11733                           
 11734                           ;main.c: 543: }
 11735  0059E2  EFA2  F035         	goto	l10663
 11736  0059E6                     l10091:
 11737                           
 11738                           ; BSR set to: 1
 11739                           ;main.c: 545: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11740  0059E6  0E01               	movlw	high _cmdbuf
 11741  0059E8  0100               	movlb	0	; () banked
 11742  0059EA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11743  0059EC  0E04               	movlw	low _cmdbuf
 11744  0059EE  6F6D               	movwf	?_stristr& (0+255),b
 11745  0059F0  0E7C               	movlw	high STR_12
 11746  0059F2  6F70               	movwf	(?_stristr+3)& (0+255),b
 11747  0059F4  0E91               	movlw	low STR_12
 11748  0059F6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11749  0059F8  EC0C  F011         	call	_stristr	;wreg free
 11750  0059FC  ECB2  F035         	call	PL2	;call to abstracted procedure
 11751  005A00  E104               	bnz	u12205
 11752  005A02  0100               	movlb	0	; () banked
 11753  005A04  516D               	movf	?_stristr& (0+255),w,b
 11754  005A06  0101               	movlb	1	; () banked
 11755  005A08  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11756  005A0A                     u12205:
 11757  005A0A  E10D               	bnz	l10099
 11758                           
 11759                           ; BSR set to: 1
 11760                           ;main.c: 546: bSilent = 1;
 11761  005A0C  0E01               	movlw	1
 11762  005A0E  6F01               	movwf	_bSilent& (0+255),b
 11763                           
 11764                           ; BSR set to: 1
 11765                           ;main.c: 547: ECANSetOperationMode(0x20);
 11766  005A10  0E20               	movlw	32
 11767  005A12  ECD6  F00B         	call	_ECANSetOperationMode
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;main.c: 548: putsUSART((char *) "+OK\r\n");
 11771  005A16  0E7C               	movlw	high STR_9
 11772  005A18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11773  005A1A  0E7F               	movlw	low STR_9
 11774  005A1C  6F61               	movwf	?_putsUSART& (0+255),b
 11775  005A1E  EC6E  F00E         	call	_putsUSART	;wreg free
 11776                           
 11777                           ;main.c: 549: }
 11778  005A22  EFA2  F035         	goto	l10663
 11779  005A26                     l10099:
 11780                           
 11781                           ; BSR set to: 1
 11782                           ;main.c: 551: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11783  005A26  0E01               	movlw	high _cmdbuf
 11784  005A28  0100               	movlb	0	; () banked
 11785  005A2A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11786  005A2C  0E04               	movlw	low _cmdbuf
 11787  005A2E  6F6D               	movwf	?_stristr& (0+255),b
 11788  005A30  0E7B               	movlw	high STR_14
 11789  005A32  6F70               	movwf	(?_stristr+3)& (0+255),b
 11790  005A34  0ECC               	movlw	low STR_14
 11791  005A36  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11792  005A38  EC0C  F011         	call	_stristr	;wreg free
 11793  005A3C  ECB2  F035         	call	PL2	;call to abstracted procedure
 11794  005A40  E104               	bnz	u12215
 11795  005A42  0100               	movlb	0	; () banked
 11796  005A44  516D               	movf	?_stristr& (0+255),w,b
 11797  005A46  0101               	movlb	1	; () banked
 11798  005A48  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11799  005A4A                     u12215:
 11800  005A4A  E10C               	bnz	l10107
 11801                           
 11802                           ; BSR set to: 1
 11803                           ;main.c: 552: bSilent = 0;
 11804  005A4C  6B01               	clrf	_bSilent& (0+255),b
 11805                           
 11806                           ; BSR set to: 1
 11807                           ;main.c: 553: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11808  005A4E  0E40               	movlw	64
 11809  005A50  ECD6  F00B         	call	_ECANSetOperationMode
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;main.c: 554: putsUSART((char *) "+OK\r\n");
 11813  005A54  0E7C               	movlw	high STR_9
 11814  005A56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11815  005A58  0E7F               	movlw	low STR_9
 11816  005A5A  6F61               	movwf	?_putsUSART& (0+255),b
 11817  005A5C  EC6E  F00E         	call	_putsUSART	;wreg free
 11818                           
 11819                           ;main.c: 555: }
 11820  005A60  EFA2  F035         	goto	l10663
 11821  005A64                     l10107:
 11822                           
 11823                           ; BSR set to: 1
 11824                           ;main.c: 557: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11825  005A64  0E01               	movlw	high _cmdbuf
 11826  005A66  0100               	movlb	0	; () banked
 11827  005A68  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11828  005A6A  0E04               	movlw	low _cmdbuf
 11829  005A6C  6F6D               	movwf	?_stristr& (0+255),b
 11830  005A6E  0E7C               	movlw	high STR_16
 11831  005A70  6F70               	movwf	(?_stristr+3)& (0+255),b
 11832  005A72  0E4F               	movlw	low STR_16
 11833  005A74  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11834  005A76  EC0C  F011         	call	_stristr	;wreg free
 11835  005A7A  ECB2  F035         	call	PL2	;call to abstracted procedure
 11836  005A7E  E104               	bnz	u12225
 11837  005A80  0100               	movlb	0	; () banked
 11838  005A82  516D               	movf	?_stristr& (0+255),w,b
 11839  005A84  0101               	movlb	1	; () banked
 11840  005A86  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11841  005A88                     u12225:
 11842  005A88  E10C               	bnz	l10115
 11843                           
 11844                           ; BSR set to: 1
 11845                           ;main.c: 558: bSilent = 0;
 11846  005A8A  6B01               	clrf	_bSilent& (0+255),b
 11847                           
 11848                           ; BSR set to: 1
 11849                           ;main.c: 559: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11850  005A8C  0E60               	movlw	96
 11851  005A8E  ECD6  F00B         	call	_ECANSetOperationMode
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;main.c: 560: putsUSART((char *) "+OK\r\n");
 11855  005A92  0E7C               	movlw	high STR_9
 11856  005A94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11857  005A96  0E7F               	movlw	low STR_9
 11858  005A98  6F61               	movwf	?_putsUSART& (0+255),b
 11859  005A9A  EC6E  F00E         	call	_putsUSART	;wreg free
 11860                           
 11861                           ;main.c: 561: }
 11862  005A9E  EFA2  F035         	goto	l10663
 11863  005AA2                     l10115:
 11864                           
 11865                           ; BSR set to: 1
 11866                           ;main.c: 563: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11867  005AA2  0E01               	movlw	high _cmdbuf
 11868  005AA4  0100               	movlb	0	; () banked
 11869  005AA6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11870  005AA8  0E04               	movlw	low _cmdbuf
 11871  005AAA  6F6D               	movwf	?_stristr& (0+255),b
 11872  005AAC  0E7C               	movlw	high STR_18
 11873  005AAE  6F70               	movwf	(?_stristr+3)& (0+255),b
 11874  005AB0  0E0D               	movlw	low STR_18
 11875  005AB2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11876  005AB4  EC0C  F011         	call	_stristr	;wreg free
 11877  005AB8  ECB2  F035         	call	PL2	;call to abstracted procedure
 11878  005ABC  E104               	bnz	u12235
 11879  005ABE  0100               	movlb	0	; () banked
 11880  005AC0  516D               	movf	?_stristr& (0+255),w,b
 11881  005AC2  0101               	movlb	1	; () banked
 11882  005AC4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11883  005AC6                     u12235:
 11884  005AC6  E10B               	bnz	l10121
 11885                           
 11886                           ; BSR set to: 1
 11887                           ;main.c: 564: printFirmwareVersion();
 11888  005AC8  EC10  F012         	call	_printFirmwareVersion	;wreg free
 11889                           
 11890                           ;main.c: 565: putsUSART((char *) "+OK\r\n");
 11891  005ACC  0E7C               	movlw	high STR_9
 11892  005ACE  0100               	movlb	0	; () banked
 11893  005AD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11894  005AD2  0E7F               	movlw	low STR_9
 11895  005AD4  6F61               	movwf	?_putsUSART& (0+255),b
 11896  005AD6  EC6E  F00E         	call	_putsUSART	;wreg free
 11897                           
 11898                           ;main.c: 566: }
 11899  005ADA  EFA2  F035         	goto	l10663
 11900  005ADE                     l10121:
 11901                           
 11902                           ; BSR set to: 1
 11903                           ;main.c: 567: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11904  005ADE  0E01               	movlw	high _cmdbuf
 11905  005AE0  0100               	movlb	0	; () banked
 11906  005AE2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11907  005AE4  0E04               	movlw	low _cmdbuf
 11908  005AE6  6F6D               	movwf	?_stristr& (0+255),b
 11909  005AE8  0E7C               	movlw	high STR_20
 11910  005AEA  6F70               	movwf	(?_stristr+3)& (0+255),b
 11911  005AEC  0E48               	movlw	low STR_20
 11912  005AEE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11913  005AF0  EC0C  F011         	call	_stristr	;wreg free
 11914  005AF4  ECB2  F035         	call	PL2	;call to abstracted procedure
 11915  005AF8  E104               	bnz	u12245
 11916  005AFA  0100               	movlb	0	; () banked
 11917  005AFC  516D               	movf	?_stristr& (0+255),w,b
 11918  005AFE  0101               	movlb	1	; () banked
 11919  005B00  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11920  005B02                     u12245:
 11921  005B02  E169               	bnz	l10157
 11922                           
 11923                           ; BSR set to: 1
 11924                           ;main.c: 568: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11925  005B04  506F               	movf	3951,w,c	;volatile
 11926  005B06  0BE0               	andlw	224
 11927  005B08  0102               	movlb	2	; () banked
 11928  005B0A  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11929                           
 11930                           ; BSR set to: 2
 11931                           ;main.c: 569: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11932  005B0C  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11933  005B0E  D00C               	goto	l10131
 11934                           
 11935                           ; BSR set to: 2
 11936  005B10  0101               	movlb	1	; () banked
 11937  005B12  6701               	tstfsz	_bSilent& (0+255),b
 11938  005B14  D009               	goto	l10131
 11939                           
 11940                           ; BSR set to: 1
 11941                           ;main.c: 570: putsUSART((char *) "+OK - Normal mode\r\n");
 11942  005B16  0E7A               	movlw	high STR_21
 11943  005B18  0100               	movlb	0	; () banked
 11944  005B1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11945  005B1C  0E82               	movlw	low STR_21
 11946  005B1E  6F61               	movwf	?_putsUSART& (0+255),b
 11947  005B20  EC6E  F00E         	call	_putsUSART	;wreg free
 11948                           
 11949                           ;main.c: 571: }
 11950  005B24  EFA2  F035         	goto	l10663
 11951  005B28                     l10131:
 11952                           
 11953                           ;main.c: 572: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11954  005B28  0102               	movlb	2	; () banked
 11955  005B2A  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11956  005B2C  0E01               	movlw	1
 11957  005B2E  A4D8               	btfss	status,2,c
 11958  005B30  0E00               	movlw	0
 11959  005B32  0101               	movlb	1	; () banked
 11960  005B34  1501               	andwf	_bSilent& (0+255),w,b
 11961  005B36  E009               	bz	l10135
 11962                           
 11963                           ; BSR set to: 1
 11964                           ;main.c: 573: putsUSART((char *) "+OK - Silent mode\r\n");
 11965  005B38  0E7A               	movlw	high STR_22
 11966  005B3A  0100               	movlb	0	; () banked
 11967  005B3C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11968  005B3E  0E96               	movlw	low STR_22
 11969  005B40  6F61               	movwf	?_putsUSART& (0+255),b
 11970  005B42  EC6E  F00E         	call	_putsUSART	;wreg free
 11971                           
 11972                           ;main.c: 574: }
 11973  005B46  EFA2  F035         	goto	l10663
 11974  005B4A                     l10135:
 11975                           
 11976                           ; BSR set to: 1
 11977                           ;main.c: 575: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 11978  005B4A  0102               	movlb	2	; () banked
 11979  005B4C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11980  005B4E  0A20               	xorlw	32
 11981  005B50  E109               	bnz	l10139
 11982                           
 11983                           ; BSR set to: 2
 11984                           ;main.c: 576: putsUSART((char *) "+OK - Sleep mode\r\n");
 11985  005B52  0E7A               	movlw	high STR_23
 11986  005B54  0100               	movlb	0	; () banked
 11987  005B56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11988  005B58  0ED2               	movlw	low STR_23
 11989  005B5A  6F61               	movwf	?_putsUSART& (0+255),b
 11990  005B5C  EC6E  F00E         	call	_putsUSART	;wreg free
 11991                           
 11992                           ;main.c: 577: }
 11993  005B60  EFA2  F035         	goto	l10663
 11994  005B64                     l10139:
 11995                           
 11996                           ; BSR set to: 2
 11997                           ;main.c: 578: else if (ECAN_OP_MODE_LOOP == ifmode) {
 11998  005B64  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11999  005B66  0A40               	xorlw	64
 12000  005B68  E109               	bnz	l10143
 12001                           
 12002                           ; BSR set to: 2
 12003                           ;main.c: 579: putsUSART((char *) "+OK - Loopback mode\r\n");
 12004  005B6A  0E7A               	movlw	high STR_24
 12005  005B6C  0100               	movlb	0	; () banked
 12006  005B6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12007  005B70  0E05               	movlw	low STR_24
 12008  005B72  6F61               	movwf	?_putsUSART& (0+255),b
 12009  005B74  EC6E  F00E         	call	_putsUSART	;wreg free
 12010                           
 12011                           ;main.c: 580: }
 12012  005B78  EFA2  F035         	goto	l10663
 12013  005B7C                     l10143:
 12014                           
 12015                           ; BSR set to: 2
 12016                           ;main.c: 581: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12017  005B7C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12018  005B7E  0A60               	xorlw	96
 12019  005B80  E109               	bnz	l10147
 12020                           
 12021                           ; BSR set to: 2
 12022                           ;main.c: 582: putsUSART((char *) "+OK - Listen only mode\r\n");
 12023  005B82  0E78               	movlw	high STR_25
 12024  005B84  0100               	movlb	0	; () banked
 12025  005B86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12026  005B88  0ECE               	movlw	low STR_25
 12027  005B8A  6F61               	movwf	?_putsUSART& (0+255),b
 12028  005B8C  EC6E  F00E         	call	_putsUSART	;wreg free
 12029                           
 12030                           ;main.c: 583: }
 12031  005B90  EFA2  F035         	goto	l10663
 12032  005B94                     l10147:
 12033                           
 12034                           ; BSR set to: 2
 12035                           ;main.c: 584: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12036  005B94  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12037  005B96  0A80               	xorlw	128
 12038  005B98  E109               	bnz	l10151
 12039                           
 12040                           ; BSR set to: 2
 12041                           ;main.c: 585: putsUSART((char *) "+OK - Closed mode\r\n");
 12042  005B9A  0E7A               	movlw	high STR_26
 12043  005B9C  0100               	movlb	0	; () banked
 12044  005B9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12045  005BA0  0E6E               	movlw	low STR_26
 12046  005BA2  6F61               	movwf	?_putsUSART& (0+255),b
 12047  005BA4  EC6E  F00E         	call	_putsUSART	;wreg free
 12048                           
 12049                           ;main.c: 586: }
 12050  005BA8  EFA2  F035         	goto	l10663
 12051  005BAC                     l10151:
 12052                           
 12053                           ; BSR set to: 2
 12054                           ;main.c: 587: else if (ECAN_OP_MODE_BITS == ifmode) {
 12055  005BAC  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12056  005BAE  0AE0               	xorlw	224
 12057  005BB0  E109               	bnz	l10155
 12058                           
 12059                           ; BSR set to: 2
 12060                           ;main.c: 588: putsUSART((char *) "+OK - Bits mode\r\n");
 12061  005BB2  0E7A               	movlw	high STR_27
 12062  005BB4  0100               	movlb	0	; () banked
 12063  005BB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12064  005BB8  0EE5               	movlw	low STR_27
 12065  005BBA  6F61               	movwf	?_putsUSART& (0+255),b
 12066  005BBC  EC6E  F00E         	call	_putsUSART	;wreg free
 12067                           
 12068                           ;main.c: 589: }
 12069  005BC0  EFA2  F035         	goto	l10663
 12070  005BC4                     l10155:
 12071                           
 12072                           ; BSR set to: 2
 12073                           ;main.c: 590: else {
 12074                           ;main.c: 591: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12075  005BC4  0E79               	movlw	high STR_28
 12076  005BC6  0100               	movlb	0	; () banked
 12077  005BC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12078  005BCA  0E48               	movlw	low STR_28
 12079  005BCC  6F61               	movwf	?_putsUSART& (0+255),b
 12080  005BCE  EC6E  F00E         	call	_putsUSART	;wreg free
 12081  005BD2  EFA2  F035         	goto	l10663
 12082  005BD6                     l10157:
 12083                           
 12084                           ; BSR set to: 1
 12085                           ;main.c: 596: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12086  005BD6  0E01               	movlw	high _cmdbuf
 12087  005BD8  0100               	movlb	0	; () banked
 12088  005BDA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12089  005BDC  0E04               	movlw	low _cmdbuf
 12090  005BDE  6F6D               	movwf	?_stristr& (0+255),b
 12091  005BE0  0E7C               	movlw	high STR_29
 12092  005BE2  6F70               	movwf	(?_stristr+3)& (0+255),b
 12093  005BE4  0EEA               	movlw	low STR_29
 12094  005BE6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12095  005BE8  EC0C  F011         	call	_stristr	;wreg free
 12096  005BEC  ECB2  F035         	call	PL2	;call to abstracted procedure
 12097  005BF0  E104               	bnz	u12345
 12098  005BF2  0100               	movlb	0	; () banked
 12099  005BF4  516D               	movf	?_stristr& (0+255),w,b
 12100  005BF6  0101               	movlb	1	; () banked
 12101  005BF8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12102  005BFA                     u12345:
 12103  005BFA  E001 D0D9          	bnz	l10211
 12104                           
 12105                           ; BSR set to: 1
 12106                           ;main.c: 598: char *p = strtok(cmdbuf, ",");
 12107  005BFE  EC15  F036         	call	PL30	;call to abstracted procedure
 12108  005C02  EC57  F012         	call	_strtok	;wreg free
 12109  005C06  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12110  005C0A  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;main.c: 601: vscpPriority = 3;
 12114  005C0E  0E03               	movlw	3
 12115  005C10  0101               	movlb	1	; () banked
 12116  005C12  6FAF               	movwf	_vscpPriority& (0+255),b
 12117                           
 12118                           ; BSR set to: 1
 12119                           ;main.c: 602: if ((0) != p) {
 12120  005C14  0102               	movlb	2	; () banked
 12121  005C16  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12122  005C18  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12123  005C1A  E009               	bz	l10167
 12124                           
 12125                           ; BSR set to: 2
 12126                           ;main.c: 603: vscpPriority = atoi(p);
 12127  005C1C  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12128  005C20  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12129  005C24  EC87  F019         	call	_atoi	;wreg free
 12130  005C28  5166               	movf	?_atoi& (0+255),w,b
 12131  005C2A  0101               	movlb	1	; () banked
 12132  005C2C  6FAF               	movwf	_vscpPriority& (0+255),b
 12133  005C2E                     l10167:
 12134                           
 12135                           ;main.c: 604: }
 12136                           ;main.c: 607: vscpClass = 0;
 12137  005C2E  0101               	movlb	1	; () banked
 12138  005C30  6BAC               	clrf	_vscpClass& (0+255),b
 12139  005C32  6BAD               	clrf	(_vscpClass+1)& (0+255),b
 12140                           
 12141                           ; BSR set to: 1
 12142                           ;main.c: 608: if ((0) != (p = strtok((0), ","))) {
 12143  005C34  ECCB  F035         	call	PL6	;call to abstracted procedure
 12144  005C38  EC57  F012         	call	_strtok	;wreg free
 12145  005C3C  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12146  005C40  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12147  005C44  0102               	movlb	2	; () banked
 12148  005C46  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12149  005C48  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12150  005C4A  E00A               	bz	l10173
 12151                           
 12152                           ; BSR set to: 2
 12153                           ;main.c: 609: vscpClass = atoi(p);
 12154  005C4C  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12155  005C50  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12156  005C54  EC87  F019         	call	_atoi	;wreg free
 12157  005C58  C066  F1AC         	movff	?_atoi,_vscpClass
 12158  005C5C  C067  F1AD         	movff	?_atoi+1,_vscpClass+1
 12159  005C60                     l10173:
 12160                           
 12161                           ;main.c: 610: }
 12162                           ;main.c: 613: vscpType = 0;
 12163  005C60  0101               	movlb	1	; () banked
 12164  005C62  6BB1               	clrf	_vscpType& (0+255),b
 12165                           
 12166                           ; BSR set to: 1
 12167                           ;main.c: 614: if ((0) != (p = strtok((0), ","))) {
 12168  005C64  ECCB  F035         	call	PL6	;call to abstracted procedure
 12169  005C68  EC57  F012         	call	_strtok	;wreg free
 12170  005C6C  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12171  005C70  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12172  005C74  0102               	movlb	2	; () banked
 12173  005C76  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12174  005C78  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12175  005C7A  E009               	bz	l10179
 12176                           
 12177                           ; BSR set to: 2
 12178                           ;main.c: 615: vscpType = atoi(p);
 12179  005C7C  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12180  005C80  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12181  005C84  EC87  F019         	call	_atoi	;wreg free
 12182  005C88  5166               	movf	?_atoi& (0+255),w,b
 12183  005C8A  0101               	movlb	1	; () banked
 12184  005C8C  6FB1               	movwf	_vscpType& (0+255),b
 12185  005C8E                     l10179:
 12186                           
 12187                           ;main.c: 616: }
 12188                           ;main.c: 619: vscpNodeId = 0;
 12189  005C8E  0101               	movlb	1	; () banked
 12190  005C90  6BAE               	clrf	_vscpNodeId& (0+255),b
 12191                           
 12192                           ; BSR set to: 1
 12193                           ;main.c: 620: if ((0) != (p = strtok((0), ","))) {
 12194  005C92  ECCB  F035         	call	PL6	;call to abstracted procedure
 12195  005C96  EC57  F012         	call	_strtok	;wreg free
 12196  005C9A  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12197  005C9E  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12198  005CA2  0102               	movlb	2	; () banked
 12199  005CA4  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12200  005CA6  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12201  005CA8  E009               	bz	l10185
 12202                           
 12203                           ; BSR set to: 2
 12204                           ;main.c: 621: vscpNodeId = atoi(p);
 12205  005CAA  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12206  005CAE  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12207  005CB2  EC87  F019         	call	_atoi	;wreg free
 12208  005CB6  5166               	movf	?_atoi& (0+255),w,b
 12209  005CB8  0101               	movlb	1	; () banked
 12210  005CBA  6FAE               	movwf	_vscpNodeId& (0+255),b
 12211  005CBC                     l10185:
 12212                           
 12213                           ;main.c: 622: }
 12214                           ;main.c: 625: vscpSize = 0;
 12215  005CBC  0101               	movlb	1	; () banked
 12216  005CBE  6BB0               	clrf	_vscpSize& (0+255),b
 12217                           
 12218                           ; BSR set to: 1
 12219                           ;main.c: 626: if ((0) != (p = strtok((0), ","))) {
 12220  005CC0  ECCB  F035         	call	PL6	;call to abstracted procedure
 12221  005CC4  EC57  F012         	call	_strtok	;wreg free
 12222  005CC8  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12223  005CCC  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12224  005CD0  0102               	movlb	2	; () banked
 12225  005CD2  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12226  005CD4  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12227  005CD6  E009               	bz	l10191
 12228                           
 12229                           ; BSR set to: 2
 12230                           ;main.c: 627: vscpSize = atoi(p);
 12231  005CD8  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12232  005CDC  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12233  005CE0  EC87  F019         	call	_atoi	;wreg free
 12234  005CE4  5166               	movf	?_atoi& (0+255),w,b
 12235  005CE6  0101               	movlb	1	; () banked
 12236  005CE8  6FB0               	movwf	_vscpSize& (0+255),b
 12237  005CEA                     l10191:
 12238                           
 12239                           ;main.c: 628: }
 12240                           ;main.c: 630: memset(vscpData, 0, 8);
 12241  005CEA  0E01               	movlw	high _vscpData
 12242  005CEC  0100               	movlb	0	; () banked
 12243  005CEE  6F61               	movwf	(?_memset+1)& (0+255),b
 12244  005CF0  0EA4               	movlw	low _vscpData
 12245  005CF2  6F60               	movwf	?_memset& (0+255),b
 12246  005CF4  6B63               	clrf	(?_memset+3)& (0+255),b
 12247  005CF6  6B62               	clrf	(?_memset+2)& (0+255),b
 12248  005CF8  6B65               	clrf	(?_memset+5)& (0+255),b
 12249  005CFA  0E08               	movlw	8
 12250  005CFC  6F64               	movwf	(?_memset+4)& (0+255),b
 12251  005CFE  EC24  F00C         	call	_memset	;wreg free
 12252                           
 12253                           ; BSR set to: 0
 12254                           ;main.c: 631: for (i = 0; i < vscpSize; i++) {
 12255  005D02  0102               	movlb	2	; () banked
 12256  005D04  6BAA               	clrf	doModeVerbose@i& (0+255),b
 12257  005D06  D01D               	goto	l10201
 12258  005D08                     l10195:
 12259                           
 12260                           ; BSR set to: 2
 12261                           ;main.c: 632: if ((0) != (p = strtok((0), ","))) {
 12262  005D08  ECCB  F035         	call	PL6	;call to abstracted procedure
 12263  005D0C  EC57  F012         	call	_strtok	;wreg free
 12264  005D10  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12265  005D14  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12266  005D18  0102               	movlb	2	; () banked
 12267  005D1A  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12268  005D1C  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12269  005D1E  E016               	bz	l10203
 12270                           
 12271                           ; BSR set to: 2
 12272                           ;main.c: 633: vscpData[ i ] = atoi(p);
 12273  005D20  0EA4               	movlw	low _vscpData
 12274  005D22  25AA               	addwf	doModeVerbose@i& (0+255),w,b
 12275  005D24  6ED9               	movwf	fsr2l,c
 12276  005D26  6ADA               	clrf	fsr2h,c
 12277  005D28  0101               	movlb	1	; () banked
 12278  005D2A  0E01               	movlw	high _vscpData
 12279  005D2C  22DA               	addwfc	fsr2h,f,c
 12280  005D2E  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12281  005D32  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12282  005D36  EC87  F019         	call	_atoi	;wreg free
 12283  005D3A  5166               	movf	?_atoi& (0+255),w,b
 12284  005D3C  6EDF               	movwf	indf2,c
 12285                           
 12286                           ; BSR set to: 0
 12287                           
 12288                           ;main.c: 634: } else {
 12289  005D3E  0102               	movlb	2	; () banked
 12290  005D40  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 12291  005D42                     l10201:
 12292                           
 12293                           ; BSR set to: 2
 12294  005D42  0101               	movlb	1	; () banked
 12295  005D44  51B0               	movf	_vscpSize& (0+255),w,b
 12296  005D46  0102               	movlb	2	; () banked
 12297  005D48  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 12298  005D4A  E3DE               	bnc	l10195
 12299  005D4C                     l10203:
 12300                           
 12301                           ; BSR set to: 2
 12302                           ;main.c: 636: }
 12303                           ;main.c: 637: }
 12304                           ;main.c: 639: if ( sendVSCPFrame(vscpClass,
 12305                           ;main.c: 640: vscpType,
 12306                           ;main.c: 641: vscpNodeId,
 12307                           ;main.c: 642: vscpPriority,
 12308                           ;main.c: 643: vscpSize,
 12309                           ;main.c: 644: vscpData ) ) {
 12310  005D4C  C1AC  F096         	movff	_vscpClass,?_sendVSCPFrame
 12311  005D50  C1AD  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12312  005D54  C1B1  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12313  005D58  C1AE  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12314  005D5C  C1AF  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12315  005D60  C1B0  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12316  005D64  0E01               	movlw	high _vscpData
 12317  005D66  0100               	movlb	0	; () banked
 12318  005D68  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12319  005D6A  0EA4               	movlw	low _vscpData
 12320  005D6C  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12321  005D6E  EC78  F014         	call	_sendVSCPFrame	;wreg free
 12322  005D72  0900               	iorlw	0
 12323  005D74  E015               	bz	l10209
 12324                           
 12325                           ; BSR set to: 0
 12326                           ;main.c: 646: cntTxFrames++;
 12327  005D76  2BE1               	incf	_cntTxFrames& (0+255),f,b
 12328  005D78  0E00               	movlw	0
 12329  005D7A  23E2               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12330  005D7C  23E3               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12331  005D7E  23E4               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12332                           
 12333                           ;main.c: 647: cntTxBytes += vscpSize;
 12334  005D80  0101               	movlb	1	; () banked
 12335  005D82  51B0               	movf	_vscpSize& (0+255),w,b
 12336  005D84  0100               	movlb	0	; () banked
 12337  005D86  27DD               	addwf	_cntTxBytes& (0+255),f,b
 12338  005D88  0E00               	movlw	0
 12339  005D8A  23DE               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12340  005D8C  23DF               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12341  005D8E  23E0               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12342                           
 12343                           ; BSR set to: 0
 12344                           ;main.c: 648: putsUSART((char *) "+OK\r\n");
 12345  005D90  0E7C               	movlw	high STR_9
 12346  005D92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12347  005D94  0E7F               	movlw	low STR_9
 12348  005D96  6F61               	movwf	?_putsUSART& (0+255),b
 12349  005D98  EC6E  F00E         	call	_putsUSART	;wreg free
 12350                           
 12351                           ;main.c: 649: }
 12352  005D9C  EFA2  F035         	goto	l10663
 12353  005DA0                     l10209:
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;main.c: 650: else {
 12357                           ;main.c: 651: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12358  005DA0  0E77               	movlw	high STR_37
 12359  005DA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12360  005DA4  0E48               	movlw	low STR_37
 12361  005DA6  6F61               	movwf	?_putsUSART& (0+255),b
 12362  005DA8  EC6E  F00E         	call	_putsUSART	;wreg free
 12363  005DAC  EFA2  F035         	goto	l10663
 12364  005DB0                     l10211:
 12365                           
 12366                           ; BSR set to: 1
 12367                           ;main.c: 655: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12368  005DB0  0E01               	movlw	high _cmdbuf
 12369  005DB2  0100               	movlb	0	; () banked
 12370  005DB4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12371  005DB6  0E04               	movlw	low _cmdbuf
 12372  005DB8  6F6D               	movwf	?_stristr& (0+255),b
 12373  005DBA  0E7C               	movlw	high STR_38
 12374  005DBC  6F70               	movwf	(?_stristr+3)& (0+255),b
 12375  005DBE  0EE7               	movlw	low STR_38
 12376  005DC0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12377  005DC2  EC0C  F011         	call	_stristr	;wreg free
 12378  005DC6  ECB2  F035         	call	PL2	;call to abstracted procedure
 12379  005DCA  E104               	bnz	u12435
 12380  005DCC  0100               	movlb	0	; () banked
 12381  005DCE  516D               	movf	?_stristr& (0+255),w,b
 12382  005DD0  0101               	movlb	1	; () banked
 12383  005DD2  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12384  005DD4                     u12435:
 12385  005DD4  E116               	bnz	l10219
 12386                           
 12387                           ; BSR set to: 1
 12388                           ;main.c: 656: if (receivePrintEventVerbose()) {
 12389  005DD6  EC45  F024         	call	_receivePrintEventVerbose	;wreg free
 12390  005DDA  0900               	iorlw	0
 12391  005DDC  E009               	bz	l10217
 12392                           
 12393                           ;main.c: 657: putsUSART((char *) "+OK\r\n");
 12394  005DDE  0E7C               	movlw	high STR_9
 12395  005DE0  0100               	movlb	0	; () banked
 12396  005DE2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12397  005DE4  0E7F               	movlw	low STR_9
 12398  005DE6  6F61               	movwf	?_putsUSART& (0+255),b
 12399  005DE8  EC6E  F00E         	call	_putsUSART	;wreg free
 12400                           
 12401                           ;main.c: 658: }
 12402  005DEC  EFA2  F035         	goto	l10663
 12403  005DF0                     l10217:
 12404                           
 12405                           ;main.c: 659: else {
 12406                           ;main.c: 660: putsUSART((char *) "+OK - no events\r\n");
 12407  005DF0  0E7A               	movlw	high STR_40
 12408  005DF2  0100               	movlb	0	; () banked
 12409  005DF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12410  005DF6  0EF7               	movlw	low STR_40
 12411  005DF8  6F61               	movwf	?_putsUSART& (0+255),b
 12412  005DFA  EC6E  F00E         	call	_putsUSART	;wreg free
 12413  005DFE  EFA2  F035         	goto	l10663
 12414  005E02                     l10219:
 12415                           
 12416                           ; BSR set to: 1
 12417                           ;main.c: 664: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12418  005E02  0E01               	movlw	high _cmdbuf
 12419  005E04  0100               	movlb	0	; () banked
 12420  005E06  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12421  005E08  0E04               	movlw	low _cmdbuf
 12422  005E0A  6F6D               	movwf	?_stristr& (0+255),b
 12423  005E0C  0E7C               	movlw	high STR_41
 12424  005E0E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12425  005E10  0ECA               	movlw	low STR_41
 12426  005E12  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12427  005E14  EC0C  F011         	call	_stristr	;wreg free
 12428  005E18  ECB2  F035         	call	PL2	;call to abstracted procedure
 12429  005E1C  E104               	bnz	u12455
 12430  005E1E  0100               	movlb	0	; () banked
 12431  005E20  516D               	movf	?_stristr& (0+255),w,b
 12432  005E22  0101               	movlb	1	; () banked
 12433  005E24  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12434  005E26                     u12455:
 12435  005E26  E10B               	bnz	l10225
 12436                           
 12437                           ; BSR set to: 1
 12438                           ;main.c: 665: printStatistics();
 12439  005E28  ECC1  F01F         	call	_printStatistics	;wreg free
 12440                           
 12441                           ;main.c: 666: putsUSART((char *) "+OK\r\n");
 12442  005E2C  0E7C               	movlw	high STR_9
 12443  005E2E  0100               	movlb	0	; () banked
 12444  005E30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12445  005E32  0E7F               	movlw	low STR_9
 12446  005E34  6F61               	movwf	?_putsUSART& (0+255),b
 12447  005E36  EC6E  F00E         	call	_putsUSART	;wreg free
 12448                           
 12449                           ;main.c: 667: }
 12450  005E3A  EFA2  F035         	goto	l10663
 12451  005E3E                     l10225:
 12452                           
 12453                           ; BSR set to: 1
 12454                           ;main.c: 669: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12455  005E3E  0E01               	movlw	high _cmdbuf
 12456  005E40  0100               	movlb	0	; () banked
 12457  005E42  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12458  005E44  0E04               	movlw	low _cmdbuf
 12459  005E46  6F6D               	movwf	?_stristr& (0+255),b
 12460  005E48  0E7C               	movlw	high STR_43
 12461  005E4A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12462  005E4C  0ED8               	movlw	low STR_43
 12463  005E4E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12464  005E50  EC0C  F011         	call	_stristr	;wreg free
 12465  005E54  ECB2  F035         	call	PL2	;call to abstracted procedure
 12466  005E58  E104               	bnz	u12465
 12467  005E5A  0100               	movlb	0	; () banked
 12468  005E5C  516D               	movf	?_stristr& (0+255),w,b
 12469  005E5E  0101               	movlb	1	; () banked
 12470  005E60  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12471  005E62                     u12465:
 12472  005E62  E10B               	bnz	l10231
 12473                           
 12474                           ; BSR set to: 1
 12475                           ;main.c: 670: printErrors();
 12476  005E64  ECA6  F025         	call	_printErrors	;wreg free
 12477                           
 12478                           ;main.c: 671: putsUSART((char *) "+OK\r\n");
 12479  005E68  0E7C               	movlw	high STR_9
 12480  005E6A  0100               	movlb	0	; () banked
 12481  005E6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12482  005E6E  0E7F               	movlw	low STR_9
 12483  005E70  6F61               	movwf	?_putsUSART& (0+255),b
 12484  005E72  EC6E  F00E         	call	_putsUSART	;wreg free
 12485                           
 12486                           ;main.c: 672: }
 12487  005E76  EFA2  F035         	goto	l10663
 12488  005E7A                     l10231:
 12489                           
 12490                           ; BSR set to: 1
 12491                           ;main.c: 674: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12492  005E7A  0E01               	movlw	high _cmdbuf
 12493  005E7C  0100               	movlb	0	; () banked
 12494  005E7E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12495  005E80  0E04               	movlw	low _cmdbuf
 12496  005E82  6F6D               	movwf	?_stristr& (0+255),b
 12497  005E84  0E7C               	movlw	high STR_45
 12498  005E86  6F70               	movwf	(?_stristr+3)& (0+255),b
 12499  005E88  0EC5               	movlw	low STR_45
 12500  005E8A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12501  005E8C  EC0C  F011         	call	_stristr	;wreg free
 12502  005E90  ECB2  F035         	call	PL2	;call to abstracted procedure
 12503  005E94  E104               	bnz	u12475
 12504  005E96  0100               	movlb	0	; () banked
 12505  005E98  516D               	movf	?_stristr& (0+255),w,b
 12506  005E9A  0101               	movlb	1	; () banked
 12507  005E9C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12508  005E9E                     u12475:
 12509  005E9E  E10B               	bnz	l10235
 12510                           
 12511                           ; BSR set to: 1
 12512                           ;main.c: 675: printHelp();
 12513  005EA0  EC72  F021         	call	_printHelp	;wreg free
 12514                           
 12515                           ;main.c: 676: putsUSART((char *) "+OK\r\n");
 12516  005EA4  0E7C               	movlw	high STR_9
 12517  005EA6  0100               	movlb	0	; () banked
 12518  005EA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12519  005EAA  0E7F               	movlw	low STR_9
 12520  005EAC  6F61               	movwf	?_putsUSART& (0+255),b
 12521  005EAE  EC6E  F00E         	call	_putsUSART	;wreg free
 12522                           
 12523                           ;main.c: 677: }
 12524  005EB2  EFA2  F035         	goto	l10663
 12525  005EB6                     l10235:
 12526                           
 12527                           ; BSR set to: 1
 12528                           ;main.c: 679: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12529  005EB6  0E01               	movlw	high _cmdbuf
 12530  005EB8  0100               	movlb	0	; () banked
 12531  005EBA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12532  005EBC  0E04               	movlw	low _cmdbuf
 12533  005EBE  6F6D               	movwf	?_stristr& (0+255),b
 12534  005EC0  0E7C               	movlw	high STR_47
 12535  005EC2  6F70               	movwf	(?_stristr+3)& (0+255),b
 12536  005EC4  0EA2               	movlw	low STR_47
 12537  005EC6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12538  005EC8  EC0C  F011         	call	_stristr	;wreg free
 12539  005ECC  ECB2  F035         	call	PL2	;call to abstracted procedure
 12540  005ED0  E104               	bnz	u12485
 12541  005ED2  0100               	movlb	0	; () banked
 12542  005ED4  516D               	movf	?_stristr& (0+255),w,b
 12543  005ED6  0101               	movlb	1	; () banked
 12544  005ED8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12545  005EDA                     u12485:
 12546  005EDA  E10B               	bnz	l10241
 12547                           
 12548                           ; BSR set to: 1
 12549                           ;main.c: 680: findNodes();
 12550  005EDC  EC0D  F018         	call	_findNodes	;wreg free
 12551                           
 12552                           ;main.c: 681: putsUSART((char *) "+OK\r\n");
 12553  005EE0  0E7C               	movlw	high STR_9
 12554  005EE2  0100               	movlb	0	; () banked
 12555  005EE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12556  005EE6  0E7F               	movlw	low STR_9
 12557  005EE8  6F61               	movwf	?_putsUSART& (0+255),b
 12558  005EEA  EC6E  F00E         	call	_putsUSART	;wreg free
 12559                           
 12560                           ;main.c: 682: }
 12561  005EEE  EFA2  F035         	goto	l10663
 12562  005EF2                     l10241:
 12563                           
 12564                           ; BSR set to: 1
 12565                           ;main.c: 685: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12566  005EF2  0E01               	movlw	high _cmdbuf
 12567  005EF4  0100               	movlb	0	; () banked
 12568  005EF6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12569  005EF8  0E04               	movlw	low _cmdbuf
 12570  005EFA  6F6D               	movwf	?_stristr& (0+255),b
 12571  005EFC  0E7C               	movlw	high STR_49
 12572  005EFE  6F70               	movwf	(?_stristr+3)& (0+255),b
 12573  005F00  0EA7               	movlw	low STR_49
 12574  005F02  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12575  005F04  EC0C  F011         	call	_stristr	;wreg free
 12576  005F08  ECB2  F035         	call	PL2	;call to abstracted procedure
 12577  005F0C  E104               	bnz	u12495
 12578  005F0E  0100               	movlb	0	; () banked
 12579  005F10  516D               	movf	?_stristr& (0+255),w,b
 12580  005F12  0101               	movlb	1	; () banked
 12581  005F14  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12582  005F16                     u12495:
 12583  005F16  E001 D1B4          	bnz	l10371
 12584                           
 12585                           ; BSR set to: 1
 12586                           ;main.c: 687: uint8_t i;
 12587                           ;main.c: 688: uint8_t nodeid;
 12588                           ;main.c: 689: uint8_t page = 0;
 12589  005F1A  0102               	movlb	2	; () banked
 12590  005F1C  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12591                           
 12592                           ; BSR set to: 2
 12593                           ;main.c: 690: uint8_t reg;
 12594                           ;main.c: 691: uint8_t value;
 12595                           ;main.c: 692: uint8_t count = 1;
 12596  005F1E  0E01               	movlw	1
 12597  005F20  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12598                           
 12599                           ; BSR set to: 2
 12600                           ;main.c: 694: strcpy(cmdbuf, cmdbuf + 5);
 12601  005F22  ECBC  F035         	call	PL4	;call to abstracted procedure
 12602  005F26  EC52  F00C         	call	_strcpy	;wreg free
 12603                           
 12604                           ;main.c: 695: char *p = strtok(cmdbuf, " ");
 12605  005F2A  0E01               	movlw	high _cmdbuf
 12606  005F2C  EC1F  F036         	call	PL36	;call to abstracted procedure
 12607  005F30  EC57  F012         	call	_strtok	;wreg free
 12608  005F34  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12609  005F38  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12610                           
 12611                           ; BSR set to: 0
 12612                           ;main.c: 696: if ((0) != p) {
 12613  005F3C  0102               	movlb	2	; () banked
 12614  005F3E  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12615  005F40  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12616  005F42  E00A               	bz	l10255
 12617                           
 12618                           ; BSR set to: 2
 12619                           ;main.c: 697: nodeid = atoi(p);
 12620  005F44  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12621  005F48  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12622  005F4C  EC87  F019         	call	_atoi	;wreg free
 12623  005F50  5166               	movf	?_atoi& (0+255),w,b
 12624  005F52  0102               	movlb	2	; () banked
 12625  005F54  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12626                           
 12627                           ;main.c: 698: } else {
 12628  005F56  D009               	goto	l10259
 12629  005F58                     l10255:
 12630                           
 12631                           ; BSR set to: 2
 12632                           ;main.c: 699: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12633  005F58  0E79               	movlw	high STR_51
 12634  005F5A  0100               	movlb	0	; () banked
 12635  005F5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12636  005F5E  0E30               	movlw	low STR_51
 12637  005F60  6F61               	movwf	?_putsUSART& (0+255),b
 12638  005F62  EC6E  F00E         	call	_putsUSART	;wreg free
 12639  005F66  EFB1  F035         	goto	l524
 12640  005F6A                     l10259:
 12641                           
 12642                           ; BSR set to: 2
 12643                           ;main.c: 701: }
 12644                           ;main.c: 703: if ((0) != (p = strtok((0), " "))) {
 12645  005F6A  EC0D  F036         	call	PL28	;call to abstracted procedure
 12646  005F6E  EC57  F012         	call	_strtok	;wreg free
 12647  005F72  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12648  005F76  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12649  005F7A  0102               	movlb	2	; () banked
 12650  005F7C  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12651  005F7E  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12652  005F80  E034               	bz	l10267
 12653                           
 12654                           ; BSR set to: 2
 12655                           ;main.c: 705: char *preg;
 12656                           ;main.c: 706: if (preg = strchr(p, ':')) {
 12657  005F82  C2B2  F060         	movff	doModeVerbose@p_1112,?_strchr
 12658  005F86  C2B3  F061         	movff	doModeVerbose@p_1112+1,?_strchr+1
 12659  005F8A  0100               	movlb	0	; () banked
 12660  005F8C  6B63               	clrf	(?_strchr+3)& (0+255),b
 12661  005F8E  0E3A               	movlw	58
 12662  005F90  6F62               	movwf	(?_strchr+2)& (0+255),b
 12663  005F92  EC55  F00F         	call	_strchr	;wreg free
 12664  005F96  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12665  005F9A  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12666  005F9E  0102               	movlb	2	; () banked
 12667  005FA0  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12668  005FA2  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12669  005FA4  E018               	bz	l10265
 12670                           
 12671                           ; BSR set to: 2
 12672                           ;main.c: 707: page = atoi(p);
 12673  005FA6  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12674  005FAA  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12675  005FAE  EC87  F019         	call	_atoi	;wreg free
 12676  005FB2  5166               	movf	?_atoi& (0+255),w,b
 12677  005FB4  0102               	movlb	2	; () banked
 12678  005FB6  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12679                           
 12680                           ;main.c: 708: reg = atoi(preg + 1);
 12681  005FB8  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12682  005FBA  0101               	movlb	1	; () banked
 12683  005FBC  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12684  005FBE  0E00               	movlw	0
 12685  005FC0  0102               	movlb	2	; () banked
 12686  005FC2  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12687  005FC4  0101               	movlb	1	; () banked
 12688  005FC6  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12689  005FC8  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 12690  005FCC  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12691  005FD0  EC87  F019         	call	_atoi	;wreg free
 12692  005FD4  D006               	goto	L5
 12693  005FD6                     l10265:
 12694                           
 12695                           ; BSR set to: 2
 12696                           ;main.c: 710: reg = atoi(p);
 12697  005FD6  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12698  005FDA  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12699  005FDE  EC87  F019         	call	_atoi	;wreg free
 12700  005FE2                     L5:
 12701  005FE2  5166               	movf	?_atoi& (0+255),w,b
 12702  005FE4  0102               	movlb	2	; () banked
 12703  005FE6  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12704  005FE8  D009               	goto	l10271
 12705  005FEA                     l10267:
 12706                           
 12707                           ; BSR set to: 2
 12708                           ;main.c: 715: else {
 12709                           ;main.c: 716: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12710  005FEA  0E77               	movlw	high STR_53
 12711  005FEC  0100               	movlb	0	; () banked
 12712  005FEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12713  005FF0  0EAB               	movlw	low STR_53
 12714  005FF2  6F61               	movwf	?_putsUSART& (0+255),b
 12715  005FF4  EC6E  F00E         	call	_putsUSART	;wreg free
 12716  005FF8  EFB1  F035         	goto	l524
 12717  005FFC                     l10271:
 12718                           
 12719                           ; BSR set to: 2
 12720                           ;main.c: 718: }
 12721                           ;main.c: 721: if ((0) != (p = strtok((0), " "))) {
 12722  005FFC  EC0D  F036         	call	PL28	;call to abstracted procedure
 12723  006000  EC57  F012         	call	_strtok	;wreg free
 12724  006004  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1112
 12725  006008  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1112+1
 12726  00600C  0102               	movlb	2	; () banked
 12727  00600E  51B3               	movf	(doModeVerbose@p_1112+1)& (0+255),w,b
 12728  006010  11B2               	iorwf	doModeVerbose@p_1112& (0+255),w,b
 12729  006012  E00D               	bz	l529
 12730                           
 12731                           ; BSR set to: 2
 12732                           ;main.c: 722: count = atoi(p);
 12733  006014  C2B2  F066         	movff	doModeVerbose@p_1112,?_atoi
 12734  006018  C2B3  F067         	movff	doModeVerbose@p_1112+1,?_atoi+1
 12735  00601C  EC87  F019         	call	_atoi	;wreg free
 12736  006020  5166               	movf	?_atoi& (0+255),w,b
 12737  006022  0102               	movlb	2	; () banked
 12738  006024  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12739                           
 12740                           ; BSR set to: 2
 12741                           ;main.c: 723: if (0 == count) count = 1;
 12742  006026  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12743  006028  D002               	goto	l529
 12744                           
 12745                           ; BSR set to: 2
 12746  00602A  0E01               	movlw	1
 12747  00602C  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12748  00602E                     l529:
 12749                           
 12750                           ; BSR set to: 2
 12751                           ;main.c: 724: }
 12752                           ;main.c: 726: BOOL rv = 1;
 12753  00602E  0E01               	movlw	1
 12754  006030  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12755                           
 12756                           ; BSR set to: 2
 12757                           ;main.c: 727: for (i = 0; i < count; i++) {
 12758  006032  6BB0               	clrf	doModeVerbose@i_1106& (0+255),b
 12759  006034  D10E               	goto	l10363
 12760  006036                     l10281:
 12761                           
 12762                           ; BSR set to: 2
 12763                           ;main.c: 729: if (readRegisterExtended(nodeid,
 12764                           ;main.c: 730: page,
 12765                           ;main.c: 731: (reg + i) & 0xff,
 12766                           ;main.c: 732: rwtimeout,
 12767                           ;main.c: 733: &value)) {
 12768  006036  0100               	movlb	0	; () banked
 12769  006038  C2AD  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 12770  00603C  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12771  00603E  0102               	movlb	2	; () banked
 12772  006040  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12773  006042  25B0               	addwf	doModeVerbose@i_1106& (0+255),w,b
 12774  006044  0100               	movlb	0	; () banked
 12775  006046  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12776  006048  C103  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12777  00604C  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12778  00604E  0E02               	movlw	high doModeVerbose@value
 12779  006050  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12780  006052  0EB1               	movlw	low doModeVerbose@value
 12781  006054  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12782  006056  0102               	movlb	2	; () banked
 12783  006058  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12784  00605A  EC87  F018         	call	_readRegisterExtended
 12785  00605E  0900               	iorlw	0
 12786  006060  E101 D09D          	bz	l533
 12787                           
 12788                           ;main.c: 734: putsUSART((char *) "Value for reg ");
 12789  006064  0E7B               	movlw	high STR_55
 12790  006066  0100               	movlb	0	; () banked
 12791  006068  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12792  00606A  0E5D               	movlw	low STR_55
 12793  00606C  6F61               	movwf	?_putsUSART& (0+255),b
 12794  00606E  EC6E  F00E         	call	_putsUSART	;wreg free
 12795                           
 12796                           ;main.c: 735: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12797  006072  0101               	movlb	1	; () banked
 12798  006074  6700               	tstfsz	_bHex& (0+255),b
 12799  006076  D005               	goto	l10289
 12800                           
 12801                           ; BSR set to: 1
 12802  006078  0E7C               	movlw	high STR_57
 12803  00607A  0102               	movlb	2	; () banked
 12804  00607C  6F95               	movwf	(_doModeVerbose$1124+1)& (0+255),b
 12805  00607E  0EED               	movlw	low STR_57
 12806  006080  D004               	goto	L6
 12807  006082                     l10289:
 12808                           
 12809                           ; BSR set to: 1
 12810  006082  0E7C               	movlw	high STR_56
 12811  006084  0102               	movlb	2	; () banked
 12812  006086  6F95               	movwf	(_doModeVerbose$1124+1)& (0+255),b
 12813  006088  0E64               	movlw	low STR_56
 12814  00608A                     L6:
 12815  00608A  6F94               	movwf	_doModeVerbose$1124& (0+255),b
 12816                           
 12817                           ; BSR set to: 2
 12818  00608C  0E01               	movlw	high _wrkbuf
 12819  00608E  0100               	movlb	0	; () banked
 12820  006090  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12821  006092  0E54               	movlw	low _wrkbuf
 12822  006094  6F76               	movwf	?_sprintf& (0+255),b
 12823  006096  C294  F078         	movff	_doModeVerbose$1124,?_sprintf+2
 12824  00609A  C295  F079         	movff	_doModeVerbose$1124+1,?_sprintf+3
 12825  00609E  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12826  0060A2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12827  0060A4  ECC8  F028         	call	_sprintf	;wreg free
 12828                           
 12829                           ; BSR set to: 0
 12830                           ;main.c: 736: putsUSART(wrkbuf);
 12831  0060A8  0E01               	movlw	high _wrkbuf
 12832  0060AA  0100               	movlb	0	; () banked
 12833  0060AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12834  0060AE  0E54               	movlw	low _wrkbuf
 12835  0060B0  6F61               	movwf	?_putsUSART& (0+255),b
 12836  0060B2  EC6E  F00E         	call	_putsUSART	;wreg free
 12837  0060B6                     l538:
 12838  0060B6  A2AC               	btfss	4012,1,c	;volatile
 12839  0060B8  D7FE               	goto	l538
 12840                           
 12841                           ;main.c: 738: WriteUSART(':');
 12842  0060BA  0E3A               	movlw	58
 12843  0060BC  ECC1  F00B         	call	_WriteUSART
 12844                           
 12845                           ;main.c: 739: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12846  0060C0  0101               	movlb	1	; () banked
 12847  0060C2  6700               	tstfsz	_bHex& (0+255),b
 12848  0060C4  D005               	goto	l10301
 12849                           
 12850                           ; BSR set to: 1
 12851  0060C6  0E7C               	movlw	high STR_57
 12852  0060C8  0102               	movlb	2	; () banked
 12853  0060CA  6F97               	movwf	(_doModeVerbose$1136+1)& (0+255),b
 12854  0060CC  0EED               	movlw	low STR_57
 12855  0060CE  D004               	goto	L7
 12856  0060D0                     l10301:
 12857                           
 12858                           ; BSR set to: 1
 12859  0060D0  0E7C               	movlw	high STR_56
 12860  0060D2  0102               	movlb	2	; () banked
 12861  0060D4  6F97               	movwf	(_doModeVerbose$1136+1)& (0+255),b
 12862  0060D6  0E64               	movlw	low STR_56
 12863  0060D8                     L7:
 12864  0060D8  6F96               	movwf	_doModeVerbose$1136& (0+255),b
 12865                           
 12866                           ; BSR set to: 2
 12867  0060DA  0E01               	movlw	high _wrkbuf
 12868  0060DC  0100               	movlb	0	; () banked
 12869  0060DE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12870  0060E0  0E54               	movlw	low _wrkbuf
 12871  0060E2  6F76               	movwf	?_sprintf& (0+255),b
 12872  0060E4  C296  F078         	movff	_doModeVerbose$1136,?_sprintf+2
 12873  0060E8  C297  F079         	movff	_doModeVerbose$1136+1,?_sprintf+3
 12874  0060EC  EC28  F036         	call	PL42	;call to abstracted procedure
 12875  0060F0  ECC8  F028         	call	_sprintf	;wreg free
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;main.c: 740: putsUSART(wrkbuf);
 12879  0060F4  0E01               	movlw	high _wrkbuf
 12880  0060F6  0100               	movlb	0	; () banked
 12881  0060F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12882  0060FA  0E54               	movlw	low _wrkbuf
 12883  0060FC  6F61               	movwf	?_putsUSART& (0+255),b
 12884  0060FE  EC6E  F00E         	call	_putsUSART	;wreg free
 12885                           
 12886                           ;main.c: 741: putsUSART((char *) " = ");
 12887  006102  0E7B               	movlw	high (STR_243+4)
 12888  006104  0100               	movlb	0	; () banked
 12889  006106  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12890  006108  0EE9               	movlw	low (STR_243+4)
 12891  00610A  6F61               	movwf	?_putsUSART& (0+255),b
 12892  00610C  EC6E  F00E         	call	_putsUSART	;wreg free
 12893                           
 12894                           ;main.c: 742: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12895  006110  0101               	movlb	1	; () banked
 12896  006112  6700               	tstfsz	_bHex& (0+255),b
 12897  006114  D005               	goto	l10313
 12898                           
 12899                           ; BSR set to: 1
 12900  006116  0E7C               	movlw	high STR_57
 12901  006118  0102               	movlb	2	; () banked
 12902  00611A  6F99               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12903  00611C  0EED               	movlw	low STR_57
 12904  00611E  D004               	goto	L8
 12905  006120                     l10313:
 12906                           
 12907                           ; BSR set to: 1
 12908  006120  0E7C               	movlw	high STR_56
 12909  006122  0102               	movlb	2	; () banked
 12910  006124  6F99               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12911  006126  0E64               	movlw	low STR_56
 12912  006128                     L8:
 12913  006128  6F98               	movwf	_doModeVerbose$1141& (0+255),b
 12914                           
 12915                           ; BSR set to: 2
 12916  00612A  0E01               	movlw	high _wrkbuf
 12917  00612C  0100               	movlb	0	; () banked
 12918  00612E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12919  006130  0E54               	movlw	low _wrkbuf
 12920  006132  6F76               	movwf	?_sprintf& (0+255),b
 12921  006134  C298  F078         	movff	_doModeVerbose$1141,?_sprintf+2
 12922  006138  C299  F079         	movff	_doModeVerbose$1141+1,?_sprintf+3
 12923  00613C  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 12924  006140  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12925  006142  ECC8  F028         	call	_sprintf	;wreg free
 12926                           
 12927                           ; BSR set to: 0
 12928                           ;main.c: 743: putsUSART(wrkbuf);
 12929  006146  0E01               	movlw	high _wrkbuf
 12930  006148  0100               	movlb	0	; () banked
 12931  00614A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12932  00614C  0E54               	movlw	low _wrkbuf
 12933  00614E  6F61               	movwf	?_putsUSART& (0+255),b
 12934  006150  EC6E  F00E         	call	_putsUSART	;wreg free
 12935  006154                     l549:
 12936  006154  A2AC               	btfss	4012,1,c	;volatile
 12937  006156  D7FE               	goto	l549
 12938                           
 12939                           ;main.c: 745: WriteUSART(' ');
 12940  006158  0E20               	movlw	32
 12941  00615A  ECC1  F00B         	call	_WriteUSART
 12942  00615E                     l552:
 12943  00615E  A2AC               	btfss	4012,1,c	;volatile
 12944  006160  D7FE               	goto	l552
 12945                           
 12946                           ;main.c: 747: if ((value > 32) && (value < 127)) {
 12947  006162  0E20               	movlw	32
 12948  006164  0102               	movlb	2	; () banked
 12949  006166  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12950  006168  D007               	goto	l10327
 12951                           
 12952                           ; BSR set to: 2
 12953  00616A  0E7F               	movlw	127
 12954  00616C  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12955  00616E  D004               	goto	l10327
 12956                           
 12957                           ; BSR set to: 2
 12958                           ;main.c: 748: WriteUSART(value);
 12959  006170  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12960  006172  ECC1  F00B         	call	_WriteUSART
 12961                           
 12962                           ;main.c: 749: }
 12963  006176  D003               	goto	l557
 12964  006178                     l10327:
 12965                           
 12966                           ; BSR set to: 2
 12967                           ;main.c: 750: else {
 12968                           ;main.c: 751: WriteUSART('.');
 12969  006178  0E2E               	movlw	46
 12970  00617A  ECC1  F00B         	call	_WriteUSART
 12971  00617E                     l557:
 12972  00617E  A2AC               	btfss	4012,1,c	;volatile
 12973  006180  D7FE               	goto	l557
 12974                           
 12975                           ;main.c: 754: WriteUSART(' ');
 12976  006182  0E20               	movlw	32
 12977  006184  ECC1  F00B         	call	_WriteUSART
 12978                           
 12979                           ;main.c: 755: printBinary(value);
 12980  006188  0102               	movlb	2	; () banked
 12981  00618A  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12982  00618C  EC22  F00E         	call	_printBinary
 12983                           
 12984                           ; BSR set to: 0
 12985                           ;main.c: 756: putsUSART((char *) "\r\n");
 12986  006190  0E71               	movlw	high (STR_197+50)
 12987  006192  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12988  006194  0E8A               	movlw	low (STR_197+50)
 12989  006196  6F61               	movwf	?_putsUSART& (0+255),b
 12990  006198  EC6E  F00E         	call	_putsUSART	;wreg free
 12991                           
 12992                           ;main.c: 757: }
 12993  00619C  D058               	goto	l10361
 12994  00619E                     l533:
 12995                           
 12996                           ;main.c: 758: else {
 12997                           ;main.c: 759: rv = 0;
 12998  00619E  0102               	movlb	2	; () banked
 12999  0061A0  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 13000                           
 13001                           ; BSR set to: 2
 13002                           ;main.c: 760: putsUSART((char *) "-ERROR - Unable to read register ");
 13003  0061A2  0E77               	movlw	high STR_64
 13004  0061A4  0100               	movlb	0	; () banked
 13005  0061A6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13006  0061A8  0E05               	movlw	low STR_64
 13007  0061AA  6F61               	movwf	?_putsUSART& (0+255),b
 13008  0061AC  EC6E  F00E         	call	_putsUSART	;wreg free
 13009                           
 13010                           ;main.c: 761: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13011  0061B0  0101               	movlb	1	; () banked
 13012  0061B2  6700               	tstfsz	_bHex& (0+255),b
 13013  0061B4  D005               	goto	l10341
 13014                           
 13015                           ; BSR set to: 1
 13016  0061B6  0E7C               	movlw	high STR_57
 13017  0061B8  0102               	movlb	2	; () banked
 13018  0061BA  6F9B               	movwf	(_doModeVerbose$1147+1)& (0+255),b
 13019  0061BC  0EED               	movlw	low STR_57
 13020  0061BE  D004               	goto	L9
 13021  0061C0                     l10341:
 13022                           
 13023                           ; BSR set to: 1
 13024  0061C0  0E7C               	movlw	high STR_56
 13025  0061C2  0102               	movlb	2	; () banked
 13026  0061C4  6F9B               	movwf	(_doModeVerbose$1147+1)& (0+255),b
 13027  0061C6  0E64               	movlw	low STR_56
 13028  0061C8                     L9:
 13029  0061C8  6F9A               	movwf	_doModeVerbose$1147& (0+255),b
 13030                           
 13031                           ; BSR set to: 2
 13032  0061CA  0E01               	movlw	high _wrkbuf
 13033  0061CC  0100               	movlb	0	; () banked
 13034  0061CE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13035  0061D0  0E54               	movlw	low _wrkbuf
 13036  0061D2  6F76               	movwf	?_sprintf& (0+255),b
 13037  0061D4  C29A  F078         	movff	_doModeVerbose$1147,?_sprintf+2
 13038  0061D8  C29B  F079         	movff	_doModeVerbose$1147+1,?_sprintf+3
 13039  0061DC  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13040  0061E0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13041  0061E2  ECC8  F028         	call	_sprintf	;wreg free
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;main.c: 762: putsUSART(wrkbuf);
 13045  0061E6  0E01               	movlw	high _wrkbuf
 13046  0061E8  0100               	movlb	0	; () banked
 13047  0061EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13048  0061EC  0E54               	movlw	low _wrkbuf
 13049  0061EE  6F61               	movwf	?_putsUSART& (0+255),b
 13050  0061F0  EC6E  F00E         	call	_putsUSART	;wreg free
 13051  0061F4                     l565:
 13052  0061F4  A2AC               	btfss	4012,1,c	;volatile
 13053  0061F6  D7FE               	goto	l565
 13054                           
 13055                           ;main.c: 764: WriteUSART(':');
 13056  0061F8  0E3A               	movlw	58
 13057  0061FA  ECC1  F00B         	call	_WriteUSART
 13058                           
 13059                           ;main.c: 765: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13060  0061FE  0101               	movlb	1	; () banked
 13061  006200  6700               	tstfsz	_bHex& (0+255),b
 13062  006202  D005               	goto	l10353
 13063                           
 13064                           ; BSR set to: 1
 13065  006204  0E7C               	movlw	high STR_57
 13066  006206  0102               	movlb	2	; () banked
 13067  006208  6F9D               	movwf	(_doModeVerbose$1151+1)& (0+255),b
 13068  00620A  0EED               	movlw	low STR_57
 13069  00620C  D004               	goto	L10
 13070  00620E                     l10353:
 13071                           
 13072                           ; BSR set to: 1
 13073  00620E  0E7C               	movlw	high STR_56
 13074  006210  0102               	movlb	2	; () banked
 13075  006212  6F9D               	movwf	(_doModeVerbose$1151+1)& (0+255),b
 13076  006214  0E64               	movlw	low STR_56
 13077  006216                     L10:
 13078  006216  6F9C               	movwf	_doModeVerbose$1151& (0+255),b
 13079                           
 13080                           ; BSR set to: 2
 13081  006218  0E01               	movlw	high _wrkbuf
 13082  00621A  0100               	movlb	0	; () banked
 13083  00621C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13084  00621E  0E54               	movlw	low _wrkbuf
 13085  006220  6F76               	movwf	?_sprintf& (0+255),b
 13086  006222  C29C  F078         	movff	_doModeVerbose$1151,?_sprintf+2
 13087  006226  C29D  F079         	movff	_doModeVerbose$1151+1,?_sprintf+3
 13088  00622A  EC28  F036         	call	PL42	;call to abstracted procedure
 13089  00622E  ECC8  F028         	call	_sprintf	;wreg free
 13090                           
 13091                           ; BSR set to: 0
 13092                           ;main.c: 766: putsUSART(wrkbuf);
 13093  006232  0E01               	movlw	high _wrkbuf
 13094  006234  0100               	movlb	0	; () banked
 13095  006236  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13096  006238  0E54               	movlw	low _wrkbuf
 13097  00623A  6F61               	movwf	?_putsUSART& (0+255),b
 13098  00623C  EC6E  F00E         	call	_putsUSART	;wreg free
 13099                           
 13100                           ;main.c: 767: putsUSART((char *) "\r\n");
 13101  006240  0E71               	movlw	high (STR_197+50)
 13102  006242  0100               	movlb	0	; () banked
 13103  006244  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13104  006246  0E8A               	movlw	low (STR_197+50)
 13105  006248  6F61               	movwf	?_putsUSART& (0+255),b
 13106  00624A  EC6E  F00E         	call	_putsUSART	;wreg free
 13107  00624E                     l10361:
 13108  00624E  0102               	movlb	2	; () banked
 13109  006250  2BB0               	incf	doModeVerbose@i_1106& (0+255),f,b
 13110  006252                     l10363:
 13111                           
 13112                           ; BSR set to: 2
 13113  006252  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13114  006254  5DB0               	subwf	doModeVerbose@i_1106& (0+255),w,b
 13115  006256  E201 D6EE          	bnc	l10281
 13116                           
 13117                           ; BSR set to: 2
 13118                           ;main.c: 768: }
 13119                           ;main.c: 769: }
 13120                           ;main.c: 771: if (rv) {
 13121  00625A  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13122  00625C  E009               	bz	l10369
 13123                           
 13124                           ; BSR set to: 2
 13125                           ;main.c: 772: putsUSART((char *) "+OK\r\n");
 13126  00625E  0E7C               	movlw	high STR_9
 13127  006260  0100               	movlb	0	; () banked
 13128  006262  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13129  006264  0E7F               	movlw	low STR_9
 13130  006266  6F61               	movwf	?_putsUSART& (0+255),b
 13131  006268  EC6E  F00E         	call	_putsUSART	;wreg free
 13132                           
 13133                           ;main.c: 773: }
 13134  00626C  EFA2  F035         	goto	l10663
 13135  006270                     l10369:
 13136                           
 13137                           ; BSR set to: 2
 13138                           ;main.c: 774: else {
 13139                           ;main.c: 775: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13140  006270  0E71               	movlw	high STR_71
 13141  006272  0100               	movlb	0	; () banked
 13142  006274  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13143  006276  0E22               	movlw	low STR_71
 13144  006278  6F61               	movwf	?_putsUSART& (0+255),b
 13145  00627A  EC6E  F00E         	call	_putsUSART	;wreg free
 13146  00627E  EFA2  F035         	goto	l10663
 13147  006282                     l10371:
 13148                           
 13149                           ; BSR set to: 1
 13150                           ;main.c: 781: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13151  006282  0E01               	movlw	high _cmdbuf
 13152  006284  0100               	movlb	0	; () banked
 13153  006286  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13154  006288  0E04               	movlw	low _cmdbuf
 13155  00628A  6F6D               	movwf	?_stristr& (0+255),b
 13156  00628C  0E7C               	movlw	high STR_72
 13157  00628E  6F70               	movwf	(?_stristr+3)& (0+255),b
 13158  006290  0EAC               	movlw	low STR_72
 13159  006292  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13160  006294  EC0C  F011         	call	_stristr	;wreg free
 13161  006298  ECB2  F035         	call	PL2	;call to abstracted procedure
 13162  00629C  E104               	bnz	u12705
 13163  00629E  0100               	movlb	0	; () banked
 13164  0062A0  516D               	movf	?_stristr& (0+255),w,b
 13165  0062A2  0101               	movlb	1	; () banked
 13166  0062A4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13167  0062A6                     u12705:
 13168  0062A6  E001 D0AF          	bnz	l10413
 13169                           
 13170                           ; BSR set to: 1
 13171                           ;main.c: 783: uint8_t nodeid;
 13172                           ;main.c: 784: uint8_t page = 0;
 13173  0062AA  0102               	movlb	2	; () banked
 13174  0062AC  6BA1               	clrf	doModeVerbose@page_1157& (0+255),b
 13175                           
 13176                           ; BSR set to: 2
 13177                           ;main.c: 785: uint8_t reg;
 13178                           ;main.c: 786: uint8_t value;
 13179                           ;main.c: 788: strcpy(cmdbuf, cmdbuf + 5);
 13180  0062AE  ECBC  F035         	call	PL4	;call to abstracted procedure
 13181  0062B2  EC52  F00C         	call	_strcpy	;wreg free
 13182                           
 13183                           ;main.c: 789: char *p = strtok(cmdbuf, " ");
 13184  0062B6  0E01               	movlw	high _cmdbuf
 13185  0062B8  EC1F  F036         	call	PL36	;call to abstracted procedure
 13186  0062BC  EC57  F012         	call	_strtok	;wreg free
 13187  0062C0  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13188  0062C4  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;main.c: 790: if ((0) != p) {
 13192  0062C8  0102               	movlb	2	; () banked
 13193  0062CA  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13194  0062CC  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13195  0062CE  E00A               	bz	l10383
 13196                           
 13197                           ; BSR set to: 2
 13198                           ;main.c: 791: nodeid = atoi(p);
 13199  0062D0  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13200  0062D4  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13201  0062D8  EC87  F019         	call	_atoi	;wreg free
 13202  0062DC  5166               	movf	?_atoi& (0+255),w,b
 13203  0062DE  0102               	movlb	2	; () banked
 13204  0062E0  6F8D               	movwf	doModeVerbose@nodeid_1156& (0+255),b
 13205                           
 13206                           ;main.c: 792: }
 13207  0062E2  D009               	goto	l10387
 13208  0062E4                     l10383:
 13209                           
 13210                           ; BSR set to: 2
 13211                           ;main.c: 793: else {
 13212                           ;main.c: 794: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13213  0062E4  0E79               	movlw	high STR_51
 13214  0062E6  0100               	movlb	0	; () banked
 13215  0062E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13216  0062EA  0E30               	movlw	low STR_51
 13217  0062EC  6F61               	movwf	?_putsUSART& (0+255),b
 13218  0062EE  EC6E  F00E         	call	_putsUSART	;wreg free
 13219  0062F2  EFB1  F035         	goto	l524
 13220  0062F6                     l10387:
 13221                           
 13222                           ; BSR set to: 2
 13223                           ;main.c: 796: }
 13224                           ;main.c: 798: if ((0) != (p = strtok((0), " "))) {
 13225  0062F6  EC0D  F036         	call	PL28	;call to abstracted procedure
 13226  0062FA  EC57  F012         	call	_strtok	;wreg free
 13227  0062FE  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13228  006302  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13229  006306  0102               	movlb	2	; () banked
 13230  006308  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13231  00630A  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13232  00630C  E034               	bz	l10395
 13233                           
 13234                           ; BSR set to: 2
 13235                           ;main.c: 800: char *preg;
 13236                           ;main.c: 801: if (preg = strchr(p, ':')) {
 13237  00630E  C2B4  F060         	movff	doModeVerbose@p_1160,?_strchr
 13238  006312  C2B5  F061         	movff	doModeVerbose@p_1160+1,?_strchr+1
 13239  006316  0100               	movlb	0	; () banked
 13240  006318  6B63               	clrf	(?_strchr+3)& (0+255),b
 13241  00631A  0E3A               	movlw	58
 13242  00631C  6F62               	movwf	(?_strchr+2)& (0+255),b
 13243  00631E  EC55  F00F         	call	_strchr	;wreg free
 13244  006322  C060  F286         	movff	?_strchr,doModeVerbose@preg_1164
 13245  006326  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1164+1
 13246  00632A  0102               	movlb	2	; () banked
 13247  00632C  5187               	movf	(doModeVerbose@preg_1164+1)& (0+255),w,b
 13248  00632E  1186               	iorwf	doModeVerbose@preg_1164& (0+255),w,b
 13249  006330  E018               	bz	l10393
 13250                           
 13251                           ; BSR set to: 2
 13252                           ;main.c: 802: page = atoi(p);
 13253  006332  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13254  006336  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13255  00633A  EC87  F019         	call	_atoi	;wreg free
 13256  00633E  5166               	movf	?_atoi& (0+255),w,b
 13257  006340  0102               	movlb	2	; () banked
 13258  006342  6FA1               	movwf	doModeVerbose@page_1157& (0+255),b
 13259                           
 13260                           ;main.c: 803: reg = atoi(preg + 1);
 13261  006344  2986               	incf	doModeVerbose@preg_1164& (0+255),w,b
 13262  006346  0101               	movlb	1	; () banked
 13263  006348  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13264  00634A  0E00               	movlw	0
 13265  00634C  0102               	movlb	2	; () banked
 13266  00634E  2187               	addwfc	(doModeVerbose@preg_1164+1)& (0+255),w,b
 13267  006350  0101               	movlb	1	; () banked
 13268  006352  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13269  006354  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 13270  006358  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13271  00635C  EC87  F019         	call	_atoi	;wreg free
 13272  006360  D006               	goto	L11
 13273  006362                     l10393:
 13274                           
 13275                           ; BSR set to: 2
 13276                           ;main.c: 805: else {
 13277                           ;main.c: 806: reg = atoi(p);
 13278  006362  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13279  006366  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13280  00636A  EC87  F019         	call	_atoi	;wreg free
 13281  00636E                     L11:
 13282  00636E  5166               	movf	?_atoi& (0+255),w,b
 13283  006370  0102               	movlb	2	; () banked
 13284  006372  6FA2               	movwf	doModeVerbose@reg_1158& (0+255),b
 13285  006374  D008               	goto	l10399
 13286  006376                     l10395:
 13287                           
 13288                           ; BSR set to: 2
 13289                           ;main.c: 810: else {
 13290                           ;main.c: 811: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13291  006376  0E77               	movlw	high STR_53
 13292  006378  0100               	movlb	0	; () banked
 13293  00637A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13294  00637C  0EAB               	movlw	low STR_53
 13295  00637E  6F61               	movwf	?_putsUSART& (0+255),b
 13296  006380  EC6E  F00E         	call	_putsUSART	;wreg free
 13297  006384  D3EE               	goto	l524
 13298  006386                     l10399:
 13299                           
 13300                           ; BSR set to: 2
 13301                           ;main.c: 813: }
 13302                           ;main.c: 816: if ((0) != (p = strtok((0), " "))) {
 13303  006386  EC0D  F036         	call	PL28	;call to abstracted procedure
 13304  00638A  EC57  F012         	call	_strtok	;wreg free
 13305  00638E  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1160
 13306  006392  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1160+1
 13307  006396  0102               	movlb	2	; () banked
 13308  006398  51B5               	movf	(doModeVerbose@p_1160+1)& (0+255),w,b
 13309  00639A  11B4               	iorwf	doModeVerbose@p_1160& (0+255),w,b
 13310  00639C  E00A               	bz	l10403
 13311                           
 13312                           ; BSR set to: 2
 13313                           ;main.c: 817: value = atoi(p);
 13314  00639E  C2B4  F066         	movff	doModeVerbose@p_1160,?_atoi
 13315  0063A2  C2B5  F067         	movff	doModeVerbose@p_1160+1,?_atoi+1
 13316  0063A6  EC87  F019         	call	_atoi	;wreg free
 13317  0063AA  5166               	movf	?_atoi& (0+255),w,b
 13318  0063AC  0102               	movlb	2	; () banked
 13319  0063AE  6FA9               	movwf	doModeVerbose@value_1159& (0+255),b
 13320                           
 13321                           ;main.c: 818: }
 13322  0063B0  D008               	goto	l10407
 13323  0063B2                     l10403:
 13324                           
 13325                           ; BSR set to: 2
 13326                           ;main.c: 819: else {
 13327                           ;main.c: 820: putsUSART((char *) "-ERROR - Need a value\r\n");
 13328  0063B2  0E79               	movlw	high STR_78
 13329  0063B4  0100               	movlb	0	; () banked
 13330  0063B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13331  0063B8  0E60               	movlw	low STR_78
 13332  0063BA  6F61               	movwf	?_putsUSART& (0+255),b
 13333  0063BC  EC6E  F00E         	call	_putsUSART	;wreg free
 13334  0063C0  D3D0               	goto	l524
 13335  0063C2                     l10407:
 13336                           
 13337                           ; BSR set to: 2
 13338                           ;main.c: 822: }
 13339                           ;main.c: 824: if (writeRegisterExtended(nodeid,
 13340                           ;main.c: 825: page,
 13341                           ;main.c: 826: reg,
 13342                           ;main.c: 827: rwtimeout,
 13343                           ;main.c: 828: &value)) {
 13344  0063C2  0100               	movlb	0	; () banked
 13345  0063C4  C2A1  F0B6         	movff	doModeVerbose@page_1157,?_writeRegisterExtended
 13346  0063C8  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13347  0063CA  C2A2  F0B8         	movff	doModeVerbose@reg_1158,?_writeRegisterExtended+2
 13348  0063CE  C103  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 13349  0063D2  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13350  0063D4  0E02               	movlw	high doModeVerbose@value_1159
 13351  0063D6  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13352  0063D8  0EA9               	movlw	low doModeVerbose@value_1159
 13353  0063DA  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13354  0063DC  0102               	movlb	2	; () banked
 13355  0063DE  518D               	movf	doModeVerbose@nodeid_1156& (0+255),w,b
 13356  0063E0  EC0A  F01A         	call	_writeRegisterExtended
 13357  0063E4  0900               	iorlw	0
 13358  0063E6  E008               	bz	l10411
 13359                           
 13360                           ;main.c: 829: putsUSART((char *) "+OK - Value written successfully\r\n");
 13361  0063E8  0E76               	movlw	high STR_79
 13362  0063EA  0100               	movlb	0	; () banked
 13363  0063EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13364  0063EE  0EC0               	movlw	low STR_79
 13365  0063F0  6F61               	movwf	?_putsUSART& (0+255),b
 13366  0063F2  EC6E  F00E         	call	_putsUSART	;wreg free
 13367                           
 13368                           ;main.c: 830: }
 13369  0063F6  D3A6               	goto	l10663
 13370  0063F8                     l10411:
 13371                           
 13372                           ;main.c: 831: else {
 13373                           ;main.c: 832: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13374  0063F8  0E77               	movlw	high STR_80
 13375  0063FA  0100               	movlb	0	; () banked
 13376  0063FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13377  0063FE  0E8A               	movlw	low STR_80
 13378  006400  6F61               	movwf	?_putsUSART& (0+255),b
 13379  006402  EC6E  F00E         	call	_putsUSART	;wreg free
 13380  006406  D39E               	goto	l10663
 13381  006408                     l10413:
 13382                           
 13383                           ; BSR set to: 1
 13384                           ;main.c: 838: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13385  006408  0E01               	movlw	high _cmdbuf
 13386  00640A  0100               	movlb	0	; () banked
 13387  00640C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13388  00640E  0E04               	movlw	low _cmdbuf
 13389  006410  6F6D               	movwf	?_stristr& (0+255),b
 13390  006412  0E7C               	movlw	high STR_81
 13391  006414  6F70               	movwf	(?_stristr+3)& (0+255),b
 13392  006416  0EBB               	movlw	low STR_81
 13393  006418  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13394  00641A  EC0C  F011         	call	_stristr	;wreg free
 13395  00641E  DBA2               	call	PL2	;call to abstracted procedure
 13396  006420  E104               	bnz	u12765
 13397  006422  0100               	movlb	0	; () banked
 13398  006424  516D               	movf	?_stristr& (0+255),w,b
 13399  006426  0101               	movlb	1	; () banked
 13400  006428  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13401  00642A                     u12765:
 13402  00642A  E151               	bnz	l10441
 13403                           
 13404                           ; BSR set to: 1
 13405                           ;main.c: 839: uint8_t nodeid;
 13406                           ;main.c: 841: strcpy(cmdbuf, cmdbuf + 5);
 13407  00642C  DBA5               	call	PL4	;call to abstracted procedure
 13408  00642E  EC52  F00C         	call	_strcpy	;wreg free
 13409                           
 13410                           ;main.c: 842: nodeid = atoi(cmdbuf);
 13411  006432  0E01               	movlw	high _cmdbuf
 13412  006434  0100               	movlb	0	; () banked
 13413  006436  6F67               	movwf	(?_atoi+1)& (0+255),b
 13414  006438  0E04               	movlw	low _cmdbuf
 13415  00643A  6F66               	movwf	?_atoi& (0+255),b
 13416  00643C  EC87  F019         	call	_atoi	;wreg free
 13417  006440  5166               	movf	?_atoi& (0+255),w,b
 13418  006442  0102               	movlb	2	; () banked
 13419  006444  6FAF               	movwf	doModeVerbose@nodeid_1171& (0+255),b
 13420                           
 13421                           ; BSR set to: 2
 13422                           ;main.c: 844: putsUSART((char *) "Info for node id = ");
 13423  006446  0E7A               	movlw	high STR_82
 13424  006448  0100               	movlb	0	; () banked
 13425  00644A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13426  00644C  0EAA               	movlw	low STR_82
 13427  00644E  6F61               	movwf	?_putsUSART& (0+255),b
 13428  006450  EC6E  F00E         	call	_putsUSART	;wreg free
 13429                           
 13430                           ;main.c: 845: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13431  006454  0101               	movlb	1	; () banked
 13432  006456  6700               	tstfsz	_bHex& (0+255),b
 13433  006458  D005               	goto	l10425
 13434                           
 13435                           ; BSR set to: 1
 13436  00645A  0E7C               	movlw	high STR_57
 13437  00645C  0102               	movlb	2	; () banked
 13438  00645E  6F9F               	movwf	(_doModeVerbose$1176+1)& (0+255),b
 13439  006460  0EED               	movlw	low STR_57
 13440  006462  D004               	goto	L12
 13441  006464                     l10425:
 13442                           
 13443                           ; BSR set to: 1
 13444  006464  0E7C               	movlw	high STR_56
 13445  006466  0102               	movlb	2	; () banked
 13446  006468  6F9F               	movwf	(_doModeVerbose$1176+1)& (0+255),b
 13447  00646A  0E64               	movlw	low STR_56
 13448  00646C                     L12:
 13449  00646C  6F9E               	movwf	_doModeVerbose$1176& (0+255),b
 13450                           
 13451                           ; BSR set to: 2
 13452  00646E  0E01               	movlw	high _wrkbuf
 13453  006470  0100               	movlb	0	; () banked
 13454  006472  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13455  006474  0E54               	movlw	low _wrkbuf
 13456  006476  6F76               	movwf	?_sprintf& (0+255),b
 13457  006478  C29E  F078         	movff	_doModeVerbose$1176,?_sprintf+2
 13458  00647C  C29F  F079         	movff	_doModeVerbose$1176+1,?_sprintf+3
 13459  006480  C2AF  F07A         	movff	doModeVerbose@nodeid_1171,?_sprintf+4
 13460  006484  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13461  006486  ECC8  F028         	call	_sprintf	;wreg free
 13462                           
 13463                           ; BSR set to: 0
 13464                           ;main.c: 846: putsUSART(wrkbuf);
 13465  00648A  0E01               	movlw	high _wrkbuf
 13466  00648C  0100               	movlb	0	; () banked
 13467  00648E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13468  006490  0E54               	movlw	low _wrkbuf
 13469  006492  6F61               	movwf	?_putsUSART& (0+255),b
 13470  006494  EC6E  F00E         	call	_putsUSART	;wreg free
 13471                           
 13472                           ;main.c: 847: putsUSART((char *) "\r\n");
 13473  006498  0E71               	movlw	high (STR_197+50)
 13474  00649A  0100               	movlb	0	; () banked
 13475  00649C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13476  00649E  0E8A               	movlw	low (STR_197+50)
 13477  0064A0  6F61               	movwf	?_putsUSART& (0+255),b
 13478  0064A2  EC6E  F00E         	call	_putsUSART	;wreg free
 13479                           
 13480                           ;main.c: 848: printNodeFirmwareVersion(nodeid);
 13481  0064A6  0102               	movlb	2	; () banked
 13482  0064A8  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13483  0064AA  EC5B  F016         	call	_printNodeFirmwareVersion
 13484                           
 13485                           ;main.c: 849: printGUID(nodeid);
 13486  0064AE  0102               	movlb	2	; () banked
 13487  0064B0  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13488  0064B2  EC05  F019         	call	_printGUID
 13489                           
 13490                           ;main.c: 850: printMDF(nodeid);
 13491  0064B6  0102               	movlb	2	; () banked
 13492  0064B8  51AF               	movf	doModeVerbose@nodeid_1171& (0+255),w,b
 13493  0064BA  ECA0  F012         	call	_printMDF
 13494                           
 13495                           ;main.c: 851: putsUSART((char *) "+OK\r\n");
 13496  0064BE  0E7C               	movlw	high STR_9
 13497  0064C0  0100               	movlb	0	; () banked
 13498  0064C2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13499  0064C4  0E7F               	movlw	low STR_9
 13500  0064C6  6F61               	movwf	?_putsUSART& (0+255),b
 13501  0064C8  EC6E  F00E         	call	_putsUSART	;wreg free
 13502                           
 13503                           ;main.c: 852: }
 13504  0064CC  D33B               	goto	l10663
 13505  0064CE                     l10441:
 13506                           
 13507                           ; BSR set to: 1
 13508                           ;main.c: 856: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13509  0064CE  0E01               	movlw	high _cmdbuf
 13510  0064D0  0100               	movlb	0	; () banked
 13511  0064D2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13512  0064D4  0E04               	movlw	low _cmdbuf
 13513  0064D6  6F6D               	movwf	?_stristr& (0+255),b
 13514  0064D8  0E7C               	movlw	high STR_87
 13515  0064DA  6F70               	movwf	(?_stristr+3)& (0+255),b
 13516  0064DC  0E56               	movlw	low STR_87
 13517  0064DE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13518  0064E0  EC0C  F011         	call	_stristr	;wreg free
 13519  0064E4  DB3F               	call	PL2	;call to abstracted procedure
 13520  0064E6  E104               	bnz	u12785
 13521  0064E8  0100               	movlb	0	; () banked
 13522  0064EA  516D               	movf	?_stristr& (0+255),w,b
 13523  0064EC  0101               	movlb	1	; () banked
 13524  0064EE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13525  0064F0                     u12785:
 13526  0064F0  E001 D0D2          	bnz	l10509
 13527                           
 13528                           ; BSR set to: 1
 13529                           ;main.c: 858: uint8_t filterno;
 13530                           ;main.c: 859: uint8_t filter_priority;
 13531                           ;main.c: 860: uint16_t filter_class;
 13532                           ;main.c: 861: uint8_t filter_type;
 13533                           ;main.c: 862: uint8_t filter_nodeid;
 13534                           ;main.c: 864: strcpy(cmdbuf, cmdbuf + 8);
 13535  0064F4  0E01               	movlw	high _cmdbuf
 13536  0064F6  DB57               	call	PL8	;call to abstracted procedure
 13537  0064F8  EC52  F00C         	call	_strcpy	;wreg free
 13538                           
 13539                           ;main.c: 865: char *p = strtok(cmdbuf, ",");
 13540  0064FC  DB96               	call	PL30	;call to abstracted procedure
 13541  0064FE  EC57  F012         	call	_strtok	;wreg free
 13542  006502  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13543  006506  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13544                           
 13545                           ; BSR set to: 0
 13546                           ;main.c: 866: if ((0) != p) {
 13547  00650A  0102               	movlb	2	; () banked
 13548  00650C  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13549  00650E  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13550  006510  E014               	bz	l10457
 13551                           
 13552                           ; BSR set to: 2
 13553                           ;main.c: 867: filterno = atoi(p);
 13554  006512  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13555  006516  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13556  00651A  EC87  F019         	call	_atoi	;wreg free
 13557  00651E  5166               	movf	?_atoi& (0+255),w,b
 13558  006520  0102               	movlb	2	; () banked
 13559  006522  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13560                           
 13561                           ; BSR set to: 2
 13562                           ;main.c: 868: if (filterno > 15) {
 13563  006524  0E0F               	movlw	15
 13564  006526  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13565  006528  D010               	goto	l10461
 13566                           
 13567                           ; BSR set to: 2
 13568                           ;main.c: 869: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13569  00652A  0E6F               	movlw	high STR_89
 13570  00652C  0100               	movlb	0	; () banked
 13571  00652E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13572  006530  0E1C               	movlw	low STR_89
 13573  006532  6F61               	movwf	?_putsUSART& (0+255),b
 13574  006534  EC6E  F00E         	call	_putsUSART	;wreg free
 13575  006538  D314               	goto	l524
 13576  00653A                     l10457:
 13577                           
 13578                           ; BSR set to: 2
 13579                           ;main.c: 873: else {
 13580                           ;main.c: 874: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13581  00653A  0E74               	movlw	high STR_90
 13582  00653C  0100               	movlb	0	; () banked
 13583  00653E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13584  006540  0EFA               	movlw	low STR_90
 13585  006542  6F61               	movwf	?_putsUSART& (0+255),b
 13586  006544  EC6E  F00E         	call	_putsUSART	;wreg free
 13587  006548  D30C               	goto	l524
 13588  00654A                     l10461:
 13589                           
 13590                           ; BSR set to: 2
 13591                           ;main.c: 876: }
 13592                           ;main.c: 879: p = strtok((0), ",");
 13593  00654A  DB25               	call	PL6	;call to abstracted procedure
 13594  00654C  EC57  F012         	call	_strtok	;wreg free
 13595  006550  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13596  006554  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13597                           
 13598                           ; BSR set to: 0
 13599                           ;main.c: 880: if ((0) != p) {
 13600  006558  0102               	movlb	2	; () banked
 13601  00655A  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13602  00655C  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13603  00655E  E00A               	bz	l10467
 13604                           
 13605                           ; BSR set to: 2
 13606                           ;main.c: 881: filter_priority = atoi(p);
 13607  006560  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13608  006564  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13609  006568  EC87  F019         	call	_atoi	;wreg free
 13610  00656C  5166               	movf	?_atoi& (0+255),w,b
 13611  00656E  0102               	movlb	2	; () banked
 13612  006570  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13613                           
 13614                           ;main.c: 882: }
 13615  006572  D008               	goto	l10471
 13616  006574                     l10467:
 13617                           
 13618                           ; BSR set to: 2
 13619                           ;main.c: 883: else {
 13620                           ;main.c: 884: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13621  006574  0E74               	movlw	high STR_92
 13622  006576  0100               	movlb	0	; () banked
 13623  006578  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13624  00657A  0E2F               	movlw	low STR_92
 13625  00657C  6F61               	movwf	?_putsUSART& (0+255),b
 13626  00657E  EC6E  F00E         	call	_putsUSART	;wreg free
 13627  006582  D2EF               	goto	l524
 13628  006584                     l10471:
 13629                           
 13630                           ; BSR set to: 2
 13631                           ;main.c: 886: }
 13632                           ;main.c: 889: p = strtok((0), ",");
 13633  006584  DB08               	call	PL6	;call to abstracted procedure
 13634  006586  EC57  F012         	call	_strtok	;wreg free
 13635  00658A  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13636  00658E  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13637                           
 13638                           ; BSR set to: 0
 13639                           ;main.c: 890: if ((0) != p) {
 13640  006592  0102               	movlb	2	; () banked
 13641  006594  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13642  006596  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13643  006598  E00B               	bz	l10477
 13644                           
 13645                           ; BSR set to: 2
 13646                           ;main.c: 891: filter_class = atoi(p);
 13647  00659A  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13648  00659E  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13649  0065A2  EC87  F019         	call	_atoi	;wreg free
 13650  0065A6  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13651  0065AA  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13652                           
 13653                           ;main.c: 892: }
 13654  0065AE  D008               	goto	l10481
 13655  0065B0                     l10477:
 13656                           
 13657                           ; BSR set to: 2
 13658                           ;main.c: 893: else {
 13659                           ;main.c: 894: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13660  0065B0  0E75               	movlw	high STR_94
 13661  0065B2  0100               	movlb	0	; () banked
 13662  0065B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13663  0065B6  0E96               	movlw	low STR_94
 13664  0065B8  6F61               	movwf	?_putsUSART& (0+255),b
 13665  0065BA  EC6E  F00E         	call	_putsUSART	;wreg free
 13666  0065BE  D2D1               	goto	l524
 13667  0065C0                     l10481:
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;main.c: 896: }
 13671                           ;main.c: 899: p = strtok((0), ",");
 13672  0065C0  DB00               	call	PL10	;call to abstracted procedure
 13673  0065C2  EC57  F012         	call	_strtok	;wreg free
 13674  0065C6  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13675  0065CA  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13676                           
 13677                           ; BSR set to: 0
 13678                           ;main.c: 900: if ((0) != p) {
 13679  0065CE  0102               	movlb	2	; () banked
 13680  0065D0  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13681  0065D2  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13682  0065D4  E00A               	bz	l10487
 13683                           
 13684                           ; BSR set to: 2
 13685                           ;main.c: 901: filter_type = atoi(p);
 13686  0065D6  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13687  0065DA  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13688  0065DE  EC87  F019         	call	_atoi	;wreg free
 13689  0065E2  5166               	movf	?_atoi& (0+255),w,b
 13690  0065E4  0102               	movlb	2	; () banked
 13691  0065E6  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13692                           
 13693                           ;main.c: 902: }
 13694  0065E8  D008               	goto	l10491
 13695  0065EA                     l10487:
 13696                           
 13697                           ; BSR set to: 2
 13698                           ;main.c: 903: else {
 13699                           ;main.c: 904: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13700  0065EA  0E75               	movlw	high STR_96
 13701  0065EC  0100               	movlb	0	; () banked
 13702  0065EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13703  0065F0  0EE4               	movlw	low STR_96
 13704  0065F2  6F61               	movwf	?_putsUSART& (0+255),b
 13705  0065F4  EC6E  F00E         	call	_putsUSART	;wreg free
 13706  0065F8  D2B4               	goto	l524
 13707  0065FA                     l10491:
 13708                           
 13709                           ; BSR set to: 2
 13710                           ;main.c: 906: }
 13711                           ;main.c: 909: p = strtok((0), ",");
 13712  0065FA  DACD               	call	PL6	;call to abstracted procedure
 13713  0065FC  EC57  F012         	call	_strtok	;wreg free
 13714  006600  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1185
 13715  006604  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1185+1
 13716                           
 13717                           ; BSR set to: 0
 13718                           ;main.c: 910: if ((0) != p) {
 13719  006608  0102               	movlb	2	; () banked
 13720  00660A  51BA               	movf	(doModeVerbose@p_1185+1)& (0+255),w,b
 13721  00660C  11B9               	iorwf	doModeVerbose@p_1185& (0+255),w,b
 13722  00660E  E00A               	bz	l10497
 13723                           
 13724                           ; BSR set to: 2
 13725                           ;main.c: 911: filter_nodeid = atoi(p);
 13726  006610  C2B9  F066         	movff	doModeVerbose@p_1185,?_atoi
 13727  006614  C2BA  F067         	movff	doModeVerbose@p_1185+1,?_atoi+1
 13728  006618  EC87  F019         	call	_atoi	;wreg free
 13729  00661C  5166               	movf	?_atoi& (0+255),w,b
 13730  00661E  0102               	movlb	2	; () banked
 13731  006620  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13732                           
 13733                           ;main.c: 912: }
 13734  006622  D008               	goto	l10501
 13735  006624                     l10497:
 13736                           
 13737                           ; BSR set to: 2
 13738                           ;main.c: 913: else {
 13739                           ;main.c: 914: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13740  006624  0E74               	movlw	high STR_98
 13741  006626  0100               	movlb	0	; () banked
 13742  006628  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13743  00662A  0E59               	movlw	low STR_98
 13744  00662C  6F61               	movwf	?_putsUSART& (0+255),b
 13745  00662E  EC6E  F00E         	call	_putsUSART	;wreg free
 13746  006632  D297               	goto	l524
 13747  006634                     l10501:
 13748                           
 13749                           ; BSR set to: 2
 13750                           ;main.c: 916: }
 13751                           ;main.c: 919: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13752  006634  0E80               	movlw	128
 13753  006636  ECD6  F00B         	call	_ECANSetOperationMode
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;main.c: 921: uint32_t id = ((uint32_t) filter_priority << 26) |
 13757                           ;main.c: 922: ((uint32_t) filter_class << 16) |
 13758                           ;main.c: 923: ((uint32_t) filter_type << 8) |
 13759                           ;main.c: 924: filter_nodeid;
 13760  00663A  C28F  F1B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13761  00663E  DB16               	call	PL44	;call to abstracted procedure
 13762  006640  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13763  006642  0101               	movlb	1	; () banked
 13764  006644  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13765  006646  0102               	movlb	2	; () banked
 13766  006648  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13767  00664A  DB29               	call	PL60	;call to abstracted procedure
 13768  00664C  C28E  F1BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13769  006650  DABF               	call	PL12	;call to abstracted procedure
 13770  006652  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13771  006654  0101               	movlb	1	; () banked
 13772  006656  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13773  006658  0102               	movlb	2	; () banked
 13774  00665A  6F80               	movwf	doModeVerbose@id& (0+255),b
 13775  00665C  0101               	movlb	1	; () banked
 13776  00665E  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13777  006660  0102               	movlb	2	; () banked
 13778  006662  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13779  006664  0101               	movlb	1	; () banked
 13780  006666  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13781  006668  0102               	movlb	2	; () banked
 13782  00666A  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13783  00666C  0101               	movlb	1	; () banked
 13784  00666E  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13785  006670  0102               	movlb	2	; () banked
 13786  006672  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13787                           
 13788                           ; BSR set to: 2
 13789                           ;main.c: 925: setFilter(filterno, id);
 13790  006674  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13791  006678  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13792  00667C  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13793  006680  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13794  006684  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13795  006686  EC52  F022         	call	_setFilter
 13796                           
 13797                           ; BSR set to: 0
 13798                           ;main.c: 926: putsUSART((char *) "+OK\r\n");
 13799  00668A  0E7C               	movlw	high STR_9
 13800  00668C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13801  00668E  0E7F               	movlw	low STR_9
 13802  006690  6F61               	movwf	?_putsUSART& (0+255),b
 13803  006692  EC6E  F00E         	call	_putsUSART	;wreg free
 13804                           
 13805                           ;main.c: 927: }
 13806  006696  D256               	goto	l10663
 13807  006698                     l10509:
 13808                           
 13809                           ; BSR set to: 1
 13810                           ;main.c: 931: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13811  006698  0E01               	movlw	high _cmdbuf
 13812  00669A  0100               	movlb	0	; () banked
 13813  00669C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13814  00669E  0E04               	movlw	low _cmdbuf
 13815  0066A0  6F6D               	movwf	?_stristr& (0+255),b
 13816  0066A2  0E7C               	movlw	high STR_100
 13817  0066A4  6F70               	movwf	(?_stristr+3)& (0+255),b
 13818  0066A6  0EB1               	movlw	low STR_100
 13819  0066A8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13820  0066AA  EC0C  F011         	call	_stristr	;wreg free
 13821  0066AE  DA5A               	call	PL2	;call to abstracted procedure
 13822  0066B0  E104               	bnz	u12865
 13823  0066B2  0100               	movlb	0	; () banked
 13824  0066B4  516D               	movf	?_stristr& (0+255),w,b
 13825  0066B6  0101               	movlb	1	; () banked
 13826  0066B8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13827  0066BA                     u12865:
 13828  0066BA  E001 D0D9          	bnz	l10581
 13829                           
 13830                           ; BSR set to: 1
 13831                           ;main.c: 933: uint8_t maskno;
 13832                           ;main.c: 934: uint8_t mask_priority;
 13833                           ;main.c: 935: uint16_t mask_class;
 13834                           ;main.c: 936: uint8_t mask_type;
 13835                           ;main.c: 937: uint8_t mask_nodeid;
 13836                           ;main.c: 939: strcpy(cmdbuf, cmdbuf + 8);
 13837  0066BE  0E01               	movlw	high _cmdbuf
 13838  0066C0  DA72               	call	PL8	;call to abstracted procedure
 13839  0066C2  EC52  F00C         	call	_strcpy	;wreg free
 13840                           
 13841                           ;main.c: 940: char *p = strtok(cmdbuf, ",");
 13842  0066C6  DAB1               	call	PL30	;call to abstracted procedure
 13843  0066C8  EC57  F012         	call	_strtok	;wreg free
 13844  0066CC  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13845  0066D0  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13846                           
 13847                           ; BSR set to: 0
 13848                           ;main.c: 941: if ((0) != p) {
 13849  0066D4  0102               	movlb	2	; () banked
 13850  0066D6  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13851  0066D8  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13852  0066DA  E014               	bz	l10525
 13853                           
 13854                           ; BSR set to: 2
 13855                           ;main.c: 942: maskno = atoi(p);
 13856  0066DC  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13857  0066E0  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13858  0066E4  EC87  F019         	call	_atoi	;wreg free
 13859  0066E8  5166               	movf	?_atoi& (0+255),w,b
 13860  0066EA  0102               	movlb	2	; () banked
 13861  0066EC  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13862                           
 13863                           ; BSR set to: 2
 13864                           ;main.c: 943: if (maskno > 1) {
 13865  0066EE  0E01               	movlw	1
 13866  0066F0  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13867  0066F2  D010               	goto	l10529
 13868                           
 13869                           ; BSR set to: 2
 13870                           ;main.c: 944: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13871  0066F4  0E72               	movlw	high STR_102
 13872  0066F6  0100               	movlb	0	; () banked
 13873  0066F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13874  0066FA  0E29               	movlw	low STR_102
 13875  0066FC  6F61               	movwf	?_putsUSART& (0+255),b
 13876  0066FE  EC6E  F00E         	call	_putsUSART	;wreg free
 13877  006702  D22F               	goto	l524
 13878  006704                     l10525:
 13879                           
 13880                           ; BSR set to: 2
 13881                           ;main.c: 948: else {
 13882                           ;main.c: 949: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13883  006704  0E76               	movlw	high STR_103
 13884  006706  0100               	movlb	0	; () banked
 13885  006708  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13886  00670A  0E0A               	movlw	low STR_103
 13887  00670C  6F61               	movwf	?_putsUSART& (0+255),b
 13888  00670E  EC6E  F00E         	call	_putsUSART	;wreg free
 13889  006712  D227               	goto	l524
 13890  006714                     l10529:
 13891                           
 13892                           ; BSR set to: 2
 13893                           ;main.c: 951: }
 13894                           ;main.c: 954: p = strtok((0), ",");
 13895  006714  DA40               	call	PL6	;call to abstracted procedure
 13896  006716  EC57  F012         	call	_strtok	;wreg free
 13897  00671A  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13898  00671E  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13899                           
 13900                           ; BSR set to: 0
 13901                           ;main.c: 955: if ((0) != p) {
 13902  006722  0102               	movlb	2	; () banked
 13903  006724  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13904  006726  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13905  006728  E00A               	bz	l10535
 13906                           
 13907                           ; BSR set to: 2
 13908                           ;main.c: 956: mask_priority = atoi(p);
 13909  00672A  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13910  00672E  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13911  006732  EC87  F019         	call	_atoi	;wreg free
 13912  006736  5166               	movf	?_atoi& (0+255),w,b
 13913  006738  0102               	movlb	2	; () banked
 13914  00673A  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 13915                           
 13916                           ;main.c: 957: }
 13917  00673C  D008               	goto	l10539
 13918  00673E                     l10535:
 13919                           
 13920                           ; BSR set to: 2
 13921                           ;main.c: 958: else {
 13922                           ;main.c: 959: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 13923  00673E  0E74               	movlw	high STR_105
 13924  006740  0100               	movlb	0	; () banked
 13925  006742  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13926  006744  0EAA               	movlw	low STR_105
 13927  006746  6F61               	movwf	?_putsUSART& (0+255),b
 13928  006748  EC6E  F00E         	call	_putsUSART	;wreg free
 13929  00674C  D20A               	goto	l524
 13930  00674E                     l10539:
 13931                           
 13932                           ; BSR set to: 2
 13933                           ;main.c: 961: }
 13934                           ;main.c: 964: p = strtok((0), ",");
 13935  00674E  DA23               	call	PL6	;call to abstracted procedure
 13936  006750  EC57  F012         	call	_strtok	;wreg free
 13937  006754  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13938  006758  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;main.c: 965: if ((0) != p) {
 13942  00675C  0102               	movlb	2	; () banked
 13943  00675E  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13944  006760  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13945  006762  E00B               	bz	l10545
 13946                           
 13947                           ; BSR set to: 2
 13948                           ;main.c: 966: mask_class = atoi(p);
 13949  006764  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13950  006768  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13951  00676C  EC87  F019         	call	_atoi	;wreg free
 13952  006770  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13953  006774  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13954                           
 13955                           ;main.c: 967: }
 13956  006778  D008               	goto	l10549
 13957  00677A                     l10545:
 13958                           
 13959                           ; BSR set to: 2
 13960                           ;main.c: 968: else {
 13961                           ;main.c: 969: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13962  00677A  0E76               	movlw	high STR_107
 13963  00677C  0100               	movlb	0	; () banked
 13964  00677E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13965  006780  0E54               	movlw	low STR_107
 13966  006782  6F61               	movwf	?_putsUSART& (0+255),b
 13967  006784  EC6E  F00E         	call	_putsUSART	;wreg free
 13968  006788  D1EC               	goto	l524
 13969  00678A                     l10549:
 13970                           
 13971                           ; BSR set to: 0
 13972                           ;main.c: 971: }
 13973                           ;main.c: 974: p = strtok((0), ",");
 13974  00678A  DA1B               	call	PL10	;call to abstracted procedure
 13975  00678C  EC57  F012         	call	_strtok	;wreg free
 13976  006790  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 13977  006794  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 13978                           
 13979                           ; BSR set to: 0
 13980                           ;main.c: 975: if ((0) != p) {
 13981  006798  0102               	movlb	2	; () banked
 13982  00679A  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 13983  00679C  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 13984  00679E  E00A               	bz	l10555
 13985                           
 13986                           ; BSR set to: 2
 13987                           ;main.c: 976: mask_type = atoi(p);
 13988  0067A0  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 13989  0067A4  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 13990  0067A8  EC87  F019         	call	_atoi	;wreg free
 13991  0067AC  5166               	movf	?_atoi& (0+255),w,b
 13992  0067AE  0102               	movlb	2	; () banked
 13993  0067B0  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 13994                           
 13995                           ;main.c: 977: }
 13996  0067B2  D008               	goto	l10559
 13997  0067B4                     l10555:
 13998                           
 13999                           ; BSR set to: 2
 14000                           ;main.c: 978: else {
 14001                           ;main.c: 979: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14002  0067B4  0E76               	movlw	high STR_109
 14003  0067B6  0100               	movlb	0	; () banked
 14004  0067B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14005  0067BA  0E79               	movlw	low STR_109
 14006  0067BC  6F61               	movwf	?_putsUSART& (0+255),b
 14007  0067BE  EC6E  F00E         	call	_putsUSART	;wreg free
 14008  0067C2  D1CF               	goto	l524
 14009  0067C4                     l10559:
 14010                           
 14011                           ; BSR set to: 2
 14012                           ;main.c: 981: }
 14013                           ;main.c: 984: p = strtok((0), ",");
 14014  0067C4  D9E8               	call	PL6	;call to abstracted procedure
 14015  0067C6  EC57  F012         	call	_strtok	;wreg free
 14016  0067CA  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1205
 14017  0067CE  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1205+1
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;main.c: 985: if ((0) != p) {
 14021  0067D2  0102               	movlb	2	; () banked
 14022  0067D4  51BC               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 14023  0067D6  11BB               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 14024  0067D8  E00A               	bz	l10565
 14025                           
 14026                           ; BSR set to: 2
 14027                           ;main.c: 986: mask_nodeid = atoi(p);
 14028  0067DA  C2BB  F066         	movff	doModeVerbose@p_1205,?_atoi
 14029  0067DE  C2BC  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 14030  0067E2  EC87  F019         	call	_atoi	;wreg free
 14031  0067E6  5166               	movf	?_atoi& (0+255),w,b
 14032  0067E8  0102               	movlb	2	; () banked
 14033  0067EA  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14034                           
 14035                           ;main.c: 987: }
 14036  0067EC  D008               	goto	l10569
 14037  0067EE                     l10565:
 14038                           
 14039                           ; BSR set to: 2
 14040                           ;main.c: 988: else {
 14041                           ;main.c: 989: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14042  0067EE  0E75               	movlw	high STR_111
 14043  0067F0  0100               	movlb	0	; () banked
 14044  0067F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14045  0067F4  0E6F               	movlw	low STR_111
 14046  0067F6  6F61               	movwf	?_putsUSART& (0+255),b
 14047  0067F8  EC6E  F00E         	call	_putsUSART	;wreg free
 14048  0067FC  D1B2               	goto	l524
 14049  0067FE                     l10569:
 14050                           
 14051                           ; BSR set to: 2
 14052                           ;main.c: 991: }
 14053                           ;main.c: 993: uint32_t id = ((uint32_t) mask_priority << 26) |
 14054                           ;main.c: 994: ((uint32_t) mask_class << 16) |
 14055                           ;main.c: 995: ((uint32_t) mask_type << 8) |
 14056                           ;main.c: 996: mask_nodeid;
 14057  0067FE  C292  F1B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14058  006802  DA34               	call	PL44	;call to abstracted procedure
 14059  006804  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14060  006806  0101               	movlb	1	; () banked
 14061  006808  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 14062  00680A  0102               	movlb	2	; () banked
 14063  00680C  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14064  00680E  DA47               	call	PL60	;call to abstracted procedure
 14065  006810  C291  F1BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14066  006814  D9DD               	call	PL12	;call to abstracted procedure
 14067  006816  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14068  006818  0101               	movlb	1	; () banked
 14069  00681A  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14070  00681C  0102               	movlb	2	; () banked
 14071  00681E  6FA3               	movwf	doModeVerbose@id_1217& (0+255),b
 14072  006820  0101               	movlb	1	; () banked
 14073  006822  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14074  006824  0102               	movlb	2	; () banked
 14075  006826  6FA4               	movwf	(doModeVerbose@id_1217+1)& (0+255),b
 14076  006828  0101               	movlb	1	; () banked
 14077  00682A  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14078  00682C  0102               	movlb	2	; () banked
 14079  00682E  6FA5               	movwf	(doModeVerbose@id_1217+2)& (0+255),b
 14080  006830  0101               	movlb	1	; () banked
 14081  006832  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14082  006834  0102               	movlb	2	; () banked
 14083  006836  6FA6               	movwf	(doModeVerbose@id_1217+3)& (0+255),b
 14084                           
 14085                           ; BSR set to: 2
 14086                           ;main.c: 999: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14087  006838  0E80               	movlw	128
 14088  00683A  ECD6  F00B         	call	_ECANSetOperationMode
 14089                           
 14090                           ; BSR set to: 0
 14091                           ;main.c: 1001: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14092                           ;main.c: 1002: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14093  00683E  0102               	movlb	2	; () banked
 14094  006840  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14095  006842  E008               	bz	l10577
 14096                           
 14097                           ; BSR set to: 2
 14098  006844  0E0F               	movlw	15	;volatile
 14099  006846  0100               	movlb	0	; () banked
 14100  006848  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14101  00684A  0E18               	movlw	24	;volatile
 14102  00684C  DA1C               	call	PL56	;call to abstracted procedure
 14103  00684E  EC8D  F01A         	call	__CANIDToRegs	;wreg free
 14104  006852  D007               	goto	l10579
 14105  006854                     l10577:
 14106                           
 14107                           ; BSR set to: 2
 14108  006854  0E0F               	movlw	15	;volatile
 14109  006856  0100               	movlb	0	; () banked
 14110  006858  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14111  00685A  0E1C               	movlw	28	;volatile
 14112  00685C  DA14               	call	PL56	;call to abstracted procedure
 14113  00685E  EC8D  F01A         	call	__CANIDToRegs	;wreg free
 14114  006862                     l10579:
 14115                           
 14116                           ; BSR set to: 0
 14117                           ;main.c: 1003: putsUSART((char *) "+OK\r\n");
 14118  006862  0E7C               	movlw	high STR_9
 14119  006864  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14120  006866  0E7F               	movlw	low STR_9
 14121  006868  6F61               	movwf	?_putsUSART& (0+255),b
 14122  00686A  EC6E  F00E         	call	_putsUSART	;wreg free
 14123                           
 14124                           ;main.c: 1004: }
 14125  00686E  D16A               	goto	l10663
 14126  006870                     l10581:
 14127                           
 14128                           ; BSR set to: 1
 14129                           ;main.c: 1011: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14130  006870  0E01               	movlw	high _cmdbuf
 14131  006872  0100               	movlb	0	; () banked
 14132  006874  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14133  006876  0E04               	movlw	low _cmdbuf
 14134  006878  6F6D               	movwf	?_stristr& (0+255),b
 14135  00687A  0E7C               	movlw	high STR_113
 14136  00687C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14137  00687E  0E9D               	movlw	low STR_113
 14138  006880  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14139  006882  EC0C  F011         	call	_stristr	;wreg free
 14140  006886  D96E               	call	PL2	;call to abstracted procedure
 14141  006888  E104               	bnz	u12955
 14142  00688A  0100               	movlb	0	; () banked
 14143  00688C  516D               	movf	?_stristr& (0+255),w,b
 14144  00688E  0101               	movlb	1	; () banked
 14145  006890  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14146  006892                     u12955:
 14147  006892  E001 D145          	bnz	l10657
 14148                           
 14149                           ; BSR set to: 1
 14150                           ;main.c: 1014: strcpy(cmdbuf, cmdbuf + 4);
 14151  006896  0E01               	movlw	high _cmdbuf
 14152  006898  0100               	movlb	0	; () banked
 14153  00689A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14154  00689C  0E04               	movlw	low _cmdbuf
 14155  00689E  6F60               	movwf	?_strcpy& (0+255),b
 14156  0068A0  0E08               	movlw	low (_cmdbuf+4)
 14157  0068A2  0101               	movlb	1	; () banked
 14158  0068A4  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14159  0068A6  0E01               	movlw	high (_cmdbuf+4)
 14160  0068A8  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14161  0068AA  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14162  0068AE  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14163  0068B2  EC52  F00C         	call	_strcpy	;wreg free
 14164                           
 14165                           ;main.c: 1017: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14166  0068B6  0E01               	movlw	high _cmdbuf
 14167  0068B8  0100               	movlb	0	; () banked
 14168  0068BA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14169  0068BC  0E04               	movlw	low _cmdbuf
 14170  0068BE  6F6D               	movwf	?_stristr& (0+255),b
 14171  0068C0  0E7C               	movlw	high STR_114
 14172  0068C2  6F70               	movwf	(?_stristr+3)& (0+255),b
 14173  0068C4  0EDC               	movlw	low STR_114
 14174  0068C6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14175  0068C8  EC0C  F011         	call	_stristr	;wreg free
 14176  0068CC  D94B               	call	PL2	;call to abstracted procedure
 14177  0068CE  E104               	bnz	u12965
 14178  0068D0  0100               	movlb	0	; () banked
 14179  0068D2  516D               	movf	?_stristr& (0+255),w,b
 14180  0068D4  0101               	movlb	1	; () banked
 14181  0068D6  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14182  0068D8                     u12965:
 14183  0068D8  E111               	bnz	l10593
 14184                           
 14185                           ; BSR set to: 1
 14186                           ;main.c: 1018: bHex = 1;
 14187  0068DA  0E01               	movlw	1
 14188  0068DC  6F00               	movwf	_bHex& (0+255),b
 14189                           
 14190                           ; BSR set to: 1
 14191                           ;main.c: 1019: writeEEPROM(0x06, 1);
 14192  0068DE  0100               	movlb	0	; () banked
 14193  0068E0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14194  0068E2  0E06               	movlw	6
 14195  0068E4  6F60               	movwf	?_writeEEPROM& (0+255),b
 14196  0068E6  0E01               	movlw	1
 14197  0068E8  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14198  0068EA  EC11  F00C         	call	_writeEEPROM	;wreg free
 14199                           
 14200                           ; BSR set to: 0
 14201                           ;main.c: 1020: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14202  0068EE  0E74               	movlw	high STR_115
 14203  0068F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14204  0068F2  0E03               	movlw	low STR_115
 14205  0068F4  6F61               	movwf	?_putsUSART& (0+255),b
 14206  0068F6  EC6E  F00E         	call	_putsUSART	;wreg free
 14207                           
 14208                           ;main.c: 1021: }
 14209  0068FA  D124               	goto	l10663
 14210  0068FC                     l10593:
 14211                           
 14212                           ; BSR set to: 1
 14213                           ;main.c: 1023: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14214  0068FC  0E01               	movlw	high _cmdbuf
 14215  0068FE  0100               	movlb	0	; () banked
 14216  006900  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14217  006902  0E04               	movlw	low _cmdbuf
 14218  006904  6F6D               	movwf	?_stristr& (0+255),b
 14219  006906  0E7C               	movlw	high STR_116
 14220  006908  6F70               	movwf	(?_stristr+3)& (0+255),b
 14221  00690A  0E05               	movlw	low STR_116
 14222  00690C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14223  00690E  EC0C  F011         	call	_stristr	;wreg free
 14224  006912  D928               	call	PL2	;call to abstracted procedure
 14225  006914  E104               	bnz	u12975
 14226  006916  0100               	movlb	0	; () banked
 14227  006918  516D               	movf	?_stristr& (0+255),w,b
 14228  00691A  0101               	movlb	1	; () banked
 14229  00691C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14230  00691E                     u12975:
 14231  00691E  E110               	bnz	l10601
 14232                           
 14233                           ; BSR set to: 1
 14234                           ;main.c: 1024: bHex = 0;
 14235  006920  6B00               	clrf	_bHex& (0+255),b
 14236                           
 14237                           ; BSR set to: 1
 14238                           ;main.c: 1025: writeEEPROM(0x06, 0);
 14239  006922  0100               	movlb	0	; () banked
 14240  006924  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14241  006926  0E06               	movlw	6
 14242  006928  6F60               	movwf	?_writeEEPROM& (0+255),b
 14243  00692A  0E00               	movlw	0
 14244  00692C  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14245  00692E  EC11  F00C         	call	_writeEEPROM	;wreg free
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;main.c: 1026: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14249  006932  0E74               	movlw	high STR_117
 14250  006934  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14251  006936  0ED2               	movlw	low STR_117
 14252  006938  6F61               	movwf	?_putsUSART& (0+255),b
 14253  00693A  EC6E  F00E         	call	_putsUSART	;wreg free
 14254                           
 14255                           ;main.c: 1027: }
 14256  00693E  D102               	goto	l10663
 14257  006940                     l10601:
 14258                           
 14259                           ; BSR set to: 1
 14260                           ;main.c: 1028: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14261  006940  0E01               	movlw	high _cmdbuf
 14262  006942  0100               	movlb	0	; () banked
 14263  006944  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14264  006946  0E04               	movlw	low _cmdbuf
 14265  006948  6F6D               	movwf	?_stristr& (0+255),b
 14266  00694A  0E7B               	movlw	high STR_118
 14267  00694C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14268  00694E  0E86               	movlw	low STR_118
 14269  006950  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14270  006952  EC0C  F011         	call	_stristr	;wreg free
 14271  006956  516E               	movf	(?_stristr+1)& (0+255),w,b
 14272  006958  116D               	iorwf	?_stristr& (0+255),w,b
 14273  00695A  E02D               	bz	l10615
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;main.c: 1029: strcpy(cmdbuf, cmdbuf + 10);
 14277  00695C  0E01               	movlw	high _cmdbuf
 14278  00695E  0100               	movlb	0	; () banked
 14279  006960  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14280  006962  0E04               	movlw	low _cmdbuf
 14281  006964  6F60               	movwf	?_strcpy& (0+255),b
 14282  006966  0E0E               	movlw	low (_cmdbuf+10)
 14283  006968  0101               	movlb	1	; () banked
 14284  00696A  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14285  00696C  0E01               	movlw	high (_cmdbuf+10)
 14286  00696E  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14287  006970  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14288  006974  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14289  006978  EC52  F00C         	call	_strcpy	;wreg free
 14290                           
 14291                           ;main.c: 1030: rwtimeout = atoi(cmdbuf);
 14292  00697C  0E01               	movlw	high _cmdbuf
 14293  00697E  0100               	movlb	0	; () banked
 14294  006980  6F67               	movwf	(?_atoi+1)& (0+255),b
 14295  006982  0E04               	movlw	low _cmdbuf
 14296  006984  6F66               	movwf	?_atoi& (0+255),b
 14297  006986  EC87  F019         	call	_atoi	;wreg free
 14298  00698A  5166               	movf	?_atoi& (0+255),w,b
 14299  00698C  0101               	movlb	1	; () banked
 14300  00698E  6F03               	movwf	_rwtimeout& (0+255),b
 14301                           
 14302                           ; BSR set to: 1
 14303                           ;main.c: 1031: if (rwtimeout < 10u) {
 14304  006990  0E0A               	movlw	10
 14305  006992  6103               	cpfslt	_rwtimeout& (0+255),b
 14306  006994  D001               	goto	l10611
 14307                           
 14308                           ; BSR set to: 1
 14309                           ;main.c: 1032: rwtimeout = 10u;
 14310  006996  6F03               	movwf	_rwtimeout& (0+255),b
 14311  006998                     l10611:
 14312                           
 14313                           ; BSR set to: 1
 14314                           ;main.c: 1033: }
 14315                           ;main.c: 1034: writeEEPROM(0x09, rwtimeout);
 14316  006998  0100               	movlb	0	; () banked
 14317  00699A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14318  00699C  0E09               	movlw	9
 14319  00699E  6F60               	movwf	?_writeEEPROM& (0+255),b
 14320  0069A0  C103  F062         	movff	_rwtimeout,?_writeEEPROM+2
 14321  0069A4  EC11  F00C         	call	_writeEEPROM	;wreg free
 14322                           
 14323                           ; BSR set to: 0
 14324                           ;main.c: 1035: putsUSART((char *) "+OK\r\n");
 14325  0069A8  0E7C               	movlw	high STR_9
 14326  0069AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14327  0069AC  0E7F               	movlw	low STR_9
 14328  0069AE  6F61               	movwf	?_putsUSART& (0+255),b
 14329  0069B0  EC6E  F00E         	call	_putsUSART	;wreg free
 14330                           
 14331                           ;main.c: 1036: }
 14332  0069B4  D0C7               	goto	l10663
 14333  0069B6                     l10615:
 14334                           
 14335                           ; BSR set to: 0
 14336                           ;main.c: 1037: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14337  0069B6  0E01               	movlw	high _cmdbuf
 14338  0069B8  0100               	movlb	0	; () banked
 14339  0069BA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14340  0069BC  0E04               	movlw	low _cmdbuf
 14341  0069BE  6F6D               	movwf	?_stristr& (0+255),b
 14342  0069C0  0E7B               	movlw	high STR_120
 14343  0069C2  6F70               	movwf	(?_stristr+3)& (0+255),b
 14344  0069C4  0EBA               	movlw	low STR_120
 14345  0069C6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14346  0069C8  EC0C  F011         	call	_stristr	;wreg free
 14347  0069CC  516E               	movf	(?_stristr+1)& (0+255),w,b
 14348  0069CE  116D               	iorwf	?_stristr& (0+255),w,b
 14349  0069D0  E005               	bz	l10619
 14350                           
 14351                           ; BSR set to: 0
 14352                           ;main.c: 1038: strcpy(cmdbuf, cmdbuf + 8);
 14353  0069D2  0E01               	movlw	high _cmdbuf
 14354  0069D4  D8E8               	call	PL8	;call to abstracted procedure
 14355  0069D6  EC52  F00C         	call	_strcpy	;wreg free
 14356                           
 14357                           ;main.c: 1039: }
 14358  0069DA  D0B4               	goto	l10663
 14359  0069DC                     l10619:
 14360                           
 14361                           ; BSR set to: 0
 14362                           ;main.c: 1040: else if (0 != stristr(cmdbuf, "MODE ")) {
 14363  0069DC  0E01               	movlw	high _cmdbuf
 14364  0069DE  0100               	movlb	0	; () banked
 14365  0069E0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14366  0069E2  0E04               	movlw	low _cmdbuf
 14367  0069E4  6F6D               	movwf	?_stristr& (0+255),b
 14368  0069E6  0E7C               	movlw	high STR_121
 14369  0069E8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14370  0069EA  0E85               	movlw	low STR_121
 14371  0069EC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14372  0069EE  EC0C  F011         	call	_stristr	;wreg free
 14373  0069F2  516E               	movf	(?_stristr+1)& (0+255),w,b
 14374  0069F4  116D               	iorwf	?_stristr& (0+255),w,b
 14375  0069F6  E05C               	bz	l10647
 14376                           
 14377                           ; BSR set to: 0
 14378                           ;main.c: 1041: strcpy(cmdbuf, cmdbuf + 5);
 14379  0069F8  D8BF               	call	PL4	;call to abstracted procedure
 14380  0069FA  EC52  F00C         	call	_strcpy	;wreg free
 14381                           
 14382                           ;main.c: 1042: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14383  0069FE  0E01               	movlw	high _cmdbuf
 14384  006A00  0100               	movlb	0	; () banked
 14385  006A02  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14386  006A04  0E04               	movlw	low _cmdbuf
 14387  006A06  6F6D               	movwf	?_stristr& (0+255),b
 14388  006A08  0E7B               	movlw	high STR_122
 14389  006A0A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14390  006A0C  0EFD               	movlw	low STR_122
 14391  006A0E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14392  006A10  EC0C  F011         	call	_stristr	;wreg free
 14393  006A14  516E               	movf	(?_stristr+1)& (0+255),w,b
 14394  006A16  116D               	iorwf	?_stristr& (0+255),w,b
 14395  006A18  E00F               	bz	l10631
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;main.c: 1043: mode = 0;
 14399  006A1A  6BF1               	clrf	_mode& (0+255),b
 14400                           
 14401                           ; BSR set to: 0
 14402                           ;main.c: 1044: writeEEPROM(0x03, 0);
 14403  006A1C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14404  006A1E  0E03               	movlw	3
 14405  006A20  6F60               	movwf	?_writeEEPROM& (0+255),b
 14406  006A22  0E00               	movlw	0
 14407  006A24  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14408  006A26  EC11  F00C         	call	_writeEEPROM	;wreg free
 14409                           
 14410                           ; BSR set to: 0
 14411                           ;main.c: 1045: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14412  006A2A  0E78               	movlw	high STR_123
 14413  006A2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14414  006A2E  0E47               	movlw	low STR_123
 14415  006A30  6F61               	movwf	?_putsUSART& (0+255),b
 14416  006A32  EC6E  F00E         	call	_putsUSART	;wreg free
 14417                           
 14418                           ;main.c: 1046: }
 14419  006A36  D086               	goto	l10663
 14420  006A38                     l10631:
 14421                           
 14422                           ; BSR set to: 0
 14423                           ;main.c: 1047: else if (0 != stristr(cmdbuf, "VSCP")) {
 14424  006A38  0E01               	movlw	high _cmdbuf
 14425  006A3A  0100               	movlb	0	; () banked
 14426  006A3C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14427  006A3E  0E04               	movlw	low _cmdbuf
 14428  006A40  6F6D               	movwf	?_stristr& (0+255),b
 14429  006A42  0E7C               	movlw	high STR_124
 14430  006A44  6F70               	movwf	(?_stristr+3)& (0+255),b
 14431  006A46  0EC0               	movlw	low STR_124
 14432  006A48  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14433  006A4A  EC0C  F011         	call	_stristr	;wreg free
 14434  006A4E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14435  006A50  116D               	iorwf	?_stristr& (0+255),w,b
 14436  006A52  E010               	bz	l10639
 14437                           
 14438                           ; BSR set to: 0
 14439                           ;main.c: 1048: mode = 1;
 14440  006A54  0E01               	movlw	1
 14441  006A56  6FF1               	movwf	_mode& (0+255),b
 14442                           
 14443                           ; BSR set to: 0
 14444                           ;main.c: 1049: writeEEPROM(0x03, 1);
 14445  006A58  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14446  006A5A  0E03               	movlw	3
 14447  006A5C  6F60               	movwf	?_writeEEPROM& (0+255),b
 14448  006A5E  0E01               	movlw	1
 14449  006A60  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14450  006A62  EC11  F00C         	call	_writeEEPROM	;wreg free
 14451                           
 14452                           ; BSR set to: 0
 14453                           ;main.c: 1050: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14454  006A66  0E77               	movlw	high STR_125
 14455  006A68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14456  006A6A  0ECC               	movlw	low STR_125
 14457  006A6C  6F61               	movwf	?_putsUSART& (0+255),b
 14458  006A6E  EC6E  F00E         	call	_putsUSART	;wreg free
 14459                           
 14460                           ;main.c: 1051: }
 14461  006A72  D068               	goto	l10663
 14462  006A74                     l10639:
 14463                           
 14464                           ; BSR set to: 0
 14465                           ;main.c: 1052: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14466  006A74  0E01               	movlw	high _cmdbuf
 14467  006A76  0100               	movlb	0	; () banked
 14468  006A78  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14469  006A7A  0E04               	movlw	low _cmdbuf
 14470  006A7C  6F6D               	movwf	?_stristr& (0+255),b
 14471  006A7E  0E7C               	movlw	high STR_126
 14472  006A80  6F70               	movwf	(?_stristr+3)& (0+255),b
 14473  006A82  0E97               	movlw	low STR_126
 14474  006A84  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14475  006A86  EC0C  F011         	call	_stristr	;wreg free
 14476  006A8A  516E               	movf	(?_stristr+1)& (0+255),w,b
 14477  006A8C  116D               	iorwf	?_stristr& (0+255),w,b
 14478  006A8E  E05A               	bz	l10663
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;main.c: 1053: mode = 2;
 14482  006A90  0E02               	movlw	2
 14483  006A92  6FF1               	movwf	_mode& (0+255),b
 14484                           
 14485                           ; BSR set to: 0
 14486                           ;main.c: 1054: writeEEPROM(0x03, 2);
 14487  006A94  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14488  006A96  0E03               	movlw	3
 14489  006A98  6F60               	movwf	?_writeEEPROM& (0+255),b
 14490  006A9A  0E02               	movlw	2
 14491  006A9C  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14492  006A9E  EC11  F00C         	call	_writeEEPROM	;wreg free
 14493                           
 14494                           ; BSR set to: 0
 14495                           ;main.c: 1055: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14496  006AA2  0E78               	movlw	high STR_127
 14497  006AA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14498  006AA6  0EB4               	movlw	low STR_127
 14499  006AA8  6F61               	movwf	?_putsUSART& (0+255),b
 14500  006AAA  EC6E  F00E         	call	_putsUSART	;wreg free
 14501  006AAE  D04A               	goto	l10663
 14502  006AB0                     l10647:
 14503                           
 14504                           ; BSR set to: 0
 14505                           ;main.c: 1059: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14506  006AB0  0E01               	movlw	high _cmdbuf
 14507  006AB2  0100               	movlb	0	; () banked
 14508  006AB4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14509  006AB6  0E04               	movlw	low _cmdbuf
 14510  006AB8  6F6D               	movwf	?_stristr& (0+255),b
 14511  006ABA  0E7B               	movlw	high STR_128
 14512  006ABC  6F70               	movwf	(?_stristr+3)& (0+255),b
 14513  006ABE  0EED               	movlw	low STR_128
 14514  006AC0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14515  006AC2  EC0C  F011         	call	_stristr	;wreg free
 14516  006AC6  516E               	movf	(?_stristr+1)& (0+255),w,b
 14517  006AC8  116D               	iorwf	?_stristr& (0+255),w,b
 14518  006ACA  E011               	bz	l10651
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;main.c: 1060: strcpy(cmdbuf, cmdbuf + 7);
 14522  006ACC  0E01               	movlw	high _cmdbuf
 14523  006ACE  0100               	movlb	0	; () banked
 14524  006AD0  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14525  006AD2  0E04               	movlw	low _cmdbuf
 14526  006AD4  6F60               	movwf	?_strcpy& (0+255),b
 14527  006AD6  0E0B               	movlw	low (_cmdbuf+7)
 14528  006AD8  0101               	movlb	1	; () banked
 14529  006ADA  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14530  006ADC  0E01               	movlw	high (_cmdbuf+7)
 14531  006ADE  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14532  006AE0  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14533  006AE4  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14534  006AE8  EC52  F00C         	call	_strcpy	;wreg free
 14535                           
 14536                           ;main.c: 1061: }
 14537  006AEC  D02B               	goto	l10663
 14538  006AEE                     l10651:
 14539                           
 14540                           ; BSR set to: 0
 14541                           ;main.c: 1063: else if (0 != stristr(cmdbuf, "MASK ")) {
 14542  006AEE  0E01               	movlw	high _cmdbuf
 14543  006AF0  0100               	movlb	0	; () banked
 14544  006AF2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14545  006AF4  0E04               	movlw	low _cmdbuf
 14546  006AF6  6F6D               	movwf	?_stristr& (0+255),b
 14547  006AF8  0E7C               	movlw	high STR_129
 14548  006AFA  6F70               	movwf	(?_stristr+3)& (0+255),b
 14549  006AFC  0E8B               	movlw	low STR_129
 14550  006AFE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14551  006B00  EC0C  F011         	call	_stristr	;wreg free
 14552  006B04  516E               	movf	(?_stristr+1)& (0+255),w,b
 14553  006B06  116D               	iorwf	?_stristr& (0+255),w,b
 14554  006B08  E004               	bz	l10655
 14555                           
 14556                           ; BSR set to: 0
 14557                           ;main.c: 1064: strcpy(cmdbuf, cmdbuf + 5);
 14558  006B0A  D836               	call	PL4	;call to abstracted procedure
 14559  006B0C  EC52  F00C         	call	_strcpy	;wreg free
 14560                           
 14561                           ;main.c: 1065: }
 14562  006B10  D019               	goto	l10663
 14563  006B12                     l10655:
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;main.c: 1066: else {
 14567                           ;main.c: 1067: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14568  006B12  0E77               	movlw	high STR_130
 14569  006B14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14570  006B16  0E69               	movlw	low STR_130
 14571  006B18  6F61               	movwf	?_putsUSART& (0+255),b
 14572  006B1A  EC6E  F00E         	call	_putsUSART	;wreg free
 14573  006B1E  D012               	goto	l10663
 14574  006B20                     l10657:
 14575                           
 14576                           ; BSR set to: 1
 14577                           ;main.c: 1071: else {
 14578                           ;main.c: 1072: if ( 0x0d == cmdbuf[ 0 ] ) {
 14579  006B20  5104               	movf	_cmdbuf& (0+255),w,b
 14580  006B22  0A0D               	xorlw	13
 14581  006B24  E108               	bnz	l10661
 14582                           
 14583                           ; BSR set to: 1
 14584                           ;main.c: 1073: putsUSART((char *) "+OK\r\n");
 14585  006B26  0E7C               	movlw	high STR_9
 14586  006B28  0100               	movlb	0	; () banked
 14587  006B2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14588  006B2C  0E7F               	movlw	low STR_9
 14589  006B2E  6F61               	movwf	?_putsUSART& (0+255),b
 14590  006B30  EC6E  F00E         	call	_putsUSART	;wreg free
 14591                           
 14592                           ;main.c: 1074: }
 14593  006B34  D007               	goto	l10663
 14594  006B36                     l10661:
 14595                           
 14596                           ; BSR set to: 1
 14597                           ;main.c: 1075: else {
 14598                           ;main.c: 1076: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14599  006B36  0E78               	movlw	high STR_132
 14600  006B38  0100               	movlb	0	; () banked
 14601  006B3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14602  006B3C  0E7E               	movlw	low STR_132
 14603  006B3E  6F61               	movwf	?_putsUSART& (0+255),b
 14604  006B40  EC6E  F00E         	call	_putsUSART	;wreg free
 14605  006B44                     l10663:
 14606                           
 14607                           ;main.c: 1077: }
 14608                           ;main.c: 1078: }
 14609                           ;main.c: 1080: memset(cmdbuf, 0, sizeof ( cmdbuf));
 14610  006B44  0E01               	movlw	high _cmdbuf
 14611  006B46  0100               	movlb	0	; () banked
 14612  006B48  6F61               	movwf	(?_memset+1)& (0+255),b
 14613  006B4A  0E04               	movlw	low _cmdbuf
 14614  006B4C  6F60               	movwf	?_memset& (0+255),b
 14615  006B4E  6B63               	clrf	(?_memset+3)& (0+255),b
 14616  006B50  6B62               	clrf	(?_memset+2)& (0+255),b
 14617  006B52  6B65               	clrf	(?_memset+5)& (0+255),b
 14618  006B54  0E50               	movlw	80
 14619  006B56  6F64               	movwf	(?_memset+4)& (0+255),b
 14620  006B58  EC24  F00C         	call	_memset	;wreg free
 14621                           
 14622                           ; BSR set to: 0
 14623                           ;main.c: 1081: pos = 0;
 14624  006B5C  0101               	movlb	1	; () banked
 14625  006B5E  6B02               	clrf	_pos& (0+255),b
 14626  006B60                     l10667:
 14627                           
 14628                           ;main.c: 1082: }
 14629                           ;main.c: 1083: }
 14630                           ;main.c: 1086: (INTCONbits.GIE = 1);
 14631  006B60  8EF2               	bsf	intcon,7,c	;volatile
 14632  006B62                     l524:
 14633  006B62  0012               	return	
 14634  006B64                     __end_of_doModeVerbose:
 14635                           	opt stack 0
 14636  006B64                     PL2:
 14637                           	opt stack 19
 14638  006B64  0E04               	movlw	low _cmdbuf
 14639  006B66  0101               	movlb	1	; () banked
 14640  006B68  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14641  006B6A  0E01               	movlw	high _cmdbuf
 14642  006B6C  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14643  006B6E  0100               	movlb	0	; () banked
 14644  006B70  516E               	movf	(?_stristr+1)& (0+255),w,b
 14645  006B72  0101               	movlb	1	; () banked
 14646  006B74  19B3               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 14647  006B76  0012               	return	
 14648  006B78                     __end_ofPL2:
 14649                           	opt stack 0
 14650  006B78                     PL4:
 14651                           	opt stack 19
 14652  006B78  0E01               	movlw	high _cmdbuf
 14653  006B7A  0100               	movlb	0	; () banked
 14654  006B7C  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14655  006B7E  0E04               	movlw	low _cmdbuf
 14656  006B80  6F60               	movwf	?_strcpy& (0+255),b
 14657  006B82  0E09               	movlw	low (_cmdbuf+5)
 14658  006B84  0101               	movlb	1	; () banked
 14659  006B86  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14660  006B88  0E01               	movlw	high (_cmdbuf+5)
 14661  006B8A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14662  006B8C  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14663  006B90  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14664  006B94  0012               	return	
 14665  006B96                     __end_ofPL4:
 14666                           	opt stack 0
 14667  006B96                     PL6:
 14668                           	opt stack 19
 14669  006B96  0100               	movlb	0	; () banked
 14670  006B98  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14671  006B9A  6B6C               	clrf	?_strtok& (0+255),b
 14672  006B9C  0E7C               	movlw	high STR_30
 14673  006B9E  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14674  006BA0  0EF4               	movlw	low STR_30
 14675  006BA2  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14676  006BA4  0012               	return	
 14677  006BA6                     __end_ofPL6:
 14678                           	opt stack 0
 14679  006BA6                     PL8:
 14680                           	opt stack 19
 14681  006BA6  0100               	movlb	0	; () banked
 14682  006BA8  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14683  006BAA  0E04               	movlw	low _cmdbuf
 14684  006BAC  6F60               	movwf	?_strcpy& (0+255),b
 14685  006BAE  0E0C               	movlw	low (_cmdbuf+8)
 14686  006BB0  0101               	movlb	1	; () banked
 14687  006BB2  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14688  006BB4  0E01               	movlw	high (_cmdbuf+8)
 14689  006BB6  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14690  006BB8  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14691  006BBC  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14692  006BC0  0012               	return	
 14693  006BC2                     __end_ofPL8:
 14694                           	opt stack 0
 14695  006BC2                     PL10:
 14696                           	opt stack 19
 14697  006BC2  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14698  006BC4  6B6C               	clrf	?_strtok& (0+255),b
 14699  006BC6  0E7C               	movlw	high STR_30
 14700  006BC8  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14701  006BCA  0EF4               	movlw	low STR_30
 14702  006BCC  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14703  006BCE  0012               	return	
 14704  006BD0                     __end_ofPL10:
 14705                           	opt stack 0
 14706  006BD0                     PL12:
 14707                           	opt stack 19
 14708  006BD0  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 14709  006BD2  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 14710  006BD4  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 14711  006BD6  0E1A               	movlw	26
 14712  006BD8                     u12855:
 14713  006BD8  90D8               	bcf	status,0,c
 14714  006BDA  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14715  006BDC  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14716  006BDE  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14717  006BE0  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14718  006BE2  2EE8               	decfsz	wreg,f,c
 14719  006BE4  D7F9               	goto	u12855
 14720  006BE6  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14721  006BE8  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14722  006BEA  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 14723  006BEC  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14724  006BEE  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14725  006BF0  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 14726  006BF2  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14727  006BF4  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14728  006BF6  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 14729  006BF8  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14730  006BFA  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14731  006BFC  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 14732  006BFE  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14733  006C00  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14734  006C02  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 14735  006C04  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14736  006C06  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14737  006C08  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 14738  006C0A  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14739  006C0C  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14740  006C0E  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 14741  006C10  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14742  006C12  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14743  006C14  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 14744  006C16  0102               	movlb	2	; () banked
 14745  006C18  0012               	return	
 14746  006C1A                     __end_ofPL12:
 14747                           	opt stack 0
 14748  006C1A                     PL28:
 14749                           	opt stack 19
 14750  006C1A  0100               	movlb	0	; () banked
 14751  006C1C  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14752  006C1E  6B6C               	clrf	?_strtok& (0+255),b
 14753  006C20  0E7C               	movlw	high (STR_256+5)
 14754  006C22  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14755  006C24  0E2A               	movlw	low (STR_256+5)
 14756  006C26  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14757  006C28  0012               	return	
 14758  006C2A                     __end_ofPL28:
 14759                           	opt stack 0
 14760  006C2A                     PL30:
 14761                           	opt stack 19
 14762  006C2A  0E01               	movlw	high _cmdbuf
 14763  006C2C  0100               	movlb	0	; () banked
 14764  006C2E  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14765  006C30  0E04               	movlw	low _cmdbuf
 14766  006C32  6F6C               	movwf	?_strtok& (0+255),b
 14767  006C34  0E7C               	movlw	high STR_30
 14768  006C36  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14769  006C38  0EF4               	movlw	low STR_30
 14770  006C3A  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14771  006C3C  0012               	return	
 14772  006C3E                     __end_ofPL30:
 14773                           	opt stack 0
 14774  006C3E                     PL36:
 14775                           	opt stack 19
 14776  006C3E  0100               	movlb	0	; () banked
 14777  006C40  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14778  006C42  0E04               	movlw	low _cmdbuf
 14779  006C44  6F6C               	movwf	?_strtok& (0+255),b
 14780  006C46  0E7C               	movlw	high (STR_256+5)
 14781  006C48  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14782  006C4A  0E2A               	movlw	low (STR_256+5)
 14783  006C4C  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14784  006C4E  0012               	return	
 14785  006C50                     __end_ofPL36:
 14786                           	opt stack 0
 14787  006C50                     PL42:
 14788                           	opt stack 19
 14789  006C50  0102               	movlb	2	; () banked
 14790  006C52  51B0               	movf	doModeVerbose@i_1106& (0+255),w,b
 14791  006C54  C2AE  F1B2         	movff	doModeVerbose@reg,??_doModeVerbose
 14792  006C58  0101               	movlb	1	; () banked
 14793  006C5A  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14794  006C5C  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 14795  006C5E  0E00               	movlw	0
 14796  006C60  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14797  006C62  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14798  006C64  0100               	movlb	0	; () banked
 14799  006C66  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14800  006C68  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14801  006C6A  0012               	return	
 14802  006C6C                     __end_ofPL42:
 14803                           	opt stack 0
 14804  006C6C                     PL44:
 14805                           	opt stack 19
 14806  006C6C  0101               	movlb	1	; () banked
 14807  006C6E  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14808  006C70  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 14809  006C72  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 14810  006C74  C1B4  F1B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14811  006C78  C1B3  F1B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14812  006C7C  C1B2  F1B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 14813  006C80  6BB2               	clrf	??_doModeVerbose& (0+255),b
 14814  006C82  0102               	movlb	2	; () banked
 14815  006C84  0012               	return	
 14816  006C86                     __end_ofPL44:
 14817                           	opt stack 0
 14818  006C86                     PL56:
 14819                           	opt stack 19
 14820  006C86  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14821  006C88  C2A3  F062         	movff	doModeVerbose@id_1217,?__CANIDToRegs+2
 14822  006C8C  C2A4  F063         	movff	doModeVerbose@id_1217+1,?__CANIDToRegs+3
 14823  006C90  C2A5  F064         	movff	doModeVerbose@id_1217+2,?__CANIDToRegs+4
 14824  006C94  C2A6  F065         	movff	doModeVerbose@id_1217+3,?__CANIDToRegs+5
 14825  006C98  0E01               	movlw	1
 14826  006C9A  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14827  006C9C  0C01               	retlw	1
 14828  006C9E                     __end_ofPL56:
 14829                           	opt stack 0
 14830  006C9E                     PL60:
 14831                           	opt stack 19
 14832  006C9E  0101               	movlb	1	; () banked
 14833  006CA0  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 14834  006CA2  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 14835  006CA4  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 14836  006CA6  C1B7  F1B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14837  006CAA  C1B6  F1B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14838  006CAE  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 14839  006CB0  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 14840  006CB2  0012               	return	
 14841  006CB4                     __end_ofPL60:
 14842                           	opt stack 0
 14843                           tblptru	equ	0xFF8
 14844                           tblptrh	equ	0xFF7
 14845                           tblptrl	equ	0xFF6
 14846                           tablat	equ	0xFF5
 14847                           prodh	equ	0xFF4
 14848                           prodl	equ	0xFF3
 14849                           intcon	equ	0xFF2
 14850                           indf0	equ	0xFEF
 14851                           postinc0	equ	0xFEE
 14852                           fsr0h	equ	0xFEA
 14853                           fsr0l	equ	0xFE9
 14854                           wreg	equ	0xFE8
 14855                           indf1	equ	0xFE7
 14856                           postinc1	equ	0xFE6
 14857                           postdec1	equ	0xFE5
 14858                           fsr1h	equ	0xFE2
 14859                           fsr1l	equ	0xFE1
 14860                           indf2	equ	0xFDF
 14861                           postinc2	equ	0xFDE
 14862                           postdec2	equ	0xFDD
 14863                           plusw2	equ	0xFDB
 14864                           fsr2h	equ	0xFDA
 14865                           fsr2l	equ	0xFD9
 14866                           status	equ	0xFD8
 14867                           
 14868 ;; *************** function _setFilter *****************
 14869 ;; Defined at:
 14870 ;;		line 2776 in file "main.c"
 14871 ;; Parameters:    Size  Location     Type
 14872 ;;  filter          1    wreg     unsigned char 
 14873 ;;  val             4    0[BANK0 ] unsigned long 
 14874 ;; Auto vars:     Size  Location     Type
 14875 ;;  filter          1   10[BANK0 ] unsigned char 
 14876 ;;  eidl            1   14[BANK0 ] unsigned char 
 14877 ;;  eidh            1   13[BANK0 ] unsigned char 
 14878 ;;  sidl            1   12[BANK0 ] unsigned char 
 14879 ;;  sidh            1   11[BANK0 ] unsigned char 
 14880 ;; Return value:  Size  Location     Type
 14881 ;;		None               void
 14882 ;; Registers used:
 14883 ;;		wreg, status,2, status,0
 14884 ;; Tracked objects:
 14885 ;;		On entry : F/2
 14886 ;;		On exit  : F/0
 14887 ;;		Unchanged: 0/0
 14888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14889 ;;      Params:         0       4       0       0       0       0       0
 14890 ;;      Locals:         0       5       0       0       0       0       0
 14891 ;;      Temps:          0       6       0       0       0       0       0
 14892 ;;      Totals:         0      15       0       0       0       0       0
 14893 ;;Total ram usage:       15 bytes
 14894 ;; Hardware stack levels used:    1
 14895 ;; Hardware stack levels required when called:    3
 14896 ;; This function calls:
 14897 ;;		Nothing
 14898 ;; This function is called by:
 14899 ;;		_doModeVerbose
 14900 ;; This function uses a non-reentrant model
 14901 ;;
 14902                           
 14903                           	psect	text23
 14904  0044A4                     __ptext23:
 14905                           	opt stack 0
 14906  0044A4                     _setFilter:
 14907                           	opt stack 25
 14908                           
 14909                           ;incstack = 0
 14910                           ;incstack = 0
 14911                           ;setFilter@filter stored from wreg
 14912  0044A4  CFE8 F06A          	movff	wreg,setFilter@filter
 14913                           
 14914                           ; BSR set to: 2
 14915                           ;main.c: 2777: uint8_t sidh = (long) val >> 21L;
 14916  0044A8  0E15               	movlw	21
 14917  0044AA  0100               	movlb	0	; () banked
 14918  0044AC  6F64               	movwf	??_setFilter& (0+255),b
 14919  0044AE  C060  F065         	movff	setFilter@val,??_setFilter+1
 14920  0044B2  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 14921  0044B6  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 14922  0044BA  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 14923  0044BE                     u15335:
 14924  0044BE  6764               	tstfsz	??_setFilter& (0+255),b
 14925  0044C0  D001               	goto	u15336
 14926  0044C2  D007               	goto	u15337
 14927  0044C4                     u15336:
 14928  0044C4  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 14929  0044C6  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14930  0044C8  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14931  0044CA  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14932  0044CC  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 14933  0044CE  2F64               	decfsz	??_setFilter& (0+255),f,b
 14934  0044D0  D7F6               	goto	u15335
 14935  0044D2                     u15337:
 14936  0044D2  5165               	movf	(??_setFilter+1)& (0+255),w,b
 14937  0044D4  6F6B               	movwf	setFilter@sidh& (0+255),b
 14938                           
 14939                           ;main.c: 2778: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 14940                           ;main.c: 2779: ((long) (val) & 0x03L) |
 14941                           ;main.c: 2780: 0x08;
 14942  0044D6  C060  F064         	movff	setFilter@val,??_setFilter
 14943  0044DA  0E03               	movlw	3
 14944  0044DC  1764               	andwf	??_setFilter& (0+255),f,b
 14945  0044DE  0E0D               	movlw	13
 14946  0044E0  6F65               	movwf	(??_setFilter+1)& (0+255),b
 14947  0044E2  C060  F066         	movff	setFilter@val,??_setFilter+2
 14948  0044E6  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 14949  0044EA  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 14950  0044EE  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 14951  0044F2                     u15345:
 14952  0044F2  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 14953  0044F4  D001               	goto	u15346
 14954  0044F6  D007               	goto	u15347
 14955  0044F8                     u15346:
 14956  0044F8  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 14957  0044FA  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 14958  0044FC  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14959  0044FE  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14960  004500  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14961  004502  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 14962  004504  D7F6               	goto	u15345
 14963  004506                     u15347:
 14964  004506  5166               	movf	(??_setFilter+2)& (0+255),w,b
 14965  004508  0BE0               	andlw	224
 14966  00450A  1164               	iorwf	??_setFilter& (0+255),w,b
 14967  00450C  0908               	iorlw	8
 14968  00450E  6F6C               	movwf	setFilter@sidl& (0+255),b
 14969                           
 14970                           ; BSR set to: 0
 14971                           ;main.c: 2781: uint8_t eidh = (long) val >> 8L;
 14972  004510  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 14973                           
 14974                           ; BSR set to: 0
 14975                           ;main.c: 2782: uint8_t eidl = val;
 14976  004514  C060  F06E         	movff	setFilter@val,setFilter@eidl
 14977                           
 14978                           ;main.c: 2784: switch (filter) {
 14979  004518  D090               	goto	l12099
 14980  00451A                     l1230:
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;main.c: 2787: RXF0SIDH = sidh;
 14984  00451A  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 14985                           
 14986                           ;main.c: 2788: RXF0SIDL = sidl;
 14987  00451E  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 14988                           
 14989                           ;main.c: 2789: RXF0EIDH = eidh;
 14990  004522  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 14991                           
 14992                           ;main.c: 2790: RXF0EIDL = eidl;
 14993  004526  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 14994                           
 14995                           ;main.c: 2791: break;
 14996  00452A  D0AA               	goto	l1247
 14997  00452C                     l1232:
 14998                           
 14999                           ; BSR set to: 0
 15000                           ;main.c: 2794: RXF1SIDH = sidh;
 15001  00452C  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 15002                           
 15003                           ;main.c: 2795: RXF1SIDL = sidl;
 15004  004530  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 15005                           
 15006                           ;main.c: 2796: RXF1EIDH = eidh;
 15007  004534  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 15008                           
 15009                           ;main.c: 2797: RXF1EIDL = eidl;
 15010  004538  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 15011                           
 15012                           ;main.c: 2798: break;
 15013  00453C  D0A1               	goto	l1247
 15014  00453E                     l1233:
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;main.c: 2801: RXF2SIDH = sidh;
 15018  00453E  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 15019                           
 15020                           ;main.c: 2802: RXF2SIDL = sidl;
 15021  004542  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 15022                           
 15023                           ;main.c: 2803: RXF2EIDH = eidh;
 15024  004546  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 15025                           
 15026                           ;main.c: 2804: RXF2EIDL = eidl;
 15027  00454A  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 15028                           
 15029                           ;main.c: 2805: break;
 15030  00454E  D098               	goto	l1247
 15031  004550                     l1234:
 15032                           
 15033                           ; BSR set to: 0
 15034                           ;main.c: 2808: RXF3SIDH = sidh;
 15035  004550  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 15036                           
 15037                           ;main.c: 2809: RXF3SIDL = sidl;
 15038  004554  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 15039                           
 15040                           ;main.c: 2810: RXF3EIDH = eidh;
 15041  004558  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 15042                           
 15043                           ;main.c: 2811: RXF3EIDL = eidl;
 15044  00455C  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 15045                           
 15046                           ;main.c: 2812: break;
 15047  004560  D08F               	goto	l1247
 15048  004562                     l1235:
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;main.c: 2815: RXF4SIDH = sidh;
 15052  004562  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 15053                           
 15054                           ;main.c: 2816: RXF4SIDL = sidl;
 15055  004566  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 15056                           
 15057                           ;main.c: 2817: RXF4EIDH = eidh;
 15058  00456A  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 15059                           
 15060                           ;main.c: 2818: RXF4EIDL = eidl;
 15061  00456E  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 15062                           
 15063                           ;main.c: 2819: break;
 15064  004572  D086               	goto	l1247
 15065  004574                     l1236:
 15066                           
 15067                           ; BSR set to: 0
 15068                           ;main.c: 2822: RXF5SIDH = sidh;
 15069  004574  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15070                           
 15071                           ;main.c: 2823: RXF5SIDL = sidl;
 15072  004578  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15073                           
 15074                           ;main.c: 2824: RXF5EIDH = eidh;
 15075  00457C  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15076                           
 15077                           ;main.c: 2825: RXF5EIDL = eidl;
 15078  004580  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15079                           
 15080                           ;main.c: 2826: break;
 15081  004584  D07D               	goto	l1247
 15082  004586                     l1237:
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;main.c: 2829: RXF6SIDH = sidh;
 15086  004586  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15087                           
 15088                           ;main.c: 2830: RXF6SIDL = sidl;
 15089  00458A  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15090                           
 15091                           ;main.c: 2831: RXF6EIDH = eidh;
 15092  00458E  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15093                           
 15094                           ;main.c: 2832: RXF6EIDL = eidl;
 15095  004592  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15096                           
 15097                           ;main.c: 2833: break;
 15098  004596  D074               	goto	l1247
 15099  004598                     l1238:
 15100                           
 15101                           ; BSR set to: 0
 15102                           ;main.c: 2836: RXF7SIDH = sidh;
 15103  004598  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15104                           
 15105                           ;main.c: 2837: RXF7SIDL = sidl;
 15106  00459C  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15107                           
 15108                           ;main.c: 2838: RXF7EIDH = eidh;
 15109  0045A0  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15110                           
 15111                           ;main.c: 2839: RXF7EIDL = eidl;
 15112  0045A4  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15113                           
 15114                           ;main.c: 2840: break;
 15115  0045A8  D06B               	goto	l1247
 15116  0045AA                     l1239:
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;main.c: 2843: RXF8SIDH = sidh;
 15120  0045AA  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15121                           
 15122                           ;main.c: 2844: RXF8SIDL = sidl;
 15123  0045AE  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15124                           
 15125                           ;main.c: 2845: RXF8EIDH = eidh;
 15126  0045B2  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15127                           
 15128                           ;main.c: 2846: RXF8EIDL = eidl;
 15129  0045B6  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15130                           
 15131                           ;main.c: 2847: break;
 15132  0045BA  D062               	goto	l1247
 15133  0045BC                     l1240:
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;main.c: 2850: RXF9SIDH = sidh;
 15137  0045BC  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15138                           
 15139                           ;main.c: 2851: RXF9SIDL = sidl;
 15140  0045C0  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15141                           
 15142                           ;main.c: 2852: RXF9EIDH = eidh;
 15143  0045C4  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15144                           
 15145                           ;main.c: 2853: RXF9EIDL = eidl;
 15146  0045C8  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15147                           
 15148                           ;main.c: 2854: break;
 15149  0045CC  D059               	goto	l1247
 15150  0045CE                     l1241:
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;main.c: 2857: RXF10SIDH = sidh;
 15154  0045CE  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15155                           
 15156                           ;main.c: 2858: RXF10SIDL = sidl;
 15157  0045D2  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15158                           
 15159                           ;main.c: 2859: RXF10EIDH = eidh;
 15160  0045D6  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15161                           
 15162                           ;main.c: 2860: RXF10EIDL = eidl;
 15163  0045DA  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15164                           
 15165                           ;main.c: 2861: break;
 15166  0045DE  D050               	goto	l1247
 15167  0045E0                     l1242:
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;main.c: 2864: RXF11SIDH = sidh;
 15171  0045E0  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15172                           
 15173                           ;main.c: 2865: RXF11SIDL = sidl;
 15174  0045E4  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15175                           
 15176                           ;main.c: 2866: RXF11EIDH = eidh;
 15177  0045E8  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15178                           
 15179                           ;main.c: 2867: RXF11EIDL = eidl;
 15180  0045EC  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15181                           
 15182                           ;main.c: 2868: break;
 15183  0045F0  D047               	goto	l1247
 15184  0045F2                     l1243:
 15185                           
 15186                           ; BSR set to: 0
 15187                           ;main.c: 2871: RXF12SIDH = sidh;
 15188  0045F2  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15189                           
 15190                           ;main.c: 2872: RXF12SIDL = sidl;
 15191  0045F6  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15192                           
 15193                           ;main.c: 2873: RXF12EIDH = eidh;
 15194  0045FA  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15195                           
 15196                           ;main.c: 2874: RXF12EIDL = eidl;
 15197  0045FE  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15198                           
 15199                           ;main.c: 2875: break;
 15200  004602  D03E               	goto	l1247
 15201  004604                     l1244:
 15202                           
 15203                           ; BSR set to: 0
 15204                           ;main.c: 2878: RXF13SIDH = sidh;
 15205  004604  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15206                           
 15207                           ;main.c: 2879: RXF13SIDL = sidl;
 15208  004608  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15209                           
 15210                           ;main.c: 2880: RXF13EIDH = eidh;
 15211  00460C  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15212                           
 15213                           ;main.c: 2881: RXF13EIDL = eidl;
 15214  004610  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15215                           
 15216                           ;main.c: 2882: break;
 15217  004614  D035               	goto	l1247
 15218  004616                     l1245:
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;main.c: 2885: RXF14SIDH = sidh;
 15222  004616  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15223                           
 15224                           ;main.c: 2886: RXF14SIDL = sidl;
 15225  00461A  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15226                           
 15227                           ;main.c: 2887: RXF14EIDH = eidh;
 15228  00461E  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15229                           
 15230                           ;main.c: 2888: RXF14EIDL = eidl;
 15231  004622  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15232                           
 15233                           ;main.c: 2889: break;
 15234  004626  D02C               	goto	l1247
 15235  004628                     l1246:
 15236                           
 15237                           ; BSR set to: 0
 15238                           ;main.c: 2892: RXF15SIDH = sidh;
 15239  004628  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15240                           
 15241                           ;main.c: 2893: RXF15SIDL = sidl;
 15242  00462C  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15243                           
 15244                           ;main.c: 2894: RXF15EIDH = eidh;
 15245  004630  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15246                           
 15247                           ;main.c: 2895: RXF15EIDL = eidl;
 15248  004634  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15249                           
 15250                           ;main.c: 2896: break;
 15251  004638  D023               	goto	l1247
 15252  00463A                     l12099:
 15253                           
 15254                           ; BSR set to: 0
 15255  00463A  516A               	movf	setFilter@filter& (0+255),w,b
 15256                           
 15257                           ; Switch size 1, requested type "space"
 15258                           ; Number of cases is 16, Range of values is 0 to 15
 15259                           ; switch strategies available:
 15260                           ; Name         Instructions Cycles
 15261                           ; simple_byte           49    25 (average)
 15262                           ;	Chosen strategy is simple_byte
 15263  00463C  E101 D76D          	bz	l1230
 15264  004640  0A01               	xorlw	1	; case 1
 15265  004642  E101 D773          	bz	l1232
 15266  004646  0A03               	xorlw	3	; case 2
 15267  004648  E101 D779          	bz	l1233
 15268  00464C  0A01               	xorlw	1	; case 3
 15269  00464E  E080               	bz	l1234
 15270  004650  0A07               	xorlw	7	; case 4
 15271  004652  E087               	bz	l1235
 15272  004654  0A01               	xorlw	1	; case 5
 15273  004656  E08E               	bz	l1236
 15274  004658  0A03               	xorlw	3	; case 6
 15275  00465A  E095               	bz	l1237
 15276  00465C  0A01               	xorlw	1	; case 7
 15277  00465E  E09C               	bz	l1238
 15278  004660  0A0F               	xorlw	15	; case 8
 15279  004662  E0A3               	bz	l1239
 15280  004664  0A01               	xorlw	1	; case 9
 15281  004666  E0AA               	bz	l1240
 15282  004668  0A03               	xorlw	3	; case 10
 15283  00466A  E0B1               	bz	l1241
 15284  00466C  0A01               	xorlw	1	; case 11
 15285  00466E  E0B8               	bz	l1242
 15286  004670  0A07               	xorlw	7	; case 12
 15287  004672  E0BF               	bz	l1243
 15288  004674  0A01               	xorlw	1	; case 13
 15289  004676  E0C6               	bz	l1244
 15290  004678  0A03               	xorlw	3	; case 14
 15291  00467A  E0CD               	bz	l1245
 15292  00467C  0A01               	xorlw	1	; case 15
 15293  00467E  E0D4               	bz	l1246
 15294  004680                     l1247:
 15295                           
 15296                           ; BSR set to: 0
 15297  004680  0012               	return	
 15298  004682                     __end_of_setFilter:
 15299                           	opt stack 0
 15300                           tblptru	equ	0xFF8
 15301                           tblptrh	equ	0xFF7
 15302                           tblptrl	equ	0xFF6
 15303                           tablat	equ	0xFF5
 15304                           prodh	equ	0xFF4
 15305                           prodl	equ	0xFF3
 15306                           intcon	equ	0xFF2
 15307                           indf0	equ	0xFEF
 15308                           postinc0	equ	0xFEE
 15309                           fsr0h	equ	0xFEA
 15310                           fsr0l	equ	0xFE9
 15311                           wreg	equ	0xFE8
 15312                           indf1	equ	0xFE7
 15313                           postinc1	equ	0xFE6
 15314                           postdec1	equ	0xFE5
 15315                           fsr1h	equ	0xFE2
 15316                           fsr1l	equ	0xFE1
 15317                           indf2	equ	0xFDF
 15318                           postinc2	equ	0xFDE
 15319                           postdec2	equ	0xFDD
 15320                           plusw2	equ	0xFDB
 15321                           fsr2h	equ	0xFDA
 15322                           fsr2l	equ	0xFD9
 15323                           status	equ	0xFD8
 15324                           
 15325 ;; *************** function _writeRegisterExtended *****************
 15326 ;; Defined at:
 15327 ;;		line 2339 in file "main.c"
 15328 ;; Parameters:    Size  Location     Type
 15329 ;;  nodeid          1    wreg     unsigned char 
 15330 ;;  page            2   86[BANK0 ] unsigned short 
 15331 ;;  reg             1   88[BANK0 ] unsigned char 
 15332 ;;  timeout         2   89[BANK0 ] unsigned short 
 15333 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15334 ;;		 -> doModeVerbose@value_1159(1), 
 15335 ;; Auto vars:     Size  Location     Type
 15336 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15337 ;; Return value:  Size  Location     Type
 15338 ;;                  1    wreg      enum E15660
 15339 ;; Registers used:
 15340 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15341 ;; Tracked objects:
 15342 ;;		On entry : F/2
 15343 ;;		On exit  : E/0
 15344 ;;		Unchanged: 0/0
 15345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15346 ;;      Params:         0       7       0       0       0       0       0
 15347 ;;      Locals:         0       1       0       0       0       0       0
 15348 ;;      Temps:          0       4       0       0       0       0       0
 15349 ;;      Totals:         0      12       0       0       0       0       0
 15350 ;;Total ram usage:       12 bytes
 15351 ;; Hardware stack levels used:    1
 15352 ;; Hardware stack levels required when called:    7
 15353 ;; This function calls:
 15354 ;;		_sendVSCPFrame
 15355 ;;		_getVSCPFrame
 15356 ;; This function is called by:
 15357 ;;		_doModeVerbose
 15358 ;; This function uses a non-reentrant model
 15359 ;;
 15360                           
 15361                           	psect	text24
 15362  003414                     __ptext24:
 15363                           	opt stack 0
 15364  003414                     _writeRegisterExtended:
 15365                           	opt stack 21
 15366                           
 15367                           ; BSR set to: 0
 15368                           ;incstack = 0
 15369                           ;incstack = 0
 15370                           ;writeRegisterExtended@nodeid stored from wreg
 15371  003414  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 15372                           
 15373                           ; BSR set to: 2
 15374                           ;main.c: 2340: vscpData[ 0 ] = nodeid;
 15375  003418  C0C1  F1A4         	movff	writeRegisterExtended@nodeid,_vscpData
 15376                           
 15377                           ; BSR set to: 2
 15378                           ;main.c: 2341: vscpData[ 1 ] = page >> 8;
 15379  00341C  0100               	movlb	0	; () banked
 15380  00341E  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15381  003420  0101               	movlb	1	; () banked
 15382  003422  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15383                           
 15384                           ; BSR set to: 1
 15385                           ;main.c: 2342: vscpData[ 2 ] = page & 0xff;
 15386  003424  C0B6  F1A6         	movff	writeRegisterExtended@page,_vscpData+2
 15387                           
 15388                           ; BSR set to: 1
 15389                           ;main.c: 2343: vscpData[ 3 ] = reg;
 15390  003428  C0B8  F1A7         	movff	writeRegisterExtended@reg,_vscpData+3
 15391                           
 15392                           ; BSR set to: 1
 15393                           ;main.c: 2344: vscpData[ 4 ] = *value;
 15394  00342C  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15395  003430  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15396  003434  50DF               	movf	indf2,w,c
 15397  003436  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15398                           
 15399                           ; BSR set to: 1
 15400                           ;main.c: 2346: if (sendVSCPFrame(0,
 15401                           ;main.c: 2347: 38,
 15402                           ;main.c: 2348: 0,
 15403                           ;main.c: 2349: 0,
 15404                           ;main.c: 2350: 5,
 15405                           ;main.c: 2351: vscpData)) {
 15406  003438  0100               	movlb	0	; () banked
 15407  00343A  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15408  00343C  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15409  00343E  0E26               	movlw	38
 15410  003440  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15411  003442  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15412  003444  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15413  003446  0E05               	movlw	5
 15414  003448  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15415  00344A  0E01               	movlw	high _vscpData
 15416  00344C  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15417  00344E  0EA4               	movlw	low _vscpData
 15418  003450  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15419  003452  EC78  F014         	call	_sendVSCPFrame	;wreg free
 15420  003456  0900               	iorlw	0
 15421  003458  E05E               	bz	l11999
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;main.c: 2353: timekeeper = 0;
 15425  00345A  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15426  00345C  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15427  00345E  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15428  003460  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15429                           
 15430                           ;main.c: 2354: while (timekeeper < timeout) {
 15431  003462  D049               	goto	l11997
 15432  003464                     l1087:
 15433                           
 15434                           ; BSR set to: 0
 15435  003464  0004               	clrwdt		;# 
 15436                           
 15437                           ;main.c: 2358: if (getVSCPFrame(&vscpClass,
 15438                           ;main.c: 2359: &vscpType,
 15439                           ;main.c: 2360: &vscpNodeId,
 15440                           ;main.c: 2361: &vscpPriority,
 15441                           ;main.c: 2362: &vscpSize,
 15442                           ;main.c: 2363: vscpData)) {
 15443  003466  0E01               	movlw	high _vscpClass
 15444  003468  0100               	movlb	0	; () banked
 15445  00346A  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15446  00346C  0EAC               	movlw	low _vscpClass
 15447  00346E  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15448  003470  0E01               	movlw	high _vscpType
 15449  003472  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15450  003474  0EB1               	movlw	low _vscpType
 15451  003476  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15452  003478  0E01               	movlw	high _vscpNodeId
 15453  00347A  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15454  00347C  0EAE               	movlw	low _vscpNodeId
 15455  00347E  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15456  003480  0E01               	movlw	high _vscpPriority
 15457  003482  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15458  003484  0EAF               	movlw	low _vscpPriority
 15459  003486  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15460  003488  0E01               	movlw	high _vscpSize
 15461  00348A  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15462  00348C  0EB0               	movlw	low _vscpSize
 15463  00348E  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15464  003490  0E01               	movlw	high _vscpData
 15465  003492  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15466  003494  0EA4               	movlw	low _vscpData
 15467  003496  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15468  003498  EC88  F011         	call	_getVSCPFrame	;wreg free
 15469  00349C  0900               	iorlw	0
 15470  00349E  E02B               	bz	l11997
 15471                           
 15472                           ; BSR set to: 0
 15473                           ;main.c: 2365: if ((nodeid == vscpNodeId) &&
 15474                           ;main.c: 2366: (5 == vscpSize) &&
 15475                           ;main.c: 2367: (0 == vscpData[ 0 ]) &&
 15476                           ;main.c: 2368: ((page >> 8) == vscpData[ 1 ]) &&
 15477                           ;main.c: 2369: ((page & 0xff) == vscpData[ 2 ]) &&
 15478                           ;main.c: 2370: (reg == vscpData[ 3 ]) &&
 15479                           ;main.c: 2371: (*value == vscpData[ 4 ])) {
 15480  0034A0  0101               	movlb	1	; () banked
 15481  0034A2  51AE               	movf	_vscpNodeId& (0+255),w,b
 15482  0034A4  0100               	movlb	0	; () banked
 15483  0034A6  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15484  0034A8  D026               	goto	l11997
 15485                           
 15486                           ; BSR set to: 0
 15487  0034AA  0101               	movlb	1	; () banked
 15488  0034AC  51B0               	movf	_vscpSize& (0+255),w,b
 15489  0034AE  0A05               	xorlw	5
 15490  0034B0  E122               	bnz	l11997
 15491                           
 15492                           ; BSR set to: 1
 15493  0034B2  67A4               	tstfsz	_vscpData& (0+255),b
 15494  0034B4  D020               	goto	l11997
 15495                           
 15496                           ; BSR set to: 1
 15497  0034B6  0100               	movlb	0	; () banked
 15498  0034B8  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15499  0034BA  0101               	movlb	1	; () banked
 15500  0034BC  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15501  0034BE  E11B               	bnz	l11997
 15502                           
 15503                           ; BSR set to: 1
 15504  0034C0  0100               	movlb	0	; () banked
 15505  0034C2  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 15506  0034C4  EE21  F0A6         	lfsr	2,_vscpData+2
 15507  0034C8  62DF               	cpfseq	indf2,c
 15508  0034CA  D015               	goto	l11997
 15509                           
 15510                           ; BSR set to: 1
 15511  0034CC  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 15512  0034CE  0101               	movlb	1	; () banked
 15513  0034D0  EE21  F0A7         	lfsr	2,_vscpData+3
 15514  0034D4  62DF               	cpfseq	indf2,c
 15515  0034D6  D00F               	goto	l11997
 15516                           
 15517                           ; BSR set to: 1
 15518  0034D8  51A8               	movf	(_vscpData+4)& (0+255),w,b
 15519  0034DA  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15520  0034DE  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15521  0034E2  62DF               	cpfseq	indf2,c
 15522  0034E4  D008               	goto	l11997
 15523                           
 15524                           ; BSR set to: 1
 15525                           ;main.c: 2372: *value = vscpData[ 1 ];
 15526  0034E6  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15527  0034EA  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15528  0034EE  C1A5  FFDF         	movff	_vscpData+1,indf2
 15529                           
 15530                           ; BSR set to: 1
 15531                           ;main.c: 2373: return 1;
 15532  0034F2  0E01               	movlw	1
 15533  0034F4  D011               	goto	l1090
 15534  0034F6                     l11997:
 15535  0034F6  0100               	movlb	0	; () banked
 15536  0034F8  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15537  0034FA  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 15538  0034FC  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15539  0034FE  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15540  003500  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15541  003502  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15542  003504  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 15543  003506  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15544  003508  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15545  00350A  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15546  00350C  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15547  00350E  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15548  003510  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15549  003512  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15550  003514  E3A7               	bnc	l1087
 15551  003516                     l11999:
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;main.c: 2374: }
 15555                           ;main.c: 2376: }
 15556                           ;main.c: 2378: }
 15557                           ;main.c: 2380: }
 15558                           ;main.c: 2382: return 0;
 15559  003516  0E00               	movlw	0
 15560  003518                     l1090:
 15561  003518  0012               	return	
 15562  00351A                     __end_of_writeRegisterExtended:
 15563                           	opt stack 0
 15564                           tblptru	equ	0xFF8
 15565                           tblptrh	equ	0xFF7
 15566                           tblptrl	equ	0xFF6
 15567                           tablat	equ	0xFF5
 15568                           prodh	equ	0xFF4
 15569                           prodl	equ	0xFF3
 15570                           intcon	equ	0xFF2
 15571                           indf0	equ	0xFEF
 15572                           postinc0	equ	0xFEE
 15573                           fsr0h	equ	0xFEA
 15574                           fsr0l	equ	0xFE9
 15575                           wreg	equ	0xFE8
 15576                           indf1	equ	0xFE7
 15577                           postinc1	equ	0xFE6
 15578                           postdec1	equ	0xFE5
 15579                           fsr1h	equ	0xFE2
 15580                           fsr1l	equ	0xFE1
 15581                           indf2	equ	0xFDF
 15582                           postinc2	equ	0xFDE
 15583                           postdec2	equ	0xFDD
 15584                           plusw2	equ	0xFDB
 15585                           fsr2h	equ	0xFDA
 15586                           fsr2l	equ	0xFD9
 15587                           status	equ	0xFD8
 15588                           
 15589 ;; *************** function _printBinary *****************
 15590 ;; Defined at:
 15591 ;;		line 2426 in file "main.c"
 15592 ;; Parameters:    Size  Location     Type
 15593 ;;  value           1    wreg     unsigned char 
 15594 ;; Auto vars:     Size  Location     Type
 15595 ;;  value           1    3[BANK0 ] unsigned char 
 15596 ;;  i               2    4[BANK0 ] int 
 15597 ;; Return value:  Size  Location     Type
 15598 ;;		None               void
 15599 ;; Registers used:
 15600 ;;		wreg, status,2, status,0, cstack
 15601 ;; Tracked objects:
 15602 ;;		On entry : F/2
 15603 ;;		On exit  : F/0
 15604 ;;		Unchanged: 0/0
 15605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15606 ;;      Params:         0       0       0       0       0       0       0
 15607 ;;      Locals:         0       3       0       0       0       0       0
 15608 ;;      Temps:          0       2       0       0       0       0       0
 15609 ;;      Totals:         0       5       0       0       0       0       0
 15610 ;;Total ram usage:        5 bytes
 15611 ;; Hardware stack levels used:    1
 15612 ;; Hardware stack levels required when called:    4
 15613 ;; This function calls:
 15614 ;;		_WriteUSART
 15615 ;; This function is called by:
 15616 ;;		_doModeVerbose
 15617 ;; This function uses a non-reentrant model
 15618 ;;
 15619                           
 15620                           	psect	text25
 15621  001C44                     __ptext25:
 15622                           	opt stack 0
 15623  001C44                     _printBinary:
 15624                           	opt stack 24
 15625                           
 15626                           ;incstack = 0
 15627                           ;incstack = 0
 15628                           ;printBinary@value stored from wreg
 15629  001C44  CFE8 F063          	movff	wreg,printBinary@value
 15630                           
 15631                           ; BSR set to: 2
 15632                           ;main.c: 2427: int i;
 15633                           ;main.c: 2429: for (i = 7; i >= 0; i--) {
 15634  001C48  0100               	movlb	0	; () banked
 15635  001C4A  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15636  001C4C  0E07               	movlw	7
 15637  001C4E  6F64               	movwf	printBinary@i& (0+255),b
 15638  001C50                     l11949:
 15639                           
 15640                           ; BSR set to: 0
 15641                           ;main.c: 2430: if (value & (1 << i)) {
 15642  001C50  C064  F061         	movff	printBinary@i,??_printBinary
 15643  001C54  0E01               	movlw	1
 15644  001C56  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15645  001C58  2B61               	incf	??_printBinary& (0+255),f,b
 15646  001C5A  D002               	goto	u15094
 15647  001C5C                     u15095:
 15648  001C5C  90D8               	bcf	status,0,c
 15649  001C5E  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15650  001C60                     u15094:
 15651  001C60  2F61               	decfsz	??_printBinary& (0+255),f,b
 15652  001C62  D7FC               	goto	u15095
 15653  001C64  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15654  001C66  1563               	andwf	printBinary@value& (0+255),w,b
 15655  001C68  E006               	bz	l1110
 15656  001C6A                     l1106:
 15657  001C6A  A2AC               	btfss	4012,1,c	;volatile
 15658  001C6C  D7FE               	goto	l1106
 15659                           
 15660                           ;main.c: 2432: WriteUSART('1');
 15661  001C6E  0E31               	movlw	49
 15662  001C70  ECC1  F00B         	call	_WriteUSART
 15663                           
 15664                           ;main.c: 2433: } else {
 15665  001C74  D005               	goto	l11957
 15666  001C76                     l1110:
 15667  001C76  A2AC               	btfss	4012,1,c	;volatile
 15668  001C78  D7FE               	goto	l1110
 15669                           
 15670                           ;main.c: 2435: WriteUSART('0');
 15671  001C7A  0E30               	movlw	48
 15672  001C7C  ECC1  F00B         	call	_WriteUSART
 15673  001C80                     l11957:
 15674  001C80  0100               	movlb	0	; () banked
 15675  001C82  0764               	decf	printBinary@i& (0+255),f,b
 15676  001C84  A0D8               	btfss	status,0,c
 15677  001C86  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15678                           
 15679                           ; BSR set to: 0
 15680  001C88  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15681                           
 15682                           ; BSR set to: 0
 15683  001C8A  0012               	return	
 15684  001C8C  D7E1               	goto	l11949
 15685  001C8E                     __end_of_printBinary:
 15686                           	opt stack 0
 15687                           tblptru	equ	0xFF8
 15688                           tblptrh	equ	0xFF7
 15689                           tblptrl	equ	0xFF6
 15690                           tablat	equ	0xFF5
 15691                           prodh	equ	0xFF4
 15692                           prodl	equ	0xFF3
 15693                           intcon	equ	0xFF2
 15694                           indf0	equ	0xFEF
 15695                           postinc0	equ	0xFEE
 15696                           fsr0h	equ	0xFEA
 15697                           fsr0l	equ	0xFE9
 15698                           wreg	equ	0xFE8
 15699                           indf1	equ	0xFE7
 15700                           postinc1	equ	0xFE6
 15701                           postdec1	equ	0xFE5
 15702                           fsr1h	equ	0xFE2
 15703                           fsr1l	equ	0xFE1
 15704                           indf2	equ	0xFDF
 15705                           postinc2	equ	0xFDE
 15706                           postdec2	equ	0xFDD
 15707                           plusw2	equ	0xFDB
 15708                           fsr2h	equ	0xFDA
 15709                           fsr2l	equ	0xFD9
 15710                           status	equ	0xFD8
 15711                           
 15712 ;; *************** function _readRegisterExtended *****************
 15713 ;; Defined at:
 15714 ;;		line 2238 in file "main.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  nodeid          1    wreg     unsigned char 
 15717 ;;  page            2   86[BANK0 ] unsigned short 
 15718 ;;  reg             1   88[BANK0 ] unsigned char 
 15719 ;;  timeout         2   89[BANK0 ] unsigned short 
 15720 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15721 ;;		 -> doModeVerbose@value(1), 
 15722 ;; Auto vars:     Size  Location     Type
 15723 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15724 ;; Return value:  Size  Location     Type
 15725 ;;                  1    wreg      enum E15660
 15726 ;; Registers used:
 15727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15728 ;; Tracked objects:
 15729 ;;		On entry : F/2
 15730 ;;		On exit  : E/0
 15731 ;;		Unchanged: 0/0
 15732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15733 ;;      Params:         0       7       0       0       0       0       0
 15734 ;;      Locals:         0       1       0       0       0       0       0
 15735 ;;      Temps:          0       4       0       0       0       0       0
 15736 ;;      Totals:         0      12       0       0       0       0       0
 15737 ;;Total ram usage:       12 bytes
 15738 ;; Hardware stack levels used:    1
 15739 ;; Hardware stack levels required when called:    7
 15740 ;; This function calls:
 15741 ;;		_sendVSCPFrame
 15742 ;;		_getVSCPFrame
 15743 ;; This function is called by:
 15744 ;;		_doModeVerbose
 15745 ;; This function uses a non-reentrant model
 15746 ;;
 15747                           
 15748                           	psect	text26
 15749  00310E                     __ptext26:
 15750                           	opt stack 0
 15751  00310E                     _readRegisterExtended:
 15752                           	opt stack 21
 15753                           
 15754                           ; BSR set to: 0
 15755                           ;incstack = 0
 15756                           ;incstack = 0
 15757                           ;readRegisterExtended@nodeid stored from wreg
 15758  00310E  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 15759                           
 15760                           ; BSR set to: 2
 15761                           ;main.c: 2239: vscpData[ 0 ] = nodeid;
 15762  003112  C0C1  F1A4         	movff	readRegisterExtended@nodeid,_vscpData
 15763                           
 15764                           ; BSR set to: 2
 15765                           ;main.c: 2240: vscpData[ 1 ] = page >> 8;
 15766  003116  0100               	movlb	0	; () banked
 15767  003118  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15768  00311A  0101               	movlb	1	; () banked
 15769  00311C  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15770                           
 15771                           ; BSR set to: 1
 15772                           ;main.c: 2241: vscpData[ 2 ] = page & 0xff;
 15773  00311E  C0B6  F1A6         	movff	readRegisterExtended@page,_vscpData+2
 15774                           
 15775                           ; BSR set to: 1
 15776                           ;main.c: 2242: vscpData[ 3 ] = reg;
 15777  003122  C0B8  F1A7         	movff	readRegisterExtended@reg,_vscpData+3
 15778                           
 15779                           ; BSR set to: 1
 15780                           ;main.c: 2243: vscpData[ 4 ] = 1;
 15781  003126  0E01               	movlw	1
 15782  003128  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15783                           
 15784                           ; BSR set to: 1
 15785                           ;main.c: 2245: if (sendVSCPFrame(0,
 15786                           ;main.c: 2246: 37,
 15787                           ;main.c: 2247: 0,
 15788                           ;main.c: 2248: 0,
 15789                           ;main.c: 2249: 5,
 15790                           ;main.c: 2250: vscpData)) {
 15791  00312A  0100               	movlb	0	; () banked
 15792  00312C  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15793  00312E  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15794  003130  0E25               	movlw	37
 15795  003132  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15796  003134  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15797  003136  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15798  003138  0E05               	movlw	5
 15799  00313A  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15800  00313C  0E01               	movlw	high _vscpData
 15801  00313E  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15802  003140  0EA4               	movlw	low _vscpData
 15803  003142  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15804  003144  EC78  F014         	call	_sendVSCPFrame	;wreg free
 15805  003148  0900               	iorlw	0
 15806  00314A  E05D               	bz	l11589
 15807                           
 15808                           ; BSR set to: 0
 15809                           ;main.c: 2252: timekeeper = 0;
 15810  00314C  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15811  00314E  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15812  003150  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15813  003152  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15814                           
 15815                           ;main.c: 2253: while (timekeeper < timeout) {
 15816  003154  D048               	goto	l11587
 15817  003156                     l1069:
 15818                           
 15819                           ; BSR set to: 0
 15820  003156  0004               	clrwdt		;# 
 15821                           
 15822                           ;main.c: 2257: if (getVSCPFrame(&vscpClass,
 15823                           ;main.c: 2258: &vscpType,
 15824                           ;main.c: 2259: &vscpNodeId,
 15825                           ;main.c: 2260: &vscpPriority,
 15826                           ;main.c: 2261: &vscpSize,
 15827                           ;main.c: 2262: vscpData)) {
 15828  003158  0E01               	movlw	high _vscpClass
 15829  00315A  0100               	movlb	0	; () banked
 15830  00315C  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15831  00315E  0EAC               	movlw	low _vscpClass
 15832  003160  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15833  003162  0E01               	movlw	high _vscpType
 15834  003164  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15835  003166  0EB1               	movlw	low _vscpType
 15836  003168  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15837  00316A  0E01               	movlw	high _vscpNodeId
 15838  00316C  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15839  00316E  0EAE               	movlw	low _vscpNodeId
 15840  003170  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15841  003172  0E01               	movlw	high _vscpPriority
 15842  003174  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15843  003176  0EAF               	movlw	low _vscpPriority
 15844  003178  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15845  00317A  0E01               	movlw	high _vscpSize
 15846  00317C  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15847  00317E  0EB0               	movlw	low _vscpSize
 15848  003180  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15849  003182  0E01               	movlw	high _vscpData
 15850  003184  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15851  003186  0EA4               	movlw	low _vscpData
 15852  003188  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15853  00318A  EC88  F011         	call	_getVSCPFrame	;wreg free
 15854  00318E  0900               	iorlw	0
 15855  003190  E02A               	bz	l11587
 15856                           
 15857                           ; BSR set to: 0
 15858                           ;main.c: 2263: if ((nodeid == vscpNodeId) &&
 15859                           ;main.c: 2264: (0 == vscpClass) &&
 15860                           ;main.c: 2265: (39 == vscpType) &&
 15861                           ;main.c: 2266: (5 == vscpSize) &&
 15862                           ;main.c: 2267: (0 == vscpData[ 0 ]) &&
 15863                           ;main.c: 2268: ((page >> 8) == vscpData[ 1 ]) &&
 15864                           ;main.c: 2269: ((page & 0xff) == vscpData[ 2 ]) &&
 15865                           ;main.c: 2270: (reg == vscpData[ 3 ])) {
 15866  003192  0101               	movlb	1	; () banked
 15867  003194  51AE               	movf	_vscpNodeId& (0+255),w,b
 15868  003196  0100               	movlb	0	; () banked
 15869  003198  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15870  00319A  D025               	goto	l11587
 15871                           
 15872                           ; BSR set to: 0
 15873  00319C  0101               	movlb	1	; () banked
 15874  00319E  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 15875  0031A0  11AC               	iorwf	_vscpClass& (0+255),w,b
 15876  0031A2  E121               	bnz	l11587
 15877                           
 15878                           ; BSR set to: 1
 15879  0031A4  51B1               	movf	_vscpType& (0+255),w,b
 15880  0031A6  0A27               	xorlw	39
 15881  0031A8  E11E               	bnz	l11587
 15882                           
 15883                           ; BSR set to: 1
 15884  0031AA  51B0               	movf	_vscpSize& (0+255),w,b
 15885  0031AC  0A05               	xorlw	5
 15886  0031AE  E11B               	bnz	l11587
 15887                           
 15888                           ; BSR set to: 1
 15889  0031B0  67A4               	tstfsz	_vscpData& (0+255),b
 15890  0031B2  D019               	goto	l11587
 15891                           
 15892                           ; BSR set to: 1
 15893  0031B4  0100               	movlb	0	; () banked
 15894  0031B6  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15895  0031B8  0101               	movlb	1	; () banked
 15896  0031BA  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15897  0031BC  E114               	bnz	l11587
 15898                           
 15899                           ; BSR set to: 1
 15900  0031BE  0100               	movlb	0	; () banked
 15901  0031C0  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 15902  0031C2  EE21  F0A6         	lfsr	2,_vscpData+2
 15903  0031C6  62DF               	cpfseq	indf2,c
 15904  0031C8  D00E               	goto	l11587
 15905                           
 15906                           ; BSR set to: 1
 15907  0031CA  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 15908  0031CC  0101               	movlb	1	; () banked
 15909  0031CE  EE21  F0A7         	lfsr	2,_vscpData+3
 15910  0031D2  62DF               	cpfseq	indf2,c
 15911  0031D4  D008               	goto	l11587
 15912                           
 15913                           ; BSR set to: 1
 15914                           ;main.c: 2271: *value = vscpData[ 4 ];
 15915  0031D6  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 15916  0031DA  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15917  0031DE  C1A8  FFDF         	movff	_vscpData+4,indf2
 15918                           
 15919                           ; BSR set to: 1
 15920                           ;main.c: 2272: return 1;
 15921  0031E2  0E01               	movlw	1
 15922  0031E4  D011               	goto	l1072
 15923  0031E6                     l11587:
 15924  0031E6  0100               	movlb	0	; () banked
 15925  0031E8  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 15926  0031EA  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 15927  0031EC  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15928  0031EE  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15929  0031F0  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15930  0031F2  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15931  0031F4  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 15932  0031F6  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15933  0031F8  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15934  0031FA  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15935  0031FC  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15936  0031FE  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15937  003200  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15938  003202  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15939  003204  E3A8               	bnc	l1069
 15940  003206                     l11589:
 15941                           
 15942                           ; BSR set to: 0
 15943                           ;main.c: 2273: }
 15944                           ;main.c: 2274: }
 15945                           ;main.c: 2275: }
 15946                           ;main.c: 2276: }
 15947                           ;main.c: 2278: return 0;
 15948  003206  0E00               	movlw	0
 15949  003208                     l1072:
 15950  003208  0012               	return	
 15951  00320A                     __end_of_readRegisterExtended:
 15952                           	opt stack 0
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           indf0	equ	0xFEF
 15961                           postinc0	equ	0xFEE
 15962                           fsr0h	equ	0xFEA
 15963                           fsr0l	equ	0xFE9
 15964                           wreg	equ	0xFE8
 15965                           indf1	equ	0xFE7
 15966                           postinc1	equ	0xFE6
 15967                           postdec1	equ	0xFE5
 15968                           fsr1h	equ	0xFE2
 15969                           fsr1l	equ	0xFE1
 15970                           indf2	equ	0xFDF
 15971                           postinc2	equ	0xFDE
 15972                           postdec2	equ	0xFDD
 15973                           plusw2	equ	0xFDB
 15974                           fsr2h	equ	0xFDA
 15975                           fsr2l	equ	0xFD9
 15976                           status	equ	0xFD8
 15977                           
 15978 ;; *************** function _strcpy *****************
 15979 ;; Defined at:
 15980 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 15981 ;; Parameters:    Size  Location     Type
 15982 ;;  to              2    0[BANK0 ] PTR unsigned char 
 15983 ;;		 -> cmdbuf(80), 
 15984 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 15985 ;;		 -> cmdbuf(80), 
 15986 ;; Auto vars:     Size  Location     Type
 15987 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 15988 ;;		 -> cmdbuf(80), 
 15989 ;; Return value:  Size  Location     Type
 15990 ;;                  2    0[BANK0 ] PTR unsigned char 
 15991 ;; Registers used:
 15992 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15993 ;; Tracked objects:
 15994 ;;		On entry : F/1
 15995 ;;		On exit  : E/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15998 ;;      Params:         0       4       0       0       0       0       0
 15999 ;;      Locals:         0       2       0       0       0       0       0
 16000 ;;      Temps:          0       0       0       0       0       0       0
 16001 ;;      Totals:         0       6       0       0       0       0       0
 16002 ;;Total ram usage:        6 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; Hardware stack levels required when called:    3
 16005 ;; This function calls:
 16006 ;;		Nothing
 16007 ;; This function is called by:
 16008 ;;		_doModeVerbose
 16009 ;; This function uses a non-reentrant model
 16010 ;;
 16011                           
 16012                           	psect	text27
 16013  0018A4                     __ptext27:
 16014                           	opt stack 0
 16015  0018A4                     _strcpy:
 16016                           	opt stack 25
 16017                           
 16018                           ; BSR set to: 1
 16019                           
 16020                           ;incstack = 0
 16021                           ;incstack = 0
 16022  0018A4  C060  F064         	movff	strcpy@to,strcpy@cp
 16023  0018A8  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16024  0018AC  D005               	goto	l11541
 16025  0018AE                     l11539:
 16026  0018AE  0100               	movlb	0	; () banked
 16027  0018B0  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16028  0018B2  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16029  0018B4  4B62               	infsnz	strcpy@from& (0+255),f,b
 16030  0018B6  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16031  0018B8                     l11541:
 16032  0018B8  C062  FFD9         	movff	strcpy@from,fsr2l
 16033  0018BC  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16034  0018C0  C064  FFE1         	movff	strcpy@cp,fsr1l
 16035  0018C4  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16036  0018C8  CFDF FFE7          	movff	indf2,indf1
 16037  0018CC  50E7               	movf	indf1,w,c
 16038  0018CE  B4D8               	btfsc	status,2,c
 16039  0018D0  0012               	return	
 16040  0018D2  D7ED               	goto	l11539
 16041  0018D4                     __end_of_strcpy:
 16042                           	opt stack 0
 16043                           tblptru	equ	0xFF8
 16044                           tblptrh	equ	0xFF7
 16045                           tblptrl	equ	0xFF6
 16046                           tablat	equ	0xFF5
 16047                           prodh	equ	0xFF4
 16048                           prodl	equ	0xFF3
 16049                           intcon	equ	0xFF2
 16050                           indf0	equ	0xFEF
 16051                           postinc0	equ	0xFEE
 16052                           fsr0h	equ	0xFEA
 16053                           fsr0l	equ	0xFE9
 16054                           wreg	equ	0xFE8
 16055                           indf1	equ	0xFE7
 16056                           postinc1	equ	0xFE6
 16057                           postdec1	equ	0xFE5
 16058                           fsr1h	equ	0xFE2
 16059                           fsr1l	equ	0xFE1
 16060                           indf2	equ	0xFDF
 16061                           postinc2	equ	0xFDE
 16062                           postdec2	equ	0xFDD
 16063                           plusw2	equ	0xFDB
 16064                           fsr2h	equ	0xFDA
 16065                           fsr2l	equ	0xFD9
 16066                           status	equ	0xFD8
 16067                           
 16068 ;; *************** function _findNodes *****************
 16069 ;; Defined at:
 16070 ;;		line 2577 in file "main.c"
 16071 ;; Parameters:    Size  Location     Type
 16072 ;;		None
 16073 ;; Auto vars:     Size  Location     Type
 16074 ;;  i               1  105[BANK0 ] unsigned char 
 16075 ;;  value           1  104[BANK0 ] unsigned char 
 16076 ;;  nFound          1  103[BANK0 ] unsigned char 
 16077 ;; Return value:  Size  Location     Type
 16078 ;;		None               void
 16079 ;; Registers used:
 16080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16081 ;; Tracked objects:
 16082 ;;		On entry : F/1
 16083 ;;		On exit  : 0/0
 16084 ;;		Unchanged: 0/0
 16085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16086 ;;      Params:         0       0       0       0       0       0       0
 16087 ;;      Locals:         0       5       0       0       0       0       0
 16088 ;;      Temps:          0       0       0       0       0       0       0
 16089 ;;      Totals:         0       5       0       0       0       0       0
 16090 ;;Total ram usage:        5 bytes
 16091 ;; Hardware stack levels used:    1
 16092 ;; Hardware stack levels required when called:    9
 16093 ;; This function calls:
 16094 ;;		_putsUSART
 16095 ;;		_printNodeFirmwareVersion
 16096 ;;		_printGUID
 16097 ;;		_printMDF
 16098 ;;		_itoa
 16099 ;;		_readRegister
 16100 ;; This function is called by:
 16101 ;;		_doModeVerbose
 16102 ;; This function uses a non-reentrant model
 16103 ;;
 16104                           
 16105                           	psect	text28
 16106  00301A                     __ptext28:
 16107                           	opt stack 0
 16108  00301A                     _findNodes:
 16109                           	opt stack 19
 16110                           
 16111                           ; BSR set to: 1
 16112                           ;main.c: 2578: uint8_t nFound = 0;
 16113                           
 16114                           ;incstack = 0
 16115                           ;incstack = 0
 16116  00301A  0100               	movlb	0	; () banked
 16117  00301C  6BC7               	clrf	findNodes@nFound& (0+255),b
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;main.c: 2579: uint8_t i;
 16121                           ;main.c: 2580: uint8_t value;
 16122                           ;main.c: 2582: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16123  00301E  0E6E               	movlw	high STR_238
 16124  003020  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16125  003022  0E53               	movlw	low STR_238
 16126  003024  6F61               	movwf	?_putsUSART& (0+255),b
 16127  003026  EC6E  F00E         	call	_putsUSART	;wreg free
 16128                           
 16129                           ;main.c: 2584: for (i = 1; i != 0; i++) {
 16130  00302A  0E01               	movlw	1
 16131  00302C  0100               	movlb	0	; () banked
 16132  00302E  6FC9               	movwf	findNodes@i& (0+255),b
 16133  003030                     l1171:
 16134                           
 16135                           ; BSR set to: 0
 16136  003030  0004               	clrwdt		;# 
 16137                           
 16138                           ;main.c: 2588: if (readRegister(i,
 16139                           ;main.c: 2589: 0xE0,
 16140                           ;main.c: 2590: rwtimeout,
 16141                           ;main.c: 2591: &value)) {
 16142  003032  0EE0               	movlw	224
 16143  003034  0100               	movlb	0	; () banked
 16144  003036  6FB6               	movwf	?_readRegister& (0+255),b
 16145  003038  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16146  00303C  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16147  00303E  0EC8               	movlw	low findNodes@value
 16148  003040  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16149  003042  51C9               	movf	findNodes@i& (0+255),w,b
 16150  003044  ECF4  F015         	call	_readRegister
 16151  003048  0900               	iorlw	0
 16152  00304A  E043               	bz	l11527
 16153                           
 16154                           ;main.c: 2592: putsUSART((char *) "Node found with node id = ");
 16155  00304C  0E78               	movlw	high STR_239
 16156  00304E  0100               	movlb	0	; () banked
 16157  003050  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16158  003052  0E99               	movlw	low STR_239
 16159  003054  6F61               	movwf	?_putsUSART& (0+255),b
 16160  003056  EC6E  F00E         	call	_putsUSART	;wreg free
 16161                           
 16162                           ;main.c: 2593: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16163  00305A  0101               	movlb	1	; () banked
 16164  00305C  6700               	tstfsz	_bHex& (0+255),b
 16165  00305E  D004               	goto	l11509
 16166                           
 16167                           ; BSR set to: 1
 16168  003060  0100               	movlb	0	; () banked
 16169  003062  6BC6               	clrf	(_findNodes$1468+1)& (0+255),b
 16170  003064  0E0A               	movlw	10
 16171  003066  D003               	goto	L13
 16172  003068                     l11509:
 16173                           
 16174                           ; BSR set to: 1
 16175  003068  0100               	movlb	0	; () banked
 16176  00306A  6BC6               	clrf	(_findNodes$1468+1)& (0+255),b
 16177  00306C  0E10               	movlw	16
 16178  00306E                     L13:
 16179  00306E  6FC5               	movwf	_findNodes$1468& (0+255),b
 16180                           
 16181                           ; BSR set to: 0
 16182  003070  0E01               	movlw	high _wrkbuf
 16183  003072  0100               	movlb	0	; () banked
 16184  003074  6F71               	movwf	(?_itoa+1)& (0+255),b
 16185  003076  0E54               	movlw	low _wrkbuf
 16186  003078  6F70               	movwf	?_itoa& (0+255),b
 16187  00307A  C1AE  F072         	movff	_vscpNodeId,?_itoa+2
 16188  00307E  6B73               	clrf	(?_itoa+3)& (0+255),b
 16189  003080  C0C5  F074         	movff	_findNodes$1468,?_itoa+4
 16190  003084  C0C6  F075         	movff	_findNodes$1468+1,?_itoa+5
 16191  003088  EC9E  F00C         	call	_itoa	;wreg free
 16192                           
 16193                           ; BSR set to: 0
 16194                           ;main.c: 2594: putsUSART(wrkbuf);
 16195  00308C  0E01               	movlw	high _wrkbuf
 16196  00308E  0100               	movlb	0	; () banked
 16197  003090  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16198  003092  0E54               	movlw	low _wrkbuf
 16199  003094  6F61               	movwf	?_putsUSART& (0+255),b
 16200  003096  EC6E  F00E         	call	_putsUSART	;wreg free
 16201                           
 16202                           ;main.c: 2595: putsUSART((char *) "\r\n");
 16203  00309A  0E71               	movlw	high (STR_197+50)
 16204  00309C  0100               	movlb	0	; () banked
 16205  00309E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16206  0030A0  0E8A               	movlw	low (STR_197+50)
 16207  0030A2  6F61               	movwf	?_putsUSART& (0+255),b
 16208  0030A4  EC6E  F00E         	call	_putsUSART	;wreg free
 16209                           
 16210                           ;main.c: 2596: printNodeFirmwareVersion(i);
 16211  0030A8  0100               	movlb	0	; () banked
 16212  0030AA  51C9               	movf	findNodes@i& (0+255),w,b
 16213  0030AC  EC5B  F016         	call	_printNodeFirmwareVersion
 16214                           
 16215                           ;main.c: 2597: printGUID(i);
 16216  0030B0  0100               	movlb	0	; () banked
 16217  0030B2  51C9               	movf	findNodes@i& (0+255),w,b
 16218  0030B4  EC05  F019         	call	_printGUID
 16219                           
 16220                           ;main.c: 2598: printMDF(i);
 16221  0030B8  0100               	movlb	0	; () banked
 16222  0030BA  51C9               	movf	findNodes@i& (0+255),w,b
 16223  0030BC  ECA0  F012         	call	_printMDF
 16224                           
 16225                           ;main.c: 2599: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16226  0030C0  0E6E               	movlw	high STR_238
 16227  0030C2  0100               	movlb	0	; () banked
 16228  0030C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16229  0030C6  0E53               	movlw	low STR_238
 16230  0030C8  6F61               	movwf	?_putsUSART& (0+255),b
 16231  0030CA  EC6E  F00E         	call	_putsUSART	;wreg free
 16232                           
 16233                           ;main.c: 2600: nFound++;
 16234  0030CE  0100               	movlb	0	; () banked
 16235  0030D0  2BC7               	incf	findNodes@nFound& (0+255),f,b
 16236  0030D2                     l11527:
 16237  0030D2  0100               	movlb	0	; () banked
 16238  0030D4  2BC9               	incf	findNodes@i& (0+255),f,b
 16239                           
 16240                           ; BSR set to: 0
 16241  0030D6  67C9               	tstfsz	findNodes@i& (0+255),b
 16242  0030D8  D7AB               	goto	l1171
 16243                           
 16244                           ; BSR set to: 0
 16245                           ;main.c: 2601: }
 16246                           ;main.c: 2603: }
 16247                           ;main.c: 2605: itoa(wrkbuf, nFound, 10);
 16248  0030DA  0E01               	movlw	high _wrkbuf
 16249  0030DC  6F71               	movwf	(?_itoa+1)& (0+255),b
 16250  0030DE  0E54               	movlw	low _wrkbuf
 16251  0030E0  6F70               	movwf	?_itoa& (0+255),b
 16252  0030E2  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 16253  0030E6  6B73               	clrf	(?_itoa+3)& (0+255),b
 16254  0030E8  6B75               	clrf	(?_itoa+5)& (0+255),b
 16255  0030EA  0E0A               	movlw	10
 16256  0030EC  6F74               	movwf	(?_itoa+4)& (0+255),b
 16257  0030EE  EC9E  F00C         	call	_itoa	;wreg free
 16258                           
 16259                           ; BSR set to: 0
 16260                           ;main.c: 2606: putsUSART(wrkbuf);
 16261  0030F2  0E01               	movlw	high _wrkbuf
 16262  0030F4  0100               	movlb	0	; () banked
 16263  0030F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16264  0030F8  0E54               	movlw	low _wrkbuf
 16265  0030FA  6F61               	movwf	?_putsUSART& (0+255),b
 16266  0030FC  EC6E  F00E         	call	_putsUSART	;wreg free
 16267                           
 16268                           ;main.c: 2607: putsUSART((char *) " nodes found\r\n");
 16269  003100  0E7B               	movlw	high STR_242
 16270  003102  0100               	movlb	0	; () banked
 16271  003104  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16272  003106  0E4E               	movlw	low STR_242
 16273  003108  6F61               	movwf	?_putsUSART& (0+255),b
 16274  00310A  EF6E  F00E         	goto	_putsUSART	;wreg free
 16275  00310E                     __end_of_findNodes:
 16276                           	opt stack 0
 16277                           tblptru	equ	0xFF8
 16278                           tblptrh	equ	0xFF7
 16279                           tblptrl	equ	0xFF6
 16280                           tablat	equ	0xFF5
 16281                           prodh	equ	0xFF4
 16282                           prodl	equ	0xFF3
 16283                           intcon	equ	0xFF2
 16284                           indf0	equ	0xFEF
 16285                           postinc0	equ	0xFEE
 16286                           fsr0h	equ	0xFEA
 16287                           fsr0l	equ	0xFE9
 16288                           wreg	equ	0xFE8
 16289                           indf1	equ	0xFE7
 16290                           postinc1	equ	0xFE6
 16291                           postdec1	equ	0xFE5
 16292                           fsr1h	equ	0xFE2
 16293                           fsr1l	equ	0xFE1
 16294                           indf2	equ	0xFDF
 16295                           postinc2	equ	0xFDE
 16296                           postdec2	equ	0xFDD
 16297                           plusw2	equ	0xFDB
 16298                           fsr2h	equ	0xFDA
 16299                           fsr2l	equ	0xFD9
 16300                           status	equ	0xFD8
 16301                           
 16302 ;; *************** function _printMDF *****************
 16303 ;; Defined at:
 16304 ;;		line 2658 in file "main.c"
 16305 ;; Parameters:    Size  Location     Type
 16306 ;;  nodeid          1    wreg     unsigned char 
 16307 ;; Auto vars:     Size  Location     Type
 16308 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16309 ;;  p               2   97[BANK0 ] PTR unsigned char 
 16310 ;;		 -> wrkbuf(80), 
 16311 ;;  i               1   99[BANK0 ] unsigned char 
 16312 ;;  value           1   96[BANK0 ] unsigned char 
 16313 ;; Return value:  Size  Location     Type
 16314 ;;		None               void
 16315 ;; Registers used:
 16316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16317 ;; Tracked objects:
 16318 ;;		On entry : D/2
 16319 ;;		On exit  : 0/0
 16320 ;;		Unchanged: 0/0
 16321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16322 ;;      Params:         0       0       0       0       0       0       0
 16323 ;;      Locals:         0       5       0       0       0       0       0
 16324 ;;      Temps:          0       0       0       0       0       0       0
 16325 ;;      Totals:         0       5       0       0       0       0       0
 16326 ;;Total ram usage:        5 bytes
 16327 ;; Hardware stack levels used:    1
 16328 ;; Hardware stack levels required when called:    8
 16329 ;; This function calls:
 16330 ;;		_putsUSART
 16331 ;;		_memset
 16332 ;;		_readRegister
 16333 ;; This function is called by:
 16334 ;;		_doModeVerbose
 16335 ;;		_findNodes
 16336 ;; This function uses a non-reentrant model
 16337 ;;
 16338                           
 16339                           	psect	text29
 16340  002540                     __ptext29:
 16341                           	opt stack 0
 16342  002540                     _printMDF:
 16343                           	opt stack 20
 16344                           
 16345                           ;incstack = 0
 16346                           ;incstack = 0
 16347                           ;printMDF@nodeid stored from wreg
 16348  002540  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 16349                           
 16350                           ;main.c: 2659: uint8_t i;
 16351                           ;main.c: 2660: uint8_t value;
 16352                           ;main.c: 2661: char *p = wrkbuf;
 16353  002544  0E01               	movlw	high _wrkbuf
 16354  002546  0100               	movlb	0	; () banked
 16355  002548  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 16356  00254A  0E54               	movlw	low _wrkbuf
 16357  00254C  6FC1               	movwf	printMDF@p& (0+255),b
 16358                           
 16359                           ; BSR set to: 0
 16360                           ;main.c: 2662: memset(wrkbuf, 0, sizeof (wrkbuf));
 16361  00254E  0E01               	movlw	high _wrkbuf
 16362  002550  6F61               	movwf	(?_memset+1)& (0+255),b
 16363  002552  0E54               	movlw	low _wrkbuf
 16364  002554  6F60               	movwf	?_memset& (0+255),b
 16365  002556  6B63               	clrf	(?_memset+3)& (0+255),b
 16366  002558  6B62               	clrf	(?_memset+2)& (0+255),b
 16367  00255A  6B65               	clrf	(?_memset+5)& (0+255),b
 16368  00255C  0E50               	movlw	80
 16369  00255E  6F64               	movwf	(?_memset+4)& (0+255),b
 16370  002560  EC24  F00C         	call	_memset	;wreg free
 16371                           
 16372                           ; BSR set to: 0
 16373                           ;main.c: 2663: putsUSART((char *) "MDF = http://");
 16374  002564  0E7B               	movlw	high STR_248
 16375  002566  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16376  002568  0E6C               	movlw	low STR_248
 16377  00256A  6F61               	movwf	?_putsUSART& (0+255),b
 16378  00256C  EC6E  F00E         	call	_putsUSART	;wreg free
 16379                           
 16380                           ;main.c: 2665: for (i = 0; i < 32; i++) {
 16381  002570  0100               	movlb	0	; () banked
 16382  002572  6BC3               	clrf	printMDF@i& (0+255),b
 16383  002574                     l12075:
 16384                           
 16385                           ; BSR set to: 0
 16386                           ;main.c: 2666: if (readRegister(nodeid,
 16387                           ;main.c: 2667: 0xE0 + i,
 16388                           ;main.c: 2668: rwtimeout,
 16389                           ;main.c: 2669: &value)) {
 16390  002574  51C3               	movf	printMDF@i& (0+255),w,b
 16391  002576  0FE0               	addlw	224
 16392  002578  6FB6               	movwf	?_readRegister& (0+255),b
 16393  00257A  0100               	movlb	0	; () banked
 16394  00257C  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16395  002580  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16396  002582  0EC0               	movlw	low printMDF@value
 16397  002584  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16398  002586  51BF               	movf	printMDF@nodeid& (0+255),w,b
 16399  002588  ECF4  F015         	call	_readRegister
 16400  00258C  0900               	iorlw	0
 16401  00258E  E00A               	bz	l12081
 16402                           
 16403                           ;main.c: 2670: *p = value;
 16404  002590  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16405  002594  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16406  002598  C0C0  FFDF         	movff	printMDF@value,indf2
 16407  00259C                     l12079:
 16408                           
 16409                           ;main.c: 2671: p++;
 16410  00259C  0100               	movlb	0	; () banked
 16411  00259E  4BC1               	infsnz	printMDF@p& (0+255),f,b
 16412  0025A0  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 16413                           
 16414                           ;main.c: 2673: }
 16415  0025A2  D007               	goto	l12085
 16416  0025A4                     l12081:
 16417                           
 16418                           ;main.c: 2674: else {
 16419                           ;main.c: 2675: *p = '?';
 16420  0025A4  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16421  0025A8  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16422  0025AC  0E3F               	movlw	63
 16423  0025AE  6EDF               	movwf	indf2,c
 16424  0025B0  D7F5               	goto	l12079
 16425  0025B2                     l12085:
 16426                           
 16427                           ; BSR set to: 0
 16428  0025B2  2BC3               	incf	printMDF@i& (0+255),f,b
 16429                           
 16430                           ; BSR set to: 0
 16431  0025B4  0E1F               	movlw	31
 16432  0025B6  65C3               	cpfsgt	printMDF@i& (0+255),b
 16433  0025B8  D7DD               	goto	l12075
 16434                           
 16435                           ; BSR set to: 0
 16436                           ;main.c: 2677: }
 16437                           ;main.c: 2678: }
 16438                           ;main.c: 2680: putsUSART(wrkbuf);
 16439  0025BA  0E01               	movlw	high _wrkbuf
 16440  0025BC  0100               	movlb	0	; () banked
 16441  0025BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16442  0025C0  0E54               	movlw	low _wrkbuf
 16443  0025C2  6F61               	movwf	?_putsUSART& (0+255),b
 16444  0025C4  EC6E  F00E         	call	_putsUSART	;wreg free
 16445                           
 16446                           ;main.c: 2681: putsUSART((char *) "\r\n");
 16447  0025C8  0E71               	movlw	high (STR_197+50)
 16448  0025CA  0100               	movlb	0	; () banked
 16449  0025CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16450  0025CE  0E8A               	movlw	low (STR_197+50)
 16451  0025D0  6F61               	movwf	?_putsUSART& (0+255),b
 16452  0025D2  EF6E  F00E         	goto	_putsUSART	;wreg free
 16453  0025D6                     __end_of_printMDF:
 16454                           	opt stack 0
 16455                           tblptru	equ	0xFF8
 16456                           tblptrh	equ	0xFF7
 16457                           tblptrl	equ	0xFF6
 16458                           tablat	equ	0xFF5
 16459                           prodh	equ	0xFF4
 16460                           prodl	equ	0xFF3
 16461                           intcon	equ	0xFF2
 16462                           indf0	equ	0xFEF
 16463                           postinc0	equ	0xFEE
 16464                           fsr0h	equ	0xFEA
 16465                           fsr0l	equ	0xFE9
 16466                           wreg	equ	0xFE8
 16467                           indf1	equ	0xFE7
 16468                           postinc1	equ	0xFE6
 16469                           postdec1	equ	0xFE5
 16470                           fsr1h	equ	0xFE2
 16471                           fsr1l	equ	0xFE1
 16472                           indf2	equ	0xFDF
 16473                           postinc2	equ	0xFDE
 16474                           postdec2	equ	0xFDD
 16475                           plusw2	equ	0xFDB
 16476                           fsr2h	equ	0xFDA
 16477                           fsr2l	equ	0xFD9
 16478                           status	equ	0xFD8
 16479                           
 16480 ;; *************** function _printGUID *****************
 16481 ;; Defined at:
 16482 ;;		line 2617 in file "main.c"
 16483 ;; Parameters:    Size  Location     Type
 16484 ;;  nodeid          1    wreg     unsigned char 
 16485 ;; Auto vars:     Size  Location     Type
 16486 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16487 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16488 ;;  i               1  100[BANK0 ] unsigned char 
 16489 ;;  value           1   99[BANK0 ] unsigned char 
 16490 ;; Return value:  Size  Location     Type
 16491 ;;		None               void
 16492 ;; Registers used:
 16493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16494 ;; Tracked objects:
 16495 ;;		On entry : D/2
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16499 ;;      Params:         0       0       0       0       0       0       0
 16500 ;;      Locals:         0       6       0       0       0       0       0
 16501 ;;      Temps:          0       0       0       0       0       0       0
 16502 ;;      Totals:         0       6       0       0       0       0       0
 16503 ;;Total ram usage:        6 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    8
 16506 ;; This function calls:
 16507 ;;		_putsUSART
 16508 ;;		_memset
 16509 ;;		_strlen
 16510 ;;		_itoa
 16511 ;;		_readRegister
 16512 ;;		_strcat
 16513 ;; This function is called by:
 16514 ;;		_doModeVerbose
 16515 ;;		_findNodes
 16516 ;; This function uses a non-reentrant model
 16517 ;;
 16518                           
 16519                           	psect	text30
 16520  00320A                     __ptext30:
 16521                           	opt stack 0
 16522  00320A                     _printGUID:
 16523                           	opt stack 20
 16524                           
 16525                           ;incstack = 0
 16526                           ;incstack = 0
 16527                           ;printGUID@nodeid stored from wreg
 16528  00320A  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 16529                           
 16530                           ;main.c: 2618: uint8_t i;
 16531                           ;main.c: 2619: uint8_t value;
 16532                           ;main.c: 2620: char buf[3];
 16533                           ;main.c: 2622: memset(wrkbuf, 0, sizeof (wrkbuf));
 16534  00320E  0E01               	movlw	high _wrkbuf
 16535  003210  0100               	movlb	0	; () banked
 16536  003212  6F61               	movwf	(?_memset+1)& (0+255),b
 16537  003214  0E54               	movlw	low _wrkbuf
 16538  003216  6F60               	movwf	?_memset& (0+255),b
 16539  003218  6B63               	clrf	(?_memset+3)& (0+255),b
 16540  00321A  6B62               	clrf	(?_memset+2)& (0+255),b
 16541  00321C  6B65               	clrf	(?_memset+5)& (0+255),b
 16542  00321E  0E50               	movlw	80
 16543  003220  6F64               	movwf	(?_memset+4)& (0+255),b
 16544  003222  EC24  F00C         	call	_memset	;wreg free
 16545                           
 16546                           ; BSR set to: 0
 16547                           ;main.c: 2623: putsUSART((char *) "GUID = ");
 16548  003226  0E7B               	movlw	high STR_243
 16549  003228  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16550  00322A  0EE5               	movlw	low STR_243
 16551  00322C  6F61               	movwf	?_putsUSART& (0+255),b
 16552  00322E  EC6E  F00E         	call	_putsUSART	;wreg free
 16553                           
 16554                           ;main.c: 2625: for (i = 0; i < 16; i++) {
 16555  003232  0100               	movlb	0	; () banked
 16556  003234  6BC4               	clrf	printGUID@i& (0+255),b
 16557  003236                     l12041:
 16558                           
 16559                           ; BSR set to: 0
 16560                           ;main.c: 2626: if (readRegister(nodeid,
 16561                           ;main.c: 2627: 0xD0 + i,
 16562                           ;main.c: 2628: rwtimeout,
 16563                           ;main.c: 2629: &value)) {
 16564  003236  51C4               	movf	printGUID@i& (0+255),w,b
 16565  003238  0FD0               	addlw	208
 16566  00323A  6FB6               	movwf	?_readRegister& (0+255),b
 16567  00323C  0100               	movlb	0	; () banked
 16568  00323E  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16569  003242  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16570  003244  0EC3               	movlw	low printGUID@value
 16571  003246  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16572  003248  51BF               	movf	printGUID@nodeid& (0+255),w,b
 16573  00324A  ECF4  F015         	call	_readRegister
 16574  00324E  0900               	iorlw	0
 16575  003250  E029               	bz	l12051
 16576                           
 16577                           ;main.c: 2630: itoa(buf, value, 16);
 16578  003252  0100               	movlb	0	; () banked
 16579  003254  0E00               	movlw	high printGUID@buf
 16580  003256  6F71               	movwf	(?_itoa+1)& (0+255),b
 16581  003258  0EC0               	movlw	low printGUID@buf
 16582  00325A  6F70               	movwf	?_itoa& (0+255),b
 16583  00325C  C0C3  F072         	movff	printGUID@value,?_itoa+2
 16584  003260  6B73               	clrf	(?_itoa+3)& (0+255),b
 16585  003262  6B75               	clrf	(?_itoa+5)& (0+255),b
 16586  003264  0E10               	movlw	16
 16587  003266  6F74               	movwf	(?_itoa+4)& (0+255),b
 16588  003268  EC9E  F00C         	call	_itoa	;wreg free
 16589                           
 16590                           ; BSR set to: 0
 16591                           ;main.c: 2631: if (1 == strlen(buf)) {
 16592  00326C  0E00               	movlw	high printGUID@buf
 16593  00326E  6F61               	movwf	(?_strlen+1)& (0+255),b
 16594  003270  0EC0               	movlw	low printGUID@buf
 16595  003272  6F60               	movwf	?_strlen& (0+255),b
 16596  003274  EC53  F00D         	call	_strlen	;wreg free
 16597  003278  0560               	decf	?_strlen& (0+255),w,b
 16598  00327A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16599  00327C  E10F               	bnz	l12049
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;main.c: 2632: strcat(wrkbuf, "0");
 16603  00327E  0E01               	movlw	high _wrkbuf
 16604  003280  0100               	movlb	0	; () banked
 16605  003282  6F61               	movwf	(?_strcat+1)& (0+255),b
 16606  003284  0E54               	movlw	low _wrkbuf
 16607  003286  6F60               	movwf	?_strcat& (0+255),b
 16608  003288  0E7C               	movlw	high STR_244
 16609  00328A  6F63               	movwf	(?_strcat+3)& (0+255),b
 16610  00328C  0EF8               	movlw	low STR_244
 16611  00328E  6F62               	movwf	(?_strcat+2)& (0+255),b
 16612  003290  EC9A  F00E         	call	_strcat	;wreg free
 16613                           
 16614                           ;main.c: 2633: strcat(wrkbuf, buf);
 16615  003294  D832               	call	PL76	;call to abstracted procedure
 16616  003296  EC9A  F00E         	call	_strcat	;wreg free
 16617                           
 16618                           ;main.c: 2634: } else {
 16619  00329A  D00F               	goto	l12053
 16620  00329C                     l12049:
 16621                           
 16622                           ; BSR set to: 0
 16623                           ;main.c: 2635: strcat(wrkbuf, buf);
 16624  00329C  D82E               	call	PL76	;call to abstracted procedure
 16625  00329E  EC9A  F00E         	call	_strcat	;wreg free
 16626  0032A2  D00B               	goto	l12053
 16627  0032A4                     l12051:
 16628                           
 16629                           ;main.c: 2639: strcat(wrkbuf, "--");
 16630  0032A4  0E01               	movlw	high _wrkbuf
 16631  0032A6  0100               	movlb	0	; () banked
 16632  0032A8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16633  0032AA  0E54               	movlw	low _wrkbuf
 16634  0032AC  6F60               	movwf	?_strcat& (0+255),b
 16635  0032AE  0E7C               	movlw	high STR_245
 16636  0032B0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16637  0032B2  0EE4               	movlw	low STR_245
 16638  0032B4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16639  0032B6  EC9A  F00E         	call	_strcat	;wreg free
 16640  0032BA                     l12053:
 16641                           
 16642                           ;main.c: 2640: }
 16643                           ;main.c: 2642: if (i < 15) {
 16644  0032BA  0E0F               	movlw	15
 16645  0032BC  0100               	movlb	0	; () banked
 16646  0032BE  61C4               	cpfslt	printGUID@i& (0+255),b
 16647  0032C0  D00A               	goto	l12057
 16648                           
 16649                           ; BSR set to: 0
 16650                           ;main.c: 2643: strcat(wrkbuf, ":");
 16651  0032C2  0E01               	movlw	high _wrkbuf
 16652  0032C4  6F61               	movwf	(?_strcat+1)& (0+255),b
 16653  0032C6  0E54               	movlw	low _wrkbuf
 16654  0032C8  6F60               	movwf	?_strcat& (0+255),b
 16655  0032CA  0E7C               	movlw	high STR_246
 16656  0032CC  6F63               	movwf	(?_strcat+3)& (0+255),b
 16657  0032CE  0EFA               	movlw	low STR_246
 16658  0032D0  6F62               	movwf	(?_strcat+2)& (0+255),b
 16659  0032D2  EC9A  F00E         	call	_strcat	;wreg free
 16660  0032D6                     l12057:
 16661  0032D6  0100               	movlb	0	; () banked
 16662  0032D8  2BC4               	incf	printGUID@i& (0+255),f,b
 16663                           
 16664                           ; BSR set to: 0
 16665  0032DA  0E0F               	movlw	15
 16666  0032DC  65C4               	cpfsgt	printGUID@i& (0+255),b
 16667  0032DE  D7AB               	goto	l12041
 16668                           
 16669                           ; BSR set to: 0
 16670                           ;main.c: 2644: }
 16671                           ;main.c: 2646: }
 16672                           ;main.c: 2648: putsUSART(wrkbuf);
 16673  0032E0  0E01               	movlw	high _wrkbuf
 16674  0032E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16675  0032E4  0E54               	movlw	low _wrkbuf
 16676  0032E6  6F61               	movwf	?_putsUSART& (0+255),b
 16677  0032E8  EC6E  F00E         	call	_putsUSART	;wreg free
 16678                           
 16679                           ;main.c: 2649: putsUSART((char *) "\r\n");
 16680  0032EC  0E71               	movlw	high (STR_197+50)
 16681  0032EE  0100               	movlb	0	; () banked
 16682  0032F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16683  0032F2  0E8A               	movlw	low (STR_197+50)
 16684  0032F4  6F61               	movwf	?_putsUSART& (0+255),b
 16685  0032F6  EF6E  F00E         	goto	_putsUSART	;wreg free
 16686  0032FA                     __end_of_printGUID:
 16687                           	opt stack 0
 16688  0032FA                     PL76:
 16689                           	opt stack 20
 16690  0032FA  0E01               	movlw	high _wrkbuf
 16691  0032FC  0100               	movlb	0	; () banked
 16692  0032FE  6F61               	movwf	(?_strcat+1)& (0+255),b
 16693  003300  0E54               	movlw	low _wrkbuf
 16694  003302  6F60               	movwf	?_strcat& (0+255),b
 16695  003304  0E00               	movlw	high printGUID@buf
 16696  003306  6F63               	movwf	(?_strcat+3)& (0+255),b
 16697  003308  0EC0               	movlw	low printGUID@buf
 16698  00330A  6F62               	movwf	(?_strcat+2)& (0+255),b
 16699  00330C  0012               	return	
 16700  00330E                     __end_ofPL76:
 16701                           	opt stack 0
 16702                           tblptru	equ	0xFF8
 16703                           tblptrh	equ	0xFF7
 16704                           tblptrl	equ	0xFF6
 16705                           tablat	equ	0xFF5
 16706                           prodh	equ	0xFF4
 16707                           prodl	equ	0xFF3
 16708                           intcon	equ	0xFF2
 16709                           indf0	equ	0xFEF
 16710                           postinc0	equ	0xFEE
 16711                           fsr0h	equ	0xFEA
 16712                           fsr0l	equ	0xFE9
 16713                           wreg	equ	0xFE8
 16714                           indf1	equ	0xFE7
 16715                           postinc1	equ	0xFE6
 16716                           postdec1	equ	0xFE5
 16717                           fsr1h	equ	0xFE2
 16718                           fsr1l	equ	0xFE1
 16719                           indf2	equ	0xFDF
 16720                           postinc2	equ	0xFDE
 16721                           postdec2	equ	0xFDD
 16722                           plusw2	equ	0xFDB
 16723                           fsr2h	equ	0xFDA
 16724                           fsr2l	equ	0xFD9
 16725                           status	equ	0xFD8
 16726                           
 16727 ;; *************** function _printNodeFirmwareVersion *****************
 16728 ;; Defined at:
 16729 ;;		line 2689 in file "main.c"
 16730 ;; Parameters:    Size  Location     Type
 16731 ;;  nodeid          1    wreg     unsigned char 
 16732 ;; Auto vars:     Size  Location     Type
 16733 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16734 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16735 ;;  i               1  100[BANK0 ] unsigned char 
 16736 ;;  value           1   99[BANK0 ] unsigned char 
 16737 ;; Return value:  Size  Location     Type
 16738 ;;		None               void
 16739 ;; Registers used:
 16740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16741 ;; Tracked objects:
 16742 ;;		On entry : D/2
 16743 ;;		On exit  : 0/0
 16744 ;;		Unchanged: 0/0
 16745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16746 ;;      Params:         0       0       0       0       0       0       0
 16747 ;;      Locals:         0       6       0       0       0       0       0
 16748 ;;      Temps:          0       0       0       0       0       0       0
 16749 ;;      Totals:         0       6       0       0       0       0       0
 16750 ;;Total ram usage:        6 bytes
 16751 ;; Hardware stack levels used:    1
 16752 ;; Hardware stack levels required when called:    8
 16753 ;; This function calls:
 16754 ;;		_putsUSART
 16755 ;;		_memset
 16756 ;;		_itoa
 16757 ;;		_readRegister
 16758 ;;		_strcat
 16759 ;; This function is called by:
 16760 ;;		_doModeVerbose
 16761 ;;		_findNodes
 16762 ;; This function uses a non-reentrant model
 16763 ;;
 16764                           
 16765                           	psect	text31
 16766  002CB6                     __ptext31:
 16767                           	opt stack 0
 16768  002CB6                     _printNodeFirmwareVersion:
 16769                           	opt stack 20
 16770                           
 16771                           ;incstack = 0
 16772                           ;incstack = 0
 16773                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16774  002CB6  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 16775                           
 16776                           ;main.c: 2690: uint8_t i;
 16777                           ;main.c: 2691: uint8_t value;
 16778                           ;main.c: 2692: char buf[3];
 16779                           ;main.c: 2694: memset(wrkbuf, 0, sizeof (wrkbuf));
 16780  002CBA  0E01               	movlw	high _wrkbuf
 16781  002CBC  0100               	movlb	0	; () banked
 16782  002CBE  6F61               	movwf	(?_memset+1)& (0+255),b
 16783  002CC0  0E54               	movlw	low _wrkbuf
 16784  002CC2  6F60               	movwf	?_memset& (0+255),b
 16785  002CC4  6B63               	clrf	(?_memset+3)& (0+255),b
 16786  002CC6  6B62               	clrf	(?_memset+2)& (0+255),b
 16787  002CC8  6B65               	clrf	(?_memset+5)& (0+255),b
 16788  002CCA  0E50               	movlw	80
 16789  002CCC  6F64               	movwf	(?_memset+4)& (0+255),b
 16790  002CCE  EC24  F00C         	call	_memset	;wreg free
 16791                           
 16792                           ; BSR set to: 0
 16793                           ;main.c: 2695: putsUSART((char *) "Firmware version = ");
 16794  002CD2  0E7A               	movlw	high STR_250
 16795  002CD4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16796  002CD6  0EBE               	movlw	low STR_250
 16797  002CD8  6F61               	movwf	?_putsUSART& (0+255),b
 16798  002CDA  EC6E  F00E         	call	_putsUSART	;wreg free
 16799                           
 16800                           ;main.c: 2697: for (i = 0; i < 3; i++) {
 16801  002CDE  0100               	movlb	0	; () banked
 16802  002CE0  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16803  002CE2                     l12013:
 16804                           
 16805                           ; BSR set to: 0
 16806                           ;main.c: 2698: if (readRegister(nodeid,
 16807                           ;main.c: 2699: 0x94 + i,
 16808                           ;main.c: 2700: rwtimeout,
 16809                           ;main.c: 2701: &value)) {
 16810  002CE2  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16811  002CE4  0F94               	addlw	148
 16812  002CE6  6FB6               	movwf	?_readRegister& (0+255),b
 16813  002CE8  0100               	movlb	0	; () banked
 16814  002CEA  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16815  002CEE  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16816  002CF0  0EC3               	movlw	low printNodeFirmwareVersion@value
 16817  002CF2  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16818  002CF4  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16819  002CF6  ECF4  F015         	call	_readRegister
 16820  002CFA  0900               	iorlw	0
 16821  002CFC  E019               	bz	l12019
 16822                           
 16823                           ;main.c: 2702: itoa(buf, value, 16);
 16824  002CFE  0100               	movlb	0	; () banked
 16825  002D00  0E00               	movlw	high printNodeFirmwareVersion@buf
 16826  002D02  6F71               	movwf	(?_itoa+1)& (0+255),b
 16827  002D04  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16828  002D06  6F70               	movwf	?_itoa& (0+255),b
 16829  002D08  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16830  002D0C  6B73               	clrf	(?_itoa+3)& (0+255),b
 16831  002D0E  6B75               	clrf	(?_itoa+5)& (0+255),b
 16832  002D10  0E10               	movlw	16
 16833  002D12  6F74               	movwf	(?_itoa+4)& (0+255),b
 16834  002D14  EC9E  F00C         	call	_itoa	;wreg free
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;main.c: 2703: strcat(wrkbuf, buf);
 16838  002D18  0E01               	movlw	high _wrkbuf
 16839  002D1A  0100               	movlb	0	; () banked
 16840  002D1C  6F61               	movwf	(?_strcat+1)& (0+255),b
 16841  002D1E  0E54               	movlw	low _wrkbuf
 16842  002D20  6F60               	movwf	?_strcat& (0+255),b
 16843  002D22  0E00               	movlw	high printNodeFirmwareVersion@buf
 16844  002D24  6F63               	movwf	(?_strcat+3)& (0+255),b
 16845  002D26  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16846  002D28  6F62               	movwf	(?_strcat+2)& (0+255),b
 16847  002D2A  EC9A  F00E         	call	_strcat	;wreg free
 16848                           
 16849                           ;main.c: 2704: }
 16850  002D2E  D00B               	goto	l12021
 16851  002D30                     l12019:
 16852                           
 16853                           ;main.c: 2705: else {
 16854                           ;main.c: 2706: strcat(wrkbuf, "?");
 16855  002D30  0E01               	movlw	high _wrkbuf
 16856  002D32  0100               	movlb	0	; () banked
 16857  002D34  6F61               	movwf	(?_strcat+1)& (0+255),b
 16858  002D36  0E54               	movlw	low _wrkbuf
 16859  002D38  6F60               	movwf	?_strcat& (0+255),b
 16860  002D3A  0E7C               	movlw	high STR_251
 16861  002D3C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16862  002D3E  0EFC               	movlw	low STR_251
 16863  002D40  6F62               	movwf	(?_strcat+2)& (0+255),b
 16864  002D42  EC9A  F00E         	call	_strcat	;wreg free
 16865  002D46                     l12021:
 16866                           
 16867                           ;main.c: 2707: }
 16868                           ;main.c: 2709: if (i < 2) {
 16869  002D46  0E02               	movlw	2
 16870  002D48  0100               	movlb	0	; () banked
 16871  002D4A  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16872  002D4C  D00A               	goto	l12025
 16873                           
 16874                           ; BSR set to: 0
 16875                           ;main.c: 2710: strcat(wrkbuf, ".");
 16876  002D4E  0E01               	movlw	high _wrkbuf
 16877  002D50  6F61               	movwf	(?_strcat+1)& (0+255),b
 16878  002D52  0E54               	movlw	low _wrkbuf
 16879  002D54  6F60               	movwf	?_strcat& (0+255),b
 16880  002D56  0E7C               	movlw	high STR_252
 16881  002D58  6F63               	movwf	(?_strcat+3)& (0+255),b
 16882  002D5A  0EF6               	movlw	low STR_252
 16883  002D5C  6F62               	movwf	(?_strcat+2)& (0+255),b
 16884  002D5E  EC9A  F00E         	call	_strcat	;wreg free
 16885  002D62                     l12025:
 16886  002D62  0100               	movlb	0	; () banked
 16887  002D64  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16888                           
 16889                           ; BSR set to: 0
 16890  002D66  0E02               	movlw	2
 16891  002D68  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16892  002D6A  D7BB               	goto	l12013
 16893                           
 16894                           ; BSR set to: 0
 16895                           ;main.c: 2711: }
 16896                           ;main.c: 2713: }
 16897                           ;main.c: 2715: putsUSART(wrkbuf);
 16898  002D6C  0E01               	movlw	high _wrkbuf
 16899  002D6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16900  002D70  0E54               	movlw	low _wrkbuf
 16901  002D72  6F61               	movwf	?_putsUSART& (0+255),b
 16902  002D74  EC6E  F00E         	call	_putsUSART	;wreg free
 16903                           
 16904                           ;main.c: 2716: putsUSART((char *) "\r\n");
 16905  002D78  0E71               	movlw	high (STR_197+50)
 16906  002D7A  0100               	movlb	0	; () banked
 16907  002D7C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16908  002D7E  0E8A               	movlw	low (STR_197+50)
 16909  002D80  6F61               	movwf	?_putsUSART& (0+255),b
 16910  002D82  EF6E  F00E         	goto	_putsUSART	;wreg free
 16911  002D86                     __end_of_printNodeFirmwareVersion:
 16912                           	opt stack 0
 16913                           tblptru	equ	0xFF8
 16914                           tblptrh	equ	0xFF7
 16915                           tblptrl	equ	0xFF6
 16916                           tablat	equ	0xFF5
 16917                           prodh	equ	0xFF4
 16918                           prodl	equ	0xFF3
 16919                           intcon	equ	0xFF2
 16920                           indf0	equ	0xFEF
 16921                           postinc0	equ	0xFEE
 16922                           fsr0h	equ	0xFEA
 16923                           fsr0l	equ	0xFE9
 16924                           wreg	equ	0xFE8
 16925                           indf1	equ	0xFE7
 16926                           postinc1	equ	0xFE6
 16927                           postdec1	equ	0xFE5
 16928                           fsr1h	equ	0xFE2
 16929                           fsr1l	equ	0xFE1
 16930                           indf2	equ	0xFDF
 16931                           postinc2	equ	0xFDE
 16932                           postdec2	equ	0xFDD
 16933                           plusw2	equ	0xFDB
 16934                           fsr2h	equ	0xFDA
 16935                           fsr2l	equ	0xFD9
 16936                           status	equ	0xFD8
 16937                           
 16938 ;; *************** function _strcat *****************
 16939 ;; Defined at:
 16940 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16941 ;; Parameters:    Size  Location     Type
 16942 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16943 ;;		 -> wrkbuf(80), 
 16944 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16945 ;;		 -> STR_252(2), STR_251(2), printNodeFirmwareVersion@buf(3), STR_246(2), 
 16946 ;;		 -> STR_245(3), STR_244(2), printGUID@buf(3), 
 16947 ;; Auto vars:     Size  Location     Type
 16948 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16949 ;;		 -> wrkbuf(80), 
 16950 ;; Return value:  Size  Location     Type
 16951 ;;                  2    0[BANK0 ] PTR unsigned char 
 16952 ;; Registers used:
 16953 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16954 ;; Tracked objects:
 16955 ;;		On entry : F/0
 16956 ;;		On exit  : 0/0
 16957 ;;		Unchanged: 0/0
 16958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16959 ;;      Params:         0       4       0       0       0       0       0
 16960 ;;      Locals:         0       2       0       0       0       0       0
 16961 ;;      Temps:          0       0       0       0       0       0       0
 16962 ;;      Totals:         0       6       0       0       0       0       0
 16963 ;;Total ram usage:        6 bytes
 16964 ;; Hardware stack levels used:    1
 16965 ;; Hardware stack levels required when called:    3
 16966 ;; This function calls:
 16967 ;;		Nothing
 16968 ;; This function is called by:
 16969 ;;		_printGUID
 16970 ;;		_printNodeFirmwareVersion
 16971 ;; This function uses a non-reentrant model
 16972 ;;
 16973                           
 16974                           	psect	text32
 16975  001D34                     __ptext32:
 16976                           	opt stack 0
 16977  001D34                     _strcat:
 16978                           	opt stack 24
 16979                           
 16980                           ; BSR set to: 0
 16981                           
 16982                           ;incstack = 0
 16983                           ;incstack = 0
 16984  001D34  C060  F064         	movff	strcat@to,strcat@cp
 16985  001D38  C061  F065         	movff	strcat@to+1,strcat@cp+1
 16986  001D3C  D002               	goto	l12711
 16987  001D3E                     l12709:
 16988                           
 16989                           ; BSR set to: 0
 16990  001D3E  4B64               	infsnz	strcat@cp& (0+255),f,b
 16991  001D40  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16992  001D42                     l12711:
 16993                           
 16994                           ; BSR set to: 0
 16995  001D42  C064  FFD9         	movff	strcat@cp,fsr2l
 16996  001D46  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16997  001D4A  50DF               	movf	indf2,w,c
 16998  001D4C  E006               	bz	l12715
 16999  001D4E  D7F7               	goto	l12709
 17000  001D50                     l12713:
 17001  001D50  0100               	movlb	0	; () banked
 17002  001D52  4B64               	infsnz	strcat@cp& (0+255),f,b
 17003  001D54  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17004  001D56  4B62               	infsnz	strcat@from& (0+255),f,b
 17005  001D58  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17006  001D5A                     l12715:
 17007                           
 17008                           ; BSR set to: 0
 17009  001D5A  C062  FFF6         	movff	strcat@from,tblptrl
 17010  001D5E  C063  FFF7         	movff	strcat@from+1,tblptrh
 17011  001D62  6AF8               	clrf	tblptru,c
 17012  001D64  C064  FFD9         	movff	strcat@cp,fsr2l
 17013  001D68  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17014  001D6C  0E05               	movlw	(high __ramtop+-1)
 17015  001D6E  64F7               	cpfsgt	tblptrh,c
 17016  001D70  D003               	bra	u16457
 17017  001D72  0008               	tblrd		*
 17018  001D74  50F5               	movf	tablat,w,c
 17019  001D76  D005               	bra	u16450
 17020  001D78                     u16457:
 17021  001D78  CFF6 FFE9          	movff	tblptrl,fsr0l
 17022  001D7C  CFF7 FFEA          	movff	tblptrh,fsr0h
 17023  001D80  50EF               	movf	indf0,w,c
 17024  001D82                     u16450:
 17025  001D82  6EDF               	movwf	indf2,c
 17026  001D84  50DF               	movf	indf2,w,c
 17027  001D86  B4D8               	btfsc	status,2,c
 17028  001D88  0012               	return	
 17029  001D8A  D7E2               	goto	l12713
 17030  001D8C                     __end_of_strcat:
 17031                           	opt stack 0
 17032                           tblptru	equ	0xFF8
 17033                           tblptrh	equ	0xFF7
 17034                           tblptrl	equ	0xFF6
 17035                           tablat	equ	0xFF5
 17036                           prodh	equ	0xFF4
 17037                           prodl	equ	0xFF3
 17038                           intcon	equ	0xFF2
 17039                           indf0	equ	0xFEF
 17040                           postinc0	equ	0xFEE
 17041                           fsr0h	equ	0xFEA
 17042                           fsr0l	equ	0xFE9
 17043                           wreg	equ	0xFE8
 17044                           indf1	equ	0xFE7
 17045                           postinc1	equ	0xFE6
 17046                           postdec1	equ	0xFE5
 17047                           fsr1h	equ	0xFE2
 17048                           fsr1l	equ	0xFE1
 17049                           indf2	equ	0xFDF
 17050                           postinc2	equ	0xFDE
 17051                           postdec2	equ	0xFDD
 17052                           plusw2	equ	0xFDB
 17053                           fsr2h	equ	0xFDA
 17054                           fsr2l	equ	0xFD9
 17055                           status	equ	0xFD8
 17056                           
 17057 ;; *************** function _readRegister *****************
 17058 ;; Defined at:
 17059 ;;		line 2192 in file "main.c"
 17060 ;; Parameters:    Size  Location     Type
 17061 ;;  nodeid          1    wreg     unsigned char 
 17062 ;;  reg             1   86[BANK0 ] unsigned char 
 17063 ;;  timeout         2   87[BANK0 ] unsigned short 
 17064 ;;  value           1   89[BANK0 ] PTR unsigned char 
 17065 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17066 ;; Auto vars:     Size  Location     Type
 17067 ;;  nodeid          1   94[BANK0 ] unsigned char 
 17068 ;; Return value:  Size  Location     Type
 17069 ;;                  1    wreg      enum E15660
 17070 ;; Registers used:
 17071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17072 ;; Tracked objects:
 17073 ;;		On entry : F/0
 17074 ;;		On exit  : E/0
 17075 ;;		Unchanged: 0/0
 17076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17077 ;;      Params:         0       4       0       0       0       0       0
 17078 ;;      Locals:         0       1       0       0       0       0       0
 17079 ;;      Temps:          0       4       0       0       0       0       0
 17080 ;;      Totals:         0       9       0       0       0       0       0
 17081 ;;Total ram usage:        9 bytes
 17082 ;; Hardware stack levels used:    1
 17083 ;; Hardware stack levels required when called:    7
 17084 ;; This function calls:
 17085 ;;		_sendVSCPFrame
 17086 ;;		_getVSCPFrame
 17087 ;; This function is called by:
 17088 ;;		_findNodes
 17089 ;;		_printGUID
 17090 ;;		_printMDF
 17091 ;;		_printNodeFirmwareVersion
 17092 ;; This function uses a non-reentrant model
 17093 ;;
 17094                           
 17095                           	psect	text33
 17096  002BE8                     __ptext33:
 17097                           	opt stack 0
 17098  002BE8                     _readRegister:
 17099                           	opt stack 20
 17100                           
 17101                           ;incstack = 0
 17102                           ;incstack = 0
 17103                           ;readRegister@nodeid stored from wreg
 17104  002BE8  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 17105                           
 17106                           ; BSR set to: 0
 17107                           ;main.c: 2193: vscpData[ 0 ] = nodeid;
 17108  002BEC  C0BE  F1A4         	movff	readRegister@nodeid,_vscpData
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;main.c: 2194: vscpData[ 1 ] = reg;
 17112  002BF0  C0B6  F1A5         	movff	readRegister@reg,_vscpData+1
 17113                           
 17114                           ; BSR set to: 0
 17115                           ;main.c: 2196: if (sendVSCPFrame(0,
 17116                           ;main.c: 2197: 9,
 17117                           ;main.c: 2198: 0,
 17118                           ;main.c: 2199: 0,
 17119                           ;main.c: 2200: 2,
 17120                           ;main.c: 2201: vscpData)) {
 17121  002BF4  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17122  002BF6  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17123  002BF8  0E09               	movlw	9
 17124  002BFA  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17125  002BFC  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17126  002BFE  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17127  002C00  0E02               	movlw	2
 17128  002C02  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17129  002C04  0E01               	movlw	high _vscpData
 17130  002C06  0100               	movlb	0	; () banked
 17131  002C08  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17132  002C0A  0EA4               	movlw	low _vscpData
 17133  002C0C  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17134  002C0E  EC78  F014         	call	_sendVSCPFrame	;wreg free
 17135  002C12  0900               	iorlw	0
 17136  002C14  E04E               	bz	l12703
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;main.c: 2203: timekeeper = 0;
 17140  002C16  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 17141  002C18  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17142  002C1A  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17143  002C1C  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17144                           
 17145                           ;main.c: 2204: while (timekeeper < timeout) {
 17146  002C1E  D039               	goto	l12701
 17147  002C20                     l1060:
 17148                           
 17149                           ; BSR set to: 0
 17150  002C20  0004               	clrwdt		;# 
 17151                           
 17152                           ;main.c: 2208: if (getVSCPFrame(&vscpClass,
 17153                           ;main.c: 2209: &vscpType,
 17154                           ;main.c: 2210: &vscpNodeId,
 17155                           ;main.c: 2211: &vscpPriority,
 17156                           ;main.c: 2212: &vscpSize,
 17157                           ;main.c: 2213: vscpData)) {
 17158  002C22  0E01               	movlw	high _vscpClass
 17159  002C24  0100               	movlb	0	; () banked
 17160  002C26  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17161  002C28  0EAC               	movlw	low _vscpClass
 17162  002C2A  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17163  002C2C  0E01               	movlw	high _vscpType
 17164  002C2E  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17165  002C30  0EB1               	movlw	low _vscpType
 17166  002C32  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17167  002C34  0E01               	movlw	high _vscpNodeId
 17168  002C36  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17169  002C38  0EAE               	movlw	low _vscpNodeId
 17170  002C3A  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17171  002C3C  0E01               	movlw	high _vscpPriority
 17172  002C3E  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 17173  002C40  0EAF               	movlw	low _vscpPriority
 17174  002C42  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 17175  002C44  0E01               	movlw	high _vscpSize
 17176  002C46  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 17177  002C48  0EB0               	movlw	low _vscpSize
 17178  002C4A  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 17179  002C4C  0E01               	movlw	high _vscpData
 17180  002C4E  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 17181  002C50  0EA4               	movlw	low _vscpData
 17182  002C52  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 17183  002C54  EC88  F011         	call	_getVSCPFrame	;wreg free
 17184  002C58  0900               	iorlw	0
 17185  002C5A  E01B               	bz	l12701
 17186                           
 17187                           ; BSR set to: 0
 17188                           ;main.c: 2214: if ((nodeid == vscpNodeId) &&
 17189                           ;main.c: 2215: (0 == vscpClass) &&
 17190                           ;main.c: 2216: (10 == vscpType) &&
 17191                           ;main.c: 2217: (2 == vscpSize) &&
 17192                           ;main.c: 2218: (reg == vscpData[ 0 ])) {
 17193  002C5C  0101               	movlb	1	; () banked
 17194  002C5E  51AE               	movf	_vscpNodeId& (0+255),w,b
 17195  002C60  0100               	movlb	0	; () banked
 17196  002C62  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 17197  002C64  D016               	goto	l12701
 17198                           
 17199                           ; BSR set to: 0
 17200  002C66  0101               	movlb	1	; () banked
 17201  002C68  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 17202  002C6A  11AC               	iorwf	_vscpClass& (0+255),w,b
 17203  002C6C  E112               	bnz	l12701
 17204                           
 17205                           ; BSR set to: 1
 17206  002C6E  51B1               	movf	_vscpType& (0+255),w,b
 17207  002C70  0A0A               	xorlw	10
 17208  002C72  E10F               	bnz	l12701
 17209                           
 17210                           ; BSR set to: 1
 17211  002C74  51B0               	movf	_vscpSize& (0+255),w,b
 17212  002C76  0A02               	xorlw	2
 17213  002C78  E10C               	bnz	l12701
 17214                           
 17215                           ; BSR set to: 1
 17216  002C7A  51A4               	movf	_vscpData& (0+255),w,b
 17217  002C7C  0100               	movlb	0	; () banked
 17218  002C7E  63B6               	cpfseq	readRegister@reg& (0+255),b
 17219  002C80  D008               	goto	l12701
 17220                           
 17221                           ; BSR set to: 0
 17222                           ;main.c: 2219: *value = vscpData[ 1 ];
 17223  002C82  51B9               	movf	readRegister@value& (0+255),w,b
 17224  002C84  6ED9               	movwf	fsr2l,c
 17225  002C86  6ADA               	clrf	fsr2h,c
 17226  002C88  0101               	movlb	1	; () banked
 17227  002C8A  C1A5  FFDF         	movff	_vscpData+1,indf2
 17228                           
 17229                           ; BSR set to: 1
 17230                           ;main.c: 2220: return 1;
 17231  002C8E  0E01               	movlw	1
 17232  002C90  D011               	goto	l1063
 17233  002C92                     l12701:
 17234  002C92  0100               	movlb	0	; () banked
 17235  002C94  51B7               	movf	readRegister@timeout& (0+255),w,b
 17236  002C96  6FBA               	movwf	??_readRegister& (0+255),b
 17237  002C98  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 17238  002C9A  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 17239  002C9C  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 17240  002C9E  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 17241  002CA0  51BA               	movf	??_readRegister& (0+255),w,b
 17242  002CA2  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 17243  002CA4  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 17244  002CA6  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17245  002CA8  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 17246  002CAA  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17247  002CAC  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 17248  002CAE  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17249  002CB0  E3B7               	bnc	l1060
 17250  002CB2                     l12703:
 17251                           
 17252                           ; BSR set to: 0
 17253                           ;main.c: 2221: }
 17254                           ;main.c: 2222: }
 17255                           ;main.c: 2223: }
 17256                           ;main.c: 2224: }
 17257                           ;main.c: 2226: return 0;
 17258  002CB2  0E00               	movlw	0
 17259  002CB4                     l1063:
 17260  002CB4  0012               	return	
 17261  002CB6                     __end_of_readRegister:
 17262                           	opt stack 0
 17263                           tblptru	equ	0xFF8
 17264                           tblptrh	equ	0xFF7
 17265                           tblptrl	equ	0xFF6
 17266                           tablat	equ	0xFF5
 17267                           prodh	equ	0xFF4
 17268                           prodl	equ	0xFF3
 17269                           intcon	equ	0xFF2
 17270                           indf0	equ	0xFEF
 17271                           postinc0	equ	0xFEE
 17272                           fsr0h	equ	0xFEA
 17273                           fsr0l	equ	0xFE9
 17274                           wreg	equ	0xFE8
 17275                           indf1	equ	0xFE7
 17276                           postinc1	equ	0xFE6
 17277                           postdec1	equ	0xFE5
 17278                           fsr1h	equ	0xFE2
 17279                           fsr1l	equ	0xFE1
 17280                           indf2	equ	0xFDF
 17281                           postinc2	equ	0xFDE
 17282                           postdec2	equ	0xFDD
 17283                           plusw2	equ	0xFDB
 17284                           fsr2h	equ	0xFDA
 17285                           fsr2l	equ	0xFD9
 17286                           status	equ	0xFD8
 17287                           
 17288 ;; *************** function _sendVSCPFrame *****************
 17289 ;; Defined at:
 17290 ;;		line 2913 in file "main.c"
 17291 ;; Parameters:    Size  Location     Type
 17292 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17293 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17294 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17295 ;;  priority        1   58[BANK0 ] unsigned char 
 17296 ;;  size            1   59[BANK0 ] unsigned char 
 17297 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 17298 ;;		 -> vscpData(8), 
 17299 ;; Auto vars:     Size  Location     Type
 17300 ;;  id              4   82[BANK0 ] unsigned long 
 17301 ;; Return value:  Size  Location     Type
 17302 ;;                  1    wreg      unsigned char 
 17303 ;; Registers used:
 17304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17305 ;; Tracked objects:
 17306 ;;		On entry : F/0
 17307 ;;		On exit  : F/0
 17308 ;;		Unchanged: 0/0
 17309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17310 ;;      Params:         0       8       0       0       0       0       0
 17311 ;;      Locals:         0       4       0       0       0       0       0
 17312 ;;      Temps:          0      20       0       0       0       0       0
 17313 ;;      Totals:         0      32       0       0       0       0       0
 17314 ;;Total ram usage:       32 bytes
 17315 ;; Hardware stack levels used:    1
 17316 ;; Hardware stack levels required when called:    6
 17317 ;; This function calls:
 17318 ;;		_sendCANFrame
 17319 ;; This function is called by:
 17320 ;;		_doModeVerbose
 17321 ;;		_readRegister
 17322 ;;		_readRegisterExtended
 17323 ;;		_writeRegisterExtended
 17324 ;; This function uses a non-reentrant model
 17325 ;;
 17326                           
 17327                           	psect	text34
 17328  0028F0                     __ptext34:
 17329                           	opt stack 0
 17330  0028F0                     _sendVSCPFrame:
 17331                           	opt stack 20
 17332                           
 17333                           ; BSR set to: 0
 17334                           ;main.c: 2914: uint32_t id = ((uint32_t) priority << 26) |
 17335                           ;main.c: 2915: ((uint32_t) vscpclass << 16) |
 17336                           ;main.c: 2916: ((uint32_t) vscptype << 8) |
 17337                           ;main.c: 2917: nodeid;
 17338                           
 17339                           ;incstack = 0
 17340                           ;incstack = 0
 17341  0028F0  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17342  0028F4  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17343  0028F6  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17344  0028F8  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17345  0028FA  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17346  0028FE  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17347  002902  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17348  002906  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 17349  002908  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17350  00290A  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17351  00290C  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17352  00290E  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17353  002910  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17354  002912  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17355  002914  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17356  002918  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17357  00291C  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17358  00291E  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17359  002920  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17360  002924  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17361  002926  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17362  002928  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17363  00292A  0E1A               	movlw	26
 17364  00292C                     u14105:
 17365  00292C  90D8               	bcf	status,0,c
 17366  00292E  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17367  002930  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17368  002932  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17369  002934  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17370  002936  2EE8               	decfsz	wreg,f,c
 17371  002938  D7F9               	goto	u14105
 17372  00293A  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17373  00293C  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17374  00293E  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17375  002940  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17376  002942  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17377  002944  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17378  002946  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17379  002948  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17380  00294A  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17381  00294C  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17382  00294E  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17383  002950  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17384  002952  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 17385  002954  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17386  002956  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17387  002958  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17388  00295A  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17389  00295C  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17390  00295E  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17391  002960  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17392  002962  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17393  002964  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17394  002966  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17395  002968  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17396  00296A  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17397  00296C  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17398  00296E  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 17399  002970  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17400  002972  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17401  002974  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17402  002976  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17403  002978  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17404  00297A  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17405                           
 17406                           ; BSR set to: 0
 17407                           ;main.c: 2919: if (!sendCANFrame(id, size, pData)) {
 17408  00297C  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17409  002980  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17410  002984  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17411  002988  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17412  00298C  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17413  002990  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17414  002994  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17415  002998  ECBA  F00C         	call	_sendCANFrame	;wreg free
 17416  00299C  0900               	iorlw	0
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;main.c: 2921: return 0;
 17420  00299E  0E00               	movlw	0
 17421  0029A0  A4D8               	btfss	status,2,c
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;main.c: 2922: }
 17425                           ;main.c: 2924: return 1;
 17426  0029A2  0E01               	movlw	1
 17427                           
 17428                           ; BSR set to: 0
 17429  0029A4  0012               	return	
 17430  0029A6                     __end_of_sendVSCPFrame:
 17431                           	opt stack 0
 17432                           tblptru	equ	0xFF8
 17433                           tblptrh	equ	0xFF7
 17434                           tblptrl	equ	0xFF6
 17435                           tablat	equ	0xFF5
 17436                           prodh	equ	0xFF4
 17437                           prodl	equ	0xFF3
 17438                           intcon	equ	0xFF2
 17439                           indf0	equ	0xFEF
 17440                           postinc0	equ	0xFEE
 17441                           fsr0h	equ	0xFEA
 17442                           fsr0l	equ	0xFE9
 17443                           wreg	equ	0xFE8
 17444                           indf1	equ	0xFE7
 17445                           postinc1	equ	0xFE6
 17446                           postdec1	equ	0xFE5
 17447                           fsr1h	equ	0xFE2
 17448                           fsr1l	equ	0xFE1
 17449                           indf2	equ	0xFDF
 17450                           postinc2	equ	0xFDE
 17451                           postdec2	equ	0xFDD
 17452                           plusw2	equ	0xFDB
 17453                           fsr2h	equ	0xFDA
 17454                           fsr2l	equ	0xFD9
 17455                           status	equ	0xFD8
 17456                           
 17457 ;; *************** function _sendCANFrame *****************
 17458 ;; Defined at:
 17459 ;;		line 2959 in file "main.c"
 17460 ;; Parameters:    Size  Location     Type
 17461 ;;  id              4   47[BANK0 ] unsigned long 
 17462 ;;  dlc             1   51[BANK0 ] unsigned char 
 17463 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17464 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17465 ;; Auto vars:     Size  Location     Type
 17466 ;;		None
 17467 ;; Return value:  Size  Location     Type
 17468 ;;                  1    wreg      unsigned char 
 17469 ;; Registers used:
 17470 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17471 ;; Tracked objects:
 17472 ;;		On entry : F/0
 17473 ;;		On exit  : F/0
 17474 ;;		Unchanged: 0/0
 17475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17476 ;;      Params:         0       7       0       0       0       0       0
 17477 ;;      Locals:         0       0       0       0       0       0       0
 17478 ;;      Temps:          0       0       0       0       0       0       0
 17479 ;;      Totals:         0       7       0       0       0       0       0
 17480 ;;Total ram usage:        7 bytes
 17481 ;; Hardware stack levels used:    1
 17482 ;; Hardware stack levels required when called:    5
 17483 ;; This function calls:
 17484 ;;		_ECANSendMessage
 17485 ;; This function is called by:
 17486 ;;		_doModeSLCAN
 17487 ;;		_receiveVSCPModeCanalMsg
 17488 ;;		_sendVSCPFrame
 17489 ;; This function uses a non-reentrant model
 17490 ;;
 17491                           
 17492                           	psect	text35
 17493  001974                     __ptext35:
 17494                           	opt stack 0
 17495  001974                     _sendCANFrame:
 17496                           	opt stack 23
 17497                           
 17498                           ; BSR set to: 0
 17499                           ;main.c: 2960: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;incstack = 0
 17503                           ;incstack = 0
 17504  001974  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17505  001978  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17506  00197C  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17507  001980  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17508  001984  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17509  001988  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17510  00198C  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17511  001990  0E20               	movlw	32
 17512  001992  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17513  001994  EC88  F01D         	call	_ECANSendMessage	;wreg free
 17514  001998  0900               	iorlw	0
 17515  00199A  E106               	bnz	l12553
 17516                           
 17517                           ; BSR set to: 0
 17518                           ;main.c: 2962: can_transmitOverruns++;
 17519  00199C  2A01               	incf	_can_transmitOverruns,f,c
 17520  00199E  0E00               	movlw	0
 17521  0019A0  2202               	addwfc	_can_transmitOverruns+1,f,c
 17522  0019A2  2203               	addwfc	_can_transmitOverruns+2,f,c
 17523  0019A4  2204               	addwfc	_can_transmitOverruns+3,f,c
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;main.c: 2963: return 0;
 17527  0019A6  D001               	goto	l1259
 17528  0019A8                     l12553:
 17529                           
 17530                           ; BSR set to: 0
 17531                           ;main.c: 2964: }
 17532                           ;main.c: 2966: return 1;
 17533  0019A8  0E01               	movlw	1
 17534  0019AA                     l1259:
 17535                           
 17536                           ; BSR set to: 0
 17537  0019AA  0012               	return	
 17538  0019AC                     __end_of_sendCANFrame:
 17539                           	opt stack 0
 17540                           tblptru	equ	0xFF8
 17541                           tblptrh	equ	0xFF7
 17542                           tblptrl	equ	0xFF6
 17543                           tablat	equ	0xFF5
 17544                           prodh	equ	0xFF4
 17545                           prodl	equ	0xFF3
 17546                           intcon	equ	0xFF2
 17547                           indf0	equ	0xFEF
 17548                           postinc0	equ	0xFEE
 17549                           fsr0h	equ	0xFEA
 17550                           fsr0l	equ	0xFE9
 17551                           wreg	equ	0xFE8
 17552                           indf1	equ	0xFE7
 17553                           postinc1	equ	0xFE6
 17554                           postdec1	equ	0xFE5
 17555                           fsr1h	equ	0xFE2
 17556                           fsr1l	equ	0xFE1
 17557                           indf2	equ	0xFDF
 17558                           postinc2	equ	0xFDE
 17559                           postdec2	equ	0xFDD
 17560                           plusw2	equ	0xFDB
 17561                           fsr2h	equ	0xFDA
 17562                           fsr2l	equ	0xFD9
 17563                           status	equ	0xFD8
 17564                           
 17565 ;; *************** function _ECANSendMessage *****************
 17566 ;; Defined at:
 17567 ;;		line 617 in file "ECAN.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  id              4   10[BANK0 ] unsigned long 
 17570 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17571 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17572 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17573 ;;  msgFlags        1   17[BANK0 ] enum E16315
 17574 ;; Auto vars:     Size  Location     Type
 17575 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17576 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17577 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17578 ;;		 -> B0CON(1), 
 17579 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17580 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17581 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17582 ;;		 -> B0CON(1), 
 17583 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17584 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17585 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17586 ;;		 -> B0CON(1), 
 17587 ;;  i               1   44[BANK0 ] unsigned char 
 17588 ;;  temp            1   43[BANK0 ] unsigned char 
 17589 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17590 ;;  j               1   39[BANK0 ] unsigned char 
 17591 ;;  buffers         1   38[BANK0 ] unsigned char 
 17592 ;;  mode            1   37[BANK0 ] unsigned char 
 17593 ;; Return value:  Size  Location     Type
 17594 ;;                  1    wreg      enum E15660
 17595 ;; Registers used:
 17596 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17597 ;; Tracked objects:
 17598 ;;		On entry : F/0
 17599 ;;		On exit  : F/0
 17600 ;;		Unchanged: 0/0
 17601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17602 ;;      Params:         0       8       0       0       0       0       0
 17603 ;;      Locals:         0      28       0       0       0       0       0
 17604 ;;      Temps:          0       1       0       0       0       0       0
 17605 ;;      Totals:         0      37       0       0       0       0       0
 17606 ;;Total ram usage:       37 bytes
 17607 ;; Hardware stack levels used:    1
 17608 ;; Hardware stack levels required when called:    4
 17609 ;; This function calls:
 17610 ;;		__CANIDToRegs
 17611 ;; This function is called by:
 17612 ;;		_sendCANFrame
 17613 ;; This function uses a non-reentrant model
 17614 ;;
 17615                           
 17616                           	psect	text36
 17617  003B10                     __ptext36:
 17618                           	opt stack 0
 17619  003B10                     _ECANSendMessage:
 17620                           	opt stack 23
 17621                           
 17622                           ; BSR set to: 0
 17623                           ;ECAN.c: 619: BYTE mode;
 17624                           ;ECAN.c: 620: BYTE buffers;
 17625                           ;ECAN.c: 628: BYTE i,j;
 17626                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17627                           ;ECAN.c: 630: BYTE* pb[9];
 17628                           ;ECAN.c: 631: BYTE temp;
 17629                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17630                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;incstack = 0
 17634                           ;incstack = 0
 17635  003B10  0E0F               	movlw	15	;volatile
 17636  003B12  0100               	movlb	0	; () banked
 17637  003B14  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17638  003B16  0E40               	movlw	64	;volatile
 17639  003B18  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17640                           
 17641                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17642  003B1A  0E0F               	movlw	15	;volatile
 17643  003B1C  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17644  003B1E  0E30               	movlw	48	;volatile
 17645  003B20  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17646                           
 17647                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17648  003B22  0E0F               	movlw	15	;volatile
 17649  003B24  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17650  003B26  0E20               	movlw	32	;volatile
 17651  003B28  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17652                           
 17653                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17654  003B2A  0E0E               	movlw	14	;volatile
 17655  003B2C  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17656  003B2E  0E20               	movlw	32	;volatile
 17657  003B30  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17658                           
 17659                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17660  003B32  0E0E               	movlw	14	;volatile
 17661  003B34  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17662  003B36  0E30               	movlw	48	;volatile
 17663  003B38  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17664                           
 17665                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17666  003B3A  0E0E               	movlw	14	;volatile
 17667  003B3C  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17668  003B3E  0E40               	movlw	64	;volatile
 17669  003B40  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17670                           
 17671                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17672  003B42  0E0E               	movlw	14	;volatile
 17673  003B44  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17674  003B46  0E50               	movlw	80	;volatile
 17675  003B48  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17676                           
 17677                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17678  003B4A  0E0E               	movlw	14	;volatile
 17679  003B4C  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17680  003B4E  0E60               	movlw	96	;volatile
 17681  003B50  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17682                           
 17683                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17684  003B52  0E0E               	movlw	14	;volatile
 17685  003B54  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17686  003B56  0E70               	movlw	112	;volatile
 17687  003B58  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17688                           
 17689                           ; BSR set to: 0
 17690                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17691  003B5A  5077               	movf	3959,w,c	;volatile
 17692  003B5C  0BC0               	andlw	192
 17693  003B5E  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17694                           
 17695                           ; BSR set to: 0
 17696                           ;ECAN.c: 660: if ( mode == 0x00 )
 17697  003B60  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17698  003B62  D002               	goto	l12725
 17699                           
 17700                           ; BSR set to: 0
 17701                           ;ECAN.c: 661: buffers = 2;
 17702  003B64  0E02               	movlw	2
 17703  003B66  D001               	goto	L14
 17704  003B68                     l12725:
 17705                           
 17706                           ; BSR set to: 0
 17707                           ;ECAN.c: 662: else
 17708                           ;ECAN.c: 663: buffers = 8;
 17709  003B68  0E08               	movlw	8
 17710  003B6A                     L14:
 17711  003B6A  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17715  003B6C  010D               	movlb	13	; () banked
 17716  003B6E  90D8               	bcf	status,0,c
 17717  003B70  31F8               	rrcf	248,w,b	;volatile
 17718  003B72  0100               	movlb	0	; () banked
 17719  003B74  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17720                           
 17721                           ; BSR set to: 0
 17722                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17723  003B76  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17724  003B78  D07D               	goto	l12785
 17725  003B7A                     l12731:
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;ECAN.c: 688: {
 17729                           ;ECAN.c: 693: ptr = pb[i];
 17730  003B7A  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17731  003B7C  0D02               	mullw	2
 17732  003B7E  50F3               	movf	prodl,w,c
 17733  003B80  0F73               	addlw	low ECANSendMessage@pb
 17734  003B82  6ED9               	movwf	fsr2l,c
 17735  003B84  6ADA               	clrf	fsr2h,c
 17736  003B86  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17737  003B8A  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17738                           
 17739                           ; BSR set to: 0
 17740                           ;ECAN.c: 694: tempPtr = ptr;
 17741  003B8E  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17742  003B92  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17743                           
 17744                           ; BSR set to: 0
 17745                           ;ECAN.c: 702: if ( i > 2 )
 17746  003B96  0E02               	movlw	2
 17747  003B98  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17748  003B9A  D004               	goto	l12743
 17749                           
 17750                           ; BSR set to: 0
 17751                           ;ECAN.c: 703: {
 17752                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17753  003B9C  90D8               	bcf	status,0,c
 17754  003B9E  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17755                           
 17756                           ; BSR set to: 0
 17757                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17758  003BA0  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17759  003BA2  D067               	goto	l12783
 17760  003BA4                     l12743:
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;ECAN.c: 714: }
 17764                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17765  003BA4  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17766  003BA8  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17767  003BAC  50DF               	movf	indf2,w,c
 17768  003BAE  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17769  003BB0  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17770  003BB2  D05F               	goto	l12783
 17771                           
 17772                           ; BSR set to: 0
 17773                           ;ECAN.c: 721: {
 17774                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17775  003BB4  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17776  003BB8  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17777  003BBC  0EFC               	movlw	252
 17778  003BBE  16DF               	andwf	indf2,f,c
 17779                           
 17780                           ; BSR set to: 0
 17781                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17782  003BC0  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17783  003BC4  0E03               	movlw	3
 17784  003BC6  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17785  003BC8  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17786  003BCC  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17787  003BD0  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17788  003BD2  12DF               	iorwf	indf2,f,c
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17792  003BD4  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17793  003BD6  D004               	goto	l1426
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17797  003BD8  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17798  003BDA  0940               	iorlw	64
 17799  003BDC  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17800  003BDE  D002               	goto	l12753
 17801  003BE0                     l1426:
 17802                           
 17803                           ; BSR set to: 0
 17804                           ;ECAN.c: 729: else
 17805                           ;ECAN.c: 730: temp = dataLen;
 17806  003BE0  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17807  003BE4                     l12753:
 17808                           
 17809                           ; BSR set to: 0
 17810                           ;ECAN.c: 732: *(ptr+5) = temp;
 17811  003BE4  EE20 F005          	lfsr	2,5
 17812  003BE8  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17813  003BEA  26D9               	addwf	fsr2l,f,c
 17814  003BEC  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17815  003BEE  22DA               	addwfc	fsr2h,f,c
 17816  003BF0  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17820  003BF4  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17821  003BF6  D003               	goto	l1428
 17822                           
 17823                           ; BSR set to: 0
 17824                           ;ECAN.c: 736: temp = 1;
 17825  003BF8  0E01               	movlw	1
 17826  003BFA  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17827  003BFC  D001               	goto	l12759
 17828  003BFE                     l1428:
 17829                           
 17830                           ; BSR set to: 0
 17831                           ;ECAN.c: 738: else
 17832                           ;ECAN.c: 739: temp = 0;
 17833  003BFE  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17834  003C00                     l12759:
 17835                           
 17836                           ; BSR set to: 0
 17837                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17838  003C00  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17839  003C02  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17840  003C04  0E00               	movlw	0
 17841  003C06  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17842  003C08  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17843  003C0A  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17844  003C0E  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17845  003C12  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17846  003C16  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17847  003C1A  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17848  003C1E  EC8D  F01A         	call	__CANIDToRegs	;wreg free
 17849                           
 17850                           ; BSR set to: 0
 17851                           ;ECAN.c: 745: ptr += 6;
 17852  003C22  0E06               	movlw	6
 17853  003C24  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17854  003C26  0E00               	movlw	0
 17855  003C28  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17859  003C2A  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17860  003C2C  D00F               	goto	l12773
 17861  003C2E                     l12765:
 17862                           
 17863                           ; BSR set to: 0
 17864                           ;ECAN.c: 748: *ptr++ = *data++;
 17865  003C2E  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17866  003C32  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17867  003C36  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17868  003C3A  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17869  003C3E  CFDF FFE7          	movff	indf2,indf1
 17870                           
 17871                           ; BSR set to: 0
 17872  003C42  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17873  003C44  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17874                           
 17875                           ; BSR set to: 0
 17876  003C46  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17877  003C48  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17878                           
 17879                           ; BSR set to: 0
 17880  003C4A  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17881  003C4C                     l12773:
 17882                           
 17883                           ; BSR set to: 0
 17884  003C4C  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17885  003C4E  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17886  003C50  E3EE               	bnc	l12765
 17887                           
 17888                           ; BSR set to: 0
 17889                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17890  003C52  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17891  003C56  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17892  003C5A  50DF               	movf	indf2,w,c
 17893  003C5C  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17894  003C5E  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17895  003C60  D006               	goto	l12779
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17899  003C62  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17900  003C66  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17901  003C6A  0E00               	movlw	0
 17902  003C6C  86DB               	bsf	plusw2,3,c
 17903  003C6E                     l12779:
 17904                           
 17905                           ; BSR set to: 0
 17906                           ;ECAN.c: 755: return TRUE;
 17907  003C6E  0E01               	movlw	1
 17908  003C70  D005               	goto	l1434
 17909  003C72                     l12783:
 17910                           
 17911                           ; BSR set to: 0
 17912  003C72  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17913  003C74                     l12785:
 17914                           
 17915                           ; BSR set to: 0
 17916  003C74  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17917  003C76  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17918  003C78  E380               	bnc	l12731
 17919                           
 17920                           ; BSR set to: 0
 17921                           ;ECAN.c: 756: }
 17922                           ;ECAN.c: 757: }
 17923                           ;ECAN.c: 760: return FALSE;
 17924  003C7A  0E00               	movlw	0
 17925  003C7C                     l1434:
 17926                           
 17927                           ; BSR set to: 0
 17928  003C7C  0012               	return	
 17929  003C7E                     __end_of_ECANSendMessage:
 17930                           	opt stack 0
 17931                           tblptru	equ	0xFF8
 17932                           tblptrh	equ	0xFF7
 17933                           tblptrl	equ	0xFF6
 17934                           tablat	equ	0xFF5
 17935                           prodh	equ	0xFF4
 17936                           prodl	equ	0xFF3
 17937                           intcon	equ	0xFF2
 17938                           indf0	equ	0xFEF
 17939                           postinc0	equ	0xFEE
 17940                           fsr0h	equ	0xFEA
 17941                           fsr0l	equ	0xFE9
 17942                           wreg	equ	0xFE8
 17943                           indf1	equ	0xFE7
 17944                           postinc1	equ	0xFE6
 17945                           postdec1	equ	0xFE5
 17946                           fsr1h	equ	0xFE2
 17947                           fsr1l	equ	0xFE1
 17948                           indf2	equ	0xFDF
 17949                           postinc2	equ	0xFDE
 17950                           postdec2	equ	0xFDD
 17951                           plusw2	equ	0xFDB
 17952                           fsr2h	equ	0xFDA
 17953                           fsr2l	equ	0xFD9
 17954                           status	equ	0xFD8
 17955                           
 17956 ;; *************** function __CANIDToRegs *****************
 17957 ;; Defined at:
 17958 ;;		line 1101 in file "ECAN.c"
 17959 ;; Parameters:    Size  Location     Type
 17960 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17961 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17962 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17963 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17964 ;;  val             4    2[BANK0 ] unsigned long 
 17965 ;;  type            1    6[BANK0 ] unsigned char 
 17966 ;; Auto vars:     Size  Location     Type
 17967 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17968 ;;		 -> _CANIDToRegs@val(4), 
 17969 ;; Return value:  Size  Location     Type
 17970 ;;		None               void
 17971 ;; Registers used:
 17972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17973 ;; Tracked objects:
 17974 ;;		On entry : F/0
 17975 ;;		On exit  : F/0
 17976 ;;		Unchanged: 0/0
 17977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17978 ;;      Params:         0       7       0       0       0       0       0
 17979 ;;      Locals:         0       1       0       0       0       0       0
 17980 ;;      Temps:          0       2       0       0       0       0       0
 17981 ;;      Totals:         0      10       0       0       0       0       0
 17982 ;;Total ram usage:       10 bytes
 17983 ;; Hardware stack levels used:    1
 17984 ;; Hardware stack levels required when called:    3
 17985 ;; This function calls:
 17986 ;;		Nothing
 17987 ;; This function is called by:
 17988 ;;		_doModeVerbose
 17989 ;;		_ECANSendMessage
 17990 ;; This function uses a non-reentrant model
 17991 ;;
 17992                           
 17993                           	psect	text37
 17994  00351A                     __ptext37:
 17995                           	opt stack 0
 17996  00351A                     __CANIDToRegs:
 17997                           	opt stack 23
 17998                           
 17999                           ; BSR set to: 0
 18000                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 18001                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 18002                           
 18003                           ; BSR set to: 0
 18004                           ;incstack = 0
 18005                           ;incstack = 0
 18006  00351A  0E62               	movlw	low __CANIDToRegs@val
 18007  00351C  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 18008                           
 18009                           ; BSR set to: 0
 18010                           ;ECAN.c: 1106: if ( type == 0 )
 18011  00351E  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 18012  003520  D022               	goto	l12111
 18013                           
 18014                           ; BSR set to: 0
 18015                           ;ECAN.c: 1107: {
 18016                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 18017  003522  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18018  003524  6ED9               	movwf	fsr2l,c
 18019  003526  6ADA               	clrf	fsr2h,c
 18020  003528  50DF               	movf	indf2,w,c
 18021  00352A  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18022  00352C  90D8               	bcf	status,0,c
 18023  00352E  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18024  003530  90D8               	bcf	status,0,c
 18025  003532  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18026  003534  90D8               	bcf	status,0,c
 18027  003536  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 18028                           
 18029                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 18030  003538  D862               	call	PL54	;call to abstracted procedure
 18031  00353A  2AD9               	incf	fsr2l,f,c
 18032  00353C  6ADA               	clrf	fsr2h,c
 18033  00353E  D872               	call	PL110	;call to abstracted procedure
 18034  003540                     u15365:
 18035  003540  90D8               	bcf	status,0,c
 18036  003542  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18037  003544  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18038  003546  D7FC               	goto	u15365
 18039  003548  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;ECAN.c: 1111: ptr++;
 18043                           
 18044                           ; BSR set to: 0
 18045                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 18046  00354C  D846               	call	PL32	;call to abstracted procedure
 18047  00354E  D86A               	call	PL110	;call to abstracted procedure
 18048  003550                     u15375:
 18049  003550  90D8               	bcf	status,0,c
 18050  003552  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18051  003554  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18052  003556  D7FC               	goto	u15375
 18053  003558  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18054  00355A  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18055  00355E  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18056  003562  6EDF               	movwf	indf2,c
 18057                           
 18058                           ;ECAN.c: 1113: }
 18059  003564  D039               	goto	l1488
 18060  003566                     l12111:
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;ECAN.c: 1114: else
 18064                           ;ECAN.c: 1115: {
 18065                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18066  003566  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18067  003568  D842               	call	PL52	;call to abstracted procedure
 18068  00356A  0E05               	movlw	5
 18069  00356C  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18070  00356E                     u15385:
 18071  00356E  90D8               	bcf	status,0,c
 18072  003570  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18073  003572  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18074  003574  D7FC               	goto	u15385
 18075  003576  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18076                           
 18077                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18078  003578  D842               	call	PL54	;call to abstracted procedure
 18079  00357A  0E03               	movlw	3
 18080  00357C  D849               	call	PL78	;call to abstracted procedure
 18081  00357E  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18082  003580  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18083                           
 18084                           ; BSR set to: 0
 18085                           ;ECAN.c: 1119: ptr++;
 18086                           
 18087                           ; BSR set to: 0
 18088                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18089  003584  D82A               	call	PL32	;call to abstracted procedure
 18090  003586  0E02               	movlw	2
 18091  003588  D843               	call	PL78	;call to abstracted procedure
 18092  00358A  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18093  00358C  0BE0               	andlw	224
 18094  00358E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18095  003592  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18096  003596  6EDF               	movwf	indf2,c
 18097                           
 18098                           ; BSR set to: 0
 18099                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18100  003598  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18101  00359C  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18102  0035A0  0E00               	movlw	0
 18103  0035A2  86DB               	bsf	plusw2,3,c
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18107  0035A4  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18108  0035A6  D823               	call	PL52	;call to abstracted procedure
 18109  0035A8  0E03               	movlw	3
 18110  0035AA  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18111  0035AC  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18112                           
 18113                           ;ECAN.c: 1124: ptr++;
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18117  0035B0  D814               	call	PL32	;call to abstracted procedure
 18118  0035B2  2AD9               	incf	fsr2l,f,c
 18119  0035B4  6ADA               	clrf	fsr2h,c
 18120  0035B6  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18121  0035BA  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18122  0035BE  CFDF FFE7          	movff	indf2,indf1
 18123                           
 18124                           ; BSR set to: 0
 18125                           ;ECAN.c: 1126: ptr++;
 18126  0035C2  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18127  0035C4  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18128                           
 18129                           ; BSR set to: 0
 18130                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18131  0035C6  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18132  0035C8  6ED9               	movwf	fsr2l,c
 18133  0035CA  6ADA               	clrf	fsr2h,c
 18134  0035CC  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18135  0035D0  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18136  0035D4  CFDF FFE7          	movff	indf2,indf1
 18137  0035D8                     l1488:
 18138                           
 18139                           ; BSR set to: 0
 18140  0035D8  0012               	return	
 18141  0035DA                     __end_of__CANIDToRegs:
 18142                           	opt stack 0
 18143  0035DA                     PL32:
 18144                           	opt stack 23
 18145  0035DA  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18146  0035DE  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18147  0035E0  12DF               	iorwf	indf2,f,c
 18148  0035E2  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18149  0035E4  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18150  0035E6  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18151  0035E8  6ED9               	movwf	fsr2l,c
 18152  0035EA  6ADA               	clrf	fsr2h,c
 18153  0035EC  0012               	return	
 18154  0035EE                     __end_ofPL32:
 18155                           	opt stack 0
 18156  0035EE                     PL52:
 18157                           	opt stack 23
 18158  0035EE  6ED9               	movwf	fsr2l,c
 18159  0035F0  6ADA               	clrf	fsr2h,c
 18160  0035F2  0E02               	movlw	2
 18161  0035F4  26D9               	addwf	fsr2l,f,c
 18162  0035F6  6ADA               	clrf	fsr2h,c
 18163  0035F8  50DF               	movf	indf2,w,c
 18164  0035FA  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18165  0035FC  0012               	return	
 18166  0035FE                     __end_ofPL52:
 18167                           	opt stack 0
 18168  0035FE                     PL54:
 18169                           	opt stack 23
 18170  0035FE  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18171  003602  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18172  003606  6EDF               	movwf	indf2,c
 18173  003608  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18174  00360A  6ED9               	movwf	fsr2l,c
 18175  00360C  6ADA               	clrf	fsr2h,c
 18176  00360E  0012               	return	
 18177  003610                     __end_ofPL54:
 18178                           	opt stack 0
 18179  003610                     PL78:
 18180                           	opt stack 23
 18181  003610  26D9               	addwf	fsr2l,f,c
 18182  003612  6ADA               	clrf	fsr2h,c
 18183  003614  50DF               	movf	indf2,w,c
 18184  003616  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18185  003618  90D8               	bcf	status,0,c
 18186  00361A  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18187  00361C  90D8               	bcf	status,0,c
 18188  00361E  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18189  003620  90D8               	bcf	status,0,c
 18190  003622  0012               	return	
 18191  003624                     __end_ofPL78:
 18192                           	opt stack 0
 18193  003624                     PL110:
 18194                           	opt stack 23
 18195  003624  50DF               	movf	indf2,w,c
 18196  003626  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18197  003628  0E05               	movlw	5
 18198  00362A  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18199  00362C  0C05               	retlw	5
 18200  00362E                     __end_ofPL110:
 18201                           	opt stack 0
 18202                           tblptru	equ	0xFF8
 18203                           tblptrh	equ	0xFF7
 18204                           tblptrl	equ	0xFF6
 18205                           tablat	equ	0xFF5
 18206                           prodh	equ	0xFF4
 18207                           prodl	equ	0xFF3
 18208                           intcon	equ	0xFF2
 18209                           indf0	equ	0xFEF
 18210                           postinc0	equ	0xFEE
 18211                           fsr0h	equ	0xFEA
 18212                           fsr0l	equ	0xFE9
 18213                           wreg	equ	0xFE8
 18214                           indf1	equ	0xFE7
 18215                           postinc1	equ	0xFE6
 18216                           postdec1	equ	0xFE5
 18217                           fsr1h	equ	0xFE2
 18218                           fsr1l	equ	0xFE1
 18219                           indf2	equ	0xFDF
 18220                           postinc2	equ	0xFDE
 18221                           postdec2	equ	0xFDD
 18222                           plusw2	equ	0xFDB
 18223                           fsr2h	equ	0xFDA
 18224                           fsr2l	equ	0xFD9
 18225                           status	equ	0xFD8
 18226                           
 18227 ;; *************** function _memset *****************
 18228 ;; Defined at:
 18229 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18230 ;; Parameters:    Size  Location     Type
 18231 ;;  p1              2    0[BANK0 ] PTR void 
 18232 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18233 ;;  c               2    2[BANK0 ] int 
 18234 ;;  n               2    4[BANK0 ] unsigned int 
 18235 ;; Auto vars:     Size  Location     Type
 18236 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18237 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18238 ;; Return value:  Size  Location     Type
 18239 ;;                  2    0[BANK0 ] PTR void 
 18240 ;; Registers used:
 18241 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18242 ;; Tracked objects:
 18243 ;;		On entry : F/0
 18244 ;;		On exit  : F/0
 18245 ;;		Unchanged: 0/0
 18246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18247 ;;      Params:         0       6       0       0       0       0       0
 18248 ;;      Locals:         0       2       0       0       0       0       0
 18249 ;;      Temps:          0       0       0       0       0       0       0
 18250 ;;      Totals:         0       8       0       0       0       0       0
 18251 ;;Total ram usage:        8 bytes
 18252 ;; Hardware stack levels used:    1
 18253 ;; Hardware stack levels required when called:    3
 18254 ;; This function calls:
 18255 ;;		Nothing
 18256 ;; This function is called by:
 18257 ;;		_doModeVerbose
 18258 ;;		_doModeSLCAN
 18259 ;;		_printGUID
 18260 ;;		_printMDF
 18261 ;;		_printNodeFirmwareVersion
 18262 ;; This function uses a non-reentrant model
 18263 ;;
 18264                           
 18265                           	psect	text38
 18266  001848                     __ptext38:
 18267                           	opt stack 0
 18268  001848                     _memset:
 18269                           	opt stack 25
 18270                           
 18271                           ; BSR set to: 0
 18272                           
 18273                           ; BSR set to: 0
 18274                           ;incstack = 0
 18275                           ;incstack = 0
 18276  001848  C060  F066         	movff	memset@p1,memset@p
 18277  00184C  C061  F067         	movff	memset@p1+1,memset@p+1
 18278  001850  D008               	goto	l11313
 18279  001852                     l11309:
 18280                           
 18281                           ; BSR set to: 0
 18282  001852  C066  FFD9         	movff	memset@p,fsr2l
 18283  001856  C067  FFDA         	movff	memset@p+1,fsr2h
 18284  00185A  C062  FFDF         	movff	memset@c,indf2
 18285                           
 18286                           ; BSR set to: 0
 18287  00185E  4B66               	infsnz	memset@p& (0+255),f,b
 18288  001860  2B67               	incf	(memset@p+1)& (0+255),f,b
 18289  001862                     l11313:
 18290                           
 18291                           ; BSR set to: 0
 18292  001862  0764               	decf	memset@n& (0+255),f,b
 18293  001864  A0D8               	btfss	status,0,c
 18294  001866  0765               	decf	(memset@n+1)& (0+255),f,b
 18295  001868  0100               	movlb	0	; () banked
 18296  00186A  2964               	incf	memset@n& (0+255),w,b
 18297  00186C  B4D8               	btfsc	status,2,c
 18298  00186E  2965               	incf	(memset@n+1)& (0+255),w,b
 18299  001870  B4D8               	btfsc	status,2,c
 18300                           
 18301                           ; BSR set to: 0
 18302  001872  0012               	return	
 18303  001874  D7EE               	goto	l11309
 18304  001876                     __end_of_memset:
 18305                           	opt stack 0
 18306                           tblptru	equ	0xFF8
 18307                           tblptrh	equ	0xFF7
 18308                           tblptrl	equ	0xFF6
 18309                           tablat	equ	0xFF5
 18310                           prodh	equ	0xFF4
 18311                           prodl	equ	0xFF3
 18312                           intcon	equ	0xFF2
 18313                           indf0	equ	0xFEF
 18314                           postinc0	equ	0xFEE
 18315                           fsr0h	equ	0xFEA
 18316                           fsr0l	equ	0xFE9
 18317                           wreg	equ	0xFE8
 18318                           indf1	equ	0xFE7
 18319                           postinc1	equ	0xFE6
 18320                           postdec1	equ	0xFE5
 18321                           fsr1h	equ	0xFE2
 18322                           fsr1l	equ	0xFE1
 18323                           indf2	equ	0xFDF
 18324                           postinc2	equ	0xFDE
 18325                           postdec2	equ	0xFDD
 18326                           plusw2	equ	0xFDB
 18327                           fsr2h	equ	0xFDA
 18328                           fsr2l	equ	0xFD9
 18329                           status	equ	0xFD8
 18330                           
 18331 ;; *************** function _printHelp *****************
 18332 ;; Defined at:
 18333 ;;		line 2536 in file "main.c"
 18334 ;; Parameters:    Size  Location     Type
 18335 ;;		None
 18336 ;; Auto vars:     Size  Location     Type
 18337 ;;		None
 18338 ;; Return value:  Size  Location     Type
 18339 ;;		None               void
 18340 ;; Registers used:
 18341 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18342 ;; Tracked objects:
 18343 ;;		On entry : F/1
 18344 ;;		On exit  : 0/0
 18345 ;;		Unchanged: 0/0
 18346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18347 ;;      Params:         0       0       0       0       0       0       0
 18348 ;;      Locals:         0       0       0       0       0       0       0
 18349 ;;      Temps:          0       0       0       0       0       0       0
 18350 ;;      Totals:         0       0       0       0       0       0       0
 18351 ;;Total ram usage:        0 bytes
 18352 ;; Hardware stack levels used:    1
 18353 ;; Hardware stack levels required when called:    5
 18354 ;; This function calls:
 18355 ;;		_putsUSART
 18356 ;; This function is called by:
 18357 ;;		_doModeVerbose
 18358 ;; This function uses a non-reentrant model
 18359 ;;
 18360                           
 18361                           	psect	text39
 18362  0042E4                     __ptext39:
 18363                           	opt stack 0
 18364  0042E4                     _printHelp:
 18365                           	opt stack 23
 18366                           
 18367                           ; BSR set to: 1
 18368                           ;main.c: 2537: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18369                           
 18370                           ; BSR set to: 0
 18371                           ;incstack = 0
 18372                           ;incstack = 0
 18373  0042E4  0E75               	movlw	high STR_206
 18374  0042E6  0100               	movlb	0	; () banked
 18375  0042E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18376  0042EA  0E48               	movlw	low STR_206
 18377  0042EC  6F61               	movwf	?_putsUSART& (0+255),b
 18378  0042EE  EC6E  F00E         	call	_putsUSART	;wreg free
 18379                           
 18380                           ;main.c: 2538: putsUSART((char *) "------------------------------------\r\n");
 18381  0042F2  0E6E               	movlw	high (STR_238+28)
 18382  0042F4  0100               	movlb	0	; () banked
 18383  0042F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18384  0042F8  0E6F               	movlw	low (STR_238+28)
 18385  0042FA  6F61               	movwf	?_putsUSART& (0+255),b
 18386  0042FC  EC6E  F00E         	call	_putsUSART	;wreg free
 18387                           
 18388                           ;main.c: 2539: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18389  004300  0E78               	movlw	high STR_208
 18390  004302  0100               	movlb	0	; () banked
 18391  004304  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18392  004306  0E63               	movlw	low STR_208
 18393  004308  6F61               	movwf	?_putsUSART& (0+255),b
 18394  00430A  EC6E  F00E         	call	_putsUSART	;wreg free
 18395                           
 18396                           ;main.c: 2540: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18397  00430E  0E73               	movlw	high STR_209
 18398  004310  0100               	movlb	0	; () banked
 18399  004312  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18400  004314  0ED7               	movlw	low STR_209
 18401  004316  6F61               	movwf	?_putsUSART& (0+255),b
 18402  004318  EC6E  F00E         	call	_putsUSART	;wreg free
 18403                           
 18404                           ;main.c: 2541: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18405  00431C  0E73               	movlw	high STR_210
 18406  00431E  0100               	movlb	0	; () banked
 18407  004320  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18408  004322  0E7D               	movlw	low STR_210
 18409  004324  6F61               	movwf	?_putsUSART& (0+255),b
 18410  004326  EC6E  F00E         	call	_putsUSART	;wreg free
 18411                           
 18412                           ;main.c: 2542: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18413  00432A  0E71               	movlw	high STR_211
 18414  00432C  0100               	movlb	0	; () banked
 18415  00432E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18416  004330  0EF6               	movlw	low STR_211
 18417  004332  6F61               	movwf	?_putsUSART& (0+255),b
 18418  004334  EC6E  F00E         	call	_putsUSART	;wreg free
 18419                           
 18420                           ;main.c: 2543: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18421  004338  0E72               	movlw	high STR_212
 18422  00433A  0100               	movlb	0	; () banked
 18423  00433C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18424  00433E  0E5B               	movlw	low STR_212
 18425  004340  6F61               	movwf	?_putsUSART& (0+255),b
 18426  004342  EC6E  F00E         	call	_putsUSART	;wreg free
 18427                           
 18428                           ;main.c: 2544: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18429  004346  0E78               	movlw	high STR_213
 18430  004348  0100               	movlb	0	; () banked
 18431  00434A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18432  00434C  0E0B               	movlw	low STR_213
 18433  00434E  6F61               	movwf	?_putsUSART& (0+255),b
 18434  004350  EC6E  F00E         	call	_putsUSART	;wreg free
 18435                           
 18436                           ;main.c: 2545: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18437  004354  0E72               	movlw	high STR_214
 18438  004356  0100               	movlb	0	; () banked
 18439  004358  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18440  00435A  0E8D               	movlw	low STR_214
 18441  00435C  6F61               	movwf	?_putsUSART& (0+255),b
 18442  00435E  EC6E  F00E         	call	_putsUSART	;wreg free
 18443                           
 18444                           ;main.c: 2546: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18445  004362  0E73               	movlw	high STR_215
 18446  004364  0100               	movlb	0	; () banked
 18447  004366  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18448  004368  0EAB               	movlw	low STR_215
 18449  00436A  6F61               	movwf	?_putsUSART& (0+255),b
 18450  00436C  EC6E  F00E         	call	_putsUSART	;wreg free
 18451                           
 18452                           ;main.c: 2547: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18453  004370  0E79               	movlw	high STR_216
 18454  004372  0100               	movlb	0	; () banked
 18455  004374  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18456  004376  0E00               	movlw	low STR_216
 18457  004378  6F61               	movwf	?_putsUSART& (0+255),b
 18458  00437A  EC6E  F00E         	call	_putsUSART	;wreg free
 18459                           
 18460                           ;main.c: 2548: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18461  00437E  0E70               	movlw	high STR_217
 18462  004380  0100               	movlb	0	; () banked
 18463  004382  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18464  004384  0E0F               	movlw	low STR_217
 18465  004386  6F61               	movwf	?_putsUSART& (0+255),b
 18466  004388  EC6E  F00E         	call	_putsUSART	;wreg free
 18467                           
 18468                           ;main.c: 2549: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18469  00438C  0E79               	movlw	high STR_218
 18470  00438E  0100               	movlb	0	; () banked
 18471  004390  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18472  004392  0EC0               	movlw	low STR_218
 18473  004394  6F61               	movwf	?_putsUSART& (0+255),b
 18474  004396  EC6E  F00E         	call	_putsUSART	;wreg free
 18475                           
 18476                           ;main.c: 2550: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18477  00439A  0E77               	movlw	high STR_219
 18478  00439C  0100               	movlb	0	; () banked
 18479  00439E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18480  0043A0  0E27               	movlw	low STR_219
 18481  0043A2  6F61               	movwf	?_putsUSART& (0+255),b
 18482  0043A4  EC6E  F00E         	call	_putsUSART	;wreg free
 18483                           
 18484                           ;main.c: 2551: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18485  0043A8  0E75               	movlw	high STR_220
 18486  0043AA  0100               	movlb	0	; () banked
 18487  0043AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18488  0043AE  0E21               	movlw	low STR_220
 18489  0043B0  6F61               	movwf	?_putsUSART& (0+255),b
 18490  0043B2  EC6E  F00E         	call	_putsUSART	;wreg free
 18491                           
 18492                           ;main.c: 2552: putsUSART((char *) "HELP - Display this help information.\r\n");
 18493  0043B6  0E74               	movlw	high STR_221
 18494  0043B8  0100               	movlb	0	; () banked
 18495  0043BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18496  0043BC  0E82               	movlw	low STR_221
 18497  0043BE  6F61               	movwf	?_putsUSART& (0+255),b
 18498  0043C0  EC6E  F00E         	call	_putsUSART	;wreg free
 18499                           
 18500                           ;main.c: 2553: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18501  0043C4  0E73               	movlw	high STR_222
 18502  0043C6  0100               	movlb	0	; () banked
 18503  0043C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18504  0043CA  0E4E               	movlw	low STR_222
 18505  0043CC  6F61               	movwf	?_putsUSART& (0+255),b
 18506  0043CE  EC6E  F00E         	call	_putsUSART	;wreg free
 18507                           
 18508                           ;main.c: 2554: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18509  0043D2  0E6E               	movlw	high STR_223
 18510  0043D4  0100               	movlb	0	; () banked
 18511  0043D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18512  0043D8  0E0E               	movlw	low STR_223
 18513  0043DA  6F61               	movwf	?_putsUSART& (0+255),b
 18514  0043DC  EC6E  F00E         	call	_putsUSART	;wreg free
 18515                           
 18516                           ;main.c: 2555: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18517  0043E0  0E6E               	movlw	high STR_224
 18518  0043E2  0100               	movlb	0	; () banked
 18519  0043E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18520  0043E6  0ED9               	movlw	low STR_224
 18521  0043E8  6F61               	movwf	?_putsUSART& (0+255),b
 18522  0043EA  EC6E  F00E         	call	_putsUSART	;wreg free
 18523                           
 18524                           ;main.c: 2556: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18525  0043EE  0E6D               	movlw	high STR_225
 18526  0043F0  0100               	movlb	0	; () banked
 18527  0043F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18528  0043F4  0E7A               	movlw	low STR_225
 18529  0043F6  6F61               	movwf	?_putsUSART& (0+255),b
 18530  0043F8  EC6E  F00E         	call	_putsUSART	;wreg free
 18531                           
 18532                           ;main.c: 2557: putsUSART((char *) "FILTER - Set filter .\r\n");
 18533  0043FC  0E79               	movlw	high STR_226
 18534  0043FE  0100               	movlb	0	; () banked
 18535  004400  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18536  004402  0E18               	movlw	low STR_226
 18537  004404  6F61               	movwf	?_putsUSART& (0+255),b
 18538  004406  EC6E  F00E         	call	_putsUSART	;wreg free
 18539                           
 18540                           ;main.c: 2558: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18541  00440A  0E6D               	movlw	high STR_227
 18542  00440C  0100               	movlb	0	; () banked
 18543  00440E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18544  004410  0E2C               	movlw	low STR_227
 18545  004412  6F61               	movwf	?_putsUSART& (0+255),b
 18546  004414  EC6E  F00E         	call	_putsUSART	;wreg free
 18547                           
 18548                           ;main.c: 2559: putsUSART((char *) "MASK - Set mask .\r\n");
 18549  004418  0E7A               	movlw	high STR_228
 18550  00441A  0100               	movlb	0	; () banked
 18551  00441C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18552  00441E  0E46               	movlw	low STR_228
 18553  004420  6F61               	movwf	?_putsUSART& (0+255),b
 18554  004422  EC6E  F00E         	call	_putsUSART	;wreg free
 18555                           
 18556                           ;main.c: 2560: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18557  004426  0E6D               	movlw	high STR_229
 18558  004428  0100               	movlb	0	; () banked
 18559  00442A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18560  00442C  0EC7               	movlw	low STR_229
 18561  00442E  6F61               	movwf	?_putsUSART& (0+255),b
 18562  004430  EC6E  F00E         	call	_putsUSART	;wreg free
 18563                           
 18564                           ;main.c: 2561: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18565  004434  0E76               	movlw	high STR_230
 18566  004436  0100               	movlb	0	; () banked
 18567  004438  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18568  00443A  0EE3               	movlw	low STR_230
 18569  00443C  6F61               	movwf	?_putsUSART& (0+255),b
 18570  00443E  EC6E  F00E         	call	_putsUSART	;wreg free
 18571                           
 18572                           ;main.c: 2562: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18573  004442  0E73               	movlw	high STR_231
 18574  004444  0100               	movlb	0	; () banked
 18575  004446  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18576  004448  0E1F               	movlw	low STR_231
 18577  00444A  6F61               	movwf	?_putsUSART& (0+255),b
 18578  00444C  EC6E  F00E         	call	_putsUSART	;wreg free
 18579                           
 18580                           ;main.c: 2563: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18581  004450  0E72               	movlw	high STR_232
 18582  004452  0100               	movlb	0	; () banked
 18583  004454  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18584  004456  0EF0               	movlw	low STR_232
 18585  004458  6F61               	movwf	?_putsUSART& (0+255),b
 18586  00445A  EC6E  F00E         	call	_putsUSART	;wreg free
 18587                           
 18588                           ;main.c: 2564: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18589  00445E  0E6E               	movlw	high STR_233
 18590  004460  0100               	movlb	0	; () banked
 18591  004462  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18592  004464  0E96               	movlw	low STR_233
 18593  004466  6F61               	movwf	?_putsUSART& (0+255),b
 18594  004468  EC6E  F00E         	call	_putsUSART	;wreg free
 18595                           
 18596                           ;main.c: 2565: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18597  00446C  0E72               	movlw	high STR_234
 18598  00446E  0100               	movlb	0	; () banked
 18599  004470  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18600  004472  0EBF               	movlw	low STR_234
 18601  004474  6F61               	movwf	?_putsUSART& (0+255),b
 18602  004476  EC6E  F00E         	call	_putsUSART	;wreg free
 18603                           
 18604                           ;main.c: 2566: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18605  00447A  0E70               	movlw	high STR_235
 18606  00447C  0100               	movlb	0	; () banked
 18607  00447E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18608  004480  0E7E               	movlw	low STR_235
 18609  004482  6F61               	movwf	?_putsUSART& (0+255),b
 18610  004484  EC6E  F00E         	call	_putsUSART	;wreg free
 18611                           
 18612                           ;main.c: 2567: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18613  004488  0E6F               	movlw	high STR_236
 18614  00448A  0100               	movlb	0	; () banked
 18615  00448C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18616  00448E  0E5E               	movlw	low STR_236
 18617  004490  6F61               	movwf	?_putsUSART& (0+255),b
 18618  004492  EC6E  F00E         	call	_putsUSART	;wreg free
 18619                           
 18620                           ;main.c: 2568: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18621  004496  0E75               	movlw	high STR_237
 18622  004498  0100               	movlb	0	; () banked
 18623  00449A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18624  00449C  0EBD               	movlw	low STR_237
 18625  00449E  6F61               	movwf	?_putsUSART& (0+255),b
 18626  0044A0  EF6E  F00E         	goto	_putsUSART	;wreg free
 18627  0044A4                     __end_of_printHelp:
 18628                           	opt stack 0
 18629                           tblptru	equ	0xFF8
 18630                           tblptrh	equ	0xFF7
 18631                           tblptrl	equ	0xFF6
 18632                           tablat	equ	0xFF5
 18633                           prodh	equ	0xFF4
 18634                           prodl	equ	0xFF3
 18635                           intcon	equ	0xFF2
 18636                           indf0	equ	0xFEF
 18637                           postinc0	equ	0xFEE
 18638                           fsr0h	equ	0xFEA
 18639                           fsr0l	equ	0xFE9
 18640                           wreg	equ	0xFE8
 18641                           indf1	equ	0xFE7
 18642                           postinc1	equ	0xFE6
 18643                           postdec1	equ	0xFE5
 18644                           fsr1h	equ	0xFE2
 18645                           fsr1l	equ	0xFE1
 18646                           indf2	equ	0xFDF
 18647                           postinc2	equ	0xFDE
 18648                           postdec2	equ	0xFDD
 18649                           plusw2	equ	0xFDB
 18650                           fsr2h	equ	0xFDA
 18651                           fsr2l	equ	0xFD9
 18652                           status	equ	0xFD8
 18653                           
 18654 ;; *************** function _printErrors *****************
 18655 ;; Defined at:
 18656 ;;		line 2472 in file "main.c"
 18657 ;; Parameters:    Size  Location     Type
 18658 ;;		None
 18659 ;; Auto vars:     Size  Location     Type
 18660 ;;		None
 18661 ;; Return value:  Size  Location     Type
 18662 ;;		None               void
 18663 ;; Registers used:
 18664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18665 ;; Tracked objects:
 18666 ;;		On entry : F/1
 18667 ;;		On exit  : 0/0
 18668 ;;		Unchanged: 0/0
 18669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18670 ;;      Params:         0       0       0       0       0       0       0
 18671 ;;      Locals:         0      12       0       0       0       0       0
 18672 ;;      Temps:          0       0       0       0       0       0       0
 18673 ;;      Totals:         0      12       0       0       0       0       0
 18674 ;;Total ram usage:       12 bytes
 18675 ;; Hardware stack levels used:    1
 18676 ;; Hardware stack levels required when called:    5
 18677 ;; This function calls:
 18678 ;;		_putsUSART
 18679 ;;		_sprintf
 18680 ;; This function is called by:
 18681 ;;		_doModeVerbose
 18682 ;; This function uses a non-reentrant model
 18683 ;;
 18684                           
 18685                           	psect	text40
 18686  004B4C                     __ptext40:
 18687                           	opt stack 0
 18688  004B4C                     _printErrors:
 18689                           	opt stack 23
 18690                           
 18691                           ; BSR set to: 1
 18692                           ;main.c: 2473: putsUSART((char *) "CAN Receive overruns: ");
 18693                           
 18694                           ;incstack = 0
 18695                           ;incstack = 0
 18696  004B4C  0E79               	movlw	high STR_176
 18697  004B4E  0100               	movlb	0	; () banked
 18698  004B50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18699  004B52  0ED7               	movlw	low STR_176
 18700  004B54  6F61               	movwf	?_putsUSART& (0+255),b
 18701  004B56  EC6E  F00E         	call	_putsUSART	;wreg free
 18702                           
 18703                           ;main.c: 2474: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18704  004B5A  0101               	movlb	1	; () banked
 18705  004B5C  6700               	tstfsz	_bHex& (0+255),b
 18706  004B5E  D005               	goto	l11389
 18707                           
 18708                           ; BSR set to: 1
 18709  004B60  0E7C               	movlw	high STR_162
 18710  004B62  0100               	movlb	0	; () banked
 18711  004B64  6F95               	movwf	(_printErrors$1391+1)& (0+255),b
 18712  004B66  0EE0               	movlw	low STR_162
 18713  004B68  D004               	goto	L15
 18714  004B6A                     l11389:
 18715                           
 18716                           ; BSR set to: 1
 18717  004B6A  0E7C               	movlw	high STR_177
 18718  004B6C  0100               	movlb	0	; () banked
 18719  004B6E  6F95               	movwf	(_printErrors$1391+1)& (0+255),b
 18720  004B70  0E15               	movlw	low STR_177
 18721  004B72                     L15:
 18722  004B72  6F94               	movwf	_printErrors$1391& (0+255),b
 18723                           
 18724                           ; BSR set to: 0
 18725  004B74  0E01               	movlw	high _wrkbuf
 18726  004B76  0100               	movlb	0	; () banked
 18727  004B78  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18728  004B7A  0E54               	movlw	low _wrkbuf
 18729  004B7C  6F76               	movwf	?_sprintf& (0+255),b
 18730  004B7E  C094  F078         	movff	_printErrors$1391,?_sprintf+2
 18731  004B82  C095  F079         	movff	_printErrors$1391+1,?_sprintf+3
 18732  004B86  C0D1  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18733  004B8A  C0D2  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18734  004B8E  C0D3  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18735  004B92  C0D4  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18736  004B96  ECC8  F028         	call	_sprintf	;wreg free
 18737                           
 18738                           ; BSR set to: 0
 18739                           ;main.c: 2475: putsUSART(wrkbuf);
 18740  004B9A  0E01               	movlw	high _wrkbuf
 18741  004B9C  0100               	movlb	0	; () banked
 18742  004B9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18743  004BA0  0E54               	movlw	low _wrkbuf
 18744  004BA2  6F61               	movwf	?_putsUSART& (0+255),b
 18745  004BA4  EC6E  F00E         	call	_putsUSART	;wreg free
 18746                           
 18747                           ;main.c: 2476: putsUSART((char *) "\r\n");
 18748  004BA8  0E71               	movlw	high (STR_197+50)
 18749  004BAA  0100               	movlb	0	; () banked
 18750  004BAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18751  004BAE  0E8A               	movlw	low (STR_197+50)
 18752  004BB0  6F61               	movwf	?_putsUSART& (0+255),b
 18753  004BB2  EC6E  F00E         	call	_putsUSART	;wreg free
 18754                           
 18755                           ;main.c: 2478: putsUSART((char *) "CAN Transmit overruns: ");
 18756  004BB6  0E79               	movlw	high STR_180
 18757  004BB8  0100               	movlb	0	; () banked
 18758  004BBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18759  004BBC  0EA8               	movlw	low STR_180
 18760  004BBE  6F61               	movwf	?_putsUSART& (0+255),b
 18761  004BC0  EC6E  F00E         	call	_putsUSART	;wreg free
 18762                           
 18763                           ;main.c: 2479: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18764  004BC4  0101               	movlb	1	; () banked
 18765  004BC6  6700               	tstfsz	_bHex& (0+255),b
 18766  004BC8  D005               	goto	l11403
 18767                           
 18768                           ; BSR set to: 1
 18769  004BCA  0E7C               	movlw	high STR_162
 18770  004BCC  0100               	movlb	0	; () banked
 18771  004BCE  6F97               	movwf	(_printErrors$1397+1)& (0+255),b
 18772  004BD0  0EE0               	movlw	low STR_162
 18773  004BD2  D004               	goto	L16
 18774  004BD4                     l11403:
 18775                           
 18776                           ; BSR set to: 1
 18777  004BD4  0E7C               	movlw	high STR_177
 18778  004BD6  0100               	movlb	0	; () banked
 18779  004BD8  6F97               	movwf	(_printErrors$1397+1)& (0+255),b
 18780  004BDA  0E15               	movlw	low STR_177
 18781  004BDC                     L16:
 18782  004BDC  6F96               	movwf	_printErrors$1397& (0+255),b
 18783                           
 18784                           ; BSR set to: 0
 18785  004BDE  0E01               	movlw	high _wrkbuf
 18786  004BE0  0100               	movlb	0	; () banked
 18787  004BE2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18788  004BE4  0E54               	movlw	low _wrkbuf
 18789  004BE6  6F76               	movwf	?_sprintf& (0+255),b
 18790  004BE8  C096  F078         	movff	_printErrors$1397,?_sprintf+2
 18791  004BEC  C097  F079         	movff	_printErrors$1397+1,?_sprintf+3
 18792  004BF0  C001  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18793  004BF4  C002  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18794  004BF8  C003  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18795  004BFC  C004  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18796  004C00  ECC8  F028         	call	_sprintf	;wreg free
 18797                           
 18798                           ; BSR set to: 0
 18799                           ;main.c: 2480: putsUSART(wrkbuf);
 18800  004C04  0E01               	movlw	high _wrkbuf
 18801  004C06  0100               	movlb	0	; () banked
 18802  004C08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18803  004C0A  0E54               	movlw	low _wrkbuf
 18804  004C0C  6F61               	movwf	?_putsUSART& (0+255),b
 18805  004C0E  EC6E  F00E         	call	_putsUSART	;wreg free
 18806                           
 18807                           ;main.c: 2481: putsUSART((char *) "\r\n");
 18808  004C12  0E71               	movlw	high (STR_197+50)
 18809  004C14  0100               	movlb	0	; () banked
 18810  004C16  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18811  004C18  0E8A               	movlw	low (STR_197+50)
 18812  004C1A  6F61               	movwf	?_putsUSART& (0+255),b
 18813  004C1C  EC6E  F00E         	call	_putsUSART	;wreg free
 18814                           
 18815                           ;main.c: 2483: putsUSART((char *) "UART Receive overruns: ");
 18816  004C20  0E79               	movlw	high STR_184
 18817  004C22  0100               	movlb	0	; () banked
 18818  004C24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18819  004C26  0E90               	movlw	low STR_184
 18820  004C28  6F61               	movwf	?_putsUSART& (0+255),b
 18821  004C2A  EC6E  F00E         	call	_putsUSART	;wreg free
 18822                           
 18823                           ;main.c: 2484: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18824  004C2E  0101               	movlb	1	; () banked
 18825  004C30  6700               	tstfsz	_bHex& (0+255),b
 18826  004C32  D005               	goto	l11417
 18827                           
 18828                           ; BSR set to: 1
 18829  004C34  0E7C               	movlw	high STR_162
 18830  004C36  0100               	movlb	0	; () banked
 18831  004C38  6F99               	movwf	(_printErrors$1403+1)& (0+255),b
 18832  004C3A  0EE0               	movlw	low STR_162
 18833  004C3C  D004               	goto	L17
 18834  004C3E                     l11417:
 18835                           
 18836                           ; BSR set to: 1
 18837  004C3E  0E7C               	movlw	high STR_177
 18838  004C40  0100               	movlb	0	; () banked
 18839  004C42  6F99               	movwf	(_printErrors$1403+1)& (0+255),b
 18840  004C44  0E15               	movlw	low STR_177
 18841  004C46                     L17:
 18842  004C46  6F98               	movwf	_printErrors$1403& (0+255),b
 18843                           
 18844                           ; BSR set to: 0
 18845  004C48  0E01               	movlw	high _wrkbuf
 18846  004C4A  0100               	movlb	0	; () banked
 18847  004C4C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18848  004C4E  0E54               	movlw	low _wrkbuf
 18849  004C50  6F76               	movwf	?_sprintf& (0+255),b
 18850  004C52  C098  F078         	movff	_printErrors$1403,?_sprintf+2
 18851  004C56  C099  F079         	movff	_printErrors$1403+1,?_sprintf+3
 18852  004C5A  C005  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18853  004C5E  C006  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18854  004C62  C007  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18855  004C66  C008  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18856  004C6A  ECC8  F028         	call	_sprintf	;wreg free
 18857                           
 18858                           ; BSR set to: 0
 18859                           ;main.c: 2485: putsUSART(wrkbuf);
 18860  004C6E  0E01               	movlw	high _wrkbuf
 18861  004C70  0100               	movlb	0	; () banked
 18862  004C72  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18863  004C74  0E54               	movlw	low _wrkbuf
 18864  004C76  6F61               	movwf	?_putsUSART& (0+255),b
 18865  004C78  EC6E  F00E         	call	_putsUSART	;wreg free
 18866                           
 18867                           ;main.c: 2486: putsUSART((char *) "\r\n");
 18868  004C7C  0E71               	movlw	high (STR_197+50)
 18869  004C7E  0100               	movlb	0	; () banked
 18870  004C80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18871  004C82  0E8A               	movlw	low (STR_197+50)
 18872  004C84  6F61               	movwf	?_putsUSART& (0+255),b
 18873  004C86  EC6E  F00E         	call	_putsUSART	;wreg free
 18874                           
 18875                           ;main.c: 2488: putsUSART((char *) "UART Receive overruns: ");
 18876  004C8A  0E79               	movlw	high STR_184
 18877  004C8C  0100               	movlb	0	; () banked
 18878  004C8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18879  004C90  0E90               	movlw	low STR_184
 18880  004C92  6F61               	movwf	?_putsUSART& (0+255),b
 18881  004C94  EC6E  F00E         	call	_putsUSART	;wreg free
 18882                           
 18883                           ;main.c: 2489: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18884  004C98  0101               	movlb	1	; () banked
 18885  004C9A  6700               	tstfsz	_bHex& (0+255),b
 18886  004C9C  D005               	goto	l11431
 18887                           
 18888                           ; BSR set to: 1
 18889  004C9E  0E7C               	movlw	high STR_162
 18890  004CA0  0100               	movlb	0	; () banked
 18891  004CA2  6F9B               	movwf	(_printErrors$1409+1)& (0+255),b
 18892  004CA4  0EE0               	movlw	low STR_162
 18893  004CA6  D004               	goto	L18
 18894  004CA8                     l11431:
 18895                           
 18896                           ; BSR set to: 1
 18897  004CA8  0E7C               	movlw	high STR_177
 18898  004CAA  0100               	movlb	0	; () banked
 18899  004CAC  6F9B               	movwf	(_printErrors$1409+1)& (0+255),b
 18900  004CAE  0E15               	movlw	low STR_177
 18901  004CB0                     L18:
 18902  004CB0  6F9A               	movwf	_printErrors$1409& (0+255),b
 18903                           
 18904                           ; BSR set to: 0
 18905  004CB2  0E01               	movlw	high _wrkbuf
 18906  004CB4  0100               	movlb	0	; () banked
 18907  004CB6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18908  004CB8  0E54               	movlw	low _wrkbuf
 18909  004CBA  6F76               	movwf	?_sprintf& (0+255),b
 18910  004CBC  C09A  F078         	movff	_printErrors$1409,?_sprintf+2
 18911  004CC0  C09B  F079         	movff	_printErrors$1409+1,?_sprintf+3
 18912  004CC4  C009  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18913  004CC8  C00A  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18914  004CCC  C00B  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18915  004CD0  C00C  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18916  004CD4  ECC8  F028         	call	_sprintf	;wreg free
 18917                           
 18918                           ; BSR set to: 0
 18919                           ;main.c: 2490: putsUSART(wrkbuf);
 18920  004CD8  0E01               	movlw	high _wrkbuf
 18921  004CDA  0100               	movlb	0	; () banked
 18922  004CDC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18923  004CDE  0E54               	movlw	low _wrkbuf
 18924  004CE0  6F61               	movwf	?_putsUSART& (0+255),b
 18925  004CE2  EC6E  F00E         	call	_putsUSART	;wreg free
 18926                           
 18927                           ;main.c: 2491: putsUSART((char *) "\r\n");
 18928  004CE6  0E71               	movlw	high (STR_197+50)
 18929  004CE8  0100               	movlb	0	; () banked
 18930  004CEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18931  004CEC  0E8A               	movlw	low (STR_197+50)
 18932  004CEE  6F61               	movwf	?_putsUSART& (0+255),b
 18933  004CF0  EC6E  F00E         	call	_putsUSART	;wreg free
 18934                           
 18935                           ;main.c: 2493: putsUSART((char *) "Transmit Error Counter: ");
 18936  004CF4  0E78               	movlw	high STR_192
 18937  004CF6  0100               	movlb	0	; () banked
 18938  004CF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18939  004CFA  0EE7               	movlw	low STR_192
 18940  004CFC  6F61               	movwf	?_putsUSART& (0+255),b
 18941  004CFE  EC6E  F00E         	call	_putsUSART	;wreg free
 18942                           
 18943                           ;main.c: 2494: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18944  004D02  0101               	movlb	1	; () banked
 18945  004D04  6700               	tstfsz	_bHex& (0+255),b
 18946  004D06  D005               	goto	l11445
 18947                           
 18948                           ; BSR set to: 1
 18949  004D08  0E7C               	movlw	high STR_57
 18950  004D0A  0100               	movlb	0	; () banked
 18951  004D0C  6F9D               	movwf	(_printErrors$1415+1)& (0+255),b
 18952  004D0E  0EED               	movlw	low STR_57
 18953  004D10  D004               	goto	L19
 18954  004D12                     l11445:
 18955                           
 18956                           ; BSR set to: 1
 18957  004D12  0E7C               	movlw	high STR_56
 18958  004D14  0100               	movlb	0	; () banked
 18959  004D16  6F9D               	movwf	(_printErrors$1415+1)& (0+255),b
 18960  004D18  0E64               	movlw	low STR_56
 18961  004D1A                     L19:
 18962  004D1A  6F9C               	movwf	_printErrors$1415& (0+255),b
 18963                           
 18964                           ; BSR set to: 0
 18965  004D1C  0E01               	movlw	high _wrkbuf
 18966  004D1E  0100               	movlb	0	; () banked
 18967  004D20  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18968  004D22  0E54               	movlw	low _wrkbuf
 18969  004D24  6F76               	movwf	?_sprintf& (0+255),b
 18970  004D26  C09C  F078         	movff	_printErrors$1415,?_sprintf+2
 18971  004D2A  C09D  F079         	movff	_printErrors$1415+1,?_sprintf+3
 18972  004D2E  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18973  004D32  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18974  004D34  ECC8  F028         	call	_sprintf	;wreg free
 18975                           
 18976                           ; BSR set to: 0
 18977                           ;main.c: 2495: putsUSART(wrkbuf);
 18978  004D38  0E01               	movlw	high _wrkbuf
 18979  004D3A  0100               	movlb	0	; () banked
 18980  004D3C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18981  004D3E  0E54               	movlw	low _wrkbuf
 18982  004D40  6F61               	movwf	?_putsUSART& (0+255),b
 18983  004D42  EC6E  F00E         	call	_putsUSART	;wreg free
 18984                           
 18985                           ;main.c: 2496: putsUSART((char *) "\r\n");
 18986  004D46  0E71               	movlw	high (STR_197+50)
 18987  004D48  0100               	movlb	0	; () banked
 18988  004D4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18989  004D4C  0E8A               	movlw	low (STR_197+50)
 18990  004D4E  6F61               	movwf	?_putsUSART& (0+255),b
 18991  004D50  EC6E  F00E         	call	_putsUSART	;wreg free
 18992                           
 18993                           ;main.c: 2498: if (COMSTATbits.TXWARN) {
 18994  004D54  A474               	btfss	3956,2,c	;volatile
 18995  004D56  D007               	goto	l11457
 18996                           
 18997                           ;main.c: 2499: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18998  004D58  0E6F               	movlw	high STR_196
 18999  004D5A  0100               	movlb	0	; () banked
 19000  004D5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19001  004D5E  0E9C               	movlw	low STR_196
 19002  004D60  6F61               	movwf	?_putsUSART& (0+255),b
 19003  004D62  EC6E  F00E         	call	_putsUSART	;wreg free
 19004  004D66                     l11457:
 19005                           
 19006                           ;main.c: 2500: }
 19007                           ;main.c: 2502: if (COMSTATbits.TXBO) {
 19008  004D66  AA74               	btfss	3956,5,c	;volatile
 19009  004D68  D007               	goto	l11461
 19010                           
 19011                           ;main.c: 2503: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19012  004D6A  0E71               	movlw	high STR_197
 19013  004D6C  0100               	movlb	0	; () banked
 19014  004D6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19015  004D70  0E58               	movlw	low STR_197
 19016  004D72  6F61               	movwf	?_putsUSART& (0+255),b
 19017  004D74  EC6E  F00E         	call	_putsUSART	;wreg free
 19018  004D78                     l11461:
 19019                           
 19020                           ;main.c: 2504: }
 19021                           ;main.c: 2506: if (COMSTATbits.TXBP) {
 19022  004D78  A874               	btfss	3956,4,c	;volatile
 19023  004D7A  D007               	goto	l1157
 19024                           
 19025                           ;main.c: 2507: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19026  004D7C  0E6F               	movlw	high STR_198
 19027  004D7E  0100               	movlb	0	; () banked
 19028  004D80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19029  004D82  0ED6               	movlw	low STR_198
 19030  004D84  6F61               	movwf	?_putsUSART& (0+255),b
 19031  004D86  EC6E  F00E         	call	_putsUSART	;wreg free
 19032  004D8A                     l1157:
 19033                           
 19034                           ;main.c: 2508: }
 19035                           ;main.c: 2511: putsUSART((char *) "Receive Error Counter: ");
 19036  004D8A  0E79               	movlw	high STR_199
 19037  004D8C  0100               	movlb	0	; () banked
 19038  004D8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19039  004D90  0E78               	movlw	low STR_199
 19040  004D92  6F61               	movwf	?_putsUSART& (0+255),b
 19041  004D94  EC6E  F00E         	call	_putsUSART	;wreg free
 19042                           
 19043                           ;main.c: 2512: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19044  004D98  0101               	movlb	1	; () banked
 19045  004D9A  6700               	tstfsz	_bHex& (0+255),b
 19046  004D9C  D005               	goto	l11469
 19047                           
 19048                           ; BSR set to: 1
 19049  004D9E  0E7C               	movlw	high STR_57
 19050  004DA0  0100               	movlb	0	; () banked
 19051  004DA2  6F9F               	movwf	(_printErrors$1424+1)& (0+255),b
 19052  004DA4  0EED               	movlw	low STR_57
 19053  004DA6  D004               	goto	L20
 19054  004DA8                     l11469:
 19055                           
 19056                           ; BSR set to: 1
 19057  004DA8  0E7C               	movlw	high STR_56
 19058  004DAA  0100               	movlb	0	; () banked
 19059  004DAC  6F9F               	movwf	(_printErrors$1424+1)& (0+255),b
 19060  004DAE  0E64               	movlw	low STR_56
 19061  004DB0                     L20:
 19062  004DB0  6F9E               	movwf	_printErrors$1424& (0+255),b
 19063                           
 19064                           ; BSR set to: 0
 19065  004DB2  0E01               	movlw	high _wrkbuf
 19066  004DB4  0100               	movlb	0	; () banked
 19067  004DB6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19068  004DB8  0E54               	movlw	low _wrkbuf
 19069  004DBA  6F76               	movwf	?_sprintf& (0+255),b
 19070  004DBC  C09E  F078         	movff	_printErrors$1424,?_sprintf+2
 19071  004DC0  C09F  F079         	movff	_printErrors$1424+1,?_sprintf+3
 19072  004DC4  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19073  004DC8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19074  004DCA  ECC8  F028         	call	_sprintf	;wreg free
 19075                           
 19076                           ; BSR set to: 0
 19077                           ;main.c: 2513: putsUSART(wrkbuf);
 19078  004DCE  0E01               	movlw	high _wrkbuf
 19079  004DD0  0100               	movlb	0	; () banked
 19080  004DD2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19081  004DD4  0E54               	movlw	low _wrkbuf
 19082  004DD6  6F61               	movwf	?_putsUSART& (0+255),b
 19083  004DD8  EC6E  F00E         	call	_putsUSART	;wreg free
 19084                           
 19085                           ;main.c: 2514: putsUSART((char *) "\r\n");
 19086  004DDC  0E71               	movlw	high (STR_197+50)
 19087  004DDE  0100               	movlb	0	; () banked
 19088  004DE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19089  004DE2  0E8A               	movlw	low (STR_197+50)
 19090  004DE4  6F61               	movwf	?_putsUSART& (0+255),b
 19091  004DE6  EC6E  F00E         	call	_putsUSART	;wreg free
 19092                           
 19093                           ;main.c: 2516: if (COMSTATbits.RXWARN) {
 19094  004DEA  A274               	btfss	3956,1,c	;volatile
 19095  004DEC  D007               	goto	l11481
 19096                           
 19097                           ;main.c: 2517: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19098  004DEE  0E70               	movlw	high STR_203
 19099  004DF0  0100               	movlb	0	; () banked
 19100  004DF2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19101  004DF4  0E47               	movlw	low STR_203
 19102  004DF6  6F61               	movwf	?_putsUSART& (0+255),b
 19103  004DF8  EC6E  F00E         	call	_putsUSART	;wreg free
 19104  004DFC                     l11481:
 19105                           
 19106                           ;main.c: 2518: }
 19107                           ;main.c: 2520: if (COMSTATbits.RXBP) {
 19108  004DFC  A674               	btfss	3956,3,c	;volatile
 19109  004DFE  D007               	goto	l11485
 19110                           
 19111                           ;main.c: 2521: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19112  004E00  0E70               	movlw	high STR_204
 19113  004E02  0100               	movlb	0	; () banked
 19114  004E04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19115  004E06  0EEC               	movlw	low STR_204
 19116  004E08  6F61               	movwf	?_putsUSART& (0+255),b
 19117  004E0A  EC6E  F00E         	call	_putsUSART	;wreg free
 19118  004E0E                     l11485:
 19119                           
 19120                           ;main.c: 2522: }
 19121                           ;main.c: 2524: if (COMSTATbits.EWARN) {
 19122  004E0E  A074               	btfss	3956,0,c	;volatile
 19123  004E10  D007               	goto	l1165
 19124                           
 19125                           ;main.c: 2525: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19126  004E12  0E71               	movlw	high STR_205
 19127  004E14  0100               	movlb	0	; () banked
 19128  004E16  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19129  004E18  0EC2               	movlw	low STR_205
 19130  004E1A  6F61               	movwf	?_putsUSART& (0+255),b
 19131  004E1C  EC6E  F00E         	call	_putsUSART	;wreg free
 19132  004E20                     l1165:
 19133  004E20  0012               	return	
 19134  004E22                     __end_of_printErrors:
 19135                           	opt stack 0
 19136                           tblptru	equ	0xFF8
 19137                           tblptrh	equ	0xFF7
 19138                           tblptrl	equ	0xFF6
 19139                           tablat	equ	0xFF5
 19140                           prodh	equ	0xFF4
 19141                           prodl	equ	0xFF3
 19142                           intcon	equ	0xFF2
 19143                           indf0	equ	0xFEF
 19144                           postinc0	equ	0xFEE
 19145                           fsr0h	equ	0xFEA
 19146                           fsr0l	equ	0xFE9
 19147                           wreg	equ	0xFE8
 19148                           indf1	equ	0xFE7
 19149                           postinc1	equ	0xFE6
 19150                           postdec1	equ	0xFE5
 19151                           fsr1h	equ	0xFE2
 19152                           fsr1l	equ	0xFE1
 19153                           indf2	equ	0xFDF
 19154                           postinc2	equ	0xFDE
 19155                           postdec2	equ	0xFDD
 19156                           plusw2	equ	0xFDB
 19157                           fsr2h	equ	0xFDA
 19158                           fsr2l	equ	0xFD9
 19159                           status	equ	0xFD8
 19160                           
 19161 ;; *************** function _printStatistics *****************
 19162 ;; Defined at:
 19163 ;;		line 2445 in file "main.c"
 19164 ;; Parameters:    Size  Location     Type
 19165 ;;		None
 19166 ;; Auto vars:     Size  Location     Type
 19167 ;;		None
 19168 ;; Return value:  Size  Location     Type
 19169 ;;		None               void
 19170 ;; Registers used:
 19171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19172 ;; Tracked objects:
 19173 ;;		On entry : F/1
 19174 ;;		On exit  : 0/0
 19175 ;;		Unchanged: 0/0
 19176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19177 ;;      Params:         0       0       0       0       0       0       0
 19178 ;;      Locals:         0       8       0       0       0       0       0
 19179 ;;      Temps:          0       0       0       0       0       0       0
 19180 ;;      Totals:         0       8       0       0       0       0       0
 19181 ;;Total ram usage:        8 bytes
 19182 ;; Hardware stack levels used:    1
 19183 ;; Hardware stack levels required when called:    5
 19184 ;; This function calls:
 19185 ;;		_putsUSART
 19186 ;;		_sprintf
 19187 ;; This function is called by:
 19188 ;;		_doModeVerbose
 19189 ;; This function uses a non-reentrant model
 19190 ;;
 19191                           
 19192                           	psect	text41
 19193  003F82                     __ptext41:
 19194                           	opt stack 0
 19195  003F82                     _printStatistics:
 19196                           	opt stack 23
 19197                           
 19198                           ; BSR set to: 1
 19199                           ;main.c: 2446: putsUSART((char *) "Sent CAN frames: ");
 19200                           
 19201                           ;incstack = 0
 19202                           ;incstack = 0
 19203  003F82  0E7B               	movlw	high STR_160
 19204  003F84  0100               	movlb	0	; () banked
 19205  003F86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19206  003F88  0E09               	movlw	low STR_160
 19207  003F8A  6F61               	movwf	?_putsUSART& (0+255),b
 19208  003F8C  EC6E  F00E         	call	_putsUSART	;wreg free
 19209                           
 19210                           ;main.c: 2447: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19211  003F90  0101               	movlb	1	; () banked
 19212  003F92  6700               	tstfsz	_bHex& (0+255),b
 19213  003F94  D005               	goto	l11333
 19214                           
 19215                           ; BSR set to: 1
 19216  003F96  0E7C               	movlw	high STR_162
 19217  003F98  0100               	movlb	0	; () banked
 19218  003F9A  6F95               	movwf	(_printStatistics$1366+1)& (0+255),b
 19219  003F9C  0EE0               	movlw	low STR_162
 19220  003F9E  D004               	goto	L21
 19221  003FA0                     l11333:
 19222                           
 19223                           ; BSR set to: 1
 19224  003FA0  0E7C               	movlw	high STR_161
 19225  003FA2  0100               	movlb	0	; () banked
 19226  003FA4  6F95               	movwf	(_printStatistics$1366+1)& (0+255),b
 19227  003FA6  0E72               	movlw	low STR_161
 19228  003FA8                     L21:
 19229  003FA8  6F94               	movwf	_printStatistics$1366& (0+255),b
 19230                           
 19231                           ; BSR set to: 0
 19232  003FAA  0E01               	movlw	high _wrkbuf
 19233  003FAC  0100               	movlb	0	; () banked
 19234  003FAE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19235  003FB0  0E54               	movlw	low _wrkbuf
 19236  003FB2  6F76               	movwf	?_sprintf& (0+255),b
 19237  003FB4  C094  F078         	movff	_printStatistics$1366,?_sprintf+2
 19238  003FB8  C095  F079         	movff	_printStatistics$1366+1,?_sprintf+3
 19239  003FBC  C0E1  F07A         	movff	_cntTxFrames,?_sprintf+4
 19240  003FC0  C0E2  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19241  003FC4  C0E3  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19242  003FC8  C0E4  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19243  003FCC  ECC8  F028         	call	_sprintf	;wreg free
 19244                           
 19245                           ; BSR set to: 0
 19246                           ;main.c: 2448: putsUSART(wrkbuf);
 19247  003FD0  0E01               	movlw	high _wrkbuf
 19248  003FD2  0100               	movlb	0	; () banked
 19249  003FD4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19250  003FD6  0E54               	movlw	low _wrkbuf
 19251  003FD8  6F61               	movwf	?_putsUSART& (0+255),b
 19252  003FDA  EC6E  F00E         	call	_putsUSART	;wreg free
 19253                           
 19254                           ;main.c: 2449: putsUSART((char *) "\r\n");
 19255  003FDE  0E71               	movlw	high (STR_197+50)
 19256  003FE0  0100               	movlb	0	; () banked
 19257  003FE2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19258  003FE4  0E8A               	movlw	low (STR_197+50)
 19259  003FE6  6F61               	movwf	?_putsUSART& (0+255),b
 19260  003FE8  EC6E  F00E         	call	_putsUSART	;wreg free
 19261                           
 19262                           ;main.c: 2451: putsUSART((char *) "Sent CAN bytes: ");
 19263  003FEC  0E7B               	movlw	high STR_164
 19264  003FEE  0100               	movlb	0	; () banked
 19265  003FF0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19266  003FF2  0E3D               	movlw	low STR_164
 19267  003FF4  6F61               	movwf	?_putsUSART& (0+255),b
 19268  003FF6  EC6E  F00E         	call	_putsUSART	;wreg free
 19269                           
 19270                           ;main.c: 2452: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19271  003FFA  0101               	movlb	1	; () banked
 19272  003FFC  6700               	tstfsz	_bHex& (0+255),b
 19273  003FFE  D005               	goto	l11347
 19274                           
 19275                           ; BSR set to: 1
 19276  004000  0E7C               	movlw	high STR_162
 19277  004002  0100               	movlb	0	; () banked
 19278  004004  6F97               	movwf	(_printStatistics$1372+1)& (0+255),b
 19279  004006  0EE0               	movlw	low STR_162
 19280  004008  D004               	goto	L22
 19281  00400A                     l11347:
 19282                           
 19283                           ; BSR set to: 1
 19284  00400A  0E7C               	movlw	high STR_161
 19285  00400C  0100               	movlb	0	; () banked
 19286  00400E  6F97               	movwf	(_printStatistics$1372+1)& (0+255),b
 19287  004010  0E72               	movlw	low STR_161
 19288  004012                     L22:
 19289  004012  6F96               	movwf	_printStatistics$1372& (0+255),b
 19290                           
 19291                           ; BSR set to: 0
 19292  004014  0E01               	movlw	high _wrkbuf
 19293  004016  0100               	movlb	0	; () banked
 19294  004018  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19295  00401A  0E54               	movlw	low _wrkbuf
 19296  00401C  6F76               	movwf	?_sprintf& (0+255),b
 19297  00401E  C096  F078         	movff	_printStatistics$1372,?_sprintf+2
 19298  004022  C097  F079         	movff	_printStatistics$1372+1,?_sprintf+3
 19299  004026  C0DD  F07A         	movff	_cntTxBytes,?_sprintf+4
 19300  00402A  C0DE  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19301  00402E  C0DF  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19302  004032  C0E0  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19303  004036  ECC8  F028         	call	_sprintf	;wreg free
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;main.c: 2453: putsUSART(wrkbuf);
 19307  00403A  0E01               	movlw	high _wrkbuf
 19308  00403C  0100               	movlb	0	; () banked
 19309  00403E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19310  004040  0E54               	movlw	low _wrkbuf
 19311  004042  6F61               	movwf	?_putsUSART& (0+255),b
 19312  004044  EC6E  F00E         	call	_putsUSART	;wreg free
 19313                           
 19314                           ;main.c: 2454: putsUSART((char *) "\r\n");
 19315  004048  0E71               	movlw	high (STR_197+50)
 19316  00404A  0100               	movlb	0	; () banked
 19317  00404C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19318  00404E  0E8A               	movlw	low (STR_197+50)
 19319  004050  6F61               	movwf	?_putsUSART& (0+255),b
 19320  004052  EC6E  F00E         	call	_putsUSART	;wreg free
 19321                           
 19322                           ;main.c: 2456: putsUSART((char *) "Received CAN frames: ");
 19323  004056  0E7A               	movlw	high STR_168
 19324  004058  0100               	movlb	0	; () banked
 19325  00405A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19326  00405C  0E1B               	movlw	low STR_168
 19327  00405E  6F61               	movwf	?_putsUSART& (0+255),b
 19328  004060  EC6E  F00E         	call	_putsUSART	;wreg free
 19329                           
 19330                           ;main.c: 2457: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19331  004064  0101               	movlb	1	; () banked
 19332  004066  6700               	tstfsz	_bHex& (0+255),b
 19333  004068  D005               	goto	l11361
 19334                           
 19335                           ; BSR set to: 1
 19336  00406A  0E7C               	movlw	high STR_162
 19337  00406C  0100               	movlb	0	; () banked
 19338  00406E  6F99               	movwf	(_printStatistics$1378+1)& (0+255),b
 19339  004070  0EE0               	movlw	low STR_162
 19340  004072  D004               	goto	L23
 19341  004074                     l11361:
 19342                           
 19343                           ; BSR set to: 1
 19344  004074  0E7C               	movlw	high STR_161
 19345  004076  0100               	movlb	0	; () banked
 19346  004078  6F99               	movwf	(_printStatistics$1378+1)& (0+255),b
 19347  00407A  0E72               	movlw	low STR_161
 19348  00407C                     L23:
 19349  00407C  6F98               	movwf	_printStatistics$1378& (0+255),b
 19350                           
 19351                           ; BSR set to: 0
 19352  00407E  0E01               	movlw	high _wrkbuf
 19353  004080  0100               	movlb	0	; () banked
 19354  004082  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19355  004084  0E54               	movlw	low _wrkbuf
 19356  004086  6F76               	movwf	?_sprintf& (0+255),b
 19357  004088  C098  F078         	movff	_printStatistics$1378,?_sprintf+2
 19358  00408C  C099  F079         	movff	_printStatistics$1378+1,?_sprintf+3
 19359  004090  C0D9  F07A         	movff	_cntRxFrames,?_sprintf+4
 19360  004094  C0DA  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19361  004098  C0DB  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19362  00409C  C0DC  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19363  0040A0  ECC8  F028         	call	_sprintf	;wreg free
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;main.c: 2458: putsUSART(wrkbuf);
 19367  0040A4  0E01               	movlw	high _wrkbuf
 19368  0040A6  0100               	movlb	0	; () banked
 19369  0040A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19370  0040AA  0E54               	movlw	low _wrkbuf
 19371  0040AC  6F61               	movwf	?_putsUSART& (0+255),b
 19372  0040AE  EC6E  F00E         	call	_putsUSART	;wreg free
 19373                           
 19374                           ;main.c: 2459: putsUSART((char *) "\r\n");
 19375  0040B2  0E71               	movlw	high (STR_197+50)
 19376  0040B4  0100               	movlb	0	; () banked
 19377  0040B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19378  0040B8  0E8A               	movlw	low (STR_197+50)
 19379  0040BA  6F61               	movwf	?_putsUSART& (0+255),b
 19380  0040BC  EC6E  F00E         	call	_putsUSART	;wreg free
 19381                           
 19382                           ;main.c: 2461: putsUSART((char *) "Received CAN bytes: ");
 19383  0040C0  0E7A               	movlw	high STR_172
 19384  0040C2  0100               	movlb	0	; () banked
 19385  0040C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19386  0040C6  0E31               	movlw	low STR_172
 19387  0040C8  6F61               	movwf	?_putsUSART& (0+255),b
 19388  0040CA  EC6E  F00E         	call	_putsUSART	;wreg free
 19389                           
 19390                           ;main.c: 2462: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19391  0040CE  0101               	movlb	1	; () banked
 19392  0040D0  6700               	tstfsz	_bHex& (0+255),b
 19393  0040D2  D005               	goto	l11375
 19394                           
 19395                           ; BSR set to: 1
 19396  0040D4  0E7C               	movlw	high STR_162
 19397  0040D6  0100               	movlb	0	; () banked
 19398  0040D8  6F9B               	movwf	(_printStatistics$1384+1)& (0+255),b
 19399  0040DA  0EE0               	movlw	low STR_162
 19400  0040DC  D004               	goto	L24
 19401  0040DE                     l11375:
 19402                           
 19403                           ; BSR set to: 1
 19404  0040DE  0E7C               	movlw	high STR_161
 19405  0040E0  0100               	movlb	0	; () banked
 19406  0040E2  6F9B               	movwf	(_printStatistics$1384+1)& (0+255),b
 19407  0040E4  0E72               	movlw	low STR_161
 19408  0040E6                     L24:
 19409  0040E6  6F9A               	movwf	_printStatistics$1384& (0+255),b
 19410                           
 19411                           ; BSR set to: 0
 19412  0040E8  0E01               	movlw	high _wrkbuf
 19413  0040EA  0100               	movlb	0	; () banked
 19414  0040EC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19415  0040EE  0E54               	movlw	low _wrkbuf
 19416  0040F0  6F76               	movwf	?_sprintf& (0+255),b
 19417  0040F2  C09A  F078         	movff	_printStatistics$1384,?_sprintf+2
 19418  0040F6  C09B  F079         	movff	_printStatistics$1384+1,?_sprintf+3
 19419  0040FA  C0D5  F07A         	movff	_cntRxBytes,?_sprintf+4
 19420  0040FE  C0D6  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19421  004102  C0D7  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19422  004106  C0D8  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19423  00410A  ECC8  F028         	call	_sprintf	;wreg free
 19424                           
 19425                           ; BSR set to: 0
 19426                           ;main.c: 2463: putsUSART(wrkbuf);
 19427  00410E  0E01               	movlw	high _wrkbuf
 19428  004110  0100               	movlb	0	; () banked
 19429  004112  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19430  004114  0E54               	movlw	low _wrkbuf
 19431  004116  6F61               	movwf	?_putsUSART& (0+255),b
 19432  004118  EC6E  F00E         	call	_putsUSART	;wreg free
 19433                           
 19434                           ;main.c: 2464: putsUSART((char *) "\r\n");
 19435  00411C  0E71               	movlw	high (STR_197+50)
 19436  00411E  0100               	movlb	0	; () banked
 19437  004120  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19438  004122  0E8A               	movlw	low (STR_197+50)
 19439  004124  6F61               	movwf	?_putsUSART& (0+255),b
 19440  004126  EF6E  F00E         	goto	_putsUSART	;wreg free
 19441  00412A                     __end_of_printStatistics:
 19442                           	opt stack 0
 19443                           tblptru	equ	0xFF8
 19444                           tblptrh	equ	0xFF7
 19445                           tblptrl	equ	0xFF6
 19446                           tablat	equ	0xFF5
 19447                           prodh	equ	0xFF4
 19448                           prodl	equ	0xFF3
 19449                           intcon	equ	0xFF2
 19450                           indf0	equ	0xFEF
 19451                           postinc0	equ	0xFEE
 19452                           fsr0h	equ	0xFEA
 19453                           fsr0l	equ	0xFE9
 19454                           wreg	equ	0xFE8
 19455                           indf1	equ	0xFE7
 19456                           postinc1	equ	0xFE6
 19457                           postdec1	equ	0xFE5
 19458                           fsr1h	equ	0xFE2
 19459                           fsr1l	equ	0xFE1
 19460                           indf2	equ	0xFDF
 19461                           postinc2	equ	0xFDE
 19462                           postdec2	equ	0xFDD
 19463                           plusw2	equ	0xFDB
 19464                           fsr2h	equ	0xFDA
 19465                           fsr2l	equ	0xFD9
 19466                           status	equ	0xFD8
 19467                           
 19468 ;; *************** function _atoi *****************
 19469 ;; Defined at:
 19470 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19471 ;; Parameters:    Size  Location     Type
 19472 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19473 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19474 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19475 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19476 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19477 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19478 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19479 ;; Auto vars:     Size  Location     Type
 19480 ;;  a               2   11[BANK0 ] int 
 19481 ;;  sign            1   10[BANK0 ] unsigned char 
 19482 ;; Return value:  Size  Location     Type
 19483 ;;                  2    6[BANK0 ] int 
 19484 ;; Registers used:
 19485 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19486 ;; Tracked objects:
 19487 ;;		On entry : C/2
 19488 ;;		On exit  : F/0
 19489 ;;		Unchanged: 0/0
 19490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19491 ;;      Params:         0       2       0       0       0       0       0
 19492 ;;      Locals:         0       3       0       0       0       0       0
 19493 ;;      Temps:          0       2       0       0       0       0       0
 19494 ;;      Totals:         0       7       0       0       0       0       0
 19495 ;;Total ram usage:        7 bytes
 19496 ;; Hardware stack levels used:    1
 19497 ;; Hardware stack levels required when called:    4
 19498 ;; This function calls:
 19499 ;;		_isdigit
 19500 ;;		___wmul
 19501 ;; This function is called by:
 19502 ;;		_doModeVerbose
 19503 ;; This function uses a non-reentrant model
 19504 ;;
 19505                           
 19506                           	psect	text42
 19507  00330E                     __ptext42:
 19508                           	opt stack 0
 19509  00330E                     _atoi:
 19510                           	opt stack 24
 19511                           
 19512                           ;incstack = 0
 19513                           ;incstack = 0
 19514  00330E  D003               	goto	l11285
 19515  003310                     l11283:
 19516  003310  0100               	movlb	0	; () banked
 19517  003312  4B66               	infsnz	atoi@s& (0+255),f,b
 19518  003314  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19519  003316                     l11285:
 19520  003316  0100               	movlb	0	; () banked
 19521  003318  D876               	call	PL22	;call to abstracted procedure
 19522  00331A  64EA               	cpfsgt	fsr0h,c
 19523  00331C  D003               	bra	u13977
 19524  00331E  6EEA               	movwf	fsr0h,c
 19525  003320  50EF               	movf	indf0,w,c
 19526  003322  D003               	bra	u13970
 19527  003324                     u13977:
 19528  003324  6EF7               	movwf	tblptrh,c
 19529  003326  0008               	tblrd		*
 19530  003328  50F5               	movf	tablat,w,c
 19531  00332A                     u13970:
 19532  00332A  0A20               	xorlw	32
 19533  00332C  E0F1               	bz	l11283
 19534  00332E  0100               	movlb	0	; () banked
 19535  003330  D86A               	call	PL22	;call to abstracted procedure
 19536  003332  64EA               	cpfsgt	fsr0h,c
 19537  003334  D003               	bra	u13997
 19538  003336  6EEA               	movwf	fsr0h,c
 19539  003338  50EF               	movf	indf0,w,c
 19540  00333A  D003               	bra	u13990
 19541  00333C                     u13997:
 19542  00333C  6EF7               	movwf	tblptrh,c
 19543  00333E  0008               	tblrd		*
 19544  003340  50F5               	movf	tablat,w,c
 19545  003342                     u13990:
 19546  003342  0A09               	xorlw	9
 19547  003344  E0E5               	bz	l11283
 19548  003346  0100               	movlb	0	; () banked
 19549  003348  6B6B               	clrf	atoi@a& (0+255),b
 19550  00334A  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19551  00334C  6B6A               	clrf	atoi@sign& (0+255),b
 19552                           
 19553                           ; BSR set to: 0
 19554  00334E  D85B               	call	PL22	;call to abstracted procedure
 19555  003350  64EA               	cpfsgt	fsr0h,c
 19556  003352  D003               	bra	u14017
 19557  003354  6EEA               	movwf	fsr0h,c
 19558  003356  50EF               	movf	indf0,w,c
 19559  003358  D003               	bra	u14010
 19560  00335A                     u14017:
 19561  00335A  6EF7               	movwf	tblptrh,c
 19562  00335C  0008               	tblrd		*
 19563  00335E  50F5               	movf	tablat,w,c
 19564  003360                     u14010:
 19565  003360  0A2D               	xorlw	45
 19566  003362  E103               	bnz	l11293
 19567  003364  0100               	movlb	0	; () banked
 19568  003366  2B6A               	incf	atoi@sign& (0+255),f,b
 19569  003368  D00D               	goto	L25
 19570  00336A                     l11293:
 19571  00336A  0100               	movlb	0	; () banked
 19572  00336C  D84C               	call	PL22	;call to abstracted procedure
 19573  00336E  64EA               	cpfsgt	fsr0h,c
 19574  003370  D003               	bra	u14037
 19575  003372  6EEA               	movwf	fsr0h,c
 19576  003374  50EF               	movf	indf0,w,c
 19577  003376  D003               	bra	u14030
 19578  003378                     u14037:
 19579  003378  6EF7               	movwf	tblptrh,c
 19580  00337A  0008               	tblrd		*
 19581  00337C  50F5               	movf	tablat,w,c
 19582  00337E                     u14030:
 19583  00337E  0A2B               	xorlw	43
 19584  003380  E121               	bnz	l11301
 19585  003382                     l11295:
 19586  003382  0100               	movlb	0	; () banked
 19587  003384                     L25:
 19588  003384  4B66               	infsnz	atoi@s& (0+255),f,b
 19589  003386  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19590  003388  D01D               	goto	l11301
 19591  00338A                     l11297:
 19592                           
 19593                           ; BSR set to: 0
 19594  00338A  C06B  F060         	movff	atoi@a,?___wmul
 19595  00338E  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19596  003392  6B63               	clrf	(?___wmul+3)& (0+255),b
 19597  003394  0E0A               	movlw	10
 19598  003396  6F62               	movwf	(?___wmul+2)& (0+255),b
 19599  003398  EC6A  F00C         	call	___wmul	;wreg free
 19600  00339C  D834               	call	PL22	;call to abstracted procedure
 19601  00339E  64EA               	cpfsgt	fsr0h,c
 19602  0033A0  D003               	bra	u14057
 19603  0033A2  6EEA               	movwf	fsr0h,c
 19604  0033A4  50EF               	movf	indf0,w,c
 19605  0033A6  D003               	bra	u14050
 19606  0033A8                     u14057:
 19607  0033A8  6EF7               	movwf	tblptrh,c
 19608  0033AA  0008               	tblrd		*
 19609  0033AC  50F5               	movf	tablat,w,c
 19610  0033AE                     u14050:
 19611  0033AE  0100               	movlb	0	; () banked
 19612  0033B0  2760               	addwf	?___wmul& (0+255),f,b
 19613  0033B2  0E00               	movlw	0
 19614  0033B4  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19615  0033B6  0ED0               	movlw	208
 19616  0033B8  2560               	addwf	?___wmul& (0+255),w,b
 19617  0033BA  6F6B               	movwf	atoi@a& (0+255),b
 19618  0033BC  0EFF               	movlw	255
 19619  0033BE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19620  0033C0  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19621  0033C2  D7DF               	goto	l11295
 19622  0033C4                     l11301:
 19623  0033C4  0100               	movlb	0	; () banked
 19624  0033C6  D81F               	call	PL22	;call to abstracted procedure
 19625  0033C8  64EA               	cpfsgt	fsr0h,c
 19626  0033CA  D003               	bra	u14067
 19627  0033CC  6EEA               	movwf	fsr0h,c
 19628  0033CE  50EF               	movf	indf0,w,c
 19629  0033D0  D003               	bra	u14060
 19630  0033D2                     u14067:
 19631  0033D2  6EF7               	movwf	tblptrh,c
 19632  0033D4  0008               	tblrd		*
 19633  0033D6  50F5               	movf	tablat,w,c
 19634  0033D8                     u14060:
 19635  0033D8  EC01  F00C         	call	_isdigit
 19636  0033DC  E2D6               	bc	l11297
 19637                           
 19638                           ; BSR set to: 0
 19639  0033DE  516A               	movf	atoi@sign& (0+255),w,b
 19640  0033E0  E00D               	bz	l2027
 19641                           
 19642                           ; BSR set to: 0
 19643  0033E2  C06B  F068         	movff	atoi@a,??_atoi
 19644  0033E6  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19645  0033EA  1F68               	comf	??_atoi& (0+255),f,b
 19646  0033EC  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19647  0033EE  4B68               	infsnz	??_atoi& (0+255),f,b
 19648  0033F0  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19649  0033F2  C068  F066         	movff	??_atoi,?_atoi
 19650  0033F6  C069  F067         	movff	??_atoi+1,?_atoi+1
 19651  0033FA  D004               	goto	l2028
 19652  0033FC                     l2027:
 19653                           
 19654                           ; BSR set to: 0
 19655  0033FC  C06B  F066         	movff	atoi@a,?_atoi
 19656  003400  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19657  003404                     l2028:
 19658                           
 19659                           ; BSR set to: 0
 19660  003404  0012               	return	
 19661  003406                     __end_of_atoi:
 19662                           	opt stack 0
 19663  003406                     PL22:
 19664                           	opt stack 24
 19665  003406  5166               	movf	atoi@s& (0+255),w,b
 19666  003408  6EF6               	movwf	tblptrl,c
 19667  00340A  6EE9               	movwf	fsr0l,c
 19668  00340C  0E05               	movlw	(high __ramtop+-1)
 19669  00340E  6EEA               	movwf	fsr0h,c
 19670  003410  5167               	movf	(atoi@s+1)& (0+255),w,b
 19671  003412  0012               	return	
 19672  003414                     __end_ofPL22:
 19673                           	opt stack 0
 19674                           tblptru	equ	0xFF8
 19675                           tblptrh	equ	0xFF7
 19676                           tblptrl	equ	0xFF6
 19677                           tablat	equ	0xFF5
 19678                           prodh	equ	0xFF4
 19679                           prodl	equ	0xFF3
 19680                           intcon	equ	0xFF2
 19681                           indf0	equ	0xFEF
 19682                           postinc0	equ	0xFEE
 19683                           fsr0h	equ	0xFEA
 19684                           fsr0l	equ	0xFE9
 19685                           wreg	equ	0xFE8
 19686                           indf1	equ	0xFE7
 19687                           postinc1	equ	0xFE6
 19688                           postdec1	equ	0xFE5
 19689                           fsr1h	equ	0xFE2
 19690                           fsr1l	equ	0xFE1
 19691                           indf2	equ	0xFDF
 19692                           postinc2	equ	0xFDE
 19693                           postdec2	equ	0xFDD
 19694                           plusw2	equ	0xFDB
 19695                           fsr2h	equ	0xFDA
 19696                           fsr2l	equ	0xFD9
 19697                           status	equ	0xFD8
 19698                           
 19699 ;; *************** function _strtok *****************
 19700 ;; Defined at:
 19701 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19702 ;; Parameters:    Size  Location     Type
 19703 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19704 ;;		 -> NULL(0), cmdbuf(80), 
 19705 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19706 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19707 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19708 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19709 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19710 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19711 ;;		 -> STR_31(2), STR_30(2), 
 19712 ;; Auto vars:     Size  Location     Type
 19713 ;;		None
 19714 ;; Return value:  Size  Location     Type
 19715 ;;                  2   12[BANK0 ] PTR unsigned char 
 19716 ;; Registers used:
 19717 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19718 ;; Tracked objects:
 19719 ;;		On entry : F/0
 19720 ;;		On exit  : F/0
 19721 ;;		Unchanged: 0/0
 19722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19723 ;;      Params:         0       4       0       0       0       0       0
 19724 ;;      Locals:         0       0       0       0       0       0       0
 19725 ;;      Temps:          0       0       0       0       0       0       0
 19726 ;;      Totals:         0       4       0       0       0       0       0
 19727 ;;Total ram usage:        4 bytes
 19728 ;; Hardware stack levels used:    1
 19729 ;; Hardware stack levels required when called:    5
 19730 ;; This function calls:
 19731 ;;		_strspn
 19732 ;;		_strcspn
 19733 ;; This function is called by:
 19734 ;;		_doModeVerbose
 19735 ;; This function uses a non-reentrant model
 19736 ;;
 19737                           
 19738                           	psect	text43
 19739  0024AE                     __ptext43:
 19740                           	opt stack 0
 19741  0024AE                     _strtok:
 19742                           	opt stack 23
 19743                           
 19744                           ; BSR set to: 0
 19745                           
 19746                           ; BSR set to: 0
 19747                           ;incstack = 0
 19748                           ;incstack = 0
 19749  0024AE  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19750  0024B0  116C               	iorwf	strtok@s1& (0+255),w,b
 19751  0024B2  E104               	bnz	l11263
 19752                           
 19753                           ; BSR set to: 0
 19754  0024B4  C011  F06C         	movff	strtok@sp,strtok@s1
 19755  0024B8  C012  F06D         	movff	strtok@sp+1,strtok@s1+1
 19756  0024BC                     l11263:
 19757                           
 19758                           ; BSR set to: 0
 19759  0024BC  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19760  0024BE  116C               	iorwf	strtok@s1& (0+255),w,b
 19761  0024C0  E016               	bz	L26
 19762                           
 19763                           ; BSR set to: 0
 19764                           
 19765                           ; BSR set to: 0
 19766  0024C2  C06C  F066         	movff	strtok@s1,?_strspn
 19767  0024C6  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19768  0024CA  C06E  F068         	movff	strtok@s2,?_strspn+2
 19769  0024CE  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19770  0024D2  EC94  F00D         	call	_strspn	;wreg free
 19771  0024D6  5166               	movf	?_strspn& (0+255),w,b
 19772  0024D8  276C               	addwf	strtok@s1& (0+255),f,b
 19773  0024DA  5167               	movf	(?_strspn+1)& (0+255),w,b
 19774  0024DC  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19775                           
 19776                           ; BSR set to: 0
 19777  0024DE  C06C  FFD9         	movff	strtok@s1,fsr2l
 19778  0024E2  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19779  0024E6  50DF               	movf	indf2,w,c
 19780  0024E8  E105               	bnz	l11273
 19781                           
 19782                           ; BSR set to: 0
 19783  0024EA  6A11               	clrf	strtok@sp,c
 19784  0024EC  6A12               	clrf	strtok@sp+1,c
 19785  0024EE                     L26:
 19786  0024EE  6B6C               	clrf	?_strtok& (0+255),b
 19787  0024F0  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19788  0024F2  D025               	goto	l2520
 19789  0024F4                     l11273:
 19790                           
 19791                           ; BSR set to: 0
 19792  0024F4  C06C  F066         	movff	strtok@s1,?_strcspn
 19793  0024F8  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19794  0024FC  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19795  002500  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19796  002504  ECB6  F00D         	call	_strcspn	;wreg free
 19797  002508  5166               	movf	?_strcspn& (0+255),w,b
 19798  00250A  256C               	addwf	strtok@s1& (0+255),w,b
 19799  00250C  6E11               	movwf	strtok@sp,c
 19800  00250E  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19801  002510  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19802  002512  6E12               	movwf	strtok@sp+1,c
 19803                           
 19804                           ; BSR set to: 0
 19805  002514  C011  FFD9         	movff	strtok@sp,fsr2l
 19806  002518  C012  FFDA         	movff	strtok@sp+1,fsr2h
 19807  00251C  50DF               	movf	indf2,w,c
 19808  00251E  E009               	bz	l2522
 19809                           
 19810                           ; BSR set to: 0
 19811  002520  C011  FFD9         	movff	strtok@sp,fsr2l
 19812  002524  C012  FFDA         	movff	strtok@sp+1,fsr2h
 19813  002528  0E00               	movlw	0
 19814  00252A  6EDF               	movwf	indf2,c
 19815                           
 19816                           ; BSR set to: 0
 19817  00252C  4A11               	infsnz	strtok@sp,f,c
 19818  00252E  2A12               	incf	strtok@sp+1,f,c
 19819  002530  D002               	goto	l2523
 19820  002532                     l2522:
 19821                           
 19822                           ; BSR set to: 0
 19823  002532  6A11               	clrf	strtok@sp,c
 19824  002534  6A12               	clrf	strtok@sp+1,c
 19825  002536                     l2523:
 19826                           
 19827                           ; BSR set to: 0
 19828  002536  C06C  F06C         	movff	strtok@s1,?_strtok
 19829  00253A  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19830  00253E                     l2520:
 19831                           
 19832                           ; BSR set to: 0
 19833  00253E  0012               	return	
 19834  002540                     __end_of_strtok:
 19835                           	opt stack 0
 19836                           tblptru	equ	0xFF8
 19837                           tblptrh	equ	0xFF7
 19838                           tblptrl	equ	0xFF6
 19839                           tablat	equ	0xFF5
 19840                           prodh	equ	0xFF4
 19841                           prodl	equ	0xFF3
 19842                           intcon	equ	0xFF2
 19843                           indf0	equ	0xFEF
 19844                           postinc0	equ	0xFEE
 19845                           fsr0h	equ	0xFEA
 19846                           fsr0l	equ	0xFE9
 19847                           wreg	equ	0xFE8
 19848                           indf1	equ	0xFE7
 19849                           postinc1	equ	0xFE6
 19850                           postdec1	equ	0xFE5
 19851                           fsr1h	equ	0xFE2
 19852                           fsr1l	equ	0xFE1
 19853                           indf2	equ	0xFDF
 19854                           postinc2	equ	0xFDE
 19855                           postdec2	equ	0xFDD
 19856                           plusw2	equ	0xFDB
 19857                           fsr2h	equ	0xFDA
 19858                           fsr2l	equ	0xFD9
 19859                           status	equ	0xFD8
 19860                           
 19861 ;; *************** function _strcspn *****************
 19862 ;; Defined at:
 19863 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19864 ;; Parameters:    Size  Location     Type
 19865 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19866 ;;		 -> NULL(0), cmdbuf(80), 
 19867 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19868 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19869 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19870 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19871 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19872 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19873 ;;		 -> STR_31(2), STR_30(2), 
 19874 ;; Auto vars:     Size  Location     Type
 19875 ;;  i               2   10[BANK0 ] unsigned int 
 19876 ;; Return value:  Size  Location     Type
 19877 ;;                  2    6[BANK0 ] unsigned int 
 19878 ;; Registers used:
 19879 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19880 ;; Tracked objects:
 19881 ;;		On entry : F/0
 19882 ;;		On exit  : F/0
 19883 ;;		Unchanged: 0/0
 19884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19885 ;;      Params:         0       4       0       0       0       0       0
 19886 ;;      Locals:         0       2       0       0       0       0       0
 19887 ;;      Temps:          0       0       0       0       0       0       0
 19888 ;;      Totals:         0       6       0       0       0       0       0
 19889 ;;Total ram usage:        6 bytes
 19890 ;; Hardware stack levels used:    1
 19891 ;; Hardware stack levels required when called:    4
 19892 ;; This function calls:
 19893 ;;		_strchr
 19894 ;; This function is called by:
 19895 ;;		_strtok
 19896 ;; This function uses a non-reentrant model
 19897 ;;
 19898                           
 19899                           	psect	text44
 19900  001B6C                     __ptext44:
 19901                           	opt stack 0
 19902  001B6C                     _strcspn:
 19903                           	opt stack 23
 19904                           
 19905                           ; BSR set to: 0
 19906                           
 19907                           ; BSR set to: 0
 19908                           ;incstack = 0
 19909                           ;incstack = 0
 19910  001B6C  6B6A               	clrf	strcspn@i& (0+255),b
 19911  001B6E  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19912  001B70  D004               	goto	l12983
 19913  001B72                     l12981:
 19914                           
 19915                           ; BSR set to: 0
 19916  001B72  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19917  001B74  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19918  001B76  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19919  001B78  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19920  001B7A                     l12983:
 19921                           
 19922                           ; BSR set to: 0
 19923  001B7A  C066  FFD9         	movff	strcspn@s1,fsr2l
 19924  001B7E  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19925  001B82  50DF               	movf	indf2,w,c
 19926  001B84  E010               	bz	l2547
 19927                           
 19928                           ; BSR set to: 0
 19929  001B86  C068  F060         	movff	strcspn@s2,?_strchr
 19930  001B8A  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19931  001B8E  C066  FFD9         	movff	strcspn@s1,fsr2l
 19932  001B92  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19933  001B96  50DF               	movf	indf2,w,c
 19934  001B98  6F62               	movwf	(?_strchr+2)& (0+255),b
 19935  001B9A  6B63               	clrf	(?_strchr+3)& (0+255),b
 19936  001B9C  EC55  F00F         	call	_strchr	;wreg free
 19937  001BA0  5161               	movf	(?_strchr+1)& (0+255),w,b
 19938  001BA2  1160               	iorwf	?_strchr& (0+255),w,b
 19939  001BA4  E0E6               	bz	l12981
 19940  001BA6                     l2547:
 19941                           
 19942                           ; BSR set to: 0
 19943  001BA6  C06A  F066         	movff	strcspn@i,?_strcspn
 19944  001BAA  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19945                           
 19946                           ; BSR set to: 0
 19947  001BAE  0012               	return	
 19948  001BB0                     __end_of_strcspn:
 19949                           	opt stack 0
 19950                           tblptru	equ	0xFF8
 19951                           tblptrh	equ	0xFF7
 19952                           tblptrl	equ	0xFF6
 19953                           tablat	equ	0xFF5
 19954                           prodh	equ	0xFF4
 19955                           prodl	equ	0xFF3
 19956                           intcon	equ	0xFF2
 19957                           indf0	equ	0xFEF
 19958                           postinc0	equ	0xFEE
 19959                           fsr0h	equ	0xFEA
 19960                           fsr0l	equ	0xFE9
 19961                           wreg	equ	0xFE8
 19962                           indf1	equ	0xFE7
 19963                           postinc1	equ	0xFE6
 19964                           postdec1	equ	0xFE5
 19965                           fsr1h	equ	0xFE2
 19966                           fsr1l	equ	0xFE1
 19967                           indf2	equ	0xFDF
 19968                           postinc2	equ	0xFDE
 19969                           postdec2	equ	0xFDD
 19970                           plusw2	equ	0xFDB
 19971                           fsr2h	equ	0xFDA
 19972                           fsr2l	equ	0xFD9
 19973                           status	equ	0xFD8
 19974                           
 19975 ;; *************** function _strspn *****************
 19976 ;; Defined at:
 19977 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19978 ;; Parameters:    Size  Location     Type
 19979 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19980 ;;		 -> NULL(0), cmdbuf(80), 
 19981 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19982 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19983 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19984 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19985 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19986 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19987 ;;		 -> STR_31(2), STR_30(2), 
 19988 ;; Auto vars:     Size  Location     Type
 19989 ;;  i               2   10[BANK0 ] unsigned int 
 19990 ;; Return value:  Size  Location     Type
 19991 ;;                  2    6[BANK0 ] unsigned int 
 19992 ;; Registers used:
 19993 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19994 ;; Tracked objects:
 19995 ;;		On entry : F/0
 19996 ;;		On exit  : F/0
 19997 ;;		Unchanged: 0/0
 19998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19999 ;;      Params:         0       4       0       0       0       0       0
 20000 ;;      Locals:         0       2       0       0       0       0       0
 20001 ;;      Temps:          0       0       0       0       0       0       0
 20002 ;;      Totals:         0       6       0       0       0       0       0
 20003 ;;Total ram usage:        6 bytes
 20004 ;; Hardware stack levels used:    1
 20005 ;; Hardware stack levels required when called:    4
 20006 ;; This function calls:
 20007 ;;		_strchr
 20008 ;; This function is called by:
 20009 ;;		_strtok
 20010 ;; This function uses a non-reentrant model
 20011 ;;
 20012                           
 20013                           	psect	text45
 20014  001B28                     __ptext45:
 20015                           	opt stack 0
 20016  001B28                     _strspn:
 20017                           	opt stack 23
 20018                           
 20019                           ; BSR set to: 0
 20020                           
 20021                           ; BSR set to: 0
 20022                           ;incstack = 0
 20023                           ;incstack = 0
 20024  001B28  6B6A               	clrf	strspn@i& (0+255),b
 20025  001B2A  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20026  001B2C  D004               	goto	l12975
 20027  001B2E                     l12973:
 20028                           
 20029                           ; BSR set to: 0
 20030  001B2E  4B66               	infsnz	strspn@s1& (0+255),f,b
 20031  001B30  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20032  001B32  4B6A               	infsnz	strspn@i& (0+255),f,b
 20033  001B34  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20034  001B36                     l12975:
 20035                           
 20036                           ; BSR set to: 0
 20037  001B36  C066  FFD9         	movff	strspn@s1,fsr2l
 20038  001B3A  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20039  001B3E  50DF               	movf	indf2,w,c
 20040  001B40  E010               	bz	l2566
 20041                           
 20042                           ; BSR set to: 0
 20043  001B42  C068  F060         	movff	strspn@s2,?_strchr
 20044  001B46  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20045  001B4A  C066  FFD9         	movff	strspn@s1,fsr2l
 20046  001B4E  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20047  001B52  50DF               	movf	indf2,w,c
 20048  001B54  6F62               	movwf	(?_strchr+2)& (0+255),b
 20049  001B56  6B63               	clrf	(?_strchr+3)& (0+255),b
 20050  001B58  EC55  F00F         	call	_strchr	;wreg free
 20051  001B5C  5161               	movf	(?_strchr+1)& (0+255),w,b
 20052  001B5E  1160               	iorwf	?_strchr& (0+255),w,b
 20053  001B60  E1E6               	bnz	l12973
 20054  001B62                     l2566:
 20055                           
 20056                           ; BSR set to: 0
 20057  001B62  C06A  F066         	movff	strspn@i,?_strspn
 20058  001B66  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20059                           
 20060                           ; BSR set to: 0
 20061  001B6A  0012               	return	
 20062  001B6C                     __end_of_strspn:
 20063                           	opt stack 0
 20064                           tblptru	equ	0xFF8
 20065                           tblptrh	equ	0xFF7
 20066                           tblptrl	equ	0xFF6
 20067                           tablat	equ	0xFF5
 20068                           prodh	equ	0xFF4
 20069                           prodl	equ	0xFF3
 20070                           intcon	equ	0xFF2
 20071                           indf0	equ	0xFEF
 20072                           postinc0	equ	0xFEE
 20073                           fsr0h	equ	0xFEA
 20074                           fsr0l	equ	0xFE9
 20075                           wreg	equ	0xFE8
 20076                           indf1	equ	0xFE7
 20077                           postinc1	equ	0xFE6
 20078                           postdec1	equ	0xFE5
 20079                           fsr1h	equ	0xFE2
 20080                           fsr1l	equ	0xFE1
 20081                           indf2	equ	0xFDF
 20082                           postinc2	equ	0xFDE
 20083                           postdec2	equ	0xFDD
 20084                           plusw2	equ	0xFDB
 20085                           fsr2h	equ	0xFDA
 20086                           fsr2l	equ	0xFD9
 20087                           status	equ	0xFD8
 20088                           
 20089 ;; *************** function _strchr *****************
 20090 ;; Defined at:
 20091 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20092 ;; Parameters:    Size  Location     Type
 20093 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20094 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 20095 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 20096 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 20097 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 20098 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20099 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20100 ;;  chr             2    2[BANK0 ] int 
 20101 ;; Auto vars:     Size  Location     Type
 20102 ;;		None
 20103 ;; Return value:  Size  Location     Type
 20104 ;;                  2    0[BANK0 ] PTR unsigned char 
 20105 ;; Registers used:
 20106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20107 ;; Tracked objects:
 20108 ;;		On entry : F/0
 20109 ;;		On exit  : F/0
 20110 ;;		Unchanged: 0/0
 20111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20112 ;;      Params:         0       4       0       0       0       0       0
 20113 ;;      Locals:         0       0       0       0       0       0       0
 20114 ;;      Temps:          0       2       0       0       0       0       0
 20115 ;;      Totals:         0       6       0       0       0       0       0
 20116 ;;Total ram usage:        6 bytes
 20117 ;; Hardware stack levels used:    1
 20118 ;; Hardware stack levels required when called:    3
 20119 ;; This function calls:
 20120 ;;		Nothing
 20121 ;; This function is called by:
 20122 ;;		_doModeVerbose
 20123 ;;		_strcspn
 20124 ;;		_strspn
 20125 ;; This function uses a non-reentrant model
 20126 ;;
 20127                           
 20128                           	psect	text46
 20129  001EAA                     __ptext46:
 20130                           	opt stack 0
 20131  001EAA                     _strchr:
 20132                           	opt stack 25
 20133  001EAA                     l2468:
 20134                           
 20135                           ; BSR set to: 0
 20136  001EAA  0100               	movlb	0	; () banked
 20137  001EAC  5160               	movf	strchr@ptr& (0+255),w,b
 20138  001EAE  6EF6               	movwf	tblptrl,c
 20139  001EB0  6EE9               	movwf	fsr0l,c
 20140  001EB2  0E05               	movlw	(high __ramtop+-1)
 20141  001EB4  6EEA               	movwf	fsr0h,c
 20142  001EB6  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20143  001EB8  64EA               	cpfsgt	fsr0h,c
 20144  001EBA  D003               	bra	u14327
 20145  001EBC  6EEA               	movwf	fsr0h,c
 20146  001EBE  50EF               	movf	indf0,w,c
 20147  001EC0  D003               	bra	u14320
 20148  001EC2                     u14327:
 20149  001EC2  6EF7               	movwf	tblptrh,c
 20150  001EC4  0008               	tblrd		*
 20151  001EC6  50F5               	movf	tablat,w,c
 20152  001EC8                     u14320:
 20153  001EC8  0100               	movlb	0	; () banked
 20154  001ECA  1962               	xorwf	strchr@chr& (0+255),w,b
 20155  001ECC  E105               	bnz	l11547
 20156                           
 20157                           ; BSR set to: 0
 20158  001ECE  C060  F060         	movff	strchr@ptr,?_strchr
 20159  001ED2  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20160  001ED6  D019               	goto	l2470
 20161  001ED8                     l11547:
 20162                           
 20163                           ; BSR set to: 0
 20164  001ED8  5160               	movf	strchr@ptr& (0+255),w,b
 20165  001EDA  6F64               	movwf	??_strchr& (0+255),b
 20166  001EDC  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20167  001EDE  6F65               	movwf	(??_strchr+1)& (0+255),b
 20168  001EE0  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20169  001EE2  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20170  001EE4  5164               	movf	??_strchr& (0+255),w,b
 20171  001EE6  6EF6               	movwf	tblptrl,c
 20172  001EE8  6EE9               	movwf	fsr0l,c
 20173  001EEA  0E05               	movlw	(high __ramtop+-1)
 20174  001EEC  6EEA               	movwf	fsr0h,c
 20175  001EEE  5165               	movf	(??_strchr+1)& (0+255),w,b
 20176  001EF0  64EA               	cpfsgt	fsr0h,c
 20177  001EF2  D003               	bra	u14347
 20178  001EF4  6EEA               	movwf	fsr0h,c
 20179  001EF6  50EF               	movf	indf0,w,c
 20180  001EF8  D003               	bra	u14340
 20181  001EFA                     u14347:
 20182  001EFA  6EF7               	movwf	tblptrh,c
 20183  001EFC  0008               	tblrd		*
 20184  001EFE  50F5               	movf	tablat,w,c
 20185  001F00                     u14340:
 20186  001F00  0900               	iorlw	0
 20187  001F02  E1D3               	bnz	l2468
 20188  001F04  0100               	movlb	0	; () banked
 20189  001F06  6B60               	clrf	?_strchr& (0+255),b
 20190  001F08  6B61               	clrf	(?_strchr+1)& (0+255),b
 20191  001F0A                     l2470:
 20192                           
 20193                           ; BSR set to: 0
 20194  001F0A  0012               	return	
 20195  001F0C                     __end_of_strchr:
 20196                           	opt stack 0
 20197                           tblptru	equ	0xFF8
 20198                           tblptrh	equ	0xFF7
 20199                           tblptrl	equ	0xFF6
 20200                           tablat	equ	0xFF5
 20201                           prodh	equ	0xFF4
 20202                           prodl	equ	0xFF3
 20203                           intcon	equ	0xFF2
 20204                           indf0	equ	0xFEF
 20205                           postinc0	equ	0xFEE
 20206                           fsr0h	equ	0xFEA
 20207                           fsr0l	equ	0xFE9
 20208                           wreg	equ	0xFE8
 20209                           indf1	equ	0xFE7
 20210                           postinc1	equ	0xFE6
 20211                           postdec1	equ	0xFE5
 20212                           fsr1h	equ	0xFE2
 20213                           fsr1l	equ	0xFE1
 20214                           indf2	equ	0xFDF
 20215                           postinc2	equ	0xFDE
 20216                           postdec2	equ	0xFDD
 20217                           plusw2	equ	0xFDB
 20218                           fsr2h	equ	0xFDA
 20219                           fsr2l	equ	0xFD9
 20220                           status	equ	0xFD8
 20221                           
 20222 ;; *************** function _stristr *****************
 20223 ;; Defined at:
 20224 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20225 ;; Parameters:    Size  Location     Type
 20226 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20227 ;;		 -> NULL(0), cmdbuf(80), 
 20228 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20229 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20230 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20231 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20232 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20233 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20234 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20235 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20236 ;;		 -> STR_8(5), STR_6(5), 
 20237 ;; Auto vars:     Size  Location     Type
 20238 ;;		None
 20239 ;; Return value:  Size  Location     Type
 20240 ;;                  2   13[BANK0 ] PTR unsigned char 
 20241 ;; Registers used:
 20242 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20243 ;; Tracked objects:
 20244 ;;		On entry : F/0
 20245 ;;		On exit  : F/0
 20246 ;;		Unchanged: 0/0
 20247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20248 ;;      Params:         0       4       0       0       0       0       0
 20249 ;;      Locals:         0       0       0       0       0       0       0
 20250 ;;      Temps:          0       0       0       0       0       0       0
 20251 ;;      Totals:         0       4       0       0       0       0       0
 20252 ;;Total ram usage:        4 bytes
 20253 ;; Hardware stack levels used:    1
 20254 ;; Hardware stack levels required when called:    5
 20255 ;; This function calls:
 20256 ;;		_strlen
 20257 ;;		_strnicmp
 20258 ;;		_strichr
 20259 ;; This function is called by:
 20260 ;;		_doModeVerbose
 20261 ;; This function uses a non-reentrant model
 20262 ;;
 20263                           
 20264                           	psect	text47
 20265  002218                     __ptext47:
 20266                           	opt stack 0
 20267  002218                     _stristr:
 20268                           	opt stack 23
 20269                           
 20270                           ; BSR set to: 0
 20271                           
 20272                           ; BSR set to: 0
 20273                           ;incstack = 0
 20274                           ;incstack = 0
 20275  002218  D02F               	goto	l11251
 20276  00221A                     l11245:
 20277                           
 20278                           ; BSR set to: 0
 20279  00221A  C06D  F064         	movff	stristr@s1,?_strnicmp
 20280  00221E  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20281  002222  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20282  002226  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20283  00222A  C06F  F060         	movff	stristr@s2,?_strlen
 20284  00222E  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20285  002232  EC53  F00D         	call	_strlen	;wreg free
 20286  002236  C060  F068         	movff	?_strlen,?_strnicmp+4
 20287  00223A  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20288  00223E  ECB7  F00F         	call	_strnicmp	;wreg free
 20289  002242  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20290  002244  1164               	iorwf	?_strnicmp& (0+255),w,b
 20291  002246  E105               	bnz	l11249
 20292                           
 20293                           ; BSR set to: 0
 20294  002248  C06D  F06D         	movff	stristr@s1,?_stristr
 20295  00224C  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20296  002250  D01E               	goto	l2489
 20297  002252                     l11249:
 20298                           
 20299                           ; BSR set to: 0
 20300  002252  296D               	incf	stristr@s1& (0+255),w,b
 20301  002254  6F61               	movwf	?_strichr& (0+255),b
 20302  002256  0E00               	movlw	0
 20303  002258  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20304  00225A  6F62               	movwf	(?_strichr+1)& (0+255),b
 20305  00225C  C06F  FFF6         	movff	stristr@s2,tblptrl
 20306  002260  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20307  002264  0008               	tblrd		*
 20308  002266  50F5               	movf	tablat,w,c
 20309  002268  6F63               	movwf	(?_strichr+2)& (0+255),b
 20310  00226A  6B64               	clrf	(?_strichr+3)& (0+255),b
 20311  00226C  ECF5  F00C         	call	_strichr	;wreg free
 20312  002270  C061  F06D         	movff	?_strichr,stristr@s1
 20313  002274  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20314  002278                     l11251:
 20315                           
 20316                           ; BSR set to: 0
 20317  002278  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20318  00227A  116D               	iorwf	stristr@s1& (0+255),w,b
 20319  00227C  E006               	bz	l2492
 20320                           
 20321                           ; BSR set to: 0
 20322  00227E  C06D  FFD9         	movff	stristr@s1,fsr2l
 20323  002282  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20324  002286  50DF               	movf	indf2,w,c
 20325  002288  E1C8               	bnz	l11245
 20326  00228A                     l2492:
 20327                           
 20328                           ; BSR set to: 0
 20329  00228A  6B6D               	clrf	?_stristr& (0+255),b
 20330  00228C  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20331  00228E                     l2489:
 20332                           
 20333                           ; BSR set to: 0
 20334  00228E  0012               	return	
 20335  002290                     __end_of_stristr:
 20336                           	opt stack 0
 20337                           tblptru	equ	0xFF8
 20338                           tblptrh	equ	0xFF7
 20339                           tblptrl	equ	0xFF6
 20340                           tablat	equ	0xFF5
 20341                           prodh	equ	0xFF4
 20342                           prodl	equ	0xFF3
 20343                           intcon	equ	0xFF2
 20344                           indf0	equ	0xFEF
 20345                           postinc0	equ	0xFEE
 20346                           fsr0h	equ	0xFEA
 20347                           fsr0l	equ	0xFE9
 20348                           wreg	equ	0xFE8
 20349                           indf1	equ	0xFE7
 20350                           postinc1	equ	0xFE6
 20351                           postdec1	equ	0xFE5
 20352                           fsr1h	equ	0xFE2
 20353                           fsr1l	equ	0xFE1
 20354                           indf2	equ	0xFDF
 20355                           postinc2	equ	0xFDE
 20356                           postdec2	equ	0xFDD
 20357                           plusw2	equ	0xFDB
 20358                           fsr2h	equ	0xFDA
 20359                           fsr2l	equ	0xFD9
 20360                           status	equ	0xFD8
 20361                           
 20362 ;; *************** function _strichr *****************
 20363 ;; Defined at:
 20364 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20365 ;; Parameters:    Size  Location     Type
 20366 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20367 ;;		 -> NULL(0), cmdbuf(80), 
 20368 ;;  chr             2    3[BANK0 ] int 
 20369 ;; Auto vars:     Size  Location     Type
 20370 ;;		None
 20371 ;; Return value:  Size  Location     Type
 20372 ;;                  2    1[BANK0 ] PTR unsigned char 
 20373 ;; Registers used:
 20374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20375 ;; Tracked objects:
 20376 ;;		On entry : F/0
 20377 ;;		On exit  : F/0
 20378 ;;		Unchanged: 0/0
 20379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20380 ;;      Params:         0       4       0       0       0       0       0
 20381 ;;      Locals:         0       0       0       0       0       0       0
 20382 ;;      Temps:          0       0       0       0       0       0       0
 20383 ;;      Totals:         0       4       0       0       0       0       0
 20384 ;;Total ram usage:        4 bytes
 20385 ;; Hardware stack levels used:    1
 20386 ;; Hardware stack levels required when called:    4
 20387 ;; This function calls:
 20388 ;;		_toupper
 20389 ;; This function is called by:
 20390 ;;		_stristr
 20391 ;; This function uses a non-reentrant model
 20392 ;;
 20393                           
 20394                           	psect	text48
 20395  0019EA                     __ptext48:
 20396                           	opt stack 0
 20397  0019EA                     _strichr:
 20398                           	opt stack 23
 20399                           
 20400                           ; BSR set to: 0
 20401                           
 20402                           ; BSR set to: 0
 20403                           ;incstack = 0
 20404                           ;incstack = 0
 20405  0019EA  5163               	movf	strichr@chr& (0+255),w,b
 20406  0019EC  ECCB  F00B         	call	_toupper
 20407  0019F0  6F63               	movwf	strichr@chr& (0+255),b
 20408  0019F2  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20409  0019F4  D010               	goto	l12959
 20410  0019F6                     l12953:
 20411                           
 20412                           ; BSR set to: 0
 20413  0019F6  C061  FFD9         	movff	strichr@ptr,fsr2l
 20414  0019FA  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20415  0019FE  50DF               	movf	indf2,w,c
 20416  001A00  ECCB  F00B         	call	_toupper
 20417  001A04  1963               	xorwf	strichr@chr& (0+255),w,b
 20418  001A06  E105               	bnz	l12957
 20419                           
 20420                           ; BSR set to: 0
 20421  001A08  C061  F061         	movff	strichr@ptr,?_strichr
 20422  001A0C  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20423  001A10  D00A               	goto	l2556
 20424  001A12                     l12957:
 20425                           
 20426                           ; BSR set to: 0
 20427  001A12  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20428  001A14  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20429  001A16                     l12959:
 20430                           
 20431                           ; BSR set to: 0
 20432  001A16  C061  FFD9         	movff	strichr@ptr,fsr2l
 20433  001A1A  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20434  001A1E  50DF               	movf	indf2,w,c
 20435  001A20  E1EA               	bnz	l12953
 20436                           
 20437                           ; BSR set to: 0
 20438  001A22  6B61               	clrf	?_strichr& (0+255),b
 20439  001A24  6B62               	clrf	(?_strichr+1)& (0+255),b
 20440  001A26                     l2556:
 20441                           
 20442                           ; BSR set to: 0
 20443  001A26  0012               	return	
 20444  001A28                     __end_of_strichr:
 20445                           	opt stack 0
 20446                           tblptru	equ	0xFF8
 20447                           tblptrh	equ	0xFF7
 20448                           tblptrl	equ	0xFF6
 20449                           tablat	equ	0xFF5
 20450                           prodh	equ	0xFF4
 20451                           prodl	equ	0xFF3
 20452                           intcon	equ	0xFF2
 20453                           indf0	equ	0xFEF
 20454                           postinc0	equ	0xFEE
 20455                           fsr0h	equ	0xFEA
 20456                           fsr0l	equ	0xFE9
 20457                           wreg	equ	0xFE8
 20458                           indf1	equ	0xFE7
 20459                           postinc1	equ	0xFE6
 20460                           postdec1	equ	0xFE5
 20461                           fsr1h	equ	0xFE2
 20462                           fsr1l	equ	0xFE1
 20463                           indf2	equ	0xFDF
 20464                           postinc2	equ	0xFDE
 20465                           postdec2	equ	0xFDD
 20466                           plusw2	equ	0xFDB
 20467                           fsr2h	equ	0xFDA
 20468                           fsr2l	equ	0xFD9
 20469                           status	equ	0xFD8
 20470                           
 20471 ;; *************** function _strnicmp *****************
 20472 ;; Defined at:
 20473 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20474 ;; Parameters:    Size  Location     Type
 20475 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20476 ;;		 -> NULL(0), cmdbuf(80), 
 20477 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20478 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20479 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20480 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20481 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20482 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20483 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20484 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20485 ;;		 -> STR_8(5), STR_6(5), 
 20486 ;;  len             2    8[BANK0 ] unsigned int 
 20487 ;; Auto vars:     Size  Location     Type
 20488 ;;  r               1   12[BANK0 ] char 
 20489 ;; Return value:  Size  Location     Type
 20490 ;;                  2    4[BANK0 ] int 
 20491 ;; Registers used:
 20492 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20493 ;; Tracked objects:
 20494 ;;		On entry : F/0
 20495 ;;		On exit  : F/0
 20496 ;;		Unchanged: 0/0
 20497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20498 ;;      Params:         0       6       0       0       0       0       0
 20499 ;;      Locals:         0       1       0       0       0       0       0
 20500 ;;      Temps:          0       2       0       0       0       0       0
 20501 ;;      Totals:         0       9       0       0       0       0       0
 20502 ;;Total ram usage:        9 bytes
 20503 ;; Hardware stack levels used:    1
 20504 ;; Hardware stack levels required when called:    4
 20505 ;; This function calls:
 20506 ;;		_toupper
 20507 ;; This function is called by:
 20508 ;;		_stristr
 20509 ;; This function uses a non-reentrant model
 20510 ;;
 20511                           
 20512                           	psect	text49
 20513  001F6E                     __ptext49:
 20514                           	opt stack 0
 20515  001F6E                     _strnicmp:
 20516                           	opt stack 23
 20517                           
 20518                           ; BSR set to: 0
 20519                           
 20520                           ; BSR set to: 0
 20521                           ;incstack = 0
 20522                           ;incstack = 0
 20523  001F6E  D027               	goto	l12949
 20524  001F70                     l12939:
 20525                           
 20526                           ; BSR set to: 0
 20527  001F70  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20528  001F74  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20529  001F78  0008               	tblrd		*
 20530  001F7A  50F5               	movf	tablat,w,c
 20531  001F7C  ECCB  F00B         	call	_toupper
 20532  001F80  6F6A               	movwf	??_strnicmp& (0+255),b
 20533  001F82  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20534  001F86  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20535  001F8A  50DF               	movf	indf2,w,c
 20536  001F8C  ECCB  F00B         	call	_toupper
 20537  001F90  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20538  001F92  516A               	movf	??_strnicmp& (0+255),w,b
 20539  001F94  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20540  001F96  6F6C               	movwf	strnicmp@r& (0+255),b
 20541  001F98  0100               	movlb	0	; () banked
 20542  001F9A  676C               	tstfsz	strnicmp@r& (0+255),b
 20543  001F9C  D006               	goto	l12943
 20544                           
 20545                           ; BSR set to: 0
 20546  001F9E  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20547  001FA2  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20548  001FA6  50DF               	movf	indf2,w,c
 20549  001FA8  E106               	bnz	l12947
 20550  001FAA                     l12943:
 20551                           
 20552                           ; BSR set to: 0
 20553  001FAA  516C               	movf	strnicmp@r& (0+255),w,b
 20554  001FAC  6F64               	movwf	?_strnicmp& (0+255),b
 20555  001FAE  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20556  001FB0  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20557  001FB2  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20558  001FB4  D00E               	goto	l2508
 20559  001FB6                     l12947:
 20560                           
 20561                           ; BSR set to: 0
 20562  001FB6  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20563  001FB8  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20564  001FBA  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20565  001FBC  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20566  001FBE                     l12949:
 20567                           
 20568                           ; BSR set to: 0
 20569  001FBE  0768               	decf	strnicmp@len& (0+255),f,b
 20570  001FC0  A0D8               	btfss	status,0,c
 20571  001FC2  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20572  001FC4  0100               	movlb	0	; () banked
 20573  001FC6  2968               	incf	strnicmp@len& (0+255),w,b
 20574  001FC8  B4D8               	btfsc	status,2,c
 20575  001FCA  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20576  001FCC  E1D1               	bnz	l12939
 20577                           
 20578                           ; BSR set to: 0
 20579  001FCE  6B64               	clrf	?_strnicmp& (0+255),b
 20580  001FD0  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20581  001FD2                     l2508:
 20582                           
 20583                           ; BSR set to: 0
 20584  001FD2  0012               	return	
 20585  001FD4                     __end_of_strnicmp:
 20586                           	opt stack 0
 20587                           tblptru	equ	0xFF8
 20588                           tblptrh	equ	0xFF7
 20589                           tblptrl	equ	0xFF6
 20590                           tablat	equ	0xFF5
 20591                           prodh	equ	0xFF4
 20592                           prodl	equ	0xFF3
 20593                           intcon	equ	0xFF2
 20594                           indf0	equ	0xFEF
 20595                           postinc0	equ	0xFEE
 20596                           fsr0h	equ	0xFEA
 20597                           fsr0l	equ	0xFE9
 20598                           wreg	equ	0xFE8
 20599                           indf1	equ	0xFE7
 20600                           postinc1	equ	0xFE6
 20601                           postdec1	equ	0xFE5
 20602                           fsr1h	equ	0xFE2
 20603                           fsr1l	equ	0xFE1
 20604                           indf2	equ	0xFDF
 20605                           postinc2	equ	0xFDE
 20606                           postdec2	equ	0xFDD
 20607                           plusw2	equ	0xFDB
 20608                           fsr2h	equ	0xFDA
 20609                           fsr2l	equ	0xFD9
 20610                           status	equ	0xFD8
 20611                           
 20612 ;; *************** function _toupper *****************
 20613 ;; Defined at:
 20614 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20615 ;; Parameters:    Size  Location     Type
 20616 ;;  c               1    wreg     unsigned char 
 20617 ;; Auto vars:     Size  Location     Type
 20618 ;;  c               1    0[BANK0 ] unsigned char 
 20619 ;; Return value:  Size  Location     Type
 20620 ;;                  1    wreg      unsigned char 
 20621 ;; Registers used:
 20622 ;;		wreg, status,2, status,0
 20623 ;; Tracked objects:
 20624 ;;		On entry : F/0
 20625 ;;		On exit  : F/0
 20626 ;;		Unchanged: 0/0
 20627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20628 ;;      Params:         0       0       0       0       0       0       0
 20629 ;;      Locals:         0       1       0       0       0       0       0
 20630 ;;      Temps:          0       0       0       0       0       0       0
 20631 ;;      Totals:         0       1       0       0       0       0       0
 20632 ;;Total ram usage:        1 bytes
 20633 ;; Hardware stack levels used:    1
 20634 ;; Hardware stack levels required when called:    3
 20635 ;; This function calls:
 20636 ;;		Nothing
 20637 ;; This function is called by:
 20638 ;;		_strnicmp
 20639 ;;		_strichr
 20640 ;; This function uses a non-reentrant model
 20641 ;;
 20642                           
 20643                           	psect	text50
 20644  001796                     __ptext50:
 20645                           	opt stack 0
 20646  001796                     _toupper:
 20647                           	opt stack 23
 20648                           
 20649                           ; BSR set to: 0
 20650                           ;incstack = 0
 20651                           ;incstack = 0
 20652                           ;toupper@c stored from wreg
 20653  001796  CFE8 F060          	movff	wreg,toupper@c
 20654                           
 20655                           ; BSR set to: 0
 20656  00179A  0E7B               	movlw	123
 20657  00179C  6160               	cpfslt	toupper@c& (0+255),b
 20658  00179E  D004               	goto	l12967
 20659                           
 20660                           ; BSR set to: 0
 20661  0017A0  0E60               	movlw	96
 20662  0017A2  6560               	cpfsgt	toupper@c& (0+255),b
 20663  0017A4  D001               	goto	l12967
 20664                           
 20665                           ; BSR set to: 0
 20666  0017A6  9B60               	bcf	toupper@c& (0+255),5,b
 20667  0017A8                     l12967:
 20668                           
 20669                           ; BSR set to: 0
 20670  0017A8  5160               	movf	toupper@c& (0+255),w,b
 20671                           
 20672                           ; BSR set to: 0
 20673  0017AA  0012               	return	
 20674  0017AC                     __end_of_toupper:
 20675                           	opt stack 0
 20676                           tblptru	equ	0xFF8
 20677                           tblptrh	equ	0xFF7
 20678                           tblptrl	equ	0xFF6
 20679                           tablat	equ	0xFF5
 20680                           prodh	equ	0xFF4
 20681                           prodl	equ	0xFF3
 20682                           intcon	equ	0xFF2
 20683                           indf0	equ	0xFEF
 20684                           postinc0	equ	0xFEE
 20685                           fsr0h	equ	0xFEA
 20686                           fsr0l	equ	0xFE9
 20687                           wreg	equ	0xFE8
 20688                           indf1	equ	0xFE7
 20689                           postinc1	equ	0xFE6
 20690                           postdec1	equ	0xFE5
 20691                           fsr1h	equ	0xFE2
 20692                           fsr1l	equ	0xFE1
 20693                           indf2	equ	0xFDF
 20694                           postinc2	equ	0xFDE
 20695                           postdec2	equ	0xFDD
 20696                           plusw2	equ	0xFDB
 20697                           fsr2h	equ	0xFDA
 20698                           fsr2l	equ	0xFD9
 20699                           status	equ	0xFD8
 20700                           
 20701 ;; *************** function _strlen *****************
 20702 ;; Defined at:
 20703 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20704 ;; Parameters:    Size  Location     Type
 20705 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20706 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20707 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20708 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20709 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20710 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20711 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20712 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20713 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20714 ;;		 -> cmdbuf(80), 
 20715 ;; Auto vars:     Size  Location     Type
 20716 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20717 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20718 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20719 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20720 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20721 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20722 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20723 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20724 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20725 ;;		 -> cmdbuf(80), 
 20726 ;; Return value:  Size  Location     Type
 20727 ;;                  2    0[BANK0 ] unsigned int 
 20728 ;; Registers used:
 20729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20730 ;; Tracked objects:
 20731 ;;		On entry : F/0
 20732 ;;		On exit  : F/0
 20733 ;;		Unchanged: 0/0
 20734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20735 ;;      Params:         0       2       0       0       0       0       0
 20736 ;;      Locals:         0       2       0       0       0       0       0
 20737 ;;      Temps:          0       0       0       0       0       0       0
 20738 ;;      Totals:         0       4       0       0       0       0       0
 20739 ;;Total ram usage:        4 bytes
 20740 ;; Hardware stack levels used:    1
 20741 ;; Hardware stack levels required when called:    3
 20742 ;; This function calls:
 20743 ;;		Nothing
 20744 ;; This function is called by:
 20745 ;;		_doModeSLCAN
 20746 ;;		_receiveSendEventSLCAN
 20747 ;;		_printGUID
 20748 ;;		_hexStringToBytes
 20749 ;;		_stristr
 20750 ;; This function uses a non-reentrant model
 20751 ;;
 20752                           
 20753                           	psect	text51
 20754  001AA6                     __ptext51:
 20755                           	opt stack 0
 20756  001AA6                     _strlen:
 20757                           	opt stack 24
 20758                           
 20759                           ; BSR set to: 0
 20760                           
 20761                           ; BSR set to: 0
 20762                           ;incstack = 0
 20763                           ;incstack = 0
 20764  001AA6  C060  F062         	movff	strlen@s,strlen@cp
 20765  001AAA  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20766  001AAE  D003               	goto	l12509
 20767  001AB0                     l12507:
 20768  001AB0  0100               	movlb	0	; () banked
 20769  001AB2  4B62               	infsnz	strlen@cp& (0+255),f,b
 20770  001AB4  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20771  001AB6                     l12509:
 20772                           
 20773                           ; BSR set to: 0
 20774  001AB6  5162               	movf	strlen@cp& (0+255),w,b
 20775  001AB8  6EF6               	movwf	tblptrl,c
 20776  001ABA  6EE9               	movwf	fsr0l,c
 20777  001ABC  0E05               	movlw	(high __ramtop+-1)
 20778  001ABE  6EEA               	movwf	fsr0h,c
 20779  001AC0  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20780  001AC2  64EA               	cpfsgt	fsr0h,c
 20781  001AC4  D003               	bra	u16137
 20782  001AC6  6EEA               	movwf	fsr0h,c
 20783  001AC8  50EF               	movf	indf0,w,c
 20784  001ACA  D003               	bra	u16130
 20785  001ACC                     u16137:
 20786  001ACC  6EF7               	movwf	tblptrh,c
 20787  001ACE  0008               	tblrd		*
 20788  001AD0  50F5               	movf	tablat,w,c
 20789  001AD2                     u16130:
 20790  001AD2  0900               	iorlw	0
 20791  001AD4  E1ED               	bnz	l12507
 20792  001AD6  0100               	movlb	0	; () banked
 20793  001AD8  5160               	movf	strlen@s& (0+255),w,b
 20794  001ADA  5D62               	subwf	strlen@cp& (0+255),w,b
 20795  001ADC  6F60               	movwf	?_strlen& (0+255),b
 20796  001ADE  5161               	movf	(strlen@s+1)& (0+255),w,b
 20797  001AE0  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20798  001AE2  6F61               	movwf	(?_strlen+1)& (0+255),b
 20799                           
 20800                           ; BSR set to: 0
 20801  001AE4  0012               	return	
 20802  001AE6                     __end_of_strlen:
 20803                           	opt stack 0
 20804                           tblptru	equ	0xFF8
 20805                           tblptrh	equ	0xFF7
 20806                           tblptrl	equ	0xFF6
 20807                           tablat	equ	0xFF5
 20808                           prodh	equ	0xFF4
 20809                           prodl	equ	0xFF3
 20810                           intcon	equ	0xFF2
 20811                           indf0	equ	0xFEF
 20812                           postinc0	equ	0xFEE
 20813                           fsr0h	equ	0xFEA
 20814                           fsr0l	equ	0xFE9
 20815                           wreg	equ	0xFE8
 20816                           indf1	equ	0xFE7
 20817                           postinc1	equ	0xFE6
 20818                           postdec1	equ	0xFE5
 20819                           fsr1h	equ	0xFE2
 20820                           fsr1l	equ	0xFE1
 20821                           indf2	equ	0xFDF
 20822                           postinc2	equ	0xFDE
 20823                           postdec2	equ	0xFDD
 20824                           plusw2	equ	0xFDB
 20825                           fsr2h	equ	0xFDA
 20826                           fsr2l	equ	0xFD9
 20827                           status	equ	0xFD8
 20828                           
 20829 ;; *************** function _receivePrintEventVerbose *****************
 20830 ;; Defined at:
 20831 ;;		line 1731 in file "main.c"
 20832 ;; Parameters:    Size  Location     Type
 20833 ;;		None
 20834 ;; Auto vars:     Size  Location     Type
 20835 ;;  i               1   69[BANK0 ] unsigned char 
 20836 ;; Return value:  Size  Location     Type
 20837 ;;                  1    wreg      enum E15660
 20838 ;; Registers used:
 20839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20840 ;; Tracked objects:
 20841 ;;		On entry : F/1
 20842 ;;		On exit  : 0/0
 20843 ;;		Unchanged: 0/0
 20844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20845 ;;      Params:         0       0       0       0       0       0       0
 20846 ;;      Locals:         0      13       0       0       0       0       0
 20847 ;;      Temps:          0       5       0       0       0       0       0
 20848 ;;      Totals:         0      18       0       0       0       0       0
 20849 ;;Total ram usage:       18 bytes
 20850 ;; Hardware stack levels used:    1
 20851 ;; Hardware stack levels required when called:    6
 20852 ;; This function calls:
 20853 ;;		_putsUSART
 20854 ;;		_sprintf
 20855 ;;		_getVSCPFrame
 20856 ;; This function is called by:
 20857 ;;		_doModeVerbose
 20858 ;; This function uses a non-reentrant model
 20859 ;;
 20860                           
 20861                           	psect	text52
 20862  00488A                     __ptext52:
 20863                           	opt stack 0
 20864  00488A                     _receivePrintEventVerbose:
 20865                           	opt stack 22
 20866                           
 20867                           ; BSR set to: 1
 20868                           ;main.c: 1732: uint8_t i;
 20869                           ;main.c: 1734: if (getVSCPFrame(&vscpClass,
 20870                           ;main.c: 1735: &vscpType,
 20871                           ;main.c: 1736: &vscpNodeId,
 20872                           ;main.c: 1737: &vscpPriority,
 20873                           ;main.c: 1738: &vscpSize,
 20874                           ;main.c: 1739: vscpData)) {
 20875                           
 20876                           ; BSR set to: 0
 20877                           ;incstack = 0
 20878                           ;incstack = 0
 20879  00488A  0E01               	movlw	high _vscpClass
 20880  00488C  0100               	movlb	0	; () banked
 20881  00488E  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20882  004890  0EAC               	movlw	low _vscpClass
 20883  004892  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20884  004894  0E01               	movlw	high _vscpType
 20885  004896  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20886  004898  0EB1               	movlw	low _vscpType
 20887  00489A  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20888  00489C  0E01               	movlw	high _vscpNodeId
 20889  00489E  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20890  0048A0  0EAE               	movlw	low _vscpNodeId
 20891  0048A2  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20892  0048A4  0E01               	movlw	high _vscpPriority
 20893  0048A6  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 20894  0048A8  0EAF               	movlw	low _vscpPriority
 20895  0048AA  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 20896  0048AC  0E01               	movlw	high _vscpSize
 20897  0048AE  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 20898  0048B0  0EB0               	movlw	low _vscpSize
 20899  0048B2  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 20900  0048B4  0E01               	movlw	high _vscpData
 20901  0048B6  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 20902  0048B8  0EA4               	movlw	low _vscpData
 20903  0048BA  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 20904  0048BC  EC88  F011         	call	_getVSCPFrame	;wreg free
 20905  0048C0  0900               	iorlw	0
 20906  0048C2  E101 D141          	bz	l11239
 20907                           
 20908                           ; BSR set to: 0
 20909                           ;main.c: 1742: cntRxFrames++;
 20910  0048C6  2BD9               	incf	_cntRxFrames& (0+255),f,b
 20911  0048C8  0E00               	movlw	0
 20912  0048CA  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20913  0048CC  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20914  0048CE  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20915                           
 20916                           ;main.c: 1743: cntRxBytes += vscpSize;
 20917  0048D0  0101               	movlb	1	; () banked
 20918  0048D2  51B0               	movf	_vscpSize& (0+255),w,b
 20919  0048D4  0100               	movlb	0	; () banked
 20920  0048D6  27D5               	addwf	_cntRxBytes& (0+255),f,b
 20921  0048D8  0E00               	movlw	0
 20922  0048DA  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20923  0048DC  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20924  0048DE  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20925                           
 20926                           ; BSR set to: 0
 20927                           ;main.c: 1745: putsUSART((char *) "<Prio=");
 20928  0048E0  0E7C               	movlw	high STR_139
 20929  0048E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20930  0048E4  0E41               	movlw	low STR_139
 20931  0048E6  6F61               	movwf	?_putsUSART& (0+255),b
 20932  0048E8  EC6E  F00E         	call	_putsUSART	;wreg free
 20933                           
 20934                           ;main.c: 1746: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20935  0048EC  0101               	movlb	1	; () banked
 20936  0048EE  6700               	tstfsz	_bHex& (0+255),b
 20937  0048F0  D005               	goto	l11157
 20938                           
 20939                           ; BSR set to: 1
 20940  0048F2  0E7C               	movlw	high STR_57
 20941  0048F4  0100               	movlb	0	; () banked
 20942  0048F6  6F9A               	movwf	(_receivePrintEventVerbose$1273+1)& (0+255),b
 20943  0048F8  0EED               	movlw	low STR_57
 20944  0048FA  D004               	goto	L27
 20945  0048FC                     l11157:
 20946                           
 20947                           ; BSR set to: 1
 20948  0048FC  0E7C               	movlw	high STR_56
 20949  0048FE  0100               	movlb	0	; () banked
 20950  004900  6F9A               	movwf	(_receivePrintEventVerbose$1273+1)& (0+255),b
 20951  004902  0E64               	movlw	low STR_56
 20952  004904                     L27:
 20953  004904  6F99               	movwf	_receivePrintEventVerbose$1273& (0+255),b
 20954                           
 20955                           ; BSR set to: 0
 20956  004906  0E01               	movlw	high _wrkbuf
 20957  004908  0100               	movlb	0	; () banked
 20958  00490A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20959  00490C  0E54               	movlw	low _wrkbuf
 20960  00490E  6F76               	movwf	?_sprintf& (0+255),b
 20961  004910  C099  F078         	movff	_receivePrintEventVerbose$1273,?_sprintf+2
 20962  004914  C09A  F079         	movff	_receivePrintEventVerbose$1273+1,?_sprintf+3
 20963  004918  C1AF  F07A         	movff	_vscpPriority,?_sprintf+4
 20964  00491C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20965  00491E  ECC8  F028         	call	_sprintf	;wreg free
 20966                           
 20967                           ; BSR set to: 0
 20968                           ;main.c: 1747: putsUSART(wrkbuf);
 20969  004922  0E01               	movlw	high _wrkbuf
 20970  004924  0100               	movlb	0	; () banked
 20971  004926  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20972  004928  0E54               	movlw	low _wrkbuf
 20973  00492A  6F61               	movwf	?_putsUSART& (0+255),b
 20974  00492C  EC6E  F00E         	call	_putsUSART	;wreg free
 20975                           
 20976                           ;main.c: 1748: putsUSART((char *) ",class=");
 20977  004930  0E7B               	movlw	high STR_142
 20978  004932  0100               	movlb	0	; () banked
 20979  004934  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20980  004936  0EF5               	movlw	low STR_142
 20981  004938  6F61               	movwf	?_putsUSART& (0+255),b
 20982  00493A  EC6E  F00E         	call	_putsUSART	;wreg free
 20983                           
 20984                           ;main.c: 1749: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20985  00493E  0101               	movlb	1	; () banked
 20986  004940  6700               	tstfsz	_bHex& (0+255),b
 20987  004942  D005               	goto	l11169
 20988                           
 20989                           ; BSR set to: 1
 20990  004944  0E7C               	movlw	high STR_57
 20991  004946  0100               	movlb	0	; () banked
 20992  004948  6F9C               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20993  00494A  0EED               	movlw	low STR_57
 20994  00494C  D004               	goto	L28
 20995  00494E                     l11169:
 20996                           
 20997                           ; BSR set to: 1
 20998  00494E  0E7C               	movlw	high STR_143
 20999  004950  0100               	movlb	0	; () banked
 21000  004952  6F9C               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 21001  004954  0E6B               	movlw	low STR_143
 21002  004956                     L28:
 21003  004956  6F9B               	movwf	_receivePrintEventVerbose$1278& (0+255),b
 21004                           
 21005                           ; BSR set to: 0
 21006  004958  0E01               	movlw	high _wrkbuf
 21007  00495A  0100               	movlb	0	; () banked
 21008  00495C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21009  00495E  0E54               	movlw	low _wrkbuf
 21010  004960  6F76               	movwf	?_sprintf& (0+255),b
 21011  004962  C09B  F078         	movff	_receivePrintEventVerbose$1278,?_sprintf+2
 21012  004966  C09C  F079         	movff	_receivePrintEventVerbose$1278+1,?_sprintf+3
 21013  00496A  C1AC  F07A         	movff	_vscpClass,?_sprintf+4
 21014  00496E  C1AD  F07B         	movff	_vscpClass+1,?_sprintf+5
 21015  004972  ECC8  F028         	call	_sprintf	;wreg free
 21016                           
 21017                           ; BSR set to: 0
 21018                           ;main.c: 1750: putsUSART(wrkbuf);
 21019  004976  0E01               	movlw	high _wrkbuf
 21020  004978  0100               	movlb	0	; () banked
 21021  00497A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21022  00497C  0E54               	movlw	low _wrkbuf
 21023  00497E  6F61               	movwf	?_putsUSART& (0+255),b
 21024  004980  EC6E  F00E         	call	_putsUSART	;wreg free
 21025                           
 21026                           ;main.c: 1751: putsUSART((char *) ",type=");
 21027  004984  0E7C               	movlw	high STR_145
 21028  004986  0100               	movlb	0	; () banked
 21029  004988  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21030  00498A  0E33               	movlw	low STR_145
 21031  00498C  6F61               	movwf	?_putsUSART& (0+255),b
 21032  00498E  EC6E  F00E         	call	_putsUSART	;wreg free
 21033                           
 21034                           ;main.c: 1752: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21035  004992  0101               	movlb	1	; () banked
 21036  004994  6700               	tstfsz	_bHex& (0+255),b
 21037  004996  D005               	goto	l11181
 21038                           
 21039                           ; BSR set to: 1
 21040  004998  0E7C               	movlw	high STR_57
 21041  00499A  0100               	movlb	0	; () banked
 21042  00499C  6F9E               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 21043  00499E  0EED               	movlw	low STR_57
 21044  0049A0  D004               	goto	L29
 21045  0049A2                     l11181:
 21046                           
 21047                           ; BSR set to: 1
 21048  0049A2  0E7C               	movlw	high STR_56
 21049  0049A4  0100               	movlb	0	; () banked
 21050  0049A6  6F9E               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 21051  0049A8  0E64               	movlw	low STR_56
 21052  0049AA                     L29:
 21053  0049AA  6F9D               	movwf	_receivePrintEventVerbose$1283& (0+255),b
 21054                           
 21055                           ; BSR set to: 0
 21056  0049AC  0E01               	movlw	high _wrkbuf
 21057  0049AE  0100               	movlb	0	; () banked
 21058  0049B0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21059  0049B2  0E54               	movlw	low _wrkbuf
 21060  0049B4  6F76               	movwf	?_sprintf& (0+255),b
 21061  0049B6  C09D  F078         	movff	_receivePrintEventVerbose$1283,?_sprintf+2
 21062  0049BA  C09E  F079         	movff	_receivePrintEventVerbose$1283+1,?_sprintf+3
 21063  0049BE  C1B1  F07A         	movff	_vscpType,?_sprintf+4
 21064  0049C2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21065  0049C4  ECC8  F028         	call	_sprintf	;wreg free
 21066                           
 21067                           ; BSR set to: 0
 21068                           ;main.c: 1753: putsUSART(wrkbuf);
 21069  0049C8  0E01               	movlw	high _wrkbuf
 21070  0049CA  0100               	movlb	0	; () banked
 21071  0049CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21072  0049CE  0E54               	movlw	low _wrkbuf
 21073  0049D0  6F61               	movwf	?_putsUSART& (0+255),b
 21074  0049D2  EC6E  F00E         	call	_putsUSART	;wreg free
 21075                           
 21076                           ;main.c: 1754: putsUSART((char *) ",nodeid=");
 21077  0049D6  0E7B               	movlw	high STR_148
 21078  0049D8  0100               	movlb	0	; () banked
 21079  0049DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21080  0049DC  0EC3               	movlw	low STR_148
 21081  0049DE  6F61               	movwf	?_putsUSART& (0+255),b
 21082  0049E0  EC6E  F00E         	call	_putsUSART	;wreg free
 21083                           
 21084                           ;main.c: 1755: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21085  0049E4  0101               	movlb	1	; () banked
 21086  0049E6  6700               	tstfsz	_bHex& (0+255),b
 21087  0049E8  D005               	goto	l11193
 21088                           
 21089                           ; BSR set to: 1
 21090  0049EA  0E7C               	movlw	high STR_57
 21091  0049EC  0100               	movlb	0	; () banked
 21092  0049EE  6FA0               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21093  0049F0  0EED               	movlw	low STR_57
 21094  0049F2  D004               	goto	L30
 21095  0049F4                     l11193:
 21096                           
 21097                           ; BSR set to: 1
 21098  0049F4  0E7C               	movlw	high STR_56
 21099  0049F6  0100               	movlb	0	; () banked
 21100  0049F8  6FA0               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 21101  0049FA  0E64               	movlw	low STR_56
 21102  0049FC                     L30:
 21103  0049FC  6F9F               	movwf	_receivePrintEventVerbose$1288& (0+255),b
 21104                           
 21105                           ; BSR set to: 0
 21106  0049FE  0E01               	movlw	high _wrkbuf
 21107  004A00  0100               	movlb	0	; () banked
 21108  004A02  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21109  004A04  0E54               	movlw	low _wrkbuf
 21110  004A06  6F76               	movwf	?_sprintf& (0+255),b
 21111  004A08  C09F  F078         	movff	_receivePrintEventVerbose$1288,?_sprintf+2
 21112  004A0C  C0A0  F079         	movff	_receivePrintEventVerbose$1288+1,?_sprintf+3
 21113  004A10  C1AE  F07A         	movff	_vscpNodeId,?_sprintf+4
 21114  004A14  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21115  004A16  ECC8  F028         	call	_sprintf	;wreg free
 21116                           
 21117                           ; BSR set to: 0
 21118                           ;main.c: 1756: putsUSART(wrkbuf);
 21119  004A1A  0E01               	movlw	high _wrkbuf
 21120  004A1C  0100               	movlb	0	; () banked
 21121  004A1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21122  004A20  0E54               	movlw	low _wrkbuf
 21123  004A22  6F61               	movwf	?_putsUSART& (0+255),b
 21124  004A24  EC6E  F00E         	call	_putsUSART	;wreg free
 21125                           
 21126                           ;main.c: 1757: putsUSART((char *) ",size=");
 21127  004A28  0E7C               	movlw	high STR_151
 21128  004A2A  0100               	movlb	0	; () banked
 21129  004A2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21130  004A2E  0E3A               	movlw	low STR_151
 21131  004A30  6F61               	movwf	?_putsUSART& (0+255),b
 21132  004A32  EC6E  F00E         	call	_putsUSART	;wreg free
 21133                           
 21134                           ;main.c: 1758: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21135  004A36  0101               	movlb	1	; () banked
 21136  004A38  6700               	tstfsz	_bHex& (0+255),b
 21137  004A3A  D005               	goto	l11205
 21138                           
 21139                           ; BSR set to: 1
 21140  004A3C  0E7C               	movlw	high STR_57
 21141  004A3E  0100               	movlb	0	; () banked
 21142  004A40  6FA2               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21143  004A42  0EED               	movlw	low STR_57
 21144  004A44  D004               	goto	L31
 21145  004A46                     l11205:
 21146                           
 21147                           ; BSR set to: 1
 21148  004A46  0E7C               	movlw	high STR_56
 21149  004A48  0100               	movlb	0	; () banked
 21150  004A4A  6FA2               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 21151  004A4C  0E64               	movlw	low STR_56
 21152  004A4E                     L31:
 21153  004A4E  6FA1               	movwf	_receivePrintEventVerbose$1293& (0+255),b
 21154                           
 21155                           ; BSR set to: 0
 21156  004A50  0E01               	movlw	high _wrkbuf
 21157  004A52  0100               	movlb	0	; () banked
 21158  004A54  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21159  004A56  0E54               	movlw	low _wrkbuf
 21160  004A58  6F76               	movwf	?_sprintf& (0+255),b
 21161  004A5A  C0A1  F078         	movff	_receivePrintEventVerbose$1293,?_sprintf+2
 21162  004A5E  C0A2  F079         	movff	_receivePrintEventVerbose$1293+1,?_sprintf+3
 21163  004A62  C1B0  F07A         	movff	_vscpSize,?_sprintf+4
 21164  004A66  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21165  004A68  ECC8  F028         	call	_sprintf	;wreg free
 21166                           
 21167                           ; BSR set to: 0
 21168                           ;main.c: 1759: putsUSART(wrkbuf);
 21169  004A6C  0E01               	movlw	high _wrkbuf
 21170  004A6E  0100               	movlb	0	; () banked
 21171  004A70  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21172  004A72  0E54               	movlw	low _wrkbuf
 21173  004A74  6F61               	movwf	?_putsUSART& (0+255),b
 21174  004A76  EC6E  F00E         	call	_putsUSART	;wreg free
 21175                           
 21176                           ;main.c: 1760: if (vscpSize > 0) {
 21177  004A7A  0101               	movlb	1	; () banked
 21178  004A7C  51B0               	movf	_vscpSize& (0+255),w,b
 21179  004A7E  E054               	bz	l11233
 21180                           
 21181                           ; BSR set to: 1
 21182                           ;main.c: 1761: putsUSART((char *) ",Data=");
 21183  004A80  0E7C               	movlw	high STR_154
 21184  004A82  0100               	movlb	0	; () banked
 21185  004A84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21186  004A86  0E2C               	movlw	low STR_154
 21187  004A88  6F61               	movwf	?_putsUSART& (0+255),b
 21188  004A8A  EC6E  F00E         	call	_putsUSART	;wreg free
 21189                           
 21190                           ;main.c: 1762: for (i = 0; i < vscpSize; i++) {
 21191  004A8E  0100               	movlb	0	; () banked
 21192  004A90  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21193  004A92  D044               	goto	l11231
 21194  004A94                     l907:
 21195                           
 21196                           ; BSR set to: 0
 21197                           ;main.c: 1764: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21198  004A94  0101               	movlb	1	; () banked
 21199  004A96  6700               	tstfsz	_bHex& (0+255),b
 21200  004A98  D005               	goto	l11219
 21201                           
 21202                           ; BSR set to: 1
 21203  004A9A  0E7C               	movlw	high STR_57
 21204  004A9C  0100               	movlb	0	; () banked
 21205  004A9E  6FA4               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21206  004AA0  0EED               	movlw	low STR_57
 21207  004AA2  D004               	goto	L32
 21208  004AA4                     l11219:
 21209                           
 21210                           ; BSR set to: 1
 21211  004AA4  0E7C               	movlw	high STR_56
 21212  004AA6  0100               	movlb	0	; () banked
 21213  004AA8  6FA4               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 21214  004AAA  0E64               	movlw	low STR_56
 21215  004AAC                     L32:
 21216  004AAC  6FA3               	movwf	_receivePrintEventVerbose$1298& (0+255),b
 21217                           
 21218                           ; BSR set to: 0
 21219  004AAE  0E01               	movlw	high _wrkbuf
 21220  004AB0  0100               	movlb	0	; () banked
 21221  004AB2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21222  004AB4  0E54               	movlw	low _wrkbuf
 21223  004AB6  6F76               	movwf	?_sprintf& (0+255),b
 21224  004AB8  C0A3  F078         	movff	_receivePrintEventVerbose$1298,?_sprintf+2
 21225  004ABC  C0A4  F079         	movff	_receivePrintEventVerbose$1298+1,?_sprintf+3
 21226  004AC0  0EA4               	movlw	low _vscpData
 21227  004AC2  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21228  004AC4  6ED9               	movwf	fsr2l,c
 21229  004AC6  6ADA               	clrf	fsr2h,c
 21230  004AC8  0E01               	movlw	high _vscpData
 21231  004ACA  22DA               	addwfc	fsr2h,f,c
 21232  004ACC  50DF               	movf	indf2,w,c
 21233  004ACE  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21234  004AD0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21235  004AD2  ECC8  F028         	call	_sprintf	;wreg free
 21236                           
 21237                           ; BSR set to: 0
 21238                           ;main.c: 1765: putsUSART(wrkbuf);
 21239  004AD6  0E01               	movlw	high _wrkbuf
 21240  004AD8  0100               	movlb	0	; () banked
 21241  004ADA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21242  004ADC  0E54               	movlw	low _wrkbuf
 21243  004ADE  6F61               	movwf	?_putsUSART& (0+255),b
 21244  004AE0  EC6E  F00E         	call	_putsUSART	;wreg free
 21245                           
 21246                           ;main.c: 1766: if (i < (vscpSize - 1)) {
 21247  004AE4  0EFF               	movlw	255
 21248  004AE6  0101               	movlb	1	; () banked
 21249  004AE8  25B0               	addwf	_vscpSize& (0+255),w,b
 21250  004AEA  0100               	movlb	0	; () banked
 21251  004AEC  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21252  004AEE  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21253  004AF0  0EFF               	movlw	255
 21254  004AF2  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21255  004AF4  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21256  004AF6  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21257  004AF8  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21258  004AFA  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21259  004AFC  0A80               	xorlw	128
 21260  004AFE  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21261  004B00  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21262  004B02  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21263  004B04  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21264  004B06  0A80               	xorlw	128
 21265  004B08  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21266  004B0A  E206               	bc	l11229
 21267                           
 21268                           ; BSR set to: 0
 21269                           ;main.c: 1767: putsUSART((char *) ",");
 21270  004B0C  0E7C               	movlw	high STR_30
 21271  004B0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21272  004B10  0EF4               	movlw	low STR_30
 21273  004B12  6F61               	movwf	?_putsUSART& (0+255),b
 21274  004B14  EC6E  F00E         	call	_putsUSART	;wreg free
 21275  004B18                     l11229:
 21276  004B18  0100               	movlb	0	; () banked
 21277  004B1A  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21278  004B1C                     l11231:
 21279                           
 21280                           ; BSR set to: 0
 21281  004B1C  0101               	movlb	1	; () banked
 21282  004B1E  51B0               	movf	_vscpSize& (0+255),w,b
 21283  004B20  0100               	movlb	0	; () banked
 21284  004B22  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21285  004B24  E208               	bc	l914
 21286  004B26  D7B6               	goto	l907
 21287  004B28                     l11233:
 21288                           
 21289                           ; BSR set to: 1
 21290                           ;main.c: 1771: putsUSART((char *) ",Data=none");
 21291  004B28  0E7B               	movlw	high STR_158
 21292  004B2A  0100               	movlb	0	; () banked
 21293  004B2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21294  004B2E  0E91               	movlw	low STR_158
 21295  004B30  6F61               	movwf	?_putsUSART& (0+255),b
 21296  004B32  EC6E  F00E         	call	_putsUSART	;wreg free
 21297  004B36                     l914:
 21298                           
 21299                           ;main.c: 1772: }
 21300                           ;main.c: 1773: putsUSART((char *) ">\r\n");
 21301  004B36  0E7C               	movlw	high STR_159
 21302  004B38  0100               	movlb	0	; () banked
 21303  004B3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21304  004B3C  0ED4               	movlw	low STR_159
 21305  004B3E  6F61               	movwf	?_putsUSART& (0+255),b
 21306  004B40  EC6E  F00E         	call	_putsUSART	;wreg free
 21307                           
 21308                           ;main.c: 1774: return 1;
 21309  004B44  0E01               	movlw	1
 21310  004B46  D001               	goto	l915
 21311  004B48                     l11239:
 21312                           
 21313                           ; BSR set to: 0
 21314                           ;main.c: 1775: }
 21315                           ;main.c: 1777: return 0;
 21316  004B48  0E00               	movlw	0
 21317  004B4A                     l915:
 21318  004B4A  0012               	return	
 21319  004B4C                     __end_of_receivePrintEventVerbose:
 21320                           	opt stack 0
 21321                           tblptru	equ	0xFF8
 21322                           tblptrh	equ	0xFF7
 21323                           tblptrl	equ	0xFF6
 21324                           tablat	equ	0xFF5
 21325                           prodh	equ	0xFF4
 21326                           prodl	equ	0xFF3
 21327                           intcon	equ	0xFF2
 21328                           indf0	equ	0xFEF
 21329                           postinc0	equ	0xFEE
 21330                           fsr0h	equ	0xFEA
 21331                           fsr0l	equ	0xFE9
 21332                           wreg	equ	0xFE8
 21333                           indf1	equ	0xFE7
 21334                           postinc1	equ	0xFE6
 21335                           postdec1	equ	0xFE5
 21336                           fsr1h	equ	0xFE2
 21337                           fsr1l	equ	0xFE1
 21338                           indf2	equ	0xFDF
 21339                           postinc2	equ	0xFDE
 21340                           postdec2	equ	0xFDD
 21341                           plusw2	equ	0xFDB
 21342                           fsr2h	equ	0xFDA
 21343                           fsr2l	equ	0xFD9
 21344                           status	equ	0xFD8
 21345                           
 21346 ;; *************** function _getVSCPFrame *****************
 21347 ;; Defined at:
 21348 ;;		line 2938 in file "main.c"
 21349 ;; Parameters:    Size  Location     Type
 21350 ;;  pvscpclass      2   18[BANK0 ] PTR unsigned short 
 21351 ;;		 -> vscpClass(2), 
 21352 ;;  pvscptype       2   20[BANK0 ] PTR unsigned char 
 21353 ;;		 -> vscpType(1), 
 21354 ;;  pNodeId         2   22[BANK0 ] PTR unsigned char 
 21355 ;;		 -> vscpNodeId(1), 
 21356 ;;  pPriority       2   24[BANK0 ] PTR unsigned char 
 21357 ;;		 -> vscpPriority(1), 
 21358 ;;  pSize           2   26[BANK0 ] PTR unsigned char 
 21359 ;;		 -> vscpSize(1), 
 21360 ;;  pData           2   28[BANK0 ] PTR unsigned char 
 21361 ;;		 -> vscpData(8), 
 21362 ;; Auto vars:     Size  Location     Type
 21363 ;;  id              4   34[BANK0 ] unsigned long 
 21364 ;; Return value:  Size  Location     Type
 21365 ;;                  1    wreg      unsigned char 
 21366 ;; Registers used:
 21367 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21368 ;; Tracked objects:
 21369 ;;		On entry : F/0
 21370 ;;		On exit  : F/0
 21371 ;;		Unchanged: 0/0
 21372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21373 ;;      Params:         0      12       0       0       0       0       0
 21374 ;;      Locals:         0       4       0       0       0       0       0
 21375 ;;      Temps:          0       4       0       0       0       0       0
 21376 ;;      Totals:         0      20       0       0       0       0       0
 21377 ;;Total ram usage:       20 bytes
 21378 ;; Hardware stack levels used:    1
 21379 ;; Hardware stack levels required when called:    5
 21380 ;; This function calls:
 21381 ;;		_getCANFrame
 21382 ;; This function is called by:
 21383 ;;		_receivePrintEventVerbose
 21384 ;;		_readRegister
 21385 ;;		_readRegisterExtended
 21386 ;;		_writeRegisterExtended
 21387 ;; This function uses a non-reentrant model
 21388 ;;
 21389                           
 21390                           	psect	text53
 21391  002310                     __ptext53:
 21392                           	opt stack 0
 21393  002310                     _getVSCPFrame:
 21394                           	opt stack 21
 21395                           
 21396                           ; BSR set to: 0
 21397                           ;main.c: 2939: uint32_t id;
 21398                           ;main.c: 2941: if (!getCANFrame(&id, pSize, pData)) {
 21399                           
 21400                           ;incstack = 0
 21401                           ;incstack = 0
 21402  002310  C07A  F06D         	movff	getVSCPFrame@pSize,?_getCANFrame
 21403  002314  C07B  F06E         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 21404  002318  C07C  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21405  00231C  C07D  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21406  002320  0E82               	movlw	getVSCPFrame@id& (0+255)
 21407  002322  ECD0  F010         	call	_getCANFrame
 21408  002326  0900               	iorlw	0
 21409  002328  E102               	bnz	l12587
 21410                           
 21411                           ; BSR set to: 0
 21412                           ;main.c: 2942: return 0;
 21413  00232A  0E00               	movlw	0
 21414  00232C  D033               	goto	l1255
 21415  00232E                     l12587:
 21416                           
 21417                           ; BSR set to: 0
 21418                           ;main.c: 2943: }
 21419                           ;main.c: 2945: *pNodeId = id & 0x0ff;
 21420  00232E  C076  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 21421  002332  C077  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 21422  002336  C082  FFDF         	movff	getVSCPFrame@id,indf2
 21423                           
 21424                           ;main.c: 2946: *pvscptype = (id >> 8) & 0xff;
 21425  00233A  C074  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 21426  00233E  C075  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 21427  002342  C083  FFDF         	movff	getVSCPFrame@id+1,indf2
 21428                           
 21429                           ; BSR set to: 0
 21430                           ;main.c: 2947: *pvscpclass = (id >> 16) & 0x1ff;
 21431  002346  0100               	movlb	0	; () banked
 21432  002348  5184               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21433  00234A  6F7E               	movwf	??_getVSCPFrame& (0+255),b
 21434  00234C  0E01               	movlw	1
 21435  00234E  1585               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21436  002350  6F7F               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21437  002352  C072  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 21438  002356  C073  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 21439  00235A  C07E  FFDE         	movff	??_getVSCPFrame,postinc2
 21440  00235E  C07F  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21441                           
 21442                           ; BSR set to: 0
 21443                           ;main.c: 2948: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21444  002362  C082  F07E         	movff	getVSCPFrame@id,??_getVSCPFrame
 21445  002366  C083  F07F         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21446  00236A  C084  F080         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21447  00236E  C085  F081         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21448  002372  0E1B               	movlw	27
 21449  002374  D005               	goto	u16270
 21450  002376                     u16275:
 21451  002376  90D8               	bcf	status,0,c
 21452  002378  3381               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21453  00237A  3380               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21454  00237C  337F               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21455  00237E  337E               	rrcf	??_getVSCPFrame& (0+255),f,b
 21456  002380                     u16270:
 21457  002380  2EE8               	decfsz	wreg,f,c
 21458  002382  D7F9               	goto	u16275
 21459  002384  517E               	movf	??_getVSCPFrame& (0+255),w,b
 21460  002386  0B07               	andlw	7
 21461  002388  C078  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 21462  00238C  C079  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 21463  002390  6EDF               	movwf	indf2,c
 21464                           
 21465                           ; BSR set to: 0
 21466                           ;main.c: 2950: return 1;
 21467  002392  0E01               	movlw	1
 21468  002394                     l1255:
 21469                           
 21470                           ; BSR set to: 0
 21471  002394  0012               	return	
 21472  002396                     __end_of_getVSCPFrame:
 21473                           	opt stack 0
 21474                           tblptru	equ	0xFF8
 21475                           tblptrh	equ	0xFF7
 21476                           tblptrl	equ	0xFF6
 21477                           tablat	equ	0xFF5
 21478                           prodh	equ	0xFF4
 21479                           prodl	equ	0xFF3
 21480                           intcon	equ	0xFF2
 21481                           indf0	equ	0xFEF
 21482                           postinc0	equ	0xFEE
 21483                           fsr0h	equ	0xFEA
 21484                           fsr0l	equ	0xFE9
 21485                           wreg	equ	0xFE8
 21486                           indf1	equ	0xFE7
 21487                           postinc1	equ	0xFE6
 21488                           postdec1	equ	0xFE5
 21489                           fsr1h	equ	0xFE2
 21490                           fsr1l	equ	0xFE1
 21491                           indf2	equ	0xFDF
 21492                           postinc2	equ	0xFDE
 21493                           postdec2	equ	0xFDD
 21494                           plusw2	equ	0xFDB
 21495                           fsr2h	equ	0xFDA
 21496                           fsr2l	equ	0xFD9
 21497                           status	equ	0xFD8
 21498                           
 21499 ;; *************** function _getCANFrame *****************
 21500 ;; Defined at:
 21501 ;;		line 2974 in file "main.c"
 21502 ;; Parameters:    Size  Location     Type
 21503 ;;  pid             1    wreg     PTR unsigned long 
 21504 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21505 ;;  pdlc            2   13[BANK0 ] PTR unsigned char 
 21506 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21507 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21508 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21509 ;; Auto vars:     Size  Location     Type
 21510 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21511 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21512 ;; Return value:  Size  Location     Type
 21513 ;;                  1    wreg      unsigned char 
 21514 ;; Registers used:
 21515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21516 ;; Tracked objects:
 21517 ;;		On entry : F/0
 21518 ;;		On exit  : F/0
 21519 ;;		Unchanged: 0/0
 21520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21521 ;;      Params:         0       4       0       0       0       0       0
 21522 ;;      Locals:         0       1       0       0       0       0       0
 21523 ;;      Temps:          0       0       0       0       0       0       0
 21524 ;;      Totals:         0       5       0       0       0       0       0
 21525 ;;Total ram usage:        5 bytes
 21526 ;; Hardware stack levels used:    1
 21527 ;; Hardware stack levels required when called:    4
 21528 ;; This function calls:
 21529 ;;		_fifo_read
 21530 ;; This function is called by:
 21531 ;;		_receiveSendEventCANAL
 21532 ;;		_receiveSendMultiEventCANAL
 21533 ;;		_receiveSendEventSLCAN
 21534 ;;		_getVSCPFrame
 21535 ;; This function uses a non-reentrant model
 21536 ;;
 21537                           
 21538                           	psect	text54
 21539  0021A0                     __ptext54:
 21540                           	opt stack 0
 21541  0021A0                     _getCANFrame:
 21542                           	opt stack 23
 21543                           
 21544                           ; BSR set to: 0
 21545                           ;incstack = 0
 21546                           ;incstack = 0
 21547                           ;getCANFrame@pid stored from wreg
 21548  0021A0  CFE8 F071          	movff	wreg,getCANFrame@pid
 21549                           
 21550                           ; BSR set to: 0
 21551                           ;main.c: 2995: if ( canrxcount ) {
 21552  0021A4  51F0               	movf	_canrxcount& (0+255),w,b	;volatile
 21553  0021A6  E00F               	bz	l12605
 21554                           
 21555                           ; BSR set to: 0
 21556                           ;main.c: 2997: (INTCONbits.GIE = 0);
 21557  0021A8  9EF2               	bcf	intcon,7,c	;volatile
 21558                           
 21559                           ; BSR set to: 0
 21560                           ;main.c: 3000: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21561  0021AA  C071  F060         	movff	getCANFrame@pid,?_fifo_read
 21562  0021AE  6B61               	clrf	(?_fifo_read+1)& (0+255),b
 21563  0021B0  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21564  0021B2  0E04               	movlw	4
 21565  0021B4  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21566  0021B6  0E1B               	movlw	_canInputFifo& (0+255)
 21567  0021B8  EC8D  F015         	call	_fifo_read
 21568  0021BC  5160               	movf	?_fifo_read& (0+255),w,b
 21569  0021BE  0A04               	xorlw	4
 21570  0021C0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21571  0021C2  E003               	bz	l12609
 21572  0021C4                     l12603:
 21573                           
 21574                           ; BSR set to: 0
 21575                           ;main.c: 3001: (INTCONbits.GIE = 1);
 21576  0021C4  8EF2               	bsf	intcon,7,c	;volatile
 21577  0021C6                     l12605:
 21578                           
 21579                           ; BSR set to: 0
 21580                           ;main.c: 3002: return 0;
 21581  0021C6  0E00               	movlw	0
 21582  0021C8  D026               	goto	l1264
 21583  0021CA                     l12609:
 21584                           
 21585                           ; BSR set to: 0
 21586                           ;main.c: 3003: }
 21587                           ;main.c: 3006: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21588  0021CA  C06D  F060         	movff	getCANFrame@pdlc,?_fifo_read
 21589  0021CE  C06E  F061         	movff	getCANFrame@pdlc+1,?_fifo_read+1
 21590  0021D2  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21591  0021D4  0E01               	movlw	1
 21592  0021D6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21593  0021D8  0E1B               	movlw	_canInputFifo& (0+255)
 21594  0021DA  EC8D  F015         	call	_fifo_read
 21595  0021DE  0560               	decf	?_fifo_read& (0+255),w,b
 21596  0021E0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21597  0021E2  E1F0               	bnz	l12603
 21598                           
 21599                           ; BSR set to: 0
 21600                           ;main.c: 3009: }
 21601                           ;main.c: 3012: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21602  0021E4  C06F  F060         	movff	getCANFrame@pdata,?_fifo_read
 21603  0021E8  C070  F061         	movff	getCANFrame@pdata+1,?_fifo_read+1
 21604  0021EC  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21605  0021F0  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21606  0021F4  50DF               	movf	indf2,w,c
 21607  0021F6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21608  0021F8  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21609  0021FA  0E1B               	movlw	_canInputFifo& (0+255)
 21610  0021FC  EC8D  F015         	call	_fifo_read
 21611  002200  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21612  002204  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21613  002208  50DF               	movf	indf2,w,c
 21614  00220A  1960               	xorwf	?_fifo_read& (0+255),w,b
 21615  00220C  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21616  00220E  E1DA               	bnz	l12603
 21617                           
 21618                           ; BSR set to: 0
 21619                           ;main.c: 3015: }
 21620                           ;main.c: 3017: canrxcount--;
 21621  002210  07F0               	decf	_canrxcount& (0+255),f,b	;volatile
 21622                           
 21623                           ; BSR set to: 0
 21624                           ;main.c: 3019: (INTCONbits.GIE = 1);
 21625  002212  8EF2               	bsf	intcon,7,c	;volatile
 21626                           
 21627                           ; BSR set to: 0
 21628                           ;main.c: 3021: return 1;
 21629  002214  0E01               	movlw	1
 21630  002216                     l1264:
 21631                           
 21632                           ; BSR set to: 0
 21633  002216  0012               	return	
 21634  002218                     __end_of_getCANFrame:
 21635                           	opt stack 0
 21636                           tblptru	equ	0xFF8
 21637                           tblptrh	equ	0xFF7
 21638                           tblptrl	equ	0xFF6
 21639                           tablat	equ	0xFF5
 21640                           prodh	equ	0xFF4
 21641                           prodl	equ	0xFF3
 21642                           intcon	equ	0xFF2
 21643                           indf0	equ	0xFEF
 21644                           postinc0	equ	0xFEE
 21645                           fsr0h	equ	0xFEA
 21646                           fsr0l	equ	0xFE9
 21647                           wreg	equ	0xFE8
 21648                           indf1	equ	0xFE7
 21649                           postinc1	equ	0xFE6
 21650                           postdec1	equ	0xFE5
 21651                           fsr1h	equ	0xFE2
 21652                           fsr1l	equ	0xFE1
 21653                           indf2	equ	0xFDF
 21654                           postinc2	equ	0xFDE
 21655                           postdec2	equ	0xFDD
 21656                           plusw2	equ	0xFDB
 21657                           fsr2h	equ	0xFDA
 21658                           fsr2l	equ	0xFD9
 21659                           status	equ	0xFD8
 21660                           
 21661 ;; *************** function _fifo_read *****************
 21662 ;; Defined at:
 21663 ;;		line 29 in file "fifo.c"
 21664 ;; Parameters:    Size  Location     Type
 21665 ;;  f               1    wreg     PTR struct .
 21666 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21667 ;;  buf             2    0[BANK0 ] PTR void 
 21668 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21669 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21670 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21671 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21672 ;;  nbytes          2    2[BANK0 ] unsigned short 
 21673 ;; Auto vars:     Size  Location     Type
 21674 ;;  f               1   12[BANK0 ] PTR struct .
 21675 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21676 ;;  i               2   10[BANK0 ] unsigned short 
 21677 ;;  p               2    8[BANK0 ] PTR unsigned char 
 21678 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21679 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21680 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21681 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21682 ;; Return value:  Size  Location     Type
 21683 ;;                  2    0[BANK0 ] unsigned short 
 21684 ;; Registers used:
 21685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21686 ;; Tracked objects:
 21687 ;;		On entry : F/0
 21688 ;;		On exit  : F/0
 21689 ;;		Unchanged: 0/0
 21690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21691 ;;      Params:         0       4       0       0       0       0       0
 21692 ;;      Locals:         0       5       0       0       0       0       0
 21693 ;;      Temps:          0       4       0       0       0       0       0
 21694 ;;      Totals:         0      13       0       0       0       0       0
 21695 ;;Total ram usage:       13 bytes
 21696 ;; Hardware stack levels used:    1
 21697 ;; Hardware stack levels required when called:    3
 21698 ;; This function calls:
 21699 ;;		Nothing
 21700 ;; This function is called by:
 21701 ;;		_main
 21702 ;;		_doModeVerbose
 21703 ;;		_doModeVscp
 21704 ;;		_doModeSLCAN
 21705 ;;		_getCANFrame
 21706 ;; This function uses a non-reentrant model
 21707 ;;
 21708                           
 21709                           	psect	text55
 21710  002B1A                     __ptext55:
 21711                           	opt stack 0
 21712  002B1A                     _fifo_read:
 21713                           	opt stack 23
 21714                           
 21715                           ; BSR set to: 0
 21716                           ;incstack = 0
 21717                           ;incstack = 0
 21718                           ;fifo_read@f stored from wreg
 21719  002B1A  CFE8 F06C          	movff	wreg,fifo_read@f
 21720                           
 21721                           ; BSR set to: 0
 21722                           ;fifo.c: 30: uint16_t i;
 21723                           ;fifo.c: 31: uint8_t *p;
 21724                           ;fifo.c: 32: p = buf;
 21725  002B1E  C060  F068         	movff	fifo_read@buf,fifo_read@p
 21726  002B22  C061  F069         	movff	fifo_read@buf+1,fifo_read@p+1
 21727                           
 21728                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21729  002B26  6B6A               	clrf	fifo_read@i& (0+255),b
 21730  002B28  6B6B               	clrf	(fifo_read@i+1)& (0+255),b
 21731  002B2A  D03E               	goto	l10045
 21732  002B2C                     l10031:
 21733                           
 21734                           ; BSR set to: 0
 21735                           ;fifo.c: 36: if (f->tail != f->head) {
 21736  002B2C  516C               	movf	fifo_read@f& (0+255),w,b
 21737  002B2E  6ED9               	movwf	fsr2l,c
 21738  002B30  6ADA               	clrf	fsr2h,c
 21739  002B32  0E02               	movlw	2
 21740  002B34  D843               	call	PL34	;call to abstracted procedure
 21741  002B36  B4D8               	btfsc	status,2,c
 21742  002B38  18E7               	xorwf	indf1,w,c
 21743  002B3A  E02F               	bz	l1514
 21744                           
 21745                           ; BSR set to: 0
 21746                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21747  002B3C  D84E               	call	PL104	;call to abstracted procedure
 21748  002B3E  CFDE F064          	movff	postinc2,??_fifo_read
 21749  002B42  CFDD F065          	movff	postdec2,??_fifo_read+1
 21750  002B46  516C               	movf	fifo_read@f& (0+255),w,b
 21751  002B48  6ED9               	movwf	fsr2l,c
 21752  002B4A  6ADA               	clrf	fsr2h,c
 21753  002B4C  CFDE F066          	movff	postinc2,??_fifo_read+2
 21754  002B50  CFDD F067          	movff	postdec2,??_fifo_read+3
 21755  002B54  5164               	movf	??_fifo_read& (0+255),w,b
 21756  002B56  2566               	addwf	(??_fifo_read+2)& (0+255),w,b
 21757  002B58  6ED9               	movwf	fsr2l,c
 21758  002B5A  5165               	movf	(??_fifo_read+1)& (0+255),w,b
 21759  002B5C  2167               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21760  002B5E  6EDA               	movwf	fsr2h,c
 21761  002B60  C068  FFE1         	movff	fifo_read@p,fsr1l
 21762  002B64  C069  FFE2         	movff	fifo_read@p+1,fsr1h
 21763  002B68  CFDF FFE7          	movff	indf2,indf1
 21764                           
 21765                           ; BSR set to: 0
 21766  002B6C  4B68               	infsnz	fifo_read@p& (0+255),f,b
 21767  002B6E  2B69               	incf	(fifo_read@p+1)& (0+255),f,b
 21768                           
 21769                           ; BSR set to: 0
 21770                           ;fifo.c: 38: f->tail++;
 21771  002B70  516C               	movf	fifo_read@f& (0+255),w,b
 21772  002B72  6ED9               	movwf	fsr2l,c
 21773  002B74  6ADA               	clrf	fsr2h,c
 21774  002B76  0E04               	movlw	4
 21775  002B78  26D9               	addwf	fsr2l,f,c
 21776  002B7A  6ADA               	clrf	fsr2h,c
 21777  002B7C  2ADE               	incf	postinc2,f,c
 21778  002B7E  0E00               	movlw	0
 21779  002B80  22DD               	addwfc	postdec2,f,c
 21780                           
 21781                           ; BSR set to: 0
 21782                           ;fifo.c: 39: if (f->tail == f->size) {
 21783  002B82  516C               	movf	fifo_read@f& (0+255),w,b
 21784  002B84  6ED9               	movwf	fsr2l,c
 21785  002B86  6ADA               	clrf	fsr2h,c
 21786  002B88  0E06               	movlw	6
 21787  002B8A  D818               	call	PL34	;call to abstracted procedure
 21788  002B8C  B4D8               	btfsc	status,2,c
 21789  002B8E  18E7               	xorwf	indf1,w,c
 21790  002B90  E109               	bnz	l10043
 21791                           
 21792                           ; BSR set to: 0
 21793                           ;fifo.c: 40: f->tail = 0;
 21794  002B92  D823               	call	PL104	;call to abstracted procedure
 21795  002B94  6ADE               	clrf	postinc2,c
 21796  002B96  6ADD               	clrf	postdec2,c
 21797  002B98  D005               	goto	l10043
 21798  002B9A                     l1514:
 21799                           
 21800                           ; BSR set to: 0
 21801                           ;fifo.c: 43: else {
 21802                           ;fifo.c: 44: return i;
 21803  002B9A  C06A  F060         	movff	fifo_read@i,?_fifo_read
 21804  002B9E  C06B  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21805  002BA2  D00B               	goto	l1517
 21806  002BA4                     l10043:
 21807                           
 21808                           ; BSR set to: 0
 21809  002BA4  4B6A               	infsnz	fifo_read@i& (0+255),f,b
 21810  002BA6  2B6B               	incf	(fifo_read@i+1)& (0+255),f,b
 21811  002BA8                     l10045:
 21812                           
 21813                           ; BSR set to: 0
 21814  002BA8  5162               	movf	fifo_read@nbytes& (0+255),w,b
 21815  002BAA  5D6A               	subwf	fifo_read@i& (0+255),w,b
 21816  002BAC  5163               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21817  002BAE  596B               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21818  002BB0  E3BD               	bnc	l10031
 21819                           
 21820                           ; BSR set to: 0
 21821                           ;fifo.c: 45: }
 21822                           ;fifo.c: 47: }
 21823                           ;fifo.c: 49: return nbytes;
 21824  002BB2  C062  F060         	movff	fifo_read@nbytes,?_fifo_read
 21825  002BB6  C063  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21826  002BBA                     l1517:
 21827                           
 21828                           ; BSR set to: 0
 21829  002BBA  0012               	return	
 21830  002BBC                     __end_of_fifo_read:
 21831                           	opt stack 0
 21832  002BBC                     PL34:
 21833                           	opt stack 23
 21834  002BBC  26D9               	addwf	fsr2l,f,c
 21835  002BBE  6ADA               	clrf	fsr2h,c
 21836  002BC0  516C               	movf	fifo_read@f& (0+255),w,b
 21837  002BC2  6EE1               	movwf	fsr1l,c
 21838  002BC4  6AE2               	clrf	fsr1h,c
 21839  002BC6  0E04               	movlw	4
 21840  002BC8  26E1               	addwf	fsr1l,f,c
 21841  002BCA  6AE2               	clrf	fsr1h,c
 21842  002BCC  52E6               	movf	postinc1,f,c
 21843  002BCE  52DE               	movf	postinc2,f,c
 21844  002BD0  50DD               	movf	postdec2,w,c
 21845  002BD2  18E5               	xorwf	postdec1,w,c
 21846  002BD4  CFDF FFE8          	movff	indf2,wreg
 21847  002BD8  0012               	return	
 21848  002BDA                     __end_ofPL34:
 21849                           	opt stack 0
 21850  002BDA                     PL104:
 21851                           	opt stack 23
 21852  002BDA  516C               	movf	fifo_read@f& (0+255),w,b
 21853  002BDC  6ED9               	movwf	fsr2l,c
 21854  002BDE  6ADA               	clrf	fsr2h,c
 21855  002BE0  0E04               	movlw	4
 21856  002BE2  26D9               	addwf	fsr2l,f,c
 21857  002BE4  6ADA               	clrf	fsr2h,c
 21858  002BE6  0012               	return	
 21859  002BE8                     __end_ofPL104:
 21860                           	opt stack 0
 21861                           tblptru	equ	0xFF8
 21862                           tblptrh	equ	0xFF7
 21863                           tblptrl	equ	0xFF6
 21864                           tablat	equ	0xFF5
 21865                           prodh	equ	0xFF4
 21866                           prodl	equ	0xFF3
 21867                           intcon	equ	0xFF2
 21868                           indf0	equ	0xFEF
 21869                           postinc0	equ	0xFEE
 21870                           fsr0h	equ	0xFEA
 21871                           fsr0l	equ	0xFE9
 21872                           wreg	equ	0xFE8
 21873                           indf1	equ	0xFE7
 21874                           postinc1	equ	0xFE6
 21875                           postdec1	equ	0xFE5
 21876                           fsr1h	equ	0xFE2
 21877                           fsr1l	equ	0xFE1
 21878                           indf2	equ	0xFDF
 21879                           postinc2	equ	0xFDE
 21880                           postdec2	equ	0xFDD
 21881                           plusw2	equ	0xFDB
 21882                           fsr2h	equ	0xFDA
 21883                           fsr2l	equ	0xFD9
 21884                           status	equ	0xFD8
 21885                           
 21886 ;; *************** function _sprintf *****************
 21887 ;; Defined at:
 21888 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21889 ;; Parameters:    Size  Location     Type
 21890 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21891 ;;		 -> wrkbuf(80), 
 21892 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21893 ;;		 -> STR_201(3), STR_200(7), STR_194(3), STR_193(7), 
 21894 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 21895 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21896 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 21897 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21898 ;;		 -> STR_156(3), STR_155(7), STR_153(3), STR_152(7), 
 21899 ;;		 -> STR_150(3), STR_149(7), STR_147(3), STR_146(7), 
 21900 ;;		 -> STR_144(3), STR_143(7), STR_141(3), STR_140(7), 
 21901 ;;		 -> STR_84(3), STR_83(7), STR_68(3), STR_67(7), 
 21902 ;;		 -> STR_66(3), STR_65(7), STR_62(3), STR_61(7), 
 21903 ;;		 -> STR_59(3), STR_58(7), STR_57(3), STR_56(7), 
 21904 ;; Auto vars:     Size  Location     Type
 21905 ;;  idx             1   33[BANK0 ] unsigned char 
 21906 ;;  _val            4   45[BANK0 ] struct .
 21907 ;;  flag            2   50[BANK0 ] unsigned short 
 21908 ;;  width           2   43[BANK0 ] int 
 21909 ;;  prec            2   41[BANK0 ] int 
 21910 ;;  c               1   49[BANK0 ] char 
 21911 ;;  ap              1   40[BANK0 ] PTR void [1]
 21912 ;;		 -> ?_sprintf(2), 
 21913 ;; Return value:  Size  Location     Type
 21914 ;;                  2   22[BANK0 ] int 
 21915 ;; Registers used:
 21916 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21917 ;; Tracked objects:
 21918 ;;		On entry : F/0
 21919 ;;		On exit  : F/0
 21920 ;;		Unchanged: 0/0
 21921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21922 ;;      Params:         0       8       0       0       0       0       0
 21923 ;;      Locals:         0      19       0       0       0       0       0
 21924 ;;      Temps:          0       3       0       0       0       0       0
 21925 ;;      Totals:         0      30       0       0       0       0       0
 21926 ;;Total ram usage:       30 bytes
 21927 ;; Hardware stack levels used:    1
 21928 ;; Hardware stack levels required when called:    4
 21929 ;; This function calls:
 21930 ;;		_isdigit
 21931 ;;		___lldiv
 21932 ;;		___llmod
 21933 ;;		___wmul
 21934 ;; This function is called by:
 21935 ;;		_doModeVerbose
 21936 ;;		_receivePrintEventVerbose
 21937 ;;		_printStatistics
 21938 ;;		_printErrors
 21939 ;; This function uses a non-reentrant model
 21940 ;;
 21941                           
 21942                           	psect	text56
 21943  005190                     __ptext56:
 21944                           	opt stack 0
 21945  005190                     _sprintf:
 21946                           	opt stack 24
 21947                           
 21948                           ; BSR set to: 0
 21949                           ;doprnt.c: 494: va_list ap;
 21950                           ;doprnt.c: 499: signed char c;
 21951                           ;doprnt.c: 501: int width;
 21952                           ;doprnt.c: 504: int prec;
 21953                           ;doprnt.c: 508: unsigned short flag;
 21954                           ;doprnt.c: 527: union {
 21955                           ;doprnt.c: 528: unsigned long _val;
 21956                           ;doprnt.c: 529: struct {
 21957                           ;doprnt.c: 530: const char * _cp;
 21958                           ;doprnt.c: 531: unsigned _len;
 21959                           ;doprnt.c: 532: } _str;
 21960                           ;doprnt.c: 533: } _val;
 21961                           ;doprnt.c: 542: *ap = __va_start();
 21962                           
 21963                           ; BSR set to: 0
 21964                           ;incstack = 0
 21965                           ;incstack = 0
 21966  005190  0E7A               	movlw	low (?_sprintf+4)
 21967  005192  6F88               	movwf	sprintf@ap& (0+255),b
 21968                           
 21969                           ;doprnt.c: 545: while(c = *f++) {
 21970  005194  D32C               	goto	l11929
 21971  005196                     l11595:
 21972                           
 21973                           ; BSR set to: 0
 21974                           ;doprnt.c: 547: if(c != '%')
 21975  005196  5191               	movf	sprintf@c& (0+255),w,b
 21976  005198  0A25               	xorlw	37
 21977  00519A  E009               	bz	l1622
 21978                           
 21979                           ; BSR set to: 0
 21980                           ;doprnt.c: 549: {
 21981                           ;doprnt.c: 550: ((*sp++ = (c)));
 21982  00519C  C076  FFD9         	movff	sprintf@sp,fsr2l
 21983  0051A0  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21984  0051A4  C091  FFDF         	movff	sprintf@c,indf2
 21985                           
 21986                           ; BSR set to: 0
 21987  0051A8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21988  0051AA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21989                           
 21990                           ;doprnt.c: 551: continue;
 21991  0051AC  D320               	goto	l11929
 21992  0051AE                     l1622:
 21993                           
 21994                           ; BSR set to: 0
 21995                           ;doprnt.c: 552: }
 21996                           ;doprnt.c: 555: width = 0;
 21997  0051AE  6B8B               	clrf	sprintf@width& (0+255),b
 21998  0051B0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21999                           
 22000                           ;doprnt.c: 557: flag = 0;
 22001  0051B2  6B92               	clrf	sprintf@flag& (0+255),b
 22002  0051B4  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22003  0051B6  D009               	goto	l11611
 22004  0051B8                     l11601:
 22005                           
 22006                           ; BSR set to: 0
 22007                           ;doprnt.c: 563: flag |= 0x08;
 22008  0051B8  8792               	bsf	sprintf@flag& (0+255),3,b
 22009  0051BA  D005               	goto	L33
 22010  0051BC                     l11603:
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;doprnt.c: 570: flag |= 0x01;
 22014  0051BC  8192               	bsf	sprintf@flag& (0+255),0,b
 22015  0051BE  D003               	goto	L33
 22016  0051C0                     l11605:
 22017                           
 22018                           ; BSR set to: 0
 22019                           ;doprnt.c: 583: flag |= 0x800;
 22020  0051C0  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22021  0051C2  D001               	goto	L33
 22022  0051C4                     l11607:
 22023                           
 22024                           ; BSR set to: 0
 22025                           ;doprnt.c: 589: flag |= 0x04;
 22026  0051C4  8592               	bsf	sprintf@flag& (0+255),2,b
 22027  0051C6                     L33:
 22028                           
 22029                           ;doprnt.c: 590: f++;
 22030  0051C6  4B78               	infsnz	sprintf@f& (0+255),f,b
 22031  0051C8  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22032  0051CA                     l11611:
 22033                           
 22034                           ; BSR set to: 0
 22035  0051CA  C078  FFF6         	movff	sprintf@f,tblptrl
 22036  0051CE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22037  0051D2  0008               	tblrd		*
 22038  0051D4  50F5               	movf	tablat,w,c
 22039                           
 22040                           ; Switch size 1, requested type "space"
 22041                           ; Number of cases is 4, Range of values is 32 to 48
 22042                           ; switch strategies available:
 22043                           ; Name         Instructions Cycles
 22044                           ; simple_byte           13     7 (average)
 22045                           ;	Chosen strategy is simple_byte
 22046  0051D6  0A20               	xorlw	32	; case 32
 22047  0051D8  E0F1               	bz	l11603
 22048  0051DA  0A03               	xorlw	3	; case 35
 22049  0051DC  E0F1               	bz	l11605
 22050  0051DE  0A0E               	xorlw	14	; case 45
 22051  0051E0  E0EB               	bz	l11601
 22052  0051E2  0A1D               	xorlw	29	; case 48
 22053  0051E4  E0EF               	bz	l11607
 22054                           
 22055                           ; BSR set to: 0
 22056                           ;doprnt.c: 602: if(flag & 0x08)
 22057  0051E6  B792               	btfsc	sprintf@flag& (0+255),3,b
 22058                           
 22059                           ; BSR set to: 0
 22060                           ;doprnt.c: 603: flag &= ~0x04;
 22061  0051E8  9592               	bcf	sprintf@flag& (0+255),2,b
 22062                           
 22063                           ; BSR set to: 0
 22064                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22065  0051EA  C078  FFF6         	movff	sprintf@f,tblptrl
 22066  0051EE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22067  0051F2  0008               	tblrd		*
 22068  0051F4  50F5               	movf	tablat,w,c
 22069  0051F6  EC01  F00C         	call	_isdigit
 22070  0051FA  E325               	bnc	l11627
 22071                           
 22072                           ; BSR set to: 0
 22073                           ;doprnt.c: 607: width = 0;
 22074  0051FC  6B8B               	clrf	sprintf@width& (0+255),b
 22075  0051FE  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22076  005200                     l11619:
 22077                           
 22078                           ; BSR set to: 0
 22079                           ;doprnt.c: 609: width *= 10;
 22080  005200  C08B  F060         	movff	sprintf@width,?___wmul
 22081  005204  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22082  005208  6B63               	clrf	(?___wmul+3)& (0+255),b
 22083  00520A  0E0A               	movlw	10
 22084  00520C  6F62               	movwf	(?___wmul+2)& (0+255),b
 22085  00520E  EC6A  F00C         	call	___wmul	;wreg free
 22086  005212  C060  F08B         	movff	?___wmul,sprintf@width
 22087  005216  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22088                           
 22089                           ; BSR set to: 0
 22090                           ;doprnt.c: 610: width += *f++ - '0';
 22091  00521A  C078  FFF6         	movff	sprintf@f,tblptrl
 22092  00521E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22093  005222  0008               	tblrd		*
 22094  005224  CFF5 F07E          	movff	tablat,??_sprintf
 22095  005228  0ED0               	movlw	208
 22096  00522A  257E               	addwf	??_sprintf& (0+255),w,b
 22097  00522C  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22098  00522E  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22099  005230  0EFF               	movlw	255
 22100  005232  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22101  005234  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22102  005236  278B               	addwf	sprintf@width& (0+255),f,b
 22103  005238  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22104  00523A  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22105                           
 22106                           ; BSR set to: 0
 22107                           
 22108                           ; BSR set to: 0
 22109                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22110  00523C  DB36               	call	PL86	;call to abstracted procedure
 22111  00523E  EC01  F00C         	call	_isdigit
 22112  005242  E314               	bnc	l11635
 22113  005244  D7DD               	goto	l11619
 22114  005246                     l11627:
 22115                           
 22116                           ; BSR set to: 0
 22117  005246  C078  FFF6         	movff	sprintf@f,tblptrl
 22118  00524A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22119  00524E  0008               	tblrd		*
 22120  005250  50F5               	movf	tablat,w,c
 22121  005252  0A2A               	xorlw	42
 22122  005254  E10B               	bnz	l11635
 22123                           
 22124                           ; BSR set to: 0
 22125                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22126  005256  5188               	movf	sprintf@ap& (0+255),w,b
 22127  005258  6ED9               	movwf	fsr2l,c
 22128  00525A  6ADA               	clrf	fsr2h,c
 22129  00525C  CFDE F08B          	movff	postinc2,sprintf@width
 22130  005260  CFDD F08C          	movff	postdec2,sprintf@width+1
 22131                           
 22132                           ; BSR set to: 0
 22133  005264  0E02               	movlw	2
 22134  005266  2788               	addwf	sprintf@ap& (0+255),f,b
 22135                           
 22136                           ; BSR set to: 0
 22137                           ;doprnt.c: 615: f++;
 22138  005268  4B78               	infsnz	sprintf@f& (0+255),f,b
 22139  00526A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22140  00526C                     l11635:
 22141                           
 22142                           ; BSR set to: 0
 22143                           ;doprnt.c: 617: }
 22144                           ;doprnt.c: 620: if(*f == '.') {
 22145  00526C  C078  FFF6         	movff	sprintf@f,tblptrl
 22146  005270  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22147  005274  0008               	tblrd		*
 22148  005276  50F5               	movf	tablat,w,c
 22149  005278  0A2E               	xorlw	46
 22150  00527A  E137               	bnz	l1638
 22151                           
 22152                           ; BSR set to: 0
 22153                           ;doprnt.c: 621: flag |= 0x4000;
 22154  00527C  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22155                           
 22156                           ;doprnt.c: 622: f++;
 22157                           
 22158                           ; BSR set to: 0
 22159                           ;doprnt.c: 624: if(*f == '*') {
 22160  00527E  DB15               	call	PL86	;call to abstracted procedure
 22161  005280  0A2A               	xorlw	42
 22162  005282  E10C               	bnz	l1639
 22163                           
 22164                           ; BSR set to: 0
 22165                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22166  005284  5188               	movf	sprintf@ap& (0+255),w,b
 22167  005286  6ED9               	movwf	fsr2l,c
 22168  005288  6ADA               	clrf	fsr2h,c
 22169  00528A  CFDE F089          	movff	postinc2,sprintf@prec
 22170  00528E  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22171                           
 22172                           ; BSR set to: 0
 22173  005292  0E02               	movlw	2
 22174  005294  2788               	addwf	sprintf@ap& (0+255),f,b
 22175                           
 22176                           ; BSR set to: 0
 22177                           ;doprnt.c: 626: f++;
 22178  005296  4B78               	infsnz	sprintf@f& (0+255),f,b
 22179  005298  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22180                           
 22181                           ;doprnt.c: 627: } else
 22182  00529A  D088               	goto	l11705
 22183  00529C                     l1639:
 22184                           
 22185                           ; BSR set to: 0
 22186                           ;doprnt.c: 629: {
 22187                           ;doprnt.c: 630: prec = 0;
 22188  00529C  6B89               	clrf	sprintf@prec& (0+255),b
 22189  00529E  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22190                           
 22191                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22192  0052A0  D01A               	goto	l11651
 22193  0052A2                     l11647:
 22194                           
 22195                           ; BSR set to: 0
 22196                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22197  0052A2  C089  F060         	movff	sprintf@prec,?___wmul
 22198  0052A6  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22199  0052AA  6B63               	clrf	(?___wmul+3)& (0+255),b
 22200  0052AC  0E0A               	movlw	10
 22201  0052AE  6F62               	movwf	(?___wmul+2)& (0+255),b
 22202  0052B0  EC6A  F00C         	call	___wmul	;wreg free
 22203  0052B4  C078  FFF6         	movff	sprintf@f,tblptrl
 22204  0052B8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22205  0052BC  0008               	tblrd		*
 22206  0052BE  50F5               	movf	tablat,w,c
 22207  0052C0  2760               	addwf	?___wmul& (0+255),f,b
 22208  0052C2  0E00               	movlw	0
 22209  0052C4  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22210  0052C6  0ED0               	movlw	208
 22211  0052C8  2560               	addwf	?___wmul& (0+255),w,b
 22212  0052CA  6F89               	movwf	sprintf@prec& (0+255),b
 22213  0052CC  0EFF               	movlw	255
 22214  0052CE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22215  0052D0  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22216                           
 22217                           ; BSR set to: 0
 22218  0052D2  4B78               	infsnz	sprintf@f& (0+255),f,b
 22219  0052D4  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22220  0052D6                     l11651:
 22221                           
 22222                           ; BSR set to: 0
 22223  0052D6  C078  FFF6         	movff	sprintf@f,tblptrl
 22224  0052DA  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22225  0052DE  0008               	tblrd		*
 22226  0052E0  50F5               	movf	tablat,w,c
 22227  0052E2  EC01  F00C         	call	_isdigit
 22228  0052E6  E362               	bnc	l11705
 22229  0052E8  D7DC               	goto	l11647
 22230  0052EA                     l1638:
 22231                           
 22232                           ; BSR set to: 0
 22233                           ;doprnt.c: 635: prec = 0;
 22234  0052EA  6B89               	clrf	sprintf@prec& (0+255),b
 22235  0052EC  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22236  0052EE  D05E               	goto	l11705
 22237  0052F0                     l11653:
 22238                           
 22239                           ; BSR set to: 0
 22240                           ;doprnt.c: 652: flag |= 0x10;
 22241  0052F0  8992               	bsf	sprintf@flag& (0+255),4,b
 22242                           
 22243                           ;doprnt.c: 653: goto loop;
 22244  0052F2  D05C               	goto	l11705
 22245  0052F4                     l11655:
 22246                           
 22247                           ; BSR set to: 0
 22248                           ;doprnt.c: 700: flag |= 0x40;
 22249  0052F4  8D92               	bsf	sprintf@flag& (0+255),6,b
 22250                           
 22251                           ;doprnt.c: 702: break;
 22252  0052F6  D06F               	goto	l11707
 22253  0052F8                     l11657:
 22254                           
 22255                           ; BSR set to: 0
 22256                           ;doprnt.c: 723: flag |= 0x20;
 22257  0052F8  8B92               	bsf	sprintf@flag& (0+255),5,b
 22258  0052FA                     l1655:
 22259                           
 22260                           ; BSR set to: 0
 22261                           ;doprnt.c: 730: flag |= 0x80;
 22262  0052FA  8F92               	bsf	sprintf@flag& (0+255),7,b
 22263                           
 22264                           ;doprnt.c: 732: break;
 22265  0052FC  D06C               	goto	l11707
 22266  0052FE                     l11659:
 22267                           
 22268                           ; BSR set to: 0
 22269                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22270  0052FE  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22271  005300  1189               	iorwf	sprintf@prec& (0+255),w,b
 22272  005302  E009               	bz	l11665
 22273                           
 22274                           ; BSR set to: 0
 22275  005304  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22276  005306  5D89               	subwf	sprintf@prec& (0+255),w,b
 22277  005308  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22278  00530A  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22279  00530C  E204               	bc	l11665
 22280                           
 22281                           ; BSR set to: 0
 22282                           ;doprnt.c: 763: _val._str._len = prec;
 22283  00530E  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22284  005312  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22285  005316                     l11665:
 22286                           
 22287                           ; BSR set to: 0
 22288                           ;doprnt.c: 766: if(width > _val._str._len)
 22289  005316  518B               	movf	sprintf@width& (0+255),w,b
 22290  005318  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22291  00531A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22292  00531C  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22293  00531E  E207               	bc	l1658
 22294                           
 22295                           ; BSR set to: 0
 22296                           ;doprnt.c: 767: width -= _val._str._len;
 22297  005320  EE20  F08E         	lfsr	2,sprintf@_val+1
 22298  005324  50DE               	movf	postinc2,w,c
 22299  005326  5F8B               	subwf	sprintf@width& (0+255),f,b
 22300  005328  50DD               	movf	postdec2,w,c
 22301  00532A  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22302  00532C  D002               	goto	l1659
 22303  00532E                     l1658:
 22304                           
 22305                           ; BSR set to: 0
 22306                           ;doprnt.c: 768: else
 22307                           ;doprnt.c: 769: width = 0;
 22308  00532E  6B8B               	clrf	sprintf@width& (0+255),b
 22309  005330  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22310  005332                     l1659:
 22311                           
 22312                           ; BSR set to: 0
 22313                           ;doprnt.c: 771: if(!(flag & 0x08))
 22314  005332  A792               	btfss	sprintf@flag& (0+255),3,b
 22315  005334  D004               	goto	l11675
 22316  005336  D015               	goto	l11683
 22317  005338                     l11671:
 22318                           
 22319                           ; BSR set to: 0
 22320                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22321  005338  DAB1               	call	PL68	;call to abstracted procedure
 22322                           
 22323                           ; BSR set to: 0
 22324  00533A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22325  00533C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22326  00533E                     l11675:
 22327                           
 22328                           ; BSR set to: 0
 22329  00533E  078B               	decf	sprintf@width& (0+255),f,b
 22330  005340  DAC2               	call	PL112	;call to abstracted procedure
 22331  005342  B4D8               	btfsc	status,2,c
 22332  005344  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22333  005346  E00D               	bz	l11683
 22334  005348  D7F7               	goto	l11671
 22335  00534A                     l11677:
 22336                           
 22337                           ; BSR set to: 0
 22338                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22339  00534A  518D               	movf	sprintf@_val& (0+255),w,b
 22340  00534C  6ED9               	movwf	fsr2l,c
 22341  00534E  6ADA               	clrf	fsr2h,c
 22342  005350  C076  FFE1         	movff	sprintf@sp,fsr1l
 22343  005354  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22344  005358  CFDF FFE7          	movff	indf2,indf1
 22345                           
 22346                           ; BSR set to: 0
 22347  00535C  2B8D               	incf	sprintf@_val& (0+255),f,b
 22348                           
 22349                           ; BSR set to: 0
 22350  00535E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22351  005360  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22352  005362                     l11683:
 22353                           
 22354                           ; BSR set to: 0
 22355  005362  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22356  005364  A0D8               	btfss	status,0,c
 22357  005366  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22358  005368  0100               	movlb	0	; () banked
 22359  00536A  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22360  00536C  B4D8               	btfsc	status,2,c
 22361  00536E  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22362  005370  E1EC               	bnz	l11677
 22363                           
 22364                           ; BSR set to: 0
 22365                           ;doprnt.c: 779: if(flag & 0x08)
 22366  005372  B792               	btfsc	sprintf@flag& (0+255),3,b
 22367  005374  D004               	goto	l11691
 22368  005376  D23B               	goto	l11929
 22369  005378                     l11687:
 22370                           
 22371                           ; BSR set to: 0
 22372                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22373  005378  DA91               	call	PL68	;call to abstracted procedure
 22374                           
 22375                           ; BSR set to: 0
 22376  00537A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22377  00537C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22378  00537E                     l11691:
 22379                           
 22380                           ; BSR set to: 0
 22381  00537E  078B               	decf	sprintf@width& (0+255),f,b
 22382  005380  DAA2               	call	PL112	;call to abstracted procedure
 22383  005382  B4D8               	btfsc	status,2,c
 22384  005384  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22385  005386  E101 D232          	bz	l11929
 22386  00538A  D7F6               	goto	l11687
 22387  00538C                     l11693:
 22388                           
 22389                           ; BSR set to: 0
 22390                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22391  00538C  5188               	movf	sprintf@ap& (0+255),w,b
 22392  00538E  6ED9               	movwf	fsr2l,c
 22393  005390  6ADA               	clrf	fsr2h,c
 22394  005392  50DF               	movf	indf2,w,c
 22395  005394  6F91               	movwf	sprintf@c& (0+255),b
 22396                           
 22397                           ; BSR set to: 0
 22398  005396  0E02               	movlw	2
 22399  005398  2788               	addwf	sprintf@ap& (0+255),f,b
 22400  00539A                     l11697:
 22401                           
 22402                           ; BSR set to: 0
 22403                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22404  00539A  0E91               	movlw	low sprintf@c
 22405  00539C  6F8D               	movwf	sprintf@_val& (0+255),b
 22406                           
 22407                           ; BSR set to: 0
 22408                           ;doprnt.c: 815: _val._str._len = 1;
 22409  00539E  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22410  0053A0  0E01               	movlw	1
 22411  0053A2  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22412                           
 22413                           ;doprnt.c: 816: goto dostring;
 22414  0053A4  D7AC               	goto	l11659
 22415  0053A6                     l11701:
 22416                           
 22417                           ; BSR set to: 0
 22418                           ;doprnt.c: 827: flag |= 0xC0;
 22419  0053A6  0EC0               	movlw	192
 22420  0053A8  1392               	iorwf	sprintf@flag& (0+255),f,b
 22421                           
 22422                           ;doprnt.c: 828: break;
 22423  0053AA  D015               	goto	l11707
 22424  0053AC                     l11705:
 22425                           
 22426                           ; BSR set to: 0
 22427  0053AC  DA6C               	call	PL62	;call to abstracted procedure
 22428  0053AE  5191               	movf	sprintf@c& (0+255),w,b
 22429                           
 22430                           ; Switch size 1, requested type "space"
 22431                           ; Number of cases is 9, Range of values is 0 to 120
 22432                           ; switch strategies available:
 22433                           ; Name         Instructions Cycles
 22434                           ; simple_byte           28    15 (average)
 22435                           ;	Chosen strategy is simple_byte
 22436  0053B0  E101 D220          	bz	l11931
 22437  0053B4  0A58               	xorlw	88	; case 88
 22438  0053B6  E0A0               	bz	l11657
 22439  0053B8  0A3B               	xorlw	59	; case 99
 22440  0053BA  E0E8               	bz	l11693
 22441  0053BC  0A07               	xorlw	7	; case 100
 22442  0053BE  E00B               	bz	l11707
 22443  0053C0  0A0D               	xorlw	13	; case 105
 22444  0053C2  E009               	bz	l11707
 22445  0053C4  0A05               	xorlw	5	; case 108
 22446  0053C6  E094               	bz	l11653
 22447  0053C8  0A03               	xorlw	3	; case 111
 22448  0053CA  E094               	bz	l11655
 22449  0053CC  0A1A               	xorlw	26	; case 117
 22450  0053CE  E0EB               	bz	l11701
 22451  0053D0  0A0D               	xorlw	13	; case 120
 22452  0053D2  E093               	bz	l1655
 22453  0053D4  D7E2               	goto	l11697
 22454  0053D6                     l11707:
 22455                           
 22456                           ; BSR set to: 0
 22457                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22458  0053D6  5192               	movf	sprintf@flag& (0+255),w,b
 22459  0053D8  0BC0               	andlw	192
 22460  0053DA  E120               	bnz	l1674
 22461                           
 22462                           ; BSR set to: 0
 22463                           ;doprnt.c: 1260: {
 22464                           ;doprnt.c: 1262: if(flag & 0x10)
 22465  0053DC  A992               	btfss	sprintf@flag& (0+255),4,b
 22466  0053DE  D003               	goto	l11715
 22467                           
 22468                           ; BSR set to: 0
 22469                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22470  0053E0  5188               	movf	sprintf@ap& (0+255),w,b
 22471                           
 22472                           ; BSR set to: 0
 22473  0053E2  DA46               	call	PL58	;call to abstracted procedure
 22474  0053E4  D00D               	goto	L34
 22475  0053E6                     l11715:
 22476                           
 22477                           ; BSR set to: 0
 22478                           ;doprnt.c: 1264: else
 22479                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22480  0053E6  5188               	movf	sprintf@ap& (0+255),w,b
 22481  0053E8  6ED9               	movwf	fsr2l,c
 22482  0053EA  6ADA               	clrf	fsr2h,c
 22483  0053EC  CFDE F08D          	movff	postinc2,sprintf@_val
 22484  0053F0  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22485  0053F4  0E00               	movlw	0
 22486  0053F6  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22487  0053F8  0EFF               	movlw	-1
 22488  0053FA  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22489  0053FC  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22490                           
 22491                           ; BSR set to: 0
 22492  0053FE  0E02               	movlw	2
 22493  005400                     L34:
 22494  005400  2788               	addwf	sprintf@ap& (0+255),f,b
 22495                           
 22496                           ; BSR set to: 0
 22497                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22498  005402  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22499  005404  D01F               	goto	l11733
 22500                           
 22501                           ; BSR set to: 0
 22502                           ;doprnt.c: 1269: flag |= 0x03;
 22503  005406  0E03               	movlw	3
 22504  005408  1392               	iorwf	sprintf@flag& (0+255),f,b
 22505                           
 22506                           ; BSR set to: 0
 22507                           ;doprnt.c: 1270: _val._val = -_val._val;
 22508  00540A  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22509  00540C  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22510  00540E  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22511  005410  6D8D               	negf	sprintf@_val& (0+255),b
 22512  005412  0E00               	movlw	0
 22513  005414  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22514  005416  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22515  005418  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22516  00541A  D014               	goto	l11733
 22517  00541C                     l1674:
 22518                           
 22519                           ; BSR set to: 0
 22520                           ;doprnt.c: 1275: else
 22521                           ;doprnt.c: 1280: {
 22522                           ;doprnt.c: 1288: if(flag & 0x10)
 22523  00541C  A992               	btfss	sprintf@flag& (0+255),4,b
 22524  00541E  D003               	goto	l11729
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22528  005420  5188               	movf	sprintf@ap& (0+255),w,b
 22529                           
 22530                           ; BSR set to: 0
 22531  005422  DA26               	call	PL58	;call to abstracted procedure
 22532  005424  D00E               	goto	L35
 22533  005426                     l11729:
 22534                           
 22535                           ; BSR set to: 0
 22536                           ;doprnt.c: 1290: else
 22537                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22538  005426  5188               	movf	sprintf@ap& (0+255),w,b
 22539  005428  6ED9               	movwf	fsr2l,c
 22540  00542A  6ADA               	clrf	fsr2h,c
 22541  00542C  CFDE F07E          	movff	postinc2,??_sprintf
 22542  005430  CFDD F07F          	movff	postdec2,??_sprintf+1
 22543  005434  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22544  005438  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22545  00543C  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22546  00543E  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22547                           
 22548                           ; BSR set to: 0
 22549  005440  0E02               	movlw	2
 22550  005442                     L35:
 22551  005442  2788               	addwf	sprintf@ap& (0+255),f,b
 22552  005444                     l11733:
 22553                           
 22554                           ; BSR set to: 0
 22555                           ;doprnt.c: 1294: }
 22556                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22557  005444  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22558  005446  1189               	iorwf	sprintf@prec& (0+255),w,b
 22559  005448  E15C               	bnz	l11783
 22560                           
 22561                           ; BSR set to: 0
 22562  00544A  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22563  00544C  118D               	iorwf	sprintf@_val& (0+255),w,b
 22564  00544E  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22565  005450  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22566  005452  E157               	bnz	l11783
 22567                           
 22568                           ; BSR set to: 0
 22569                           ;doprnt.c: 1298: prec++;
 22570  005454  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22571  005456  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22572  005458  D054               	goto	l11783
 22573  00545A                     l11739:
 22574                           
 22575                           ; BSR set to: 0
 22576                           ;doprnt.c: 1309: case 0xC0:
 22577                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22578  00545A  0E01               	movlw	1
 22579  00545C  6F91               	movwf	sprintf@c& (0+255),b
 22580  00545E                     l11741:
 22581                           
 22582                           ; BSR set to: 0
 22583  00545E  5191               	movf	sprintf@c& (0+255),w,b
 22584  005460  0A0A               	xorlw	10
 22585  005462  E058               	bz	l11785
 22586                           
 22587                           ; BSR set to: 0
 22588                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22589  005464  5191               	movf	sprintf@c& (0+255),w,b
 22590  005466  0D04               	mullw	4
 22591  005468  0EE4               	movlw	low _dpowers
 22592  00546A  24F3               	addwf	prodl,w,c
 22593  00546C  6EF6               	movwf	tblptrl,c
 22594  00546E  0E6C               	movlw	high _dpowers
 22595  005470  20F4               	addwfc	prodh,w,c
 22596  005472  6EF7               	movwf	tblptrh,c
 22597  005474  0009               	tblrd		*+
 22598  005476  50F5               	movf	tablat,w,c
 22599  005478  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22600  00547A  0009               	tblrd		*+
 22601  00547C  50F5               	movf	tablat,w,c
 22602  00547E  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22603  005480  0009               	tblrd		*+
 22604  005482  50F5               	movf	tablat,w,c
 22605  005484  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22606  005486  0009               	tblrd		*+
 22607  005488  50F5               	movf	tablat,w,c
 22608  00548A  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22609  00548C  E343               	bnc	l11785
 22610                           
 22611                           ; BSR set to: 0
 22612  00548E  2B91               	incf	sprintf@c& (0+255),f,b
 22613  005490  D7E6               	goto	l11741
 22614  005492                     l11753:
 22615                           
 22616                           ; BSR set to: 0
 22617                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22618  005492  0E01               	movlw	1
 22619  005494  6F91               	movwf	sprintf@c& (0+255),b
 22620  005496                     l11755:
 22621                           
 22622                           ; BSR set to: 0
 22623  005496  5191               	movf	sprintf@c& (0+255),w,b
 22624  005498  0A08               	xorlw	8
 22625  00549A  E03C               	bz	l11785
 22626                           
 22627                           ; BSR set to: 0
 22628                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22629  00549C  5191               	movf	sprintf@c& (0+255),w,b
 22630  00549E  0D04               	mullw	4
 22631  0054A0  0E0C               	movlw	low _hexpowers
 22632  0054A2  24F3               	addwf	prodl,w,c
 22633  0054A4  6EF6               	movwf	tblptrl,c
 22634  0054A6  0E6D               	movlw	high _hexpowers
 22635  0054A8  20F4               	addwfc	prodh,w,c
 22636  0054AA  6EF7               	movwf	tblptrh,c
 22637  0054AC  0009               	tblrd		*+
 22638  0054AE  50F5               	movf	tablat,w,c
 22639  0054B0  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22640  0054B2  0009               	tblrd		*+
 22641  0054B4  50F5               	movf	tablat,w,c
 22642  0054B6  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22643  0054B8  0009               	tblrd		*+
 22644  0054BA  50F5               	movf	tablat,w,c
 22645  0054BC  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22646  0054BE  0009               	tblrd		*+
 22647  0054C0  50F5               	movf	tablat,w,c
 22648  0054C2  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22649  0054C4  E327               	bnc	l11785
 22650                           
 22651                           ; BSR set to: 0
 22652  0054C6  2B91               	incf	sprintf@c& (0+255),f,b
 22653  0054C8  D7E6               	goto	l11755
 22654  0054CA                     l11767:
 22655                           
 22656                           ; BSR set to: 0
 22657                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22658  0054CA  0E01               	movlw	1
 22659  0054CC  6F91               	movwf	sprintf@c& (0+255),b
 22660  0054CE                     l11769:
 22661                           
 22662                           ; BSR set to: 0
 22663  0054CE  5191               	movf	sprintf@c& (0+255),w,b
 22664  0054D0  0A0C               	xorlw	12
 22665  0054D2  E020               	bz	l11785
 22666                           
 22667                           ; BSR set to: 0
 22668                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22669  0054D4  5191               	movf	sprintf@c& (0+255),w,b
 22670  0054D6  0D04               	mullw	4
 22671  0054D8  0EB4               	movlw	low _octpowers
 22672  0054DA  24F3               	addwf	prodl,w,c
 22673  0054DC  6EF6               	movwf	tblptrl,c
 22674  0054DE  0E6C               	movlw	high _octpowers
 22675  0054E0  20F4               	addwfc	prodh,w,c
 22676  0054E2  6EF7               	movwf	tblptrh,c
 22677  0054E4  0009               	tblrd		*+
 22678  0054E6  50F5               	movf	tablat,w,c
 22679  0054E8  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22680  0054EA  0009               	tblrd		*+
 22681  0054EC  50F5               	movf	tablat,w,c
 22682  0054EE  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22683  0054F0  0009               	tblrd		*+
 22684  0054F2  50F5               	movf	tablat,w,c
 22685  0054F4  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22686  0054F6  0009               	tblrd		*+
 22687  0054F8  50F5               	movf	tablat,w,c
 22688  0054FA  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22689  0054FC  E30B               	bnc	l11785
 22690                           
 22691                           ; BSR set to: 0
 22692  0054FE  2B91               	incf	sprintf@c& (0+255),f,b
 22693  005500  D7E6               	goto	l11769
 22694  005502                     l11783:
 22695                           
 22696                           ; BSR set to: 0
 22697  005502  5192               	movf	sprintf@flag& (0+255),w,b
 22698  005504  0BC0               	andlw	192
 22699                           
 22700                           ; Switch size 1, requested type "space"
 22701                           ; Number of cases is 4, Range of values is 0 to 192
 22702                           ; switch strategies available:
 22703                           ; Name         Instructions Cycles
 22704                           ; simple_byte           13     7 (average)
 22705                           ;	Chosen strategy is simple_byte
 22706  005506  E0A9               	bz	l11739
 22707  005508  0A40               	xorlw	64	; case 64
 22708  00550A  E0DF               	bz	l11767
 22709  00550C  0AC0               	xorlw	192	; case 128
 22710  00550E  E0C1               	bz	l11753
 22711  005510  0A40               	xorlw	64	; case 192
 22712  005512  E0A3               	bz	l11739
 22713  005514                     l11785:
 22714                           
 22715                           ; BSR set to: 0
 22716                           ;doprnt.c: 1346: if(c < prec)
 22717  005514  0E80               	movlw	128
 22718  005516  BF91               	btfsc	sprintf@c& (0+255),7,b
 22719  005518  0E7F               	movlw	127
 22720  00551A  6F7E               	movwf	??_sprintf& (0+255),b
 22721  00551C  5189               	movf	sprintf@prec& (0+255),w,b
 22722  00551E  5D91               	subwf	sprintf@c& (0+255),w,b
 22723  005520  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22724  005522  0A80               	xorlw	128
 22725  005524  597E               	subwfb	??_sprintf& (0+255),w,b
 22726  005526  E203               	bc	l11789
 22727                           
 22728                           ; BSR set to: 0
 22729                           ;doprnt.c: 1347: c = prec;
 22730  005528  C089  F091         	movff	sprintf@prec,sprintf@c
 22731  00552C  D00F               	goto	l11793
 22732  00552E                     l11789:
 22733                           
 22734                           ; BSR set to: 0
 22735                           ;doprnt.c: 1348: else if(prec < c)
 22736  00552E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22737  005530  0A80               	xorlw	128
 22738  005532  6F7E               	movwf	??_sprintf& (0+255),b
 22739  005534  5191               	movf	sprintf@c& (0+255),w,b
 22740  005536  5D89               	subwf	sprintf@prec& (0+255),w,b
 22741  005538  0E80               	movlw	128
 22742  00553A  BF91               	btfsc	sprintf@c& (0+255),7,b
 22743  00553C  0E7F               	movlw	127
 22744  00553E  597E               	subwfb	??_sprintf& (0+255),w,b
 22745  005540  E205               	bc	l11793
 22746                           
 22747                           ; BSR set to: 0
 22748                           ;doprnt.c: 1349: prec = c;
 22749  005542  5191               	movf	sprintf@c& (0+255),w,b
 22750  005544  6F89               	movwf	sprintf@prec& (0+255),b
 22751  005546  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22752  005548  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22753  00554A  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22754  00554C                     l11793:
 22755                           
 22756                           ; BSR set to: 0
 22757                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22758  00554C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22759  00554E  118B               	iorwf	sprintf@width& (0+255),w,b
 22760  005550  E006               	bz	l11799
 22761                           
 22762                           ; BSR set to: 0
 22763  005552  5192               	movf	sprintf@flag& (0+255),w,b
 22764  005554  0B03               	andlw	3
 22765  005556  E003               	bz	l11799
 22766                           
 22767                           ; BSR set to: 0
 22768                           ;doprnt.c: 1353: width--;
 22769  005558  078B               	decf	sprintf@width& (0+255),f,b
 22770  00555A  A0D8               	btfss	status,0,c
 22771  00555C  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22772  00555E                     l11799:
 22773                           
 22774                           ; BSR set to: 0
 22775                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22776  00555E  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22777  005560  D010               	goto	l11805
 22778                           
 22779                           ; BSR set to: 0
 22780                           ;doprnt.c: 1356: if(width > prec)
 22781  005562  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22782  005564  0A80               	xorlw	128
 22783  005566  6F7E               	movwf	??_sprintf& (0+255),b
 22784  005568  518B               	movf	sprintf@width& (0+255),w,b
 22785  00556A  5D89               	subwf	sprintf@prec& (0+255),w,b
 22786  00556C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22787  00556E  0A80               	xorlw	128
 22788  005570  597E               	subwfb	??_sprintf& (0+255),w,b
 22789  005572  E205               	bc	l1702
 22790                           
 22791                           ; BSR set to: 0
 22792                           ;doprnt.c: 1357: width -= prec;
 22793  005574  5189               	movf	sprintf@prec& (0+255),w,b
 22794  005576  5F8B               	subwf	sprintf@width& (0+255),f,b
 22795  005578  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22796  00557A  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22797  00557C  D002               	goto	l11805
 22798  00557E                     l1702:
 22799                           
 22800                           ; BSR set to: 0
 22801                           ;doprnt.c: 1358: else
 22802                           ;doprnt.c: 1359: width = 0;
 22803  00557E  6B8B               	clrf	sprintf@width& (0+255),b
 22804  005580  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22805  005582                     l11805:
 22806                           
 22807                           ; BSR set to: 0
 22808                           ;doprnt.c: 1360: }
 22809                           ;doprnt.c: 1364: if((flag & (
 22810                           ;doprnt.c: 1366: 0x04|
 22811                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22812  005582  0EC4               	movlw	196
 22813  005584  D94D               	call	PL18	;call to abstracted procedure
 22814  005586  0E40               	movlw	64
 22815  005588  B4D8               	btfsc	status,2,c
 22816  00558A  197E               	xorwf	??_sprintf& (0+255),w,b
 22817  00558C  E107               	bnz	l11811
 22818                           
 22819                           ; BSR set to: 0
 22820                           ;doprnt.c: 1369: if(width)
 22821  00558E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22822  005590  118B               	iorwf	sprintf@width& (0+255),w,b
 22823  005592  E018               	bz	l11817
 22824                           
 22825                           ; BSR set to: 0
 22826                           ;doprnt.c: 1370: width--;
 22827  005594  078B               	decf	sprintf@width& (0+255),f,b
 22828  005596  A0D8               	btfss	status,0,c
 22829  005598  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22830  00559A  D014               	goto	l11817
 22831  00559C                     l11811:
 22832                           
 22833                           ; BSR set to: 0
 22834                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22835  00559C  0EC0               	movlw	192
 22836  00559E  D940               	call	PL18	;call to abstracted procedure
 22837  0055A0  0E80               	movlw	128
 22838  0055A2  B4D8               	btfsc	status,2,c
 22839  0055A4  197E               	xorwf	??_sprintf& (0+255),w,b
 22840  0055A6  E10E               	bnz	l11817
 22841                           
 22842                           ; BSR set to: 0
 22843                           ;doprnt.c: 1379: if(width > 2)
 22844  0055A8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22845  0055AA  0A80               	xorlw	128
 22846  0055AC  0F80               	addlw	-128
 22847  0055AE  0E03               	movlw	3
 22848  0055B0  B4D8               	btfsc	status,2,c
 22849  0055B2  5D8B               	subwf	sprintf@width& (0+255),w,b
 22850  0055B4  E305               	bnc	l1708
 22851                           
 22852                           ; BSR set to: 0
 22853                           ;doprnt.c: 1380: width -= 2;
 22854  0055B6  0EFE               	movlw	254
 22855  0055B8  278B               	addwf	sprintf@width& (0+255),f,b
 22856  0055BA  0EFF               	movlw	255
 22857  0055BC  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22858  0055BE  D002               	goto	l11817
 22859  0055C0                     l1708:
 22860                           
 22861                           ; BSR set to: 0
 22862                           ;doprnt.c: 1381: else
 22863                           ;doprnt.c: 1382: width = 0;
 22864  0055C0  6B8B               	clrf	sprintf@width& (0+255),b
 22865  0055C2  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22866  0055C4                     l11817:
 22867                           
 22868                           ; BSR set to: 0
 22869                           ;doprnt.c: 1383: }
 22870                           ;doprnt.c: 1388: if(width > c)
 22871  0055C4  0E80               	movlw	128
 22872  0055C6  BF91               	btfsc	sprintf@c& (0+255),7,b
 22873  0055C8  0E7F               	movlw	127
 22874  0055CA  6F7E               	movwf	??_sprintf& (0+255),b
 22875  0055CC  518B               	movf	sprintf@width& (0+255),w,b
 22876  0055CE  5D91               	subwf	sprintf@c& (0+255),w,b
 22877  0055D0  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22878  0055D2  0A80               	xorlw	128
 22879  0055D4  597E               	subwfb	??_sprintf& (0+255),w,b
 22880  0055D6  E207               	bc	l1710
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;doprnt.c: 1389: width -= c;
 22884  0055D8  5191               	movf	sprintf@c& (0+255),w,b
 22885  0055DA  5F8B               	subwf	sprintf@width& (0+255),f,b
 22886  0055DC  0E00               	movlw	0
 22887  0055DE  BF91               	btfsc	sprintf@c& (0+255),7,b
 22888  0055E0  0EFF               	movlw	255
 22889  0055E2  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22890  0055E4  D002               	goto	l1711
 22891  0055E6                     l1710:
 22892                           
 22893                           ; BSR set to: 0
 22894                           ;doprnt.c: 1390: else
 22895                           ;doprnt.c: 1391: width = 0;
 22896  0055E6  6B8B               	clrf	sprintf@width& (0+255),b
 22897  0055E8  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22898  0055EA                     l1711:
 22899                           
 22900                           ; BSR set to: 0
 22901                           ;doprnt.c: 1394: if(flag & 0x04) {
 22902  0055EA  A592               	btfss	sprintf@flag& (0+255),2,b
 22903  0055EC  D03C               	goto	l11855
 22904                           
 22905                           ; BSR set to: 0
 22906                           ;doprnt.c: 1399: if(flag & 0x03)
 22907  0055EE  5192               	movf	sprintf@flag& (0+255),w,b
 22908  0055F0  0B03               	andlw	3
 22909  0055F2  E009               	bz	l1713
 22910                           
 22911                           ; BSR set to: 0
 22912                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22913  0055F4  C076  FFD9         	movff	sprintf@sp,fsr2l
 22914  0055F8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22915  0055FC  0E2D               	movlw	45
 22916  0055FE  6EDF               	movwf	indf2,c
 22917  005600                     l11825:
 22918                           
 22919                           ; BSR set to: 0
 22920  005600  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22921  005602  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22922  005604  D022               	goto	l11847
 22923  005606                     l1713:
 22924                           
 22925                           ; BSR set to: 0
 22926                           ;doprnt.c: 1403: else
 22927                           ;doprnt.c: 1406: if(flag & 0x01)
 22928  005606  A192               	btfss	sprintf@flag& (0+255),0,b
 22929  005608  D006               	goto	l11831
 22930                           
 22931                           ; BSR set to: 0
 22932                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22933  00560A  C076  FFD9         	movff	sprintf@sp,fsr2l
 22934  00560E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22935  005612  0E20               	movlw	32
 22936  005614  D7F4               	goto	L36
 22937  005616                     l11831:
 22938                           
 22939                           ; BSR set to: 0
 22940                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22941  005616  0EC0               	movlw	192
 22942  005618  D903               	call	PL18	;call to abstracted procedure
 22943  00561A  0E80               	movlw	128
 22944  00561C  B4D8               	btfsc	status,2,c
 22945  00561E  197E               	xorwf	??_sprintf& (0+255),w,b
 22946  005620  E114               	bnz	l11847
 22947                           
 22948                           ; BSR set to: 0
 22949                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22950  005622  C076  FFD9         	movff	sprintf@sp,fsr2l
 22951  005626  D94A               	call	PL102	;call to abstracted procedure
 22952                           
 22953                           ; BSR set to: 0
 22954  005628  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22955  00562A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22956                           
 22957                           ; BSR set to: 0
 22958                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22959  00562C  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22960  00562E  D003               	goto	l11841
 22961                           
 22962                           ; BSR set to: 0
 22963  005630  6B83               	clrf	(_sprintf$2144+1)& (0+255),b
 22964  005632  0E78               	movlw	120
 22965  005634  D002               	goto	L37
 22966  005636                     l11841:
 22967                           
 22968                           ; BSR set to: 0
 22969  005636  6B83               	clrf	(_sprintf$2144+1)& (0+255),b
 22970  005638  0E58               	movlw	88
 22971  00563A                     L37:
 22972  00563A  6F82               	movwf	_sprintf$2144& (0+255),b
 22973                           
 22974                           ; BSR set to: 0
 22975  00563C  C076  FFD9         	movff	sprintf@sp,fsr2l
 22976  005640  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22977  005644  C082  FFDF         	movff	_sprintf$2144,indf2
 22978  005648  D7DB               	goto	l11825
 22979  00564A                     l11847:
 22980                           
 22981                           ; BSR set to: 0
 22982                           ;doprnt.c: 1419: }
 22983                           ;doprnt.c: 1422: if(width)
 22984  00564A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22985  00564C  118B               	iorwf	sprintf@width& (0+255),w,b
 22986  00564E  E101 D0B9          	bz	l11919
 22987                           
 22988                           ; BSR set to: 0
 22989                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22990  005652  C076  FFD9         	movff	sprintf@sp,fsr2l
 22991  005656  D932               	call	PL102	;call to abstracted procedure
 22992                           
 22993                           ; BSR set to: 0
 22994  005658  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22995  00565A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22996                           
 22997                           ; BSR set to: 0
 22998                           ;doprnt.c: 1425: while(--width);
 22999  00565C  078B               	decf	sprintf@width& (0+255),f,b
 23000  00565E  A0D8               	btfss	status,0,c
 23001  005660  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23002  005662  0100               	movlb	0	; () banked
 23003  005664  D7F2               	goto	l11847
 23004  005666                     l11855:
 23005                           
 23006                           ; BSR set to: 0
 23007                           ;doprnt.c: 1429: {
 23008                           ;doprnt.c: 1431: if(width
 23009                           ;doprnt.c: 1433: && !(flag & 0x08)
 23010                           ;doprnt.c: 1435: )
 23011  005666  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23012  005668  118B               	iorwf	sprintf@width& (0+255),w,b
 23013  00566A  A4D8               	btfss	status,2,c
 23014                           
 23015                           ; BSR set to: 0
 23016  00566C  B792               	btfsc	sprintf@flag& (0+255),3,b
 23017  00566E  D004               	goto	l11865
 23018  005670                     l11859:
 23019                           
 23020                           ; BSR set to: 0
 23021                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23022  005670  C076  FFD9         	movff	sprintf@sp,fsr2l
 23023                           
 23024                           ; BSR set to: 0
 23025                           
 23026                           ; BSR set to: 0
 23027                           ;doprnt.c: 1438: while(--width);
 23028  005674  D8F0               	call	PL46	;call to abstracted procedure
 23029  005676  E1FC               	bnz	l11859
 23030  005678                     l11865:
 23031                           
 23032                           ; BSR set to: 0
 23033                           ;doprnt.c: 1445: if(flag & 0x03)
 23034  005678  5192               	movf	sprintf@flag& (0+255),w,b
 23035  00567A  0B03               	andlw	3
 23036  00567C  E009               	bz	l1729
 23037                           
 23038                           ; BSR set to: 0
 23039                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23040  00567E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23041  005682  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23042  005686  0E2D               	movlw	45
 23043  005688  6EDF               	movwf	indf2,c
 23044                           
 23045                           ; BSR set to: 0
 23046  00568A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23047  00568C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23048  00568E  D008               	goto	l11875
 23049  005690                     l1729:
 23050                           
 23051                           ; BSR set to: 0
 23052                           ;doprnt.c: 1450: else if(flag & 0x01)
 23053  005690  A192               	btfss	sprintf@flag& (0+255),0,b
 23054  005692  D006               	goto	l11875
 23055                           
 23056                           ; BSR set to: 0
 23057                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23058  005694  C076  FFD9         	movff	sprintf@sp,fsr2l
 23059  005698  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23060  00569C  0E20               	movlw	32
 23061  00569E  D7F4               	goto	L38
 23062  0056A0                     l11875:
 23063                           
 23064                           ; BSR set to: 0
 23065                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23066  0056A0  0EC0               	movlw	192
 23067  0056A2  D8BE               	call	PL18	;call to abstracted procedure
 23068  0056A4  0E40               	movlw	64
 23069  0056A6  B4D8               	btfsc	status,2,c
 23070  0056A8  197E               	xorwf	??_sprintf& (0+255),w,b
 23071  0056AA  E106               	bnz	l11881
 23072                           
 23073                           ; BSR set to: 0
 23074                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23075  0056AC  C076  FFD9         	movff	sprintf@sp,fsr2l
 23076  0056B0  D905               	call	PL102	;call to abstracted procedure
 23077  0056B2                     l11879:
 23078                           
 23079                           ; BSR set to: 0
 23080  0056B2  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23081  0056B4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23082  0056B6  D086               	goto	l11919
 23083  0056B8                     l11881:
 23084                           
 23085                           ; BSR set to: 0
 23086                           ;doprnt.c: 1457: else
 23087                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23088  0056B8  0EC0               	movlw	192
 23089  0056BA  D8B2               	call	PL18	;call to abstracted procedure
 23090  0056BC  0E80               	movlw	128
 23091  0056BE  B4D8               	btfsc	status,2,c
 23092  0056C0  197E               	xorwf	??_sprintf& (0+255),w,b
 23093  0056C2  E001 D07F          	bnz	l11919
 23094                           
 23095                           ; BSR set to: 0
 23096                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23097  0056C6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23098  0056CA  D8F8               	call	PL102	;call to abstracted procedure
 23099                           
 23100                           ; BSR set to: 0
 23101  0056CC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23102  0056CE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23103                           
 23104                           ; BSR set to: 0
 23105                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23106  0056D0  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23107  0056D2  D003               	goto	l11891
 23108                           
 23109                           ; BSR set to: 0
 23110  0056D4  6B85               	clrf	(_sprintf$2145+1)& (0+255),b
 23111  0056D6  0E78               	movlw	120
 23112  0056D8  D002               	goto	L39
 23113  0056DA                     l11891:
 23114                           
 23115                           ; BSR set to: 0
 23116  0056DA  6B85               	clrf	(_sprintf$2145+1)& (0+255),b
 23117  0056DC  0E58               	movlw	88
 23118  0056DE                     L39:
 23119  0056DE  6F84               	movwf	_sprintf$2145& (0+255),b
 23120                           
 23121                           ; BSR set to: 0
 23122  0056E0  C076  FFD9         	movff	sprintf@sp,fsr2l
 23123  0056E4  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23124  0056E8  C084  FFDF         	movff	_sprintf$2145,indf2
 23125  0056EC  D7E2               	goto	l11879
 23126  0056EE                     l11897:
 23127                           
 23128                           ; BSR set to: 0
 23129                           ;doprnt.c: 1493: case 0xC0:
 23130                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23131  0056EE  C089  F07E         	movff	sprintf@prec,??_sprintf
 23132  0056F2  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23133  0056F6  90D8               	bcf	status,0,c
 23134  0056F8  377E               	rlcf	??_sprintf& (0+255),f,b
 23135  0056FA  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23136  0056FC  90D8               	bcf	status,0,c
 23137  0056FE  377E               	rlcf	??_sprintf& (0+255),f,b
 23138  005700  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23139  005702  0EE4               	movlw	low _dpowers
 23140  005704  257E               	addwf	??_sprintf& (0+255),w,b
 23141  005706  6EF6               	movwf	tblptrl,c
 23142  005708  0E6C               	movlw	high _dpowers
 23143  00570A  D87B               	call	PL14	;call to abstracted procedure
 23144  00570C  C08D  F060         	movff	sprintf@_val,?___lldiv
 23145  005710  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23146  005714  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23147  005718  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23148  00571C  EC95  F010         	call	___lldiv	;wreg free
 23149  005720  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23150  005724  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23151  005728  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23152  00572C  C060  F06D         	movff	?___lldiv,?___llmod
 23153  005730  0E0A               	movlw	10
 23154  005732  6F71               	movwf	(?___llmod+4)& (0+255),b
 23155  005734  0E00               	movlw	0
 23156  005736  6B72               	clrf	(?___llmod+5)& (0+255),b
 23157  005738  6B73               	clrf	(?___llmod+6)& (0+255),b
 23158  00573A  6B74               	clrf	(?___llmod+7)& (0+255),b
 23159  00573C  EC24  F00F         	call	___llmod	;wreg free
 23160  005740  516D               	movf	?___llmod& (0+255),w,b
 23161  005742  D02D               	goto	L40
 23162  005744                     l11899:
 23163                           
 23164                           ; BSR set to: 0
 23165                           ;doprnt.c: 1506: {
 23166                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23167  005744  D875               	call	PL24	;call to abstracted procedure
 23168  005746  0E0C               	movlw	low _hexpowers
 23169  005748  257E               	addwf	??_sprintf& (0+255),w,b
 23170  00574A  6EF6               	movwf	tblptrl,c
 23171  00574C  0E6D               	movlw	high _hexpowers
 23172  00574E  D859               	call	PL14	;call to abstracted procedure
 23173  005750  EC95  F010         	call	___lldiv	;wreg free
 23174  005754  5160               	movf	?___lldiv& (0+255),w,b
 23175  005756  0B0F               	andlw	15
 23176  005758  6F81               	movwf	sprintf@idx& (0+255),b
 23177                           
 23178                           ; BSR set to: 0
 23179                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23180  00575A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23181  00575C  D004               	goto	l11905
 23182                           
 23183                           ; BSR set to: 0
 23184  00575E  0E7B               	movlw	high STR_264
 23185  005760  6F87               	movwf	(_sprintf$2151+1)& (0+255),b
 23186  005762  0E2C               	movlw	low STR_264
 23187  005764  D003               	goto	L41
 23188  005766                     l11905:
 23189                           
 23190                           ; BSR set to: 0
 23191  005766  0E7B               	movlw	high STR_263
 23192  005768  6F87               	movwf	(_sprintf$2151+1)& (0+255),b
 23193  00576A  0E1B               	movlw	low STR_263
 23194  00576C                     L41:
 23195  00576C  6F86               	movwf	_sprintf$2151& (0+255),b
 23196                           
 23197                           ; BSR set to: 0
 23198  00576E  5181               	movf	sprintf@idx& (0+255),w,b
 23199  005770  2586               	addwf	_sprintf$2151& (0+255),w,b
 23200  005772  6F7E               	movwf	??_sprintf& (0+255),b
 23201  005774  0E00               	movlw	0
 23202  005776  2187               	addwfc	(_sprintf$2151+1)& (0+255),w,b
 23203  005778  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23204  00577A  C07E  FFF6         	movff	??_sprintf,tblptrl
 23205  00577E  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23206  005782  0008               	tblrd		*
 23207  005784  CFF5 F091          	movff	tablat,sprintf@c
 23208                           
 23209                           ;doprnt.c: 1515: }
 23210                           ;doprnt.c: 1517: break;
 23211  005788  D016               	goto	l11915
 23212  00578A                     l11909:
 23213                           
 23214                           ; BSR set to: 0
 23215                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23216  00578A  D852               	call	PL24	;call to abstracted procedure
 23217  00578C  0EB4               	movlw	low _octpowers
 23218  00578E  257E               	addwf	??_sprintf& (0+255),w,b
 23219  005790  6EF6               	movwf	tblptrl,c
 23220  005792  0E6C               	movlw	high _octpowers
 23221  005794  D836               	call	PL14	;call to abstracted procedure
 23222  005796  EC95  F010         	call	___lldiv	;wreg free
 23223  00579A  5160               	movf	?___lldiv& (0+255),w,b
 23224  00579C  0B07               	andlw	7
 23225  00579E                     L40:
 23226  00579E  0F30               	addlw	48
 23227  0057A0  6F91               	movwf	sprintf@c& (0+255),b
 23228                           
 23229                           ;doprnt.c: 1527: break;
 23230  0057A2  D009               	goto	l11915
 23231  0057A4                     l11913:
 23232                           
 23233                           ; BSR set to: 0
 23234  0057A4  5192               	movf	sprintf@flag& (0+255),w,b
 23235  0057A6  0BC0               	andlw	192
 23236                           
 23237                           ; Switch size 1, requested type "space"
 23238                           ; Number of cases is 4, Range of values is 0 to 192
 23239                           ; switch strategies available:
 23240                           ; Name         Instructions Cycles
 23241                           ; simple_byte           13     7 (average)
 23242                           ;	Chosen strategy is simple_byte
 23243  0057A8  E0A2               	bz	l11897
 23244  0057AA  0A40               	xorlw	64	; case 64
 23245  0057AC  E0EE               	bz	l11909
 23246  0057AE  0AC0               	xorlw	192	; case 128
 23247  0057B0  E0C9               	bz	l11899
 23248  0057B2  0A40               	xorlw	64	; case 192
 23249  0057B4  E09C               	bz	l11897
 23250  0057B6                     l11915:
 23251                           
 23252                           ; BSR set to: 0
 23253                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23254  0057B6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23255  0057BA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23256  0057BE  C091  FFDF         	movff	sprintf@c,indf2
 23257  0057C2  D777               	goto	l11879
 23258  0057C4                     l11919:
 23259                           
 23260                           ; BSR set to: 0
 23261  0057C4  0789               	decf	sprintf@prec& (0+255),f,b
 23262  0057C6  A0D8               	btfss	status,0,c
 23263  0057C8  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23264  0057CA  0100               	movlb	0	; () banked
 23265  0057CC  2989               	incf	sprintf@prec& (0+255),w,b
 23266  0057CE  B4D8               	btfsc	status,2,c
 23267  0057D0  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23268  0057D2  E1E8               	bnz	l11913
 23269                           
 23270                           ; BSR set to: 0
 23271                           ;doprnt.c: 1532: }
 23272                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23273  0057D4  A792               	btfss	sprintf@flag& (0+255),3,b
 23274  0057D6  D00B               	goto	l11929
 23275                           
 23276                           ; BSR set to: 0
 23277  0057D8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23278  0057DA  0A80               	xorlw	128
 23279  0057DC  0F80               	addlw	-128
 23280  0057DE  0E01               	movlw	1
 23281  0057E0  B4D8               	btfsc	status,2,c
 23282  0057E2  5D8B               	subwf	sprintf@width& (0+255),w,b
 23283  0057E4  E304               	bnc	l11929
 23284  0057E6                     l11923:
 23285                           
 23286                           ; BSR set to: 0
 23287                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23288  0057E6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23289                           
 23290                           ; BSR set to: 0
 23291                           
 23292                           ; BSR set to: 0
 23293                           ;doprnt.c: 1538: while(--width);
 23294  0057EA  D835               	call	PL46	;call to abstracted procedure
 23295  0057EC  E1FC               	bnz	l11923
 23296  0057EE                     l11929:
 23297                           
 23298                           ; BSR set to: 0
 23299  0057EE  D84B               	call	PL62	;call to abstracted procedure
 23300  0057F0  6791               	tstfsz	sprintf@c& (0+255),b
 23301  0057F2  D4D1               	goto	l11595
 23302  0057F4                     l11931:
 23303                           
 23304                           ; BSR set to: 0
 23305                           ;doprnt.c: 1545: *sp = 0;
 23306  0057F4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23307  0057F8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23308  0057FC  0E00               	movlw	0
 23309  0057FE  6EDF               	movwf	indf2,c
 23310                           
 23311                           ; BSR set to: 0
 23312  005800  0C00               	retlw	0
 23313  005802                     __end_of_sprintf:
 23314                           	opt stack 0
 23315  005802                     PL14:
 23316                           	opt stack 24
 23317  005802  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23318  005804  6EF7               	movwf	tblptrh,c
 23319  005806  0009               	tblrd		*+
 23320  005808  CFF5 F064          	movff	tablat,?___lldiv+4
 23321  00580C  0009               	tblrd		*+
 23322  00580E  CFF5 F065          	movff	tablat,?___lldiv+5
 23323  005812  0009               	tblrd		*+
 23324  005814  CFF5 F066          	movff	tablat,?___lldiv+6
 23325  005818  000A               	tblrd		*-
 23326  00581A  CFF5 F067          	movff	tablat,?___lldiv+7
 23327  00581E  0012               	return	
 23328  005820                     __end_ofPL14:
 23329                           	opt stack 0
 23330  005820                     PL18:
 23331                           	opt stack 24
 23332  005820  1592               	andwf	sprintf@flag& (0+255),w,b
 23333  005822  6F7E               	movwf	??_sprintf& (0+255),b
 23334  005824  0E08               	movlw	8
 23335  005826  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23336  005828  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23337  00582A  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23338  00582C  0A08               	xorlw	8
 23339  00582E  0012               	return	
 23340  005830                     __end_ofPL18:
 23341                           	opt stack 0
 23342  005830                     PL24:
 23343                           	opt stack 24
 23344  005830  C08D  F060         	movff	sprintf@_val,?___lldiv
 23345  005834  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23346  005838  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23347  00583C  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23348  005840  C089  F07E         	movff	sprintf@prec,??_sprintf
 23349  005844  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23350  005848  90D8               	bcf	status,0,c
 23351  00584A  377E               	rlcf	??_sprintf& (0+255),f,b
 23352  00584C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23353  00584E  90D8               	bcf	status,0,c
 23354  005850  377E               	rlcf	??_sprintf& (0+255),f,b
 23355  005852  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23356  005854  0012               	return	
 23357  005856                     __end_ofPL24:
 23358                           	opt stack 0
 23359  005856                     PL46:
 23360                           	opt stack 24
 23361  005856  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23362  00585A  0E20               	movlw	32
 23363  00585C  6EDF               	movwf	indf2,c
 23364  00585E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23365  005860  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23366  005862  078B               	decf	sprintf@width& (0+255),f,b
 23367  005864  A0D8               	btfss	status,0,c
 23368  005866  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23369  005868  0100               	movlb	0	; () banked
 23370  00586A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23371  00586C  118B               	iorwf	sprintf@width& (0+255),w,b
 23372  00586E  0012               	return	
 23373  005870                     __end_ofPL46:
 23374                           	opt stack 0
 23375  005870                     PL58:
 23376                           	opt stack 24
 23377  005870  6ED9               	movwf	fsr2l,c
 23378  005872  6ADA               	clrf	fsr2h,c
 23379  005874  CFDE F08D          	movff	postinc2,sprintf@_val
 23380  005878  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23381  00587C  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23382  005880  CFDE F090          	movff	postinc2,sprintf@_val+3
 23383  005884  0C04               	retlw	4
 23384  005886                     __end_ofPL58:
 23385                           	opt stack 0
 23386  005886                     PL62:
 23387                           	opt stack 24
 23388  005886  C078  FFF6         	movff	sprintf@f,tblptrl
 23389  00588A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23390  00588E  4B78               	infsnz	sprintf@f& (0+255),f,b
 23391  005890  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23392  005892  0008               	tblrd		*
 23393  005894  CFF5 F091          	movff	tablat,sprintf@c
 23394  005898  0100               	movlb	0	; () banked
 23395  00589A  0012               	return	
 23396  00589C                     __end_ofPL62:
 23397                           	opt stack 0
 23398  00589C                     PL68:
 23399                           	opt stack 24
 23400  00589C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23401  0058A0  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23402  0058A4  0E20               	movlw	32
 23403  0058A6  6EDF               	movwf	indf2,c
 23404  0058A8  0C20               	retlw	32
 23405  0058AA                     __end_ofPL68:
 23406                           	opt stack 0
 23407  0058AA                     PL86:
 23408                           	opt stack 24
 23409  0058AA  4B78               	infsnz	sprintf@f& (0+255),f,b
 23410  0058AC  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23411  0058AE  C078  FFF6         	movff	sprintf@f,tblptrl
 23412  0058B2  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23413  0058B6  0008               	tblrd		*
 23414  0058B8  50F5               	movf	tablat,w,c
 23415  0058BA  0012               	return	
 23416  0058BC                     __end_ofPL86:
 23417                           	opt stack 0
 23418  0058BC                     PL102:
 23419                           	opt stack 24
 23420  0058BC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23421  0058C0  0E30               	movlw	48
 23422  0058C2  6EDF               	movwf	indf2,c
 23423  0058C4  0C30               	retlw	48
 23424  0058C6                     __end_ofPL102:
 23425                           	opt stack 0
 23426  0058C6                     PL112:
 23427                           	opt stack 24
 23428  0058C6  A0D8               	btfss	status,0,c
 23429  0058C8  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23430  0058CA  0100               	movlb	0	; () banked
 23431  0058CC  298B               	incf	sprintf@width& (0+255),w,b
 23432  0058CE  0012               	return	
 23433  0058D0                     __end_ofPL112:
 23434                           	opt stack 0
 23435                           tblptru	equ	0xFF8
 23436                           tblptrh	equ	0xFF7
 23437                           tblptrl	equ	0xFF6
 23438                           tablat	equ	0xFF5
 23439                           prodh	equ	0xFF4
 23440                           prodl	equ	0xFF3
 23441                           intcon	equ	0xFF2
 23442                           indf0	equ	0xFEF
 23443                           postinc0	equ	0xFEE
 23444                           fsr0h	equ	0xFEA
 23445                           fsr0l	equ	0xFE9
 23446                           wreg	equ	0xFE8
 23447                           indf1	equ	0xFE7
 23448                           postinc1	equ	0xFE6
 23449                           postdec1	equ	0xFE5
 23450                           fsr1h	equ	0xFE2
 23451                           fsr1l	equ	0xFE1
 23452                           indf2	equ	0xFDF
 23453                           postinc2	equ	0xFDE
 23454                           postdec2	equ	0xFDD
 23455                           plusw2	equ	0xFDB
 23456                           fsr2h	equ	0xFDA
 23457                           fsr2l	equ	0xFD9
 23458                           status	equ	0xFD8
 23459                           
 23460 ;; *************** function ___wmul *****************
 23461 ;; Defined at:
 23462 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23463 ;; Parameters:    Size  Location     Type
 23464 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23465 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23466 ;; Auto vars:     Size  Location     Type
 23467 ;;  product         2    4[BANK0 ] unsigned int 
 23468 ;; Return value:  Size  Location     Type
 23469 ;;                  2    0[BANK0 ] unsigned int 
 23470 ;; Registers used:
 23471 ;;		wreg, status,2, status,0, prodl, prodh
 23472 ;; Tracked objects:
 23473 ;;		On entry : F/0
 23474 ;;		On exit  : F/0
 23475 ;;		Unchanged: 0/0
 23476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23477 ;;      Params:         0       4       0       0       0       0       0
 23478 ;;      Locals:         0       2       0       0       0       0       0
 23479 ;;      Temps:          0       0       0       0       0       0       0
 23480 ;;      Totals:         0       6       0       0       0       0       0
 23481 ;;Total ram usage:        6 bytes
 23482 ;; Hardware stack levels used:    1
 23483 ;; Hardware stack levels required when called:    3
 23484 ;; This function calls:
 23485 ;;		Nothing
 23486 ;; This function is called by:
 23487 ;;		_sprintf
 23488 ;;		_atoi
 23489 ;; This function uses a non-reentrant model
 23490 ;;
 23491                           
 23492                           	psect	text57
 23493  0018D4                     __ptext57:
 23494                           	opt stack 0
 23495  0018D4                     ___wmul:
 23496                           	opt stack 24
 23497                           
 23498                           ; BSR set to: 0
 23499                           
 23500                           ; BSR set to: 0
 23501                           ;incstack = 0
 23502                           ;incstack = 0
 23503  0018D4  5160               	movf	___wmul@multiplier& (0+255),w,b
 23504  0018D6  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23505  0018D8  CFF3 F064          	movff	prodl,___wmul@product
 23506  0018DC  CFF4 F065          	movff	prodh,___wmul@product+1
 23507  0018E0  5160               	movf	___wmul@multiplier& (0+255),w,b
 23508  0018E2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23509  0018E4  D808               	call	PL90	;call to abstracted procedure
 23510  0018E6  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23511  0018E8  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23512  0018EA  D805               	call	PL90	;call to abstracted procedure
 23513                           
 23514                           ; BSR set to: 0
 23515  0018EC  C064  F060         	movff	___wmul@product,?___wmul
 23516  0018F0  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23517                           
 23518                           ; BSR set to: 0
 23519  0018F4  0012               	return	
 23520  0018F6                     __end_of___wmul:
 23521                           	opt stack 0
 23522  0018F6                     PL90:
 23523                           	opt stack 24
 23524  0018F6  CFF3 FFF4          	movff	prodl,prodh
 23525  0018FA  6AF3               	clrf	prodl,c
 23526  0018FC  50F3               	movf	prodl,w,c
 23527  0018FE  2764               	addwf	___wmul@product& (0+255),f,b
 23528  001900  50F4               	movf	prodh,w,c
 23529  001902  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23530  001904  0012               	return	
 23531  001906                     __end_ofPL90:
 23532                           	opt stack 0
 23533                           tblptru	equ	0xFF8
 23534                           tblptrh	equ	0xFF7
 23535                           tblptrl	equ	0xFF6
 23536                           tablat	equ	0xFF5
 23537                           prodh	equ	0xFF4
 23538                           prodl	equ	0xFF3
 23539                           intcon	equ	0xFF2
 23540                           indf0	equ	0xFEF
 23541                           postinc0	equ	0xFEE
 23542                           fsr0h	equ	0xFEA
 23543                           fsr0l	equ	0xFE9
 23544                           wreg	equ	0xFE8
 23545                           indf1	equ	0xFE7
 23546                           postinc1	equ	0xFE6
 23547                           postdec1	equ	0xFE5
 23548                           fsr1h	equ	0xFE2
 23549                           fsr1l	equ	0xFE1
 23550                           indf2	equ	0xFDF
 23551                           postinc2	equ	0xFDE
 23552                           postdec2	equ	0xFDD
 23553                           plusw2	equ	0xFDB
 23554                           fsr2h	equ	0xFDA
 23555                           fsr2l	equ	0xFD9
 23556                           status	equ	0xFD8
 23557                           
 23558 ;; *************** function ___llmod *****************
 23559 ;; Defined at:
 23560 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23561 ;; Parameters:    Size  Location     Type
 23562 ;;  dividend        4   13[BANK0 ] unsigned long 
 23563 ;;  divisor         4   17[BANK0 ] unsigned long 
 23564 ;; Auto vars:     Size  Location     Type
 23565 ;;  counter         1   21[BANK0 ] unsigned char 
 23566 ;; Return value:  Size  Location     Type
 23567 ;;                  4   13[BANK0 ] unsigned long 
 23568 ;; Registers used:
 23569 ;;		wreg, status,2, status,0
 23570 ;; Tracked objects:
 23571 ;;		On entry : F/0
 23572 ;;		On exit  : F/0
 23573 ;;		Unchanged: 0/0
 23574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23575 ;;      Params:         0       8       0       0       0       0       0
 23576 ;;      Locals:         0       1       0       0       0       0       0
 23577 ;;      Temps:          0       0       0       0       0       0       0
 23578 ;;      Totals:         0       9       0       0       0       0       0
 23579 ;;Total ram usage:        9 bytes
 23580 ;; Hardware stack levels used:    1
 23581 ;; Hardware stack levels required when called:    3
 23582 ;; This function calls:
 23583 ;;		Nothing
 23584 ;; This function is called by:
 23585 ;;		_sprintf
 23586 ;;		_ultoa
 23587 ;; This function uses a non-reentrant model
 23588 ;;
 23589                           
 23590                           	psect	text58
 23591  001E48                     __ptext58:
 23592                           	opt stack 0
 23593  001E48                     ___llmod:
 23594                           	opt stack 23
 23595                           
 23596                           ; BSR set to: 0
 23597                           
 23598                           ; BSR set to: 0
 23599                           ;incstack = 0
 23600                           ;incstack = 0
 23601  001E48  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23602  001E4A  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23603  001E4C  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23604  001E4E  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23605  001E50  E023               	bz	l2344
 23606                           
 23607                           ; BSR set to: 0
 23608  001E52  0E01               	movlw	1
 23609  001E54  6F75               	movwf	___llmod@counter& (0+255),b
 23610  001E56  D006               	goto	l12889
 23611  001E58                     l12887:
 23612                           
 23613                           ; BSR set to: 0
 23614  001E58  90D8               	bcf	status,0,c
 23615  001E5A  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23616  001E5C  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23617  001E5E  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23618  001E60  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23619  001E62  2B75               	incf	___llmod@counter& (0+255),f,b
 23620  001E64                     l12889:
 23621                           
 23622                           ; BSR set to: 0
 23623  001E64  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23624  001E66  D7F8               	goto	l12887
 23625  001E68                     l12891:
 23626                           
 23627                           ; BSR set to: 0
 23628  001E68  5171               	movf	___llmod@divisor& (0+255),w,b
 23629  001E6A  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23630  001E6C  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23631  001E6E  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23632  001E70  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23633  001E72  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23634  001E74  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23635  001E76  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23636  001E78  E308               	bnc	l12895
 23637                           
 23638                           ; BSR set to: 0
 23639  001E7A  5171               	movf	___llmod@divisor& (0+255),w,b
 23640  001E7C  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23641  001E7E  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23642  001E80  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23643  001E82  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23644  001E84  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23645  001E86  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23646  001E88  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23647  001E8A                     l12895:
 23648                           
 23649                           ; BSR set to: 0
 23650  001E8A  90D8               	bcf	status,0,c
 23651  001E8C  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23652  001E8E  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23653  001E90  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23654  001E92  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23655                           
 23656                           ; BSR set to: 0
 23657  001E94  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23658  001E96  D7E8               	goto	l12891
 23659  001E98                     l2344:
 23660                           
 23661                           ; BSR set to: 0
 23662  001E98  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23663  001E9C  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23664  001EA0  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23665  001EA4  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23666                           
 23667                           ; BSR set to: 0
 23668  001EA8  0012               	return	
 23669  001EAA                     __end_of___llmod:
 23670                           	opt stack 0
 23671                           tblptru	equ	0xFF8
 23672                           tblptrh	equ	0xFF7
 23673                           tblptrl	equ	0xFF6
 23674                           tablat	equ	0xFF5
 23675                           prodh	equ	0xFF4
 23676                           prodl	equ	0xFF3
 23677                           intcon	equ	0xFF2
 23678                           indf0	equ	0xFEF
 23679                           postinc0	equ	0xFEE
 23680                           fsr0h	equ	0xFEA
 23681                           fsr0l	equ	0xFE9
 23682                           wreg	equ	0xFE8
 23683                           indf1	equ	0xFE7
 23684                           postinc1	equ	0xFE6
 23685                           postdec1	equ	0xFE5
 23686                           fsr1h	equ	0xFE2
 23687                           fsr1l	equ	0xFE1
 23688                           indf2	equ	0xFDF
 23689                           postinc2	equ	0xFDE
 23690                           postdec2	equ	0xFDD
 23691                           plusw2	equ	0xFDB
 23692                           fsr2h	equ	0xFDA
 23693                           fsr2l	equ	0xFD9
 23694                           status	equ	0xFD8
 23695                           
 23696 ;; *************** function ___lldiv *****************
 23697 ;; Defined at:
 23698 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23699 ;; Parameters:    Size  Location     Type
 23700 ;;  dividend        4    0[BANK0 ] unsigned long 
 23701 ;;  divisor         4    4[BANK0 ] unsigned long 
 23702 ;; Auto vars:     Size  Location     Type
 23703 ;;  quotient        4    8[BANK0 ] unsigned long 
 23704 ;;  counter         1   12[BANK0 ] unsigned char 
 23705 ;; Return value:  Size  Location     Type
 23706 ;;                  4    0[BANK0 ] unsigned long 
 23707 ;; Registers used:
 23708 ;;		wreg, status,2, status,0
 23709 ;; Tracked objects:
 23710 ;;		On entry : F/0
 23711 ;;		On exit  : F/0
 23712 ;;		Unchanged: 0/0
 23713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23714 ;;      Params:         0       8       0       0       0       0       0
 23715 ;;      Locals:         0       5       0       0       0       0       0
 23716 ;;      Temps:          0       0       0       0       0       0       0
 23717 ;;      Totals:         0      13       0       0       0       0       0
 23718 ;;Total ram usage:       13 bytes
 23719 ;; Hardware stack levels used:    1
 23720 ;; Hardware stack levels required when called:    3
 23721 ;; This function calls:
 23722 ;;		Nothing
 23723 ;; This function is called by:
 23724 ;;		_sprintf
 23725 ;;		_ultoa
 23726 ;; This function uses a non-reentrant model
 23727 ;;
 23728                           
 23729                           	psect	text59
 23730  00212A                     __ptext59:
 23731                           	opt stack 0
 23732  00212A                     ___lldiv:
 23733                           	opt stack 23
 23734                           
 23735                           ; BSR set to: 0
 23736                           
 23737                           ; BSR set to: 0
 23738                           ;incstack = 0
 23739                           ;incstack = 0
 23740  00212A  6B68               	clrf	___lldiv@quotient& (0+255),b
 23741  00212C  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 23742  00212E  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 23743  002130  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 23744                           
 23745                           ; BSR set to: 0
 23746  002132  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23747  002134  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23748  002136  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23749  002138  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23750  00213A  E029               	bz	l2334
 23751                           
 23752                           ; BSR set to: 0
 23753  00213C  0E01               	movlw	1
 23754  00213E  6F6C               	movwf	___lldiv@counter& (0+255),b
 23755  002140  D006               	goto	l12869
 23756  002142                     l12867:
 23757                           
 23758                           ; BSR set to: 0
 23759  002142  90D8               	bcf	status,0,c
 23760  002144  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23761  002146  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23762  002148  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23763  00214A  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23764  00214C  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23765  00214E                     l12869:
 23766                           
 23767                           ; BSR set to: 0
 23768  00214E  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23769  002150  D7F8               	goto	l12867
 23770  002152                     l12871:
 23771                           
 23772                           ; BSR set to: 0
 23773  002152  90D8               	bcf	status,0,c
 23774  002154  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23775  002156  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23776  002158  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23777  00215A  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23778                           
 23779                           ; BSR set to: 0
 23780  00215C  5164               	movf	___lldiv@divisor& (0+255),w,b
 23781  00215E  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23782  002160  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23783  002162  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23784  002164  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23785  002166  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23786  002168  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23787  00216A  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23788  00216C  E309               	bnc	l12879
 23789                           
 23790                           ; BSR set to: 0
 23791  00216E  5164               	movf	___lldiv@divisor& (0+255),w,b
 23792  002170  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23793  002172  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23794  002174  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23795  002176  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23796  002178  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23797  00217A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23798  00217C  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23799                           
 23800                           ; BSR set to: 0
 23801  00217E  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23802  002180                     l12879:
 23803                           
 23804                           ; BSR set to: 0
 23805  002180  90D8               	bcf	status,0,c
 23806  002182  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23807  002184  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23808  002186  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23809  002188  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23810                           
 23811                           ; BSR set to: 0
 23812  00218A  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23813  00218C  D7E2               	goto	l12871
 23814  00218E                     l2334:
 23815                           
 23816                           ; BSR set to: 0
 23817  00218E  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23818  002192  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23819  002196  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23820  00219A  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23821                           
 23822                           ; BSR set to: 0
 23823  00219E  0012               	return	
 23824  0021A0                     __end_of___lldiv:
 23825                           	opt stack 0
 23826                           tblptru	equ	0xFF8
 23827                           tblptrh	equ	0xFF7
 23828                           tblptrl	equ	0xFF6
 23829                           tablat	equ	0xFF5
 23830                           prodh	equ	0xFF4
 23831                           prodl	equ	0xFF3
 23832                           intcon	equ	0xFF2
 23833                           indf0	equ	0xFEF
 23834                           postinc0	equ	0xFEE
 23835                           fsr0h	equ	0xFEA
 23836                           fsr0l	equ	0xFE9
 23837                           wreg	equ	0xFE8
 23838                           indf1	equ	0xFE7
 23839                           postinc1	equ	0xFE6
 23840                           postdec1	equ	0xFE5
 23841                           fsr1h	equ	0xFE2
 23842                           fsr1l	equ	0xFE1
 23843                           indf2	equ	0xFDF
 23844                           postinc2	equ	0xFDE
 23845                           postdec2	equ	0xFDD
 23846                           plusw2	equ	0xFDB
 23847                           fsr2h	equ	0xFDA
 23848                           fsr2l	equ	0xFD9
 23849                           status	equ	0xFD8
 23850                           
 23851 ;; *************** function _isdigit *****************
 23852 ;; Defined at:
 23853 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23854 ;; Parameters:    Size  Location     Type
 23855 ;;  c               1    wreg     unsigned char 
 23856 ;; Auto vars:     Size  Location     Type
 23857 ;;  c               1    2[BANK0 ] unsigned char 
 23858 ;; Return value:  Size  Location     Type
 23859 ;;		None               void
 23860 ;; Registers used:
 23861 ;;		wreg, status,2, status,0
 23862 ;; Tracked objects:
 23863 ;;		On entry : 0/0
 23864 ;;		On exit  : F/0
 23865 ;;		Unchanged: 0/0
 23866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23867 ;;      Params:         0       0       0       0       0       0       0
 23868 ;;      Locals:         0       2       0       0       0       0       0
 23869 ;;      Temps:          0       1       0       0       0       0       0
 23870 ;;      Totals:         0       3       0       0       0       0       0
 23871 ;;Total ram usage:        3 bytes
 23872 ;; Hardware stack levels used:    1
 23873 ;; Hardware stack levels required when called:    3
 23874 ;; This function calls:
 23875 ;;		Nothing
 23876 ;; This function is called by:
 23877 ;;		_sprintf
 23878 ;;		_atoi
 23879 ;; This function uses a non-reentrant model
 23880 ;;
 23881                           
 23882                           	psect	text60
 23883  001802                     __ptext60:
 23884                           	opt stack 0
 23885  001802                     _isdigit:
 23886                           	opt stack 24
 23887                           
 23888                           ; BSR set to: 0
 23889                           ;incstack = 0
 23890                           ;incstack = 0
 23891                           ;isdigit@c stored from wreg
 23892  001802  CFE8 F062          	movff	wreg,isdigit@c
 23893  001806  0100               	movlb	0	; () banked
 23894  001808  6B61               	clrf	_isdigit$2903& (0+255),b
 23895                           
 23896                           ; BSR set to: 0
 23897  00180A  0E3A               	movlw	58
 23898  00180C  6162               	cpfslt	isdigit@c& (0+255),b
 23899  00180E  D005               	goto	l12827
 23900                           
 23901                           ; BSR set to: 0
 23902  001810  0E2F               	movlw	47
 23903  001812  6562               	cpfsgt	isdigit@c& (0+255),b
 23904  001814  D002               	goto	l12827
 23905                           
 23906                           ; BSR set to: 0
 23907  001816  0E01               	movlw	1
 23908  001818  6F61               	movwf	_isdigit$2903& (0+255),b
 23909  00181A                     l12827:
 23910                           
 23911                           ; BSR set to: 0
 23912  00181A  C061  F060         	movff	_isdigit$2903,??_isdigit
 23913  00181E  3160               	rrcf	??_isdigit& (0+255),w,b
 23914                           
 23915                           ; BSR set to: 0
 23916  001820  0012               	return	
 23917  001822                     __end_of_isdigit:
 23918                           	opt stack 0
 23919                           tblptru	equ	0xFF8
 23920                           tblptrh	equ	0xFF7
 23921                           tblptrl	equ	0xFF6
 23922                           tablat	equ	0xFF5
 23923                           prodh	equ	0xFF4
 23924                           prodl	equ	0xFF3
 23925                           intcon	equ	0xFF2
 23926                           indf0	equ	0xFEF
 23927                           postinc0	equ	0xFEE
 23928                           fsr0h	equ	0xFEA
 23929                           fsr0l	equ	0xFE9
 23930                           wreg	equ	0xFE8
 23931                           indf1	equ	0xFE7
 23932                           postinc1	equ	0xFE6
 23933                           postdec1	equ	0xFE5
 23934                           fsr1h	equ	0xFE2
 23935                           fsr1l	equ	0xFE1
 23936                           indf2	equ	0xFDF
 23937                           postinc2	equ	0xFDE
 23938                           postdec2	equ	0xFDD
 23939                           plusw2	equ	0xFDB
 23940                           fsr2h	equ	0xFDA
 23941                           fsr2l	equ	0xFD9
 23942                           status	equ	0xFD8
 23943                           
 23944 ;; *************** function _printFirmwareVersion *****************
 23945 ;; Defined at:
 23946 ;;		line 2734 in file "main.c"
 23947 ;; Parameters:    Size  Location     Type
 23948 ;;		None
 23949 ;; Auto vars:     Size  Location     Type
 23950 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23951 ;; Return value:  Size  Location     Type
 23952 ;;		None               void
 23953 ;; Registers used:
 23954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23955 ;; Tracked objects:
 23956 ;;		On entry : 0/0
 23957 ;;		On exit  : 0/0
 23958 ;;		Unchanged: 0/0
 23959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23960 ;;      Params:         0       0       0       0       0       0       0
 23961 ;;      Locals:         0      20       0       0       0       0       0
 23962 ;;      Temps:          0       0       0       0       0       0       0
 23963 ;;      Totals:         0      20       0       0       0       0       0
 23964 ;;Total ram usage:       20 bytes
 23965 ;; Hardware stack levels used:    1
 23966 ;; Hardware stack levels required when called:    6
 23967 ;; This function calls:
 23968 ;;		_putsUSART
 23969 ;;		_WriteUSART
 23970 ;;		_itoa
 23971 ;; This function is called by:
 23972 ;;		_main
 23973 ;;		_doModeVerbose
 23974 ;; This function uses a non-reentrant model
 23975 ;;
 23976                           
 23977                           	psect	text61
 23978  002420                     __ptext61:
 23979                           	opt stack 0
 23980  002420                     _printFirmwareVersion:
 23981                           	opt stack 22
 23982                           
 23983                           ;main.c: 2735: char wrkbuf[20];
 23984                           ;main.c: 2736: putsUSART((char *) "Version: ");
 23985                           
 23986                           ; BSR set to: 0
 23987                           ;incstack = 0
 23988                           ;incstack = 0
 23989  002420  0E7B               	movlw	high STR_254
 23990  002422  0100               	movlb	0	; () banked
 23991  002424  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23992  002426  0E9C               	movlw	low STR_254
 23993  002428  6F61               	movwf	?_putsUSART& (0+255),b
 23994  00242A  EC6E  F00E         	call	_putsUSART	;wreg free
 23995                           
 23996                           ;main.c: 2737: itoa(wrkbuf, 1, 10);
 23997  00242E  D838               	call	PL64	;call to abstracted procedure
 23998  002430  0E01               	movlw	1
 23999  002432  6F72               	movwf	(?_itoa+2)& (0+255),b
 24000  002434  6B75               	clrf	(?_itoa+5)& (0+255),b
 24001  002436  0E0A               	movlw	10
 24002  002438  6F74               	movwf	(?_itoa+4)& (0+255),b
 24003  00243A  EC9E  F00C         	call	_itoa	;wreg free
 24004                           
 24005                           ; BSR set to: 0
 24006                           ;main.c: 2738: putsUSART(wrkbuf);
 24007  00243E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24008  002440  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24009  002442  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24010  002444  6F61               	movwf	?_putsUSART& (0+255),b
 24011  002446  EC6E  F00E         	call	_putsUSART	;wreg free
 24012  00244A                     l1209:
 24013  00244A  A2AC               	btfss	4012,1,c	;volatile
 24014  00244C  D7FE               	goto	l1209
 24015                           
 24016                           ;main.c: 2740: WriteUSART('.');
 24017  00244E  0E2E               	movlw	46
 24018  002450  ECC1  F00B         	call	_WriteUSART
 24019                           
 24020                           ;main.c: 2741: itoa(wrkbuf, 0, 10);
 24021  002454  D825               	call	PL64	;call to abstracted procedure
 24022  002456  6B72               	clrf	(?_itoa+2)& (0+255),b
 24023  002458  6B75               	clrf	(?_itoa+5)& (0+255),b
 24024  00245A  0E0A               	movlw	10
 24025  00245C  6F74               	movwf	(?_itoa+4)& (0+255),b
 24026  00245E  EC9E  F00C         	call	_itoa	;wreg free
 24027                           
 24028                           ; BSR set to: 0
 24029                           ;main.c: 2742: putsUSART(wrkbuf);
 24030  002462  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24031  002464  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24032  002466  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24033  002468  6F61               	movwf	?_putsUSART& (0+255),b
 24034  00246A  EC6E  F00E         	call	_putsUSART	;wreg free
 24035  00246E                     l1212:
 24036  00246E  A2AC               	btfss	4012,1,c	;volatile
 24037  002470  D7FE               	goto	l1212
 24038                           
 24039                           ;main.c: 2744: WriteUSART('.');
 24040  002472  0E2E               	movlw	46
 24041  002474  ECC1  F00B         	call	_WriteUSART
 24042                           
 24043                           ;main.c: 2745: itoa(wrkbuf, 0, 10);
 24044  002478  D813               	call	PL64	;call to abstracted procedure
 24045  00247A  6B72               	clrf	(?_itoa+2)& (0+255),b
 24046  00247C  6B75               	clrf	(?_itoa+5)& (0+255),b
 24047  00247E  0E0A               	movlw	10
 24048  002480  6F74               	movwf	(?_itoa+4)& (0+255),b
 24049  002482  EC9E  F00C         	call	_itoa	;wreg free
 24050                           
 24051                           ; BSR set to: 0
 24052                           ;main.c: 2746: putsUSART(wrkbuf);
 24053  002486  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24054  002488  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24055  00248A  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24056  00248C  6F61               	movwf	?_putsUSART& (0+255),b
 24057  00248E  EC6E  F00E         	call	_putsUSART	;wreg free
 24058                           
 24059                           ;main.c: 2747: putsUSART((char *) "\r\n");
 24060  002492  0E71               	movlw	high (STR_197+50)
 24061  002494  0100               	movlb	0	; () banked
 24062  002496  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24063  002498  0E8A               	movlw	low (STR_197+50)
 24064  00249A  6F61               	movwf	?_putsUSART& (0+255),b
 24065  00249C  EF6E  F00E         	goto	_putsUSART	;wreg free
 24066  0024A0                     __end_of_printFirmwareVersion:
 24067                           	opt stack 0
 24068  0024A0                     PL64:
 24069                           	opt stack 22
 24070  0024A0  0100               	movlb	0	; () banked
 24071  0024A2  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24072  0024A4  6F71               	movwf	(?_itoa+1)& (0+255),b
 24073  0024A6  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24074  0024A8  6F70               	movwf	?_itoa& (0+255),b
 24075  0024AA  6B73               	clrf	(?_itoa+3)& (0+255),b
 24076  0024AC  0012               	return	
 24077  0024AE                     __end_ofPL64:
 24078                           	opt stack 0
 24079                           tblptru	equ	0xFF8
 24080                           tblptrh	equ	0xFF7
 24081                           tblptrl	equ	0xFF6
 24082                           tablat	equ	0xFF5
 24083                           prodh	equ	0xFF4
 24084                           prodl	equ	0xFF3
 24085                           intcon	equ	0xFF2
 24086                           indf0	equ	0xFEF
 24087                           postinc0	equ	0xFEE
 24088                           fsr0h	equ	0xFEA
 24089                           fsr0l	equ	0xFE9
 24090                           wreg	equ	0xFE8
 24091                           indf1	equ	0xFE7
 24092                           postinc1	equ	0xFE6
 24093                           postdec1	equ	0xFE5
 24094                           fsr1h	equ	0xFE2
 24095                           fsr1l	equ	0xFE1
 24096                           indf2	equ	0xFDF
 24097                           postinc2	equ	0xFDE
 24098                           postdec2	equ	0xFDD
 24099                           plusw2	equ	0xFDB
 24100                           fsr2h	equ	0xFDA
 24101                           fsr2l	equ	0xFD9
 24102                           status	equ	0xFD8
 24103                           
 24104 ;; *************** function _itoa *****************
 24105 ;; Defined at:
 24106 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24107 ;; Parameters:    Size  Location     Type
 24108 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24109 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24110 ;;  val             2   18[BANK0 ] int 
 24111 ;;  base            2   20[BANK0 ] int 
 24112 ;; Auto vars:     Size  Location     Type
 24113 ;;  cp              2    0        PTR unsigned char 
 24114 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24115 ;; Return value:  Size  Location     Type
 24116 ;;                  2   16[BANK0 ] PTR unsigned char 
 24117 ;; Registers used:
 24118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24119 ;; Tracked objects:
 24120 ;;		On entry : F/0
 24121 ;;		On exit  : F/0
 24122 ;;		Unchanged: 0/0
 24123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24124 ;;      Params:         0       6       0       0       0       0       0
 24125 ;;      Locals:         0       2       0       0       0       0       0
 24126 ;;      Temps:          0       0       0       0       0       0       0
 24127 ;;      Totals:         0       8       0       0       0       0       0
 24128 ;;Total ram usage:        8 bytes
 24129 ;; Hardware stack levels used:    1
 24130 ;; Hardware stack levels required when called:    5
 24131 ;; This function calls:
 24132 ;;		_utoa
 24133 ;; This function is called by:
 24134 ;;		_receiveSendEventSLCAN
 24135 ;;		_findNodes
 24136 ;;		_printGUID
 24137 ;;		_printNodeFirmwareVersion
 24138 ;;		_printFirmwareVersion
 24139 ;; This function uses a non-reentrant model
 24140 ;;
 24141                           
 24142                           	psect	text62
 24143  00193C                     __ptext62:
 24144                           	opt stack 0
 24145  00193C                     _itoa:
 24146                           	opt stack 22
 24147                           
 24148                           ; BSR set to: 0
 24149                           
 24150                           ;incstack = 0
 24151                           ;incstack = 0
 24152  00193C  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24153  00193E  D00C               	goto	l12671
 24154                           
 24155                           ; BSR set to: 0
 24156  001940  C070  FFD9         	movff	itoa@buf,fsr2l
 24157  001944  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24158  001948  0E2D               	movlw	45
 24159  00194A  6EDF               	movwf	indf2,c
 24160                           
 24161                           ; BSR set to: 0
 24162  00194C  4B70               	infsnz	itoa@buf& (0+255),f,b
 24163  00194E  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24164                           
 24165                           ; BSR set to: 0
 24166  001950  6D72               	negf	itoa@val& (0+255),b
 24167  001952  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24168  001954  B0D8               	btfsc	status,0,c
 24169  001956  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24170  001958                     l12671:
 24171                           
 24172                           ; BSR set to: 0
 24173  001958  C070  F067         	movff	itoa@buf,?_utoa
 24174  00195C  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24175  001960  C072  F069         	movff	itoa@val,?_utoa+2
 24176  001964  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24177  001968  C074  F06B         	movff	itoa@base,?_utoa+4
 24178  00196C  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24179  001970  EF88  F013         	goto	_utoa	;wreg free
 24180  001974                     __end_of_itoa:
 24181                           	opt stack 0
 24182                           tblptru	equ	0xFF8
 24183                           tblptrh	equ	0xFF7
 24184                           tblptrl	equ	0xFF6
 24185                           tablat	equ	0xFF5
 24186                           prodh	equ	0xFF4
 24187                           prodl	equ	0xFF3
 24188                           intcon	equ	0xFF2
 24189                           indf0	equ	0xFEF
 24190                           postinc0	equ	0xFEE
 24191                           fsr0h	equ	0xFEA
 24192                           fsr0l	equ	0xFE9
 24193                           wreg	equ	0xFE8
 24194                           indf1	equ	0xFE7
 24195                           postinc1	equ	0xFE6
 24196                           postdec1	equ	0xFE5
 24197                           fsr1h	equ	0xFE2
 24198                           fsr1l	equ	0xFE1
 24199                           indf2	equ	0xFDF
 24200                           postinc2	equ	0xFDE
 24201                           postdec2	equ	0xFDD
 24202                           plusw2	equ	0xFDB
 24203                           fsr2h	equ	0xFDA
 24204                           fsr2l	equ	0xFD9
 24205                           status	equ	0xFD8
 24206                           
 24207 ;; *************** function _utoa *****************
 24208 ;; Defined at:
 24209 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24210 ;; Parameters:    Size  Location     Type
 24211 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24212 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24213 ;;  val             2    9[BANK0 ] unsigned int 
 24214 ;;  base            2   11[BANK0 ] int 
 24215 ;; Auto vars:     Size  Location     Type
 24216 ;;  v               2   13[BANK0 ] unsigned int 
 24217 ;;  c               1   15[BANK0 ] unsigned char 
 24218 ;; Return value:  Size  Location     Type
 24219 ;;                  2    7[BANK0 ] PTR unsigned char 
 24220 ;; Registers used:
 24221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24222 ;; Tracked objects:
 24223 ;;		On entry : F/0
 24224 ;;		On exit  : F/0
 24225 ;;		Unchanged: 0/0
 24226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24227 ;;      Params:         0       6       0       0       0       0       0
 24228 ;;      Locals:         0       3       0       0       0       0       0
 24229 ;;      Temps:          0       0       0       0       0       0       0
 24230 ;;      Totals:         0       9       0       0       0       0       0
 24231 ;;Total ram usage:        9 bytes
 24232 ;; Hardware stack levels used:    1
 24233 ;; Hardware stack levels required when called:    4
 24234 ;; This function calls:
 24235 ;;		___lwdiv
 24236 ;;		___lwmod
 24237 ;; This function is called by:
 24238 ;;		_itoa
 24239 ;; This function uses a non-reentrant model
 24240 ;;
 24241                           
 24242                           	psect	text63
 24243  002710                     __ptext63:
 24244                           	opt stack 0
 24245  002710                     _utoa:
 24246                           	opt stack 22
 24247                           
 24248                           ; BSR set to: 0
 24249                           
 24250                           ; BSR set to: 0
 24251                           ;incstack = 0
 24252                           ;incstack = 0
 24253  002710  C069  F06D         	movff	utoa@val,utoa@v
 24254  002714  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24255  002718                     l12833:
 24256                           
 24257                           ; BSR set to: 0
 24258  002718  C06D  F060         	movff	utoa@v,?___lwdiv
 24259  00271C  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24260  002720  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24261  002724  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24262  002728  ECFD  F00D         	call	___lwdiv	;wreg free
 24263  00272C  C060  F06D         	movff	?___lwdiv,utoa@v
 24264  002730  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24265                           
 24266                           ; BSR set to: 0
 24267  002734  4B67               	infsnz	utoa@buf& (0+255),f,b
 24268  002736  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24269                           
 24270                           ; BSR set to: 0
 24271  002738  516E               	movf	(utoa@v+1)& (0+255),w,b
 24272  00273A  116D               	iorwf	utoa@v& (0+255),w,b
 24273  00273C  E1ED               	bnz	l12833
 24274                           
 24275                           ; BSR set to: 0
 24276  00273E  C067  FFD9         	movff	utoa@buf,fsr2l
 24277  002742  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24278  002746  0E00               	movlw	0
 24279  002748  6ADF               	clrf	indf2,c
 24280                           
 24281                           ; BSR set to: 0
 24282  00274A  0767               	decf	utoa@buf& (0+255),f,b
 24283  00274C  A0D8               	btfss	status,0,c
 24284  00274E  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24285  002750                     l12843:
 24286                           
 24287                           ; BSR set to: 0
 24288  002750  C069  F060         	movff	utoa@val,?___lwmod
 24289  002754  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24290  002758  C06B  F062         	movff	utoa@base,?___lwmod+2
 24291  00275C  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24292  002760  ECD6  F00C         	call	___lwmod	;wreg free
 24293  002764  5160               	movf	?___lwmod& (0+255),w,b
 24294  002766  6F6F               	movwf	utoa@c& (0+255),b
 24295                           
 24296                           ; BSR set to: 0
 24297  002768  C069  F060         	movff	utoa@val,?___lwdiv
 24298  00276C  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24299  002770  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24300  002774  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24301  002778  ECFD  F00D         	call	___lwdiv	;wreg free
 24302  00277C  C060  F069         	movff	?___lwdiv,utoa@val
 24303  002780  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24304                           
 24305                           ; BSR set to: 0
 24306  002784  0E09               	movlw	9
 24307  002786  656F               	cpfsgt	utoa@c& (0+255),b
 24308  002788  D002               	goto	l2303
 24309                           
 24310                           ; BSR set to: 0
 24311  00278A  0E07               	movlw	7
 24312  00278C  276F               	addwf	utoa@c& (0+255),f,b
 24313  00278E                     l2303:
 24314                           
 24315                           ; BSR set to: 0
 24316  00278E  0E30               	movlw	48
 24317  002790  276F               	addwf	utoa@c& (0+255),f,b
 24318                           
 24319                           ; BSR set to: 0
 24320  002792  C067  FFD9         	movff	utoa@buf,fsr2l
 24321  002796  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24322  00279A  C06F  FFDF         	movff	utoa@c,indf2
 24323                           
 24324                           ; BSR set to: 0
 24325  00279E  0767               	decf	utoa@buf& (0+255),f,b
 24326  0027A0  A0D8               	btfss	status,0,c
 24327  0027A2  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24328                           
 24329                           ; BSR set to: 0
 24330  0027A4  516A               	movf	(utoa@val+1)& (0+255),w,b
 24331  0027A6  1169               	iorwf	utoa@val& (0+255),w,b
 24332  0027A8  E1D3               	bnz	l12843
 24333                           
 24334                           ; BSR set to: 0
 24335                           ;	Return value of _utoa is never used
 24336  0027AA  4B67               	infsnz	utoa@buf& (0+255),f,b
 24337  0027AC  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24338                           
 24339                           ; BSR set to: 0
 24340  0027AE  0012               	return	
 24341  0027B0                     __end_of_utoa:
 24342                           	opt stack 0
 24343                           tblptru	equ	0xFF8
 24344                           tblptrh	equ	0xFF7
 24345                           tblptrl	equ	0xFF6
 24346                           tablat	equ	0xFF5
 24347                           prodh	equ	0xFF4
 24348                           prodl	equ	0xFF3
 24349                           intcon	equ	0xFF2
 24350                           indf0	equ	0xFEF
 24351                           postinc0	equ	0xFEE
 24352                           fsr0h	equ	0xFEA
 24353                           fsr0l	equ	0xFE9
 24354                           wreg	equ	0xFE8
 24355                           indf1	equ	0xFE7
 24356                           postinc1	equ	0xFE6
 24357                           postdec1	equ	0xFE5
 24358                           fsr1h	equ	0xFE2
 24359                           fsr1l	equ	0xFE1
 24360                           indf2	equ	0xFDF
 24361                           postinc2	equ	0xFDE
 24362                           postdec2	equ	0xFDD
 24363                           plusw2	equ	0xFDB
 24364                           fsr2h	equ	0xFDA
 24365                           fsr2l	equ	0xFD9
 24366                           status	equ	0xFD8
 24367                           
 24368 ;; *************** function ___lwmod *****************
 24369 ;; Defined at:
 24370 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24371 ;; Parameters:    Size  Location     Type
 24372 ;;  dividend        2    0[BANK0 ] unsigned int 
 24373 ;;  divisor         2    2[BANK0 ] unsigned int 
 24374 ;; Auto vars:     Size  Location     Type
 24375 ;;  counter         1    4[BANK0 ] unsigned char 
 24376 ;; Return value:  Size  Location     Type
 24377 ;;                  2    0[BANK0 ] unsigned int 
 24378 ;; Registers used:
 24379 ;;		wreg, status,2, status,0
 24380 ;; Tracked objects:
 24381 ;;		On entry : F/0
 24382 ;;		On exit  : F/0
 24383 ;;		Unchanged: 0/0
 24384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24385 ;;      Params:         0       4       0       0       0       0       0
 24386 ;;      Locals:         0       1       0       0       0       0       0
 24387 ;;      Temps:          0       0       0       0       0       0       0
 24388 ;;      Totals:         0       5       0       0       0       0       0
 24389 ;;Total ram usage:        5 bytes
 24390 ;; Hardware stack levels used:    1
 24391 ;; Hardware stack levels required when called:    3
 24392 ;; This function calls:
 24393 ;;		Nothing
 24394 ;; This function is called by:
 24395 ;;		_utoa
 24396 ;; This function uses a non-reentrant model
 24397 ;;
 24398                           
 24399                           	psect	text64
 24400  0019AC                     __ptext64:
 24401                           	opt stack 0
 24402  0019AC                     ___lwmod:
 24403                           	opt stack 22
 24404                           
 24405                           ; BSR set to: 0
 24406                           
 24407                           ; BSR set to: 0
 24408                           ;incstack = 0
 24409                           ;incstack = 0
 24410  0019AC  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24411  0019AE  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24412  0019B0  E017               	bz	l2427
 24413                           
 24414                           ; BSR set to: 0
 24415  0019B2  0E01               	movlw	1
 24416  0019B4  6F64               	movwf	___lwmod@counter& (0+255),b
 24417  0019B6  D004               	goto	l12927
 24418  0019B8                     l12925:
 24419                           
 24420                           ; BSR set to: 0
 24421  0019B8  90D8               	bcf	status,0,c
 24422  0019BA  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24423  0019BC  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24424  0019BE  2B64               	incf	___lwmod@counter& (0+255),f,b
 24425  0019C0                     l12927:
 24426                           
 24427                           ; BSR set to: 0
 24428  0019C0  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24429  0019C2  D7FA               	goto	l12925
 24430  0019C4                     l12929:
 24431                           
 24432                           ; BSR set to: 0
 24433  0019C4  5162               	movf	___lwmod@divisor& (0+255),w,b
 24434  0019C6  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24435  0019C8  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24436  0019CA  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24437  0019CC  E304               	bnc	l12933
 24438                           
 24439                           ; BSR set to: 0
 24440  0019CE  5162               	movf	___lwmod@divisor& (0+255),w,b
 24441  0019D0  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24442  0019D2  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24443  0019D4  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24444  0019D6                     l12933:
 24445                           
 24446                           ; BSR set to: 0
 24447  0019D6  90D8               	bcf	status,0,c
 24448  0019D8  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24449  0019DA  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24450                           
 24451                           ; BSR set to: 0
 24452  0019DC  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24453  0019DE  D7F2               	goto	l12929
 24454  0019E0                     l2427:
 24455                           
 24456                           ; BSR set to: 0
 24457  0019E0  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24458  0019E4  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24459                           
 24460                           ; BSR set to: 0
 24461  0019E8  0012               	return	
 24462  0019EA                     __end_of___lwmod:
 24463                           	opt stack 0
 24464                           tblptru	equ	0xFF8
 24465                           tblptrh	equ	0xFF7
 24466                           tblptrl	equ	0xFF6
 24467                           tablat	equ	0xFF5
 24468                           prodh	equ	0xFF4
 24469                           prodl	equ	0xFF3
 24470                           intcon	equ	0xFF2
 24471                           indf0	equ	0xFEF
 24472                           postinc0	equ	0xFEE
 24473                           fsr0h	equ	0xFEA
 24474                           fsr0l	equ	0xFE9
 24475                           wreg	equ	0xFE8
 24476                           indf1	equ	0xFE7
 24477                           postinc1	equ	0xFE6
 24478                           postdec1	equ	0xFE5
 24479                           fsr1h	equ	0xFE2
 24480                           fsr1l	equ	0xFE1
 24481                           indf2	equ	0xFDF
 24482                           postinc2	equ	0xFDE
 24483                           postdec2	equ	0xFDD
 24484                           plusw2	equ	0xFDB
 24485                           fsr2h	equ	0xFDA
 24486                           fsr2l	equ	0xFD9
 24487                           status	equ	0xFD8
 24488                           
 24489 ;; *************** function ___lwdiv *****************
 24490 ;; Defined at:
 24491 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24492 ;; Parameters:    Size  Location     Type
 24493 ;;  dividend        2    0[BANK0 ] unsigned int 
 24494 ;;  divisor         2    2[BANK0 ] unsigned int 
 24495 ;; Auto vars:     Size  Location     Type
 24496 ;;  quotient        2    5[BANK0 ] unsigned int 
 24497 ;;  counter         1    4[BANK0 ] unsigned char 
 24498 ;; Return value:  Size  Location     Type
 24499 ;;                  2    0[BANK0 ] unsigned int 
 24500 ;; Registers used:
 24501 ;;		wreg, status,2, status,0
 24502 ;; Tracked objects:
 24503 ;;		On entry : F/0
 24504 ;;		On exit  : F/0
 24505 ;;		Unchanged: 0/0
 24506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24507 ;;      Params:         0       4       0       0       0       0       0
 24508 ;;      Locals:         0       3       0       0       0       0       0
 24509 ;;      Temps:          0       0       0       0       0       0       0
 24510 ;;      Totals:         0       7       0       0       0       0       0
 24511 ;;Total ram usage:        7 bytes
 24512 ;; Hardware stack levels used:    1
 24513 ;; Hardware stack levels required when called:    3
 24514 ;; This function calls:
 24515 ;;		Nothing
 24516 ;; This function is called by:
 24517 ;;		_utoa
 24518 ;; This function uses a non-reentrant model
 24519 ;;
 24520                           
 24521                           	psect	text65
 24522  001BFA                     __ptext65:
 24523                           	opt stack 0
 24524  001BFA                     ___lwdiv:
 24525                           	opt stack 22
 24526                           
 24527                           ; BSR set to: 0
 24528                           
 24529                           ; BSR set to: 0
 24530                           ;incstack = 0
 24531                           ;incstack = 0
 24532  001BFA  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24533  001BFC  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24534                           
 24535                           ; BSR set to: 0
 24536  001BFE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24537  001C00  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24538  001C02  E01B               	bz	l2417
 24539                           
 24540                           ; BSR set to: 0
 24541  001C04  0E01               	movlw	1
 24542  001C06  6F64               	movwf	___lwdiv@counter& (0+255),b
 24543  001C08  D004               	goto	l12907
 24544  001C0A                     l12905:
 24545                           
 24546                           ; BSR set to: 0
 24547  001C0A  90D8               	bcf	status,0,c
 24548  001C0C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24549  001C0E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24550  001C10  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24551  001C12                     l12907:
 24552                           
 24553                           ; BSR set to: 0
 24554  001C12  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24555  001C14  D7FA               	goto	l12905
 24556  001C16                     l12909:
 24557                           
 24558                           ; BSR set to: 0
 24559  001C16  90D8               	bcf	status,0,c
 24560  001C18  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24561  001C1A  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24562                           
 24563                           ; BSR set to: 0
 24564  001C1C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24565  001C1E  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24566  001C20  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24567  001C22  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24568  001C24  E305               	bnc	l12917
 24569                           
 24570                           ; BSR set to: 0
 24571  001C26  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24572  001C28  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24573  001C2A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24574  001C2C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24575                           
 24576                           ; BSR set to: 0
 24577  001C2E  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24578  001C30                     l12917:
 24579                           
 24580                           ; BSR set to: 0
 24581  001C30  90D8               	bcf	status,0,c
 24582  001C32  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24583  001C34  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24584                           
 24585                           ; BSR set to: 0
 24586  001C36  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24587  001C38  D7EE               	goto	l12909
 24588  001C3A                     l2417:
 24589                           
 24590                           ; BSR set to: 0
 24591  001C3A  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24592  001C3E  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24593                           
 24594                           ; BSR set to: 0
 24595  001C42  0012               	return	
 24596  001C44                     __end_of___lwdiv:
 24597                           	opt stack 0
 24598                           tblptru	equ	0xFF8
 24599                           tblptrh	equ	0xFF7
 24600                           tblptrl	equ	0xFF6
 24601                           tablat	equ	0xFF5
 24602                           prodh	equ	0xFF4
 24603                           prodl	equ	0xFF3
 24604                           intcon	equ	0xFF2
 24605                           indf0	equ	0xFEF
 24606                           postinc0	equ	0xFEE
 24607                           fsr0h	equ	0xFEA
 24608                           fsr0l	equ	0xFE9
 24609                           wreg	equ	0xFE8
 24610                           indf1	equ	0xFE7
 24611                           postinc1	equ	0xFE6
 24612                           postdec1	equ	0xFE5
 24613                           fsr1h	equ	0xFE2
 24614                           fsr1l	equ	0xFE1
 24615                           indf2	equ	0xFDF
 24616                           postinc2	equ	0xFDE
 24617                           postdec2	equ	0xFDD
 24618                           plusw2	equ	0xFDB
 24619                           fsr2h	equ	0xFDA
 24620                           fsr2l	equ	0xFD9
 24621                           status	equ	0xFD8
 24622                           
 24623 ;; *************** function _printMode *****************
 24624 ;; Defined at:
 24625 ;;		line 2755 in file "main.c"
 24626 ;; Parameters:    Size  Location     Type
 24627 ;;		None
 24628 ;; Auto vars:     Size  Location     Type
 24629 ;;		None
 24630 ;; Return value:  Size  Location     Type
 24631 ;;		None               void
 24632 ;; Registers used:
 24633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24634 ;; Tracked objects:
 24635 ;;		On entry : 0/0
 24636 ;;		On exit  : 0/0
 24637 ;;		Unchanged: 0/0
 24638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24639 ;;      Params:         0       0       0       0       0       0       0
 24640 ;;      Locals:         0       0       0       0       0       0       0
 24641 ;;      Temps:          0       0       0       0       0       0       0
 24642 ;;      Totals:         0       0       0       0       0       0       0
 24643 ;;Total ram usage:        0 bytes
 24644 ;; Hardware stack levels used:    1
 24645 ;; Hardware stack levels required when called:    5
 24646 ;; This function calls:
 24647 ;;		_putsUSART
 24648 ;; This function is called by:
 24649 ;;		_main
 24650 ;; This function uses a non-reentrant model
 24651 ;;
 24652                           
 24653                           	psect	text66
 24654  0020B4                     __ptext66:
 24655                           	opt stack 0
 24656  0020B4                     _printMode:
 24657                           	opt stack 24
 24658                           
 24659                           ;main.c: 2756: putsUSART((char *) "Mode: ");
 24660                           
 24661                           ; BSR set to: 0
 24662                           ;incstack = 0
 24663                           ;incstack = 0
 24664  0020B4  0E7C               	movlw	high STR_256
 24665  0020B6  0100               	movlb	0	; () banked
 24666  0020B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24667  0020BA  0E25               	movlw	low STR_256
 24668  0020BC  6F61               	movwf	?_putsUSART& (0+255),b
 24669  0020BE  EC6E  F00E         	call	_putsUSART	;wreg free
 24670                           
 24671                           ;main.c: 2757: if (0 == mode) {
 24672  0020C2  0100               	movlb	0	; () banked
 24673  0020C4  67F1               	tstfsz	_mode& (0+255),b
 24674  0020C6  D007               	goto	l10015
 24675                           
 24676                           ; BSR set to: 0
 24677                           ;main.c: 2758: putsUSART((char *) "Verbose");
 24678  0020C8  0E7C               	movlw	high STR_257
 24679  0020CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24680  0020CC  0E1D               	movlw	low STR_257
 24681  0020CE  6F61               	movwf	?_putsUSART& (0+255),b
 24682  0020D0  EC6E  F00E         	call	_putsUSART	;wreg free
 24683                           
 24684                           ;main.c: 2759: } else if (1 == mode) {
 24685  0020D4  D023               	goto	l1219
 24686  0020D6                     l10015:
 24687                           
 24688                           ; BSR set to: 0
 24689  0020D6  05F1               	decf	_mode& (0+255),w,b
 24690  0020D8  E107               	bnz	l10019
 24691                           
 24692                           ; BSR set to: 0
 24693                           ;main.c: 2760: putsUSART((char *) "VSCP Driver");
 24694  0020DA  0E7B               	movlw	high STR_258
 24695  0020DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24696  0020DE  0E7A               	movlw	low STR_258
 24697  0020E0  6F61               	movwf	?_putsUSART& (0+255),b
 24698  0020E2  EC6E  F00E         	call	_putsUSART	;wreg free
 24699                           
 24700                           ;main.c: 2761: } else if (2 == mode) {
 24701  0020E6  D01A               	goto	l1219
 24702  0020E8                     l10019:
 24703                           
 24704                           ; BSR set to: 0
 24705  0020E8  51F1               	movf	_mode& (0+255),w,b
 24706  0020EA  0A02               	xorlw	2
 24707  0020EC  E107               	bnz	l10023
 24708                           
 24709                           ; BSR set to: 0
 24710                           ;main.c: 2762: putsUSART((char *) "SL Driver");
 24711  0020EE  0E7B               	movlw	high STR_259
 24712  0020F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24713  0020F2  0EB0               	movlw	low STR_259
 24714  0020F4  6F61               	movwf	?_putsUSART& (0+255),b
 24715  0020F6  EC6E  F00E         	call	_putsUSART	;wreg free
 24716                           
 24717                           ;main.c: 2763: } else if (3 == mode) {
 24718  0020FA  D010               	goto	l1219
 24719  0020FC                     l10023:
 24720                           
 24721                           ; BSR set to: 0
 24722  0020FC  51F1               	movf	_mode& (0+255),w,b
 24723  0020FE  0A03               	xorlw	3
 24724  002100  E107               	bnz	l10027
 24725                           
 24726                           ; BSR set to: 0
 24727                           ;main.c: 2764: putsUSART((char *) "VSCP Node");
 24728  002102  0E7B               	movlw	high STR_260
 24729  002104  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24730  002106  0EA6               	movlw	low STR_260
 24731  002108  6F61               	movwf	?_putsUSART& (0+255),b
 24732  00210A  EC6E  F00E         	call	_putsUSART	;wreg free
 24733                           
 24734                           ;main.c: 2765: } else {
 24735  00210E  D006               	goto	l1219
 24736  002110                     l10027:
 24737                           
 24738                           ; BSR set to: 0
 24739                           ;main.c: 2766: putsUSART((char *) "Unknown (Verbose used)");
 24740  002110  0E79               	movlw	high STR_261
 24741  002112  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24742  002114  0EEE               	movlw	low STR_261
 24743  002116  6F61               	movwf	?_putsUSART& (0+255),b
 24744  002118  EC6E  F00E         	call	_putsUSART	;wreg free
 24745  00211C                     l1219:
 24746                           
 24747                           ;main.c: 2767: }
 24748                           ;main.c: 2768: putsUSART((char *) "\r\n");
 24749  00211C  0E71               	movlw	high (STR_197+50)
 24750  00211E  0100               	movlb	0	; () banked
 24751  002120  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24752  002122  0E8A               	movlw	low (STR_197+50)
 24753  002124  6F61               	movwf	?_putsUSART& (0+255),b
 24754  002126  EF6E  F00E         	goto	_putsUSART	;wreg free
 24755  00212A                     __end_of_printMode:
 24756                           	opt stack 0
 24757                           tblptru	equ	0xFF8
 24758                           tblptrh	equ	0xFF7
 24759                           tblptrl	equ	0xFF6
 24760                           tablat	equ	0xFF5
 24761                           prodh	equ	0xFF4
 24762                           prodl	equ	0xFF3
 24763                           intcon	equ	0xFF2
 24764                           indf0	equ	0xFEF
 24765                           postinc0	equ	0xFEE
 24766                           fsr0h	equ	0xFEA
 24767                           fsr0l	equ	0xFE9
 24768                           wreg	equ	0xFE8
 24769                           indf1	equ	0xFE7
 24770                           postinc1	equ	0xFE6
 24771                           postdec1	equ	0xFE5
 24772                           fsr1h	equ	0xFE2
 24773                           fsr1l	equ	0xFE1
 24774                           indf2	equ	0xFDF
 24775                           postinc2	equ	0xFDE
 24776                           postdec2	equ	0xFDD
 24777                           plusw2	equ	0xFDB
 24778                           fsr2h	equ	0xFDA
 24779                           fsr2l	equ	0xFD9
 24780                           status	equ	0xFD8
 24781                           
 24782 ;; *************** function _putsUSART *****************
 24783 ;; Defined at:
 24784 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24785 ;; Parameters:    Size  Location     Type
 24786 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24787 ;;		 -> STR_262(3), STR_261(23), STR_260(10), STR_259(10), 
 24788 ;;		 -> STR_258(12), STR_257(8), STR_256(7), STR_255(3), 
 24789 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_254(10), STR_253(3), STR_250(20), 
 24790 ;;		 -> STR_249(3), STR_248(14), STR_247(3), STR_243(8), 
 24791 ;;		 -> STR_242(15), STR_241(67), STR_240(3), STR_239(27), 
 24792 ;;		 -> STR_238(67), STR_237(39), STR_236(62), STR_235(55), 
 24793 ;;		 -> STR_234(49), STR_233(67), STR_232(47), STR_231(47), 
 24794 ;;		 -> STR_230(34), STR_229(71), STR_228(20), STR_227(78), 
 24795 ;;		 -> STR_226(24), STR_225(77), STR_224(67), STR_223(69), 
 24796 ;;		 -> STR_222(47), STR_221(40), STR_220(39), STR_219(33), 
 24797 ;;		 -> STR_218(23), STR_217(56), STR_216(24), STR_215(44), 
 24798 ;;		 -> STR_214(50), STR_213(31), STR_212(50), STR_211(51), 
 24799 ;;		 -> STR_210(46), STR_209(44), STR_208(27), STR_207(39), 
 24800 ;;		 -> STR_206(39), STR_205(52), STR_204(54), STR_203(55), 
 24801 ;;		 -> STR_202(3), STR_199(24), STR_198(57), STR_197(53), 
 24802 ;;		 -> STR_196(58), STR_195(3), STR_192(25), STR_191(3), 
 24803 ;;		 -> STR_188(24), STR_187(3), STR_184(24), STR_183(3), 
 24804 ;;		 -> STR_180(24), STR_179(3), STR_176(23), STR_175(3), 
 24805 ;;		 -> STR_172(21), STR_171(3), STR_168(22), STR_167(3), 
 24806 ;;		 -> STR_164(17), STR_163(3), STR_160(18), STR_159(4), 
 24807 ;;		 -> STR_158(11), STR_157(2), STR_154(7), STR_151(7), 
 24808 ;;		 -> STR_148(9), STR_145(7), STR_142(8), STR_139(7), 
 24809 ;;		 -> STR_138(2), STR_137(2), STR_136(6), STR_135(8), 
 24810 ;;		 -> STR_134(8), STR_133(20), STR_132(27), STR_131(6), 
 24811 ;;		 -> STR_130(33), STR_127(26), STR_125(32), STR_123(28), 
 24812 ;;		 -> STR_119(6), STR_117(40), STR_115(44), STR_112(6), 
 24813 ;;		 -> STR_111(39), STR_109(36), STR_107(37), STR_105(40), 
 24814 ;;		 -> STR_103(37), STR_102(50), STR_99(6), STR_98(41), 
 24815 ;;		 -> STR_96(38), STR_94(39), STR_92(42), STR_90(39), 
 24816 ;;		 -> STR_89(66), STR_86(6), STR_85(3), STR_82(20), 
 24817 ;;		 -> STR_80(33), STR_79(35), STR_78(24), STR_76(33), 
 24818 ;;		 -> STR_74(24), STR_71(54), STR_70(6), STR_69(3), 
 24819 ;;		 -> STR_64(34), STR_63(3), STR_60(4), wrkbuf(80), 
 24820 ;;		 -> STR_55(15), STR_53(33), STR_51(24), STR_48(6), 
 24821 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 24822 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 24823 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 24824 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 24825 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 24826 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 24827 ;;		 -> STR_3(35), STR_2(53), STR_1(37), 
 24828 ;; Auto vars:     Size  Location     Type
 24829 ;;		None
 24830 ;; Return value:  Size  Location     Type
 24831 ;;		None               void
 24832 ;; Registers used:
 24833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24834 ;; Tracked objects:
 24835 ;;		On entry : F/0
 24836 ;;		On exit  : 0/0
 24837 ;;		Unchanged: 0/0
 24838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24839 ;;      Params:         0       2       0       0       0       0       0
 24840 ;;      Locals:         0       0       0       0       0       0       0
 24841 ;;      Temps:          0       2       0       0       0       0       0
 24842 ;;      Totals:         0       4       0       0       0       0       0
 24843 ;;Total ram usage:        4 bytes
 24844 ;; Hardware stack levels used:    1
 24845 ;; Hardware stack levels required when called:    4
 24846 ;; This function calls:
 24847 ;;		_WriteUSART
 24848 ;; This function is called by:
 24849 ;;		_main
 24850 ;;		_doModeVerbose
 24851 ;;		_doModeSLCAN
 24852 ;;		_receivePrintEventVerbose
 24853 ;;		_receiveSendEventSLCAN
 24854 ;;		_printStatistics
 24855 ;;		_printErrors
 24856 ;;		_printHelp
 24857 ;;		_findNodes
 24858 ;;		_printGUID
 24859 ;;		_printMDF
 24860 ;;		_printNodeFirmwareVersion
 24861 ;;		_printFirmwareVersion
 24862 ;;		_printMode
 24863 ;; This function uses a non-reentrant model
 24864 ;;
 24865                           
 24866                           	psect	text67
 24867  001CDC                     __ptext67:
 24868                           	opt stack 0
 24869  001CDC                     _putsUSART:
 24870                           	opt stack 23
 24871  001CDC                     l1819:
 24872  001CDC  A2AC               	btfss	4012,1,c	;volatile
 24873  001CDE  D7FE               	goto	l1819
 24874  001CE0  0100               	movlb	0	; () banked
 24875  001CE2  5161               	movf	putsUSART@data& (0+255),w,b
 24876  001CE4  6EF6               	movwf	tblptrl,c
 24877  001CE6  6EE9               	movwf	fsr0l,c
 24878  001CE8  0E05               	movlw	(high __ramtop+-1)
 24879  001CEA  6EEA               	movwf	fsr0h,c
 24880  001CEC  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24881  001CEE  64EA               	cpfsgt	fsr0h,c
 24882  001CF0  D003               	bra	u12017
 24883  001CF2  6EEA               	movwf	fsr0h,c
 24884  001CF4  50EF               	movf	indf0,w,c
 24885  001CF6  D003               	bra	u12010
 24886  001CF8                     u12017:
 24887  001CF8  6EF7               	movwf	tblptrh,c
 24888  001CFA  0008               	tblrd		*
 24889  001CFC  50F5               	movf	tablat,w,c
 24890  001CFE                     u12010:
 24891  001CFE  ECC1  F00B         	call	_WriteUSART
 24892  001D02  0100               	movlb	0	; () banked
 24893  001D04  5161               	movf	putsUSART@data& (0+255),w,b
 24894  001D06  6F63               	movwf	??_putsUSART& (0+255),b
 24895  001D08  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24896  001D0A  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24897  001D0C  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24898  001D0E  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24899  001D10  5163               	movf	??_putsUSART& (0+255),w,b
 24900  001D12  6EF6               	movwf	tblptrl,c
 24901  001D14  6EE9               	movwf	fsr0l,c
 24902  001D16  0E05               	movlw	(high __ramtop+-1)
 24903  001D18  6EEA               	movwf	fsr0h,c
 24904  001D1A  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24905  001D1C  64EA               	cpfsgt	fsr0h,c
 24906  001D1E  D003               	bra	u12027
 24907  001D20  6EEA               	movwf	fsr0h,c
 24908  001D22  50EF               	movf	indf0,w,c
 24909  001D24  D003               	bra	u12020
 24910  001D26                     u12027:
 24911  001D26  6EF7               	movwf	tblptrh,c
 24912  001D28  0008               	tblrd		*
 24913  001D2A  50F5               	movf	tablat,w,c
 24914  001D2C                     u12020:
 24915  001D2C  0900               	iorlw	0
 24916  001D2E  B4D8               	btfsc	status,2,c
 24917  001D30  0012               	return	
 24918  001D32  D7D4               	goto	l1819
 24919  001D34                     __end_of_putsUSART:
 24920                           	opt stack 0
 24921                           tblptru	equ	0xFF8
 24922                           tblptrh	equ	0xFF7
 24923                           tblptrl	equ	0xFF6
 24924                           tablat	equ	0xFF5
 24925                           prodh	equ	0xFF4
 24926                           prodl	equ	0xFF3
 24927                           intcon	equ	0xFF2
 24928                           indf0	equ	0xFEF
 24929                           postinc0	equ	0xFEE
 24930                           fsr0h	equ	0xFEA
 24931                           fsr0l	equ	0xFE9
 24932                           wreg	equ	0xFE8
 24933                           indf1	equ	0xFE7
 24934                           postinc1	equ	0xFE6
 24935                           postdec1	equ	0xFE5
 24936                           fsr1h	equ	0xFE2
 24937                           fsr1l	equ	0xFE1
 24938                           indf2	equ	0xFDF
 24939                           postinc2	equ	0xFDE
 24940                           postdec2	equ	0xFDD
 24941                           plusw2	equ	0xFDB
 24942                           fsr2h	equ	0xFDA
 24943                           fsr2l	equ	0xFD9
 24944                           status	equ	0xFD8
 24945                           
 24946 ;; *************** function _WriteUSART *****************
 24947 ;; Defined at:
 24948 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24949 ;; Parameters:    Size  Location     Type
 24950 ;;  data            1    wreg     unsigned char 
 24951 ;; Auto vars:     Size  Location     Type
 24952 ;;  data            1    0[BANK0 ] unsigned char 
 24953 ;; Return value:  Size  Location     Type
 24954 ;;		None               void
 24955 ;; Registers used:
 24956 ;;		wreg
 24957 ;; Tracked objects:
 24958 ;;		On entry : 0/0
 24959 ;;		On exit  : 0/0
 24960 ;;		Unchanged: 0/0
 24961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24962 ;;      Params:         0       0       0       0       0       0       0
 24963 ;;      Locals:         0       1       0       0       0       0       0
 24964 ;;      Temps:          0       0       0       0       0       0       0
 24965 ;;      Totals:         0       1       0       0       0       0       0
 24966 ;;Total ram usage:        1 bytes
 24967 ;; Hardware stack levels used:    1
 24968 ;; Hardware stack levels required when called:    3
 24969 ;; This function calls:
 24970 ;;		Nothing
 24971 ;; This function is called by:
 24972 ;;		_doModeVerbose
 24973 ;;		_sendEscapedUartData
 24974 ;;		_sendVSCPDriverErrorFrame
 24975 ;;		_sendVSCPDriverAck
 24976 ;;		_sendVSCPDriverNack
 24977 ;;		_sendVSCPDriverCommandReply
 24978 ;;		_receiveSendEventCANAL
 24979 ;;		_receiveSendMultiEventCANAL
 24980 ;;		_sendVSCPModeCapabilities
 24981 ;;		_receiveSendEventSLCAN
 24982 ;;		_printBinary
 24983 ;;		_printFirmwareVersion
 24984 ;;		_putsUSART
 24985 ;; This function uses a non-reentrant model
 24986 ;;
 24987                           
 24988                           	psect	text68
 24989  001782                     __ptext68:
 24990                           	opt stack 0
 24991  001782                     _WriteUSART:
 24992                           	opt stack 24
 24993                           
 24994                           ;incstack = 0
 24995                           ;incstack = 0
 24996                           ;WriteUSART@data stored from wreg
 24997  001782  CFE8 F060          	movff	wreg,WriteUSART@data
 24998  001786  ACAC               	btfss	4012,6,c	;volatile
 24999  001788  D003               	goto	l11941
 25000  00178A  90AC               	bcf	4012,0,c	;volatile
 25001  00178C  B213               	btfsc	_USART_Status,1,c
 25002  00178E  80AC               	bsf	4012,0,c	;volatile
 25003  001790                     l11941:
 25004  001790  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25005  001794  0012               	return	
 25006  001796                     __end_of_WriteUSART:
 25007                           	opt stack 0
 25008                           tblptru	equ	0xFF8
 25009                           tblptrh	equ	0xFF7
 25010                           tblptrl	equ	0xFF6
 25011                           tablat	equ	0xFF5
 25012                           prodh	equ	0xFF4
 25013                           prodl	equ	0xFF3
 25014                           intcon	equ	0xFF2
 25015                           indf0	equ	0xFEF
 25016                           postinc0	equ	0xFEE
 25017                           fsr0h	equ	0xFEA
 25018                           fsr0l	equ	0xFE9
 25019                           wreg	equ	0xFE8
 25020                           indf1	equ	0xFE7
 25021                           postinc1	equ	0xFE6
 25022                           postdec1	equ	0xFE5
 25023                           fsr1h	equ	0xFE2
 25024                           fsr1l	equ	0xFE1
 25025                           indf2	equ	0xFDF
 25026                           postinc2	equ	0xFDE
 25027                           postdec2	equ	0xFDD
 25028                           plusw2	equ	0xFDB
 25029                           fsr2h	equ	0xFDA
 25030                           fsr2l	equ	0xFD9
 25031                           status	equ	0xFD8
 25032                           
 25033 ;; *************** function _init *****************
 25034 ;; Defined at:
 25035 ;;		line 375 in file "main.c"
 25036 ;; Parameters:    Size  Location     Type
 25037 ;;		None
 25038 ;; Auto vars:     Size  Location     Type
 25039 ;;		None
 25040 ;; Return value:  Size  Location     Type
 25041 ;;		None               void
 25042 ;; Registers used:
 25043 ;;		wreg, status,2, status,0, cstack
 25044 ;; Tracked objects:
 25045 ;;		On entry : E/0
 25046 ;;		On exit  : F/0
 25047 ;;		Unchanged: 0/0
 25048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25049 ;;      Params:         0       0       0       0       0       0       0
 25050 ;;      Locals:         0       0       0       0       0       0       0
 25051 ;;      Temps:          0       0       0       0       0       0       0
 25052 ;;      Totals:         0       0       0       0       0       0       0
 25053 ;;Total ram usage:        0 bytes
 25054 ;; Hardware stack levels used:    1
 25055 ;; Hardware stack levels required when called:    5
 25056 ;; This function calls:
 25057 ;;		_WriteTimer0
 25058 ;;		_init_app_ram
 25059 ;;		_OpenUSART
 25060 ;;		_OpenTimer0
 25061 ;;		_ECANInitialize
 25062 ;; This function is called by:
 25063 ;;		_main
 25064 ;; This function uses a non-reentrant model
 25065 ;;
 25066                           
 25067                           	psect	text69
 25068  001BB0                     __ptext69:
 25069                           	opt stack 0
 25070  001BB0                     _init:
 25071                           	opt stack 24
 25072                           
 25073                           ;main.c: 377: init_app_ram();
 25074                           
 25075                           ;incstack = 0
 25076                           ;incstack = 0
 25077  001BB0  EC47  F00E         	call	_init_app_ram	;wreg free
 25078                           
 25079                           ; BSR set to: 1
 25080                           ;main.c: 380: OSCCONbits.IRCF0 = 1;
 25081  001BB4  88D3               	bsf	4051,4,c	;volatile
 25082                           
 25083                           ; BSR set to: 1
 25084                           ;main.c: 381: OSCCONbits.IRCF1 = 1;
 25085  001BB6  8AD3               	bsf	4051,5,c	;volatile
 25086                           
 25087                           ; BSR set to: 1
 25088                           ;main.c: 382: OSCCONbits.IRCF2 = 1;
 25089  001BB8  8CD3               	bsf	4051,6,c	;volatile
 25090                           
 25091                           ; BSR set to: 1
 25092                           ;main.c: 383: OSCTUNEbits.PLLEN = 1;
 25093  001BBA  8C9B               	bsf	3995,6,c	;volatile
 25094                           
 25095                           ; BSR set to: 1
 25096                           ;main.c: 385: TRISBbits.RB2 = 0;
 25097  001BBC  9493               	bcf	3987,2,c	;volatile
 25098                           
 25099                           ; BSR set to: 1
 25100                           ;main.c: 386: TRISBbits.RB3 = 1;
 25101  001BBE  8693               	bsf	3987,3,c	;volatile
 25102                           
 25103                           ; BSR set to: 1
 25104                           ;main.c: 388: TRISCbits.RC1 = 0;
 25105  001BC0  9294               	bcf	3988,1,c	;volatile
 25106                           
 25107                           ; BSR set to: 1
 25108                           ;main.c: 389: TRISCbits.RC6 = 0;
 25109  001BC2  9C94               	bcf	3988,6,c	;volatile
 25110                           
 25111                           ; BSR set to: 1
 25112                           ;main.c: 390: TRISCbits.RC7 = 1;
 25113  001BC4  8E94               	bsf	3988,7,c	;volatile
 25114                           
 25115                           ;main.c: 394: OpenUSART( 0b01111111 &
 25116                           ;main.c: 395: 0b11111111 &
 25117                           ;main.c: 396: 0b11111110 &
 25118                           ;main.c: 397: 0b11111101 &
 25119                           ;main.c: 398: 0b11111111,
 25120                           ;main.c: 399: 21 );
 25121  001BC6  0100               	movlb	0	; () banked
 25122  001BC8  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25123  001BCA  0E15               	movlw	21
 25124  001BCC  6F60               	movwf	?_OpenUSART& (0+255),b
 25125  001BCE  0E7C               	movlw	124
 25126  001BD0  ECC6  F00E         	call	_OpenUSART
 25127                           
 25128                           ; BSR set to: 0
 25129                           ;main.c: 401: RCIF = 0;
 25130  001BD4  9A9E               	bcf	3998,5,c	;volatile
 25131                           
 25132                           ; BSR set to: 0
 25133                           ;main.c: 402: RCIP = 0;
 25134  001BD6  9A9F               	bcf	3999,5,c	;volatile
 25135                           
 25136                           ; BSR set to: 0
 25137                           ;main.c: 403: RCIE = 1;
 25138  001BD8  8A9D               	bsf	3997,5,c	;volatile
 25139                           
 25140                           ; BSR set to: 0
 25141                           ;main.c: 404: PEIE = 1;
 25142  001BDA  8CF2               	bsf	intcon,6,c	;volatile
 25143                           
 25144                           ; BSR set to: 0
 25145                           ;main.c: 407: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25146  001BDC  0E92               	movlw	146
 25147  001BDE  ECF2  F00B         	call	_OpenTimer0
 25148                           
 25149                           ; BSR set to: 0
 25150                           ;main.c: 408: WriteTimer0(0xfb1d);
 25151  001BE2  0EFB               	movlw	251
 25152  001BE4  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25153  001BE6  0E1D               	movlw	29
 25154  001BE8  6F60               	movwf	?_WriteTimer0& (0+255),b
 25155  001BEA  ECB8  F00B         	call	_WriteTimer0	;wreg free
 25156                           
 25157                           ;main.c: 411: ECANInitialize();
 25158  001BEE  EC48  F011         	call	_ECANInitialize	;wreg free
 25159                           
 25160                           ; BSR set to: 0
 25161                           ;main.c: 435: RXBnIE = 1;
 25162  001BF2  82A3               	bsf	4003,1,c	;volatile
 25163                           
 25164                           ; BSR set to: 0
 25165                           ;main.c: 436: ERRIE = 1;
 25166  001BF4  8AA3               	bsf	4003,5,c	;volatile
 25167                           
 25168                           ; BSR set to: 0
 25169                           ;main.c: 438: (INTCONbits.GIE = 1);
 25170  001BF6  8EF2               	bsf	intcon,7,c	;volatile
 25171                           
 25172                           ; BSR set to: 0
 25173  001BF8  0012               	return	
 25174  001BFA                     __end_of_init:
 25175                           	opt stack 0
 25176                           tblptru	equ	0xFF8
 25177                           tblptrh	equ	0xFF7
 25178                           tblptrl	equ	0xFF6
 25179                           tablat	equ	0xFF5
 25180                           prodh	equ	0xFF4
 25181                           prodl	equ	0xFF3
 25182                           intcon	equ	0xFF2
 25183                           indf0	equ	0xFEF
 25184                           postinc0	equ	0xFEE
 25185                           fsr0h	equ	0xFEA
 25186                           fsr0l	equ	0xFE9
 25187                           wreg	equ	0xFE8
 25188                           indf1	equ	0xFE7
 25189                           postinc1	equ	0xFE6
 25190                           postdec1	equ	0xFE5
 25191                           fsr1h	equ	0xFE2
 25192                           fsr1l	equ	0xFE1
 25193                           indf2	equ	0xFDF
 25194                           postinc2	equ	0xFDE
 25195                           postdec2	equ	0xFDD
 25196                           plusw2	equ	0xFDB
 25197                           fsr2h	equ	0xFDA
 25198                           fsr2l	equ	0xFD9
 25199                           status	equ	0xFD8
 25200                           
 25201 ;; *************** function _ECANInitialize *****************
 25202 ;; Defined at:
 25203 ;;		line 168 in file "ECAN.c"
 25204 ;; Parameters:    Size  Location     Type
 25205 ;;		None
 25206 ;; Auto vars:     Size  Location     Type
 25207 ;;		None
 25208 ;; Return value:  Size  Location     Type
 25209 ;;		None               void
 25210 ;; Registers used:
 25211 ;;		wreg, status,2, status,0, cstack
 25212 ;; Tracked objects:
 25213 ;;		On entry : F/0
 25214 ;;		On exit  : F/0
 25215 ;;		Unchanged: 0/0
 25216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25217 ;;      Params:         0       0       0       0       0       0       0
 25218 ;;      Locals:         0       0       0       0       0       0       0
 25219 ;;      Temps:          0       0       0       0       0       0       0
 25220 ;;      Totals:         0       0       0       0       0       0       0
 25221 ;;Total ram usage:        0 bytes
 25222 ;; Hardware stack levels used:    1
 25223 ;; Hardware stack levels required when called:    4
 25224 ;; This function calls:
 25225 ;;		_ECANSetOperationMode
 25226 ;; This function is called by:
 25227 ;;		_init
 25228 ;; This function uses a non-reentrant model
 25229 ;;
 25230                           
 25231                           	psect	text70
 25232  002290                     __ptext70:
 25233                           	opt stack 0
 25234  002290                     _ECANInitialize:
 25235                           	opt stack 24
 25236                           
 25237                           ; BSR set to: 0
 25238                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25239                           
 25240                           ; BSR set to: 0
 25241                           ;incstack = 0
 25242                           ;incstack = 0
 25243  002290  0E80               	movlw	128
 25244  002292  ECD6  F00B         	call	_ECANSetOperationMode
 25245                           
 25246                           ; BSR set to: 0
 25247                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25248  002296  0E09               	movlw	9
 25249  002298  6E70               	movwf	3952,c	;volatile
 25250                           
 25251                           ; BSR set to: 0
 25252                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25253  00229A  0EFC               	movlw	252
 25254  00229C  6E71               	movwf	3953,c	;volatile
 25255                           
 25256                           ; BSR set to: 0
 25257                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25258                           ;ECAN.c: 181: (0 << 6) |
 25259                           ;ECAN.c: 182: (2-1);
 25260  00229E  0E01               	movlw	1
 25261  0022A0  6E72               	movwf	3954,c	;volatile
 25262                           
 25263                           ; BSR set to: 0
 25264                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25265  0022A2  0E20               	movlw	32
 25266  0022A4  6E73               	movwf	3955,c	;volatile
 25267                           
 25268                           ; BSR set to: 0
 25269                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25270  0022A6  8E77               	bsf	3959,7,c	;volatile
 25271                           
 25272                           ; BSR set to: 0
 25273                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25274  0022A8  9C77               	bcf	3959,6,c	;volatile
 25275                           
 25276                           ; BSR set to: 0
 25277                           ;ECAN.c: 205: RXB0CON = 0;
 25278  0022AA  6A60               	clrf	3936,c	;volatile
 25279                           
 25280                           ; BSR set to: 0
 25281                           ;ECAN.c: 211: RXB1CON = 0;
 25282  0022AC  010F               	movlb	15	; () banked
 25283  0022AE  6B50               	clrf	80,b	;volatile
 25284                           
 25285                           ; BSR set to: 15
 25286                           ;ECAN.c: 221: B0CON = 0;
 25287  0022B0  010E               	movlb	14	; () banked
 25288  0022B2  6B20               	clrf	32,b	;volatile
 25289                           
 25290                           ; BSR set to: 14
 25291                           ;ECAN.c: 231: B1CON = 0;
 25292  0022B4  6B30               	clrf	48,b	;volatile
 25293                           
 25294                           ; BSR set to: 14
 25295                           ;ECAN.c: 241: B2CON = 0;
 25296  0022B6  6B40               	clrf	64,b	;volatile
 25297                           
 25298                           ; BSR set to: 14
 25299                           ;ECAN.c: 251: B3CON = 0;
 25300  0022B8  6B50               	clrf	80,b	;volatile
 25301                           
 25302                           ; BSR set to: 14
 25303                           ;ECAN.c: 261: B4CON = 0;
 25304  0022BA  6B60               	clrf	96,b	;volatile
 25305                           
 25306                           ; BSR set to: 14
 25307                           ;ECAN.c: 271: B5CON = 0;
 25308  0022BC  6B70               	clrf	112,b	;volatile
 25309                           
 25310                           ; BSR set to: 14
 25311                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25312  0022BE  010D               	movlb	13	; () banked
 25313  0022C0  6BF8               	clrf	248,b	;volatile
 25314                           
 25315                           ; BSR set to: 13
 25316                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25317  0022C2  010F               	movlb	15	; () banked
 25318  0022C4  6B00               	clrf	0,b	;volatile
 25319                           
 25320                           ; BSR set to: 15
 25321  0022C6  0E08               	movlw	8
 25322  0022C8  6F01               	movwf	1,b	;volatile
 25323                           
 25324                           ; BSR set to: 15
 25325  0022CA  6B02               	clrf	2,b	;volatile
 25326                           
 25327                           ; BSR set to: 15
 25328  0022CC  6B03               	clrf	3,b	;volatile
 25329                           
 25330                           ; BSR set to: 15
 25331                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25332  0022CE  0E01               	movlw	1
 25333  0022D0  010D               	movlb	13	; () banked
 25334  0022D2  6FD4               	movwf	212,b	;volatile
 25335                           
 25336                           ; BSR set to: 13
 25337                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25338  0022D4  6BD5               	clrf	213,b	;volatile
 25339                           
 25340                           ; BSR set to: 13
 25341                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25342  0022D6  6BE0               	clrf	224,b	;volatile
 25343                           
 25344                           ; BSR set to: 13
 25345                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25346  0022D8  0E11               	movlw	17
 25347  0022DA  6FE1               	movwf	225,b	;volatile
 25348                           
 25349                           ; BSR set to: 13
 25350                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25351  0022DC  6FE2               	movwf	226,b	;volatile
 25352                           
 25353                           ; BSR set to: 13
 25354                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25355  0022DE  6BE3               	clrf	227,b	;volatile
 25356                           
 25357                           ; BSR set to: 13
 25358                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25359  0022E0  6BE4               	clrf	228,b	;volatile
 25360                           
 25361                           ; BSR set to: 13
 25362                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25363  0022E2  6BE5               	clrf	229,b	;volatile
 25364                           
 25365                           ; BSR set to: 13
 25366                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25367  0022E4  6BE6               	clrf	230,b	;volatile
 25368                           
 25369                           ; BSR set to: 13
 25370                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25371  0022E6  6BE7               	clrf	231,b	;volatile
 25372                           
 25373                           ; BSR set to: 13
 25374                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25375  0022E8  0E54               	movlw	84
 25376  0022EA  6FF0               	movwf	240,b	;volatile
 25377                           
 25378                           ; BSR set to: 13
 25379                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25380  0022EC  0E05               	movlw	5
 25381  0022EE  6FF1               	movwf	241,b	;volatile
 25382                           
 25383                           ; BSR set to: 13
 25384                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25385  0022F0  6BF2               	clrf	242,b	;volatile
 25386                           
 25387                           ; BSR set to: 13
 25388                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25389  0022F2  6BF2               	clrf	242,b	;volatile
 25390                           
 25391                           ; BSR set to: 13
 25392                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25393  0022F4  010F               	movlb	15	; () banked
 25394  0022F6  6B18               	clrf	24,b	;volatile
 25395                           
 25396                           ; BSR set to: 15
 25397  0022F8  6B19               	clrf	25,b	;volatile
 25398                           
 25399                           ; BSR set to: 15
 25400  0022FA  6B1A               	clrf	26,b	;volatile
 25401                           
 25402                           ; BSR set to: 15
 25403  0022FC  6B1B               	clrf	27,b	;volatile
 25404                           
 25405                           ; BSR set to: 15
 25406                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25407  0022FE  8719               	bsf	25,3,b	;volatile
 25408                           
 25409                           ; BSR set to: 15
 25410                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25411  002300  6B1C               	clrf	28,b	;volatile
 25412                           
 25413                           ; BSR set to: 15
 25414  002302  6B1D               	clrf	29,b	;volatile
 25415                           
 25416                           ; BSR set to: 15
 25417  002304  6B1E               	clrf	30,b	;volatile
 25418                           
 25419                           ; BSR set to: 15
 25420  002306  6B1F               	clrf	31,b	;volatile
 25421                           
 25422                           ; BSR set to: 15
 25423                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25424  002308  871D               	bsf	29,3,b	;volatile
 25425                           
 25426                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25427  00230A  0E20               	movlw	32
 25428  00230C  EFD6  F00B         	goto	_ECANSetOperationMode
 25429  002310                     __end_of_ECANInitialize:
 25430                           	opt stack 0
 25431                           tblptru	equ	0xFF8
 25432                           tblptrh	equ	0xFF7
 25433                           tblptrl	equ	0xFF6
 25434                           tablat	equ	0xFF5
 25435                           prodh	equ	0xFF4
 25436                           prodl	equ	0xFF3
 25437                           intcon	equ	0xFF2
 25438                           indf0	equ	0xFEF
 25439                           postinc0	equ	0xFEE
 25440                           fsr0h	equ	0xFEA
 25441                           fsr0l	equ	0xFE9
 25442                           wreg	equ	0xFE8
 25443                           indf1	equ	0xFE7
 25444                           postinc1	equ	0xFE6
 25445                           postdec1	equ	0xFE5
 25446                           fsr1h	equ	0xFE2
 25447                           fsr1l	equ	0xFE1
 25448                           indf2	equ	0xFDF
 25449                           postinc2	equ	0xFDE
 25450                           postdec2	equ	0xFDD
 25451                           plusw2	equ	0xFDB
 25452                           fsr2h	equ	0xFDA
 25453                           fsr2l	equ	0xFD9
 25454                           status	equ	0xFD8
 25455                           
 25456 ;; *************** function _ECANSetOperationMode *****************
 25457 ;; Defined at:
 25458 ;;		line 1014 in file "ECAN.c"
 25459 ;; Parameters:    Size  Location     Type
 25460 ;;  mode            1    wreg     enum E16346
 25461 ;; Auto vars:     Size  Location     Type
 25462 ;;  mode            1    0[BANK0 ] enum E16346
 25463 ;; Return value:  Size  Location     Type
 25464 ;;		None               void
 25465 ;; Registers used:
 25466 ;;		wreg, status,2, status,0
 25467 ;; Tracked objects:
 25468 ;;		On entry : 0/0
 25469 ;;		On exit  : F/0
 25470 ;;		Unchanged: 0/0
 25471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25472 ;;      Params:         0       0       0       0       0       0       0
 25473 ;;      Locals:         0       1       0       0       0       0       0
 25474 ;;      Temps:          0       0       0       0       0       0       0
 25475 ;;      Totals:         0       1       0       0       0       0       0
 25476 ;;Total ram usage:        1 bytes
 25477 ;; Hardware stack levels used:    1
 25478 ;; Hardware stack levels required when called:    3
 25479 ;; This function calls:
 25480 ;;		Nothing
 25481 ;; This function is called by:
 25482 ;;		_doModeVerbose
 25483 ;;		_doModeVscp
 25484 ;;		_doModeSLCAN
 25485 ;;		_ECANInitialize
 25486 ;; This function uses a non-reentrant model
 25487 ;;
 25488                           
 25489                           	psect	text71
 25490  0017AC                     __ptext71:
 25491                           	opt stack 0
 25492  0017AC                     _ECANSetOperationMode:
 25493                           	opt stack 25
 25494                           
 25495                           ; BSR set to: 0
 25496                           ;incstack = 0
 25497                           ;incstack = 0
 25498                           ;ECANSetOperationMode@mode stored from wreg
 25499  0017AC  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25500                           
 25501                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25502  0017B0  0E1F               	movlw	31
 25503  0017B2  166F               	andwf	3951,f,c	;volatile
 25504                           
 25505                           ;ECAN.c: 1016: CANCON |= mode;
 25506  0017B4  0100               	movlb	0	; () banked
 25507  0017B6  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25508  0017B8  126F               	iorwf	3951,f,c	;volatile
 25509  0017BA                     l11257:
 25510                           
 25511                           ; BSR set to: 0
 25512  0017BA  506F               	movf	3951,w,c	;volatile
 25513  0017BC  0BE0               	andlw	224
 25514  0017BE  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25515  0017C0  B4D8               	btfsc	status,2,c
 25516                           
 25517                           ; BSR set to: 0
 25518  0017C2  0012               	return	
 25519  0017C4  D7FA               	goto	l11257
 25520  0017C6                     __end_of_ECANSetOperationMode:
 25521                           	opt stack 0
 25522                           tblptru	equ	0xFF8
 25523                           tblptrh	equ	0xFF7
 25524                           tblptrl	equ	0xFF6
 25525                           tablat	equ	0xFF5
 25526                           prodh	equ	0xFF4
 25527                           prodl	equ	0xFF3
 25528                           intcon	equ	0xFF2
 25529                           indf0	equ	0xFEF
 25530                           postinc0	equ	0xFEE
 25531                           fsr0h	equ	0xFEA
 25532                           fsr0l	equ	0xFE9
 25533                           wreg	equ	0xFE8
 25534                           indf1	equ	0xFE7
 25535                           postinc1	equ	0xFE6
 25536                           postdec1	equ	0xFE5
 25537                           fsr1h	equ	0xFE2
 25538                           fsr1l	equ	0xFE1
 25539                           indf2	equ	0xFDF
 25540                           postinc2	equ	0xFDE
 25541                           postdec2	equ	0xFDD
 25542                           plusw2	equ	0xFDB
 25543                           fsr2h	equ	0xFDA
 25544                           fsr2l	equ	0xFD9
 25545                           status	equ	0xFD8
 25546                           
 25547 ;; *************** function _OpenTimer0 *****************
 25548 ;; Defined at:
 25549 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25550 ;; Parameters:    Size  Location     Type
 25551 ;;  config          1    wreg     unsigned char 
 25552 ;; Auto vars:     Size  Location     Type
 25553 ;;  config          1    0[BANK0 ] unsigned char 
 25554 ;; Return value:  Size  Location     Type
 25555 ;;		None               void
 25556 ;; Registers used:
 25557 ;;		wreg, status,2, status,0
 25558 ;; Tracked objects:
 25559 ;;		On entry : F/0
 25560 ;;		On exit  : F/0
 25561 ;;		Unchanged: 0/0
 25562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25563 ;;      Params:         0       0       0       0       0       0       0
 25564 ;;      Locals:         0       1       0       0       0       0       0
 25565 ;;      Temps:          0       0       0       0       0       0       0
 25566 ;;      Totals:         0       1       0       0       0       0       0
 25567 ;;Total ram usage:        1 bytes
 25568 ;; Hardware stack levels used:    1
 25569 ;; Hardware stack levels required when called:    3
 25570 ;; This function calls:
 25571 ;;		Nothing
 25572 ;; This function is called by:
 25573 ;;		_init
 25574 ;; This function uses a non-reentrant model
 25575 ;;
 25576                           
 25577                           	psect	text72
 25578  0017E4                     __ptext72:
 25579                           	opt stack 0
 25580  0017E4                     _OpenTimer0:
 25581                           	opt stack 25
 25582                           
 25583                           ; BSR set to: 0
 25584                           ;incstack = 0
 25585                           ;incstack = 0
 25586                           ;OpenTimer0@config stored from wreg
 25587  0017E4  CFE8 F060          	movff	wreg,OpenTimer0@config
 25588                           
 25589                           ; BSR set to: 0
 25590  0017E8  5160               	movf	OpenTimer0@config& (0+255),w,b
 25591  0017EA  0B7F               	andlw	127
 25592  0017EC  6ED5               	movwf	4053,c	;volatile
 25593                           
 25594                           ; BSR set to: 0
 25595  0017EE  6AD7               	clrf	4055,c	;volatile
 25596                           
 25597                           ; BSR set to: 0
 25598  0017F0  6AD6               	clrf	4054,c	;volatile
 25599                           
 25600                           ; BSR set to: 0
 25601  0017F2  94F2               	bcf	intcon,2,c	;volatile
 25602                           
 25603                           ; BSR set to: 0
 25604  0017F4  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25605  0017F6  D002               	goto	l1769
 25606                           
 25607                           ; BSR set to: 0
 25608  0017F8  8AF2               	bsf	intcon,5,c	;volatile
 25609  0017FA  D001               	goto	l1770
 25610  0017FC                     l1769:
 25611                           
 25612                           ; BSR set to: 0
 25613  0017FC  9AF2               	bcf	intcon,5,c	;volatile
 25614  0017FE                     l1770:
 25615                           
 25616                           ; BSR set to: 0
 25617  0017FE  8ED5               	bsf	4053,7,c	;volatile
 25618                           
 25619                           ; BSR set to: 0
 25620  001800  0012               	return	
 25621  001802                     __end_of_OpenTimer0:
 25622                           	opt stack 0
 25623                           tblptru	equ	0xFF8
 25624                           tblptrh	equ	0xFF7
 25625                           tblptrl	equ	0xFF6
 25626                           tablat	equ	0xFF5
 25627                           prodh	equ	0xFF4
 25628                           prodl	equ	0xFF3
 25629                           intcon	equ	0xFF2
 25630                           indf0	equ	0xFEF
 25631                           postinc0	equ	0xFEE
 25632                           fsr0h	equ	0xFEA
 25633                           fsr0l	equ	0xFE9
 25634                           wreg	equ	0xFE8
 25635                           indf1	equ	0xFE7
 25636                           postinc1	equ	0xFE6
 25637                           postdec1	equ	0xFE5
 25638                           fsr1h	equ	0xFE2
 25639                           fsr1l	equ	0xFE1
 25640                           indf2	equ	0xFDF
 25641                           postinc2	equ	0xFDE
 25642                           postdec2	equ	0xFDD
 25643                           plusw2	equ	0xFDB
 25644                           fsr2h	equ	0xFDA
 25645                           fsr2l	equ	0xFD9
 25646                           status	equ	0xFD8
 25647                           
 25648 ;; *************** function _OpenUSART *****************
 25649 ;; Defined at:
 25650 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25651 ;; Parameters:    Size  Location     Type
 25652 ;;  config          1    wreg     unsigned char 
 25653 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25654 ;; Auto vars:     Size  Location     Type
 25655 ;;  config          1    2[BANK0 ] unsigned char 
 25656 ;; Return value:  Size  Location     Type
 25657 ;;		None               void
 25658 ;; Registers used:
 25659 ;;		wreg, status,2
 25660 ;; Tracked objects:
 25661 ;;		On entry : F/0
 25662 ;;		On exit  : F/0
 25663 ;;		Unchanged: 0/0
 25664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25665 ;;      Params:         0       2       0       0       0       0       0
 25666 ;;      Locals:         0       1       0       0       0       0       0
 25667 ;;      Temps:          0       0       0       0       0       0       0
 25668 ;;      Totals:         0       3       0       0       0       0       0
 25669 ;;Total ram usage:        3 bytes
 25670 ;; Hardware stack levels used:    1
 25671 ;; Hardware stack levels required when called:    3
 25672 ;; This function calls:
 25673 ;;		Nothing
 25674 ;; This function is called by:
 25675 ;;		_init
 25676 ;; This function uses a non-reentrant model
 25677 ;;
 25678                           
 25679                           	psect	text73
 25680  001D8C                     __ptext73:
 25681                           	opt stack 0
 25682  001D8C                     _OpenUSART:
 25683                           	opt stack 25
 25684                           
 25685                           ; BSR set to: 0
 25686                           ;incstack = 0
 25687                           ;incstack = 0
 25688                           ;OpenUSART@config stored from wreg
 25689  001D8C  CFE8 F062          	movff	wreg,OpenUSART@config
 25690                           
 25691                           ; BSR set to: 0
 25692  001D90  6AAC               	clrf	4012,c	;volatile
 25693  001D92  6AAB               	clrf	4011,c	;volatile
 25694                           
 25695                           ; BSR set to: 0
 25696  001D94  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25697                           
 25698                           ; BSR set to: 0
 25699  001D96  88AC               	bsf	4012,4,c	;volatile
 25700                           
 25701                           ; BSR set to: 0
 25702  001D98  A362               	btfss	OpenUSART@config& (0+255),1,b
 25703  001D9A  D002               	goto	l10973
 25704                           
 25705                           ; BSR set to: 0
 25706  001D9C  8CAC               	bsf	4012,6,c	;volatile
 25707  001D9E  8CAB               	bsf	4011,6,c	;volatile
 25708  001DA0                     l10973:
 25709                           
 25710                           ; BSR set to: 0
 25711  001DA0  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25712                           
 25713                           ; BSR set to: 0
 25714  001DA2  8EAC               	bsf	4012,7,c	;volatile
 25715                           
 25716                           ; BSR set to: 0
 25717  001DA4  A762               	btfss	OpenUSART@config& (0+255),3,b
 25718  001DA6  D002               	goto	l1802
 25719                           
 25720                           ; BSR set to: 0
 25721  001DA8  88AB               	bsf	4011,4,c	;volatile
 25722  001DAA  D001               	goto	l10981
 25723  001DAC                     l1802:
 25724                           
 25725                           ; BSR set to: 0
 25726  001DAC  8AAB               	bsf	4011,5,c	;volatile
 25727  001DAE                     l10981:
 25728                           
 25729                           ; BSR set to: 0
 25730  001DAE  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25731                           
 25732                           ; BSR set to: 0
 25733  001DB0  84AC               	bsf	4012,2,c	;volatile
 25734                           
 25735                           ; BSR set to: 0
 25736  001DB2  989E               	bcf	3998,4,c	;volatile
 25737                           
 25738                           ; BSR set to: 0
 25739  001DB4  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25740                           
 25741                           ; BSR set to: 0
 25742  001DB6  86AB               	bsf	4011,3,c	;volatile
 25743                           
 25744                           ; BSR set to: 0
 25745  001DB8  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25746  001DBA  D002               	goto	l1806
 25747                           
 25748                           ; BSR set to: 0
 25749  001DBC  8A9D               	bsf	3997,5,c	;volatile
 25750  001DBE  D001               	goto	l1807
 25751  001DC0                     l1806:
 25752                           
 25753                           ; BSR set to: 0
 25754  001DC0  9A9D               	bcf	3997,5,c	;volatile
 25755  001DC2                     l1807:
 25756                           
 25757                           ; BSR set to: 0
 25758  001DC2  9A9E               	bcf	3998,5,c	;volatile
 25759                           
 25760                           ; BSR set to: 0
 25761  001DC4  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25762  001DC6  D002               	goto	l1808
 25763                           
 25764                           ; BSR set to: 0
 25765  001DC8  889D               	bsf	3997,4,c	;volatile
 25766  001DCA  D001               	goto	l1809
 25767  001DCC                     l1808:
 25768                           
 25769                           ; BSR set to: 0
 25770  001DCC  989D               	bcf	3997,4,c	;volatile
 25771  001DCE                     l1809:
 25772                           
 25773                           ; BSR set to: 0
 25774  001DCE  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25775                           
 25776                           ; BSR set to: 0
 25777  001DD2  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25778  001DD4  6EB0               	movwf	4016,c	;volatile
 25779                           
 25780                           ; BSR set to: 0
 25781  001DD6  8AAC               	bsf	4012,5,c	;volatile
 25782                           
 25783                           ; BSR set to: 0
 25784  001DD8  8EAB               	bsf	4011,7,c	;volatile
 25785                           
 25786                           ; BSR set to: 0
 25787  001DDA  9C94               	bcf	3988,6,c	;volatile
 25788                           
 25789                           ; BSR set to: 0
 25790  001DDC  8E94               	bsf	3988,7,c	;volatile
 25791                           
 25792                           ; BSR set to: 0
 25793  001DDE  B8AC               	btfsc	4012,4,c	;volatile
 25794                           
 25795                           ; BSR set to: 0
 25796  001DE0  BEAC               	btfsc	4012,7,c	;volatile
 25797  001DE2  D001               	goto	l1811
 25798                           
 25799                           ; BSR set to: 0
 25800  001DE4  8C94               	bsf	3988,6,c	;volatile
 25801  001DE6                     l1811:
 25802                           
 25803                           ; BSR set to: 0
 25804  001DE6  0012               	return	
 25805  001DE8                     __end_of_OpenUSART:
 25806                           	opt stack 0
 25807                           tblptru	equ	0xFF8
 25808                           tblptrh	equ	0xFF7
 25809                           tblptrl	equ	0xFF6
 25810                           tablat	equ	0xFF5
 25811                           prodh	equ	0xFF4
 25812                           prodl	equ	0xFF3
 25813                           intcon	equ	0xFF2
 25814                           indf0	equ	0xFEF
 25815                           postinc0	equ	0xFEE
 25816                           fsr0h	equ	0xFEA
 25817                           fsr0l	equ	0xFE9
 25818                           wreg	equ	0xFE8
 25819                           indf1	equ	0xFE7
 25820                           postinc1	equ	0xFE6
 25821                           postdec1	equ	0xFE5
 25822                           fsr1h	equ	0xFE2
 25823                           fsr1l	equ	0xFE1
 25824                           indf2	equ	0xFDF
 25825                           postinc2	equ	0xFDE
 25826                           postdec2	equ	0xFDD
 25827                           plusw2	equ	0xFDB
 25828                           fsr2h	equ	0xFDA
 25829                           fsr2l	equ	0xFD9
 25830                           status	equ	0xFD8
 25831                           
 25832 ;; *************** function _WriteTimer0 *****************
 25833 ;; Defined at:
 25834 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25835 ;; Parameters:    Size  Location     Type
 25836 ;;  timer0          2    0[BANK0 ] unsigned int 
 25837 ;; Auto vars:     Size  Location     Type
 25838 ;;  timer           2    2[BANK0 ] struct Timers
 25839 ;; Return value:  Size  Location     Type
 25840 ;;		None               void
 25841 ;; Registers used:
 25842 ;;		None
 25843 ;; Tracked objects:
 25844 ;;		On entry : F/0
 25845 ;;		On exit  : F/0
 25846 ;;		Unchanged: F/0
 25847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25848 ;;      Params:         0       2       0       0       0       0       0
 25849 ;;      Locals:         0       2       0       0       0       0       0
 25850 ;;      Temps:          0       0       0       0       0       0       0
 25851 ;;      Totals:         0       4       0       0       0       0       0
 25852 ;;Total ram usage:        4 bytes
 25853 ;; Hardware stack levels used:    1
 25854 ;; Hardware stack levels required when called:    3
 25855 ;; This function calls:
 25856 ;;		Nothing
 25857 ;; This function is called by:
 25858 ;;		_init
 25859 ;; This function uses a non-reentrant model
 25860 ;;
 25861                           
 25862                           	psect	text74
 25863  001770                     __ptext74:
 25864                           	opt stack 0
 25865  001770                     _WriteTimer0:
 25866                           	opt stack 25
 25867                           
 25868                           ; BSR set to: 0
 25869                           
 25870                           ; BSR set to: 0
 25871                           ;incstack = 0
 25872                           ;incstack = 0
 25873  001770  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25874  001774  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25875  001778  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25876  00177C  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25877                           
 25878                           ; BSR set to: 0
 25879  001780  0012               	return	
 25880  001782                     __end_of_WriteTimer0:
 25881                           	opt stack 0
 25882                           tblptru	equ	0xFF8
 25883                           tblptrh	equ	0xFF7
 25884                           tblptrl	equ	0xFF6
 25885                           tablat	equ	0xFF5
 25886                           prodh	equ	0xFF4
 25887                           prodl	equ	0xFF3
 25888                           intcon	equ	0xFF2
 25889                           indf0	equ	0xFEF
 25890                           postinc0	equ	0xFEE
 25891                           fsr0h	equ	0xFEA
 25892                           fsr0l	equ	0xFE9
 25893                           wreg	equ	0xFE8
 25894                           indf1	equ	0xFE7
 25895                           postinc1	equ	0xFE6
 25896                           postdec1	equ	0xFE5
 25897                           fsr1h	equ	0xFE2
 25898                           fsr1l	equ	0xFE1
 25899                           indf2	equ	0xFDF
 25900                           postinc2	equ	0xFDE
 25901                           postdec2	equ	0xFDD
 25902                           plusw2	equ	0xFDB
 25903                           fsr2h	equ	0xFDA
 25904                           fsr2l	equ	0xFD9
 25905                           status	equ	0xFD8
 25906                           
 25907 ;; *************** function _vscp_restoreDefaults *****************
 25908 ;; Defined at:
 25909 ;;		line 2724 in file "main.c"
 25910 ;; Parameters:    Size  Location     Type
 25911 ;;		None
 25912 ;; Auto vars:     Size  Location     Type
 25913 ;;		None
 25914 ;; Return value:  Size  Location     Type
 25915 ;;		None               void
 25916 ;; Registers used:
 25917 ;;		wreg, status,2, status,0, cstack
 25918 ;; Tracked objects:
 25919 ;;		On entry : F/0
 25920 ;;		On exit  : F/1
 25921 ;;		Unchanged: 0/0
 25922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25923 ;;      Params:         0       0       0       0       0       0       0
 25924 ;;      Locals:         0       0       0       0       0       0       0
 25925 ;;      Temps:          0       0       0       0       0       0       0
 25926 ;;      Totals:         0       0       0       0       0       0       0
 25927 ;;Total ram usage:        0 bytes
 25928 ;; Hardware stack levels used:    1
 25929 ;; Hardware stack levels required when called:    5
 25930 ;; This function calls:
 25931 ;;		_init_app_ram
 25932 ;;		_init_app_eeprom
 25933 ;; This function is called by:
 25934 ;;		_main
 25935 ;; This function uses a non-reentrant model
 25936 ;;
 25937                           
 25938                           	psect	text75
 25939  001744                     __ptext75:
 25940                           	opt stack 0
 25941  001744                     _vscp_restoreDefaults:
 25942                           	opt stack 24
 25943                           
 25944                           ; BSR set to: 0
 25945                           ;main.c: 2725: init_app_eeprom();
 25946                           
 25947                           ; BSR set to: 0
 25948                           ;incstack = 0
 25949                           ;incstack = 0
 25950  001744  ECCB  F011         	call	_init_app_eeprom	;wreg free
 25951                           
 25952                           ; BSR set to: 0
 25953                           ;main.c: 2726: init_app_ram();
 25954  001748  EF47  F00E         	goto	_init_app_ram	;wreg free
 25955  00174C                     __end_of_vscp_restoreDefaults:
 25956                           	opt stack 0
 25957                           tblptru	equ	0xFF8
 25958                           tblptrh	equ	0xFF7
 25959                           tblptrl	equ	0xFF6
 25960                           tablat	equ	0xFF5
 25961                           prodh	equ	0xFF4
 25962                           prodl	equ	0xFF3
 25963                           intcon	equ	0xFF2
 25964                           indf0	equ	0xFEF
 25965                           postinc0	equ	0xFEE
 25966                           fsr0h	equ	0xFEA
 25967                           fsr0l	equ	0xFE9
 25968                           wreg	equ	0xFE8
 25969                           indf1	equ	0xFE7
 25970                           postinc1	equ	0xFE6
 25971                           postdec1	equ	0xFE5
 25972                           fsr1h	equ	0xFE2
 25973                           fsr1l	equ	0xFE1
 25974                           indf2	equ	0xFDF
 25975                           postinc2	equ	0xFDE
 25976                           postdec2	equ	0xFDD
 25977                           plusw2	equ	0xFDB
 25978                           fsr2h	equ	0xFDA
 25979                           fsr2l	equ	0xFD9
 25980                           status	equ	0xFD8
 25981                           
 25982 ;; *************** function _init_app_eeprom *****************
 25983 ;; Defined at:
 25984 ;;		line 465 in file "main.c"
 25985 ;; Parameters:    Size  Location     Type
 25986 ;;		None
 25987 ;; Auto vars:     Size  Location     Type
 25988 ;;  i               1    3[BANK0 ] unsigned char 
 25989 ;; Return value:  Size  Location     Type
 25990 ;;		None               void
 25991 ;; Registers used:
 25992 ;;		wreg, status,2, status,0, cstack
 25993 ;; Tracked objects:
 25994 ;;		On entry : F/0
 25995 ;;		On exit  : F/0
 25996 ;;		Unchanged: 0/0
 25997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25998 ;;      Params:         0       0       0       0       0       0       0
 25999 ;;      Locals:         0       1       0       0       0       0       0
 26000 ;;      Temps:          0       0       0       0       0       0       0
 26001 ;;      Totals:         0       1       0       0       0       0       0
 26002 ;;Total ram usage:        1 bytes
 26003 ;; Hardware stack levels used:    1
 26004 ;; Hardware stack levels required when called:    4
 26005 ;; This function calls:
 26006 ;;		_writeEEPROM
 26007 ;; This function is called by:
 26008 ;;		_vscp_restoreDefaults
 26009 ;; This function uses a non-reentrant model
 26010 ;;
 26011                           
 26012                           	psect	text76
 26013  002396                     __ptext76:
 26014                           	opt stack 0
 26015  002396                     _init_app_eeprom:
 26016                           	opt stack 24
 26017                           
 26018                           ; BSR set to: 0
 26019                           ;main.c: 466: uint8_t i;
 26020                           ;main.c: 468: writeEEPROM(0x01, 0x55);
 26021                           
 26022                           ; BSR set to: 1
 26023                           ;incstack = 0
 26024                           ;incstack = 0
 26025  002396  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26026  002398  0E01               	movlw	1
 26027  00239A  6F60               	movwf	?_writeEEPROM& (0+255),b
 26028  00239C  0E55               	movlw	85
 26029  00239E  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 26030  0023A0  EC11  F00C         	call	_writeEEPROM	;wreg free
 26031                           
 26032                           ;main.c: 469: writeEEPROM(0x02, 0xAA);
 26033  0023A4  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26034  0023A6  0E02               	movlw	2
 26035  0023A8  6F60               	movwf	?_writeEEPROM& (0+255),b
 26036  0023AA  0EAA               	movlw	170
 26037  0023AC  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 26038  0023AE  EC11  F00C         	call	_writeEEPROM	;wreg free
 26039                           
 26040                           ;main.c: 470: writeEEPROM(0x03, 0);
 26041  0023B2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26042  0023B4  0E03               	movlw	3
 26043  0023B6  6F60               	movwf	?_writeEEPROM& (0+255),b
 26044  0023B8  0E00               	movlw	0
 26045  0023BA  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 26046  0023BC  EC11  F00C         	call	_writeEEPROM	;wreg free
 26047                           
 26048                           ;main.c: 471: writeEEPROM(0x05, 0);
 26049  0023C0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26050  0023C2  0E05               	movlw	5
 26051  0023C4  6F60               	movwf	?_writeEEPROM& (0+255),b
 26052  0023C6  0E00               	movlw	0
 26053  0023C8  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 26054  0023CA  EC11  F00C         	call	_writeEEPROM	;wreg free
 26055                           
 26056                           ;main.c: 472: writeEEPROM(0x06, 0);
 26057  0023CE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26058  0023D0  0E06               	movlw	6
 26059  0023D2  6F60               	movwf	?_writeEEPROM& (0+255),b
 26060  0023D4  0E00               	movlw	0
 26061  0023D6  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 26062  0023D8  EC11  F00C         	call	_writeEEPROM	;wreg free
 26063                           
 26064                           ;main.c: 473: writeEEPROM(0x09, 10u);
 26065  0023DC  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26066  0023DE  0E09               	movlw	9
 26067  0023E0  6F60               	movwf	?_writeEEPROM& (0+255),b
 26068  0023E2  0E0A               	movlw	10
 26069  0023E4  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 26070  0023E6  EC11  F00C         	call	_writeEEPROM	;wreg free
 26071                           
 26072                           ; BSR set to: 0
 26073                           ;main.c: 476: for (i = 0x20; i < (0x5C + 4); i++) {
 26074  0023EA  0E20               	movlw	32
 26075  0023EC  6F63               	movwf	init_app_eeprom@i& (0+255),b
 26076  0023EE                     l11121:
 26077                           
 26078                           ; BSR set to: 0
 26079                           ;main.c: 477: writeEEPROM(0x01, 0xFF);
 26080  0023EE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26081  0023F0  0E01               	movlw	1
 26082  0023F2  6F60               	movwf	?_writeEEPROM& (0+255),b
 26083  0023F4  0EFF               	movlw	255
 26084  0023F6  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 26085  0023F8  EC11  F00C         	call	_writeEEPROM	;wreg free
 26086                           
 26087                           ; BSR set to: 0
 26088  0023FC  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 26089                           
 26090                           ; BSR set to: 0
 26091  0023FE  0E5F               	movlw	95
 26092  002400  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26093  002402  D7F5               	goto	l11121
 26094                           
 26095                           ; BSR set to: 0
 26096                           ;main.c: 478: }
 26097                           ;main.c: 481: for (i = 0x60; i < (0x64 + 4); i++) {
 26098  002404  0E60               	movlw	96
 26099  002406  6F63               	movwf	init_app_eeprom@i& (0+255),b
 26100  002408                     l11133:
 26101                           
 26102                           ; BSR set to: 0
 26103                           ;main.c: 482: writeEEPROM(0x01, 0xFF);
 26104  002408  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26105  00240A  0E01               	movlw	1
 26106  00240C  6F60               	movwf	?_writeEEPROM& (0+255),b
 26107  00240E  0EFF               	movlw	255
 26108  002410  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 26109  002412  EC11  F00C         	call	_writeEEPROM	;wreg free
 26110                           
 26111                           ; BSR set to: 0
 26112  002416  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 26113                           
 26114                           ; BSR set to: 0
 26115  002418  0E67               	movlw	103
 26116  00241A  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26117  00241C  D7F5               	goto	l11133
 26118                           
 26119                           ; BSR set to: 0
 26120  00241E  0C67               	retlw	103
 26121  002420                     __end_of_init_app_eeprom:
 26122                           	opt stack 0
 26123                           tblptru	equ	0xFF8
 26124                           tblptrh	equ	0xFF7
 26125                           tblptrl	equ	0xFF6
 26126                           tablat	equ	0xFF5
 26127                           prodh	equ	0xFF4
 26128                           prodl	equ	0xFF3
 26129                           intcon	equ	0xFF2
 26130                           indf0	equ	0xFEF
 26131                           postinc0	equ	0xFEE
 26132                           fsr0h	equ	0xFEA
 26133                           fsr0l	equ	0xFE9
 26134                           wreg	equ	0xFE8
 26135                           indf1	equ	0xFE7
 26136                           postinc1	equ	0xFE6
 26137                           postdec1	equ	0xFE5
 26138                           fsr1h	equ	0xFE2
 26139                           fsr1l	equ	0xFE1
 26140                           indf2	equ	0xFDF
 26141                           postinc2	equ	0xFDE
 26142                           postdec2	equ	0xFDD
 26143                           plusw2	equ	0xFDB
 26144                           fsr2h	equ	0xFDA
 26145                           fsr2l	equ	0xFD9
 26146                           status	equ	0xFD8
 26147                           
 26148 ;; *************** function _writeEEPROM *****************
 26149 ;; Defined at:
 26150 ;;		line 23 in file "eeprom.c"
 26151 ;; Parameters:    Size  Location     Type
 26152 ;;  address         2    0[BANK0 ] unsigned short 
 26153 ;;  data            1    2[BANK0 ] unsigned char 
 26154 ;; Auto vars:     Size  Location     Type
 26155 ;;		None
 26156 ;; Return value:  Size  Location     Type
 26157 ;;		None               void
 26158 ;; Registers used:
 26159 ;;		wreg, status,2
 26160 ;; Tracked objects:
 26161 ;;		On entry : F/0
 26162 ;;		On exit  : F/0
 26163 ;;		Unchanged: F/0
 26164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26165 ;;      Params:         0       3       0       0       0       0       0
 26166 ;;      Locals:         0       0       0       0       0       0       0
 26167 ;;      Temps:          0       0       0       0       0       0       0
 26168 ;;      Totals:         0       3       0       0       0       0       0
 26169 ;;Total ram usage:        3 bytes
 26170 ;; Hardware stack levels used:    1
 26171 ;; Hardware stack levels required when called:    3
 26172 ;; This function calls:
 26173 ;;		Nothing
 26174 ;; This function is called by:
 26175 ;;		_init_app_eeprom
 26176 ;;		_doModeVerbose
 26177 ;;		_doModeSLCAN
 26178 ;; This function uses a non-reentrant model
 26179 ;;
 26180                           
 26181                           	psect	text77
 26182  001822                     __ptext77:
 26183                           	opt stack 0
 26184  001822                     _writeEEPROM:
 26185                           	opt stack 25
 26186                           
 26187                           ; BSR set to: 0
 26188                           ;eeprom.c: 29: EEADR = address & 0xff;
 26189                           
 26190                           ; BSR set to: 0
 26191                           ;incstack = 0
 26192                           ;incstack = 0
 26193  001822  C060  FFA9         	movff	writeEEPROM@address,4009	;volatile
 26194                           
 26195                           ;eeprom.c: 30: EEDATA = data;
 26196  001826  C062  FFA8         	movff	writeEEPROM@data,4008	;volatile
 26197                           
 26198                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 26199  00182A  9EA6               	bcf	4006,7,c	;volatile
 26200                           
 26201                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 26202  00182C  9CA6               	bcf	4006,6,c	;volatile
 26203                           
 26204                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 26205  00182E  84A6               	bsf	4006,2,c	;volatile
 26206                           
 26207                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 26208  001830  9EF2               	bcf	intcon,7,c	;volatile
 26209                           
 26210                           ; BSR set to: 0
 26211                           ;eeprom.c: 37: EECON2 = 0x55;
 26212  001832  0E55               	movlw	85
 26213  001834  6EA7               	movwf	4007,c	;volatile
 26214                           
 26215                           ;eeprom.c: 38: EECON2 = 0xaa;
 26216  001836  0EAA               	movlw	170
 26217  001838  6EA7               	movwf	4007,c	;volatile
 26218                           
 26219                           ; BSR set to: 0
 26220                           ;eeprom.c: 39: EECON1bits.WR = 1;
 26221  00183A  82A6               	bsf	4006,1,c	;volatile
 26222                           
 26223                           ; BSR set to: 0
 26224                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 26225  00183C  8EF2               	bsf	intcon,7,c	;volatile
 26226  00183E                     l1549:
 26227                           
 26228                           ; BSR set to: 0
 26229  00183E  A8A1               	btfss	4001,4,c	;volatile
 26230  001840  D7FE               	goto	l1549
 26231                           
 26232                           ; BSR set to: 0
 26233                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 26234  001842  98A1               	bcf	4001,4,c	;volatile
 26235                           
 26236                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 26237  001844  94A6               	bcf	4006,2,c	;volatile
 26238                           
 26239                           ; BSR set to: 0
 26240  001846  0012               	return	
 26241  001848                     __end_of_writeEEPROM:
 26242                           	opt stack 0
 26243                           tblptru	equ	0xFF8
 26244                           tblptrh	equ	0xFF7
 26245                           tblptrl	equ	0xFF6
 26246                           tablat	equ	0xFF5
 26247                           prodh	equ	0xFF4
 26248                           prodl	equ	0xFF3
 26249                           intcon	equ	0xFF2
 26250                           indf0	equ	0xFEF
 26251                           postinc0	equ	0xFEE
 26252                           fsr0h	equ	0xFEA
 26253                           fsr0l	equ	0xFE9
 26254                           wreg	equ	0xFE8
 26255                           indf1	equ	0xFE7
 26256                           postinc1	equ	0xFE6
 26257                           postdec1	equ	0xFE5
 26258                           fsr1h	equ	0xFE2
 26259                           fsr1l	equ	0xFE1
 26260                           indf2	equ	0xFDF
 26261                           postinc2	equ	0xFDE
 26262                           postdec2	equ	0xFDD
 26263                           plusw2	equ	0xFDB
 26264                           fsr2h	equ	0xFDA
 26265                           fsr2l	equ	0xFD9
 26266                           status	equ	0xFD8
 26267                           
 26268 ;; *************** function _init_app_ram *****************
 26269 ;; Defined at:
 26270 ;;		line 447 in file "main.c"
 26271 ;; Parameters:    Size  Location     Type
 26272 ;;		None
 26273 ;; Auto vars:     Size  Location     Type
 26274 ;;		None
 26275 ;; Return value:  Size  Location     Type
 26276 ;;		None               void
 26277 ;; Registers used:
 26278 ;;		wreg, status,2, cstack
 26279 ;; Tracked objects:
 26280 ;;		On entry : E/0
 26281 ;;		On exit  : F/1
 26282 ;;		Unchanged: 0/0
 26283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26284 ;;      Params:         0       0       0       0       0       0       0
 26285 ;;      Locals:         0       0       0       0       0       0       0
 26286 ;;      Temps:          0       0       0       0       0       0       0
 26287 ;;      Totals:         0       0       0       0       0       0       0
 26288 ;;Total ram usage:        0 bytes
 26289 ;; Hardware stack levels used:    1
 26290 ;; Hardware stack levels required when called:    4
 26291 ;; This function calls:
 26292 ;;		_readEEPROM
 26293 ;; This function is called by:
 26294 ;;		_init
 26295 ;;		_vscp_restoreDefaults
 26296 ;; This function uses a non-reentrant model
 26297 ;;
 26298                           
 26299                           	psect	text78
 26300  001C8E                     __ptext78:
 26301                           	opt stack 0
 26302  001C8E                     _init_app_ram:
 26303                           	opt stack 24
 26304                           
 26305                           ;main.c: 449: can_receiveOverruns = 0;
 26306                           
 26307                           ; BSR set to: 0
 26308                           ;incstack = 0
 26309                           ;incstack = 0
 26310  001C8E  0100               	movlb	0	; () banked
 26311  001C90  6BD1               	clrf	_can_receiveOverruns& (0+255),b
 26312  001C92  6BD2               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26313  001C94  6BD3               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26314  001C96  6BD4               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26315                           
 26316                           ;main.c: 450: can_transmitOverruns = 0;
 26317  001C98  6A01               	clrf	_can_transmitOverruns,c
 26318  001C9A  6A02               	clrf	_can_transmitOverruns+1,c
 26319  001C9C  6A03               	clrf	_can_transmitOverruns+2,c
 26320  001C9E  6A04               	clrf	_can_transmitOverruns+3,c
 26321                           
 26322                           ;main.c: 451: uart_receiveOverruns = 0;
 26323  001CA0  6A05               	clrf	_uart_receiveOverruns,c
 26324  001CA2  6A06               	clrf	_uart_receiveOverruns+1,c
 26325  001CA4  6A07               	clrf	_uart_receiveOverruns+2,c
 26326  001CA6  6A08               	clrf	_uart_receiveOverruns+3,c
 26327                           
 26328                           ;main.c: 452: uart_transmitOverruns = 0;
 26329  001CA8  6A09               	clrf	_uart_transmitOverruns,c
 26330  001CAA  6A0A               	clrf	_uart_transmitOverruns+1,c
 26331  001CAC  6A0B               	clrf	_uart_transmitOverruns+2,c
 26332  001CAE  6A0C               	clrf	_uart_transmitOverruns+3,c
 26333                           
 26334                           ; BSR set to: 0
 26335                           ;main.c: 454: bHex = readEEPROM(0x06);
 26336  001CB0  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26337  001CB2  0E06               	movlw	6
 26338  001CB4  6F60               	movwf	?_readEEPROM& (0+255),b
 26339  001CB6  ECAF  F00B         	call	_readEEPROM	;wreg free
 26340  001CBA  0101               	movlb	1	; () banked
 26341  001CBC  6F00               	movwf	_bHex& (0+255),b
 26342                           
 26343                           ;main.c: 455: mode = readEEPROM(0x03);
 26344  001CBE  0100               	movlb	0	; () banked
 26345  001CC0  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26346  001CC2  0E03               	movlw	3
 26347  001CC4  6F60               	movwf	?_readEEPROM& (0+255),b
 26348  001CC6  ECAF  F00B         	call	_readEEPROM	;wreg free
 26349  001CCA  6FF1               	movwf	_mode& (0+255),b
 26350                           
 26351                           ;main.c: 457: rwtimeout = readEEPROM(0x09);
 26352  001CCC  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26353  001CCE  0E09               	movlw	9
 26354  001CD0  6F60               	movwf	?_readEEPROM& (0+255),b
 26355  001CD2  ECAF  F00B         	call	_readEEPROM	;wreg free
 26356  001CD6  0101               	movlb	1	; () banked
 26357  001CD8  6F03               	movwf	_rwtimeout& (0+255),b
 26358                           
 26359                           ; BSR set to: 1
 26360  001CDA  0012               	return	
 26361  001CDC                     __end_of_init_app_ram:
 26362                           	opt stack 0
 26363                           tblptru	equ	0xFF8
 26364                           tblptrh	equ	0xFF7
 26365                           tblptrl	equ	0xFF6
 26366                           tablat	equ	0xFF5
 26367                           prodh	equ	0xFF4
 26368                           prodl	equ	0xFF3
 26369                           intcon	equ	0xFF2
 26370                           indf0	equ	0xFEF
 26371                           postinc0	equ	0xFEE
 26372                           fsr0h	equ	0xFEA
 26373                           fsr0l	equ	0xFE9
 26374                           wreg	equ	0xFE8
 26375                           indf1	equ	0xFE7
 26376                           postinc1	equ	0xFE6
 26377                           postdec1	equ	0xFE5
 26378                           fsr1h	equ	0xFE2
 26379                           fsr1l	equ	0xFE1
 26380                           indf2	equ	0xFDF
 26381                           postinc2	equ	0xFDE
 26382                           postdec2	equ	0xFDD
 26383                           plusw2	equ	0xFDB
 26384                           fsr2h	equ	0xFDA
 26385                           fsr2l	equ	0xFD9
 26386                           status	equ	0xFD8
 26387                           
 26388 ;; *************** function _readEEPROM *****************
 26389 ;; Defined at:
 26390 ;;		line 87 in file "eeprom.c"
 26391 ;; Parameters:    Size  Location     Type
 26392 ;;  address         2    0[BANK0 ] unsigned short 
 26393 ;; Auto vars:     Size  Location     Type
 26394 ;;  data            1    2[BANK0 ] unsigned char 
 26395 ;; Return value:  Size  Location     Type
 26396 ;;                  1    wreg      unsigned char 
 26397 ;; Registers used:
 26398 ;;		wreg, status,2
 26399 ;; Tracked objects:
 26400 ;;		On entry : F/0
 26401 ;;		On exit  : F/0
 26402 ;;		Unchanged: 0/0
 26403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26404 ;;      Params:         0       2       0       0       0       0       0
 26405 ;;      Locals:         0       1       0       0       0       0       0
 26406 ;;      Temps:          0       0       0       0       0       0       0
 26407 ;;      Totals:         0       3       0       0       0       0       0
 26408 ;;Total ram usage:        3 bytes
 26409 ;; Hardware stack levels used:    1
 26410 ;; Hardware stack levels required when called:    3
 26411 ;; This function calls:
 26412 ;;		Nothing
 26413 ;; This function is called by:
 26414 ;;		_main
 26415 ;;		_init_app_ram
 26416 ;; This function uses a non-reentrant model
 26417 ;;
 26418                           
 26419                           	psect	text79
 26420  00175E                     __ptext79:
 26421                           	opt stack 0
 26422  00175E                     _readEEPROM:
 26423                           	opt stack 24
 26424                           
 26425                           ; BSR set to: 0
 26426                           ;eeprom.c: 88: uint8_t data;
 26427                           ;eeprom.c: 93: EEADR = address & 0xff;
 26428                           
 26429                           ; BSR set to: 1
 26430                           ;incstack = 0
 26431                           ;incstack = 0
 26432  00175E  C060  FFA9         	movff	readEEPROM@address,4009	;volatile
 26433                           
 26434                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 26435  001762  9EA6               	bcf	4006,7,c	;volatile
 26436                           
 26437                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 26438  001764  9CA6               	bcf	4006,6,c	;volatile
 26439                           
 26440                           ;eeprom.c: 96: EECON1bits.RD = 1;
 26441  001766  80A6               	bsf	4006,0,c	;volatile
 26442                           
 26443                           ;eeprom.c: 97: data = EEDATA;
 26444  001768  CFA8 F062          	movff	4008,readEEPROM@data	;volatile
 26445                           
 26446                           ; BSR set to: 0
 26447                           ;eeprom.c: 99: return data;
 26448  00176C  5162               	movf	readEEPROM@data& (0+255),w,b
 26449                           
 26450                           ; BSR set to: 0
 26451  00176E  0012               	return	
 26452  001770                     __end_of_readEEPROM:
 26453                           	opt stack 0
 26454                           tblptru	equ	0xFF8
 26455                           tblptrh	equ	0xFF7
 26456                           tblptrl	equ	0xFF6
 26457                           tablat	equ	0xFF5
 26458                           prodh	equ	0xFF4
 26459                           prodl	equ	0xFF3
 26460                           intcon	equ	0xFF2
 26461                           indf0	equ	0xFEF
 26462                           postinc0	equ	0xFEE
 26463                           fsr0h	equ	0xFEA
 26464                           fsr0l	equ	0xFE9
 26465                           wreg	equ	0xFE8
 26466                           indf1	equ	0xFE7
 26467                           postinc1	equ	0xFE6
 26468                           postdec1	equ	0xFE5
 26469                           fsr1h	equ	0xFE2
 26470                           fsr1l	equ	0xFE1
 26471                           indf2	equ	0xFDF
 26472                           postinc2	equ	0xFDE
 26473                           postdec2	equ	0xFDD
 26474                           plusw2	equ	0xFDB
 26475                           fsr2h	equ	0xFDA
 26476                           fsr2l	equ	0xFD9
 26477                           status	equ	0xFD8
 26478                           
 26479 ;; *************** function _fifo_init *****************
 26480 ;; Defined at:
 26481 ;;		line 14 in file "fifo.c"
 26482 ;; Parameters:    Size  Location     Type
 26483 ;;  f               1    wreg     PTR struct .
 26484 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26485 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 26486 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 26487 ;;  size            2    2[BANK0 ] unsigned short 
 26488 ;; Auto vars:     Size  Location     Type
 26489 ;;  f               1    4[BANK0 ] PTR struct .
 26490 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26491 ;; Return value:  Size  Location     Type
 26492 ;;		None               void
 26493 ;; Registers used:
 26494 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26495 ;; Tracked objects:
 26496 ;;		On entry : F/0
 26497 ;;		On exit  : F/0
 26498 ;;		Unchanged: 0/0
 26499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26500 ;;      Params:         0       4       0       0       0       0       0
 26501 ;;      Locals:         0       1       0       0       0       0       0
 26502 ;;      Temps:          0       0       0       0       0       0       0
 26503 ;;      Totals:         0       5       0       0       0       0       0
 26504 ;;Total ram usage:        5 bytes
 26505 ;; Hardware stack levels used:    1
 26506 ;; Hardware stack levels required when called:    3
 26507 ;; This function calls:
 26508 ;;		Nothing
 26509 ;; This function is called by:
 26510 ;;		_main
 26511 ;; This function uses a non-reentrant model
 26512 ;;
 26513                           
 26514                           	psect	text80
 26515  001A66                     __ptext80:
 26516                           	opt stack 0
 26517  001A66                     _fifo_init:
 26518                           	opt stack 26
 26519                           
 26520                           ; BSR set to: 0
 26521                           ;incstack = 0
 26522                           ;incstack = 0
 26523                           ;fifo_init@f stored from wreg
 26524  001A66  CFE8 F064          	movff	wreg,fifo_init@f
 26525                           
 26526                           ; BSR set to: 0
 26527                           ;fifo.c: 15: f->head = 0;
 26528  001A6A  5164               	movf	fifo_init@f& (0+255),w,b
 26529  001A6C  6ED9               	movwf	fsr2l,c
 26530  001A6E  6ADA               	clrf	fsr2h,c
 26531  001A70  0E02               	movlw	2
 26532                           
 26533                           ;fifo.c: 16: f->tail = 0;
 26534  001A72  D811               	call	PL94	;call to abstracted procedure
 26535  001A74  0E04               	movlw	4
 26536                           
 26537                           ;fifo.c: 17: f->size = size;
 26538  001A76  D80F               	call	PL94	;call to abstracted procedure
 26539  001A78  0E06               	movlw	6
 26540  001A7A  26D9               	addwf	fsr2l,f,c
 26541  001A7C  6ADA               	clrf	fsr2h,c
 26542  001A7E  C062  FFDE         	movff	fifo_init@size,postinc2
 26543  001A82  C063  FFDD         	movff	fifo_init@size+1,postdec2
 26544                           
 26545                           ; BSR set to: 0
 26546                           ;fifo.c: 18: f->buf = buf;
 26547  001A86  5164               	movf	fifo_init@f& (0+255),w,b
 26548  001A88  6ED9               	movwf	fsr2l,c
 26549  001A8A  6ADA               	clrf	fsr2h,c
 26550  001A8C  C060  FFDE         	movff	fifo_init@buf,postinc2
 26551  001A90  C061  FFDD         	movff	fifo_init@buf+1,postdec2
 26552                           
 26553                           ; BSR set to: 0
 26554  001A94  0012               	return	
 26555  001A96                     __end_of_fifo_init:
 26556                           	opt stack 0
 26557  001A96                     PL94:
 26558                           	opt stack 26
 26559  001A96  26D9               	addwf	fsr2l,f,c
 26560  001A98  6ADA               	clrf	fsr2h,c
 26561  001A9A  6ADE               	clrf	postinc2,c
 26562  001A9C  6ADD               	clrf	postdec2,c
 26563  001A9E  5164               	movf	fifo_init@f& (0+255),w,b
 26564  001AA0  6ED9               	movwf	fsr2l,c
 26565  001AA2  6ADA               	clrf	fsr2h,c
 26566  001AA4  0012               	return	
 26567  001AA6                     __end_ofPL94:
 26568                           	opt stack 0
 26569                           tblptru	equ	0xFF8
 26570                           tblptrh	equ	0xFF7
 26571                           tblptrl	equ	0xFF6
 26572                           tablat	equ	0xFF5
 26573                           prodh	equ	0xFF4
 26574                           prodl	equ	0xFF3
 26575                           intcon	equ	0xFF2
 26576                           indf0	equ	0xFEF
 26577                           postinc0	equ	0xFEE
 26578                           fsr0h	equ	0xFEA
 26579                           fsr0l	equ	0xFE9
 26580                           wreg	equ	0xFE8
 26581                           indf1	equ	0xFE7
 26582                           postinc1	equ	0xFE6
 26583                           postdec1	equ	0xFE5
 26584                           fsr1h	equ	0xFE2
 26585                           fsr1l	equ	0xFE1
 26586                           indf2	equ	0xFDF
 26587                           postinc2	equ	0xFDE
 26588                           postdec2	equ	0xFDD
 26589                           plusw2	equ	0xFDB
 26590                           fsr2h	equ	0xFDA
 26591                           fsr2l	equ	0xFD9
 26592                           status	equ	0xFD8
 26593                           
 26594 ;; *************** function _Interrupt *****************
 26595 ;; Defined at:
 26596 ;;		line 137 in file "main.c"
 26597 ;; Parameters:    Size  Location     Type
 26598 ;;		None
 26599 ;; Auto vars:     Size  Location     Type
 26600 ;;  data            8   27[COMRAM] unsigned char [8]
 26601 ;;  id              4   37[COMRAM] unsigned long 
 26602 ;;  flags           1   41[COMRAM] enum E16358
 26603 ;;  dlc             1   36[COMRAM] unsigned char 
 26604 ;;  c               1   35[COMRAM] unsigned char 
 26605 ;; Return value:  Size  Location     Type
 26606 ;;		None               void
 26607 ;; Registers used:
 26608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26609 ;; Tracked objects:
 26610 ;;		On entry : 0/0
 26611 ;;		On exit  : 0/0
 26612 ;;		Unchanged: 0/0
 26613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26614 ;;      Params:         0       0       0       0       0       0       0
 26615 ;;      Locals:        15       0       0       0       0       0       0
 26616 ;;      Temps:          9       0       0       0       0       0       0
 26617 ;;      Totals:        24       0       0       0       0       0       0
 26618 ;;Total ram usage:       24 bytes
 26619 ;; Hardware stack levels used:    1
 26620 ;; Hardware stack levels required when called:    2
 26621 ;; This function calls:
 26622 ;;		_ReadUSART
 26623 ;;		_fifo_write
 26624 ;;		_ECANReceiveMessage
 26625 ;;		_fifo_getFree
 26626 ;;		i1_WriteTimer0
 26627 ;; This function is called by:
 26628 ;;		Interrupt level 1
 26629 ;; This function uses a non-reentrant model
 26630 ;;
 26631                           
 26632                           	psect	intcodelo
 26633  000018                     __pintcodelo:
 26634                           	opt stack 0
 26635  000018                     _Interrupt:
 26636                           	opt stack 19
 26637                           
 26638                           ; BSR set to: 0
 26639                           ;incstack = 0
 26640  000018  CFD8 F03F          	movff	status,??_Interrupt+2
 26641  00001C  CFE8 F040          	movff	wreg,??_Interrupt+3
 26642  000020  CFE0 F041          	movff	bsr,??_Interrupt+4
 26643  000024  CFE1 F042          	movff	fsr1l,??_Interrupt+5
 26644  000028  CFE2 F043          	movff	fsr1h,??_Interrupt+6
 26645  00002C  CFD9 F044          	movff	fsr2l,??_Interrupt+7
 26646  000030  CFDA F045          	movff	fsr2h,??_Interrupt+8
 26647  000034                     
 26648                           ;main.c: 138: uint8_t c;
 26649                           ;main.c: 141: if ( 1 == PIR1bits.RCIF ) {
 26650  000034  AA9E               	btfss	3998,5,c	;volatile
 26651  000036  D001               	goto	i1u1690_21
 26652  000038  D001               	goto	i1u1690_20
 26653  00003A                     i1u1690_21:
 26654  00003A  D020               	goto	i1l387
 26655  00003C                     i1u1690_20:
 26656  00003C                     
 26657                           ;main.c: 143: c = ReadUSART();
 26658  00003C  ECE3  F00B         	call	_ReadUSART	;wreg free
 26659  000040  6E4E               	movwf	Interrupt@c,c
 26660  000042                     
 26661                           ;main.c: 145: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 26662  000042  0E4E               	movlw	low Interrupt@c
 26663  000044  6E2B               	movwf	?_fifo_write,c
 26664  000046  0E01               	movlw	1
 26665  000048  6E2C               	movwf	?_fifo_write+1,c
 26666  00004A  0E00               	movlw	0
 26667  00004C  6E2D               	movwf	?_fifo_write+2,c
 26668  00004E  0E00               	movlw	0
 26669  000050  6E2E               	movwf	?_fifo_write+3,c
 26670  000052  0E00               	movlw	0
 26671  000054  6E2F               	movwf	?_fifo_write+4,c
 26672  000056  0E23               	movlw	_serialInputFifo& (0+255)
 26673  000058  EC17  F01B         	call	_fifo_write
 26674  00005C  042B               	decf	?_fifo_write,w,c
 26675  00005E  102C               	iorwf	?_fifo_write+1,w,c
 26676  000060  B4D8               	btfsc	status,2,c
 26677  000062  D001               	goto	i1u1691_21
 26678  000064  D001               	goto	i1u1691_20
 26679  000066                     i1u1691_21:
 26680  000066  D008               	goto	i1l13003
 26681  000068                     i1u1691_20:
 26682  000068                     
 26683                           ;main.c: 147: uart_receiveOverruns++;
 26684  000068  0E01               	movlw	1
 26685  00006A  2605               	addwf	_uart_receiveOverruns,f,c
 26686  00006C  0E00               	movlw	0
 26687  00006E  2206               	addwfc	_uart_receiveOverruns+1,f,c
 26688  000070  0E00               	movlw	0
 26689  000072  2207               	addwfc	_uart_receiveOverruns+2,f,c
 26690  000074  0E00               	movlw	0
 26691  000076  2208               	addwfc	_uart_receiveOverruns+3,f,c
 26692  000078                     i1l13003:
 26693                           
 26694                           ;main.c: 148: }
 26695                           ;main.c: 151: PIR1bits.RCIF = 0;
 26696  000078  9A9E               	bcf	3998,5,c	;volatile
 26697                           
 26698                           ;main.c: 153: }
 26699  00007A  D07D               	goto	i1l389
 26700  00007C                     i1l387:
 26701                           
 26702                           ;main.c: 155: else if (1 == INTCONbits.TMR0IF) {
 26703  00007C  A4F2               	btfss	intcon,2,c	;volatile
 26704  00007E  D001               	goto	i1u1692_21
 26705  000080  D001               	goto	i1u1692_20
 26706  000082                     i1u1692_21:
 26707  000082  D079               	goto	i1l389
 26708  000084                     i1u1692_20:
 26709  000084                     
 26710                           ;main.c: 157: WriteTimer0(0xfb1d);
 26711  000084  0EFB               	movlw	251
 26712  000086  6E2C               	movwf	?i1_WriteTimer0+1,c
 26713  000088  0E1D               	movlw	29
 26714  00008A  6E2B               	movwf	?i1_WriteTimer0,c
 26715  00008C  ECA6  F00B         	call	i1_WriteTimer0	;wreg free
 26716  000090                     
 26717                           ;main.c: 159: timer++;
 26718  000090  0E01               	movlw	1
 26719  000092  0100               	movlb	0	; () banked
 26720  000094  27E9               	addwf	_timer& (0+255),f,b	;volatile
 26721  000096  0E00               	movlw	0
 26722  000098  23EA               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26723  00009A  0E00               	movlw	0
 26724  00009C  23EB               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26725  00009E  0E00               	movlw	0
 26726  0000A0  23EC               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26727  0000A2                     
 26728                           ; BSR set to: 0
 26729                           ;main.c: 160: timekeeper++;
 26730  0000A2  0E01               	movlw	1
 26731  0000A4  27E5               	addwf	_timekeeper& (0+255),f,b	;volatile
 26732  0000A6  0E00               	movlw	0
 26733  0000A8  23E6               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 26734  0000AA  0E00               	movlw	0
 26735  0000AC  23E7               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 26736  0000AE  0E00               	movlw	0
 26737  0000B0  23E8               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 26738  0000B2                     
 26739                           ; BSR set to: 0
 26740                           ;main.c: 163: status_led_cnt++;
 26741  0000B2  4A0F               	infsnz	_status_led_cnt,f,c	;volatile
 26742  0000B4  2A10               	incf	_status_led_cnt+1,f,c	;volatile
 26743  0000B6                     
 26744                           ; BSR set to: 0
 26745                           ;main.c: 164: if ((2 == ledFunctionality) &&
 26746                           ;main.c: 165: (status_led_cnt > 1000)) {
 26747  0000B6  501A               	movf	_ledFunctionality,w,c
 26748  0000B8  0A02               	xorlw	2
 26749  0000BA  A4D8               	btfss	status,2,c
 26750  0000BC  D001               	goto	i1u1693_21
 26751  0000BE  D001               	goto	i1u1693_20
 26752  0000C0                     i1u1693_21:
 26753  0000C0  D00C               	goto	i1l13019
 26754  0000C2                     i1u1693_20:
 26755  0000C2                     
 26756                           ; BSR set to: 0
 26757  0000C2  0EE9               	movlw	233
 26758  0000C4  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26759  0000C6  0E03               	movlw	3
 26760  0000C8  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26761  0000CA  A0D8               	btfss	status,0,c
 26762  0000CC  D001               	goto	i1u1694_21
 26763  0000CE  D001               	goto	i1u1694_20
 26764  0000D0                     i1u1694_21:
 26765  0000D0  D004               	goto	i1l13019
 26766  0000D2                     i1u1694_20:
 26767  0000D2                     i1l13017:
 26768                           
 26769                           ; BSR set to: 0
 26770                           ;main.c: 166: LATC1 = ~LATC1;
 26771  0000D2  728B               	btg	3979,1,c	;volatile
 26772                           
 26773                           ;main.c: 167: status_led_cnt = 0;
 26774  0000D4  6A0F               	clrf	_status_led_cnt,c	;volatile
 26775  0000D6  6A10               	clrf	_status_led_cnt+1,c	;volatile
 26776                           
 26777                           ;main.c: 168: }
 26778  0000D8  D04D               	goto	i1l392
 26779  0000DA                     i1l13019:
 26780                           
 26781                           ; BSR set to: 0
 26782                           ;main.c: 169: else if ((3 == ledFunctionality) &&
 26783                           ;main.c: 170: (status_led_cnt > 400)) {
 26784  0000DA  501A               	movf	_ledFunctionality,w,c
 26785  0000DC  0A03               	xorlw	3
 26786  0000DE  A4D8               	btfss	status,2,c
 26787  0000E0  D001               	goto	i1u1695_21
 26788  0000E2  D001               	goto	i1u1695_20
 26789  0000E4                     i1u1695_21:
 26790  0000E4  D009               	goto	i1l13025
 26791  0000E6                     i1u1695_20:
 26792  0000E6                     
 26793                           ; BSR set to: 0
 26794  0000E6  0E91               	movlw	145
 26795  0000E8  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26796  0000EA  0E01               	movlw	1
 26797  0000EC  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26798  0000EE  A0D8               	btfss	status,0,c
 26799  0000F0  D001               	goto	i1u1696_21
 26800  0000F2  D001               	goto	i1u1696_20
 26801  0000F4                     i1u1696_21:
 26802  0000F4  D001               	goto	i1l13025
 26803  0000F6                     i1u1696_20:
 26804  0000F6  D7ED               	goto	i1l13017
 26805  0000F8                     i1l13025:
 26806                           
 26807                           ; BSR set to: 0
 26808                           ;main.c: 174: else if ((4 == ledFunctionality) &&
 26809                           ;main.c: 175: (status_led_cnt > 100)) {
 26810  0000F8  501A               	movf	_ledFunctionality,w,c
 26811  0000FA  0A04               	xorlw	4
 26812  0000FC  A4D8               	btfss	status,2,c
 26813  0000FE  D001               	goto	i1u1697_21
 26814  000100  D001               	goto	i1u1697_20
 26815  000102                     i1u1697_21:
 26816  000102  D009               	goto	i1l13031
 26817  000104                     i1u1697_20:
 26818  000104                     
 26819                           ; BSR set to: 0
 26820  000104  0E65               	movlw	101
 26821  000106  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26822  000108  0E00               	movlw	0
 26823  00010A  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26824  00010C  A0D8               	btfss	status,0,c
 26825  00010E  D001               	goto	i1u1698_21
 26826  000110  D001               	goto	i1u1698_20
 26827  000112                     i1u1698_21:
 26828  000112  D001               	goto	i1l13031
 26829  000114                     i1u1698_20:
 26830  000114  D7DE               	goto	i1l13017
 26831  000116                     i1l13031:
 26832                           
 26833                           ; BSR set to: 0
 26834                           ;main.c: 179: else if ((5 == ledFunctionality) &&
 26835                           ;main.c: 180: (status_led_cnt > 70)) {
 26836  000116  501A               	movf	_ledFunctionality,w,c
 26837  000118  0A05               	xorlw	5
 26838  00011A  A4D8               	btfss	status,2,c
 26839  00011C  D001               	goto	i1u1699_21
 26840  00011E  D001               	goto	i1u1699_20
 26841  000120                     i1u1699_21:
 26842  000120  D009               	goto	i1l13037
 26843  000122                     i1u1699_20:
 26844  000122                     
 26845                           ; BSR set to: 0
 26846  000122  0E47               	movlw	71
 26847  000124  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26848  000126  0E00               	movlw	0
 26849  000128  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26850  00012A  A0D8               	btfss	status,0,c
 26851  00012C  D001               	goto	i1u1700_21
 26852  00012E  D001               	goto	i1u1700_20
 26853  000130                     i1u1700_21:
 26854  000130  D001               	goto	i1l13037
 26855  000132                     i1u1700_20:
 26856  000132  D7CF               	goto	i1l13017
 26857  000134                     i1l13037:
 26858                           
 26859                           ; BSR set to: 0
 26860                           ;main.c: 184: else if ((6 == ledFunctionality) &&
 26861                           ;main.c: 185: (status_led_cnt > 40)) {
 26862  000134  501A               	movf	_ledFunctionality,w,c
 26863  000136  0A06               	xorlw	6
 26864  000138  A4D8               	btfss	status,2,c
 26865  00013A  D001               	goto	i1u1701_21
 26866  00013C  D001               	goto	i1u1701_20
 26867  00013E                     i1u1701_21:
 26868  00013E  D009               	goto	i1l13043
 26869  000140                     i1u1701_20:
 26870  000140                     
 26871                           ; BSR set to: 0
 26872  000140  0E29               	movlw	41
 26873  000142  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26874  000144  0E00               	movlw	0
 26875  000146  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26876  000148  A0D8               	btfss	status,0,c
 26877  00014A  D001               	goto	i1u1702_21
 26878  00014C  D001               	goto	i1u1702_20
 26879  00014E                     i1u1702_21:
 26880  00014E  D001               	goto	i1l13043
 26881  000150                     i1u1702_20:
 26882  000150  D7C0               	goto	i1l13017
 26883  000152                     i1l13043:
 26884                           
 26885                           ; BSR set to: 0
 26886                           ;main.c: 189: else if (1 == ledFunctionality) {
 26887  000152  041A               	decf	_ledFunctionality,w,c
 26888  000154  A4D8               	btfss	status,2,c
 26889  000156  D001               	goto	i1u1703_21
 26890  000158  D001               	goto	i1u1703_20
 26891  00015A                     i1u1703_21:
 26892  00015A  D004               	goto	i1l401
 26893  00015C                     i1u1703_20:
 26894  00015C                     
 26895                           ; BSR set to: 0
 26896                           ;main.c: 190: LATC1 = 1;
 26897  00015C  828B               	bsf	3979,1,c	;volatile
 26898                           
 26899                           ;main.c: 191: status_led_cnt = 0;
 26900  00015E  6A0F               	clrf	_status_led_cnt,c	;volatile
 26901  000160  6A10               	clrf	_status_led_cnt+1,c	;volatile
 26902                           
 26903                           ;main.c: 192: }
 26904  000162  D008               	goto	i1l392
 26905  000164                     i1l401:
 26906                           
 26907                           ; BSR set to: 0
 26908                           ;main.c: 193: else if (0 == ledFunctionality) {
 26909  000164  661A               	tstfsz	_ledFunctionality,c
 26910  000166  D001               	goto	i1u1704_21
 26911  000168  D001               	goto	i1u1704_20
 26912  00016A                     i1u1704_21:
 26913  00016A  D004               	goto	i1l398
 26914  00016C                     i1u1704_20:
 26915  00016C                     
 26916                           ; BSR set to: 0
 26917                           ;main.c: 194: LATC1 = 0;
 26918  00016C  928B               	bcf	3979,1,c	;volatile
 26919                           
 26920                           ;main.c: 195: status_led_cnt = 0;
 26921  00016E  6A0F               	clrf	_status_led_cnt,c	;volatile
 26922  000170  6A10               	clrf	_status_led_cnt+1,c	;volatile
 26923  000172  D000               	goto	i1l392
 26924  000174                     i1l398:
 26925  000174                     i1l392:
 26926                           
 26927                           ; BSR set to: 0
 26928                           ;main.c: 196: }
 26929                           ;main.c: 198: INTCONbits.TMR0IF = 0;
 26930  000174  94F2               	bcf	intcon,2,c	;volatile
 26931  000176                     i1l389:
 26932                           
 26933                           ;main.c: 199: }
 26934                           ;main.c: 202: if ( 1 == IRXIF ) {
 26935  000176  AEA4               	btfss	4004,7,c	;volatile
 26936  000178  D001               	goto	i1u1705_21
 26937  00017A  D001               	goto	i1u1705_20
 26938  00017C                     i1u1705_21:
 26939  00017C  D001               	goto	i1l404
 26940  00017E                     i1u1705_20:
 26941  00017E                     
 26942                           ;main.c: 204: IRXIF = 0;
 26943  00017E  9EA4               	bcf	4004,7,c	;volatile
 26944  000180                     i1l404:
 26945                           
 26946                           ;main.c: 205: }
 26947                           ;main.c: 208: if ( RXBnIF ) {
 26948  000180  A2A4               	btfss	4004,1,c	;volatile
 26949  000182  D001               	goto	i1u1706_21
 26950  000184  D001               	goto	i1u1706_20
 26951  000186                     i1u1706_21:
 26952  000186  D061               	goto	i1l413
 26953  000188                     i1u1706_20:
 26954  000188                     
 26955                           ;main.c: 210: uint32_t id;
 26956                           ;main.c: 211: uint8_t dlc;
 26957                           ;main.c: 212: uint8_t data[8];
 26958                           ;main.c: 213: ECAN_RX_MSG_FLAGS flags;
 26959                           ;main.c: 215: if ( ECANReceiveMessage((unsigned long *)&id,
 26960                           ;main.c: 216: (BYTE*)&data,
 26961                           ;main.c: 217: (BYTE*)&dlc,
 26962                           ;main.c: 218: &flags) ) {
 26963  000188  0E46               	movlw	low Interrupt@data
 26964  00018A  6E32               	movwf	?_ECANReceiveMessage,c
 26965  00018C  0E4F               	movlw	low Interrupt@dlc
 26966  00018E  6E33               	movwf	?_ECANReceiveMessage+1,c
 26967  000190  0E54               	movlw	low Interrupt@flags
 26968  000192  6E34               	movwf	?_ECANReceiveMessage+2,c
 26969  000194  0E50               	movlw	Interrupt@id& (0+255)
 26970  000196  EC41  F023         	call	_ECANReceiveMessage
 26971  00019A  0900               	iorlw	0
 26972  00019C  B4D8               	btfsc	status,2,c
 26973  00019E  D001               	goto	i1u1707_21
 26974  0001A0  D001               	goto	i1u1707_20
 26975  0001A2                     i1u1707_21:
 26976  0001A2  D052               	goto	i1l13069
 26977  0001A4                     i1u1707_20:
 26978  0001A4                     
 26979                           ;main.c: 221: if ( flags & ECAN_RX_OVERFLOW ) {
 26980  0001A4  A654               	btfss	Interrupt@flags,3,c
 26981  0001A6  D001               	goto	i1u1708_21
 26982  0001A8  D001               	goto	i1u1708_20
 26983  0001AA                     i1u1708_21:
 26984  0001AA  D00E               	goto	i1l407
 26985  0001AC                     i1u1708_20:
 26986  0001AC                     
 26987                           ;main.c: 222: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 26988  0001AC  AA54               	btfss	Interrupt@flags,5,c
 26989  0001AE  D001               	goto	i1u1709_21
 26990  0001B0  D001               	goto	i1u1709_20
 26991  0001B2                     i1u1709_21:
 26992  0001B2  D04A               	goto	i1l13069
 26993  0001B4                     i1u1709_20:
 26994  0001B4                     i1l13057:
 26995  0001B4  0E01               	movlw	1
 26996  0001B6  0100               	movlb	0	; () banked
 26997  0001B8  27D1               	addwf	_can_receiveOverruns& (0+255),f,b
 26998  0001BA  0E00               	movlw	0
 26999  0001BC  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 27000  0001BE  0E00               	movlw	0
 27001  0001C0  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 27002  0001C2  0E00               	movlw	0
 27003  0001C4  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 27004  0001C6  D040               	goto	i1l13069
 27005  0001C8                     i1l407:
 27006                           
 27007                           ;main.c: 224: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 27008                           ;main.c: 225: ( flags & ECAN_RX_XTD_FRAME ) ) {
 27009  0001C8  BC54               	btfsc	Interrupt@flags,6,c
 27010  0001CA  D001               	goto	i1u1710_21
 27011  0001CC  D001               	goto	i1u1710_20
 27012  0001CE                     i1u1710_21:
 27013  0001CE  D03C               	goto	i1l13069
 27014  0001D0                     i1u1710_20:
 27015  0001D0  AA54               	btfss	Interrupt@flags,5,c
 27016  0001D2  D001               	goto	i1u1711_21
 27017  0001D4  D001               	goto	i1u1711_20
 27018  0001D6                     i1u1711_21:
 27019  0001D6  D038               	goto	i1l13069
 27020  0001D8                     i1u1711_20:
 27021  0001D8                     
 27022                           ;main.c: 227: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 27023  0001D8  504F               	movf	Interrupt@dlc,w,c
 27024  0001DA  6E3D               	movwf	??_Interrupt& (0+255),c
 27025  0001DC  6A3E               	clrf	(??_Interrupt+1)& (0+255),c
 27026  0001DE  0E05               	movlw	5
 27027  0001E0  263D               	addwf	??_Interrupt,f,c
 27028  0001E2  0E00               	movlw	0
 27029  0001E4  223E               	addwfc	??_Interrupt+1,f,c
 27030  0001E6  0E1B               	movlw	_canInputFifo& (0+255)
 27031  0001E8  EC38  F013         	call	_fifo_getFree
 27032  0001EC  503D               	movf	??_Interrupt,w,c
 27033  0001EE  5C2B               	subwf	?_fifo_getFree,w,c
 27034  0001F0  503E               	movf	??_Interrupt+1,w,c
 27035  0001F2  582C               	subwfb	?_fifo_getFree+1,w,c
 27036  0001F4  A0D8               	btfss	status,0,c
 27037  0001F6  D001               	goto	i1u1712_21
 27038  0001F8  D001               	goto	i1u1712_20
 27039  0001FA                     i1u1712_21:
 27040  0001FA  D7DC               	goto	i1l13057
 27041  0001FC                     i1u1712_20:
 27042  0001FC                     
 27043                           ;main.c: 228: fifo_write( &canInputFifo, (uint8_t *)&id, 4 );
 27044  0001FC  0E50               	movlw	low Interrupt@id
 27045  0001FE  6E2B               	movwf	?_fifo_write,c
 27046  000200  0E04               	movlw	4
 27047  000202  6E2C               	movwf	?_fifo_write+1,c
 27048  000204  0E00               	movlw	0
 27049  000206  6E2D               	movwf	?_fifo_write+2,c
 27050  000208  0E00               	movlw	0
 27051  00020A  6E2E               	movwf	?_fifo_write+3,c
 27052  00020C  0E00               	movlw	0
 27053  00020E  6E2F               	movwf	?_fifo_write+4,c
 27054  000210  0E1B               	movlw	_canInputFifo& (0+255)
 27055  000212  EC17  F01B         	call	_fifo_write
 27056                           
 27057                           ;main.c: 229: fifo_write( &canInputFifo, &dlc, 1 );
 27058  000216  0E4F               	movlw	low Interrupt@dlc
 27059  000218  6E2B               	movwf	?_fifo_write,c
 27060  00021A  0E01               	movlw	1
 27061  00021C  6E2C               	movwf	?_fifo_write+1,c
 27062  00021E  0E00               	movlw	0
 27063  000220  6E2D               	movwf	?_fifo_write+2,c
 27064  000222  0E00               	movlw	0
 27065  000224  6E2E               	movwf	?_fifo_write+3,c
 27066  000226  0E00               	movlw	0
 27067  000228  6E2F               	movwf	?_fifo_write+4,c
 27068  00022A  0E1B               	movlw	_canInputFifo& (0+255)
 27069  00022C  EC17  F01B         	call	_fifo_write
 27070                           
 27071                           ;main.c: 230: fifo_write( &canInputFifo, (uint8_t *)&data, dlc );
 27072  000230  0E46               	movlw	low Interrupt@data
 27073  000232  6E2B               	movwf	?_fifo_write,c
 27074  000234  504F               	movf	Interrupt@dlc,w,c
 27075  000236  6E2C               	movwf	?_fifo_write+1,c
 27076  000238  6A2D               	clrf	?_fifo_write+2,c
 27077  00023A  6A2E               	clrf	?_fifo_write+3,c
 27078  00023C  6A2F               	clrf	?_fifo_write+4,c
 27079  00023E  0E1B               	movlw	_canInputFifo& (0+255)
 27080  000240  EC17  F01B         	call	_fifo_write
 27081  000244                     
 27082                           ;main.c: 232: canrxcount++;
 27083  000244  0100               	movlb	0	; () banked
 27084  000246  2BF0               	incf	_canrxcount& (0+255),f,b	;volatile
 27085  000248                     i1l13069:
 27086                           
 27087                           ;main.c: 236: }
 27088                           ;main.c: 238: }
 27089                           ;main.c: 240: }
 27090                           ;main.c: 243: RXBnIF = 0;
 27091  000248  92A4               	bcf	4004,1,c	;volatile
 27092  00024A                     i1l413:
 27093  00024A  C045  FFDA         	movff	??_Interrupt+8,fsr2h
 27094  00024E  C044  FFD9         	movff	??_Interrupt+7,fsr2l
 27095  000252  C043  FFE2         	movff	??_Interrupt+6,fsr1h
 27096  000256  C042  FFE1         	movff	??_Interrupt+5,fsr1l
 27097  00025A  C041  FFE0         	movff	??_Interrupt+4,bsr
 27098  00025E  C040  FFE8         	movff	??_Interrupt+3,wreg
 27099  000262  C03F  FFD8         	movff	??_Interrupt+2,status
 27100  000266  0010               	retfie	
 27101  000268                     __end_of_Interrupt:
 27102                           	opt stack 0
 27103                           tblptru	equ	0xFF8
 27104                           tblptrh	equ	0xFF7
 27105                           tblptrl	equ	0xFF6
 27106                           tablat	equ	0xFF5
 27107                           prodh	equ	0xFF4
 27108                           prodl	equ	0xFF3
 27109                           intcon	equ	0xFF2
 27110                           indf0	equ	0xFEF
 27111                           postinc0	equ	0xFEE
 27112                           fsr0h	equ	0xFEA
 27113                           fsr0l	equ	0xFE9
 27114                           wreg	equ	0xFE8
 27115                           indf1	equ	0xFE7
 27116                           postinc1	equ	0xFE6
 27117                           postdec1	equ	0xFE5
 27118                           fsr1h	equ	0xFE2
 27119                           fsr1l	equ	0xFE1
 27120                           bsr	equ	0xFE0
 27121                           indf2	equ	0xFDF
 27122                           postinc2	equ	0xFDE
 27123                           postdec2	equ	0xFDD
 27124                           plusw2	equ	0xFDB
 27125                           fsr2h	equ	0xFDA
 27126                           fsr2l	equ	0xFD9
 27127                           status	equ	0xFD8
 27128                           
 27129 ;; *************** function i1_WriteTimer0 *****************
 27130 ;; Defined at:
 27131 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27132 ;; Parameters:    Size  Location     Type
 27133 ;;  timer0          2    0[COMRAM] unsigned int 
 27134 ;; Auto vars:     Size  Location     Type
 27135 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27136 ;; Return value:  Size  Location     Type
 27137 ;;		None               void
 27138 ;; Registers used:
 27139 ;;		None
 27140 ;; Tracked objects:
 27141 ;;		On entry : 0/0
 27142 ;;		On exit  : 0/0
 27143 ;;		Unchanged: 0/0
 27144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27145 ;;      Params:         2       0       0       0       0       0       0
 27146 ;;      Locals:         2       0       0       0       0       0       0
 27147 ;;      Temps:          0       0       0       0       0       0       0
 27148 ;;      Totals:         4       0       0       0       0       0       0
 27149 ;;Total ram usage:        4 bytes
 27150 ;; Hardware stack levels used:    1
 27151 ;; This function calls:
 27152 ;;		Nothing
 27153 ;; This function is called by:
 27154 ;;		_Interrupt
 27155 ;; This function uses a non-reentrant model
 27156 ;;
 27157                           
 27158                           	psect	text82
 27159  00174C                     __ptext82:
 27160                           	opt stack 0
 27161  00174C                     i1_WriteTimer0:
 27162                           	opt stack 20
 27163                           
 27164                           ;incstack = 0
 27165                           ;incstack = 0
 27166  00174C  C02B  F02D         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27167  001750  C02C  F02E         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27168  001754  C02E  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27169  001758  C02D  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27170  00175C  0012               	return	
 27171  00175E                     __end_ofi1_WriteTimer0:
 27172                           	opt stack 0
 27173                           tblptru	equ	0xFF8
 27174                           tblptrh	equ	0xFF7
 27175                           tblptrl	equ	0xFF6
 27176                           tablat	equ	0xFF5
 27177                           prodh	equ	0xFF4
 27178                           prodl	equ	0xFF3
 27179                           intcon	equ	0xFF2
 27180                           indf0	equ	0xFEF
 27181                           postinc0	equ	0xFEE
 27182                           fsr0h	equ	0xFEA
 27183                           fsr0l	equ	0xFE9
 27184                           wreg	equ	0xFE8
 27185                           indf1	equ	0xFE7
 27186                           postinc1	equ	0xFE6
 27187                           postdec1	equ	0xFE5
 27188                           fsr1h	equ	0xFE2
 27189                           fsr1l	equ	0xFE1
 27190                           bsr	equ	0xFE0
 27191                           indf2	equ	0xFDF
 27192                           postinc2	equ	0xFDE
 27193                           postdec2	equ	0xFDD
 27194                           plusw2	equ	0xFDB
 27195                           fsr2h	equ	0xFDA
 27196                           fsr2l	equ	0xFD9
 27197                           status	equ	0xFD8
 27198                           
 27199 ;; *************** function _fifo_getFree *****************
 27200 ;; Defined at:
 27201 ;;		line 96 in file "fifo.c"
 27202 ;; Parameters:    Size  Location     Type
 27203 ;;  f               1    wreg     PTR struct .
 27204 ;;		 -> canInputFifo(8), 
 27205 ;; Auto vars:     Size  Location     Type
 27206 ;;  f               1   10[COMRAM] PTR struct .
 27207 ;;		 -> canInputFifo(8), 
 27208 ;; Return value:  Size  Location     Type
 27209 ;;                  2    0[COMRAM] unsigned short 
 27210 ;; Registers used:
 27211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27212 ;; Tracked objects:
 27213 ;;		On entry : 0/0
 27214 ;;		On exit  : 0/0
 27215 ;;		Unchanged: 0/0
 27216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27217 ;;      Params:         2       0       0       0       0       0       0
 27218 ;;      Locals:         1       0       0       0       0       0       0
 27219 ;;      Temps:          8       0       0       0       0       0       0
 27220 ;;      Totals:        11       0       0       0       0       0       0
 27221 ;;Total ram usage:       11 bytes
 27222 ;; Hardware stack levels used:    1
 27223 ;; This function calls:
 27224 ;;		Nothing
 27225 ;; This function is called by:
 27226 ;;		_Interrupt
 27227 ;; This function uses a non-reentrant model
 27228 ;;
 27229                           
 27230                           	psect	text83
 27231  002670                     __ptext83:
 27232                           	opt stack 0
 27233  002670                     _fifo_getFree:
 27234                           	opt stack 20
 27235                           
 27236                           ;incstack = 0
 27237                           ;incstack = 0
 27238                           ;fifo_getFree@f stored from wreg
 27239  002670  CFE8 F035          	movff	wreg,fifo_getFree@f
 27240                           
 27241                           ;fifo.c: 97: if (f->head < f->tail) {
 27242  002674  D83F               	call	PL66	;call to abstracted procedure
 27243  002676  5035               	movf	fifo_getFree@f,w,c
 27244  002678  6EE1               	movwf	fsr1l,c
 27245  00267A  6AE2               	clrf	fsr1h,c
 27246  00267C  0E02               	movlw	2
 27247  00267E  26E1               	addwf	fsr1l,f,c
 27248  002680  6AE2               	clrf	fsr1h,c
 27249  002682  52E6               	movf	postinc1,f,c
 27250  002684  52DE               	movf	postinc2,f,c
 27251  002686  50DD               	movf	postdec2,w,c
 27252  002688  5CE5               	subwf	postdec1,w,c
 27253  00268A  E102               	bnz	i1u615_25
 27254  00268C  50DF               	movf	indf2,w,c
 27255  00268E  5CE7               	subwf	indf1,w,c
 27256  002690                     i1u615_25:
 27257  002690  E210               	bc	i1l6349
 27258                           
 27259                           ;fifo.c: 98: return (f->tail - f->head);
 27260  002692  D837               	call	PL108	;call to abstracted procedure
 27261  002694  CFDE F02D          	movff	postinc2,??_fifo_getFree
 27262  002698  CFDD F02E          	movff	postdec2,??_fifo_getFree+1
 27263  00269C  D82B               	call	PL66	;call to abstracted procedure
 27264  00269E  CFDE F02F          	movff	postinc2,??_fifo_getFree+2
 27265  0026A2  CFDD F030          	movff	postdec2,??_fifo_getFree+3
 27266  0026A6  502D               	movf	??_fifo_getFree,w,c
 27267  0026A8  5C2F               	subwf	??_fifo_getFree+2,w,c
 27268  0026AA  6E2B               	movwf	?_fifo_getFree,c
 27269  0026AC  502E               	movf	??_fifo_getFree+1,w,c
 27270  0026AE  5830               	subwfb	??_fifo_getFree+3,w,c
 27271  0026B0  D01F               	goto	L42
 27272  0026B2                     i1l6349:
 27273                           
 27274                           ;fifo.c: 100: else {
 27275                           ;fifo.c: 101: return (f->size + (f->tail - f->head));
 27276  0026B2  D820               	call	PL66	;call to abstracted procedure
 27277  0026B4  CFDE F02D          	movff	postinc2,??_fifo_getFree
 27278  0026B8  CFDD F02E          	movff	postdec2,??_fifo_getFree+1
 27279  0026BC  D822               	call	PL108	;call to abstracted procedure
 27280  0026BE  CFDE F02F          	movff	postinc2,??_fifo_getFree+2
 27281  0026C2  CFDD F030          	movff	postdec2,??_fifo_getFree+3
 27282  0026C6  5035               	movf	fifo_getFree@f,w,c
 27283  0026C8  6ED9               	movwf	fsr2l,c
 27284  0026CA  6ADA               	clrf	fsr2h,c
 27285  0026CC  0E06               	movlw	6
 27286  0026CE  26D9               	addwf	fsr2l,f,c
 27287  0026D0  6ADA               	clrf	fsr2h,c
 27288  0026D2  CFDE F031          	movff	postinc2,??_fifo_getFree+4
 27289  0026D6  CFDD F032          	movff	postdec2,??_fifo_getFree+5
 27290  0026DA  502F               	movf	??_fifo_getFree+2,w,c
 27291  0026DC  5C31               	subwf	??_fifo_getFree+4,w,c
 27292  0026DE  6E33               	movwf	(??_fifo_getFree+6)& (0+255),c
 27293  0026E0  5030               	movf	??_fifo_getFree+3,w,c
 27294  0026E2  5832               	subwfb	??_fifo_getFree+5,w,c
 27295  0026E4  6E34               	movwf	(??_fifo_getFree+7)& (0+255),c
 27296  0026E6  502D               	movf	??_fifo_getFree,w,c
 27297  0026E8  2433               	addwf	??_fifo_getFree+6,w,c
 27298  0026EA  6E2B               	movwf	?_fifo_getFree,c
 27299  0026EC  502E               	movf	??_fifo_getFree+1,w,c
 27300  0026EE  2034               	addwfc	??_fifo_getFree+7,w,c
 27301  0026F0                     L42:
 27302  0026F0  6E2C               	movwf	?_fifo_getFree+1,c
 27303  0026F2  0012               	return	
 27304  0026F4                     __end_of_fifo_getFree:
 27305                           	opt stack 0
 27306  0026F4                     PL66:
 27307                           	opt stack 20
 27308  0026F4  5035               	movf	fifo_getFree@f,w,c
 27309  0026F6  6ED9               	movwf	fsr2l,c
 27310  0026F8  6ADA               	clrf	fsr2h,c
 27311  0026FA  0E04               	movlw	4
 27312  0026FC  26D9               	addwf	fsr2l,f,c
 27313  0026FE  6ADA               	clrf	fsr2h,c
 27314  002700  0012               	return	
 27315  002702                     __end_ofPL66:
 27316                           	opt stack 0
 27317  002702                     PL108:
 27318                           	opt stack 20
 27319  002702  5035               	movf	fifo_getFree@f,w,c
 27320  002704  6ED9               	movwf	fsr2l,c
 27321  002706  6ADA               	clrf	fsr2h,c
 27322  002708  0E02               	movlw	2
 27323  00270A  26D9               	addwf	fsr2l,f,c
 27324  00270C  6ADA               	clrf	fsr2h,c
 27325  00270E  0012               	return	
 27326  002710                     __end_ofPL108:
 27327                           	opt stack 0
 27328                           tblptru	equ	0xFF8
 27329                           tblptrh	equ	0xFF7
 27330                           tblptrl	equ	0xFF6
 27331                           tablat	equ	0xFF5
 27332                           prodh	equ	0xFF4
 27333                           prodl	equ	0xFF3
 27334                           intcon	equ	0xFF2
 27335                           indf0	equ	0xFEF
 27336                           postinc0	equ	0xFEE
 27337                           fsr0h	equ	0xFEA
 27338                           fsr0l	equ	0xFE9
 27339                           wreg	equ	0xFE8
 27340                           indf1	equ	0xFE7
 27341                           postinc1	equ	0xFE6
 27342                           postdec1	equ	0xFE5
 27343                           fsr1h	equ	0xFE2
 27344                           fsr1l	equ	0xFE1
 27345                           bsr	equ	0xFE0
 27346                           indf2	equ	0xFDF
 27347                           postinc2	equ	0xFDE
 27348                           postdec2	equ	0xFDD
 27349                           plusw2	equ	0xFDB
 27350                           fsr2h	equ	0xFDA
 27351                           fsr2l	equ	0xFD9
 27352                           status	equ	0xFD8
 27353                           
 27354 ;; *************** function _ECANReceiveMessage *****************
 27355 ;; Defined at:
 27356 ;;		line 803 in file "ECAN.c"
 27357 ;; Parameters:    Size  Location     Type
 27358 ;;  id              1    wreg     PTR unsigned long 
 27359 ;;		 -> Interrupt@id(4), 
 27360 ;;  data            1    7[COMRAM] PTR unsigned char 
 27361 ;;		 -> Interrupt@data(8), 
 27362 ;;  dataLen         1    8[COMRAM] PTR unsigned char 
 27363 ;;		 -> Interrupt@dlc(1), 
 27364 ;;  msgFlags        1    9[COMRAM] PTR enum E16333
 27365 ;;		 -> Interrupt@flags(1), 
 27366 ;; Auto vars:     Size  Location     Type
 27367 ;;  id              1   12[COMRAM] PTR unsigned long 
 27368 ;;		 -> Interrupt@id(4), 
 27369 ;;  ptr             2   16[COMRAM] PTR unsigned char 
 27370 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27371 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27372 ;;  savedPtr        2   10[COMRAM] PTR unsigned char 
 27373 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27374 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27375 ;;  temp            1   15[COMRAM] struct .
 27376 ;;  mode            1   14[COMRAM] unsigned char 
 27377 ;;  i               1   13[COMRAM] unsigned char 
 27378 ;; Return value:  Size  Location     Type
 27379 ;;                  1    wreg      enum E15660
 27380 ;; Registers used:
 27381 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27382 ;; Tracked objects:
 27383 ;;		On entry : 0/0
 27384 ;;		On exit  : 0/0
 27385 ;;		Unchanged: 0/0
 27386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27387 ;;      Params:         3       0       0       0       0       0       0
 27388 ;;      Locals:         8       0       0       0       0       0       0
 27389 ;;      Temps:          0       0       0       0       0       0       0
 27390 ;;      Totals:        11       0       0       0       0       0       0
 27391 ;;Total ram usage:       11 bytes
 27392 ;; Hardware stack levels used:    1
 27393 ;; Hardware stack levels required when called:    1
 27394 ;; This function calls:
 27395 ;;		__ECANPointBuffer
 27396 ;;		__RegsToCANID
 27397 ;; This function is called by:
 27398 ;;		_Interrupt
 27399 ;; This function uses a non-reentrant model
 27400 ;;
 27401                           
 27402                           	psect	text84
 27403  004682                     __ptext84:
 27404                           	opt stack 0
 27405  004682                     _ECANReceiveMessage:
 27406                           	opt stack 19
 27407                           
 27408                           ;incstack = 0
 27409                           ;incstack = 0
 27410                           ;ECANReceiveMessage@id stored from wreg
 27411  004682  CFE8 F037          	movff	wreg,ECANReceiveMessage@id
 27412                           
 27413                           ;ECAN.c: 805: BYTE mode;
 27414                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27415                           ;ECAN.c: 809: char i;
 27416                           ;ECAN.c: 810: BYTE_VAL temp;
 27417                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27418  004686  6A14               	clrf	__ECANRxFilterHitInfo,c
 27419                           
 27420                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27421  004688  5077               	movf	3959,w,c	;volatile
 27422  00468A  0BC0               	andlw	192
 27423  00468C  6E39               	movwf	ECANReceiveMessage@mode,c
 27424                           
 27425                           ;ECAN.c: 816: if ( mode == 0x00 )
 27426  00468E  6639               	tstfsz	ECANReceiveMessage@mode,c
 27427  004690  D032               	goto	i1l9611
 27428                           
 27429                           ;ECAN.c: 822: {
 27430                           ;ECAN.c: 824: if ( RXB0FUL )
 27431  004692  AE60               	btfss	3936,7,c	;volatile
 27432  004694  D012               	goto	i1l1439
 27433                           
 27434                           ;ECAN.c: 825: {
 27435                           ;ECAN.c: 827: RXB0IF = 0;
 27436  004696  90A4               	bcf	4004,0,c	;volatile
 27437                           
 27438                           ;ECAN.c: 830: if ( RXB0OVFL )
 27439  004698  AE74               	btfss	3956,7,c	;volatile
 27440  00469A  D006               	goto	i1l9587
 27441                           
 27442                           ;ECAN.c: 831: {
 27443                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27444  00469C  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27445  00469E  6ED9               	movwf	fsr2l,c
 27446  0046A0  6ADA               	clrf	fsr2h,c
 27447  0046A2  0E00               	movlw	0
 27448  0046A4  86DB               	bsf	plusw2,3,c
 27449                           
 27450                           ;ECAN.c: 833: RXB0OVFL = 0;
 27451  0046A6  9E74               	bcf	3956,7,c	;volatile
 27452  0046A8                     i1l9587:
 27453                           
 27454                           ;ECAN.c: 834: }
 27455                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27456  0046A8  A060               	btfss	3936,0,c	;volatile
 27457  0046AA  D002               	bra	i1u1132_25
 27458  0046AC  8014               	bsf	__ECANRxFilterHitInfo,0,c
 27459  0046AE  D001               	bra	i1u1132_27
 27460  0046B0                     i1u1132_25:
 27461  0046B0  9014               	bcf	__ECANRxFilterHitInfo,0,c
 27462  0046B2                     i1u1132_27:
 27463                           
 27464                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27465  0046B2  0E0F               	movlw	15	;volatile
 27466  0046B4  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27467  0046B6  0E60               	movlw	96	;volatile
 27468  0046B8  D01A               	goto	L43
 27469  0046BA                     i1l1439:
 27470                           
 27471                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27472  0046BA  010F               	movlb	15	; () banked
 27473  0046BC  AF50               	btfss	80,7,b	;volatile
 27474  0046BE  D019               	goto	i1l9605
 27475                           
 27476                           ; BSR set to: 15
 27477                           ;ECAN.c: 842: {
 27478                           ;ECAN.c: 844: RXB1IF = 0;
 27479  0046C0  92A4               	bcf	4004,1,c	;volatile
 27480                           
 27481                           ;ECAN.c: 847: if ( RXB1OVFL )
 27482  0046C2  AC74               	btfss	3956,6,c	;volatile
 27483  0046C4  D006               	goto	i1l9597
 27484                           
 27485                           ; BSR set to: 15
 27486                           ;ECAN.c: 848: {
 27487                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27488  0046C6  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27489  0046C8  6ED9               	movwf	fsr2l,c
 27490  0046CA  6ADA               	clrf	fsr2h,c
 27491  0046CC  0E00               	movlw	0
 27492  0046CE  86DB               	bsf	plusw2,3,c
 27493                           
 27494                           ; BSR set to: 15
 27495                           ;ECAN.c: 850: RXB1OVFL = 0;
 27496  0046D0  9C74               	bcf	3956,6,c	;volatile
 27497  0046D2                     i1l9597:
 27498                           
 27499                           ; BSR set to: 15
 27500                           ;ECAN.c: 851: }
 27501                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27502  0046D2  5150               	movf	80,w,b	;volatile
 27503  0046D4  0B07               	andlw	7
 27504  0046D6  6E14               	movwf	__ECANRxFilterHitInfo,c
 27505                           
 27506                           ; BSR set to: 15
 27507                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27508  0046D8  0E02               	movlw	2
 27509  0046DA  6014               	cpfslt	__ECANRxFilterHitInfo,c
 27510  0046DC  D005               	goto	i1l9603
 27511                           
 27512                           ; BSR set to: 15
 27513                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27514  0046DE  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27515  0046E0  6ED9               	movwf	fsr2l,c
 27516  0046E2  6ADA               	clrf	fsr2h,c
 27517  0046E4  0E00               	movlw	0
 27518  0046E6  8EDB               	bsf	plusw2,7,c
 27519  0046E8                     i1l9603:
 27520                           
 27521                           ; BSR set to: 15
 27522                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27523  0046E8  0E0F               	movlw	15	;volatile
 27524  0046EA  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27525  0046EC  0E50               	movlw	80	;volatile
 27526  0046EE                     L43:
 27527  0046EE  6E3B               	movwf	ECANReceiveMessage@ptr,c
 27528                           
 27529                           ;ECAN.c: 860: }
 27530  0046F0  D065               	goto	i1l9665
 27531  0046F2                     i1l9605:
 27532                           
 27533                           ;ECAN.c: 861: else
 27534                           ;ECAN.c: 862: return FALSE;
 27535  0046F2  0E00               	movlw	0
 27536  0046F4  D0C2               	goto	i1l1446
 27537  0046F6                     i1l9611:
 27538                           
 27539                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27540  0046F6  5039               	movf	ECANReceiveMessage@mode,w,c
 27541  0046F8  0A40               	xorlw	64
 27542  0046FA  E146               	bnz	i1l1449
 27543                           
 27544                           ;ECAN.c: 875: {
 27545                           ;ECAN.c: 876: if ( RXB0FUL )
 27546  0046FC  AE60               	btfss	3936,7,c	;volatile
 27547  0046FE  D004               	goto	i1l1450
 27548                           
 27549                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27550  004700  0E0F               	movlw	15	;volatile
 27551  004702  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27552  004704  0E60               	movlw	96	;volatile
 27553  004706  D03E               	goto	L50
 27554  004708                     i1l1450:
 27555                           
 27556                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27557  004708  010F               	movlb	15	; () banked
 27558  00470A  AF50               	btfss	80,7,b	;volatile
 27559  00470C  D004               	goto	i1l1452
 27560                           
 27561                           ; BSR set to: 15
 27562                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27563  00470E  0E0F               	movlw	15	;volatile
 27564  004710  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27565  004712  0E50               	movlw	80	;volatile
 27566  004714  D037               	goto	L50
 27567  004716                     i1l1452:
 27568                           
 27569                           ; BSR set to: 15
 27570                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27571  004716  010D               	movlb	13
 27572  004718  B5F8               	btfsc	248,2,b	;volatile
 27573  00471A  D007               	goto	i1l1454
 27574  00471C  010E               	movlb	14
 27575  00471E  AF20               	btfss	32,7,b	;volatile
 27576  004720  D004               	goto	i1l1454
 27577                           
 27578                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27579  004722  0E0E               	movlw	14	;volatile
 27580  004724  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27581  004726  0E20               	movlw	32	;volatile
 27582  004728  D02D               	goto	L50
 27583  00472A                     i1l1454:
 27584                           
 27585                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27586  00472A  010D               	movlb	13
 27587  00472C  B7F8               	btfsc	248,3,b	;volatile
 27588  00472E  D007               	goto	i1l1456
 27589  004730  010E               	movlb	14
 27590  004732  AF30               	btfss	48,7,b	;volatile
 27591  004734  D004               	goto	i1l1456
 27592                           
 27593                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27594  004736  0E0E               	movlw	14	;volatile
 27595  004738  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27596  00473A  0E30               	movlw	48	;volatile
 27597  00473C  D023               	goto	L50
 27598  00473E                     i1l1456:
 27599                           
 27600                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27601  00473E  010D               	movlb	13
 27602  004740  B9F8               	btfsc	248,4,b	;volatile
 27603  004742  D007               	goto	i1l1458
 27604  004744  010E               	movlb	14
 27605  004746  AF40               	btfss	64,7,b	;volatile
 27606  004748  D004               	goto	i1l1458
 27607                           
 27608                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27609  00474A  0E0E               	movlw	14	;volatile
 27610  00474C  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27611  00474E  0E40               	movlw	64	;volatile
 27612  004750  D019               	goto	L50
 27613  004752                     i1l1458:
 27614                           
 27615                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27616  004752  010D               	movlb	13
 27617  004754  BBF8               	btfsc	248,5,b	;volatile
 27618  004756  D005               	goto	i1l1460
 27619  004758  010E               	movlb	14
 27620  00475A  AF50               	btfss	80,7,b	;volatile
 27621  00475C  D002               	goto	i1l1460
 27622                           
 27623                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27624  00475E  0E0E               	movlw	14	;volatile
 27625  004760  D7D7               	goto	L51
 27626  004762                     i1l1460:
 27627                           
 27628                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27629  004762  010D               	movlb	13
 27630  004764  BDF8               	btfsc	248,6,b	;volatile
 27631  004766  D005               	goto	i1l1462
 27632  004768  010E               	movlb	14
 27633  00476A  AF60               	btfss	96,7,b	;volatile
 27634  00476C  D002               	goto	i1l1462
 27635                           
 27636                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27637  00476E  0E0E               	movlw	14	;volatile
 27638  004770  D7C8               	goto	L52
 27639  004772                     i1l1462:
 27640                           
 27641                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27642  004772  010D               	movlb	13
 27643  004774  BFF8               	btfsc	248,7,b	;volatile
 27644  004776  D7BD               	goto	i1l9605
 27645  004778  010E               	movlb	14
 27646  00477A  AF70               	btfss	112,7,b	;volatile
 27647  00477C  D7BA               	goto	i1l9605
 27648                           
 27649                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27650  00477E  0E0E               	movlw	14	;volatile
 27651  004780  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27652  004782  0E70               	movlw	112	;volatile
 27653  004784                     L50:
 27654  004784  6E3B               	movwf	ECANReceiveMessage@ptr,c
 27655  004786  D00A               	goto	i1l9655
 27656  004788                     i1l1449:
 27657                           
 27658                           ;ECAN.c: 910: else
 27659                           ;ECAN.c: 915: {
 27660                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27661  004788  AE74               	btfss	3956,7,c	;volatile
 27662  00478A  D7B3               	goto	i1l9605
 27663                           
 27664                           ;ECAN.c: 919: {
 27665                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27666  00478C  506F               	movf	3951,w,c	;volatile
 27667  00478E  0B07               	andlw	7
 27668  004790  EC1F  F010         	call	__ECANPointBuffer
 27669  004794  C02B  F03B         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27670  004798  C02C  F03C         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27671  00479C                     i1l9655:
 27672                           
 27673                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27674  00479C  C03B  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27675  0047A0  C03C  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27676  0047A4  50DF               	movf	indf2,w,c
 27677  0047A6  0B1F               	andlw	31
 27678  0047A8  6E14               	movwf	__ECANRxFilterHitInfo,c
 27679                           
 27680                           ;ECAN.c: 934: RXB1IF = 0;
 27681  0047AA  92A4               	bcf	4004,1,c	;volatile
 27682                           
 27683                           ;ECAN.c: 936: if ( RXB1OVFL )
 27684  0047AC  AC74               	btfss	3956,6,c	;volatile
 27685  0047AE  D006               	goto	i1l9665
 27686                           
 27687                           ;ECAN.c: 937: {
 27688                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27689  0047B0  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27690  0047B2  6ED9               	movwf	fsr2l,c
 27691  0047B4  6ADA               	clrf	fsr2h,c
 27692  0047B6  0E00               	movlw	0
 27693  0047B8  86DB               	bsf	plusw2,3,c
 27694                           
 27695                           ;ECAN.c: 939: RXB1OVFL = 0;
 27696  0047BA  9C74               	bcf	3956,6,c	;volatile
 27697  0047BC                     i1l9665:
 27698                           
 27699                           ;ECAN.c: 944: savedPtr = ptr;
 27700  0047BC  C03B  F035         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27701  0047C0  C03C  F036         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27702                           
 27703                           ;ECAN.c: 945: *msgFlags = 0;
 27704  0047C4  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27705  0047C6  6ED9               	movwf	fsr2l,c
 27706  0047C8  6ADA               	clrf	fsr2h,c
 27707  0047CA  6ADF               	clrf	indf2,c
 27708                           
 27709                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27710  0047CC  EE20 F005          	lfsr	2,5
 27711  0047D0  D855               	call	PL106	;call to abstracted procedure
 27712                           
 27713                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27714  0047D2  5033               	movf	ECANReceiveMessage@dataLen,w,c
 27715  0047D4  6ED9               	movwf	fsr2l,c
 27716  0047D6  6ADA               	clrf	fsr2h,c
 27717  0047D8  503A               	movf	ECANReceiveMessage@temp,w,c
 27718  0047DA  0B0F               	andlw	15
 27719  0047DC  6EDF               	movwf	indf2,c
 27720                           
 27721                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27722  0047DE  AC3A               	btfss	ECANReceiveMessage@temp,6,c
 27723  0047E0  D005               	goto	i1l1470
 27724                           
 27725                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27726  0047E2  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27727  0047E4  6ED9               	movwf	fsr2l,c
 27728  0047E6  6ADA               	clrf	fsr2h,c
 27729  0047E8  0E00               	movlw	0
 27730  0047EA  8CDB               	bsf	plusw2,6,c
 27731  0047EC                     i1l1470:
 27732                           
 27733                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27734  0047EC  EE20 F002          	lfsr	2,2
 27735  0047F0  D845               	call	PL106	;call to abstracted procedure
 27736                           
 27737                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27738  0047F2  A63A               	btfss	ECANReceiveMessage@temp,3,c
 27739  0047F4  D008               	goto	i1l1471
 27740                           
 27741                           ;ECAN.c: 958: {
 27742                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27743  0047F6  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27744  0047F8  6ED9               	movwf	fsr2l,c
 27745  0047FA  6ADA               	clrf	fsr2h,c
 27746  0047FC  0E00               	movlw	0
 27747  0047FE  8ADB               	bsf	plusw2,5,c
 27748                           
 27749                           ;ECAN.c: 960: temp.Val = 1;
 27750  004800  0E01               	movlw	1
 27751  004802  6E3A               	movwf	ECANReceiveMessage@temp,c
 27752                           
 27753                           ;ECAN.c: 961: }
 27754  004804  D001               	goto	i1l9683
 27755  004806                     i1l1471:
 27756                           
 27757                           ;ECAN.c: 962: else
 27758                           ;ECAN.c: 963: temp.Val = 0;
 27759  004806  6A3A               	clrf	ECANReceiveMessage@temp,c
 27760  004808                     i1l9683:
 27761                           
 27762                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27763  004808  283B               	incf	ECANReceiveMessage@ptr,w,c
 27764  00480A  6E2B               	movwf	?__RegsToCANID,c
 27765  00480C  0E00               	movlw	0
 27766  00480E  203C               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27767  004810  6E2C               	movwf	?__RegsToCANID+1,c
 27768  004812  C037  F02D         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27769  004816  C03A  F02E         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 27770  00481A  ECA5  F01B         	call	__RegsToCANID	;wreg free
 27771                           
 27772                           ;ECAN.c: 968: ptr += 6;
 27773  00481E  0E06               	movlw	6
 27774  004820  263B               	addwf	ECANReceiveMessage@ptr,f,c
 27775  004822  0E00               	movlw	0
 27776  004824  223C               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27777                           
 27778                           ;ECAN.c: 969: temp.Val = *dataLen;
 27779  004826  5033               	movf	ECANReceiveMessage@dataLen,w,c
 27780  004828  6ED9               	movwf	fsr2l,c
 27781  00482A  6ADA               	clrf	fsr2h,c
 27782  00482C  50DF               	movf	indf2,w,c
 27783  00482E  6E3A               	movwf	ECANReceiveMessage@temp,c
 27784                           
 27785                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27786  004830  6A38               	clrf	ECANReceiveMessage@i,c
 27787  004832  D00D               	goto	i1l9699
 27788  004834                     i1l9691:
 27789                           
 27790                           ;ECAN.c: 971: *data++ = *ptr++;
 27791  004834  C03B  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27792  004838  C03C  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27793  00483C  5032               	movf	ECANReceiveMessage@data,w,c
 27794  00483E  6EE1               	movwf	fsr1l,c
 27795  004840  6AE2               	clrf	fsr1h,c
 27796  004842  CFDF FFE7          	movff	indf2,indf1
 27797  004846  4A3B               	infsnz	ECANReceiveMessage@ptr,f,c
 27798  004848  2A3C               	incf	ECANReceiveMessage@ptr+1,f,c
 27799  00484A  2A32               	incf	ECANReceiveMessage@data,f,c
 27800  00484C  2A38               	incf	ECANReceiveMessage@i,f,c
 27801  00484E                     i1l9699:
 27802  00484E  503A               	movf	ECANReceiveMessage@temp,w,c
 27803  004850  5C38               	subwf	ECANReceiveMessage@i,w,c
 27804  004852  E3F0               	bnc	i1l9691
 27805                           
 27806                           ;ECAN.c: 974: if ( IRXIF )
 27807  004854  AEA4               	btfss	4004,7,c	;volatile
 27808  004856  D006               	goto	i1l9705
 27809                           
 27810                           ;ECAN.c: 975: {
 27811                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27812  004858  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27813  00485A  6ED9               	movwf	fsr2l,c
 27814  00485C  6ADA               	clrf	fsr2h,c
 27815  00485E  0E00               	movlw	0
 27816  004860  88DB               	bsf	plusw2,4,c
 27817                           
 27818                           ;ECAN.c: 977: IRXIF = 0;
 27819  004862  9EA4               	bcf	4004,7,c	;volatile
 27820  004864                     i1l9705:
 27821                           
 27822                           ;ECAN.c: 978: }
 27823                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27824  004864  C035  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27825  004868  C036  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27826  00486C  0E7F               	movlw	127
 27827  00486E  16DF               	andwf	indf2,f,c
 27828                           
 27829                           ;ECAN.c: 985: if ( mode == 0x80 )
 27830  004870  5039               	movf	ECANReceiveMessage@mode,w,c
 27831  004872  0A80               	xorlw	128
 27832  004874  B4D8               	btfsc	status,2,c
 27833                           
 27834                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27835  004876  9E74               	bcf	3956,7,c	;volatile
 27836                           
 27837                           ;ECAN.c: 992: return TRUE;
 27838  004878  0E01               	movlw	1
 27839  00487A                     i1l1446:
 27840  00487A  0012               	return	
 27841  00487C                     __end_of_ECANReceiveMessage:
 27842                           	opt stack 0
 27843  00487C                     PL106:
 27844                           	opt stack 19
 27845  00487C  503B               	movf	ECANReceiveMessage@ptr,w,c
 27846  00487E  26D9               	addwf	fsr2l,f,c
 27847  004880  503C               	movf	ECANReceiveMessage@ptr+1,w,c
 27848  004882  22DA               	addwfc	fsr2h,f,c
 27849  004884  50DF               	movf	indf2,w,c
 27850  004886  6E3A               	movwf	ECANReceiveMessage@temp,c
 27851  004888  0012               	return	
 27852  00488A                     __end_ofPL106:
 27853                           	opt stack 0
 27854                           tblptru	equ	0xFF8
 27855                           tblptrh	equ	0xFF7
 27856                           tblptrl	equ	0xFF6
 27857                           tablat	equ	0xFF5
 27858                           prodh	equ	0xFF4
 27859                           prodl	equ	0xFF3
 27860                           intcon	equ	0xFF2
 27861                           indf0	equ	0xFEF
 27862                           postinc0	equ	0xFEE
 27863                           fsr0h	equ	0xFEA
 27864                           fsr0l	equ	0xFE9
 27865                           wreg	equ	0xFE8
 27866                           indf1	equ	0xFE7
 27867                           postinc1	equ	0xFE6
 27868                           postdec1	equ	0xFE5
 27869                           fsr1h	equ	0xFE2
 27870                           fsr1l	equ	0xFE1
 27871                           bsr	equ	0xFE0
 27872                           indf2	equ	0xFDF
 27873                           postinc2	equ	0xFDE
 27874                           postdec2	equ	0xFDD
 27875                           plusw2	equ	0xFDB
 27876                           fsr2h	equ	0xFDA
 27877                           fsr2l	equ	0xFD9
 27878                           status	equ	0xFD8
 27879                           
 27880 ;; *************** function __RegsToCANID *****************
 27881 ;; Defined at:
 27882 ;;		line 1158 in file "ECAN.c"
 27883 ;; Parameters:    Size  Location     Type
 27884 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 27885 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27886 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27887 ;;  val             1    2[COMRAM] PTR unsigned long 
 27888 ;;		 -> Interrupt@id(4), 
 27889 ;;  type            1    3[COMRAM] unsigned char 
 27890 ;; Auto vars:     Size  Location     Type
 27891 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 27892 ;;		 -> Interrupt@id(4), 
 27893 ;; Return value:  Size  Location     Type
 27894 ;;		None               void
 27895 ;; Registers used:
 27896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27897 ;; Tracked objects:
 27898 ;;		On entry : 0/0
 27899 ;;		On exit  : 0/0
 27900 ;;		Unchanged: 0/0
 27901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27902 ;;      Params:         4       0       0       0       0       0       0
 27903 ;;      Locals:         1       0       0       0       0       0       0
 27904 ;;      Temps:          2       0       0       0       0       0       0
 27905 ;;      Totals:         7       0       0       0       0       0       0
 27906 ;;Total ram usage:        7 bytes
 27907 ;; Hardware stack levels used:    1
 27908 ;; This function calls:
 27909 ;;		Nothing
 27910 ;; This function is called by:
 27911 ;;		_ECANReceiveMessage
 27912 ;; This function uses a non-reentrant model
 27913 ;;
 27914                           
 27915                           	psect	text85
 27916  00374A                     __ptext85:
 27917                           	opt stack 0
 27918  00374A                     __RegsToCANID:
 27919                           	opt stack 19
 27920                           
 27921                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 27922                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 27923                           
 27924                           ;incstack = 0
 27925                           ;incstack = 0
 27926  00374A  C02D  F031         	movff	__RegsToCANID@val,__RegsToCANID@Value
 27927                           
 27928                           ;ECAN.c: 1163: if ( type == 0 )
 27929  00374E  662E               	tstfsz	__RegsToCANID@type,c
 27930  003750  D02B               	goto	i1l9355
 27931                           
 27932                           ;ECAN.c: 1164: {
 27933                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 27934  003752  5031               	movf	__RegsToCANID@Value,w,c
 27935  003754  6ED9               	movwf	fsr2l,c
 27936  003756  D862               	call	PL70	;call to abstracted procedure
 27937  003758  362F               	rlcf	??__RegsToCANID,f,c
 27938  00375A  90D8               	bcf	status,0,c
 27939  00375C  362F               	rlcf	??__RegsToCANID,f,c
 27940  00375E  90D8               	bcf	status,0,c
 27941  003760  342F               	rlcf	??__RegsToCANID,w,c
 27942  003762  6EDF               	movwf	indf2,c
 27943                           
 27944                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 27945  003764  5031               	movf	__RegsToCANID@Value,w,c
 27946  003766  6ED9               	movwf	fsr2l,c
 27947  003768  6ADA               	clrf	fsr2h,c
 27948  00376A  2AD9               	incf	fsr2l,f,c
 27949  00376C  6ADA               	clrf	fsr2h,c
 27950  00376E  D873               	call	PL84	;call to abstracted procedure
 27951  003770                     i1u1092_25:
 27952  003770  90D8               	bcf	status,0,c
 27953  003772  322F               	rrcf	??__RegsToCANID,f,c
 27954  003774  2E30               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27955  003776  D7FC               	goto	i1u1092_25
 27956  003778  502F               	movf	??__RegsToCANID,w,c
 27957                           
 27958                           ;ECAN.c: 1168: ptr++;
 27959                           
 27960                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 27961  00377A  D859               	call	PL72	;call to abstracted procedure
 27962  00377C  0E05               	movlw	5
 27963  00377E  6E30               	movwf	(??__RegsToCANID+1)& (0+255),c
 27964  003780                     i1u1093_25:
 27965  003780  90D8               	bcf	status,0,c
 27966  003782  322F               	rrcf	??__RegsToCANID,f,c
 27967  003784  2E30               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27968  003786  D7FC               	goto	i1u1093_25
 27969  003788  5031               	movf	__RegsToCANID@Value,w,c
 27970  00378A  6ED9               	movwf	fsr2l,c
 27971  00378C  6ADA               	clrf	fsr2h,c
 27972  00378E  502F               	movf	??__RegsToCANID,w,c
 27973  003790  12DF               	iorwf	indf2,f,c
 27974                           
 27975                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 27976  003792  D83D               	call	PL40	;call to abstracted procedure
 27977  003794  6ADF               	clrf	indf2,c
 27978                           
 27979                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 27980  003796  5031               	movf	__RegsToCANID@Value,w,c
 27981  003798  6ED9               	movwf	fsr2l,c
 27982  00379A  6ADA               	clrf	fsr2h,c
 27983  00379C  0E03               	movlw	3
 27984  00379E  26D9               	addwf	fsr2l,f,c
 27985  0037A0  6ADA               	clrf	fsr2h,c
 27986  0037A2  0E00               	movlw	0
 27987  0037A4  6EDF               	movwf	indf2,c
 27988                           
 27989                           ;ECAN.c: 1172: }
 27990  0037A6  D032               	goto	i1l1493
 27991  0037A8                     i1l9355:
 27992                           
 27993                           ;ECAN.c: 1173: else
 27994                           ;ECAN.c: 1174: {
 27995                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 27996  0037A8  D832               	call	PL40	;call to abstracted procedure
 27997  0037AA  D855               	call	PL84	;call to abstracted procedure
 27998  0037AC                     i1u1094_25:
 27999  0037AC  90D8               	bcf	status,0,c
 28000  0037AE  362F               	rlcf	??__RegsToCANID,f,c
 28001  0037B0  2E30               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28002  0037B2  D7FC               	goto	i1u1094_25
 28003  0037B4  502F               	movf	??__RegsToCANID,w,c
 28004  0037B6  6EDF               	movwf	indf2,c
 28005                           
 28006                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 28007  0037B8  5031               	movf	__RegsToCANID@Value,w,c
 28008  0037BA  6ED9               	movwf	fsr2l,c
 28009  0037BC  6ADA               	clrf	fsr2h,c
 28010  0037BE  0E03               	movlw	3
 28011  0037C0  26D9               	addwf	fsr2l,f,c
 28012  0037C2  D82C               	call	PL70	;call to abstracted procedure
 28013  0037C4  322F               	rrcf	??__RegsToCANID,f,c
 28014  0037C6  90D8               	bcf	status,0,c
 28015  0037C8  322F               	rrcf	??__RegsToCANID,f,c
 28016  0037CA  90D8               	bcf	status,0,c
 28017  0037CC  302F               	rrcf	??__RegsToCANID,w,c
 28018                           
 28019                           ;ECAN.c: 1178: ptr++;
 28020                           
 28021                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 28022  0037CE  D82F               	call	PL72	;call to abstracted procedure
 28023  0037D0  0E03               	movlw	3
 28024  0037D2  162F               	andwf	??__RegsToCANID,f,c
 28025  0037D4  D81C               	call	PL40	;call to abstracted procedure
 28026  0037D6  502F               	movf	??__RegsToCANID,w,c
 28027  0037D8  12DF               	iorwf	indf2,f,c
 28028                           
 28029                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 28030  0037DA  C02B  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28031  0037DE  C02C  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28032  0037E2  50DF               	movf	indf2,w,c
 28033  0037E4  6E2F               	movwf	??__RegsToCANID& (0+255),c
 28034  0037E6  90D8               	bcf	status,0,c
 28035  0037E8  322F               	rrcf	??__RegsToCANID,f,c
 28036  0037EA  90D8               	bcf	status,0,c
 28037  0037EC  322F               	rrcf	??__RegsToCANID,f,c
 28038  0037EE  90D8               	bcf	status,0,c
 28039  0037F0  322F               	rrcf	??__RegsToCANID,f,c
 28040  0037F2  0E1C               	movlw	28
 28041  0037F4  162F               	andwf	??__RegsToCANID,f,c
 28042  0037F6  D80B               	call	PL40	;call to abstracted procedure
 28043  0037F8  502F               	movf	??__RegsToCANID,w,c
 28044  0037FA  12DF               	iorwf	indf2,f,c
 28045                           
 28046                           ;ECAN.c: 1182: ptr++;
 28047                           
 28048                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 28049  0037FC  D822               	call	PL80	;call to abstracted procedure
 28050  0037FE  2AE1               	incf	fsr1l,f,c
 28051  003800  6AE2               	clrf	fsr1h,c
 28052  003802  CFDF FFE7          	movff	indf2,indf1
 28053                           
 28054                           ;ECAN.c: 1184: ptr++;
 28055                           
 28056                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 28057  003806  D81D               	call	PL80	;call to abstracted procedure
 28058  003808  CFDF FFE7          	movff	indf2,indf1
 28059  00380C                     i1l1493:
 28060  00380C  0012               	return	
 28061  00380E                     __end_of__RegsToCANID:
 28062                           	opt stack 0
 28063  00380E                     PL40:
 28064                           	opt stack 19
 28065  00380E  5031               	movf	__RegsToCANID@Value,w,c
 28066  003810  6ED9               	movwf	fsr2l,c
 28067  003812  6ADA               	clrf	fsr2h,c
 28068  003814  0E02               	movlw	2
 28069  003816  26D9               	addwf	fsr2l,f,c
 28070  003818  6ADA               	clrf	fsr2h,c
 28071  00381A  0012               	return	
 28072  00381C                     __end_ofPL40:
 28073                           	opt stack 0
 28074  00381C                     PL70:
 28075                           	opt stack 19
 28076  00381C  6ADA               	clrf	fsr2h,c
 28077  00381E  C02B  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28078  003822  C02C  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28079  003826  50E7               	movf	indf1,w,c
 28080  003828  6E2F               	movwf	??__RegsToCANID& (0+255),c
 28081  00382A  90D8               	bcf	status,0,c
 28082  00382C  0012               	return	
 28083  00382E                     __end_ofPL70:
 28084                           	opt stack 0
 28085  00382E                     PL72:
 28086                           	opt stack 19
 28087  00382E  6EDF               	movwf	indf2,c
 28088  003830  4A2B               	infsnz	__RegsToCANID@ptr,f,c
 28089  003832  2A2C               	incf	__RegsToCANID@ptr+1,f,c
 28090  003834  C02B  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28091  003838  C02C  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28092  00383C  50DF               	movf	indf2,w,c
 28093  00383E  6E2F               	movwf	??__RegsToCANID& (0+255),c
 28094  003840  0012               	return	
 28095  003842                     __end_ofPL72:
 28096                           	opt stack 0
 28097  003842                     PL80:
 28098                           	opt stack 19
 28099  003842  4A2B               	infsnz	__RegsToCANID@ptr,f,c
 28100  003844  2A2C               	incf	__RegsToCANID@ptr+1,f,c
 28101  003846  C02B  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28102  00384A  C02C  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28103  00384E  5031               	movf	__RegsToCANID@Value,w,c
 28104  003850  6EE1               	movwf	fsr1l,c
 28105  003852  6AE2               	clrf	fsr1h,c
 28106  003854  0012               	return	
 28107  003856                     __end_ofPL80:
 28108                           	opt stack 0
 28109  003856                     PL84:
 28110                           	opt stack 19
 28111  003856  C02B  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28112  00385A  C02C  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28113  00385E  50E7               	movf	indf1,w,c
 28114  003860  6E2F               	movwf	??__RegsToCANID& (0+255),c
 28115  003862  0E05               	movlw	5
 28116  003864  6E30               	movwf	(??__RegsToCANID+1)& (0+255),c
 28117  003866  0C05               	retlw	5
 28118  003868                     __end_ofPL84:
 28119                           	opt stack 0
 28120                           tblptru	equ	0xFF8
 28121                           tblptrh	equ	0xFF7
 28122                           tblptrl	equ	0xFF6
 28123                           tablat	equ	0xFF5
 28124                           prodh	equ	0xFF4
 28125                           prodl	equ	0xFF3
 28126                           intcon	equ	0xFF2
 28127                           indf0	equ	0xFEF
 28128                           postinc0	equ	0xFEE
 28129                           fsr0h	equ	0xFEA
 28130                           fsr0l	equ	0xFE9
 28131                           wreg	equ	0xFE8
 28132                           indf1	equ	0xFE7
 28133                           postinc1	equ	0xFE6
 28134                           postdec1	equ	0xFE5
 28135                           fsr1h	equ	0xFE2
 28136                           fsr1l	equ	0xFE1
 28137                           bsr	equ	0xFE0
 28138                           indf2	equ	0xFDF
 28139                           postinc2	equ	0xFDE
 28140                           postdec2	equ	0xFDD
 28141                           plusw2	equ	0xFDB
 28142                           fsr2h	equ	0xFDA
 28143                           fsr2l	equ	0xFD9
 28144                           status	equ	0xFD8
 28145                           
 28146 ;; *************** function __ECANPointBuffer *****************
 28147 ;; Defined at:
 28148 ;;		line 1209 in file "ECAN.c"
 28149 ;; Parameters:    Size  Location     Type
 28150 ;;  b               1    wreg     unsigned char 
 28151 ;; Auto vars:     Size  Location     Type
 28152 ;;  b               1    3[COMRAM] unsigned char 
 28153 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28154 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28155 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28156 ;; Return value:  Size  Location     Type
 28157 ;;                  2    0[COMRAM] PTR unsigned char 
 28158 ;; Registers used:
 28159 ;;		wreg, status,2, status,0
 28160 ;; Tracked objects:
 28161 ;;		On entry : 0/0
 28162 ;;		On exit  : 0/0
 28163 ;;		Unchanged: 0/0
 28164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28165 ;;      Params:         3       0       0       0       0       0       0
 28166 ;;      Locals:         3       0       0       0       0       0       0
 28167 ;;      Temps:          0       0       0       0       0       0       0
 28168 ;;      Totals:         6       0       0       0       0       0       0
 28169 ;;Total ram usage:        6 bytes
 28170 ;; Hardware stack levels used:    1
 28171 ;; This function calls:
 28172 ;;		Nothing
 28173 ;; This function is called by:
 28174 ;;		_ECANReceiveMessage
 28175 ;; This function uses a non-reentrant model
 28176 ;;
 28177                           
 28178                           	psect	text86
 28179  00203E                     __ptext86:
 28180                           	opt stack 0
 28181  00203E                     __ECANPointBuffer:
 28182                           	opt stack 19
 28183                           
 28184                           ;incstack = 0
 28185                           ;incstack = 0
 28186                           ;__ECANPointBuffer@b stored from wreg
 28187  00203E  CFE8 F02E          	movff	wreg,__ECANPointBuffer@b
 28188                           
 28189                           ;ECAN.c: 1210: BYTE* pt;
 28190                           ;ECAN.c: 1212: switch(b)
 28191  002042  D024               	goto	i1l9341
 28192  002044                     i1l9323:
 28193                           
 28194                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28195  002044  0E0F               	movlw	15	;volatile
 28196  002046  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28197  002048  0E60               	movlw	96	;volatile
 28198  00204A  D01E               	goto	L59
 28199  00204C                     i1l9325:
 28200                           
 28201                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28202  00204C  010F               	movlb	15	; () banked
 28203  00204E  0E0F               	movlw	15	;volatile
 28204  002050  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28205  002052  0E50               	movlw	80	;volatile
 28206  002054  D019               	goto	L59
 28207  002056                     i1l9327:
 28208                           
 28209                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28210  002056  010E               	movlb	14	; () banked
 28211  002058  0E0E               	movlw	14	;volatile
 28212  00205A  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28213  00205C  0E20               	movlw	32	;volatile
 28214  00205E  D014               	goto	L59
 28215  002060                     i1l9329:
 28216                           
 28217                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28218  002060  010E               	movlb	14	; () banked
 28219  002062  0E0E               	movlw	14	;volatile
 28220  002064  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28221  002066  0E30               	movlw	48	;volatile
 28222  002068  D00F               	goto	L59
 28223  00206A                     i1l9331:
 28224                           
 28225                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28226  00206A  010E               	movlb	14	; () banked
 28227  00206C  0E0E               	movlw	14	;volatile
 28228  00206E  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28229  002070  0E40               	movlw	64	;volatile
 28230  002072  D00A               	goto	L59
 28231  002074                     i1l9333:
 28232                           
 28233                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28234  002074  010E               	movlb	14	; () banked
 28235  002076  0E0E               	movlw	14	;volatile
 28236  002078  D7EB               	goto	L60
 28237  00207A                     i1l9335:
 28238                           
 28239                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28240  00207A  010E               	movlb	14	; () banked
 28241  00207C  0E0E               	movlw	14	;volatile
 28242  00207E  D7E3               	goto	L61
 28243  002080                     i1l9337:
 28244                           
 28245                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28246  002080  010E               	movlb	14	; () banked
 28247  002082  0E0E               	movlw	14	;volatile
 28248  002084  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28249  002086  0E70               	movlw	112	;volatile
 28250  002088                     L59:
 28251  002088  6E2F               	movwf	__ECANPointBuffer@pt,c
 28252                           
 28253                           ;ECAN.c: 1237: break;
 28254  00208A  D00F               	goto	i1l1498
 28255  00208C                     i1l9341:
 28256  00208C  502E               	movf	__ECANPointBuffer@b,w,c
 28257                           
 28258                           ; Switch size 1, requested type "space"
 28259                           ; Number of cases is 7, Range of values is 0 to 6
 28260                           ; switch strategies available:
 28261                           ; Name         Instructions Cycles
 28262                           ; simple_byte           22    12 (average)
 28263                           ;	Chosen strategy is simple_byte
 28264  00208E  E0DA               	bz	i1l9323
 28265  002090  0A01               	xorlw	1	; case 1
 28266  002092  E0DC               	bz	i1l9325
 28267  002094  0A03               	xorlw	3	; case 2
 28268  002096  E0DF               	bz	i1l9327
 28269  002098  0A01               	xorlw	1	; case 3
 28270  00209A  E0E2               	bz	i1l9329
 28271  00209C  0A07               	xorlw	7	; case 4
 28272  00209E  E0E5               	bz	i1l9331
 28273  0020A0  0A01               	xorlw	1	; case 5
 28274  0020A2  E0E8               	bz	i1l9333
 28275  0020A4  0A03               	xorlw	3	; case 6
 28276  0020A6  E0E9               	bz	i1l9335
 28277  0020A8  D7EB               	goto	i1l9337
 28278  0020AA                     i1l1498:
 28279                           
 28280                           ;ECAN.c: 1239: return (pt);
 28281  0020AA  C02F  F02B         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28282  0020AE  C030  F02C         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28283  0020B2  0012               	return	
 28284  0020B4                     __end_of__ECANPointBuffer:
 28285                           	opt stack 0
 28286                           tblptru	equ	0xFF8
 28287                           tblptrh	equ	0xFF7
 28288                           tblptrl	equ	0xFF6
 28289                           tablat	equ	0xFF5
 28290                           prodh	equ	0xFF4
 28291                           prodl	equ	0xFF3
 28292                           intcon	equ	0xFF2
 28293                           indf0	equ	0xFEF
 28294                           postinc0	equ	0xFEE
 28295                           fsr0h	equ	0xFEA
 28296                           fsr0l	equ	0xFE9
 28297                           wreg	equ	0xFE8
 28298                           indf1	equ	0xFE7
 28299                           postinc1	equ	0xFE6
 28300                           postdec1	equ	0xFE5
 28301                           fsr1h	equ	0xFE2
 28302                           fsr1l	equ	0xFE1
 28303                           bsr	equ	0xFE0
 28304                           indf2	equ	0xFDF
 28305                           postinc2	equ	0xFDE
 28306                           postdec2	equ	0xFDD
 28307                           plusw2	equ	0xFDB
 28308                           fsr2h	equ	0xFDA
 28309                           fsr2l	equ	0xFD9
 28310                           status	equ	0xFD8
 28311                           
 28312 ;; *************** function _fifo_write *****************
 28313 ;; Defined at:
 28314 ;;		line 61 in file "fifo.c"
 28315 ;; Parameters:    Size  Location     Type
 28316 ;;  f               1    wreg     PTR struct .
 28317 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28318 ;;  buf             1    0[COMRAM] PTR const void 
 28319 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28320 ;;  nbytes          4    1[COMRAM] unsigned long 
 28321 ;; Auto vars:     Size  Location     Type
 28322 ;;  f               1   14[COMRAM] PTR struct .
 28323 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28324 ;;  i               4   10[COMRAM] unsigned long 
 28325 ;;  p               1    9[COMRAM] PTR const unsigned char 
 28326 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28327 ;; Return value:  Size  Location     Type
 28328 ;;                  2    0[COMRAM] unsigned short 
 28329 ;; Registers used:
 28330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28331 ;; Tracked objects:
 28332 ;;		On entry : 0/0
 28333 ;;		On exit  : 0/0
 28334 ;;		Unchanged: 0/0
 28335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28336 ;;      Params:         5       0       0       0       0       0       0
 28337 ;;      Locals:         6       0       0       0       0       0       0
 28338 ;;      Temps:          4       0       0       0       0       0       0
 28339 ;;      Totals:        15       0       0       0       0       0       0
 28340 ;;Total ram usage:       15 bytes
 28341 ;; Hardware stack levels used:    1
 28342 ;; This function calls:
 28343 ;;		Nothing
 28344 ;; This function is called by:
 28345 ;;		_Interrupt
 28346 ;; This function uses a non-reentrant model
 28347 ;;
 28348                           
 28349                           	psect	text87
 28350  00362E                     __ptext87:
 28351                           	opt stack 0
 28352  00362E                     _fifo_write:
 28353                           	opt stack 20
 28354                           
 28355                           ;incstack = 0
 28356                           ;incstack = 0
 28357                           ;fifo_write@f stored from wreg
 28358  00362E  CFE8 F039          	movff	wreg,fifo_write@f
 28359                           
 28360                           ;fifo.c: 62: uint32_t i;
 28361                           ;fifo.c: 63: const uint8_t *p;
 28362                           ;fifo.c: 64: p = buf;
 28363  003632  C02B  F034         	movff	fifo_write@buf,fifo_write@p
 28364                           
 28365                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28366  003636  6A35               	clrf	fifo_write@i,c
 28367  003638  6A36               	clrf	fifo_write@i+1,c
 28368  00363A  6A37               	clrf	fifo_write@i+2,c
 28369  00363C  6A38               	clrf	fifo_write@i+3,c
 28370  00363E  D052               	goto	i1l6337
 28371  003640                     i1l6317:
 28372                           
 28373                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 28374                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 28375  003640  5039               	movf	fifo_write@f,w,c
 28376  003642  6ED9               	movwf	fsr2l,c
 28377  003644  6ADA               	clrf	fsr2h,c
 28378  003646  0E04               	movlw	4
 28379  003648  D85B               	call	PL16	;call to abstracted procedure
 28380  00364A  E102               	bnz	i1u610_25
 28381  00364C  5030               	movf	??_fifo_write,w,c
 28382  00364E  1832               	xorwf	??_fifo_write+2,w,c
 28383  003650                     i1u610_25:
 28384  003650  E012               	bz	i1l1525
 28385  003652  5039               	movf	fifo_write@f,w,c
 28386  003654  6ED9               	movwf	fsr2l,c
 28387  003656  6ADA               	clrf	fsr2h,c
 28388  003658  0E06               	movlw	6
 28389  00365A  D852               	call	PL16	;call to abstracted procedure
 28390  00365C  E102               	bnz	i1u611_25
 28391  00365E  5030               	movf	??_fifo_write,w,c
 28392  003660  1832               	xorwf	??_fifo_write+2,w,c
 28393  003662                     i1u611_25:
 28394  003662  E10E               	bnz	i1l6325
 28395  003664  5039               	movf	fifo_write@f,w,c
 28396  003666  6ED9               	movwf	fsr2l,c
 28397  003668  6ADA               	clrf	fsr2h,c
 28398  00366A  0E04               	movlw	4
 28399  00366C  26D9               	addwf	fsr2l,f,c
 28400  00366E  6ADA               	clrf	fsr2h,c
 28401  003670  50DE               	movf	postinc2,w,c
 28402  003672  10DD               	iorwf	postdec2,w,c
 28403  003674  E105               	bnz	i1l6325
 28404  003676                     i1l1525:
 28405                           
 28406                           ;fifo.c: 71: return i;
 28407  003676  C035  F02B         	movff	fifo_write@i,?_fifo_write
 28408  00367A  C036  F02C         	movff	fifo_write@i+1,?_fifo_write+1
 28409  00367E  D03F               	goto	i1l1526
 28410  003680                     i1l6325:
 28411                           
 28412                           ;fifo.c: 73: else {
 28413                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28414  003680  5034               	movf	fifo_write@p,w,c
 28415  003682  6ED9               	movwf	fsr2l,c
 28416  003684  D85A               	call	PL92	;call to abstracted procedure
 28417  003686  CFE6 F030          	movff	postinc1,??_fifo_write
 28418  00368A  CFE5 F031          	movff	postdec1,??_fifo_write+1
 28419  00368E  5039               	movf	fifo_write@f,w,c
 28420  003690  6EE1               	movwf	fsr1l,c
 28421  003692  6AE2               	clrf	fsr1h,c
 28422  003694  CFE6 F032          	movff	postinc1,??_fifo_write+2
 28423  003698  CFE5 F033          	movff	postdec1,??_fifo_write+3
 28424  00369C  5030               	movf	??_fifo_write,w,c
 28425  00369E  2432               	addwf	??_fifo_write+2,w,c
 28426  0036A0  6EE1               	movwf	fsr1l,c
 28427  0036A2  5031               	movf	??_fifo_write+1,w,c
 28428  0036A4  2033               	addwfc	??_fifo_write+3,w,c
 28429  0036A6  6EE2               	movwf	fsr1h,c
 28430  0036A8  CFDF FFE7          	movff	indf2,indf1
 28431  0036AC  2A34               	incf	fifo_write@p,f,c
 28432                           
 28433                           ;fifo.c: 75: f->head++;
 28434  0036AE  D83E               	call	PL38	;call to abstracted procedure
 28435  0036B0  2ADE               	incf	postinc2,f,c
 28436  0036B2  0E00               	movlw	0
 28437  0036B4  22DD               	addwfc	postdec2,f,c
 28438                           
 28439                           ;fifo.c: 76: if (f->head == f->size) {
 28440  0036B6  5039               	movf	fifo_write@f,w,c
 28441  0036B8  6ED9               	movwf	fsr2l,c
 28442  0036BA  6ADA               	clrf	fsr2h,c
 28443  0036BC  0E06               	movlw	6
 28444  0036BE  26D9               	addwf	fsr2l,f,c
 28445  0036C0  D83C               	call	PL92	;call to abstracted procedure
 28446  0036C2  52E6               	movf	postinc1,f,c
 28447  0036C4  52DE               	movf	postinc2,f,c
 28448  0036C6  50DD               	movf	postdec2,w,c
 28449  0036C8  18E5               	xorwf	postdec1,w,c
 28450  0036CA  CFDF FFE8          	movff	indf2,wreg
 28451  0036CE  B4D8               	btfsc	status,2,c
 28452  0036D0  18E7               	xorwf	indf1,w,c
 28453  0036D2  E103               	bnz	i1l6335
 28454                           
 28455                           ;fifo.c: 77: f->head = 0;
 28456  0036D4  D82B               	call	PL38	;call to abstracted procedure
 28457  0036D6  6ADE               	clrf	postinc2,c
 28458  0036D8  6ADD               	clrf	postdec2,c
 28459  0036DA                     i1l6335:
 28460  0036DA  2A35               	incf	fifo_write@i,f,c
 28461  0036DC  0E00               	movlw	0
 28462  0036DE  2236               	addwfc	fifo_write@i+1,f,c
 28463  0036E0  2237               	addwfc	fifo_write@i+2,f,c
 28464  0036E2  2238               	addwfc	fifo_write@i+3,f,c
 28465  0036E4                     i1l6337:
 28466  0036E4  502C               	movf	fifo_write@nbytes,w,c
 28467  0036E6  5C35               	subwf	fifo_write@i,w,c
 28468  0036E8  502D               	movf	fifo_write@nbytes+1,w,c
 28469  0036EA  5836               	subwfb	fifo_write@i+1,w,c
 28470  0036EC  502E               	movf	fifo_write@nbytes+2,w,c
 28471  0036EE  5837               	subwfb	fifo_write@i+2,w,c
 28472  0036F0  502F               	movf	fifo_write@nbytes+3,w,c
 28473  0036F2  5838               	subwfb	fifo_write@i+3,w,c
 28474  0036F4  E3A5               	bnc	i1l6317
 28475                           
 28476                           ;fifo.c: 78: }
 28477                           ;fifo.c: 79: }
 28478                           ;fifo.c: 81: }
 28479                           ;fifo.c: 83: return nbytes;
 28480  0036F6  C02C  F02B         	movff	fifo_write@nbytes,?_fifo_write
 28481  0036FA  C02D  F02C         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28482  0036FE                     i1l1526:
 28483  0036FE  0012               	return	
 28484  003700                     __end_of_fifo_write:
 28485                           	opt stack 0
 28486  003700                     PL16:
 28487                           	opt stack 20
 28488  003700  26D9               	addwf	fsr2l,f,c
 28489  003702  6ADA               	clrf	fsr2h,c
 28490  003704  CFDE F030          	movff	postinc2,??_fifo_write
 28491  003708  CFDD F031          	movff	postdec2,??_fifo_write+1
 28492  00370C  5039               	movf	fifo_write@f,w,c
 28493  00370E  6ED9               	movwf	fsr2l,c
 28494  003710  6ADA               	clrf	fsr2h,c
 28495  003712  0E02               	movlw	2
 28496  003714  26D9               	addwf	fsr2l,f,c
 28497  003716  6ADA               	clrf	fsr2h,c
 28498  003718  CFDE F032          	movff	postinc2,??_fifo_write+2
 28499  00371C  CFDD F033          	movff	postdec2,??_fifo_write+3
 28500  003720  2A32               	incf	??_fifo_write+2,f,c
 28501  003722  0E00               	movlw	0
 28502  003724  2233               	addwfc	??_fifo_write+3,f,c
 28503  003726  5031               	movf	??_fifo_write+1,w,c
 28504  003728  1833               	xorwf	??_fifo_write+3,w,c
 28505  00372A  0012               	return	
 28506  00372C                     __end_ofPL16:
 28507                           	opt stack 0
 28508  00372C                     PL38:
 28509                           	opt stack 20
 28510  00372C  5039               	movf	fifo_write@f,w,c
 28511  00372E  6ED9               	movwf	fsr2l,c
 28512  003730  6ADA               	clrf	fsr2h,c
 28513  003732  0E02               	movlw	2
 28514  003734  26D9               	addwf	fsr2l,f,c
 28515  003736  6ADA               	clrf	fsr2h,c
 28516  003738  0012               	return	
 28517  00373A                     __end_ofPL38:
 28518                           	opt stack 0
 28519  00373A                     PL92:
 28520                           	opt stack 20
 28521  00373A  6ADA               	clrf	fsr2h,c
 28522  00373C  5039               	movf	fifo_write@f,w,c
 28523  00373E  6EE1               	movwf	fsr1l,c
 28524  003740  6AE2               	clrf	fsr1h,c
 28525  003742  0E02               	movlw	2
 28526  003744  26E1               	addwf	fsr1l,f,c
 28527  003746  6AE2               	clrf	fsr1h,c
 28528  003748  0012               	return	
 28529  00374A                     __end_ofPL92:
 28530                           	opt stack 0
 28531                           tblptru	equ	0xFF8
 28532                           tblptrh	equ	0xFF7
 28533                           tblptrl	equ	0xFF6
 28534                           tablat	equ	0xFF5
 28535                           prodh	equ	0xFF4
 28536                           prodl	equ	0xFF3
 28537                           intcon	equ	0xFF2
 28538                           indf0	equ	0xFEF
 28539                           postinc0	equ	0xFEE
 28540                           fsr0h	equ	0xFEA
 28541                           fsr0l	equ	0xFE9
 28542                           wreg	equ	0xFE8
 28543                           indf1	equ	0xFE7
 28544                           postinc1	equ	0xFE6
 28545                           postdec1	equ	0xFE5
 28546                           fsr1h	equ	0xFE2
 28547                           fsr1l	equ	0xFE1
 28548                           bsr	equ	0xFE0
 28549                           indf2	equ	0xFDF
 28550                           postinc2	equ	0xFDE
 28551                           postdec2	equ	0xFDD
 28552                           plusw2	equ	0xFDB
 28553                           fsr2h	equ	0xFDA
 28554                           fsr2l	equ	0xFD9
 28555                           status	equ	0xFD8
 28556                           
 28557 ;; *************** function _ReadUSART *****************
 28558 ;; Defined at:
 28559 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28560 ;; Parameters:    Size  Location     Type
 28561 ;;		None
 28562 ;; Auto vars:     Size  Location     Type
 28563 ;;  data            1    0[COMRAM] unsigned char 
 28564 ;; Return value:  Size  Location     Type
 28565 ;;                  1    wreg      unsigned char 
 28566 ;; Registers used:
 28567 ;;		wreg, status,2, status,0
 28568 ;; Tracked objects:
 28569 ;;		On entry : 0/0
 28570 ;;		On exit  : 0/0
 28571 ;;		Unchanged: 0/0
 28572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28573 ;;      Params:         0       0       0       0       0       0       0
 28574 ;;      Locals:         1       0       0       0       0       0       0
 28575 ;;      Temps:          0       0       0       0       0       0       0
 28576 ;;      Totals:         1       0       0       0       0       0       0
 28577 ;;Total ram usage:        1 bytes
 28578 ;; Hardware stack levels used:    1
 28579 ;; This function calls:
 28580 ;;		Nothing
 28581 ;; This function is called by:
 28582 ;;		_Interrupt
 28583 ;; This function uses a non-reentrant model
 28584 ;;
 28585                           
 28586                           	psect	text88
 28587  0017C6                     __ptext88:
 28588                           	opt stack 0
 28589  0017C6                     _ReadUSART:
 28590                           	opt stack 20
 28591                           
 28592                           ;incstack = 0
 28593                           ;incstack = 0
 28594  0017C6  0EF2               	movlw	242
 28595  0017C8  1613               	andwf	_USART_Status,f,c
 28596  0017CA  ACAB               	btfss	4011,6,c	;volatile
 28597  0017CC  D003               	goto	i1l1832
 28598  0017CE  9013               	bcf	_USART_Status,0,c
 28599  0017D0  B0AB               	btfsc	4011,0,c	;volatile
 28600  0017D2  8013               	bsf	_USART_Status,0,c
 28601  0017D4                     i1l1832:
 28602  0017D4  B4AB               	btfsc	4011,2,c	;volatile
 28603  0017D6  8413               	bsf	_USART_Status,2,c
 28604  0017D8  B2AB               	btfsc	4011,1,c	;volatile
 28605  0017DA  8613               	bsf	_USART_Status,3,c
 28606  0017DC  CFAE F02B          	movff	4014,ReadUSART@data	;volatile
 28607  0017E0  502B               	movf	ReadUSART@data,w,c
 28608  0017E2  0012               	return	
 28609  0017E4                     __end_of_ReadUSART:
 28610                           	opt stack 0
 28611                           tblptru	equ	0xFF8
 28612                           tblptrh	equ	0xFF7
 28613                           tblptrl	equ	0xFF6
 28614                           tablat	equ	0xFF5
 28615                           prodh	equ	0xFF4
 28616                           prodl	equ	0xFF3
 28617                           intcon	equ	0xFF2
 28618                           indf0	equ	0xFEF
 28619                           postinc0	equ	0xFEE
 28620                           fsr0h	equ	0xFEA
 28621                           fsr0l	equ	0xFE9
 28622                           wreg	equ	0xFE8
 28623                           indf1	equ	0xFE7
 28624                           postinc1	equ	0xFE6
 28625                           postdec1	equ	0xFE5
 28626                           fsr1h	equ	0xFE2
 28627                           fsr1l	equ	0xFE1
 28628                           bsr	equ	0xFE0
 28629                           indf2	equ	0xFDF
 28630                           postinc2	equ	0xFDE
 28631                           postdec2	equ	0xFDD
 28632                           plusw2	equ	0xFDB
 28633                           fsr2h	equ	0xFDA
 28634                           fsr2l	equ	0xFD9
 28635                           status	equ	0xFD8
 28636                           tblptru	equ	0xFF8
 28637                           tblptrh	equ	0xFF7
 28638                           tblptrl	equ	0xFF6
 28639                           tablat	equ	0xFF5
 28640                           prodh	equ	0xFF4
 28641                           prodl	equ	0xFF3
 28642                           intcon	equ	0xFF2
 28643                           indf0	equ	0xFEF
 28644                           postinc0	equ	0xFEE
 28645                           fsr0h	equ	0xFEA
 28646                           fsr0l	equ	0xFE9
 28647                           wreg	equ	0xFE8
 28648                           indf1	equ	0xFE7
 28649                           postinc1	equ	0xFE6
 28650                           postdec1	equ	0xFE5
 28651                           fsr1h	equ	0xFE2
 28652                           fsr1l	equ	0xFE1
 28653                           bsr	equ	0xFE0
 28654                           indf2	equ	0xFDF
 28655                           postinc2	equ	0xFDE
 28656                           postdec2	equ	0xFDD
 28657                           plusw2	equ	0xFDB
 28658                           fsr2h	equ	0xFDA
 28659                           fsr2l	equ	0xFD9
 28660                           status	equ	0xFD8
 28661                           
 28662                           	psect	rparam
 28663  0000                     tblptru	equ	0xFF8
 28664                           tblptrh	equ	0xFF7
 28665                           tblptrl	equ	0xFF6
 28666                           tablat	equ	0xFF5
 28667                           prodh	equ	0xFF4
 28668                           prodl	equ	0xFF3
 28669                           intcon	equ	0xFF2
 28670                           indf0	equ	0xFEF
 28671                           postinc0	equ	0xFEE
 28672                           fsr0h	equ	0xFEA
 28673                           fsr0l	equ	0xFE9
 28674                           wreg	equ	0xFE8
 28675                           indf1	equ	0xFE7
 28676                           postinc1	equ	0xFE6
 28677                           postdec1	equ	0xFE5
 28678                           fsr1h	equ	0xFE2
 28679                           fsr1l	equ	0xFE1
 28680                           bsr	equ	0xFE0
 28681                           indf2	equ	0xFDF
 28682                           postinc2	equ	0xFDE
 28683                           postdec2	equ	0xFDD
 28684                           plusw2	equ	0xFDB
 28685                           fsr2h	equ	0xFDA
 28686                           fsr2l	equ	0xFD9
 28687                           status	equ	0xFD8
 28688                           tblptru	equ	0xFF8
 28689                           tblptrh	equ	0xFF7
 28690                           tblptrl	equ	0xFF6
 28691                           tablat	equ	0xFF5
 28692                           prodh	equ	0xFF4
 28693                           prodl	equ	0xFF3
 28694                           intcon	equ	0xFF2
 28695                           indf0	equ	0xFEF
 28696                           postinc0	equ	0xFEE
 28697                           fsr0h	equ	0xFEA
 28698                           fsr0l	equ	0xFE9
 28699                           wreg	equ	0xFE8
 28700                           indf1	equ	0xFE7
 28701                           postinc1	equ	0xFE6
 28702                           postdec1	equ	0xFE5
 28703                           fsr1h	equ	0xFE2
 28704                           fsr1l	equ	0xFE1
 28705                           bsr	equ	0xFE0
 28706                           indf2	equ	0xFDF
 28707                           postinc2	equ	0xFDE
 28708                           postdec2	equ	0xFDD
 28709                           plusw2	equ	0xFDB
 28710                           fsr2h	equ	0xFDA
 28711                           fsr2l	equ	0xFD9
 28712                           status	equ	0xFD8


Data Sizes:
    Strings     4050
    Constant    120
    Data        0
    BSS         1134
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      85
    BANK0           160    113     151
    BANK1           256     20     198
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_252(CODE[2]), STR_251(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_246(CODE[2]), 
		 -> STR_245(CODE[3]), STR_244(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_262(CODE[3]), STR_261(CODE[23]), STR_260(CODE[10]), STR_259(CODE[10]), 
		 -> STR_258(CODE[12]), STR_257(CODE[8]), STR_256(CODE[7]), STR_255(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_254(CODE[10]), STR_253(CODE[3]), STR_250(CODE[20]), 
		 -> STR_249(CODE[3]), STR_248(CODE[14]), STR_247(CODE[3]), STR_243(CODE[8]), 
		 -> STR_242(CODE[15]), STR_241(CODE[67]), STR_240(CODE[3]), STR_239(CODE[27]), 
		 -> STR_238(CODE[67]), STR_237(CODE[39]), STR_236(CODE[62]), STR_235(CODE[55]), 
		 -> STR_234(CODE[49]), STR_233(CODE[67]), STR_232(CODE[47]), STR_231(CODE[47]), 
		 -> STR_230(CODE[34]), STR_229(CODE[71]), STR_228(CODE[20]), STR_227(CODE[78]), 
		 -> STR_226(CODE[24]), STR_225(CODE[77]), STR_224(CODE[67]), STR_223(CODE[69]), 
		 -> STR_222(CODE[47]), STR_221(CODE[40]), STR_220(CODE[39]), STR_219(CODE[33]), 
		 -> STR_218(CODE[23]), STR_217(CODE[56]), STR_216(CODE[24]), STR_215(CODE[44]), 
		 -> STR_214(CODE[50]), STR_213(CODE[31]), STR_212(CODE[50]), STR_211(CODE[51]), 
		 -> STR_210(CODE[46]), STR_209(CODE[44]), STR_208(CODE[27]), STR_207(CODE[39]), 
		 -> STR_206(CODE[39]), STR_205(CODE[52]), STR_204(CODE[54]), STR_203(CODE[55]), 
		 -> STR_202(CODE[3]), STR_199(CODE[24]), STR_198(CODE[57]), STR_197(CODE[53]), 
		 -> STR_196(CODE[58]), STR_195(CODE[3]), STR_192(CODE[25]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[24]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[23]), STR_175(CODE[3]), 
		 -> STR_172(CODE[21]), STR_171(CODE[3]), STR_168(CODE[22]), STR_167(CODE[3]), 
		 -> STR_164(CODE[17]), STR_163(CODE[3]), STR_160(CODE[18]), STR_159(CODE[4]), 
		 -> STR_158(CODE[11]), STR_157(CODE[2]), STR_154(CODE[7]), STR_151(CODE[7]), 
		 -> STR_148(CODE[9]), STR_145(CODE[7]), STR_142(CODE[8]), STR_139(CODE[7]), 
		 -> STR_138(CODE[2]), STR_137(CODE[2]), STR_136(CODE[6]), STR_135(CODE[8]), 
		 -> STR_134(CODE[8]), STR_133(CODE[20]), STR_132(CODE[27]), STR_131(CODE[6]), 
		 -> STR_130(CODE[33]), STR_127(CODE[26]), STR_125(CODE[32]), STR_123(CODE[28]), 
		 -> STR_119(CODE[6]), STR_117(CODE[40]), STR_115(CODE[44]), STR_112(CODE[6]), 
		 -> STR_111(CODE[39]), STR_109(CODE[36]), STR_107(CODE[37]), STR_105(CODE[40]), 
		 -> STR_103(CODE[37]), STR_102(CODE[50]), STR_99(CODE[6]), STR_98(CODE[41]), 
		 -> STR_96(CODE[38]), STR_94(CODE[39]), STR_92(CODE[42]), STR_90(CODE[39]), 
		 -> STR_89(CODE[66]), STR_86(CODE[6]), STR_85(CODE[3]), STR_82(CODE[20]), 
		 -> STR_80(CODE[33]), STR_79(CODE[35]), STR_78(CODE[24]), STR_76(CODE[33]), 
		 -> STR_74(CODE[24]), STR_71(CODE[54]), STR_70(CODE[6]), STR_69(CODE[3]), 
		 -> STR_64(CODE[34]), STR_63(CODE[3]), STR_60(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[15]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2151	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_264(CODE[17]), STR_263(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[3]), STR_200(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_156(CODE[3]), STR_155(CODE[7]), STR_153(CODE[3]), STR_152(CODE[7]), 
		 -> STR_150(CODE[3]), STR_149(CODE[7]), STR_147(CODE[3]), STR_146(CODE[7]), 
		 -> STR_144(CODE[3]), STR_143(CODE[7]), STR_141(CODE[3]), STR_140(CODE[7]), 
		 -> STR_84(CODE[3]), STR_83(CODE[7]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_59(CODE[3]), STR_58(CODE[7]), STR_57(CODE[3]), STR_56(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2131$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 8
		 -> Interrupt@data(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> Interrupt@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1424	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[3]), STR_200(CODE[7]), 

    printErrors$1415	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1409	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1403	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printErrors$1397	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1391	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printStatistics$1384	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1378	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    printStatistics$1372	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1366	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1159(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1298	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_156(CODE[3]), STR_155(CODE[7]), 

    receivePrintEventVerbose$1293	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[3]), STR_152(CODE[7]), 

    receivePrintEventVerbose$1288	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_150(CODE[3]), STR_149(CODE[7]), 

    receivePrintEventVerbose$1283	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1278	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1273	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1205	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1185	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1176	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[3]), STR_83(CODE[7]), 

    doModeVerbose@preg_1164	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1160	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1151	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[3]), STR_67(CODE[7]), 

    doModeVerbose$1147	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1141	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1136	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1124	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_57(CODE[3]), STR_56(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1112	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  103692
                                            106 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    7534
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    3319
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   16070
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1455
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1393
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    2585
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    2897
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     675
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   76457
                                              0 BANK1     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    3519
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3457
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   19230
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    3832
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    5359
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    5164
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3333
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2199
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    6449
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12     948
                                             18 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     601
                                             13 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           13     9      4     446
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                              3 BANK0      1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            5     1      4     186
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           24    24      0    2582
                                             18 COMRAM    24    24      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       11     9      2     154
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 11     8      3    1180
                                              7 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         15    10      5     378
                                              0 COMRAM    15    10      5
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     3D      BD       8       73.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100     14      C6       6       77.3%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     71      97       4       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      55       1       89.5%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     36F      15        0.0%
DATA                 0      0     56B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Mar 16 21:32:59 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 6B64  
                          printBinary@i 0064                             fifo_write@f 0039  
                           fifo_write@i 0035                             fifo_write@p 0034  
                        ??_fifo_getFree 002D                   __end_of_sendVSCPFrame 29A6  
            doModeVerbose@filter_nodeid 0290                                      PL2 6B64  
                                    PL4 6B78                                      PL6 6B96  
                                    PL8 6BA6                                      bsr 000FE0  
                   ___wmul@multiplicand 0062                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 1744                                     PL10 6BC2  
                                   PL20 42D4                                     PL12 6BD0  
                                   PL30 6C2A                                     PL22 3406  
                                   PL14 5802                                     PL40 380E  
                                   PL32 35DA                                     PL24 5830  
                                   PL16 3700                                     PL50 2842  
                                   PL42 6C50                                     PL34 2BBC  
                                   PL26 3DD8                                     PL18 5820  
                                   PL60 6C9E                                     PL52 35EE  
                                   PL44 6C6C                                     PL36 6C3E  
                                   PL28 6C1A                                     PL70 381C  
                                   PL62 5886                                     PL54 35FE  
                                   PL46 5856                                     PL38 372C  
                                   PL80 3842                                     PL72 382E  
                                   PL64 24A0                                     PL56 6C86  
                                   PL48 28E2                                     PL90 18F6  
                                   PL82 3DE8                                     PL74 3006  
                                   PL66 26F4                                     PL58 5870  
                                   PL92 373A                                     PL84 3856  
                                   PL76 32FA                                     PL68 589C  
                                   PL94 1A96                                     PL86 58AA  
                                   PL78 3610                                     PL96 3F74  
                                   PL88 5184                                     PL98 2B0C  
               sendEscapedUartData@pcrc 006C                                     l421 3A62  
                                   l422 3A9A                                     l425 3AB2  
                                   l426 3ABC                                     l524 6B62  
                                   l428 3AC8                                     l533 619E  
                                   l552 615E                                     l800 27BE  
                                   l529 602E                                     l538 60B6  
                                   l803 27C8                                     l707 5182  
                                   l812 2814                                     l565 61F4  
                                   l557 617E                                     l549 6154  
                                   l717 4ED4                                     l806 27E4  
                                   l830 2868                                     l742 50BE  
                                   l815 282E                                     l824 2854  
                                   l809 2804                                     l833 2884  
                                   l657 42D2                                     l914 4B36  
                                   l922 38A6                                     l770 2A64  
                                   l818 2838                                     l842 28CE  
                                   l915 4B4A                                     l907 4A94  
                                   l755 1DF4                                     l763 1E22  
                                   l827 285E                                     l851 2D8C  
                                   l940 39A2                                     l836 28A4  
                                   l860 2DBC                                     l925 38B0  
                                   l773 2A6E                                     l845 28D8  
                                   l758 1DFE                                     l950 3CBC  
                                   l934 398E                                     l782 2AB4  
                                   l854 2D96                                     l767 1E46  
                                   l919 389C                                     l791 2B02  
                                   l839 28B4                                     l863 2DDC  
                                   l944 3CA8                                     l928 38CC  
                                   l776 2A78                                     l872 2E1A  
                                   l953 3CD8                                     l937 3998  
                                   l785 2AC4                                     l857 2DA0  
                                   l866 2DEC                                     l947 3CB2  
                                   l779 2A94                                     l875 2E36  
                                   l972 3DD6                                     l788 2AF8  
                                   l797 27B4                                     l869 2E08  
                                   l966 3DC2                                     l878 2E40  
                                   l969 3DCC                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 0082                           fifo_write@buf 002B  
                 ?_vscp_restoreDefaults 002B                    __size_of_WriteTimer0 0012  
                                   _pos 0102          __size_of_writeRegisterExtended 0106  
                                   wreg 000FE8           __end_of_writeRegisterExtended 351A  
                                  PL100 2E4A                                    PL110 3624  
                                  PL102 58BC                                    PL112 58C6  
                                  PL104 2BDA                                    PL106 487C  
                                  PL108 2702                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1000 29AA  
                                  l1003 29B4                                    l1012 2A48  
                                  l1110 1C76                                    l1006 29BE  
                                  l1030 3E98                                    l1022 3E2E  
                                  l1015 2A52                                    l1009 29DA  
                                  l1106 1C6A                                    l1043 3F4A  
                                  l1027 3E60                                    l1212 246E  
                                  l1060 2C20                                    l1036 3EE8  
                                  l1230 451A                                    l1046 3F68  
                                  l1063 2CB4                                    l1072 3208  
                                  l1240 45BC                                    l1232 452C  
                                  l1209 244A                                    l1241 45CE  
                                  l1233 453E                                    l1049 3F72  
                                  l1090 3518                                    l1242 45E0  
                                  l1234 4550                                    l1219 211C  
                                  l2027 33FC                                    l1171 3030  
                                  l1243 45F2                                    l1235 4562  
                                  l2028 3404                                    l1244 4604  
                                  l1236 4574                                    l1165 4E20  
                                  l1157 4D8A                                    l1069 3156  
                                  l1245 4616                                    l1237 4586  
                                  l1246 4628                                    l1238 4598  
                                  l2303 278E                                    l1255 2394  
                                  l1087 3464                                    l1239 45AA  
                                  l1247 4680                                    l1264 2216  
                                  l1514 2B9A                                    l1434 3C7C  
                                  l1426 3BE0                                    l2402 2FE2  
                                  l1259 19AA                                    l1428 3BFE  
                                  l1517 2BBA                                    l2334 218E  
                                  l1710 55E6                                    l1702 557E  
                                  l1622 51AE                                    l1711 55EA  
                                  l2344 1E98                                    l2520 253E  
                                  l2417 1C3A                                    l1713 5606  
                                  l1802 1DAC                                    l2522 2532  
                                  l1811 1DE6                                    l2427 19E0  
                                  l2523 2536                                    l1563 1FDE  
                                  l1571 203C                                    l1708 55C0  
                                  l2508 1FD2                                    l1549 183E  
                                  l1565 1FE6                                    l1806 1DC0  
                                  l1638 52EA                                    l2470 1F0A  
                                  l1590 2608                                    l1807 1DC2  
                                  l1655 52FA                                    l1639 529C  
                                  l1591 266E                                    l1808 1DCC  
                                  l1488 35D8                                    l1809 1DCE  
                                  l1729 5690                                    l1585 1A64  
                                  l1770 17FE                                    l1674 541C  
                                  l1658 532E                                    l1819 1CDC  
                                  l1659 5332                                    l2547 1BA6  
                                  l2556 1A26                                    l2492 228A  
                                  l2468 1EAA                                    l2566 1B62  
                                  l1769 17FC                                    l2489 228E  
                                  l9831 39F6                                    l9921 1FF0  
                                  l9923 1FF6                                    l9863 3A9C  
                                  STR_1 762F                                    STR_2 718D  
                                  l9873 3AC4                                    l9865 3AAE  
                                  STR_3 769D                                    STR_4 70B5  
                                  STR_5 782A                                    STR_6 7CCF  
                                  l9893 3AF8                                    l9885 3AE2  
                                  STR_7 77EC                                    STR_8 7CB6  
                                  l9887 3AE8                                    STR_9 7C7F  
                                  l9897 3B04                                    l9889 3AEE  
                                  _PEIE 007F96                          sendCANFrame@id 008F  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0061  
                                  _bDLE 00ED                            __CFG_PWRT$ON 000000  
                                  ___IT 000101              __end_of_sendVSCPDriverNack 28E2  
                                  _bHex 0100            doModeVerbose@filter_priority 028E  
                                  _crc8 1906                                    _caps 00F5  
                                  _atoi 330E                                    _main 39A4  
                                  _init 1BB0                                    _mode 00F1  
                                  _itoa 193C                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 2710                     i1WriteTimer0@timer0 002B  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0268                            _sprintf$2151 0086  
                          _sprintf$2144 0082                            _sprintf$2145 0084  
          receiveSendMultiEventCANAL@id 007D                             _writeEEPROM 1822  
             ECANReceiveMessage@dataLen 0033      __end_of_receiveSendMultiEventCANAL 3DD8  
            _receiveSendMultiEventCANAL 3C7E                      doModeVerbose@count 02AB  
                 getVSCPFrame@pPriority 0078                          _caninputBuffer 0400  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 2396  
                      __RegsToCANID@val 002D                        __RegsToCANID@ptr 002B  
                  __size_of_getCANFrame 0078                ?_receiveVSCPModeCanalMsg 002B  
                       ?_doModeVscpNode 002B                                   l10023 20FC  
                                 l10015 20D6                                   l10031 2B2C  
                                 l10201 5D42                                   l10121 5ADE  
                                 l10027 2110                                   l10019 20E8  
                                 l10043 2BA4                                   l10203 5D4C  
                                 l10211 5DB0                                   l10131 5B28  
                                 l10115 5AA2                                   l10107 5A64  
                                 l10051 58DA                                   l10045 2BA8  
                                 l10301 60D0                                   l10231 5E7A  
                                 l10151 5BAC                                   l10143 5B7C  
                                 l10135 5B4A                                   l11121 23EE  
                                 l10313 6120                                   l10241 5EF2  
                                 l10225 5E3E                                   l10217 5DF0  
                                 l10209 5DA0                                   l10065 5910  
                                 l10411 63F8                                   l10403 63B2  
                                 l10235 5EB6                                   l10219 5E02  
                                 l10155 5BC4                                   l10147 5B94  
                                 l10139 5B64                                   l10091 59E6  
                                 l10083 59A6                                   l10075 5968  
                                 l11133 2408                                   l11205 4A46  
                                 l11301 33C4                                   l12021 2D46  
                                 l12013 2CE2                                   l10501 6634  
                                 l10413 6408                                   l10341 61C0  
                                 l10173 5C60                                   l10157 5BD6  
                                 l11231 4B1C                                   l12111 3566  
                                 l10407 63C2                                   l10327 6178  
                                 l10271 5FFC                                   l10255 5F58  
                                 l10191 5CEA                                   l10167 5C2E  
                                 _B0CON 000E20                                   l11233 4B28  
                                 l11313 1862                                   l12025 2D62  
                                 l12041 3236                                   l10601 6940  
                                 l10425 6464                                   l10441 64CE  
                                 l10353 620E                                   l10361 624E  
                                 l10281 6036                                   l10265 5FD6  
                                 l10185 5CBC                                   l11219 4AA4  
                                 l11251 2278                                   l11403 4BD4  
                                 l12019 2D30                                   l12051 32A4  
                                 l10611 6998                                   l10363 6252  
                                 l10267 5FEA                                   l10259 5F6A  
                                 l10371 6282                                   l10195 5D08  
                                 l10179 5C8E                                   l10099 5A26  
                                 l11229 4B18                                   l11181 49A2  
                                 l11157 48FC                                   l11245 221A  
                                 l11333 3FA0                                   l11309 1852  
                                 l12053 32BA                                   l10525 6704  
                                 l10461 654A                                   l10509 6698  
                                 l11239 4B48                                   l11263 24BC  
                                 l11431 4CA8                                   l10631 6A38  
                                 l10615 69B6                                   l10535 673E  
                                 l10471 6584                                   l10383 62E4  
                                 l12151 3D04                                   _B1CON 000E30  
                                 l11257 17BA                                   l11601 51B8  
                                 l11193 49F4                                   l11169 494E  
                                 l11249 2252                                   l11273 24F4  
                                 l11361 4074                                   l11417 4C3E  
                                 l12057 32D6                                   l12049 329C  
                                 l12081 25A4                                   l10545 677A  
                                 l10529 6714                                   l10481 65C0  
                                 l10457 653A                                   l10393 6362  
                                 l10369 6270                                   l10289 6082  
                                 l10705 4196                                   l10713 41A6  
                                 l11603 51BC                                   l11611 51CA  
                                 l11283 3310                                   l11347 400A  
                                 l12075 2574                                   l10651 6AEE  
                                 l10619 69DC                                   l10555 67B4  
                                 l10539 674E                                   l10491 65FA  
                                 l10467 6574                                   l10395 6376  
                                 l10387 62F6                                   l10803 4298  
                                 l11701 53A6                                   l11605 51C0  
                                 l11293 336A                                   l11285 3316  
                                 l11461 4D78                                   l11445 4D12  
                                 l12085 25B2                                   l11509 3068  
                                 l11541 18B8                                   l10661 6B36  
                                 l10565 67EE                                   l10549 678A  
                                 l10581 6870                                   l10477 65B0  
                                 l12173 3D34                                   l12245 3966  
                                 l12261 187C                                   l10813 42C2  
                                 l10741 41F4                                   l11607 51C4  
                                 l11295 3382                                   l11375 40DE  
                                 l12079 259C                                   l11527 30D2  
                                 l10655 6B12                                   l10639 6A74  
                                 l10647 6AB0                                   l10559 67C4  
                                 l10487 65EA                                   l10399 6386  
                                 l10663 6B44                                   l10751 4206  
                                 l10815 42C8                                   _B2CON 000E40  
                                 l11705 53AC                                   l11297 338A  
                                 l11481 4DFC                                   l11457 4D66  
                                 l10593 68FC                                   l10657 6B20  
                                 l10577 6854                                   l10569 67FE  
                                 l10497 6624                                   l12193 3D92  
                                 l12249 397E                                   l12265 189A  
                                 l10809 42B0                                   l10761 4218  
                                 l10753 420C                                   l10737 41E8  
                                 l10729 41C2                                   l10673 413A  
                                 l11811 559C                                   l11715 53E6  
                                 l11707 53D6                                   l11651 52D6  
                                 l11635 526C                                   l11619 5200  
                                 l11627 5246                                   l12603 21C4  
                                 l12507 1AB0                                   l11547 1ED8  
                                 l11539 18AE                                   l12099 463A  
                                 l10579 6862                                   l10667 6B60  
                                 l12179 3D52                                   l10739 41EE  
                                 l10691 417A                                   l10819 42D0  
                                 l10675 413E                                   l12523 2616  
                                 l10907 5046                                   l10851 4EAA  
                                 l10843 4E80                                   l11805 5582  
                                 l11741 545E                                   l11733 5444  
                                 l11653 52F0                                   l12605 21C6  
                                 l12509 1AB6                                   l11485 4E0E  
                                 l11469 4DA8                                   l11389 4B6A  
                                 l12701 2C92                                   l12197 3DB2  
                                 l12189 3D72                                   l10917 506C  
                                 l10861 4EDE                                   l10845 4E86  
                                 l11831 5616                                   l11671 5338  
                                 l11655 52F4                                   l11647 52A2  
                                 l12703 2CB2                                   l12711 1D42  
                                 l12543 1B14                                   l10791 4268  
                                 l10695 4180                                   l10951 5158  
                                 l10839 4E5E                                   _B3CON 000E50  
                                 l11913 57A4                                   l11905 5766  
                                 l11841 5636                                   l11825 5600  
                                 l11817 55C4                                   l11753 5492  
                                 l11729 5426                                   l11665 5316  
                                 l11657 52F8                                   l12609 21CA  
                                 l12553 19A8                                   l12713 1D50  
                                 l12537 1AF8                                   l10785 4252  
                                 l12481 3F06                                   l12529 265A  
                                 l10953 5164                                   l10937 50C4  
                                 l10929 50A2                                   l10873 4F0A  
                                 l10857 4ECE                                   l10945 50EE  
                                 l11923 57E6                                   l11915 57B6  
                                 l11755 5496                                   l11739 545A  
                                 l11931 57F4                                   l11691 537E  
                                 l11675 533E                                   l11683 5362  
                                 l11659 52FE                                   l11595 5196  
                                 l12731 3B7A                                   l12715 1D5A  
                                 l11587 31E6                                   l10779 423E  
                                 l10939 50D6                                   l10883 4F2E  
                                 l10947 5144                                   l10981 1DAE  
                                 l10973 1DA0                                   l11941 1790  
                                 l11909 578A                                   l11693 538C  
                                 l11677 534A                                   l12725 3B68  
                                 l12709 1D3E                                   l11589 3206  
                                 l10797 4280                                   l12477 3EF2  
                                 l12469 3EAC                                   l10957 5180  
                                 l12671 1958                                   l11919 57C4  
                                 l11847 564A                                   l11855 5666  
                                 l11767 54CA                                   l11783 5502  
                                 l11687 5378                                   l12743 3BA4  
                                 l12639 2F44                                   l12815 1A62  
                                 l12807 1A50                                   _B4CON 000E60  
                                 l12905 1C0A                                   l12833 2718  
                                 l11881 56B8                                   l11865 5678  
                                 l11793 554C                                   l11769 54CE  
                                 l11785 5514                                   l11697 539A  
                                 l11929 57EE                                   l12753 3BE4  
                                 l12649 2F88                                   l12907 1C12  
                                 l12843 2750                                   l12827 181A  
                                 l11891 56DA                                   l11875 56A0  
                                 l11859 5670                                   l12587 232E  
                                 l10899 4FD0                                   l12917 1C30  
                                 l12909 1C16                                   l12933 19D6  
                                 l12925 19B8                                   l11789 552E  
                                 l12765 3C2E                                   l12773 3C4C  
                                 l11957 1C80                                   l11949 1C50  
                                 l12927 19C0                                   l12871 2152  
                                 l11879 56B2                                   l11799 555E  
                                 l12943 1FAA                                   l12759 3C00  
                                 l12783 3C72                                   _B5CON 000E70  
                                 l12929 19C4                                   l11897 56EE  
                                 l12953 19F6                                   l12785 3C74  
                                 l12867 2142                                   l12891 1E68  
                                 l11899 5744                                   l12947 1FB6  
                                 l12939 1F70                                   l12779 3C6E  
                                 l12869 214E                                   l12949 1FBE  
                                 l12957 1A12                                   l12973 1B2E  
                                 l12981 1B72                                   l11997 34F6  
                                 l12879 2180                                   l12895 1E8A  
                                 l12887 1E58                                   l12967 17A8  
                                 l12959 1A16                                   l12975 1B36  
                                 l12983 1B7A                                   l11999 3516  
                                 l12799 1A3E                                   l12889 1E64  
                                 ?_crc8 0067                    __size_of_doModeSLCAN 0362  
                    writeEEPROM@address 0060                                   ?_atoi 0066  
                                 ?_main 00CA                                   ?_init 002B  
                                 ?_itoa 0070                           i1_WriteTimer0 174C  
                                 _EEADR 000FA9                                   STR_10 7C5D  
                                 STR_11 7C7F                                   STR_12 7C91  
                                 STR_20 7C48                                   STR_13 7C7F  
                                 STR_21 7A82                                   STR_30 7CF4  
                                 STR_14 7BCC                                   STR_22 7A96  
                                 STR_15 7C7F                                   STR_31 7CF4  
                                 STR_23 7AD2                                   STR_32 7CF4  
                                 STR_16 7C4F                                   STR_40 7AF7  
                                 STR_24 7A05                                   STR_17 7C7F  
                                 STR_33 7CF4                                   STR_41 7CCA  
                                 STR_25 78CE                                   STR_42 7C7F  
                                 STR_50 7C2A                                   STR_34 7CF4  
                                 STR_18 7C0D                                   STR_26 7A6E  
                                 STR_19 7C7F                                   STR_35 7CF4  
                                 STR_43 7CD8                                   STR_27 7AE5  
                                 STR_51 7930                                   STR_44 7C7F  
                                 STR_36 7C7F                                   STR_52 7C2A  
                                 STR_60 7BE9                                   STR_28 7948  
                                 STR_61 7C64                                   STR_29 7CEA  
                                 STR_45 7CC5                                   STR_53 77AB  
                                 STR_37 7748                                   STR_70 7C7F  
                                 STR_46 7C7F                                   STR_54 7C2A  
                                 STR_62 7CED                                   STR_38 7CE7  
                                 STR_63 718A                                   STR_39 7C7F  
                                 STR_47 7CA2                                   STR_55 7B5D  
                                 STR_71 7122                                   STR_48 7C7F  
                                 STR_72 7CAC                                   STR_56 7C64  
                                 STR_80 778A                                   STR_64 7705  
                                 STR_73 7C2A                                   STR_65 7C64  
                                 STR_57 7CED                                   STR_81 7CBB  
                                 STR_49 7CA7                                   STR_74 7930  
                                 STR_58 7C64                                   STR_66 7CED  
                                 STR_82 7AAA                                   STR_90 74FA  
                                 STR_75 7C2A                                   STR_91 7CF4  
                                 STR_83 7C64                                   STR_67 7C64  
                                 STR_59 7CED                                   STR_76 77AB  
                                 STR_84 7CED                                   STR_68 7CED  
                                 STR_92 742F                                   STR_85 718A  
                                 STR_69 718A                                   STR_77 7C2A  
                                 STR_93 7CF4                                   STR_86 7C7F  
                                 STR_78 7960                                   STR_94 7596  
                                 STR_95 7CF4                                   STR_87 7C56  
                                 STR_79 76C0                                   STR_88 7CF4  
                                 STR_96 75E4                                   STR_97 7CF4  
                                 STR_89 6F1C                                   STR_98 7459  
                                 STR_99 7C7F            __end_of_printFirmwareVersion 24A0  
                                 _BSEL0 000DF8                         __end_of___lldiv 21A0  
                                 ?_utoa 0067                                   u12010 1CFE  
                                 u12020 1D2C                         __end_of_calcCRC 18A4  
                                 _T0CON 000FD5                                   u12017 1CF8  
                                 u12027 1D26                                   u12205 5A0A  
                                 u12215 5A4A                         __end_of___llmod 1EAA  
                                 u12225 5A88                                   u14010 3360  
                                 u12235 5AC6                                   u12245 5B02  
                                 u14030 337E                                   u12175 5944  
                                 u14017 335A                                   u14105 292C  
                                 u12345 5BFA                                   u12185 598C  
                                 u14050 33AE                                   u12435 5DD4  
                                 u12195 59CA                                   u14060 33D8  
                                 u14037 3378                                   u12455 5E26  
                                 _LATC1 007C59                                   u14320 1EC8  
                                 u13520 4F9C                                   u14057 33A8  
                                 u12705 62A6                                   u12465 5E62  
                                 u13530 4FA6                                   u14067 33D2  
                                 u12475 5E9E                                   u14340 1F00  
                                 u13540 4FB0                                   u12485 5EDA  
                                 u13525 4F9A                                   u14327 1EC2  
                                 u12495 5F16                                   u13535 4FA4  
                                 u13545 4FAE                                   u16130 1AD2  
                                 u14347 1EFA                                   u12765 642A  
                                 u15094 1C60                                   u15095 1C5C  
                                 u15335 44BE                                   u12855 6BD8  
                                 u15336 44C4                                   u16137 1ACC  
                                 u15345 44F2                                   u15337 44D2  
                                 u12865 66BA                                   u12785 64F0  
                                 u15346 44F8                                   u15347 4506  
                                 u12955 6892                                   u15365 3540  
                                 u12965 68D8                                   u16270 2380  
                                 u15375 3550                                   u12975 691E  
                                 u15385 356E                                   u17137 3A04  
                                 u13970 332A                                   u16450 1D82  
                                 u16275 2376                                   u13990 3342  
                                 u13977 3324                                   u16457 1D78  
                                 u13997 333C                                   u15765 2E94  
                       __end_of___lwdiv 1C44                                   _ERRIE 007D1D  
                          _vscpPriority 01AF                                   i1l401 0164  
                                 i1l404 0180                                   i1l413 024A  
                                 i1l407 01C8                         __end_of___lwmod 19EA  
                                 i1l392 0174                                   i1l387 007C  
                                 i1l389 0176                                   i1l398 0174  
                       sendCANFrame@dlc 0093                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0063  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00B8  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 00EF                 readRegisterExtended@reg 00B8  
                         __CFG_WRTD$OFF 000000                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 25D6                                   crc8@m 0069  
                       __end_of_dpowers 6D0C                         __end_of_isdigit 1822  
                                 _timer 00E9                                   atoi@a 006B  
                                 atoi@s 0066                                   main@c 00D0  
                                 _ultoa 2F34                              Interrupt@c 004E  
            ??_printNodeFirmwareVersion 00BF                        _printErrors$1403 0098  
                      _printErrors$1415 009C                        _printErrors$1424 009E  
                      _printErrors$1409 009A                        _printErrors$1391 0094  
                                 tablat 000FF5                        _printErrors$1397 0096  
               ??_receiveSendEventCANAL 0072             __end_of_sendEscapedUartData 1E48  
                                 plusw2 000FDB                                   utoa@c 006F  
                                 utoa@v 006D                                   status 000FD8  
                       __end_of_sprintf 5802                 ??_receiveSendEventSLCAN 0083  
                       __end_of_strichr 1A28                         __end_of_strcspn 1BB0  
                       __end_of_toupper 17AC                         __end_of_stristr 2290  
                          __end_ofPL100 2E58                            __end_ofPL110 362E  
                          __end_ofPL102 58C6                            __end_ofPL112 58D0  
                          __end_ofPL104 2BE8                            __end_ofPL106 488A  
                          __end_ofPL108 2710       __size_of_receivePrintEventVerbose 02C2  
                   doModeVerbose@i_1106 02B0               ?_receivePrintEventVerbose 002B  
                   doModeVerbose@p_1112 02B2                     doModeVerbose@p_1205 02BB  
                   doModeVerbose@p_1160 02B4                     doModeVerbose@p_1185 02B9  
                        WriteUSART@data 0060                    _ECANSetOperationMode 17AC  
                          _canInputFifo 001B                         __initialization 1F0C  
                doModeVerbose@page_1157 02A1           receiveSendMultiEventCANAL@dlc 007C  
                          __end_of_crc8 193C           receiveSendMultiEventCANAL@crc 0081  
                          __end_of_atoi 3406           receiveSendMultiEventCANAL@pos 0082  
                          __end_of_main 3B10                            __end_of_init 1BFA  
                          __end_of_itoa 1974                            __end_of_utoa 27B0  
                   doModeVerbose@ifmode 02B6                     doModeVerbose@maskno 02A8  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 009D  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A3  
                     ??_ECANSendMessage 0072                          ?i1_WriteTimer0 002B  
            writeRegisterExtended@value 00BB                                  ??_crc8 006A  
                 getVSCPFrame@pvscptype 0074                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0064                                  ??_main 00CF  
                     readRegister@value 00B9                                  ??_init 0064  
                                ??_itoa 0076                                  ??_utoa 006D  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 00F4                       __RegsToCANID@type 002E  
                  _can_transmitOverruns 0001              ECANReceiveMessage@msgFlags 0034  
                         ?_readRegister 00B6               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1164 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B9  
            ECANReceiveMessage@savedPtr 0035                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 7CB1  
                                STR_101 7CF4                                  STR_110 7CF4  
                                STR_102 7229                                  STR_103 760A  
                                STR_111 756F                                  STR_112 7C7F  
                                STR_104 7CF4                                  STR_200 7C64  
                                STR_120 7BBA                                  STR_201 7CED  
                                STR_113 7C9D                                  STR_121 7C85  
                                STR_105 74AA                                  STR_202 718A  
                                STR_106 7CF4                                  STR_114 7CDC  
                                STR_122 7BFD                                  STR_130 7769  
                                STR_210 737D                                  STR_131 7C7F  
                                STR_123 7847                                  STR_107 7654  
                                STR_115 7403                                  STR_211 71F6  
                                STR_203 7047                                  STR_108 7CF4  
                                STR_140 7C64                                  STR_124 7CC0  
                                STR_116 7C05                                  STR_132 787E  
                                STR_220 7521                                  STR_212 725B  
                                STR_204 70EC                                  STR_141 7CED  
                                STR_133 7A5A                                  STR_213 780B  
                                STR_125 77CC                                  STR_109 7679  
                                STR_117 74D2                                  STR_221 7482  
                                STR_205 71C2                                  STR_150 7CED  
                                STR_126 7C97                                  STR_142 7BF5  
                                STR_134 7BD5                                  STR_118 7B86  
                                STR_230 76E3                                  STR_206 7548  
                                STR_222 734E                                  STR_214 728D  
                                STR_207 6E6F                                  STR_119 7C7F  
                                STR_143 7C6B                                  STR_151 7C3A  
                                STR_135 7BDD                                  STR_127 78B4  
                                STR_215 73AB                                  STR_231 731F  
                                STR_223 6E0E                                  STR_240 718A  
                                STR_152 7C64                                  STR_144 7CED  
                                STR_136 7C79                                  STR_128 7BED  
                                STR_160 7B09                                  STR_216 7900  
                                STR_208 7863                                  STR_232 72F0  
                                STR_224 6ED9                                  STR_241 6E53  
                                STR_153 7CED                                  STR_137 7CF2  
                                STR_129 7C8B                                  STR_161 7C72  
                                STR_145 7C33                                  STR_209 73D7  
                                STR_217 700F                                  STR_233 6E96  
                                STR_225 6D7A                                  STR_146 7C64  
                                STR_170 7CE0                                  STR_138 7CF0  
                                STR_162 7CE0                                  STR_154 7C2C  
                                STR_242 7B4E                                  STR_250 7ABE  
                                STR_218 79C0                                  STR_226 7918  
                                STR_234 72BF                                  STR_171 718A  
                                STR_163 718A                                  STR_155 7C64  
                                STR_147 7CED                                  STR_251 7CFC  
                                STR_139 7C41                                  STR_243 7BE5  
                                STR_219 7727                                  STR_235 707E  
                                STR_227 6D2C                                  STR_156 7CED  
                                STR_244 7CF8                                  STR_252 7CF6  
                                STR_148 7BC3                                  STR_260 7BA6  
                                STR_164 7B3D                                  STR_228 7A46  
                                STR_172 7A31                                  STR_180 79A8  
                                STR_236 6F5E                                  STR_253 718A  
                                STR_157 7CF4                                  STR_149 7C64  
                                STR_173 7C72                                  STR_165 7C72  
                                STR_181 7C15                                  STR_245 7CE4  
                                STR_261 79EE                                  STR_237 75BD  
                                STR_229 6DC7                                  _EEDATA 000FA8  
                                STR_262 718A                                  STR_190 7CE0  
                                STR_182 7CE0                                  STR_174 7CE0  
                                STR_166 7CE0                                  STR_246 7CFA  
                                STR_254 7B9C                                  STR_158 7B91  
                                STR_238 6E53                                  STR_255 718A  
                                STR_247 718A                                  STR_191 718A  
                                STR_183 718A                                  STR_175 718A  
                                STR_167 718A                                  STR_159 7CD4  
                                STR_263 7B1B                                  STR_239 7899  
                                STR_256 7C25                                  STR_248 7B6C  
                                STR_264 7B2C                                  STR_168 7A1B  
                                STR_176 79D7                                  STR_184 7990  
                                STR_192 78E7                                  STR_249 718A  
                                STR_193 7C64                                  STR_169 7C72  
                                STR_185 7C15                                  STR_257 7C1D  
                                STR_177 7C15                                  STR_194 7CED  
                                STR_186 7CE0                                  STR_178 7CE0  
                                STR_258 7B7A                                  STR_195 718A  
                                STR_187 718A                                  STR_179 718A  
                                STR_259 7BB0                                  STR_188 7990  
                                STR_196 6F9C                                  STR_189 7C15  
                                STR_197 7158                                  STR_198 6FD6  
                                STR_199 7978                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 320A                                  _CIOCON 000F73  
                                ?_ultoa 0076            ??_sendVSCPDriverCommandReply 0070  
                  __end_of_fifo_getFree 26F4                           ?_init_app_ram 002B  
                                i1l1450 4708                                  i1l1460 4762  
                                i1l1452 4716                                  _MDSEL0 007BBE  
                                i1l1525 3676                                  _MDSEL1 007BBF  
                                i1l1526 36FE                                  i1l1470 47EC  
                                i1l1462 4772                                  i1l1454 472A  
                                i1l1446 487A                                  i1l1471 4806  
                                i1l1439 46BA                                  i1l1456 473E  
                                i1l1449 4788                                  i1l1458 4752  
                                i1l1493 380C                                  i1l1832 17D4  
                                i1l1498 20AA                                  i1l6325 3680  
                                i1l6317 3640                                  i1l6335 36DA  
                                i1l6337 36E4                              _OpenTimer0 17E4  
                                i1l6349 26B2                                  i1l9331 206A  
                                i1l9323 2044                                  i1l9333 2074  
                                i1l9325 204C                                  i1l9341 208C  
                                i1l9335 207A                                  i1l9327 2056  
                                i1l9337 2080                                  i1l9329 2060  
                                i1l9355 37A8                                  i1l9603 46E8  
                                i1l9611 46F6                                  i1l9605 46F2  
                                i1l9705 4864                                  i1l9655 479C  
                                i1l9665 47BC                                  i1l9691 4834  
                                i1l9683 4808                                  i1l9587 46A8  
                                i1l9597 46D2                                  i1l9699 484E  
                       _init_app_eeprom 2396                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 0032  
                ECANReceiveMessage@mode 0039                  ECANReceiveMessage@temp 003A  
                                _RXBnIE 007D19                                  _RXBnIF 007D21  
                     getVSCPFrame@pData 007C              ??_sendVSCPDriverErrorFrame 006F  
                     getVSCPFrame@pSize 007A                      _doModeVerbose$1124 0294  
                    _doModeVerbose$1141 0298                      _doModeVerbose$1151 029C  
                    _doModeVerbose$1136 0296                      _doModeVerbose$1147 029A  
                    _doModeVerbose$1176 029E                   ?_ECANSetOperationMode 002B  
                    __CANIDToRegs@Value 0069                      __size_of_Interrupt 0250  
              readRegisterExtended@page 00B6                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 002C                          getCANFrame@pid 0071  
                                ___wmul 18D4                              _bInitiated 00EE  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0068  
                             ??_calcCRC 006F                                  _cmdbuf 0104  
                             ??___llmod 0075                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007A                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1273 0099  
         _receivePrintEventVerbose$1283 009D           _receivePrintEventVerbose$1293 00A1  
         _receivePrintEventVerbose$1278 009B           _receivePrintEventVerbose$1288 009F  
         _receivePrintEventVerbose$1298 00A3                                  _memcpy 1AE6  
                                _memset 1848                                  clear_0 1F14  
                                clear_1 1F28                                  clear_2 1F3A  
                                clear_3 1F46                                  clear_4 1F52  
                                clear_5 1F5E                           ?_sendCANFrame 008F  
                                _strcat 1D34                                  _strchr 1EAA  
                                _strcpy 18A4                                  _strlen 1AA6  
                                _wrkbuf 0154                                  _strtok 24AE  
                                _strspn 1B28                             Interrupt@id 0050  
   __size_of_sendVSCPDriverCommandReply 00C4                               ??_isdigit 0060  
                receiveSendEventSLCAN@i 008B                        __end_of_printMDF 25D6  
                          __mediumconst 6CB4                          ??_readRegister 00BA  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 002B  
               __size_of_nibbleFromChar 003E                                  ultoa@c 0082  
                                ultoa@v 007E                            ?_printErrors 002B  
                             ??_sprintf 007E                               ??_strichr 0065  
                             ??_strcspn 006A                               ??_toupper 0060  
                        ??_init_app_ram 0063                               ??_stristr 0071  
            ??_sendVSCPModeCapabilities 006F              doModeVerbose@mask_priority 0291  
                      __end_of_strnicmp 1FD4                              __accesstop 0060  
               __end_of__initialization 1F64                    _printFirmwareVersion 2420  
                       writeEEPROM@data 0062                   __size_of_getVSCPFrame 0086  
             receiveSendEventCANAL@data 0072                    doModeVerbose@id_1217 02A3  
                            _WriteUSART 1782                          __pcstackCOMRAM 002B  
              __size_of_printStatistics 01A8                    _printStatistics$1372 0096  
                  _printStatistics$1366 0094                    _printStatistics$1384 009A  
                  _printStatistics$1378 0098                   _uart_transmitOverruns 0009  
                       ??i1_WriteTimer0 002D                           __end_of_ultoa 3006  
                            __end_ofPL2 6B78                              __end_ofPL4 6B96  
                            __end_ofPL6 6BA6                              __end_ofPL8 6BC2  
                        ??_sendCANFrame 0096                       __end_of_ReadUSART 17E4  
                         ?__RegsToCANID 002B             __size_of_ECANReceiveMessage 01FA  
                    sendVSCPFrame@pData 009C                         readRegister@reg 00B6  
                  sendVSCPDriverAck@crc 006F                      __size_of_findNodes 00F4  
                        doModeSLCAN@dlc 00A1                      __size_of_fifo_init 0030  
                    __size_of_fifo_read 00A2                  getVSCPFrame@pvscpclass 0072  
               __end_of_init_app_eeprom 2420                       __end_of_Interrupt 0268  
                         ReadUSART@data 002B                      readRegister@nodeid 00BE  
                        _status_led_cnt 000F                      __RegsToCANID@Value 0031  
                            _crc8_table 0300                       __end_of_OpenUSART 1DE8  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C4  
                       setFilter@filter 006A                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 2D86                              _doModeVscp 412A  
                               ??_ultoa 007E                            _getVSCPFrame 2310  
                            __pbssBANK0 00D1                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 002B                              calcCRC@crc 0070  
                            calcCRC@len 006E                              __pnvCOMRAM 0055  
                 ?_printFirmwareVersion 002B                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 006A                            __IT_INT_MASK 0015  
                         setFilter@eidh 006D                           setFilter@eidl 006E  
                          __IT_SAVE_BSR 0016                           setFilter@sidh 006B  
                         setFilter@sidl 006C                              _canrxcount 00F0  
                          ?_writeEEPROM 0060                        ??_doModeVscpNode 0060  
                            _nTimeStamp 00F2             ?_receiveSendMultiEventCANAL 002B  
              __end_of_hexStringToBytes 2670                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 0014                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 2850                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 310E                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0062                          ??__RegsToCANID 002F  
                 sendVSCPFrame@priority 009A                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 0060                                 ?_strchr 0060  
                               ?_strcpy 0060                                 ?_strlen 0060  
                               ?_strtok 006C                                 ?_strspn 0066  
                            _cntRxBytes 00D5                              _cntTxBytes 00DD  
                               i1l13001 0068                                 i1l13011 00B2  
                               i1l13003 0078                                 i1l13021 00E6  
                               i1l13013 00B6                                 i1l13005 0084  
                               i1l13031 0116                                 i1l13015 00C2  
                               i1l13007 0090                                 i1l13033 0122  
                               i1l13025 00F8                                 i1l13017 00D2  
                               i1l13009 00A2                                 i1l13051 0188  
                               i1l13043 0152                                 i1l13027 0104  
                               i1l13019 00DA                      __size_of_printGUID 00F0  
                               i1l13061 01D8                                 i1l13053 01A4  
                               i1l13045 015C                                 i1l13037 0134  
                               i1l13063 01FC                                 i1l13055 01AC  
                               i1l13047 016C                                 i1l13039 0140  
                   ?_sendVSCPDriverNack 002B                                 i1l13065 0244  
                               i1l13057 01B4                                 i1l13049 017E  
                               i1l13059 01D0                                 i1l13069 0248  
                               i1l12995 0034                                 i1l12997 003C  
                               i1l12999 0042                              _fifo_write 362E  
                    __size_of_printHelp 01C0                      __size_of_printMode 0076  
                 sendVSCPFrame@vscptype 0098                   __size_of_fifo_getFree 0084  
               doModeVerbose@value_1159 02A9                       sendCANFrame@pdata 0094  
                            _made_table 000D                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 203E                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 2E4A  
            _sendVSCPDriverCommandReply 2D86                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 3414  
      __size_of_receiveVSCPModeCanalMsg 00DC                  __size_of_doModeVerbose 1294  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00B6  
      __end_of_sendVSCPDriverErrorFrame 2B0C                              _readEEPROM 175E  
        __size_of_receiveSendEventCANAL 013C           __end_of_receiveSendEventCANAL 39A4  
                  ??_sendVSCPDriverNack 006F              printFirmwareVersion@wrkbuf 0078  
        __size_of_receiveSendEventSLCAN 017A                         _ECANSendMessage 3B10  
         __end_of_receiveSendEventSLCAN 3F74                                 __Hparam 0000  
                     __end_of_findNodes 310E                                 __Lparam 0000  
                     __end_of_fifo_init 1A96                       __end_of_fifo_read 2BBC  
                         ??_getCANFrame 0071                             ?_WriteUSART 002B  
            receiveVSCPModeCanalMsg@dlc 00B6                    __end_of_readRegister 2CB6  
                             ?_printMDF 002B                                 _bSilent 0101  
             receiveVSCPModeCanalMsg@id 00B2                           ??_doModeSLCAN 0096  
                               ___lldiv 212A                         __size_of___wmul 0022  
                               _calcCRC 1876                         getCANFrame@pdlc 006D  
                               ___llmod 1E48                                 ___lwdiv 1BFA  
                             _FIFOEMPTY 007BA7                                 ___lwmod 19AC  
                 ?_readRegisterExtended 00B6             printNodeFirmwareVersion@buf 00C0  
                  __end_of_init_app_ram 1CDC                            _fifo_getFree 2670  
                          init_crc8@crc 0064                                 __pcinit 1F0C  
                       __size_of_memcpy 0042                         __size_of_memset 002E  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                             ?_strnicmp 0064                                 __ptext0 39A4  
                               __ptext1 1742                                 __ptext2 4E22  
                               __ptext3 25D6                                 __ptext4 1A28  
               receiveSendEventCANAL@id 007B                                 __ptext5 3DFA  
                               __ptext6 2F34                                 __ptext7 412A  
                               __ptext8 2D86                                 __ptext9 29A6  
                               crc8@crc 0067           printNodeFirmwareVersion@value 00C3  
                     ??_printStatistics 0094                               _T0CONbits 000FD5  
                       __size_of_strcat 0058                         __size_of_strchr 0062  
                       __size_of_strcpy 0030                         __size_of_strlen 0040  
                     __end_of_hexpowers 6D2C                         __size_of_strtok 0092  
                       __size_of_strspn 0044                                 _dpowers 6CE4  
                     __end_of_init_crc8 203E                                 _isdigit 1802  
        printNodeFirmwareVersion@nodeid 00BF                     __end_of_WriteTimer0 1782  
                        _nibbleFromChar 1A28                        ?_init_app_eeprom 002B  
                               _sprintf 5190        __end_of_sendVSCPModeCapabilities 2A5C  
                     __end_of_setFilter 4682                                 _strichr 19EA  
                        doModeVerbose@c 02AC                          doModeVerbose@i 02AA  
                        doModeVerbose@p 02B7                                 _strcspn 1B6C  
                               _toupper 1796                             ?_doModeVscp 002B  
                               _stristr 2218                    __size_of_printBinary 004A  
                  end_of_initialization 1F64                            Interrupt@dlc 004F  
                     __end_of_octpowers 6CE4                    __size_of_printErrors 02D6  
                               memcpy@d 0066                                 memcpy@n 0064  
                               memcpy@s 0068                  ??_printFirmwareVersion 0078  
                               itoa@buf 0070                               i1u1132_25 46B0  
                             i1u1132_27 46B2                                 memset@c 0062  
                               itoa@val 0072                                 memset@n 0064  
                               memset@p 0066                           __Lmediumconst 6CB4  
                             i1u1092_25 3770                    __end_of_sendCANFrame 19AC  
                             i1u1093_25 3780                               i1u1094_25 37AC  
                             i1u1700_20 0132                               i1u1700_21 0130  
                             i1u1701_20 0140                               i1u1701_21 013E  
                             i1u1710_20 01D0                               i1u1702_20 0150  
                             i1u1710_21 01CE                               i1u1702_21 014E  
                             i1u1711_20 01D8                               i1u1703_20 015C  
                             i1u1711_21 01D6                               i1u1703_21 015A  
                             i1u1712_20 01FC                               i1u1704_20 016C  
                             i1u1712_21 01FA                               i1u1704_21 016A  
                             i1u1705_20 017E                               i1u1705_21 017C  
                             i1u1706_20 0188                               i1u1706_21 0186  
                             i1u1707_20 01A4                               i1u1707_21 01A2  
                             i1u1708_20 01AC                               i1u1708_21 01AA  
                             i1u1709_20 01B4                               i1u1709_21 01B2  
                             i1u1690_20 003C                               i1u1690_21 003A  
                             i1u1691_20 0068                               i1u1691_21 0066  
                             i1u1692_20 0084                               i1u1692_21 0082  
                             i1u1693_20 00C2                               i1u1693_21 00C0  
                             i1u1694_20 00D2                               i1u1694_21 00D0  
                             i1u1695_20 00E6                               i1u1695_21 00E4  
                             i1u1696_20 00F6                               i1u1696_21 00F4  
                             i1u1697_20 0104                               i1u1697_21 0102  
                             i1u1698_20 0114                               i1u1698_21 0112  
                             i1u1699_20 0122                               i1u1699_21 0120  
                   _can_receiveOverruns 00D1                 receiveSendEventSLCAN@id 0086  
                     __end_of_printGUID 32FA                         ___lldiv@divisor 0064  
                     __end_of_printHelp 44A4                         ___lldiv@counter 006C  
                     __end_of_printMode 212A                       ECANSendMessage@id 006A  
                     ECANSendMessage@pb 0073            __size_of_sendEscapedUartData 0060  
                             _RXF10EIDH 000D76                               _RXF10EIDL 000D77  
                             _RXF11EIDH 000D7A                               _RXF11EIDL 000D7B  
                            ??_printMDF 00BF                               _RXF12EIDH 000D82  
                             _RCSTAbits 000FAB                               _RXF12EIDL 000D83  
                             _RXF13EIDH 000D86                               _RXF13EIDL 000D87  
                             _RXF14EIDH 000D8A                               _RXF14EIDL 000D8B  
                             _RXF15EIDH 000D92                               _RXF15EIDL 000D93  
                             _RXF10SIDH 000D74                               _RXF10SIDL 000D75  
                             _RXF11SIDH 000D78                               _RXF11SIDL 000D79  
                             _RXF12SIDH 000D80                               _RXF12SIDL 000D81  
                               postdec1 000FE5                                 postdec2 000FDD  
                             _RXF13SIDH 000D84                               _RXF13SIDL 000D85  
                             _RXF14SIDH 000D88                               _RXF14SIDL 000D89  
               __size_of_ECANInitialize 0080                               _RXF15SIDH 000D90  
                             _RXF15SIDL 000D91                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                     __end_of_putsUSART 1D34                      __ECANPointBuffer@b 002E  
                         _doModeVerbose 58D0                                 utoa@buf 0067  
     __size_of_printNodeFirmwareVersion 00D0                                 utoa@val 0069  
             ?_printNodeFirmwareVersion 002B                           _sendVSCPFrame 28F0  
                               strlen@s 0060                              _sequencyno 00F3  
                            _timekeeper 00E5                               _RXM0EXIDM 0078CB  
                               strspn@i 006A                              ??_strnicmp 006A  
                   __end_of_getCANFrame 2218                              findNodes@i 00C9  
                __end_of_nibbleFromChar 1A66                     __end_of_doModeSLCAN 5184  
                           ?_fifo_write 002B                              fifo_init@f 0064  
         __size_of_vscp_restoreDefaults 0008                              fifo_read@f 006C  
                            fifo_read@i 006A                              fifo_read@p 0068  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                ?_writeRegisterExtended 00B6       sendVSCPDriverCommandReply@cmdCode 006F  
                   __size_of_WriteUSART 0014                       readEEPROM@address 0060  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 3C7E  
                  _uart_receiveOverruns 0005                _receivePrintEventVerbose 488A  
                            _vscpNodeId 01AE                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 380E                             ?_readEEPROM 0060  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 002D  
                     doModeVerbose@page 02AD                       doModeVerbose@preg 0284  
                        _init_crc8$2082 0060                  ??_readRegisterExtended 00BD  
                        ?_doModeVerbose 002B                          ?_sendVSCPFrame 0096  
                  __size_of_writeEEPROM 0026                          __end_of___wmul 18F6  
                   __size_of_doModeVscp 01AA                             _WriteTimer0 1770  
                        __end_of_memcpy 1B28                          __end_of_memset 1876  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 002B  
                       ?_nibbleFromChar 002B                               ___DCDelay 0055  
                        __end_of_strcat 1D8C                          __end_of_strchr 1F0C  
                        __end_of_strcpy 18D4                          __end_of_strlen 1AE6  
              doModeVerbose@filter_type 028F                          __end_of_strtok 2540  
                        __end_of_strspn 1B6C                             __end_ofPL10 6BD0  
                           __end_ofPL20 42E4                             __end_ofPL12 6C1A  
                           __end_ofPL30 6C3E                             __end_ofPL22 3414  
                           __end_ofPL14 5820                             __end_ofPL40 381C  
                           __end_ofPL32 35EE                             __end_ofPL24 5856  
                           __end_ofPL16 372C                             __end_ofPL50 2850  
                           __end_ofPL42 6C6C                             __end_ofPL34 2BDA  
                           __end_ofPL26 3DE8                             __end_ofPL18 5830  
                           __end_ofPL60 6CB4                             __end_ofPL52 35FE  
                           __end_ofPL44 6C86                             __end_ofPL36 6C50  
                           __end_ofPL28 6C2A                             __end_ofPL70 382E  
                           __end_ofPL62 589C                             __end_ofPL54 3610  
                           __end_ofPL46 5870                             __end_ofPL38 373A  
                           __end_ofPL80 3856                             __end_ofPL72 3842  
                           __end_ofPL64 24AE                             __end_ofPL56 6C9E  
                           __end_ofPL48 28F0                             __end_ofPL90 1906  
                           __end_ofPL82 3DFA                             __end_ofPL74 301A  
                           __end_ofPL66 2702                             __end_ofPL58 5886  
                           __end_ofPL92 374A                             __end_ofPL84 3868  
                           __end_ofPL76 330E                             __end_ofPL68 58AA  
                           __end_ofPL94 1AA6                             __end_ofPL86 58BC  
                           __end_ofPL78 3624                             __end_ofPL96 3F82  
                           __end_ofPL88 5190                             __end_ofPL98 2B1A  
                   start_initialization 1F0C                               _ReadUSART 17C6  
                       findNodes@nFound 00C7                   doModeVerbose@reg_1158 02A2  
                 doModeVerbose@filterno 02A7                 _receiveVSCPModeCanalMsg 2E58  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A2  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0067  
            readRegisterExtended@nodeid 00C1                               _OpenUSART 1D8C  
                   sendVSCPFrame@nodeid 0099                         ___llmod@divisor 0071  
                 __size_of_readRegister 00CE                         ___llmod@counter 0075  
                 ECANReceiveMessage@ptr 003B                     __size_of_fifo_write 00D2  
                 __size_of_init_app_ram 004E                          _findNodes$1468 00C5  
              __end_of__ECANPointBuffer 20B4                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 21A0                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 4E22               ?_sendVSCPModeCapabilities 002B  
            __end_of_ECANReceiveMessage 487C                                ??_memcpy 0066  
                   readRegister@timeout 00B7                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0293  
                 __end_ofi1_WriteTimer0 175E                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 1802                                ??_strtok 0070  
                              ??_strspn 006A                     __size_of_readEEPROM 0012  
                           __pbssBIGRAM 0400                             __pbssCOMRAM 0001  
                            ?_ReadUSART 002B                         __IT_SAVE_STATUS 0017  
                         __pcstackBANK0 0060                           __pcstackBANK1 01B2  
                         __pcstackBANK2 0280                     __end_of__stringdata 7CFE  
                          _readRegister 2BE8                            _isdigit$2903 0061  
                 __size_of_sendCANFrame 0038             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006A  
                     sendVSCPFrame@size 009B                            _init_app_ram 1C8E  
                            ?_Interrupt 002B                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK0 00F5  
                         __IT_SAVE_WREG 0018                        _ledFunctionality 001A  
              doModeVerbose@nodeid_1171 02AF                doModeVerbose@nodeid_1156 028D  
                          setFilter@val 0060                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 01B2           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 3F82                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 009E                          _ECANInitialize 2290  
                     _sendVSCPDriverAck 27B0                           __pmediumconst 6CB4  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 301A  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 1A66                               _fifo_read 2B1A  
                    ?_sendVSCPDriverAck 002B                       __size_of_printMDF 0096  
                           __pintcodelo 0018                            _sendCANFrame 1974  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 002B               ??_receiveVSCPModeCanalMsg 0096  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00BF                     _sendEscapedUartData 1DE8  
                             _hexpowers 6D0C                        ___lwdiv@quotient 0065  
                             _init_crc8 1FD4                   __size_of__RegsToCANID 00C4  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 00D9  
                          ??_doModeVscp 00B7                                ?_strcspn 0066  
                              ?_toupper 002B                                ?_stristr 006D  
                    __end_of_WriteUSART 1796                          __size_of_ultoa 00D2  
                           _cntTxFrames 00E1                          ___wmul@product 0064  
                sendVSCPFrame@vscpclass 0096                               _setFilter 44A4  
                           strnicmp@len 0068                               _octpowers 6CB4  
                              _PIE1bits 000F9D             __size_of_sendVSCPDriverNack 0092  
                __end_of_ECANInitialize 2310               __end_of_sendVSCPDriverAck 2842  
                              i1u610_25 3650                                i1u611_25 3662  
                              i1u615_25 2690                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 3868                                _PIR2bits 000FA1  
                      ECANSendMessage@i 008C                        ECANSendMessage@j 0087  
                  ?_sendEscapedUartData 006C                   _receiveSendEventSLCAN 3DFA  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62             receiveSendMultiEventCANAL@i 007B  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0070  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 006E                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 320A  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00C4                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 002B  
                             _printHelp 42E4                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 20B4  
                            ?_fifo_init 0060                              ?_fifo_read 0060  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 42D4  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 35DA  
                             _putsUSART 1CDC                             __stringdata 6D2C  
                     ___wmul@multiplier 0060                            __RegsToCANID 374A  
                             _vscpClass 01AC                 ??_writeRegisterExtended 00BD  
                          ??_fifo_write 0030                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 0094                             ??_ReadUSART 002B  
                   getVSCPFrame@pNodeId 0076                           ??_printBinary 0061  
                      doModeVerbose@reg 02AE                           ??_printErrors 0094  
                            ?_init_crc8 002B                               _rwtimeout 0103  
             writeRegisterExtended@page 00B6                          Interrupt@flags 0054  
                              ___DCByte 0019    __end_of_receiveVSCPModeMultiCanalMsg 1742  
 __size_of_receiveVSCPModeMultiCanalMsg 0002            _receiveVSCPModeMultiCanalMsg 1740  
                           ??_Interrupt 003D                 __end_of_printStatistics 412A  
                           ??_OpenUSART 0062            writeRegisterExtended@timeout 00B9  
                          ??_readEEPROM 0062                __size_of_init_app_eeprom 008A  
                            ?_setFilter 0060                         OpenUSART@config 0062  
                        findNodes@value 00C8            __end_of_vscp_restoreDefaults 174C  
                            _EECON1bits 000FA6           __size_of_printFirmwareVersion 0080  
       __end_of_receiveVSCPModeCanalMsg 2F34                         ?_ECANInitialize 002B  
                              __Hrparam 0000                    ECANReceiveMessage@id 0037  
                 ??_sendEscapedUartData 006E                                __Lrparam 0000  
                      __CANIDToRegs@val 0062                      __end_of_fifo_write 3700  
                      __CANIDToRegs@ptr 0060             receiveVSCPModeCanalMsg@data 00AA  
                            ?_printGUID 002B                             doModeVscp@c 00B7  
                            ?_printHelp 002B                              ?_printMode 002B  
                       nibbleFromChar@c 0060                        ??_nibbleFromChar 0060  
                      __size_of___lldiv 0076                        __size_of_calcCRC 002E  
                      __size_of___llmod 0062                        __size_of___lwdiv 004A  
                      __size_of___lwmod 003E                            ?_WriteTimer0 0060  
                      getCANFrame@pdata 006F                              ?_putsUSART 0061  
                       fifo_read@nbytes 0062                              sprintf@idx 0081  
                    __end_of_readEEPROM 1770                   hexStringToBytes@inhex 0067  
                              calcCRC@j 006F                                calcCRC@p 006C  
                            strcat@from 0062                        __size_of_isdigit 0020  
                       ___lwdiv@divisor 0062                         ___lwdiv@counter 0064  
                              __ptext10 1740                                __ptext11 2850  
                              __ptext20 1906                                __ptext12 2E58  
                              __ptext21 1FD4                                __ptext13 1AE6  
                              __ptext30 320A                                __ptext22 58D0  
                              __ptext14 27B0                                __ptext31 2CB6  
                              __ptext23 44A4                                __ptext15 2A5C  
                              __ptext40 4B4C                                __ptext32 1D34  
                              __ptext24 3414                                __ptext16 1876  
                              __ptext41 3F82                                __ptext33 2BE8  
                              __ptext25 1C44                                __ptext17 3868  
                              __ptext50 1796                                __ptext42 330E  
                              __ptext34 28F0                                __ptext26 310E  
                              __ptext18 3C7E                                __ptext51 1AA6  
                              __ptext43 24AE                                __ptext35 1974  
                              __ptext27 18A4                                __ptext19 1DE8  
                              __ptext60 1802                                __ptext52 488A  
                              __ptext44 1B6C                                __ptext36 3B10  
                              __ptext28 301A                                __ptext61 2420  
                              __ptext53 2310                                __ptext45 1B28  
                              __ptext37 351A                                __ptext29 2540  
                              __ptext70 2290                                __ptext62 193C  
                              __ptext54 21A0                                __ptext46 1EAA  
                              __ptext38 1848                                __ptext71 17AC  
                              __ptext63 2710                                __ptext55 2B1A  
                              __ptext47 2218                                __ptext39 42E4  
                              __ptext80 1A66                                __ptext72 17E4  
                              __ptext64 19AC                                __ptext56 5190  
                              __ptext48 19EA                                __ptext73 1D8C  
                              __ptext65 1BFA                                __ptext57 18D4  
                              __ptext49 1F6E                                __ptext82 174C  
                              __ptext74 1770                                __ptext66 20B4  
                              __ptext58 1E48                                __ptext83 2670  
                              __ptext75 1744                                __ptext67 1CDC  
                              __ptext59 212A                                __ptext84 4682  
                              __ptext76 2396                                __ptext68 1782  
                              __ptext85 374A                                __ptext77 1822  
                              __ptext69 1BB0                                __ptext86 203E  
                              __ptext78 1C8E                                __ptext87 362E  
                              __ptext79 175E                                __ptext88 17C6  
              receiveSendEventCANAL@dlc 007F                receiveSendEventCANAL@crc 0080  
                        printMDF@nodeid 00BF                           ?_getVSCPFrame 0072  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C3                     __end_of_printBinary 1C8E  
                         __size_of_crc8 0036                           __size_of_atoi 00F8  
                         __size_of_main 016C                           __size_of_init 004A  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 002B  
                   __end_of_printErrors 4E22                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 002B                              strnicmp@s1 0064  
                            strnicmp@s2 0066                             _inputBuffer 0200  
            __size_of_sendVSCPDriverAck 0092          receiveSendMultiEventCANAL@data 0072  
                ?_receiveSendEventSLCAN 002B                           ??_writeEEPROM 0063  
              _printNodeFirmwareVersion 2CB6                     ECANSendMessage@data 006E  
              ECANSendMessage@tempBSEL0 0088                                _printMDF 2540  
                             printMDF@i 00C3                               printMDF@p 00C1  
                          ?_getCANFrame 006D                     ECANSendMessage@mode 0085  
                   ECANSendMessage@temp 008B                       ?__ECANPointBuffer 002B  
          ??_receiveSendMultiEventCANAL 0072                                atoi@sign 006A  
                           ??_findNodes 00C5                            ?_doModeSLCAN 002B  
                           ??_fifo_init 0064                             ??_fifo_read 0064  
                              _vscpData 01A4           __size_of_readRegisterExtended 00FC  
                              main@argc 00CA                                main@argv 00CC  
                              _vscpSize 01B0                      ??__ECANPointBuffer 002E  
                              _vscpType 01B1                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006F                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A0                                _strnicmp 1F6E  
                      init_app_eeprom@i 0063             writeRegisterExtended@nodeid 00C1  
                         Interrupt@data 0046                         _serialInputFifo 0023  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 0060  
                   ECANReceiveMessage@i 0038                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A5  
                              itoa@base 0074                                isdigit@c 0062  
                    _ECANReceiveMessage 4682                                memset@p1 0060  
                           ??_init_crc8 0060                               ultoa@base 007C  
                        ??_getVSCPFrame 007E               __size_of_hexStringToBytes 009A  
                       sendVSCPFrame@id 00B2                                intlevel1 0000  
                             sprintf@ap 0088                               sprintf@sp 0076  
                  hexStringToBytes@size 0066                               strchr@chr 0062  
                      ?_printStatistics 002B                receiveSendEventSLCAN@dlc 008A  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 0032                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00C0  
   __size_of_receiveSendMultiEventCANAL 015A                           fifo_getFree@f 0035  
                             strcspn@s1 0066                               strcspn@s2 0068  
    receiveSendMultiEventCANAL@msgcount 007A                 ECANSendMessage@msgFlags 0071  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008D                       ??_init_app_eeprom 0063  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 00BF  
                        readEEPROM@data 0062                             ??_printHelp 0065  
                           ??_printMode 0065                _sendVSCPDriverErrorFrame 2A5C  
                         ?_fifo_getFree 002B                  ECANSendMessage@dataLen 0070  
                   __end_of_writeEEPROM 1848                     __ECANPointBuffer@pt 002F  
                  ??_ECANReceiveMessage 0035                             ??_putsUSART 0063  
                              utoa@base 006B                                ultoa@buf 0076  
                              ultoa@val 0078                           fifo_init@size 0062  
                              sprintf@c 0091                                sprintf@f 0078  
                   hexStringToBytes@buf 0064                                strcat@cp 0064  
                   hexStringToBytes@len 006C                          _doModeVscpNode 1742  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 4B4C  
                ECANSendMessage@buffers 0086                        ___lldiv@quotient 0068  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 17C6  
                  _vscp_restoreDefaults 1744                            printGUID@buf 00C0  
                              strcpy@cp 0064                                strlen@cp 0062  
                              strcpy@to 0060                         ___lwmod@counter 0064  
                              strcspn@i 006A                                toupper@c 0060  
                           _printBinary 1C44                                strtok@s1 006C  
                              strtok@s2 006E                                strspn@s1 0066  
                              strspn@s2 0068                              _RXM1EXIDEN 0078EB  
                              strtok@sp 0011                  ECANSendMessage@tempPtr 0089  
                           _printErrors 4B4C                            fifo_init@buf 0060  
                          fifo_read@buf 0060           sendVSCPDriverCommandReply@crc 0071  
                          __CANIDToRegs 351A                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 0013               readRegisterExtended@value 00BB  
              _sendVSCPModeCapabilities 29A6                __size_of_ECANSendMessage 016E  
